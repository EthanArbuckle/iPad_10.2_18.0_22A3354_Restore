uint64_t CI::GeneralKernelImage::avmatte(CI::GeneralKernelImage *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  int type;
  uint64_t v8;
  _QWORD *v9;

  v1 = **((unsigned int **)this + 15);
  if ((int)v1 < 1)
    return 0;
  v3 = 0;
  for (i = 24; ; i += 8)
  {
    v5 = *((_QWORD *)this + 14);
    if (*(_BYTE *)(v5 + 12))
    {
      type = CI::KernelArguments::get_type((CI::KernelArguments *)(v5 + 144), v3);
      goto LABEL_7;
    }
    if (v3 < *(int *)(v5 + 20))
      break;
LABEL_8:
    if (v1 == ++v3)
      return 0;
  }
  type = *(_DWORD *)(*(_QWORD *)(v5 + 72) + 4 * v3);
LABEL_7:
  if ((type - 3) < 0xFFFFFFFE)
    goto LABEL_8;
  v8 = *((_QWORD *)this + 15);
  if (v3 > 9)
    v9 = (_QWORD *)(*(_QWORD *)(v8 + 16) + 8 * (v3 - 10));
  else
    v9 = (_QWORD *)(v8 + i);
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 216))(*v9);
}

float CI::GeneralKernelImage::headroom(CI::GeneralKernelImage *this)
{
  uint64_t v1;
  float result;

  if (!*(_BYTE *)(*((_QWORD *)this + 14) + 164))
    return 0.0;
  v1 = (*(uint64_t (**)(CI::GeneralKernelImage *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 232))(v1);
  return result;
}

uint64_t CI::GeneralKernelImage::colorspace(CI::GeneralKernelImage *this)
{
  uint64_t v1;

  if (!*(_BYTE *)(*((_QWORD *)this + 14) + 164))
    return 0;
  v1 = (*(uint64_t (**)(CI::GeneralKernelImage *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 240))(v1);
}

uint64_t CI::GeneralKernelImage::ssmatte(CI::GeneralKernelImage *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  int type;
  uint64_t v8;
  _QWORD *v9;

  v1 = **((unsigned int **)this + 15);
  if ((int)v1 < 1)
    return 0;
  v3 = 0;
  for (i = 24; ; i += 8)
  {
    v5 = *((_QWORD *)this + 14);
    if (*(_BYTE *)(v5 + 12))
    {
      type = CI::KernelArguments::get_type((CI::KernelArguments *)(v5 + 144), v3);
      goto LABEL_7;
    }
    if (v3 < *(int *)(v5 + 20))
      break;
LABEL_8:
    if (v1 == ++v3)
      return 0;
  }
  type = *(_DWORD *)(*(_QWORD *)(v5 + 72) + 4 * v3);
LABEL_7:
  if ((type - 3) < 0xFFFFFFFE)
    goto LABEL_8;
  v8 = *((_QWORD *)this + 15);
  if (v3 > 9)
    v9 = (_QWORD *)(*(_QWORD *)(v8 + 16) + 8 * (v3 - 10));
  else
    v9 = (_QWORD *)(v8 + i);
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 224))(*v9);
}

uint64_t CI::GeneralKernelImage::print_for_graphviz(uint64_t a1, FILE *a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  const char *name;
  int v16;
  _QWORD *v17;
  const __CFDictionary *v18;
  uint64_t result;
  const char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _QWORD v25[5];
  char v26;
  _DWORD *v27;

  if (a4)
    v7 = 32;
  else
    v7 = 10;
  fprintf(a2, "kernel %s", *(const char **)(*(_QWORD *)(a1 + 112) + 24));
  v8 = **(unsigned int **)(a1 + 120);
  if ((int)v8 >= 1)
  {
    v9 = 0;
    v10 = 24;
    do
    {
      v11 = *(_QWORD *)(a1 + 120);
      if (v9 > 9)
        v12 = (_QWORD *)(*(_QWORD *)(v11 + 16) + 8 * (v9 - 10));
      else
        v12 = (_QWORD *)(v11 + v10);
      v13 = (_DWORD *)*v12;
      if ((*(int (**)(_QWORD))(*(_QWORD *)*v12 + 16))(*v12) >= 1
        && (*(int (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13) <= 25
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) == 1)
      {
        goto LABEL_25;
      }
      v14 = *(_QWORD *)(a1 + 112);
      if (*(_BYTE *)(v14 + 12))
      {
        name = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v14 + 144), v9);
      }
      else if ((uint64_t)v9 >= *(int *)(v14 + 20))
      {
        name = 0;
      }
      else
      {
        name = *(const char **)(*(_QWORD *)(v14 + 80) + 8 * v9);
      }
      fprintf(a2, "%c%s", v7, name);
      if ((*(int (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13) < 1
        || (*(int (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13) > 25)
      {
        fputc(61, a2);
        (*(void (**)(_DWORD *, FILE *, _QWORD))(*(_QWORD *)v13 + 32))(v13, a2, 0);
      }
      else
      {
        if (CI_GRAPHVIZ_INTERNAL())
        {
          v16 = v13[25];
LABEL_24:
          fprintf(a2, "=(%d)", v16);
          goto LABEL_25;
        }
        v27 = v13;
        v17 = std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(a3, &v27);
        if (v17)
        {
          v16 = *((_DWORD *)v17 + 6);
          goto LABEL_24;
        }
      }
LABEL_25:
      ++v9;
      v10 += 8;
    }
    while (v8 != v9);
  }
  v18 = (const __CFDictionary *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 40))(*(_QWORD *)(a1 + 112));
  if (v18)
  {
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 0x40000000;
    v25[2] = ___ZNK2CI18GeneralKernelImage18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke;
    v25[3] = &__block_descriptor_tmp_11;
    v25[4] = a2;
    v26 = v7;
    __CFDictionary::for_each(v18, v25);
  }
  result = *(unsigned int *)(a1 + 196);
  if ((_DWORD)result)
  {
    v20 = CI::name_for_format(result);
    result = fprintf(a2, "%coutputFormat=%s", v7, v20);
  }
  v21 = *(_DWORD *)(a1 + 200);
  if (v21)
  {
    if (*(_DWORD *)(a1 + 204))
    {
      v22 = *(_DWORD *)(a1 + 208);
      if (v22)
        result = fprintf(a2, "%cthreadsPerGroup=(%d,%d,%d)", v7, v21, *(_DWORD *)(a1 + 204), v22);
    }
  }
  v23 = *(_DWORD *)(a1 + 212);
  if (v23 && *(_DWORD *)(a1 + 216))
  {
    v24 = *(_DWORD *)(a1 + 220);
    if (v24)
      return fprintf(a2, "%cthreadgroupsPerGrid=(%d,%d,%d)", v7, v23, *(_DWORD *)(a1 + 216), v24);
  }
  return result;
}

void ___ZNK2CI18GeneralKernelImage18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke(uint64_t a1, __CFObject *a2, __CFObject *a3)
{
  __sFILE *v6;
  __sFILE *v7;

  fputc(*(char *)(a1 + 40), *(FILE **)(a1 + 32));
  __CFObject::fprint(a2, *(FILE **)(a1 + 32), v6);
  fputc(61, *(FILE **)(a1 + 32));
  __CFObject::fprint(a3, *(FILE **)(a1 + 32), v7);
}

uint64_t CI::GeneralKernelImage::shape_for_graphviz(CI::GeneralKernelImage *this)
{
  return 1;
}

uint64_t CI::GeneralKernelImage::color_for_graphviz(CI::GeneralKernelImage *this)
{
  return 9;
}

double CI::GeneralKernelImage::extent_unclamped(CI::GeneralKernelImage *this)
{
  return *((double *)this + 19);
}

uint64_t CI::GeneralKernelImage::alpha_one(CI::GeneralKernelImage *this)
{
  return *((unsigned __int8 *)this + 192);
}

uint64_t CI::GeneralKernelImage::output_format(CI::GeneralKernelImage *this)
{
  return *((unsigned int *)this + 49);
}

uint64_t `non-virtual thunk to'CI::GeneralKernelImage::type(CI::GeneralKernelImage *this)
{
  return 13;
}

uint64_t CI::InstanceCounted<(CI::Type)13>::type()
{
  return 13;
}

_QWORD *CI::InstanceCounted<(CI::Type)13>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBB858;
  do
    v1 = __ldaxr(&dword_1ECF872F0[11]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[11]));
  return result;
}

void CI::InstanceCounted<(CI::Type)13>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBB858;
  do
    v1 = __ldaxr(&dword_1ECF872F0[11]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[11]));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::WarpKernelImage::WarpKernelImage(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4, const void *a5, double a6, double a7, double a8, double a9)
{
  unsigned int v18;

  *((_QWORD *)CI::ImageWithChild::ImageWithChild((CI::ImageWithChild *)a1, (CI::Image *)a2) + 14) = off_1E2EBB830;
  do
    v18 = __ldaxr(&dword_1ECF872F0[10]);
  while (__stlxr(v18 + 1, &dword_1ECF872F0[10]));
  *(_QWORD *)a1 = &off_1E2EBC570;
  *(_QWORD *)(a1 + 112) = &unk_1E2EBC6C8;
  *(_QWORD *)(a1 + 120) = a3;
  if (a3 && *(_BYTE *)(a3 + 12))
    CI::Object::ref(a3);
  *(_QWORD *)(a1 + 128) = a4;
  *(double *)(a1 + 136) = a6;
  *(double *)(a1 + 144) = a7;
  *(double *)(a1 + 152) = a8;
  *(double *)(a1 + 160) = a9;
  *(_QWORD *)(a1 + 168) = _Block_copy(a5);
  *(_QWORD *)(a1 + 80) = CI::WarpKernelImage::makeDigest(a2[10], a3, a4, a6, a7, a8, a9);
  *(_QWORD *)(a1 + 88) = CI::WarpKernelImage::makeDigest(a2[11], a3, a4, a6, a7, a8, a9);
  if (!*(_QWORD *)(a3 + 48))
    *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 97) = 0;
  return a1;
}

unint64_t CI::WarpKernelImage::makeDigest(uint64_t a1, uint64_t a2, int *a3, double a4, double a5, double a6, double a7)
{
  unint64_t v10;
  CI::XXHashHelper **v11;
  CI::XXHashHelper **v12;
  int64x2_t v14[5];
  _QWORD v15[4];
  uint64_t __src;

  *(double *)v15 = a4;
  *(double *)&v15[1] = a5;
  *(double *)&v15[2] = a6;
  *(double *)&v15[3] = a7;
  XXH64_reset(v14, 0);
  LODWORD(__src) = 12;
  XXH64_update((uint64_t)v14, (char *)&__src, 4uLL);
  __src = a1;
  XXH64_update((uint64_t)v14, (char *)&__src, 8uLL);
  (*(void (**)(uint64_t, int64x2_t *))(*(_QWORD *)a2 + 64))(a2, v14);
  if (*a3 >= 1)
  {
    v10 = 0;
    v11 = (CI::XXHashHelper **)(a3 + 6);
    do
    {
      v12 = v11;
      if (v10 >= 0xA)
        v12 = (CI::XXHashHelper **)(*((_QWORD *)a3 + 2) + 8 * (v10 - 10));
      CI::Kernel::add_argument_to_digest((CI::Kernel *)v14, *v12, 0);
      ++v10;
      ++v11;
    }
    while ((uint64_t)v10 < *a3);
  }
  XXH64_update((uint64_t)v14, (char *)v15, 0x20uLL);
  return XXH64_digest((uint64_t)v14);
}

void CI::WarpKernelImage::~WarpKernelImage(CI::WarpKernelImage *this)
{
  CI::Object *v2;
  CI::SerialObjectPtrArray *v3;
  unsigned int v4;

  *(_QWORD *)this = &off_1E2EBC570;
  *((_QWORD *)this + 14) = &unk_1E2EBC6C8;
  v2 = (CI::Object *)*((_QWORD *)this + 15);
  if (v2 && *((_BYTE *)v2 + 12))
    CI::Object::unref(v2);
  v3 = (CI::SerialObjectPtrArray *)*((_QWORD *)this + 16);
  if (v3)
  {
    CI::SerialObjectPtrArray::~SerialObjectPtrArray(v3);
    MEMORY[0x194025AAC]();
  }
  _Block_release(*((const void **)this + 21));
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 14) = off_1E2EBB830;
  do
    v4 = __ldaxr(&dword_1ECF872F0[10]);
  while (__stlxr(v4 - 1, &dword_1ECF872F0[10]));
  CI::ImageWithChild::~ImageWithChild(this);
}

{
  CI::WarpKernelImage::~WarpKernelImage(this);
  JUMPOUT(0x194025AACLL);
}

void `non-virtual thunk to'CI::WarpKernelImage::~WarpKernelImage(CI::WarpKernelImage *this)
{
  CI::WarpKernelImage::~WarpKernelImage((CI::WarpKernelImage *)((char *)this - 112));
}

{
  CI::WarpKernelImage::~WarpKernelImage((CI::WarpKernelImage *)((char *)this - 112));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::WarpKernelImage::add_args_to_hash(uint64_t a1, CI::Kernel *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CI::XXHashHelper **v8;
  unsigned int __src;
  uint64_t v11;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 64))(*(_QWORD *)(a1 + 120));
  __src = **(_DWORD **)(a1 + 128);
  v4 = __src;
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = 24;
    do
    {
      v7 = *(_QWORD *)(a1 + 128);
      if (v5 > 9)
        v8 = (CI::XXHashHelper **)(*(_QWORD *)(v7 + 16) + 8 * (v5 - 10));
      else
        v8 = (CI::XXHashHelper **)(v7 + v6);
      CI::Kernel::add_argument_to_digest(a2, *v8, 0);
      ++v5;
      v6 += 8;
    }
    while (v4 != v5);
  }
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 56))(*(_QWORD *)(a1 + 120));
  return XXH64_update((uint64_t)a2, (char *)&v11, 8uLL);
}

CI::Node *CI::WarpKernelImage::render_graph_core(uint64_t a1, CGColorSpace **a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  CI::SerialObjectPtrArray *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t **v17;
  unint64_t *v18;
  int v19;
  uint64_t v20;
  CI::Object *v21;
  CI::Object *v22;
  CI::Object *v23;
  CI::Object *v24;
  CI::Node *result;
  NSObject *v26;
  CI::FillNode *v27;
  int v28;

  v9 = a1 + 120;
  v10 = *(_QWORD **)(a1 + 120);
  if (!(*(uint64_t (**)(_QWORD *))(*v10 + 72))(v10)
    || v10[4]
    || (*((unsigned int (**)(CGColorSpace **))*a2 + 2))(a2) == 77)
  {
    v28 = a5;
    v11 = **(unsigned int **)(a1 + 128);
    v12 = (CI::SerialObjectPtrArray *)operator new();
    CI::SerialObjectPtrArray::SerialObjectPtrArray(v12, v11);
    if ((int)v11 >= 1)
    {
      v13 = 0;
      v14 = 0;
      v15 = 24;
      while (1)
      {
        v16 = *(_QWORD *)(a1 + 128);
        if (v13 > 9)
          v17 = (unint64_t **)(*(_QWORD *)(v16 + 16) + 8 * (v13 - 10));
        else
          v17 = (unint64_t **)(v16 + v15);
        v18 = *v17;
        v19 = (*(uint64_t (**)(unint64_t *))(**v17 + 16))(*v17);
        if (!CI::is_any_TypeImage(v19))
        {
          if ((*(unsigned int (**)(unint64_t *))(*v18 + 16))(v18) == 59)
          {
            CI::Color::vector_in_workingspace((CI::Color *)v18, a2);
            v23 = v22;
            CI::SerialObjectPtrArray::append((uint64_t)v12, v22);
            if (v23)
              CI::Object::unref(v23);
          }
          else
          {
            CI::SerialObjectPtrArray::append((uint64_t)v12, (CI::Object *)v18);
          }
          v20 = v14;
          goto LABEL_20;
        }
        v20 = (v14 + 1);
        if (CI::Image::roi_of_child_intersects_extent(a1, a4, v14))
        {
          v21 = (CI::Object *)CI::ImageToNodeMap::findAndRef(a3, v18[10]);
          CI::SerialObjectPtrArray::append((uint64_t)v12, v21);
          if (!v21)
            goto LABEL_20;
        }
        else
        {
          v21 = (CI::Object *)operator new();
          CI::FillNode::FillNode(v21);
          CI::SerialObjectPtrArray::append((uint64_t)v12, v21);
        }
        CI::Object::unref(v21);
LABEL_20:
        ++v13;
        v15 += 8;
        v14 = v20;
        if (v11 == v13)
          goto LABEL_23;
      }
    }
    v20 = 0;
LABEL_23:
    if (CI::Image::roi_of_child_intersects_extent(a1, a4, v20))
    {
      v24 = (CI::Object *)CI::ImageToNodeMap::findAndRef(a3, *(_QWORD *)(*(_QWORD *)(a1 + 104) + 80));
      CI::SerialObjectPtrArray::append((uint64_t)v12, v24);
      if (!v24)
      {
LABEL_28:
        result = (CI::Node *)CI::WarpKernelNode::append_to_tree(*(_QWORD *)(a1 + 120), (uint64_t)v12, *(const void **)(a1 + 168), *(double *)(a1 + 136), *(double *)(a1 + 144), *(double *)(a1 + 152), *(double *)(a1 + 160));
        if (v28 >= 2)
          return (CI::Node *)CI::NoopNode::append_to_tree_and_unref(result, (uint64_t)a2, 5);
        return result;
      }
    }
    else
    {
      v24 = (CI::Object *)operator new();
      CI::FillNode::FillNode(v24);
      CI::SerialObjectPtrArray::append((uint64_t)v12, v24);
    }
    CI::Object::unref(v24);
    goto LABEL_28;
  }
  v26 = ci_logger_render();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    CI::ColorKernelImage::render_graph_core(v9, (uint64_t)a2, v26);
  v27 = (CI::FillNode *)operator new();
  return CI::FillNode::FillNode(v27);
}

void *CI::WarpKernelImage::restore_resources(void **this, CI::Node *a2)
{
  void *result;

  result = (void *)(*(uint64_t (**)(CI::Node *))(*(_QWORD *)a2 + 16))(a2);
  if ((_DWORD)result == 50)
    return CI::WarpKernelNode::set_roi_callback((uint64_t)a2, this[21]);
  return result;
}

void *CI::WarpKernelNode::set_roi_callback(uint64_t a1, void *aBlock)
{
  const void *v4;
  void *result;

  v4 = *(const void **)(a1 + 96);
  if (v4)
    _Block_release(v4);
  result = _Block_copy(aBlock);
  *(_QWORD *)(a1 + 96) = result;
  return result;
}

uint64_t CI::WarpKernelImage::print_for_graph_core(CI::WarpKernelImage *this, __sFILE *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  const char *name;
  int v13;
  uint64_t result;
  int v15;
  const char *v16;

  fprintf(a2, "warpkernel %s", *(const char **)(*((_QWORD *)this + 15) + 24));
  v4 = **((unsigned int **)this + 16);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = 24;
    do
    {
      v7 = *((_QWORD *)this + 16);
      if (v5 > 9)
        v8 = (uint64_t *)(*(_QWORD *)(v7 + 16) + 8 * (v5 - 10));
      else
        v8 = (uint64_t *)(v7 + v6);
      v9 = *v8;
      if (v5)
        v10 = 44;
      else
        v10 = 40;
      fputc(v10, a2);
      v11 = *((_QWORD *)this + 15);
      if (*(_BYTE *)(v11 + 12))
      {
        name = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v11 + 144), v5);
      }
      else if ((uint64_t)v5 >= *(int *)(v11 + 20))
      {
        name = 0;
      }
      else
      {
        name = *(const char **)(*(_QWORD *)(v11 + 80) + 8 * v5);
      }
      fputs(name, a2);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      if (!CI::is_any_TypeImage(v13))
      {
        fputc(61, a2);
        (*(void (**)(uint64_t, __sFILE *, _QWORD))(*(_QWORD *)v9 + 32))(v9, a2, 0);
      }
      ++v5;
      v6 += 8;
    }
    while (v4 != v5);
  }
  if ((_DWORD)v4)
    fputc(41, a2);
  result = (*(uint64_t (**)(CI::WarpKernelImage *))(*(_QWORD *)this + 144))(this);
  if ((_DWORD)result)
  {
    v15 = (*(uint64_t (**)(CI::WarpKernelImage *))(*(_QWORD *)this + 144))(this);
    v16 = CI::name_for_format(v15);
    return fprintf(a2, " outputFormat=%s", v16);
  }
  return result;
}

uint64_t CI::WarpKernelImage::roi_of_child(uint64_t this, CGRect a2, unsigned int a3)
{
  if (a3 <= 1)
  {
    this = *(_QWORD *)(this + 168);
    if (this)
      return (*(uint64_t (**)(uint64_t, _QWORD, CGPoint, __n128, CGSize, __n128))(this + 16))(this, 0, a2.origin, *(__n128 *)&a2.origin.y, a2.size, *(__n128 *)&a2.size.height);
  }
  return this;
}

uint64_t CI::WarpKernelImage::print_for_graphviz(uint64_t a1, FILE *a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD **v12;
  _DWORD *v13;
  uint64_t v14;
  const char *name;
  int v16;
  int v17;
  _QWORD *v18;
  const __CFDictionary *v19;
  uint64_t result;
  int v21;
  const char *v22;
  _QWORD v23[5];
  char v24;
  _DWORD *v25;

  if (a4)
    v7 = 32;
  else
    v7 = 10;
  fprintf(a2, "warpkernel %s", *(const char **)(*(_QWORD *)(a1 + 120) + 24));
  v8 = **(unsigned int **)(a1 + 128);
  if ((int)v8 >= 1)
  {
    v9 = 0;
    v10 = 24;
    do
    {
      v11 = *(_QWORD *)(a1 + 128);
      if (v9 > 9)
        v12 = (_DWORD **)(*(_QWORD *)(v11 + 16) + 8 * (v9 - 10));
      else
        v12 = (_DWORD **)(v11 + v10);
      v13 = *v12;
      v14 = *(_QWORD *)(a1 + 120);
      if (*(_BYTE *)(v14 + 12))
      {
        name = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v14 + 144), v9);
      }
      else if ((uint64_t)v9 >= *(int *)(v14 + 20))
      {
        name = 0;
      }
      else
      {
        name = *(const char **)(*(_QWORD *)(v14 + 80) + 8 * v9);
      }
      fprintf(a2, "%c%s", v7, name);
      v16 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
      if (CI::is_any_TypeImage(v16))
      {
        if (CI_GRAPHVIZ_INTERNAL())
        {
          v17 = v13[25];
LABEL_20:
          fprintf(a2, "=(%d)", v17);
          goto LABEL_21;
        }
        v25 = v13;
        v18 = std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(a3, &v25);
        if (v18)
        {
          v17 = *((_DWORD *)v18 + 6);
          goto LABEL_20;
        }
      }
      else
      {
        fputc(61, a2);
        (*(void (**)(_DWORD *, FILE *, _QWORD))(*(_QWORD *)v13 + 32))(v13, a2, 0);
      }
LABEL_21:
      ++v9;
      v10 += 8;
    }
    while (v8 != v9);
  }
  v19 = (const __CFDictionary *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 40))(*(_QWORD *)(a1 + 120));
  if (v19)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 0x40000000;
    v23[2] = ___ZNK2CI15WarpKernelImage18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke;
    v23[3] = &__block_descriptor_tmp_12;
    v23[4] = a2;
    v24 = v7;
    __CFDictionary::for_each(v19, v23);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  if ((_DWORD)result)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
    v22 = CI::name_for_format(v21);
    return fprintf(a2, "%coutputFormat=%s", v7, v22);
  }
  return result;
}

void ___ZNK2CI15WarpKernelImage18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke(uint64_t a1, __CFObject *a2, __CFObject *a3)
{
  __sFILE *v6;
  __sFILE *v7;

  fputc(*(char *)(a1 + 40), *(FILE **)(a1 + 32));
  __CFObject::fprint(a2, *(FILE **)(a1 + 32), v6);
  fputc(61, *(FILE **)(a1 + 32));
  __CFObject::fprint(a3, *(FILE **)(a1 + 32), v7);
}

uint64_t CI::WarpKernelImage::type(CI::WarpKernelImage *this)
{
  return 12;
}

uint64_t CI::WarpKernelImage::shape_for_graphviz(CI::WarpKernelImage *this)
{
  return 1;
}

uint64_t CI::WarpKernelImage::color_for_graphviz(CI::WarpKernelImage *this)
{
  return 5;
}

double CI::WarpKernelImage::extent(CI::WarpKernelImage *this)
{
  return *((double *)this + 17);
}

double CI::WarpKernelImage::extent_unclamped(CI::WarpKernelImage *this)
{
  return *((double *)this + 17);
}

uint64_t CI::WarpKernelImage::alpha_one(CI::WarpKernelImage *this)
{
  uint64_t result;
  CGRect v3;

  v3.origin.x = (*(double (**)(_QWORD))(**((_QWORD **)this + 13) + 88))(*((_QWORD *)this + 13));
  result = CGRectIsInfinite(v3);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 128))(*((_QWORD *)this + 13));
  return result;
}

uint64_t CI::WarpKernelImage::is_warp(CI::WarpKernelImage *this)
{
  return 1;
}

uint64_t CI::WarpKernelImage::output_format(CI::WarpKernelImage *this)
{
  uint64_t result;
  CGRect v3;

  v3.origin.x = (*(double (**)(_QWORD))(**((_QWORD **)this + 13) + 88))(*((_QWORD *)this + 13));
  result = CGRectIsInfinite(v3);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 144))(*((_QWORD *)this + 13));
  return result;
}

uint64_t CI::WarpKernelImage::headroom(CI::WarpKernelImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 232))(*((_QWORD *)this + 13));
}

uint64_t CI::WarpKernelImage::colorspace(CI::WarpKernelImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 240))(*((_QWORD *)this + 13));
}

uint64_t CI::ImageWithChild::render_graph_core()
{
  return 0;
}

uint64_t `non-virtual thunk to'CI::WarpKernelImage::type(CI::WarpKernelImage *this)
{
  return 12;
}

uint64_t CI::InstanceCounted<(CI::Type)12>::type()
{
  return 12;
}

_QWORD *CI::InstanceCounted<(CI::Type)12>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBB830;
  do
    v1 = __ldaxr(&dword_1ECF872F0[10]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[10]));
  return result;
}

void CI::InstanceCounted<(CI::Type)12>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBB830;
  do
    v1 = __ldaxr(&dword_1ECF872F0[10]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[10]));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::NoopImage::render_graph_core(unsigned __int8 *a1, uint64_t a2, CI::Object *this)
{
  CI::Node *v5;
  int v6;
  int v7;
  CGRect v9;

  if (this)
    v5 = (CI::Node *)CI::Object::ref((uint64_t)this);
  else
    v5 = 0;
  v6 = a1[120];
  if (v6 == 1)
  {
    v7 = 3;
  }
  else if (v6 == 255)
  {
    v7 = 2;
  }
  else if (a1[121])
  {
    v9.origin.x = (*(double (**)(unsigned __int8 *))(*(_QWORD *)a1 + 88))(a1);
    v7 = !CGRectIsInfinite(v9);
  }
  else
  {
    v7 = 0;
  }
  return CI::NoopNode::append_to_tree_and_unref(v5, a2, v7);
}

void CI::NoopImage::~NoopImage(CI::NoopImage *this)
{
  unsigned int v1;

  *((_QWORD *)this + 14) = off_1E2EBB8A8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[13]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[13]));
  CI::ImageWithChild::~ImageWithChild(this);
}

{
  unsigned int v1;

  *((_QWORD *)this + 14) = off_1E2EBB8A8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[13]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[13]));
  CI::ImageWithChild::~ImageWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::NoopImage::type(CI::NoopImage *this)
{
  return 15;
}

uint64_t CI::NoopImage::shape_for_graphviz(CI::NoopImage *this)
{
  return 3;
}

uint64_t CI::NoopImage::color_for_graphviz(CI::NoopImage *this)
{
  return 0;
}

uint64_t CI::NoopImage::output_format(CI::NoopImage *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(CI::NoopImage *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 144))(v1);
}

size_t CI::NoopImage::print_for_graph_core(CI::NoopImage *this, __sFILE *__stream)
{
  int v3;
  const char *v4;
  size_t v5;

  v3 = *((unsigned __int8 *)this + 120);
  if (v3 == 1)
  {
    v4 = "intermediate-cached";
    v5 = 19;
  }
  else if (v3 == 255)
  {
    v4 = "intermediate-uncached";
    v5 = 21;
  }
  else
  {
    v4 = "intermediate";
    v5 = 12;
  }
  return fwrite(v4, v5, 1uLL, __stream);
}

uint64_t CI::NoopImage::headroom(CI::NoopImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 232))(*((_QWORD *)this + 13));
}

uint64_t CI::NoopImage::colorspace(CI::NoopImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 240))(*((_QWORD *)this + 13));
}

double CI::NoopImage::region_of_child(CI::NoopImage *this, CGRect a2)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  double x;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGRect v11;
  CGRect v12;
  CGRect v13;
  CGRect v14;
  CGRect v15;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  if (*((_BYTE *)this + 121))
  {
    v11.origin.x = (*(double (**)(CI::NoopImage *))(*(_QWORD *)this + 88))(this);
    if (!CGRectIsInfinite(v11))
    {
      v15.origin.x = (*(double (**)(CI::NoopImage *))(*(_QWORD *)this + 88))(this);
      v15.origin.y = v7;
      v15.size.width = v8;
      v15.size.height = v9;
      v12.origin.x = x;
      v12.origin.y = y;
      v12.size.width = width;
      v12.size.height = height;
      if (CGRectIntersectsRect(v12, v15))
      {
        v13.origin.x = (*(double (**)(CI::NoopImage *))(*(_QWORD *)this + 88))(this);
        v14 = CGRectInset(v13, -1.0, -1.0);
        *(_QWORD *)&x = (unint64_t)CGRectIntegral(v14);
      }
    }
  }
  return x;
}

uint64_t `non-virtual thunk to'CI::NoopImage::type(CI::NoopImage *this)
{
  return 15;
}

void `non-virtual thunk to'CI::NoopImage::~NoopImage(CI::NoopImage *this)
{
  CI::ImageWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBB8A8;
  v1 = (CI::NoopImage *)((char *)this - 112);
  do
    v2 = __ldaxr(&dword_1ECF872F0[13]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[13]));
  CI::ImageWithChild::~ImageWithChild(v1);
}

{
  CI::ImageWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBB8A8;
  v1 = (CI::NoopImage *)((char *)this - 112);
  do
    v2 = __ldaxr(&dword_1ECF872F0[13]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[13]));
  CI::ImageWithChild::~ImageWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

CI::Object *CI::PremultiplyImage::render_graph_core(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  CI::PremultiplyNode *v6;
  CI::Object *v7;

  v5 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 184))(a1);
  if (!a3)
    return CI::PremultiplyNode::append_to_tree(0, (CI::Node *)a1[30], v5);
  v6 = (CI::PremultiplyNode *)CI::Object::ref(a3);
  v7 = CI::PremultiplyNode::append_to_tree(v6, (CI::Node *)a1[30], v5);
  if (v6)
    CI::Object::unref(v6);
  return v7;
}

void CI::PremultiplyImage::~PremultiplyImage(CI::PremultiplyImage *this)
{
  unsigned int v1;

  *((_QWORD *)this + 14) = off_1E2EBB8D0;
  do
    v1 = __ldaxr(&dword_1ECF872F0[14]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[14]));
  CI::ImageWithChild::~ImageWithChild(this);
}

{
  unsigned int v1;

  *((_QWORD *)this + 14) = off_1E2EBB8D0;
  do
    v1 = __ldaxr(&dword_1ECF872F0[14]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[14]));
  CI::ImageWithChild::~ImageWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::PremultiplyImage::type(CI::PremultiplyImage *this)
{
  return 16;
}

uint64_t CI::PremultiplyImage::shape_for_graphviz(CI::PremultiplyImage *this)
{
  return 2;
}

uint64_t CI::PremultiplyImage::color_for_graphviz(CI::PremultiplyImage *this)
{
  return 4;
}

uint64_t CI::PremultiplyImage::add_args_to_hash(uint64_t a1, uint64_t a2)
{
  int __src;

  __src = *(_DWORD *)(a1 + 120);
  return XXH64_update(a2, (char *)&__src, 4uLL);
}

uint64_t CI::PremultiplyImage::print_for_graph_core(CI::PremultiplyImage *this, __sFILE *a2)
{
  const char *v2;

  if (*((_DWORD *)this + 30) == -1)
    v2 = "un";
  else
    v2 = "";
  return fprintf(a2, "%spremultiply", v2);
}

uint64_t CI::PremultiplyImage::headroom(CI::PremultiplyImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 232))(*((_QWORD *)this + 13));
}

uint64_t CI::PremultiplyImage::colorspace(CI::PremultiplyImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 240))(*((_QWORD *)this + 13));
}

uint64_t `non-virtual thunk to'CI::PremultiplyImage::type(CI::PremultiplyImage *this)
{
  return 16;
}

void `non-virtual thunk to'CI::PremultiplyImage::~PremultiplyImage(CI::PremultiplyImage *this)
{
  CI::ImageWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBB8D0;
  v1 = (CI::PremultiplyImage *)((char *)this - 112);
  do
    v2 = __ldaxr(&dword_1ECF872F0[14]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[14]));
  CI::ImageWithChild::~ImageWithChild(v1);
}

{
  CI::ImageWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBB8D0;
  v1 = (CI::PremultiplyImage *)((char *)this - 112);
  do
    v2 = __ldaxr(&dword_1ECF872F0[14]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[14]));
  CI::ImageWithChild::~ImageWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::ProcessorImage::ProcessorImage(uint64_t a1, CI::Image *a2, const __CFString *a3, uint64_t a4, char a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, char a13, unsigned __int8 a14, unsigned __int8 a15, unsigned __int8 a16, const void *a17, const void *a18)
{
  unsigned int v24;
  __int128 v25;
  _BYTE *v26;
  int v27;
  int v28;
  int64x2_t v32[5];
  __int128 v33;
  __int128 v34;
  char __src[16];

  *(double *)&v33 = a9;
  *((double *)&v33 + 1) = a10;
  *(double *)&v34 = a11;
  *((double *)&v34 + 1) = a12;
  *((_QWORD *)CI::ImageWithChildren::ImageWithChildren((CI::ImageWithChildren *)a1, a2) + 14) = off_1E2EBB8F8;
  do
    v24 = __ldaxr(&dword_1ECF872F0[15]);
  while (__stlxr(v24 + 1, &dword_1ECF872F0[15]));
  *(_QWORD *)a1 = &off_1E2EBAC00;
  *(_QWORD *)(a1 + 112) = &unk_1E2EBAD50;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  v25 = v34;
  *(_OWORD *)(a1 + 120) = v33;
  *(_OWORD *)(a1 + 136) = v25;
  *(_QWORD *)(a1 + 152) = CFRetain(a3);
  *(_QWORD *)(a1 + 160) = a4;
  *(_BYTE *)(a1 + 168) = a5;
  *(_QWORD *)(a1 + 176) = malloc_type_malloc(4uLL, 0x100004052888210uLL);
  v26 = malloc_type_malloc(1uLL, 0x100004077774924uLL);
  *(_QWORD *)(a1 + 192) = v26;
  if (a6 == -1)
    v27 = 0;
  else
    v27 = a6;
  **(_DWORD **)(a1 + 176) = v27;
  *v26 = a6 == -1;
  if (a7 == -1)
    v28 = 0;
  else
    v28 = a7;
  *(_DWORD *)(a1 + 184) = v28;
  *(_BYTE *)(a1 + 200) = a7 == -1;
  *(_BYTE *)(a1 + 202) = a13;
  *(_BYTE *)(a1 + 201) = a14;
  *(_BYTE *)(a1 + 203) = a15;
  *(_BYTE *)(a1 + 224) = a8;
  if (v28 && (CI::format_has_alpha(v28) & 1) == 0)
    *(_BYTE *)(a1 + 224) = 1;
  *(_BYTE *)(a1 + 204) = a16;
  *(_QWORD *)(a1 + 208) = _Block_copy(a17);
  *(_QWORD *)(a1 + 216) = _Block_copy(a18);
  XXH64_reset(v32, 0);
  *(_DWORD *)__src = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  XXH64_update((uint64_t)v32, __src, 4uLL);
  *(_QWORD *)__src = *((_QWORD *)a2 + 10);
  XXH64_update((uint64_t)v32, __src, 8uLL);
  XXH64_update((uint64_t)v32, (char *)&v33, 0x20uLL);
  CI::XXHashHelper::add((CI::XXHashHelper *)v32, a3);
  *(_QWORD *)__src = a4;
  XXH64_update((uint64_t)v32, __src, 8uLL);
  *(_DWORD *)__src = a6;
  XXH64_update((uint64_t)v32, __src, 4uLL);
  *(_DWORD *)__src = a7;
  XXH64_update((uint64_t)v32, __src, 4uLL);
  *(_DWORD *)__src = a8;
  XXH64_update((uint64_t)v32, __src, 4uLL);
  *(_DWORD *)__src = a14;
  XXH64_update((uint64_t)v32, __src, 4uLL);
  *(_DWORD *)__src = a15;
  XXH64_update((uint64_t)v32, __src, 4uLL);
  *(_DWORD *)__src = a16;
  XXH64_update((uint64_t)v32, __src, 4uLL);
  *(_QWORD *)(a1 + 80) = XXH64_digest((uint64_t)v32);
  XXH64_reset(v32, 0);
  *(_DWORD *)__src = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  XXH64_update((uint64_t)v32, __src, 4uLL);
  *(_QWORD *)__src = *((_QWORD *)a2 + 11);
  XXH64_update((uint64_t)v32, __src, 8uLL);
  XXH64_update((uint64_t)v32, (char *)&v33, 0x20uLL);
  CI::XXHashHelper::add((CI::XXHashHelper *)v32, a3);
  *(_QWORD *)__src = a4;
  XXH64_update((uint64_t)v32, __src, 8uLL);
  *(_DWORD *)__src = a6;
  XXH64_update((uint64_t)v32, __src, 4uLL);
  *(_DWORD *)__src = a7;
  XXH64_update((uint64_t)v32, __src, 4uLL);
  *(_DWORD *)__src = a8;
  XXH64_update((uint64_t)v32, __src, 4uLL);
  *(_DWORD *)__src = a14;
  XXH64_update((uint64_t)v32, __src, 4uLL);
  *(_DWORD *)__src = a15;
  XXH64_update((uint64_t)v32, __src, 4uLL);
  *(_DWORD *)__src = a16;
  XXH64_update((uint64_t)v32, __src, 4uLL);
  *(_QWORD *)(a1 + 88) = XXH64_digest((uint64_t)v32);
  *(_WORD *)(a1 + 96) = 0;
  return a1;
}

{
  return CI::ProcessorImage::ProcessorImage(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

CI::ImageWithChildren *CI::ImageWithChildren::ImageWithChildren(CI::ImageWithChildren *this, CI::Image *a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)CI::Image::Image((uint64_t)this);
  *v4 = off_1E2EBD718;
  v4[13] = 0;
  v5 = operator new();
  *(_QWORD *)v5 = 0xA00000001;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_QWORD *)(v5 + 96) = 0;
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = a2;
  if (a2)
    CI::Object::ref((uint64_t)a2);
  *((_QWORD *)this + 13) = v5;
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18) + 1;
  return this;
}

uint64_t CI::ProcessorImage::ProcessorImage(uint64_t a1, CI::SerialObjectPtrArray *a2, const __CFString *a3, uint64_t a4, char a5, void *a6, void *a7, int a8, double a9, double a10, double a11, double a12, unsigned __int8 a13, unsigned __int8 a14, char a15, unsigned __int8 a16, unsigned __int8 a17, unsigned __int8 a18, const void *a19, const void *a20)
{
  unsigned int v25;
  __int128 v26;
  int v27;
  void *v28;
  char v29;
  void *v30;
  void *v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  int64x2_t v42[5];
  __int128 v43;
  __int128 v44;
  char v45[16];

  *(double *)&v43 = a9;
  *((double *)&v43 + 1) = a10;
  *(double *)&v44 = a11;
  *((double *)&v44 + 1) = a12;
  *((_QWORD *)CI::ImageWithChildren::ImageWithChildren((CI::ImageWithChildren *)a1, a2) + 14) = off_1E2EBB8F8;
  do
    v25 = __ldaxr(&dword_1ECF872F0[15]);
  while (__stlxr(v25 + 1, &dword_1ECF872F0[15]));
  *(_QWORD *)a1 = &off_1E2EBAC00;
  *(_QWORD *)(a1 + 112) = &unk_1E2EBAD50;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  v26 = v44;
  *(_OWORD *)(a1 + 120) = v43;
  *(_OWORD *)(a1 + 136) = v26;
  *(_QWORD *)(a1 + 152) = CFRetain(a3);
  *(_QWORD *)(a1 + 160) = a4;
  *(_BYTE *)(a1 + 168) = a5;
  if (a2 && (v27 = *(_DWORD *)a2) != 0)
  {
    v28 = malloc_type_calloc(4uLL, v27, 0x7B4513B0uLL);
    *(_QWORD *)(a1 + 176) = v28;
    memcpy(v28, a6, 4 * v27);
    v29 = 1;
    v30 = malloc_type_calloc(1uLL, v27, 0x53C4D362uLL);
    *(_QWORD *)(a1 + 192) = v30;
    memcpy(v30, a7, v27);
    v31 = _Block_copy(a19);
  }
  else
  {
    v31 = 0;
    v29 = 0;
    v27 = 0;
    *(_QWORD *)(a1 + 176) = 0;
  }
  *(_QWORD *)(a1 + 208) = v31;
  *(_DWORD *)(a1 + 184) = a8;
  *(_BYTE *)(a1 + 200) = a13;
  *(_BYTE *)(a1 + 202) = a15;
  *(_BYTE *)(a1 + 201) = a16;
  *(_BYTE *)(a1 + 203) = a17;
  *(_BYTE *)(a1 + 224) = a14;
  *(_BYTE *)(a1 + 204) = v29 & a18;
  *(_QWORD *)(a1 + 216) = _Block_copy(a20);
  XXH64_reset(v42, 0);
  *(_DWORD *)v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  XXH64_update((uint64_t)v42, v45, 4uLL);
  if (v27 >= 1)
  {
    v32 = 0;
    do
    {
      *(_QWORD *)v45 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v32) + 80);
      XXH64_update((uint64_t)v42, v45, 8uLL);
      v32 = (v32 + 1);
    }
    while (v27 != (_DWORD)v32);
  }
  XXH64_update((uint64_t)v42, (char *)&v43, 0x20uLL);
  CI::XXHashHelper::add((CI::XXHashHelper *)v42, a3);
  *(_QWORD *)v45 = a4;
  XXH64_update((uint64_t)v42, v45, 8uLL);
  if (a6)
    v33 = v27 == 0;
  else
    v33 = 1;
  v34 = !v33;
  if (!v33)
    XXH64_update((uint64_t)v42, (char *)a6, 4 * v27);
  if (a7)
    v35 = v27 == 0;
  else
    v35 = 1;
  v36 = !v35;
  if (!v35)
    XXH64_update((uint64_t)v42, (char *)a7, v27);
  *(_DWORD *)v45 = a8;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)v45 = a13;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)v45 = a14;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)v45 = a16;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)v45 = a17;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)v45 = a18;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_QWORD *)(a1 + 80) = XXH64_digest((uint64_t)v42);
  XXH64_reset(v42, 0);
  *(_DWORD *)v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  XXH64_update((uint64_t)v42, v45, 4uLL);
  if (v27 >= 1)
  {
    v37 = 0;
    do
    {
      *(_QWORD *)v45 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v37) + 88);
      XXH64_update((uint64_t)v42, v45, 8uLL);
      v37 = (v37 + 1);
    }
    while (v27 != (_DWORD)v37);
  }
  XXH64_update((uint64_t)v42, (char *)&v43, 0x20uLL);
  CI::XXHashHelper::add((CI::XXHashHelper *)v42, a3);
  *(_QWORD *)v45 = a4;
  XXH64_update((uint64_t)v42, v45, 8uLL);
  if (v34)
    XXH64_update((uint64_t)v42, (char *)a6, 4 * v27);
  if (v36)
    XXH64_update((uint64_t)v42, (char *)a7, v27);
  *(_DWORD *)v45 = a8;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)v45 = a13;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)v45 = a14;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)v45 = a16;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)v45 = a17;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)v45 = a18;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_QWORD *)(a1 + 88) = XXH64_digest((uint64_t)v42);
  *(_WORD *)(a1 + 96) = 0;
  return a1;
}

{
  return CI::ProcessorImage::ProcessorImage(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

CI::ImageWithChildren *CI::ImageWithChildren::ImageWithChildren(CI::ImageWithChildren *this, CI::SerialObjectPtrArray *a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;

  v4 = CI::Image::Image((uint64_t)this);
  *(_QWORD *)v4 = off_1E2EBD718;
  *(_QWORD *)(v4 + 104) = a2;
  *(_DWORD *)(v4 + 72) = 0;
  if (a2)
  {
    v5 = *(_DWORD *)a2;
    if (*(int *)a2 >= 1)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        if (v6 <= *(_DWORD *)((*(uint64_t (**)(CI::ImageWithChildren *, uint64_t))(*(_QWORD *)this + 48))(this, v7)+ 72)+ 1)v6 = *(_DWORD *)((*(uint64_t (**)(CI::ImageWithChildren *, uint64_t))(*(_QWORD *)this + 48))(this, v7)+ 72)+ 1;
        else
          v6 = *((_DWORD *)this + 18);
        *((_DWORD *)this + 18) = v6;
        v7 = (v7 + 1);
      }
      while (v5 != (_DWORD)v7);
    }
  }
  return this;
}

void CI::ProcessorImage::~ProcessorImage(CI::ProcessorImage *this)
{
  const void *v2;
  void *v3;
  void *v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E2EBAC00;
  *((_QWORD *)this + 14) = &unk_1E2EBAD50;
  v2 = (const void *)*((_QWORD *)this + 19);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 19) = 0;
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
    free(v3);
  v4 = (void *)*((_QWORD *)this + 24);
  if (v4)
    free(v4);
  _Block_release(*((const void **)this + 26));
  *((_QWORD *)this + 26) = 0;
  _Block_release(*((const void **)this + 27));
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 14) = off_1E2EBB8F8;
  do
    v5 = __ldaxr(&dword_1ECF872F0[15]);
  while (__stlxr(v5 - 1, &dword_1ECF872F0[15]));
  CI::ImageWithChildren::~ImageWithChildren(this);
}

{
  CI::ProcessorImage::~ProcessorImage(this);
  JUMPOUT(0x194025AACLL);
}

void CI::ImageWithChildren::~ImageWithChildren(CI::ImageWithChildren *this)
{
  CI::SerialObjectPtrArray *v2;

  *(_QWORD *)this = off_1E2EBD718;
  v2 = (CI::SerialObjectPtrArray *)*((_QWORD *)this + 13);
  if (v2)
  {
    CI::SerialObjectPtrArray::~SerialObjectPtrArray(v2);
    MEMORY[0x194025AAC]();
  }
  *((_QWORD *)this + 13) = 0;
  CI::Image::~Image(this);
}

void `non-virtual thunk to'CI::ProcessorImage::~ProcessorImage(CI::ProcessorImage *this)
{
  CI::ProcessorImage::~ProcessorImage((CI::ProcessorImage *)((char *)this - 112));
}

{
  CI::ProcessorImage::~ProcessorImage((CI::ProcessorImage *)((char *)this - 112));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::ProcessorImage::add_args_to_hash(uint64_t a1, CI::XXHashHelper *a2)
{
  char *p_src;
  uint64_t v5;
  size_t v6;
  uint64_t v8;
  int __src;

  if (*(_QWORD *)(a1 + 160))
  {
    v8 = *(_QWORD *)(a1 + 160);
    p_src = (char *)&v8;
    v5 = (uint64_t)a2;
    v6 = 8;
  }
  else
  {
    __src = *(_DWORD *)(a1 + 100);
    p_src = (char *)&__src;
    v5 = (uint64_t)a2;
    v6 = 4;
  }
  XXH64_update(v5, p_src, v6);
  return CI::XXHashHelper::add(a2, *(CFStringRef *)(a1 + 152));
}

void CI::ProcessorImage::region_of_child(CI::ProcessorImage *this, CGRect a2, uint64_t a3)
{
  double height;
  double width;
  double y;
  double x;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGRect v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  if (!CGRectIsEmpty(a2))
  {
    v13.origin.x = (*(double (**)(CI::ProcessorImage *, uint64_t, double, double, double, double))(*(_QWORD *)this + 80))(this, a3, x, y, width, height);
    v9 = v13.origin.x;
    v10 = v13.origin.y;
    v11 = v13.size.width;
    v12 = v13.size.height;
    if (!CGRectIsEmpty(v13))
    {
      v14.origin.x = v9;
      v14.origin.y = v10;
      v14.size.width = v11;
      v14.size.height = v12;
      if (!CGRectIsInfinite(v14))
      {
        v15.origin.x = v9;
        v15.origin.y = v10;
        v15.size.width = v11;
        v15.size.height = v12;
        v16 = CGRectInset(v15, 0.001, 0.001);
        CGRectIntegral(v16);
      }
    }
  }
}

double CI::ProcessorImage::roi_of_child(CI::ProcessorImage *this, CGRect a2)
{
  double height;
  double width;
  double y;
  double x;
  double *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  double v11;
  double v12;
  void *__p;
  _OWORD *v15;
  uint64_t v16;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  v7 = (double *)operator new(0x20uLL);
  *v7 = x;
  v7[1] = y;
  v7[2] = width;
  v7[3] = height;
  v8 = *((_QWORD *)this + 26);
  if (v8)
  {
    (*(void (**)(void **__return_ptr, double, double, double, double))(v8 + 16))(&__p, x, y, width, height);
  }
  else
  {
    __p = 0;
    v15 = 0;
    v16 = 0;
    std::vector<CGRect>::__vallocate[abi:nn180100](&__p, 1uLL);
    v9 = v15;
    v10 = *((_OWORD *)v7 + 1);
    *v15 = *(_OWORD *)v7;
    v9[1] = v10;
    v15 = v9 + 2;
  }
  CI::ProcessorNode::unionROI((uint64_t **)&__p);
  v12 = v11;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  operator delete(v7);
  return v12;
}

void CI::ProcessorNode::unionROI(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;

  v1 = *a1;
  v2 = **a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  if ((unint64_t)((char *)a1[1] - (char *)*a1) >= 0x21)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      *(CGRect *)&v2 = CGRectUnion(*(CGRect *)&v2, *(CGRect *)&v1[v7 + 4]);
      ++v8;
      v1 = *a1;
      v7 += 4;
    }
    while (v8 < ((char *)a1[1] - (char *)*a1) >> 5);
  }
}

CI::Node *CI::ProcessorImage::render_graph_core(uint64_t a1, int *a2, uint64_t a3)
{
  CI::SerialObjectPtrArray *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  CI::Object *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  CI::Object *v20;
  CI::ClampToAlphaNode *v21;
  CI::ColorMatrixNode *v22;
  int is_ycc_full_range;
  _BOOL4 is_deep;
  int is_float;
  int default_ycc_color_matrix;
  int v27;
  int v28;
  CI::AffineNode *v29;
  double v30;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v35;
  uint64_t v36;
  CI::Object *v37;
  CI::Object *v38;
  CI::Object *v39;
  CI::Object *v40;
  void (***v41)(CI::ColorKernel *__hidden);
  CI::Object *v42;
  int v43;
  int v44;
  CI::Object *v45;
  signed int v46;
  CI::Object *v47;
  NSObject *v48;
  int v49;
  CI::Object *v50;
  int v51;
  CI::Object *v52;
  uint64_t v53;
  CI::Object *v54;
  int *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  CI::Object *v60;
  signed int v61;
  NSObject *v62;
  uint64_t v64;
  CI::SerialObjectPtrArray *v65;
  float64x2_t v66[3];
  uint8_t v67[4];
  const char *v68;
  __int128 v69;
  __int128 v70;
  double v71;
  double v72;
  __int128 v73;
  __int128 v74;
  double v75;
  double v76;
  __int128 v77;
  __int128 v78;
  double v79;
  double v80;
  __int128 v81;
  __int128 v82;
  double v83;
  double v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;

  v96 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    v6 = (CI::SerialObjectPtrArray *)operator new();
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    CI::SerialObjectPtrArray::SerialObjectPtrArray(v6, v7);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
    {
      v8 = 0;
      v64 = a3;
      v65 = v6;
      while (1)
      {
        v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v8);
        v10 = (CI::Object *)CI::ImageToNodeMap::findAndRef(a3, *(_QWORD *)(v9 + 80));
        v11 = *(unsigned int *)(*(_QWORD *)(a1 + 176) + 4 * v8);
        v12 = (uint64_t)v10;
        if ((*(unsigned int (**)(CI::Object *))(*(_QWORD *)v10 + 16))(v10) == 39)
        {
          v12 = (uint64_t)v10;
          do
            v12 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 48))(v12, 0);
          while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12) == 39);
        }
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        if ((CI::is_image_type(v13) & 1) != 0)
          goto LABEL_8;
        if ((*(int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12) >= 41
          && (*(int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12) <= 42)
        {
          break;
        }
LABEL_27:
        if (CI::format_is_ycc_or_ycca(v11))
        {
          v20 = CI::SwizzleNode::append_to_tree(v10, 10, 1, 0);
          if (v10)
            CI::Object::unref(v10);
          v21 = CI::ClampToAlphaNode::append_to_tree(v20, (CI::Node *)1);
          if (v20)
            CI::Object::unref(v20);
          v22 = CI::SRGBNode::append_to_tree(v21, (CI::Node *)1, 1);
          if (v21)
            CI::Object::unref(v21);
          v81 = 0u;
          v82 = 0u;
          v77 = 0u;
          v78 = 0u;
          v73 = 0u;
          v74 = 0u;
          v69 = 0u;
          v70 = 0u;
          is_ycc_full_range = CI::format_is_ycc_full_range(v11);
          is_deep = CI::format_is_deep(v11);
          is_float = CI::format_is_float(v11);
          default_ycc_color_matrix = CI::format_get_default_ycc_color_matrix(v11);
          if (is_deep)
            v27 = 10;
          else
            v27 = 8;
          if (is_float)
            v28 = 0;
          else
            v28 = v27;
          get_rgb_to_ycc_matrix(default_ycc_color_matrix, is_ycc_full_range, v28, (double *)&v81, (uint64_t)&v77, (uint64_t)&v73, (uint64_t)&v69);
          v85 = v77;
          v86 = v78;
          v87 = v73;
          v88 = v74;
          v95 = 0u;
          v91 = 0u;
          v92 = 0;
          v89 = v69;
          v90 = v70;
          v93 = 0x3FF0000000000000;
          v94 = v81;
          *(_QWORD *)&v95 = *((_QWORD *)&v81 + 1);
          v10 = CI::ColorMatrixNode::append_to_tree(v22, (CI::Node *)&v85, (const double (*)[4])1);
          if (v22)
            CI::Object::unref(v22);
        }
        if (CI::format_is_ycc_420(v11))
        {
          if (!CI_ENABLE_WRITE_420()
            || ((*(uint64_t (**)(int *))(*(_QWORD *)a2 + 576))(a2) & 8) == 0)
          {
            v29 = (CI::AffineNode *)CI::NoopNode::append_to_tree_and_unref(v10, (uint64_t)a2, 2);
            *(_QWORD *)&v86 = 0;
            v85 = 0x4000000000000000uLL;
            *((_QWORD *)&v86 + 1) = 0x4000000000000000;
            v87 = 0uLL;
            v30 = CI::Affine::inverse((CI::Affine *)&v85, (double *)&v81);
            v97.origin.x = (*(double (**)(CI::AffineNode *, double))(*(_QWORD *)v29 + 160))(v29, v30);
            v98.origin.x = CI::Affine::applyToRect((CI::Affine *)&v81, v97);
            v99 = CGRectIntegral(v98);
            x = v99.origin.x;
            y = v99.origin.y;
            width = v99.size.width;
            height = v99.size.height;
            v35 = *(double *)&v87 + *((double *)&v87 + 1) * 0.0;
            v99.size.height = *((double *)&v87 + 1) + *(double *)&v87 * 0.0;
            *(double *)&v81 = *(double *)&v85 + *((double *)&v85 + 1) * 0.0;
            *((double *)&v81 + 1) = *((double *)&v85 + 1) + *(double *)&v85 * 0.0;
            *(double *)&v82 = *(double *)&v86 + *((double *)&v86 + 1) * 0.0;
            *((double *)&v82 + 1) = *((double *)&v86 + 1) + *(double *)&v86 * 0.0;
            v83 = v35 + -0.5;
            v84 = v99.size.height + -0.5;
            v77 = v81;
            v78 = v82;
            v79 = v35 + 0.5;
            v80 = v99.size.height + -0.5;
            v73 = v81;
            v74 = v82;
            v75 = v35 + -0.5;
            v76 = v99.size.height + 0.5;
            v69 = v81;
            v70 = v82;
            v71 = v35 + 0.5;
            v72 = v99.size.height + 0.5;
            v36 = operator new();
            *(_QWORD *)v36 = 0;
            *(_OWORD *)(v36 + 24) = 0u;
            *(_OWORD *)(v36 + 40) = 0u;
            *(_OWORD *)(v36 + 56) = 0u;
            *(_OWORD *)(v36 + 72) = 0u;
            *(_OWORD *)(v36 + 88) = 0u;
            *(_QWORD *)(v36 + 16) = 0;
            *(_QWORD *)(v36 + 4) = 0x40000000ALL;
            CI::Affine::inverse((CI::Affine *)&v81, v66[0].f64);
            v37 = CI::AffineNode::append_to_tree_with_quality(v29, v66, (const CI::Affine *)a2, 0);
            CI::Affine::inverse((CI::Affine *)&v77, v66[0].f64);
            v38 = CI::AffineNode::append_to_tree_with_quality(v29, v66, (const CI::Affine *)a2, 0);
            CI::Affine::inverse((CI::Affine *)&v73, v66[0].f64);
            v39 = CI::AffineNode::append_to_tree_with_quality(v29, v66, (const CI::Affine *)a2, 0);
            CI::Affine::inverse((CI::Affine *)&v69, v66[0].f64);
            v40 = CI::AffineNode::append_to_tree_with_quality(v29, v66, (const CI::Affine *)a2, 0);
            CI::SerialObjectPtrArray::append(v36, v37);
            CI::SerialObjectPtrArray::append(v36, v38);
            CI::SerialObjectPtrArray::append(v36, v39);
            CI::SerialObjectPtrArray::append(v36, v40);
            if (v37)
              CI::Object::unref(v37);
            if (v38)
              CI::Object::unref(v38);
            v6 = v65;
            if (v39)
              CI::Object::unref(v39);
            a3 = v64;
            if (v40)
              CI::Object::unref(v40);
            v41 = CI::Kernel::builtin(53);
            CI::Object::unref(v29);
            v42 = CI::ColorKernelNode::append_to_tree((CI::Kernel *)v41, (CI::SerialObjectPtrArray *)v36, &__block_literal_global_89, 0, 0, 0, x, y, width, height);
            goto LABEL_97;
          }
          v47 = CI::SwizzleNode::append_to_tree(v10, 56, 0, 0);
        }
        else
        {
          if (((*(uint64_t (**)(int *, uint64_t, uint64_t))(*(_QWORD *)a2 + 432))(a2, v11, 1) & 1) != 0)
            goto LABEL_96;
          v43 = (*(uint64_t (**)(int *, uint64_t, uint64_t))(*(_QWORD *)a2 + 432))(a2, 2056, 1);
          v44 = v43;
          if ((int)v11 > 2053)
          {
            if ((int)v11 > 2309)
            {
              if ((_DWORD)v11 == 2310)
              {
                if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(*(_QWORD *)a2 + 432))(a2, 2054, 1))
                  goto LABEL_94;
                v45 = v10;
                v46 = 21;
              }
              else
              {
                if ((_DWORD)v11 != 2312)
                  goto LABEL_96;
                if (!v43)
                {
LABEL_94:
                  v48 = ci_logger_render();
                  if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                    CI::ProcessorImage::render_graph_core(v67, (int *)(a1 + 184), &v68, v48);
LABEL_96:
                  v42 = v10;
                  goto LABEL_97;
                }
                v45 = v10;
                v46 = 7;
              }
            }
            else if ((_DWORD)v11 == 2054)
            {
              if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(*(_QWORD *)a2 + 432))(a2, 2310, 1))
                goto LABEL_94;
              v45 = v10;
              v46 = 22;
            }
            else
            {
              if ((_DWORD)v11 != 2309)
                goto LABEL_96;
              if ((*(unsigned int (**)(int *, uint64_t, uint64_t))(*(_QWORD *)a2 + 432))(a2, 2053, 1))
              {
                v45 = v10;
                v46 = 15;
              }
              else
              {
                if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(*(_QWORD *)a2 + 432))(a2, 2312, 1))
                  goto LABEL_94;
                v45 = v10;
                v46 = 25;
              }
            }
          }
          else if ((int)v11 > 1799)
          {
            if ((_DWORD)v11 == 1800)
            {
              if (!v43)
                goto LABEL_94;
              v45 = v10;
              v46 = 5;
            }
            else
            {
              if ((_DWORD)v11 != 2053)
                goto LABEL_96;
              if ((*(unsigned int (**)(int *, uint64_t, uint64_t))(*(_QWORD *)a2 + 432))(a2, 2309, 1))
              {
                v45 = v10;
                v46 = 16;
              }
              else
              {
                if (!v44)
                  goto LABEL_94;
                v45 = v10;
                v46 = 23;
              }
            }
          }
          else if ((_DWORD)v11 == 261)
          {
            if ((*(unsigned int (**)(int *, uint64_t, uint64_t))(*(_QWORD *)a2 + 432))(a2, 2309, 1))
            {
              v45 = v10;
              v46 = 14;
            }
            else
            {
              if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(*(_QWORD *)a2 + 432))(a2, 2053, 1))
                goto LABEL_94;
              v45 = v10;
              v46 = 12;
            }
          }
          else
          {
            if ((_DWORD)v11 != 262)
              goto LABEL_96;
            if ((*(unsigned int (**)(int *, uint64_t, uint64_t))(*(_QWORD *)a2 + 432))(a2, 2310, 1))
            {
              v45 = v10;
              v46 = 20;
            }
            else
            {
              if (!(*(unsigned int (**)(int *, uint64_t, uint64_t))(*(_QWORD *)a2 + 432))(a2, 2054, 1))
                goto LABEL_94;
              v45 = v10;
              v46 = 18;
            }
          }
          v47 = CI::ConvertNode::append_to_tree(v45, v46);
        }
        v42 = v47;
        if (v10)
          CI::Object::unref(v10);
LABEL_97:
        if (CI::format_is_r(v11))
        {
          v49 = (*(uint64_t (**)(CI::Object *))(*(_QWORD *)v42 + 312))(v42);
          if ((CI::format_is_r(v49) & 1) == 0)
          {
            v50 = CI::SwizzleNode::append_to_tree(v42, 22, 1, 0);
            CI::Object::unref(v42);
            v42 = v50;
          }
        }
        if (CI::format_is_rg(v11))
        {
          v51 = (*(uint64_t (**)(CI::Object *))(*(_QWORD *)v42 + 312))(v42);
          if ((CI::format_is_rg(v51) & 1) != 0)
          {
            v10 = v42;
LABEL_103:
            CI::SerialObjectPtrArray::append((uint64_t)v6, v10);
LABEL_106:
            CI::Object::unref(v10);
            goto LABEL_107;
          }
          v52 = CI::SwizzleNode::append_to_tree(v42, 25, 1, 0);
          CI::Object::unref(v42);
          v42 = v52;
        }
        CI::SerialObjectPtrArray::append((uint64_t)v6, v42);
        v10 = v42;
        if (v42)
          goto LABEL_106;
LABEL_107:
        if (++v8 >= (unint64_t)(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
          goto LABEL_108;
      }
      v15 = (*(uint64_t (**)(CI::Object *))(*(_QWORD *)v10 + 312))(v10);
      if (v15)
        v16 = (_DWORD)v11 != 0;
      else
        v16 = 0;
      if (v15)
        v17 = 0;
      else
        v17 = (_DWORD)v11 != 0;
      if (v15)
        v18 = (_DWORD)v11 == 0;
      else
        v18 = 0;
      v19 = (_DWORD)v11 == v15 && v16;
      if (v19 || v17 || v18)
        goto LABEL_103;
LABEL_8:
      v14 = CI::SampleModeNode::append_to_tree((uint64_t)v10, 0xFFFFFFFFLL);
      CI::Object::unref(v10);
      v10 = (CI::Object *)v14;
      goto LABEL_27;
    }
LABEL_108:
    v53 = (uint64_t)CI::ProcessorNode::append_to_tree(v6, *(void (***)(_QWORD *__return_ptr, _QWORD, _QWORD, double, double, double, double))(a1 + 208), *(const void **)(a1 + 216), (double *)(a1 + 120), *(const void **)(a1 + 152), *(_QWORD *)(a1 + 160), *(_BYTE *)(a1 + 168), a2[8], *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 192), *(_DWORD *)(a1 + 184), *(_BYTE *)(a1 + 200), *(_BYTE *)(a1 + 224), *(_BYTE *)(a1 + 202), *(_BYTE *)(a1 + 201), *(_WORD *)(a1 + 203), HIBYTE(*(_WORD *)(a1 + 203)));
  }
  else
  {
    v53 = CI::ProcessorNode::append_to_tree(*(const void **)(a1 + 216), (__int128 *)(a1 + 120), *(const void **)(a1 + 152), *(_QWORD *)(a1 + 160), *(_BYTE *)(a1 + 168), a2[8], *(_DWORD *)(a1 + 184), *(_BYTE *)(a1 + 200), *(_BYTE *)(a1 + 224), *(_WORD *)(a1 + 202), HIBYTE(*(_WORD *)(a1 + 202)));
  }
  v54 = (CI::Object *)v53;
  v56 = *(_DWORD *)(a1 + 184);
  v55 = (int *)(a1 + 184);
  if (v56 && ((*(uint64_t (**)(int *))(*(_QWORD *)a2 + 424))(a2) & 1) == 0)
  {
    v57 = (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)a2 + 424))(a2, 2056);
    v58 = v57;
    v59 = *v55;
    if (*v55 > 2053)
    {
      if (v59 > 2309)
      {
        if (v59 == 2310)
        {
          if ((*(unsigned int (**)(int *, uint64_t))(*(_QWORD *)a2 + 424))(a2, 2054))
          {
            v60 = v54;
            v61 = 22;
            return CI::ConvertNode::append_to_tree_and_unref(v60, v61);
          }
        }
        else
        {
          if (v59 != 2312)
            return v54;
          if (v57)
          {
            v60 = v54;
            v61 = 8;
            return CI::ConvertNode::append_to_tree_and_unref(v60, v61);
          }
        }
      }
      else if (v59 == 2054)
      {
        if ((*(unsigned int (**)(int *, uint64_t))(*(_QWORD *)a2 + 424))(a2, 2310))
        {
          v60 = v54;
          v61 = 21;
          return CI::ConvertNode::append_to_tree_and_unref(v60, v61);
        }
      }
      else
      {
        if (v59 != 2309)
          return v54;
        if ((*(unsigned int (**)(int *, uint64_t))(*(_QWORD *)a2 + 424))(a2, 2053))
        {
          v60 = v54;
          v61 = 16;
          return CI::ConvertNode::append_to_tree_and_unref(v60, v61);
        }
        if ((*(unsigned int (**)(int *, uint64_t))(*(_QWORD *)a2 + 424))(a2, 2312))
        {
          v60 = v54;
          v61 = 26;
          return CI::ConvertNode::append_to_tree_and_unref(v60, v61);
        }
      }
    }
    else if (v59 > 1799)
    {
      if (v59 == 1800)
      {
        if (v57)
        {
          v60 = v54;
          v61 = 6;
          return CI::ConvertNode::append_to_tree_and_unref(v60, v61);
        }
      }
      else
      {
        if (v59 != 2053)
          return v54;
        if ((*(unsigned int (**)(int *, uint64_t))(*(_QWORD *)a2 + 424))(a2, 2309))
        {
          v60 = v54;
          v61 = 15;
          return CI::ConvertNode::append_to_tree_and_unref(v60, v61);
        }
        if (v58)
        {
          v60 = v54;
          v61 = 24;
          return CI::ConvertNode::append_to_tree_and_unref(v60, v61);
        }
      }
    }
    else if (v59 == 261)
    {
      if ((*(unsigned int (**)(int *, uint64_t))(*(_QWORD *)a2 + 424))(a2, 2053))
      {
        v60 = v54;
        v61 = 11;
        return CI::ConvertNode::append_to_tree_and_unref(v60, v61);
      }
      if ((*(unsigned int (**)(int *, uint64_t))(*(_QWORD *)a2 + 424))(a2, 2309))
      {
        v60 = v54;
        v61 = 13;
        return CI::ConvertNode::append_to_tree_and_unref(v60, v61);
      }
    }
    else
    {
      if (v59 != 262)
        return v54;
      if ((*(unsigned int (**)(int *, uint64_t))(*(_QWORD *)a2 + 424))(a2, 2054))
      {
        v60 = v54;
        v61 = 17;
        return CI::ConvertNode::append_to_tree_and_unref(v60, v61);
      }
      if ((*(unsigned int (**)(int *, uint64_t))(*(_QWORD *)a2 + 424))(a2, 2310))
      {
        v60 = v54;
        v61 = 19;
        return CI::ConvertNode::append_to_tree_and_unref(v60, v61);
      }
    }
    v62 = ci_logger_render();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      CI::ProcessorImage::render_graph_core(v55, v62);
  }
  return v54;
}

CI::Node *CI::ConvertNode::append_to_tree_and_unref(CI::Object *a1, signed int a2)
{
  CI::Node *v3;

  v3 = CI::ConvertNode::append_to_tree(a1, a2);
  if (a1)
    CI::Object::unref(a1);
  return v3;
}

void *CI::ProcessorImage::restore_resources(void **this, CI::Node *a2)
{
  void *result;

  result = (void *)(*(uint64_t (**)(CI::Node *))(*(_QWORD *)a2 + 16))(a2);
  if ((_DWORD)result == 41)
  {
    CI::ProcessorNode::set_callback((uint64_t)a2, this[27]);
    return CI::ProcessorNode::set_roi_callback((uint64_t)a2, this[26]);
  }
  return result;
}

void *CI::ProcessorNode::set_callback(uint64_t a1, void *aBlock)
{
  const void *v4;
  void *result;

  v4 = *(const void **)(a1 + 64);
  if (v4)
    _Block_release(v4);
  result = _Block_copy(aBlock);
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

void *CI::ProcessorNode::set_roi_callback(uint64_t a1, void *aBlock)
{
  const void *v4;
  void *result;

  v4 = *(const void **)(a1 + 56);
  if (v4)
    _Block_release(v4);
  result = _Block_copy(aBlock);
  *(_QWORD *)(a1 + 56) = result;
  return result;
}

uint64_t CI::ProcessorImage::print_for_graph_core(CFStringRef *this, __sFILE *__stream)
{
  const __CFString *v4;
  uint64_t result;
  const char *v6;

  fwrite("processor ", 0xAuLL, 1uLL, __stream);
  CI::fprintf(__stream, this[19], v4);
  if (this[20])
    fprintf(__stream, ":%016llX", this[20]);
  result = *((unsigned int *)this + 46);
  if ((_DWORD)result)
  {
    v6 = CI::name_for_format(result);
    result = fprintf(__stream, " outputFormat=%s", v6);
  }
  if (!*((_BYTE *)this + 203))
    result = fwrite(" noPartialOutput", 0x10uLL, 1uLL, __stream);
  if (*((_BYTE *)this + 201))
    result = fwrite(" canReduceChannels", 0x12uLL, 1uLL, __stream);
  if (*((_BYTE *)this + 168))
    return fwrite(" supportsCompressed", 0x13uLL, 1uLL, __stream);
  return result;
}

uint64_t CI::ProcessorImage::print_for_graphviz(CFStringRef *a1, FILE *__stream, uint64_t a3, char a4)
{
  const __CFString *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t result;
  const char *v12;
  const char *v13;

  fwrite("processor ", 0xAuLL, 1uLL, __stream);
  CI::fprintf(__stream, a1[19], v7);
  if ((a4 & 1) == 0
    && CI_GRAPHVIZ_INTERNAL()
    && ((int (*)(CFStringRef *))(*a1)[1].info)(a1) >= 1)
  {
    v8 = 0;
    do
    {
      if ((_DWORD)v8)
        v9 = " ";
      else
        v9 = "\n  ";
      v10 = ((uint64_t (*)(CFStringRef *, uint64_t))(*a1)[1].data)(a1, v8);
      fprintf(__stream, "%s(%d)", v9, *(_DWORD *)(v10 + 100));
      v8 = (v8 + 1);
    }
    while ((int)v8 < ((int (*)(CFStringRef *))(*a1)[1].info)(a1));
  }
  if (a1[20])
    fprintf(__stream, "\n  argsDigest=%016llX", a1[20]);
  result = *((unsigned int *)a1 + 46);
  if ((_DWORD)result)
  {
    v12 = CI::name_for_format(result);
    result = fprintf(__stream, "\n  outputFormat=%s", v12);
  }
  if (a1[22])
  {
    result = ((uint64_t (*)(CFStringRef *))(*a1)[1].info)(a1);
    if ((_DWORD)result == 1)
    {
      result = LODWORD(a1[22]->isa);
      if ((_DWORD)result)
      {
        v13 = CI::name_for_format(result);
        result = fprintf(__stream, "\n  inputFormat=%s", v13);
      }
    }
  }
  if (!*((_BYTE *)a1 + 203))
    result = fwrite("\n  noPartialOutput", 0x12uLL, 1uLL, __stream);
  if (*((_BYTE *)a1 + 201))
    result = fwrite("\n  canReduceChannels", 0x14uLL, 1uLL, __stream);
  if (*((_BYTE *)a1 + 168))
    return fwrite("\n  supportsCompressed", 0x15uLL, 1uLL, __stream);
  return result;
}

uint64_t CI::ProcessorImage::type(CI::ProcessorImage *this)
{
  return 17;
}

uint64_t CI::ImageWithChildren::child_count(CI::ImageWithChildren *this)
{
  unsigned int *v1;

  v1 = (unsigned int *)*((_QWORD *)this + 13);
  if (v1)
    return *v1;
  else
    return 0;
}

uint64_t CI::ImageWithChildren::child(CI::ImageWithChildren *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((a2 & 0x80000000) != 0)
    return 0;
  if ((*(int (**)(CI::ImageWithChildren *))(*(_QWORD *)this + 40))(this) <= (int)a2)
    return 0;
  v4 = *((_QWORD *)this + 13);
  if (a2 > 9)
    v5 = *(_QWORD *)(v4 + 16) + 8 * (a2 - 10);
  else
    v5 = v4 + 8 * a2 + 24;
  return *(_QWORD *)v5;
}

uint64_t CI::ProcessorImage::shape_for_graphviz(CI::ProcessorImage *this)
{
  return 1;
}

uint64_t CI::ProcessorImage::color_for_graphviz(CI::ProcessorImage *this)
{
  return 1;
}

double CI::ProcessorImage::extent(CI::ProcessorImage *this)
{
  return *((double *)this + 15);
}

double CI::ProcessorImage::extent_unclamped(CI::ProcessorImage *this)
{
  return *((double *)this + 15);
}

uint64_t CI::ProcessorImage::alpha_one(CI::ProcessorImage *this)
{
  return *((unsigned __int8 *)this + 224);
}

uint64_t CI::ProcessorImage::output_format(CI::ProcessorImage *this)
{
  return *((unsigned int *)this + 46);
}

uint64_t CI::ImageWithChildren::properties(CI::ImageWithChildren *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::ImageWithChildren *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  return result;
}

uint64_t CI::ImageWithChildren::avdepthdata(CI::ImageWithChildren *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::ImageWithChildren *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 208))(result);
  return result;
}

uint64_t CI::ImageWithChildren::avmatte(CI::ImageWithChildren *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::ImageWithChildren *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 216))(result);
  return result;
}

uint64_t CI::ImageWithChildren::ssmatte(CI::ImageWithChildren *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::ImageWithChildren *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 224))(result);
  return result;
}

float CI::ImageWithChildren::headroom(CI::ImageWithChildren *this)
{
  return 0.0;
}

uint64_t CI::ImageWithChildren::colorspace(CI::ImageWithChildren *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'CI::ProcessorImage::type(CI::ProcessorImage *this)
{
  return 17;
}

uint64_t CI::Image::type(CI::Image *this)
{
  return 1;
}

uint64_t CI::GraphObject::shape_for_graphviz(CI::GraphObject *this)
{
  return 2;
}

uint64_t CI::GraphObject::color_for_graphviz(CI::GraphObject *this)
{
  return 0;
}

uint64_t CI::Image::print_for_graph_core(CI::Image *this, __sFILE *a2)
{
  unsigned int v3;
  const char *v4;

  v3 = (*(uint64_t (**)(CI::Image *))(*(_QWORD *)this + 16))(this);
  v4 = CI::name_for_type(v3);
  return fputs(v4, a2);
}

uint64_t CI::InstanceCounted<(CI::Type)17>::type()
{
  return 17;
}

_QWORD *CI::InstanceCounted<(CI::Type)17>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBB8F8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[15]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[15]));
  return result;
}

void CI::InstanceCounted<(CI::Type)17>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBB8F8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[15]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[15]));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::ProviderImage::ProviderImage(uint64_t a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, float a9, int a10, const void *a11, int a12, int a13, char a14, char a15, char a16)
{
  unsigned int v25;
  NSObject *v26;
  CFTypeRef v27;
  CFTypeRef v28;
  int64x2_t v30[5];
  char __src[16];

  *(_QWORD *)(CI::Image::Image(a1) + 104) = off_1E2EBB920;
  do
    v25 = __ldaxr(&dword_1ECF872F0[16]);
  while (__stlxr(v25 + 1, &dword_1ECF872F0[16]));
  *(_QWORD *)a1 = &off_1E2EBA410;
  *(_QWORD *)(a1 + 104) = &unk_1E2EBA578;
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 128) = _Block_copy(a4);
  v26 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  *(_QWORD *)(a1 + 136) = dispatch_queue_create("ProviderImageSurfaceCacheQueue", v26);
  *(_QWORD *)(a1 + 144) = a5;
  *(_QWORD *)(a1 + 152) = a6;
  if ((uint64_t *)(a1 + 160) != a7)
    std::vector<std::vector<IRect>>::__assign_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>((uint64_t *)(a1 + 160), *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  *(_DWORD *)(a1 + 216) = a8;
  if (a3)
    v27 = CFRetain(a3);
  else
    v27 = 0;
  *(_QWORD *)(a1 + 120) = v27;
  *(_DWORD *)(a1 + 224) = a10;
  *(_DWORD *)(a1 + 228) = a12;
  if (a11)
    v28 = CFRetain(a11);
  else
    v28 = 0;
  *(_QWORD *)(a1 + 184) = v28;
  *(_DWORD *)(a1 + 232) = a13;
  *(_BYTE *)(a1 + 236) = a14;
  *(_BYTE *)(a1 + 237) = a15;
  *(_BYTE *)(a1 + 238) = a16;
  if (!CI::format_is_extended(a8) && !CI::format_is_float(a8))
    a9 = 1.0;
  *(float *)(a1 + 220) = a9;
  XXH64_reset(v30, 0);
  *(_DWORD *)__src = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  XXH64_update((uint64_t)v30, __src, 4uLL);
  if (*(_QWORD *)(a1 + 112))
  {
    *(_QWORD *)__src = *(_QWORD *)(a1 + 112);
    XXH64_update((uint64_t)v30, __src, 8uLL);
    *(_QWORD *)__src = *(_QWORD *)(a1 + 144);
    XXH64_update((uint64_t)v30, __src, 8uLL);
    *(_QWORD *)__src = *(_QWORD *)(a1 + 152);
    XXH64_update((uint64_t)v30, __src, 8uLL);
    *(_DWORD *)__src = *(_DWORD *)(a1 + 216);
    XXH64_update((uint64_t)v30, __src, 4uLL);
    *(_DWORD *)__src = *(_DWORD *)(a1 + 224);
    XXH64_update((uint64_t)v30, __src, 4uLL);
    *(_DWORD *)__src = *(_DWORD *)(a1 + 228);
    XXH64_update((uint64_t)v30, __src, 4uLL);
    *(_DWORD *)__src = *(_DWORD *)(a1 + 232);
    XXH64_update((uint64_t)v30, __src, 4uLL);
    *(_DWORD *)__src = *(unsigned __int8 *)(a1 + 236);
    XXH64_update((uint64_t)v30, __src, 4uLL);
    *(_DWORD *)__src = *(_DWORD *)(a1 + 220);
  }
  else
  {
    *(_DWORD *)__src = *(_DWORD *)(a1 + 100);
  }
  XXH64_update((uint64_t)v30, __src, 4uLL);
  *(_QWORD *)(a1 + 80) = XXH64_digest((uint64_t)v30);
  XXH64_reset(v30, 0);
  *(_DWORD *)__src = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  XXH64_update((uint64_t)v30, __src, 4uLL);
  *(_QWORD *)__src = *(_QWORD *)(a1 + 144);
  XXH64_update((uint64_t)v30, __src, 8uLL);
  *(_QWORD *)__src = *(_QWORD *)(a1 + 152);
  XXH64_update((uint64_t)v30, __src, 8uLL);
  *(_DWORD *)__src = *(_DWORD *)(a1 + 216);
  XXH64_update((uint64_t)v30, __src, 4uLL);
  *(_DWORD *)__src = *(_DWORD *)(a1 + 224);
  XXH64_update((uint64_t)v30, __src, 4uLL);
  *(_DWORD *)__src = *(_DWORD *)(a1 + 228);
  XXH64_update((uint64_t)v30, __src, 4uLL);
  *(_DWORD *)__src = *(_DWORD *)(a1 + 232);
  XXH64_update((uint64_t)v30, __src, 4uLL);
  *(_DWORD *)__src = *(unsigned __int8 *)(a1 + 236);
  XXH64_update((uint64_t)v30, __src, 4uLL);
  *(_DWORD *)__src = *(_DWORD *)(a1 + 220);
  XXH64_update((uint64_t)v30, __src, 4uLL);
  *(_QWORD *)(a1 + 88) = XXH64_digest((uint64_t)v30);
  *(_WORD *)(a1 + 96) = 1;
  return a1;
}

{
  return CI::ProviderImage::ProviderImage(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

void CI::ProviderImage::~ProviderImage(CI::ProviderImage *this)
{
  const void *v2;
  const void *v3;
  NSObject *v4;
  const void *v5;
  unsigned int v6;
  void **v7;

  *(_QWORD *)this = &off_1E2EBA410;
  *((_QWORD *)this + 13) = &unk_1E2EBA578;
  v2 = (const void *)*((_QWORD *)this + 16);
  if (v2)
    _Block_release(v2);
  *((_QWORD *)this + 16) = 0;
  v3 = (const void *)*((_QWORD *)this + 15);
  if (v3)
    CFRelease(v3);
  *((_QWORD *)this + 15) = 0;
  v4 = *((_QWORD *)this + 17);
  if (v4)
    dispatch_release(v4);
  *((_QWORD *)this + 17) = 0;
  v5 = (const void *)*((_QWORD *)this + 23);
  if (v5)
    CFRelease(v5);
  *((_QWORD *)this + 23) = 0;
  PurgeCacheEntriesForImage(*((_DWORD *)this + 25));
  v7 = (void **)((char *)this + 160);
  std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v7);
  *((_QWORD *)this + 13) = off_1E2EBB920;
  do
    v6 = __ldaxr(&dword_1ECF872F0[16]);
  while (__stlxr(v6 - 1, &dword_1ECF872F0[16]));
  CI::Image::~Image(this);
}

{
  CI::ProviderImage::~ProviderImage(this);
  JUMPOUT(0x194025AACLL);
}

void `non-virtual thunk to'CI::ProviderImage::~ProviderImage(CI::ProviderImage *this)
{
  CI::ProviderImage::~ProviderImage((CI::ProviderImage *)((char *)this - 104));
}

{
  CI::ProviderImage::~ProviderImage((CI::ProviderImage *)((char *)this - 104));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::ProviderImage::add_args_to_hash(uint64_t a1, uint64_t a2)
{
  int __src;

  __src = *(_DWORD *)(a1 + 216);
  XXH64_update(a2, (char *)&__src, 4uLL);
  __src = *(_DWORD *)(a1 + 224);
  XXH64_update(a2, (char *)&__src, 4uLL);
  __src = *(_DWORD *)(a1 + 228);
  XXH64_update(a2, (char *)&__src, 4uLL);
  __src = *(_DWORD *)(a1 + 232);
  XXH64_update(a2, (char *)&__src, 4uLL);
  __src = *(_DWORD *)(a1 + 220);
  XXH64_update(a2, (char *)&__src, 4uLL);
  __src = *(unsigned __int8 *)(a1 + 236);
  return XXH64_update(a2, (char *)&__src, 4uLL);
}

void CI::ProviderImage::print_for_graph_core(CI::ProviderImage *this, __sFILE *__stream)
{
  const __CFString *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  int HasVaryingTileSizes;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  void **v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  int v49;
  const char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  _QWORD v54[3];
  char *v55;
  char *v56;
  uint64_t v57;
  _QWORD v58[3];
  char *v59;
  char *v60;
  uint64_t v61;
  _QWORD v62[3];
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD v66[3];
  void **v67;

  fwrite("provider", 8uLL, 1uLL, __stream);
  if (*((_QWORD *)this + 14))
    fprintf(__stream, " content:%016llX");
  else
    fprintf(__stream, " %d");
  if (*((_QWORD *)this + 15))
  {
    fputc(58, __stream);
    CI::fprintf(__stream, *((CFStringRef *)this + 15), v4);
  }
  v5 = CI::name_for_format(*((_DWORD *)this + 54));
  fprintf(__stream, " %s", v5);
  if (*((_DWORD *)this + 56))
    fprintf(__stream, "-%d", *((_DWORD *)this + 56));
  v6 = *((_QWORD *)this + 20);
  v7 = *((_QWORD *)this + 21);
  if (v6 != v7)
  {
    memset(v66, 0, sizeof(v66));
    std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v66, v6, v7, 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3));
    HasVaryingTileSizes = CI::Tileable::findHasVaryingTileSizes((uint64_t)v66);
    v67 = (void **)v66;
    std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v67);
    if (HasVaryingTileSizes)
    {
      v63 = 0;
      v64 = 0;
      v65 = 0;
      std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(&v63, *((_QWORD *)this + 20), *((_QWORD *)this + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 3));
      v9 = v63;
      v10 = 0;
      if (v64 != v63)
      {
        v11 = (v64 - v63) / 24;
        if (v11 <= 1)
          v11 = 1;
        do
        {
          v12 = *(_QWORD *)v9;
          v9 += 24;
          v13 = *(_QWORD *)(v12 + 8);
          if (v13 > v10)
            v10 = v13;
          --v11;
        }
        while (v11);
      }
      memset(v62, 0, sizeof(v62));
      std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v62, *((_QWORD *)this + 20), *((_QWORD *)this + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 3));
      v14 = 0;
      v15 = *(_QWORD *)(v62[0] + 8) - *(_QWORD *)v62[0];
      if (v15)
      {
        v16 = v15 / 24;
        if (v16 <= 1)
          v16 = 1;
        v17 = (unint64_t *)(*(_QWORD *)v62[0] + 16);
        do
        {
          v19 = *v17;
          v17 += 3;
          v18 = v19;
          if (v19 > v14)
            v14 = v18;
          --v16;
        }
        while (v16);
      }
      fprintf(__stream, " tiles of varying sizes with max %zu,%zu", v10, v14);
      v67 = (void **)v62;
      std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v67);
      v20 = (void **)&v63;
    }
    else
    {
      v59 = 0;
      v60 = 0;
      v61 = 0;
      std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(&v59, *((_QWORD *)this + 20), *((_QWORD *)this + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 3));
      v21 = v59;
      v22 = 0;
      if (v60 != v59)
      {
        v23 = (v60 - v59) / 24;
        if (v23 <= 1)
          v23 = 1;
        do
        {
          v24 = *(_QWORD *)v21;
          v21 += 24;
          v25 = *(_QWORD *)(v24 + 8);
          if (v25 > v22)
            v22 = v25;
          --v23;
        }
        while (v23);
      }
      memset(v58, 0, sizeof(v58));
      std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v58, *((_QWORD *)this + 20), *((_QWORD *)this + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 3));
      v26 = *(_QWORD *)(v58[0] + 8);
      v27 = 0;
      if (v26 != *(_QWORD *)v58[0])
      {
        v28 = (v26 - *(_QWORD *)v58[0]) / 24;
        if (v28 <= 1)
          v28 = 1;
        v29 = (unint64_t *)(*(_QWORD *)v58[0] + 16);
        do
        {
          v31 = *v29;
          v29 += 3;
          v30 = v31;
          if (v31 > v27)
            v27 = v30;
          --v28;
        }
        while (v28);
      }
      v67 = (void **)v58;
      std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v67);
      v67 = (void **)&v59;
      std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v67);
      if (v22 == v27)
      {
        v51 = 0;
        v52 = 0;
        v53 = 0;
        std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(&v51, *((_QWORD *)this + 20), *((_QWORD *)this + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 3));
        v32 = v51;
        if (v52 == v51)
        {
          v33 = 0;
        }
        else
        {
          v33 = 0;
          v34 = (v52 - v51) / 24;
          if (v34 <= 1)
            v34 = 1;
          do
          {
            v35 = *(_QWORD *)v32;
            v32 += 24;
            v36 = *(_QWORD *)(v35 + 8);
            if (v36 > v33)
              v33 = v36;
            --v34;
          }
          while (v34);
        }
        fprintf(__stream, " tile %zu", v33);
        v67 = (void **)&v51;
        goto LABEL_62;
      }
      v55 = 0;
      v56 = 0;
      v57 = 0;
      std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(&v55, *((_QWORD *)this + 20), *((_QWORD *)this + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 3));
      v37 = v55;
      v38 = 0;
      if (v56 != v55)
      {
        v39 = (v56 - v55) / 24;
        if (v39 <= 1)
          v39 = 1;
        do
        {
          v40 = *(_QWORD *)v37;
          v37 += 24;
          v41 = *(_QWORD *)(v40 + 8);
          if (v41 > v38)
            v38 = v41;
          --v39;
        }
        while (v39);
      }
      memset(v54, 0, sizeof(v54));
      std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v54, *((_QWORD *)this + 20), *((_QWORD *)this + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 3));
      v42 = 0;
      v43 = *(_QWORD *)(v54[0] + 8) - *(_QWORD *)v54[0];
      if (v43)
      {
        v44 = v43 / 24;
        if (v44 <= 1)
          v44 = 1;
        v45 = (unint64_t *)(*(_QWORD *)v54[0] + 16);
        do
        {
          v47 = *v45;
          v45 += 3;
          v46 = v47;
          if (v47 > v42)
            v42 = v46;
          --v44;
        }
        while (v44);
      }
      fprintf(__stream, " tile %zu,%zu", v38, v42);
      v67 = (void **)v54;
      std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v67);
      v20 = (void **)&v55;
    }
    v67 = v20;
LABEL_62:
    std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v67);
  }
  v48 = "alpha_one";
  switch(*((_DWORD *)this + 57))
  {
    case 0:
      goto LABEL_69;
    case 1:
      goto LABEL_68;
    case 2:
      v48 = "alpha_unpremul";
      goto LABEL_68;
    case 4:
      v48 = "alpha_premul-clear-edges";
      goto LABEL_68;
    case 6:
      v48 = "alpha_unpremul-clear-edges";
      goto LABEL_68;
    default:
      v48 = "alpha_unknown";
LABEL_68:
      fprintf(__stream, " %s", v48);
LABEL_69:
      v49 = *((_DWORD *)this + 58);
      if (v49)
      {
        if (v49 == 1)
          v50 = "edge_clamp";
        else
          v50 = "edge_unknown";
        fprintf(__stream, " %s", v50);
      }
      if (*((_BYTE *)this + 236))
        fwrite(" nearestsampling", 0x10uLL, 1uLL, __stream);
      if (*((_BYTE *)this + 237))
        fwrite(" cache", 6uLL, 1uLL, __stream);
      return;
  }
}

uint64_t CI::Tileable::findHasVaryingTileSizes(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = *(uint64_t **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 != v2)
  {
    v3 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (uint64_t)v1) >> 3);
    if (v3 >= 2)
    {
      v4 = v3 - 1;
      v5 = &v1[3 * v3];
      v6 = v5 - 6;
      v7 = v5 - 3;
      v8 = *(uint64_t **)a1;
      do
      {
        if (v4 == 1)
        {
          if (*(_QWORD *)(*v6 + 8) != *(_QWORD *)(*v7 + 8))
            return 1;
        }
        else if (*(_QWORD *)(*v8 + 8) < *(_QWORD *)(v8[3] + 8))
        {
          return 1;
        }
        v8 += 3;
        --v4;
      }
      while (v4);
      v9 = *v1;
      v10 = 0xAAAAAAAAAAAAAAABLL * ((v1[1] - *v1) >> 3);
      if (v10 >= 2)
      {
        v11 = v10 - 1;
        v12 = v9 + 24 * v10;
        v13 = (_QWORD *)(v12 - 32);
        v14 = (_QWORD *)(v12 - 8);
        v15 = (_QWORD *)(v9 + 40);
        do
        {
          if (v11 == 1)
          {
            if (*v13 != *v14)
              return 1;
          }
          else if (*(v15 - 3) < *v15)
          {
            return 1;
          }
          v15 += 3;
          --v11;
        }
        while (v11);
      }
    }
  }
  return 0;
}

uint64_t CI::ProviderImage::matrix_bias(CI::ProviderImage *this, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t result;
  int is_ycc_full_range;
  int v12;
  int default_ycc_color_matrix;

  result = CI::format_is_ycc_or_ycca(*((_DWORD *)this + 54));
  if ((_DWORD)result)
  {
    is_ycc_full_range = CI::format_is_ycc_full_range(*((_DWORD *)this + 54));
    if ((CI::format_is_float(*((_DWORD *)this + 54)) & 1) != 0)
    {
      v12 = 0;
    }
    else if (CI::format_is_deep(*((_DWORD *)this + 54)))
    {
      v12 = 10;
    }
    else
    {
      v12 = 8;
    }
    default_ycc_color_matrix = *((_DWORD *)this + 56);
    if (!default_ycc_color_matrix)
      default_ycc_color_matrix = CI::format_get_default_ycc_color_matrix(*((_DWORD *)this + 54));
    return get_ycc_to_rgb_matrix(default_ycc_color_matrix, is_ycc_full_range, v12, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
  }
  return result;
}

CI::Object *CI::ProviderImage::render_graph_core(CI::ProviderImage *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  CI::FillNode *v14;
  double v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  int v23;
  int v24;
  CI::Object *v25;
  int v26;
  CI *v27;
  const void *v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  CI::Object *v33;
  CI::Object *v34;
  CI::Node *v35;
  CI::Object *v36;
  CI::ColorMatrixNode *v37;
  int v38;
  int v39;
  char v40;
  int v41;
  signed int v42;
  int v43;
  int v44;
  uint64_t v45[3];
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _OWORD v59[9];
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;

  v70 = *MEMORY[0x1E0C80C00];
  v7 = CI::ProviderNode::FormatConversion(*((unsigned int *)a1 + 54));
  if (!CI::Context::format_is_supported_for_input(a2, v7))
  {
    v12 = ci_logger_render();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    goto LABEL_9;
  }
  v8 = CI::Context::swizzler_for_input(a2, v7);
  v10 = v9;
  if (!CI::PixelFormatType_from_format(v8))
  {
    v13 = ci_logger_render();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
LABEL_8:
      CI::ProviderImage::render_graph_core(v7);
LABEL_9:
    v14 = (CI::FillNode *)operator new();
    CI::FillNode::FillNode(v14);
    return v14;
  }
  v11 = *((_DWORD *)a1 + 58);
  if (v11 == 1)
  {
    v39 = 0;
  }
  else
  {
    if ((*((_DWORD *)a1 + 57) | 2) == 6)
      goto LABEL_12;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 74)
      goto LABEL_48;
    v16 = CI::Image::lookup_union_roi((uint64_t)a1, a4);
    v18 = v17;
    v20 = v19;
    v22 = v21;
    v71.origin.x = (*(double (**)(CI::ProviderImage *))(*(_QWORD *)a1 + 88))(a1);
    v73.origin.x = v16;
    v73.origin.y = v18;
    v73.size.width = v20;
    v73.size.height = v22;
    if (CGRectContainsRect(v71, v73))
    {
LABEL_12:
      v39 = 0;
      v11 = 1;
    }
    else
    {
LABEL_48:
      if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 560))(a2, 0))
        v11 = CI::format_has_alpha(*((_DWORD *)a1 + 54)) ^ 1;
      else
        v11 = 1;
      v39 = v11;
    }
  }
  v38 = v11;
  v23 = v8;
  if (v10)
    v23 = CI::input_format_for_conversion(v10);
  v41 = v23;
  if (*((_BYTE *)a1 + 236))
    v24 = 1;
  else
    v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 568))(a2, 1, v8) ^ 1;
  v44 = v24;
  v42 = v10;
  v43 = HIDWORD(v8);
  if (*((_BYTE *)a1 + 238))
    v40 = 0;
  else
    v40 = *((_BYTE *)a1 + 237) != 0;
  v25 = (CI::Object *)operator new();
  v26 = *((_DWORD *)a1 + 25);
  v27 = (CI *)*((_QWORD *)a1 + 14);
  v28 = (const void *)*((_QWORD *)a1 + 15);
  v30 = (const void *)*((_QWORD *)a1 + 16);
  v29 = *((_QWORD *)a1 + 17);
  v31 = *((_QWORD *)a1 + 18);
  v32 = *((_QWORD *)a1 + 19);
  memset(v45, 0, sizeof(v45));
  std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v45, *((_QWORD *)a1 + 20), *((_QWORD *)a1 + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 21) - *((_QWORD *)a1 + 20)) >> 3));
  CI::ProviderNode::ProviderNode((uint64_t)v25, v26, v27, v28, v30, v29, v31, v32, v45, *((_DWORD *)a1 + 54), v41, *((_DWORD *)a1 + 57), v38, v44, v40, *((_BYTE *)a1 + 238));
  *(_QWORD *)&v59[0] = v45;
  std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100]((void ***)v59);
  v33 = CI::ConvertNode::append_to_tree(v25, v42);
  CI::Object::unref(v25);
  v34 = CI::SwizzleNode::append_to_tree(v33, v43, 1, 0);
  if (v33)
    CI::Object::unref(v33);
  if (*((unsigned __int8 *)a1 + 236) != v44)
  {
    v35 = (CI::Node *)CI::SampleModeNode::append_to_tree((uint64_t)v34, 1);
    if (v34)
      CI::Object::unref(v34);
    v34 = (CI::Object *)CI::NoopNode::append_to_tree_and_unref(v35, a2, 6);
  }
  if (*((_DWORD *)a1 + 57) == 2)
  {
    v36 = CI::PremultiplyNode::append_to_tree(v34, (CI::Node *)1, 1);
    if (v34)
      CI::Object::unref(v34);
  }
  else
  {
    v36 = v34;
  }
  if (CI::ProviderImage::matrix_bias(a1, (double *)&v68, (double *)&v66, (double *)&v64, (double *)&v62))
  {
    v59[0] = xmmword_19249BCC8;
    v59[1] = unk_19249BCD8;
    v59[2] = xmmword_19249BCE8;
    memset(&v59[3], 0, 32);
    v59[5] = unk_19249BD18;
    v59[6] = xmmword_19249BD28;
    v59[7] = unk_19249BD38;
    v59[8] = v68;
    v60 = v69;
    v61 = 0;
    v37 = CI::ColorMatrixNode::append_to_tree(v36, (CI::Node *)v59, (const double (*)[4])1);
    if (v36)
      CI::Object::unref(v36);
    v46 = v66;
    v47 = v67;
    v48 = 0;
    v49 = v64;
    v50 = v65;
    v51 = 0;
    v52 = v62;
    v53 = v63;
    v54 = 0;
    v55 = xmmword_19249BD28;
    v57 = 0u;
    v58 = 0u;
    v56 = unk_19249BD38;
    v36 = CI::ColorMatrixNode::append_to_tree(v37, (CI::Node *)&v46, (const double (*)[4])1);
    if (v37)
      CI::Object::unref(v37);
  }
  if (!v39)
    return v36;
  v72.origin.x = (*(double (**)(CI::ProviderImage *))(*(_QWORD *)a1 + 88))(a1);
  v14 = (CI::FillNode *)CI::CropNode::append_to_tree(v36, (CI::Node *)1, v72);
  if (v36)
    CI::Object::unref(v36);
  return v14;
}

void CI::ProviderImage::restore_resources(CI::ProviderImage *this, CI::Node *a2)
{
  if ((*(unsigned int (**)(CI::Node *))(*(_QWORD *)a2 + 16))(a2) == 44)
    CI::ProviderNode::set_provider((uint64_t)a2, *((_DWORD *)this + 25), *((CI **)this + 14), *((void **)this + 16), *((NSObject **)this + 17));
}

CIGVNode *CI::ProviderImage::node_for_graphviz(uint64_t a1, _QWORD *a2)
{
  CIGVNode *v3;
  uint64_t v4;
  __IOSurface *Surface;
  __IOSurface *v6;
  char *CGImage;
  _QWORD v9[5];

  v3 = CI::Image::node_for_graphviz((unsigned int *)a1, a2);
  if (CI_PRINT_TREE_dump_inputs())
  {
    v4 = CI::PixelFormatType_from_format(*(_DWORD *)(a1 + 216));
    if ((_DWORD)v4)
    {
      if (*(_QWORD *)(a1 + 160) == *(_QWORD *)(a1 + 168))
      {
        Surface = CreateSurface(*(__CVBuffer **)(a1 + 144), *(__CVBuffer **)(a1 + 152), 0, v4, 0);
        if (Surface)
        {
          v6 = Surface;
          v9[0] = MEMORY[0x1E0C809B0];
          v9[1] = 0x40000000;
          v9[2] = ___ZNK2CI13ProviderImage17node_for_graphvizERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEE_block_invoke;
          v9[3] = &__block_descriptor_tmp_14;
          v9[4] = a1;
          SurfaceApplyPlaneBlock(Surface, (uint64_t)v9);
          CGImage = (char *)SurfaceCreateCGImage(v6, 0, 1);
          CIGVNodeAddImage(v3, CGImage);
          CGImageRelease((CGImageRef)CGImage);
          CFRelease(v6);
        }
      }
    }
  }
  return v3;
}

uint64_t ___ZNK2CI13ProviderImage17node_for_graphvizERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3 == 1 && !CI::format_is_ycc_422(*(_DWORD *)(v3 + 216)))
    CI::format_is_ycc_444(*(_DWORD *)(v3 + 216));
  return (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 128) + 16))();
}

void CI::ProviderImage::print_for_graphviz(uint64_t a1, FILE *__stream, uint64_t a3, int a4)
{
  uint64_t v6;
  const __CFString *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  const char *v23;
  int v24;
  const char *v25;
  _QWORD v26[3];
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD v30[3];
  char **v31;

  if (a4)
    v6 = 32;
  else
    v6 = 10;
  fwrite("provider", 8uLL, 1uLL, __stream);
  if (*(_QWORD *)(a1 + 112))
    fprintf(__stream, " content:%016llX");
  else
    fprintf(__stream, " %d");
  if (*(_QWORD *)(a1 + 120))
  {
    fputc(58, __stream);
    CI::fprintf(__stream, *(CFStringRef *)(a1 + 120), v7);
  }
  v8 = CI::name_for_format(*(_DWORD *)(a1 + 216));
  fprintf(__stream, " %s", v8);
  if (*(_DWORD *)(a1 + 224))
    fprintf(__stream, " %d", *(_DWORD *)(a1 + 224));
  fprintf(__stream, " %ldx%ld", *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152));
  v9 = *(_QWORD *)(a1 + 160);
  v10 = *(_QWORD *)(a1 + 168);
  if (v9 != v10)
  {
    memset(v30, 0, sizeof(v30));
    std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v30, v9, v10, 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3));
    if (CI::Tileable::findHasVaryingTileSizes((uint64_t)v30))
      v11 = "varying size with max ";
    else
      v11 = "";
    v28 = 0;
    v29 = 0;
    v27 = 0;
    std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(&v27, *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3));
    v12 = v27;
    v13 = 0;
    if (v28 != v27)
    {
      v14 = (v28 - v27) / 24;
      if (v14 <= 1)
        v14 = 1;
      do
      {
        v15 = *(_QWORD *)v12;
        v12 += 24;
        v16 = *(_QWORD *)(v15 + 8);
        if (v16 > v13)
          v13 = v16;
        --v14;
      }
      while (v14);
    }
    memset(v26, 0, sizeof(v26));
    std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v26, *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3));
    v17 = 0;
    v18 = *(_QWORD *)(v26[0] + 8) - *(_QWORD *)v26[0];
    if (v18)
    {
      v19 = v18 / 24;
      if (v19 <= 1)
        v19 = 1;
      v20 = (unint64_t *)(*(_QWORD *)v26[0] + 16);
      do
      {
        v22 = *v20;
        v20 += 3;
        v21 = v22;
        if (v22 > v17)
          v17 = v21;
        --v19;
      }
      while (v19);
    }
    fprintf(__stream, "%ctile=%s%zux%zu", v6, v11, v13, v17);
    v31 = (char **)v26;
    std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v31);
    v31 = &v27;
    std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v31);
    v31 = (char **)v30;
    std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v31);
  }
  if (*(_DWORD *)(a1 + 228) || *(_DWORD *)(a1 + 232) || *(_BYTE *)(a1 + 236) || *(_BYTE *)(a1 + 237))
  {
    fputc(v6, __stream);
    v23 = "alpha_one";
    switch(*(_DWORD *)(a1 + 228))
    {
      case 0:
        break;
      case 1:
        goto LABEL_38;
      case 2:
        v23 = "alpha_unpremul";
        goto LABEL_38;
      case 4:
        v23 = "alpha_premul-clear-edges";
        goto LABEL_38;
      case 6:
        v23 = "alpha_unpremul-clear-edges";
        goto LABEL_38;
      default:
        v23 = "alpha_unknown";
LABEL_38:
        fprintf(__stream, "%s ", v23);
        break;
    }
  }
  v24 = *(_DWORD *)(a1 + 232);
  if (v24)
  {
    if (v24 == 1)
      v25 = "edge_clamp";
    else
      v25 = "edge_unknown";
    fprintf(__stream, "%s ", v25);
  }
  if (*(_BYTE *)(a1 + 236))
    fwrite("nearestsampling ", 0x10uLL, 1uLL, __stream);
  if (*(_BYTE *)(a1 + 237))
    fwrite("cache ", 6uLL, 1uLL, __stream);
}

uint64_t CI::ProviderImage::type(CI::ProviderImage *this)
{
  return 18;
}

uint64_t CI::ProviderImage::child_count(CI::ProviderImage *this)
{
  return 0;
}

uint64_t CI::ProviderImage::child(CI::ProviderImage *this)
{
  return 0;
}

uint64_t CI::ProviderImage::shape_for_graphviz(CI::ProviderImage *this)
{
  return 0;
}

uint64_t CI::ProviderImage::color_for_graphviz(CI::ProviderImage *this)
{
  return 12;
}

_DWORD *CI::ProviderImage::extent(_DWORD *this)
{
  if (!this[58])
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 96))(this);
  return this;
}

double CI::ProviderImage::extent_unclamped(CI::ProviderImage *this)
{
  return 0.0;
}

uint64_t CI::ProviderImage::max_dimension(CI::ProviderImage *this)
{
  if (*((_QWORD *)this + 18) <= *((_QWORD *)this + 19))
    return *((_QWORD *)this + 19);
  else
    return *((_QWORD *)this + 18);
}

BOOL CI::ProviderImage::alpha_one(CI::ProviderImage *this)
{
  return *((_DWORD *)this + 57) == 1;
}

uint64_t CI::ProviderImage::output_format(CI::ProviderImage *this)
{
  return *((unsigned int *)this + 54);
}

uint64_t CI::ProviderImage::properties(CI::ProviderImage *this)
{
  return *((_QWORD *)this + 23);
}

uint64_t CI::ProviderImage::avdepthdata(CI::ProviderImage *this)
{
  return *((_QWORD *)this + 24);
}

uint64_t CI::ProviderImage::avmatte(CI::ProviderImage *this)
{
  return *((_QWORD *)this + 25);
}

uint64_t CI::ProviderImage::ssmatte(CI::ProviderImage *this)
{
  return *((_QWORD *)this + 26);
}

float CI::ProviderImage::headroom(CI::ProviderImage *this)
{
  return *((float *)this + 55);
}

uint64_t CI::ProviderImage::colorspace(CI::ProviderImage *this)
{
  return 0;
}

void CI::ProviderImage::set_avdepthdata(CI::ProviderImage *this, CFTypeRef cf)
{
  const void *v4;

  CFRetain(cf);
  v4 = (const void *)*((_QWORD *)this + 24);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 24) = cf;
}

void CI::ProviderImage::set_avmatte(CI::ProviderImage *this, CFTypeRef cf)
{
  const void *v4;

  CFRetain(cf);
  v4 = (const void *)*((_QWORD *)this + 25);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 25) = cf;
}

void CI::ProviderImage::set_ssmatte(CI::ProviderImage *this, CFTypeRef cf)
{
  const void *v4;

  CFRetain(cf);
  v4 = (const void *)*((_QWORD *)this + 26);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 26) = cf;
}

uint64_t `non-virtual thunk to'CI::ProviderImage::type(CI::ProviderImage *this)
{
  return 18;
}

void std::vector<std::vector<IRect>>::__assign_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  char v23;
  char v24;

  v6 = a2;
  v8 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= a4)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v8) >> 3) >= a4)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::vector<IRect> *,std::vector<IRect> *,std::vector<IRect> *>((int)&v24, a2, a3, v8);
      v18 = v17;
      v19 = a1[1];
      if (v19 != v17)
      {
        v20 = a1[1];
        do
        {
          v22 = *(void **)(v20 - 24);
          v20 -= 24;
          v21 = v22;
          if (v22)
          {
            *(_QWORD *)(v19 - 16) = v21;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v18);
      }
      a1[1] = v18;
    }
    else
    {
      v13 = a2 + 8 * ((a1[1] - (uint64_t)v8) >> 3);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::vector<IRect> *,std::vector<IRect> *,std::vector<IRect> *>((int)&v23, a2, v13, v8);
      v14 = a1[1];
      if (v13 != a3)
      {
        v15 = (_QWORD *)a1[1];
        do
        {
          v16 = std::vector<IRect>::vector(v15, v13);
          v13 += 24;
          v15 = v16 + 3;
          v14 += 24;
        }
        while (v13 != a3);
      }
      a1[1] = v14;
    }
  }
  else
  {
    std::vector<std::vector<IRect>>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v9 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<CI::SWRendererFunctionInputNode>::__vallocate[abi:nn180100](a1, v10);
    v11 = (_QWORD *)a1[1];
    while (v6 != a3)
    {
      v12 = std::vector<IRect>::vector(v11, v6);
      v6 += 24;
      v11 = v12 + 3;
    }
    a1[1] = (uint64_t)v11;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::vector<IRect> *,std::vector<IRect> *,std::vector<IRect> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        std::vector<IRect>::__assign_with_size[abi:nn180100]<IRect*,IRect*>(a4, *(char **)v5, *(_QWORD *)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3));
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *std::vector<IRect>::__assign_with_size[abi:nn180100]<IRect*,IRect*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<CI::SWRendererFunctionInputNode>::__vallocate[abi:nn180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

uint64_t CI::InstanceCounted<(CI::Type)18>::type()
{
  return 18;
}

_QWORD *CI::InstanceCounted<(CI::Type)18>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBB920;
  do
    v1 = __ldaxr(&dword_1ECF872F0[16]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[16]));
  return result;
}

void CI::InstanceCounted<(CI::Type)18>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBB920;
  do
    v1 = __ldaxr(&dword_1ECF872F0[16]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[16]));
  JUMPOUT(0x194025AACLL);
}

CI::Node *CI::SampleModeImage::render_graph_core(uint64_t a1, uint64_t a2, CI::Object *this)
{
  CI::Object *v5;
  _DWORD *v6;
  unsigned int v7;
  CI::Node *v8;
  CI::Node *result;

  if (this)
  {
    v5 = (CI::Object *)CI::Object::ref((uint64_t)this);
    v7 = *(_DWORD *)(a1 + 120);
    v6 = (_DWORD *)(a1 + 120);
    v8 = (CI::Node *)CI::SampleModeNode::append_to_tree((uint64_t)v5, v7);
    if (v5)
      CI::Object::unref(v5);
  }
  else
  {
    v6 = (_DWORD *)(a1 + 120);
    v8 = (CI::Node *)CI::SampleModeNode::append_to_tree(0, *(unsigned int *)(a1 + 120));
  }
  result = v8;
  if (*v6 == 1)
    return (CI::Node *)CI::NoopNode::append_to_tree_and_unref(v8, a2, 6);
  return result;
}

CGFloat CI::SampleModeImage::roi_of_child(CI::SampleModeImage *this, CGRect a2)
{
  int v2;
  CGFloat v3;
  CGRect v5;

  v2 = *((_DWORD *)this + 30);
  if (v2 == 1)
  {
    v3 = -0.499;
    goto LABEL_5;
  }
  if (!v2)
  {
    v3 = 0.001;
LABEL_5:
    v5 = CGRectInset(a2, v3, v3);
    *(_QWORD *)&a2.origin.x = (unint64_t)CGRectIntegral(v5);
  }
  return a2.origin.x;
}

__n64 CI::SampleModeImage::extent(CI::SampleModeImage *this)
{
  __n64 result;
  int v6;
  CGRect v7;
  CGRect v8;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 13) + 88))(*((_QWORD *)this + 13));
  v6 = *((_DWORD *)this + 30);
  if (!v6)
  {
    v7 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
    *(CGRect *)result.n64_u64 = CGRectIntegral(v7);
    v6 = *((_DWORD *)this + 30);
  }
  if (v6 == 1)
  {
    v8 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
    return (__n64)CGRectIntegral(v8);
  }
  return result;
}

__n64 CI::SampleModeImage::extent_unclamped(CI::SampleModeImage *this)
{
  __n64 result;
  int v6;
  CGRect v7;
  CGRect v8;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 13) + 96))(*((_QWORD *)this + 13));
  v6 = *((_DWORD *)this + 30);
  if (!v6)
  {
    v7 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
    *(CGRect *)result.n64_u64 = CGRectIntegral(v7);
    v6 = *((_DWORD *)this + 30);
  }
  if (v6 == 1)
  {
    v8 = CGRectInset(*(CGRect *)result.n64_u64, -0.499, -0.499);
    return (__n64)CGRectIntegral(v8);
  }
  return result;
}

void CI::SampleModeImage::~SampleModeImage(CI::SampleModeImage *this)
{
  unsigned int v1;

  *((_QWORD *)this + 14) = off_1E2EBB970;
  do
    v1 = __ldaxr(&dword_1ECF872F0[18]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[18]));
  CI::ImageWithChild::~ImageWithChild(this);
}

{
  unsigned int v1;

  *((_QWORD *)this + 14) = off_1E2EBB970;
  do
    v1 = __ldaxr(&dword_1ECF872F0[18]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[18]));
  CI::ImageWithChild::~ImageWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::SampleModeImage::type(CI::SampleModeImage *this)
{
  return 20;
}

uint64_t CI::SampleModeImage::shape_for_graphviz(CI::SampleModeImage *this)
{
  return 3;
}

uint64_t CI::SampleModeImage::color_for_graphviz(CI::SampleModeImage *this)
{
  return 2;
}

uint64_t CI::SampleModeImage::add_args_to_hash(uint64_t a1, uint64_t a2)
{
  int __src;

  __src = *(_DWORD *)(a1 + 120);
  return XXH64_update(a2, (char *)&__src, 4uLL);
}

uint64_t CI::SampleModeImage::alpha_one(CI::SampleModeImage *this)
{
  return 0;
}

uint64_t CI::SampleModeImage::print_for_graph_core(CI::SampleModeImage *this, __sFILE *a2)
{
  unsigned int v2;
  const char *v3;

  v2 = *((_DWORD *)this + 30) + 1;
  if (v2 > 2)
    v3 = "unknown";
  else
    v3 = off_1E2EC7278[v2];
  return fprintf(a2, "samplemode %s", v3);
}

uint64_t CI::SampleModeImage::headroom(CI::SampleModeImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 232))(*((_QWORD *)this + 13));
}

uint64_t CI::SampleModeImage::colorspace(CI::SampleModeImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 240))(*((_QWORD *)this + 13));
}

uint64_t `non-virtual thunk to'CI::SampleModeImage::type(CI::SampleModeImage *this)
{
  return 20;
}

void `non-virtual thunk to'CI::SampleModeImage::~SampleModeImage(CI::SampleModeImage *this)
{
  CI::ImageWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBB970;
  v1 = (CI::SampleModeImage *)((char *)this - 112);
  do
    v2 = __ldaxr(&dword_1ECF872F0[18]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[18]));
  CI::ImageWithChild::~ImageWithChild(v1);
}

{
  CI::ImageWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBB970;
  v1 = (CI::SampleModeImage *)((char *)this - 112);
  do
    v2 = __ldaxr(&dword_1ECF872F0[18]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[18]));
  CI::ImageWithChild::~ImageWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::SetPropsImage::render_graph_core(int a1, int a2, CI::Object *this)
{
  if (this)
    return CI::Object::ref((uint64_t)this);
  else
    return 0;
}

void CI::SetPropsImage::~SetPropsImage(CI::SetPropsImage *this)
{
  CI::SetPropsImage::~SetPropsImage(this);
  JUMPOUT(0x194025AACLL);
}

{
  const void *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_1E2EBA5A0;
  *((_QWORD *)this + 14) = &unk_1E2EBA6F8;
  v2 = (const void *)*((_QWORD *)this + 15);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 14) = off_1E2EBB998;
  *((_QWORD *)this + 15) = 0;
  do
    v3 = __ldaxr(&dword_1ECF872F0[19]);
  while (__stlxr(v3 - 1, &dword_1ECF872F0[19]));
  CI::ImageWithChild::~ImageWithChild(this);
}

uint64_t CI::SetPropsImage::type(CI::SetPropsImage *this)
{
  return 21;
}

uint64_t CI::SetPropsImage::shape_for_graphviz(CI::SetPropsImage *this)
{
  return 2;
}

uint64_t CI::SetPropsImage::color_for_graphviz(CI::SetPropsImage *this)
{
  return 0;
}

uint64_t CI::SetPropsImage::output_format(CI::SetPropsImage *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(CI::SetPropsImage *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 144))(v1);
}

size_t CI::SetPropsImage::print_for_graph_core(CI::SetPropsImage *this, __sFILE *__stream)
{
  return fwrite("setprops", 8uLL, 1uLL, __stream);
}

uint64_t CI::SetPropsImage::properties(CI::SetPropsImage *this)
{
  return *((_QWORD *)this + 15);
}

uint64_t CI::SetPropsImage::headroom(CI::SetPropsImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 232))(*((_QWORD *)this + 13));
}

uint64_t CI::SetPropsImage::colorspace(CI::SetPropsImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 240))(*((_QWORD *)this + 13));
}

uint64_t `non-virtual thunk to'CI::SetPropsImage::type(CI::SetPropsImage *this)
{
  return 21;
}

void `non-virtual thunk to'CI::SetPropsImage::~SetPropsImage(CI::SetPropsImage *this)
{
  CI::SetPropsImage::~SetPropsImage((CI::SetPropsImage *)((char *)this - 112));
}

{
  CI::SetPropsImage::~SetPropsImage((CI::SetPropsImage *)((char *)this - 112));
  JUMPOUT(0x194025AACLL);
}

size_t CI::SRGBImage::print_for_graph_core(CI::SRGBImage *this, __sFILE *__stream)
{
  int v3;
  const char *v4;
  size_t v5;

  v3 = *((_DWORD *)this + 30);
  switch(v3)
  {
    case 1:
      v4 = "linear_to_srgb";
      break;
    case 0:
      v4 = "srgb_noop";
      v5 = 9;
      return fwrite(v4, v5, 1uLL, __stream);
    case -1:
      v4 = "srgb_to_linear";
      break;
    default:
      v4 = "srgb_invalid";
      v5 = 12;
      return fwrite(v4, v5, 1uLL, __stream);
  }
  v5 = 14;
  return fwrite(v4, v5, 1uLL, __stream);
}

float CI::SRGBImage::headroom(CI::SRGBImage *this)
{
  uint64_t v2;
  int8x16_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int v6;
  float v7;
  float v8;
  float v9;
  int8x16_t v10;
  float v11;
  float v12;
  int8x16_t v13;

  v2 = (*(uint64_t (**)(CI::SRGBImage *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  *(float *)v3.i32 = (*(float (**)(uint64_t))(*(_QWORD *)v2 + 232))(v2);
  v5.i32[0] = 0;
  if (*(float *)v3.i32 >= 1.0)
  {
    v6 = *((_DWORD *)this + 30);
    switch(v6)
    {
      case 1:
        v9 = fabsf(*(float *)v3.i32);
        if (v9 < 0.0031308)
        {
          v8 = 12.92;
          goto LABEL_9;
        }
        v5.i32[0] = 1.0;
        v13.i64[0] = 0x8000000080000000;
        v13.i64[1] = 0x8000000080000000;
        v5.i32[0] = vbslq_s8(v13, v5, v3).u32[0];
        if (*(float *)v3.i32 == 0.0)
          *(float *)v5.i32 = 0.0;
        v11 = *(float *)v5.i32;
        v12 = (float)(powf(v9, 0.41667) * 1.055) + -0.055;
LABEL_17:
        *(float *)v5.i32 = v11 * v12;
        return *(float *)v5.i32;
      case 0:
        v5.i32[0] = v3.i32[0];
        return *(float *)v5.i32;
      case -1:
        v7 = fabsf(*(float *)v3.i32);
        if (v7 < 0.04045)
        {
          v8 = 0.077399;
LABEL_9:
          *(float *)v5.i32 = *(float *)v3.i32 * v8;
          return *(float *)v5.i32;
        }
        v4.i32[0] = 1.0;
        v10.i64[0] = 0x8000000080000000;
        v10.i64[1] = 0x8000000080000000;
        v4.i32[0] = vbslq_s8(v10, v4, v3).u32[0];
        if (*(float *)v3.i32 == 0.0)
          *(float *)v4.i32 = 0.0;
        v11 = *(float *)v4.i32;
        v12 = powf((float)(v7 * 0.94787) + 0.052133, 2.4);
        goto LABEL_17;
    }
  }
  return *(float *)v5.i32;
}

CI::Object *CI::SRGBImage::render_graph_core(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  CI::PremultiplyNode *v6;
  CI::Object *v7;
  CI::PremultiplyNode *v8;
  CI::Object *v9;

  v5 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 184))(a1);
  if (a3)
  {
    v6 = (CI::PremultiplyNode *)CI::Object::ref(a3);
    v7 = CI::PremultiplyNode::append_to_tree(v6, (CI::Node *)0xFFFFFFFFLL, v5);
    if (v6)
      CI::Object::unref(v6);
  }
  else
  {
    v7 = CI::PremultiplyNode::append_to_tree(0, (CI::Node *)0xFFFFFFFFLL, v5);
  }
  v8 = CI::SRGBNode::append_to_tree(v7, (CI::Node *)a1[30], v5);
  if (v7)
    CI::Object::unref(v7);
  v9 = CI::PremultiplyNode::append_to_tree(v8, (CI::Node *)1, v5);
  if (v8)
    CI::Object::unref(v8);
  return v9;
}

void CI::SRGBImage::~SRGBImage(CI::SRGBImage *this)
{
  unsigned int v1;

  *(_QWORD *)this = &off_1E2EC06E8;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 14) = off_1E2EBB880;
  do
    v1 = __ldaxr(&dword_1ECF872F0[12]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[12]));
  CI::ImageWithChild::~ImageWithChild(this);
}

{
  unsigned int v1;

  *(_QWORD *)this = &off_1E2EC06E8;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 14) = off_1E2EBB880;
  do
    v1 = __ldaxr(&dword_1ECF872F0[12]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[12]));
  CI::ImageWithChild::~ImageWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::SRGBImage::type(CI::SRGBImage *this)
{
  return 14;
}

uint64_t CI::SRGBImage::shape_for_graphviz(CI::SRGBImage *this)
{
  return 2;
}

uint64_t CI::SRGBImage::color_for_graphviz(CI::SRGBImage *this)
{
  return 4;
}

uint64_t CI::SRGBImage::add_args_to_hash(uint64_t a1, uint64_t a2)
{
  int __src;

  __src = *(_DWORD *)(a1 + 120);
  return XXH64_update(a2, (char *)&__src, 4uLL);
}

uint64_t `non-virtual thunk to'CI::SRGBImage::type(CI::SRGBImage *this)
{
  return 14;
}

void `non-virtual thunk to'CI::SRGBImage::~SRGBImage(CI::SRGBImage *this)
{
  CI::ImageWithChild *v1;
  unsigned int v2;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E2EBB880;
  *((_QWORD *)this - 14) = &off_1E2EC06E8;
  v1 = (CI::SRGBImage *)((char *)this - 112);
  do
    v2 = __ldaxr(&dword_1ECF872F0[12]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[12]));
  CI::ImageWithChild::~ImageWithChild(v1);
}

{
  CI::ImageWithChild *v1;
  unsigned int v2;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E2EBB880;
  *((_QWORD *)this - 14) = &off_1E2EC06E8;
  v1 = (CI::SRGBImage *)((char *)this - 112);
  do
    v2 = __ldaxr(&dword_1ECF872F0[12]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[12]));
  CI::ImageWithChild::~ImageWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::SurfaceImage::SurfaceImage(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, const void *a6, int a7, int a8, float a9, char a10, char a11)
{
  unsigned int v19;
  CFTypeRef v20;
  float v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  unsigned int v24;
  int default_ycc_color_matrix;
  int64x2_t v27[3];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  float valuePtr;
  size_t __src;

  valuePtr = a9;
  *(_QWORD *)(CI::Image::Image(a1) + 104) = off_1E2EBB948;
  do
    v19 = __ldaxr(&dword_1ECF872F0[17]);
  while (__stlxr(v19 + 1, &dword_1ECF872F0[17]));
  *(_QWORD *)a1 = &off_1E2EB98D0;
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 120) = a3;
  *(_DWORD *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 104) = &unk_1E2EB9A38;
  CFRetain(a2);
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 168) = a4;
  *(_DWORD *)(a1 + 180) = a7;
  if (a6)
    v20 = CFRetain(a6);
  else
    v20 = 0;
  *(_QWORD *)(a1 + 136) = v20;
  *(_DWORD *)(a1 + 184) = a8;
  *(_BYTE *)(a1 + 188) = a10;
  *(_BYTE *)(a1 + 189) = a11;
  *(_DWORD *)(a1 + 176) = 0;
  v21 = valuePtr;
  if (valuePtr == 0.0)
  {
    v22 = (const __CFNumber *)IOSurfaceCopyValue(*(IOSurfaceRef *)(a1 + 112), (CFStringRef)*MEMORY[0x1E0CBBF98]);
    if (v22)
    {
      v23 = v22;
      CFNumberGetValue(v22, kCFNumberFloatType, &valuePtr);
      CFRelease(v23);
      v21 = valuePtr;
    }
    else if (!CI::format_is_extended(a4) && (CI::format_is_float(a4) & 1) == 0)
    {
      valuePtr = 1.0;
      v21 = 1.0;
    }
  }
  *(float *)(a1 + 172) = v21;
  if (CI::format_is_ycc_or_ycca(*(_DWORD *)(a1 + 168)))
  {
    if (a5)
    {
      *(_DWORD *)(a1 + 176) = a5;
      goto LABEL_23;
    }
    v32 = 0;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    memset(v27, 0, sizeof(v27));
    __src = 116;
    if (!IOSurfaceGetBulkAttachments()
      && __src == 116
      && (v24 = BYTE10(v28) - 1, v24 < 9)
      && ((0x161u >> v24) & 1) != 0)
    {
      default_ycc_color_matrix = dword_19249BE04[(char)v24];
    }
    else
    {
      if (*(_DWORD *)(a1 + 176))
        goto LABEL_23;
      default_ycc_color_matrix = CI::format_get_default_ycc_color_matrix(a4);
    }
    *(_DWORD *)(a1 + 176) = default_ycc_color_matrix;
  }
LABEL_23:
  XXH64_reset(v27, 0);
  LODWORD(__src) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  XXH64_update((uint64_t)v27, (char *)&__src, 4uLL);
  if (*(_QWORD *)(a1 + 120))
  {
    __src = *(_QWORD *)(a1 + 120);
    XXH64_update((uint64_t)v27, (char *)&__src, 8uLL);
    __src = IOSurfaceGetWidth((IOSurfaceRef)a2);
    XXH64_update((uint64_t)v27, (char *)&__src, 8uLL);
    __src = IOSurfaceGetHeight((IOSurfaceRef)a2);
    XXH64_update((uint64_t)v27, (char *)&__src, 8uLL);
    LODWORD(__src) = IOSurfaceGetPixelFormat((IOSurfaceRef)a2);
    XXH64_update((uint64_t)v27, (char *)&__src, 4uLL);
    LODWORD(__src) = *(_DWORD *)(a1 + 168);
    XXH64_update((uint64_t)v27, (char *)&__src, 4uLL);
    LODWORD(__src) = *(_DWORD *)(a1 + 176);
    XXH64_update((uint64_t)v27, (char *)&__src, 4uLL);
    LODWORD(__src) = *(_DWORD *)(a1 + 180);
    XXH64_update((uint64_t)v27, (char *)&__src, 4uLL);
    LODWORD(__src) = *(_DWORD *)(a1 + 184);
    XXH64_update((uint64_t)v27, (char *)&__src, 4uLL);
    LODWORD(__src) = *(unsigned __int8 *)(a1 + 188);
    XXH64_update((uint64_t)v27, (char *)&__src, 4uLL);
    LODWORD(__src) = *(_DWORD *)(a1 + 172);
  }
  else
  {
    LODWORD(__src) = *(_DWORD *)(a1 + 100);
  }
  XXH64_update((uint64_t)v27, (char *)&__src, 4uLL);
  *(_QWORD *)(a1 + 80) = XXH64_digest((uint64_t)v27);
  XXH64_reset(v27, 0);
  LODWORD(__src) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  XXH64_update((uint64_t)v27, (char *)&__src, 4uLL);
  __src = IOSurfaceGetWidth((IOSurfaceRef)a2);
  XXH64_update((uint64_t)v27, (char *)&__src, 8uLL);
  __src = IOSurfaceGetHeight((IOSurfaceRef)a2);
  XXH64_update((uint64_t)v27, (char *)&__src, 8uLL);
  LODWORD(__src) = IOSurfaceGetPixelFormat((IOSurfaceRef)a2);
  XXH64_update((uint64_t)v27, (char *)&__src, 4uLL);
  LODWORD(__src) = *(_DWORD *)(a1 + 168);
  XXH64_update((uint64_t)v27, (char *)&__src, 4uLL);
  LODWORD(__src) = *(_DWORD *)(a1 + 176);
  XXH64_update((uint64_t)v27, (char *)&__src, 4uLL);
  LODWORD(__src) = *(_DWORD *)(a1 + 180);
  XXH64_update((uint64_t)v27, (char *)&__src, 4uLL);
  LODWORD(__src) = *(_DWORD *)(a1 + 184);
  XXH64_update((uint64_t)v27, (char *)&__src, 4uLL);
  LODWORD(__src) = *(unsigned __int8 *)(a1 + 188);
  XXH64_update((uint64_t)v27, (char *)&__src, 4uLL);
  LODWORD(__src) = *(_DWORD *)(a1 + 172);
  XXH64_update((uint64_t)v27, (char *)&__src, 4uLL);
  *(_QWORD *)(a1 + 88) = XXH64_digest((uint64_t)v27);
  *(_WORD *)(a1 + 96) = 257;
  return a1;
}

{
  return CI::SurfaceImage::SurfaceImage(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void CI::SurfaceImage::set_owner(CI::SurfaceImage *this, CFTypeRef cf)
{
  CFTypeRef v3;

  v3 = (CFTypeRef)*((_QWORD *)this + 16);
  if (v3 != cf)
  {
    if (cf)
    {
      CFRetain(cf);
      v3 = (CFTypeRef)*((_QWORD *)this + 16);
    }
    if (v3)
      CFRelease(v3);
    *((_QWORD *)this + 16) = cf;
  }
}

void `non-virtual thunk to'CI::SurfaceImage::~SurfaceImage(CI::SurfaceImage *this)
{
  CI::SurfaceImage::~SurfaceImage((CI::SurfaceImage *)((char *)this - 104));
}

{
  CI::SurfaceImage::~SurfaceImage((CI::SurfaceImage *)((char *)this - 104));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::SurfaceImage::print_for_graph_core(CI::SurfaceImage *this, __sFILE *__stream)
{
  IOSurfaceID ID;
  const char *v5;
  uint64_t result;
  int v7;
  const char *v8;
  const char *v9;
  int v10;
  const char *v11;

  fwrite("IOSurface", 9uLL, 1uLL, __stream);
  if (*((_QWORD *)this + 15))
  {
    fprintf(__stream, " content:%016llX");
  }
  else if (*((_QWORD *)this + 14))
  {
    fprintf(__stream, " %p", *((const void **)this + 14));
    ID = IOSurfaceGetID(*((IOSurfaceRef *)this + 14));
    fprintf(__stream, "(%d)", ID);
    IOSurfaceGetSeed(*((IOSurfaceRef *)this + 14));
    fprintf(__stream, " seed:%d");
  }
  v5 = CI::name_for_format(*((_DWORD *)this + 42));
  fprintf(__stream, " %s", v5);
  result = *((_QWORD *)this + 14);
  if (result)
  {
    result = IOSurfaceGetPixelFormat((IOSurfaceRef)result);
    v7 = (int)result >> 24;
    if ((result & 0xFD000000) == 0x2D000000)
    {
      if (v7 <= 46)
      {
        if (v7 != 38)
        {
          if (v7 == 45)
          {
            v8 = "lossy75";
LABEL_20:
            result = fprintf(__stream, "-%s", v8);
            goto LABEL_21;
          }
LABEL_18:
          v8 = "";
          goto LABEL_20;
        }
LABEL_14:
        v8 = "compressed";
        goto LABEL_20;
      }
      if (v7 == 47)
      {
        v8 = "lossy62";
        goto LABEL_20;
      }
      if (v7 != 124)
        goto LABEL_18;
LABEL_17:
      v8 = "lossy50";
      goto LABEL_20;
    }
    if (v7 == 38)
      goto LABEL_14;
    if (v7 == 124)
      goto LABEL_17;
  }
LABEL_21:
  if (*((_DWORD *)this + 44))
    result = fprintf(__stream, " %d", *((_DWORD *)this + 44));
  v9 = "alpha_one";
  switch(*((_DWORD *)this + 45))
  {
    case 0:
      goto LABEL_29;
    case 1:
      goto LABEL_28;
    case 2:
      v9 = "alpha_unpremul";
      goto LABEL_28;
    case 4:
      v9 = "alpha_premul-clear-edges";
      goto LABEL_28;
    case 6:
      v9 = "alpha_unpremul-clear-edges";
      goto LABEL_28;
    default:
      v9 = "alpha_unknown";
LABEL_28:
      result = fprintf(__stream, " %s", v9);
LABEL_29:
      v10 = *((_DWORD *)this + 46);
      if (v10)
      {
        if (v10 == 1)
          v11 = "edge_clamp";
        else
          v11 = "edge_unknown";
        result = fprintf(__stream, " %s", v11);
      }
      if (*((_BYTE *)this + 188))
        result = fwrite(" nearestsampling", 0x10uLL, 1uLL, __stream);
      if (*((_BYTE *)this + 189))
        return fwrite(" cache", 6uLL, 1uLL, __stream);
      return result;
  }
}

uint64_t CI::SurfaceImage::matrix_bias(CI::SurfaceImage *this, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t PixelFormat;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned __int16 v16;
  int v18;
  int v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  int v22;
  int v23;
  int v24;
  unsigned __int16 v25;
  unsigned __int16 v26;

  if (!*((_DWORD *)this + 44))
    return 0;
  PixelFormat = IOSurfaceGetPixelFormat(*((IOSurfaceRef *)this + 14));
  v11 = equivalent_uncompressed_format(PixelFormat);
  v12 = 0;
  if (v11 > 1937126451)
  {
    if (v11 <= 2016686639)
    {
      if (v11 > 1953903153)
      {
        v13 = v11 == 1953903154;
        v16 = 13364;
      }
      else
      {
        v13 = v11 == 1937126452;
        v16 = 12848;
      }
      v14 = v16 | 0x74760000;
    }
    else if (v11 <= 2016687155)
    {
      v13 = v11 == 2016686640;
      v14 = 2016686642;
    }
    else
    {
      v13 = v11 == 2016687156 || v11 == 2033463352;
      v14 = 2037741171;
    }
  }
  else if (v11 <= 1882468911)
  {
    if (v11 > 875704949)
    {
      v13 = v11 == 875704950;
      v14 = 875836534;
    }
    else
    {
      v13 = v11 == 846624121;
      v14 = 875704438;
    }
  }
  else if (v11 <= 1882469427)
  {
    v13 = v11 == 1882468912;
    v14 = 1882468914;
  }
  else
  {
    v13 = v11 == 1882469428 || v11 == 1937125936;
    v14 = 1937125938;
  }
  if (!v13 && v11 != v14)
    v12 = 1;
  v18 = 8;
  if (v11 > 1936077875)
  {
    if (v11 > 1953903667)
    {
      if (v11 > 2019963441)
      {
        if (v11 > 2033463351)
        {
          if (v11 == 2033463352 || v11 == 2037741158)
            return get_ycc_to_rgb_matrix(*((_DWORD *)this + 44), v12, v18, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
          v24 = 2037741171;
LABEL_77:
          if (v11 != v24)
            goto LABEL_98;
          return get_ycc_to_rgb_matrix(*((_DWORD *)this + 44), v12, v18, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
        }
        if (v11 == 2019963442)
          goto LABEL_96;
        v20 = 13364;
LABEL_94:
        v19 = v20 | 0x78660000;
        goto LABEL_95;
      }
      if (v11 > 2016686641)
      {
        if (v11 == 2016686642 || v11 == 2016687156)
          goto LABEL_96;
        v20 = 12848;
        goto LABEL_94;
      }
      if (v11 != 1953903668)
      {
        v19 = 2016686640;
        goto LABEL_95;
      }
LABEL_89:
      v18 = 12;
      return get_ycc_to_rgb_matrix(*((_DWORD *)this + 44), v12, v18, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
    }
    if (v11 <= 1952854575)
    {
      if (v11 > 1937125937)
      {
        if (v11 == 1937125938)
          goto LABEL_73;
        v25 = 13364;
      }
      else
      {
        if (v11 == 1936077876)
          goto LABEL_73;
        v25 = 12848;
      }
      v23 = v25 | 0x73760000;
LABEL_72:
      if (v11 != v23)
        goto LABEL_98;
      goto LABEL_73;
    }
    if (v11 <= 1952855091)
    {
      if (v11 == 1952854576)
        goto LABEL_89;
      v22 = 1952854578;
    }
    else
    {
      if (v11 == 1952855092 || v11 == 1953903152)
        goto LABEL_89;
      v22 = 1953903154;
    }
    if (v11 != v22)
      goto LABEL_98;
    goto LABEL_89;
  }
  if (v11 > 1751527985)
  {
    if (v11 <= 1885745711)
    {
      if (v11 > 1882468911)
      {
        if (v11 == 1882468912 || v11 == 1882468914)
          goto LABEL_96;
        v19 = 1882469428;
LABEL_95:
        if (v11 == v19)
          goto LABEL_96;
LABEL_98:
        v18 = -1;
        return get_ycc_to_rgb_matrix(*((_DWORD *)this + 44), v12, v18, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
      }
      if (v11 == 1751527986)
        goto LABEL_86;
      v21 = 13364;
LABEL_85:
      if (v11 != (v21 | 0x68660000))
        goto LABEL_98;
LABEL_86:
      v18 = 0;
      return get_ycc_to_rgb_matrix(*((_DWORD *)this + 44), v12, v18, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
    }
    if (v11 <= 1885746227)
    {
      if (v11 != 1885745712)
      {
        v19 = 1885745714;
        goto LABEL_95;
      }
    }
    else if (v11 != 1885746228)
    {
      if (v11 != 1936077360)
      {
        v23 = 1936077362;
        goto LABEL_72;
      }
LABEL_73:
      v18 = 16;
      return get_ycc_to_rgb_matrix(*((_DWORD *)this + 44), v12, v18, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
    }
LABEL_96:
    v18 = 10;
    return get_ycc_to_rgb_matrix(*((_DWORD *)this + 44), v12, v18, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
  }
  if (v11 <= 875704933)
  {
    if (v11 <= 875704421)
    {
      if (v11 == 846624102)
        return get_ycc_to_rgb_matrix(*((_DWORD *)this + 44), v12, v18, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
      v24 = 846624121;
      goto LABEL_77;
    }
    if (v11 == 875704422)
      return get_ycc_to_rgb_matrix(*((_DWORD *)this + 44), v12, v18, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
    v26 = 12406;
    goto LABEL_76;
  }
  if (v11 > 875836517)
  {
    if (v11 == 875836518 || v11 == 875836534)
      return get_ycc_to_rgb_matrix(*((_DWORD *)this + 44), v12, v18, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
    v21 = 12848;
    goto LABEL_85;
  }
  if (v11 != 875704934)
  {
    v26 = 12918;
LABEL_76:
    v24 = v26 | 0x34320000;
    goto LABEL_77;
  }
  return get_ycc_to_rgb_matrix(*((_DWORD *)this + 44), v12, v18, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
}

uint64_t CI::SurfaceImage::add_args_to_hash(uint64_t a1, uint64_t a2)
{
  OSType __src;

  __src = *(_DWORD *)(a1 + 168);
  XXH64_update(a2, (char *)&__src, 4uLL);
  __src = *(_DWORD *)(a1 + 176);
  XXH64_update(a2, (char *)&__src, 4uLL);
  __src = *(_DWORD *)(a1 + 180);
  XXH64_update(a2, (char *)&__src, 4uLL);
  __src = *(_DWORD *)(a1 + 184);
  XXH64_update(a2, (char *)&__src, 4uLL);
  __src = *(unsigned __int8 *)(a1 + 188);
  XXH64_update(a2, (char *)&__src, 4uLL);
  __src = *(_DWORD *)(a1 + 172);
  XXH64_update(a2, (char *)&__src, 4uLL);
  __src = IOSurfaceGetPixelFormat(*(IOSurfaceRef *)(a1 + 112));
  return XXH64_update(a2, (char *)&__src, 4uLL);
}

CI::Object *CI::SurfaceImage::render_graph_core(CI::SurfaceImage *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  NSObject *v15;
  CI::FillNode *v16;
  CI::Object *v17;
  CI::Object *v18;
  CI::Object *v19;
  CI::Object *v20;
  CI::Node *v21;
  int v22;
  CI::Object *v23;
  CI::Object *v24;
  CI::ColorMatrixNode *v25;
  double v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[9];
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;

  v58 = *MEMORY[0x1E0C80C00];
  v7 = (int *)((char *)a1 + 168);
  v9 = CI::Context::swizzler_for_input(a2, *((unsigned int *)a1 + 42));
  if ((_DWORD)v9)
  {
    v10 = v8;
    if (*((_DWORD *)a1 + 46) == 1)
      goto LABEL_4;
    if ((*((_DWORD *)a1 + 45) | 2) == 6)
      goto LABEL_4;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 74)
      goto LABEL_46;
    v27 = CI::Image::lookup_union_roi((uint64_t)a1, a4);
    v29 = v28;
    v31 = v30;
    v33 = v32;
    v60.origin.x = (*(double (**)(CI::SurfaceImage *))(*(_QWORD *)a1 + 88))(a1);
    v61.origin.x = v27;
    v61.origin.y = v29;
    v61.size.width = v31;
    v61.size.height = v33;
    if (CGRectContainsRect(v60, v61))
    {
LABEL_4:
      v11 = 0;
    }
    else
    {
LABEL_46:
      if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 560))(a2, 0))
      {
        v11 = CI::format_has_alpha(*v7) ^ 1;
        v12 = v11;
        goto LABEL_6;
      }
      v11 = 1;
    }
    v12 = 1;
LABEL_6:
    v13 = v9;
    if (v10)
      v13 = CI::input_format_for_conversion(v10);
    if (*((_BYTE *)a1 + 188))
      v14 = 1;
    else
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 568))(a2, 1, v9) ^ 1;
    v17 = (CI::Object *)operator new();
    v18 = (CI::Object *)CI::SurfaceNode::SurfaceNode((uint64_t)v17, *((_DWORD *)a1 + 25), *((void **)a1 + 14), *((_QWORD *)a1 + 15), v13, *((_DWORD *)a1 + 45), v12, v14, *((_BYTE *)a1 + 189));
    v19 = CI::ConvertNode::append_to_tree(v18, v10);
    CI::Object::unref(v17);
    v20 = CI::SwizzleNode::append_to_tree(v19, SHIDWORD(v9), 1, 0);
    if (v19)
      CI::Object::unref(v19);
    if (*((unsigned __int8 *)a1 + 188) != v14)
    {
      v21 = (CI::Node *)CI::SampleModeNode::append_to_tree((uint64_t)v20, 1);
      if (v20)
        CI::Object::unref(v20);
      v20 = (CI::Object *)CI::NoopNode::append_to_tree_and_unref(v21, a2, 6);
    }
    v22 = *((_DWORD *)a1 + 45);
    if (v22 == 2)
    {
      v23 = CI::PremultiplyNode::append_to_tree(v20, (CI::Node *)1, 1);
      if (v20)
        CI::Object::unref(v20);
      v22 = *((_DWORD *)a1 + 45);
      v20 = v23;
    }
    if (v22 == -1 && CI::format_has_alpha(*v7))
    {
      v24 = CI::SwizzleNode::append_to_tree(v20, 10, 1, 0);
      if (v20)
        CI::Object::unref(v20);
    }
    else
    {
      v24 = v20;
    }
    if (CI::SurfaceImage::matrix_bias(a1, (double *)&v56, (double *)&v54, (double *)&v52, (double *)&v50))
    {
      v47[0] = xmmword_19249BD80;
      v47[1] = *(_OWORD *)algn_19249BD90;
      v47[2] = xmmword_19249BDA0;
      memset(&v47[3], 0, 32);
      v47[5] = unk_19249BDD0;
      v47[6] = xmmword_19249BDE0;
      v47[7] = unk_19249BDF0;
      v47[8] = v56;
      v48 = v57;
      v49 = 0;
      v25 = CI::ColorMatrixNode::append_to_tree(v24, (CI::Node *)v47, (const double (*)[4])1);
      if (v24)
        CI::Object::unref(v24);
      v34 = v54;
      v35 = v55;
      v36 = 0;
      v37 = v52;
      v38 = v53;
      v39 = 0;
      v40 = v50;
      v41 = v51;
      v42 = 0;
      v43 = xmmword_19249BDE0;
      v44 = unk_19249BDF0;
      v45 = 0u;
      v46 = 0u;
      v24 = CI::ColorMatrixNode::append_to_tree(v25, (CI::Node *)&v34, (const double (*)[4])1);
      if (v25)
        CI::Object::unref(v25);
    }
    if (!v11)
      return v24;
    v59.origin.x = (*(double (**)(CI::SurfaceImage *))(*(_QWORD *)a1 + 88))(a1);
    v16 = (CI::FillNode *)CI::CropNode::append_to_tree(v24, (CI::Node *)1, v59);
    if (v24)
      CI::Object::unref(v24);
    return v16;
  }
  v15 = ci_logger_render();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    CI::SurfaceImage::render_graph_core(v7, v15);
  v16 = (CI::FillNode *)operator new();
  CI::FillNode::FillNode(v16);
  return v16;
}

CIGVNode *CI::SurfaceImage::node_for_graphviz(uint64_t a1, _QWORD *a2)
{
  CIGVNode *v3;
  char *CGImage;

  v3 = CI::Image::node_for_graphviz((unsigned int *)a1, a2);
  if (CI_PRINT_TREE_dump_inputs())
  {
    CGImage = (char *)SurfaceCreateCGImage(*(__IOSurface **)(a1 + 112), 0, 1);
    CIGVNodeAddImage(v3, CGImage);
    CGImageRelease((CGImageRef)CGImage);
  }
  return v3;
}

void CI::SurfaceImage::restore_resources(CI::SurfaceImage *this, const void **a2)
{
  const void *v4;

  if ((*((unsigned int (**)(const void **))*a2 + 2))(a2) == 46)
  {
    v4 = (const void *)*((_QWORD *)this + 14);
    if (a2[7] != v4)
      CI::SurfaceNode::set_surface((uint64_t)a2, *((_DWORD *)this + 25), *((_QWORD *)this + 15), v4);
  }
}

uint64_t CI::SurfaceImage::child_count(CI::SurfaceImage *this)
{
  return 0;
}

uint64_t CI::SurfaceImage::child(CI::SurfaceImage *this)
{
  return 0;
}

uint64_t CI::SurfaceImage::shape_for_graphviz(CI::SurfaceImage *this)
{
  return 0;
}

uint64_t CI::SurfaceImage::color_for_graphviz(CI::SurfaceImage *this)
{
  return 12;
}

size_t CI::SurfaceImage::max_dimension(IOSurfaceRef *this)
{
  size_t Width;
  size_t Height;
  __IOSurface *v4;

  Width = IOSurfaceGetWidth(this[14]);
  Height = IOSurfaceGetHeight(this[14]);
  v4 = this[14];
  if (Width <= Height)
    return IOSurfaceGetHeight(v4);
  else
    return IOSurfaceGetWidth(v4);
}

BOOL CI::SurfaceImage::alpha_one(CI::SurfaceImage *this)
{
  return *((_DWORD *)this + 45) == 1;
}

uint64_t CI::SurfaceImage::output_format(CI::SurfaceImage *this)
{
  return *((unsigned int *)this + 42);
}

uint64_t CI::SurfaceImage::properties(CI::SurfaceImage *this)
{
  return *((_QWORD *)this + 17);
}

uint64_t CI::SurfaceImage::avdepthdata(CI::SurfaceImage *this)
{
  return *((_QWORD *)this + 18);
}

uint64_t CI::SurfaceImage::avmatte(CI::SurfaceImage *this)
{
  return *((_QWORD *)this + 19);
}

uint64_t CI::SurfaceImage::ssmatte(CI::SurfaceImage *this)
{
  return *((_QWORD *)this + 20);
}

float CI::SurfaceImage::headroom(CI::SurfaceImage *this)
{
  return *((float *)this + 43);
}

uint64_t CI::SurfaceImage::colorspace(CI::SurfaceImage *this)
{
  return 0;
}

void CI::SurfaceImage::set_avdepthdata(CI::SurfaceImage *this, CFTypeRef cf)
{
  const void *v4;

  CFRetain(cf);
  v4 = (const void *)*((_QWORD *)this + 18);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 18) = cf;
}

void CI::SurfaceImage::set_avmatte(CI::SurfaceImage *this, CFTypeRef cf)
{
  const void *v4;

  CFRetain(cf);
  v4 = (const void *)*((_QWORD *)this + 19);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 19) = cf;
}

void CI::SurfaceImage::set_ssmatte(CI::SurfaceImage *this, CFTypeRef cf)
{
  const void *v4;

  CFRetain(cf);
  v4 = (const void *)*((_QWORD *)this + 20);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 20) = cf;
}

uint64_t `non-virtual thunk to'CI::SurfaceImage::type(CI::SurfaceImage *this)
{
  return 19;
}

uint64_t CI::InstanceCounted<(CI::Type)19>::type()
{
  return 19;
}

_QWORD *CI::InstanceCounted<(CI::Type)19>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBB948;
  do
    v1 = __ldaxr(&dword_1ECF872F0[17]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[17]));
  return result;
}

void CI::InstanceCounted<(CI::Type)19>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBB948;
  do
    v1 = __ldaxr(&dword_1ECF872F0[17]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[17]));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::SwitchImage::SwitchImage(uint64_t a1, uint64_t a2, const void *a3)
{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  int *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  unsigned int v28;
  int v29;
  int64x2_t v31[5];
  int64x2_t v32[5];
  uint64_t __src;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;

  *(_QWORD *)(CI::Image::Image(a1) + 104) = off_1E2EBB9C0;
  do
    v6 = __ldaxr(&dword_1ECF872F0[20]);
  while (__stlxr(v6 + 1, &dword_1ECF872F0[20]));
  *(_QWORD *)a1 = &off_1E2EB8EA0;
  *(_QWORD *)(a1 + 104) = &unk_1E2EB8FF8;
  *(_QWORD *)(a1 + 112) = a2;
  v7 = *MEMORY[0x1E0C9D628];
  v8 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(a1 + 136) = *MEMORY[0x1E0C9D628];
  *(_OWORD *)(a1 + 152) = v8;
  *(_OWORD *)(a1 + 168) = v7;
  *(_OWORD *)(a1 + 184) = v8;
  *(_BYTE *)(a1 + 128) = 1;
  *(_DWORD *)(a1 + 72) = 0;
  XXH64_reset(v32, 0);
  XXH64_reset(v31, 0);
  LODWORD(__src) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  XXH64_update((uint64_t)v32, (char *)&__src, 4uLL);
  LODWORD(__src) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  XXH64_update((uint64_t)v31, (char *)&__src, 4uLL);
  v9 = *(int **)(a1 + 112);
  if (*v9 >= 1)
  {
    v10 = 0;
    v11 = 6;
    do
    {
      if (v10 > 9)
        v12 = *((_QWORD *)v9 + 2) + 8 * (v10 - 10);
      else
        v12 = (uint64_t)&v9[v11];
      v13 = *(_QWORD *)v12;
      __src = *(_QWORD *)(*(_QWORD *)v12 + 80);
      XXH64_update((uint64_t)v32, (char *)&__src, 8uLL);
      __src = *(_QWORD *)(v13 + 88);
      XXH64_update((uint64_t)v31, (char *)&__src, 8uLL);
      v14 = *(double *)(a1 + 136);
      v15 = *(double *)(a1 + 144);
      v16 = *(double *)(a1 + 152);
      v17 = *(double *)(a1 + 160);
      v36.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13);
      v36.origin.y = v18;
      v36.size.width = v19;
      v36.size.height = v20;
      v34.origin.x = v14;
      v34.origin.y = v15;
      v34.size.width = v16;
      v34.size.height = v17;
      *(CGRect *)(a1 + 136) = CGRectUnion(v34, v36);
      v21 = *(double *)(a1 + 168);
      v22 = *(double *)(a1 + 176);
      v23 = *(double *)(a1 + 184);
      v24 = *(double *)(a1 + 192);
      v37.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13);
      v37.origin.y = v25;
      v37.size.width = v26;
      v37.size.height = v27;
      v35.origin.x = v21;
      v35.origin.y = v22;
      v35.size.width = v23;
      v35.size.height = v24;
      *(CGRect *)(a1 + 168) = CGRectUnion(v35, v37);
      if (*(_BYTE *)(a1 + 128) && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 128))(v13) & 1) == 0)
        *(_BYTE *)(a1 + 128) = 0;
      v28 = *(_DWORD *)(a1 + 72);
      v29 = *(_DWORD *)(v13 + 72);
      if (v28 <= v29 + 1)
        v28 = v29 + 1;
      *(_DWORD *)(a1 + 72) = v28;
      ++v10;
      v9 = *(int **)(a1 + 112);
      v11 += 2;
    }
    while ((uint64_t)v10 < *v9);
  }
  *(_QWORD *)(a1 + 80) = XXH64_digest((uint64_t)v32);
  *(_QWORD *)(a1 + 88) = XXH64_digest((uint64_t)v31);
  *(_QWORD *)(a1 + 120) = _Block_copy(a3);
  *(_WORD *)(a1 + 96) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 24) + 96);
  return a1;
}

void CI::SwitchImage::~SwitchImage(CI::SwitchImage *this)
{
  CI::SerialObjectPtrArray *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_1E2EB8EA0;
  *((_QWORD *)this + 13) = &unk_1E2EB8FF8;
  v2 = (CI::SerialObjectPtrArray *)*((_QWORD *)this + 14);
  if (v2)
  {
    CI::SerialObjectPtrArray::~SerialObjectPtrArray(v2);
    MEMORY[0x194025AAC]();
  }
  _Block_release(*((const void **)this + 15));
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 13) = off_1E2EBB9C0;
  do
    v3 = __ldaxr(&dword_1ECF872F0[20]);
  while (__stlxr(v3 - 1, &dword_1ECF872F0[20]));
  CI::Image::~Image(this);
}

{
  CI::SwitchImage::~SwitchImage(this);
  JUMPOUT(0x194025AACLL);
}

void `non-virtual thunk to'CI::SwitchImage::~SwitchImage(CI::SwitchImage *this)
{
  CI::SwitchImage::~SwitchImage((CI::SwitchImage *)((char *)this - 104));
}

{
  CI::SwitchImage::~SwitchImage((CI::SwitchImage *)((char *)this - 104));
  JUMPOUT(0x194025AACLL);
}

CI::Node *CI::SwitchImage::render_graph_core(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  CI::FillNode *v11;

  v5 = a1[15];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 320))(a2);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v5, v6);
  if ((v7 & 0x80000000) != 0 || (v8 = v7, (int)v7 >= (*(int (**)(_QWORD *))(*a1 + 40))(a1)))
  {
    v11 = (CI::FillNode *)operator new();
    return CI::FillNode::FillNode(v11);
  }
  else
  {
    v9 = *(_QWORD *)((*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, v8) + 80);
    return (CI::Node *)CI::ImageToNodeMap::findAndRef(a3, v9);
  }
}

uint64_t CI::SwitchImage::type(CI::SwitchImage *this)
{
  return 22;
}

uint64_t CI::SwitchImage::child_count(CI::SwitchImage *this)
{
  return **((unsigned int **)this + 14);
}

uint64_t CI::SwitchImage::child(CI::SwitchImage *this, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 14);
  if (a2 > 9)
    v3 = *(_QWORD *)(v2 + 16) + 8 * (a2 - 10);
  else
    v3 = v2 + 8 * a2 + 24;
  return *(_QWORD *)v3;
}

uint64_t CI::SwitchImage::shape_for_graphviz(CI::SwitchImage *this)
{
  return 2;
}

uint64_t CI::SwitchImage::color_for_graphviz(CI::SwitchImage *this)
{
  return 0;
}

double CI::SwitchImage::extent(CI::SwitchImage *this)
{
  return *((double *)this + 17);
}

double CI::SwitchImage::extent_unclamped(CI::SwitchImage *this)
{
  return *((double *)this + 21);
}

uint64_t CI::SwitchImage::alpha_one(CI::SwitchImage *this)
{
  return *((unsigned __int8 *)this + 128);
}

size_t CI::SwitchImage::print_for_graph_core(CI::SwitchImage *this, __sFILE *__stream)
{
  return fwrite("switch", 6uLL, 1uLL, __stream);
}

uint64_t CI::SwitchImage::properties(CI::SwitchImage *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(CI::SwitchImage *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 200))(v1);
}

uint64_t CI::SwitchImage::avdepthdata(CI::SwitchImage *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(CI::SwitchImage *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 208))(v1);
}

uint64_t CI::SwitchImage::avmatte(CI::SwitchImage *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(CI::SwitchImage *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 216))(v1);
}

uint64_t CI::SwitchImage::ssmatte(CI::SwitchImage *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(CI::SwitchImage *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 224))(v1);
}

uint64_t CI::SwitchImage::headroom(CI::SwitchImage *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(CI::SwitchImage *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 232))(v1);
}

uint64_t CI::SwitchImage::colorspace(CI::SwitchImage *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(CI::SwitchImage *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 240))(v1);
}

uint64_t CI::SwitchImage::callCallback(CI::SwitchImage *this, const __CFDictionary *a2)
{
  return (*(uint64_t (**)(void))(*((_QWORD *)this + 15) + 16))();
}

uint64_t `non-virtual thunk to'CI::SwitchImage::type(CI::SwitchImage *this)
{
  return 22;
}

uint64_t CI::InstanceCounted<(CI::Type)22>::type()
{
  return 22;
}

_QWORD *CI::InstanceCounted<(CI::Type)22>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBB9C0;
  do
    v1 = __ldaxr(&dword_1ECF872F0[20]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[20]));
  return result;
}

void CI::InstanceCounted<(CI::Type)22>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBB9C0;
  do
    v1 = __ldaxr(&dword_1ECF872F0[20]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[20]));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::SwizzleImage::alpha_one(CI::SwizzleImage *this)
{
  int v2;
  uint64_t result;

  v2 = *((_DWORD *)this + 30);
  result = 1;
  switch(v2)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 36:
    case 48:
    case 49:
    case 61:
    case 62:
    case 64:
    case 65:
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 128))(*((_QWORD *)this + 13));
    case 2:
    case 8:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 29:
    case 30:
    case 33:
    case 34:
    case 39:
      return 0;
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 31:
    case 32:
    case 35:
    case 37:
    case 38:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 63:
      return result;
    default:
      if ((v2 - 87) < 2)
        return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 128))(*((_QWORD *)this + 13));
      if (v2 == 84)
        return 0;
      return result;
  }
}

CI::Object *CI::SwizzleImage::render_graph_core(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  CI::Object *v6;
  CI::Object *v7;

  v5 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 184))(a1);
  if (!a3)
    return CI::SwizzleNode::append_to_tree(0, a1[30], v5, 0);
  v6 = (CI::Object *)CI::Object::ref(a3);
  v7 = CI::SwizzleNode::append_to_tree(v6, a1[30], v5, 0);
  if (v6)
    CI::Object::unref(v6);
  return v7;
}

void CI::SwizzleImage::~SwizzleImage(CI::SwizzleImage *this)
{
  unsigned int v1;

  *(_QWORD *)this = &off_1E2EB9A60;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 14) = off_1E2EBB9E8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[21]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[21]));
  CI::ImageWithChild::~ImageWithChild(this);
}

{
  unsigned int v1;

  *(_QWORD *)this = &off_1E2EB9A60;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 14) = off_1E2EBB9E8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[21]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[21]));
  CI::ImageWithChild::~ImageWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::SwizzleImage::type(CI::SwizzleImage *this)
{
  return 23;
}

uint64_t CI::SwizzleImage::shape_for_graphviz(CI::SwizzleImage *this)
{
  if ((*(unsigned int (**)(CI::SwizzleImage *))(*(_QWORD *)this + 328))(this))
    return 2;
  else
    return 3;
}

uint64_t CI::SwizzleImage::color_for_graphviz(CI::SwizzleImage *this)
{
  if ((*(unsigned int (**)(CI::SwizzleImage *))(*(_QWORD *)this + 328))(this))
    return 4;
  else
    return 2;
}

uint64_t CI::SwizzleImage::add_args_to_hash(uint64_t a1, uint64_t a2)
{
  int __src;

  __src = *(_DWORD *)(a1 + 120);
  return XXH64_update(a2, (char *)&__src, 4uLL);
}

uint64_t CI::SwizzleImage::print_for_graph_core(CI::SwizzleImage *this, __sFILE *a2)
{
  uint64_t v2;
  const char *v3;

  v2 = *((int *)this + 30);
  if (v2 > 0x58)
    v3 = "unknown-swizzle";
  else
    v3 = off_1E2EC7290[v2];
  return fputs(v3, a2);
}

float CI::ImageWithChild::headroom(CI::ImageWithChild *this)
{
  return 0.0;
}

uint64_t CI::SwizzleImage::colorspace(CI::SwizzleImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 240))(*((_QWORD *)this + 13));
}

uint64_t CI::SwizzleImage::is_empty_if_regions_of_children_are_empty(CI::SwizzleImage *this)
{
  return (*(uint64_t (**)(CI::SwizzleImage *))(*(_QWORD *)this + 128))(this);
}

BOOL CI::SwizzleImage::isSimple(CI::SwizzleImage *this)
{
  return (*((_DWORD *)this + 30) - 1) < 0x24;
}

uint64_t `non-virtual thunk to'CI::SwizzleImage::type(CI::SwizzleImage *this)
{
  return 23;
}

void `non-virtual thunk to'CI::SwizzleImage::~SwizzleImage(CI::SwizzleImage *this)
{
  CI::ImageWithChild *v1;
  unsigned int v2;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E2EBB9E8;
  *((_QWORD *)this - 14) = &off_1E2EB9A60;
  v1 = (CI::SwizzleImage *)((char *)this - 112);
  do
    v2 = __ldaxr(&dword_1ECF872F0[21]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[21]));
  CI::ImageWithChild::~ImageWithChild(v1);
}

{
  CI::ImageWithChild *v1;
  unsigned int v2;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E2EBB9E8;
  *((_QWORD *)this - 14) = &off_1E2EB9A60;
  v1 = (CI::SwizzleImage *)((char *)this - 112);
  do
    v2 = __ldaxr(&dword_1ECF872F0[21]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[21]));
  CI::ImageWithChild::~ImageWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::TextureImage::TextureImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, const void *a7, int a8, int a9)
{
  unsigned int v17;
  CFTypeRef v18;
  int64x2_t v20[5];
  uint64_t __src;

  *(_QWORD *)(CI::Image::Image(a1) + 104) = off_1E2EBBA38;
  do
    v17 = __ldaxr(&dword_1ECF872F0[23]);
  while (__stlxr(v17 + 1, &dword_1ECF872F0[23]));
  *(_QWORD *)a1 = off_1E2EB9BE8;
  *(_QWORD *)(a1 + 104) = &unk_1E2EB9D58;
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 120) = a3;
  *(_QWORD *)(a1 + 128) = a4;
  if (a7)
    v18 = CFRetain(a7);
  else
    v18 = 0;
  *(_QWORD *)(a1 + 136) = v18;
  *(_DWORD *)(a1 + 144) = a5;
  *(_DWORD *)(a1 + 148) = a6;
  *(_DWORD *)(a1 + 152) = a8;
  *(_DWORD *)(a1 + 156) = a9;
  XXH64_reset(v20, 0);
  LODWORD(__src) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  XXH64_update((uint64_t)v20, (char *)&__src, 4uLL);
  if (*(_QWORD *)(a1 + 128))
  {
    __src = *(_QWORD *)(a1 + 128);
    XXH64_update((uint64_t)v20, (char *)&__src, 8uLL);
    LODWORD(__src) = *(_DWORD *)(a1 + 144);
    XXH64_update((uint64_t)v20, (char *)&__src, 4uLL);
    LODWORD(__src) = *(_DWORD *)(a1 + 148);
    XXH64_update((uint64_t)v20, (char *)&__src, 4uLL);
    LODWORD(__src) = *(_DWORD *)(a1 + 152);
    XXH64_update((uint64_t)v20, (char *)&__src, 4uLL);
    LODWORD(__src) = *(_DWORD *)(a1 + 156);
  }
  else
  {
    LODWORD(__src) = *(_DWORD *)(a1 + 100);
  }
  XXH64_update((uint64_t)v20, (char *)&__src, 4uLL);
  *(_QWORD *)(a1 + 80) = XXH64_digest((uint64_t)v20);
  XXH64_reset(v20, 0);
  LODWORD(__src) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  XXH64_update((uint64_t)v20, (char *)&__src, 4uLL);
  LODWORD(__src) = *(_DWORD *)(a1 + 144);
  XXH64_update((uint64_t)v20, (char *)&__src, 4uLL);
  LODWORD(__src) = *(_DWORD *)(a1 + 148);
  XXH64_update((uint64_t)v20, (char *)&__src, 4uLL);
  LODWORD(__src) = *(_DWORD *)(a1 + 152);
  XXH64_update((uint64_t)v20, (char *)&__src, 4uLL);
  LODWORD(__src) = *(_DWORD *)(a1 + 156);
  XXH64_update((uint64_t)v20, (char *)&__src, 4uLL);
  *(_QWORD *)(a1 + 88) = XXH64_digest((uint64_t)v20);
  *(_WORD *)(a1 + 96) = 0;
  return a1;
}

void sub_19240EDC0(_Unwind_Exception *a1)
{
  CI::Image *v1;
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;

  *((_QWORD *)v1 + 13) = off_1E2EBBA38;
  v4 = (unsigned int *)(v2 + 100);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  CI::Image::~Image(v1);
  _Unwind_Resume(a1);
}

void CI::TextureImage::~TextureImage(CI::TextureImage *this)
{
  const void *v2;
  unsigned int v3;

  *(_QWORD *)this = off_1E2EB9BE8;
  *((_QWORD *)this + 13) = &unk_1E2EB9D58;
  v2 = (const void *)*((_QWORD *)this + 17);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 13) = off_1E2EBBA38;
  do
    v3 = __ldaxr(&dword_1ECF872F0[23]);
  while (__stlxr(v3 - 1, &dword_1ECF872F0[23]));
  CI::Image::~Image(this);
}

void sub_19240EE68(_Unwind_Exception *a1)
{
  CI::Image *v1;
  unsigned int v3;

  *((_QWORD *)v1 + 13) = off_1E2EBBA38;
  do
    v3 = __ldaxr(&dword_1ECF872F0[23]);
  while (__stlxr(v3 - 1, &dword_1ECF872F0[23]));
  CI::Image::~Image(v1);
  _Unwind_Resume(a1);
}

uint64_t CI::TextureImage::print_for_graph_core(CI::TextureImage *this, __sFILE *a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;
  int v7;
  const char *v8;

  if ((*(unsigned int (**)(CI::TextureImage *))(*(_QWORD *)this + 336))(this))
    fprintf(a2, "GLTexture %d", *((_DWORD *)this + 28));
  result = (*(uint64_t (**)(CI::TextureImage *))(*(_QWORD *)this + 344))(this);
  if (result)
  {
    fprintf(a2, "MTLTexture %p", *((const void **)this + 14));
    pixelFormatForMetalTexture(*((void **)this + 14));
    v5 = stringForMetalTextureFormat();
    result = fprintf(a2, " %s", v5);
  }
  if (*((_QWORD *)this + 16))
    result = fprintf(a2, " content:%016llX", *((_QWORD *)this + 16));
  v6 = "alpha_one";
  switch(*((_DWORD *)this + 38))
  {
    case 0:
      goto LABEL_13;
    case 1:
      goto LABEL_12;
    case 2:
      v6 = "alpha_unpremul";
      goto LABEL_12;
    case 4:
      v6 = "alpha_premul-clear-edges";
      goto LABEL_12;
    case 6:
      v6 = "alpha_unpremul-clear-edges";
      goto LABEL_12;
    default:
      v6 = "alpha_unknown";
LABEL_12:
      result = fprintf(a2, " %s", v6);
LABEL_13:
      v7 = *((_DWORD *)this + 39);
      if (v7)
      {
        if (v7 == 1)
          v8 = "edge_clamp";
        else
          v8 = "edge_unknown";
        return fprintf(a2, " %s", v8);
      }
      return result;
  }
}

uint64_t CI::TextureImage::add_args_to_hash(_DWORD *a1, uint64_t a2)
{
  int __src;
  int v6;
  int v7;

  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 336))(a1))
  {
    __src = a1[29];
    XXH64_update(a2, (char *)&__src, 4uLL);
  }
  v6 = a1[38];
  XXH64_update(a2, (char *)&v6, 4uLL);
  v7 = a1[39];
  return XXH64_update(a2, (char *)&v7, 4uLL);
}

CI::Node *CI::TextureImage::render_graph_core(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v6;
  _BOOL4 v7;
  CI::Node *v8;
  uint64_t v9;
  uint64_t Device;
  NSObject *v11;
  uint64_t v12;
  CI *IOSurface;
  __IOSurface *v14;
  CI *v15;
  int v16;
  int v17;
  uint64_t v18;
  CI::Object *v19;
  CI::FillNode *v20;
  NSObject *v21;
  double v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  int v31;
  int v32;
  uint64_t v33;
  _QWORD v34[3];
  __int128 v35;
  double v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  if (*(_DWORD *)(a1 + 156) == 1)
    goto LABEL_3;
  if ((*(_DWORD *)(a1 + 152) | 2) == 6)
    goto LABEL_3;
  if ((*((unsigned int (**)(id *))*a2 + 2))(a2) == 74)
    goto LABEL_29;
  v24 = CI::Image::lookup_union_roi(a1, a4);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v38.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v39.origin.x = v24;
  v39.origin.y = v26;
  v39.size.width = v28;
  v39.size.height = v30;
  if (CGRectContainsRect(v38, v39))
  {
LABEL_3:
    v6 = 0;
    v7 = 1;
  }
  else
  {
LABEL_29:
    v31 = *(_DWORD *)(a1 + 152);
    v32 = (*((uint64_t (**)(id *, _QWORD))*a2 + 70))(a2, 0);
    if (v32)
      v6 = (v31 & 0xFFFFFFF9) != 0;
    else
      v6 = 1;
    if (v32)
      v7 = (v31 & 0xFFFFFFF9) != 0;
    else
      v7 = 1;
  }
  if ((*((unsigned int (**)(id *))*a2 + 2))(a2) == 76
    || (*((unsigned int (**)(id *))*a2 + 2))(a2) == 74)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1))
    {
      v8 = (CI::Node *)operator new();
      CI::TextureNode::TextureNode(v8, *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_DWORD *)(a1 + 144), *(_DWORD *)(a1 + 148), *(_DWORD *)(a1 + 152), 1);
      *(_QWORD *)v8 = &off_1E2EB9E10;
      *((_QWORD *)v8 + 5) = &unk_1E2EB9FE0;
LABEL_17:
      if (*(_DWORD *)(a1 + 152) == 2)
      {
        v19 = CI::PremultiplyNode::append_to_tree(v8, (CI::Node *)1, 1);
        CI::Object::unref(v8);
        v8 = v19;
      }
      if (!v6)
        return v8;
      v37.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
      v20 = (CI::FillNode *)CI::CropNode::append_to_tree(v8, (CI::Node *)1, v37);
      if (v8)
        CI::Object::unref(v8);
      return v20;
    }
  }
  else if ((*((unsigned int (**)(id *))*a2 + 2))(a2) == 77
         && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
    Device = CIMetalTextureGetDevice(v9);
    if (Device == CI::MetalContext::device(a2))
    {
      v8 = (CI::Node *)operator new();
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
      CI::MetalTextureNode::MetalTextureNode(v8, v33, *(_QWORD *)(a1 + 128), *(_DWORD *)(a1 + 144), *(_DWORD *)(a1 + 148), *(_DWORD *)(a1 + 152), v7);
      goto LABEL_17;
    }
    v11 = ci_logger_render();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      CI::TextureImage::render_graph_core(v11);
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1))
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
    IOSurface = (CI *)CIMetalTextureGetIOSurface(v12);
    if (IOSurface)
    {
      v15 = IOSurface;
      v16 = CI::format_from_IOSurface(IOSurface, v14);
      v8 = (CI::Node *)operator new();
      CI::SurfaceNode::SurfaceNode((uint64_t)v8, *(_DWORD *)(a1 + 100), v15, 0, v16, *(_DWORD *)(a1 + 152), *(_DWORD *)(a1 + 156), 0, 0);
      v17 = *(_DWORD *)(a1 + 148);
      if (v17 < 2)
        goto LABEL_17;
      v34[1] = 0;
      v34[2] = 0;
      v34[0] = 0x3FF0000000000000;
      v35 = xmmword_192493540;
      v36 = (double)v17;
      v18 = CI::AffineNode::append_to_tree(v8, (CI::Node *)v34, 0);
      CI::Object::unref(v8);
      v8 = (CI::Node *)v18;
      if (v18)
        goto LABEL_17;
    }
  }
  v21 = ci_logger_render();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    CI::TextureImage::render_graph_core(a1, (uint64_t)a2, v21);
  v20 = (CI::FillNode *)operator new();
  CI::FillNode::FillNode(v20);
  return v20;
}

void sub_19240F454(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194025AAC](v1, 0x10E3C40C0CE6CF6);
  _Unwind_Resume(a1);
}

uint64_t CI::TextureImage::restore_resources(CI::TextureImage *this, CI::Node *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)a2 + 16))(a2);
  if ((_DWORD)result == 48)
    return (*(uint64_t (**)(CI::Node *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 440))(a2, *((_QWORD *)this + 14), *((_QWORD *)this + 15), *((_QWORD *)this + 16));
  return result;
}

uint64_t CI::MetalTextureImage::format(CI::MetalTextureImage *this)
{
  void *v1;
  int Format;

  v1 = (void *)(*(uint64_t (**)(CI::MetalTextureImage *))(*(_QWORD *)this + 344))(this);
  Format = CIMetalTextureGetFormat(v1);
  return CIFormatFromCIMetalTextureFormat(Format, 0);
}

CIGVNode *CI::MetalTextureImage::node_for_graphviz(unsigned int *a1, _QWORD *a2)
{
  CIGVNode *v3;
  uint64_t v4;
  __IOSurface *IOSurface;
  char *CGImage;
  int v7;
  size_t v8;
  size_t v9;
  int v10;
  CGBitmapInfo v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  void *v16;
  CGDataProvider *v17;
  CGColorSpace *v18;
  char *v19;
  _QWORD v21[6];

  v3 = CI::Image::node_for_graphviz(a1, a2);
  if (CI_PRINT_TREE_dump_inputs()
    && (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 344))(a1))
  {
    v4 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 344))(a1);
    IOSurface = (__IOSurface *)CIMetalTextureGetIOSurface(v4);
    if (IOSurface)
    {
      CGImage = (char *)SurfaceCreateCGImage(IOSurface, 0, 1);
      CIGVNodeAddImage(v3, CGImage);
      CGImageRelease((CGImageRef)CGImage);
    }
    else
    {
      v7 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 320))(a1);
      v8 = (int)CI::format_bits_per_pixel(v7);
      v9 = (int)CI::format_bits_per_component(v7);
      v10 = (*(unsigned int (**)(unsigned int *))(*(_QWORD *)a1 + 328))(a1) != 2
         && (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 328))(a1) != 6;
      v11 = CI::format_CGBitmapInfo(v7, v10);
      v12 = (void *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 344))(a1);
      v13 = objc_msgSend(v12, "width");
      v14 = objc_msgSend(v12, "height");
      v15 = CI::format_bytes_per_row(v7, v13);
      v16 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", v15 * v14);
      memset(v21, 0, 24);
      v21[3] = v13;
      v21[4] = v14;
      v21[5] = 1;
      objc_msgSend(v12, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", objc_msgSend(v16, "mutableBytes"), v15, v21, 0);
      v17 = CGDataProviderCreateWithCFData((CFDataRef)v16);
      v18 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
      v19 = (char *)CGImageCreate(v13, v14, v9, v8, v15, v18, v11, v17, 0, 0, kCGRenderingIntentDefault);
      if (v19)
        CIGVNodeAddImage(v3, v19);
      CGDataProviderRelease(v17);
      CGImageRelease((CGImageRef)v19);
      CGColorSpaceRelease(v18);
    }
  }
  return v3;
}

void CI::MetalTextureImage::~MetalTextureImage(CI::MetalTextureImage *this)
{
  CI::MetalTextureImage::~MetalTextureImage(this);
  JUMPOUT(0x194025AACLL);
}

{
  const void *v2;

  *(_QWORD *)this = &off_1E2EBD868;
  *((_QWORD *)this + 13) = &unk_1E2EBD9D8;
  v2 = (const void *)*((_QWORD *)this + 14);
  if (v2)
    CFRelease(v2);
  CI::TextureImage::~TextureImage(this);
}

uint64_t CI::MetalTextureImage::texture_id(CI::MetalTextureImage *this)
{
  return 0;
}

uint64_t CI::TextureImage::texture_ref(CI::TextureImage *this)
{
  return *((_QWORD *)this + 14);
}

void `non-virtual thunk to'CI::MetalTextureImage::~MetalTextureImage(CI::MetalTextureImage *this)
{
  CI::MetalTextureImage::~MetalTextureImage((CI::MetalTextureImage *)((char *)this - 104));
}

{
  CI::MetalTextureImage::~MetalTextureImage((CI::MetalTextureImage *)((char *)this - 104));
  JUMPOUT(0x194025AACLL);
}

void CI::GLTextureNode::~GLTextureNode(CI::GLTextureNode *this)
{
  CI::TextureNode::~TextureNode(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::TextureNode::type(CI::TextureNode *this)
{
  return 48;
}

uint64_t CI::TextureNode::child_count(CI::TextureNode *this)
{
  return 0;
}

uint64_t CI::TextureNode::child(CI::TextureNode *this)
{
  return 0;
}

uint64_t CI::TextureNode::shape_for_graphviz(CI::TextureNode *this)
{
  return 0;
}

uint64_t CI::TextureNode::color_for_graphviz(CI::TextureNode *this)
{
  return 11;
}

uint64_t CI::Node::imageIndex(CI::Node *this)
{
  return 0;
}

_DWORD *CI::TextureNode::extent(_DWORD *this)
{
  if (!this[21])
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 168))(this);
  return this;
}

double CI::TextureNode::extent_unclamped(CI::TextureNode *this)
{
  return 0.0;
}

uint64_t CI::TextureNode::child_type_is_image(CI::TextureNode *this)
{
  return 0;
}

uint64_t CI::Node::plane_count(CI::Node *this)
{
  return 1;
}

uint64_t CI::TextureNode::may_be_extended_range(CI::TextureNode *this)
{
  return *((unsigned __int8 *)this + 88);
}

BOOL CI::TextureNode::alpha_one(CI::TextureNode *this)
{
  return *((_DWORD *)this + 20) == 1;
}

uint64_t CI::Node::output_is_rg(CI::Node *this)
{
  return 0;
}

uint64_t CI::Node::output_is_r(CI::Node *this)
{
  return 0;
}

uint64_t CI::Node::output_is_luma(CI::Node *this)
{
  return 0;
}

uint64_t CI::TextureNode::output_depth(CI::TextureNode *this)
{
  if (*((_BYTE *)this + 88))
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t CI::Node::roiAlignment(CI::Node *this)
{
  return 0;
}

uint64_t CI::Node::texture_bindable(CI::Node *this)
{
  return 0;
}

uint64_t CI::GLTextureNode::format(CI::GLTextureNode *this)
{
  return 0;
}

uint64_t CI::TextureNode::alpha_mode(CI::TextureNode *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t CI::TextureNode::texture_id(CI::TextureNode *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t CI::GLTextureNode::texture_ref(CI::GLTextureNode *this)
{
  return 0;
}

_QWORD *CI::TextureNode::set_texture(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result[6] = a2;
  result[7] = a3;
  result[8] = a4;
  return result;
}

uint64_t `non-virtual thunk to'CI::TextureNode::type(CI::TextureNode *this)
{
  return 48;
}

void `non-virtual thunk to'CI::GLTextureNode::~GLTextureNode(CI::GLTextureNode *this)
{
  CI::TextureNode::~TextureNode((CI::GLTextureNode *)((char *)this - 40));
}

{
  CI::TextureNode::~TextureNode((CI::GLTextureNode *)((char *)this - 40));
  JUMPOUT(0x194025AACLL);
}

CI::Node *CI::MetalTextureNode::MetalTextureNode(CI::Node *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  CI::Node *v8;
  const void *v9;

  v8 = CI::TextureNode::TextureNode(a1, a2, 0, a3, a4, a5, a6, a7);
  *(_QWORD *)v8 = &off_1E2EBCCB8;
  *((_QWORD *)v8 + 5) = &unk_1E2EBCE88;
  v9 = (const void *)CI::TextureNode::texture_ref(v8);
  if (v9)
    CFRetain(v9);
  return a1;
}

void sub_19240F984(_Unwind_Exception *a1)
{
  CI::TextureNode *v1;

  CI::TextureNode::~TextureNode(v1);
  _Unwind_Resume(a1);
}

void sub_19240F9D8(_Unwind_Exception *a1)
{
  CI::TextureImage *v1;

  CI::TextureImage::~TextureImage(v1);
  _Unwind_Resume(a1);
}

uint64_t CI::InstanceCounted<(CI::Type)25>::type()
{
  return 25;
}

_QWORD *CI::InstanceCounted<(CI::Type)25>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBA38;
  do
    v1 = __ldaxr(&dword_1ECF872F0[23]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[23]));
  return result;
}

void CI::InstanceCounted<(CI::Type)25>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBA38;
  do
    v1 = __ldaxr(&dword_1ECF872F0[23]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[23]));
  JUMPOUT(0x194025AACLL);
}

void CI::Image::set_url(CI::Image *this, CFTypeRef cf)
{
  CFTypeRef v3;

  v3 = (CFTypeRef)*((_QWORD *)this + 6);
  if (v3 != cf)
  {
    if (cf)
    {
      CFRetain(cf);
      v3 = (CFTypeRef)*((_QWORD *)this + 6);
    }
    if (v3)
      CFRelease(v3);
    *((_QWORD *)this + 6) = cf;
  }
}

BOOL CI::Image::render_graph_allow_reorder(CI::Image *this)
{
  return CI_GRAPH_ALLOW_REORDER() != 0;
}

size_t CI::Image::print_for_graph(_QWORD *a1, FILE *a2)
{
  __sFILE *v4;
  float v5;
  __sFILE *v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  size_t result;
  __sFILE *v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  if (CI_GRAPHVIZ_INTERNAL() || CI_PRINT_TREE_dump_inputs())
    fprintf(a2, "{%d} ", *((_DWORD *)a1 + 25));
  (*(void (**)(_QWORD *, FILE *))(*a1 + 160))(a1, a2);
  if (!CGRectIsNull(*(CGRect *)(a1 + 2)))
  {
    fwrite(" roi=", 5uLL, 1uLL, a2);
    CI::fprintf(a2, v4, *(CGRect *)(a1 + 2));
  }
  if ((*(float (**)(_QWORD *))(*a1 + 232))(a1) > 1.0)
  {
    v5 = (*(float (**)(_QWORD *))(*a1 + 232))(a1);
    fprintf(a2, " headroom=%.3f", v5);
  }
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 128))(a1))
    fwrite(" opaque", 7uLL, 1uLL, a2);
  fwrite(" extent=", 8uLL, 1uLL, a2);
  v19.origin.x = (*(double (**)(_QWORD *))(*a1 + 88))(a1);
  CI::fprintf(a2, v6, v19);
  v7 = (*(double (**)(_QWORD *))(*a1 + 88))(a1);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v22.origin.x = (*(double (**)(_QWORD *))(*a1 + 96))(a1);
  v22.origin.y = v14;
  v22.size.width = v15;
  v22.size.height = v16;
  v20.origin.x = v7;
  v20.origin.y = v9;
  v20.size.width = v11;
  v20.size.height = v13;
  result = CGRectEqualToRect(v20, v22);
  if ((result & 1) == 0)
  {
    v21.origin.x = (*(double (**)(_QWORD *))(*a1 + 96))(a1);
    result = CI::fprintf(a2, v18, v21);
  }
  if (a1[11])
    return fprintf(a2, " recipe=%08X", a1[11]);
  return result;
}

void CI::Image::region_of_child(CI::Image *this, CGRect a2, uint64_t a3)
{
  double height;
  double width;
  double y;
  double x;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  uint64_t v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  _BOOL8 IsInfinite;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  uint64_t v32;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  if (!CGRectIsEmpty(a2))
  {
    v36.origin.x = (*(double (**)(CI::Image *, uint64_t, double, double, double, double))(*(_QWORD *)this
                                                                                                  + 80))(this, a3, x, y, width, height);
    v36.origin.y = v9;
    v36.size.width = v10;
    v36.size.height = v11;
    v12 = (*(uint64_t (**)(CI::Image *, uint64_t))(*(_QWORD *)this + 48))(this, a3);
    v13 = (*(double (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    v20 = (*(double (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    v37.origin.x = v13;
    v37.origin.y = v15;
    v37.size.width = v17;
    v37.size.height = v19;
    if (CGRectIsInfinite(v37)
      && (v38.origin.x = v20,
          v38.origin.y = v22,
          v38.size.width = v24,
          v38.size.height = v26,
          !(IsInfinite = CGRectIsInfinite(v38))))
    {
      v44.origin.x = v20;
      v44.origin.y = v22;
      v44.size.width = v24;
      v44.size.height = v26;
      CI::ClampNode::adjust_roi_for_clamp_rect((CI::ClampNode *)IsInfinite, v36, v44);
    }
    else
    {
      v39.origin.x = v13;
      v39.origin.y = v15;
      v39.size.width = v17;
      v39.size.height = v19;
      v43 = CGRectInset(v39, -1.0, -1.0);
      v40 = CGRectIntersection(v36, v43);
      v28 = v40.origin.x;
      v29 = v40.origin.y;
      v30 = v40.size.width;
      v31 = v40.size.height;
      if (CGRectIsEmpty(v40))
        return;
      v41.origin.x = v28;
      v41.origin.y = v29;
      v41.size.width = v30;
      v41.size.height = v31;
      if (CGRectIsInfinite(v41))
        return;
      v42.origin.x = v28;
      v42.origin.y = v29;
      v42.size.width = v30;
      v42.size.height = v31;
      *(CGRect *)&v32 = CGRectInset(v42, 0.001, 0.001);
    }
    CGRectIntegral(*(CGRect *)&v32);
  }
}

CIGVNode *CI::Image::node_for_graphviz(unsigned int *a1, _QWORD *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  CIGVNode *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  _QWORD *v12;
  const char *v13;
  const char *v14;
  _QWORD v16[6];
  unsigned int *v17;

  v4 = (*(double (**)(unsigned int *))(*(_QWORD *)a1 + 88))(a1);
  v8 = CIGVNodeCreateForNode((uint64_t)a1, v4, v5, v6, v7);
  v9 = (const char *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 56))(a1);
  CIGVNodeSetShape(v8, v9);
  v10 = (const char *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 64))(a1);
  CIGVNodeSetColor(v8, v10);
  if (CI_GRAPHVIZ_INTERNAL())
  {
    v11 = a1[25];
LABEL_5:
    v13 = (const char *)CFStringCreateWithFormat(0, 0, CFSTR("%u"), v11);
    CIGVNodeSetTitle(v8, v13);
    CFRelease(v13);
    goto LABEL_6;
  }
  v17 = a1;
  v12 = std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(a2, &v17);
  if (v12)
  {
    v11 = *((unsigned int *)v12 + 6);
    goto LABEL_5;
  }
LABEL_6:
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZNK2CI5Image17node_for_graphvizERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEE_block_invoke;
  v16[3] = &__block_descriptor_tmp_15;
  v16[4] = a1;
  v16[5] = a2;
  v14 = (const char *)stream_to_string((uint64_t)v16);
  CIGVNodeSetLabel(v8, v14);
  CFRelease(v14);
  return v8;
}

size_t ___ZNK2CI5Image17node_for_graphvizERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEE_block_invoke(uint64_t a1, FILE *a2)
{
  _QWORD *v3;
  __sFILE *v4;
  float v5;
  __sFILE *v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  size_t result;
  __sFILE *v18;
  uint64_t v19;
  uint64_t v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;

  v3 = *(_QWORD **)(a1 + 32);
  (*(void (**)(_QWORD *, FILE *, _QWORD, _QWORD))(*v3 + 168))(v3, a2, *(_QWORD *)(a1 + 40), 0);
  if (!CGRectIsNull(*(CGRect *)(v3 + 2)))
  {
    fprintf(a2, "%croi=", 10);
    CI::fprintf(a2, v4, *(CGRect *)(v3 + 2));
  }
  if ((*(float (**)(_QWORD *))(*v3 + 232))(v3) > 1.0)
  {
    v5 = (*(float (**)(_QWORD *))(*v3 + 232))(v3);
    fprintf(a2, "%cheadroom=%.3f", 10, v5);
  }
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 128))(v3))
    fprintf(a2, "%copaque", 10);
  fprintf(a2, "%cextent=", 10);
  v21.origin.x = (*(double (**)(_QWORD *))(*v3 + 88))(v3);
  CI::fprintf(a2, v6, v21);
  v7 = (*(double (**)(_QWORD *))(*v3 + 88))(v3);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v24.origin.x = (*(double (**)(_QWORD *))(*v3 + 96))(v3);
  v24.origin.y = v14;
  v24.size.width = v15;
  v24.size.height = v16;
  v22.origin.x = v7;
  v22.origin.y = v9;
  v22.size.width = v11;
  v22.size.height = v13;
  result = CGRectEqualToRect(v22, v24);
  if ((result & 1) == 0)
  {
    v23.origin.x = (*(double (**)(_QWORD *))(*v3 + 96))(v3);
    result = CI::fprintf(a2, v18, v23);
  }
  v19 = v3[10];
  if (v19)
    result = fprintf(a2, "%cdigest=%016llX", 10, v19);
  v20 = v3[11];
  if (v20)
    return fprintf(a2, "%crecipe=%016llX", 10, v20);
  return result;
}

uint64_t CI::Image::render_graph_early_out(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  double v16;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v27;
  _BOOL4 v28;
  uint64_t result;
  BOOL v30;
  CI::FillNode *v31;

  v10 = (_QWORD *)a3[1];
  if (v10)
  {
    v11 = a1[10];
    v12 = a3 + 1;
    do
    {
      v13 = v10[4];
      v14 = v13 >= v11;
      if (v13 >= v11)
        v15 = v10;
      else
        v15 = v10 + 1;
      if (v14)
        v12 = v10;
      v10 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v12 != a3 + 1 && v12[4] <= v11)
      return 1;
  }
  v16 = CI::Image::lookup_union_roi((uint64_t)a1, a4);
  v22 = *(_QWORD **)(a5 + 8);
  v21 = (_QWORD *)(a5 + 8);
  v20 = v22;
  if (!v22)
    goto LABEL_23;
  v23 = a1[10];
  v24 = v21;
  do
  {
    v25 = v20[4];
    v26 = v25 >= v23;
    if (v25 >= v23)
      v27 = v20;
    else
      v27 = v20 + 1;
    if (v26)
      v24 = v20;
    v20 = (_QWORD *)*v27;
  }
  while (*v27);
  if (v24 != v21 && v23 >= v24[4])
    v28 = *((_DWORD *)v24 + 10) != 0;
  else
LABEL_23:
    v28 = 0;
  if (CGRectIsEmpty(*(CGRect *)&v16) || !v28)
    goto LABEL_29;
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 264))(a1);
  if ((_DWORD)result)
  {
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 40))(a1) != 1)
      return 0;
    v30 = CI::Image::roi_of_child_intersects_extent((uint64_t)a1, a4, 0);
    result = 0;
    if (!v30)
    {
LABEL_29:
      v31 = (CI::FillNode *)operator new();
      CI::FillNode::FillNode(v31);
      CI::ImageToNodeMap::add(a3, a2, (uint64_t)a1, v31);
      CI::Object::unref(v31);
      return 1;
    }
  }
  return result;
}

uint64_t CI::ImageToNodeMap::add(uint64_t *a1, uint64_t a2, uint64_t a3, CI::Object *this)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;

  CI::ImageToNodeMap::add_ImageDigest_to_node(a1, *(_QWORD *)(a3 + 80), this);
  v8 = *(_DWORD *)(a3 + 100);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  result = CI::is_raster_TypeImage(v9);
  if ((result & 1) != 0
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3), (_DWORD)result == 13)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3), (_DWORD)result == 12)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3), (_DWORD)result == 17))
  {
    v13 = *(_QWORD *)(a2 + 8);
    v12 = a2 + 8;
    v11 = v13;
    if (v13)
    {
      v14 = v12;
      do
      {
        v15 = *(_DWORD *)(v11 + 32);
        v16 = v15 >= v8;
        if (v15 >= v8)
          v17 = (uint64_t *)v11;
        else
          v17 = (uint64_t *)(v11 + 8);
        if (v16)
          v14 = v11;
        v11 = *v17;
      }
      while (*v17);
      if (v14 != v12 && v8 >= *(_DWORD *)(v14 + 32))
        return (uint64_t)CI::ImageToNodeMap::add_ImageDigestForRG_to_node(a1, *(_QWORD *)(v14 + 40), this);
    }
  }
  return result;
}

void CI::Image::add_render_graph_to_map(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  CI::Node *v19;

  v12 = *(_QWORD **)(a6 + 8);
  v10 = (_QWORD *)(a6 + 8);
  v11 = v12;
  if (!v12)
    goto LABEL_12;
  v13 = a1[10];
  v14 = v10;
  do
  {
    v15 = v11[4];
    v16 = v15 >= v13;
    if (v15 >= v13)
      v17 = v11;
    else
      v17 = v11 + 1;
    if (v16)
      v14 = v11;
    v11 = (_QWORD *)*v17;
  }
  while (*v17);
  if (v14 != v10 && v13 >= v14[4])
    v18 = *((unsigned int *)v14 + 10);
  else
LABEL_12:
    v18 = 0;
  v19 = (CI::Node *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, uint64_t, _QWORD *))(*a1 + 176))(a1, a2, a4, a5, v18, v10);
  if (CI_DISABLE_MERGING())
    v19 = (CI::Node *)CI::NoopNode::append_to_tree_and_unref(v19, a2, 7);
  if ((int)v18 < 2)
  {
    CI::ImageToNodeMap::add(a4, a3, (uint64_t)a1, v19);
    if (!v19)
      return;
  }
  else
  {
    (*(void (**)(CI::Node *))(*(_QWORD *)v19 + 184))(v19);
    CI::ImageToNodeMap::add(a4, a3, (uint64_t)a1, v19);
  }
  CI::Object::unref(v19);
}

uint64_t CI::Image::BuildMapToUnionRoi(CI::Image *this, CI::Image *a2, CGRect a3)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[9];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v16[5];

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v8[2] = 0;
  *v8 = v8 + 1;
  v15 = v8;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZN2CI5Image18BuildMapToUnionRoiEPS0_6CGRect_block_invoke;
  v11[3] = &unk_1E2EC7560;
  *(CGFloat *)&v11[5] = x;
  *(CGFloat *)&v11[6] = y;
  *(CGFloat *)&v11[7] = width;
  *(CGFloat *)&v11[8] = height;
  v11[4] = &v12;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZNK2CI5Image27traverse_preorder_stoppableEU13block_pointerFbPKS0_S2_iiE_block_invoke_0;
  v16[3] = &unk_1E2EC75B0;
  v16[4] = v11;
  CI::GraphObject::traverse_preorder_stoppable((uint64_t)this, 0, 0, 0, (uint64_t)v16);
  v9 = v13[3];
  _Block_object_dispose(&v12, 8);
  return v9;
}

uint64_t ___ZN2CI5Image18BuildMapToUnionRoiEPS0_6CGRect_block_invoke(double *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _QWORD *v8;
  double *v9;
  _QWORD *v10;
  double *v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  double *v17;
  double *v18;
  double *v19;
  BOOL v20;
  double *v21;
  double *v22;
  double *v23;
  double *v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  double *v35;
  unint64_t v36;
  BOOL v37;
  _QWORD *v38;
  uint64_t **v39;
  uint64_t result;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  unint64_t v45;
  unint64_t *v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;

  if (a3)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 24);
    v10 = *(_QWORD **)(v7 + 8);
    v9 = (double *)(v7 + 8);
    v8 = v10;
    v11 = (double *)MEMORY[0x1E0C9D628];
    if (v10)
    {
      v12 = a3[10];
      v13 = v9;
      do
      {
        v14 = v8[4];
        v15 = v14 >= v12;
        if (v14 >= v12)
          v16 = v8;
        else
          v16 = v8 + 1;
        if (v15)
          v13 = (double *)v8;
        v8 = (_QWORD *)*v16;
      }
      while (*v16);
      v17 = (double *)(MEMORY[0x1E0C9D628] + 24);
      v18 = (double *)(MEMORY[0x1E0C9D628] + 16);
      v19 = (double *)(MEMORY[0x1E0C9D628] + 8);
      if (v13 != v9)
      {
        v20 = v12 >= *((_QWORD *)v13 + 4);
        v21 = v13 + 5;
        v22 = v13 + 6;
        v23 = v13 + 7;
        v24 = v13 + 8;
        if (v20)
          v11 = v21;
        if (v20)
          v19 = v22;
        if (v20)
          v18 = v23;
        if (v20)
          v17 = v24;
      }
    }
    else
    {
      v17 = (double *)(MEMORY[0x1E0C9D628] + 24);
      v18 = (double *)(MEMORY[0x1E0C9D628] + 16);
      v19 = (double *)(MEMORY[0x1E0C9D628] + 8);
    }
    v25 = (*(double (**)(_QWORD *, uint64_t, double, double, double, double))(*a3 + 256))(a3, a5, *v11, *v19, *v18, *v17);
    v26 = v29;
    v27 = v30;
    v28 = v31;
  }
  else
  {
    v25 = a1[5];
    v26 = a1[6];
    v27 = a1[7];
    v28 = a1[8];
  }
  v32 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 24);
  v33 = *(_QWORD *)(a2 + 80);
  v34 = *(_QWORD **)(v32 + 8);
  if (!v34)
    goto LABEL_38;
  v35 = (double *)(v32 + 8);
  do
  {
    v36 = v34[4];
    v37 = v36 >= v33;
    if (v36 >= v33)
      v38 = v34;
    else
      v38 = v34 + 1;
    if (v37)
      v35 = (double *)v34;
    v34 = (_QWORD *)*v38;
  }
  while (*v38);
  if (v35 != (double *)(v32 + 8) && v33 >= *((_QWORD *)v35 + 4))
  {
    v41 = v35[5];
    v42 = v35[6];
    v43 = v35[7];
    v44 = v35[8];
    v47.origin.x = v41;
    v47.origin.y = v42;
    v47.size.width = v43;
    v47.size.height = v44;
    v50.origin.x = v25;
    v50.origin.y = v26;
    v50.size.width = v27;
    v50.size.height = v28;
    if (CGRectContainsRect(v47, v50))
    {
      return 1;
    }
    else
    {
      v48.origin.x = v25;
      v48.origin.y = v26;
      v48.size.width = v27;
      v48.size.height = v28;
      v51.origin.x = v41;
      v51.origin.y = v42;
      v51.size.width = v43;
      v51.size.height = v44;
      v49 = CGRectUnion(v48, v51);
      result = 0;
      *(CGRect *)(v35 + 5) = v49;
    }
  }
  else
  {
LABEL_38:
    v45 = v33;
    v46 = &v45;
    v39 = std::__tree<std::__value_type<CI::ImageDigest,CGRect>,std::__map_value_compare<CI::ImageDigest,std::__value_type<CI::ImageDigest,CGRect>,std::less<CI::ImageDigest>,true>,std::allocator<std::__value_type<CI::ImageDigest,CGRect>>>::__emplace_unique_key_args<CI::ImageDigest,std::piecewise_construct_t const&,std::tuple<CI::ImageDigest&&>,std::tuple<>>((uint64_t **)v32, &v45, (uint64_t)&std::piecewise_construct, &v46);
    result = 0;
    *((CGFloat *)v39 + 5) = v25;
    *((CGFloat *)v39 + 6) = v26;
    *((CGFloat *)v39 + 7) = v27;
    *((CGFloat *)v39 + 8) = v28;
  }
  return result;
}

uint64_t CI::Image::BuildMapToUseCount(CI::Image *this, CI::Image *a2, CI::Context *a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[5];

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v5 = (_QWORD *)operator new();
  v5[2] = 0;
  v5[1] = 0;
  *v5 = v5 + 1;
  v12 = v5;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN2CI5Image18BuildMapToUseCountEPS0_PNS_7ContextE_block_invoke;
  v8[3] = &unk_1E2EC7588;
  v8[4] = &v9;
  v8[5] = a2;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 0x40000000;
  v13[2] = ___ZNK2CI5Image27traverse_preorder_stoppableEU13block_pointerFbPKS0_S2_iiE_block_invoke_0;
  v13[3] = &unk_1E2EC75B0;
  v13[4] = v8;
  CI::GraphObject::traverse_preorder_stoppable((uint64_t)this, 0, 0, 0, (uint64_t)v13);
  v6 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v6;
}

uint64_t ___ZN2CI5Image18BuildMapToUseCountEPS0_PNS_7ContextE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t **v16;
  uint64_t result;
  unint64_t v18;
  unint64_t *v19;

  v6 = *(_QWORD *)(a2 + 80);
  v18 = v6;
  if (!a3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3) != 22
    || (v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 320))(*(_QWORD *)(a1 + 40)),
        (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 320))(a3, v9) == a5))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v11 = *(_QWORD **)(v10 + 8);
    if (!v11)
      goto LABEL_15;
    v12 = (_QWORD *)(v10 + 8);
    do
    {
      v13 = v11[4];
      v14 = v13 >= v6;
      if (v13 >= v6)
        v15 = v11;
      else
        v15 = v11 + 1;
      if (v14)
        v12 = v11;
      v11 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v12 == (_QWORD *)(v10 + 8) || v6 < v12[4])
    {
LABEL_15:
      v19 = &v18;
      v16 = std::__tree<std::__value_type<CI::ImageDigest,int>,std::__map_value_compare<CI::ImageDigest,std::__value_type<CI::ImageDigest,int>,std::less<CI::ImageDigest>,true>,std::allocator<std::__value_type<CI::ImageDigest,int>>>::__emplace_unique_key_args<CI::ImageDigest,std::piecewise_construct_t const&,std::tuple<CI::ImageDigest const&>,std::tuple<>>((uint64_t **)v10, &v18, (uint64_t)&std::piecewise_construct, &v19);
      result = 0;
      *((_DWORD *)v16 + 10) = 1;
      return result;
    }
    ++*((_DWORD *)v12 + 10);
  }
  return 1;
}

uint64_t CI::ImageWithChild::render_graph_core(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = *(_QWORD **)(a3 + 8);
  v3 = (_QWORD *)(a3 + 8);
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = *(_QWORD *)(a1[13] + 80);
  v7 = v3;
  do
  {
    v8 = v4[4];
    v9 = v8 >= v6;
    if (v8 >= v6)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = v4;
    v4 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != v3 && v7[4] <= v6)
    v11 = v7[5];
  else
LABEL_12:
    v11 = 0;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 320))(a1, a2, v11);
}

float CI::Image::headroom(CI::Image *this)
{
  return 0.0;
}

uint64_t *CI::ImageToNodeMap::add_ImageDigest_to_node(uint64_t *result, unint64_t a2, CI::Object *this)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;

  v3 = (uint64_t **)result;
  v10 = a2;
  v4 = (_QWORD *)result[1];
  if (!v4)
    goto LABEL_12;
  v5 = result + 1;
  do
  {
    v6 = v4[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v4;
    else
      v8 = v4 + 1;
    if (v7)
      v5 = v4;
    v4 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == result + 1 || v5[4] > a2)
  {
LABEL_12:
    if (this)
      v9 = CI::Object::ref((uint64_t)this);
    else
      v9 = 0;
    v11 = &v10;
    result = std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v3, &v10, (uint64_t)&std::piecewise_construct, (uint64_t **)&v11);
    result[5] = v9;
  }
  return result;
}

uint64_t *CI::ImageToNodeMap::add_ImageDigestForRG_to_node(uint64_t *result, unint64_t a2, CI::Object *this)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;

  v3 = (uint64_t)result;
  v10 = a2;
  v4 = (_QWORD *)result[4];
  if (!v4)
    goto LABEL_12;
  v5 = result + 4;
  do
  {
    v6 = v4[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v4;
    else
      v8 = v4 + 1;
    if (v7)
      v5 = v4;
    v4 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == result + 4 || v5[4] > a2)
  {
LABEL_12:
    if (this)
      v9 = CI::Object::ref((uint64_t)this);
    else
      v9 = 0;
    v11 = &v10;
    result = std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t **)(v3 + 24), &v10, (uint64_t)&std::piecewise_construct, (uint64_t **)&v11);
    result[5] = v9;
  }
  return result;
}

uint64_t ___ZNK2CI5Image27traverse_preorder_stoppableEU13block_pointerFbPKS0_S2_iiE_block_invoke_0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t **std::__tree<std::__value_type<CI::ImageDigest,CGRect>,std::__map_value_compare<CI::ImageDigest,std::__value_type<CI::ImageDigest,CGRect>,std::less<CI::ImageDigest>,true>,std::allocator<std::__value_type<CI::ImageDigest,CGRect>>>::__emplace_unique_key_args<CI::ImageDigest,std::piecewise_construct_t const&,std::tuple<CI::ImageDigest&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x48uLL);
    *((_QWORD *)v11 + 4) = **a4;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    std::__tree<std::__value_type<std::string,CI::SWFunction>,std::__map_value_compare<std::string,std::__value_type<std::string,CI::SWFunction>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CI::SWFunction>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<CI::ImageDigest,int>,std::__map_value_compare<CI::ImageDigest,std::__value_type<CI::ImageDigest,int>,std::less<CI::ImageDigest>,true>,std::allocator<std::__value_type<CI::ImageDigest,int>>>::__emplace_unique_key_args<CI::ImageDigest,std::piecewise_construct_t const&,std::tuple<CI::ImageDigest const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<std::__value_type<std::string,CI::SWFunction>,std::__map_value_compare<std::string,std::__value_type<std::string,CI::SWFunction>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CI::SWFunction>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

char *CI::KernelArguments::name_for_type(int a1)
{
  if (a1 > 47)
    return 0;
  else
    return CI::KernelArguments::name_for_type(CI::KernelArgumentType)::names[a1];
}

BOOL CI::KernelArguments::is_uniform(int a1)
{
  return (a1 - 5) < 0x17;
}

BOOL CI::KernelArguments::is_texture(int a1)
{
  return (a1 - 1) < 4;
}

_QWORD *CI::KernelArguments::KernelArguments(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

void CI::KernelArguments::print_names(CI::KernelArguments *this, __sFILE *a2)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 0x40000000;
    v3[2] = ___ZNK2CI17SerialStringArray5printEP7__sFILE_block_invoke;
    v3[3] = &__block_descriptor_tmp_51_0;
    v3[4] = v2;
    stream_to_file(a2, (uint64_t)v3);
  }
}

void CI::KernelArguments::print_types(CI::KernelArguments *this, __sFILE *a2)
{
  uint64_t v2;
  _QWORD v3[6];

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 0x40000000;
    v3[2] = ___ZNK2CI14SerialValArrayIiE5printEP7__sFILEU13block_pointerFPKciE_block_invoke;
    v3[3] = &unk_1E2EB78A8;
    v3[4] = &__block_literal_global_90;
    v3[5] = v2;
    stream_to_file(a2, (uint64_t)v3);
  }
}

uint64_t CI::KernelArguments::get_name(CI::KernelArguments *this, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;

  result = 0;
  if ((a2 & 0x80000000) == 0)
  {
    v4 = *((_QWORD *)this + 1);
    if (v4)
    {
      if (*(_DWORD *)v4 <= (signed int)a2)
        return 0;
      else
        return *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * a2);
    }
  }
  return result;
}

uint64_t *CI::KernelArguments::set_type(uint64_t *result, int a2, int a3)
{
  uint64_t v3;
  _DWORD *v4;

  v3 = *result;
  if (*result)
  {
    if (a2 > 9)
      v4 = (_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * (a2 - 10));
    else
      v4 = (_DWORD *)(v3 + 4 * a2 + 24);
    *v4 = a3;
  }
  return result;
}

uint64_t ___ZNK2CI17SerialStringArray5printEP7__sFILE_block_invoke(uint64_t result, FILE *a2)
{
  int *v2;
  uint64_t v4;

  v2 = *(int **)(result + 32);
  if (*v2 >= 1)
  {
    v4 = 0;
    do
    {
      result = fprintf(a2, "[%i] = %s\n", v4, *(const char **)(*((_QWORD *)v2 + 4) + 8 * v4));
      ++v4;
    }
    while (v4 < *v2);
  }
  return result;
}

uint64_t ___ZNK2CI14SerialValArrayIiE5printEP7__sFILEU13block_pointerFPKciE_block_invoke(uint64_t result, FILE *a2)
{
  int *v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  const char *v7;

  v2 = *(int **)(result + 40);
  if (*v2 >= 1)
  {
    v4 = result;
    v5 = 0;
    v6 = v2 + 6;
    do
    {
      v7 = (const char *)(*(uint64_t (**)(void))(*(_QWORD *)(v4 + 32) + 16))();
      result = fprintf(a2, "[%d] = %s\n", v5++, v7);
      ++v6;
    }
    while (v5 < *v2);
  }
  return result;
}

uint64_t CI::ColorKernel::ColorKernel(uint64_t a1, const char *a2, char *a3, char *a4, char a5, void **a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t *a11, char a12, char a13)
{
  uint64_t v15;

  v15 = CI::Kernel::Kernel(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8, a9, a10, *a11, a11[1]);
  *(_QWORD *)v15 = &off_1E2EB87D0;
  *(_QWORD *)(v15 + 168) = 0;
  *(_BYTE *)(v15 + 176) = a12;
  if (a13)
    CI::SerialValArray<int>::append(a6, 30);
  return a1;
}

{
  return CI::ColorKernel::ColorKernel(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t CI::GeneralKernel::GeneralKernel(uint64_t a1, const char *a2, char *a3, char *a4, char a5, void **a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t *a11, char a12)
{
  *(_QWORD *)CI::Kernel::Kernel(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8, a9, a10, *a11, a11[1]) = &off_1E2EBA008;
  if (a12)
    CI::SerialValArray<int>::append(a6, 30);
  return a1;
}

{
  return CI::GeneralKernel::GeneralKernel(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_192411280(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1924113D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_192412300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__24(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void ___ZL23newMTLLibraryWithSourcePU19objcproto9MTLDevice11objc_objectP8NSStringPP7NSError_block_invoke()
{
  char *v0;
  char *v1;
  id v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[16];
  uint8_t buf[8];
  unint64_t size;

  size = 0;
  v0 = getsectdatafromFramework("CoreImage", "__TEXT", "__runtimeheader", &size);
  if (v0)
  {
    v1 = v0;
    v2 = objc_alloc(MEMORY[0x1E0CB3940]);
    newMTLLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,NSError **)::_runtime_header = objc_msgSend(v2, "initWithBytesNoCopy:length:encoding:freeWhenDone:", v1, size, 1, 0);
    if (newMTLLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,NSError **)::_runtime_header)
      return;
    goto LABEL_7;
  }
  v3 = ci_logger_compile();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1921E4000, v3, OS_LOG_TYPE_INFO, "Could not initialize header file", buf, 2u);
  }
  if (!newMTLLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,NSError **)::_runtime_header)
  {
LABEL_7:
    v4 = ci_logger_compile();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1921E4000, v4, OS_LOG_TYPE_INFO, "Could not create the runtime headers string", v5, 2u);
    }
  }
}

void ___ZL37addSpecializedFunctionToBinaryArchiveP21MTLFunctionDescriptorPU21objcproto10MTLLibrary11objc_object_block_invoke(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  id v4;

  v4 = 0;
  v2 = (void *)objc_opt_new();
  objc_msgSend(v2, "setSpecializedName:", objc_msgSend(*(id *)(a1 + 32), "specializedName"));
  objc_msgSend(v2, "setName:", objc_msgSend(*(id *)(a1 + 32), "name"));
  objc_msgSend(v2, "setConstantValues:", objc_msgSend(*(id *)(a1 + 32), "constantValues"));
  if ((objc_msgSend(*(id *)(a1 + 40), "addFunctionWithDescriptor:library:error:", v2, *(_QWORD *)(a1 + 48), &v4) & 1) == 0)
  {
    v3 = ci_logger_compile();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      ___ZL37addSpecializedFunctionToBinaryArchiveP21MTLFunctionDescriptorPU21objcproto10MTLLibrary11objc_object_block_invoke_cold_1(&v4, v3);
  }

}

int64x2_t *CI::MainProgram::MainProgram(int64x2_t *a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *i64;

  a1->i32[2] = 1;
  a1->i64[0] = (uint64_t)off_1E2EB8A28;
  a1[3].i64[0] = 0;
  i64 = a1[3].i64;
  a1[2].i64[0] = 0;
  a1[1].i64[0] = 0;
  a1[1].i64[1] = 0;
  a1[2].i32[2] = 0;
  a1[3].i64[1] = 0;
  CI::KernelArguments::KernelArguments((int64x2_t *)a1[4].i64, a4, a5);
  a1[5] = vdupq_n_s64(1uLL);
  if (a2)
    *i64 = strdup(a2);
  if (a3)
    a1[3].i64[1] = (uint64_t)strdup(a3);
  return a1;
}

void CI::MainProgram::~MainProgram(CI::MainProgram *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1E2EB8A28;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
    free(v2);
  *((_QWORD *)this + 6) = 0;
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
    free(v3);
  *((_QWORD *)this + 7) = 0;
  CI::KernelArguments::~KernelArguments((CI::MainProgram *)((char *)this + 64));
}

uint64_t CI::MainProgram::print_program(const char **this, __sFILE *__stream)
{
  fwrite("// Kernel Source\n", 0x11uLL, 1uLL, __stream);
  return fprintf(__stream, "%s\n", this[7]);
}

void CI::MainProgram::print_argument_types(CI::MainProgram *this, __sFILE *a2)
{
  CI::KernelArguments::print_types((CI::MainProgram *)((char *)this + 64), a2);
}

uint64_t CI::MainProgram::num_arguments(CI::MainProgram *this)
{
  return CI::KernelArguments::count((CI::MainProgram *)((char *)this + 64));
}

void CI::MainProgram::print_argument_names(CI::MainProgram *this, __sFILE *a2)
{
  CI::KernelArguments::print_names((CI::MainProgram *)((char *)this + 64), a2);
}

uint64_t CI::MainProgram::vector_arguments_size(CI::MainProgram *this, const CI::Context *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = CI::KernelArguments::count((CI::MainProgram *)((char *)this + 64));
  if (v4 < 1)
    return 0;
  v5 = v4;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = (*(uint64_t (**)(CI::MainProgram *, uint64_t))(*(_QWORD *)this + 40))(this, v7);
    if (!CI::KernelArguments::is_texture(v8))
      v6 = v6
         + (*(unsigned int (**)(const CI::Context *, uint64_t))(*(_QWORD *)a2 + 520))(a2, v8);
    v7 = (v7 + 1);
  }
  while (v5 != (_DWORD)v7);
  return v6;
}

uint64_t CI::MainProgram::argument_type(CI::MainProgram *this, unsigned int a2)
{
  return CI::KernelArguments::get_type((CI::MainProgram *)((char *)this + 64), a2);
}

uint64_t CI::MainProgram::argument_name(CI::MainProgram *this, unsigned int a2)
{
  return CI::KernelArguments::get_name((CI::MainProgram *)((char *)this + 64), a2);
}

uint64_t CI::MainProgram::type(CI::MainProgram *this)
{
  return 66;
}

void CI::LegacyDAGDescriptor::ArgumentInfo::add(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  char *v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  switch(a2)
  {
    case 0:
    case 1:
      v7 = a1[4];
      v8 = (char *)a1[3];
      if ((unint64_t)v8 < v7)
      {
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = a3;
        v9 = v8 + 24;
        *((_QWORD *)v8 + 2) = a4;
LABEL_89:
        a1[3] = v9;
        return;
      }
      v20 = (char *)a1[2];
      v21 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v20) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v20) >> 3);
        if (2 * v23 > v22)
          v22 = 2 * v23;
        if (v23 >= 0x555555555555555)
          v24 = 0xAAAAAAAAAAAAAAALL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 4), v24);
          v20 = (char *)a1[2];
          v8 = (char *)a1[3];
        }
        else
        {
          v25 = 0;
        }
        v62 = &v25[24 * v21];
        v63 = &v25[24 * v24];
        *(_QWORD *)v62 = 0;
        *((_QWORD *)v62 + 1) = a3;
        *((_QWORD *)v62 + 2) = a4;
        v9 = v62 + 24;
        if (v8 != v20)
        {
          do
          {
            v64 = *(_OWORD *)(v8 - 24);
            *((_QWORD *)v62 - 1) = *((_QWORD *)v8 - 1);
            *(_OWORD *)(v62 - 24) = v64;
            v62 -= 24;
            v8 -= 24;
          }
          while (v8 != v20);
          v20 = (char *)a1[2];
        }
        a1[2] = v62;
        a1[3] = v9;
        a1[4] = v63;
        if (v20)
          operator delete(v20);
        goto LABEL_89;
      }
      goto LABEL_121;
    case 2:
      v14 = a1[4];
      v11 = (uint64_t *)a1[3];
      if ((unint64_t)v11 < v14)
      {
        v12 = 1;
        goto LABEL_18;
      }
      v26 = (uint64_t *)a1[2];
      v37 = 0xAAAAAAAAAAAAAAABLL * (v11 - v26);
      v38 = v37 + 1;
      if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_121;
      v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v26) >> 3);
      if (2 * v39 > v38)
        v38 = 2 * v39;
      if (v39 >= 0x555555555555555)
        v40 = 0xAAAAAAAAAAAAAAALL;
      else
        v40 = v38;
      if (v40)
      {
        v41 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 4), v40);
        v26 = (uint64_t *)a1[2];
        v11 = (uint64_t *)a1[3];
      }
      else
      {
        v41 = 0;
      }
      v65 = &v41[24 * v37];
      v66 = &v41[24 * v40];
      *(_QWORD *)v65 = 1;
      *((_QWORD *)v65 + 1) = a3;
      *((_QWORD *)v65 + 2) = a4;
      v19 = v65 + 24;
      if (v11 == v26)
        goto LABEL_118;
      do
      {
        v69 = *(_OWORD *)(v11 - 3);
        *((_QWORD *)v65 - 1) = *(v11 - 1);
        *(_OWORD *)(v65 - 24) = v69;
        v65 -= 24;
        v11 -= 3;
      }
      while (v11 != v26);
      goto LABEL_117;
    case 3:
      v15 = a1[4];
      v11 = (uint64_t *)a1[3];
      if ((unint64_t)v11 < v15)
      {
        v12 = 2;
        goto LABEL_18;
      }
      v26 = (uint64_t *)a1[2];
      v42 = 0xAAAAAAAAAAAAAAABLL * (v11 - v26);
      v43 = v42 + 1;
      if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_121;
      v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v26) >> 3);
      if (2 * v44 > v43)
        v43 = 2 * v44;
      if (v44 >= 0x555555555555555)
        v45 = 0xAAAAAAAAAAAAAAALL;
      else
        v45 = v43;
      if (v45)
      {
        v46 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 4), v45);
        v26 = (uint64_t *)a1[2];
        v11 = (uint64_t *)a1[3];
      }
      else
      {
        v46 = 0;
      }
      v65 = &v46[24 * v42];
      v66 = &v46[24 * v45];
      *(_QWORD *)v65 = 2;
      *((_QWORD *)v65 + 1) = a3;
      *((_QWORD *)v65 + 2) = a4;
      v19 = v65 + 24;
      if (v11 == v26)
        goto LABEL_118;
      do
      {
        v70 = *(_OWORD *)(v11 - 3);
        *((_QWORD *)v65 - 1) = *(v11 - 1);
        *(_OWORD *)(v65 - 24) = v70;
        v65 -= 24;
        v11 -= 3;
      }
      while (v11 != v26);
      goto LABEL_117;
    case 4:
    case 5:
      v10 = a1[4];
      v11 = (uint64_t *)a1[3];
      if ((unint64_t)v11 >= v10)
      {
        v26 = (uint64_t *)a1[2];
        v27 = 0xAAAAAAAAAAAAAAABLL * (v11 - v26);
        v28 = v27 + 1;
        if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_121:
          abort();
        v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v26) >> 3);
        if (2 * v29 > v28)
          v28 = 2 * v29;
        if (v29 >= 0x555555555555555)
          v30 = 0xAAAAAAAAAAAAAAALL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 4), v30);
          v26 = (uint64_t *)a1[2];
          v11 = (uint64_t *)a1[3];
        }
        else
        {
          v31 = 0;
        }
        v65 = &v31[24 * v27];
        v66 = &v31[24 * v30];
        *(_QWORD *)v65 = 3;
        *((_QWORD *)v65 + 1) = a3;
        *((_QWORD *)v65 + 2) = a4;
        v19 = v65 + 24;
        if (v11 != v26)
        {
          do
          {
            v67 = *(_OWORD *)(v11 - 3);
            *((_QWORD *)v65 - 1) = *(v11 - 1);
            *(_OWORD *)(v65 - 24) = v67;
            v65 -= 24;
            v11 -= 3;
          }
          while (v11 != v26);
LABEL_117:
          v26 = (uint64_t *)a1[2];
        }
LABEL_118:
        a1[2] = v65;
        a1[3] = v19;
        a1[4] = v66;
        if (v26)
          operator delete(v26);
        goto LABEL_120;
      }
      v12 = 3;
LABEL_18:
      *v11 = v12;
      v11[1] = a3;
      v11[2] = a4;
      v19 = v11 + 3;
LABEL_120:
      a1[3] = v19;
      return;
    case 6:
      v16 = a1[4];
      v11 = (uint64_t *)a1[3];
      if ((unint64_t)v11 < v16)
      {
        v12 = 4;
        goto LABEL_18;
      }
      v26 = (uint64_t *)a1[2];
      v47 = 0xAAAAAAAAAAAAAAABLL * (v11 - v26);
      v48 = v47 + 1;
      if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_121;
      v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)v26) >> 3);
      if (2 * v49 > v48)
        v48 = 2 * v49;
      if (v49 >= 0x555555555555555)
        v50 = 0xAAAAAAAAAAAAAAALL;
      else
        v50 = v48;
      if (v50)
      {
        v51 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 4), v50);
        v26 = (uint64_t *)a1[2];
        v11 = (uint64_t *)a1[3];
      }
      else
      {
        v51 = 0;
      }
      v65 = &v51[24 * v47];
      v66 = &v51[24 * v50];
      *(_QWORD *)v65 = 4;
      *((_QWORD *)v65 + 1) = a3;
      *((_QWORD *)v65 + 2) = a4;
      v19 = v65 + 24;
      if (v11 == v26)
        goto LABEL_118;
      do
      {
        v71 = *(_OWORD *)(v11 - 3);
        *((_QWORD *)v65 - 1) = *(v11 - 1);
        *(_OWORD *)(v65 - 24) = v71;
        v65 -= 24;
        v11 -= 3;
      }
      while (v11 != v26);
      goto LABEL_117;
    case 7:
    case 8:
      v13 = a1[4];
      v11 = (uint64_t *)a1[3];
      if ((unint64_t)v11 < v13)
      {
        v12 = 5;
        goto LABEL_18;
      }
      v26 = (uint64_t *)a1[2];
      v32 = 0xAAAAAAAAAAAAAAABLL * (v11 - v26);
      v33 = v32 + 1;
      if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_121;
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v26) >> 3);
      if (2 * v34 > v33)
        v33 = 2 * v34;
      if (v34 >= 0x555555555555555)
        v35 = 0xAAAAAAAAAAAAAAALL;
      else
        v35 = v33;
      if (v35)
      {
        v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 4), v35);
        v26 = (uint64_t *)a1[2];
        v11 = (uint64_t *)a1[3];
      }
      else
      {
        v36 = 0;
      }
      v65 = &v36[24 * v32];
      v66 = &v36[24 * v35];
      *(_QWORD *)v65 = 5;
      *((_QWORD *)v65 + 1) = a3;
      *((_QWORD *)v65 + 2) = a4;
      v19 = v65 + 24;
      if (v11 == v26)
        goto LABEL_118;
      do
      {
        v68 = *(_OWORD *)(v11 - 3);
        *((_QWORD *)v65 - 1) = *(v11 - 1);
        *(_OWORD *)(v65 - 24) = v68;
        v65 -= 24;
        v11 -= 3;
      }
      while (v11 != v26);
      goto LABEL_117;
    case 9:
      v17 = a1[4];
      v11 = (uint64_t *)a1[3];
      if ((unint64_t)v11 < v17)
      {
        v12 = 6;
        goto LABEL_18;
      }
      v26 = (uint64_t *)a1[2];
      v52 = 0xAAAAAAAAAAAAAAABLL * (v11 - v26);
      v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_121;
      v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v26) >> 3);
      if (2 * v54 > v53)
        v53 = 2 * v54;
      if (v54 >= 0x555555555555555)
        v55 = 0xAAAAAAAAAAAAAAALL;
      else
        v55 = v53;
      if (v55)
      {
        v56 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 4), v55);
        v26 = (uint64_t *)a1[2];
        v11 = (uint64_t *)a1[3];
      }
      else
      {
        v56 = 0;
      }
      v65 = &v56[24 * v52];
      v66 = &v56[24 * v55];
      *(_QWORD *)v65 = 6;
      *((_QWORD *)v65 + 1) = a3;
      *((_QWORD *)v65 + 2) = a4;
      v19 = v65 + 24;
      if (v11 == v26)
        goto LABEL_118;
      do
      {
        v72 = *(_OWORD *)(v11 - 3);
        *((_QWORD *)v65 - 1) = *(v11 - 1);
        *(_OWORD *)(v65 - 24) = v72;
        v65 -= 24;
        v11 -= 3;
      }
      while (v11 != v26);
      goto LABEL_117;
    case 10:
      v18 = a1[4];
      v11 = (uint64_t *)a1[3];
      if ((unint64_t)v11 < v18)
      {
        v12 = 7;
        goto LABEL_18;
      }
      v26 = (uint64_t *)a1[2];
      v57 = 0xAAAAAAAAAAAAAAABLL * (v11 - v26);
      v58 = v57 + 1;
      if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_121;
      v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v26) >> 3);
      if (2 * v59 > v58)
        v58 = 2 * v59;
      if (v59 >= 0x555555555555555)
        v60 = 0xAAAAAAAAAAAAAAALL;
      else
        v60 = v58;
      if (v60)
      {
        v61 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 4), v60);
        v26 = (uint64_t *)a1[2];
        v11 = (uint64_t *)a1[3];
      }
      else
      {
        v61 = 0;
      }
      v65 = &v61[24 * v57];
      v66 = &v61[24 * v60];
      *(_QWORD *)v65 = 7;
      *((_QWORD *)v65 + 1) = a3;
      *((_QWORD *)v65 + 2) = a4;
      v19 = v65 + 24;
      if (v11 == v26)
        goto LABEL_118;
      do
      {
        v73 = *(_OWORD *)(v11 - 3);
        *((_QWORD *)v65 - 1) = *(v11 - 1);
        *(_OWORD *)(v65 - 24) = v73;
        v65 -= 24;
        v11 -= 3;
      }
      while (v11 != v26);
      goto LABEL_117;
    default:
      goto LABEL_121;
  }
}

void CI::StitchableFunctionDAGDescriptor::print(id *this, __sFILE *a2)
{
  uint64_t v4;
  unint64_t i;
  void *v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  const char *v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28[2];
  uint64_t *v29;
  _BYTE v30[128];
  uint64_t v31;

  v4 = 0;
  v31 = *MEMORY[0x1E0C80C00];
  v28[0] = 0;
  v28[1] = 0;
  v27 = (uint64_t *)v28;
  while (v4 < (int)objc_msgSend(this[9], "count"))
  {
    v26 = objc_msgSend(this[9], "objectAtIndexedSubscript:", v4);
    v29 = &v26;
    *((_DWORD *)std::__tree<std::__value_type<CI::ImageDigest,int>,std::__map_value_compare<CI::ImageDigest,std::__value_type<CI::ImageDigest,int>,std::less<CI::ImageDigest>,true>,std::allocator<std::__value_type<CI::ImageDigest,int>>>::__emplace_unique_key_args<CI::ImageDigest,std::piecewise_construct_t const&,std::tuple<CI::ImageDigest const&>,std::tuple<>>(&v27, (unint64_t *)&v26, (uint64_t)&std::piecewise_construct, &v29)+ 10) = v4++;
  }
  fwrite("// Stitched DAG Functions\n", 0x1AuLL, 1uLL, a2);
  for (i = 0; i < objc_msgSend(this[9], "count"); i = v21 + 1)
  {
    fprintf(a2, "#%zu = ", i);
    v21 = i;
    v6 = (void *)objc_msgSend(this[9], "objectAtIndexedSubscript:", i);
    v7 = 0;
    v8 = 1;
    while (v7 < objc_msgSend((id)objc_msgSend(v6, "arguments"), "count"))
    {
      objc_msgSend((id)objc_msgSend(v6, "arguments"), "objectAtIndexedSubscript:", v7);
      v8 &= CI::StitchableFunctionDAGDescriptor::get_argument_type() == 7;
      ++v7;
    }
    fputs((const char *)objc_msgSend((id)objc_msgSend(v6, "name"), "UTF8String"), a2);
    if (objc_msgSend((id)objc_msgSend(v6, "arguments"), "count"))
    {
      v9 = 0;
      if ((v8 & 1) != 0)
      {
        while (v9 < objc_msgSend((id)objc_msgSend(v6, "arguments"), "count"))
        {
          if (v9)
            v10 = 44;
          else
            v10 = 40;
          v26 = objc_msgSend((id)objc_msgSend(v6, "arguments"), "objectAtIndexedSubscript:", v9);
          v29 = &v26;
          v11 = std::__tree<std::__value_type<CI::ImageDigest,int>,std::__map_value_compare<CI::ImageDigest,std::__value_type<CI::ImageDigest,int>,std::less<CI::ImageDigest>,true>,std::allocator<std::__value_type<CI::ImageDigest,int>>>::__emplace_unique_key_args<CI::ImageDigest,std::piecewise_construct_t const&,std::tuple<CI::ImageDigest const&>,std::tuple<>>(&v27, (unint64_t *)&v26, (uint64_t)&std::piecewise_construct, &v29);
          fprintf(a2, "%c #%zu", v10, *((int *)v11 + 10));
          ++v9;
        }
      }
      else
      {
        while (v9 < objc_msgSend((id)objc_msgSend(v6, "arguments"), "count"))
        {
          if (v9)
            v12 = 44;
          else
            v12 = 40;
          fprintf(a2, "%c ", v12);
          objc_msgSend((id)objc_msgSend(v6, "arguments"), "objectAtIndexedSubscript:", v9);
          switch(CI::StitchableFunctionDAGDescriptor::get_argument_type())
          {
            case 0u:
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "arguments"), "objectAtIndexedSubscript:", v9), "bindIndex");
              fprintf(a2, "Texture%zu");
              break;
            case 3u:
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "arguments"), "objectAtIndexedSubscript:", v9), "bindIndex");
              fprintf(a2, "Sampler%zu");
              break;
            case 4u:
              v14 = (void *)objc_msgSend((id)objc_msgSend(v6, "arguments"), "objectAtIndexedSubscript:", v9);
              objc_msgSend(v14, "bindIndex");
              objc_msgSend(v14, "byteOffset");
              fprintf(a2, "Buffer%zu+%zu");
              break;
            case 7u:
              v26 = objc_msgSend((id)objc_msgSend(v6, "arguments"), "objectAtIndexedSubscript:", v9);
              v29 = &v26;
              std::__tree<std::__value_type<CI::ImageDigest,int>,std::__map_value_compare<CI::ImageDigest,std::__value_type<CI::ImageDigest,int>,std::less<CI::ImageDigest>,true>,std::allocator<std::__value_type<CI::ImageDigest,int>>>::__emplace_unique_key_args<CI::ImageDigest,std::piecewise_construct_t const&,std::tuple<CI::ImageDigest const&>,std::tuple<>>(&v27, (unint64_t *)&v26, (uint64_t)&std::piecewise_construct, &v29);
              fprintf(a2, "#%zu");
              break;
            default:
              fputs(v13, a2);
              break;
          }
          ++v9;
        }
      }
      v15 = ")\n";
      v16 = 2;
    }
    else
    {
      v15 = "()\n";
      v16 = 3;
    }
    fwrite(v15, v16, 1uLL, a2);
  }
  if (this[2])
  {
    v17 = (void *)objc_msgSend(this[2], "performSelector:", NSSelectorFromString(CFSTR("newNamedConstantArray")));
    if (objc_msgSend(v17, "count"))
    {
      fputc(10, a2);
      fwrite("// Function Constants\n", 0x16uLL, 1uLL, a2);
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
      if (v18)
      {
        v19 = *(_QWORD *)v23;
        do
        {
          for (j = 0; j != v18; ++j)
          {
            if (*(_QWORD *)v23 != v19)
              objc_enumerationMutation(v17);
            fprintf(a2, "%s\n", (const char *)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * j), "description"), "UTF8String"));
          }
          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
        }
        while (v18);
      }
    }

  }
  fputc(10, a2);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&v27, v28[0]);
}

void sub_192413580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,_QWORD *a23)
{
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

uint64_t CI::StitchableFunctionDAGDescriptor::get_argument_type()
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 9;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 10;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 7;
  else
    return 11;
}

void CI::StitchableFunctionDAGDescriptor::ArgumentInfo::add(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;

  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      v8 = (void *)objc_opt_new();
      v11 = v8;
      goto LABEL_5;
    case 4:
    case 5:
      v11 = (id)objc_opt_new();
      objc_msgSend(v11, "setByteOffset:", a4);
      objc_msgSend(v11, "setDereference:", a2 == 4);
      v8 = v11;
LABEL_5:
      objc_msgSend(v8, "setBindIndex:", a3);
      v9 = *(void **)(a1 + 16);
      v10 = (uint64_t)v11;
      goto LABEL_7;
    case 6:
    case 9:
    case 10:
      v10 = objc_opt_new();
      v11 = (id)v10;
      v9 = *(void **)(a1 + 16);
LABEL_7:
      objc_msgSend(v9, "addObject:", v10);

      break;
    case 7:
    case 8:
      objc_msgSend(*(id *)(a1 + 16), "addObject:", objc_msgSend(*(id *)(a1 + 24), "objectAtIndexedSubscript:", *(int *)(**(_QWORD **)(a1 + 32) + 4 * a3)));
      break;
    default:
      abort();
  }
}

_QWORD *CI::MetalDAG::MetalDAG(uint64_t a1, const char *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;

  LODWORD(v16) = 0;
  result = (_QWORD *)CI::MetalMainProgram::MetalMainProgram(a1, a3, a2, 0, a5, 0, a6, a7, v16, a8);
  result[22] = off_1E2EB7710;
  do
    v11 = __ldaxr(&dword_1ECF873D0[10]);
  while (__stlxr(v11 + 1, &dword_1ECF873D0[10]));
  *result = &off_1E2EBF578;
  result[12] = &unk_1E2EBF5E0;
  v12 = *a4;
  v13 = a4[1];
  result[22] = &unk_1E2EBF608;
  result[23] = v12;
  result[24] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v12 = result[23];
  }
  *(_QWORD *)(v12 + 32) = result[15];
  result[25] = *(_QWORD *)(a3 + 1944);
  return result;
}

void CI::MetalDAG::~MetalDAG(CI::MetalDAG *this)
{
  NSObject *v2;
  unsigned int v3;
  _QWORD block[5];

  *(_QWORD *)this = &off_1E2EBF578;
  *((_QWORD *)this + 12) = &unk_1E2EBF5E0;
  *((_QWORD *)this + 22) = &unk_1E2EBF608;
  v2 = *((_QWORD *)this + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN2CI8MetalDAGD2Ev_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v2, block);
  std::shared_ptr<CI::StitchableFunctionDAGDescriptor>::~shared_ptr[abi:nn180100]((uint64_t)this + 184);
  *((_QWORD *)this + 22) = off_1E2EB7710;
  do
    v3 = __ldaxr(&dword_1ECF873D0[10]);
  while (__stlxr(v3 - 1, &dword_1ECF873D0[10]));
  CI::MetalMainProgram::~MetalMainProgram(this);
}

{
  CI::MetalDAG::~MetalDAG(this);
  JUMPOUT(0x194025AACLL);
}

void ___ZN2CI8MetalDAGD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(const void **)(v1 + 160);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(v1 + 160) = 0;
}

void `non-virtual thunk to'CI::MetalDAG::~MetalDAG(CI::MetalDAG *this)
{
  CI::MetalDAG::~MetalDAG((CI::MetalDAG *)((char *)this - 96));
}

{
  CI::MetalDAG::~MetalDAG((CI::MetalDAG *)((char *)this - 176));
}

{
  CI::MetalDAG::~MetalDAG((CI::MetalDAG *)((char *)this - 96));
  JUMPOUT(0x194025AACLL);
}

{
  CI::MetalDAG::~MetalDAG((CI::MetalDAG *)((char *)this - 176));
  JUMPOUT(0x194025AACLL);
}

void *CI::LegacyDAGDescriptor::compile(uint64_t a1, uint64_t a2, char *a3, int a4, void *a5, uint64_t a6)
{
  NSObject **v11;
  void *v12;
  void *v13;

  v11 = *(NSObject ***)(a1 + 32);
  if (v11)
  {
    v12 = (void *)CI::KernelArchive::find(v11, a6, a3);
    *(_BYTE *)(a1 + 24) = v12 != 0;
    if (v12)
      return (void *)CreateComputePipelineState(a5, v12, v13, 0);
  }
  else
  {
    *(_BYTE *)(a1 + 24) = 0;
  }
  return CIMetalComputePipelineStateCreateFromDAG(a2, (uint64_t)a3, a5, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), a6);
}

void *CI::LegacyDAGDescriptor::compile(uint64_t a1, uint64_t a2, char *a3, int a4, void *a5, uint64_t a6, unsigned int a7)
{
  NSObject **v13;
  uint64_t v14;
  uint64_t v15;

  v13 = *(NSObject ***)(a1 + 32);
  if (v13)
  {
    v14 = CI::KernelArchive::find(v13, a6, a3);
    *(_BYTE *)(a1 + 24) = v14 != 0;
    if (v14)
      return (void *)CreateRenderPipelineState(a5, v14, v15, a7, 0);
  }
  else
  {
    *(_BYTE *)(a1 + 24) = 0;
  }
  return CIMetalRenderPipelineStateCreateFromDAG(a2, (uint64_t)a3, a5, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), a6, a7);
}

uint64_t CI::LegacyDAGDescriptor::print(id *this, __sFILE *__stream)
{
  unint64_t v4;
  const char *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  MTLDataType v9;
  const char *data_type_name;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  MTLDataType v20;
  const char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  id *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  fwrite("// DAG Functions\n", 0x11uLL, 1uLL, __stream);
  if (objc_msgSend(this[11], "count"))
  {
    v4 = 0;
    v5 = "%s ";
    v28 = this;
    do
    {
      fprintf(__stream, "#%zu: ", v4);
      v6 = (void *)objc_msgSend(this[11], "objectAtIndexedSubscript:", v4);
      v7 = (void *)objc_msgSend(v6, "returnType");
      v8 = objc_msgSend(v7, "dataType");
      data_type_name = CI::get_data_type_name(v8, v9);
      v11 = *(unsigned __int8 *)data_type_name;
      if (v11 == 78)
      {
        if (data_type_name[1] != 111)
          goto LABEL_9;
        fwrite("void ", 5uLL, 1uLL, __stream);
      }
      else
      {
        if (v11 != 117 || data_type_name[1] != 110)
        {
LABEL_9:
          fprintf(__stream, v5, data_type_name);
          goto LABEL_10;
        }
        objc_msgSend(v7, "dataType");
        fprintf(__stream, "type%lu ");
      }
LABEL_10:
      v12 = v5;
      fprintf(__stream, v5, objc_msgSend((id)objc_msgSend(v6, "name"), "UTF8String"));
      v13 = (uint64_t)this[5] + 24 * v4;
      v15 = *(_QWORD *)(v13 + 8);
      v14 = *(_QWORD *)(v13 + 16);
      fputc(40, __stream);
      if (v15)
      {
        v16 = 0;
        v17 = v14 + 8;
        do
        {
          v18 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "arguments"), "objectAtIndexedSubscript:", v16), "dataTypeDescription");
          v19 = objc_msgSend(v18, "dataType");
          v21 = CI::get_data_type_name(v19, v20);
          if (*v21 == 117 && v21[1] == 110)
          {
            objc_msgSend(v18, "dataType");
            fprintf(__stream, "type%lu ");
          }
          else
          {
            fprintf(__stream, v12, v21);
          }
          switch(*(_QWORD *)(v17 - 8))
          {
            case 3:
              fprintf(__stream, "Buffer[%zu]+%zu");
              break;
            case 4:
              fputs("ThreadPositionInGrid", __stream);
              break;
            case 5:
              fprintf(__stream, "#%zu");
              break;
            default:
              fprintf(__stream, "%s[%zu]");
              break;
          }
          if (v15 - 1 != v16)
            fwrite(", ", 2uLL, 1uLL, __stream);
          ++v16;
          v17 += 24;
        }
        while (v15 != v16);
      }
      fwrite(")\n", 2uLL, 1uLL, __stream);
      ++v4;
      this = v28;
      v5 = v12;
    }
    while (v4 < objc_msgSend(v28[11], "count"));
  }
  if (this[2])
  {
    v22 = (void *)objc_msgSend(this[2], "performSelector:", NSSelectorFromString(CFSTR("newNamedConstantArray")));
    if (objc_msgSend(v22, "count"))
    {
      fputc(10, __stream);
      fwrite("// Function Constants\n", 0x16uLL, 1uLL, __stream);
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      if (v23)
      {
        v24 = v23;
        v25 = *(_QWORD *)v30;
        do
        {
          for (i = 0; i != v24; ++i)
          {
            if (*(_QWORD *)v30 != v25)
              objc_enumerationMutation(v22);
            fprintf(__stream, "%s\n", (const char *)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1) + 8 * i), "description"), "UTF8String"));
          }
          v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
        }
        while (v24);
      }
    }

  }
  return fputc(10, __stream);
}

const char *CI::get_data_type_name(unint64_t this, MTLDataType a2)
{
  if (this > 0x3C)
    return "unknown";
  else
    return off_1E2EC7950[this];
}

uint64_t CI::MetalDAG::print_program(CI::MetalDAG *this, __sFILE *a2)
{
  return (*(uint64_t (**)(_QWORD, __sFILE *))(**((_QWORD **)this + 23) + 56))(*((_QWORD *)this + 23), a2);
}

void CI::MetalDAG::compile(uint64_t a1, int a2)
{
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  std::chrono::steady_clock::time_point v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15[64];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 128));
  if (CI_VERBOSE_SIGNPOSTS())
  {
    v4 = ci_signpost_log_compile();
    v5 = a2 | ((unint64_t)*(unsigned int *)(a1 + 40) << 32);
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v6 = v4;
      if (os_signpost_enabled(v4))
      {
        *(_WORD *)v15 = 0;
        _os_signpost_emit_with_name_impl(&dword_1921E4000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "compile_metal_dag", (const char *)&unk_192520C83, v15, 2u);
      }
    }
  }
  TimerBase::TimerBase((uint64_t)v15, *(unsigned int *)(a1 + 40), a2, (uint64_t)"compile_metal_dag", 26);
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v8 = *(_QWORD *)(a1 + 16);
  if (CI_HARVEST_BIN_ARCHIVE_PROGRAM_TYPE() == 1 && !*(_BYTE *)(*(_QWORD *)(a1 + 184) + 8)
    || CI_HARVEST_BIN_ARCHIVE_PROGRAM_TYPE() == 2 && *(_BYTE *)(*(_QWORD *)(a1 + 184) + 8)
    || CI_HARVEST_BIN_ARCHIVE_PROGRAM_TYPE() == 3 && !*(_BYTE *)(*(_QWORD *)(a1 + 184) + 9)
    || CI_HARVEST_BIN_ARCHIVE_PROGRAM_TYPE() == 4 && *(_BYTE *)(*(_QWORD *)(a1 + 184) + 9))
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(a1 + 184);
  v10 = *(_QWORD *)(a1 + 136);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 200);
  v13 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(a1 + 144))
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 72))(v9, v10, v11, v12, v13, v8, *(unsigned int *)(a1 + 148));
  else
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, v10, v11, v12, v13, v8);
  *(_QWORD *)(a1 + 160) = v14;
  *(double *)(a1 + 24) = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v7.__d_.__rep_) / 1000000000.0;
  CI::MetalDAG::compile(CI::NodeIndex)::SignpostTimer::~SignpostTimer((TimerBase *)v15);
}

void sub_1924141DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CI::MetalDAG::compile(CI::NodeIndex)::SignpostTimer::~SignpostTimer((TimerBase *)&a9);
  _Unwind_Resume(a1);
}

void CI::MetalDAG::compile(CI::NodeIndex)::SignpostTimer::~SignpostTimer(TimerBase *a1)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  uint8_t v5[16];

  if (CI_VERBOSE_SIGNPOSTS())
  {
    v2 = ci_signpost_log_compile();
    v3 = *((_QWORD *)a1 + 1);
    if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v4 = v2;
      if (os_signpost_enabled(v2))
      {
        *(_WORD *)v5 = 0;
        _os_signpost_emit_with_name_impl(&dword_1921E4000, v4, OS_SIGNPOST_INTERVAL_END, v3, "compile_metal_dag", (const char *)&unk_192520C83, v5, 2u);
      }
    }
  }
  TimerBase::~TimerBase(a1);
}

void sub_192414280(_Unwind_Exception *a1)
{
  TimerBase *v1;

  TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CI::MetalDAGHelper::get_precompiled_kernel(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;

  v3 = *(_DWORD *)(a1 + 32);
  if (v3 == 1)
    return CI::PrecompiledKernels::new_function(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 1928), a2, a3);
  if (v3 == 2)
    return CI::PrecompiledKernels::new_specialzied_function(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 1936), a2, a3);
  return 0;
}

uint64_t CI::PrecompiledKernels::new_specialzied_function(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  dispatch_sync(*(dispatch_queue_t *)(a1 + 56), &__block_literal_global_148);
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v6 = *(void **)(a1 + 8 * a3 + 24);
  result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (result)
  {
    v8 = result;
    v9 = *(_QWORD *)v12;
LABEL_3:
    v10 = 0;
    while (1)
    {
      if (*(_QWORD *)v12 != v9)
        objc_enumerationMutation(v6);
      result = objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v10), "newFunctionWithName:constantValues:error:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2), *(_QWORD *)(a1 + 16), 0);
      if (result)
        break;
      if (v8 == ++v10)
      {
        result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        v8 = result;
        if (result)
          goto LABEL_3;
        return result;
      }
    }
  }
  return result;
}

uint64_t CI::PrecompiledKernels::new_function(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  dispatch_sync(*(dispatch_queue_t *)(a1 + 56), &__block_literal_global_149_0);
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v6 = *(void **)(a1 + 8 * a3 + 24);
  result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (result)
  {
    v8 = result;
    v9 = *(_QWORD *)v12;
LABEL_3:
    v10 = 0;
    while (1)
    {
      if (*(_QWORD *)v12 != v9)
        objc_enumerationMutation(v6);
      result = objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v10), "newExternFunctionWithName:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2));
      if (result)
        break;
      if (v8 == ++v10)
      {
        result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        v8 = result;
        if (result)
          goto LABEL_3;
        return result;
      }
    }
  }
  return result;
}

uint64_t CI::MetalDAGHelper::new_function_with_name(CI::MetalDAGHelper *this, const char *a2, unsigned __int8 *a3)
{
  uint64_t result;

  if (!*(_BYTE *)(*((_QWORD *)this + 3) + 43))
    return CI::MetalDAGHelper::get_precompiled_kernel((uint64_t)this, (uint64_t)a2, 0);
  result = CI::MetalDAGHelper::get_precompiled_kernel((uint64_t)this, (uint64_t)a2, 1u);
  if (a3)
  {
    if (result)
      *a3 |= 7u;
  }
  return result;
}

void CI::MetalDAGHelper::add_function_with_name(CI::MetalDAGHelper *this, const char *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  id v5;

  if (*((_QWORD *)this + 8) && *((_QWORD *)this + 9))
  {
    v4 = CI::MetalDAGHelper::new_function_with_name(this, a2, a3);
    if (v4)
    {
      v5 = (id)v4;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));

    }
  }
}

uint64_t CI::MetalDAGHelper::add_function_for_kernel(CI::MetalDAGHelper *this, const CI::Kernel *a2)
{
  uint64_t v4;
  const CI::MetalKernel *v5;
  void *unique_function;
  void *v7;
  unsigned __int8 v9;

  if (!*((_QWORD *)this + 8) || !*((_QWORD *)this + 9))
    return 0;
  v4 = *((unsigned __int8 *)a2 + 161);
  v9 = *((_BYTE *)a2 + 161);
  if (*((_DWORD *)a2 + 4) == 3)
  {
    v4 = v4 | 2;
    v9 = v4;
  }
  v5 = (const CI::MetalKernel *)(*(uint64_t (**)(const CI::Kernel *))(*(_QWORD *)a2 + 72))(a2);
  if (v5 && (unique_function = CI::MetalDAGHelper::get_unique_function(this, v5)) != 0)
  {
    v7 = unique_function;
    (*(void (**)(_QWORD, void *))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1), unique_function);

  }
  else
  {
    CI::MetalDAGHelper::add_function_with_name(this, *((const char **)a2 + 3), &v9);
    return v9;
  }
  return v4;
}

void *CI::MetalDAGHelper::get_unique_function(CI::MetalDAGHelper *this, const CI::MetalKernel *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v11;

  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 1952);
  if (v4)
    v5 = *(_QWORD *)(v4 + 80);
  else
    v5 = 0;
  v6 = (void *)objc_msgSend(*((id *)this + 25), "objectForKey:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *((_QWORD *)a2 + 1)));
  v11 = (id)objc_opt_new();
  objc_msgSend(v11, "setBinaryArchives:", v5);
  if (v6)
  {
    if (objc_msgSend(v6, "isEqualToNumber:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 5))))
    {
      v7 = (void *)CI::MetalKernel::function((uint64_t)a2, &v11);
    }
    else
    {
      v8 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *((_QWORD *)a2 + 1)), "stringByAppendingFormat:", CFSTR("_%d"), 0);
      v9 = 1;
      while (objc_msgSend(*((id *)this + 25), "objectForKey:", v8))
      {
        v8 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *((_QWORD *)a2 + 1)), "stringByAppendingFormat:", CFSTR("_%d"), v9);
        v9 = (v9 + 1);
      }
      objc_msgSend(v11, "setSpecializedName:", v8);
      v7 = (void *)CI::MetalKernel::function((uint64_t)a2, &v11);
      objc_msgSend(*((id *)this + 25), "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", CI::mtl_func_hash(v7)), objc_msgSend(v7, "name"));
    }
  }
  else
  {
    v7 = (void *)CI::MetalKernel::function((uint64_t)a2, &v11);
    objc_msgSend(*((id *)this + 25), "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", CI::mtl_func_hash(v7)), objc_msgSend(v7, "name"));
  }

  return v7;
}

void sub_19241487C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

unint64_t CI::MetalDAGHelper::add_argument_type_and_offset(uint64_t a1, int a2, _QWORD *a3)
{
  unint64_t next_offset;
  const __CFData *Length;
  void **v8;

  if (a3 && (*(unsigned int (**)(_QWORD *))(*a3 + 16))(a3) == 57)
  {
    next_offset = (*(_QWORD *)(a1 + 96) + 15) & 0xFFFFFFFFFFFFFFF0;
    Length = (const __CFData *)a3[3];
    if (Length)
      Length = (const __CFData *)CFDataGetLength(Length);
    *(_QWORD *)(a1 + 96) = (char *)Length + next_offset;
  }
  else
  {
    next_offset = (int)CI::MetalMainProgram::get_next_offset(a2, (unint64_t *)(a1 + 96));
  }
  v8 = *(void ***)(a1 + 64);
  if (v8 && *(_QWORD *)(a1 + 72))
  {
    CI::SerialValArray<int>::append(v8, a2);
    CI::SerialValArray<int>::append(*(void ***)(a1 + 72), next_offset);
  }
  return next_offset;
}

uint64_t CI::MetalDAGHelper::add_arguments_for_image_node@<X0>(uint64_t a1@<X0>, CI::Node *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  CI::TextureSampler *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CI::Vector *v21;
  uint64_t result;
  char v23;
  __n64 v24;

  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12 + 1;
  *(_QWORD *)a6 = v12;
  v13 = (CI::TextureSampler *)operator new();
  CI::TextureSampler::TextureSampler(v13, a2, a3);
  CI::MetalDAGHelper::add_argument_type_and_offset(a1, a4, 0);
  CI::SerialObjectPtrArray::append(a5, v13);
  if (a4 != 2)
    goto LABEL_8;
  v14 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14 + 1;
  *(_QWORD *)(a6 + 8) = v14;
  *(_QWORD *)(a6 + 16) = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 40, 0);
  CI::SerialObjectPtrArray::append(a5, v13);
  v15 = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)a2 + 16))(a2);
  v16 = *(_QWORD *)a2;
  if (v15 == 46)
  {
    v17 = (*(uint64_t (**)(CI::Node *))(v16 + 208))(a2);
    CI::SurfaceNode::chroma_scale_fix((IOSurfaceRef *)a2);
  }
  else
  {
    if ((*(unsigned int (**)(CI::Node *))(v16 + 16))(a2) != 44)
      goto LABEL_8;
    v17 = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)a2 + 208))(a2);
    CI::ProviderNode::chroma_scale_fix(a2);
  }
  if (v17 >= 2)
  {
    v24.n64_u64[0] = v18;
    CI::MetalDAGHelper::add_argument_type_and_offset(a1, 3, 0);
    CI::SerialObjectPtrArray::append(a5, v13);
    v19 = *(_QWORD *)(a1 + 80);
    v20 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = v19 + 1;
    *(_QWORD *)(a1 + 88) = v20 + 1;
    *(_QWORD *)(a6 + 24) = v19;
    *(_QWORD *)(a6 + 32) = v20;
    *(_QWORD *)(a6 + 40) = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 6, 0);
    v21 = (CI::Vector *)operator new();
    CI::Vector::Vector(v21, v24, v24.n64_f32[1]);
    CI::SerialObjectPtrArray::append(a5, v21);
    CI::Object::unref(v21);
  }
LABEL_8:
  CI::Object::unref(v13);
  result = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)a2 + 16))(a2);
  if ((_DWORD)result == 52)
    v23 = *((_BYTE *)a2 + 144) & 1;
  else
    v23 = 0;
  *(_BYTE *)(a6 + 48) = v23;
  return result;
}

void sub_192414B40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194025AAC](v1, 0x1081C40C4ADF1D2);
  _Unwind_Resume(a1);
}

uint64_t CI::MetalDAGHelper::add_early_out_function_info(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  void (***v4)(_QWORD, uint64_t, _QWORD, uint64_t);

  if (*(_QWORD *)(this + 64))
  {
    v2 = this;
    if (*(_QWORD *)(this + 72))
    {
      v4 = (void (***)(_QWORD, uint64_t, _QWORD, uint64_t))(***(uint64_t (****)(_QWORD, uint64_t))(this + 8))(*(_QWORD *)(this + 8), 2);
      (**v4)(v4, 6, 0, 0);
      (**v4)(v4, 4, 0, a2);
      return (*(uint64_t (**)(_QWORD, void (***)(_QWORD, uint64_t, _QWORD, uint64_t)))(**(_QWORD **)(v2 + 8) + 48))(*(_QWORD *)(v2 + 8), v4);
    }
  }
  return this;
}

uint64_t CI::MetalDAGHelper::add_init_destcoord_function_info(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  void (***v4)(_QWORD, uint64_t, _QWORD, uint64_t);

  if (*(_QWORD *)(this + 64))
  {
    v2 = this;
    if (*(_QWORD *)(this + 72))
    {
      v4 = (void (***)(_QWORD, uint64_t, _QWORD, uint64_t))(***(uint64_t (****)(_QWORD, uint64_t))(this + 8))(*(_QWORD *)(this + 8), 3);
      (**v4)(v4, 6, 0, 0);
      (**v4)(v4, 4, 0, 0);
      (**v4)(v4, 4, 0, a2);
      return (*(uint64_t (**)(_QWORD, void (***)(_QWORD, uint64_t, _QWORD, uint64_t)))(**(_QWORD **)(v2 + 8) + 40))(*(_QWORD *)(v2 + 8), v4);
    }
  }
  return this;
}

uint64_t CI::MetalDAGHelper::add_read_pixel_function_info(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void (***v10)(_QWORD, uint64_t, uint64_t, uint64_t);

  if (*(_QWORD *)(this + 64))
  {
    v5 = this;
    if (*(_QWORD *)(this + 72))
    {
      v10 = (void (***)(_QWORD, uint64_t, uint64_t, uint64_t))(***(uint64_t (****)(_QWORD, uint64_t))(this + 8))(*(_QWORD *)(this + 8), 4);
      (**v10)(v10, 0, a2, 0);
      (**v10)(v10, 3, a3, 0);
      (**v10)(v10, 7, a4, 0);
      (**v10)(v10, 4, 0, a5);
      return (*(uint64_t (**)(_QWORD, void (***)(_QWORD, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(v5 + 8) + 40))(*(_QWORD *)(v5 + 8), v10);
    }
  }
  return this;
}

uint64_t CI::MetalDAGHelper::add_read_pixel_420_function_info(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void (***v16)(_QWORD, uint64_t, uint64_t, uint64_t);

  if (*(_QWORD *)(this + 64))
  {
    v8 = this;
    if (*(_QWORD *)(this + 72))
    {
      v16 = (void (***)(_QWORD, uint64_t, uint64_t, uint64_t))(***(uint64_t (****)(_QWORD, uint64_t))(this + 8))(*(_QWORD *)(this + 8), 7);
      (**v16)(v16, 0, a2, 0);
      (**v16)(v16, 3, a3, 0);
      (**v16)(v16, 7, a4, 0);
      (**v16)(v16, 4, 0, a5);
      (**v16)(v16, 0, a6, 0);
      (**v16)(v16, 3, a7, 0);
      (**v16)(v16, 4, 0, a8);
      return (*(uint64_t (**)(_QWORD, void (***)(_QWORD, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(v8 + 8) + 40))(*(_QWORD *)(v8 + 8), v16);
    }
  }
  return this;
}

uint64_t CI::MetalDAGHelper::add_colour_inout_function_info(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  void (***v4)(_QWORD, uint64_t, uint64_t, _QWORD);

  if (*(_QWORD *)(this + 64))
  {
    v2 = this;
    if (*(_QWORD *)(this + 72))
    {
      v4 = (void (***)(_QWORD, uint64_t, uint64_t, _QWORD))(***(uint64_t (****)(_QWORD, uint64_t))(this + 8))(*(_QWORD *)(this + 8), 1);
      (**v4)(v4, 7, a2, 0);
      return (*(uint64_t (**)(_QWORD, void (***)(_QWORD, uint64_t, uint64_t, _QWORD)))(**(_QWORD **)(v2 + 8) + 40))(*(_QWORD *)(v2 + 8), v4);
    }
  }
  return this;
}

uint64_t CI::MetalDAGHelper::add_write_pixel_function_info(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  void (***v4)(_QWORD, uint64_t, uint64_t, _QWORD);

  if (*(_QWORD *)(this + 64))
  {
    v2 = this;
    if (*(_QWORD *)(this + 72))
    {
      v4 = (void (***)(_QWORD, uint64_t, uint64_t, _QWORD))(***(uint64_t (****)(_QWORD, uint64_t))(this + 8))(*(_QWORD *)(this + 8), 4);
      (**v4)(v4, 2, 0, 0);
      (**v4)(v4, 7, a2, 0);
      (**v4)(v4, 6, 0, 0);
      (**v4)(v4, 4, 0, 0);
      return (*(uint64_t (**)(_QWORD, void (***)(_QWORD, uint64_t, uint64_t, _QWORD)))(**(_QWORD **)(v2 + 8) + 40))(*(_QWORD *)(v2 + 8), v4);
    }
  }
  return this;
}

uint64_t CI::MetalDAGHelper::add_write_block_function_info(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  void (***v4)(_QWORD, uint64_t, uint64_t, _QWORD);

  if (*(_QWORD *)(this + 64))
  {
    v2 = this;
    if (*(_QWORD *)(this + 72))
    {
      v4 = (void (***)(_QWORD, uint64_t, uint64_t, _QWORD))(***(uint64_t (****)(_QWORD, uint64_t))(this + 8))(*(_QWORD *)(this + 8), 4);
      (**v4)(v4, 10, 0, 0);
      (**v4)(v4, 7, a2, 0);
      (**v4)(v4, 9, 0, 0);
      (**v4)(v4, 4, 0, 0);
      return (*(uint64_t (**)(_QWORD, void (***)(_QWORD, uint64_t, uint64_t, _QWORD)))(**(_QWORD **)(v2 + 8) + 40))(*(_QWORD *)(v2 + 8), v4);
    }
  }
  return this;
}

uint64_t CI::MetalDAGHelper::add_group_write_function_info(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (***v8)(_QWORD, uint64_t, uint64_t, uint64_t);

  if (*(_QWORD *)(this + 64))
  {
    v4 = this;
    if (*(_QWORD *)(this + 72))
    {
      v8 = (void (***)(_QWORD, uint64_t, uint64_t, uint64_t))(***(uint64_t (****)(_QWORD, uint64_t))(this + 8))(*(_QWORD *)(this + 8), 5);
      (**v8)(v8, 2, 0, 0);
      (**v8)(v8, 7, a2, 0);
      (**v8)(v8, 7, a3, 0);
      (**v8)(v8, 4, 0, 0);
      (**v8)(v8, 4, 0, a4);
      return (*(uint64_t (**)(_QWORD, void (***)(_QWORD, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(v4 + 8) + 40))(*(_QWORD *)(v4 + 8), v8);
    }
  }
  return this;
}

uint64_t CI::MetalDAGHelper::add_function_info(uint64_t a1, uint64_t a2, CI::ColorKernelNode *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v10;
  int v11;
  void (***v12)(_QWORD, uint64_t, uint64_t, _QWORD);
  signed int v13;
  signed int v14;
  int v15;
  int v16;
  void (*v17)(_QWORD, uint64_t, uint64_t, _QWORD);
  void (***v18)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  CI::Object *argument;
  unint64_t v23;

  v10 = *((_QWORD *)a3 + 6);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) != 62)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  if (*(_BYTE *)(v10 + 12))
    v11 = CI::KernelArguments::count((CI::KernelArguments *)(v10 + 144));
  else
    v11 = *(_DWORD *)(v10 + 20);
  if (*(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 72))
    v12 = (void (***)(_QWORD, uint64_t, uint64_t, _QWORD))(***(uint64_t (****)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8), v11);
  else
    v12 = 0;
  v13 = 0;
  while (1)
  {
    v14 = *(_BYTE *)(v10 + 12) ? CI::KernelArguments::count((CI::KernelArguments *)(v10 + 144)) : *(_DWORD *)(v10 + 20);
    if (v13 >= v14)
      return (*(uint64_t (**)(_QWORD, void (***)(_QWORD, uint64_t, uint64_t, _QWORD)))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v12);
    v15 = CI::ColorKernelNode::kernel_argument_type(a3, v13);
    v16 = v15;
    switch(v15)
    {
      case 30:
        if (v12)
          (**v12)(v12, 7, a5, 0);
        goto LABEL_43;
      case 31:
      case 32:
      case 33:
      case 34:
        goto LABEL_20;
      case 35:
        if (!v12)
          goto LABEL_43;
        v17 = **v12;
        v18 = v12;
        v19 = 6;
        goto LABEL_36;
      case 36:
        if (!v12)
          goto LABEL_43;
        v17 = **v12;
        v18 = v12;
        v19 = 4;
        goto LABEL_36;
      case 37:
        v20 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
        if (v12)
          (**v12)(v12, 4, 0, v20);
        if (a4)
          CI::SerialObjectPtrArray::append(a4, *(CI::Object **)(a4 + 24));
        goto LABEL_43;
      case 38:
        if (!v12)
          goto LABEL_43;
        v17 = **v12;
        v18 = v12;
        v19 = 2;
LABEL_36:
        v21 = 0;
        goto LABEL_42;
      case 39:
        if (*(_BYTE *)(v10 + 166))
        {
          v21 = *(_QWORD *)(a1 + 80);
          *(_QWORD *)(a1 + 80) = v21 + 1;
          if (!v12)
            goto LABEL_43;
        }
        else
        {
          v21 = 0;
          if (!v12)
            goto LABEL_43;
        }
        v17 = **v12;
        v18 = v12;
        v19 = 2;
LABEL_42:
        v17(v18, v19, v21, 0);
LABEL_43:
        ++v13;
        break;
      default:
        if ((v15 - 1) >= 2 && v15 != 4)
        {
LABEL_20:
          CI::KernelArguments::is_uniform(v15);
          if ((a7 & 4) != 0 && *(_BYTE *)(v10 + 165))
          {
            if (v16 > 7)
            {
              if (v16 == 8 || v16 == 27)
                v16 = 15;
            }
            else if (v16 == 6)
            {
              v16 = 13;
            }
            else if (v16 == 7)
            {
              v16 = 14;
            }
          }
          argument = (CI::Object *)CI::ColorKernelNode::get_argument(a3, v13);
          CI::SerialObjectPtrArray::append(a4, argument);
          v23 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, v16, argument);
          if (v12)
            (**v12)(v12, 4, 0, v23);
        }
        goto LABEL_43;
    }
  }
}

uint64_t CI::MetalDAGHelper::add_function_info(uint64_t a1, CI::SerialStringArray **a2, CI::ColorKernelNode *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, unsigned __int8 a9, _QWORD *a10, char a11)
{
  const CI::Kernel *v16;
  int v17;
  uint64_t v18;
  signed int i;
  signed int v20;
  void (***v21)(_QWORD, uint64_t, _QWORD, _QWORD);
  signed int v22;
  signed int v23;
  int v24;
  int v25;
  void (***v26)(_QWORD, uint64_t, uint64_t, _QWORD);
  void (***v27)(_QWORD, uint64_t, _QWORD, unint64_t);
  unint64_t v28;
  char v29;
  uint64_t argument;
  CI::Node *v31;
  uint64_t **v32;
  void (***v33)(_QWORD, uint64_t, uint64_t, _QWORD);
  void (***v34)(_QWORD, uint64_t, _QWORD, unint64_t);
  unint64_t v35;
  char v36;
  uint64_t (*v37)(void);
  void (*v38)(_QWORD, uint64_t, uint64_t, _QWORD);
  void (***v39)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t IndexOfString;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t **v49;
  _QWORD *v50;
  unint64_t v51;
  BOOL v52;
  _QWORD *v53;
  void **v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  std::string::size_type v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;
  uint64_t v67;
  size_t size;
  std::string *v69;
  void **v70;
  std::string::size_type v71;
  std::string *v72;
  std::string::size_type v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  CI::Object *v84;
  unint64_t v85;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v93;
  _QWORD *v94;
  uint64_t **v95;
  char v96;
  char *__s2;
  void *__p[2];
  char v100;
  void *v101;
  std::string v102;
  void *v103[3];
  char v104;

  v16 = (const CI::Kernel *)*((_QWORD *)a3 + 6);
  if ((*(unsigned int (**)(const CI::Kernel *))(*(_QWORD *)v16 + 16))(v16) != 62)
    (*(void (**)(const CI::Kernel *))(*(_QWORD *)v16 + 16))(v16);
  if (*((_BYTE *)v16 + 12))
    v17 = CI::KernelArguments::count((const CI::Kernel *)((char *)v16 + 144));
  else
    v17 = *((_DWORD *)v16 + 5);
  v18 = v17;
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    for (i = 0; ; ++i)
    {
      v20 = *((_BYTE *)v16 + 12)
          ? CI::KernelArguments::count((const CI::Kernel *)((char *)v16 + 144))
          : *((_DWORD *)v16 + 5);
      if (i >= v20)
        break;
      if (CI::ColorKernelNode::kernel_argument_type(a3, i) == 31)
        v18 += 5;
    }
  }
  if (*(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 72))
    v21 = (void (***)(_QWORD, uint64_t, _QWORD, _QWORD))(***(uint64_t (****)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), v18);
  else
    v21 = 0;
  v22 = 0;
  v96 = 0;
  __s2 = a8 + 1;
  v95 = (uint64_t **)(a1 + 128);
  v93 = a6 + 1;
  v94 = (_QWORD *)(a1 + 136);
  v91 = a1 + 152;
  v89 = a6 + 2;
  v87 = (uint64_t)&a8[a6 + 3];
  v88 = a8;
  while (1)
  {
    v23 = *((_BYTE *)v16 + 12)
        ? CI::KernelArguments::count((const CI::Kernel *)((char *)v16 + 144))
        : *((_DWORD *)v16 + 5);
    if (v22 >= v23)
      break;
    v24 = CI::ColorKernelNode::kernel_argument_type(a3, v22);
    v25 = v24;
    if (v24 <= 29)
    {
      switch(v24)
      {
        case 1:
          goto LABEL_34;
        case 2:
          break;
        case 4:
LABEL_34:
          argument = CI::ColorKernelNode::get_argument(a3, v22);
          v31 = (CI::Node *)argument;
          if (v25 == 4)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)argument + 232))(argument);
            CI::Node::rois_count(v31);
            __p[0] = 0;
            __p[0] = (void *)CI::hash_image_node_id((uint64_t)v31, 0);
            v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            v32 = std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)(a1 + 176), (unint64_t *)__p, (uint64_t)&std::piecewise_construct, &v102);
            if (v21)
              (**v21)(v21, 0, v32[5], 0);
          }
          else
          {
            a8[v93] = v96 + 48;
            a8[v89] = 0;
            IndexOfString = CI::SerialStringArray::firstIndexOfString(a2[7], __s2);
            if ((_DWORD)IndexOfString != -1)
              v31 = (CI::Node *)(*((uint64_t (**)(CI::SerialStringArray **, uint64_t))*a2 + 6))(a2, IndexOfString);
            v45 = (void *)CI::hash_dag_node_id((unint64_t)v31, a7, a8);
            if ((*(unsigned int (**)(CI::Node *))(*(_QWORD *)v31 + 232))(v31))
            {
              v46 = v87;
              do
              {
                v31 = (CI::Node *)(*(uint64_t (**)(CI::Node *, _QWORD))(*(_QWORD *)v31 + 48))(v31, 0);
                *(_WORD *)(v46 - 1) = 48;
                v47 = CI::SerialStringArray::firstIndexOfString(a2[7], __s2);
                if ((_DWORD)v47 != -1)
                  v31 = (CI::Node *)(*((uint64_t (**)(CI::SerialStringArray **, uint64_t))*a2 + 6))(a2, v47);
                v45 = (void *)CI::hash_dag_node_id((unint64_t)v31, (uint64_t)v45, a8);
                ++v46;
              }
              while (((*(uint64_t (**)(CI::Node *))(*(_QWORD *)v31 + 232))(v31) & 1) != 0);
            }
            v48 = (_QWORD *)*v94;
            v49 = (uint64_t **)(a1 + 128);
            if (!*v94)
              goto LABEL_87;
            v50 = (_QWORD *)(a1 + 136);
            do
            {
              v51 = v48[4];
              v52 = v51 >= (unint64_t)v45;
              if (v51 >= (unint64_t)v45)
                v53 = v48;
              else
                v53 = v48 + 1;
              if (v52)
                v50 = v48;
              v48 = (_QWORD *)*v53;
            }
            while (*v53);
            if (v50 == v94 || (unint64_t)v45 < v50[4])
            {
LABEL_87:
              v54 = __p;
              v101 = v45;
              __p[0] = &v101;
              v55 = std::__tree<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v91, (unint64_t *)&v101, (uint64_t)&std::piecewise_construct, (_QWORD **)__p);
              v56 = v55;
              if (*((char *)v55 + 63) < 0)
                std::string::__init_copy_ctor_external(&v102, (const std::string::value_type *)v55[5], v55[6]);
              else
                v102 = *(std::string *)(v55 + 5);
              std::vector<unsigned long>::vector(v103, (uint64_t)(v56 + 8));
              v104 = *((_BYTE *)v56 + 88);
              if ((a11 & 1) != 0)
              {
                if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v102.__r_.__value_.__r.__words[2]);
                else
                  size = v102.__r_.__value_.__l.__size_;
                std::string::basic_string[abi:nn180100]((uint64_t)__p, size + 2);
                if (v100 < 0)
                  v54 = (void **)__p[0];
                if (size)
                {
                  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v69 = &v102;
                  else
                    v69 = (std::string *)v102.__r_.__value_.__r.__words[0];
                  memmove(v54, v69, size);
                }
                strcpy((char *)v54 + size, "_h");
                if (v100 >= 0)
                  v70 = __p;
                else
                  v70 = (void **)__p[0];
                CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, (const char *)v70, 0);
                if (v100 < 0)
                  operator delete(__p[0]);
                v71 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
                if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v71 = v102.__r_.__value_.__l.__size_;
                if (v71 != 14)
                  goto LABEL_158;
                v72 = &v102;
                if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v72 = (std::string *)v102.__r_.__value_.__r.__words[0];
                v73 = v72->__r_.__value_.__r.__words[0];
                v74 = *(std::string::size_type *)((char *)v72->__r_.__value_.__r.__words + 6);
                if (v73 == 0x646165725F69635FLL && v74 == 0x6C657869705F6461)
                  CI::MetalDAGHelper::add_read_pixel_function_info(a1, *(_QWORD *)v103[0], *((_QWORD *)v103[0] + 1), *((_QWORD *)v103[0] + 2), *((_QWORD *)v103[0] + 3));
                else
LABEL_158:
                  CI::MetalDAGHelper::add_read_pixel_420_function_info(a1, *(_QWORD *)v103[0], *((_QWORD *)v103[0] + 1), *((_QWORD *)v103[0] + 2), *((_QWORD *)v103[0] + 3), *((_QWORD *)v103[0] + 4), *((_QWORD *)v103[0] + 5), *((_QWORD *)v103[0] + 6));
                v76 = (*a10)++;
                v101 = v45;
                __p[0] = &v101;
                *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v95, (unint64_t *)&v101, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)+ 24) = v76;
                if (v104)
                {
                  CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, "_ci_srgb_to_linear_h", 0);
                  v101 = v45;
                  __p[0] = &v101;
                  v77 = std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v95, (unint64_t *)&v101, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
                  CI::MetalDAGHelper::add_colour_inout_function_info(a1, *((unsigned __int16 *)v77 + 24));
                  v78 = (*a10)++;
                  v101 = v45;
                  __p[0] = &v101;
                  *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v95, (unint64_t *)&v101, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)+ 24) = v78;
                }
                v101 = v45;
                __p[0] = &v101;
                v49 = (uint64_t **)(a1 + 128);
                *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v95, (unint64_t *)&v101, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)+ 20) = 0;
              }
              else
              {
                if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v58 = &v102;
                else
                  v58 = (std::string *)v102.__r_.__value_.__r.__words[0];
                CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, (const char *)v58, 0);
                v59 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
                if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v59 = v102.__r_.__value_.__l.__size_;
                if (v59 != 14)
                  goto LABEL_128;
                v60 = &v102;
                if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v60 = (std::string *)v102.__r_.__value_.__r.__words[0];
                v61 = v60->__r_.__value_.__r.__words[0];
                v62 = *(std::string::size_type *)((char *)v60->__r_.__value_.__r.__words + 6);
                if (v61 == 0x646165725F69635FLL && v62 == 0x6C657869705F6461)
                  CI::MetalDAGHelper::add_read_pixel_function_info(a1, *(_QWORD *)v103[0], *((_QWORD *)v103[0] + 1), *((_QWORD *)v103[0] + 2), *((_QWORD *)v103[0] + 3));
                else
LABEL_128:
                  CI::MetalDAGHelper::add_read_pixel_420_function_info(a1, *(_QWORD *)v103[0], *((_QWORD *)v103[0] + 1), *((_QWORD *)v103[0] + 2), *((_QWORD *)v103[0] + 3), *((_QWORD *)v103[0] + 4), *((_QWORD *)v103[0] + 5), *((_QWORD *)v103[0] + 6));
                v64 = (*a10)++;
                v101 = v45;
                __p[0] = &v101;
                *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v95, (unint64_t *)&v101, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)+ 20) = v64;
                if (v104)
                {
                  CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, "_ci_srgb_to_linear", 0);
                  v101 = v45;
                  __p[0] = &v101;
                  v65 = std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v95, (unint64_t *)&v101, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
                  v66 = *((unsigned __int16 *)v65 + 20);
                  if (!*((_WORD *)v65 + 20))
                    v66 = *((unsigned __int16 *)v65 + 24);
                  CI::MetalDAGHelper::add_colour_inout_function_info(a1, v66);
                  v67 = (*a10)++;
                  v101 = v45;
                  __p[0] = &v101;
                  *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v95, (unint64_t *)&v101, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)+ 20) = v67;
                }
                v101 = v45;
                __p[0] = &v101;
                v49 = (uint64_t **)(a1 + 128);
                *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v95, (unint64_t *)&v101, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)+ 24) = 0;
              }
              __p[0] = v45;
              std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>>>::__erase_unique<unsigned long long>(v91, (unint64_t *)__p);
              if (v103[0])
              {
                v103[1] = v103[0];
                operator delete(v103[0]);
              }
              if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v102.__r_.__value_.__l.__data_);
            }
            if ((a11 & 1) != 0)
            {
              __p[0] = v45;
              v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              if (!*((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v49, (unint64_t *)__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&v102)+ a9+ 24))
              {
                CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, "_ci_float_to_half", 0);
                __p[0] = v45;
                v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                v82 = std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v49, (unint64_t *)__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&v102);
                CI::MetalDAGHelper::add_colour_inout_function_info(a1, *((unsigned __int16 *)v82 + a9 + 20));
                v83 = (*a10)++;
                __p[0] = v45;
                v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v95, (unint64_t *)__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&v102)+ a9+ 24) = v83;
                v49 = (uint64_t **)(a1 + 128);
                __p[0] = v45;
                v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v95, (unint64_t *)__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&v102)+ a9+ 20) = 0;
              }
              __p[0] = v45;
              v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              v81 = *((unsigned __int16 *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v49, (unint64_t *)__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&v102)+ a9+ 24);
            }
            else
            {
              __p[0] = v45;
              v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              if (!*((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v49, (unint64_t *)__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&v102)+ a9+ 20))
              {
                CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, "_ci_half_to_float", 0);
                __p[0] = v45;
                v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                v79 = std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v49, (unint64_t *)__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&v102);
                CI::MetalDAGHelper::add_colour_inout_function_info(a1, *((unsigned __int16 *)v79 + a9 + 24));
                v80 = (*a10)++;
                __p[0] = v45;
                v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v95, (unint64_t *)__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&v102)+ a9+ 20) = v80;
                v49 = (uint64_t **)(a1 + 128);
                __p[0] = v45;
                v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v95, (unint64_t *)__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&v102)+ a9+ 24) = 0;
              }
              __p[0] = v45;
              v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              v81 = *((unsigned __int16 *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v49, (unint64_t *)__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&v102)+ a9+ 20);
            }
            a8 = v88;
            if (v21)
              (**v21)(v21, 7, v81, 0);
            v88[v93] = 0;
          }
          ++v96;
          break;
        default:
LABEL_63:
          CI::KernelArguments::is_uniform(v24);
          if ((a11 & 4) != 0 && *((_BYTE *)v16 + 165))
          {
            if (v25 > 7)
            {
              if (v25 == 8 || v25 == 27)
                v25 = 15;
            }
            else if (v25 == 6)
            {
              v25 = 13;
            }
            else if (v25 == 7)
            {
              v25 = 14;
            }
          }
          v84 = (CI::Object *)CI::ColorKernelNode::get_argument(a3, v22);
          CI::SerialObjectPtrArray::append(a4, v84);
          v85 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, v25, v84);
          if (v21)
            (**v21)(v21, 4, 0, v85);
          break;
      }
    }
    else
    {
      switch(v24)
      {
        case 30:
          if (v21)
            (**v21)(v21, 7, a5, 0);
          break;
        case 31:
        case 32:
          if (*(_DWORD *)(a1 + 32) == 2)
          {
            if (*(_QWORD *)(a1 + 64)
              && *(_QWORD *)(a1 + 72)
              && (v26 = (void (***)(_QWORD, uint64_t, uint64_t, _QWORD))(***(uint64_t (****)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), 6)) != 0)
            {
              v27 = v26;
              (**v26)(v26, 8, a5, 0);
              (**v27)(v27, 6, 0, 0);
              (**v27)(v27, 4, 0, 0);
              v28 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
              (**v27)(v27, 4, 0, v28);
              v29 = 0;
            }
            else
            {
              CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
              v27 = 0;
              v29 = 1;
            }
            if (a4)
              CI::SerialObjectPtrArray::append(a4, *(CI::Object **)(a4 + 24));
            if ((v29 & 1) == 0)
              (**v27)(v27, 2, 0, 0);
            if (*((_BYTE *)v16 + 166))
            {
              ++*(_QWORD *)(a1 + 80);
              if ((v29 & 1) == 0)
                goto LABEL_96;
            }
            else if ((v29 & 1) == 0)
            {
LABEL_96:
              ((void (*)(void (***)(_QWORD, uint64_t, _QWORD, unint64_t), uint64_t))**v27)(v27, 2);
            }
            v37 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 8) + 24);
LABEL_98:
            v57 = v37();
            if (v21)
              ((void (*)(void (***)(_QWORD, uint64_t, _QWORD, _QWORD), uint64_t))(*v21)[1])(v21, v57);
            break;
          }
          if (v21)
          {
            (**v21)(v21, 8, a5, 0);
            (**v21)(v21, 6, 0, 0);
            (**v21)(v21, 4, 0, 0);
            v43 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
            (**v21)(v21, 4, 0, v43);
          }
          else
          {
            CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
          }
          if (a4)
            CI::SerialObjectPtrArray::append(a4, *(CI::Object **)(a4 + 24));
          if (v21)
            (**v21)(v21, 2, 0, 0);
LABEL_106:
          if (*((_BYTE *)v16 + 166))
          {
            v42 = *(_QWORD *)(a1 + 80);
            *(_QWORD *)(a1 + 80) = v42 + 1;
            if (!v21)
              break;
          }
          else
          {
            v42 = 0;
            if (!v21)
              break;
          }
          v38 = **v21;
          v39 = v21;
          v40 = 2;
LABEL_111:
          v38(v39, v40, v42, 0);
          break;
        case 33:
        case 34:
          if (*(_QWORD *)(a1 + 64)
            && *(_QWORD *)(a1 + 72)
            && (v33 = (void (***)(_QWORD, uint64_t, uint64_t, _QWORD))(***(uint64_t (****)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), 5)) != 0)
          {
            v34 = v33;
            (**v33)(v33, 7, a5, 0);
            (**v34)(v34, 6, 0, 0);
            (**v34)(v34, 4, 0, 0);
            v35 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
            (**v34)(v34, 4, 0, v35);
            v36 = 0;
          }
          else
          {
            CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
            v34 = 0;
            v36 = 1;
          }
          if (a4)
            CI::SerialObjectPtrArray::append(a4, *(CI::Object **)(a4 + 24));
          if ((v36 & 1) == 0)
            (**v34)(v34, 2, 0, 0);
          v37 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 8) + 32);
          goto LABEL_98;
        case 35:
          if (!v21)
            break;
          v38 = **v21;
          v39 = v21;
          v40 = 6;
          goto LABEL_60;
        case 36:
          if (!v21)
            break;
          v38 = **v21;
          v39 = v21;
          v40 = 4;
          goto LABEL_60;
        case 37:
          v41 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
          if (v21)
            (**v21)(v21, 4, 0, v41);
          if (a4)
            CI::SerialObjectPtrArray::append(a4, *(CI::Object **)(a4 + 24));
          break;
        case 38:
          if (!v21)
            break;
          v38 = **v21;
          v39 = v21;
          v40 = 2;
LABEL_60:
          v42 = 0;
          goto LABEL_111;
        case 39:
          goto LABEL_106;
        default:
          goto LABEL_63;
      }
    }
    ++v22;
  }
  CI::MetalDAGHelper::add_function_for_kernel((CI::MetalDAGHelper *)a1, v16);
  return (*(uint64_t (**)(_QWORD, void (***)(_QWORD, uint64_t, _QWORD, _QWORD)))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v21);
}

void sub_192416570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  CI::DAGHelper::TextureReadFunction::~TextureReadFunction((CI::DAGHelper::TextureReadFunction *)(v32 - 160));
  _Unwind_Resume(a1);
}

uint64_t CI::MetalDAGHelper::add_function_info(CI::MetalDAGHelper *this, const CI::ProgramNode *a2, const CI::GeneralKernelNode *a3, CI::Object **a4, uint64_t a5, unint64_t a6)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  int v15;
  uint64_t v16;
  int type;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  void (***v23)(_QWORD, uint64_t, uint64_t, unint64_t);
  void (***v24)(_QWORD, uint64_t, uint64_t, unint64_t);
  unint64_t v25;
  char v26;
  uint64_t v27;
  CI::Object **v28;
  CI::Object *v29;
  unint64_t v30;
  void (***v31)(_QWORD, uint64_t, uint64_t, _QWORD);
  void (***v32)(_QWORD, uint64_t, _QWORD, unint64_t);
  unint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  double **v40;
  uint64_t v41;
  double *v42;
  size_t v43;
  unint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  const char *v62;
  CI::Object *v63;
  double v64;
  void (***v65)(_QWORD, uint64_t);
  void (***v66)(_QWORD, uint64_t);
  char v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v75[2];
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82[8];

  v82[6] = *(double *)MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)a3 + 6);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  if (*(_BYTE *)(v9 + 12))
    v10 = CI::KernelArguments::count((CI::KernelArguments *)(v9 + 144));
  else
    v10 = *(_DWORD *)(v9 + 20);
  v11 = v10;
  if (*((_DWORD *)this + 8) == 1)
  {
    v12 = v10 + (uint64_t)(int)CI::Kernel::num_sampler_arguments((CI::Kernel *)v9);
    v13 = v12 + (int)CI::Kernel::num_sampler_arguments((CI::Kernel *)v9);
    v11 = v13 + (int)CI::Kernel::num_sampler_arguments((CI::Kernel *)v9);
    if (*((_DWORD *)this + 8) == 1)
    {
      for (i = 0; ; ++i)
      {
        if (*(_BYTE *)(v9 + 12))
          v15 = CI::KernelArguments::count((CI::KernelArguments *)(v9 + 144));
        else
          v15 = *(_DWORD *)(v9 + 20);
        if (i >= v15)
          break;
        v16 = *((_QWORD *)a3 + 6);
        if (*(_BYTE *)(v16 + 12))
        {
          type = CI::KernelArguments::get_type((CI::KernelArguments *)(v16 + 144), i);
        }
        else
        {
          if (i >= *(int *)(v16 + 20))
            continue;
          type = *(_DWORD *)(*(_QWORD *)(v16 + 72) + 4 * i);
        }
        if (type == 31)
          v11 += 5;
      }
    }
  }
  if (*((_QWORD *)this + 8) && *((_QWORD *)this + 9))
  {
    v18 = (***((uint64_t (****)(_QWORD, uint64_t))this + 1))(*((_QWORD *)this + 1), v11);
    if (*((_QWORD *)this + 8) && *((_QWORD *)this + 9))
      (***((void (****)(_QWORD, uint64_t))this + 1))(*((_QWORD *)this + 1), v11);
  }
  else
  {
    v18 = 0;
  }
  v19 = 0;
  *(_QWORD *)v75 = 0;
  while (1)
  {
    v20 = *(_BYTE *)(v9 + 12) ? CI::KernelArguments::count((CI::KernelArguments *)(v9 + 144)) : *(_DWORD *)(v9 + 20);
    if ((uint64_t)v19 >= v20)
      return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1), v18);
    v21 = *((_QWORD *)a3 + 6);
    if (*(_BYTE *)(v21 + 12))
    {
      v22 = CI::KernelArguments::get_type((CI::KernelArguments *)(v21 + 144), v19);
    }
    else
    {
      if ((uint64_t)v19 >= *(int *)(v21 + 20))
      {
        v22 = 0;
LABEL_45:
        CI::KernelArguments::is_uniform(v22);
        v27 = *((_QWORD *)a3 + 7);
        if (v19 > 9)
          v28 = (CI::Object **)(*(_QWORD *)(v27 + 16) + 8 * (v19 - 10));
        else
          v28 = (CI::Object **)(v27 + 8 * v19 + 24);
        v29 = *v28;
        CI::SerialObjectPtrArray::append((uint64_t)a4, *v28);
        v30 = CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, v22, v29);
        if (v22 == 29)
        {
          if (v18)
            (**(void (***)(uint64_t, uint64_t, _QWORD, unint64_t))v18)(v18, 5, 0, v30);
        }
        else if (v18)
        {
          (**(void (***)(uint64_t, uint64_t, _QWORD, unint64_t))v18)(v18, 4, 0, v30);
        }
        goto LABEL_142;
      }
      v22 = *(_DWORD *)(*(_QWORD *)(v21 + 72) + 4 * v19);
    }
    if (v22 <= 29)
    {
      switch(v22)
      {
        case 1:
          goto LABEL_142;
        case 2:
          v39 = *((_QWORD *)a3 + 7);
          if (v19 > 9)
            v40 = (double **)(*(_QWORD *)(v39 + 16) + 8 * (v19 - 10));
          else
            v40 = (double **)(v39 + 8 * v19 + 24);
          v42 = *v40;
          v77 = 0.0;
          v78 = 0.0;
          v76 = 1.0;
          v79 = 1.0;
          v80 = 0.0;
          v81 = 0.0;
          v43 = CI::ProgramNode::child_depth(a2, v75[0]);
          if (v43 - 1 > a6)
          {
            v44 = ~a6 + v43;
            do
            {
              if ((*(unsigned int (**)(double *))(*(_QWORD *)v42 + 16))(v42) == 28)
              {
                v45 = v42[7];
                v46 = v42[8];
                v47 = v46 * v78 + v45 * v76;
                v48 = v46 * v79 + v45 * v77;
                v49 = v42[9];
                v50 = v42[10];
                v51 = v78 * v50 + v49 * v76;
                v52 = v79 * v50 + v49 * v77;
                v53 = v42[11];
                v54 = v42[12];
                v55 = v80 + v78 * v54 + v53 * v76;
                v56 = v79 * v54 + v53 * v77 + v81;
                v76 = v47;
                v77 = v48;
                v78 = v51;
                v79 = v52;
                v80 = v55;
                v81 = v56;
              }
              else
              {
                v57 = (*(uint64_t (**)(double *))(*(_QWORD *)v42 + 16))(v42);
                v58 = *(_QWORD *)v42;
                if (v57 == 45)
                {
                  (*(void (**)(double *))(v58 + 408))(v42);
                }
                else if ((*(unsigned int (**)(double *))(v58 + 16))(v42) != 30)
                {
                  (*(void (**)(double *))(*(_QWORD *)v42 + 16))(v42);
                }
              }
              v42 = (double *)(*(uint64_t (**)(double *, _QWORD))(*(_QWORD *)v42 + 48))(v42, 0);
              --v44;
            }
            while (v44);
          }
          v59 = (*(uint64_t (**)(const CI::ProgramNode *, int *))(*(_QWORD *)a2 + 48))(a2, *(int **)v75);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59) == 52)
          {
            v60 = *(unsigned int *)(v59 + 140);
            v61 = *(_BYTE *)(v59 + 144);
            v82[0] = *(double *)(v59 + 145);
            *(_DWORD *)((char *)v82 + 7) = *(_DWORD *)(v59 + 152);
            if ((v61 & 1) != 0)
            {
              if (CI_INTERMEDIATE_SRGB_TEXTURES()
                && (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 584))(*((_QWORD *)this + 3), v60, 1))
              {
                *(_DWORD *)(v59 + 140) = v60;
                *(_BYTE *)(v59 + 144) = v61 | 4;
                *(double *)(v59 + 145) = v82[0];
                *(_DWORD *)(v59 + 152) = *(_DWORD *)((char *)v82 + 7);
              }
              else
              {
                v62 = CI::name_for_format(v60);
                x_log("Cannot use sRGB texture binding with format %s for sampler %d in kernel '%s'.\n", v62, v19, *(const char **)(v9 + 24));
              }
            }
          }
          v63 = (CI::Object *)operator new();
          v64 = CI::Affine::inverse((CI::Affine *)&v76, v82);
          CI::TextureSampler::TextureSampler(v63, v59, v64);
          CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 2, 0);
          if (*((_DWORD *)this + 8) == 2)
          {
            if (*((_QWORD *)this + 8) && *((_QWORD *)this + 9))
            {
              v65 = (void (***)(_QWORD, uint64_t))(***((uint64_t (****)(_QWORD, uint64_t))this + 1))(*((_QWORD *)this + 1), 4);
              v66 = v65;
              ++*((_QWORD *)this + 10);
              if (v65)
              {
                (**v65)(v65, 1);
                ++*((_QWORD *)this + 11);
                (**v66)(v66, 3);
                v67 = 0;
LABEL_132:
                CI::SerialObjectPtrArray::append((uint64_t)a4, v63);
                v68 = CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 41, 0);
                if ((v67 & 1) != 0)
                {
                  CI::SerialObjectPtrArray::append((uint64_t)a4, v63);
                }
                else
                {
                  ((void (*)(void (***)(_QWORD, uint64_t), uint64_t, _QWORD, unint64_t))**v66)(v66, 5, 0, v68);
                  CI::SerialObjectPtrArray::append((uint64_t)a4, v63);
                  ((void (*)(void (***)(_QWORD, uint64_t), uint64_t, uint64_t, _QWORD))**v66)(v66, 7, a5, 0);
                }
                v69 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v66);
                if (v18)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 8))(v18, v69);
LABEL_141:
                CI::Object::unref(v63);
                *(_QWORD *)v75 = (v75[0] + 1);
                goto LABEL_142;
              }
            }
            else
            {
              ++*((_QWORD *)this + 10);
            }
            v66 = 0;
            ++*((_QWORD *)this + 11);
            v67 = 1;
            goto LABEL_132;
          }
          ++*((_QWORD *)this + 10);
          if (v18)
          {
            (**(void (***)(uint64_t, uint64_t))v18)(v18, 1);
            ++*((_QWORD *)this + 11);
            (**(void (***)(uint64_t, uint64_t))v18)(v18, 3);
          }
          else
          {
            ++*((_QWORD *)this + 11);
          }
          CI::SerialObjectPtrArray::append((uint64_t)a4, v63);
          v70 = CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 41, 0);
          if (v18)
          {
            (**(void (***)(uint64_t, uint64_t, _QWORD, unint64_t))v18)(v18, 5, 0, v70);
            CI::SerialObjectPtrArray::append((uint64_t)a4, v63);
            (**(void (***)(uint64_t, uint64_t, uint64_t, _QWORD))v18)(v18, 7, a5, 0);
          }
          else
          {
            CI::SerialObjectPtrArray::append((uint64_t)a4, v63);
          }
          goto LABEL_141;
        case 4:
          goto LABEL_142;
      }
      goto LABEL_45;
    }
    switch(v22)
    {
      case 30:
        if (v18)
          (**(void (***)(uint64_t, uint64_t, uint64_t, _QWORD))v18)(v18, 7, a5, 0);
        break;
      case 31:
      case 32:
        if (*((_DWORD *)this + 8) == 2)
        {
          if (*((_QWORD *)this + 8)
            && *((_QWORD *)this + 9)
            && (v23 = (void (***)(_QWORD, uint64_t, uint64_t, unint64_t))(***((uint64_t (****)(_QWORD, uint64_t))this
                                                                                            + 1))(*((_QWORD *)this + 1), 6), (v24 = v23) != 0))
          {
            (**v23)(v23, 8, a5, 0);
            (**v24)(v24, 6, 0, 0);
            (**v24)(v24, 4, 0, 0);
            v25 = CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 37, 0);
            (**v24)(v24, 4, 0, v25);
            v26 = 0;
          }
          else
          {
            CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 37, 0);
            v24 = 0;
            v26 = 1;
          }
          if (a4)
            CI::SerialObjectPtrArray::append((uint64_t)a4, a4[3]);
          if ((v26 & 1) == 0)
            (**v24)(v24, 2, 0, 0);
          if (*(_BYTE *)(v9 + 166))
          {
            v41 = *((_QWORD *)this + 10);
            *((_QWORD *)this + 10) = v41 + 1;
            if ((v26 & 1) != 0)
            {
LABEL_118:
              v35 = (*(uint64_t (**)(_QWORD, void (***)(_QWORD, uint64_t, uint64_t, unint64_t), BOOL))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), v24, v22 == 32);
              if (v18)
LABEL_63:
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 8))(v18, v35);
              break;
            }
          }
          else
          {
            v41 = 0;
            if ((v26 & 1) != 0)
              goto LABEL_118;
          }
          (**v24)(v24, 2, v41, 0);
          goto LABEL_118;
        }
        if (v18)
        {
          (**(void (***)(uint64_t, uint64_t, uint64_t, _QWORD))v18)(v18, 8, a5, 0);
          (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))v18)(v18, 6, 0, 0);
          (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))v18)(v18, 4, 0, 0);
          v38 = CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 37, 0);
          (**(void (***)(uint64_t, uint64_t, _QWORD, unint64_t))v18)(v18, 4, 0, v38);
        }
        else
        {
          CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 37, 0);
        }
        if (a4)
          CI::SerialObjectPtrArray::append((uint64_t)a4, a4[3]);
        if (v18)
          (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))v18)(v18, 2, 0, 0);
        if (*(_BYTE *)(v9 + 166))
        {
          v37 = *((_QWORD *)this + 10);
          *((_QWORD *)this + 10) = v37 + 1;
          if (v18)
            goto LABEL_107;
        }
        else
        {
          v37 = 0;
          if (!v18)
            break;
LABEL_107:
          (**(void (***)(uint64_t, uint64_t, uint64_t, _QWORD))v18)(v18, 2, v37, 0);
        }
        break;
      case 33:
      case 34:
        if (*((_QWORD *)this + 8)
          && *((_QWORD *)this + 9)
          && (v31 = (void (***)(_QWORD, uint64_t, uint64_t, _QWORD))(***((uint64_t (****)(_QWORD, uint64_t))this
                                                                                + 1))(*((_QWORD *)this + 1), 5), (v32 = v31) != 0))
        {
          (**v31)(v31, 7, a5, 0);
          (**v32)(v32, 6, 0, 0);
          (**v32)(v32, 4, 0, 0);
          v33 = CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 37, 0);
          (**v32)(v32, 4, 0, v33);
          v34 = 0;
        }
        else
        {
          CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 37, 0);
          v32 = 0;
          v34 = 1;
        }
        if (a4)
          CI::SerialObjectPtrArray::append((uint64_t)a4, a4[3]);
        if ((v34 & 1) == 0)
          (**v32)(v32, 2, 0, 0);
        v35 = (*(uint64_t (**)(_QWORD, void (***)(_QWORD, uint64_t, _QWORD, unint64_t), BOOL))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), v32, v22 == 34);
        if (v18)
          goto LABEL_63;
        break;
      case 35:
        if (v18)
          (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))v18)(v18, 6, 0, 0);
        break;
      case 36:
        if (v18)
          (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))v18)(v18, 4, 0, 0);
        break;
      case 37:
        v36 = CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 37, 0);
        if (v18)
          (**(void (***)(uint64_t, uint64_t, _QWORD, unint64_t))v18)(v18, 4, 0, v36);
        if (a4)
          CI::SerialObjectPtrArray::append((uint64_t)a4, a4[3]);
        break;
      case 38:
        if (v18)
          (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))v18)(v18, 2, 0, 0);
        break;
      case 39:
        if (*(_BYTE *)(v9 + 166))
        {
          v37 = *((_QWORD *)this + 10);
          *((_QWORD *)this + 10) = v37 + 1;
          if (v18)
            goto LABEL_107;
          break;
        }
        v37 = 0;
        if (!v18)
          break;
        goto LABEL_107;
      default:
        goto LABEL_45;
    }
LABEL_142:
    ++v19;
  }
}

void sub_1924172CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194025AAC](v1, 0x10A1C40000A9EE4);
  _Unwind_Resume(a1);
}

uint64_t CI::MetalDAGHelper::add_function_info(uint64_t a1, CI::SerialStringArray **a2, uint64_t a3, CI::SerialObjectPtrArray *a4, uint64_t a5, unint64_t a6, uint64_t a7, char *a8, unsigned __int8 a9, _QWORD *a10, char a11)
{
  uint64_t v13;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t i;
  int v20;
  uint64_t v21;
  int type;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  void (***v30)(_QWORD, uint64_t, uint64_t, unint64_t);
  void (***v31)(_QWORD, uint64_t, uint64_t, unint64_t);
  unint64_t v32;
  char v33;
  uint64_t v34;
  CI::Node **v35;
  uint64_t v36;
  CI::Object **v37;
  CI::Object *v38;
  unint64_t v39;
  void (***v40)(_QWORD, uint64_t, uint64_t, unint64_t);
  void (***v41)(_QWORD, uint64_t, _QWORD, unint64_t);
  unint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  double **v49;
  CI::Node *v50;
  uint64_t **v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  BOOL v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  double *v62;
  size_t v63;
  unint64_t v64;
  double v65;
  double v66;
  double v67;
  std::string::size_type v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  std::string *v82;
  std::string::size_type v83;
  std::string *v84;
  std::string::size_type v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t *v89;
  unsigned int v90;
  uint64_t v91;
  size_t size;
  _BYTE *v93;
  std::string *v94;
  const char *v95;
  std::string::size_type v96;
  std::string *v97;
  std::string::size_type v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  const char *v109;
  CI::Object *v110;
  double v111;
  void (***v112)(_QWORD, uint64_t);
  void (***v113)(_QWORD, uint64_t);
  char v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t **v128;
  int v129[2];
  CI::SerialObjectPtrArray *v130;
  char *__s2;
  unint64_t v132;
  std::string v133;
  void *v134;
  double v135;
  double v136;
  char v137;
  _BYTE v138[22];
  char v139;
  uint64_t v140;

  v13 = a3;
  v140 = *MEMORY[0x1E0C80C00];
  v16 = *(_QWORD *)(a3 + 48);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16) != 64)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  v130 = a4;
  if (*(_BYTE *)(v16 + 12))
    v17 = CI::KernelArguments::count((CI::KernelArguments *)(v16 + 144));
  else
    v17 = *(_DWORD *)(v16 + 20);
  v18 = v17;
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    for (i = 0; ; ++i)
    {
      if (*(_BYTE *)(v16 + 12))
        v20 = CI::KernelArguments::count((CI::KernelArguments *)(v16 + 144));
      else
        v20 = *(_DWORD *)(v16 + 20);
      if (i >= v20)
      {
        if (*(_DWORD *)(a1 + 32) == 1)
        {
          v23 = v18 + (int)CI::Kernel::num_sampler_arguments((CI::Kernel *)v16);
          v24 = v23 + (int)CI::Kernel::num_sampler_arguments((CI::Kernel *)v16);
          v18 = v24 + (int)CI::Kernel::num_sampler_arguments((CI::Kernel *)v16);
        }
        break;
      }
      v21 = *(_QWORD *)(v13 + 48);
      if (*(_BYTE *)(v21 + 12))
      {
        type = CI::KernelArguments::get_type((CI::KernelArguments *)(v21 + 144), i);
      }
      else
      {
        if (i >= *(int *)(v21 + 20))
          continue;
        type = *(_DWORD *)(*(_QWORD *)(v21 + 72) + 4 * i);
      }
      if (type == 31)
        v18 += 5;
    }
  }
  if (*(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 72))
  {
    v25 = (***(uint64_t (****)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), v18);
    if (*(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 72))
      (***(void (****)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), v18);
  }
  else
  {
    v25 = 0;
  }
  v26 = 0;
  *(_QWORD *)v129 = 0;
  __s2 = a8 + 1;
  v128 = (uint64_t **)(a1 + 128);
  v125 = a6 + 1;
  v126 = (_QWORD *)(a1 + 136);
  v124 = a1 + 152;
  v121 = a8;
  v120 = (uint64_t)&a8[a6 + 3];
  while (1)
  {
    v27 = *(_BYTE *)(v16 + 12) ? CI::KernelArguments::count((CI::KernelArguments *)(v16 + 144)) : *(_DWORD *)(v16 + 20);
    if ((uint64_t)v26 >= v27)
      break;
    v28 = *(_QWORD *)(v13 + 48);
    if (*(_BYTE *)(v28 + 12))
    {
      v29 = CI::KernelArguments::get_type((CI::KernelArguments *)(v28 + 144), v26);
    }
    else
    {
      if ((uint64_t)v26 >= *(int *)(v28 + 20))
      {
        v29 = 0;
LABEL_49:
        CI::KernelArguments::is_uniform(v29);
        v36 = *(_QWORD *)(v13 + 56);
        if (v26 > 9)
          v37 = (CI::Object **)(*(_QWORD *)(v36 + 16) + 8 * (v26 - 10));
        else
          v37 = (CI::Object **)(v36 + 8 * v26 + 24);
        v38 = *v37;
        CI::SerialObjectPtrArray::append((uint64_t)v130, *v37);
        v39 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, v29, v38);
        if (v29 == 29)
        {
          if (v25)
            (**(void (***)(uint64_t, uint64_t, _QWORD, unint64_t))v25)(v25, 5, 0, v39);
        }
        else if (v25)
        {
          (**(void (***)(uint64_t, uint64_t, _QWORD, unint64_t))v25)(v25, 4, 0, v39);
        }
        goto LABEL_237;
      }
      v29 = *(_DWORD *)(*(_QWORD *)(v28 + 72) + 4 * v26);
    }
    if (v29 <= 29)
    {
      switch(v29)
      {
        case 1:
          goto LABEL_46;
        case 2:
          v48 = *(_QWORD *)(v13 + 56);
          if (v26 > 9)
            v49 = (double **)(*(_QWORD *)(v48 + 16) + 8 * (v26 - 10));
          else
            v49 = (double **)(v48 + 8 * v26 + 24);
          v62 = *v49;
          v133.__r_.__value_.__r.__words[2] = 0;
          *(_OWORD *)&v133.__r_.__value_.__l.__data_ = 0x3FF0000000000000uLL;
          *(double *)&v134 = 1.0;
          v135 = 0.0;
          v136 = 0.0;
          v63 = CI::ProgramNode::child_depth((CI::ProgramNode *)a2, v129[0]);
          if (v63 - 1 > a6)
          {
            v64 = ~a6 + v63;
            do
            {
              if ((*(unsigned int (**)(double *))(*(_QWORD *)v62 + 16))(v62) == 28)
              {
                v65 = v62[7];
                v66 = v62[8];
                v67 = v66 * *(double *)&v133.__r_.__value_.__r.__words[2]
                    + v65 * *(double *)&v133.__r_.__value_.__l.__data_;
                *(double *)&v68 = v66 * *(double *)&v134 + v65 * *(double *)&v133.__r_.__value_.__l.__size_;
                v69 = v62[9];
                v70 = v62[10];
                v71 = *(double *)&v133.__r_.__value_.__r.__words[2] * v70
                    + v69 * *(double *)&v133.__r_.__value_.__l.__data_;
                v72 = *(double *)&v134 * v70 + v69 * *(double *)&v133.__r_.__value_.__l.__size_;
                v73 = v62[11];
                v74 = v62[12];
                v75 = v135
                    + *(double *)&v133.__r_.__value_.__r.__words[2] * v74
                    + v73 * *(double *)&v133.__r_.__value_.__l.__data_;
                v76 = *(double *)&v134 * v74 + v73 * *(double *)&v133.__r_.__value_.__l.__size_ + v136;
                *(double *)&v133.__r_.__value_.__l.__data_ = v67;
                v133.__r_.__value_.__l.__size_ = v68;
                *(double *)&v133.__r_.__value_.__r.__words[2] = v71;
                *(double *)&v134 = v72;
                v135 = v75;
                v136 = v76;
              }
              else
              {
                v77 = (*(uint64_t (**)(double *))(*(_QWORD *)v62 + 16))(v62);
                v78 = *(_QWORD *)v62;
                if (v77 == 45)
                {
                  (*(void (**)(double *))(v78 + 408))(v62);
                }
                else if ((*(unsigned int (**)(double *))(v78 + 16))(v62) != 30)
                {
                  (*(void (**)(double *))(*(_QWORD *)v62 + 16))(v62);
                }
              }
              v62 = (double *)(*(uint64_t (**)(double *, _QWORD))(*(_QWORD *)v62 + 48))(v62, 0);
              --v64;
            }
            while (v64);
          }
          v79 = (*((uint64_t (**)(CI::SerialStringArray **, int *))*a2 + 6))(a2, *(int **)v129);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v79 + 16))(v79) == 52)
          {
            v119 = v13;
            v80 = *(unsigned int *)(v79 + 140);
            v81 = *(_BYTE *)(v79 + 144);
            *(_QWORD *)v138 = *(_QWORD *)(v79 + 145);
            *(_DWORD *)&v138[7] = *(_DWORD *)(v79 + 152);
            if ((v81 & 1) != 0)
            {
              if (CI_INTERMEDIATE_SRGB_TEXTURES()
                && (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 584))(*(_QWORD *)(a1 + 24), v80, 1))
              {
                *(_DWORD *)(v79 + 140) = v80;
                *(_BYTE *)(v79 + 144) = v81 | 4;
                *(_QWORD *)(v79 + 145) = *(_QWORD *)v138;
                *(_DWORD *)(v79 + 152) = *(_DWORD *)&v138[7];
              }
              else
              {
                v109 = CI::name_for_format(v80);
                x_log("Cannot use sRGB texture binding with format %s for sampler %d in kernel '%s'.\n", v109, v26, *(const char **)(v16 + 24));
              }
            }
            v13 = v119;
          }
          v110 = (CI::Object *)operator new();
          v111 = CI::Affine::inverse((CI::Affine *)&v133, (double *)v138);
          CI::TextureSampler::TextureSampler(v110, v79, v111);
          CI::MetalDAGHelper::add_argument_type_and_offset(a1, 2, 0);
          if (*(_DWORD *)(a1 + 32) == 2)
          {
            if (*(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 72))
            {
              v112 = (void (***)(_QWORD, uint64_t))(***(uint64_t (****)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), 4);
              v113 = v112;
              ++*(_QWORD *)(a1 + 80);
              if (v112)
              {
                (**v112)(v112, 1);
                ++*(_QWORD *)(a1 + 88);
                (**v113)(v113, 3);
                v114 = 0;
                goto LABEL_225;
              }
            }
            else
            {
              ++*(_QWORD *)(a1 + 80);
            }
            v113 = 0;
            ++*(_QWORD *)(a1 + 88);
            v114 = 1;
LABEL_225:
            CI::SerialObjectPtrArray::append((uint64_t)v130, v110);
            v115 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 41, 0);
            if ((v114 & 1) == 0)
              ((void (*)(void (***)(_QWORD, uint64_t), uint64_t, _QWORD, unint64_t))**v113)(v113, 5, 0, v115);
            CI::SerialObjectPtrArray::append((uint64_t)v130, v110);
            if ((v114 & 1) == 0)
              ((void (*)(void (***)(_QWORD, uint64_t), uint64_t, uint64_t, _QWORD))**v113)(v113, 7, a5, 0);
            v116 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v113);
            if (v25)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 8))(v25, v116);
          }
          else
          {
            ++*(_QWORD *)(a1 + 80);
            if (v25)
            {
              (**(void (***)(uint64_t, uint64_t))v25)(v25, 1);
              ++*(_QWORD *)(a1 + 88);
              (**(void (***)(uint64_t, uint64_t))v25)(v25, 3);
            }
            else
            {
              ++*(_QWORD *)(a1 + 88);
            }
            CI::SerialObjectPtrArray::append((uint64_t)v130, v110);
            v117 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 41, 0);
            if (v25)
              (**(void (***)(uint64_t, uint64_t, _QWORD, unint64_t))v25)(v25, 5, 0, v117);
            CI::SerialObjectPtrArray::append((uint64_t)v130, v110);
            if (v25)
              (**(void (***)(uint64_t, uint64_t, uint64_t, _QWORD))v25)(v25, 7, a5, 0);
          }
          CI::Object::unref(v110);
          *(_QWORD *)v129 = (v129[0] + 1);
          a8 = v121;
          goto LABEL_237;
        case 4:
LABEL_46:
          v34 = *(_QWORD *)(v13 + 56);
          if (v26 > 9)
            v35 = (CI::Node **)(*(_QWORD *)(v34 + 16) + 8 * (v26 - 10));
          else
            v35 = (CI::Node **)(v34 + 8 * v26 + 24);
          v50 = *v35;
          if (v29 == 4)
          {
            (*(void (**)(CI::Node *))(*(_QWORD *)v50 + 232))(v50);
            CI::Node::rois_count(v50);
            *(_QWORD *)v138 = 0;
            *(_QWORD *)v138 = CI::hash_image_node_id((uint64_t)v50, 0);
            v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
            v51 = std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)(a1 + 176), (unint64_t *)v138, (uint64_t)&std::piecewise_construct, &v133);
            if (v25)
              (**(void (***)(uint64_t, _QWORD, uint64_t *, _QWORD))v25)(v25, 0, v51[5], 0);
            goto LABEL_213;
          }
          a8[v125] = LOBYTE(v129[0]) + 48;
          a8[a6 + 2] = 0;
          if (CI::SerialStringArray::firstIndexOfString(a2[7], __s2) != -1)
            v50 = (CI::Node *)(*((uint64_t (**)(CI::SerialStringArray **))*a2 + 6))(a2);
          v52 = CI::hash_dag_node_id((unint64_t)v50, a7, a8);
          if ((*(unsigned int (**)(CI::Node *))(*(_QWORD *)v50 + 232))(v50))
          {
            v53 = v120;
            do
            {
              v50 = (CI::Node *)(*(uint64_t (**)(CI::Node *, _QWORD))(*(_QWORD *)v50 + 48))(v50, 0);
              *(_WORD *)(v53 - 1) = 48;
              if (CI::SerialStringArray::firstIndexOfString(a2[7], __s2) != -1)
                v50 = (CI::Node *)(*((uint64_t (**)(CI::SerialStringArray **))*a2 + 6))(a2);
              v52 = CI::hash_dag_node_id((unint64_t)v50, v52, a8);
              ++v53;
            }
            while (((*(uint64_t (**)(CI::Node *))(*(_QWORD *)v50 + 232))(v50) & 1) != 0);
          }
          v54 = (_QWORD *)*v126;
          if (!*v126)
            goto LABEL_109;
          v55 = (_QWORD *)(a1 + 136);
          do
          {
            v56 = v54[4];
            v57 = v56 >= v52;
            if (v56 >= v52)
              v58 = v54;
            else
              v58 = v54 + 1;
            if (v57)
              v55 = v54;
            v54 = (_QWORD *)*v58;
          }
          while (*v58);
          if (v55 == v126 || v52 < v55[4])
          {
LABEL_109:
            v132 = v52;
            *(_QWORD *)v138 = &v132;
            v59 = std::__tree<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v124, &v132, (uint64_t)&std::piecewise_construct, (_QWORD **)v138);
            v60 = v59;
            if (*((char *)v59 + 63) < 0)
              std::string::__init_copy_ctor_external(&v133, (const std::string::value_type *)v59[5], v59[6]);
            else
              v133 = *(std::string *)(v59 + 5);
            std::vector<unsigned long>::vector(&v134, (uint64_t)(v60 + 8));
            v137 = *((_BYTE *)v60 + 88);
            if ((a11 & 1) != 0)
            {
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
              else
                size = v133.__r_.__value_.__l.__size_;
              std::string::basic_string[abi:nn180100]((uint64_t)v138, size + 2);
              if (v139 >= 0)
                v93 = v138;
              else
                v93 = *(_BYTE **)v138;
              if (size)
              {
                if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v94 = &v133;
                else
                  v94 = (std::string *)v133.__r_.__value_.__r.__words[0];
                memmove(v93, v94, size);
              }
              strcpy(&v93[size], "_h");
              if (v139 >= 0)
                v95 = v138;
              else
                v95 = *(const char **)v138;
              CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, v95, 0);
              if (v139 < 0)
                operator delete(*(void **)v138);
              v96 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v96 = v133.__r_.__value_.__l.__size_;
              if (v96 != 14)
                goto LABEL_195;
              v97 = &v133;
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v97 = (std::string *)v133.__r_.__value_.__r.__words[0];
              v98 = v97->__r_.__value_.__r.__words[0];
              v99 = *(std::string::size_type *)((char *)v97->__r_.__value_.__r.__words + 6);
              if (v98 == 0x646165725F69635FLL && v99 == 0x6C657869705F6461)
                CI::MetalDAGHelper::add_read_pixel_function_info(a1, *(_QWORD *)v134, *((_QWORD *)v134 + 1), *((_QWORD *)v134 + 2), *((_QWORD *)v134 + 3));
              else
LABEL_195:
                CI::MetalDAGHelper::add_read_pixel_420_function_info(a1, *(_QWORD *)v134, *((_QWORD *)v134 + 1), *((_QWORD *)v134 + 2), *((_QWORD *)v134 + 3), *((_QWORD *)v134 + 4), *((_QWORD *)v134 + 5), *((_QWORD *)v134 + 6));
              v101 = (*a10)++;
              v132 = v52;
              *(_QWORD *)v138 = &v132;
              *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, &v132, (uint64_t)&std::piecewise_construct, (uint64_t **)v138)+ 24) = v101;
              if (v137)
              {
                CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, "_ci_srgb_to_linear_h", 0);
                v132 = v52;
                *(_QWORD *)v138 = &v132;
                v102 = std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, &v132, (uint64_t)&std::piecewise_construct, (uint64_t **)v138);
                CI::MetalDAGHelper::add_colour_inout_function_info(a1, *((unsigned __int16 *)v102 + 24));
                v103 = (*a10)++;
                v132 = v52;
                *(_QWORD *)v138 = &v132;
                *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, &v132, (uint64_t)&std::piecewise_construct, (uint64_t **)v138)+ 24) = v103;
              }
              v132 = v52;
              *(_QWORD *)v138 = &v132;
              *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, &v132, (uint64_t)&std::piecewise_construct, (uint64_t **)v138)+ 20) = 0;
            }
            else
            {
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v82 = &v133;
              else
                v82 = (std::string *)v133.__r_.__value_.__r.__words[0];
              CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, (const char *)v82, 0);
              v83 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v83 = v133.__r_.__value_.__l.__size_;
              if (v83 != 14)
                goto LABEL_164;
              v84 = &v133;
              if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v84 = (std::string *)v133.__r_.__value_.__r.__words[0];
              v85 = v84->__r_.__value_.__r.__words[0];
              v86 = *(std::string::size_type *)((char *)v84->__r_.__value_.__r.__words + 6);
              if (v85 == 0x646165725F69635FLL && v86 == 0x6C657869705F6461)
                CI::MetalDAGHelper::add_read_pixel_function_info(a1, *(_QWORD *)v134, *((_QWORD *)v134 + 1), *((_QWORD *)v134 + 2), *((_QWORD *)v134 + 3));
              else
LABEL_164:
                CI::MetalDAGHelper::add_read_pixel_420_function_info(a1, *(_QWORD *)v134, *((_QWORD *)v134 + 1), *((_QWORD *)v134 + 2), *((_QWORD *)v134 + 3), *((_QWORD *)v134 + 4), *((_QWORD *)v134 + 5), *((_QWORD *)v134 + 6));
              v88 = (*a10)++;
              v132 = v52;
              *(_QWORD *)v138 = &v132;
              *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, &v132, (uint64_t)&std::piecewise_construct, (uint64_t **)v138)+ 20) = v88;
              if (v137)
              {
                CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, "_ci_srgb_to_linear", 0);
                v132 = v52;
                *(_QWORD *)v138 = &v132;
                v89 = std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, &v132, (uint64_t)&std::piecewise_construct, (uint64_t **)v138);
                v90 = *((unsigned __int16 *)v89 + 20);
                if (!*((_WORD *)v89 + 20))
                  v90 = *((unsigned __int16 *)v89 + 24);
                CI::MetalDAGHelper::add_colour_inout_function_info(a1, v90);
                v91 = (*a10)++;
                v132 = v52;
                *(_QWORD *)v138 = &v132;
                *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, &v132, (uint64_t)&std::piecewise_construct, (uint64_t **)v138)+ 20) = v91;
              }
              v132 = v52;
              *(_QWORD *)v138 = &v132;
              *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, &v132, (uint64_t)&std::piecewise_construct, (uint64_t **)v138)+ 24) = 0;
            }
            *(_QWORD *)v138 = v52;
            std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>>>::__erase_unique<unsigned long long>(v124, (unint64_t *)v138);
            if (*(double *)&v134 != 0.0)
            {
              v135 = *(double *)&v134;
              operator delete(v134);
            }
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v133.__r_.__value_.__l.__data_);
          }
          if ((a11 & 1) != 0)
          {
            *(_QWORD *)v138 = v52;
            v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
            if (!*((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, (unint64_t *)v138, (uint64_t)&std::piecewise_construct, (uint64_t **)&v133)+ a9+ 24))
            {
              CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, "_ci_float_to_half", 0);
              *(_QWORD *)v138 = v52;
              v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
              v107 = std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, (unint64_t *)v138, (uint64_t)&std::piecewise_construct, (uint64_t **)&v133);
              CI::MetalDAGHelper::add_colour_inout_function_info(a1, *((unsigned __int16 *)v107 + a9 + 20));
              v108 = (*a10)++;
              *(_QWORD *)v138 = v52;
              v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
              *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, (unint64_t *)v138, (uint64_t)&std::piecewise_construct, (uint64_t **)&v133)+ a9+ 24) = v108;
              *(_QWORD *)v138 = v52;
              v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
              *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, (unint64_t *)v138, (uint64_t)&std::piecewise_construct, (uint64_t **)&v133)+ a9+ 20) = 0;
            }
            *(_QWORD *)v138 = v52;
            v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
            v106 = *((unsigned __int16 *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, (unint64_t *)v138, (uint64_t)&std::piecewise_construct, (uint64_t **)&v133)+ a9+ 24);
            if (!v25)
              goto LABEL_212;
          }
          else
          {
            *(_QWORD *)v138 = v52;
            v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
            if (!*((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, (unint64_t *)v138, (uint64_t)&std::piecewise_construct, (uint64_t **)&v133)+ a9+ 20))
            {
              CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, "_ci_half_to_float", 0);
              *(_QWORD *)v138 = v52;
              v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
              v104 = std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, (unint64_t *)v138, (uint64_t)&std::piecewise_construct, (uint64_t **)&v133);
              CI::MetalDAGHelper::add_colour_inout_function_info(a1, *((unsigned __int16 *)v104 + a9 + 24));
              v105 = (*a10)++;
              *(_QWORD *)v138 = v52;
              v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
              *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, (unint64_t *)v138, (uint64_t)&std::piecewise_construct, (uint64_t **)&v133)+ a9+ 20) = v105;
              *(_QWORD *)v138 = v52;
              v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
              *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, (unint64_t *)v138, (uint64_t)&std::piecewise_construct, (uint64_t **)&v133)+ a9+ 24) = 0;
            }
            *(_QWORD *)v138 = v52;
            v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v138;
            v106 = *((unsigned __int16 *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v128, (unint64_t *)v138, (uint64_t)&std::piecewise_construct, (uint64_t **)&v133)+ a9+ 20);
            if (!v25)
              goto LABEL_212;
          }
          (**(void (***)(uint64_t, uint64_t, uint64_t, _QWORD))v25)(v25, 7, v106, 0);
LABEL_212:
          a8[v125] = 0;
LABEL_213:
          *(_QWORD *)v129 = (v129[0] + 1);
          goto LABEL_237;
      }
      goto LABEL_49;
    }
    switch(v29)
    {
      case 30:
        if (v25)
          (**(void (***)(uint64_t, uint64_t, uint64_t, _QWORD))v25)(v25, 7, a5, 0);
        break;
      case 31:
      case 32:
        if (*(_DWORD *)(a1 + 32) == 2)
        {
          if (*(_QWORD *)(a1 + 64)
            && *(_QWORD *)(a1 + 72)
            && (v30 = (void (***)(_QWORD, uint64_t, uint64_t, unint64_t))(***(uint64_t (****)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), 6), (v31 = v30) != 0))
          {
            (**v30)(v30, 8, a5, 0);
            (**v31)(v31, 6, 0, 0);
            (**v31)(v31, 4, 0, 0);
            v32 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
            (**v31)(v31, 4, 0, v32);
            v33 = 0;
          }
          else
          {
            CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
            v31 = 0;
            v33 = 1;
          }
          if (v130)
            CI::SerialObjectPtrArray::append((uint64_t)v130, *((CI::Object **)v130 + 3));
          if ((v33 & 1) == 0)
            (**v31)(v31, 2, 0, 0);
          if (*(_BYTE *)(v16 + 166))
          {
            v61 = *(_QWORD *)(a1 + 80);
            *(_QWORD *)(a1 + 80) = v61 + 1;
            if ((v33 & 1) != 0)
            {
LABEL_146:
              v44 = (*(uint64_t (**)(_QWORD, void (***)(_QWORD, uint64_t, uint64_t, unint64_t), BOOL))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v31, v29 == 32);
              if (v25)
LABEL_67:
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 8))(v25, v44);
              break;
            }
          }
          else
          {
            v61 = 0;
            if ((v33 & 1) != 0)
              goto LABEL_146;
          }
          (**v31)(v31, 2, v61, 0);
          goto LABEL_146;
        }
        if (v25)
        {
          (**(void (***)(uint64_t, uint64_t, uint64_t, _QWORD))v25)(v25, 8, a5, 0);
          (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))v25)(v25, 6, 0, 0);
          (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))v25)(v25, 4, 0, 0);
          v47 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
          (**(void (***)(uint64_t, uint64_t, _QWORD, unint64_t))v25)(v25, 4, 0, v47);
        }
        else
        {
          CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
        }
        if (v130)
          CI::SerialObjectPtrArray::append((uint64_t)v130, *((CI::Object **)v130 + 3));
        if (v25)
          (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))v25)(v25, 2, 0, 0);
        if (*(_BYTE *)(v16 + 166))
        {
          v46 = *(_QWORD *)(a1 + 80);
          *(_QWORD *)(a1 + 80) = v46 + 1;
          if (v25)
            goto LABEL_135;
        }
        else
        {
          v46 = 0;
          if (!v25)
            break;
LABEL_135:
          (**(void (***)(uint64_t, uint64_t, uint64_t, _QWORD))v25)(v25, 2, v46, 0);
        }
        break;
      case 33:
      case 34:
        if (*(_QWORD *)(a1 + 64)
          && *(_QWORD *)(a1 + 72)
          && (v40 = (void (***)(_QWORD, uint64_t, uint64_t, unint64_t))(***(uint64_t (****)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), 5), (v41 = v40) != 0))
        {
          (**v40)(v40, 7, a5, 0);
          (**v41)(v41, 6, 0, 0);
          (**v41)(v41, 4, 0, 0);
          v42 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
          (**v41)(v41, 4, 0, v42);
          v43 = 0;
        }
        else
        {
          CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
          v41 = 0;
          v43 = 1;
        }
        if (v130)
          CI::SerialObjectPtrArray::append((uint64_t)v130, *((CI::Object **)v130 + 3));
        if ((v43 & 1) == 0)
          (**v41)(v41, 2, 0, 0);
        v44 = (*(uint64_t (**)(_QWORD, void (***)(_QWORD, uint64_t, _QWORD, unint64_t), BOOL))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v41, v29 == 34);
        if (v25)
          goto LABEL_67;
        break;
      case 35:
        if (v25)
          (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))v25)(v25, 6, 0, 0);
        break;
      case 36:
        if (v25)
          (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))v25)(v25, 4, 0, 0);
        break;
      case 37:
        v45 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
        if (v25)
          (**(void (***)(uint64_t, uint64_t, _QWORD, unint64_t))v25)(v25, 4, 0, v45);
        if (v130)
          CI::SerialObjectPtrArray::append((uint64_t)v130, *((CI::Object **)v130 + 3));
        break;
      case 38:
        if (v25)
          (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD))v25)(v25, 2, 0, 0);
        break;
      case 39:
        if (*(_BYTE *)(v16 + 166))
        {
          v46 = *(_QWORD *)(a1 + 80);
          *(_QWORD *)(a1 + 80) = v46 + 1;
          if (v25)
            goto LABEL_135;
          break;
        }
        v46 = 0;
        if (!v25)
          break;
        goto LABEL_135;
      default:
        goto LABEL_49;
    }
LABEL_237:
    ++v26;
  }
  CI::MetalDAGHelper::add_function_for_kernel((CI::MetalDAGHelper *)a1, (const CI::Kernel *)v16);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v25);
}

void sub_19241896C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CI::DAGHelper::TextureReadFunction::~TextureReadFunction((CI::DAGHelper::TextureReadFunction *)(v1 - 208));
  _Unwind_Resume(a1);
}

uint64_t CI::MetalDAGHelper::color_output_for_kernel(CI::MetalDAGHelper *this, const CI::Kernel *a2, unsigned int a3, unint64_t *a4)
{
  char v5;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  unint64_t v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t v18;
  uint64_t v19;

  v18 = 0;
  v19 = 0;
  if (*((_DWORD *)a2 + 4))
  {
    v5 = a3;
    if (*((_QWORD *)a2 + 16) == 2 && *((_QWORD *)a2 + 17) == 2)
    {
      v10 = 0;
      v11 = 0;
      v12 = (*a4)++;
      v13 = &CI::MetalDAGHelper::color_output_for_kernel(CI::Kernel const*,unsigned char,unsigned long &)::sGroupOutputFunctions[(a3 >> 1) & 1];
      do
      {
        CI::MetalDAGHelper::add_function_with_name(this, v13[v10], 0);
        CI::MetalDAGHelper::add_colour_inout_function_info((uint64_t)this, v12);
        v14 = (*a4)++;
        v15 = (_WORD *)((char *)&v18 + v10);
        if ((v5 & 2) != 0)
        {
          v15[4] = v14;
          v16 = (_WORD *)&v18 + v11;
        }
        else
        {
          *v15 = v14;
          v16 = v15 + 4;
        }
        *v16 = 0;
        ++v11;
        v10 += 2;
      }
      while (v10 != 8);
    }
    else
    {
      v7 = (*a4)++;
      if ((a3 & 2) != 0)
      {
        LOWORD(v19) = v7;
        v8 = &v18;
      }
      else
      {
        LOWORD(v18) = v7;
        v8 = &v19;
      }
      *(_WORD *)v8 = 0;
    }
  }
  return v18;
}

uint64_t CI::MetalDAGHelper::build_dag(CI::MetalDAGHelper *this, const CI::Node *a2, const CI::ProgramNode *a3, CI::SerialObjectPtrArray *a4, uint64_t a5)
{
  NSObject *v10;
  os_signpost_id_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  char *v15;
  uint64_t v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  std::string v31;
  void *__p[3];
  char v33;
  unint64_t v34;
  _QWORD v35[10];
  _QWORD v36[6];
  _QWORD v37[7];
  _QWORD v38[10];
  uint8_t buf[8];
  uint8_t *v40;
  uint64_t v41;
  __n128 (*v42)(__n128 *, __n128 *);
  uint64_t (*v43)();
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[9];
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[63];
  unint64_t *v53;

  if (CI_VERBOSE_SIGNPOSTS())
  {
    v10 = ci_signpost_log_render();
    v11 = *((int *)a3 + 9) | (unint64_t)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 272))(*((_QWORD *)this + 3)) << 32);
    if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v11, "build_dag", (const char *)&unk_192520C83, buf, 2u);
    }
  }
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 272))(*((_QWORD *)this + 3));
  TimerBase::TimerBase((uint64_t)v52, v12, *((_DWORD *)a3 + 9), (uint64_t)"build_dag", 5);
  v48 = 0;
  v49 = &v48;
  v50 = 0x2020000000;
  v51 = a5 + 1;
  v13 = MEMORY[0x1E0C809B0];
  v47[0] = MEMORY[0x1E0C809B0];
  v47[1] = 3221225472;
  v47[2] = ___ZN2CI14MetalDAGHelper9build_dagEPKNS_4NodeEPKNS_11ProgramNodeEPNS_20SerialObjectPtrArrayEm_block_invoke;
  v47[3] = &unk_1E2EC2A78;
  v47[6] = a5;
  v47[7] = a3;
  v47[8] = a4;
  v47[4] = &v48;
  v47[5] = this;
  CI::ProgramNode::traverse_dag_preorder((uint64_t)a3, (unint64_t)a2, (uint64_t)v47, (uint64_t)&__block_literal_global_92);
  *(_QWORD *)buf = 0;
  v40 = buf;
  v41 = 0x4012000000;
  v42 = __Block_byref_object_copy__25;
  v43 = __Block_byref_object_dispose__25;
  v45 = 0;
  v46 = 0;
  v44 = "";
  if (*((_BYTE *)a3 + 136))
  {
    v38[0] = v13;
    v38[1] = 3221225472;
    v38[2] = ___ZN2CI14MetalDAGHelper9build_dagEPKNS_4NodeEPKNS_11ProgramNodeEPNS_20SerialObjectPtrArrayEm_block_invoke_44;
    v38[3] = &unk_1E2EC2AC0;
    v38[6] = this;
    v38[7] = a5;
    v38[8] = a3;
    v38[9] = a4;
    v38[4] = &v48;
    v38[5] = buf;
    CI::ProgramNode::traverse_dag_preorder((uint64_t)a3, (unint64_t)a2, (uint64_t)v38, 0);
  }
  else
  {
    v37[0] = v13;
    v37[1] = 3221225472;
    v37[2] = ___ZN2CI14MetalDAGHelper9build_dagEPKNS_4NodeEPKNS_11ProgramNodeEPNS_20SerialObjectPtrArrayEm_block_invoke_2_45;
    v37[3] = &__block_descriptor_56_e33_v60__0_v8r_v16i24i28_v32Q40_48i56l;
    v37[4] = this;
    v37[5] = a3;
    v37[6] = a4;
    CI::ProgramNode::traverse_dag_preorder((uint64_t)a3, (unint64_t)a2, (uint64_t)v37, (uint64_t)&__block_literal_global_47_0);
    v36[0] = v13;
    v36[1] = 3221225472;
    v36[2] = ___ZN2CI14MetalDAGHelper9build_dagEPKNS_4NodeEPKNS_11ProgramNodeEPNS_20SerialObjectPtrArrayEm_block_invoke_4;
    v36[3] = &__block_descriptor_48_e33_v60__0_v8r_v16i24i28_v32Q40_48i56l;
    v36[4] = this;
    v36[5] = a5;
    CI::ProgramNode::traverse_dag_preorder((uint64_t)a3, (unint64_t)a2, (uint64_t)v36, (uint64_t)&__block_literal_global_52_1);
  }
  v35[0] = v13;
  v35[1] = 3221225472;
  v35[2] = ___ZN2CI14MetalDAGHelper9build_dagEPKNS_4NodeEPKNS_11ProgramNodeEPNS_20SerialObjectPtrArrayEm_block_invoke_6;
  v35[3] = &unk_1E2EC2AC0;
  v35[6] = this;
  v35[7] = a5;
  v35[8] = a3;
  v35[9] = a4;
  v35[4] = &v48;
  v35[5] = buf;
  CI::ProgramNode::traverse_dag((uint64_t)a3, (unint64_t)a2, (uint64_t)v35, (uint64_t)&__block_literal_global_53_1);
  v14 = v40;
  if (!*((_WORD *)v40 + 24) && !*((_WORD *)v40 + 28) && *((_QWORD *)this + 21))
  {
    v15 = (char *)this + 152;
    v16 = *((_QWORD *)this + 19);
    v34 = *(_QWORD *)(v16 + 32);
    if (*(char *)(v16 + 63) < 0)
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v16 + 40), *(_QWORD *)(v16 + 48));
    else
      v31 = *(std::string *)(v16 + 40);
    std::vector<unsigned long>::vector(__p, v16 + 64);
    v33 = *(_BYTE *)(v16 + 88);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v31;
    else
      v17 = (std::string *)v31.__r_.__value_.__r.__words[0];
    CI::MetalDAGHelper::add_function_with_name(this, (const char *)v17, 0);
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v31.__r_.__value_.__l.__size_;
    if (size != 14)
      goto LABEL_26;
    v19 = &v31;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = (std::string *)v31.__r_.__value_.__r.__words[0];
    v20 = v19->__r_.__value_.__r.__words[0];
    v21 = *(std::string::size_type *)((char *)v19->__r_.__value_.__r.__words + 6);
    if (v20 == 0x646165725F69635FLL && v21 == 0x6C657869705F6461)
      CI::MetalDAGHelper::add_read_pixel_function_info((uint64_t)this, *(_QWORD *)__p[0], *((_QWORD *)__p[0] + 1), *((_QWORD *)__p[0] + 2), *((_QWORD *)__p[0] + 3));
    else
LABEL_26:
      CI::MetalDAGHelper::add_read_pixel_420_function_info((uint64_t)this, *(_QWORD *)__p[0], *((_QWORD *)__p[0] + 1), *((_QWORD *)__p[0] + 2), *((_QWORD *)__p[0] + 3), *((_QWORD *)__p[0] + 4), *((_QWORD *)__p[0] + 5), *((_QWORD *)__p[0] + 6));
    v23 = v49[3];
    v49[3] = v23 + 1;
    v24 = (uint64_t **)((char *)this + 128);
    v53 = &v34;
    *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t **)this + 16, &v34, (uint64_t)&std::piecewise_construct, (uint64_t **)&v53)+ 20) = v23;
    if (v33)
    {
      CI::MetalDAGHelper::add_function_with_name(this, "_ci_srgb_to_linear", 0);
      v53 = &v34;
      v25 = std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t **)this + 16, &v34, (uint64_t)&std::piecewise_construct, (uint64_t **)&v53);
      v26 = *((unsigned __int16 *)v25 + 20);
      if (!*((_WORD *)v25 + 20))
        v26 = *((unsigned __int16 *)v25 + 24);
      CI::MetalDAGHelper::add_colour_inout_function_info((uint64_t)this, v26);
      v27 = v49[3];
      v49[3] = v27 + 1;
      v53 = &v34;
      *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v24, &v34, (uint64_t)&std::piecewise_construct, (uint64_t **)&v53)+ 20) = v27;
    }
    std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>>>::__erase_unique<unsigned long long>((uint64_t)v15, &v34);
    v53 = &v34;
    v28 = std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v24, &v34, (uint64_t)&std::piecewise_construct, (uint64_t **)&v53);
    *((_OWORD *)v40 + 3) = *(_OWORD *)(v28 + 5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v14 = v40;
  }
  v29 = *((_QWORD *)v14 + 6);
  _Block_object_dispose(buf, 8);
  _Block_object_dispose(&v48, 8);
  CI::MetalDAGHelper::build_dag(CI::Node const*,CI::ProgramNode const*,CI::SerialObjectPtrArray *,unsigned long)::SignpostTimer::~SignpostTimer((TimerBase *)v52);
  return v29;
}

void sub_19241904C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  _Block_object_dispose(&a54, 8);
  _Block_object_dispose((const void *)(v54 - 184), 8);
  CI::MetalDAGHelper::build_dag(CI::Node const*,CI::ProgramNode const*,CI::SerialObjectPtrArray *,unsigned long)::SignpostTimer::~SignpostTimer((TimerBase *)(v54 - 152));
  _Unwind_Resume(a1);
}

void ___ZN2CI14MetalDAGHelper9build_dagEPKNS_4NodeEPKNS_11ProgramNodeEPNS_20SerialObjectPtrArrayEm_block_invoke(_QWORD *a1, CI::Object *this, int a3, int a4, int a5, unint64_t a6, uint64_t a7, char *a8, int a9)
{
  uint64_t v14;
  uint64_t v15;
  CI::ColorKernelNode *v16;
  const CI::Kernel *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  CI::Object *v27;
  uint64_t v28;
  unint64_t *v29;

  if (a9 == -1)
  {
    v14 = a1[5];
    v27 = this;
    v28 = 0;
    if (this)
      CI::Object::ref((uint64_t)this);
    v15 = (*(uint64_t (**)(CI::Object *, _QWORD))(*(_QWORD *)this + 320))(this, *(_QWORD *)(v14 + 24));
    v28 = v15;
    if (v15)
      v16 = (CI::ColorKernelNode *)v15;
    else
      v16 = v27;
    if ((*(unsigned int (**)(CI::ColorKernelNode *))(*(_QWORD *)v16 + 16))(v16) == 50)
    {
      v17 = (const CI::Kernel *)*((_QWORD *)v16 + 6);
      if (a6)
      {
        v26 = CI::hash_dag_node_id(a6, a7, 0);
        v29 = &v26;
        v18 = std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t **)(v14 + 104), &v26, (uint64_t)&std::piecewise_construct, (uint64_t **)&v29)+ 5;
      }
      else
      {
        v18 = a1 + 6;
      }
      v19 = *v18;
      CI::MetalDAGHelper::add_function_for_kernel((CI::MetalDAGHelper *)v14, v17);
      CI::MetalDAGHelper::add_function_info(v14, v20, v16, a1[8], v19, v21, 0);
      v22 = CI::hash_dag_node_id((unint64_t)this, a7, a8);
      v23 = CI::hash_dag_node_id((unint64_t)this, v22, 0);
      v24 = *(_QWORD *)(a1[4] + 8);
      v25 = *(_QWORD *)(v24 + 24);
      *(_QWORD *)(v24 + 24) = v25 + 1;
      v26 = v23;
      v29 = &v26;
      std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t **)(v14 + 104), &v26, (uint64_t)&std::piecewise_construct, (uint64_t **)&v29)[5] = v25;
    }
    CI::ConvertedNodeRAII::~ConvertedNodeRAII((CI::ConvertedNodeRAII *)&v27);
  }
}

void sub_192419238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CI::ConvertedNodeRAII::~ConvertedNodeRAII((CI::ConvertedNodeRAII *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2CI14MetalDAGHelper9build_dagEPKNS_4NodeEPKNS_11ProgramNodeEPNS_20SerialObjectPtrArrayEm_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2) ^ 1;
}

__n128 __Block_byref_object_copy__25(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

__n128 ___ZN2CI14MetalDAGHelper9build_dagEPKNS_4NodeEPKNS_11ProgramNodeEPNS_20SerialObjectPtrArrayEm_block_invoke_44(uint64_t a1, const CI::GeneralKernelNode *a2, uint64_t a3, int a4, uint64_t a5, unint64_t a6, uint64_t a7, char *a8, int a9)
{
  uint64_t **v15;
  __n128 result;
  unint64_t v17;
  const CI::Kernel *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t *v28;

  if (a9 == -1)
  {
    v15 = *(uint64_t ***)(a1 + 48);
    if ((*(unsigned int (**)(const CI::GeneralKernelNode *))(*(_QWORD *)a2 + 16))(a2) == 51
      && ((*(uint64_t (**)(const CI::GeneralKernelNode *))(*(_QWORD *)a2 + 296))(a2) & 1) == 0)
    {
      v17 = CI::hash_dag_node_id((unint64_t)a2, a7, a8);
      v18 = (const CI::Kernel *)*((_QWORD *)a2 + 6);
      if (a6)
      {
        v27 = CI::hash_dag_node_id(a6, a7, 0);
        v28 = &v27;
        v19 = std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v15 + 13, &v27, (uint64_t)&std::piecewise_construct, (uint64_t **)&v28)+ 5;
      }
      else
      {
        v19 = (uint64_t *)(a1 + 56);
      }
      v20 = *v19;
      v21 = CI::MetalDAGHelper::add_function_for_kernel((CI::MetalDAGHelper *)v15, v18);
      CI::MetalDAGHelper::add_function_info((CI::MetalDAGHelper *)v15, *(const CI::ProgramNode **)(a1 + 64), a2, *(CI::Object ***)(a1 + 72), v20, a4);
      v22 = CI::MetalDAGHelper::color_output_for_kernel((CI::MetalDAGHelper *)v15, v18, v21, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
      v24 = v23;
      v25 = v15 + 16;
      v27 = v17;
      v28 = &v27;
      v26 = std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v25, &v27, (uint64_t)&std::piecewise_construct, (uint64_t **)&v28);
      v26[5] = v22;
      v26[6] = v24;
      v27 = v17;
      v28 = &v27;
      result = *(__n128 *)(std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v25, &v27, (uint64_t)&std::piecewise_construct, (uint64_t **)&v28)+ 5);
      *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = result;
    }
  }
  return result;
}

double ___ZN2CI14MetalDAGHelper9build_dagEPKNS_4NodeEPKNS_11ProgramNodeEPNS_20SerialObjectPtrArrayEm_block_invoke_2_45(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v13;
  CI::Node *v14;
  const CI::Node *v15;
  int v16;
  unint64_t v17;
  double result;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t **v24;
  __int128 v25;
  _OWORD v26[2];
  __int128 v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t *v30;

  if (a9 != -1)
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = (CI::Node *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40), a9);
    if (a3 && !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 192))(a3, a5))
    {
      v15 = 0;
      v16 = 4;
    }
    else
    {
      v15 = (const CI::Node *)a9;
      v16 = 2;
    }
    v17 = CI::hash_image_node_id(a2, v15);
    v29 = v17;
    v19 = *(_QWORD **)(v13 + 184);
    if (!v19)
      goto LABEL_17;
    v20 = v13 + 184;
    do
    {
      v21 = v19[4];
      v22 = v21 >= v17;
      if (v21 >= v17)
        v23 = v19;
      else
        v23 = v19 + 1;
      if (v22)
        v20 = (uint64_t)v19;
      v19 = (_QWORD *)*v23;
    }
    while (*v23);
    if (v20 == v13 + 184 || v17 < *(_QWORD *)(v20 + 32))
    {
LABEL_17:
      CI::MetalDAGHelper::add_arguments_for_image_node(v13, v14, a9, v16, *(_QWORD *)(a1 + 48), (uint64_t)v26);
      v30 = &v29;
      v24 = std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)(v13 + 176), &v29, (uint64_t)&std::piecewise_construct, &v30);
      v25 = v26[1];
      *(_OWORD *)(v24 + 5) = v26[0];
      *(_OWORD *)(v24 + 7) = v25;
      result = *(double *)&v27;
      *(_OWORD *)(v24 + 9) = v27;
      v24[11] = v28;
    }
  }
  return result;
}

uint64_t ___ZN2CI14MetalDAGHelper9build_dagEPKNS_4NodeEPKNS_11ProgramNodeEPNS_20SerialObjectPtrArrayEm_block_invoke_3(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2) ^ 1;
}

unint64_t ___ZN2CI14MetalDAGHelper9build_dagEPKNS_4NodeEPKNS_11ProgramNodeEPNS_20SerialObjectPtrArrayEm_block_invoke_4(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, char *a8, int a9)
{
  unint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  int v40;
  uint64_t *v41;
  _BOOL4 v42;
  char v43;
  unint64_t v44;
  void *v45;
  void *v46[2];
  char v47;
  std::string v48;
  void *__p;
  void *v50;
  void *v51;
  void *v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55[2];

  if (a9 != -1)
  {
    v13 = result;
    v14 = *(_QWORD *)(result + 32);
    if (!a3 || (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 192))(a3, a5), (_DWORD)result))
    {
      result = CI::hash_dag_node_id(a2, a7, a8);
      v15 = (void *)result;
      v16 = *(_QWORD **)(v14 + 136);
      if (!v16)
        goto LABEL_15;
      v17 = (_QWORD *)(v14 + 136);
      do
      {
        v18 = v16[4];
        v19 = v18 >= result;
        if (v18 >= result)
          v20 = v16;
        else
          v20 = v16 + 1;
        if (v19)
          v17 = v16;
        v16 = (_QWORD *)*v20;
      }
      while (*v20);
      if (v17 == (_QWORD *)(v14 + 136) || result < v17[4])
      {
LABEL_15:
        v21 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2);
        v22 = *(_QWORD *)a2;
        if (v21 != 46)
        {
          if ((*(unsigned int (**)(unint64_t))(v22 + 16))(a2) != 44)
          {
            v40 = 0;
            v42 = 0;
            v44 = 0;
            goto LABEL_20;
          }
          v22 = *(_QWORD *)a2;
        }
        v44 = (*(int (**)(unint64_t))(v22 + 208))(a2);
        v42 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 304))(a2) == 1;
        v40 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 408))(a2);
LABEL_20:
        v54 = CI::hash_image_node_id(a2, (const CI::Node *)a9);
        v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
        v23 = std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)(v14 + 176), &v54, (uint64_t)&std::piecewise_construct, &v48);
        v25 = v23[5];
        v24 = v23[6];
        v26 = v23[7];
        v41 = v23[8];
        v27 = v23[9];
        v28 = v23[10];
        v43 = *((_BYTE *)v23 + 88);
        if (a6)
        {
          v29 = (void *)CI::hash_dag_node_id(a6, a7, 0);
          v30 = v14;
          v51 = v29;
          v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
          v31 = std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t **)(v14 + 104), (unint64_t *)&v51, (uint64_t)&std::piecewise_construct, (uint64_t **)&v48)+ 5;
        }
        else
        {
          v30 = v14;
          v31 = (uint64_t *)(v13 + 40);
        }
        v32 = *v31;
        if (v44 < 2)
        {
          v36 = operator new(0x20uLL);
          v52 = v36 + 4;
          v53 = v36 + 4;
          *v36 = v25;
          v36[1] = v24;
          v36[2] = v32;
          v36[3] = v26;
          v51 = v36;
          std::string::basic_string[abi:nn180100]<0>(v46, "_ci_read_pixel");
          CI::MetalDAGHelper::TextureReadFunction::TextureReadFunction(&v48, (__int128 *)v46, (uint64_t)&v51);
          v34 = v30;
          v45 = v15;
          v55[0] = &v45;
          v37 = std::__tree<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v30 + 152, (unint64_t *)&v45, (uint64_t)&std::piecewise_construct, v55);
          CI::DAGHelper::TextureReadFunction::operator=((std::string *)(v37 + 5), &v48);
        }
        else
        {
          v33 = operator new(0x38uLL);
          v52 = v33 + 7;
          v53 = v33 + 7;
          *v33 = v25;
          v33[1] = v24;
          v33[2] = v32;
          v33[3] = v26;
          v33[4] = v41;
          v33[5] = v27;
          v33[6] = v28;
          v51 = v33;
          if (v42)
          {
            v34 = v30;
            if (!v40 || (*(_BYTE *)(*(_QWORD *)(v30 + 24) + 456) & 1) != 0)
            {
              std::string::basic_string[abi:nn180100]<0>(v46, "_ci_read_pixel_420_r_rg");
              CI::MetalDAGHelper::TextureReadFunction::TextureReadFunction(&v48, (__int128 *)v46, (uint64_t)&v51);
              v45 = v15;
              v55[0] = &v45;
              v39 = std::__tree<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v30 + 152, (unint64_t *)&v45, (uint64_t)&std::piecewise_construct, v55);
              CI::DAGHelper::TextureReadFunction::operator=((std::string *)(v39 + 5), &v48);
            }
            else
            {
              std::string::basic_string[abi:nn180100]<0>(v46, "_ci_read_pixel_420_packed");
              CI::MetalDAGHelper::TextureReadFunction::TextureReadFunction(&v48, (__int128 *)v46, (uint64_t)&v51);
              v45 = v15;
              v55[0] = &v45;
              v35 = std::__tree<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v30 + 152, (unint64_t *)&v45, (uint64_t)&std::piecewise_construct, v55);
              CI::DAGHelper::TextureReadFunction::operator=((std::string *)(v35 + 5), &v48);
            }
          }
          else
          {
            std::string::basic_string[abi:nn180100]<0>(v46, "_ci_read_pixel_420");
            v34 = v30;
            CI::MetalDAGHelper::TextureReadFunction::TextureReadFunction(&v48, (__int128 *)v46, (uint64_t)&v51);
            v45 = v15;
            v55[0] = &v45;
            v38 = std::__tree<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v30 + 152, (unint64_t *)&v45, (uint64_t)&std::piecewise_construct, v55);
            CI::DAGHelper::TextureReadFunction::operator=((std::string *)(v38 + 5), &v48);
          }
        }
        if (__p)
        {
          v50 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
        if (v47 < 0)
          operator delete(v46[0]);
        if (v51)
        {
          v52 = v51;
          operator delete(v51);
        }
        v51 = v15;
        v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
        result = (unint64_t)std::__tree<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v34 + 152, (unint64_t *)&v51, (uint64_t)&std::piecewise_construct, &v48);
        *(_BYTE *)(result + 88) = v43 & 1;
      }
    }
  }
  return result;
}

void sub_1924199F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (a19 < 0)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN2CI14MetalDAGHelper9build_dagEPKNS_4NodeEPKNS_11ProgramNodeEPNS_20SerialObjectPtrArrayEm_block_invoke_5(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2) ^ 1;
}

void ___ZN2CI14MetalDAGHelper9build_dagEPKNS_4NodeEPKNS_11ProgramNodeEPNS_20SerialObjectPtrArrayEm_block_invoke_6(uint64_t a1, CI::Object *this, int a3, int a4, int a5, unint64_t a6, uint64_t a7, char *a8, int a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _WORD *v39;
  uint64_t v40;
  unsigned __int8 v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t j;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _WORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  CI::ColorKernelNode *v63;
  unint64_t v64;
  CI::Object *v65;
  uint64_t v66;
  unint64_t *v67;

  if (a9 == -1)
  {
    v15 = *(_QWORD *)(a1 + 48);
    v65 = this;
    v66 = 0;
    if (this)
      CI::Object::ref((uint64_t)this);
    v16 = (*(uint64_t (**)(CI::Object *, _QWORD))(*(_QWORD *)this + 320))(this, *(_QWORD *)(v15 + 24));
    v66 = v16;
    if (!v16)
      v16 = (uint64_t)v65;
    v63 = (CI::ColorKernelNode *)v16;
    if ((*(unsigned int (**)(void))(*(_QWORD *)v16 + 16))() == 49)
    {
      v17 = *((_QWORD *)v63 + 6);
      if (a6)
      {
        v64 = CI::hash_dag_node_id(a6, a7, 0);
        v67 = &v64;
        v18 = std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t **)(v15 + 104), &v64, (uint64_t)&std::piecewise_construct, (uint64_t **)&v67)+ 5;
      }
      else
      {
        v18 = (uint64_t *)(a1 + 56);
      }
      v21 = *v18;
      v60 = *(_DWORD *)(v17 + 16);
      if (v60 == 3)
        v22 = *(_BYTE *)(v17 + 161) | 2;
      else
        v22 = *(_BYTE *)(v17 + 161);
      v62 = CI::hash_dag_node_id((unint64_t)this, a7, a8);
      CI::MetalDAGHelper::add_function_info(v15, *(CI::SerialStringArray ***)(a1 + 64), v63, *(_QWORD *)(a1 + 72), v21, a4, a7, a8, 0, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v22);
      v23 = a7;
      v24 = v22;
      v25 = CI::MetalDAGHelper::color_output_for_kernel((CI::MetalDAGHelper *)v15, (const CI::Kernel *)v17, v22, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
      v58 = v26;
      v27 = v25;
      v28 = v15;
      v29 = a8;
      v30 = v28;
      v31 = (uint64_t **)(v28 + 128);
      v64 = v62;
      v67 = &v64;
      v32 = std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t **)(v28 + 128), &v64, (uint64_t)&std::piecewise_construct, (uint64_t **)&v67);
      v32[5] = v27;
      v32[6] = v58;
      v33 = 1;
      for (i = 58; i != 64; i += 2)
      {
        v35 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        if (*(_WORD *)(v35 + i - 8) || *(_WORD *)(v35 + i))
        {
          CI::MetalDAGHelper::add_function_info(v30, *(CI::SerialStringArray ***)(a1 + 64), v63, *(_QWORD *)(a1 + 72), v21, a4, v23, v29, v33, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v24);
          v64 = v62;
          v67 = &v64;
          v36 = std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v31, &v64, (uint64_t)&std::piecewise_construct, (uint64_t **)&v67);
          v37 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
          v38 = *(_QWORD *)(v37 + 24);
          *(_QWORD *)(v37 + 24) = v38 + 1;
          if (v60 == 3)
          {
            *(_WORD *)((char *)v36 + i - 8) = v38;
            v39 = (_WORD *)((char *)v36 + i - 16);
          }
          else
          {
            *(_WORD *)((char *)v36 + i - 16) = v38;
            v39 = (_WORD *)v36 + v33 + 24;
          }
          *v39 = 0;
        }
        ++v33;
      }
    }
    else
    {
      if ((*(unsigned int (**)(CI::ColorKernelNode *))(*(_QWORD *)v63 + 16))(v63) != 51
        || !(*(unsigned int (**)(CI::ColorKernelNode *))(*(_QWORD *)v63 + 296))(v63))
      {
        goto LABEL_26;
      }
      v19 = *((_QWORD *)v63 + 6);
      if (a6)
      {
        v64 = CI::hash_dag_node_id(a6, a7, 0);
        v67 = &v64;
        v20 = std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t **)(v15 + 104), &v64, (uint64_t)&std::piecewise_construct, (uint64_t **)&v67)+ 5;
      }
      else
      {
        v20 = (uint64_t *)(a1 + 56);
      }
      v40 = *v20;
      v61 = *(_DWORD *)(v19 + 16);
      if (v61 == 3)
        v41 = *(_BYTE *)(v19 + 161) | 2;
      else
        v41 = *(_BYTE *)(v19 + 161);
      v62 = CI::hash_dag_node_id((unint64_t)this, a7, a8);
      CI::MetalDAGHelper::add_function_info(v15, *(CI::SerialStringArray ***)(a1 + 64), (uint64_t)v63, *(CI::SerialObjectPtrArray **)(a1 + 72), v40, a4, a7, a8, 0, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v41);
      v42 = v41;
      v43 = CI::MetalDAGHelper::color_output_for_kernel((CI::MetalDAGHelper *)v15, (const CI::Kernel *)v19, v41, (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
      v57 = v44;
      v59 = v43;
      v45 = v15;
      v46 = a7;
      v47 = a8;
      v48 = v45;
      v31 = (uint64_t **)(v45 + 128);
      v64 = v62;
      v67 = &v64;
      v49 = std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t **)(v45 + 128), &v64, (uint64_t)&std::piecewise_construct, (uint64_t **)&v67);
      v49[5] = v59;
      v49[6] = v57;
      v50 = 1;
      for (j = 58; j != 64; j += 2)
      {
        v52 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        if (*(_WORD *)(v52 + j - 8) || *(_WORD *)(v52 + j))
        {
          CI::MetalDAGHelper::add_function_info(v48, *(CI::SerialStringArray ***)(a1 + 64), (uint64_t)v63, *(CI::SerialObjectPtrArray **)(a1 + 72), v40, a4, v46, v47, v50, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v42);
          v64 = v62;
          v67 = &v64;
          v53 = std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v31, &v64, (uint64_t)&std::piecewise_construct, (uint64_t **)&v67);
          v54 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
          v55 = *(_QWORD *)(v54 + 24);
          *(_QWORD *)(v54 + 24) = v55 + 1;
          if (v61 == 3)
          {
            *(_WORD *)((char *)v53 + j - 8) = v55;
            v56 = (_WORD *)((char *)v53 + j - 16);
          }
          else
          {
            *(_WORD *)((char *)v53 + j - 16) = v55;
            v56 = (_WORD *)v53 + v50 + 24;
          }
          *v56 = 0;
        }
        ++v50;
      }
    }
    v64 = v62;
    v67 = &v64;
    *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = *(_OWORD *)(std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v31, &v64, (uint64_t)&std::piecewise_construct, (uint64_t **)&v67)+ 5);
LABEL_26:
    CI::ConvertedNodeRAII::~ConvertedNodeRAII((CI::ConvertedNodeRAII *)&v65);
  }
}

void sub_192419FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  CI::ConvertedNodeRAII::~ConvertedNodeRAII((CI::ConvertedNodeRAII *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2CI14MetalDAGHelper9build_dagEPKNS_4NodeEPKNS_11ProgramNodeEPNS_20SerialObjectPtrArrayEm_block_invoke_7(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2) ^ 1;
}

void CI::MetalDAGHelper::build_dag(CI::Node const*,CI::ProgramNode const*,CI::SerialObjectPtrArray *,unsigned long)::SignpostTimer::~SignpostTimer(TimerBase *a1)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  uint8_t v5[16];

  if (CI_VERBOSE_SIGNPOSTS())
  {
    v2 = ci_signpost_log_render();
    v3 = *((_QWORD *)a1 + 1);
    if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v4 = v2;
      if (os_signpost_enabled(v2))
      {
        *(_WORD *)v5 = 0;
        _os_signpost_emit_with_name_impl(&dword_1921E4000, v4, OS_SIGNPOST_INTERVAL_END, v3, "build_dag", (const char *)&unk_192520C83, v5, 2u);
      }
    }
  }
  TimerBase::~TimerBase(a1);
}

void sub_19241A0F0(_Unwind_Exception *a1)
{
  TimerBase *v1;

  TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2CI14MetalDAGHelper15build_constantsEPKNS_11ProgramNodeE_block_invoke(uint64_t a1, CI *this, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[9];

  if (a6 == -1)
  {
    v12[7] = v6;
    v12[8] = v7;
    v8 = *(_QWORD *)(a1 + 32);
    v9 = CI::kernel_for_node(this, this);
    if (v9)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
      if (v10)
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 3221225472;
        v12[2] = ___ZN2CI14MetalDAGHelper15build_constantsEPKNS_11ProgramNodeE_block_invoke_2;
        v12[3] = &__block_descriptor_40_e26_v32__0r_v8Q16__NSString_24l;
        v12[4] = v8;
        CI::MetalKernel::iterateOverFunctionConstants(v10, (uint64_t)v12);
      }
    }
  }
  return 0;
}

uint64_t CI::kernel_for_node(CI *this, const CI::Node *a2)
{
  if ((*(unsigned int (**)(CI *, const CI::Node *))(*(_QWORD *)this + 16))(this, a2) == 49
    || (*(unsigned int (**)(CI *))(*(_QWORD *)this + 16))(this) == 50
    || (*(unsigned int (**)(CI *))(*(_QWORD *)this + 16))(this) == 51)
  {
    return *((_QWORD *)this + 6);
  }
  else
  {
    return 0;
  }
}

uint64_t ___ZN2CI14MetalDAGHelper15build_constantsEPKNS_11ProgramNodeE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 8) + 88))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

uint64_t CI::MetalDAGHelper::createMetalDAG(_QWORD *a1, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15[2];

  v6 = operator new();
  v7 = v6;
  v9 = (std::__shared_weak_count *)a1[2];
  v8 = a1[3];
  v15[0] = a1[1];
  v15[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  CI::MetalDAG::MetalDAG(v6, a2, v8, v15, a1[8], a1[9], a1[12], a3);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v7;
}

void sub_19241A2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<CI::StitchableFunctionDAGDescriptor>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  MEMORY[0x194025AAC](v9, 0x10F1C40832F53FDLL);
  _Unwind_Resume(a1);
}

uint64_t CI::is_kernel_metalextern_linkable(CI *this, const CI::MetalContext *a2, const CI::Kernel *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = 0;
  if (this && a2)
  {
    v6 = *((_QWORD *)this + 241);
    if (v6
      && (v7 = *((_QWORD *)a2 + 3),
          dispatch_sync(*(dispatch_queue_t *)(v6 + 56), &__block_literal_global_157),
          (objc_msgSend(*(id *)(v6 + 40), "containsObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7)) & 1) != 0))
    {
      return 1;
    }
    else
    {
      result = (*(uint64_t (**)(const CI::MetalContext *))(*(_QWORD *)a2 + 72))(a2);
      if (result)
        return *(_BYTE *)((*(uint64_t (**)(const CI::MetalContext *))(*(_QWORD *)a2 + 72))(a2) + 48) == 0;
    }
  }
  return result;
}

uint64_t CI::is_kernel_metalstitchable_linkable(CI *this, const CI::MetalContext *a2, const CI::Kernel *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = 0;
  if (this && a2)
  {
    v6 = *((_QWORD *)this + 242);
    if (v6
      && (v7 = *((_QWORD *)a2 + 3),
          dispatch_sync(*(dispatch_queue_t *)(v6 + 56), &__block_literal_global_157),
          (objc_msgSend(*(id *)(v6 + 40), "containsObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7)) & 1) != 0))
    {
      return 1;
    }
    else
    {
      result = (*(uint64_t (**)(const CI::MetalContext *))(*(_QWORD *)a2 + 72))(a2);
      if (result)
        return *(_BYTE *)((*(uint64_t (**)(const CI::MetalContext *))(*(_QWORD *)a2 + 72))(a2) + 48) != 0;
    }
  }
  return result;
}

BOOL CI::is_kernel_metalfosl_linkable(_BOOL8 this, const CI::Kernel *a2)
{
  if (this)
    return *(_QWORD *)(this + 32) != 0;
  return this;
}

uint64_t CI::create_metal_dag(CI *this, const CI::MetalContext *a2, const CI::MetalContext *a3, const CI::Node *a4, const CI::ProgramNode *a5, CI::SerialObjectPtrArray *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v15[26];

  CI::MetalDAGHelper::MetalDAGHelper((CI::MetalDAGHelper *)v15, a2);
  v11 = CI::MetalContext::device((id *)a2);
  CI::MetalDAGHelper::process_kernels((uint64_t)v15, v11, (const char *)this, a3, (uint64_t)a4, a5);
  v13 = v12;
  CI::MetalDAGHelper::~MetalDAGHelper(v15);
  return v13;
}

void sub_19241A4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  CI::MetalDAGHelper::~MetalDAGHelper(&a9);
  _Unwind_Resume(a1);
}

__n128 CI::MetalDAGHelper::process_kernels(uint64_t a1, uint64_t a2, const char *a3, const CI::Node *a4, uint64_t a5, CI::SerialObjectPtrArray *a6)
{
  __n128 result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned int *v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char **v37;
  unsigned __int16 v38;
  const char *v39;
  unsigned __int16 v40;
  __int16 v41;
  const char *v42;
  unsigned __int16 v43;
  __n128 *MetalDAG;
  uint64_t v45;
  _QWORD v46[4];

  CI::MetalDAGHelper::analyze_kernels(a1, a5);
  if (*(_DWORD *)(a1 + 32))
  {
    v45 = MEMORY[0x1E0C809B0];
    v46[0] = 3221225472;
    v46[1] = ___ZN2CI14MetalDAGHelper15build_constantsEPKNS_11ProgramNodeE_block_invoke;
    v46[2] = &__block_descriptor_40_e23_B36__0_v8r_v16i24i28i32l;
    v46[3] = a1;
    CI::ProgramNode::traverse_graph_preorder_stoppable(a5, (uint64_t)&v45);
    v12 = a5 + 140;
    v13 = CI::MetalContext::use_imageblocks_for_format(*(_QWORD *)(a1 + 24), *(_DWORD *)(a5 + 140));
    v14 = operator new();
    *(_QWORD *)v14 = 0;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_QWORD *)(v14 + 4) = 32;
    *(_QWORD *)(v14 + 16) = malloc_type_calloc(0x16uLL, 4uLL, 0x100004052888210uLL);
    *(_DWORD *)(v14 + 8) = 32;
    *(_QWORD *)(a1 + 64) = v14;
    v15 = operator new();
    *(_QWORD *)v15 = 0;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_OWORD *)(v15 + 32) = 0u;
    *(_OWORD *)(v15 + 48) = 0u;
    *(_QWORD *)(v15 + 4) = 32;
    *(_QWORD *)(v15 + 16) = malloc_type_calloc(0x16uLL, 4uLL, 0x100004052888210uLL);
    *(_DWORD *)(v15 + 8) = 32;
    *(_QWORD *)(a1 + 72) = v15;
    v16 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 45, 0);
    v17 = v16;
    v18 = "_ci_early_out";
    if (v13)
      v18 = "_ci_early_out_imageblock";
    v19 = "_ci_early_out_nothing";
    if (v13)
    {
      v19 = "_ci_early_out_imageblock_nothing";
      v20 = 0;
    }
    else
    {
      v20 = v16;
    }
    if (v13)
      v21 = "_ci_init_destcoord_imageblock";
    else
      v21 = "_ci_init_destcoord";
    if (*(_BYTE *)(a1 + 56))
      v22 = v19;
    else
      v22 = v18;
    CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, v22, 0);
    CI::MetalDAGHelper::add_early_out_function_info(a1, v20);
    CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, v21, 0);
    CI::MetalDAGHelper::add_init_destcoord_function_info(a1, v17);
    v23 = CI::MetalDAGHelper::build_dag((CI::MetalDAGHelper *)a1, a4, (const CI::ProgramNode *)a5, a6, 1);
    v25 = v23;
    v26 = v24;
    v45 = v23;
    v46[0] = v24;
    if (!((unsigned __int16)v23 | (unsigned __int16)v24))
      goto LABEL_56;
    if (*(_QWORD *)(a1 + 40) == 2 && *(_QWORD *)(a1 + 48) == 2)
    {
      v27 = *(unsigned int **)(a1 + 64);
      v28 = *v27;
      if ((int)v28 < 1)
      {
LABEL_22:
        v32 = *(_QWORD *)(a1 + 72);
        LODWORD(v29) = -1;
      }
      else
      {
        v29 = 0;
        v30 = v27 + 6;
        while (1)
        {
          v31 = v30;
          if (v29 >= 0xA)
            v31 = (unsigned int *)(*((_QWORD *)v27 + 2) + 4 * (v29 - 10));
          if (*v31 == 37)
            break;
          ++v29;
          ++v30;
          if (v28 == v29)
            goto LABEL_22;
        }
        v32 = *(_QWORD *)(a1 + 72);
        if ((int)v29 > 9)
        {
          v33 = (int *)(*(_QWORD *)(v32 + 16) + 4 * (v29 - 10));
          goto LABEL_24;
        }
      }
      v33 = (int *)(v32 + 4 * (int)v29 + 24);
LABEL_24:
      v34 = 0;
      v35 = *v33;
      if ((_WORD)v24)
        v36 = v46;
      else
        v36 = &v45;
      v37 = &CI::MetalDAGHelper::process_kernels(objc_object  {objcproto9MTLDevice}*,char const*,CI::Node const*,CI::ProgramNode const*,CI::SerialObjectPtrArray *)::sGroupWriteFunctions[(unsigned __int16)v24 != 0];
      do
      {
        CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, v37[v34], 0);
        CI::MetalDAGHelper::add_group_write_function_info(a1, *(unsigned __int16 *)((char *)v36 + v34), 1, v35);
        v34 += 2;
      }
      while (v34 != 8);
      goto LABEL_56;
    }
    if ((*(_BYTE *)(a5 + 144) & 1) != 0)
    {
      v41 = v23;
      if ((unsigned __int16)v23 <= (unsigned __int16)v24)
        v41 = v24;
      if ((_WORD)v24)
        v42 = "_ci_linear_to_srgb_h";
      else
        v42 = "_ci_linear_to_srgb";
      if (v26)
        v43 = v26;
      else
        v43 = v23;
      if (v26)
        v38 = v41 + 1;
      else
        v38 = 0;
      if (v26)
        v25 = v23;
      else
        v25 = v41 + 1;
      CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, v42, 0);
      CI::MetalDAGHelper::add_colour_inout_function_info(a1, v43);
      if (!v13)
        goto LABEL_33;
    }
    else
    {
      v38 = v24;
      if (!v13)
      {
LABEL_33:
        if (v26)
          v39 = "_ci_write_pixel_h";
        else
          v39 = "_ci_write_pixel";
        if (v26)
          v40 = v38;
        else
          v40 = v25;
        CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, v39, 0);
        CI::MetalDAGHelper::add_write_pixel_function_info(a1, v40);
        goto LABEL_56;
      }
    }
    CI_ENABLE_METAL_IMAGEBLOCKS();
    CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, "_ci_write_block_h", 0);
    CI::MetalDAGHelper::add_write_block_function_info(a1, v38);
LABEL_56:
    MetalDAG = (__n128 *)CI::MetalDAGHelper::createMetalDAG((_QWORD *)a1, a3, v12);
    result = *(__n128 *)(a1 + 40);
    MetalDAG[5] = result;
  }
  return result;
}

void sub_19241A910(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194025AAC](v1, 0x1010C40C0D7B093);
  _Unwind_Resume(a1);
}

void CI::MetalDAGHelper::analyze_kernels(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _QWORD v6[15];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __n128 (*v14)(__n128 *, __n128 *);
  uint64_t (*v15)();
  const char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 1928))
  {
    v42 = 0;
    v43 = &v42;
    v44 = 0x2020000000;
    v45 = 1;
    v38 = 0;
    v39 = &v38;
    v40 = 0x2020000000;
    v41 = 1;
    v34 = 0;
    v35 = &v34;
    v36 = 0x2020000000;
    v37 = 0;
    v30 = 0;
    v31 = &v30;
    v32 = 0x2020000000;
    v33 = 0;
    v26 = 0;
    v27 = &v26;
    v28 = 0x2020000000;
    v29 = 0;
    v22 = 0;
    v23 = &v22;
    v24 = 0x2020000000;
    v25 = 1;
    v18 = 0;
    v19 = &v18;
    v20 = 0x2020000000;
    v21 = 0;
    v11 = 0;
    v12 = &v11;
    v13 = 0x4012000000;
    v14 = __Block_byref_object_copy__56;
    v15 = __Block_byref_object_dispose__57;
    v16 = "";
    v17 = xmmword_19248E080;
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 0;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = ___ZN2CI14MetalDAGHelper15analyze_kernelsEPKNS_11ProgramNodeEPU19objcproto9MTLDevice11objc_object_block_invoke;
    v6[3] = &unk_1E2EC7820;
    v6[13] = a1;
    v6[14] = a2;
    v6[4] = &v26;
    v6[5] = &v7;
    v6[6] = &v38;
    v6[7] = &v42;
    v6[8] = &v34;
    v6[9] = &v30;
    v6[10] = &v22;
    v6[11] = &v18;
    v6[12] = &v11;
    CI::ProgramNode::traverse_graph_preorder_stoppable(a2, (uint64_t)v6);
    *(_OWORD *)(a1 + 40) = *((_OWORD *)v12 + 3);
    *(_BYTE *)(a1 + 56) = *((_BYTE *)v8 + 24);
    *(_BYTE *)(a1 + 36) = *((_BYTE *)v23 + 24);
    *(_BYTE *)(a1 + 37) = *((_BYTE *)v19 + 24);
    if ((*((_BYTE *)v39 + 24) || *((_BYTE *)v43 + 24))
      && !*((_BYTE *)v35 + 24)
      && (!*((_BYTE *)v27 + 24) || !*(_BYTE *)(a2 + 136) || *((_BYTE *)v31 + 24)))
    {
      v4 = CI_ENABLE_FUNCTION_STITCHING();
      v5 = 1;
      if (v4)
      {
        if (*((_BYTE *)v39 + 24))
          v5 = 2;
        else
          v5 = 1;
      }
      *(_DWORD *)(a1 + 32) = v5;
      CI::MetalDAGHelper::build_dag_object((CI::MetalDAGHelper *)a1);
    }
    _Block_object_dispose(&v7, 8);
    _Block_object_dispose(&v11, 8);
    _Block_object_dispose(&v18, 8);
    _Block_object_dispose(&v22, 8);
    _Block_object_dispose(&v26, 8);
    _Block_object_dispose(&v30, 8);
    _Block_object_dispose(&v34, 8);
    _Block_object_dispose(&v38, 8);
    _Block_object_dispose(&v42, 8);
  }
}

void sub_19241ABA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 224), 8);
  _Block_object_dispose((const void *)(v37 - 192), 8);
  _Block_object_dispose((const void *)(v37 - 160), 8);
  _Block_object_dispose((const void *)(v37 - 128), 8);
  _Block_object_dispose((const void *)(v37 - 96), 8);
  _Block_object_dispose((const void *)(v37 - 64), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__56(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

BOOL ___ZN2CI14MetalDAGHelper15analyze_kernelsEPKNS_11ProgramNodeEPU19objcproto9MTLDevice11objc_object_block_invoke(uint64_t a1, CI::Object *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v7;
  uint64_t v10;
  uint64_t v11;
  const CI::Node *v12;
  CI *v13;
  const CI::Kernel *v14;
  uint64_t v15;
  const CI::Kernel *v16;
  NSString *v17;
  id *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  CI::Object *v24;
  uint64_t v25;

  if ((_DWORD)a6 == -1)
  {
    v10 = *(_QWORD *)(a1 + 104);
    v24 = this;
    v25 = 0;
    if (this)
      CI::Object::ref((uint64_t)this);
    v11 = (*(uint64_t (**)(CI::Object *, _QWORD))(*(_QWORD *)this + 320))(this, *(_QWORD *)(v10 + 24));
    v25 = v11;
    if (v11)
      v13 = (CI *)v11;
    else
      v13 = v24;
    if (!a3
      && (*(unsigned int (**)(CI::Object *))(*(_QWORD *)this + 16))(this) == 51
      && (HIDWORD(*((_QWORD *)this + 17)) && *((_QWORD *)this + 17) && *((_DWORD *)this + 36)
       || HIDWORD(*(_QWORD *)((char *)this + 148))
       && *(_QWORD *)((char *)this + 148)
       && *((_DWORD *)this + 39)))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    }
    v15 = CI::kernel_for_node(v13, v12);
    if (v15)
    {
      if ((CI::is_kernel_metalstitchable_linkable(*(CI **)(v10 + 24), (const CI::MetalContext *)v15, v14) & 1) == 0)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
      if ((CI::is_kernel_metalextern_linkable(*(CI **)(v10 + 24), (const CI::MetalContext *)v15, v16) & 1) == 0)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15) == 62 && *(_BYTE *)(v15 + 176))
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15) && !*(_QWORD *)(v15 + 32))
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15))
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 0;
        if (CI_HARVESTING_SPECIFIC_LIBRARY_LIST())
        {
          v17 = (NSString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", CI_HARVESTING_SPECIFIC_LIBRARY_LIST(), 1);
          v18 = (id *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
          if (CI::MetalKernel::isFromLibrary(v18, v17))
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 1;
        }
      }
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
      v20 = *(_QWORD *)(v19 + 48);
      if (v20 <= *(_QWORD *)(v15 + 128))
        v20 = *(_QWORD *)(v15 + 128);
      *(_QWORD *)(v19 + 48) = v20;
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
      v22 = *(_QWORD *)(v21 + 56);
      if (v22 <= *(_QWORD *)(v15 + 136))
        v22 = *(_QWORD *)(v15 + 136);
      *(_QWORD *)(v21 + 56) = v22;
    }
    CI::ConvertedNodeRAII::~ConvertedNodeRAII((CI::ConvertedNodeRAII *)&v24);
  }
  else
  {
    v7 = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 112) + 48))(*(_QWORD *)(a1 + 112), a6);
    if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v7 + 16))(v7) == 52 && (v7[144] & 1) != 0)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  return !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) == 0;
}

void sub_19241AED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CI::ConvertedNodeRAII::~ConvertedNodeRAII((CI::ConvertedNodeRAII *)&a9);
  _Unwind_Resume(a1);
}

void CI::MetalDAGHelper::build_dag_object(CI::MetalDAGHelper *this)
{
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  __int128 v13;

  v2 = *((_DWORD *)this + 8);
  switch(v2)
  {
    case 1:
      std::allocate_shared[abi:nn180100]<CI::LegacyDAGDescriptor,std::allocator<CI::LegacyDAGDescriptor>,BOOL &,BOOL &,void>((char *)this + 36, (char *)this + 37, &v13);
      std::shared_ptr<CI::ConcatenatedDAGDescriptor>::operator=[abi:nn180100]<CI::LegacyDAGDescriptor,void>((uint64_t)this + 8, &v13);
      v3 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
      if (!*((_QWORD *)&v13 + 1))
        return;
      v4 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      break;
    case 2:
      std::allocate_shared[abi:nn180100]<CI::StitchableFunctionDAGDescriptor,std::allocator<CI::StitchableFunctionDAGDescriptor>,BOOL &,BOOL &,void>((char *)this + 36, (char *)this + 37, &v13);
      std::shared_ptr<CI::ConcatenatedDAGDescriptor>::operator=[abi:nn180100]<CI::StitchableFunctionDAGDescriptor,void>((_QWORD *)this + 1, (uint64_t *)&v13);
      v6 = (_QWORD *)v13;
      v7 = CI::MetalDAGHelper::new_function_with_name(this, "_ci_sampler_builder", 0);
      v8 = CI::MetalDAGHelper::new_function_with_name(this, "_ci_dest_struct_builder", 0);
      v9 = CI::MetalDAGHelper::new_function_with_name(this, "_ci_dest_struct_builder_h", 0);
      v10 = CI::MetalDAGHelper::new_function_with_name(this, "_ci_group_destination_builder", 0);
      v11 = CI::MetalDAGHelper::new_function_with_name(this, "_ci_group_destination_builder_h", 0);
      v6[18] = v7;
      v6[19] = v8;
      v6[20] = v9;
      v6[21] = v10;
      v6[22] = v11;
      v3 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
      if (!*((_QWORD *)&v13 + 1))
        return;
      v12 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v5 = __ldaxr(v12);
      while (__stlxr(v5 - 1, v12));
      break;
    case 0:
      abort();
    default:
      return;
  }
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_19241B05C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<CI::StitchableFunctionDAGDescriptor>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void CI::create_metal_args(CI *this, const CI::MetalContext *a2, const CI::Node *a3, const CI::ProgramNode *a4, CI::SerialObjectPtrArray *a5)
{
  id v9[26];

  CI::MetalDAGHelper::MetalDAGHelper((CI::MetalDAGHelper *)v9, this);
  CI::MetalContext::device((id *)this);
  CI::MetalDAGHelper::analyze_kernels((uint64_t)v9, (uint64_t)a3);
  CI::MetalDAGHelper::build_dag((CI::MetalDAGHelper *)v9, a2, a3, a4, 1);
  CI::MetalDAGHelper::~MetalDAGHelper(v9);
}

void sub_19241B0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  CI::MetalDAGHelper::~MetalDAGHelper(&a9);
  _Unwind_Resume(a1);
}

void CI::add_to_kernel_archive(NSObject **a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  if (a1)
  {
    v3 = *a1;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN2CI13KernelArchive10addArchiveENSt3__14pairIPKvS4_EE_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = a1;
    block[5] = a2;
    block[6] = a3;
    dispatch_barrier_sync(v3, block);
  }
}

NSObject **CI::find_in_archive(NSObject **result, uint64_t a2, const char *a3)
{
  if (result)
    return (NSObject **)CI::KernelArchive::find(result, a2, a3);
  return result;
}

uint64_t CI::KernelArchive::find(NSObject **this, uint64_t a2, const char *a3)
{
  NSObject *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD block[9];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v15 = &v14;
  v16 = 0x3052000000;
  v17 = __Block_byref_object_copy__199;
  v18 = __Block_byref_object_dispose__200;
  v19 = 0;
  v8 = 0;
  v9 = &v8;
  v10 = 0x3052000000;
  v11 = __Block_byref_object_copy__199;
  v12 = __Block_byref_object_dispose__200;
  v13 = 0;
  v3 = *this;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN2CI13KernelArchive4findEyPKc_block_invoke;
  block[3] = &unk_1E2EC7930;
  block[6] = this;
  block[7] = a2;
  block[4] = &v14;
  block[5] = &v8;
  block[8] = a3;
  dispatch_sync(v3, block);
  v4 = v15;
  if (v9[5])
  {
    v20[0] = v9[5];
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 1);
  }
  v5 = v4[5];
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v14, 8);
  return v5;
}

void sub_19241B2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

CI::LegacyDAGDescriptor::ArgumentInfo *CI::LegacyDAGDescriptor::create_argument_info(CI::LegacyDAGDescriptor *this, unint64_t a2)
{
  CI::LegacyDAGDescriptor::ArgumentInfo *v4;
  unint64_t v5;
  CI::LegacyDAGDescriptor::ArgumentInfo **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  CI::LegacyDAGDescriptor::ArgumentInfo **v14;
  char *v15;
  char *v16;
  char *v17;
  CI::LegacyDAGDescriptor::ArgumentInfo *v18;

  v4 = (CI::LegacyDAGDescriptor::ArgumentInfo *)operator new();
  CI::LegacyDAGDescriptor::ArgumentInfo::ArgumentInfo(v4, a2);
  v5 = *((_QWORD *)this + 10);
  v6 = (CI::LegacyDAGDescriptor::ArgumentInfo **)*((_QWORD *)this + 9);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *((_QWORD *)this + 8);
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)this + 80, v12);
    else
      v13 = 0;
    v14 = (CI::LegacyDAGDescriptor::ArgumentInfo **)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)*((_QWORD *)this + 8);
    v16 = (char *)*((_QWORD *)this + 9);
    if (v16 != v17)
    {
      do
      {
        v18 = (CI::LegacyDAGDescriptor::ArgumentInfo *)*((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 8) = v14;
    *((_QWORD *)this + 9) = v7;
    *((_QWORD *)this + 10) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  *((_QWORD *)this + 9) = v7;
  return v4;
}

void sub_19241B3D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194025AAC](v1, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

uint64_t CI::ConcatenatedDAGDescriptor::create_sampler_builder_function_info()
{
  return 0;
}

uint64_t CI::ConcatenatedDAGDescriptor::create_priv_dest_coord_builder_function_info()
{
  return 0;
}

uint64_t CI::ConcatenatedDAGDescriptor::create_group_dest_coord_builder_function_info()
{
  return 0;
}

void CI::LegacyDAGDescriptor::create_function_info(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  if (a2)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v6 = a1[7];
    v7 = a1[6];
    if (v7 >= v6)
    {
      v9 = a1[5];
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v11;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 7), v13);
      else
        v14 = 0;
      v15 = &v14[24 * v10];
      v16 = &v14[24 * v13];
      *v15 = 0;
      *((_QWORD *)v15 + 1) = v4;
      *((_QWORD *)v15 + 2) = v5;
      v8 = v15 + 24;
      v18 = (char *)a1[5];
      v17 = (char *)a1[6];
      if (v17 != v18)
      {
        do
        {
          v19 = *(_OWORD *)(v17 - 24);
          *((_QWORD *)v15 - 1) = *((_QWORD *)v17 - 1);
          *(_OWORD *)(v15 - 24) = v19;
          v15 -= 24;
          v17 -= 24;
        }
        while (v17 != v18);
        v17 = (char *)a1[5];
      }
      a1[5] = v15;
      a1[6] = v8;
      a1[7] = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_BYTE *)v7 = 0;
      v8 = (char *)(v7 + 24);
      *(_QWORD *)(v7 + 8) = v4;
      *(_QWORD *)(v7 + 16) = v5;
    }
    a1[6] = v8;
  }
}

void CI::LegacyDAGDescriptor::create_early_out_function_info(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  if (a2)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v6 = a1[7];
    v7 = a1[6];
    if (v7 >= v6)
    {
      v9 = a1[5];
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v11;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 7), v13);
      else
        v14 = 0;
      v15 = &v14[24 * v10];
      v16 = &v14[24 * v13];
      *v15 = 1;
      *((_QWORD *)v15 + 1) = v4;
      *((_QWORD *)v15 + 2) = v5;
      v8 = v15 + 24;
      v18 = (char *)a1[5];
      v17 = (char *)a1[6];
      if (v17 != v18)
      {
        do
        {
          v19 = *(_OWORD *)(v17 - 24);
          *((_QWORD *)v15 - 1) = *((_QWORD *)v17 - 1);
          *(_OWORD *)(v15 - 24) = v19;
          v15 -= 24;
          v17 -= 24;
        }
        while (v17 != v18);
        v17 = (char *)a1[5];
      }
      a1[5] = v15;
      a1[6] = v8;
      a1[7] = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_BYTE *)v7 = 1;
      *(_QWORD *)(v7 + 8) = v4;
      *(_QWORD *)(v7 + 16) = v5;
      v8 = (char *)(v7 + 24);
    }
    a1[6] = v8;
  }
}

const char *CI::LegacyDAGDescriptor::get_type_name(CI::LegacyDAGDescriptor *this)
{
  if (*((_BYTE *)this + 24))
    return "metallibV1-from_archive";
  else
    return "metallibV1";
}

uint64_t CI::ConcatenatedDAGDescriptor::set_function_constants(id *this, const void *a2, MTLDataType a3, NSString *a4)
{
  return objc_msgSend(this[2], "setConstantValue:type:withName:", a2, a3, a4);
}

uint64_t CI::LegacyDAGDescriptor::add_function(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 88), "addObject:", a2);
}

uint64_t CI::ConcatenatedDAGDescriptor::add_function_from_kernel(_BYTE *a1, void *a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 96))(a1);
  result = objc_msgSend(a2, "importedLibraries");
  if (result)
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v5 = (void *)objc_msgSend(a2, "importedLibraries", 0);
    result = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (result)
    {
      v6 = result;
      v7 = *(_QWORD *)v10;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v10 != v7)
            objc_enumerationMutation(v5);
          if (objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v8), "containsString:", CFSTR("CoreImage.metallib")))a1[25] = 1;
          ++v8;
        }
        while (v6 != v8);
        result = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        v6 = result;
      }
      while (result);
    }
  }
  return result;
}

void CI::LegacyDAGDescriptor::~LegacyDAGDescriptor(id *this)
{
  CI::LegacyDAGDescriptor::~LegacyDAGDescriptor(this);
  JUMPOUT(0x194025AACLL);
}

{
  _QWORD *v2;
  _QWORD *v3;
  id v4;

  *this = &off_1E2EBDF38;

  v2 = this[8];
  v3 = this[9];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 48))(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = this[8];
  }
  if (v2)
  {
    this[9] = v2;
    operator delete(v2);
  }
  v4 = this[5];
  if (v4)
  {
    this[6] = v4;
    operator delete(v4);
  }
  *this = &unk_1E2EBE4A8;

}

unint64_t CI::LegacyDAGDescriptor::ArgumentInfo::size(CI::LegacyDAGDescriptor::ArgumentInfo *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3);
}

uint64_t CI::LegacyDAGDescriptor::ArgumentInfo::data(CI::LegacyDAGDescriptor::ArgumentInfo *this)
{
  return *((_QWORD *)this + 2);
}

BOOL CI::LegacyDAGDescriptor::ArgumentInfo::validate(CI::LegacyDAGDescriptor::ArgumentInfo *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3) == *((_QWORD *)this + 1);
}

void CI::LegacyDAGDescriptor::ArgumentInfo::~ArgumentInfo(CI::LegacyDAGDescriptor::ArgumentInfo *this)
{
  void *v2;

  *(_QWORD *)this = off_1E2EBDEF0;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_1E2EBDEF0;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x194025AACLL);
}

_QWORD *CI::StitchableFunctionDAGDescriptor::create_argument_info(CI::StitchableFunctionDAGDescriptor *this, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = (_QWORD *)operator new();
  v5 = *((_QWORD *)this + 9);
  *v4 = off_1E2EBE5B8;
  v4[1] = a2;
  v6 = objc_opt_new();
  v7 = *((_QWORD *)this + 13);
  v4[2] = v6;
  v4[3] = v5;
  v4[4] = (char *)this + 48;
  v8 = (_QWORD *)*((_QWORD *)this + 12);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *((_QWORD *)this + 11);
    v11 = ((uint64_t)v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v12 = v7 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)this + 104, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = v4;
    v9 = v16 + 8;
    v19 = (char *)*((_QWORD *)this + 11);
    v18 = (char *)*((_QWORD *)this + 12);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 11) = v16;
    *((_QWORD *)this + 12) = v9;
    *((_QWORD *)this + 13) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v8 = v4;
    v9 = v8 + 1;
  }
  *((_QWORD *)this + 12) = v9;
  return v4;
}

void sub_19241BA20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194025AAC](v1, 0x10E1C403BD2969FLL);
  _Unwind_Resume(a1);
}

void *CI::StitchableFunctionDAGDescriptor::create_sampler_builder_function_info(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  _QWORD v8[2];

  v2 = a2;
  v8[1] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((objc_msgSend(*(id *)(a1 + 120), "containsObject:", objc_msgSend(*(id *)(a1 + 144), "name")) & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 128), "addObject:", *(_QWORD *)(a1 + 144));
      objc_msgSend(*(id *)(a1 + 120), "addObject:", objc_msgSend(*(id *)(a1 + 144), "name"));
    }
    v4 = (*(uint64_t (**)(void *))(*(_QWORD *)v2 + 24))(v2);
    v5 = objc_alloc(MEMORY[0x1E0CC6AD0]);
    v6 = objc_msgSend(*(id *)(a1 + 144), "name");
    v8[0] = *(_QWORD *)(a1 + 40);
    v2 = (void *)objc_msgSend(v5, "initWithName:arguments:controlDependencies:", v6, v4, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 1));
    objc_msgSend(*(id *)(a1 + 72), "addObject:", v2);
    ++*(_DWORD *)(a1 + 80);

  }
  return v2;
}

void *CI::StitchableFunctionDAGDescriptor::create_priv_dest_coord_builder_function_info(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v5 = 152;
  if (a3)
    v5 = 160;
  v6 = *(void **)(a1 + v5);
  if ((objc_msgSend(*(id *)(a1 + 120), "containsObject:", objc_msgSend(v6, "name")) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 128), "addObject:", v6);
    objc_msgSend(*(id *)(a1 + 120), "addObject:", objc_msgSend(v6, "name"));
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v8 = objc_alloc(MEMORY[0x1E0CC6AD0]);
  v9 = objc_msgSend(v6, "name");
  v12[0] = *(_QWORD *)(a1 + 40);
  v10 = (void *)objc_msgSend(v8, "initWithName:arguments:controlDependencies:", v9, v7, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 1));
  objc_msgSend(*(id *)(a1 + 72), "addObject:", v10);
  ++*(_DWORD *)(a1 + 80);

  return v10;
}

void *CI::StitchableFunctionDAGDescriptor::create_group_dest_coord_builder_function_info(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v5 = 168;
  if (a3)
    v5 = 176;
  v6 = *(void **)(a1 + v5);
  if ((objc_msgSend(*(id *)(a1 + 120), "containsObject:", objc_msgSend(v6, "name")) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 128), "addObject:", v6);
    objc_msgSend(*(id *)(a1 + 120), "addObject:", objc_msgSend(v6, "name"));
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v8 = objc_alloc(MEMORY[0x1E0CC6AD0]);
  v9 = objc_msgSend(v6, "name");
  v12[0] = *(_QWORD *)(a1 + 40);
  v10 = (void *)objc_msgSend(v8, "initWithName:arguments:controlDependencies:", v9, v7, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 1));
  objc_msgSend(*(id *)(a1 + 72), "addObject:", v10);
  ++*(_DWORD *)(a1 + 80);

  return v10;
}

void CI::StitchableFunctionDAGDescriptor::create_function_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  int v8;
  char *v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v4 = objc_alloc(MEMORY[0x1E0CC6AD0]);
    v5 = *(_QWORD *)(a1 + 112);
    v20[0] = *(_QWORD *)(a1 + 40);
    v6 = (void *)objc_msgSend(v4, "initWithName:arguments:controlDependencies:", v5, v3, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 1));
    objc_msgSend(*(id *)(a1 + 72), "addObject:", v6);
    v7 = *(_QWORD *)(a1 + 64);
    v8 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v8 + 1;
    v9 = *(char **)(a1 + 56);
    if ((unint64_t)v9 >= v7)
    {
      v11 = *(char **)(a1 + 48);
      v12 = (v9 - v11) >> 2;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        abort();
      v14 = v7 - (_QWORD)v11;
      if (v14 >> 1 > v13)
        v13 = v14 >> 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::KernelArgumentType>>(a1 + 64, v15);
        v11 = *(char **)(a1 + 48);
        v9 = *(char **)(a1 + 56);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[4 * v12];
      v18 = &v16[4 * v15];
      *(_DWORD *)v17 = v8;
      v10 = v17 + 4;
      while (v9 != v11)
      {
        v19 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v17 - 1) = v19;
        v17 -= 4;
      }
      *(_QWORD *)(a1 + 48) = v17;
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 64) = v18;
      if (v11)
        operator delete(v11);
    }
    else
    {
      *(_DWORD *)v9 = v8;
      v10 = v9 + 4;
    }
    *(_QWORD *)(a1 + 56) = v10;

  }
}

void CI::StitchableFunctionDAGDescriptor::create_early_out_function_info(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int v10;
  char *v11;
  _DWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  id v22;

  if (a2)
  {
    v4 = objc_alloc(MEMORY[0x1E0CC6AD0]);
    v5 = *(_QWORD *)(a1 + 112);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v7 = MEMORY[0x1E0C9AA60];
    v22 = (id)objc_msgSend(v4, "initWithName:arguments:controlDependencies:", v5, v6, MEMORY[0x1E0C9AA60]);
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CC6AC8]), "initWithCondition:controlDependencies:", v22, v7);
    *(_QWORD *)(a1 + 40) = v22;
    objc_msgSend(*(id *)(a1 + 72), "addObject:");
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v10 + 1;
    v11 = *(char **)(a1 + 56);
    if ((unint64_t)v11 >= v9)
    {
      v13 = *(char **)(a1 + 48);
      v14 = (v11 - v13) >> 2;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62)
        abort();
      v16 = v9 - (_QWORD)v13;
      if (v16 >> 1 > v15)
        v15 = v16 >> 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::KernelArgumentType>>(a1 + 64, v17);
        v13 = *(char **)(a1 + 48);
        v11 = *(char **)(a1 + 56);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[4 * v14];
      v20 = &v18[4 * v17];
      *(_DWORD *)v19 = v10;
      v12 = v19 + 4;
      while (v11 != v13)
      {
        v21 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v19 - 1) = v21;
        v19 -= 4;
      }
      *(_QWORD *)(a1 + 48) = v19;
      *(_QWORD *)(a1 + 56) = v12;
      *(_QWORD *)(a1 + 64) = v20;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *(_DWORD *)v11 = v10;
      v12 = v11 + 4;
    }
    *(_QWORD *)(a1 + 56) = v12;
    objc_msgSend(*(id *)(a1 + 72), "addObject:", v8);
    ++*(_DWORD *)(a1 + 80);

  }
}

const char *CI::StitchableFunctionDAGDescriptor::get_type_name(CI::StitchableFunctionDAGDescriptor *this)
{
  if (*((_BYTE *)this + 24))
    return "metallibV2-from_archive";
  else
    return "metallibV2";
}

uint64_t CI::StitchableFunctionDAGDescriptor::compile(uint64_t a1, uint64_t a2, char *a3, CI::CoreImageDylib *a4, void *a5, uint64_t a6, unsigned int a7)
{
  void *dag_descriptor;
  uint64_t v15;
  NSObject **v16;
  void *v17;
  void *v18;
  uint64_t ComputePipelineState;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  dag_descriptor = CI::StitchableFunctionDAGDescriptor::create_dag_descriptor((CI::StitchableFunctionDAGDescriptor *)a1, a3);
  if (*(_BYTE *)(a1 + 25))
    v15 = CI::CoreImageDylib::get(a4);
  else
    v15 = 0;
  v16 = *(NSObject ***)(a1 + 32);
  if (!v16)
  {
    v20 = 0;
    *(_BYTE *)(a1 + 24) = 0;
LABEL_11:
    ComputePipelineState = CIMetalRenderPipelineStateCreateFromDagDescriptor(a2, (uint64_t)a3, a5, dag_descriptor, v20, v15, a6, a7);
    goto LABEL_12;
  }
  v17 = (void *)CI::KernelArchive::find(v16, a6, a3);
  *(_BYTE *)(a1 + 24) = v17 != 0;
  if (!v17)
  {
    v21 = *(_QWORD *)(a1 + 32);
    if (v21)
      v20 = *(_QWORD *)(v21 + 80);
    else
      v20 = 0;
    goto LABEL_11;
  }
  ComputePipelineState = CreateComputePipelineState(a5, v17, v18, v15);
LABEL_12:
  v22 = ComputePipelineState;

  return v22;
}

uint64_t CI::StitchableFunctionDAGDescriptor::compile(uint64_t a1, uint64_t a2, char *a3, CI::CoreImageDylib *a4, void *a5, uint64_t a6)
{
  void *dag_descriptor;
  uint64_t v13;
  NSObject **v14;
  void *v15;
  void *v16;
  uint64_t ComputePipelineState;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  dag_descriptor = CI::StitchableFunctionDAGDescriptor::create_dag_descriptor((CI::StitchableFunctionDAGDescriptor *)a1, a3);
  if (*(_BYTE *)(a1 + 25))
    v13 = CI::CoreImageDylib::get(a4);
  else
    v13 = 0;
  v14 = *(NSObject ***)(a1 + 32);
  if (!v14)
  {
    v18 = 0;
    *(_BYTE *)(a1 + 24) = 0;
LABEL_11:
    ComputePipelineState = CIMetalComputePipelineStateCreateFromDagDescriptor(a2, (uint64_t)a3, a5, dag_descriptor, v18, v13, a6);
    goto LABEL_12;
  }
  v15 = (void *)CI::KernelArchive::find(v14, a6, a3);
  *(_BYTE *)(a1 + 24) = v15 != 0;
  if (!v15)
  {
    v19 = *(_QWORD *)(a1 + 32);
    if (v19)
      v18 = *(void **)(v19 + 80);
    else
      v18 = 0;
    goto LABEL_11;
  }
  ComputePipelineState = CreateComputePipelineState(a5, v15, v16, v13);
LABEL_12:
  v20 = ComputePipelineState;

  return v20;
}

uint64_t CI::StitchableFunctionDAGDescriptor::add_function(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = objc_msgSend(a2, "name");
  result = objc_msgSend(*(id *)(a1 + 120), "member:", v4);
  v6 = result;
  if (!result)
  {
    objc_msgSend(*(id *)(a1 + 128), "addObject:", a2);
    v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithString:", v4);
    result = objc_msgSend(*(id *)(a1 + 120), "addObject:", v6);
  }
  *(_QWORD *)(a1 + 112) = v6;
  return result;
}

void CI::StitchableFunctionDAGDescriptor::~StitchableFunctionDAGDescriptor(id *this)
{
  CI::StitchableFunctionDAGDescriptor::~StitchableFunctionDAGDescriptor(this);
  JUMPOUT(0x194025AACLL);
}

{
  _QWORD *v2;
  _QWORD *v3;
  id v4;
  id v5;

  *this = &off_1E2EBE600;

  v2 = this[11];
  v3 = this[12];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 48))(*v2);
    ++v2;
  }

  v4 = this[11];
  if (v4)
  {
    this[12] = v4;
    operator delete(v4);
  }
  v5 = this[6];
  if (v5)
  {
    this[7] = v5;
    operator delete(v5);
  }
  *this = &unk_1E2EBE4A8;

}

uint64_t CI::StitchableFunctionDAGDescriptor::ArgumentInfo::add(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 16), "addObject:", a2);
}

uint64_t CI::StitchableFunctionDAGDescriptor::ArgumentInfo::size(id *this)
{
  return objc_msgSend(this[2], "count");
}

uint64_t CI::StitchableFunctionDAGDescriptor::ArgumentInfo::data(CI::StitchableFunctionDAGDescriptor::ArgumentInfo *this)
{
  return *((_QWORD *)this + 2);
}

BOOL CI::StitchableFunctionDAGDescriptor::ArgumentInfo::validate(id *this)
{
  return objc_msgSend(this[2], "count") == (_QWORD)this[1];
}

void CI::StitchableFunctionDAGDescriptor::ArgumentInfo::~ArgumentInfo(id *this)
{
  *this = off_1E2EBE5B8;

}

{
  *this = off_1E2EBE5B8;

  JUMPOUT(0x194025AACLL);
}

uint64_t CI::MetalDAG::type(CI::MetalDAG *this)
{
  return 68;
}

uint64_t CI::MetalDAG::get_type_name(CI::MetalDAG *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 64))(*((_QWORD *)this + 23));
}

uint64_t `non-virtual thunk to'CI::MetalDAG::type(CI::MetalDAG *this)
{
  return 68;
}

{
  return 68;
}

unint64_t CI::mtl_func_hash(void *a1)
{
  _OWORD *v1;
  __int128 v2;
  int64x2_t v4[5];
  _OWORD __src[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = (_OWORD *)objc_msgSend(a1, "bitCodeHash");
  v2 = v1[1];
  __src[0] = *v1;
  __src[1] = v2;
  XXH64_reset(v4, 0);
  XXH64_update((uint64_t)v4, (char *)__src, 0x20uLL);
  return XXH64_digest((uint64_t)v4);
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

std::string *CI::MetalDAGHelper::TextureReadFunction::TextureReadFunction(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::vector<unsigned long>::vector(this[1].__r_.__value_.__r.__words, a3);
  this[2].__r_.__value_.__s.__data_[0] = 0;
  return this;
}

void sub_19241C60C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

CI::MetalDAGHelper *CI::MetalDAGHelper::MetalDAGHelper(CI::MetalDAGHelper *this, const CI::MetalContext *a2)
{
  *(_QWORD *)this = &off_1E2EBAA10;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_DWORD *)this + 8) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_OWORD *)this + 5) = xmmword_19248E020;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 13) = (char *)this + 112;
  *((_QWORD *)this + 12) = 16;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 16) = (char *)this + 136;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 19) = (char *)this + 160;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *((_QWORD *)this + 25) = objc_opt_new();
  return this;
}

void sub_19241C704(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  _QWORD **v8;
  _QWORD **v9;

  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy(v5, *v9);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>>>::destroy(v4, *v8);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy(v3, *v7);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy(v2, *v6);
  std::shared_ptr<CI::StitchableFunctionDAGDescriptor>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void CI::MetalDAGHelper::~MetalDAGHelper(id *this)
{
  CI::MetalDAGHelper::~MetalDAGHelper(this);
  JUMPOUT(0x194025AACLL);
}

{
  *this = &off_1E2EBAA10;

  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)(this + 22), this[23]);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>>>::destroy((uint64_t)(this + 19), this[20]);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)(this + 16), this[17]);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)(this + 13), this[14]);
  std::shared_ptr<CI::StitchableFunctionDAGDescriptor>::~shared_ptr[abi:nn180100]((uint64_t)(this + 1));
}

void sub_19241C7D8(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)(v1 + 22), v1[23]);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>>>::destroy((uint64_t)(v1 + 19), v1[20]);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)(v1 + 16), v1[17]);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)(v1 + 13), v1[14]);
  std::shared_ptr<CI::StitchableFunctionDAGDescriptor>::~shared_ptr[abi:nn180100]((uint64_t)(v1 + 1));
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<CI::ConcatenatedDAGDescriptor>::operator=[abi:nn180100]<CI::LegacyDAGDescriptor,void>(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

_QWORD *std::shared_ptr<CI::ConcatenatedDAGDescriptor>::operator=[abi:nn180100]<CI::StitchableFunctionDAGDescriptor,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

_QWORD *std::allocate_shared[abi:nn180100]<CI::LegacyDAGDescriptor,std::allocator<CI::LegacyDAGDescriptor>,BOOL &,BOOL &,void>@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<CI::LegacyDAGDescriptor>::__shared_ptr_emplace[abi:nn180100]<BOOL &,BOOL &,std::allocator<CI::LegacyDAGDescriptor>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_19241C944(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CI::LegacyDAGDescriptor>::__shared_ptr_emplace[abi:nn180100]<BOOL &,BOOL &,std::allocator<CI::LegacyDAGDescriptor>,0>(_QWORD *a1, char *a2, char *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2EC0868;
  CI::LegacyDAGDescriptor::LegacyDAGDescriptor((CI::LegacyDAGDescriptor *)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_19241C994(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CI::LegacyDAGDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2EC0868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CI::LegacyDAGDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2EC0868;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194025AACLL);
}

uint64_t std::__shared_ptr_emplace<CI::LegacyDAGDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 112))(a1 + 24);
}

CI::LegacyDAGDescriptor *CI::LegacyDAGDescriptor::LegacyDAGDescriptor(CI::LegacyDAGDescriptor *this, char a2, char a3)
{
  *(_QWORD *)this = &unk_1E2EBE4A8;
  *((_BYTE *)this + 8) = a2;
  *((_BYTE *)this + 9) = a3;
  *((_WORD *)this + 12) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = objc_opt_new();
  *(_QWORD *)this = &off_1E2EBDF38;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = objc_opt_new();
  return this;
}

void sub_19241CA7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *(void **)(v1 + 64);
  if (v5)
  {
    *(_QWORD *)(v1 + 72) = v5;
    operator delete(v5);
  }
  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v6;
    operator delete(v6);
  }
  *(_QWORD *)v1 = v2;

  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:nn180100]<CI::StitchableFunctionDAGDescriptor,std::allocator<CI::StitchableFunctionDAGDescriptor>,BOOL &,BOOL &,void>@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0xD0uLL);
  result = std::__shared_ptr_emplace<CI::StitchableFunctionDAGDescriptor>::__shared_ptr_emplace[abi:nn180100]<BOOL &,BOOL &,std::allocator<CI::StitchableFunctionDAGDescriptor>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_19241CB00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CI::StitchableFunctionDAGDescriptor>::__shared_ptr_emplace[abi:nn180100]<BOOL &,BOOL &,std::allocator<CI::StitchableFunctionDAGDescriptor>,0>(_QWORD *a1, char *a2, char *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2EC08A0;
  CI::StitchableFunctionDAGDescriptor::StitchableFunctionDAGDescriptor((CI::StitchableFunctionDAGDescriptor *)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_19241CB50(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CI::StitchableFunctionDAGDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2EC08A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CI::StitchableFunctionDAGDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2EC08A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194025AACLL);
}

uint64_t std::__shared_ptr_emplace<CI::StitchableFunctionDAGDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 112))(a1 + 24);
}

CI::StitchableFunctionDAGDescriptor *CI::StitchableFunctionDAGDescriptor::StitchableFunctionDAGDescriptor(CI::StitchableFunctionDAGDescriptor *this, char a2, char a3)
{
  uint64_t v4;

  *(_QWORD *)this = &unk_1E2EBE4A8;
  *((_BYTE *)this + 8) = a2;
  *((_BYTE *)this + 9) = a3;
  *((_WORD *)this + 12) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = objc_opt_new();
  *(_QWORD *)this = &off_1E2EBE600;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v4 = objc_opt_new();
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 9) = v4;
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = objc_opt_new();
  *((_QWORD *)this + 16) = objc_opt_new();
  *((_QWORD *)this + 17) = CFSTR("ciKernelMain");
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = 0;
  return this;
}

void sub_19241CC7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  *(_QWORD *)v1 = v2;

  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<CI::StitchableFunctionDAGDescriptor>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void ___ZN2CI13KernelArchive10addArchiveENSt3__14pairIPKvS4_EE_block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(void **)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    v4 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "functionNames"), "count");
    v5 = (id)objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", v4);
    objc_msgSend(v5, "addObjectsFromArray:", objc_msgSend(v1, "functionNames"));
    if (CI_LOG_AIR_ARCHIVE_ACTIVITY())
    {
      v6 = ci_logger_render();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v49 = 138543362;
        v50 = objc_msgSend(v5, "allObjects");
        _os_log_impl(&dword_1921E4000, v6, OS_LOG_TYPE_INFO, "An archive loaded with these functions %{public}@", (uint8_t *)&v49, 0xCu);
      }
    }
    v7 = *(_QWORD *)(v2 + 72);
    v8 = *(_QWORD **)(v2 + 64);
    if ((unint64_t)v8 >= v7)
    {
      v10 = *(_QWORD *)(v2 + 56);
      v11 = ((uint64_t)v8 - v10) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        abort();
      v12 = v7 - v10;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v2 + 72, v14);
      else
        v15 = 0;
      v16 = &v15[8 * v11];
      v17 = &v15[8 * v14];
      *(_QWORD *)v16 = v5;
      v9 = v16 + 8;
      v19 = *(char **)(v2 + 56);
      v18 = *(char **)(v2 + 64);
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *((_QWORD *)v16 - 1) = v20;
          v16 -= 8;
        }
        while (v18 != v19);
        v18 = *(char **)(v2 + 56);
      }
      *(_QWORD *)(v2 + 56) = v16;
      *(_QWORD *)(v2 + 64) = v9;
      *(_QWORD *)(v2 + 72) = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v8 = v5;
      v9 = v8 + 1;
    }
    v21 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 64) = v9;
    v22 = *(_QWORD **)(v2 + 16);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(_QWORD *)(v2 + 8);
      v25 = ((uint64_t)v22 - v24) >> 3;
      if ((unint64_t)(v25 + 1) >> 61)
        abort();
      v26 = v21 - v24;
      v27 = v26 >> 2;
      if (v26 >> 2 <= (unint64_t)(v25 + 1))
        v27 = v25 + 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v2 + 24, v28);
      else
        v29 = 0;
      v30 = &v29[8 * v25];
      v31 = &v29[8 * v28];
      *(_QWORD *)v30 = v1;
      v23 = v30 + 8;
      v33 = *(char **)(v2 + 8);
      v32 = *(char **)(v2 + 16);
      if (v32 != v33)
      {
        do
        {
          v34 = *((_QWORD *)v32 - 1);
          v32 -= 8;
          *((_QWORD *)v30 - 1) = v34;
          v30 -= 8;
        }
        while (v32 != v33);
        v32 = *(char **)(v2 + 8);
      }
      *(_QWORD *)(v2 + 8) = v30;
      *(_QWORD *)(v2 + 16) = v23;
      *(_QWORD *)(v2 + 24) = v31;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *v22 = v1;
      v23 = v22 + 1;
    }
    v35 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 16) = v23;
    v36 = *(uint64_t **)(v2 + 40);
    if ((unint64_t)v36 >= v35)
    {
      v38 = *(_QWORD *)(v2 + 32);
      v39 = ((uint64_t)v36 - v38) >> 3;
      if ((unint64_t)(v39 + 1) >> 61)
        abort();
      v40 = v35 - v38;
      v41 = v40 >> 2;
      if (v40 >> 2 <= (unint64_t)(v39 + 1))
        v41 = v39 + 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
        v42 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
        v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v2 + 48, v42);
      else
        v43 = 0;
      v44 = &v43[8 * v39];
      v45 = &v43[8 * v42];
      *(_QWORD *)v44 = v3;
      v37 = v44 + 8;
      v47 = *(char **)(v2 + 32);
      v46 = *(char **)(v2 + 40);
      if (v46 != v47)
      {
        do
        {
          v48 = *((_QWORD *)v46 - 1);
          v46 -= 8;
          *((_QWORD *)v44 - 1) = v48;
          v44 -= 8;
        }
        while (v46 != v47);
        v46 = *(char **)(v2 + 32);
      }
      *(_QWORD *)(v2 + 32) = v44;
      *(_QWORD *)(v2 + 40) = v37;
      *(_QWORD *)(v2 + 48) = v45;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *v36 = v3;
      v37 = v36 + 1;
    }
    *(_QWORD *)(v2 + 40) = v37;
  }
  else if (v3)
  {
    objc_msgSend(*(id *)(v2 + 80), "addObject:", v3);
  }
}

void __Block_byref_object_copy__199(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__200(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void ___ZN2CI13KernelArchive4findEyPKc_block_invoke(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = (_QWORD *)a1[6];
  if (v1[1] != v1[2])
  {
    v3 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("ci_%016llX"), a1[7]);
    v4 = v1[7];
    if (v1[8] == v4)
    {
      LODWORD(v5) = 0;
    }
    else
    {
      v5 = 0;
      while (!objc_msgSend(*(id *)(v4 + 8 * v5), "containsObject:", v3))
      {
        ++v5;
        v4 = v1[7];
        if (v5 >= (v1[8] - v4) >> 3)
          goto LABEL_9;
      }
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40) = objc_msgSend(*(id *)(v1[1] + 8 * v5), "newFunctionWithName:", v3);
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = *(_QWORD *)(v1[4] + 8 * v5);
    }
LABEL_9:
    if (CI_LOG_AIR_ARCHIVE_MISS() && !*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40))
    {
      v6 = ci_logger_render();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138543362;
        v17 = v3;
        _os_log_impl(&dword_1921E4000, v6, OS_LOG_TYPE_INFO, "Failed to find function %{public}@ in any air archive", buf, 0xCu);
      }
    }
    if (CI_LOG_AIR_ARCHIVE_ACTIVITY())
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40);
      v8 = ci_logger_render();
      v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
      if (v7)
      {
        if (!v9)
          return;
        v10 = a1[8];
        v11 = (uint64_t)(v1[2] - v1[1]) >> 3;
        *(_DWORD *)buf = 138544130;
        v17 = v3;
        v18 = 2082;
        v19 = v10;
        v20 = 1024;
        v21 = v5;
        v22 = 2048;
        v23 = v11;
        v12 = "Found function %{public}@ for %{public}s in the archive %d/%zu";
        v13 = v8;
        v14 = 38;
      }
      else
      {
        if (!v9)
          return;
        v15 = a1[8];
        *(_DWORD *)buf = 138543618;
        v17 = v3;
        v18 = 2082;
        v19 = v15;
        v12 = "Failed to find function %{public}@ for %{public}s in any air archive";
        v13 = v8;
        v14 = 22;
      }
      _os_log_impl(&dword_1921E4000, v13, OS_LOG_TYPE_INFO, v12, buf, v14);
    }
  }
}

CI::LegacyDAGDescriptor::ArgumentInfo *CI::LegacyDAGDescriptor::ArgumentInfo::ArgumentInfo(CI::LegacyDAGDescriptor::ArgumentInfo *this, unint64_t a2)
{
  *(_QWORD *)this = off_1E2EBDEF0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  std::vector<LineCostProxy>::reserve((void **)this + 2, a2);
  return this;
}

void sub_19241D330(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_19241D3EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 64);
  if (v3)
  {
    *(_QWORD *)(v1 + 72) = v3;
    operator delete(v3);
  }
  CI::LegacyDAGDescriptor::~LegacyDAGDescriptor(v1);
  *(_QWORD *)v1 = &unk_1E2EBE4A8;

  _Unwind_Resume(a1);
}

void *CI::StitchableFunctionDAGDescriptor::create_dag_descriptor(CI::StitchableFunctionDAGDescriptor *this, const char *a2)
{
  int v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = CI_HARVEST_BIN_ARCHIVE();
  v5 = objc_alloc(MEMORY[0x1E0CC6AD8]);
  if (v4 == 1)
    v6 = *((_QWORD *)this + 17);
  else
    v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
  v7 = (void *)objc_msgSend(v5, "initWithFunctionName:nodes:outputNode:attributes:", v6, *((_QWORD *)this + 9), 0, MEMORY[0x1E0C9AA60]);
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v7, 0);

  v9 = (void *)objc_opt_new();
  objc_msgSend(v9, "setFunctionGraphs:", v8);

  objc_msgSend(v9, "setFunctions:", *((_QWORD *)this + 16));
  v10 = *((_QWORD *)this + 4);
  if (v10)
    v11 = *(_QWORD *)(v10 + 80);
  else
    v11 = 0;
  objc_msgSend(v9, "setBinaryArchives:", v11);
  return v9;
}

uint64_t CI::CoreImageDylib::get(CI::CoreImageDylib *this)
{
  uint64_t result;
  NSObject *v3;
  _QWORD block[5];

  result = *(_QWORD *)this;
  if (!result)
  {
    if (*((_BYTE *)this + 8))
    {
      v3 = *((_QWORD *)this + 3);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___ZN2CI14CoreImageDylib3getEv_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = this;
      dispatch_sync(v3, block);
      return *(_QWORD *)this;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

id ___ZN2CI14CoreImageDylib3getEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  id result;

  v1 = *(_QWORD *)(a1 + 32);
  result = *(id *)v1;
  if (!*(_QWORD *)v1)
  {
    if (*(_BYTE *)(v1 + 8))
    {
      result = +[CIKernelLibrary coreImageDylibWithDevice:](CIKernelLibrary, "coreImageDylibWithDevice:", *(_QWORD *)(v1 + 16));
      *(_QWORD *)v1 = result;
    }
    else
    {
      result = 0;
    }
  }
  *(_BYTE *)(v1 + 8) = result != 0;
  return result;
}

void sub_19241D6B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 88);
  if (v3)
  {
    *(_QWORD *)(v1 + 96) = v3;
    operator delete(v3);
  }
  CI::StitchableFunctionDAGDescriptor::~StitchableFunctionDAGDescriptor(v1);
  *(_QWORD *)v1 = &unk_1E2EBE4A8;

  _Unwind_Resume(a1);
}

uint64_t CI::InstanceCounted<(CI::Type)68>::type()
{
  return 68;
}

_QWORD *CI::InstanceCounted<(CI::Type)68>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EB7710;
  do
    v1 = __ldaxr(&dword_1ECF873D0[10]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[10]));
  return result;
}

void CI::InstanceCounted<(CI::Type)68>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EB7710;
  do
    v1 = __ldaxr(&dword_1ECF873D0[10]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[10]));
  JUMPOUT(0x194025AACLL);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = (uint64_t *)*v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = (uint64_t *)v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,CI::SWFunction>,std::__map_value_compare<std::string,std::__value_type<std::string,CI::SWFunction>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CI::SWFunction>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,void *>>>>::reset[abi:nn180100]((uint64_t)v11, 0);
  }
  return v8;
}

_QWORD *std::__tree<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _QWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[4] = **a2;
  result = std::string::basic_string[abi:nn180100]<0>(v6 + 5, "");
  v6[8] = 0;
  v6[9] = 0;
  *((_BYTE *)v6 + 88) = 0;
  v6[10] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_19241D894(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x38uLL);
    v11[4] = **a4;
    v11[5] = 0;
    v11[6] = 0;
    std::__tree<std::__value_type<std::string,CI::SWFunction>,std::__map_value_compare<std::string,std::__value_type<std::string,CI::SWFunction>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CI::SWFunction>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

CI::MetalKernel *CI::MetalKernel::MetalKernel(CI::MetalKernel *this, const char *__s1, CIKernelLibrary *a3, NSDictionary *a4, NSDictionary *a5, char a6, char a7)
{
  NSDictionary *v13;
  NSDictionary *v14;
  uint64_t v15;
  void *v16;
  _OWORD *v17;
  __int128 v18;
  NSArray *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  const __CFString *v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  NSObject *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  id v32;
  const char *v34;
  const char *v35;
  CI::MetalKernel *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int64x2_t v41[5];
  int64x2_t v42[5];
  _QWORD v43[5];
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  id v49;
  __int16 v50;
  uint64_t v51;
  _BYTE v52[128];
  _OWORD __src[2];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E2EB8A90;
  v34 = __s1;
  *((_QWORD *)this + 1) = strdup(__s1);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_BYTE *)this + 48) = a6;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = a7;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 2) = a3;
  v36 = this;
  *((_QWORD *)this + 7) = objc_opt_new();
  if (a4)
    v13 = a4;
  else
    v13 = (NSDictionary *)objc_opt_new();
  *((_QWORD *)this + 9) = v13;
  v14 = a5;
  v15 = MEMORY[0x1E0C809B0];
  *((_QWORD *)this + 3) = v14;
  v43[0] = v15;
  v43[1] = 3221225472;
  v43[2] = ___ZN2CI11MetalKernelC2EPKcP15CIKernelLibraryP12NSDictionaryS6_bb_block_invoke;
  v43[3] = &__block_descriptor_40_e26_v32__0r_v8Q16__NSString_24l;
  v43[4] = this;
  CI::MetalKernel::iterateOverFunctionConstants((uint64_t)this, (uint64_t)v43);
  v16 = (void *)CI::MetalKernel::function(this);
  v17 = (_OWORD *)objc_msgSend(v16, "bitCodeHash");
  v18 = v17[1];
  __src[0] = *v17;
  __src[1] = v18;
  XXH64_reset(v42, 0);
  XXH64_update((uint64_t)v42, (char *)__src, 0x20uLL);
  *((_QWORD *)this + 5) = XXH64_digest((uint64_t)v42);

  XXH64_reset(v41, 0);
  v19 = -[NSArray sortedArrayUsingSelector:](-[NSDictionary allKeys](a4, "allKeys"), "sortedArrayUsingSelector:", sel_compare_);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v20 = -[NSArray countByEnumeratingWithState:objects:count:](v19, "countByEnumeratingWithState:objects:count:", &v37, v52, 16);
  if (v20)
  {
    v21 = *(_QWORD *)v38;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v38 != v21)
          objc_enumerationMutation(v19);
        v23 = *(const __CFString **)(*((_QWORD *)&v37 + 1) + 8 * i);
        CI::XXHashHelper::add((CI::XXHashHelper *)v41, v23);
        v24 = -[NSDictionary valueForKey:](a4, "valueForKey:", v23);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          CI::XXHashHelper::add((CI::XXHashHelper *)v41, v24);
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            CI::XXHashHelper::add((CI::XXHashHelper *)v41, v24);
        }
        v25 = -[NSDictionary valueForKey:](a5, "valueForKey:", v23, v34);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          CI::XXHashHelper::add((CI::XXHashHelper *)v41, v25);
      }
      v20 = -[NSArray countByEnumeratingWithState:objects:count:](v19, "countByEnumeratingWithState:objects:count:", &v37, v52, 16);
    }
    while (v20);
  }
  *((_QWORD *)v36 + 4) = XXH64_digest((uint64_t)v41);
  if (CI_LOG_METAL_FUNCTION_HASH())
  {
    v26 = ci_logger_compile();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      v27 = (void *)*((_QWORD *)v36 + 4);
      v28 = *((_QWORD *)v36 + 5);
      v29 = -[NSArray count](v19, "count");
      *(_DWORD *)buf = 136446978;
      v45 = v34;
      v46 = 2050;
      v47 = v28;
      v48 = 2050;
      v49 = v27;
      v50 = 2050;
      v51 = v29;
      _os_log_impl(&dword_1921E4000, v26, OS_LOG_TYPE_INFO, "MTLFunction %{public}s bitcode digest %{public}llx constants digest %{public}llx constants key size %{public}lu", buf, 0x2Au);
    }
    if (-[NSArray count](v19, "count", v34))
    {
      v30 = ci_logger_compile();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        v31 = -[NSArray objectAtIndexedSubscript:](v19, "objectAtIndexedSubscript:", 0);
        v32 = -[NSDictionary valueForKey:](a4, "valueForKey:", -[NSArray objectAtIndexedSubscript:](v19, "objectAtIndexedSubscript:", 0));
        *(_DWORD *)buf = 136446722;
        v45 = v35;
        v46 = 2114;
        v47 = v31;
        v48 = 2114;
        v49 = v32;
        _os_log_impl(&dword_1921E4000, v30, OS_LOG_TYPE_INFO, "MTLFunction %{public}s : %{public}@ : %{public}@", buf, 0x20u);
      }
    }
  }
  return v36;
}

void CI::MetalKernel::iterateOverFunctionConstants(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  CI *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  CI *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id obj;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 72);
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v25 = v2;
  obj = (id)objc_msgSend(v2, "allKeys");
  v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v42, 16);
  if (v24)
  {
    v23 = *(_QWORD *)v34;
    do
    {
      v3 = 0;
      do
      {
        if (*(_QWORD *)v34 != v23)
          objc_enumerationMutation(obj);
        v4 = *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * v3);
        v5 = (void *)objc_msgSend(*(id *)(a1 + 24), "objectForKeyedSubscript:", v4);
        if (v5)
        {
          v6 = (int)objc_msgSend(v5, "intValue");
          v7 = (CI *)objc_msgSend(v25, "objectForKeyedSubscript:", v4);
          v8 = 4;
          v9 = 3;
          v27 = v6;
          v28 = v3;
          switch(v6)
          {
            case 3:
            case 16:
            case 29:
            case 33:
            case 37:
            case 41:
            case 45:
            case 49:
            case 53:
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v40 = 0u;
                v41 = 0u;
                v38 = 0u;
                v39 = 0u;
                CI::packSingleValue(v7, 0, v6, (MTLDataType)&v38, v10);
                goto LABEL_38;
              }
              NSLog(CFSTR("Could not set the function constant '%@' because the client object is not a NSNumber.\n"), v4, v20);
              return;
            case 4:
            case 17:
            case 30:
            case 34:
            case 38:
            case 42:
            case 46:
            case 50:
            case 54:
              v9 = v6 - 1;
              v8 = 2;
              goto LABEL_26;
            case 5:
            case 18:
            case 31:
            case 35:
            case 39:
            case 43:
            case 47:
            case 51:
            case 55:
              v9 = v6 - 2;
              v8 = 3;
              goto LABEL_26;
            case 6:
            case 19:
            case 32:
            case 36:
            case 40:
            case 44:
            case 48:
            case 52:
            case 56:
              v8 = 4;
              v9 = v6 - 3;
              goto LABEL_26;
            case 7:
              goto LABEL_26;
            case 8:
            case 10:
              v8 = 6;
              goto LABEL_23;
            case 9:
            case 13:
              v8 = 8;
              goto LABEL_23;
            case 11:
              v8 = 9;
              goto LABEL_23;
            case 12:
            case 14:
              v8 = 12;
              goto LABEL_23;
            case 15:
              v8 = 16;
LABEL_23:
              v9 = 3;
              goto LABEL_26;
            case 20:
              v8 = 4;
              goto LABEL_25;
            case 21:
            case 23:
              v8 = 6;
              goto LABEL_25;
            case 22:
            case 26:
              v8 = 8;
              goto LABEL_25;
            case 24:
              v8 = 9;
              goto LABEL_25;
            case 25:
            case 27:
              v8 = 12;
LABEL_25:
              v9 = 16;
              goto LABEL_26;
            case 28:
              v9 = 16;
              v8 = 16;
LABEL_26:
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0 || -[CI count](v7, "count") != v8)
              {
                NSLog(CFSTR("Could not set the function constant '%@' because the client object is not a NSArray with %d items.\n"), v4, v8);
                return;
              }
              v40 = 0u;
              v41 = 0u;
              v38 = 0u;
              v39 = 0u;
              v29 = 0u;
              v30 = 0u;
              v31 = 0u;
              v32 = 0u;
              v12 = -[CI countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
              if (v12)
              {
                v13 = v12;
                v14 = 0;
                v15 = *(_QWORD *)v30;
                do
                {
                  for (i = 0; i != v13; ++i)
                  {
                    if (*(_QWORD *)v30 != v15)
                      objc_enumerationMutation(v7);
                    v17 = *(CI **)(*((_QWORD *)&v29 + 1) + 8 * i);
                    objc_opt_class();
                    if ((objc_opt_isKindOfClass() & 1) != 0)
                      CI::packSingleValue(v17, (NSNumber *)(v14 + i), v9, (MTLDataType)&v38, v18);
                    else
                      NSLog(CFSTR("Could not set index %d for the function constant '%@' because the client object is not a NSNumber.\n"), v14 + i, v4);
                  }
                  v13 = -[CI countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
                  v14 = (v14 + i);
                }
                while (v13);
              }
LABEL_38:
              (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(a2 + 16))(a2, &v38, v27, v4);
              v3 = v28;
              break;
            default:
              NSLog(CFSTR("Could not set the function constant '%@' because its type is unsupported.\n"), v4, v20);
              return;
          }
        }
        else
        {
          LODWORD(v38) = 0;
          objc_msgSend((id)objc_msgSend(v25, "objectForKeyedSubscript:", v4), "floatValue");
          LODWORD(v38) = v11;
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(a2 + 16))(a2, &v38, 3, v4);
        }
        ++v3;
      }
      while (v3 != v24);
      v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v42, 16);
      v24 = v19;
    }
    while (v19);
  }
}

uint64_t ___ZN2CI11MetalKernelC2EPKcP15CIKernelLibraryP12NSDictionaryS6_bb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setConstantValue:type:withName:", a2, a3, a4);
}

uint64_t CI::MetalKernel::function(CI::MetalKernel *this)
{
  int v2;
  void *v3;
  uint64_t v4;

  v2 = *((unsigned __int8 *)this + 48);
  v3 = (void *)*((_QWORD *)this + 2);
  v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *((_QWORD *)this + 1));
  if (v2)
    return objc_msgSend(v3, "newSpecializedFunctionWithName:constants:", v4, *((_QWORD *)this + 7));
  else
    return objc_msgSend(v3, "newFunctionWithName:", v4);
}

uint64_t CI::MetalKernel::isFromLibrary(id *this, NSString *a2)
{
  uint64_t result;

  result = objc_msgSend(this[2], "url");
  if (result)
    return -[NSString containsString:](a2, "containsString:", objc_msgSend((id)objc_msgSend(this[2], "url"), "lastPathComponent"));
  return result;
}

uint64_t CI::MetalKernel::useMTLFunctionBitCodeHashForProgramDigest(id *this)
{
  int v1;
  void *v2;
  void *v3;
  unsigned int v4;

  v1 = *((unsigned __int8 *)this + 64);
  v2 = (void *)objc_msgSend(this[2], "url");
  if (v2)
  {
    v3 = (void *)objc_msgSend(v2, "absoluteString");
    if ((objc_msgSend(v3, "containsString:", CFSTR("CCPortrait.bundle/CoreImageKernels.ci.metallib")) & 1) != 0)
      v4 = 0;
    else
      v4 = objc_msgSend(v3, "containsString:", CFSTR("CCPortrait.bundle/CoreImageKernels_only.ci.metallib")) ^ 1;
  }
  else
  {
    v4 = 1;
  }
  if (v1)
    return 0;
  else
    return v4;
}

uint64_t CI::packSingleValue(CI *this, NSNumber *a2, uint64_t a3, MTLDataType a4, void *a5)
{
  int v6;
  uint64_t result;
  int v13;

  v6 = (int)a2;
  if (a3 <= 36)
  {
    if (a3 > 28)
    {
      if (a3 == 29)
      {
        result = -[CI intValue](this, "intValue", 29, a4, a5);
      }
      else
      {
        if (a3 != 33)
          goto LABEL_25;
        result = -[CI unsignedIntValue](this, "unsignedIntValue", 33, a4, a5);
      }
      *(_DWORD *)(a4 + 4 * v6) = result;
    }
    else
    {
      if (a3 != 3)
      {
        if (a3 == 16)
        {
          result = -[CI floatValue](this, "floatValue", 16, a4, a5);
          __asm { FCVT            H0, S0 }
          *(_WORD *)(a4 + 2 * v6) = _S0;
          return result;
        }
        goto LABEL_25;
      }
      result = -[CI floatValue](this, "floatValue", 3, a4, a5);
      *(_DWORD *)(a4 + 4 * v6) = v13;
    }
  }
  else
  {
    if (a3 > 44)
    {
      switch(a3)
      {
        case '-':
          result = -[CI charValue](this, "charValue", 45, a4, a5);
          goto LABEL_19;
        case '1':
          result = -[CI unsignedCharValue](this, "unsignedCharValue", 49, a4, a5);
          goto LABEL_19;
        case '5':
          result = -[CI BOOLValue](this, "BOOLValue", 53, a4, a5);
LABEL_19:
          *(_BYTE *)(a4 + v6) = result;
          return result;
      }
LABEL_25:
      abort();
    }
    if (a3 == 37)
    {
      result = -[CI shortValue](this, "shortValue", 37, a4, a5);
    }
    else
    {
      if (a3 != 41)
        goto LABEL_25;
      result = -[CI unsignedShortValue](this, "unsignedShortValue", 41, a4, a5);
    }
    *(_WORD *)(a4 + 2 * v6) = result;
  }
  return result;
}

void CI::MetalKernel::~MetalKernel(id *this)
{
  id v2;

  *this = &off_1E2EB8A90;

  v2 = this[1];
  if (v2)
    free(v2);

}

{
  CI::MetalKernel::~MetalKernel(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::MetalKernel::function(uint64_t a1, id *a2)
{
  id v3;

  if (!*(_BYTE *)(a1 + 48))
    return objc_msgSend(*(id *)(a1 + 16), "newFunctionWithName:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *(_QWORD *)(a1 + 8)));
  v3 = *a2;
  objc_msgSend(*a2, "setName:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *(_QWORD *)(a1 + 8)));
  objc_msgSend(v3, "setConstantValues:", *(_QWORD *)(a1 + 56));
  return objc_msgSend(*(id *)(a1 + 16), "newSpecializedFunctionWithDescriptor:", v3);
}

uint64_t CI::PrecompiledWarpKernel::add_to_digest(id *this, CI::XXHashHelper *a2)
{
  uint64_t result;
  uint64_t __src;

  CI::Kernel::add_to_digest((CI::Kernel *)(this + 10), a2);
  __src = (*((uint64_t (**)(id *))*this + 5))(this);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  result = CI::MetalKernel::useMTLFunctionBitCodeHashForProgramDigest(this);
  if ((_DWORD)result)
  {
    __src = (uint64_t)this[5];
    return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  }
  return result;
}

uint64_t `non-virtual thunk to'CI::PrecompiledWarpKernel::add_to_digest(id *this, CI::XXHashHelper *a2)
{
  return CI::PrecompiledWarpKernel::add_to_digest(this - 10, a2);
}

uint64_t CI::PrecompiledColorKernel::add_to_digest(id *this, CI::XXHashHelper *a2)
{
  uint64_t result;
  uint64_t __src;

  CI::Kernel::add_to_digest((CI::Kernel *)(this + 10), a2);
  __src = (*((uint64_t (**)(id *))*this + 5))(this);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  result = CI::MetalKernel::useMTLFunctionBitCodeHashForProgramDigest(this);
  if ((_DWORD)result)
  {
    __src = (uint64_t)this[5];
    return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  }
  return result;
}

uint64_t `non-virtual thunk to'CI::PrecompiledColorKernel::add_to_digest(id *this, CI::XXHashHelper *a2)
{
  return CI::PrecompiledColorKernel::add_to_digest(this - 10, a2);
}

uint64_t CI::PrecompiledGeneralKernel::add_to_digest(id *this, CI::XXHashHelper *a2)
{
  uint64_t result;
  uint64_t __src;

  CI::Kernel::add_to_digest((CI::Kernel *)(this + 10), a2);
  __src = (*((uint64_t (**)(id *))*this + 5))(this);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  result = CI::MetalKernel::useMTLFunctionBitCodeHashForProgramDigest(this);
  if ((_DWORD)result)
  {
    __src = (uint64_t)this[5];
    return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  }
  return result;
}

uint64_t `non-virtual thunk to'CI::PrecompiledGeneralKernel::add_to_digest(id *this, CI::XXHashHelper *a2)
{
  return CI::PrecompiledGeneralKernel::add_to_digest(this - 10, a2);
}

void CI::PrecompiledGeneralKernel::~PrecompiledGeneralKernel(id *this)
{
  CI::Kernel::~Kernel((CI::Kernel *)(this + 10));
  CI::MetalKernel::~MetalKernel(this);
}

{
  CI::Kernel::~Kernel((CI::Kernel *)(this + 10));
  CI::MetalKernel::~MetalKernel(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::PrecompiledGeneralKernel::metalConstants(CI::PrecompiledGeneralKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(CI::PrecompiledGeneralKernel *))(*(_QWORD *)this + 16))(this) + 72);
}

uint64_t CI::PrecompiledGeneralKernel::metalConstantTypes(CI::PrecompiledGeneralKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(CI::PrecompiledGeneralKernel *))(*(_QWORD *)this + 16))(this) + 24);
}

uint64_t CI::PrecompiledGeneralKernel::metalConstantsDigest(CI::PrecompiledGeneralKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(CI::PrecompiledGeneralKernel *))(*(_QWORD *)this + 16))(this) + 32);
}

void `non-virtual thunk to'CI::PrecompiledGeneralKernel::~PrecompiledGeneralKernel(CI::PrecompiledGeneralKernel *this)
{
  id *v1;

  v1 = (id *)((char *)this - 80);
  CI::Kernel::~Kernel(this);
  CI::MetalKernel::~MetalKernel(v1);
}

{
  id *v1;

  v1 = (id *)((char *)this - 80);
  CI::Kernel::~Kernel(this);
  CI::MetalKernel::~MetalKernel(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t `non-virtual thunk to'CI::PrecompiledGeneralKernel::metalConstants(CI::PrecompiledGeneralKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 16))((char *)this - 80) + 72);
}

uint64_t `non-virtual thunk to'CI::PrecompiledGeneralKernel::metalConstantTypes(CI::PrecompiledGeneralKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 16))((char *)this - 80) + 24);
}

uint64_t `non-virtual thunk to'CI::PrecompiledGeneralKernel::metalConstantsDigest(CI::PrecompiledGeneralKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 16))((char *)this - 80) + 32);
}

uint64_t `non-virtual thunk to'CI::PrecompiledGeneralKernel::metal_kernel(CI::PrecompiledGeneralKernel *this)
{
  return (uint64_t)this - 80;
}

void CI::PrecompiledColorKernel::~PrecompiledColorKernel(id *this)
{
  CI::Kernel::~Kernel((CI::Kernel *)(this + 10));
  CI::MetalKernel::~MetalKernel(this);
}

{
  CI::Kernel::~Kernel((CI::Kernel *)(this + 10));
  CI::MetalKernel::~MetalKernel(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::PrecompiledColorKernel::metalConstants(CI::PrecompiledColorKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(CI::PrecompiledColorKernel *))(*(_QWORD *)this + 16))(this) + 72);
}

uint64_t CI::PrecompiledColorKernel::metalConstantTypes(CI::PrecompiledColorKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(CI::PrecompiledColorKernel *))(*(_QWORD *)this + 16))(this) + 24);
}

uint64_t CI::PrecompiledColorKernel::metalConstantsDigest(CI::PrecompiledColorKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(CI::PrecompiledColorKernel *))(*(_QWORD *)this + 16))(this) + 32);
}

void `non-virtual thunk to'CI::PrecompiledColorKernel::~PrecompiledColorKernel(CI::PrecompiledColorKernel *this)
{
  id *v1;

  v1 = (id *)((char *)this - 80);
  CI::Kernel::~Kernel(this);
  CI::MetalKernel::~MetalKernel(v1);
}

{
  id *v1;

  v1 = (id *)((char *)this - 80);
  CI::Kernel::~Kernel(this);
  CI::MetalKernel::~MetalKernel(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t `non-virtual thunk to'CI::PrecompiledColorKernel::metalConstants(CI::PrecompiledColorKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 16))((char *)this - 80) + 72);
}

uint64_t `non-virtual thunk to'CI::PrecompiledColorKernel::metalConstantTypes(CI::PrecompiledColorKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 16))((char *)this - 80) + 24);
}

uint64_t `non-virtual thunk to'CI::PrecompiledColorKernel::metalConstantsDigest(CI::PrecompiledColorKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 16))((char *)this - 80) + 32);
}

uint64_t `non-virtual thunk to'CI::PrecompiledColorKernel::metal_kernel(CI::PrecompiledColorKernel *this)
{
  return (uint64_t)this - 80;
}

void CI::PrecompiledWarpKernel::~PrecompiledWarpKernel(id *this)
{
  CI::Kernel::~Kernel((CI::Kernel *)(this + 10));
  CI::MetalKernel::~MetalKernel(this);
}

{
  CI::Kernel::~Kernel((CI::Kernel *)(this + 10));
  CI::MetalKernel::~MetalKernel(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::PrecompiledWarpKernel::metalConstants(CI::PrecompiledWarpKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(CI::PrecompiledWarpKernel *))(*(_QWORD *)this + 16))(this) + 72);
}

uint64_t CI::PrecompiledWarpKernel::metalConstantTypes(CI::PrecompiledWarpKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(CI::PrecompiledWarpKernel *))(*(_QWORD *)this + 16))(this) + 24);
}

uint64_t CI::PrecompiledWarpKernel::metalConstantsDigest(CI::PrecompiledWarpKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(CI::PrecompiledWarpKernel *))(*(_QWORD *)this + 16))(this) + 32);
}

void `non-virtual thunk to'CI::PrecompiledWarpKernel::~PrecompiledWarpKernel(CI::PrecompiledWarpKernel *this)
{
  id *v1;

  v1 = (id *)((char *)this - 80);
  CI::Kernel::~Kernel(this);
  CI::MetalKernel::~MetalKernel(v1);
}

{
  id *v1;

  v1 = (id *)((char *)this - 80);
  CI::Kernel::~Kernel(this);
  CI::MetalKernel::~MetalKernel(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t `non-virtual thunk to'CI::PrecompiledWarpKernel::metalConstants(CI::PrecompiledWarpKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 16))((char *)this - 80) + 72);
}

uint64_t `non-virtual thunk to'CI::PrecompiledWarpKernel::metalConstantTypes(CI::PrecompiledWarpKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 16))((char *)this - 80) + 24);
}

uint64_t `non-virtual thunk to'CI::PrecompiledWarpKernel::metalConstantsDigest(CI::PrecompiledWarpKernel *this)
{
  return *(_QWORD *)((*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 16))((char *)this - 80) + 32);
}

uint64_t `non-virtual thunk to'CI::PrecompiledWarpKernel::metal_kernel(CI::PrecompiledWarpKernel *this)
{
  return (uint64_t)this - 80;
}

uint64_t CI::WarpKernel::WarpKernel(uint64_t a1, const char *a2, char *a3, char *a4, char a5, void **a6, uint64_t a7, unsigned int a8, int a9, char a10)
{
  *(_QWORD *)CI::Kernel::Kernel(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8, a9, 0, 1, 1) = &off_1E2EB85F0;
  if (a10)
    CI::SerialValArray<int>::append(a6, 30);
  CI::Kernel::set_preserves_range(a1, 1);
  CI::Kernel::set_preserves_colorspace(a1, 1);
  return a1;
}

{
  return CI::WarpKernel::WarpKernel(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t CI::Kernel::Kernel(uint64_t a1, const char *a2, char *a3, char *a4, char a5, uint64_t a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, uint64_t a12)
{
  int16x8_t v18;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1E2EBECD0;
  *(_BYTE *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = a9;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_DWORD *)(a1 + 84) = 0;
  *(int64x2_t *)(a1 + 88) = vdupq_n_s64(1uLL);
  *(_BYTE *)(a1 + 104) = a5;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = a10;
  *(_QWORD *)(a1 + 128) = a11;
  *(_QWORD *)(a1 + 136) = a12;
  CI::KernelArguments::KernelArguments((_QWORD *)(a1 + 144), a6, a7);
  *(_DWORD *)(a1 + 163) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  if (a2)
    *(_QWORD *)(a1 + 24) = strdup(a2);
  if (a3)
  {
    if ((a5 & 1) == 0)
      a3 = strdup(a3);
    *(_QWORD *)(a1 + 32) = a3;
  }
  if (a4)
  {
    if ((a5 & 1) == 0)
      a4 = strdup(a4);
    *(_QWORD *)(a1 + 40) = a4;
  }
  *(_BYTE *)(a1 + 165) = a8 & 1;
  *(_BYTE *)(a1 + 166) = (a8 & 4) != 0;
  *(_BYTE *)(a1 + 164) = (a8 & 0x80) != 0;
  v18.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(a8) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFBFFFFFFFCFFFALL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)(a1 + 160) = vmovn_s16(v18).u32[0];
  return a1;
}

uint64_t *CI::Kernel::set_argument_type(uint64_t *a1, int a2, int a3)
{
  uint64_t *v5;

  v5 = a1 + 18;
  (*(void (**)(uint64_t *))(*a1 + 72))(a1);
  return CI::KernelArguments::set_type(v5, a2, a3);
}

uint64_t CI::Kernel::num_sample_arguments(CI::Kernel *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int type;

  if (*((_BYTE *)this + 12))
    v2 = CI::KernelArguments::count((CI::Kernel *)((char *)this + 144));
  else
    v2 = *((_DWORD *)this + 5);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = v2;
    while (!*((_BYTE *)this + 12))
    {
      if (v3 < *((int *)this + 5))
      {
        type = *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v3);
LABEL_10:
        if (type == 1)
          v4 = (v4 + 1);
        else
          v4 = v4;
      }
      if (v5 == ++v3)
        return v4;
    }
    type = CI::KernelArguments::get_type((CI::Kernel *)((char *)this + 144), v3);
    goto LABEL_10;
  }
  return 0;
}

uint64_t CI::Kernel::num_sampler_arguments(CI::Kernel *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int type;

  if (*((_BYTE *)this + 12))
    v2 = CI::KernelArguments::count((CI::Kernel *)((char *)this + 144));
  else
    v2 = *((_DWORD *)this + 5);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = v2;
    while (!*((_BYTE *)this + 12))
    {
      if (v3 < *((int *)this + 5))
      {
        type = *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v3);
LABEL_10:
        if (type == 2)
          v4 = (v4 + 1);
        else
          v4 = v4;
      }
      if (v5 == ++v3)
        return v4;
    }
    type = CI::KernelArguments::get_type((CI::Kernel *)((char *)this + 144), v3);
    goto LABEL_10;
  }
  return 0;
}

uint64_t CI::Kernel::index_of_first_image_argument(CI::Kernel *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int type;
  int v6;

  if (*((_BYTE *)this + 12))
    v2 = CI::KernelArguments::count((CI::Kernel *)((char *)this + 144));
  else
    v2 = *((_DWORD *)this + 5);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = v2;
    do
    {
      if (*((_BYTE *)this + 12))
      {
        type = CI::KernelArguments::get_type((CI::Kernel *)((char *)this + 144), v3);
      }
      else
      {
        if (v3 >= *((int *)this + 5))
          goto LABEL_13;
        type = *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v3);
      }
      if (type == 1)
        return v3;
      if (*((_BYTE *)this + 12))
      {
        v6 = CI::KernelArguments::get_type((CI::Kernel *)((char *)this + 144), v3);
        goto LABEL_15;
      }
LABEL_13:
      if (v3 < *((int *)this + 5))
      {
        v6 = *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v3);
LABEL_15:
        if (v6 == 2)
          return v3;
      }
      ++v3;
    }
    while (v4 != v3);
  }
  return 0xFFFFFFFFLL;
}

uint64_t CI::Kernel::index_of_nth_image_argument(CI::Kernel *this, int a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int type;
  int v9;

  if (*((_BYTE *)this + 12))
    v4 = CI::KernelArguments::count((CI::Kernel *)((char *)this + 144));
  else
    v4 = *((_DWORD *)this + 5);
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = v4;
    do
    {
      if (*((_BYTE *)this + 12))
      {
        type = CI::KernelArguments::get_type((CI::Kernel *)((char *)this + 144), v5);
      }
      else
      {
        if (v5 >= *((int *)this + 5))
          goto LABEL_13;
        type = *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v5);
      }
      if (type == 1)
        goto LABEL_16;
      if (*((_BYTE *)this + 12))
      {
        v9 = CI::KernelArguments::get_type((CI::Kernel *)((char *)this + 144), v5);
        goto LABEL_15;
      }
LABEL_13:
      if (v5 >= *((int *)this + 5))
        goto LABEL_18;
      v9 = *(_DWORD *)(*((_QWORD *)this + 9) + 4 * v5);
LABEL_15:
      if (v9 == 2)
      {
LABEL_16:
        if (v6 == a2)
          return v5;
        ++v6;
      }
LABEL_18:
      ++v5;
    }
    while (v7 != v5);
  }
  return 0xFFFFFFFFLL;
}

uint64_t CI::Kernel::set_output_size(uint64_t this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(this + 128) = a2;
  *(_QWORD *)(this + 136) = a3;
  return this;
}

uint64_t CI::Kernel::set_preserves_alpha(uint64_t this, char a2)
{
  *(_BYTE *)(this + 162) = a2;
  return this;
}

uint64_t CI::Kernel::set_preserves_range(uint64_t this, char a2)
{
  *(_BYTE *)(this + 163) = a2;
  return this;
}

uint64_t CI::Kernel::set_preserves_colorspace(uint64_t this, char a2)
{
  *(_BYTE *)(this + 164) = a2;
  return this;
}

uint64_t CI::Kernel::set_half_color_inputs(uint64_t this, char a2)
{
  *(_BYTE *)(this + 161) = a2;
  return this;
}

void (***CI::Kernel::builtin(int a1))(CI::ColorKernel *__hidden this)
{
  NSObject *v3;

  if ((a1 - 1) < 0x58)
    return off_1E2EC7B38[a1 - 1];
  v3 = ci_logger_render();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    CI::Kernel::builtin(a1, v3);
  return 0;
}

double cikernel::_ci_bgra(int32x4_t a1)
{
  int8x16_t v1;
  double result;

  v1 = (int8x16_t)vrev64q_s32(a1);
  *(_QWORD *)&result = vextq_s8(v1, v1, 0xCuLL).u64[0];
  return result;
}

double cikernel::_ci_abgr(int32x4_t a1)
{
  int8x16_t v1;
  double result;

  v1 = (int8x16_t)vrev64q_s32(a1);
  *(_QWORD *)&result = vextq_s8(v1, v1, 8uLL).u64[0];
  return result;
}

double cikernel::_ci_argb(int8x16_t a1)
{
  double result;

  *(_QWORD *)&result = vextq_s8(a1, a1, 0xCuLL).u64[0];
  return result;
}

double cikernel::_ci_gbra(int32x4_t a1)
{
  double result;

  *(_QWORD *)&result = vzip2q_s32(vzip1q_s32(a1, (int32x4_t)vextq_s8((int8x16_t)a1, (int8x16_t)a1, 0xCuLL)), a1).u64[0];
  return result;
}

double cikernel::_ci_grab(int32x4_t a1)
{
  double result;

  *(_QWORD *)&result = vrev64q_s32(a1).u64[0];
  return result;
}

double cikernel::_ci_gbar(int8x16_t a1)
{
  double result;

  *(_QWORD *)&result = vextq_s8(a1, a1, 4uLL).u64[0];
  return result;
}

double cikernel::_ci_bgr1(int32x4_t a1)
{
  int8x16_t v1;
  double result;

  v1 = (int8x16_t)vrev64q_s32(a1);
  *(_QWORD *)&result = vextq_s8(v1, v1, 0xCuLL).u64[0];
  return result;
}

double cikernel::_ci_arg1(int8x16_t a1)
{
  double result;

  *(_QWORD *)&result = vextq_s8(a1, a1, 0xCuLL).u64[0];
  return result;
}

double cikernel::_ci_gra1(int32x4_t a1)
{
  double result;

  *(_QWORD *)&result = vrev64q_s32(a1).u64[0];
  return result;
}

double cikernel::_ci_gba1(int8x16_t a1)
{
  double result;

  *(_QWORD *)&result = vextq_s8(a1, a1, 4uLL).u64[0];
  return result;
}

double cikernel::_ci_abg1(int8x16_t a1)
{
  double result;

  *(_QWORD *)&result = vrev64q_s32((int32x4_t)vextq_s8(a1, a1, 8uLL)).u64[0];
  return result;
}

double cikernel::_ci_1bgr(int32x4_t a1)
{
  int8x16_t v1;
  int8x16_t v2;
  double result;

  v1 = (int8x16_t)vrev64q_s32(a1);
  v2 = vextq_s8(v1, v1, 0xCuLL);
  __asm { FMOV            V1.4S, #1.0 }
  *(_QWORD *)&result = vextq_s8(vextq_s8(v2, _Q1, 4uLL), v2, 0xCuLL).u64[0];
  return result;
}

double cikernel::_ci_1rgb(int8x16_t a1)
{
  double result;

  __asm { FMOV            V1.4S, #1.0 }
  *(_QWORD *)&result = vextq_s8(vextq_s8(_Q1, _Q1, 4uLL), a1, 0xCuLL).u64[0];
  return result;
}

double cikernel::_ci_gb1r(int8x16_t a1)
{
  double result;

  *(_QWORD *)&result = vextq_s8(a1, a1, 4uLL).u64[0];
  return result;
}

double cikernel::_ci_gr1b(int32x4_t a1)
{
  int32x4_t v6;

  __asm { FMOV            V1.4S, #1.0 }
  v6 = vtrn1q_s32(_Q1, a1);
  v6.i32[0] = a1.i32[1];
  return *(double *)v6.i64;
}

double cikernel::_ci_aaaa(int32x4_t a1)
{
  double result;

  *(_QWORD *)&result = vdupq_laneq_s32(a1, 3).u64[0];
  return result;
}

double cikernel::_ci_rrrr(int32x2_t a1)
{
  double result;

  *(_QWORD *)&result = vdupq_lane_s32(a1, 0).u64[0];
  return result;
}

double cikernel::_ci_000r()
{
  return 0.0;
}

double cikernel::_ci_rrr1(int32x2_t a1)
{
  double result;

  *(_QWORD *)&result = vdupq_lane_s32(a1, 0).u64[0];
  return result;
}

float cikernel::_ci_a001(__n128 a1)
{
  return a1.n128_f32[3];
}

double cikernel::_ci_ra01(__n128 a1)
{
  return COERCE_DOUBLE(__PAIR64__(a1.n128_u32[3], a1.n128_u32[0]));
}

double cikernel::_ci_aaa1(int32x4_t a1)
{
  double result;

  *(_QWORD *)&result = vdupq_laneq_s32(a1, 3).u64[0];
  return result;
}

double cikernel::_ci_rrrg(int32x4_t a1)
{
  double result;

  *(_QWORD *)&result = vzip1q_s32(a1, a1).u64[0];
  return result;
}

__n64 cikernel::_ci_rg_to_rr1(double a1)
{
  __n64 result;

  result.n64_f32[0] = (*(float *)&a1 + *((float *)&a1 + 1) * 256.0) / 257.0;
  result.n64_u32[1] = 0;
  return result;
}

double cikernel::_ci_rg_to_ll1(double a1)
{
  double v1;
  double result;

  v1 = (*(float *)&a1 + *((float *)&a1 + 1) * 256.0) / 257.0;
  *(float *)&v1 = v1;
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&v1, 0).u64[0];
  return result;
}

double cikernel::_ci_rg_to_a()
{
  return 0.0;
}

double cikernel::_ci_rg_to_i(double a1)
{
  double v1;
  double result;

  v1 = (*(float *)&a1 + *((float *)&a1 + 1) * 256.0) / 257.0;
  *(float *)&v1 = v1;
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&v1, 0).u64[0];
  return result;
}

double cikernel::_ci_la_to_ll1(__n128 a1)
{
  double v1;
  double result;

  v1 = (a1.n128_f32[0] + a1.n128_f32[3] * 256.0) / 257.0;
  *(float *)&v1 = v1;
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&v1, 0).u64[0];
  return result;
}

double cikernel::_ci_la_to_a()
{
  return 0.0;
}

double cikernel::_ci_la_to_i(__n128 a1)
{
  double v1;
  double result;

  v1 = (a1.n128_f32[0] + a1.n128_f32[3] * 256.0) / 257.0;
  *(float *)&v1 = v1;
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&v1, 0).u64[0];
  return result;
}

__n64 cikernel::_ci_la_to_rr1(__n128 a1)
{
  __n64 result;

  result.n64_f32[0] = (a1.n128_f32[0] + a1.n128_f32[3] * 256.0) / 257.0;
  result.n64_u32[1] = 0;
  return result;
}

float32x2_t cikernel::_ci_rgba_to_rrgg1(int8x16_t a1)
{
  int32x2_t v1;

  v1 = (int32x2_t)vextq_s8(a1, a1, 8uLL).u64[0];
  return vcvt_f32_f64(vdivq_f64(vmlaq_f64(vcvtq_f64_f32((float32x2_t)vzip1_s32(*(int32x2_t *)a1.i8, v1)), (float64x2_t)vdupq_n_s64(0x4070000000000000uLL), vcvtq_f64_f32((float32x2_t)vzip2_s32(*(int32x2_t *)a1.i8, v1))), (float64x2_t)vdupq_n_s64(0x4070100000000000uLL)));
}

double cikernel::_ci_rgba_to_llaa(double a1)
{
  double v1;
  double result;

  v1 = (*(float *)&a1 + *((float *)&a1 + 1) * 256.0) / 257.0;
  *(float *)&v1 = v1;
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&v1, 0).u64[0];
  return result;
}

double cikernel::_ci_to_r16_as_rg8(float a1)
{
  float v1;
  float32x4_t v2;
  double result;

  v1 = 65535.0 * a1;
  v2.f32[0] = v1 + (float)(floorf(v1 * 0.0039062) * -256.0);
  v2.f32[1] = (float)(v1 - v2.f32[0]) * 0.0039062;
  v2.i32[2] = 0;
  v2.i32[3] = 1.0;
  *(_QWORD *)&result = vdivq_f32(v2, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double cikernel::_ci_to_l16_as_rg8(float32x4_t a1)
{
  int8x16_t v1;
  float32x4_t v2;
  double result;

  v1 = (int8x16_t)vmulq_f32(a1, (float32x4_t)xmmword_1924921A0);
  *(float *)v1.i32 = vaddv_f32(vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)))
                   * 65535.0;
  v2.f32[0] = *(float *)v1.i32 + (float)(floorf(*(float *)v1.i32 * 0.0039062) * -256.0);
  v2.f32[1] = (float)(*(float *)v1.i32 - v2.f32[0]) * 0.0039062;
  v2.i32[2] = 0;
  v2.i32[3] = 1.0;
  *(_QWORD *)&result = vdivq_f32(v2, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double cikernel::_ci_to_a16_as_rg8(float32x4_t a1)
{
  float v1;
  float32x4_t v2;
  double result;

  v1 = vmuls_lane_f32(65535.0, a1, 3);
  v2.f32[0] = v1 + (float)(floorf(v1 * 0.0039062) * -256.0);
  v2.f32[1] = (float)(v1 - v2.f32[0]) * 0.0039062;
  v2.i32[2] = 0;
  v2.i32[3] = 1.0;
  *(_QWORD *)&result = vdivq_f32(v2, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

float32x2_t cikernel::_ci_to_YCbYCr_as_rg8(CI *a1, int8x16_t a2)
{
  float32x2_t v2;
  _QWORD *DC;
  int32x2_t v4;
  float32x2_t v11;

  v11 = *(float32x2_t *)a2.i8;
  v2 = (float32x2_t)vzip1_s32(*(int32x2_t *)a2.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL));
  DC = (_QWORD *)CI::getDC(a1);
  v4.i32[0] = 0;
  if ((float)((float)(0.5 * COERCE_FLOAT(*DC)) - floorf(0.5 * COERCE_FLOAT(*DC))) >= 0.5)
    *(float *)v4.i32 = 1.0;
  __asm { FMOV            V2.2S, #1.0 }
  return vmla_n_f32(vmul_f32(v11, vsub_f32(_D2, (float32x2_t)vdup_lane_s32(v4, 0))), v2, *(float *)v4.i32);
}

float32x2_t cikernel::_ci_to_CbYCrY_as_rg8(CI *a1, int8x16_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  _QWORD *DC;
  int32x2_t v5;
  float32x2_t v12;

  v2 = (float32x2_t)vrev64_s32(*(int32x2_t *)a2.i8);
  v3.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  v3.i32[1] = a2.i32[0];
  v12 = v3;
  DC = (_QWORD *)CI::getDC(a1);
  v5.i32[0] = 0;
  if ((float)((float)(0.5 * COERCE_FLOAT(*DC)) - floorf(0.5 * COERCE_FLOAT(*DC))) >= 0.5)
    *(float *)v5.i32 = 1.0;
  __asm { FMOV            V2.2S, #1.0 }
  return vmla_n_f32(vmul_f32(v2, vsub_f32(_D2, (float32x2_t)vdup_lane_s32(v5, 0))), v12, *(float *)v5.i32);
}

double cikernel::_ci_to_rg16_as_rgba8(double a1)
{
  float32x4_t v1;
  float32_t v2;
  float v3;
  double result;

  v1.f32[0] = (float)(65535.0 * *(float *)&a1) + (float)(floorf((float)(65535.0 * *(float *)&a1) * 0.0039062) * -256.0);
  v2 = (float)((float)(65535.0 * *(float *)&a1) - v1.f32[0]) * 0.0039062;
  v3 = vmuls_lane_f32(65535.0, *(float32x2_t *)&a1, 1);
  v1.f32[1] = v2;
  v1.f32[2] = v3 + (float)(floorf(v3 * 0.0039062) * -256.0);
  v1.f32[3] = (float)(v3 - v1.f32[2]) * 0.0039062;
  *(_QWORD *)&result = vdivq_f32(v1, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double cikernel::_ci_to_rg16_as_bgra8(double a1)
{
  float32_t v1;
  float32_t v2;
  float v3;
  float32x4_t v4;
  double result;

  v1 = (float)(65535.0 * *(float *)&a1) + (float)(floorf((float)(65535.0 * *(float *)&a1) * 0.0039062) * -256.0);
  v2 = (float)((float)(65535.0 * *(float *)&a1) - v1) * 0.0039062;
  v3 = vmuls_lane_f32(65535.0, *(float32x2_t *)&a1, 1);
  v4.f32[0] = v3 + (float)(floorf(v3 * 0.0039062) * -256.0);
  v4.f32[1] = v2;
  v4.f32[2] = v1;
  v4.f32[3] = (float)(v3 - v4.f32[0]) * 0.0039062;
  *(_QWORD *)&result = vdivq_f32(v4, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double cikernel::_ci_to_la16_as_rgba8(float32x4_t a1)
{
  int8x16_t v1;
  float32x4_t v2;
  float v3;
  double result;

  v1 = (int8x16_t)vmulq_f32(a1, (float32x4_t)xmmword_1924921A0);
  *(float *)v1.i32 = vaddv_f32(vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)))
                   * 65535.0;
  v2.f32[0] = *(float *)v1.i32 + (float)(floorf(*(float *)v1.i32 * 0.0039062) * -256.0);
  v3 = vmuls_lane_f32(65535.0, a1, 3);
  v2.f32[1] = (float)(*(float *)v1.i32 - v2.f32[0]) * 0.0039062;
  v2.f32[2] = v3 + (float)(floorf(v3 * 0.0039062) * -256.0);
  v2.f32[3] = (float)(v3 - v2.f32[2]) * 0.0039062;
  *(_QWORD *)&result = vdivq_f32(v2, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double cikernel::_ci_to_la16_as_bgra8(float32x4_t a1)
{
  int8x16_t v1;
  float32_t v2;
  float v3;
  float32x4_t v4;
  double result;

  v1 = (int8x16_t)vmulq_f32(a1, (float32x4_t)xmmword_1924921A0);
  *(float *)v1.i32 = vaddv_f32(vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)))
                   * 65535.0;
  v2 = *(float *)v1.i32 + (float)(floorf(*(float *)v1.i32 * 0.0039062) * -256.0);
  v3 = vmuls_lane_f32(65535.0, a1, 3);
  v4.f32[0] = v3 + (float)(floorf(v3 * 0.0039062) * -256.0);
  v4.f32[1] = (float)(*(float *)v1.i32 - v2) * 0.0039062;
  v4.f32[2] = v2;
  v4.f32[3] = (float)(v3 - v4.f32[0]) * 0.0039062;
  *(_QWORD *)&result = vdivq_f32(v4, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

void CI::none_s(_QWORD *a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  double (*v11)(_QWORD *, __n128);
  int v12;
  uint64_t v13;
  __n128 *v14;
  __int128 v15;

  v10 = a1[6];
  v11 = (double (*)(_QWORD *, __n128))a1[3];
  v12 = *(_DWORD *)(v10 + 16);
  v13 = *(_QWORD *)(v10 + 8);
  if (*((_BYTE *)a1 + 64))
    a1 = CI::setDC((CI *)(a3 + 16 * *(_QWORD *)(v10 + 32)), a2);
  v14 = (__n128 *)(a3 + 16 * v13);
  if (v12 != 5)
    v14 = (__n128 *)((char *)a2 + 64 * v13);
  *(double *)&v15 = v11(a1, *v14);
  *(_OWORD *)(a3 + 16 * a7) = v15;
}

double cikernel::_ci_to_rgb10wide_as_rgba8(float32x4_t a1)
{
  float32x4_t v1;
  int8x16_t v2;
  double result;
  int8x16_t v9;

  v1 = vabsq_f32(a1);
  v9 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3B4D2E1Cu), v1);
  v2.i64[0] = 0x8000000080000000;
  v2.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  v1.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(vmulq_f32((float32x4_t)vbslq_s8(v9, (int8x16_t)vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a1), (int8x16_t)vcgtzq_f32(a1)), vorrq_s8(vandq_s8((int8x16_t)a1, v2), _Q3), (int8x16_t)0), vmlaq_f32((float32x4_t)vdupq_n_s32(0xBD6147AE), (float32x4_t)vdupq_n_s32(0x3F870A3Du), (float32x4_t)_simd_pow_f4((simd_float4)v1, (simd_float4)xmmword_19248E040)))), (float32x4_t)vdupq_n_s32(0x3EFF3FD0u)), (float32x4_t)vdupq_n_s32(0x3EC0300Cu)).u64[0];
  return result;
}

double cikernel::_ci_to_rgb10widelinear_as_rgba8(float32x4_t a1)
{
  double result;

  *(_QWORD *)&result = vaddq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x3EFF3FD0u)), (float32x4_t)vdupq_n_s32(0x3EC0300Cu)).u64[0];
  return result;
}

double cikernel::_ci_to_argb10wide_as_rgba16(int32x4_t a1)
{
  int8x16_t v1;
  float32x4_t v2;
  float32x4_t v3;
  int8x16_t v4;
  float32x4_t v10;
  double result;
  int8x16_t v12;
  unsigned __int32 v13;

  v13 = a1.u32[3];
  v1 = (int8x16_t)vrev64q_s32(a1);
  v2 = (float32x4_t)vextq_s8(v1, v1, 0xCuLL);
  v3 = vabsq_f32(v2);
  v12 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3B4D2E1Cu), v3);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  v3.i32[3] = 0;
  v10 = (float32x4_t)vbslq_s8(v12, (int8x16_t)vmulq_f32(v2, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v2), (int8x16_t)vcgtzq_f32(v2)), vorrq_s8(vandq_s8((int8x16_t)v2, v4), _Q3), (int8x16_t)0), vmlaq_f32((float32x4_t)vdupq_n_s32(0xBD6147AE), (float32x4_t)vdupq_n_s32(0x3F870A3Du), (float32x4_t)_simd_pow_f4((simd_float4)v3, (simd_float4)xmmword_19248E040))));
  v10.i32[3] = v13;
  *(_QWORD *)&result = vdivq_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(vmulq_f32(v10, (float32x4_t)vdupq_n_s32(0x43FF0000u)), (float32x4_t)vdupq_n_s32(0x43C00000u)), (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x447FC000u)), (float32x4_t)vdupq_n_s32(0x42800000u)), (float32x4_t)vdupq_n_s32(0x477FFF00u)).u64[0];
  return result;
}

float32x4_t cikernel::_ci_argb10wide(float32x4_t a1)
{
  int8x16_t v1;
  float32x4_t v2;
  float32x4_t v3;
  int8x16_t v4;
  simd_float4 v10;
  float32x4_t result;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int32x4_t v15;

  v15 = (int32x4_t)vdivq_f32(vaddq_f32(vmulq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x477FFF00u)), (float32x4_t)vdupq_n_s32(0x3C800000u)), (float32x4_t)vdupq_n_s32(0xC3C00000)), (float32x4_t)vdupq_n_s32(0x43FF0000u));
  v1 = (int8x16_t)vrev64q_s32(v15);
  v2 = (float32x4_t)vextq_s8(v1, v1, 0xCuLL);
  v3 = vabsq_f32(v2);
  v13 = (int8x16_t)vmulq_f32(v2, (float32x4_t)vdupq_n_s32(0x3D9E8391u));
  v14 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), v3);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  v12 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v2), (int8x16_t)vcgtzq_f32(v2)), vorrq_s8(vandq_s8((int8x16_t)v2, v4), _Q3), (int8x16_t)0);
  v10 = (simd_float4)vmlaq_f32((float32x4_t)vdupq_n_s32(0x3D558919u), (float32x4_t)vdupq_n_s32(0x3F72A76Eu), v3);
  v10.i32[3] = 0;
  result = (float32x4_t)_simd_pow_f4(v10, (simd_float4)xmmword_19248E030);
  result.i64[0] = vbslq_s8(v14, v13, (int8x16_t)vmulq_f32(v12, result)).u64[0];
  result.i32[3] = v15.i32[3];
  return result;
}

double cikernel::_ci_10of16(float32x4_t a1)
{
  double result;

  __asm { FMOV            V1.4S, #1.0 }
  *(_QWORD *)&result = vminnmq_f32(vmaxnmq_f32(vdivq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x477FFF00u)), (float32x4_t)vdupq_n_s32(0x477FC000u)), (float32x4_t)0), _Q1).u64[0];
  return result;
}

__n64 cikernel::_ci_l10(float32x4_t a1)
{
  __n64 result;

  __asm { FMOV            V1.4S, #1.0 }
  result.n64_u32[0] = vminnmq_f32(vmaxnmq_f32(vdivq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x477FFF00u)), (float32x4_t)vdupq_n_s32(0x477FC000u)), (float32x4_t)0), _Q1).u32[0];
  result.n64_u32[1] = result.n64_u32[0];
  return result;
}

double cikernel::_ci_to_10of16(float32x4_t a1)
{
  double result;

  __asm { FMOV            V1.4S, #1.0 }
  *(_QWORD *)&result = vminnmq_f32(vmaxnmq_f32(vdivq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x477FC000u)), (float32x4_t)vdupq_n_s32(0x477FFF00u)), (float32x4_t)0), _Q1).u64[0];
  return result;
}

double cikernel::_ci_to_l10_as_r16(float32x4_t a1)
{
  int8x16_t v1;
  int8x16_t v2;
  double result;

  v1 = (int8x16_t)vmulq_f32(a1, (float32x4_t)xmmword_1924921A0);
  *(double *)v1.i64 = vaddv_f32(vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)))
                    * 65472.0
                    / 65535.0;
  *(float *)v1.i32 = *(double *)v1.i64;
  v2 = (int8x16_t)vdupq_laneq_s32((int32x4_t)a1, 3);
  *(_QWORD *)&result = vextq_s8(vextq_s8(v2, v1, 4uLL), v2, 0xCuLL).u64[0];
  return result;
}

void CI::none_s_f4_f4_f4(uint64_t a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  double (*v10)(__n128, __n128, __n128, __n128);
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __n128 *v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  __int128 v23;
  double (*v24)(__n128, __n128, __n128, __n128);

  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(double (**)(__n128, __n128, __n128, __n128))(a1 + 24);
  v11 = *(_DWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v9 + 8);
  v13 = *(_DWORD *)(v9 + 40);
  v14 = *(_QWORD *)(v9 + 32);
  v15 = *(_DWORD *)(v9 + 64);
  v16 = *(_QWORD *)(v9 + 56);
  v17 = *(_DWORD *)(v9 + 88);
  v18 = *(_QWORD *)(v9 + 80);
  if (*(_BYTE *)(a1 + 64))
  {
    v24 = *(double (**)(__n128, __n128, __n128, __n128))(a1 + 24);
    CI::setDC((CI *)(a3 + 16 * *(_QWORD *)(v9 + 104)), a2);
    v10 = v24;
  }
  v19 = (__n128 *)(a3 + 16 * v18);
  if (v17 != 5)
    v19 = (__n128 *)((char *)a2 + 64 * v18);
  v20 = (__n128 *)(a3 + 16 * v16);
  if (v15 != 5)
    v20 = (__n128 *)((char *)a2 + 64 * v16);
  v21 = (__n128 *)(a3 + 16 * v14);
  if (v13 != 5)
    v21 = (__n128 *)((char *)a2 + 64 * v14);
  v22 = (__n128 *)(a3 + 16 * v12);
  if (v11 != 5)
    v22 = (__n128 *)((char *)a2 + 64 * v12);
  *(double *)&v23 = v10(*v22, *v21, *v20, *v19);
  *(_OWORD *)(a3 + 16 * a7) = v23;
}

void CI::none_s_f4(_QWORD *a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  double (*v11)(_QWORD *, __n128, __n128);
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __n128 *v16;
  __n128 *v17;
  __int128 v18;

  v10 = a1[6];
  v11 = (double (*)(_QWORD *, __n128, __n128))a1[3];
  v12 = *(_DWORD *)(v10 + 16);
  v13 = *(_QWORD *)(v10 + 8);
  v14 = *(_DWORD *)(v10 + 40);
  v15 = *(_QWORD *)(v10 + 32);
  if (*((_BYTE *)a1 + 64))
    a1 = CI::setDC((CI *)(a3 + 16 * *(_QWORD *)(v10 + 56)), a2);
  v16 = (__n128 *)(a3 + 16 * v15);
  if (v14 != 5)
    v16 = (__n128 *)((char *)a2 + 64 * v15);
  v17 = (__n128 *)(a3 + 16 * v13);
  if (v12 != 5)
    v17 = (__n128 *)((char *)a2 + 64 * v13);
  *(double *)&v18 = v11(a1, *v17, *v16);
  *(_OWORD *)(a3 + 16 * a7) = v18;
}

int8x16_t cikernel::_ci_writeSIMD_42X(int8x16_t a1, float32x4_t a2)
{
  float32x2_t v2;
  float32x2_t v5;

  v2 = (float32x2_t)vext_s8(*(int8x8_t *)a1.i8, (int8x8_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), 4uLL);
  v5 = vadd_f32(vmul_laneq_f32(v2, a2, 3), vadd_f32(vmul_laneq_f32(v2, a2, 2), vadd_f32(vmul_lane_f32(v2, *(float32x2_t *)a2.f32, 1), vmul_n_f32(v2, a2.f32[0]))));
  vec2::get_xyxy((vec2 *)&v5);
  return a1;
}

void CI::none_f4_f4(_QWORD *a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  double (*v11)(_QWORD *, __n128, __n128);
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __n128 *v16;
  __n128 *v17;
  __int128 v18;

  v10 = a1[6];
  v11 = (double (*)(_QWORD *, __n128, __n128))a1[3];
  v12 = *(_DWORD *)(v10 + 16);
  v13 = *(_QWORD *)(v10 + 8);
  v14 = *(_DWORD *)(v10 + 40);
  v15 = *(_QWORD *)(v10 + 32);
  if (*((_BYTE *)a1 + 64))
    a1 = CI::setDC((CI *)(a3 + 16 * *(_QWORD *)(v10 + 56)), a2);
  v16 = (__n128 *)(a3 + 16 * v15);
  if (v14 != 5)
    v16 = (__n128 *)((char *)a2 + 64 * v15);
  v17 = (__n128 *)(a3 + 16 * v13);
  if (v12 != 5)
    v17 = (__n128 *)((char *)a2 + 64 * v13);
  *(double *)&v18 = v11(a1, *v17, *v16);
  *(_OWORD *)(a3 + 16 * a7) = v18;
}

double cikernel::_ci_ycc_to_rgb(int8x16_t a1)
{
  double result;

  *(_QWORD *)&result = vuzp2q_s32((int32x4_t)vextq_s8(a1, a1, 4uLL), (int32x4_t)a1).u64[0];
  return result;
}

double cikernel::_ci_swizzle_to_laaa(float32x4_t a1)
{
  int8x16_t v1;
  int8x16_t v2;
  double result;

  v1 = (int8x16_t)vmulq_f32(a1, (float32x4_t)xmmword_1924921A0);
  *(float32x2_t *)v1.i8 = vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL));
  *(float32x2_t *)v1.i8 = vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1.i8, 1));
  v2 = (int8x16_t)vdupq_laneq_s32((int32x4_t)a1, 3);
  *(_QWORD *)&result = vextq_s8(vextq_s8(v2, v1, 4uLL), v2, 0xCuLL).u64[0];
  return result;
}

float32x2_t cikernel::_ci_swizzle_rgba8_to_rgb10(float32x4_t a1)
{
  float32x4_t v1;
  int8x16_t v2;
  int32x2_t v3;
  float32x2_t v4;

  v1.i64[0] = 0x3F0000003F000000;
  v1.i64[1] = 0x3F0000003F000000;
  v2 = (int8x16_t)vrndmq_f32(vaddq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x437F0000u)), v1));
  v3 = (int32x2_t)vextq_s8(v2, v2, 8uLL).u64[0];
  v4 = (float32x2_t)vrev64_s32(v3);
  v2.i32[0] = v3.i32[0];
  return vcvt_f32_f64(vdivq_f64(vmlaq_f64(vrndmq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v2.i8), (float64x2_t)xmmword_19249BF40)), (float64x2_t)xmmword_19249BF50, vcvtq_f64_f32(vmla_f32(v4, (float32x2_t)0xC1800000C2800000, vrndm_f32(vmul_f32(v4, (float32x2_t)0x3D8000003C800000))))), (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL)));
}

double cikernel::_ci_swizzle_rgba8_to_a2rgb10(float32x4_t a1)
{
  float32x4_t v1;
  int8x16_t v2;
  int32x2_t v3;
  float32x2_t v4;
  double result;

  v1.i64[0] = 0x3F0000003F000000;
  v1.i64[1] = 0x3F0000003F000000;
  v2 = (int8x16_t)vrndmq_f32(vaddq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x437F0000u)), v1));
  *(double *)v1.i64 = *(float *)v2.i32
                    + (float)(*(float *)&v2.i32[1]
                            + (float)(floorf(vmuls_lane_f32(0.25, *(float32x2_t *)v2.i8, 1)) * -4.0))
                    * 256.0;
  v3 = (int32x2_t)vextq_s8(v2, v2, 8uLL).u64[0];
  v4 = (float32x2_t)vrev64_s32(v3);
  v2.i32[0] = v3.i32[0];
  v1.i64[1] = floor(*(float *)&v2.i32[3] / 63.99999);
  *(_QWORD *)&result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vmlaq_f64(vrndmq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v2.i8), (float64x2_t)xmmword_19249BF40)), (float64x2_t)xmmword_19249BF50, vcvtq_f64_f32(vmla_f32(v4, (float32x2_t)0xC1800000C2800000, vrndm_f32(vmul_f32(v4, (float32x2_t)0x3D8000003C800000))))), (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL))), vdivq_f64((float64x2_t)v1, (float64x2_t)xmmword_19249BF60)).u64[0];
  return result;
}

double cikernel::_ci_swizzle_rgba8_to_a2bgr10(float32x4_t a1)
{
  float32x4_t v1;
  float32x4_t v2;
  float64x2_t v3;
  float32x2_t v4;
  double result;

  v1.i64[0] = 0x3F0000003F000000;
  v1.i64[1] = 0x3F0000003F000000;
  v2 = vrndmq_f32(vaddq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x437F0000u)), v1));
  v3.f64[0] = v2.f32[0];
  v4 = (float32x2_t)vextq_s8((int8x16_t)v2, (int8x16_t)v2, 4uLL).u64[0];
  v3.f64[1] = floor(v2.f32[1] * 0.25);
  *(double *)v2.i64 = floor(v2.f32[2] * 0.0625)
                    + (float)(v2.f32[3] + (float)(floorf(vmuls_lane_f32(0.015625, v2, 3)) * -64.0)) * 16.0;
  v2.i64[1] = floor(v2.f32[3] / 63.99999);
  *(_QWORD *)&result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vmlaq_f64(v3, (float64x2_t)xmmword_19249BF70, vcvtq_f64_f32(vmla_f32(v4, (float32x2_t)0xC1800000C0800000, vrndm_f32(vmul_f32(v4, (float32x2_t)0x3D8000003E800000))))), (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL))), vdivq_f64((float64x2_t)v2, (float64x2_t)xmmword_19249BF60)).u64[0];
  return result;
}

double cikernel::_ci_swizzle_rgba8_to_rgb10_wide(float32x4_t a1)
{
  float32x4_t v1;
  int8x16_t v2;
  int32x2_t v3;
  float32x2_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  simd_float4 v13;
  double result;
  float32x4_t v15;
  int8x16_t v16;

  v1.i64[0] = 0x3F0000003F000000;
  v1.i64[1] = 0x3F0000003F000000;
  v2 = (int8x16_t)vrndmq_f32(vaddq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x437F0000u)), v1));
  v1.f32[0] = (*(float *)v2.i32
             + (float)(*(float *)&v2.i32[1] + (float)(floorf(vmuls_lane_f32(0.25, *(float32x2_t *)v2.i8, 1)) * -4.0))
             * 256.0)
            / 1023.0;
  v3 = (int32x2_t)vextq_s8(v2, v2, 8uLL).u64[0];
  v4 = (float32x2_t)vrev64_s32(v3);
  v2.i32[0] = v3.i32[0];
  v5 = (float32x4_t)vdivq_f64(vmlaq_f64(vrndmq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v2.i8), (float64x2_t)xmmword_19249BF40)), (float64x2_t)xmmword_19249BF50, vcvtq_f64_f32(vmla_f32(v4, (float32x2_t)0xC1800000C2800000, vrndm_f32(vmul_f32(v4, (float32x2_t)0x3D8000003C800000))))), (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
  *(float32x2_t *)v5.f32 = vcvt_f32_f64((float64x2_t)v5);
  v5.i32[2] = v1.i32[0];
  v6 = vmulq_f32(vaddq_f32(v5, (float32x4_t)vdupq_n_s32(0xBEC0300C)), (float32x4_t)vdupq_n_s32(0x40006060u));
  v7 = vabsq_f32(v6);
  v1.i64[0] = 0x8000000080000000;
  v1.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  v15 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v6), (int8x16_t)vcgtzq_f32(v6)), vorrq_s8(vandq_s8((int8x16_t)v6, (int8x16_t)v1), _Q3), (int8x16_t)0);
  v16 = (int8x16_t)vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x3D9E8391u));
  v13 = (simd_float4)vmlaq_f32((float32x4_t)vdupq_n_s32(0x3D558919u), (float32x4_t)vdupq_n_s32(0x3F72A76Eu), v7);
  v13.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), v7), v16, (int8x16_t)vmulq_f32(v15, (float32x4_t)_simd_pow_f4(v13, (simd_float4)xmmword_19248E030))).u64[0];
  return result;
}

double cikernel::_ci_rgb10wide(float32x4_t a1)
{
  float32x4_t v1;
  float32x4_t v2;
  int8x16_t v3;
  simd_float4 v9;
  double result;
  float32x4_t v11;
  int8x16_t v12;

  v1 = vmulq_f32(vaddq_f32(a1, (float32x4_t)vdupq_n_s32(0xBEC0300C)), (float32x4_t)vdupq_n_s32(0x40006060u));
  v2 = vabsq_f32(v1);
  v3.i64[0] = 0x8000000080000000;
  v3.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  v11 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v1), (int8x16_t)vcgtzq_f32(v1)), vorrq_s8(vandq_s8((int8x16_t)v1, v3), _Q3), (int8x16_t)0);
  v12 = (int8x16_t)vmulq_f32(v1, (float32x4_t)vdupq_n_s32(0x3D9E8391u));
  v9 = (simd_float4)vmlaq_f32((float32x4_t)vdupq_n_s32(0x3D558919u), (float32x4_t)vdupq_n_s32(0x3F72A76Eu), v2);
  v9.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), v2), v12, (int8x16_t)vmulq_f32(v11, (float32x4_t)_simd_pow_f4(v9, (simd_float4)xmmword_19248E030))).u64[0];
  return result;
}

double cikernel::_ci_bgr10wide(int32x4_t a1)
{
  int8x16_t v1;
  float32x4_t v2;
  float32x4_t v3;
  int8x16_t v4;
  simd_float4 v10;
  double result;
  float32x4_t v12;
  int8x16_t v13;

  v1 = (int8x16_t)vrev64q_s32(a1);
  v2 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8(v1, v1, 0xCuLL), (float32x4_t)vdupq_n_s32(0xBEC0300C)), (float32x4_t)vdupq_n_s32(0x40006060u));
  v3 = vabsq_f32(v2);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  v12 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v2), (int8x16_t)vcgtzq_f32(v2)), vorrq_s8(vandq_s8((int8x16_t)v2, v4), _Q3), (int8x16_t)0);
  v13 = (int8x16_t)vmulq_f32(v2, (float32x4_t)vdupq_n_s32(0x3D9E8391u));
  v10 = (simd_float4)vmlaq_f32((float32x4_t)vdupq_n_s32(0x3D558919u), (float32x4_t)vdupq_n_s32(0x3F72A76Eu), v3);
  v10.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), v3), v13, (int8x16_t)vmulq_f32(v12, (float32x4_t)_simd_pow_f4(v10, (simd_float4)xmmword_19248E030))).u64[0];
  return result;
}

double cikernel::_ci_to_rgb10wide(float32x4_t a1)
{
  float32x4_t v1;
  int8x16_t v2;
  double result;
  int8x16_t v9;

  v1 = vabsq_f32(a1);
  v9 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3B4D2E1Cu), v1);
  v2.i64[0] = 0x8000000080000000;
  v2.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  v1.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(vmulq_f32((float32x4_t)vbslq_s8(v9, (int8x16_t)vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a1), (int8x16_t)vcgtzq_f32(a1)), vorrq_s8(vandq_s8((int8x16_t)a1, v2), _Q3), (int8x16_t)0), vmlaq_f32((float32x4_t)vdupq_n_s32(0xBD6147AE), (float32x4_t)vdupq_n_s32(0x3F870A3Du), (float32x4_t)_simd_pow_f4((simd_float4)v1, (simd_float4)xmmword_19248E040)))), (float32x4_t)vdupq_n_s32(0x3EFF3FD0u)), (float32x4_t)vdupq_n_s32(0x3EC0300Cu)).u64[0];
  return result;
}

double cikernel::_ci_to_bgr10wide(int32x4_t a1)
{
  int8x16_t v1;
  float32x4_t v2;
  float32x4_t v3;
  int8x16_t v4;
  double result;
  int8x16_t v11;

  v1 = (int8x16_t)vrev64q_s32(a1);
  v2 = (float32x4_t)vextq_s8(v1, v1, 0xCuLL);
  v3 = vabsq_f32(v2);
  v11 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3B4D2E1Cu), v3);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  v3.i32[3] = 0;
  *(_QWORD *)&result = vaddq_f32(vmulq_f32((float32x4_t)vbslq_s8(v11, (int8x16_t)vmulq_f32(v2, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v2), (int8x16_t)vcgtzq_f32(v2)), vorrq_s8(vandq_s8((int8x16_t)v2, v4), _Q3), (int8x16_t)0), vmlaq_f32((float32x4_t)vdupq_n_s32(0xBD6147AE), (float32x4_t)vdupq_n_s32(0x3F870A3Du), (float32x4_t)_simd_pow_f4((simd_float4)v3, (simd_float4)xmmword_19248E040)))), (float32x4_t)vdupq_n_s32(0x3EFF3FD0u)), (float32x4_t)vdupq_n_s32(0x3EC0300Cu)).u64[0];
  return result;
}

double cikernel::_ci_swizzle_rgba8_to_rgb10widelinear(float32x4_t a1)
{
  float32x4_t v1;
  int8x16_t v2;
  int32x2_t v3;
  float32x2_t v4;
  float32x4_t v5;
  double result;

  v1.i64[0] = 0x3F0000003F000000;
  v1.i64[1] = 0x3F0000003F000000;
  v2 = (int8x16_t)vrndmq_f32(vaddq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x437F0000u)), v1));
  v1.f32[0] = (*(float *)v2.i32
             + (float)(*(float *)&v2.i32[1] + (float)(floorf(vmuls_lane_f32(0.25, *(float32x2_t *)v2.i8, 1)) * -4.0))
             * 256.0)
            / 1023.0;
  v3 = (int32x2_t)vextq_s8(v2, v2, 8uLL).u64[0];
  v4 = (float32x2_t)vrev64_s32(v3);
  v2.i32[0] = v3.i32[0];
  v5 = (float32x4_t)vdivq_f64(vmlaq_f64(vrndmq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v2.i8), (float64x2_t)xmmword_19249BF40)), (float64x2_t)xmmword_19249BF50, vcvtq_f64_f32(vmla_f32(v4, (float32x2_t)0xC1800000C2800000, vrndm_f32(vmul_f32(v4, (float32x2_t)0x3D8000003C800000))))), (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
  *(float32x2_t *)v5.f32 = vcvt_f32_f64((float64x2_t)v5);
  v5.i32[2] = v1.i32[0];
  *(_QWORD *)&result = vmulq_f32(vaddq_f32(v5, (float32x4_t)vdupq_n_s32(0xBEC0300C)), (float32x4_t)vdupq_n_s32(0x40006060u)).u64[0];
  return result;
}

double cikernel::_ci_rgb10widelinear(float32x4_t a1)
{
  double result;

  *(_QWORD *)&result = vmulq_f32(vaddq_f32(a1, (float32x4_t)vdupq_n_s32(0xBEC0300C)), (float32x4_t)vdupq_n_s32(0x40006060u)).u64[0];
  return result;
}

double cikernel::_ci_bgr10widelinear(int32x4_t a1)
{
  int8x16_t v1;
  double result;

  v1 = (int8x16_t)vrev64q_s32(a1);
  *(_QWORD *)&result = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8(v1, v1, 0xCuLL), (float32x4_t)vdupq_n_s32(0xBEC0300C)), (float32x4_t)vdupq_n_s32(0x40006060u)).u64[0];
  return result;
}

double cikernel::_ci_to_rgb10widelinear(float32x4_t a1)
{
  double result;

  *(_QWORD *)&result = vaddq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x3EFF3FD0u)), (float32x4_t)vdupq_n_s32(0x3EC0300Cu)).u64[0];
  return result;
}

double cikernel::_ci_to_bgr10widelinear(int32x4_t a1)
{
  int8x16_t v1;
  double result;

  v1 = (int8x16_t)vrev64q_s32(a1);
  *(_QWORD *)&result = vaddq_f32(vmulq_f32((float32x4_t)vextq_s8(v1, v1, 0xCuLL), (float32x4_t)vdupq_n_s32(0x3EFF3FD0u)), (float32x4_t)vdupq_n_s32(0x3EC0300Cu)).u64[0];
  return result;
}

double cikernel::_ci_combine_r(int32x4_t a1, int32x4_t a2)
{
  double result;

  *(_QWORD *)&result = vzip1q_s32(a1, a2).u64[0];
  return result;
}

double cikernel::_ci_combine_gray(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  float32x4_t v8;
  double result;

  v4 = vmulq_f32(a1, (float32x4_t)xmmword_1924921A0);
  *(float32x2_t *)v4.f32 = vadd_f32(*(float32x2_t *)v4.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL));
  v5 = (int8x16_t)vmulq_f32(a2, (float32x4_t)xmmword_1924921A0);
  *(float32x2_t *)v5.i8 = vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
  v6 = (int8x16_t)vmulq_f32(a3, (float32x4_t)xmmword_1924921A0);
  *(float32x2_t *)v6.i8 = vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v7 = (int8x16_t)vmulq_f32(a4, (float32x4_t)xmmword_1924921A0);
  *(int32x2_t *)v8.f32 = vzip1_s32(*(int32x2_t *)v4.f32, *(int32x2_t *)v5.i8);
  v8.i32[2] = v6.i32[0];
  *(float32x2_t *)v7.i8 = vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v8.i32[3] = v7.i32[0];
  *(int32x2_t *)v4.f32 = vzip2_s32(*(int32x2_t *)v4.f32, *(int32x2_t *)v5.i8);
  v4.i64[1] = __PAIR64__(v7.u32[1], vdup_lane_s32(*(int32x2_t *)v6.i8, 1).u32[0]);
  *(_QWORD *)&result = vaddq_f32(v8, v4).u64[0];
  return result;
}

double cikernel::_ci_combine_a(int32x4_t a1, int32x4_t a2)
{
  double result;

  *(_QWORD *)&result = vuzp2q_s32(vuzp2q_s32(a1, a2), a1).u64[0];
  return result;
}

double cikernel::_ci_combine_rg(int64x2_t a1, int64x2_t a2)
{
  double result;

  *(_QWORD *)&result = vzip1q_s64(a1, a2).u64[0];
  return result;
}

double cikernel::_ci_combine_r16(float a1, float a2)
{
  float v2;
  float32x4_t v3;
  float v4;
  unsigned int v5;
  double result;

  v2 = 65535.0 * a1;
  v3.f32[0] = v2 + (float)(floorf(v2 * 0.0039062) * -256.0);
  v4 = 65535.0 * a2;
  *(float *)&v5 = v4 + (float)(floorf(v4 * 0.0039062) * -256.0);
  v3.f32[1] = (float)(v2 - v3.f32[0]) * 0.0039062;
  v3.i64[1] = __PAIR64__((float)(v4 - *(float *)&v5) * 0.0039062, v5);
  *(_QWORD *)&result = vdivq_f32(v3, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double cikernel::_ci_combine_a16(float32x4_t a1, float32x4_t a2)
{
  float v2;
  float32x4_t v3;
  float v4;
  unsigned int v5;
  double result;

  v2 = vmuls_lane_f32(65535.0, a1, 3);
  v3.f32[0] = v2 + (float)(floorf(v2 * 0.0039062) * -256.0);
  v4 = vmuls_lane_f32(65535.0, a2, 3);
  *(float *)&v5 = v4 + (float)(floorf(v4 * 0.0039062) * -256.0);
  v3.f32[1] = (float)(v2 - v3.f32[0]) * 0.0039062;
  v3.i64[1] = __PAIR64__((float)(v4 - *(float *)&v5) * 0.0039062, v5);
  *(_QWORD *)&result = vdivq_f32(v3, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double cikernel::_ci_combine_l16(float32x4_t a1, float32x4_t a2)
{
  int8x16_t v2;
  float32x4_t v3;
  int8x16_t v4;
  unsigned int v5;
  double result;

  v2 = (int8x16_t)vmulq_f32(a1, (float32x4_t)xmmword_1924921A0);
  *(float *)v2.i32 = vaddv_f32(vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)))
                   * 65535.0;
  v3.f32[0] = *(float *)v2.i32 + (float)(floorf(*(float *)v2.i32 * 0.0039062) * -256.0);
  v4 = (int8x16_t)vmulq_f32(a2, (float32x4_t)xmmword_1924921A0);
  *(float *)v4.i32 = vaddv_f32(vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)))
                   * 65535.0;
  *(float *)&v5 = *(float *)v4.i32 + (float)(floorf(*(float *)v4.i32 * 0.0039062) * -256.0);
  v3.f32[1] = (float)(*(float *)v2.i32 - v3.f32[0]) * 0.0039062;
  v3.i64[1] = __PAIR64__((float)(*(float *)v4.i32 - *(float *)&v5) * 0.0039062, v5);
  *(_QWORD *)&result = vdivq_f32(v3, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double cikernel::_ci_combine_la(float32x4_t a1)
{
  int8x16_t v1;

  v1 = (int8x16_t)vmulq_f32(a1, (float32x4_t)xmmword_1924921A0);
  *(float32x2_t *)v1.i8 = vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL));
  v1.i32[0] = vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1.i8, 1)).u32[0];
  v1.i32[1] = a1.i32[3];
  return *(double *)v1.i64;
}

FILE *__cdecl open_memstream(char **__bufp, size_t *__sizep)
{
  FILE *result;
  FILE *v5;
  void *v6;
  int *v7;

  if (__bufp && __sizep)
  {
    *__bufp = 0;
    *__sizep = 0;
    result = (FILE *)malloc_type_calloc(1uLL, 0x28uLL, 0x10900400014C7C5uLL);
    if (!result)
      return result;
    v5 = result;
    result->_p = 0;
    result->_r = 4096;
    v6 = malloc_type_calloc(0x1000uLL, 1uLL, 0xC99D2AC9uLL);
    *(_QWORD *)&v5->_flags = v6;
    if (v6)
    {
      v5->_bf._base = (unsigned __int8 *)__bufp;
      *(_QWORD *)&v5->_bf._size = __sizep;
      result = funopen(v5, (int (__cdecl *)(void *, char *, int))memstream_read, (int (__cdecl *)(void *, const char *, int))memstream_write, (fpos_t (__cdecl *)(void *, fpos_t, int))memstream_seek, (int (__cdecl *)(void *))memstream_close);
      if (result)
        return result;
      free(*(void **)&v5->_flags);
    }
    free(v5);
    return 0;
  }
  else
  {
    v7 = __error();
    result = 0;
    *v7 = 22;
  }
  return result;
}

size_t memstream_read(uint64_t a1, void *__dst, int a3)
{
  const void *v3;
  int v5;
  size_t v6;

  v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    v5 = *(_DWORD *)(a1 + 4) - *(_DWORD *)a1;
    if (v5 >= a3)
      v6 = a3;
    else
      v6 = v5;
    if ((int)v6 < 1)
    {
      return 0;
    }
    else
    {
      memcpy(__dst, v3, v6);
      *(_DWORD *)a1 += v6;
    }
  }
  else
  {
    *__error() = 12;
    return 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t memstream_write(int *a1, void *__src, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  v3 = *((_QWORD *)a1 + 2);
  if (!v3)
  {
    *__error() = 12;
    return 0xFFFFFFFFLL;
  }
  v4 = a3;
  v7 = *a1;
  v8 = *a1 + a3;
  if (a1[2] <= v8)
  {
    if ((memstream_grow((uint64_t)a1, v8) & 0x80000000) == 0)
    {
      v3 = *((_QWORD *)a1 + 2);
      v7 = *a1;
      goto LABEL_5;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_5:
  memcpy((void *)(v3 + v7), __src, (int)v4);
  v9 = a1[1];
  v10 = *a1 + (uint64_t)(int)v4;
  *a1 = v10;
  if (v9 < (int)v10)
  {
    a1[1] = v10;
    **((_QWORD **)a1 + 4) = v10;
    *(_BYTE *)(*((_QWORD *)a1 + 2) + v10) = 0;
    v9 = a1[1];
  }
  if (v9 >= a1[2])
    memstream_write_cold_2();
  if (*(_BYTE *)(*((_QWORD *)a1 + 2) + v9))
    memstream_write_cold_1();
  return v4;
}

uint64_t memstream_seek(int *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  int v7;

  if (!*((_QWORD *)a1 + 2))
  {
    v6 = 12;
LABEL_18:
    *__error() = v6;
    return -1;
  }
  v3 = a2;
  if (a3)
  {
    if (a3 == 2)
    {
      v5 = a1[1];
    }
    else
    {
      if (a3 != 1)
      {
LABEL_17:
        v6 = 22;
        goto LABEL_18;
      }
      v5 = *a1;
    }
    v3 = v5 + a2;
  }
  if (v3 < 0)
    goto LABEL_17;
  if (v3 >= a1[2])
    memstream_grow((uint64_t)a1, v3);
  *a1 = v3;
  v7 = a1[1];
  if (v7 < (int)v3)
  {
    a1[1] = v3;
    **((_QWORD **)a1 + 4) = (int)v3;
    v7 = v3;
  }
  if (v7 >= a1[2] || *(_BYTE *)(*((_QWORD *)a1 + 2) + v7))
    memstream_seek_cold_1();
  return v3;
}

uint64_t memstream_close(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    **(_QWORD **)(a1 + 24) = v1;
    v2 = *(_DWORD *)(a1 + 8);
    v3 = *(int *)(a1 + 4);
    **(_QWORD **)(a1 + 32) = v3;
    if ((int)v3 >= v2)
      memstream_close_cold_1();
    *(_BYTE *)(*(_QWORD *)(a1 + 16) + v3) = 0;
    free((void *)a1);
    return 0;
  }
  else
  {
    free((void *)a1);
    *__error() = 12;
    return 0xFFFFFFFFLL;
  }
}

void stream_to_file(FILE *a1, uint64_t a2)
{
  FILE *v4;
  FILE *v5;
  size_t v6;
  char *__bufp;

  v6 = 0;
  __bufp = 0;
  v4 = open_memstream(&__bufp, &v6);
  if (v4)
  {
    v5 = v4;
    (*(void (**)(uint64_t, FILE *))(a2 + 16))(a2, v4);
    fclose(v5);
    fwrite(__bufp, 1uLL, v6, a1);
    fflush(a1);
    free(__bufp);
  }
}

CFStringRef stream_to_string(uint64_t a1)
{
  FILE *v2;
  FILE *v3;
  CFStringRef v4;
  size_t v6;
  char *__bufp;

  v6 = 0;
  __bufp = 0;
  v2 = open_memstream(&__bufp, &v6);
  if (!v2)
    return 0;
  v3 = v2;
  (*(void (**)(uint64_t, FILE *))(a1 + 16))(a1, v2);
  fclose(v3);
  v4 = CFStringCreateWithCString(0, __bufp, 0x8000100u);
  free(__bufp);
  return v4;
}

uint64_t memstream_grow(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  void *v7;

  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
    if ((int)v4 > a2)
      return 0;
    do
      v4 = 2 * (int)v4;
    while ((int)v4 <= a2);
    v6 = malloc_type_realloc(v3, (int)v4, 0xEA50944CuLL);
    if (v6)
    {
      *(_QWORD *)(a1 + 16) = v6;
      **(_QWORD **)(a1 + 24) = v6;
      bzero((void *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8)), v4 - *(int *)(a1 + 8));
      result = 0;
      *(_DWORD *)(a1 + 8) = v4;
      return result;
    }
    v7 = *(void **)(a1 + 16);
    if (v7)
      free(v7);
    *(_QWORD *)(a1 + 16) = 0;
    **(_QWORD **)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 4) = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  *__error() = 12;
  return 0xFFFFFFFFLL;
}

uint64_t CI::AffineNode::alpha_one(CI::AffineNode *this)
{
  uint64_t result;
  double x;
  double y;
  double width;
  double height;
  Rectangle v8;
  CGRect v9;
  CGRect v10;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 264))(*((_QWORD *)this + 5));
  if (!(_DWORD)result)
    return result;
  v9.origin.x = (*(double (**)(CI::AffineNode *))(*(_QWORD *)this + 160))(this);
  x = v9.origin.x;
  y = v9.origin.y;
  width = v9.size.width;
  height = v9.size.height;
  if (CGRectIsInfinite(v9))
  {
    *(int64x2_t *)&v8.var0 = vdupq_n_s64(0xFFDFFFFFFFFFFFFFLL);
    *(int64x2_t *)&v8.var2 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    height = 1.79769313e308;
    width = 1.79769313e308;
    goto LABEL_11;
  }
  v10.origin.x = x;
  v10.origin.y = y;
  v10.size.width = width;
  v10.size.height = height;
  if (CGRectIsNull(v10))
  {
    *(int64x2_t *)&v8.var0 = vdupq_n_s64(0x7FF0000000000000uLL);
    *(_OWORD *)&v8.var2 = 0uLL;
  }
  else
  {
    v8.var0 = x;
    v8.var1 = y;
    v8.var2 = width;
    v8.var3 = height;
    if (x == -8.98846567e307 && y == -8.98846567e307)
    {
LABEL_11:
      if (width == 1.79769313e308 && height == 1.79769313e308)
        return 1;
    }
  }
  return (fabs(*((double *)this + 8)) < 0.0001 && fabs(*((double *)this + 9)) < 0.0001
       || fabs(*((double *)this + 7)) < 0.0001 && fabs(*((double *)this + 10)) < 0.0001)
      && Rectangle::isNearIntegral(&v8, 0.00001);
}

uint64_t CI::AffineNode::output_format(CI::AffineNode *this)
{
  uint64_t result;

  result = CI::Affine::isOrientationWithIntegralTranslation((CI::AffineNode *)((char *)this + 56));
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 312))(*((_QWORD *)this + 5));
  return result;
}

uint64_t CI::AffineNode::append_to_tree(CI::AffineNode *this, CI::Node *a2, const CI::Affine *a3)
{
  char v3;
  uint64_t v6;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  unsigned int v11;
  __int128 v12;
  _OWORD v13[3];

  v3 = (char)a3;
  if (CI::Affine::isIdentity(a2) && (v3 & 1) == 0)
  {
    if (!this)
      return 0;
    return CI::Object::ref((uint64_t)this);
  }
  if ((*(unsigned int (**)(CI::AffineNode *))(*(_QWORD *)this + 16))(this) == 35 && (v3 & 1) == 0)
    return CI::Object::ref((uint64_t)this);
  if ((*(unsigned int (**)(CI::AffineNode *))(*(_QWORD *)this + 16))(this) == 28)
  {
    CI::Affine::operator*((double *)this + 7, (double *)a2, (double *)v13);
    if (CI::Affine::isNearIdentity((CI::Affine *)v13, 0.00001) && (v3 & 1) == 0)
    {
      v6 = *((_QWORD *)this + 5);
      if (v6)
        CI::Object::ref(*((_QWORD *)this + 5));
      return v6;
    }
    v6 = operator new();
    *((_QWORD *)CI::NodeWithChild::NodeWithChild((CI::NodeWithChild *)v6, *((CI::Node **)this + 5)) + 6) = off_1E2EBBA60;
    do
      v11 = __ldaxr(&dword_1ECF872F0[26]);
    while (__stlxr(v11 + 1, &dword_1ECF872F0[26]));
    *(_QWORD *)v6 = &off_1E2EB80D8;
    *(_QWORD *)(v6 + 48) = &unk_1E2EB8280;
    v12 = v13[1];
    *(_OWORD *)(v6 + 56) = v13[0];
    *(_OWORD *)(v6 + 72) = v12;
    v10 = v13[2];
  }
  else
  {
    v6 = operator new();
    *((_QWORD *)CI::NodeWithChild::NodeWithChild((CI::NodeWithChild *)v6, this) + 6) = off_1E2EBBA60;
    do
      v8 = __ldaxr(&dword_1ECF872F0[26]);
    while (__stlxr(v8 + 1, &dword_1ECF872F0[26]));
    *(_QWORD *)v6 = &off_1E2EB80D8;
    *(_QWORD *)(v6 + 48) = &unk_1E2EB8280;
    v9 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(v6 + 56) = *(_OWORD *)a2;
    *(_OWORD *)(v6 + 72) = v9;
    v10 = *((_OWORD *)a2 + 2);
  }
  *(_OWORD *)(v6 + 88) = v10;
  return v6;
}

double CI::Affine::operator*@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double result;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;

  v3 = a1[1];
  v4 = a2[2];
  v5 = a2[3];
  v6 = a2[1];
  v7 = v3 * v4 + *a1 * *a2;
  result = v3 * v5 + *a1 * v6;
  v9 = a1[2];
  v10 = a1[3];
  v11 = v4 * v10 + v9 * *a2;
  v12 = v5 * v10 + v9 * v6;
  v13 = a1[4];
  v14 = a1[5];
  v15 = a2[4] + v4 * v14 + v13 * *a2;
  v16 = v5 * v14 + v13 * v6 + a2[5];
  *a3 = v7;
  a3[1] = result;
  a3[2] = v11;
  a3[3] = v12;
  a3[4] = v15;
  a3[5] = v16;
  return result;
}

BOOL CI::Affine::isNearIdentity(CI::Affine *this, double a2)
{
  return fabs(*(double *)this + -1.0) < a2
      && fabs(*((double *)this + 1)) < a2
      && fabs(*((double *)this + 2)) < a2
      && fabs(*((double *)this + 3) + -1.0) < a2
      && fabs(*((double *)this + 4)) < a2
      && fabs(*((double *)this + 5)) < a2;
}

CI::AffineNode *CI::AffineNode::append_to_tree_with_quality(CI::AffineNode *this, float64x2_t *a2, const CI::Affine *a3, CI::Context *a4)
{
  int v4;
  double v9;
  float64x2_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  long double v32;
  long double v33;
  double v34;
  double v35;
  CI::AffineNode *i;
  CI::Node *v37;
  CI::CropNode *v38;
  CI::Node *v39;
  CI::CropNode *v40;
  CI::Node *v41;
  CI::CropNode *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;

  v4 = (int)a4;
  if (CI::Affine::isIdentity((CI::Affine *)a2))
  {
    if (!this)
      return this;
    return (CI::AffineNode *)CI::Object::ref((uint64_t)this);
  }
  v9 = hypot(a2->f64[0], a2->f64[1]);
  if (hypot(a2[1].f64[0], a2[1].f64[1]) >= 1.0 && v9 >= 1.0 || v4 == 0)
    return (CI::AffineNode *)CI::AffineNode::append_to_tree(this, (CI::Node *)a2, 0);
  v12 = a2[1];
  v49 = *a2;
  v50 = v12;
  v51 = a2[2];
  v13 = v49.f64[1];
  v14 = v49.f64[0];
  v15 = v12.f64[1];
  v16 = v12.f64[0];
  v17 = v51.f64[1];
  v18 = v51.f64[0];
  while (1)
  {
    if ((*(unsigned int (**)(CI::AffineNode *))(*(_QWORD *)this + 16))(this) == 28)
    {
      v19 = *((double *)this + 7);
      v20 = *((double *)this + 8);
      v21 = v20 * v16;
      v22 = *((double *)this + 9);
      v23 = *((double *)this + 10);
      v24 = *((double *)this + 11);
      v25 = *((double *)this + 12);
      v26 = v16 * v25;
      v16 = v16 * v23 + v22 * v14;
      v27 = v26 + v24 * v14;
      v14 = v21 + v19 * v14;
      v28 = v20 * v15;
      v29 = v15 * v23;
      v30 = v15 * v25;
      v15 = v29 + v22 * v13;
      v31 = v30 + v24 * v13;
      v13 = v28 + v19 * v13;
      v18 = v18 + v27;
      v17 = v31 + v17;
      v50.f64[0] = v16;
      v50.f64[1] = v15;
      v51.f64[0] = v18;
      v51.f64[1] = v17;
      goto LABEL_17;
    }
    if ((*(unsigned int (**)(CI::AffineNode *))(*(_QWORD *)this + 16))(this) != 39
      || (*(unsigned int (**)(CI::AffineNode *))(*(_QWORD *)this + 408))(this) != 4)
    {
      break;
    }
LABEL_17:
    this = (CI::AffineNode *)(*(uint64_t (**)(CI::AffineNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  }
  v49.f64[0] = v14;
  v49.f64[1] = v13;
  if (v14 == 1.0 && v13 == 0.0 && v16 == 0.0 && v15 == 1.0 && v18 == 0.0 && v17 == 0.0)
  {
    CI::Object::ref((uint64_t)this);
  }
  else
  {
    v32 = hypot(v14, v13);
    v33 = hypot(v16, v15);
    v34 = fmax(floor(-0.2 - log2(v32)), 0.0);
    v35 = fmax(floor(-0.2 - log2(v33)), 0.0);
    for (i = (CI::AffineNode *)CI::Object::ref((uint64_t)this); v34 != 0.0 && v35 != 0.0; v35 = v35 + -1.0)
    {
      v44 = 0;
      v45 = 0;
      v43 = 0x3FE0000000000000;
      v46 = 0x3FE0000000000000;
      v47 = 0;
      v48 = 0;
      v37 = (CI::Node *)CI::AffineNode::append_to_tree(i, (CI::Node *)&v43, 0);
      if (i)
        CI::Object::unref(i);
      v14 = v14 + v14;
      v13 = v13 + v13;
      v16 = v16 + v16;
      v49.f64[0] = v14;
      v49.f64[1] = v13;
      v15 = v15 + v15;
      v50.f64[0] = v16;
      v50.f64[1] = v15;
      v38 = (CI::CropNode *)CI::NoopNode::append_to_tree_and_unref(v37, (uint64_t)a3, 4);
      v52.origin.x = (*(double (**)(CI::CropNode *))(*(_QWORD *)v38 + 160))(v38);
      i = (CI::AffineNode *)CI::CropNode::append_to_tree(v38, (CI::Node *)1, v52);
      CI::Object::unref(v38);
      v34 = v34 + -1.0;
    }
    for (; v34 != 0.0; v34 = v34 + -1.0)
    {
      v44 = 0;
      v45 = 0;
      v43 = 0x3FE0000000000000;
      v46 = 0x3FF0000000000000;
      v47 = 0;
      v48 = 0;
      v39 = (CI::Node *)CI::AffineNode::append_to_tree(i, (CI::Node *)&v43, 0);
      if (i)
        CI::Object::unref(i);
      v49 = vaddq_f64(v49, v49);
      v40 = (CI::CropNode *)CI::NoopNode::append_to_tree_and_unref(v39, (uint64_t)a3, 4);
      v53.origin.x = (*(double (**)(CI::CropNode *))(*(_QWORD *)v40 + 160))(v40);
      i = (CI::AffineNode *)CI::CropNode::append_to_tree(v40, (CI::Node *)1, v53);
      CI::Object::unref(v40);
    }
    for (; v35 != 0.0; v35 = v35 + -1.0)
    {
      v44 = 0;
      v45 = 0;
      v43 = 0x3FF0000000000000;
      v46 = 0x3FE0000000000000;
      v47 = 0;
      v48 = 0;
      v41 = (CI::Node *)CI::AffineNode::append_to_tree(i, (CI::Node *)&v43, 0);
      if (i)
        CI::Object::unref(i);
      v50 = vaddq_f64(v50, v50);
      v42 = (CI::CropNode *)CI::NoopNode::append_to_tree_and_unref(v41, (uint64_t)a3, 4);
      v54.origin.x = (*(double (**)(CI::CropNode *))(*(_QWORD *)v42 + 160))(v42);
      i = (CI::AffineNode *)CI::CropNode::append_to_tree(v42, (CI::Node *)1, v54);
      CI::Object::unref(v42);
    }
    this = (CI::AffineNode *)CI::AffineNode::append_to_tree(i, (CI::Node *)&v49, 0);
    if (i)
      CI::Object::unref(i);
  }
  return this;
}

uint64_t CI::AffineNode::print_for_graph_core(double *a1, FILE *__stream, uint64_t a3, int a4)
{
  fwrite("affine ", 7uLL, 1uLL, __stream);
  if (a4)
    return fprintf(__stream, "[%g %g %g %g %g %g]");
  fprintf(__stream, "%c%g  %g  %g", 10, a1[7], a1[8], a1[11]);
  return fprintf(__stream, "%c%g  %g  %g");
}

uint64_t CI::AffineNode::convert_to_kernel_node(CI::AffineNode *this, CI::Context *a2)
{
  CI::Object *v2;
  __int128 v3;
  CI::Vector *v4;
  __n128 v5;
  float v6;
  float v7;
  CI::Vector *v8;
  __n128 v9;
  float v10;
  float v11;
  CI::SerialObjectPtrArray *v12;
  uint64_t v13;
  double v14;
  _OWORD v16[3];
  _QWORD v17[4];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  CGRect v24;

  v2 = (CI::Object *)*((_QWORD *)this + 5);
  v3 = *(_OWORD *)((char *)this + 72);
  v16[0] = *(_OWORD *)((char *)this + 56);
  v16[1] = v3;
  v16[2] = *(_OWORD *)((char *)this + 88);
  CI::Affine::inverse((CI::Affine *)v16, (double *)&v21);
  v4 = (CI::Vector *)operator new();
  v5.n128_u32[1] = DWORD1(v21);
  v5.n128_f32[0] = *(double *)&v21;
  v6 = *(double *)&v22;
  v7 = *(double *)&v23;
  CI::Vector::Vector(v4, v5, v6, v7, 0.0);
  v8 = (CI::Vector *)operator new();
  v9.n128_u32[1] = HIDWORD(v21);
  v9.n128_f32[0] = *((double *)&v21 + 1);
  v10 = *((double *)&v22 + 1);
  v11 = *((double *)&v23 + 1);
  CI::Vector::Vector(v8, v9, v10, v11, 0.0);
  v12 = (CI::SerialObjectPtrArray *)operator new();
  CI::SerialObjectPtrArray::SerialObjectPtrArray(v12, v4, v8, v2);
  CI::Object::unref(v4);
  CI::Object::unref(v8);
  v13 = operator new();
  v24.origin.x = (*(double (**)(CI::Object *))(*(_QWORD *)v2 + 160))(v2);
  v14 = CI::Affine::applyToRect((CI::Affine *)v16, v24);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 1174405120;
  v17[2] = ___ZN2CIL18appendAffineToNodeEPNS_4NodeENS_6AffineE_block_invoke;
  v17[3] = &__block_descriptor_tmp_17;
  v18 = v21;
  v19 = v22;
  v20 = v23;
  return CI::WarpKernelNode::WarpKernelNode(v13, &CI::_ci_affine, v12, v17, v14);
}

void CI::AffineNode::~AffineNode(CI::AffineNode *this)
{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBA60;
  do
    v1 = __ldaxr(&dword_1ECF872F0[26]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[26]));
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBA60;
  do
    v1 = __ldaxr(&dword_1ECF872F0[26]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[26]));
  CI::NodeWithChild::~NodeWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::AffineNode::type(CI::AffineNode *this)
{
  return 28;
}

uint64_t CI::NodeWithChild::child_count(CI::NodeWithChild *this)
{
  return 1;
}

uint64_t CI::NodeWithChild::child(CI::NodeWithChild *this, int a2)
{
  if (a2)
    return 0;
  else
    return *((_QWORD *)this + 5);
}

uint64_t CI::AffineNode::shape_for_graphviz(CI::AffineNode *this)
{
  return 2;
}

uint64_t CI::AffineNode::color_for_graphviz(CI::AffineNode *this)
{
  return 5;
}

void CI::AffineNode::roi_of_child(CI::AffineNode *this, CGRect a2)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  double v6[6];
  CGRect v7;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  CI::Affine::inverse((CI::AffineNode *)((char *)this + 56), v6);
  v7.origin.x = x;
  v7.origin.y = y;
  v7.size.width = width;
  v7.size.height = height;
  CI::Affine::applyToRect((CI::Affine *)v6, v7);
}

uint64_t CI::AffineNode::add_args_to_hash(CI::AffineNode *this, CI::XXHashHelper *a2)
{
  return XXH64_update((uint64_t)a2, (char *)this + 56, 0x30uLL);
}

const char *CI::AffineNode::short_name(CI::AffineNode *this)
{
  return "affine";
}

double CI::AffineNode::extent(CI::AffineNode *this)
{
  CI::Affine *v1;
  CGRect v3;

  v1 = (CI::AffineNode *)((char *)this + 56);
  v3.origin.x = (*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 160))(*((_QWORD *)this + 5));
  return CI::Affine::applyToRect(v1, v3);
}

void CI::AffineNode::extent_unclamped(CI::AffineNode *this)
{
  CI::Affine *v1;
  CGRect v2;

  v1 = (CI::AffineNode *)((char *)this + 56);
  if ((fabs(*((double *)this + 8)) >= 0.0001 || fabs(*((double *)this + 9)) >= 0.0001)
    && (fabs(*(double *)v1) >= 0.0001 || fabs(*((double *)this + 10)) >= 0.0001))
  {
    (*(void (**)(CI::AffineNode *))(*(_QWORD *)this + 160))(this);
  }
  else
  {
    v2.origin.x = (*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 168))(*((_QWORD *)this + 5));
    CI::Affine::applyToRect(v1, v2);
  }
}

BOOL CI::NodeWithChild::child_type_is_image(CI::NodeWithChild *this, int a2)
{
  return a2 == 0;
}

void CI::NodeWithChild::set_child(CI::NodeWithChild *this, CI::Node *a2, int a3)
{
  CI::Object *v4;
  uint64_t v5;

  if (!a3)
  {
    v4 = (CI::Object *)*((_QWORD *)this + 5);
    if (a2)
      v5 = CI::Object::ref((uint64_t)a2);
    else
      v5 = 0;
    *((_QWORD *)this + 5) = v5;
    if (v4)
      CI::Object::unref(v4);
  }
}

BOOL CI::AffineNode::is_identity(CI::AffineNode *this)
{
  return CI::Affine::isIdentity((CI::AffineNode *)((char *)this + 56));
}

uint64_t CI::AffineNode::is_warp(CI::AffineNode *this)
{
  return 1;
}

uint64_t CI::AffineNode::may_be_extended_range(CI::AffineNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 256))(*((_QWORD *)this + 5));
}

uint64_t CI::AffineNode::output_is_rg(CI::AffineNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::AffineNode *))(*(_QWORD *)this + 264))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 272))(*((_QWORD *)this + 5));
  return result;
}

uint64_t CI::AffineNode::output_is_r(CI::AffineNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::AffineNode *))(*(_QWORD *)this + 264))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 280))(*((_QWORD *)this + 5));
  return result;
}

uint64_t CI::AffineNode::output_is_luma(CI::AffineNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::AffineNode *))(*(_QWORD *)this + 264))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 288))(*((_QWORD *)this + 5));
  return result;
}

uint64_t CI::AffineNode::output_depth(CI::AffineNode *this)
{
  BOOL isOrientationWithIntegralTranslation;
  uint64_t result;

  isOrientationWithIntegralTranslation = CI::Affine::isOrientationWithIntegralTranslation((CI::AffineNode *)((char *)this + 56));
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5));
  if (!isOrientationWithIntegralTranslation)
  {
    if ((int)result < 1)
      return 0;
    else
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5));
  }
  return result;
}

uint64_t `non-virtual thunk to'CI::AffineNode::type(CI::AffineNode *this)
{
  return 28;
}

void `non-virtual thunk to'CI::AffineNode::~AffineNode(CI::AffineNode *this)
{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBA60;
  v1 = (CI::AffineNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[26]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[26]));
  CI::NodeWithChild::~NodeWithChild(v1);
}

{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBA60;
  v1 = (CI::AffineNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[26]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[26]));
  CI::NodeWithChild::~NodeWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

CI::NodeWithChild *CI::NodeWithChild::NodeWithChild(CI::NodeWithChild *this, CI::Node *a2)
{
  uint64_t v4;

  *(_QWORD *)CI::Node::Node(this) = off_1E2EBA088;
  if (a2)
    v4 = CI::Object::ref((uint64_t)a2);
  else
    v4 = 0;
  *((_QWORD *)this + 5) = v4;
  return this;
}

uint64_t CI::Node::type(CI::Node *this)
{
  return 27;
}

uint64_t CI::Node::print_for_graph_core(uint64_t a1, FILE *a2)
{
  const char *v3;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  return fputs(v3, a2);
}

uint64_t CI::NodeWithChild::extent(CI::NodeWithChild *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 160))(*((_QWORD *)this + 5));
}

uint64_t CI::NodeWithChild::extent_unclamped(CI::NodeWithChild *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 168))(*((_QWORD *)this + 5));
}

uint64_t CI::NodeWithChild::alpha_one(CI::NodeWithChild *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 264))(*((_QWORD *)this + 5));
}

uint64_t CI::NodeWithChild::output_is_rg(CI::NodeWithChild *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 272))(*((_QWORD *)this + 5));
}

uint64_t CI::NodeWithChild::output_is_r(CI::NodeWithChild *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 280))(*((_QWORD *)this + 5));
}

uint64_t CI::NodeWithChild::output_is_luma(CI::NodeWithChild *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 288))(*((_QWORD *)this + 5));
}

uint64_t CI::NodeWithChild::output_depth(CI::NodeWithChild *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5));
}

uint64_t CI::InstanceCounted<(CI::Type)28>::type()
{
  return 28;
}

_QWORD *CI::InstanceCounted<(CI::Type)28>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBA60;
  do
    v1 = __ldaxr(&dword_1ECF872F0[26]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[26]));
  return result;
}

void CI::InstanceCounted<(CI::Type)28>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBA60;
  do
    v1 = __ldaxr(&dword_1ECF872F0[26]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[26]));
  JUMPOUT(0x194025AACLL);
}

CI::SerialObjectPtrArray *CI::SerialObjectPtrArray::SerialObjectPtrArray(CI::SerialObjectPtrArray *this, CI::Object *a2, CI::Object *a3, CI::Object *a4)
{
  _QWORD *v7;

  *(_QWORD *)this = 0;
  *((_OWORD *)this + 2) = 0u;
  v7 = (_QWORD *)((char *)this + 32);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  *(_QWORD *)((char *)this + 4) = 0x30000000ALL;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  if (a2)
    CI::Object::ref((uint64_t)a2);
  *v7 = a3;
  if (a3)
    CI::Object::ref((uint64_t)a3);
  *((_QWORD *)this + 5) = a4;
  if (a4)
    CI::Object::ref((uint64_t)a4);
  *(_DWORD *)this = 3;
  return this;
}

double ___ZN2CIL18appendAffineToNodeEPNS_4NodeENS_6AffineE_block_invoke(uint64_t a1, double a2, double a3, double a4, double a5)
{
  return CI::Affine::applyToRect((CI::Affine *)(a1 + 32), *(CGRect *)&a2);
}

float32x2_t cikernel::_ci_affine(CI *a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v3;
  int8x16_t v4;
  int8x16_t v5;

  v3.i64[0] = *(_QWORD *)CI::getDC(a1);
  v3.i64[1] = 1065353216;
  v4 = (int8x16_t)vmulq_f32(a2, v3);
  *(float32x2_t *)v4.i8 = vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL));
  v5 = (int8x16_t)vmulq_f32(a3, v3);
  *(float32x2_t *)v5.i8 = vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
  return vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v4.i8, *(int32x2_t *)v5.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v4.i8, *(int32x2_t *)v5.i8));
}

void CI::NodeWithChild::~NodeWithChild(CI::NodeWithChild *this)
{
  CI::Object *v2;

  *(_QWORD *)this = off_1E2EBA088;
  v2 = (CI::Object *)*((_QWORD *)this + 5);
  if (v2)
    CI::Object::unref(v2);
  *((_QWORD *)this + 5) = 0;
  CI::Node::~Node(this);
}

uint64_t CI::CGNode::CGNode(uint64_t a1, uint64_t a2, int a3, CI *a4, uint64_t a5, uint64_t a6, int a7, int a8, char a9, char a10)
{
  CGImage *v17;
  unsigned int v18;
  CFStringRef v19;
  size_t Height;
  uint64_t ImageProvider;
  CGImage *v22;
  uint64_t v23;
  int v24;
  CGImage *v25;
  __int128 v27;
  uint64_t v28;
  void **v29;

  *((_QWORD *)CI::Node::Node((CI::Node *)a1) + 5) = off_1E2EBBA88;
  do
    v18 = __ldaxr(&dword_1ECF872F0[27]);
  while (__stlxr(v18 + 1, &dword_1ECF872F0[27]));
  *(_DWORD *)(a1 + 48) = a7;
  *(_WORD *)(a1 + 52) = 0;
  v19 = CI::cacheID(a4, v17);
  *(_QWORD *)(a1 + 56) = &unk_1E2EBFA10;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v19;
  CFRetain(v19);
  *(_QWORD *)a1 = &off_1E2EBEAB8;
  *(_QWORD *)(a1 + 40) = &unk_1E2EBEC78;
  *(_QWORD *)(a1 + 56) = &unk_1E2EBECA0;
  *(_DWORD *)(a1 + 96) = a3;
  *(_QWORD *)(a1 + 104) = a4;
  *(_QWORD *)(a1 + 112) = a5;
  *(_QWORD *)(a1 + 160) = a6;
  CGImageRetain(a4);
  dispatch_retain(*(dispatch_object_t *)(a1 + 160));
  if (a4)
  {
    *(_QWORD *)(a1 + 128) = CGImageGetWidth(a4);
    Height = CGImageGetHeight(a4);
  }
  else
  {
    Height = 0;
    *(_QWORD *)(a1 + 128) = 0;
  }
  *(_QWORD *)(a1 + 136) = Height;
  ImageProvider = CGImageGetImageProvider();
  v23 = ImageProvider;
  if (ImageProvider)
    v24 = CI::format_from_CGImageProvider(ImageProvider);
  else
    v24 = CI::format_from_CGImage((uint64_t)a4, v22);
  *(_DWORD *)(a1 + 120) = v24;
  *(_DWORD *)(a1 + 148) = a8;
  *(_DWORD *)(a1 + 144) = CI::alpha_mode_from_CGImage((uint64_t)a4, v25);
  *(_BYTE *)(a1 + 152) = a9;
  *(_BYTE *)(a1 + 153) = a10;
  if (v23)
  {
    CI::Tileable::TileRectGridMakeEqualSizedTilesWithImageSize(0x400uLL, 0x400uLL, *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), (uint64_t *)&v27);
    std::vector<std::vector<IRect>>::__vdeallocate((uint64_t *)(a1 + 64));
    *(_OWORD *)(a1 + 64) = v27;
    *(_QWORD *)(a1 + 80) = v28;
  }
  else
  {
    std::vector<std::vector<IRect>>::__vdeallocate((uint64_t *)(a1 + 64));
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  v28 = 0;
  v27 = 0uLL;
  v29 = (void **)&v27;
  std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v29);
  return a1;
}

{
  return CI::CGNode::CGNode(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

CFStringRef CI::cacheID(CI *this, CGImage *a2)
{
  uint64_t Identifier;
  CFStringRef v3;

  Identifier = CGImageGetIdentifier();
  v3 = CFStringCreateWithFormat(0, 0, CFSTR("CGImageRef %d"), Identifier);
  CFAutorelease(v3);
  return v3;
}

void CI::CGNode::~CGNode(CI::CGNode *this)
{
  CI::Tileable *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_1E2EBEAB8;
  *((_QWORD *)this + 5) = &unk_1E2EBEC78;
  *((_QWORD *)this + 7) = &unk_1E2EBECA0;
  v2 = (CI::CGNode *)((char *)this + 56);
  CI::CGNode::release_resources((CGImageRef *)this);
  CI::Tileable::~Tileable(v2);
  *((_QWORD *)this + 5) = off_1E2EBBA88;
  do
    v3 = __ldaxr(&dword_1ECF872F0[27]);
  while (__stlxr(v3 - 1, &dword_1ECF872F0[27]));
  CI::Node::~Node(this);
}

{
  CI::CGNode::~CGNode(this);
  JUMPOUT(0x194025AACLL);
}

void CI::Tileable::~Tileable(CI::Tileable *this)
{
  const void *v2;
  void **v3;

  *(_QWORD *)this = &unk_1E2EBFA10;
  v2 = (const void *)*((_QWORD *)this + 4);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 4) = 0;
  v3 = (void **)((char *)this + 8);
  std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v3);
}

void `non-virtual thunk to'CI::CGNode::~CGNode(CI::CGNode *this)
{
  CI::CGNode::~CGNode((CI::CGNode *)((char *)this - 40));
}

{
  CI::CGNode::~CGNode((CI::CGNode *)((char *)this - 40));
  JUMPOUT(0x194025AACLL);
}

void CI::CGNode::release_resources(CGImageRef *this)
{
  NSObject *v2;
  CGImageRef v3;

  CGImageRelease(this[13]);
  v2 = this[20];
  if (v2)
    dispatch_release(v2);
  this[13] = 0;
  this[20] = 0;
  v3 = this[11];
  if (v3)
    CFRelease(v3);
  this[11] = 0;
}

void CI::Tileable::updateCacheIdentity(CI::Tileable *this, CFTypeRef cf)
{
  const void *v4;

  if (cf)
    CFRetain(cf);
  v4 = (const void *)*((_QWORD *)this + 4);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 4) = cf;
}

void CI::CGNode::set_image(uint64_t a1, CGImageRef image, uint64_t a3, NSObject *a4)
{
  CGImage *v8;
  NSObject *v9;
  CFStringRef v10;

  CGImageRetain(image);
  CGImageRelease(*(CGImageRef *)(a1 + 104));
  if (a4)
    dispatch_retain(a4);
  v9 = *(NSObject **)(a1 + 160);
  if (v9)
    dispatch_release(v9);
  *(_QWORD *)(a1 + 104) = image;
  *(_QWORD *)(a1 + 112) = a3;
  *(_QWORD *)(a1 + 160) = a4;
  v10 = CI::cacheID(image, v8);
  CI::Tileable::updateCacheIdentity((CI::Tileable *)(a1 + 56), v10);
}

CGImageRef CI::CGNode::cgImageForROI@<X0>(CGImageRef *this@<X0>, const CGRect *a2@<X1>, CGImageRef *a3@<X8>)
{
  CGImageRef result;

  result = CGImageCreateWithImageInRect(this[13], *a2);
  *a3 = result;
  return result;
}

void CI::CGNode::tileRect(CI::CGNode *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v19;
  uint64_t v20;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  int v30;
  NSObject *v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  __int16 v40;
  unint64_t v41;
  __int16 v42;
  unint64_t v43;
  __int16 v44;
  unint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)*((_QWORD *)this + 8);
  v9 = (_QWORD *)*((_QWORD *)this + 9);
  if (v8 == v9
    || 0xAAAAAAAAAAAAAAABLL * (v9 - v8) <= a2
    || (v10 = v8[1], *v8 == v10)
    || 0xAAAAAAAAAAAAAAABLL * ((v10 - *v8) >> 3) <= a3)
  {
    v31 = ci_logger_render();
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
LABEL_34:
      *(_QWORD *)(a4 + 16) = 0;
      goto LABEL_35;
    }
    v33 = (uint64_t *)*((_QWORD *)this + 8);
    v32 = (uint64_t *)*((_QWORD *)this + 9);
    if (v33 == v32)
    {
      v34 = 0;
    }
    else
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * (v32 - v33);
      v36 = *v33;
      v35 = v33[1];
      if (v36 != v35)
      {
        v37 = 0xAAAAAAAAAAAAAAABLL * ((v35 - v36) >> 3);
        goto LABEL_42;
      }
    }
    v37 = 0;
LABEL_42:
    v38 = 134218752;
    v39 = a2;
    v40 = 2048;
    v41 = a3;
    v42 = 2048;
    v43 = v34;
    v44 = 2048;
    v45 = v37;
    _os_log_error_impl(&dword_1921E4000, v31, OS_LOG_TYPE_ERROR, "Request for a tile outside of expected indexes. Requested tile %zu %zu but only have %zu tiles horizontally and %zu tile vertically", (uint8_t *)&v38, 0x2Au);
    goto LABEL_34;
  }
  v11 = v8[3 * a2] + 24 * a3;
  v13 = *(_DWORD *)v11;
  v12 = *(_DWORD *)(v11 + 4);
  v15 = *(_QWORD *)(v11 + 8);
  v14 = *(_QWORD *)(v11 + 16);
  if (v13 == 0x7FFFFFFF && v12 == 0x7FFFFFFF && v15 == 0 && v14 == 0)
  {
LABEL_32:
    *(_QWORD *)(a4 + 16) = 0;
LABEL_35:
    *(_OWORD *)a4 = IRectNull;
    return;
  }
  v20 = *((_QWORD *)this + 16);
  v19 = *((_QWORD *)this + 17);
  if (v13 != -2147483647 || v12 != -2147483647 || v15 != 0xFFFFFFFFLL || v14 != 0xFFFFFFFFLL)
  {
    v24 = v13 & ~(v13 >> 31);
    v25 = v13 + v15;
    if (v25 >= (int)v20)
      v25 = *((_QWORD *)this + 16);
    v26 = __OFSUB__(v25, v24);
    v27 = v25 - v24;
    if (v27 < 0 == v26)
    {
      v28 = v12 & ~(v12 >> 31);
      v29 = v12 + v14;
      if (v29 >= (int)v19)
        v29 = *((_QWORD *)this + 17);
      v26 = __OFSUB__(v29, v28);
      v30 = v29 - v28;
      if (v30 < 0 == v26)
      {
        *(_DWORD *)a4 = v24;
        *(_DWORD *)(a4 + 4) = v28;
        *(_QWORD *)(a4 + 8) = v27;
        *(_QWORD *)(a4 + 16) = v30;
        return;
      }
    }
    goto LABEL_32;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v20;
  *(_QWORD *)(a4 + 16) = v19;
}

void `non-virtual thunk to'CI::CGNode::tileRect(CI::CGNode *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  CI::CGNode::tileRect((CI::CGNode *)((char *)this - 56), a2, a3, a4);
}

uint64_t CI::CGNode::surfaceFormat(CI::CGNode *this)
{
  uint64_t ImageProvider;

  if (CGImageGetImageProvider()
    && (ImageProvider = CGImageGetImageProvider(), CI::format_from_CGImageProvider(ImageProvider)))
  {
    return CI::PixelFormatType_approx_from_format(*((_DWORD *)this + 12));
  }
  else
  {
    return 0;
  }
}

uint64_t `non-virtual thunk to'CI::CGNode::surfaceFormat(CI::CGNode *this)
{
  return CI::CGNode::surfaceFormat((CI::CGNode *)((char *)this - 56));
}

__IOSurface *CI::CGNode::tileSurface(CI::CGNode *this, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  CI::CGNode *v5;
  uint64_t v6;
  int v7;
  CGImage *v8;
  int v9;
  _BOOL4 v10;
  uint64_t v11;
  _QWORD v13[3];

  v5 = this;
  memset(v13, 0, sizeof(v13));
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this + 416))(v13);
  v6 = *((_QWORD *)v5 + 7);
  v5 = (CI::CGNode *)((char *)v5 + 56);
  v7 = *((_DWORD *)v5 + 10);
  v8 = (CGImage *)*((_QWORD *)v5 + 6);
  v9 = *((_DWORD *)v5 - 2);
  v10 = *((_BYTE *)v5 + 97) == 0;
  v11 = (*(uint64_t (**)(CI::CGNode *, _QWORD))(v6 + 24))(v5, 0);
  return CI::ioSurfaceFromCGImage(v7, v8, v9, (uint64_t)v13, v10, v11, *((_QWORD *)v5 + 13), (uint64_t)a4);
}

__IOSurface *CI::ioSurfaceFromCGImage(int a1, CGImageRef image, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  double *v23;
  double v26;
  double v27;
  double v28;
  double v29;
  CGFloat Width;
  CGImage *v31;
  uint64_t ImageProvider;
  int v33;
  int v34;
  uint64_t v35;
  __IOSurface *SurfaceFromCacheAndFill;
  NSObject *v37;
  _QWORD v39[7];
  int v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;

  v16 = *(_DWORD *)a4;
  v17 = *(_DWORD *)(a4 + 4);
  v18 = *(_QWORD *)(a4 + 8);
  v19 = *(_QWORD *)(a4 + 16);
  if (*(_DWORD *)a4 == -2147483647)
  {
    if (v17 != -2147483647 || v18 != 0xFFFFFFFF || v19 != 0xFFFFFFFF)
      goto LABEL_21;
    v23 = (double *)MEMORY[0x1E0C9D5E0];
LABEL_23:
    v26 = *v23;
    v27 = v23[1];
    v28 = v23[2];
    v29 = v23[3];
    goto LABEL_24;
  }
  if (v16 == 0x7FFFFFFF && v17 == 0x7FFFFFFF && v18 == 0 && v19 == 0)
  {
    v23 = (double *)MEMORY[0x1E0C9D628];
    goto LABEL_23;
  }
LABEL_21:
  v26 = (double)v16;
  v27 = (double)v17;
  v28 = (double)v18;
  v29 = (double)v19;
LABEL_24:
  Width = (double)CGImageGetWidth(image);
  v46.size.height = (double)CGImageGetHeight(image);
  v46.origin.x = 0.0;
  v46.origin.y = 0.0;
  v44.origin.x = v26;
  v44.origin.y = v27;
  v44.size.width = v28;
  v44.size.height = v29;
  v46.size.width = Width;
  v45 = CGRectIntersection(v44, v46);
  v31 = CGImageCreateWithImageInRect(image, v45);
  ImageProvider = CGImageGetImageProvider();
  CGImageProviderRetain();
  if (!ImageProvider
    || (v33 = CI::format_from_CGImageProvider(ImageProvider)) == 0
    || (v34 = v33, v35 = CI::PixelFormatType_approx_from_format(a3), !(_DWORD)v35))
  {
LABEL_33:
    SurfaceFromCacheAndFill = 0;
    goto LABEL_34;
  }
  if (a5)
  {
    v42 = *(_OWORD *)a4;
    v43 = *(_QWORD *)(a4 + 16);
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 0x40000000;
    v39[2] = ___ZN2CIL20ioSurfaceFromCGImageENS_10ImageIndexEP7CGImageNS_11PixelFormatERK5IRectbPK10__CFStringP16dispatch_queue_sRy_block_invoke;
    v39[3] = &__block_descriptor_tmp_18;
    v39[4] = a8;
    v39[5] = a4;
    v39[6] = ImageProvider;
    v40 = v34;
    v41 = a3;
    SurfaceFromCacheAndFill = (__IOSurface *)GetSurfaceFromCacheAndFill(&v42, v35, 0, a1, a6, a7, (uint64_t)v39);
    if (!SurfaceFromCacheAndFill)
    {
LABEL_31:
      v37 = ci_logger_render();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
        CI::ioSurfaceFromCGImage();
      goto LABEL_33;
    }
  }
  else
  {
    SurfaceFromCacheAndFill = CreateSurface((__CVBuffer *)*(unsigned int *)(a4 + 8), (__CVBuffer *)*(unsigned int *)(a4 + 16), (void *)0x10, v35, 0);
    CI::fillBlock(ImageProvider, v34, a3, SurfaceFromCacheAndFill);
    if (!SurfaceFromCacheAndFill)
      goto LABEL_31;
  }
LABEL_34:
  CGImageProviderRelease();
  CGImageRelease(v31);
  return SurfaceFromCacheAndFill;
}

__IOSurface *`non-virtual thunk to'CI::CGNode::tileSurface(CI::CGNode *this, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  return CI::CGNode::tileSurface((CI::CGNode *)((char *)this - 56), a2, a3, a4);
}

void CI::CGNode::surfaceForROI(uint64_t a1@<X0>, uint64_t a2@<X1>, CGFloat *a3@<X2>, uint64_t a4@<X3>, __IOSurface **a5@<X8>)
{
  NSObject *v10;
  os_signpost_id_t v11;
  CGFloat v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double Current;
  int v18;
  CGImage *v19;
  int v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  __IOSurface *v29;
  NSObject *v30;
  os_signpost_id_t v31;
  NSObject *v32;
  __int128 v33;
  unint64_t height;
  uint64_t v35;
  uint8_t buf[4];
  _BYTE v37[18];
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;

  v42 = *MEMORY[0x1E0C80C00];
  if (CI_VERBOSE_SIGNPOSTS())
  {
    v10 = ci_signpost_log_render();
    v11 = *(int *)(a1 + 36) | (unint64_t)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2) << 32);
    if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      v12 = *a3;
      v13 = *((_QWORD *)a3 + 1);
      v14 = *((_QWORD *)a3 + 2);
      v15 = *((_QWORD *)a3 + 3);
      *(_DWORD *)buf = 134218752;
      *(CGFloat *)v37 = v12;
      *(_WORD *)&v37[8] = 2048;
      *(_QWORD *)&v37[10] = v13;
      v38 = 2048;
      v39 = v14;
      v40 = 2048;
      v41 = v15;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v11, "surface_for_roi_from_cg", "[%g %g %g %g]", buf, 0x2Au);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2);
  TimerBase::TimerBase((uint64_t)buf, v16, *(_DWORD *)(a1 + 36), (uint64_t)"surface_for_roi_from_cg", 22);
  Current = CFAbsoluteTimeGetCurrent();
  v35 = 0;
  v18 = *(_DWORD *)(a1 + 96);
  v19 = *(CGImage **)(a1 + 104);
  v20 = *(_DWORD *)(a1 + 48);
  v21 = *a3;
  v22 = a3[1];
  v23 = a3[2];
  v24 = a3[3];
  v43.origin.x = *a3;
  v43.origin.y = v22;
  v43.size.width = v23;
  v43.size.height = v24;
  if (CGRectIsNull(v43))
  {
    height = 0;
    v33 = IRectNull;
  }
  else
  {
    v44.origin.x = v21;
    v44.origin.y = v22;
    v44.size.width = v23;
    v44.size.height = v24;
    if (CGRectIsInfinite(v44))
    {
      v33 = IRectInfinite;
      height = 0xFFFFFFFFLL;
    }
    else
    {
      v45.origin.x = v21;
      v45.origin.y = v22;
      v45.size.width = v23;
      v45.size.height = v24;
      v46 = CGRectInset(v45, 0.000001, 0.000001);
      v47 = CGRectIntegral(v46);
      LODWORD(v33) = (int)v47.origin.x;
      DWORD1(v33) = (int)v47.origin.y;
      *((_QWORD *)&v33 + 1) = (unint64_t)v47.size.width;
      height = (unint64_t)v47.size.height;
    }
  }
  v26 = *(_QWORD *)(a1 + 56);
  v25 = a1 + 56;
  v27 = *(_BYTE *)(v25 + 97) == 0;
  v28 = (*(uint64_t (**)(uint64_t, _QWORD))(v26 + 24))(v25, 0);
  v29 = CI::ioSurfaceFromCGImage(v18, v19, v20, (uint64_t)&v33, v27, v28, *(_QWORD *)(v25 + 104), (uint64_t)&v35);
  *(double *)a4 = *(double *)a4 + CFAbsoluteTimeGetCurrent() - Current;
  *(_QWORD *)(a4 + 8) += (unint64_t)a3[3] * (unint64_t)a3[2];
  if (v29)
    CFRetain(v29);
  *a5 = v29;
  if (CI_VERBOSE_SIGNPOSTS())
  {
    v30 = ci_signpost_log_render();
    v31 = *(_QWORD *)&v37[4];
    if ((unint64_t)(*(_QWORD *)&v37[4] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v32 = v30;
      if (os_signpost_enabled(v30))
      {
        LOWORD(v33) = 0;
        _os_signpost_emit_with_name_impl(&dword_1921E4000, v32, OS_SIGNPOST_INTERVAL_END, v31, "surface_for_roi_from_cg", (const char *)&unk_192520C83, (uint8_t *)&v33, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)buf);
}

uint64_t CI::CGNode::print_for_graph_core(uint64_t a1, FILE *__stream)
{
  const char *v4;
  const char *v5;
  uint64_t result;
  const char *v7;
  int v8;
  const char *v9;

  fwrite("CGImageRef", 0xAuLL, 1uLL, __stream);
  if (*(_QWORD *)(a1 + 112))
  {
    fprintf(__stream, " content:%016llX");
  }
  else if (*(_QWORD *)(a1 + 104))
  {
    fprintf(__stream, " %p", *(const void **)(a1 + 104));
    CGImageGetIdentifier();
    fprintf(__stream, "(%d)");
  }
  if (*(_BYTE *)(a1 + 52))
    v4 = "s";
  else
    v4 = "";
  v5 = CI::name_for_format(*(_DWORD *)(a1 + 120));
  result = fprintf(__stream, " %s%s", v4, v5);
  v7 = "alpha_one";
  switch(*(_DWORD *)(a1 + 144))
  {
    case 0:
      goto LABEL_14;
    case 1:
      goto LABEL_13;
    case 2:
      v7 = "alpha_unpremul";
      goto LABEL_13;
    case 4:
      v7 = "alpha_premul-clear-edges";
      goto LABEL_13;
    case 6:
      v7 = "alpha_unpremul-clear-edges";
      goto LABEL_13;
    default:
      v7 = "alpha_unknown";
LABEL_13:
      result = fprintf(__stream, " %s", v7);
LABEL_14:
      v8 = *(_DWORD *)(a1 + 148);
      if (v8)
      {
        if (v8 == 1)
          v9 = "edge_clamp";
        else
          v9 = "edge_unknown";
        result = fprintf(__stream, " %s", v9);
      }
      if (*(_BYTE *)(a1 + 152))
        result = fwrite(" nearestsampling", 0x10uLL, 1uLL, __stream);
      if (*(_BYTE *)(a1 + 153))
        return fwrite(" cache", 6uLL, 1uLL, __stream);
      return result;
  }
}

uint64_t CI::CGNode::add_args_to_hash(CI::CGNode *this, CI::XXHashHelper *a2)
{
  CI::XXHashHelper *v4;
  size_t v5;
  uint64_t __src;

  if (*((_QWORD *)this + 14))
  {
    __src = *((_QWORD *)this + 14);
    v4 = a2;
    v5 = 8;
  }
  else
  {
    LODWORD(__src) = CGImageGetIdentifier();
    v4 = a2;
    v5 = 4;
  }
  XXH64_update((uint64_t)v4, (char *)&__src, v5);
  LODWORD(__src) = *((_DWORD *)this + 36);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((_DWORD *)this + 37);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 152);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 52);
  return XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
}

double CI::CGNode::find_matching_roi(CI::CGNode *this, const CGRect *a2)
{
  CGRect **v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGRect v13;
  CGRect v14;
  CGRect v15;

  v4 = (CGRect **)CI::Node::rois(this);
  x = a2->origin.x;
  y = a2->origin.y;
  width = a2->size.width;
  height = a2->size.height;
  v15.origin.x = (*(double (**)(CI::CGNode *))(*(_QWORD *)this + 168))(this);
  v15.origin.y = v9;
  v15.size.width = v10;
  v15.size.height = v11;
  v13.origin.x = x;
  v13.origin.y = y;
  v13.size.width = width;
  v13.size.height = height;
  v14 = CGRectIntersection(v13, v15);
  return CI::SerialRectArray::smallestContainingRect(v4, v14);
}

double CI::SerialRectArray::smallestContainingRect(CGRect **this, CGRect a2)
{
  CGFloat x;
  CGRect *v3;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  double v8;
  double v9;
  double v10;
  double v13;
  CGRect v14;

  x = a2.origin.x;
  v13 = *MEMORY[0x1E0C9D628];
  v3 = *this;
  if (*this != this[1])
  {
    height = a2.size.height;
    width = a2.size.width;
    y = a2.origin.y;
    v8 = -1.0;
    do
    {
      v14.origin.x = x;
      v14.origin.y = y;
      v14.size.width = width;
      v14.size.height = height;
      if (CGRectContainsRect(*v3, v14))
      {
        v9 = v3->size.width;
        v10 = v3->size.height;
        if (v8 < 0.0 || v9 * v10 < v8)
        {
          v13 = v3->origin.x;
          v8 = v9 * v10;
        }
      }
      v3 = (CGRect *)((char *)v3 + 120);
    }
    while (v3 != this[1]);
  }
  return v13;
}

void CI::CGNode::add_roi(CI::CGNode *this, unint64_t a2, unint64_t a3, CGRect a4, const CI::parentROI *a5)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CI::Node *v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  BOOL v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  double *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  BOOL v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  BOOL v53;
  BOOL v54;
  BOOL v56;
  int v57;
  int v58;
  int v59;
  int v60;
  BOOL v61;
  int v62;
  int v63;
  int v64;
  int v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  if (!CGRectIsEmpty(a4))
  {
    v66.origin.x = (*(double (**)(CI::CGNode *))(*(_QWORD *)this + 168))(this);
    v20 = v66.origin.x;
    v21 = v66.origin.y;
    v22 = v66.size.width;
    v23 = v66.size.height;
    if (CGRectIsNull(v66))
    {
      v24 = 0;
      v25 = 0;
      v26 = 0x7FFFFFFF;
      v27 = 0x7FFFFFFF;
    }
    else
    {
      v67.origin.x = v20;
      v67.origin.y = v21;
      v67.size.width = v22;
      v67.size.height = v23;
      if (CGRectIsInfinite(v67))
      {
        v26 = -2147483647;
        v24 = 0xFFFFFFFFLL;
        v25 = 0xFFFFFFFFLL;
        v27 = -2147483647;
      }
      else
      {
        v68.origin.x = v20;
        v68.origin.y = v21;
        v68.size.width = v22;
        v68.size.height = v23;
        v69 = CGRectInset(v68, 0.000001, 0.000001);
        v70 = CGRectIntegral(v69);
        v27 = (int)v70.origin.x;
        v26 = (int)v70.origin.y;
        v25 = (unint64_t)v70.size.width;
        v24 = (unint64_t)v70.size.height;
      }
    }
    v71.origin.x = x;
    v71.origin.y = y;
    v71.size.width = width;
    v71.size.height = height;
    if (CGRectIsNull(v71))
    {
      v28 = 0;
      v29 = 0;
      v30 = 0x7FFFFFFF;
      v31 = 0x7FFFFFFF;
    }
    else
    {
      v72.origin.x = x;
      v72.origin.y = y;
      v72.size.width = width;
      v72.size.height = height;
      if (CGRectIsInfinite(v72))
      {
        v30 = -2147483647;
        v28 = 0xFFFFFFFFLL;
        v29 = 0xFFFFFFFFLL;
        v31 = -2147483647;
      }
      else
      {
        v73.origin.x = x;
        v73.origin.y = y;
        v73.size.width = width;
        v73.size.height = height;
        v74 = CGRectInset(v73, 0.000001, 0.000001);
        v75 = CGRectIntegral(v74);
        v31 = (int)v75.origin.x;
        v30 = (int)v75.origin.y;
        v29 = (unint64_t)v75.size.width;
        v28 = (unint64_t)v75.size.height;
      }
    }
    if (*((_DWORD *)this + 37) != 1
      || v27 == -2147483647 && v26 == -2147483647 && v25 == 0xFFFFFFFF && v24 == 0xFFFFFFFF)
    {
      goto LABEL_18;
    }
    v34 = 0x7FFFFFFF;
    if (v31 == 0x7FFFFFFF)
    {
      if (v30 == 0x7FFFFFFF && !v29 && !v28)
      {
        v32 = 0;
        v33 = 0;
        v35 = 0x7FFFFFFF;
        goto LABEL_19;
      }
    }
    else if (v31 == -2147483647 && v30 == -2147483647 && v29 == 0xFFFFFFFF && v28 == 0xFFFFFFFF)
    {
      goto LABEL_119;
    }
    if (v24)
      v54 = 0;
    else
      v54 = v25 == 0;
    v56 = v54 && v26 == 0x7FFFFFFF && v27 == 0x7FFFFFFF;
    if (!v56 && v27 <= v31 && v27 + (int)v25 >= v31 + (int)v29 && v26 <= v30 && v26 + (int)v24 >= v30 + (int)v28)
    {
LABEL_18:
      v32 = v28;
      v33 = v29;
      v34 = v30;
      v35 = v31;
      goto LABEL_19;
    }
LABEL_119:
    if (v27 == 0x7FFFFFFF && v26 == 0x7FFFFFFF && !v25 && !v24
      || v31 == 0x7FFFFFFF && v30 == 0x7FFFFFFF && !v29 && !v28)
    {
LABEL_127:
      v57 = v31 + v29;
      if (v57 >= v27)
      {
        v58 = v27 + v25;
        if (v31 <= v27 + (int)v25)
        {
          if (v31 <= v27)
            v35 = v27;
          else
            v35 = v31;
          if (v57 >= v58)
            v62 = v27 + v25;
          else
            v62 = v57;
          v33 = v62 - v35;
        }
        else
        {
          v35 = v58 - 1;
          v33 = 1;
        }
      }
      else
      {
        v33 = 1;
        v35 = v27;
      }
      v63 = v30 + v28;
      if (v63 >= v26)
      {
        v64 = v26 + v24;
        if (v30 <= v26 + (int)v24)
        {
          if (v30 <= v26)
            v34 = v26;
          else
            v34 = v30;
          if (v63 >= v64)
            v65 = v26 + v24;
          else
            v65 = v63;
          v32 = v65 - v34;
        }
        else
        {
          v34 = v64 - 1;
          v32 = 1;
        }
      }
      else
      {
        v32 = 1;
        v34 = v26;
      }
LABEL_19:
      v36 = 0x7FFFFFFF;
      v39 = v27 == 0x7FFFFFFF && v26 == 0x7FFFFFFF && v25 == 0 && v24 == 0;
      v40 = v39;
      if (v39 || v35 == 0x7FFFFFFF && v34 == 0x7FFFFFFF && !v33 && !v32)
      {
        v41 = 0;
        v42 = 0;
        v43 = 0x7FFFFFFF;
      }
      else
      {
        if (v27 == -2147483647 && v26 == -2147483647 && v25 == 0xFFFFFFFF && v24 == 0xFFFFFFFF)
        {
          v42 = v32;
          v41 = v33;
          v43 = v34;
          v36 = v35;
          goto LABEL_53;
        }
        if (v35 != -2147483647
          || v34 != -2147483647
          || v33 != 0xFFFFFFFFLL
          || (v36 = v27, v43 = v26, v41 = v25, v42 = v24, v32 != 0xFFFFFFFFLL))
        {
          if (v27 <= v35)
            v45 = v35;
          else
            v45 = v27;
          v46 = v27 + v25;
          if (v27 + (int)v25 >= v35 + (int)v33)
            v46 = v35 + v33;
          if (v26 <= v34)
            v47 = v34;
          else
            v47 = v26;
          v48 = v34 + v32;
          if (v26 + (int)v24 < v48)
            v48 = v26 + v24;
          v49 = v48 < v47;
          v50 = v48 - v47;
          if (v49)
            v51 = 0x7FFFFFFF;
          else
            v51 = v45;
          if (v49)
          {
            v47 = 0x7FFFFFFF;
            v52 = 0;
          }
          else
          {
            v52 = v46 - v45;
          }
          if (v49)
            v50 = 0;
          v53 = v46 < v45;
          if (v46 >= v45)
            v36 = v51;
          else
            v36 = 0x7FFFFFFF;
          if (v53)
            v43 = 0x7FFFFFFF;
          else
            v43 = v47;
          if (v53)
            v41 = 0;
          else
            v41 = v52;
          if (v53)
            v42 = 0;
          else
            v42 = v50;
        }
      }
      if (v25 <= 0x1000 && v24 <= 0x1000 && 3 * v24 * v25 <= 4 * v41 * v42)
      {
        if (!v40)
        {
          v16 = (double)v27;
          v17 = (double)v26;
          v18 = (double)v25;
          v19 = (double)v24;
LABEL_65:
          v13 = this;
          v14 = a2;
          v15 = a3;
          goto LABEL_66;
        }
        goto LABEL_58;
      }
LABEL_53:
      if (v36 == -2147483647)
      {
        if (v43 == -2147483647 && v41 == 0xFFFFFFFF && v42 == 0xFFFFFFFF)
        {
          v44 = (double *)MEMORY[0x1E0C9D5E0];
          goto LABEL_63;
        }
      }
      else if (v36 == 0x7FFFFFFF && v43 == 0x7FFFFFFF && !v41 && !v42)
      {
LABEL_58:
        v44 = (double *)MEMORY[0x1E0C9D628];
LABEL_63:
        v16 = *v44;
        v17 = v44[1];
        v18 = v44[2];
        v19 = v44[3];
        goto LABEL_65;
      }
      v16 = (double)v36;
      v17 = (double)v43;
      v18 = (double)v41;
      v19 = (double)v42;
      goto LABEL_65;
    }
    if (v31 != -2147483647
      || v30 != -2147483647
      || v29 != 0xFFFFFFFF
      || (v32 = v24, v33 = v25, v34 = v26, v35 = v27, v28 != 0xFFFFFFFF))
    {
      if (v27 <= v31)
        v35 = v31;
      else
        v35 = v27;
      v59 = v27 + v25;
      if (v27 + (int)v25 >= v31 + (int)v29)
        v59 = v31 + v29;
      LODWORD(v33) = v59 - v35;
      if (v59 < v35)
        goto LABEL_127;
      if (v26 <= v30)
        v34 = v30;
      else
        v34 = v26;
      v60 = v26 + v24;
      if (v26 + (int)v24 >= v30 + (int)v28)
        v60 = v30 + v28;
      v61 = __OFSUB__(v60, v34);
      LODWORD(v32) = v60 - v34;
      if ((int)v32 < 0 != v61)
        goto LABEL_127;
      v33 = (int)v33;
      v32 = (int)v32;
    }
    if (v33 && v32)
      goto LABEL_19;
    goto LABEL_127;
  }
  v13 = this;
  v14 = a2;
  v15 = a3;
  v16 = x;
  v17 = y;
  v18 = width;
  v19 = height;
LABEL_66:
  CI::Node::add_roi(v13, v14, v15, *(CGRect *)&v16, a5);
}

uint64_t CI::CGNode::graphviz_add_images(const char **this, void *a2)
{
  uint64_t result;

  result = CI_PRINT_TREE_dump_inputs();
  if ((_DWORD)result)
    return CIGVNodeAddImage(a2, this[13]);
  return result;
}

uint64_t CI::CGNode::type(CI::CGNode *this)
{
  return 29;
}

uint64_t CI::CGNode::child_count(CI::CGNode *this)
{
  return 0;
}

uint64_t CI::CGNode::child(CI::CGNode *this)
{
  return 0;
}

uint64_t CI::CGNode::shape_for_graphviz(CI::CGNode *this)
{
  return 0;
}

uint64_t CI::CGNode::color_for_graphviz(CI::CGNode *this)
{
  return 12;
}

uint64_t CI::CGNode::imageIndex(CI::CGNode *this)
{
  return *((unsigned int *)this + 24);
}

_DWORD *CI::CGNode::extent(_DWORD *this)
{
  if (!this[37])
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 168))(this);
  return this;
}

double CI::CGNode::extent_unclamped(CI::CGNode *this)
{
  return 0.0;
}

uint64_t CI::CGNode::child_type_is_image(CI::CGNode *this)
{
  return 0;
}

uint64_t CI::CGNode::may_be_extended_range(CI::CGNode *this)
{
  if (*((_DWORD *)this + 36))
    return CI::format_is_float(*((_DWORD *)this + 30));
  else
    return 1;
}

BOOL CI::CGNode::alpha_one(CI::CGNode *this)
{
  return *((_DWORD *)this + 36) == 1;
}

uint64_t CI::CGNode::output_depth(CI::CGNode *this)
{
  if (CI::format_is_deep(*((_DWORD *)this + 30)))
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t CI::CGNode::roiAlignment(CI::CGNode *this)
{
  return 16;
}

uint64_t CI::CGNode::texture_bindable(CI::CGNode *this)
{
  return (uint64_t)this + 48;
}

uint64_t `non-virtual thunk to'CI::CGNode::type(CI::CGNode *this)
{
  return 29;
}

uint64_t CI::Tileable::cacheIdentity(CI::Tileable *this)
{
  return *((_QWORD *)this + 4);
}

void ___ZN2CIL20ioSurfaceFromCGImageENS_10ImageIndexEP7CGImageNS_11PixelFormatERK5IRectbPK10__CFStringP16dispatch_queue_sRy_block_invoke(uint64_t a1, IOSurfaceRef buffer)
{
  **(_QWORD **)(a1 + 32) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) * *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  CI::fillBlock(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), buffer);
}

void CI::fillBlock(uint64_t a1, int a2, int a3, IOSurfaceRef buffer)
{
  size_t Width;
  size_t Height;
  size_t BytesPerElement;
  uint64_t PixelSize;
  __CFDictionary *Mutable;
  const void *v12;
  const void *v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  _QWORD v23[11];
  int v24;
  int v25;
  CGRect v26;
  CGRect v27;

  if (buffer)
  {
    if (a1)
    {
      Width = IOSurfaceGetWidth(buffer);
      Height = IOSurfaceGetHeight(buffer);
      BytesPerElement = IOSurfaceGetBytesPerElement(buffer);
      PixelSize = CGImageProviderGetPixelSize();
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      __CFDictionary::setValue(Mutable, (__CFDictionary *)*MEMORY[0x1E0C9DAB8], (const __CFString *)1, v12);
      __CFDictionary::setValue(Mutable, (__CFDictionary *)*MEMORY[0x1E0C9DAC0], 0, v13);
      __CFDictionary::setValue(Mutable, (__CFDictionary *)CFSTR("kCGImageBlockTileRequest"), 0);
      CGImageProviderGetSize();
      v15 = v14;
      v17 = v16;
      v18 = CGImageProviderCopyImageBlockSetWithOptions();
      if (v18)
      {
        v19 = v18;
        CFRelease(Mutable);
LABEL_10:
        CGImageBlockSetGetRect();
        v27.origin.x = 0.0;
        v27.origin.y = 0.0;
        v27.size.width = v15;
        v27.size.height = v17;
        if (CGRectContainsRect(v26, v27))
        {
          v23[0] = MEMORY[0x1E0C809B0];
          v23[1] = 0x40000000;
          v23[2] = ___ZN2CIL9fillBlockEP15CGImageProviderNS_11PixelFormatES2_P11__IOSurface_block_invoke;
          v23[3] = &__block_descriptor_tmp_16_1;
          v23[5] = 0;
          v23[6] = 0;
          v23[4] = v19;
          *(double *)&v23[7] = (double)Width;
          *(double *)&v23[8] = (double)Height;
          v23[9] = BytesPerElement;
          v23[10] = PixelSize;
          v24 = a2;
          v25 = a3;
          SurfaceApplyPlaneBlock(buffer, (uint64_t)v23);
        }
        CGImageBlockSetRelease();
        return;
      }
      v19 = CGImageProviderCopyImageBlockSetWithOptions();
      CFRelease(Mutable);
      if (v19)
        goto LABEL_10;
      v22 = ci_logger_render();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        CI::fillBlock();
    }
    else
    {
      v21 = ci_logger_render();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        CI::fillBlock();
    }
  }
  else
  {
    v20 = ci_logger_render();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      CI::fillBlock();
  }
}

void ___ZN2CIL9fillBlockEP15CGImageProviderNS_11PixelFormatES2_P11__IOSurface_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, size_t a6)
{
  uint64_t Count;
  uint64_t v10;
  uint64_t v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  CGFloat v17;
  double x;
  double y;
  double width;
  double height;
  size_t BytesPerRow;
  uint64_t v23;
  uint64_t Data;
  unint64_t v25;
  char *v26;
  char *v27;
  NSObject *v28;
  vImage_Buffer v29;
  vImage_Buffer rgbSrc;
  CGRect v31;
  CGRect v32;
  CGRect v33;

  Count = CGImageBlockSetGetCount();
  if (!Count)
    return;
  v10 = Count;
  v11 = 0;
  while (1)
  {
    CGImageBlockSetGetImageBlock();
    CGImageBlockGetRect();
    v13 = v12;
    v15 = v14;
    v33.size.width = v16;
    v33.size.height = v17;
    v33.origin.x = v12;
    v33.origin.y = v14;
    v31 = CGRectIntersection(*(CGRect *)(a1 + 40), v33);
    x = v31.origin.x;
    y = v31.origin.y;
    width = v31.size.width;
    height = v31.size.height;
    BytesPerRow = CGImageBlockGetBytesPerRow();
    v32.origin.x = x;
    v32.origin.y = y;
    v32.size.width = width;
    v32.size.height = height;
    if (!CGRectIsEmpty(v32))
      break;
LABEL_10:
    if (++v11 == v10)
      return;
  }
  v23 = *(_QWORD *)(a1 + 72);
  Data = CGImageBlockGetData();
  if (Data)
  {
    v25 = (unint64_t)height;
    v26 = (char *)(a2 + v23 * (unint64_t)x + (unint64_t)y * a6);
    v27 = (char *)(Data
                 + *(_QWORD *)(a1 + 80) * ((unint64_t)x - (unint64_t)v13)
                 + ((unint64_t)y - (unint64_t)v15) * BytesPerRow);
    if (*(_DWORD *)(a1 + 88) == 1799 && *(_DWORD *)(a1 + 92) == 1800)
    {
      rgbSrc.data = (void *)(Data
                           + *(_QWORD *)(a1 + 80) * ((unint64_t)x - (unint64_t)v13)
                           + ((unint64_t)y - (unint64_t)v15) * BytesPerRow);
      rgbSrc.height = (unint64_t)height;
      rgbSrc.width = (unint64_t)width;
      rgbSrc.rowBytes = BytesPerRow;
      v29.data = v26;
      v29.height = (unint64_t)height;
      v29.width = (unint64_t)width;
      v29.rowBytes = a6;
      vImageConvert_RGB16UtoRGBA16U(&rgbSrc, 0, 0xFFFFu, &v29, 0, 0);
    }
    else
    {
      for (; v25; --v25)
      {
        memcpy(v26, v27, *(_QWORD *)(a1 + 80) * (unint64_t)width);
        v26 += a6;
        v27 += BytesPerRow;
      }
    }
    goto LABEL_10;
  }
  v28 = ci_logger_render();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    ___ZN2CIL9fillBlockEP15CGImageProviderNS_11PixelFormatES2_P11__IOSurface_block_invoke_cold_1();
}

uint64_t CI::InstanceCounted<(CI::Type)29>::type()
{
  return 29;
}

_QWORD *CI::InstanceCounted<(CI::Type)29>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBA88;
  do
    v1 = __ldaxr(&dword_1ECF872F0[27]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[27]));
  return result;
}

void CI::InstanceCounted<(CI::Type)29>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBA88;
  do
    v1 = __ldaxr(&dword_1ECF872F0[27]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[27]));
  JUMPOUT(0x194025AACLL);
}

void CI::ClampNode::adjust_roi_for_clamp_rect(CI::ClampNode *this, CGRect a2, CGRect a3)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGRect v11;
  CGRect v12;
  CGRect v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v7 = a2.size.height;
  v8 = a2.size.width;
  v9 = a2.origin.y;
  v10 = a2.origin.x;
  CGRectGetMinX(a3);
  v11.origin.x = x;
  v11.origin.y = y;
  v11.size.width = width;
  v11.size.height = height;
  CGRectGetMinY(v11);
  v12.origin.x = x;
  v12.origin.y = y;
  v12.size.width = width;
  v12.size.height = height;
  CGRectGetMaxX(v12);
  v13.origin.x = x;
  v13.origin.y = y;
  v13.size.width = width;
  v13.size.height = height;
  CGRectGetMaxY(v13);
  v14.origin.x = v10;
  v14.origin.y = v9;
  v14.size.width = v8;
  v14.size.height = v7;
  CGRectGetMinX(v14);
  v15.origin.x = v10;
  v15.origin.y = v9;
  v15.size.width = v8;
  v15.size.height = v7;
  CGRectGetMinY(v15);
  v16.origin.x = v10;
  v16.origin.y = v9;
  v16.size.width = v8;
  v16.size.height = v7;
  CGRectGetMaxX(v16);
  v17.origin.x = v10;
  v17.origin.y = v9;
  v17.size.width = v8;
  v17.size.height = v7;
  CGRectGetMaxY(v17);
}

uint64_t CI::ClampNode::append_to_tree(CI::ClampNode *this, CI::Node *a2, CGRect a3)
{
  double height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CI::ClampNode *v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CI::ClampNode *v12;
  char *v13;
  double v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  double v24;
  double v25;
  double v26;
  double v27;
  __int128 v28;
  uint64_t v29;
  CI::AffineNode *v30;
  unsigned int v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  _BOOL4 v38;
  uint64_t v40;
  unsigned int v41;
  CI::ClampNode *v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  CI::ClampNode *v48;
  CI::Node *v49;
  CI::Node *v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  CGAffineTransform v54;
  CGAffineTransform v55;
  CGAffineTransform v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  while (1)
  {
    v8 = this;
    if ((*(unsigned int (**)(CI::ClampNode *, CI::Node *))(*(_QWORD *)this + 16))(this, a2) == 35)
      break;
    v57.origin.x = (*(double (**)(CI::ClampNode *))(*(_QWORD *)this + 160))(this);
    if (CGRectIsInfinite(v57))
    {
      v68.origin.x = (*(double (**)(CI::ClampNode *))(*(_QWORD *)this + 168))(this);
      v68.origin.y = v9;
      v68.size.width = v10;
      v68.size.height = v11;
      v58.origin.x = x;
      v58.origin.y = y;
      v58.size.width = width;
      v58.size.height = height;
      if (CGRectContainsRect(v58, v68))
        break;
    }
    v12 = (CI::ClampNode *)(*(uint64_t (**)(CI::ClampNode *))(*(_QWORD *)this + 16))(this);
    if ((_DWORD)v12 == 30)
    {
      v62.origin.x = x;
      v62.origin.y = y;
      v62.size.width = width;
      v62.size.height = height;
      CI::ClampNode::adjust_roi_for_clamp_rect(v12, v62, *(CGRect *)((char *)this + 56));
      x = v24;
      y = v25;
      width = v26;
      height = v27;
      this = (CI::ClampNode *)(*(uint64_t (**)(CI::ClampNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    }
    else
    {
      if ((*(unsigned int (**)(CI::ClampNode *))(*(_QWORD *)this + 16))(this) == 28)
      {
        v13 = (char *)this + 56;
        v14 = *((double *)this + 8);
        if (fabs(v14) < 0.0001)
        {
          v15 = *((double *)this + 9);
          if (fabs(v15) < 0.0001)
          {
            v16 = *((double *)this + 7);
            v17 = *((double *)this + 10);
LABEL_38:
            v55.a = v16;
            v55.b = v14;
            v55.c = v15;
            v55.d = v17;
            *(_OWORD *)&v55.tx = *(_OWORD *)((char *)this + 88);
            memset(&v56, 0, sizeof(v56));
            CGAffineTransformInvert(&v56, &v55);
            v54 = v56;
            v65.origin.x = x;
            v65.origin.y = y;
            v65.size.width = width;
            v65.size.height = height;
            v66 = CGRectApplyAffineTransform(v65, &v54);
            v44 = v66.origin.x;
            v45 = v66.origin.y;
            v46 = v66.size.width;
            v47 = v66.size.height;
            v48 = (CI::ClampNode *)(*(uint64_t (**)(CI::ClampNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
            v67.origin.x = v44;
            v67.origin.y = v45;
            v67.size.width = v46;
            v67.size.height = v47;
            v50 = (CI::Node *)CI::ClampNode::append_to_tree(v48, v49, v67);
            v40 = operator new();
            *((_QWORD *)CI::NodeWithChild::NodeWithChild((CI::NodeWithChild *)v40, v50) + 6) = off_1E2EBBA60;
            do
              v51 = __ldaxr(&dword_1ECF872F0[26]);
            while (__stlxr(v51 + 1, &dword_1ECF872F0[26]));
            *(_QWORD *)v40 = &off_1E2EB80D8;
            *(_QWORD *)(v40 + 48) = &unk_1E2EB8280;
            v52 = *(_OWORD *)v13;
            v53 = *((_OWORD *)v13 + 1);
            *(_OWORD *)(v40 + 88) = *((_OWORD *)v13 + 2);
            *(_OWORD *)(v40 + 72) = v53;
            *(_OWORD *)(v40 + 56) = v52;
            if (v50)
              CI::Object::unref(v50);
            return v40;
          }
        }
        v16 = *(double *)v13;
        if (fabs(*(double *)v13) < 0.0001)
        {
          v17 = *((double *)this + 10);
          if (fabs(v17) < 0.0001)
          {
            v15 = *((double *)this + 9);
            goto LABEL_38;
          }
        }
      }
      if ((*(unsigned int (**)(CI::ClampNode *))(*(_QWORD *)this + 16))(this) != 34)
        goto LABEL_18;
      this = (CI::ClampNode *)(*(uint64_t (**)(CI::ClampNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
      v69.origin.x = (*(double (**)(CI::ClampNode *))(*(_QWORD *)v8 + 160))(v8);
      v69.origin.y = v18;
      v69.size.width = v19;
      v69.size.height = v20;
      v59.origin.x = x;
      v59.origin.y = y;
      v59.size.width = width;
      v59.size.height = height;
      if (CGRectEqualToRect(v59, v69))
      {
        v60.origin.x = (*(double (**)(CI::ClampNode *))(*(_QWORD *)this + 160))(this);
        if (CGRectIsInfinite(v60))
        {
          v70.origin.x = (*(double (**)(CI::ClampNode *))(*(_QWORD *)this + 168))(this);
          v70.origin.y = v21;
          v70.size.width = v22;
          v70.size.height = v23;
          v61.origin.x = x;
          v61.origin.y = y;
          v61.size.width = width;
          v61.size.height = height;
          if (CGRectEqualToRect(v61, v70))
          {
            v43 = this;
            return CI::Object::ref((uint64_t)v43);
          }
        }
      }
      v71.origin.x = x;
      v71.origin.y = y;
      v71.size.width = width;
      v71.size.height = height;
      if (!CGRectContainsRect(*(CGRect *)((char *)v8 + 56), v71))
      {
        if ((*(unsigned int (**)(CI::ClampNode *))(*(_QWORD *)v8 + 16))(v8) != 28)
          goto LABEL_30;
        v28 = *(_OWORD *)((char *)v8 + 72);
        *(_OWORD *)&v56.a = *(_OWORD *)((char *)v8 + 56);
        *(_OWORD *)&v56.c = v28;
        *(_OWORD *)&v56.tx = *(_OWORD *)((char *)v8 + 88);
        v29 = (*(uint64_t (**)(CI::ClampNode *, _QWORD))(*(_QWORD *)v8 + 48))(v8, 0);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29) != 34)
          goto LABEL_30;
        v30 = (CI::AffineNode *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 48))(v29, 0);
        v31 = (*(uint64_t (**)(CI::AffineNode *))(*(_QWORD *)v30 + 16))(v30);
        if (!CI::is_image_type(v31))
          goto LABEL_30;
        v72.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v29 + 160))(v29);
        v72.origin.y = v32;
        v72.size.width = v33;
        v72.size.height = v34;
        v63.origin.x = x;
        v63.origin.y = y;
        v63.size.width = width;
        v63.size.height = height;
        if (!CGRectEqualToRect(v63, v72))
          goto LABEL_30;
        v73.origin.x = (*(double (**)(CI::AffineNode *))(*(_QWORD *)v30 + 168))(v30);
        v73.origin.y = v35;
        v73.size.width = v36;
        v73.size.height = v37;
        v64.origin.x = x;
        v64.origin.y = y;
        v64.size.width = width;
        v64.size.height = height;
        v38 = CGRectEqualToRect(v64, v73);
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)&v56.a, (float64x2_t)xmmword_19249C590), (int32x4_t)vceqq_f64(*(float64x2_t *)&v56.c, (float64x2_t)xmmword_1924948E0))))) & 1) != 0|| v56.tx != 0.0)
        {
          goto LABEL_30;
        }
LABEL_18:
        if (v38 && v56.ty == height)
          return CI::AffineNode::append_to_tree(v30, (CI::Node *)&v56, 0);
LABEL_30:
        v40 = operator new();
        *((_QWORD *)CI::NodeWithChild::NodeWithChild((CI::NodeWithChild *)v40, v8) + 6) = off_1E2EBBAD8;
        do
          v41 = __ldaxr(&dword_1ECF872F0[28]);
        while (__stlxr(v41 + 1, &dword_1ECF872F0[28]));
        *(_QWORD *)v40 = &off_1E2EBFA40;
        *(_QWORD *)(v40 + 48) = &unk_1E2EBFBF0;
        *(CGFloat *)(v40 + 56) = x;
        *(CGFloat *)(v40 + 64) = y;
        *(CGFloat *)(v40 + 72) = width;
        *(double *)(v40 + 80) = height;
        return v40;
      }
    }
  }
  v43 = this;
  return CI::Object::ref((uint64_t)v43);
}

uint64_t CI::ClampNode::convert_to_kernel_node(CI::ClampNode *this, CI::Context *a2)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CI::Vector *v7;
  float MinX;
  float MinY;
  float MaxX;
  __n128 v11;
  float v12;
  CI::SerialObjectPtrArray *v13;
  uint64_t v14;
  double v15;
  _QWORD v17[5];
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  v18 = CGRectInset(*(CGRect *)((char *)this + 56), 0.5, 0.5);
  x = v18.origin.x;
  y = v18.origin.y;
  width = v18.size.width;
  height = v18.size.height;
  v7 = (CI::Vector *)operator new();
  v19.origin.x = x;
  v19.origin.y = y;
  v19.size.width = width;
  v19.size.height = height;
  MinX = CGRectGetMinX(v19);
  v20.origin.x = x;
  v20.origin.y = y;
  v20.size.width = width;
  v20.size.height = height;
  MinY = CGRectGetMinY(v20);
  v21.origin.x = x;
  v21.origin.y = y;
  v21.size.width = width;
  v21.size.height = height;
  MaxX = CGRectGetMaxX(v21);
  v22.origin.x = x;
  v22.origin.y = y;
  v22.size.width = width;
  v22.size.height = height;
  v11.n128_f64[0] = CGRectGetMaxY(v22);
  v12 = v11.n128_f64[0];
  v11.n128_f32[0] = MinX;
  CI::Vector::Vector(v7, v11, MinY, MaxX, v12);
  v13 = (CI::SerialObjectPtrArray *)operator new();
  CI::SerialObjectPtrArray::SerialObjectPtrArray(v13, v7, *((CI::Object **)this + 5));
  CI::Object::unref(v7);
  v14 = operator new();
  v15 = *MEMORY[0x1E0C9D5E0];
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 0x40000000;
  v17[2] = ___ZNK2CI9ClampNode22convert_to_kernel_nodeEPNS_7ContextE_block_invoke;
  v17[3] = &__block_descriptor_tmp_19;
  v17[4] = this;
  return CI::WarpKernelNode::WarpKernelNode(v14, &CI::_ci_clamp_rect, v13, v17, v15);
}

void ___ZNK2CI9ClampNode22convert_to_kernel_nodeEPNS_7ContextE_block_invoke(CI::ClampNode *a1, double a2, double a3, double a4, double a5)
{
  CI::ClampNode::adjust_roi_for_clamp_rect(a1, *(CGRect *)&a2, *(CGRect *)(*((_QWORD *)a1 + 4) + 56));
}

void CI::ClampNode::~ClampNode(CI::ClampNode *this)
{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBAD8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[28]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[28]));
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBAD8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[28]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[28]));
  CI::NodeWithChild::~NodeWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::ClampNode::type(CI::ClampNode *this)
{
  return 30;
}

uint64_t CI::ClampNode::shape_for_graphviz(CI::ClampNode *this)
{
  return 2;
}

uint64_t CI::ClampNode::color_for_graphviz(CI::ClampNode *this)
{
  return 5;
}

uint64_t CI::ClampNode::add_args_to_hash(CI::ClampNode *this, CI::XXHashHelper *a2)
{
  return XXH64_update((uint64_t)a2, (char *)this + 56, 0x20uLL);
}

const char *CI::ClampNode::short_name(CI::ClampNode *this)
{
  return "clampRect";
}

size_t CI::ClampNode::print_for_graph_core(uint64_t a1, FILE *__stream)
{
  __sFILE *v4;

  fwrite("clampRect ", 0xAuLL, 1uLL, __stream);
  return CI::fprintf(__stream, v4, *(CGRect *)(a1 + 56));
}

double CI::ClampNode::extent(CI::ClampNode *this)
{
  return *MEMORY[0x1E0C9D5E0];
}

double CI::ClampNode::extent_unclamped(CI::ClampNode *this)
{
  return *((double *)this + 7);
}

uint64_t CI::ClampNode::is_warp(CI::ClampNode *this)
{
  return 1;
}

uint64_t CI::ClampNode::may_be_extended_range(CI::ClampNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 256))(*((_QWORD *)this + 5));
}

uint64_t CI::ClampNode::alpha_one(CI::ClampNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::ClampNode *))(*(_QWORD *)this + 408))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 264))(*((_QWORD *)this + 5));
  return result;
}

uint64_t CI::ClampNode::output_is_rg(CI::ClampNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::ClampNode *))(*(_QWORD *)this + 408))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 272))(*((_QWORD *)this + 5));
  return result;
}

uint64_t CI::ClampNode::output_is_r(CI::ClampNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::ClampNode *))(*(_QWORD *)this + 408))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 280))(*((_QWORD *)this + 5));
  return result;
}

uint64_t CI::ClampNode::output_is_luma(CI::ClampNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::ClampNode *))(*(_QWORD *)this + 408))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 288))(*((_QWORD *)this + 5));
  return result;
}

uint64_t CI::ClampNode::output_depth(CI::ClampNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::ClampNode *))(*(_QWORD *)this + 408))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5));
  return result;
}

uint64_t CI::ClampNode::output_format(CI::ClampNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::ClampNode *))(*(_QWORD *)this + 408))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 312))(*((_QWORD *)this + 5));
  return result;
}

BOOL CI::ClampNode::is_simple(CI::ClampNode *this)
{
  _BOOL8 result;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGRect v7;
  CGRect v8;
  CGRect v9;
  CGRect v10;

  v7.origin.x = (*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 160))(*((_QWORD *)this + 5));
  result = CGRectContainsRect(v7, *(CGRect *)((char *)this + 56));
  if ((_DWORD)result)
  {
    v3 = *((double *)this + 7);
    v4 = *((double *)this + 8);
    v5 = *((double *)this + 9);
    v6 = *((double *)this + 10);
    v8.origin.x = v3;
    v8.origin.y = v4;
    v8.size.width = v5;
    v8.size.height = v6;
    v10 = CGRectIntegral(v8);
    v9.origin.x = v3;
    v9.origin.y = v4;
    v9.size.width = v5;
    v9.size.height = v6;
    return CGRectEqualToRect(v9, v10);
  }
  return result;
}

uint64_t `non-virtual thunk to'CI::ClampNode::type(CI::ClampNode *this)
{
  return 30;
}

void `non-virtual thunk to'CI::ClampNode::~ClampNode(CI::ClampNode *this)
{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBAD8;
  v1 = (CI::ClampNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[28]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[28]));
  CI::NodeWithChild::~NodeWithChild(v1);
}

{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBAD8;
  v1 = (CI::ClampNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[28]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[28]));
  CI::NodeWithChild::~NodeWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::InstanceCounted<(CI::Type)30>::type()
{
  return 30;
}

_QWORD *CI::InstanceCounted<(CI::Type)30>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBAD8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[28]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[28]));
  return result;
}

void CI::InstanceCounted<(CI::Type)30>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBAD8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[28]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[28]));
  JUMPOUT(0x194025AACLL);
}

float32x2_t cikernel::_ci_clamp_rect(CI *a1, int8x16_t a2)
{
  return vminnm_f32(vmaxnm_f32(*(float32x2_t *)CI::getDC(a1), *(float32x2_t *)a2.i8), (float32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL));
}

CI::ClampToAlphaNode *CI::ClampToAlphaNode::append_to_tree(CI::ClampToAlphaNode *this, CI::Node *a2)
{
  CI::ClampToAlphaNode *v2;
  CI::Node *v3;
  CI::Node *v4;
  CI::Node *v5;
  CI::NodeWithChild *v6;
  unsigned int v7;

  v2 = this;
  if ((_DWORD)a2 && (*(unsigned int (**)(CI::ClampToAlphaNode *))(*(_QWORD *)this + 232))(this))
  {
    v3 = 0;
    v4 = v2;
    while (1)
    {
      v5 = v4;
      if (((*(uint64_t (**)(CI::Node *))(*(_QWORD *)v4 + 176))(v4) & 1) != 0)
        break;
      v4 = (CI::Node *)(*(uint64_t (**)(CI::Node *, _QWORD))(*(_QWORD *)v4 + 48))(v4, 0);
      v3 = v5;
      if (((*(uint64_t (**)(CI::Node *))(*(_QWORD *)v4 + 232))(v4) & 1) == 0)
        goto LABEL_8;
    }
    v5 = v3;
  }
  else
  {
    v5 = 0;
    v4 = v2;
  }
LABEL_8:
  if (!(*(unsigned int (**)(CI::Node *))(*(_QWORD *)v4 + 256))(v4))
  {
    CI::Object::ref((uint64_t)v4);
    v6 = v4;
    if (v5)
      goto LABEL_12;
    return v6;
  }
  v6 = (CI::NodeWithChild *)operator new();
  *((_QWORD *)CI::NodeWithChild::NodeWithChild(v6, v4) + 6) = off_1E2EBBB00;
  do
    v7 = __ldaxr(&dword_1ECF872F0[29]);
  while (__stlxr(v7 + 1, &dword_1ECF872F0[29]));
  *(_QWORD *)v6 = &off_1E2EBC6F0;
  *((_QWORD *)v6 + 6) = &unk_1E2EBC898;
  if (!v5)
    return v6;
LABEL_12:
  (*(void (**)(CI::Node *, CI::NodeWithChild *, _QWORD))(*(_QWORD *)v5 + 200))(v5, v6, 0);
  CI::Object::unref(v6);
  if (v2)
    CI::Object::ref((uint64_t)v2);
  return v2;
}

uint64_t CI::ClampToAlphaNode::convert_to_kernel_node(CI::ClampToAlphaNode *this, CI::Context *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = operator new();
  v4 = *((_QWORD *)this + 5);
  *(_QWORD *)v3 = 0xA00000001;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_QWORD *)(v3 + 96) = 0;
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = v4;
  if (v4)
    CI::Object::ref(v4);
  v5 = operator new();
  (*(void (**)(CI::ClampToAlphaNode *))(*(_QWORD *)this + 160))(this);
  return CI::ColorKernelNode::ColorKernelNode(v5, &CI::_ci_clamp_to_alpha, v3, 0, 0, 0);
}

CI::ClampToZeroToOneNode *CI::ClampToZeroToOneNode::append_to_tree(CI::ClampToZeroToOneNode *this, CI::Node *a2)
{
  CI::ClampToZeroToOneNode *v2;
  CI::Node *v3;
  CI::Node *v4;
  CI::Node *v5;
  CI::NodeWithChild *v6;
  unsigned int v7;

  v2 = this;
  if ((_DWORD)a2 && (*(unsigned int (**)(CI::ClampToZeroToOneNode *))(*(_QWORD *)this + 232))(this))
  {
    v3 = 0;
    v4 = v2;
    while (1)
    {
      v5 = v4;
      if (((*(uint64_t (**)(CI::Node *))(*(_QWORD *)v4 + 176))(v4) & 1) != 0)
        break;
      v4 = (CI::Node *)(*(uint64_t (**)(CI::Node *, _QWORD))(*(_QWORD *)v4 + 48))(v4, 0);
      v3 = v5;
      if (((*(uint64_t (**)(CI::Node *))(*(_QWORD *)v4 + 232))(v4) & 1) == 0)
        goto LABEL_8;
    }
    v5 = v3;
  }
  else
  {
    v5 = 0;
    v4 = v2;
  }
LABEL_8:
  if ((*(unsigned int (**)(CI::Node *))(*(_QWORD *)v4 + 16))(v4) == 32)
  {
    CI::Object::ref((uint64_t)v4);
    v6 = v4;
    if (v5)
      goto LABEL_10;
    return v6;
  }
  v6 = (CI::NodeWithChild *)operator new();
  *((_QWORD *)CI::NodeWithChild::NodeWithChild(v6, v4) + 6) = off_1E2EBBB28;
  do
    v7 = __ldaxr(&dword_1ECF872F0[30]);
  while (__stlxr(v7 + 1, &dword_1ECF872F0[30]));
  *(_QWORD *)v6 = &off_1E2EBE0B0;
  *((_QWORD *)v6 + 6) = &unk_1E2EBE258;
  if (!v5)
    return v6;
LABEL_10:
  (*(void (**)(CI::Node *, CI::NodeWithChild *, _QWORD))(*(_QWORD *)v5 + 200))(v5, v6, 0);
  CI::Object::unref(v6);
  if (v2)
    CI::Object::ref((uint64_t)v2);
  return v2;
}

uint64_t CI::ClampToZeroToOneNode::convert_to_kernel_node(CI::ClampToZeroToOneNode *this, CI::Context *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = operator new();
  v4 = *((_QWORD *)this + 5);
  *(_QWORD *)v3 = 0xA00000001;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_QWORD *)(v3 + 96) = 0;
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = v4;
  if (v4)
    CI::Object::ref(v4);
  v5 = operator new();
  (*(void (**)(CI::ClampToZeroToOneNode *))(*(_QWORD *)this + 160))(this);
  return CI::ColorKernelNode::ColorKernelNode(v5, &CI::_ci_clamp_to_zero_to_one, v3, 0, 0, 0);
}

void CI::ClampToAlphaNode::~ClampToAlphaNode(CI::ClampToAlphaNode *this)
{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBB00;
  do
    v1 = __ldaxr(&dword_1ECF872F0[29]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[29]));
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBB00;
  do
    v1 = __ldaxr(&dword_1ECF872F0[29]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[29]));
  CI::NodeWithChild::~NodeWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::ClampToAlphaNode::type(CI::ClampToAlphaNode *this)
{
  return 31;
}

uint64_t CI::ClampToAlphaNode::shape_for_graphviz(CI::ClampToAlphaNode *this)
{
  return 2;
}

uint64_t CI::ClampToAlphaNode::color_for_graphviz(CI::ClampToAlphaNode *this)
{
  return 4;
}

const char *CI::ClampToAlphaNode::short_name(CI::ClampToAlphaNode *this)
{
  return "clamp_to_alpha";
}

uint64_t CI::ClampToAlphaNode::may_be_extended_range(CI::ClampToAlphaNode *this)
{
  return 0;
}

uint64_t CI::ClampToAlphaNode::output_depth(CI::ClampToAlphaNode *this)
{
  return 0;
}

uint64_t CI::ClampToAlphaNode::output_format(CI::ClampToAlphaNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 312))(*((_QWORD *)this + 5));
}

uint64_t `non-virtual thunk to'CI::ClampToAlphaNode::type(CI::ClampToAlphaNode *this)
{
  return 31;
}

void `non-virtual thunk to'CI::ClampToAlphaNode::~ClampToAlphaNode(CI::ClampToAlphaNode *this)
{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBB00;
  v1 = (CI::ClampToAlphaNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[29]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[29]));
  CI::NodeWithChild::~NodeWithChild(v1);
}

{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBB00;
  v1 = (CI::ClampToAlphaNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[29]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[29]));
  CI::NodeWithChild::~NodeWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

void CI::ClampToZeroToOneNode::~ClampToZeroToOneNode(CI::ClampToZeroToOneNode *this)
{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBB28;
  do
    v1 = __ldaxr(&dword_1ECF872F0[30]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[30]));
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBB28;
  do
    v1 = __ldaxr(&dword_1ECF872F0[30]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[30]));
  CI::NodeWithChild::~NodeWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::ClampToZeroToOneNode::type(CI::ClampToZeroToOneNode *this)
{
  return 31;
}

uint64_t CI::ClampToZeroToOneNode::shape_for_graphviz(CI::ClampToZeroToOneNode *this)
{
  return 2;
}

uint64_t CI::ClampToZeroToOneNode::color_for_graphviz(CI::ClampToZeroToOneNode *this)
{
  return 4;
}

const char *CI::ClampToZeroToOneNode::short_name(CI::ClampToZeroToOneNode *this)
{
  return "clamp_to_zero_one";
}

uint64_t CI::ClampToZeroToOneNode::may_be_extended_range(CI::ClampToZeroToOneNode *this)
{
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 264))(*((_QWORD *)this + 5)) & 1) != 0)
    return 0;
  else
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 256))(*((_QWORD *)this + 5));
}

uint64_t CI::ClampToZeroToOneNode::output_depth(CI::ClampToZeroToOneNode *this)
{
  return 0;
}

uint64_t CI::ClampToZeroToOneNode::output_format(CI::ClampToZeroToOneNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 312))(*((_QWORD *)this + 5));
}

uint64_t `non-virtual thunk to'CI::ClampToZeroToOneNode::type(CI::ClampToZeroToOneNode *this)
{
  return 31;
}

void `non-virtual thunk to'CI::ClampToZeroToOneNode::~ClampToZeroToOneNode(CI::ClampToZeroToOneNode *this)
{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBB28;
  v1 = (CI::ClampToZeroToOneNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[30]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[30]));
  CI::NodeWithChild::~NodeWithChild(v1);
}

{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBB28;
  v1 = (CI::ClampToZeroToOneNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[30]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[30]));
  CI::NodeWithChild::~NodeWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::InstanceCounted<(CI::Type)31>::type()
{
  return 31;
}

_QWORD *CI::InstanceCounted<(CI::Type)31>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBB00;
  do
    v1 = __ldaxr(&dword_1ECF872F0[29]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[29]));
  return result;
}

void CI::InstanceCounted<(CI::Type)31>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBB00;
  do
    v1 = __ldaxr(&dword_1ECF872F0[29]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[29]));
  JUMPOUT(0x194025AACLL);
}

double cikernel::_ci_clamp_to_alpha(float32x4_t a1)
{
  double result;

  *(_QWORD *)&result = vminnmq_f32(vmaxnmq_f32(a1, (float32x4_t)0), (float32x4_t)vdupq_laneq_s32((int32x4_t)a1, 3)).u64[0];
  return result;
}

uint64_t CI::InstanceCounted<(CI::Type)32>::type()
{
  return 32;
}

_QWORD *CI::InstanceCounted<(CI::Type)32>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBB28;
  do
    v1 = __ldaxr(&dword_1ECF872F0[30]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[30]));
  return result;
}

void CI::InstanceCounted<(CI::Type)32>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBB28;
  do
    v1 = __ldaxr(&dword_1ECF872F0[30]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[30]));
  JUMPOUT(0x194025AACLL);
}

double cikernel::_ci_clamp_to_zero_to_one(float32x4_t a1)
{
  double result;

  __asm { FMOV            V1.4S, #1.0 }
  *(_QWORD *)&result = vminnmq_f32(vmaxnmq_f32(a1, (float32x4_t)0), _Q1).u64[0];
  return result;
}

BOOL CI::ColorMatrixNode::is_identity(CI::ColorMatrixNode *this, const double (*a2)[4])
{
  return fabs(*(double *)this + -1.0) < 0.0003
      && fabs(*((double *)this + 1)) < 0.0003
      && fabs(*((double *)this + 2)) < 0.0003
      && fabs(*((double *)this + 3)) < 0.0003
      && fabs(*((double *)this + 4)) < 0.0003
      && fabs(*((double *)this + 5) + -1.0) < 0.0003
      && fabs(*((double *)this + 6)) < 0.0003
      && fabs(*((double *)this + 7)) < 0.0003
      && fabs(*((double *)this + 8)) < 0.0003
      && fabs(*((double *)this + 9)) < 0.0003
      && fabs(*((double *)this + 10) + -1.0) < 0.0003
      && fabs(*((double *)this + 11)) < 0.0003
      && fabs(*((double *)this + 12)) < 0.0003
      && fabs(*((double *)this + 13)) < 0.0003
      && fabs(*((double *)this + 14)) < 0.0003
      && fabs(*((double *)this + 15) + -1.0) < 0.0003
      && fabs(*((double *)this + 16)) < 0.0003
      && fabs(*((double *)this + 17)) < 0.0003
      && fabs(*((double *)this + 18)) < 0.0003
      && fabs(*((double *)this + 19)) < 0.0003;
}

{
  return CI::ColorMatrixNode::is_identity((CI::ColorMatrixNode *)((char *)this + 56), a2);
}

BOOL CI::ColorMatrixNode::is_rrra(CI::ColorMatrixNode *this, const double (*a2)[4])
{
  return fabs(*(double *)this + -1.0) < 0.0003
      && fabs(*((double *)this + 1)) < 0.0003
      && fabs(*((double *)this + 2)) < 0.0003
      && fabs(*((double *)this + 3)) < 0.0003
      && fabs(*((double *)this + 4) + -1.0) < 0.0003
      && fabs(*((double *)this + 5)) < 0.0003
      && fabs(*((double *)this + 6)) < 0.0003
      && fabs(*((double *)this + 7)) < 0.0003
      && fabs(*((double *)this + 8) + -1.0) < 0.0003
      && fabs(*((double *)this + 9)) < 0.0003
      && fabs(*((double *)this + 10)) < 0.0003
      && fabs(*((double *)this + 11)) < 0.0003
      && fabs(*((double *)this + 12)) < 0.0003
      && fabs(*((double *)this + 13)) < 0.0003
      && fabs(*((double *)this + 14)) < 0.0003
      && fabs(*((double *)this + 15) + -1.0) < 0.0003
      && fabs(*((double *)this + 16)) < 0.0003
      && fabs(*((double *)this + 17)) < 0.0003
      && fabs(*((double *)this + 18)) < 0.0003
      && fabs(*((double *)this + 19)) < 0.0003;
}

BOOL CI::ColorMatrixNode::is_diagonal(CI::ColorMatrixNode *this)
{
  return fabs(*((double *)this + 8)) < 0.0003
      && fabs(*((double *)this + 9)) < 0.0003
      && fabs(*((double *)this + 10)) < 0.0003
      && fabs(*((double *)this + 11)) < 0.0003
      && fabs(*((double *)this + 13)) < 0.0003
      && fabs(*((double *)this + 14)) < 0.0003
      && fabs(*((double *)this + 15)) < 0.0003
      && fabs(*((double *)this + 16)) < 0.0003
      && fabs(*((double *)this + 18)) < 0.0003
      && fabs(*((double *)this + 19)) < 0.0003
      && fabs(*((double *)this + 20)) < 0.0003
      && fabs(*((double *)this + 21)) < 0.0003
      && fabs(*((double *)this + 22) + -1.0) < 0.0003
      && fabs(*((double *)this + 23)) < 0.0003
      && fabs(*((double *)this + 24)) < 0.0003
      && fabs(*((double *)this + 25)) < 0.0003
      && fabs(*((double *)this + 26)) < 0.0003;
}

BOOL CI::ColorMatrixNode::is_diagonal4(CI::ColorMatrixNode *this)
{
  return fabs(*((double *)this + 8)) < 0.0003
      && fabs(*((double *)this + 9)) < 0.0003
      && fabs(*((double *)this + 10)) < 0.0003
      && fabs(*((double *)this + 11)) < 0.0003
      && fabs(*((double *)this + 13)) < 0.0003
      && fabs(*((double *)this + 14)) < 0.0003
      && fabs(*((double *)this + 15)) < 0.0003
      && fabs(*((double *)this + 16)) < 0.0003
      && fabs(*((double *)this + 18)) < 0.0003
      && fabs(*((double *)this + 19)) < 0.0003
      && fabs(*((double *)this + 20)) < 0.0003
      && fabs(*((double *)this + 21)) < 0.0003
      && fabs(*((double *)this + 23)) < 0.0003
      && fabs(*((double *)this + 24)) < 0.0003
      && fabs(*((double *)this + 25)) < 0.0003
      && fabs(*((double *)this + 26)) < 0.0003;
}

BOOL CI::ColorMatrixNode::is_3x1(CI::ColorMatrixNode *this)
{
  _BOOL8 result;
  double v3;
  double v4;
  double v5;

  result = CI::ColorMatrixNode::is_3x3(this);
  if (result)
  {
    v3 = *((double *)this + 11);
    if (vabdd_f64(*((double *)this + 7), v3) >= 0.0003)
      return 0;
    if (vabdd_f64(v3, *((double *)this + 15)) >= 0.0003)
      return 0;
    v4 = *((double *)this + 12);
    if (vabdd_f64(*((double *)this + 8), v4) >= 0.0003)
      return 0;
    if (vabdd_f64(v4, *((double *)this + 16)) >= 0.0003)
      return 0;
    v5 = *((double *)this + 13);
    return vabdd_f64(*((double *)this + 9), v5) < 0.0003 && vabdd_f64(v5, *((double *)this + 17)) < 0.0003;
  }
  return result;
}

BOOL CI::ColorMatrixNode::is_3x3(CI::ColorMatrixNode *this)
{
  return fabs(*((double *)this + 10)) < 0.0003
      && fabs(*((double *)this + 14)) < 0.0003
      && fabs(*((double *)this + 18)) < 0.0003
      && fabs(*((double *)this + 19)) < 0.0003
      && fabs(*((double *)this + 20)) < 0.0003
      && fabs(*((double *)this + 21)) < 0.0003
      && fabs(*((double *)this + 22) + -1.0) < 0.0003
      && fabs(*((double *)this + 23)) < 0.0003
      && fabs(*((double *)this + 24)) < 0.0003
      && fabs(*((double *)this + 25)) < 0.0003
      && fabs(*((double *)this + 26)) < 0.0003;
}

BOOL CI::ColorMatrixNode::is_3x4(CI::ColorMatrixNode *this)
{
  return fabs(*((double *)this + 10)) < 0.0003
      && fabs(*((double *)this + 14)) < 0.0003
      && fabs(*((double *)this + 18)) < 0.0003
      && fabs(*((double *)this + 19)) < 0.0003
      && fabs(*((double *)this + 20)) < 0.0003
      && fabs(*((double *)this + 21)) < 0.0003
      && fabs(*((double *)this + 22) + -1.0) < 0.0003
      && fabs(*((double *)this + 26)) < 0.0003;
}

BOOL CI::ColorMatrixNode::is_4x3(CI::ColorMatrixNode *this)
{
  return fabs(*((double *)this + 19)) < 0.0003
      && fabs(*((double *)this + 20)) < 0.0003
      && fabs(*((double *)this + 21)) < 0.0003
      && fabs(*((double *)this + 22) + -1.0) < 0.0003
      && fabs(*((double *)this + 23)) < 0.0003
      && fabs(*((double *)this + 24)) < 0.0003
      && fabs(*((double *)this + 25)) < 0.0003
      && fabs(*((double *)this + 26)) < 0.0003;
}

BOOL CI::ColorMatrixNode::is_alpha_preserving(CI::ColorMatrixNode *this, const double (*a2)[4])
{
  return fabs(*((double *)this + 12)) < 0.0003
      && fabs(*((double *)this + 13)) < 0.0003
      && fabs(*((double *)this + 14)) < 0.0003
      && fabs(*((double *)this + 15) + -1.0) < 0.0003
      && fabs(*((double *)this + 19)) < 0.0003;
}

uint64_t CI::ColorMatrixNode::extent(uint64_t this)
{
  if (fabs(*(double *)(this + 208)) < 0.0003)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 40) + 160))(*(_QWORD *)(this + 40));
  return this;
}

BOOL CI::ColorMatrixNode::is_alpha_biased(CI::ColorMatrixNode *this, const double (*a2)[4])
{
  return fabs(*((double *)this + 19)) >= 0.0003;
}

BOOL CI::ColorMatrixNode::is_alpha_one(CI::ColorMatrixNode *this, const double (*a2)[4])
{
  return fabs(*((double *)this + 12)) < 0.0003
      && fabs(*((double *)this + 13)) < 0.0003
      && fabs(*((double *)this + 14)) < 0.0003
      && fabs(*((double *)this + 15)) < 0.0003
      && fabs(*((double *)this + 19) + -1.0) < 0.0003;
}

BOOL CI::ColorMatrixNode::is_biased(CI::ColorMatrixNode *this, const double (*a2)[4])
{
  return fabs(*((double *)this + 16)) >= 0.0003
      || fabs(*((double *)this + 17)) >= 0.0003
      || fabs(*((double *)this + 18)) >= 0.0003
      || fabs(*((double *)this + 19)) >= 0.0003;
}

uint64_t CI::ColorMatrixNode::alpha_one(CI::ColorMatrixNode *this, const double (*a2)[4])
{
  CI::ColorMatrixNode *v3;
  const double (*v4)[4];
  uint64_t result;

  v3 = (CI::ColorMatrixNode *)((char *)this + 56);
  if (CI::ColorMatrixNode::is_alpha_one((CI::ColorMatrixNode *)((char *)this + 56), a2))
    return 1;
  result = CI::ColorMatrixNode::is_alpha_preserving(v3, v4);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 264))(*((_QWORD *)this + 5));
  return result;
}

CI::ColorMatrixNode *CI::ColorMatrixNode::append_to_tree(CI::ColorMatrixNode *this, CI::Node *a2, const double (*a3)[4])
{
  int v3;
  const double (*v6)[4];
  CI::Node *v8;
  CI::Node *v9;
  CI::Node *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  const double (*v15)[4];
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31[52];
  unsigned int v32[52];
  _DWORD v33[52];
  unsigned int v34[52];
  _DWORD v35[52];
  _DWORD v36[52];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v3 = (int)a3;
  v47 = *MEMORY[0x1E0C80C00];
  if (CI::ColorMatrixNode::is_identity(a2, (const double (*)[4])a2))
  {
    if (!this)
      return this;
    return (CI::ColorMatrixNode *)CI::Object::ref((uint64_t)this);
  }
  if ((*(unsigned int (**)(CI::ColorMatrixNode *))(*(_QWORD *)this + 288))(this)
    && CI::ColorMatrixNode::is_rrra(a2, v6))
  {
    return (CI::ColorMatrixNode *)CI::Object::ref((uint64_t)this);
  }
  if (v3 && (*(unsigned int (**)(CI::ColorMatrixNode *))(*(_QWORD *)this + 232))(this))
  {
    v8 = 0;
    v9 = this;
    while (1)
    {
      v10 = v9;
      if (((*(uint64_t (**)(CI::Node *))(*(_QWORD *)v9 + 176))(v9) & 1) != 0)
        break;
      v9 = (CI::Node *)(*(uint64_t (**)(CI::Node *, _QWORD))(*(_QWORD *)v9 + 48))(v9, 0);
      v8 = v10;
      if (((*(uint64_t (**)(CI::Node *))(*(_QWORD *)v9 + 232))(v9) & 1) == 0)
        goto LABEL_14;
    }
    v10 = v8;
  }
  else
  {
    v10 = 0;
    v9 = this;
  }
LABEL_14:
  if ((*(unsigned int (**)(CI::Node *))(*(_QWORD *)v9 + 16))(v9) == 33)
  {
    CMatrix::CMatrix((CMatrix *)v36, 4u, 4u, (const double *)v9 + 7);
    CMatrix::CMatrix((CMatrix *)v35, 4u, 1u, (const double *)v9 + 23);
    CMatrix::CMatrix((CMatrix *)v34, 4u, 4u, (const double *)a2);
    CMatrix::CMatrix((CMatrix *)v33, 4u, 1u, (const double *)a2 + 16);
    CMatrix::operator*(v34, v36, v32);
    CMatrix::operator*(v34, v35, (unsigned int *)&v37);
    CMatrix::operator+((unsigned int *)&v37, v33, v31);
    v29 = CMatrix::operator[](v32, 0);
    v30 = v11;
    v12 = (__int128 *)CMatrixRow::operator[]((uint64_t)&v29, 0);
    v41 = v12[4];
    v42 = v12[5];
    v43 = v12[6];
    v44 = v12[7];
    v37 = *v12;
    v38 = v12[1];
    v39 = v12[2];
    v40 = v12[3];
    v29 = CMatrix::operator[](v31, 0);
    v30 = v13;
    v14 = (__int128 *)CMatrixRow::operator[]((uint64_t)&v29, 0);
    v45 = *v14;
    v46 = v14[1];
    if (CI::ColorMatrixNode::is_identity((CI::ColorMatrixNode *)&v37, v15))
    {
      v16 = *((_QWORD *)v9 + 5);
      if (v16)
        CI::Object::ref(*((_QWORD *)v9 + 5));
      if (v10)
        goto LABEL_19;
      return (CI::ColorMatrixNode *)v16;
    }
    v16 = operator new();
    *((_QWORD *)CI::NodeWithChild::NodeWithChild((CI::NodeWithChild *)v16, *((CI::Node **)v9 + 5)) + 6) = off_1E2EBBB50;
    do
      v24 = __ldaxr(&dword_1ECF872F0[31]);
    while (__stlxr(v24 + 1, &dword_1ECF872F0[31]));
    v25 = v44;
    *(_OWORD *)(v16 + 152) = v43;
    *(_OWORD *)(v16 + 168) = v25;
    v26 = v46;
    *(_OWORD *)(v16 + 184) = v45;
    *(_OWORD *)(v16 + 200) = v26;
    v27 = v40;
    *(_OWORD *)(v16 + 88) = v39;
    *(_OWORD *)(v16 + 104) = v27;
    v28 = v42;
    *(_OWORD *)(v16 + 120) = v41;
    *(_OWORD *)(v16 + 136) = v28;
    v22 = v37;
    v23 = v38;
  }
  else
  {
    v16 = operator new();
    *((_QWORD *)CI::NodeWithChild::NodeWithChild((CI::NodeWithChild *)v16, v9) + 6) = off_1E2EBBB50;
    do
      v17 = __ldaxr(&dword_1ECF872F0[31]);
    while (__stlxr(v17 + 1, &dword_1ECF872F0[31]));
    v18 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(v16 + 152) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(v16 + 168) = v18;
    v19 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(v16 + 184) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(v16 + 200) = v19;
    v20 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(v16 + 88) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(v16 + 104) = v20;
    v21 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(v16 + 120) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v16 + 136) = v21;
    v22 = *(_OWORD *)a2;
    v23 = *((_OWORD *)a2 + 1);
  }
  *(_OWORD *)(v16 + 56) = v22;
  *(_QWORD *)v16 = &off_1E2EBB610;
  *(_QWORD *)(v16 + 48) = &unk_1E2EBB7B8;
  *(_OWORD *)(v16 + 72) = v23;
  if (v10)
  {
LABEL_19:
    (*(void (**)(CI::Node *, uint64_t, _QWORD))(*(_QWORD *)v10 + 200))(v10, v16, 0);
    if (v16)
      CI::Object::unref((CI::Object *)v16);
    CI::Object::ref((uint64_t)this);
    return this;
  }
  return (CI::ColorMatrixNode *)v16;
}

uint64_t CI::ColorMatrixNode::add_to_kernel_hash(CI::ColorMatrixNode *this, const double (*a2)[4])
{
  char *v4;

  if (CI::ColorMatrixNode::is_rrra((CI::ColorMatrixNode *)((char *)this + 56), a2))
  {
    v4 = "builtin_colormatrix_rrra";
  }
  else if (CI::ColorMatrixNode::is_diagonal(this))
  {
    v4 = "builtin_colormatrixdiag";
  }
  else if (CI::ColorMatrixNode::is_diagonal4(this))
  {
    v4 = "builtin_colormatrixdiag4";
  }
  else if (CI::ColorMatrixNode::is_3x1(this))
  {
    v4 = "builtin_colormatrix3x1";
  }
  else if (CI::ColorMatrixNode::is_3x3(this))
  {
    v4 = "builtin_colormatrix3x3";
  }
  else if (CI::ColorMatrixNode::is_3x4(this))
  {
    v4 = "builtin_colormatrix3x4";
  }
  else
  {
    v4 = "builtin_colormatrix";
  }
  return CI::XXHashHelper::addstr((uint64_t)a2, v4);
}

uint64_t CI::ColorMatrixNode::convert_to_kernel_node(CI::Object **this, CI::Context *a2)
{
  uint64_t v3;
  const double (*v4)[4];
  void (***v5)(CI::ColorKernel *__hidden);
  CI::Vector *v6;
  __n64 v7;
  float v8;
  float v9;
  double v10;
  __n128 v11;
  float v12;
  float v13;
  float v14;
  __n64 v15;
  float v16;
  float v17;
  CI::Vector *v18;
  __n64 v19;
  float v20;
  float v21;
  CI::Vector *v22;
  __n64 v23;
  float v24;
  float v25;
  __n64 v26;
  float v27;
  float v28;
  _BOOL4 is_3x4;
  CI::Vector *v30;
  CI::Object *v31;
  __n128 v32;
  float v33;
  float v34;
  float v35;
  CI::Vector *v36;
  __n128 v37;
  float v38;
  float v39;
  float v40;
  __n128 v41;
  float v42;
  float v43;
  float v44;
  float v45;
  CI::Vector *v46;
  __n128 v47;
  float v48;
  float v49;
  float v50;
  CI::Vector *v51;
  __n128 v52;
  float v53;
  float v54;
  float v55;
  CI::Vector *v56;
  __n128 v57;
  float v58;
  float v59;
  float v60;
  __n128 v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;

  v3 = operator new();
  *(_QWORD *)v3 = 0;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 4) = 0x60000000ALL;
  CI::SerialObjectPtrArray::append(v3, this[5]);
  if (CI::ColorMatrixNode::is_rrra((CI::ColorMatrixNode *)(this + 7), v4))
  {
    v5 = &CI::_ci_colormatrix_rrra;
  }
  else
  {
    if (CI::ColorMatrixNode::is_diagonal((CI::ColorMatrixNode *)this))
    {
      v6 = (CI::Vector *)operator new();
      v7.n64_u64[0] = (unint64_t)this[7];
      v7.n64_f32[0] = v7.n64_f64[0];
      v8 = *((double *)this + 12);
      v9 = *((double *)this + 17);
      CI::Vector::Vector(v6, v7, v8, v9);
      v5 = &CI::_ci_colormatrixdiag;
    }
    else if (CI::ColorMatrixNode::is_diagonal4((CI::ColorMatrixNode *)this))
    {
      v10 = *((double *)this + 22);
      v6 = (CI::Vector *)operator new();
      v11.n128_f64[0] = v10 * *((double *)this + 7);
      v11.n128_f32[0] = v11.n128_f64[0];
      v12 = v10 * *((double *)this + 12);
      v13 = v10 * *((double *)this + 17);
      v14 = v10;
      CI::Vector::Vector(v6, v11, v12, v13, v14);
      v5 = &CI::_ci_colormatrixdiag4;
    }
    else if (CI::ColorMatrixNode::is_3x1((CI::ColorMatrixNode *)this))
    {
      v6 = (CI::Vector *)operator new();
      v15.n64_u64[0] = (unint64_t)this[11];
      v15.n64_f32[0] = v15.n64_f64[0];
      v16 = *((double *)this + 12);
      v17 = *((double *)this + 13);
      CI::Vector::Vector(v6, v15, v16, v17);
      v5 = &CI::_ci_colormatrix3x1;
    }
    else if (CI::ColorMatrixNode::is_3x3((CI::ColorMatrixNode *)this))
    {
      v18 = (CI::Vector *)operator new();
      v19.n64_u64[0] = (unint64_t)this[7];
      v19.n64_f32[0] = v19.n64_f64[0];
      v20 = *((double *)this + 11);
      v21 = *((double *)this + 15);
      CI::Vector::Vector(v18, v19, v20, v21);
      CI::SerialObjectPtrArray::append(v3, v18);
      CI::Object::unref(v18);
      v22 = (CI::Vector *)operator new();
      v23.n64_u64[0] = (unint64_t)this[8];
      v23.n64_f32[0] = v23.n64_f64[0];
      v24 = *((double *)this + 12);
      v25 = *((double *)this + 16);
      CI::Vector::Vector(v22, v23, v24, v25);
      CI::SerialObjectPtrArray::append(v3, v22);
      CI::Object::unref(v22);
      v6 = (CI::Vector *)operator new();
      v26.n64_u64[0] = (unint64_t)this[9];
      v26.n64_f32[0] = v26.n64_f64[0];
      v27 = *((double *)this + 13);
      v28 = *((double *)this + 17);
      CI::Vector::Vector(v6, v26, v27, v28);
      v5 = &CI::_ci_colormatrix3x3;
    }
    else
    {
      is_3x4 = CI::ColorMatrixNode::is_3x4((CI::ColorMatrixNode *)this);
      v30 = (CI::Vector *)operator new();
      v31 = v30;
      v32.n128_u64[0] = (unint64_t)this[7];
      v32.n128_f32[0] = v32.n128_f64[0];
      v33 = *((double *)this + 11);
      v34 = *((double *)this + 15);
      if (is_3x4)
      {
        v35 = *((double *)this + 23);
        CI::Vector::Vector(v30, v32, v33, v34, v35);
        CI::SerialObjectPtrArray::append(v3, v31);
        CI::Object::unref(v31);
        v36 = (CI::Vector *)operator new();
        v37.n128_u64[0] = (unint64_t)this[8];
        v37.n128_f32[0] = v37.n128_f64[0];
        v38 = *((double *)this + 12);
        v39 = *((double *)this + 16);
        v40 = *((double *)this + 24);
        CI::Vector::Vector(v36, v37, v38, v39, v40);
        CI::SerialObjectPtrArray::append(v3, v36);
        CI::Object::unref(v36);
        v6 = (CI::Vector *)operator new();
        v41.n128_u64[0] = (unint64_t)this[9];
        v41.n128_f32[0] = v41.n128_f64[0];
        v42 = *((double *)this + 13);
        v43 = *((double *)this + 17);
        v44 = *((double *)this + 25);
        CI::Vector::Vector(v6, v41, v42, v43, v44);
        v5 = &CI::_ci_colormatrix3x4;
      }
      else
      {
        v45 = *((double *)this + 19);
        CI::Vector::Vector(v30, v32, v33, v34, v45);
        CI::SerialObjectPtrArray::append(v3, v31);
        CI::Object::unref(v31);
        v46 = (CI::Vector *)operator new();
        v47.n128_u64[0] = (unint64_t)this[8];
        v47.n128_f32[0] = v47.n128_f64[0];
        v48 = *((double *)this + 12);
        v49 = *((double *)this + 16);
        v50 = *((double *)this + 20);
        CI::Vector::Vector(v46, v47, v48, v49, v50);
        CI::SerialObjectPtrArray::append(v3, v46);
        CI::Object::unref(v46);
        v51 = (CI::Vector *)operator new();
        v52.n128_u64[0] = (unint64_t)this[9];
        v52.n128_f32[0] = v52.n128_f64[0];
        v53 = *((double *)this + 13);
        v54 = *((double *)this + 17);
        v55 = *((double *)this + 21);
        CI::Vector::Vector(v51, v52, v53, v54, v55);
        CI::SerialObjectPtrArray::append(v3, v51);
        CI::Object::unref(v51);
        v56 = (CI::Vector *)operator new();
        v57.n128_u64[0] = (unint64_t)this[10];
        v57.n128_f32[0] = v57.n128_f64[0];
        v58 = *((double *)this + 14);
        v59 = *((double *)this + 18);
        v60 = *((double *)this + 22);
        CI::Vector::Vector(v56, v57, v58, v59, v60);
        CI::SerialObjectPtrArray::append(v3, v56);
        CI::Object::unref(v56);
        v6 = (CI::Vector *)operator new();
        v61.n128_u64[0] = (unint64_t)this[23];
        v61.n128_f32[0] = v61.n128_f64[0];
        v62 = *((double *)this + 24);
        v63 = *((double *)this + 25);
        v64 = *((double *)this + 26);
        CI::Vector::Vector(v6, v61, v62, v63, v64);
        v5 = &CI::_ci_colormatrix;
      }
    }
    CI::SerialObjectPtrArray::append(v3, v6);
    CI::Object::unref(v6);
  }
  v65 = operator new();
  (*((void (**)(CI::Object **))*this + 20))(this);
  return CI::ColorKernelNode::ColorKernelNode(v65, v5, v3, 0, 0, 0);
}

size_t CI::ColorMatrixNode::print_for_graph_core(double *a1, FILE *a2, uint64_t a3, int a4)
{
  uint64_t v6;
  CI *v7;
  const double (*v9)[4];
  const char *v10;
  const double (*v11)[4];
  const char *v12;

  if (a4)
    v6 = 32;
  else
    v6 = 10;
  v7 = (CI *)(a1 + 7);
  if (CI::ColorMatrixNode::is_rrra((CI::ColorMatrixNode *)(a1 + 7), (const double (*)[4])a2))
    return fwrite("color_matrix_rrra", 0x11uLL, 1uLL, a2);
  if (CI::ColorMatrixNode::is_diagonal((CI::ColorMatrixNode *)a1))
    return fprintf(a2, "color_matrix_diag%c[%g, %g, %g]");
  if (CI::ColorMatrixNode::is_diagonal4((CI::ColorMatrixNode *)a1))
    return fprintf(a2, "color_matrix_diag4%c[%g, %g, %g, %g]");
  if (CI::ColorMatrixNode::is_3x1((CI::ColorMatrixNode *)a1))
    return fprintf(a2, "color_matrix_3x1%c[%g, %g, %g]");
  if (CI::ColorMatrixNode::is_3x3((CI::ColorMatrixNode *)a1))
  {
    v10 = CI::name_matrix_3x3(v7, v9);
    fprintf(a2, "color_matrix_%s%c", v10, v6);
    fprintf(a2, "r=[%g %g %g]%c", a1[7], a1[8], a1[9], v6);
    fprintf(a2, "g=[%g %g %g]%c", a1[11], a1[12], a1[13], v6);
    return fprintf(a2, "b=[%g %g %g]");
  }
  else if (CI::ColorMatrixNode::is_3x4((CI::ColorMatrixNode *)a1))
  {
    v12 = CI::name_matrix_3x4(v7, v11);
    fprintf(a2, "color_matrix_%s%c", v12, v6);
    fprintf(a2, "r=[%g %g %g]%c", a1[7], a1[8], a1[9], v6);
    fprintf(a2, "g=[%g %g %g]%c", a1[11], a1[12], a1[13], v6);
    fprintf(a2, "b=[%g %g %g]%c", a1[15], a1[16], a1[17], v6);
    return fprintf(a2, "bias=[%g %g %g]");
  }
  else if (CI::ColorMatrixNode::is_4x3((CI::ColorMatrixNode *)a1))
  {
    fprintf(a2, "color_matrix_4x3%c", v6);
    fprintf(a2, "r=[%g %g %g %g]%c", a1[7], a1[8], a1[9], a1[10], v6);
    fprintf(a2, "g=[%g %g %g %g]%c", a1[11], a1[12], a1[13], a1[14], v6);
    return fprintf(a2, "b=[%g %g %g %g]%c");
  }
  else
  {
    fprintf(a2, "color_matrix%c", v6);
    fprintf(a2, "r=[%g %g %g %g]%c", a1[7], a1[8], a1[9], a1[10], v6);
    fprintf(a2, "g=[%g %g %g %g]%c", a1[11], a1[12], a1[13], a1[14], v6);
    fprintf(a2, "b=[%g %g %g %g]%c", a1[15], a1[16], a1[17], a1[18], v6);
    fprintf(a2, "a=[%g %g %g %g]%c", a1[19], a1[20], a1[21], a1[22], v6);
    return fprintf(a2, "bias=[%g %g %g %g]");
  }
}

const char *CI::name_matrix_3x3(CI *this, const double (*a2)[4])
{
  double v3;
  const char *result;
  uint64_t v5;
  double v6;
  double *v7;
  char *v8;

  v3 = *(double *)this;
  if (fabs(*(double *)this + -1.22486) < 0.0003
    && fabs(*((double *)this + 1) + 0.225095) < 0.0003
    && fabs(*((double *)this + 2) + -0.0000143051) < 0.0003
    && fabs(*((double *)this + 4) + 0.0420312) < 0.0003
    && fabs(*((double *)this + 5) + -1.04215) < 0.0003
    && fabs(*((double *)this + 6) + -0.0000336338) < 0.0003
    && fabs(*((double *)this + 8) + 0.0196301) < 0.0003
    && fabs(*((double *)this + 9) + 0.0786319) < 0.0003
    && fabs(*((double *)this + 10) + -1.09799) < 0.0003)
  {
    return "P3_to_709";
  }
  if (fabs(v3 + -0.822518) < 0.0003
    && fabs(*((double *)this + 1) + -0.177654) < 0.0003
    && fabs(*((double *)this + 2) + 0.0000161231) < 0.0003
    && fabs(*((double *)this + 4) + -0.0331725) < 0.0003
    && fabs(*((double *)this + 5) + -0.966714) < 0.0003
    && fabs(*((double *)this + 6) + 0.0000300407) < 0.0003
    && fabs(*((double *)this + 8) + -0.0170808) < 0.0003
    && fabs(*((double *)this + 9) + -0.0724069) < 0.0003
    && fabs(*((double *)this + 10) + -0.910754) < 0.0003)
  {
    return "709_to_P3";
  }
  if (fabs(v3 + -1.66039) < 0.0003
    && fabs(*((double *)this + 1) + 0.587787) < 0.0003
    && fabs(*((double *)this + 2) + 0.0728179) < 0.0003
    && fabs(*((double *)this + 4) + 0.124542) < 0.0003
    && fabs(*((double *)this + 5) + -1.13299) < 0.0003
    && fabs(*((double *)this + 6) + 0.00833634) < 0.0003
    && fabs(*((double *)this + 8) + 0.0181401) < 0.0003
    && fabs(*((double *)this + 9) + 0.10058) < 0.0003
    && fabs(*((double *)this + 10) + -1.11843) < 0.0003)
  {
    return "2020_to_709";
  }
  if (fabs(v3 + -0.627445) < 0.0003
    && fabs(*((double *)this + 1) + -0.329358) < 0.0003
    && fabs(*((double *)this + 2) + -0.0433061) < 0.0003
    && fabs(*((double *)this + 4) + -0.0690914) < 0.0003
    && fabs(*((double *)this + 5) + -0.919472) < 0.0003
    && fabs(*((double *)this + 6) + -0.0113517) < 0.0003
    && fabs(*((double *)this + 8) + -0.01639) < 0.0003
    && fabs(*((double *)this + 9) + -0.0880293) < 0.0003
    && fabs(*((double *)this + 10) + -0.895833) < 0.0003)
  {
    return "709_to_2020";
  }
  if (fabs(v3 + -1.39826) < 0.0003
    && fabs(*((double *)this + 1) + 0.39846) < 0.0003
    && fabs(*((double *)this + 2) + -0.00000625849) < 0.0003
    && fabs(*((double *)this + 4) + -0.0000209321) < 0.0003
    && fabs(*((double *)this + 5) + -1.00008) < 0.0003
    && fabs(*((double *)this + 6) + -0.0000304971) < 0.0003
    && fabs(*((double *)this + 8) + -0.000014063) < 0.0003
    && fabs(*((double *)this + 9) + 0.0429515) < 0.0003
    && fabs(*((double *)this + 10) + -1.04267) < 0.0003)
  {
    return "AdobeRGB_to_709";
  }
  if (fabs(v3 + -0.715173) < 0.0003
    && fabs(*((double *)this + 1) + -0.284946) < 0.0003
    && fabs(*((double *)this + 2) + 0.0000126362) < 0.0003
    && fabs(*((double *)this + 4) + 0.0000149781) < 0.0003
    && fabs(*((double *)this + 5) + -0.999917) < 0.0003
    && fabs(*((double *)this + 6) + 0.0000292528) < 0.0003
    && fabs(*((double *)this + 8) + 0.0000102594) < 0.0003
    && fabs(*((double *)this + 9) + -0.0411866) < 0.0003
    && fabs(*((double *)this + 10) + -0.959077) < 0.0003)
  {
    return "709_to_AdobeRGB";
  }
  if (fabs(v3 + -1.34358) < 0.0003
    && fabs(*((double *)this + 1) + 0.282183) < 0.0003
    && fabs(*((double *)this + 2) + 0.061393) < 0.0003
    && fabs(*((double *)this + 4) + 0.0653165) < 0.0003
    && fabs(*((double *)this + 5) + -1.07578) < 0.0003
    && fabs(*((double *)this + 6) + 0.010508) < 0.0003
    && fabs(*((double *)this + 8) + -0.00282185) < 0.0003
    && fabs(*((double *)this + 9) + 0.0196068) < 0.0003
    && fabs(*((double *)this + 10) + -1.01677) < 0.0003)
  {
    return "2020_to_P3";
  }
  if (fabs(v3 + -0.753838) < 0.0003
    && fabs(*((double *)this + 1) + -0.198602) < 0.0003
    && fabs(*((double *)this + 2) + -0.0475697) < 0.0003
    && fabs(*((double *)this + 4) + -0.0457577) < 0.0003
    && fabs(*((double *)this + 5) + -0.941786) < 0.0003
    && fabs(*((double *)this + 6) + -0.012496) < 0.0003
    && fabs(*((double *)this + 8) + 0.00120976) < 0.0003
    && fabs(*((double *)this + 9) + -0.0176097) < 0.0003
    && fabs(*((double *)this + 10) + -0.983618) < 0.0003)
  {
    return "P3_to_2020";
  }
  if (CI::name_matrix_3x3(double const(*)[4])::onceToken != -1)
    dispatch_once(&CI::name_matrix_3x3(double const(*)[4])::onceToken, &__block_literal_global_93);
  v5 = 0;
  v6 = *(double *)this;
  result = "3x3";
  while (1)
  {
    v7 = (double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5);
    if (vabdd_f64(v6, *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 16)) < 0.0003
      && vabdd_f64(*((double *)this + 1), v7[3]) < 0.0003
      && vabdd_f64(*((double *)this + 2), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 32)) < 0.0003&& vabdd_f64(*((double *)this + 4), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 40)) < 0.0003&& vabdd_f64(*((double *)this + 5), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 48)) < 0.0003&& vabdd_f64(*((double *)this + 6), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 56)) < 0.0003&& vabdd_f64(*((double *)this + 8), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 64)) < 0.0003&& vabdd_f64(*((double *)this + 9), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 72)) < 0.0003&& vabdd_f64(*((double *)this + 10),
           *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 80)) < 0.0003)
    {
      v8 = (char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 8;
      return *(const char **)v8;
    }
    if (vabdd_f64(v6, v7[15]) < 0.0003
      && vabdd_f64(*((double *)this + 1), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 128)) < 0.0003&& vabdd_f64(*((double *)this + 2), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 136)) < 0.0003&& vabdd_f64(*((double *)this + 4), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 144)) < 0.0003&& vabdd_f64(*((double *)this + 5), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 152)) < 0.0003&& vabdd_f64(*((double *)this + 6), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 160)) < 0.0003&& vabdd_f64(*((double *)this + 8), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 168)) < 0.0003&& vabdd_f64(*((double *)this + 9),
           *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 176)) < 0.0003
      && vabdd_f64(*((double *)this + 10), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 184)) < 0.0003)
    {
      break;
    }
    v5 += 216;
    if (v5 == 1296)
      return result;
  }
  v8 = (char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 112;
  return *(const char **)v8;
}

const char *CI::name_matrix_3x4(CI *this, const double (*a2)[4])
{
  double *v3;
  double v4;
  uint64_t v5;
  const char *result;
  double *v7;

  if (CI::name_matrix_3x4(double const(*)[4])::onceToken != -1)
    dispatch_once(&CI::name_matrix_3x4(double const(*)[4])::onceToken, &__block_literal_global_127_0);
  v3 = (double *)&qword_1EE27FC58;
  v4 = *(double *)this;
  v5 = 24;
  result = "3x4";
  while (1)
  {
    if (vabdd_f64(v4, *(v3 - 11)) < 0.0003
      && vabdd_f64(*((double *)this + 1), *(v3 - 10)) < 0.0003
      && vabdd_f64(*((double *)this + 2), *(v3 - 9)) < 0.0003
      && vabdd_f64(*((double *)this + 4), *(v3 - 8)) < 0.0003
      && vabdd_f64(*((double *)this + 5), *(v3 - 7)) < 0.0003
      && vabdd_f64(*((double *)this + 6), *(v3 - 6)) < 0.0003
      && vabdd_f64(*((double *)this + 8), *(v3 - 5)) < 0.0003
      && vabdd_f64(*((double *)this + 9), *(v3 - 4)) < 0.0003
      && vabdd_f64(*((double *)this + 10), *(v3 - 3)) < 0.0003
      && vabdd_f64(*((double *)this + 16), *(v3 - 2)) < 0.0003
      && vabdd_f64(*((double *)this + 17), *(v3 - 1)) < 0.0003
      && vabdd_f64(*((double *)this + 18), *v3) < 0.0003)
    {
      v7 = v3 - 12;
      return *(const char **)v7;
    }
    if (vabdd_f64(v4, v3[2]) < 0.0003
      && vabdd_f64(*((double *)this + 1), v3[3]) < 0.0003
      && vabdd_f64(*((double *)this + 2), v3[4]) < 0.0003
      && vabdd_f64(*((double *)this + 4), v3[5]) < 0.0003
      && vabdd_f64(*((double *)this + 5), v3[6]) < 0.0003
      && vabdd_f64(*((double *)this + 6), v3[7]) < 0.0003
      && vabdd_f64(*((double *)this + 8), v3[8]) < 0.0003
      && vabdd_f64(*((double *)this + 9), v3[9]) < 0.0003
      && vabdd_f64(*((double *)this + 10), v3[10]) < 0.0003
      && vabdd_f64(*((double *)this + 16), v3[11]) < 0.0003
      && vabdd_f64(*((double *)this + 17), v3[12]) < 0.0003
      && vabdd_f64(*((double *)this + 18), v3[13]) < 0.0003)
    {
      break;
    }
    v3 += 28;
    if (!--v5)
      return result;
  }
  v7 = v3 + 1;
  return *(const char **)v7;
}

size_t CI::ColorMatrixNode::print_for_graph_short(CI::ColorMatrixNode *this, __sFILE *a2)
{
  CI *v4;
  const char *v5;
  size_t v6;
  const double (*v8)[4];
  const char *v9;
  const double (*v10)[4];

  v4 = (CI::ColorMatrixNode *)((char *)this + 56);
  if (CI::ColorMatrixNode::is_rrra((CI::ColorMatrixNode *)((char *)this + 56), (const double (*)[4])a2))
  {
    v5 = "color_matrix_rrra";
LABEL_5:
    v6 = 17;
    return fwrite(v5, v6, 1uLL, a2);
  }
  if (CI::ColorMatrixNode::is_diagonal(this))
  {
    v5 = "color_matrix_diag";
    goto LABEL_5;
  }
  if (CI::ColorMatrixNode::is_diagonal4(this))
  {
    v5 = "color_matrix_diag4";
    v6 = 18;
    return fwrite(v5, v6, 1uLL, a2);
  }
  if (CI::ColorMatrixNode::is_3x1(this))
  {
    v5 = "color_matrix_3x1";
LABEL_11:
    v6 = 16;
    return fwrite(v5, v6, 1uLL, a2);
  }
  if (CI::ColorMatrixNode::is_3x3(this))
  {
    v9 = CI::name_matrix_3x3(v4, v8);
  }
  else
  {
    if (!CI::ColorMatrixNode::is_3x4(this))
    {
      if (!CI::ColorMatrixNode::is_4x3(this))
      {
        v5 = "color_matrix";
        v6 = 12;
        return fwrite(v5, v6, 1uLL, a2);
      }
      v5 = "color_matrix_4x3";
      goto LABEL_11;
    }
    v9 = CI::name_matrix_3x4(v4, v10);
  }
  return fprintf(a2, "color_matrix_%s", v9);
}

void CI::ColorMatrixNode::~ColorMatrixNode(CI::ColorMatrixNode *this)
{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBB50;
  do
    v1 = __ldaxr(&dword_1ECF872F0[31]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[31]));
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBB50;
  do
    v1 = __ldaxr(&dword_1ECF872F0[31]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[31]));
  CI::NodeWithChild::~NodeWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::ColorMatrixNode::type(CI::ColorMatrixNode *this)
{
  return 33;
}

uint64_t CI::ColorMatrixNode::shape_for_graphviz(CI::ColorMatrixNode *this)
{
  return 2;
}

uint64_t CI::ColorMatrixNode::color_for_graphviz(CI::ColorMatrixNode *this)
{
  return 4;
}

uint64_t CI::ColorMatrixNode::add_args_to_hash(CI::ColorMatrixNode *this, CI::XXHashHelper *a2)
{
  return XXH64_update((uint64_t)a2, (char *)this + 56, 0xA0uLL);
}

const char *CI::ColorMatrixNode::short_name(CI::ColorMatrixNode *this)
{
  return "colormatrix";
}

uint64_t CI::ColorMatrixNode::may_be_extended_range(CI::ColorMatrixNode *this, const double (*a2)[4])
{
  if (CI::ColorMatrixNode::is_rrra((CI::ColorMatrixNode *)((char *)this + 56), a2))
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 256))(*((_QWORD *)this + 5));
  else
    return 1;
}

uint64_t CI::ColorMatrixNode::output_is_rg(CI::ColorMatrixNode *this)
{
  return 0;
}

uint64_t CI::ColorMatrixNode::output_is_r(CI::ColorMatrixNode *this)
{
  return 0;
}

uint64_t CI::ColorMatrixNode::output_is_luma(CI::ColorMatrixNode *this)
{
  uint64_t result;
  const double (*v3)[4];

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 264))(*((_QWORD *)this + 5));
  if ((_DWORD)result)
    return CI::ColorMatrixNode::is_rrra((CI::ColorMatrixNode *)((char *)this + 56), v3);
  return result;
}

uint64_t CI::ColorMatrixNode::output_depth(CI::ColorMatrixNode *this)
{
  if ((*(int (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5)) < 1)
    return 0;
  else
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5));
}

uint64_t `non-virtual thunk to'CI::ColorMatrixNode::type(CI::ColorMatrixNode *this)
{
  return 33;
}

void `non-virtual thunk to'CI::ColorMatrixNode::~ColorMatrixNode(CI::ColorMatrixNode *this)
{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBB50;
  v1 = (CI::ColorMatrixNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[31]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[31]));
  CI::NodeWithChild::~NodeWithChild(v1);
}

{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBB50;
  v1 = (CI::ColorMatrixNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[31]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[31]));
  CI::NodeWithChild::~NodeWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::InstanceCounted<(CI::Type)33>::type()
{
  return 33;
}

_QWORD *CI::InstanceCounted<(CI::Type)33>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBB50;
  do
    v1 = __ldaxr(&dword_1ECF872F0[31]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[31]));
  return result;
}

void CI::InstanceCounted<(CI::Type)33>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBB50;
  do
    v1 = __ldaxr(&dword_1ECF872F0[31]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[31]));
  JUMPOUT(0x194025AACLL);
}

double cikernel::_ci_colormatrix_rrra(float a1)
{
  double v1;

  *(float *)&v1 = a1;
  *((float *)&v1 + 1) = a1;
  return v1;
}

double cikernel::_ci_colormatrixdiag(float32x4_t a1, float32x4_t a2)
{
  double result;

  *(_QWORD *)&result = vmulq_f32(a1, a2).u64[0];
  return result;
}

double cikernel::_ci_colormatrixdiag4(float32x4_t a1, float32x4_t a2)
{
  double result;

  *(_QWORD *)&result = vmulq_f32(a1, a2).u64[0];
  return result;
}

double cikernel::_ci_colormatrix3x1(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2;
  double result;

  v2 = vmulq_f32(a1, a2);
  *(_QWORD *)&result = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))), 0).u64[0];
  return result;
}

double cikernel::_ci_colormatrix3x3(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  double result;

  *(_QWORD *)&result = vaddq_f32(vmulq_laneq_f32(a4, a1, 2), vaddq_f32(vmulq_n_f32(a2, a1.f32[0]), vmulq_lane_f32(a3, *(float32x2_t *)a1.f32, 1))).u64[0];
  return result;
}

void CI::f4_s_f3_f3_f3(_QWORD *a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  double (*v11)(_QWORD *, __n128, __n128, __n128, __n128);
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __int128 v18;

  v10 = a1[6];
  v11 = (double (*)(_QWORD *, __n128, __n128, __n128, __n128))a1[3];
  v12 = *(_DWORD *)(v10 + 16);
  v13 = *(_QWORD *)(v10 + 8);
  v14 = *(_QWORD *)(v10 + 32);
  v15 = *(_QWORD *)(v10 + 56);
  v16 = *(_QWORD *)(v10 + 80);
  if (*((_BYTE *)a1 + 64))
    a1 = CI::setDC((CI *)(a3 + 16 * *(_QWORD *)(v10 + 104)), a2);
  v17 = (__n128 *)(a3 + 16 * v13);
  if (v12 != 5)
    v17 = (__n128 *)((char *)a2 + 64 * v13);
  *(double *)&v18 = v11(a1, *v17, *((__n128 *)a2 + 4 * v14), *((__n128 *)a2 + 4 * v15), *((__n128 *)a2 + 4 * v16));
  *(_OWORD *)(a3 + 16 * a7) = v18;
}

double cikernel::_ci_colormatrix3x4(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  double result;

  v4 = vaddq_f32(vmulq_n_f32(a2, a1.f32[0]), vmulq_lane_f32(a3, *(float32x2_t *)a1.f32, 1));
  v5 = (float32x4_t)vuzp2q_s32(vuzp2q_s32((int32x4_t)a2, (int32x4_t)a3), (int32x4_t)a2);
  v5.i32[2] = a4.i32[3];
  *(_QWORD *)&result = vaddq_f32(vmulq_laneq_f32(v5, a1, 3), vaddq_f32(vmulq_laneq_f32(a4, a1, 2), v4)).u64[0];
  return result;
}

double cikernel::_ci_colormatrix(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  float32x4_t v6;
  float32x4_t v7;
  double result;

  v6 = vmulq_n_f32(a1, 1.0 / fmaxf(a1.f32[3], 0.00001));
  v7 = vaddq_f32(a6, vaddq_f32(vmulq_laneq_f32(a5, a1, 3), vaddq_f32(vmulq_laneq_f32(a4, v6, 2), vaddq_f32(vmulq_lane_f32(a3, *(float32x2_t *)v6.f32, 1), vmulq_n_f32(a2, v6.f32[0])))));
  *(_QWORD *)&result = vmulq_laneq_f32(v7, v7, 3).u64[0];
  return result;
}

void CI::f4_s_f4_f4_f4_f4_f4(uint64_t a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  double (*v10)(__n128, __n128, __n128, __n128, __n128, __n128);
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __n128 *v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  __n128 *v27;
  __n128 *v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  int v32;
  double (*v33)(__n128, __n128, __n128, __n128, __n128, __n128);
  uint64_t v34;

  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(double (**)(__n128, __n128, __n128, __n128, __n128, __n128))(a1 + 24);
  v11 = *(_DWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v9 + 8);
  v13 = *(_DWORD *)(v9 + 40);
  v14 = *(_QWORD *)(v9 + 32);
  v15 = *(_DWORD *)(v9 + 64);
  v16 = *(_QWORD *)(v9 + 56);
  v17 = *(_DWORD *)(v9 + 88);
  v18 = *(_QWORD *)(v9 + 80);
  v19 = *(_DWORD *)(v9 + 112);
  v20 = *(_QWORD *)(v9 + 104);
  v21 = *(_DWORD *)(v9 + 136);
  v22 = *(_QWORD *)(v9 + 128);
  if (*(_BYTE *)(a1 + 64))
  {
    v33 = *(double (**)(__n128, __n128, __n128, __n128, __n128, __n128))(a1 + 24);
    v34 = *(_QWORD *)(v9 + 32);
    v31 = *(_QWORD *)(v9 + 8);
    v32 = *(_DWORD *)(v9 + 88);
    v30 = *(_DWORD *)(v9 + 136);
    CI::setDC((CI *)(a3 + 16 * *(_QWORD *)(v9 + 152)), a2);
    v21 = v30;
    v17 = v32;
    v10 = v33;
    v14 = v34;
    v12 = v31;
  }
  v23 = (__n128 *)(a3 + 16 * v22);
  if (v21 != 5)
    v23 = (__n128 *)((char *)a2 + 64 * v22);
  v24 = (__n128 *)(a3 + 16 * v20);
  if (v19 != 5)
    v24 = (__n128 *)((char *)a2 + 64 * v20);
  v25 = (__n128 *)(a3 + 16 * v18);
  if (v17 != 5)
    v25 = (__n128 *)((char *)a2 + 64 * v18);
  v26 = (__n128 *)(a3 + 16 * v16);
  if (v15 != 5)
    v26 = (__n128 *)((char *)a2 + 64 * v16);
  v27 = (__n128 *)(a3 + 16 * v14);
  if (v13 != 5)
    v27 = (__n128 *)((char *)a2 + 64 * v14);
  v28 = (__n128 *)(a3 + 16 * v12);
  if (v11 != 5)
    v28 = (__n128 *)((char *)a2 + 64 * v12);
  *(double *)&v29 = v10(*v28, *v27, *v26, *v25, *v24, *v23);
  *(_OWORD *)(a3 + 16 * a7) = v29;
}

void ___ZN2CIL15name_matrix_3x3EPA4_Kd_block_invoke()
{
  unint64_t v0;

  v0 = 0xFFFFFFFFFFFFFAF0;
  do
  {
    get_rgb_to_ycc_matrix(*(_DWORD *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1296), *((unsigned __int8 *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1300), 0, (double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1384), (uint64_t)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1312, (uint64_t)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1336, (uint64_t)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1360);
    get_ycc_to_rgb_bias_matrix(*(_DWORD *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1296), *((unsigned __int8 *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1300), 0, (double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1416), (double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1440), (double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1464), (double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1488));
    v0 += 216;
  }
  while (v0);
}

void ___ZN2CIL15name_matrix_3x4EPA4_Kd_block_invoke()
{
  int *v0;
  uint64_t v1;

  v0 = &CI::name_matrix_3x4(double const(*)[4])::common;
  v1 = 24;
  do
  {
    get_rgb_to_ycc_matrix(*v0, *((unsigned __int8 *)v0 + 4), v0[2], (double *)v0 + 12, (uint64_t)(v0 + 6), (uint64_t)(v0 + 12), (uint64_t)(v0 + 18));
    get_ycc_to_rgb_bias_matrix(*v0, *((unsigned __int8 *)v0 + 4), v0[2], (double *)v0 + 16, (double *)v0 + 19, (double *)v0 + 22, (double *)v0 + 25);
    v0 += 56;
    --v1;
  }
  while (v1);
}

BOOL CI::CropNode::is_identity(CI::CropNode *this)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGRect v11;
  CGRect v12;
  CGRect v13;
  CGRect v14;

  CI::Node::roi((CGRect ***)this);
  if (CGRectIsInfinite(v11))
    return 0;
  v12 = CGRectInset(*(CGRect *)((char *)this + 56), -0.01, -0.01);
  x = v12.origin.x;
  y = v12.origin.y;
  width = v12.size.width;
  height = v12.size.height;
  CI::Node::roi((CGRect ***)this);
  v14.origin.x = v7;
  v14.origin.y = v8;
  v14.size.width = v9;
  v14.size.height = v10;
  v13.origin.x = x;
  v13.origin.y = y;
  v13.size.width = width;
  v13.size.height = height;
  return CGRectContainsRect(v13, v14);
}

uint64_t CI::CropNode::append_to_tree(CI::CropNode *this, CI::Node *a2, CGRect a3)
{
  char v3;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  uint64_t v13;
  __int128 v14;
  double v15;
  double v16;
  double v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CI::Node *v22;
  unsigned int v23;
  double v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  CI::CropNode *v31;
  BOOL v32;
  CI::Node *v33;
  unsigned int v34;
  __int128 v35;
  unsigned int v36;
  double v37[6];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;

  v3 = (char)a2;
  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  if (CGRectIsInfinite(a3))
  {
LABEL_2:
    if (this)
      return CI::Object::ref((uint64_t)this);
    return 0;
  }
  else
  {
    while (1)
    {
      v46.origin.x = (*(double (**)(CI::CropNode *))(*(_QWORD *)this + 160))(this);
      v46.origin.y = v10;
      v46.size.width = v11;
      v46.size.height = v12;
      v41.origin.x = x;
      v41.origin.y = y;
      v41.size.width = width;
      v41.size.height = height;
      if (!CGRectIntersectsRect(v41, v46))
      {
        v13 = operator new();
        CI::FillNode::FillNode((CI::FillNode *)v13);
        return v13;
      }
      if ((*(unsigned int (**)(CI::CropNode *))(*(_QWORD *)this + 16))(this) == 34)
        break;
      if ((*(unsigned int (**)(CI::CropNode *))(*(_QWORD *)this + 16))(this) != 30
        || (v47.origin.x = x,
            v47.origin.y = y,
            v47.size.width = width,
            v47.size.height = height,
            !CGRectContainsRect(*(CGRect *)((char *)this + 56), v47)))
      {
        if ((*(unsigned int (**)(CI::CropNode *))(*(_QWORD *)this + 16))(this) == 28 && (v3 & 1) != 0)
        {
          v14 = *(_OWORD *)((char *)this + 72);
          v38 = *(_OWORD *)((char *)this + 56);
          v39 = v14;
          v40 = *(_OWORD *)((char *)this + 88);
          CI::Affine::inverse((CI::Affine *)&v38, v37);
          if (fabs(*((double *)&v38 + 1)) >= 0.0001 || (v15 = *(double *)&v39, fabs(*(double *)&v39) >= 0.0001))
          {
            v16 = *(double *)&v38;
            if (fabs(*(double *)&v38) < 0.0001)
            {
              v17 = *((double *)&v39 + 1);
              if (fabs(*((double *)&v39 + 1)) < 0.0001)
              {
                v15 = *(double *)&v39;
                goto LABEL_22;
              }
            }
          }
          else
          {
            v16 = *(double *)&v38;
            v17 = *((double *)&v39 + 1);
LABEL_22:
            if (fabs(fabs(v16 * v17 - v15 * *((double *)&v38 + 1)) + -1.0) < 0.01)
            {
              v44.origin.x = x;
              v44.origin.y = y;
              v44.size.width = width;
              v44.size.height = height;
              v24 = CI::Affine::applyToRect((CI::Affine *)v37, v44);
              v26 = v25;
              v28 = v27;
              v30 = v29;
              v31 = (CI::CropNode *)(*(uint64_t (**)(CI::CropNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
              v45.origin.x = v24;
              v45.origin.y = v26;
              v45.size.width = v28;
              v45.size.height = v30;
              v33 = (CI::Node *)CI::CropNode::append_to_tree(v31, 0, v45, v32);
              v13 = operator new();
              *((_QWORD *)CI::NodeWithChild::NodeWithChild((CI::NodeWithChild *)v13, v33) + 6) = off_1E2EBBA60;
              do
                v34 = __ldaxr(&dword_1ECF872F0[26]);
              while (__stlxr(v34 + 1, &dword_1ECF872F0[26]));
              *(_QWORD *)v13 = &off_1E2EB80D8;
              *(_QWORD *)(v13 + 48) = &unk_1E2EB8280;
              v35 = v39;
              *(_OWORD *)(v13 + 56) = v38;
              *(_OWORD *)(v13 + 72) = v35;
              *(_OWORD *)(v13 + 88) = v40;
              if (v33)
                CI::Object::unref(v33);
              return v13;
            }
          }
        }
        v13 = operator new();
        *((_QWORD *)CI::NodeWithChild::NodeWithChild((CI::NodeWithChild *)v13, this) + 6) = off_1E2EBBB78;
        do
          v36 = __ldaxr(&dword_1ECF872F0[32]);
        while (__stlxr(v36 + 1, &dword_1ECF872F0[32]));
        *(_QWORD *)v13 = &off_1E2EBF1C0;
        *(_QWORD *)(v13 + 48) = &unk_1E2EBF370;
        *(CGFloat *)(v13 + 56) = x;
        *(CGFloat *)(v13 + 64) = y;
        *(CGFloat *)(v13 + 72) = width;
        *(CGFloat *)(v13 + 80) = height;
        return v13;
      }
      this = (CI::CropNode *)(*(uint64_t (**)(CI::CropNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
      v42.origin.x = x;
      v42.origin.y = y;
      v42.size.width = width;
      v42.size.height = height;
      v3 = 0;
      if (CGRectIsInfinite(v42))
        goto LABEL_2;
    }
    v48.origin.x = x;
    v48.origin.y = y;
    v48.size.width = width;
    v48.size.height = height;
    v43 = CGRectIntersection(*(CGRect *)((char *)this + 56), v48);
    v18 = v43.origin.x;
    v19 = v43.origin.y;
    v20 = v43.size.width;
    v21 = v43.size.height;
    v13 = operator new();
    v22 = (CI::Node *)(*(uint64_t (**)(CI::CropNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    CI::NodeWithChild::NodeWithChild((CI::NodeWithChild *)v13, v22);
    *(_QWORD *)(v13 + 48) = off_1E2EBBB78;
    do
      v23 = __ldaxr(&dword_1ECF872F0[32]);
    while (__stlxr(v23 + 1, &dword_1ECF872F0[32]));
    *(_QWORD *)v13 = &off_1E2EBF1C0;
    *(_QWORD *)(v13 + 48) = &unk_1E2EBF370;
    *(CGFloat *)(v13 + 56) = v18;
    *(CGFloat *)(v13 + 64) = v19;
    *(CGFloat *)(v13 + 72) = v20;
    *(CGFloat *)(v13 + 80) = v21;
  }
  return v13;
}

uint64_t CI::CropNode::convert_to_kernel_node(CI::CropNode *this, CI::Context *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CI::Vector *v7;
  __n128 v8;
  float v9;
  float v10;
  float v11;
  CI::SerialObjectPtrArray *v12;
  uint64_t v13;

  v3 = *((double *)this + 7);
  v4 = *((double *)this + 8);
  v5 = v3 + *((double *)this + 9);
  v6 = v4 + *((double *)this + 10);
  v7 = (CI::Vector *)operator new();
  v8.n128_f64[0] = 0.5 - v3;
  v8.n128_f32[0] = 0.5 - v3;
  v9 = v5 + 0.5;
  v10 = 0.5 - v4;
  v11 = v6 + 0.5;
  CI::Vector::Vector(v7, v8, v9, v10, v11);
  v12 = (CI::SerialObjectPtrArray *)operator new();
  CI::SerialObjectPtrArray::SerialObjectPtrArray(v12, *((CI::Object **)this + 5), v7);
  CI::Object::unref(v7);
  v13 = operator new();
  (*(void (**)(CI::CropNode *))(*(_QWORD *)this + 160))(this);
  return CI::ColorKernelNode::ColorKernelNode(v13, &CI::_ci_crop, v12, &__block_literal_global_94, 0, 0);
}

void CI::CropNode::~CropNode(CI::CropNode *this)
{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBB78;
  do
    v1 = __ldaxr(&dword_1ECF872F0[32]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[32]));
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBB78;
  do
    v1 = __ldaxr(&dword_1ECF872F0[32]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[32]));
  CI::NodeWithChild::~NodeWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::CropNode::type(CI::CropNode *this)
{
  return 34;
}

uint64_t CI::CropNode::shape_for_graphviz(CI::CropNode *this)
{
  return 2;
}

uint64_t CI::CropNode::color_for_graphviz(CI::CropNode *this)
{
  return 3;
}

double CI::CropNode::roi_of_child(CI::CropNode *this, CGRect a2)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectIntersection(a2, *(CGRect *)((char *)this + 56));
  return result;
}

uint64_t CI::CropNode::add_args_to_hash(CI::CropNode *this, CI::XXHashHelper *a2)
{
  return XXH64_update((uint64_t)a2, (char *)this + 56, 0x20uLL);
}

const char *CI::CropNode::short_name(CI::CropNode *this)
{
  return "crop";
}

size_t CI::CropNode::print_for_graph_core(uint64_t a1, FILE *__stream)
{
  __sFILE *v4;

  fwrite("crop ", 5uLL, 1uLL, __stream);
  return CI::fprintf(__stream, v4, *(CGRect *)(a1 + 56));
}

double CI::CropNode::extent(CI::CropNode *this)
{
  double result;
  CGRect v3;

  v3.origin.x = (*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 160))(*((_QWORD *)this + 5));
  *(_QWORD *)&result = (unint64_t)CGRectIntersection(v3, *(CGRect *)((char *)this + 56));
  return result;
}

uint64_t CI::CropNode::extent_unclamped(CI::CropNode *this)
{
  return (*(uint64_t (**)(CI::CropNode *))(*(_QWORD *)this + 160))(this);
}

uint64_t CI::CropNode::is_position_invariant(CI::CropNode *this)
{
  return 0;
}

uint64_t CI::CropNode::is_rgb_invariant(CI::CropNode *this, unsigned int a2)
{
  return (a2 >> 1) & 1;
}

uint64_t CI::CropNode::may_be_extended_range(CI::CropNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 256))(*((_QWORD *)this + 5));
}

uint64_t CI::CropNode::alpha_one(CI::CropNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::CropNode *))(*(_QWORD *)this + 408))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 264))(*((_QWORD *)this + 5));
  return result;
}

uint64_t CI::CropNode::output_is_rg(CI::CropNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::CropNode *))(*(_QWORD *)this + 408))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 272))(*((_QWORD *)this + 5));
  return result;
}

uint64_t CI::CropNode::output_is_r(CI::CropNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::CropNode *))(*(_QWORD *)this + 408))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 280))(*((_QWORD *)this + 5));
  return result;
}

uint64_t CI::CropNode::output_is_luma(CI::CropNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::CropNode *))(*(_QWORD *)this + 408))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 288))(*((_QWORD *)this + 5));
  return result;
}

uint64_t CI::CropNode::output_depth(CI::CropNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::CropNode *))(*(_QWORD *)this + 408))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5));
  return result;
}

uint64_t CI::CropNode::output_format(CI::CropNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::CropNode *))(*(_QWORD *)this + 408))(this);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 312))(*((_QWORD *)this + 5));
  return result;
}

BOOL CI::CropNode::is_simple(CI::CropNode *this)
{
  _BOOL8 result;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGRect v7;
  CGRect v8;
  CGRect v9;
  CGRect v10;

  v7.origin.x = (*(double (**)(_QWORD))(**((_QWORD **)this + 5) + 160))(*((_QWORD *)this + 5));
  result = CGRectContainsRect(v7, *(CGRect *)((char *)this + 56));
  if ((_DWORD)result)
  {
    v3 = *((double *)this + 7);
    v4 = *((double *)this + 8);
    v5 = *((double *)this + 9);
    v6 = *((double *)this + 10);
    v8.origin.x = v3;
    v8.origin.y = v4;
    v8.size.width = v5;
    v8.size.height = v6;
    v10 = CGRectIntegral(v8);
    v9.origin.x = v3;
    v9.origin.y = v4;
    v9.size.width = v5;
    v9.size.height = v6;
    return CGRectEqualToRect(v9, v10);
  }
  return result;
}

uint64_t `non-virtual thunk to'CI::CropNode::type(CI::CropNode *this)
{
  return 34;
}

void `non-virtual thunk to'CI::CropNode::~CropNode(CI::CropNode *this)
{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBB78;
  v1 = (CI::CropNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[32]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[32]));
  CI::NodeWithChild::~NodeWithChild(v1);
}

{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBB78;
  v1 = (CI::CropNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[32]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[32]));
  CI::NodeWithChild::~NodeWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::InstanceCounted<(CI::Type)34>::type()
{
  return 34;
}

_QWORD *CI::InstanceCounted<(CI::Type)34>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBB78;
  do
    v1 = __ldaxr(&dword_1ECF872F0[32]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[32]));
  return result;
}

void CI::InstanceCounted<(CI::Type)34>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBB78;
  do
    v1 = __ldaxr(&dword_1ECF872F0[32]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[32]));
  JUMPOUT(0x194025AACLL);
}

double cikernel::_ci_crop(CI *a1, float32x4_t a2, float32x4_t a3)
{
  int32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v11;
  double result;
  uint64_t v15;

  v15 = *(_QWORD *)CI::getDC(a1);
  v3.i64[0] = v15;
  *(double *)v4.i64 = vec2::get_xxy((vec2 *)&v15, v3);
  v5 = vaddq_f32(a3, vmulq_f32(v4, (float32x4_t)xmmword_19249C940));
  __asm { FMOV            V1.4S, #1.0 }
  v11 = vminnmq_f32(vmaxnmq_f32(vminnmq_f32(v5, (float32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 4uLL)), (float32x4_t)0), _Q1);
  *(_QWORD *)&result = vmulq_n_f32(a2, vmulq_laneq_f32(v11, v11, 2).f32[0]).u64[0];
  return result;
}

BOOL CI::CurveNode::is_inverse(CI::CurveNode *this, double a2, long double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v16;

  if (fabs(a5) < 1.0e-10)
    return 0;
  v16 = pow(a3, -a2);
  return vabdd_f64(1.0 / a2, *((double *)this + 7)) < 0.00001
      && vabdd_f64(v16, *((double *)this + 8)) < 0.00001
      && vabdd_f64(-(a7 * v16), *((double *)this + 9)) < 0.00001
      && vabdd_f64(1.0 / a5, *((double *)this + 10)) < 0.00001
      && vabdd_f64(a8 + a5 * a6, *((double *)this + 11)) < 0.00001
      && vabdd_f64(-a4 / a3, *((double *)this + 12)) < 0.00001
      && vabdd_f64(-a8 / a5, *((double *)this + 13)) < 0.00001;
}

CI::CurveNode *CI::CurveNode::append_to_tree(CI::CurveNode *this, CI::Node *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  CI::CurveNode *v10;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;

  v10 = this;
  if (a3 != 1.0)
  {
    if ((_DWORD)a2 && (*(unsigned int (**)(CI::CurveNode *))(*(_QWORD *)this + 232))(this))
    {
      v18 = 0;
      v19 = (uint64_t *)v10;
      while (1)
      {
        v20 = v19;
        if (((*(uint64_t (**)(uint64_t *))(*v19 + 176))(v19) & 1) != 0)
          break;
        v19 = (uint64_t *)(*(uint64_t (**)(uint64_t *, _QWORD))(*v19 + 48))(v19, 0);
        v18 = v20;
        if (((*(uint64_t (**)(uint64_t *))(*v19 + 232))(v19) & 1) == 0)
          goto LABEL_11;
      }
      v20 = v18;
    }
    else
    {
      v20 = 0;
      v19 = (uint64_t *)v10;
    }
LABEL_11:
    if ((*(unsigned int (**)(uint64_t *))(*v19 + 16))(v19) == 37)
    {
      if ((*(unsigned int (**)(uint64_t *, double, double, double, double, double, double, double))(*v19 + 408))(v19, a3, a4, a5, a6, a7, a8, a9))
      {
        v21 = v19[5];
        if (v21)
          CI::Object::ref(v19[5]);
        if (v20)
          goto LABEL_16;
        return (CI::CurveNode *)v21;
      }
      v21 = operator new();
      *((_QWORD *)CI::NodeWithChild::NodeWithChild((CI::NodeWithChild *)v21, (CI::Node *)v19) + 6) = off_1E2EBBBF0;
      do
        v23 = __ldaxr(&dword_1ECF872F0[35]);
      while (__stlxr(v23 + 1, &dword_1ECF872F0[35]));
    }
    else
    {
      v21 = operator new();
      *((_QWORD *)CI::NodeWithChild::NodeWithChild((CI::NodeWithChild *)v21, (CI::Node *)v19) + 6) = off_1E2EBBBF0;
      do
        v22 = __ldaxr(&dword_1ECF872F0[35]);
      while (__stlxr(v22 + 1, &dword_1ECF872F0[35]));
    }
    *(_QWORD *)v21 = &off_1E2EBFD98;
    *(_QWORD *)(v21 + 48) = &unk_1E2EBFF50;
    *(double *)(v21 + 56) = a3;
    *(double *)(v21 + 64) = a4;
    *(double *)(v21 + 72) = a5;
    *(double *)(v21 + 80) = a6;
    *(double *)(v21 + 88) = a7;
    *(double *)(v21 + 96) = a8;
    *(double *)(v21 + 104) = a9;
    if (v20)
    {
LABEL_16:
      (*(void (**)(uint64_t *, uint64_t, _QWORD))(*v20 + 200))(v20, v21, 0);
      if (v21)
        CI::Object::unref((CI::Object *)v21);
      if (v10)
        CI::Object::ref((uint64_t)v10);
      return v10;
    }
    return (CI::CurveNode *)v21;
  }
  if (this)
    return (CI::CurveNode *)CI::Object::ref((uint64_t)this);
  return v10;
}

uint64_t CI::CurveNode::convert_to_kernel_node(CI::CurveNode *this, CI::Context *a2)
{
  CI::Vector *v3;
  __n128 v4;
  float v5;
  float v6;
  float v7;
  CI::Vector *v8;
  __n64 v9;
  float v10;
  float v11;
  CI::SerialObjectPtrArray *v12;
  uint64_t v13;

  v3 = (CI::Vector *)operator new();
  v4.n128_u64[0] = *((_QWORD *)this + 7);
  v4.n128_f32[0] = v4.n128_f64[0];
  v5 = *((double *)this + 8);
  v6 = *((double *)this + 9);
  v7 = *((double *)this + 10);
  CI::Vector::Vector(v3, v4, v5, v6, v7);
  v8 = (CI::Vector *)operator new();
  v9.n64_u64[0] = *(_QWORD *)((unint64_t)this + 88);
  v9.n64_f32[0] = v9.n64_f64[0];
  v10 = *((double *)this + 12);
  v11 = *((double *)this + 13);
  CI::Vector::Vector(v8, v9, v10, v11);
  v12 = (CI::SerialObjectPtrArray *)operator new();
  CI::SerialObjectPtrArray::SerialObjectPtrArray(v12, *((CI::Object **)this + 5), v3, v8);
  CI::Object::unref(v3);
  CI::Object::unref(v8);
  v13 = operator new();
  (*(void (**)(_QWORD))(**((_QWORD **)this + 5) + 160))(*((_QWORD *)this + 5));
  return CI::ColorKernelNode::ColorKernelNode(v13, &CI::_ci_curv, v12, 0, 0, 0);
}

uint64_t CI::CurveNode::print_for_graph_core(double *a1, FILE *a2)
{
  int v4;
  double v5;

  v4 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 416))(a1);
  v5 = a1[7];
  if (v4)
    return fprintf(a2, "curve%cgamma=%g", v5);
  else
    return fprintf(a2, "curve%cgamma=%g%ca=%g b=%g c=%g d=%g e=%g f=%g", v5);
}

void CI::CurveNode::~CurveNode(CI::CurveNode *this)
{
  unsigned int v1;

  *(_QWORD *)this = &off_1E2EBFD98;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 6) = off_1E2EBBBF0;
  do
    v1 = __ldaxr(&dword_1ECF872F0[35]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[35]));
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  unsigned int v1;

  *(_QWORD *)this = &off_1E2EBFD98;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 6) = off_1E2EBBBF0;
  do
    v1 = __ldaxr(&dword_1ECF872F0[35]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[35]));
  CI::NodeWithChild::~NodeWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::CurveNode::type(CI::CurveNode *this)
{
  return 37;
}

uint64_t CI::CurveNode::shape_for_graphviz(CI::CurveNode *this)
{
  return 2;
}

uint64_t CI::CurveNode::color_for_graphviz(CI::CurveNode *this)
{
  return 4;
}

uint64_t CI::CurveNode::add_args_to_hash(CI::CurveNode *this, CI::XXHashHelper *a2)
{
  uint64_t __src;

  __src = *((_QWORD *)this + 7);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  __src = *((_QWORD *)this + 8);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  __src = *((_QWORD *)this + 9);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  __src = *((_QWORD *)this + 10);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  __src = *((_QWORD *)this + 11);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  __src = *((_QWORD *)this + 12);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  __src = *((_QWORD *)this + 13);
  return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
}

const char *CI::CurveNode::short_name(CI::CurveNode *this)
{
  return "curve";
}

BOOL CI::CurveNode::is_identity(CI::CurveNode *this)
{
  return *((double *)this + 7) == 1.0
      && *((double *)this + 8) == 1.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 12) == 0.0
      && *((double *)this + 13) == 0.0;
}

uint64_t CI::CurveNode::may_be_extended_range(CI::CurveNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 256))(*((_QWORD *)this + 5));
}

uint64_t CI::CurveNode::output_depth(CI::CurveNode *this)
{
  if ((*(int (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5)) < 1)
    return 0;
  else
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5));
}

uint64_t CI::CurveNode::code_complexity(CI::CurveNode *this)
{
  return 2;
}

BOOL CI::CurveNode::is_just_gamma(CI::CurveNode *this)
{
  return *((double *)this + 8) == 1.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 0.0
      && *((double *)this + 12) == 0.0
      && *((double *)this + 13) == 0.0;
}

uint64_t `non-virtual thunk to'CI::CurveNode::type(CI::CurveNode *this)
{
  return 37;
}

void `non-virtual thunk to'CI::CurveNode::~CurveNode(CI::CurveNode *this)
{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = off_1E2EBBBF0;
  *((_QWORD *)this - 6) = &off_1E2EBFD98;
  v1 = (CI::CurveNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[35]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[35]));
  CI::NodeWithChild::~NodeWithChild(v1);
}

{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = off_1E2EBBBF0;
  *((_QWORD *)this - 6) = &off_1E2EBFD98;
  v1 = (CI::CurveNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[35]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[35]));
  CI::NodeWithChild::~NodeWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::InstanceCounted<(CI::Type)37>::type()
{
  return 37;
}

_QWORD *CI::InstanceCounted<(CI::Type)37>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBBF0;
  do
    v1 = __ldaxr(&dword_1ECF872F0[35]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[35]));
  return result;
}

void CI::InstanceCounted<(CI::Type)37>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBBF0;
  do
    v1 = __ldaxr(&dword_1ECF872F0[35]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[35]));
  JUMPOUT(0x194025AACLL);
}

float32x4_t cikernel::_ci_curv(float32x4_t a1, int32x4_t a2, int32x4_t a3)
{
  float32x4_t v3;
  simd_float4 v4;
  simd_float4 v5;
  float32x4_t v11;
  float32x4_t result;

  v3 = vaddq_f32((float32x4_t)vdupq_laneq_s32(a2, 2), vmulq_lane_f32(a1, *(float32x2_t *)a2.i8, 1));
  v3.i32[3] = 0;
  v4 = (simd_float4)vmaxnmq_f32(v3, (float32x4_t)0);
  v5 = (simd_float4)vdupq_lane_s32(*(int32x2_t *)a2.i8, 0);
  v4.i32[3] = 0;
  v5.i32[3] = 0;
  result = (float32x4_t)_simd_pow_f4(v4, v5);
  __asm { FMOV            V3.4S, #1.0 }
  v11 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.i8, 0), a1), (int8x16_t)0, (int8x16_t)_Q3);
  result.i64[0] = vmlaq_f32(vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(a3, 2), vmulq_laneq_f32(a1, (float32x4_t)a2, 3)), vsubq_f32(_Q3, v11)), v11, vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.i8, 1), result)).u64[0];
  result.i32[3] = a1.i32[3];
  return result;
}

void CI::f4_s_f4_f3(_QWORD *a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  double (*v11)(_QWORD *, __n128, __n128, __n128);
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  __int128 v19;

  v10 = a1[6];
  v11 = (double (*)(_QWORD *, __n128, __n128, __n128))a1[3];
  v12 = *(_DWORD *)(v10 + 16);
  v13 = *(_QWORD *)(v10 + 8);
  v14 = *(_DWORD *)(v10 + 40);
  v15 = *(_QWORD *)(v10 + 32);
  v16 = *(_QWORD *)(v10 + 56);
  if (*((_BYTE *)a1 + 64))
    a1 = CI::setDC((CI *)(a3 + 16 * *(_QWORD *)(v10 + 80)), a2);
  v17 = (__n128 *)(a3 + 16 * v15);
  if (v14 != 5)
    v17 = (__n128 *)((char *)a2 + 64 * v15);
  v18 = (__n128 *)(a3 + 16 * v13);
  if (v12 != 5)
    v18 = (__n128 *)((char *)a2 + 64 * v13);
  *(double *)&v19 = v11(a1, *v18, *v17, *((__n128 *)a2 + 4 * v16));
  *(_OWORD *)(a3 + 16 * a7) = v19;
}

CI::Node *CI::FillNode::FillNode(CI::FillNode *this)
{
  CI::Node *result;
  unsigned int v2;

  result = CI::Node::Node(this);
  *((_QWORD *)result + 5) = off_1E2EBBBA0;
  do
    v2 = __ldaxr(&dword_1ECF872F0[33]);
  while (__stlxr(v2 + 1, &dword_1ECF872F0[33]));
  *(_QWORD *)result = &off_1E2EBF398;
  *((_QWORD *)result + 5) = &unk_1E2EBF550;
  *((_QWORD *)result + 6) = 0;
  return result;
}

CI::FillNode *CI::FillNode::FillNode(CI::FillNode *this, CI::Color *a2)
{
  unsigned int v4;

  *((_QWORD *)CI::Node::Node(this) + 5) = off_1E2EBBBA0;
  do
    v4 = __ldaxr(&dword_1ECF872F0[33]);
  while (__stlxr(v4 + 1, &dword_1ECF872F0[33]));
  *(_QWORD *)this = &off_1E2EBF398;
  *((_QWORD *)this + 5) = &unk_1E2EBF550;
  CI::Object::ref((uint64_t)a2);
  *((_QWORD *)this + 6) = a2;
  return this;
}

void CI::FillNode::~FillNode(CI::FillNode *this)
{
  CI::Object *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_1E2EBF398;
  *((_QWORD *)this + 5) = &unk_1E2EBF550;
  v2 = (CI::Object *)*((_QWORD *)this + 6);
  if (v2)
    CI::Object::unref(v2);
  *((_QWORD *)this + 5) = off_1E2EBBBA0;
  *((_QWORD *)this + 6) = 0;
  do
    v3 = __ldaxr(&dword_1ECF872F0[33]);
  while (__stlxr(v3 - 1, &dword_1ECF872F0[33]));
  CI::Node::~Node(this);
}

{
  CI::FillNode::~FillNode(this);
  JUMPOUT(0x194025AACLL);
}

void `non-virtual thunk to'CI::FillNode::~FillNode(CI::FillNode *this)
{
  CI::FillNode::~FillNode((CI::FillNode *)((char *)this - 40));
}

{
  CI::FillNode::~FillNode((CI::FillNode *)((char *)this - 40));
  JUMPOUT(0x194025AACLL);
}

size_t CI::FillNode::print_for_graph_core(uint64_t a1, FILE *__stream)
{
  uint64_t v4;

  fwrite("fill ", 5uLL, 1uLL, __stream);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    return (*(uint64_t (**)(uint64_t, FILE *, _QWORD))(*(_QWORD *)v4 + 32))(v4, __stream, 0);
  else
    return fwrite("clear", 5uLL, 1uLL, __stream);
}

uint64_t CI::FillNode::convert_to_kernel_node(CI::FillNode *this, CGColorSpace **a2)
{
  CI::Color *v2;
  CI::Vector *v3;
  CI::Vector *v4;
  __n128 v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  v2 = (CI::Color *)*((_QWORD *)this + 6);
  if (v2)
  {
    CI::Color::vector_in_workingspace(v2, a2);
    v4 = v3;
  }
  else
  {
    v4 = (CI::Vector *)operator new();
    v5.n128_u32[0] = 0;
    CI::Vector::Vector(v4, v5, 0.0, 0.0, 0.0);
  }
  v6 = operator new();
  v7 = (_DWORD *)v6;
  *(_QWORD *)v6 = 0xA00000000;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_QWORD *)(v6 + 96) = 0;
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = v4;
  if (v4)
  {
    CI::Object::ref((uint64_t)v4);
    *v7 = 1;
    CI::Object::unref(v4);
  }
  else
  {
    *(_DWORD *)v6 = 1;
  }
  v8 = operator new();
  return CI::ColorKernelNode::ColorKernelNode(v8, &CI::_ci_fill, v7, 0, 0, 0);
}

uint64_t CI::FillNode::type(CI::FillNode *this)
{
  return 35;
}

uint64_t CI::FillNode::child_count(CI::FillNode *this)
{
  return 0;
}

uint64_t CI::FillNode::child(CI::FillNode *this)
{
  return 0;
}

uint64_t CI::FillNode::shape_for_graphviz(CI::FillNode *this)
{
  return 1;
}

uint64_t CI::FillNode::color_for_graphviz(CI::FillNode *this)
{
  return 4;
}

void CI::FillNode::add_args_to_hash(CI::FillNode *this, CI::XXHashHelper *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    XXH64_update((uint64_t)a2, (char *)(v2 + 24), 0x10uLL);
    CI::XXHashHelper::add(a2, *(CGColorSpaceRef *)(v2 + 40));
  }
}

const char *CI::FillNode::short_name(CI::FillNode *this)
{
  return "fill";
}

uint64_t CI::FillNode::extent_unclamped(CI::FillNode *this)
{
  return (*(uint64_t (**)(CI::FillNode *))(*(_QWORD *)this + 160))(this);
}

uint64_t CI::FillNode::child_type_is_image(CI::FillNode *this)
{
  return 0;
}

uint64_t CI::FillNode::may_be_extended_range(CI::FillNode *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

BOOL CI::FillNode::alpha_one(CI::FillNode *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  return v1 && *(float *)(v1 + 36) == 1.0;
}

uint64_t CI::FillNode::output_is_rg(CI::FillNode *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1 && *(float *)(v1 + 32) == 0.0)
    return (*(uint64_t (**)(CI::FillNode *))(*(_QWORD *)this + 264))(this);
  else
    return 0;
}

uint64_t CI::FillNode::output_is_r(CI::FillNode *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1 && *(float *)(v1 + 28) == 0.0)
    return (*(uint64_t (**)(CI::FillNode *))(*(_QWORD *)this + 272))(this);
  else
    return 0;
}

uint64_t CI::FillNode::output_is_luma(CI::FillNode *this)
{
  float *v1;
  float v2;

  v1 = (float *)*((_QWORD *)this + 6);
  if (v1 && (v2 = v1[7], v1[6] == v2) && v2 == v1[8])
    return (*(uint64_t (**)(CI::FillNode *))(*(_QWORD *)this + 264))(this);
  else
    return 0;
}

uint64_t CI::FillNode::output_depth(CI::FillNode *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t CI::FillNode::color(CI::FillNode *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t CI::FillNode::colorIsEmpty(CI::FillNode *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  else
    return 1;
}

uint64_t `non-virtual thunk to'CI::FillNode::type(CI::FillNode *this)
{
  return 35;
}

uint64_t CI::InstanceCounted<(CI::Type)35>::type()
{
  return 35;
}

_QWORD *CI::InstanceCounted<(CI::Type)35>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBBA0;
  do
    v1 = __ldaxr(&dword_1ECF872F0[33]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[33]));
  return result;
}

void CI::InstanceCounted<(CI::Type)35>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBBA0;
  do
    v1 = __ldaxr(&dword_1ECF872F0[33]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[33]));
  JUMPOUT(0x194025AACLL);
}

CI::GammaNode *CI::GammaNode::append_to_tree(CI::GammaNode *this, CI::Node *a2, double a3)
{
  double v3;
  CI::GammaNode *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  CI::NodeWithChild *v11;
  CI::NodeWithChild *v12;
  unsigned int v13;
  CI::NodeWithChild *v14;
  unsigned int v15;
  CI::NodeWithChild *v16;
  unsigned int v17;

  v3 = a3;
  v4 = this;
  if (a3 != 1.0)
  {
    if ((_DWORD)a2 && (*(unsigned int (**)(CI::GammaNode *))(*(_QWORD *)this + 232))(this))
    {
      v6 = 0;
      v7 = (uint64_t)v4;
      while (1)
      {
        v8 = v7;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7) & 1) != 0)
          break;
        v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 48))(v7, 0);
        v6 = v8;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 232))(v7) & 1) == 0)
          goto LABEL_11;
      }
      v8 = v6;
    }
    else
    {
      v8 = 0;
      v7 = (uint64_t)v4;
    }
LABEL_11:
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    v10 = *(_QWORD *)v7;
    if (v9 == 35)
    {
      if (!(*(unsigned int (**)(uint64_t))(v10 + 416))(v7))
      {
        v11 = (CI::NodeWithChild *)operator new();
        v12 = CI::NodeWithChild::NodeWithChild(v11, (CI::Node *)v7);
        *((_QWORD *)v12 + 6) = off_1E2EBBBC8;
        do
          v13 = __ldaxr(&dword_1ECF872F0[34]);
        while (__stlxr(v13 + 1, &dword_1ECF872F0[34]));
        goto LABEL_31;
      }
LABEL_19:
      CI::Object::ref(v7);
LABEL_20:
      if (!v8)
        return (CI::GammaNode *)v7;
LABEL_21:
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 200))(v8, v7, 0);
      if (v7)
        CI::Object::unref((CI::Object *)v7);
      if (v4)
        CI::Object::ref((uint64_t)v4);
      return v4;
    }
    if ((*(unsigned int (**)(uint64_t))(v10 + 16))(v7) == 36)
    {
      v3 = *(double *)(v7 + 56) * v3;
      *(double *)(v7 + 56) = v3;
      if (fabs(v3 + -1.0) < 0.0001)
      {
        v7 = *(_QWORD *)(v7 + 40);
        if (!v7)
          goto LABEL_20;
        goto LABEL_19;
      }
      v16 = (CI::NodeWithChild *)operator new();
      v12 = CI::NodeWithChild::NodeWithChild(v16, *(CI::Node **)(v7 + 40));
      *((_QWORD *)v12 + 6) = off_1E2EBBBC8;
      do
        v17 = __ldaxr(&dword_1ECF872F0[34]);
      while (__stlxr(v17 + 1, &dword_1ECF872F0[34]));
    }
    else
    {
      v14 = (CI::NodeWithChild *)operator new();
      v12 = CI::NodeWithChild::NodeWithChild(v14, (CI::Node *)v7);
      *((_QWORD *)v12 + 6) = off_1E2EBBBC8;
      do
        v15 = __ldaxr(&dword_1ECF872F0[34]);
      while (__stlxr(v15 + 1, &dword_1ECF872F0[34]));
    }
LABEL_31:
    *(_QWORD *)v12 = &off_1E2EC0398;
    *((_QWORD *)v12 + 6) = &unk_1E2EC0540;
    *((double *)v12 + 7) = v3;
    v7 = (uint64_t)v12;
    if (!v8)
      return (CI::GammaNode *)v7;
    goto LABEL_21;
  }
  if (this)
    return (CI::GammaNode *)CI::Object::ref((uint64_t)this);
  return v4;
}

uint64_t CI::GammaNode::add_to_kernel_hash(CI::GammaNode *this, CI::XXHashHelper *a2)
{
  double v3;
  char *v4;
  const char *v5;

  v3 = *((double *)this + 7);
  if (v3 == 2.0)
  {
    v4 = "builtin_sqr";
  }
  else
  {
    v5 = "builtin_gamma";
    if (v3 == 0.5)
      v5 = "builtin_sqrt";
    if (v3 == 4.0)
      v4 = "builtin_pow4";
    else
      v4 = (char *)v5;
  }
  return CI::XXHashHelper::addstr((uint64_t)a2, v4);
}

uint64_t CI::GammaNode::convert_to_kernel_node(CI::GammaNode *this, CI::Context *a2)
{
  double v3;
  void (***v4)(CI::ColorKernel *__hidden);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CI::Object *v9;
  float v10;

  v3 = *((double *)this + 7);
  if (v3 == 2.0)
  {
    v4 = &CI::_ci_sqr;
  }
  else if (v3 == 4.0)
  {
    v4 = &CI::_ci_pow4;
  }
  else
  {
    if (v3 != 0.5)
    {
      v9 = (CI::Object *)operator new();
      v10 = *((double *)this + 7);
      CI::Vector::Vector((uint64_t)v9, v10);
      v5 = operator new();
      CI::SerialObjectPtrArray::SerialObjectPtrArray((CI::SerialObjectPtrArray *)v5, *((CI::Object **)this + 5), v9);
      CI::Object::unref(v9);
      v4 = &CI::_ci_gamma;
      goto LABEL_7;
    }
    v4 = &CI::_ci_sqrt;
  }
  v5 = operator new();
  v6 = *((_QWORD *)this + 5);
  *(_QWORD *)v5 = 0xA00000001;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_QWORD *)(v5 + 96) = 0;
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = v6;
  if (v6)
    CI::Object::ref(v6);
LABEL_7:
  v7 = operator new();
  (*(void (**)(_QWORD))(**((_QWORD **)this + 5) + 160))(*((_QWORD *)this + 5));
  return CI::ColorKernelNode::ColorKernelNode(v7, v4, v5, 0, 0, 0);
}

size_t CI::GammaNode::print_for_graph_core(uint64_t a1, FILE *__stream)
{
  double v3;
  const char *v4;
  size_t v5;

  v3 = *(double *)(a1 + 56);
  if (v3 == 2.0)
  {
    v4 = "sqr";
    v5 = 3;
    return fwrite(v4, v5, 1uLL, __stream);
  }
  if (v3 == 0.5)
  {
    v4 = "sqrt";
LABEL_7:
    v5 = 4;
    return fwrite(v4, v5, 1uLL, __stream);
  }
  if (v3 == 4.0)
  {
    v4 = "pow4";
    goto LABEL_7;
  }
  return fprintf(__stream, "gamma %g", *(double *)(a1 + 56));
}

void CI::GammaNode::~GammaNode(CI::GammaNode *this)
{
  unsigned int v1;

  *(_QWORD *)this = &off_1E2EC0398;
  *((_QWORD *)this + 6) = off_1E2EBBBC8;
  *((_QWORD *)this + 7) = 0;
  do
    v1 = __ldaxr(&dword_1ECF872F0[34]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[34]));
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  unsigned int v1;

  *(_QWORD *)this = &off_1E2EC0398;
  *((_QWORD *)this + 6) = off_1E2EBBBC8;
  *((_QWORD *)this + 7) = 0;
  do
    v1 = __ldaxr(&dword_1ECF872F0[34]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[34]));
  CI::NodeWithChild::~NodeWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::GammaNode::type(CI::GammaNode *this)
{
  return 36;
}

uint64_t CI::GammaNode::shape_for_graphviz(CI::GammaNode *this)
{
  return 2;
}

uint64_t CI::GammaNode::color_for_graphviz(CI::GammaNode *this)
{
  return 4;
}

uint64_t CI::GammaNode::add_args_to_hash(CI::GammaNode *this, CI::XXHashHelper *a2)
{
  uint64_t __src;

  __src = *((_QWORD *)this + 7);
  return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
}

const char *CI::GammaNode::short_name(CI::GammaNode *this)
{
  double v1;
  const char *v3;

  v1 = *((double *)this + 7);
  if (v1 == 2.0)
    return "sqr";
  v3 = "gamma";
  if (v1 == 4.0)
    v3 = "pow4";
  if (v1 == 0.5)
    return "sqrt";
  else
    return v3;
}

BOOL CI::GammaNode::is_identity(CI::GammaNode *this)
{
  return fabs(*((double *)this + 7) + -1.0) < 0.0001;
}

uint64_t CI::GammaNode::may_be_extended_range(CI::GammaNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 256))(*((_QWORD *)this + 5));
}

uint64_t CI::GammaNode::output_depth(CI::GammaNode *this)
{
  if ((*(int (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5)) < 1)
    return 0;
  else
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5));
}

uint64_t `non-virtual thunk to'CI::GammaNode::type(CI::GammaNode *this)
{
  return 36;
}

void `non-virtual thunk to'CI::GammaNode::~GammaNode(CI::GammaNode *this)
{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBBC8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this - 6) = &off_1E2EC0398;
  v1 = (CI::GammaNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[34]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[34]));
  CI::NodeWithChild::~NodeWithChild(v1);
}

{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBBC8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this - 6) = &off_1E2EC0398;
  v1 = (CI::GammaNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[34]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[34]));
  CI::NodeWithChild::~NodeWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::InstanceCounted<(CI::Type)36>::type()
{
  return 36;
}

_QWORD *CI::InstanceCounted<(CI::Type)36>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBBC8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[34]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[34]));
  return result;
}

void CI::InstanceCounted<(CI::Type)36>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBBC8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[34]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[34]));
  JUMPOUT(0x194025AACLL);
}

double cikernel::_ci_sqr(float32x4_t a1)
{
  float32x4_t v2;
  double result;

  a1.i32[3] = 0;
  v2 = vmaxnmq_f32(a1, (float32x4_t)0);
  *(_QWORD *)&result = vmulq_f32(v2, v2).u64[0];
  return result;
}

double cikernel::_ci_pow4(float32x4_t a1)
{
  float32x4_t v2;
  double result;

  a1.i32[3] = 0;
  v2 = vmaxnmq_f32(a1, (float32x4_t)0);
  *(_QWORD *)&result = vmulq_f32(v2, vmulq_f32(v2, vmulq_f32(v2, v2))).u64[0];
  return result;
}

double cikernel::_ci_sqrt(float32x4_t a1)
{
  float32x4_t v2;
  double result;

  a1.i32[3] = 0;
  v2 = vmaxnmq_f32(a1, (float32x4_t)0);
  v2.i32[3] = 0;
  *(_QWORD *)&result = vsqrtq_f32(v2).u64[0];
  return result;
}

__n128 cikernel::_ci_gamma(float32x4_t a1, int32x2_t a2)
{
  float32x4_t v2;
  simd_float4 v3;
  simd_float4 v4;
  __n128 result;
  unsigned __int32 v6;

  v6 = a1.u32[3];
  v2 = a1;
  v2.i32[3] = 0;
  v3 = (simd_float4)vmaxnmq_f32(v2, (float32x4_t)0);
  v3.i32[3] = 0;
  v4 = (simd_float4)vdupq_lane_s32(a2, 0);
  v4.i32[3] = 0;
  result.n128_u64[0] = _simd_pow_f4(v3, v4).u64[0];
  result.n128_u32[3] = v6;
  return result;
}

uint64_t CI::ColorKernelNode::ColorKernelNode(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, char a5, int a6, double a7, double a8, double a9, double a10)
{
  unsigned int v20;

  *((_QWORD *)CI::Node::Node((CI::Node *)a1) + 5) = off_1E2EBBDA8;
  do
    v20 = __ldaxr(&dword_1ECF872F0[47]);
  while (__stlxr(v20 + 1, &dword_1ECF872F0[47]));
  *(_QWORD *)a1 = &off_1E2EBB2C0;
  *(_QWORD *)(a1 + 40) = &unk_1E2EBB468;
  if (a2 && *(_BYTE *)(a2 + 12))
    a2 = CI::Object::ref(a2);
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  *(double *)(a1 + 64) = a7;
  *(double *)(a1 + 72) = a8;
  *(double *)(a1 + 80) = a9;
  *(double *)(a1 + 88) = a10;
  *(_QWORD *)(a1 + 96) = _Block_copy(a4);
  *(_BYTE *)(a1 + 104) = a5;
  if (a6)
  {
    if ((CI::format_has_alpha(a6) & 1) == 0)
      *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)(a1 + 112) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 112) = 0;
    a6 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 120);
  }
  *(_DWORD *)(a1 + 120) = a6;
  return a1;
}

void CI::ColorKernelNode::~ColorKernelNode(CI::ColorKernelNode *this)
{
  CI::Object *v2;
  CI::SerialObjectPtrArray *v3;
  unsigned int v4;

  *(_QWORD *)this = &off_1E2EBB2C0;
  *((_QWORD *)this + 5) = &unk_1E2EBB468;
  v2 = (CI::Object *)*((_QWORD *)this + 6);
  if (v2 && *((_BYTE *)v2 + 12))
    CI::Object::unref(v2);
  *((_QWORD *)this + 6) = 0;
  v3 = (CI::SerialObjectPtrArray *)*((_QWORD *)this + 7);
  if (v3)
  {
    CI::SerialObjectPtrArray::~SerialObjectPtrArray(v3);
    MEMORY[0x194025AAC]();
  }
  *((_QWORD *)this + 7) = 0;
  _Block_release(*((const void **)this + 12));
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 5) = off_1E2EBBDA8;
  do
    v4 = __ldaxr(&dword_1ECF872F0[47]);
  while (__stlxr(v4 - 1, &dword_1ECF872F0[47]));
  CI::Node::~Node(this);
}

{
  CI::ColorKernelNode::~ColorKernelNode(this);
  JUMPOUT(0x194025AACLL);
}

void `non-virtual thunk to'CI::ColorKernelNode::~ColorKernelNode(CI::ColorKernelNode *this)
{
  CI::ColorKernelNode::~ColorKernelNode((CI::ColorKernelNode *)((char *)this - 40));
}

{
  CI::ColorKernelNode::~ColorKernelNode((CI::ColorKernelNode *)((char *)this - 40));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::ColorKernelNode::kernel_argument_type(CI::ColorKernelNode *this, signed int a2)
{
  uint64_t v4;
  uint64_t type;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *((_QWORD *)this + 6);
  if (*(_BYTE *)(v4 + 12))
  {
    type = CI::KernelArguments::get_type((CI::KernelArguments *)(v4 + 144), a2);
  }
  else
  {
    if (*(_DWORD *)(v4 + 20) <= a2)
      return 0;
    type = *(unsigned int *)(*(_QWORD *)(v4 + 72) + 4 * a2);
  }
  if ((_DWORD)type == 15 || (_DWORD)type == 8)
  {
    v7 = *((_QWORD *)this + 7);
    if (a2 > 9)
      v8 = (_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * (a2 - 10));
    else
      v8 = (_QWORD *)(v7 + 8 * a2 + 24);
    v9 = *v8;
    if ((*(int (**)(_QWORD))(*(_QWORD *)*v8 + 16))(*v8) >= 27
      && (*(int (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9) < 53)
    {
      return 1;
    }
  }
  return type;
}

uint64_t CI::ColorKernelNode::get_argument(CI::ColorKernelNode *this, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = 0;
  if ((a2 & 0x80000000) == 0)
  {
    v4 = *((_QWORD *)this + 7);
    if (v4)
    {
      if (*(_DWORD *)v4 <= (signed int)a2)
      {
        return 0;
      }
      else
      {
        if (a2 > 9)
          v5 = *(_QWORD *)(v4 + 16) + 8 * (a2 - 10);
        else
          v5 = v4 + 8 * a2 + 24;
        return *(_QWORD *)v5;
      }
    }
  }
  return result;
}

BOOL CI::ColorKernelNode::child_type_is_image(CI::ColorKernelNode *this, int a2)
{
  uint64_t v2;
  unint64_t v5;
  int v6;
  uint64_t i;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int type;

  v2 = **((unsigned int **)this + 7);
  if ((int)v2 < 1)
    return 0;
  v5 = 0;
  v6 = 0;
  for (i = 24; ; i += 8)
  {
    v8 = *((_QWORD *)this + 7);
    if (v5 > 9)
      v9 = (_QWORD *)(*(_QWORD *)(v8 + 16) + 8 * (v5 - 10));
    else
      v9 = (_QWORD *)(v8 + i);
    v10 = *v9;
    if ((*(int (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9) < 27
      || (*(int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) > 52)
    {
      goto LABEL_10;
    }
    if (v6 == a2)
      break;
    ++v6;
LABEL_10:
    if (v2 == ++v5)
      return 0;
  }
  v12 = *((_QWORD *)this + 6);
  if (*(_BYTE *)(v12 + 12))
    v13 = CI::KernelArguments::count((CI::KernelArguments *)(v12 + 144));
  else
    v13 = *(_DWORD *)(v12 + 20);
  if (v13 <= (int)v5)
    return 1;
  v14 = *((_QWORD *)this + 6);
  if (*(_BYTE *)(v14 + 12))
  {
    type = CI::KernelArguments::get_type((CI::KernelArguments *)(v14 + 144), v5);
  }
  else if (*(_DWORD *)(v14 + 20) <= (int)v5)
  {
    type = 0;
  }
  else
  {
    type = *(_DWORD *)(*(_QWORD *)(v14 + 72) + 4 * v5);
  }
  return type != 4;
}

uint64_t CI::ColorKernelNode::child_count(CI::ColorKernelNode *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = **((unsigned int **)this + 7);
  if ((int)v1 < 1)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 24;
  do
  {
    v6 = *((_QWORD *)this + 7);
    if (v3 > 9)
      v7 = (_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * (v3 - 10));
    else
      v7 = (_QWORD *)(v6 + v5);
    v8 = *v7;
    if ((*(int (**)(_QWORD))(*(_QWORD *)*v7 + 16))(*v7) >= 27)
    {
      if ((*(int (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) >= 53)
        v4 = v4;
      else
        v4 = (v4 + 1);
    }
    ++v3;
    v5 += 8;
  }
  while (v1 != v3);
  return v4;
}

uint64_t CI::ColorKernelNode::child(CI::ColorKernelNode *this, int a2)
{
  uint64_t v2;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = **((unsigned int **)this + 7);
  if ((int)v2 >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 24;
    do
    {
      v8 = *((_QWORD *)this + 7);
      if (v5 > 9)
        v9 = (_QWORD *)(*(_QWORD *)(v8 + 16) + 8 * (v5 - 10));
      else
        v9 = (_QWORD *)(v8 + v7);
      v10 = *v9;
      if ((*(int (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9) >= 27
        && (*(int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) <= 52)
      {
        if (v6 == a2)
          return v10;
        ++v6;
      }
      ++v5;
      v7 += 8;
    }
    while (v2 != v5);
  }
  return 0;
}

uint64_t CI::ColorKernelNode::alpha_one(CI::ColorKernelNode *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 104))
    return 1;
  if (!*(_BYTE *)(*((_QWORD *)this + 6) + 162))
    return 0;
  result = (*(uint64_t (**)(CI::ColorKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
  return result;
}

BOOL CI::ColorKernelNode::output_is_rg(CI::ColorKernelNode *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  CGRect v6;

  v2 = *((_DWORD *)this + 30);
  result = 1;
  if (!v2 || (CI::format_is_rg(v2) & 1) == 0)
  {
    if (!*(_BYTE *)(*((_QWORD *)this + 6) + 160))
      return 0;
    if (!(*(uint64_t (**)(CI::ColorKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0))
      return 0;
    v3 = (*(uint64_t (**)(CI::ColorKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    v6.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v3 + 160))(v3);
    if (!CGRectIsInfinite(v6))
      return 0;
    v4 = (*(uint64_t (**)(CI::ColorKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 272))(v4) & 1) == 0)
      return 0;
  }
  return result;
}

BOOL CI::ColorKernelNode::output_is_r(CI::ColorKernelNode *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  CGRect v6;

  v2 = *((_DWORD *)this + 30);
  result = 1;
  if (!v2 || (CI::format_is_r(v2) & 1) == 0)
  {
    if (!*(_BYTE *)(*((_QWORD *)this + 6) + 160))
      return 0;
    if (!(*(uint64_t (**)(CI::ColorKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0))
      return 0;
    v3 = (*(uint64_t (**)(CI::ColorKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    v6.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v3 + 160))(v3);
    if (!CGRectIsInfinite(v6))
      return 0;
    v4 = (*(uint64_t (**)(CI::ColorKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 280))(v4) & 1) == 0)
      return 0;
  }
  return result;
}

BOOL CI::ColorKernelNode::output_is_luma(CI::ColorKernelNode *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  CGRect v6;

  v2 = *((_DWORD *)this + 30);
  result = 1;
  if (!v2 || (CI::format_is_r(v2) & 1) == 0)
  {
    if (!*(_BYTE *)(*((_QWORD *)this + 6) + 160))
      return 0;
    if (!(*(uint64_t (**)(CI::ColorKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0))
      return 0;
    v3 = (*(uint64_t (**)(CI::ColorKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    v6.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v3 + 160))(v3);
    if (!CGRectIsInfinite(v6))
      return 0;
    v4 = (*(uint64_t (**)(CI::ColorKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 288))(v4) & 1) == 0)
      return 0;
  }
  return result;
}

uint64_t CI::ColorKernelNode::output_depth(CI::ColorKernelNode *this)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 30);
  if (v2)
  {
    if (CI::format_is_deep(v2))
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    if (!*(_BYTE *)(*((_QWORD *)this + 6) + 163))
      return 0;
    result = (*(uint64_t (**)(CI::ColorKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    if (!result)
      return result;
    v4 = (*(uint64_t (**)(CI::ColorKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    if ((*(int (**)(uint64_t))(*(_QWORD *)v4 + 304))(v4) >= 1)
    {
      v5 = (*(uint64_t (**)(CI::ColorKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 304))(v5);
    }
    else
    {
      return 0;
    }
  }
}

CI::FillNode *CI::ColorKernelNode::append_to_tree(CI::Kernel *a1, CI::SerialObjectPtrArray *a2, const void *a3, int a4, char a5, int a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  int v20;
  BOOL v21;
  CI::FillNode *v22;
  uint64_t v23;
  _BOOL4 IsEmpty;
  _BOOL4 v25;
  int image_argument;
  int v27;
  CI::FillNode **v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  __int128 v36;
  _BOOL4 isOrientationWithIntegralTranslation;
  CI::SerialObjectPtrArray *v38;
  int i;
  int v40;
  int v41;
  CI::AffineNode **v42;
  CI::Object *v43;
  CI::Object *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  CI::AffineNode *v49;
  CI::Object *v50;
  CI::Object *v51;
  CI::Object *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;

  v20 = CI::Kernel::num_image_arguments(a1);
  v21 = (*(unsigned int (**)(CI::Kernel *))(*(_QWORD *)a1 + 16))(a1) == 62 && v20 == 2;
  if (v21 && *((_DWORD *)a1 + 43))
  {
    v23 = *((_QWORD *)a2 + 3);
    v22 = (CI::FillNode *)*((_QWORD *)a2 + 4);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23) == 35)
    {
      v70.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v23 + 160))(v23);
      IsEmpty = CGRectIsEmpty(v70);
    }
    else
    {
      IsEmpty = 0;
    }
    if ((*(unsigned int (**)(CI::FillNode *))(*(_QWORD *)v22 + 16))(v22) == 35)
    {
      v71.origin.x = (*(double (**)(CI::FillNode *))(*(_QWORD *)v22 + 160))(v22);
      v25 = CGRectIsEmpty(v71);
      if (!IsEmpty)
        goto LABEL_16;
    }
    else
    {
      v25 = 0;
      if (!IsEmpty)
      {
LABEL_16:
        if (!v25 || (*((_BYTE *)a1 + 172) & 8) == 0)
        {
          if (IsEmpty && (*((_BYTE *)a1 + 172) & 1) != 0)
          {
            CI::Object::ref((uint64_t)v22);
LABEL_62:
            CI::SerialObjectPtrArray::~SerialObjectPtrArray(a2);
            MEMORY[0x194025AAC]();
            return v22;
          }
          if (v25 && (*((_BYTE *)a1 + 172) & 2) != 0)
          {
            CI::Object::ref(v23);
            CI::SerialObjectPtrArray::~SerialObjectPtrArray(a2);
            MEMORY[0x194025AAC]();
            return (CI::FillNode *)v23;
          }
          goto LABEL_22;
        }
LABEL_47:
        CI::SerialObjectPtrArray::~SerialObjectPtrArray(a2);
        MEMORY[0x194025AAC]();
        v22 = (CI::FillNode *)operator new();
        CI::FillNode::FillNode(v22);
        return v22;
      }
    }
    if (*((_BYTE *)a1 + 162) || (*((_BYTE *)a1 + 172) & 4) != 0)
      goto LABEL_47;
    goto LABEL_16;
  }
LABEL_22:
  if (a4)
  {
    if (*((_BYTE *)a1 + 165) && v20 == 1)
    {
      image_argument = CI::Kernel::index_of_first_image_argument(a1);
      v27 = image_argument;
      if (image_argument > 9)
        v28 = (CI::FillNode **)(*((_QWORD *)a2 + 2) + 8 * (image_argument - 10));
      else
        v28 = (CI::FillNode **)((char *)a2 + 8 * image_argument + 24);
      v22 = *v28;
      if ((*(unsigned int (**)(CI::FillNode *))(*(_QWORD *)*v28 + 232))(*v28))
      {
        if (((*(uint64_t (**)(CI::FillNode *))(*(_QWORD *)v22 + 176))(v22) & 1) == 0)
        {
          v51 = v22;
          while (1)
          {
            v50 = v51;
            v51 = (CI::Object *)(*(uint64_t (**)(CI::Object *, _QWORD))(*(_QWORD *)v51 + 48))(v51, 0);
            if (((*(uint64_t (**)(CI::Object *))(*(_QWORD *)v51 + 232))(v51) & 1) == 0)
              goto LABEL_59;
            if (((*(uint64_t (**)(CI::Object *))(*(_QWORD *)v51 + 176))(v51) & 1) != 0)
              goto LABEL_58;
          }
        }
        v50 = 0;
        v51 = v22;
LABEL_58:
        if (v50)
        {
LABEL_59:
          CI::Object::ref((uint64_t)v22);
          CI::SerialObjectPtrArray::replace(a2, v51, v27);
          v53 = (CI::Object *)operator new();
          v54 = (*(double (**)(CI::Object *))(*(_QWORD *)v51 + 160))(v51);
          CI::ColorKernelNode::ColorKernelNode((uint64_t)v53, (uint64_t)a1, (uint64_t)a2, a3, 0, a6, v54, v55, v56, v57);
          (*(void (**)(CI::Object *, CI::Object *, _QWORD))(*(_QWORD *)v50 + 200))(v50, v53, 0);
          CI::Object::unref(v53);
          return v22;
        }
      }
      v58 = operator new();
      v59 = (*(double (**)(CI::FillNode *))(*(_QWORD *)v22 + 160))(v22);
      CI::ColorKernelNode::ColorKernelNode(v58, (uint64_t)a1, (uint64_t)a2, a3, a5, a6, v59, v60, v61, v62);
      return (CI::FillNode *)v58;
    }
    if (*((_BYTE *)a1 + 165) && v20 >= 2)
    {
      v63 = a6;
      v29 = 0;
      v30 = 0;
      v67 = 0x3FF0000000000000uLL;
      *(_QWORD *)&v68 = 0;
      *((_QWORD *)&v68 + 1) = 0x3FF0000000000000;
      v31 = 1;
      v32 = 1;
      v69 = 0uLL;
      do
      {
        v33 = CI::Kernel::index_of_nth_image_argument(a1, v29);
        if (v33 > 9)
          v34 = (_QWORD *)(*((_QWORD *)a2 + 2) + 8 * (v33 - 10));
        else
          v34 = (_QWORD *)((char *)a2 + 8 * v33 + 24);
        v35 = *v34;
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v34 + 16))(*v34) != 28)
          v31 = ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35) == 35) & v31;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35) == 28)
        {
          v36 = *(_OWORD *)(v35 + 72);
          v64 = *(_OWORD *)(v35 + 56);
          v65 = v36;
          v66 = *(_OWORD *)(v35 + 88);
          isOrientationWithIntegralTranslation = CI::Affine::isOrientationWithIntegralTranslation((CI::Affine *)&v64);
          if ((v30 & 1) == 0)
          {
            v67 = v64;
            v68 = v65;
            v69 = v66;
          }
          v32 &= isOrientationWithIntegralTranslation;
          v30 = 1;
        }
        ++v29;
      }
      while (v20 != v29);
      if ((v31 & v30 & v32 & 1) != 0)
      {
        CI::Affine::inverse((CI::Affine *)&v67, (double *)&v64);
        v38 = (CI::SerialObjectPtrArray *)operator new();
        CI::SerialObjectPtrArray::SerialObjectPtrArray(v38, a2);
        for (i = 0; i != v20; ++i)
        {
          v40 = CI::Kernel::index_of_nth_image_argument(a1, i);
          v41 = v40;
          if (v40 > 9)
            v42 = (CI::AffineNode **)(*((_QWORD *)a2 + 2) + 8 * (v40 - 10));
          else
            v42 = (CI::AffineNode **)((char *)a2 + 8 * v40 + 24);
          v43 = (CI::Object *)CI::AffineNode::append_to_tree(*v42, (CI::Node *)&v64, 0);
          CI::SerialObjectPtrArray::replace(v38, v43, v41);
          CI::Object::unref(v43);
        }
        v44 = (CI::Object *)operator new();
        v72.origin.x = a7;
        v72.origin.y = a8;
        v72.size.width = a9;
        v72.size.height = a10;
        v45 = CI::Affine::applyToRect((CI::Affine *)&v64, v72);
        v49 = (CI::AffineNode *)CI::ColorKernelNode::ColorKernelNode((uint64_t)v44, (uint64_t)a1, (uint64_t)v38, a3, 0, v63, v45, v46, v47, v48);
        v22 = (CI::FillNode *)CI::AffineNode::append_to_tree(v49, (CI::Node *)&v67, 0);
        CI::Object::unref(v44);
        goto LABEL_62;
      }
      a6 = v63;
    }
  }
  v22 = (CI::FillNode *)operator new();
  CI::ColorKernelNode::ColorKernelNode((uint64_t)v22, (uint64_t)a1, (uint64_t)a2, a3, a5, a6, a7, a8, a9, a10);
  return v22;
}

void CI::SerialObjectPtrArray::replace(CI::SerialObjectPtrArray *this, CI::Object *a2, int a3)
{
  char *v6;
  CI::Object *v7;
  _QWORD *v8;
  CI::Object *v9;
  uint64_t v10;
  uint64_t v11;
  CI::Object *v12;

  if (a2)
    CI::Object::ref((uint64_t)a2);
  if (a3 > 9)
  {
    v10 = *((_QWORD *)this + 2);
    v11 = (a3 - 10);
    v12 = *(CI::Object **)(v10 + 8 * v11);
    if (v12)
    {
      CI::Object::unref(v12);
      v10 = *((_QWORD *)this + 2);
    }
    v8 = (_QWORD *)(v10 + 8 * v11);
  }
  else
  {
    v6 = (char *)this + 8 * a3;
    v9 = (CI::Object *)*((_QWORD *)v6 + 3);
    v8 = v6 + 24;
    v7 = v9;
    if (v9)
      CI::Object::unref(v7);
  }
  *v8 = a2;
}

CI::SerialObjectPtrArray *CI::SerialObjectPtrArray::SerialObjectPtrArray(CI::SerialObjectPtrArray *this, const CI::SerialObjectPtrArray *a2)
{
  CI::SerialObjectPtrArray *v4;
  _QWORD v6[5];

  v4 = CI::SerialObjectPtrArray::SerialObjectPtrArray(this, *(_DWORD *)a2);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN2CI20SerialObjectPtrArrayC1ERKS0__block_invoke;
  v6[3] = &__block_descriptor_tmp_14_2;
  v6[4] = v4;
  CI::SerialObjectPtrArray::for_each((int *)a2, (uint64_t)v6);
  return this;
}

void CI::ColorKernelNode::set_child(CI::ColorKernelNode *this, CI::Node *a2, int a3)
{
  uint64_t v4;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if ((a3 & 0x80000000) == 0)
  {
    v4 = **((unsigned int **)this + 7);
    if ((int)v4 >= 1)
    {
      v7 = 0;
      v8 = 0;
      v9 = 24;
      do
      {
        v10 = *((_QWORD *)this + 7);
        if (v7 > 9)
          v11 = (_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * (v7 - 10));
        else
          v11 = (_QWORD *)(v10 + v9);
        v12 = *v11;
        if ((*(int (**)(_QWORD))(*(_QWORD *)*v11 + 16))(*v11) >= 27
          && (*(int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12) <= 52)
        {
          if (v8 == a3)
          {
            CI::SerialObjectPtrArray::replace(*((CI::SerialObjectPtrArray **)this + 7), a2, v7);
            return;
          }
          ++v8;
        }
        ++v7;
        v9 += 8;
      }
      while (v4 != v7);
    }
  }
}

uint64_t CI::ColorKernelNode::print_for_graph_core(uint64_t a1, FILE *a2, _QWORD *a3, int a4)
{
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD **v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  const char *name;
  uint64_t v17;
  const char *v18;
  int v19;
  const __CFDictionary *v20;
  int v21;
  const char *v22;
  _QWORD v24[5];
  _DWORD *v25;

  result = fprintf(a2, "colorkernel %s", *(const char **)(*(_QWORD *)(a1 + 48) + 24));
  v8 = **(unsigned int **)(a1 + 56);
  if ((int)v8 >= 1)
  {
    v9 = 0;
    v10 = 24;
    do
    {
      v11 = *(_QWORD *)(a1 + 56);
      if ((unint64_t)v9 > 9)
        v12 = (_DWORD **)(*(_QWORD *)(v11 + 16) + 8 * (v9 - 10));
      else
        v12 = (_DWORD **)(v11 + v10);
      v13 = *v12;
      if (a4)
      {
        if (v9)
          v14 = 44;
        else
          v14 = 40;
        fputc(v14, a2);
        v15 = *(_QWORD *)(a1 + 48);
        if (*(_BYTE *)(v15 + 12))
        {
          name = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v15 + 144), v9);
        }
        else if (v9 >= *(int *)(v15 + 20))
        {
          name = 0;
        }
        else
        {
          name = *(const char **)(*(_QWORD *)(v15 + 80) + 8 * v9);
        }
        fputs(name, a2);
      }
      else
      {
        v17 = *(_QWORD *)(a1 + 48);
        if (*(_BYTE *)(v17 + 12))
        {
          v18 = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v17 + 144), v9);
        }
        else if (v9 >= *(int *)(v17 + 20))
        {
          v18 = 0;
        }
        else
        {
          v18 = *(const char **)(*(_QWORD *)(v17 + 80) + 8 * v9);
        }
        fprintf(a2, "\n%s", v18);
      }
      if ((*(int (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13) < 27
        || (*(int (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13) > 52)
      {
        fputc(61, a2);
        result = (*(uint64_t (**)(_DWORD *, FILE *, _QWORD))(*(_QWORD *)v13 + 32))(v13, a2, 0);
      }
      else
      {
        if (CI_GRAPHVIZ_INTERNAL())
        {
          v19 = v13[9];
LABEL_29:
          result = fprintf(a2, "=(%d)", v19);
          goto LABEL_30;
        }
        v25 = v13;
        result = (uint64_t)std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(a3, &v25);
        if (result)
        {
          v19 = *(_DWORD *)(result + 24);
          goto LABEL_29;
        }
      }
LABEL_30:
      ++v9;
      v10 += 8;
    }
    while (v8 != v9);
  }
  if ((_DWORD)v8 && (a4 & 1) != 0)
    result = fputc(41, a2);
  if ((a4 & 1) == 0)
  {
    v20 = (const __CFDictionary *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48));
    if (v20)
    {
      v24[0] = MEMORY[0x1E0C809B0];
      v24[1] = 0x40000000;
      v24[2] = ___ZNK2CI15ColorKernelNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke;
      v24[3] = &__block_descriptor_tmp_22;
      v24[4] = a2;
      __CFDictionary::for_each(v20, v24);
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
    if ((_DWORD)result)
    {
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
      v22 = CI::name_for_format(v21);
      return fprintf(a2, "\noutputFormat=%s", v22);
    }
  }
  return result;
}

void ___ZNK2CI15ColorKernelNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke(uint64_t a1, __CFObject *a2, __CFObject *a3)
{
  __sFILE *v6;
  __sFILE *v7;

  fputc(10, *(FILE **)(a1 + 32));
  __CFObject::fprint(a2, *(FILE **)(a1 + 32), v6);
  fputc(61, *(FILE **)(a1 + 32));
  __CFObject::fprint(a3, *(FILE **)(a1 + 32), v7);
}

CFStringRef CI::ColorKernelNode::description(CI::ColorKernelNode *this)
{
  unsigned int v2;
  const char *v3;

  v2 = (*(uint64_t (**)(CI::ColorKernelNode *))(*(_QWORD *)this + 16))(this);
  v3 = CI::name_for_type(v2);
  return CFStringCreateWithFormat(0, 0, CFSTR("<CI::%s %p, %s>"), v3, this, *(_QWORD *)(*((_QWORD *)this + 6) + 24));
}

uint64_t CI::ColorKernelNode::code_complexity(CI::ColorKernelNode *this)
{
  _BYTE *v1;
  uint64_t result;

  v1 = *(_BYTE **)(*((_QWORD *)this + 6) + 32);
  if (v1)
  {
    result = 0;
    while (1)
    {
      if (*v1 == 59)
      {
        ++result;
      }
      else if (!*v1)
      {
        return result;
      }
      ++v1;
    }
  }
  return 0;
}

double CI::ColorKernelNode::roi_of_child(CI::ColorKernelNode *this, CGRect a2, uint64_t a3)
{
  double height;
  double width;
  double y;
  double x;
  uint64_t v9;
  double v10;
  uint64_t v11;
  unsigned int v12;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  if ((a3 & 0x80000000) == 0 && **((_DWORD **)this + 7) > (int)a3)
  {
    if (!(*(unsigned int (**)(CI::ColorKernelNode *, uint64_t))(*(_QWORD *)this + 192))(this, a3))
    {
      v11 = (*(uint64_t (**)(CI::ColorKernelNode *, uint64_t))(*(_QWORD *)this + 48))(this, a3);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
      if (!CI::is_image_type(v12))
        return *MEMORY[0x1E0C9D5E0];
      return (*(double (**)(uint64_t))(*(_QWORD *)v11 + 168))(v11);
    }
    v9 = *((_QWORD *)this + 12);
    if (v9)
    {
      (*(void (**)(uint64_t, uint64_t, double, double, double, double))(v9 + 16))(v9, a3, x, y, width, height);
      return v10;
    }
  }
  return x;
}

uint64_t CI::ColorKernelNode::add_args_to_hash(CI::ColorKernelNode *this, CI::XXHashHelper *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CI::XXHashHelper **v8;
  uint64_t __src;

  (*(void (**)(CI::ColorKernelNode *))(*(_QWORD *)this + 392))(this);
  v4 = **((unsigned int **)this + 7);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = 24;
    do
    {
      v7 = *((_QWORD *)this + 7);
      if (v5 > 9)
        v8 = (CI::XXHashHelper **)(*(_QWORD *)(v7 + 16) + 8 * (v5 - 10));
      else
        v8 = (CI::XXHashHelper **)(v7 + v6);
      CI::Kernel::add_argument_to_digest(a2, *v8, 0);
      ++v5;
      v6 += 8;
    }
    while (v4 != v5);
  }
  __src = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 56))(*((_QWORD *)this + 6));
  return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
}

uint64_t CI::ColorKernelNode::type(CI::ColorKernelNode *this)
{
  return 49;
}

uint64_t CI::ColorKernelNode::shape_for_graphviz(CI::ColorKernelNode *this)
{
  return 1;
}

uint64_t CI::ColorKernelNode::color_for_graphviz(CI::ColorKernelNode *this)
{
  if (*(_BYTE *)(*((_QWORD *)this + 6) + 165))
    return 4;
  else
    return 3;
}

uint64_t CI::ColorKernelNode::short_name(CI::ColorKernelNode *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 6) + 24);
}

double CI::ColorKernelNode::extent(CI::ColorKernelNode *this)
{
  return *((double *)this + 8);
}

void CI::ColorKernelNode::extent_unclamped(CI::ColorKernelNode *this)
{
  int v2;
  int v3;
  CGFloat y;
  CGFloat x;
  CGFloat height;
  CGFloat width;
  int i;
  int v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  _BOOL4 IsInfinite;
  uint64_t v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;

  v2 = CI::Kernel::num_image_arguments(*((CI::Kernel **)this + 6));
  v3 = v2;
  if (v2 < 2)
  {
    if (!v2)
      return;
  }
  else
  {
    CGRectIsInfinite(*((CGRect *)this + 2));
  }
  if (CGRectIsInfinite(*((CGRect *)this + 2)) && *(_BYTE *)(*((_QWORD *)this + 6) + 165))
  {
    x = *MEMORY[0x1E0C9D628];
    y = *(double *)(MEMORY[0x1E0C9D628] + 8);
    width = *(double *)(MEMORY[0x1E0C9D628] + 16);
    height = *(double *)(MEMORY[0x1E0C9D628] + 24);
    if (v3 >= 1)
    {
      for (i = 0; i != v3; ++i)
      {
        v9 = CI::Kernel::index_of_nth_image_argument(*((CI::Kernel **)this + 6), i);
        v10 = *((_QWORD *)this + 7);
        if (v9 > 9)
          v11 = (uint64_t **)(*(_QWORD *)(v10 + 16) + 8 * (v9 - 10));
        else
          v11 = (uint64_t **)(v10 + 8 * v9 + 24);
        v12 = *v11;
        v19.origin.x = (*(double (**)(uint64_t *))(**v11 + 160))(*v11);
        IsInfinite = CGRectIsInfinite(v19);
        v14 = *v12;
        if (IsInfinite)
        {
          (*(void (**)(uint64_t *))(v14 + 168))(v12);
        }
        else
        {
          v20.origin.x = (*(double (**)(uint64_t *))(v14 + 160))(v12);
          *(CGRect *)&v15 = CGRectInset(v20, -1.0, -1.0);
        }
        v26.origin.x = v15;
        v26.origin.y = v16;
        v26.size.width = v17;
        v26.size.height = v18;
        v21.origin.x = x;
        v21.origin.y = y;
        v21.size.width = width;
        v21.size.height = height;
        v22 = CGRectUnion(v21, v26);
        x = v22.origin.x;
        y = v22.origin.y;
        width = v22.size.width;
        height = v22.size.height;
      }
    }
    v23.origin.x = x;
    v23.origin.y = y;
    v23.size.width = width;
    v23.size.height = height;
    if (!CGRectIsNull(v23))
    {
      v24.origin.x = x;
      v24.origin.y = y;
      v24.size.width = width;
      v24.size.height = height;
      if (!CGRectIsEmpty(v24))
      {
        v25.origin.x = x;
        v25.origin.y = y;
        v25.size.width = width;
        v25.size.height = height;
        if (!CGRectIsInfinite(v25))
        {
          v27.origin.x = x;
          v27.origin.y = y;
          v27.size.width = width;
          v27.size.height = height;
          CGRectIntersection(*((CGRect *)this + 2), v27);
        }
      }
    }
  }
}

uint64_t CI::ColorKernelNode::is_warp(CI::ColorKernelNode *this)
{
  return 0;
}

uint64_t CI::ColorKernelNode::is_position_invariant(CI::ColorKernelNode *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 6) + 165);
}

uint64_t CI::ColorKernelNode::may_be_extended_range(CI::ColorKernelNode *this)
{
  return 1;
}

uint64_t CI::ColorKernelNode::output_format(CI::ColorKernelNode *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t CI::ColorKernelNode::add_to_kernel_hash(CI::ColorKernelNode *this, CI::XXHashHelper *a2)
{
  return (*(uint64_t (**)(_QWORD, CI::XXHashHelper *))(**((_QWORD **)this + 6) + 64))(*((_QWORD *)this + 6), a2);
}

uint64_t `non-virtual thunk to'CI::ColorKernelNode::type(CI::ColorKernelNode *this)
{
  return 49;
}

int *CI::SerialObjectPtrArray::for_each(int *result, uint64_t a2)
{
  int *v3;
  unint64_t v4;
  int *v5;
  int *v6;

  if (*result >= 1)
  {
    v3 = result;
    v4 = 0;
    v5 = result + 6;
    do
    {
      v6 = v5;
      if (v4 >= 0xA)
        v6 = (int *)(*((_QWORD *)v3 + 2) + 8 * (v4 - 10));
      result = (int *)(*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(a2 + 16))(a2, v4++, *(_QWORD *)v6);
      v5 += 2;
    }
    while ((uint64_t)v4 < *v3);
  }
  return result;
}

uint64_t ___ZN2CI20SerialObjectPtrArrayC1ERKS0__block_invoke(uint64_t a1, int a2, CI::Object *a3)
{
  return CI::SerialObjectPtrArray::append(*(_QWORD *)(a1 + 32), a3);
}

uint64_t CI::InstanceCounted<(CI::Type)49>::type()
{
  return 49;
}

_QWORD *CI::InstanceCounted<(CI::Type)49>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBDA8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[47]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[47]));
  return result;
}

void CI::InstanceCounted<(CI::Type)49>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBDA8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[47]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[47]));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::GeneralKernelNode::GeneralKernelNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, char a6, int a7, double a8, double a9, double a10, double a11)
{
  unsigned int v22;
  _BYTE *v23;

  *((_QWORD *)CI::Node::Node((CI::Node *)a1) + 5) = off_1E2EBBE20;
  do
    v22 = __ldaxr(&dword_1ECF872F0[49]);
  while (__stlxr(v22 + 1, &dword_1ECF872F0[49]));
  *(_QWORD *)a1 = &off_1E2EBD538;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = &unk_1E2EBD6F0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  if (a2 && *(_BYTE *)(a2 + 12))
    a2 = CI::Object::ref(a2);
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  if (a1 + 64 != a4)
    std::vector<CGRect>::__assign_with_size[abi:nn180100]<CGRect*,CGRect*>((char *)(a1 + 64), *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 5);
  *(double *)(a1 + 88) = a8;
  *(double *)(a1 + 96) = a9;
  *(double *)(a1 + 104) = a10;
  *(double *)(a1 + 112) = a11;
  *(_QWORD *)(a1 + 120) = _Block_copy(a5);
  if (a7)
  {
    *(_BYTE *)(a1 + 128) = a6;
    v23 = (_BYTE *)(a1 + 128);
    *(_DWORD *)(a1 + 132) = a7;
  }
  else
  {
    *(_BYTE *)(a1 + 128) = a6;
    v23 = (_BYTE *)(a1 + 128);
    a7 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 120);
    *(_DWORD *)(a1 + 132) = a7;
    if (!a7)
      return a1;
  }
  if ((CI::format_has_alpha(a7) & 1) == 0)
    *v23 = 1;
  return a1;
}

void CI::GeneralKernelNode::~GeneralKernelNode(CI::GeneralKernelNode *this)
{
  CI::Object *v2;
  CI::SerialObjectPtrArray *v3;
  void *v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E2EBD538;
  *((_QWORD *)this + 5) = &unk_1E2EBD6F0;
  v2 = (CI::Object *)*((_QWORD *)this + 6);
  if (v2 && *((_BYTE *)v2 + 12))
    CI::Object::unref(v2);
  v3 = (CI::SerialObjectPtrArray *)*((_QWORD *)this + 7);
  if (v3)
  {
    CI::SerialObjectPtrArray::~SerialObjectPtrArray(v3);
    MEMORY[0x194025AAC]();
  }
  _Block_release(*((const void **)this + 15));
  *((_QWORD *)this + 15) = 0;
  v4 = (void *)*((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 9) = v4;
    operator delete(v4);
  }
  *((_QWORD *)this + 5) = off_1E2EBBE20;
  do
    v5 = __ldaxr(&dword_1ECF872F0[49]);
  while (__stlxr(v5 - 1, &dword_1ECF872F0[49]));
  CI::Node::~Node(this);
}

{
  CI::GeneralKernelNode::~GeneralKernelNode(this);
  JUMPOUT(0x194025AACLL);
}

void `non-virtual thunk to'CI::GeneralKernelNode::~GeneralKernelNode(CI::GeneralKernelNode *this)
{
  CI::GeneralKernelNode::~GeneralKernelNode((CI::GeneralKernelNode *)((char *)this - 40));
}

{
  CI::GeneralKernelNode::~GeneralKernelNode((CI::GeneralKernelNode *)((char *)this - 40));
  JUMPOUT(0x194025AACLL);
}

void CI::GeneralKernelNode::release_resources(CI::GeneralKernelNode *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 15);
  if (v2)
    _Block_release(v2);
  *((_QWORD *)this + 15) = 0;
}

BOOL CI::GeneralKernelNode::alpha_one(CI::GeneralKernelNode *this)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  CGRect v5;

  result = 1;
  if (!*((_BYTE *)this + 128))
  {
    if (!*(_BYTE *)(*((_QWORD *)this + 6) + 160))
      return 0;
    if (!(*(uint64_t (**)(CI::GeneralKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0))
      return 0;
    v3 = (*(uint64_t (**)(CI::GeneralKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    v5.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v3 + 160))(v3);
    if (!CGRectIsInfinite(v5))
      return 0;
    v4 = (*(uint64_t (**)(CI::GeneralKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 264))(v4) & 1) == 0)
      return 0;
  }
  return result;
}

BOOL CI::GeneralKernelNode::output_is_rg(CI::GeneralKernelNode *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  CGRect v6;

  v2 = *((_DWORD *)this + 33);
  result = 1;
  if (!v2 || (CI::format_is_rg(v2) & 1) == 0)
  {
    if (!*(_BYTE *)(*((_QWORD *)this + 6) + 160))
      return 0;
    if (!(*(uint64_t (**)(CI::GeneralKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0))
      return 0;
    v3 = (*(uint64_t (**)(CI::GeneralKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    v6.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v3 + 160))(v3);
    if (!CGRectIsInfinite(v6))
      return 0;
    v4 = (*(uint64_t (**)(CI::GeneralKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 272))(v4) & 1) == 0)
      return 0;
  }
  return result;
}

BOOL CI::GeneralKernelNode::output_is_r(CI::GeneralKernelNode *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  CGRect v6;

  v2 = *((_DWORD *)this + 33);
  result = 1;
  if (!v2 || (CI::format_is_r(v2) & 1) == 0)
  {
    if (!*(_BYTE *)(*((_QWORD *)this + 6) + 160))
      return 0;
    if (!(*(uint64_t (**)(CI::GeneralKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0))
      return 0;
    v3 = (*(uint64_t (**)(CI::GeneralKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    v6.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v3 + 160))(v3);
    if (!CGRectIsInfinite(v6))
      return 0;
    v4 = (*(uint64_t (**)(CI::GeneralKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 280))(v4) & 1) == 0)
      return 0;
  }
  return result;
}

BOOL CI::GeneralKernelNode::output_is_luma(CI::GeneralKernelNode *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  CGRect v6;

  v2 = *((_DWORD *)this + 33);
  result = 1;
  if (!v2
    || !CI::format_is_luminance(v2)
    || ((*(uint64_t (**)(CI::GeneralKernelNode *))(*(_QWORD *)this + 264))(this) & 1) == 0)
  {
    if (!*(_BYTE *)(*((_QWORD *)this + 6) + 160))
      return 0;
    if (!(*(uint64_t (**)(CI::GeneralKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0))
      return 0;
    v3 = (*(uint64_t (**)(CI::GeneralKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    v6.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v3 + 160))(v3);
    if (!CGRectIsInfinite(v6))
      return 0;
    v4 = (*(uint64_t (**)(CI::GeneralKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 288))(v4) & 1) == 0)
      return 0;
  }
  return result;
}

uint64_t CI::GeneralKernelNode::output_depth(CI::GeneralKernelNode *this)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 33);
  if (v2)
  {
    if (CI::format_is_deep(v2))
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    if (!*(_BYTE *)(*((_QWORD *)this + 6) + 163))
      return 0;
    result = (*(uint64_t (**)(CI::GeneralKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    if (!result)
      return result;
    v4 = (*(uint64_t (**)(CI::GeneralKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    if ((*(int (**)(uint64_t))(*(_QWORD *)v4 + 304))(v4) >= 1)
    {
      v5 = (*(uint64_t (**)(CI::GeneralKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 304))(v5);
    }
    else
    {
      return 0;
    }
  }
}

uint64_t CI::GeneralKernelNode::print_for_graph_core(uint64_t a1, FILE *a2, _QWORD *a3, int a4)
{
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD **v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  const char *name;
  uint64_t v17;
  const char *v18;
  int v19;
  BOOL v20;
  const __CFDictionary *v21;
  const char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _QWORD v28[5];
  _DWORD *v29;

  result = fprintf(a2, "kernel %s", *(const char **)(*(_QWORD *)(a1 + 48) + 24));
  v8 = **(unsigned int **)(a1 + 56);
  if ((int)v8 >= 1)
  {
    v9 = 0;
    v10 = 24;
    do
    {
      v11 = *(_QWORD *)(a1 + 56);
      if ((unint64_t)v9 > 9)
        v12 = (_DWORD **)(*(_QWORD *)(v11 + 16) + 8 * (v9 - 10));
      else
        v12 = (_DWORD **)(v11 + v10);
      v13 = *v12;
      if (a4)
      {
        if (v9)
          v14 = 44;
        else
          v14 = 40;
        fputc(v14, a2);
        v15 = *(_QWORD *)(a1 + 48);
        if (*(_BYTE *)(v15 + 12))
        {
          name = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v15 + 144), v9);
        }
        else if (v9 >= *(int *)(v15 + 20))
        {
          name = 0;
        }
        else
        {
          name = *(const char **)(*(_QWORD *)(v15 + 80) + 8 * v9);
        }
        fputs(name, a2);
      }
      else
      {
        v17 = *(_QWORD *)(a1 + 48);
        if (*(_BYTE *)(v17 + 12))
        {
          v18 = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v17 + 144), v9);
        }
        else if (v9 >= *(int *)(v17 + 20))
        {
          v18 = 0;
        }
        else
        {
          v18 = *(const char **)(*(_QWORD *)(v17 + 80) + 8 * v9);
        }
        fprintf(a2, "\n%s", v18);
      }
      if ((*(int (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13) < 27
        || (*(int (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13) > 52)
      {
        fputc(61, a2);
        result = (*(uint64_t (**)(_DWORD *, FILE *, _QWORD))(*(_QWORD *)v13 + 32))(v13, a2, 0);
      }
      else
      {
        if (CI_GRAPHVIZ_INTERNAL())
        {
          v19 = v13[9];
LABEL_29:
          result = fprintf(a2, "=(%d)", v19);
          goto LABEL_30;
        }
        v29 = v13;
        result = (uint64_t)std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(a3, &v29);
        if (result)
        {
          v19 = *(_DWORD *)(result + 24);
          goto LABEL_29;
        }
      }
LABEL_30:
      ++v9;
      v10 += 8;
    }
    while (v8 != v9);
  }
  if ((_DWORD)v8)
    v20 = a4 == 0;
  else
    v20 = 1;
  if (!v20)
    result = fputc(41, a2);
  if ((a4 & 1) == 0)
  {
    v21 = (const __CFDictionary *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48));
    if (v21)
    {
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = 0x40000000;
      v28[2] = ___ZNK2CI17GeneralKernelNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke;
      v28[3] = &__block_descriptor_tmp_23;
      v28[4] = a2;
      __CFDictionary::for_each(v21, v28);
    }
    result = *(unsigned int *)(a1 + 132);
    if ((_DWORD)result)
    {
      v22 = CI::name_for_format(result);
      result = fprintf(a2, "\noutputFormat=%s", v22);
    }
    v23 = *(_DWORD *)(a1 + 136);
    if (v23)
    {
      if (*(_DWORD *)(a1 + 140))
      {
        v24 = *(_DWORD *)(a1 + 144);
        if (v24)
          result = fprintf(a2, "\nthreadsPerGroup=(%d,%d,%d)", v23, *(_DWORD *)(a1 + 140), v24);
      }
    }
    v25 = *(_DWORD *)(a1 + 148);
    if (v25 && *(_DWORD *)(a1 + 152))
    {
      v26 = *(_DWORD *)(a1 + 156);
      if (v26)
        return fprintf(a2, "\nthreadgroupsPerGrid=(%d,%d,%d)", v25, *(_DWORD *)(a1 + 152), v26);
    }
  }
  return result;
}

void ___ZNK2CI17GeneralKernelNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke(uint64_t a1, __CFObject *a2, __CFObject *a3)
{
  __sFILE *v6;
  __sFILE *v7;

  fputc(10, *(FILE **)(a1 + 32));
  __CFObject::fprint(a2, *(FILE **)(a1 + 32), v6);
  fputc(61, *(FILE **)(a1 + 32));
  __CFObject::fprint(a3, *(FILE **)(a1 + 32), v7);
}

uint64_t CI::GeneralKernelNode::code_complexity(CI::GeneralKernelNode *this)
{
  _BYTE *v1;
  uint64_t result;

  v1 = *(_BYTE **)(*((_QWORD *)this + 6) + 32);
  if (v1)
  {
    result = 0;
    while (1)
    {
      if (*v1 == 59)
      {
        ++result;
      }
      else if (!*v1)
      {
        return result;
      }
      ++v1;
    }
  }
  return 0;
}

double CI::GeneralKernelNode::roi_of_child(CI::GeneralKernelNode *this, CGRect a2, uint64_t a3)
{
  double height;
  double width;
  double y;
  double x;
  uint64_t v9;
  NSObject *v10;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  if ((a3 & 0x80000000) == 0 && **((_DWORD **)this + 7) > (int)a3)
  {
    if ((*(unsigned int (**)(CI::GeneralKernelNode *, uint64_t))(*(_QWORD *)this + 192))(this, a3))
    {
      v9 = *((_QWORD *)this + 15);
      if (v9)
        return (*(double (**)(uint64_t, uint64_t, double, double, double, double))(v9 + 16))(v9, a3, x, y, width, height);
      v10 = ci_logger_render();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        CI::GeneralKernelNode::roi_of_child((uint64_t)this, v10);
      v9 = *((_QWORD *)this + 15);
      if (v9)
        return (*(double (**)(uint64_t, uint64_t, double, double, double, double))(v9 + 16))(v9, a3, x, y, width, height);
    }
    else
    {
      return *MEMORY[0x1E0C9D5E0];
    }
  }
  return x;
}

uint64_t CI::GeneralKernelNode::child_count(CI::GeneralKernelNode *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int type;

  v1 = **((unsigned int **)this + 7);
  if ((int)v1 >= 1)
  {
    v3 = 0;
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)this + 6);
      if (*(_BYTE *)(v5 + 12))
        break;
      if (v3 < *(int *)(v5 + 20))
      {
        type = *(_DWORD *)(*(_QWORD *)(v5 + 72) + 4 * v3);
        goto LABEL_7;
      }
LABEL_13:
      if (v1 == ++v3)
        return v4;
    }
    type = CI::KernelArguments::get_type((CI::KernelArguments *)(v5 + 144), v3);
LABEL_7:
    if (type > 4 || ((1 << type) & 0x16) == 0)
      v4 = v4;
    else
      v4 = (v4 + 1);
    goto LABEL_13;
  }
  return 0;
}

uint64_t CI::GeneralKernelNode::child(CI::GeneralKernelNode *this, int a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t i;
  uint64_t v8;
  unsigned int type;
  uint64_t v12;
  uint64_t v13;

  v2 = **((unsigned int **)this + 7);
  if ((int)v2 < 1)
    return 0;
  v5 = 0;
  v6 = 0;
  for (i = 24; ; i += 8)
  {
    v8 = *((_QWORD *)this + 6);
    if (*(_BYTE *)(v8 + 12))
    {
      type = CI::KernelArguments::get_type((CI::KernelArguments *)(v8 + 144), v5);
      goto LABEL_7;
    }
    if (v5 < *(int *)(v8 + 20))
      break;
LABEL_13:
    if (v2 == ++v5)
      return 0;
  }
  type = *(_DWORD *)(*(_QWORD *)(v8 + 72) + 4 * v5);
LABEL_7:
  if (type > 4 || ((1 << type) & 0x16) == 0)
    goto LABEL_13;
  if (v6 != a2)
  {
    ++v6;
    goto LABEL_13;
  }
  v12 = *((_QWORD *)this + 7);
  if (v5 > 9)
    v13 = *(_QWORD *)(v12 + 16) + 8 * (v5 - 10);
  else
    v13 = v12 + i;
  return *(_QWORD *)v13;
}

BOOL CI::GeneralKernelNode::child_type_is_image(CI::GeneralKernelNode *this, int a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int type;

  v2 = **((unsigned int **)this + 7);
  if ((int)v2 < 1)
    return 0;
  v5 = 0;
  v6 = 0;
  while (1)
  {
    v7 = *((_QWORD *)this + 6);
    if (*(_BYTE *)(v7 + 12))
    {
      type = CI::KernelArguments::get_type((CI::KernelArguments *)(v7 + 144), v5);
      goto LABEL_7;
    }
    if (v5 < *(int *)(v7 + 20))
      break;
LABEL_13:
    if (v2 == ++v5)
      return 0;
  }
  type = *(_DWORD *)(*(_QWORD *)(v7 + 72) + 4 * v5);
LABEL_7:
  if (type > 4 || ((1 << type) & 0x16) == 0)
    goto LABEL_13;
  if (v6 != a2)
  {
    ++v6;
    goto LABEL_13;
  }
  return type - 1 < 2;
}

uint64_t CI::GeneralKernelNode::child_is_ArgumentTypeSampler(CI::GeneralKernelNode *this, int a2)
{
  unsigned int *v2;
  unint64_t v3;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  unsigned int type;

  v2 = (unsigned int *)*((_QWORD *)this + 7);
  v3 = *v2;
  if ((int)v3 >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 1;
    while (1)
    {
      v2 = (unsigned int *)*((_QWORD *)this + 6);
      if (*((_BYTE *)v2 + 12))
      {
        type = CI::KernelArguments::get_type((CI::KernelArguments *)(v2 + 36), v6);
      }
      else
      {
        if (v6 >= (int)v2[5])
          goto LABEL_13;
        type = *(_DWORD *)(*((_QWORD *)v2 + 9) + 4 * v6);
      }
      LODWORD(v2) = (1 << type) & 0x16;
      if (type <= 4 && (_DWORD)v2 != 0)
      {
        if (v7 == a2)
        {
          LODWORD(v2) = type == 2;
          return v8 & v2 & 1;
        }
        ++v7;
      }
LABEL_13:
      v8 = ++v6 < v3;
      if (v3 == v6)
        return v8 & v2 & 1;
    }
  }
  v8 = 0;
  return v8 & v2 & 1;
}

uint64_t CI::GeneralKernelNode::child_is_ArgumentTypeSample(CI::GeneralKernelNode *this, int a2)
{
  unsigned int *v2;
  unint64_t v3;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  unsigned int type;

  v2 = (unsigned int *)*((_QWORD *)this + 7);
  v3 = *v2;
  if ((int)v3 >= 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 1;
    while (1)
    {
      v2 = (unsigned int *)*((_QWORD *)this + 6);
      if (*((_BYTE *)v2 + 12))
      {
        type = CI::KernelArguments::get_type((CI::KernelArguments *)(v2 + 36), v6);
      }
      else
      {
        if (v6 >= (int)v2[5])
          goto LABEL_13;
        type = *(_DWORD *)(*((_QWORD *)v2 + 9) + 4 * v6);
      }
      LODWORD(v2) = (1 << type) & 0x16;
      if (type <= 4 && (_DWORD)v2 != 0)
      {
        if (v7 == a2)
        {
          LODWORD(v2) = type == 1;
          return v8 & v2 & 1;
        }
        ++v7;
      }
LABEL_13:
      v8 = ++v6 < v3;
      if (v3 == v6)
        return v8 & v2 & 1;
    }
  }
  v8 = 0;
  return v8 & v2 & 1;
}

void CI::GeneralKernelNode::set_child(CI::GeneralKernelNode *this, CI::Node *a2, int a3)
{
  uint64_t v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int type;

  if ((a3 & 0x80000000) == 0)
  {
    v4 = **((unsigned int **)this + 7);
    if ((int)v4 >= 1)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *((_QWORD *)this + 6);
        if (*(_BYTE *)(v9 + 12))
        {
          type = CI::KernelArguments::get_type((CI::KernelArguments *)(v9 + 144), v7);
        }
        else
        {
          if (v7 >= *(int *)(v9 + 20))
            goto LABEL_14;
          type = *(_DWORD *)(*(_QWORD *)(v9 + 72) + 4 * v7);
        }
        if (type <= 4 && ((1 << type) & 0x16) != 0)
        {
          if (v8 == a3)
          {
            CI::SerialObjectPtrArray::replace(*((CI::SerialObjectPtrArray **)this + 7), a2, v7);
            return;
          }
          ++v8;
        }
LABEL_14:
        ++v7;
      }
      while (v4 != v7);
    }
  }
}

CFStringRef CI::GeneralKernelNode::description(CI::GeneralKernelNode *this)
{
  unsigned int v2;
  const char *v3;

  v2 = (*(uint64_t (**)(CI::GeneralKernelNode *))(*(_QWORD *)this + 16))(this);
  v3 = CI::name_for_type(v2);
  return CFStringCreateWithFormat(0, 0, CFSTR("<CI::%s %p [%s]>"), v3, this, *(_QWORD *)(*((_QWORD *)this + 6) + 24));
}

uint64_t CI::GeneralKernelNode::add_args_to_hash(CI::GeneralKernelNode *this, CI::XXHashHelper *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CI::XXHashHelper **v8;
  uint64_t __src;

  (*(void (**)(CI::GeneralKernelNode *))(*(_QWORD *)this + 392))(this);
  v4 = **((unsigned int **)this + 7);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = 24;
    do
    {
      v7 = *((_QWORD *)this + 7);
      if (v5 > 9)
        v8 = (CI::XXHashHelper **)(*(_QWORD *)(v7 + 16) + 8 * (v5 - 10));
      else
        v8 = (CI::XXHashHelper **)(v7 + v6);
      CI::Kernel::add_argument_to_digest(a2, *v8, 0);
      ++v5;
      v6 += 8;
    }
    while (v4 != v5);
  }
  __src = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 56))(*((_QWORD *)this + 6));
  return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
}

uint64_t CI::GeneralKernelNode::append_to_tree(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, char a5, int a6, double a7, double a8, double a9, double a10)
{
  uint64_t v20;

  v20 = operator new();
  return CI::GeneralKernelNode::GeneralKernelNode(v20, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t CI::GeneralKernelNode::type(CI::GeneralKernelNode *this)
{
  return 51;
}

uint64_t CI::GeneralKernelNode::shape_for_graphviz(CI::GeneralKernelNode *this)
{
  return 1;
}

uint64_t CI::GeneralKernelNode::color_for_graphviz(CI::GeneralKernelNode *this)
{
  return 9;
}

uint64_t CI::GeneralKernelNode::short_name(CI::GeneralKernelNode *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 6) + 24);
}

double CI::GeneralKernelNode::extent(CI::GeneralKernelNode *this)
{
  return *((double *)this + 11);
}

double CI::GeneralKernelNode::extent_unclamped(CI::GeneralKernelNode *this)
{
  return *((double *)this + 11);
}

BOOL CI::GeneralKernelNode::is_warp(CI::GeneralKernelNode *this)
{
  return (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6)) == 63;
}

uint64_t CI::GeneralKernelNode::is_position_invariant(CI::GeneralKernelNode *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 6) + 165);
}

uint64_t CI::GeneralKernelNode::may_be_extended_range(CI::GeneralKernelNode *this)
{
  return 1;
}

BOOL CI::GeneralKernelNode::is_color_general(CI::Kernel **this)
{
  return (int)CI::Kernel::num_sample_arguments(this[6]) > 0;
}

uint64_t CI::GeneralKernelNode::output_format(CI::GeneralKernelNode *this)
{
  return *((unsigned int *)this + 33);
}

uint64_t CI::GeneralKernelNode::add_to_kernel_hash(CI::GeneralKernelNode *this, CI::XXHashHelper *a2)
{
  return (*(uint64_t (**)(_QWORD, CI::XXHashHelper *))(**((_QWORD **)this + 6) + 64))(*((_QWORD *)this + 6), a2);
}

uint64_t `non-virtual thunk to'CI::GeneralKernelNode::type(CI::GeneralKernelNode *this)
{
  return 51;
}

char *std::vector<CGRect>::__assign_with_size[abi:nn180100]<CGRect*,CGRect*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      abort();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<CGRect>::__vallocate[abi:nn180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t CI::InstanceCounted<(CI::Type)51>::type()
{
  return 51;
}

_QWORD *CI::InstanceCounted<(CI::Type)51>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBE20;
  do
    v1 = __ldaxr(&dword_1ECF872F0[49]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[49]));
  return result;
}

void CI::InstanceCounted<(CI::Type)51>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBE20;
  do
    v1 = __ldaxr(&dword_1ECF872F0[49]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[49]));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::WarpKernelNode::WarpKernelNode(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, double a5, double a6, double a7, double a8)
{
  unsigned int v16;

  *((_QWORD *)CI::Node::Node((CI::Node *)a1) + 5) = off_1E2EBBDF8;
  do
    v16 = __ldaxr(&dword_1ECF872F0[48]);
  while (__stlxr(v16 + 1, &dword_1ECF872F0[48]));
  *(_QWORD *)a1 = &off_1E2EBB0F0;
  *(_QWORD *)(a1 + 40) = &unk_1E2EBB298;
  if (a2 && *(_BYTE *)(a2 + 12))
    a2 = CI::Object::ref(a2);
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  *(double *)(a1 + 64) = a5;
  *(double *)(a1 + 72) = a6;
  *(double *)(a1 + 80) = a7;
  *(double *)(a1 + 88) = a8;
  *(_QWORD *)(a1 + 96) = _Block_copy(a4);
  *(_QWORD *)(a1 + 104) = 0;
  return a1;
}

void CI::WarpKernelNode::~WarpKernelNode(CI::WarpKernelNode *this)
{
  CI::Object *v2;
  CI::SerialObjectPtrArray *v3;
  unsigned int v4;

  *(_QWORD *)this = &off_1E2EBB0F0;
  *((_QWORD *)this + 5) = &unk_1E2EBB298;
  v2 = (CI::Object *)*((_QWORD *)this + 6);
  if (v2 && *((_BYTE *)v2 + 12))
    CI::Object::unref(v2);
  *((_QWORD *)this + 6) = 0;
  v3 = (CI::SerialObjectPtrArray *)*((_QWORD *)this + 7);
  if (v3)
  {
    CI::SerialObjectPtrArray::~SerialObjectPtrArray(v3);
    MEMORY[0x194025AAC]();
  }
  *((_QWORD *)this + 7) = 0;
  _Block_release(*((const void **)this + 12));
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 5) = off_1E2EBBDF8;
  do
    v4 = __ldaxr(&dword_1ECF872F0[48]);
  while (__stlxr(v4 - 1, &dword_1ECF872F0[48]));
  CI::Node::~Node(this);
}

{
  CI::WarpKernelNode::~WarpKernelNode(this);
  JUMPOUT(0x194025AACLL);
}

void `non-virtual thunk to'CI::WarpKernelNode::~WarpKernelNode(CI::WarpKernelNode *this)
{
  CI::WarpKernelNode::~WarpKernelNode((CI::WarpKernelNode *)((char *)this - 40));
}

{
  CI::WarpKernelNode::~WarpKernelNode((CI::WarpKernelNode *)((char *)this - 40));
  JUMPOUT(0x194025AACLL);
}

void CI::WarpKernelNode::release_resources(CI::WarpKernelNode *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 12);
  if (v2)
    _Block_release(v2);
  *((_QWORD *)this + 12) = 0;
}

BOOL CI::WarpKernelNode::child_type_is_image(CI::WarpKernelNode *this, int a2)
{
  uint64_t v2;
  unint64_t v5;
  int v6;
  uint64_t i;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int type;

  v2 = **((unsigned int **)this + 7);
  if ((int)v2 < 1)
    return 0;
  v5 = 0;
  v6 = 0;
  for (i = 24; ; i += 8)
  {
    v8 = *((_QWORD *)this + 7);
    if (v5 > 9)
      v9 = (_QWORD *)(*(_QWORD *)(v8 + 16) + 8 * (v5 - 10));
    else
      v9 = (_QWORD *)(v8 + i);
    v10 = *v9;
    if ((*(int (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9) < 27
      || (*(int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) > 52)
    {
      goto LABEL_10;
    }
    if (v6 == a2)
      break;
    ++v6;
LABEL_10:
    if (v2 == ++v5)
      return 0;
  }
  v12 = *((_QWORD *)this + 6);
  if (*(_BYTE *)(v12 + 12))
    v13 = CI::KernelArguments::count((CI::KernelArguments *)(v12 + 144));
  else
    v13 = *(_DWORD *)(v12 + 20);
  if (v13 <= (int)v5)
    return 1;
  v14 = *((_QWORD *)this + 6);
  if (*(_BYTE *)(v14 + 12))
  {
    type = CI::KernelArguments::get_type((CI::KernelArguments *)(v14 + 144), v5);
  }
  else if (*(_DWORD *)(v14 + 20) <= (int)v5)
  {
    type = 0;
  }
  else
  {
    type = *(_DWORD *)(*(_QWORD *)(v14 + 72) + 4 * v5);
  }
  return type != 4;
}

uint64_t CI::WarpKernelNode::child_count(CI::WarpKernelNode *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = **((unsigned int **)this + 7);
  if ((int)v1 < 1)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 24;
  do
  {
    v6 = *((_QWORD *)this + 7);
    if (v3 > 9)
      v7 = (_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * (v3 - 10));
    else
      v7 = (_QWORD *)(v6 + v5);
    v8 = *v7;
    if ((*(int (**)(_QWORD))(*(_QWORD *)*v7 + 16))(*v7) >= 27)
    {
      if ((*(int (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) >= 53)
        v4 = v4;
      else
        v4 = (v4 + 1);
    }
    ++v3;
    v5 += 8;
  }
  while (v1 != v3);
  return v4;
}

uint64_t CI::WarpKernelNode::child(CI::WarpKernelNode *this, int a2)
{
  uint64_t v2;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = **((unsigned int **)this + 7);
  if ((int)v2 >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 24;
    do
    {
      v8 = *((_QWORD *)this + 7);
      if (v5 > 9)
        v9 = (_QWORD *)(*(_QWORD *)(v8 + 16) + 8 * (v5 - 10));
      else
        v9 = (_QWORD *)(v8 + v7);
      v10 = *v9;
      if ((*(int (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9) >= 27
        && (*(int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) <= 52)
      {
        if (v6 == a2)
          return v10;
        ++v6;
      }
      ++v5;
      v7 += 8;
    }
    while (v2 != v5);
  }
  return 0;
}

BOOL CI::WarpKernelNode::output_is_rg(CI::WarpKernelNode *this)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  CGRect v5;
  CGRect v6;

  v5.origin.x = (*(double (**)(CI::WarpKernelNode *))(*(_QWORD *)this + 160))(this);
  result = 0;
  if (CGRectIsInfinite(v5))
  {
    v2 = (*(uint64_t (**)(CI::WarpKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    v6.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 160))(v2);
    if (CGRectIsInfinite(v6))
    {
      v3 = (*(uint64_t (**)(CI::WarpKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 272))(v3) & 1) != 0)
        return 1;
    }
  }
  return result;
}

BOOL CI::WarpKernelNode::output_is_r(CI::WarpKernelNode *this)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  CGRect v5;
  CGRect v6;

  v5.origin.x = (*(double (**)(CI::WarpKernelNode *))(*(_QWORD *)this + 160))(this);
  result = 0;
  if (CGRectIsInfinite(v5))
  {
    v2 = (*(uint64_t (**)(CI::WarpKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    v6.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 160))(v2);
    if (CGRectIsInfinite(v6))
    {
      v3 = (*(uint64_t (**)(CI::WarpKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 280))(v3) & 1) != 0)
        return 1;
    }
  }
  return result;
}

BOOL CI::WarpKernelNode::output_is_luma(CI::WarpKernelNode *this)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  CGRect v5;
  CGRect v6;

  v5.origin.x = (*(double (**)(CI::WarpKernelNode *))(*(_QWORD *)this + 160))(this);
  result = 0;
  if (CGRectIsInfinite(v5))
  {
    v2 = (*(uint64_t (**)(CI::WarpKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    v6.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 160))(v2);
    if (CGRectIsInfinite(v6))
    {
      v3 = (*(uint64_t (**)(CI::WarpKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 288))(v3) & 1) != 0)
        return 1;
    }
  }
  return result;
}

uint64_t CI::WarpKernelNode::append_to_tree(uint64_t a1, uint64_t a2, const void *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v14;

  v14 = operator new();
  return CI::WarpKernelNode::WarpKernelNode(v14, a1, a2, a3, a4, a5, a6, a7);
}

void CI::WarpKernelNode::set_child(CI::WarpKernelNode *this, CI::Node *a2, int a3)
{
  uint64_t v4;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if ((a3 & 0x80000000) == 0)
  {
    v4 = **((unsigned int **)this + 7);
    if ((int)v4 >= 1)
    {
      v7 = 0;
      v8 = 0;
      v9 = 24;
      do
      {
        v10 = *((_QWORD *)this + 7);
        if (v7 > 9)
          v11 = (_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * (v7 - 10));
        else
          v11 = (_QWORD *)(v10 + v9);
        v12 = *v11;
        if ((*(int (**)(_QWORD))(*(_QWORD *)*v11 + 16))(*v11) >= 27
          && (*(int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12) <= 52)
        {
          if (v8 == a3)
          {
            CI::SerialObjectPtrArray::replace(*((CI::SerialObjectPtrArray **)this + 7), a2, v7);
            return;
          }
          ++v8;
        }
        ++v7;
        v9 += 8;
      }
      while (v4 != v7);
    }
  }
}

void CI::WarpKernelNode::print_for_graph_core(uint64_t a1, FILE *a2, uint64_t a3, int a4)
{
  int v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const char *name;
  uint64_t v17;
  const char *v18;
  const __CFDictionary *v19;
  _QWORD v20[5];

  fprintf(a2, "warpkernel %s", *(const char **)(*(_QWORD *)(a1 + 48) + 24));
  v7 = **(_DWORD **)(a1 + 56);
  v8 = v7
     - ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48)) == 63);
  if ((int)v8 >= 1)
  {
    v9 = 0;
    v10 = 24;
    do
    {
      v11 = *(_QWORD *)(a1 + 56);
      if ((unint64_t)v9 > 9)
        v12 = (uint64_t *)(*(_QWORD *)(v11 + 16) + 8 * (v9 - 10));
      else
        v12 = (uint64_t *)(v11 + v10);
      v13 = *v12;
      if (a4)
      {
        if (v9)
          v14 = 44;
        else
          v14 = 40;
        fputc(v14, a2);
        v15 = *(_QWORD *)(a1 + 48);
        if (*(_BYTE *)(v15 + 12))
        {
          name = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v15 + 144), v9);
        }
        else if (v9 >= *(int *)(v15 + 20))
        {
          name = 0;
        }
        else
        {
          name = *(const char **)(*(_QWORD *)(v15 + 80) + 8 * v9);
        }
        fputs(name, a2);
      }
      else
      {
        v17 = *(_QWORD *)(a1 + 48);
        if (*(_BYTE *)(v17 + 12))
        {
          v18 = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v17 + 144), v9);
        }
        else if (v9 >= *(int *)(v17 + 20))
        {
          v18 = 0;
        }
        else
        {
          v18 = *(const char **)(*(_QWORD *)(v17 + 80) + 8 * v9);
        }
        fprintf(a2, "\n%s", v18);
      }
      if ((*(int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13) < 27
        || (*(int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13) >= 53)
      {
        fputc(61, a2);
        (*(void (**)(uint64_t, FILE *, _QWORD))(*(_QWORD *)v13 + 32))(v13, a2, 0);
      }
      ++v9;
      v10 += 8;
    }
    while (v8 != v9);
  }
  if ((_DWORD)v8 && (a4 & 1) != 0)
    fputc(41, a2);
  if ((a4 & 1) == 0)
  {
    v19 = (const __CFDictionary *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48));
    if (v19)
    {
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 0x40000000;
      v20[2] = ___ZNK2CI14WarpKernelNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke;
      v20[3] = &__block_descriptor_tmp_24;
      v20[4] = a2;
      __CFDictionary::for_each(v19, v20);
    }
  }
}

void ___ZNK2CI14WarpKernelNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke(uint64_t a1, __CFObject *a2, __CFObject *a3)
{
  __sFILE *v6;
  __sFILE *v7;

  fputc(10, *(FILE **)(a1 + 32));
  __CFObject::fprint(a2, *(FILE **)(a1 + 32), v6);
  fputc(61, *(FILE **)(a1 + 32));
  __CFObject::fprint(a3, *(FILE **)(a1 + 32), v7);
}

CFStringRef CI::WarpKernelNode::description(CI::WarpKernelNode *this)
{
  unsigned int v2;
  const char *v3;

  v2 = (*(uint64_t (**)(CI::WarpKernelNode *))(*(_QWORD *)this + 16))(this);
  v3 = CI::name_for_type(v2);
  return CFStringCreateWithFormat(0, 0, CFSTR("<CI::%s %p, %s>"), v3, this, *(_QWORD *)(*((_QWORD *)this + 6) + 24));
}

uint64_t CI::WarpKernelNode::code_complexity(CI::WarpKernelNode *this)
{
  _BYTE *v1;
  uint64_t result;

  v1 = *(_BYTE **)(*((_QWORD *)this + 6) + 32);
  if (v1)
  {
    result = 0;
    while (1)
    {
      if (*v1 == 59)
      {
        ++result;
      }
      else if (!*v1)
      {
        return result;
      }
      ++v1;
    }
  }
  return 0;
}

double CI::WarpKernelNode::roi_of_child(CI::WarpKernelNode *this, CGRect a2, uint64_t a3)
{
  double height;
  double width;
  double y;
  double x;
  uint64_t v9;
  NSObject *v10;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  if (a3 <= 1)
  {
    v9 = *((_QWORD *)this + 12);
    if (v9)
      return (*(double (**)(uint64_t, uint64_t, double, double, double, double))(v9 + 16))(v9, a3, x, y, width, height);
    v10 = ci_logger_render();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      CI::WarpKernelNode::roi_of_child((uint64_t)this, v10);
    v9 = *((_QWORD *)this + 12);
    if (v9)
      return (*(double (**)(uint64_t, uint64_t, double, double, double, double))(v9 + 16))(v9, a3, x, y, width, height);
  }
  return x;
}

uint64_t CI::WarpKernelNode::add_args_to_hash(CI::WarpKernelNode *this, CI::XXHashHelper *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CI::XXHashHelper **v8;
  uint64_t __src;

  (*(void (**)(CI::WarpKernelNode *))(*(_QWORD *)this + 392))(this);
  v4 = **((unsigned int **)this + 7);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = 24;
    do
    {
      v7 = *((_QWORD *)this + 7);
      if (v5 > 9)
        v8 = (CI::XXHashHelper **)(*(_QWORD *)(v7 + 16) + 8 * (v5 - 10));
      else
        v8 = (CI::XXHashHelper **)(v7 + v6);
      CI::Kernel::add_argument_to_digest(a2, *v8, 0);
      ++v5;
      v6 += 8;
    }
    while (v4 != v5);
  }
  __src = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 56))(*((_QWORD *)this + 6));
  return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
}

uint64_t CI::WarpKernelNode::type(CI::WarpKernelNode *this)
{
  return 50;
}

uint64_t CI::WarpKernelNode::shape_for_graphviz(CI::WarpKernelNode *this)
{
  return 1;
}

uint64_t CI::WarpKernelNode::color_for_graphviz(CI::WarpKernelNode *this)
{
  return 5;
}

uint64_t CI::WarpKernelNode::short_name(CI::WarpKernelNode *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 6) + 24);
}

double CI::WarpKernelNode::extent(CI::WarpKernelNode *this)
{
  return *((double *)this + 8);
}

double CI::WarpKernelNode::extent_unclamped(CI::WarpKernelNode *this)
{
  return *((double *)this + 8);
}

uint64_t CI::WarpKernelNode::is_warp(CI::WarpKernelNode *this)
{
  return 1;
}

uint64_t CI::WarpKernelNode::is_position_invariant(CI::WarpKernelNode *this)
{
  return 0;
}

uint64_t CI::WarpKernelNode::may_be_extended_range(CI::WarpKernelNode *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(CI::WarpKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 256))(v1);
}

uint64_t CI::WarpKernelNode::alpha_one(CI::WarpKernelNode *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  CGRect v5;

  v2 = (*(uint64_t (**)(CI::WarpKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  v5.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 160))(v2);
  result = CGRectIsInfinite(v5);
  if ((_DWORD)result)
  {
    v4 = (*(uint64_t (**)(CI::WarpKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 264))(v4);
  }
  return result;
}

uint64_t CI::WarpKernelNode::output_depth(CI::WarpKernelNode *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(CI::WarpKernelNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 304))(v1);
}

uint64_t CI::WarpKernelNode::output_format(CI::WarpKernelNode *this)
{
  return 0;
}

uint64_t CI::WarpKernelNode::add_to_kernel_hash(CI::WarpKernelNode *this, CI::XXHashHelper *a2)
{
  return (*(uint64_t (**)(_QWORD, CI::XXHashHelper *))(**((_QWORD **)this + 6) + 64))(*((_QWORD *)this + 6), a2);
}

uint64_t `non-virtual thunk to'CI::WarpKernelNode::type(CI::WarpKernelNode *this)
{
  return 50;
}

uint64_t CI::InstanceCounted<(CI::Type)50>::type()
{
  return 50;
}

_QWORD *CI::InstanceCounted<(CI::Type)50>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBDF8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[48]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[48]));
  return result;
}

void CI::InstanceCounted<(CI::Type)50>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBDF8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[48]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[48]));
  JUMPOUT(0x194025AACLL);
}

size_t CI::NoopNode::print_for_graph_core(uint64_t a1, FILE *__stream)
{
  const char *v3;
  size_t v4;

  switch(*(_DWORD *)(a1 + 56))
  {
    case 1:
      v3 = "noop_full_intermediate";
      v4 = 22;
      break;
    case 2:
      v3 = "noop_intermediate_uncached";
      v4 = 26;
      break;
    case 3:
      v3 = "noop_intermediate_cached";
      v4 = 24;
      break;
    case 4:
      v3 = "noop_affine";
      v4 = 11;
      break;
    case 5:
      v3 = "noop_multiuse";
      v4 = 13;
      break;
    case 6:
      v3 = "noop_samplemode";
      v4 = 15;
      break;
    case 7:
      v3 = "noop_disablemerging";
      v4 = 19;
      break;
    default:
      v3 = "noop_intermediate";
      v4 = 17;
      break;
  }
  return fwrite(v3, v4, 1uLL, __stream);
}

uint64_t CI::NoopNode::append_to_tree_and_unref(CI::Node *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unsigned int v6;

  v5 = operator new();
  *((_QWORD *)CI::NodeWithChild::NodeWithChild((CI::NodeWithChild *)v5, a1) + 6) = off_1E2EBBC40;
  do
    v6 = __ldaxr(&dword_1ECF872F0[37]);
  while (__stlxr(v6 + 1, &dword_1ECF872F0[37]));
  *(_QWORD *)v5 = &off_1E2EBF630;
  *(_QWORD *)(v5 + 48) = &unk_1E2EBF7E0;
  *(_DWORD *)(v5 + 56) = a3;
  if (a1)
    CI::Object::unref(a1);
  return v5;
}

CI::Node *CI::NoopNode::program_graph(CI::NoopNode *this, CI::Context *a2, CI::NodeToNodeMap *a3, uint64_t a4)
{
  CI::Node *v8;
  _QWORD *v9;
  int v10;
  int v11;
  uint64_t v13;
  int v14;

  v8 = (CI::Node *)CI::NodeToNodeMap::findAndRef(a3, this);
  if (!v8)
  {
    v8 = (CI::Node *)(*(uint64_t (**)(_QWORD, CI::Context *, CI::NodeToNodeMap *, uint64_t))(**((_QWORD **)this + 5) + 328))(*((_QWORD *)this + 5), a2, a3, a4);
    (*(void (**)(CI::Node *))(*(_QWORD *)v8 + 16))(v8);
    if ((*(unsigned int (**)(CI::Node *))(*(_QWORD *)v8 + 16))(v8) == 52)
    {
      v9 = (_QWORD *)((char *)v8 + 140);
      v13 = *(_QWORD *)((char *)v8 + 140);
      v10 = *((_DWORD *)v8 + 38);
      v14 = *((_DWORD *)v8 + 37);
      if ((*(unsigned int (**)(CI::NoopNode *))(*(_QWORD *)this + 408))(this) == 3)
      {
        if (v10 <= 7)
          v10 = 7;
        *v9 = v13;
        *((_DWORD *)v8 + 37) = v14;
        *((_DWORD *)v8 + 38) = v10;
      }
      if ((*(unsigned int (**)(CI::NoopNode *))(*(_QWORD *)this + 408))(this) == 2)
      {
        *v9 = v13;
        *((_DWORD *)v8 + 37) = v14;
        v10 = -1;
        *((_DWORD *)v8 + 38) = -1;
      }
      if ((*(unsigned int (**)(CI::NoopNode *))(*(_QWORD *)this + 408))(this) == 1)
      {
        if (v10 < 2)
          v11 = 2;
        else
          v11 = v10;
        *v9 = v13;
        *((_DWORD *)v8 + 37) = v14;
        *((_DWORD *)v8 + 38) = v11;
      }
    }
    CI::NodeToNodeMap::add(a3, this, v8);
  }
  return v8;
}

uint64_t CI::NodeToNodeMap::findAndRef(CI::NodeToNodeMap *this, CI::Node *a2)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t result;

  v4 = (_QWORD *)*((_QWORD *)this + 2);
  v2 = (char *)this + 16;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= (unint64_t)a2;
    if (v6 >= (unint64_t)a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v2 || *((_QWORD *)v5 + 4) > (unint64_t)a2)
    return 0;
  result = *((_QWORD *)v5 + 5);
  if (result)
  {
    CI::Object::ref(result);
    return *((_QWORD *)v5 + 5);
  }
  return result;
}

uint64_t *CI::NodeToNodeMap::add(CI::NodeToNodeMap *this, CI::Node *a2, CI::Node *a3)
{
  uint64_t *result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t **v11;
  CI::Node *v12;
  CI::Node **v13;

  v12 = a2;
  v6 = (_QWORD *)*((_QWORD *)this + 2);
  result = (uint64_t *)((char *)this + 16);
  v5 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = (uint64_t)result;
  do
  {
    v8 = v5[4];
    v9 = v8 >= (unint64_t)a2;
    if (v8 >= (unint64_t)a2)
      v10 = v5;
    else
      v10 = v5 + 1;
    if (v9)
      v7 = (uint64_t)v5;
    v5 = (_QWORD *)*v10;
  }
  while (*v10);
  if ((uint64_t *)v7 == result || *(_QWORD *)(v7 + 32) > (unint64_t)a2)
  {
LABEL_12:
    v11 = (uint64_t **)(result - 1);
    if (a2)
      CI::Object::ref((uint64_t)a2);
    if (a3)
      CI::Object::ref((uint64_t)a3);
    v13 = &v12;
    result = std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v11, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v13);
    result[5] = (uint64_t)a3;
  }
  return result;
}

void CI::NoopNode::~NoopNode(CI::NoopNode *this)
{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBC40;
  do
    v1 = __ldaxr(&dword_1ECF872F0[37]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[37]));
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBC40;
  do
    v1 = __ldaxr(&dword_1ECF872F0[37]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[37]));
  CI::NodeWithChild::~NodeWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::NoopNode::type(CI::NoopNode *this)
{
  return 39;
}

uint64_t CI::NoopNode::shape_for_graphviz(CI::NoopNode *this)
{
  return 3;
}

uint64_t CI::NoopNode::color_for_graphviz(CI::NoopNode *this)
{
  return 0;
}

const char *CI::NoopNode::short_name(CI::NoopNode *this)
{
  return "noop";
}

uint64_t CI::NoopNode::may_be_extended_range(CI::NoopNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 256))(*((_QWORD *)this + 5));
}

uint64_t CI::NoopNode::alpha_one(CI::NoopNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 264))(*((_QWORD *)this + 5));
}

uint64_t CI::NoopNode::output_format(CI::NoopNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 312))(*((_QWORD *)this + 5));
}

CI::CGRectArray *CI::NoopNode::regions_of_child@<X0>(CI::NoopNode *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, CI::CGRectArray *a3@<X8>)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGRect v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  if ((*((_DWORD *)this + 14) & 0xFFFFFFFD) != 1)
    goto LABEL_5;
  v14.origin.x = (*(double (**)(CI::NoopNode *))(*(_QWORD *)this + 168))(this);
  if (CGRectIsInfinite(v14))
    goto LABEL_5;
  v19.origin.x = (*(double (**)(CI::NoopNode *))(*(_QWORD *)this + 160))(this);
  v19.origin.y = v9;
  v19.size.width = v10;
  v19.size.height = v11;
  v15.origin.x = x;
  v15.origin.y = y;
  v15.size.width = width;
  v15.size.height = height;
  if (CGRectIntersectsRect(v15, v19))
  {
    v16.origin.x = (*(double (**)(CI::NoopNode *))(*(_QWORD *)this + 168))(this);
    v17 = CGRectInset(v16, -1.0, -1.0);
  }
  else
  {
LABEL_5:
    v17.origin.x = x;
    v17.origin.y = y;
    v17.size.width = width;
    v17.size.height = height;
  }
  v18 = CGRectInset(v17, 0.001, 0.001);
  v13 = CGRectIntegral(v18);
  return CI::CGRectArray::CGRectArray(a3, &v13);
}

uint64_t CI::NoopNode::reason(CI::NoopNode *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t `non-virtual thunk to'CI::NoopNode::type(CI::NoopNode *this)
{
  return 39;
}

void `non-virtual thunk to'CI::NoopNode::~NoopNode(CI::NoopNode *this)
{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBC40;
  v1 = (CI::NoopNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[37]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[37]));
  CI::NodeWithChild::~NodeWithChild(v1);
}

{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBC40;
  v1 = (CI::NoopNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[37]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[37]));
  CI::NodeWithChild::~NodeWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::InstanceCounted<(CI::Type)39>::type()
{
  return 39;
}

_QWORD *CI::InstanceCounted<(CI::Type)39>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBC40;
  do
    v1 = __ldaxr(&dword_1ECF872F0[37]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[37]));
  return result;
}

void CI::InstanceCounted<(CI::Type)39>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBC40;
  do
    v1 = __ldaxr(&dword_1ECF872F0[37]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[37]));
  JUMPOUT(0x194025AACLL);
}

CI::CGRectArray *CI::CGRectArray::CGRectArray(CI::CGRectArray *this, const CGRect *a2)
{
  CGSize *v4;
  uint64_t v5;
  CGSize *v6;
  CGSize size;
  CGSize *v8;
  char *v9;
  char *v10;
  CGSize v11;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = (CGSize *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SoftwareDAGDescriptor::ArgumentInfo>>((uint64_t)this + 16, 1uLL);
  v6 = &v4[2 * v5];
  size = a2->size;
  *v4 = (CGSize)a2->origin;
  v4[1] = size;
  v8 = v4 + 2;
  v10 = *(char **)this;
  v9 = (char *)*((_QWORD *)this + 1);
  if (v9 != *(char **)this)
  {
    do
    {
      v11 = (CGSize)*((_OWORD *)v9 - 1);
      v4[-2] = *((CGSize *)v9 - 2);
      v4[-1] = v11;
      v4 -= 2;
      v9 -= 32;
    }
    while (v9 != v10);
    v9 = *(char **)this;
  }
  *(_QWORD *)this = v4;
  *((_QWORD *)this + 1) = v8;
  *((_QWORD *)this + 2) = v6;
  if (v9)
    operator delete(v9);
  *((_QWORD *)this + 1) = v8;
  return this;
}

CI::Object *CI::PremultiplyNode::append_to_tree(CI::PremultiplyNode *this, CI::Node *a2, int a3)
{
  CI::PremultiplyNode *v3;
  int v5;
  CI::Object *v6;
  CI::Object *v7;
  CI::Object *v8;
  uint64_t v10;
  _DWORD *v11;
  CI::Node *v12;
  unsigned int v13;
  CI::NodeWithChild *v14;
  CI::NodeWithChild *v15;
  unsigned int v16;
  CI::NodeWithChild *v17;
  unsigned int v18;
  CI::NodeWithChild *v19;
  unsigned int v20;

  v3 = this;
  if ((_DWORD)a2)
  {
    v5 = (int)a2;
    if (a3 && (*(unsigned int (**)(CI::PremultiplyNode *))(*(_QWORD *)this + 232))(this))
    {
      v6 = 0;
      v7 = v3;
      while (1)
      {
        v8 = v7;
        if (((*(uint64_t (**)(CI::Object *))(*(_QWORD *)v7 + 176))(v7) & 1) != 0)
          break;
        v7 = (CI::Object *)(*(uint64_t (**)(CI::Object *, _QWORD))(*(_QWORD *)v7 + 48))(v7, 0);
        v6 = v8;
        if (((*(uint64_t (**)(CI::Object *))(*(_QWORD *)v7 + 232))(v7) & 1) == 0)
          goto LABEL_9;
      }
      v8 = v6;
    }
    else
    {
      v8 = 0;
      v7 = v3;
    }
LABEL_9:
    if ((*(unsigned int (**)(CI::Object *))(*(_QWORD *)v7 + 264))(v7))
      goto LABEL_10;
    if ((*(unsigned int (**)(CI::Object *))(*(_QWORD *)v7 + 16))(v7) == 40)
    {
      if (!(*((_DWORD *)v7 + 14) + v5))
      {
        v7 = (CI::Object *)*((_QWORD *)v7 + 5);
        if (v7)
LABEL_10:
          CI::Object::ref((uint64_t)v7);
LABEL_33:
        if (!v8)
          return v7;
        (*(void (**)(CI::Object *, CI::Object *, _QWORD))(*(_QWORD *)v8 + 200))(v8, v7, 0);
        if (v7)
          CI::Object::unref(v7);
        if (v3)
          CI::Object::ref((uint64_t)v3);
        return v3;
      }
      v17 = (CI::NodeWithChild *)operator new();
      v15 = CI::NodeWithChild::NodeWithChild(v17, v7);
      *((_QWORD *)v15 + 6) = off_1E2EBBC90;
      do
        v18 = __ldaxr(&dword_1ECF872F0[38]);
      while (__stlxr(v18 + 1, &dword_1ECF872F0[38]));
    }
    else
    {
      if (v5 == -1)
      {
        if (a3)
        {
          if ((*(unsigned int (**)(CI::Object *))(*(_QWORD *)v7 + 16))(v7) == 31)
          {
            v10 = (*(uint64_t (**)(CI::Object *, _QWORD))(*(_QWORD *)v7 + 48))(v7, 0);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) == 40)
            {
              v11 = (_DWORD *)(*(uint64_t (**)(CI::Object *, _QWORD))(*(_QWORD *)v7 + 48))(v7, 0);
              if (v11[14] == 1)
              {
                v12 = (CI::Node *)(*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v11 + 48))(v11, 0);
                v7 = (CI::Object *)operator new();
                *((_QWORD *)CI::NodeWithChild::NodeWithChild(v7, v12) + 6) = off_1E2EBBB28;
                do
                  v13 = __ldaxr(&dword_1ECF872F0[30]);
                while (__stlxr(v13 + 1, &dword_1ECF872F0[30]));
                *(_QWORD *)v7 = &off_1E2EBE0B0;
                *((_QWORD *)v7 + 6) = &unk_1E2EBE258;
                goto LABEL_33;
              }
              v19 = (CI::NodeWithChild *)operator new();
              v15 = CI::NodeWithChild::NodeWithChild(v19, v7);
              *((_QWORD *)v15 + 6) = off_1E2EBBC90;
              do
                v20 = __ldaxr(&dword_1ECF872F0[38]);
              while (__stlxr(v20 + 1, &dword_1ECF872F0[38]));
              *(_QWORD *)v15 = &off_1E2EBC0F0;
              *((_QWORD *)v15 + 6) = &unk_1E2EBC298;
              *((_DWORD *)v15 + 14) = -1;
LABEL_32:
              v7 = v15;
              goto LABEL_33;
            }
          }
        }
      }
      v14 = (CI::NodeWithChild *)operator new();
      v15 = CI::NodeWithChild::NodeWithChild(v14, v7);
      *((_QWORD *)v15 + 6) = off_1E2EBBC90;
      do
        v16 = __ldaxr(&dword_1ECF872F0[38]);
      while (__stlxr(v16 + 1, &dword_1ECF872F0[38]));
    }
    *(_QWORD *)v15 = &off_1E2EBC0F0;
    *((_QWORD *)v15 + 6) = &unk_1E2EBC298;
    *((_DWORD *)v15 + 14) = v5;
    goto LABEL_32;
  }
  if (this)
    return (CI::Object *)CI::Object::ref((uint64_t)this);
  return v3;
}

uint64_t CI::PremultiplyNode::add_to_kernel_hash(uint64_t this, CI::XXHashHelper *a2)
{
  int v2;
  char *v3;

  v2 = *(_DWORD *)(this + 56);
  if (v2 == 1)
  {
    v3 = "builtin_premultiply";
  }
  else
  {
    if (v2 != -1)
      return this;
    v3 = "builtin_unpremultiply";
  }
  return CI::XXHashHelper::addstr((uint64_t)a2, v3);
}

uint64_t CI::PremultiplyNode::convert_to_kernel_node(CI::PremultiplyNode *this, CI::Context *a2)
{
  int v3;
  int *v4;
  void (***v5)(CI::ColorKernel *__hidden);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;

  v4 = (int *)((char *)this + 56);
  v3 = *((_DWORD *)this + 14);
  if (v3 == 1)
  {
    v5 = &CI::_ci_premul;
    goto LABEL_5;
  }
  if (v3 == -1)
  {
    v5 = &CI::_ci_unpremul;
LABEL_5:
    v6 = operator new();
    v7 = *((_QWORD *)this + 5);
    *(_QWORD *)v6 = 0xA00000001;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_QWORD *)(v6 + 96) = 0;
    *(_DWORD *)(v6 + 8) = 1;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = v7;
    if (v7)
      CI::Object::ref(v7);
    v8 = operator new();
    (*(void (**)(CI::PremultiplyNode *))(*(_QWORD *)this + 160))(this);
    CI::ColorKernelNode::ColorKernelNode(v8, v5, v6, 0, 0, 0);
    return v8;
  }
  v9 = ci_logger_render();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    CI::PremultiplyNode::convert_to_kernel_node(v4, v9);
  return 0;
}

void CI::PremultiplyNode::~PremultiplyNode(CI::PremultiplyNode *this)
{
  unsigned int v1;

  *(_QWORD *)this = &off_1E2EBC0F0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 6) = off_1E2EBBC90;
  do
    v1 = __ldaxr(&dword_1ECF872F0[38]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[38]));
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  unsigned int v1;

  *(_QWORD *)this = &off_1E2EBC0F0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 6) = off_1E2EBBC90;
  do
    v1 = __ldaxr(&dword_1ECF872F0[38]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[38]));
  CI::NodeWithChild::~NodeWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::PremultiplyNode::type(CI::PremultiplyNode *this)
{
  return 40;
}

uint64_t CI::PremultiplyNode::shape_for_graphviz(CI::PremultiplyNode *this)
{
  return 2;
}

uint64_t CI::PremultiplyNode::color_for_graphviz(CI::PremultiplyNode *this)
{
  return 4;
}

uint64_t CI::PremultiplyNode::add_args_to_hash(CI::PremultiplyNode *this, CI::XXHashHelper *a2)
{
  int __src;

  __src = *((_DWORD *)this + 14);
  return XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
}

const char *CI::PremultiplyNode::short_name(CI::PremultiplyNode *this)
{
  const char *v1;
  int v2;
  const char *v3;

  v1 = "premul";
  v2 = *((_DWORD *)this + 14);
  v3 = "badbremul";
  if (!v2)
    v3 = "nopremul";
  if (v2 != 1)
    v1 = v3;
  if (v2 == -1)
    return "unpremul";
  else
    return v1;
}

BOOL CI::PremultiplyNode::is_identity(CI::PremultiplyNode *this)
{
  return *((_DWORD *)this + 14) == 0;
}

uint64_t CI::PremultiplyNode::may_be_extended_range(CI::PremultiplyNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 256))(*((_QWORD *)this + 5));
}

uint64_t CI::PremultiplyNode::output_depth(CI::PremultiplyNode *this)
{
  if ((*(int (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5)) < 1)
    return 0;
  else
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5));
}

uint64_t `non-virtual thunk to'CI::PremultiplyNode::type(CI::PremultiplyNode *this)
{
  return 40;
}

void `non-virtual thunk to'CI::PremultiplyNode::~PremultiplyNode(CI::PremultiplyNode *this)
{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E2EBBC90;
  *((_QWORD *)this - 6) = &off_1E2EBC0F0;
  v1 = (CI::PremultiplyNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[38]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[38]));
  CI::NodeWithChild::~NodeWithChild(v1);
}

{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E2EBBC90;
  *((_QWORD *)this - 6) = &off_1E2EBC0F0;
  v1 = (CI::PremultiplyNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[38]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[38]));
  CI::NodeWithChild::~NodeWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::InstanceCounted<(CI::Type)40>::type()
{
  return 40;
}

_QWORD *CI::InstanceCounted<(CI::Type)40>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBC90;
  do
    v1 = __ldaxr(&dword_1ECF872F0[38]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[38]));
  return result;
}

void CI::InstanceCounted<(CI::Type)40>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBC90;
  do
    v1 = __ldaxr(&dword_1ECF872F0[38]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[38]));
  JUMPOUT(0x194025AACLL);
}

double cikernel::_ci_premul(float32x4_t a1)
{
  double result;

  *(_QWORD *)&result = vmulq_laneq_f32(a1, a1, 3).u64[0];
  return result;
}

double cikernel::_ci_unpremul(float32x4_t a1)
{
  double result;

  *(_QWORD *)&result = vdivq_f32(a1, (float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxnmq_f32(a1, (float32x4_t)vdupq_n_s32(0x3727C5ACu)), 3)).u64[0];
  return result;
}

uint64_t CI::ProcessorNode::ProcessorNode(uint64_t a1, const void *a2, __int128 *a3, const void *a4, uint64_t a5, char a6, int a7, int a8, char a9, char a10, char a11, char a12)
{
  CI::Node *v18;
  unsigned int v19;
  __int128 v20;
  int v21;

  v18 = CI::Node::Node((CI::Node *)a1);
  *(_QWORD *)v18 = off_1E2EBCEB0;
  *((_QWORD *)v18 + 5) = 0;
  *((_QWORD *)v18 + 6) = off_1E2EBBCB8;
  do
    v19 = __ldaxr(&dword_1ECF872F0[39]);
  while (__stlxr(v19 + 1, &dword_1ECF872F0[39]));
  *(_QWORD *)a1 = &off_1E2EBA230;
  *(_QWORD *)(a1 + 48) = &unk_1E2EBA3E8;
  v20 = *a3;
  *(_OWORD *)(a1 + 88) = a3[1];
  *(_OWORD *)(a1 + 72) = v20;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 135) = 0;
  *(_BYTE *)(a1 + 139) = 1;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 154) = 0;
  if (a4)
  {
    *(_QWORD *)(a1 + 160) = a4;
    CFRetain(a4);
  }
  *(_QWORD *)(a1 + 168) = a5;
  *(_BYTE *)(a1 + 104) = a6;
  *(_QWORD *)(a1 + 112) = 0;
  if (a8)
    v21 = a8;
  else
    v21 = a7;
  *(_DWORD *)(a1 + 120) = v21;
  *(_BYTE *)(a1 + 136) = a9;
  *(_BYTE *)(a1 + 138) = a11;
  *(_BYTE *)(a1 + 137) = 0;
  *(_BYTE *)(a1 + 139) = a12;
  *(_BYTE *)(a1 + 154) = a10;
  if (v21 && (CI::format_has_alpha(v21) & 1) == 0)
    *(_BYTE *)(a1 + 154) = 1;
  *(_BYTE *)(a1 + 153) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = _Block_copy(a2);
  return a1;
}

CI::Node *CI::ProcessorNode::ProcessorNode(CI::Node *a1, unsigned int *a2, const void *a3, const void *a4, __int128 *a5, const void *a6, uint64_t a7, char a8, int a9, uint64_t a10, uint64_t a11, int a12, char a13, char a14, char a15, unsigned __int8 a16, char a17, char a18)
{
  CI::Node *v24;
  CI::Node *v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  size_t v30;
  int **v31;
  int v32;
  _BOOL4 v33;
  void *v34;
  int is_float;
  int is_full_float;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  _QWORD *v42;
  int v43;
  BOOL v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int is_rg;
  int v53;
  const void *v55;
  CI::Node *v56;
  int v58;
  int v59;
  unsigned int *v60;

  v24 = a1;
  v25 = CI::Node::Node(a1);
  *(_QWORD *)v25 = off_1E2EBCEB0;
  v60 = a2;
  *((_QWORD *)v25 + 5) = a2;
  *((_QWORD *)v25 + 6) = off_1E2EBBCB8;
  do
    v26 = __ldaxr(&dword_1ECF872F0[39]);
  while (__stlxr(v26 + 1, &dword_1ECF872F0[39]));
  *(_QWORD *)v24 = &off_1E2EBA230;
  *((_QWORD *)v24 + 6) = &unk_1E2EBA3E8;
  v27 = *a5;
  v28 = a5[1];
  *((_QWORD *)v24 + 16) = 0;
  v29 = (_QWORD *)((char *)v24 + 128);
  *(_OWORD *)((char *)v24 + 88) = v28;
  *(_OWORD *)((char *)v24 + 72) = v27;
  *((_BYTE *)v24 + 104) = 0;
  *(_DWORD *)((char *)v24 + 135) = 0;
  *((_BYTE *)v24 + 139) = 1;
  *((_QWORD *)v24 + 18) = 0;
  *((_BYTE *)v24 + 152) = 0;
  *((_BYTE *)v24 + 154) = 0;
  if (a6)
  {
    *((_QWORD *)v24 + 20) = a6;
    CFRetain(a6);
  }
  v30 = *a2;
  *((_QWORD *)v24 + 21) = a7;
  *((_BYTE *)v24 + 104) = a8;
  if ((int)v30 <= 0)
  {
    v34 = 0;
    *((_QWORD *)v24 + 14) = 0;
    v31 = (int **)((char *)v24 + 112);
    *((_QWORD *)v24 + 18) = 0;
    v33 = a11 != 0;
    v32 = a16;
  }
  else
  {
    *((_QWORD *)v24 + 14) = malloc_type_calloc(4uLL, v30, 0x33AC4BBEuLL);
    v31 = (int **)((char *)v24 + 112);
    *((_QWORD *)v24 + 18) = malloc_type_calloc(1uLL, v30, 0xC945ED4EuLL);
    v32 = a16;
    if (a11)
    {
      v33 = 1;
      v34 = malloc_type_calloc(1uLL, v30, 0x93F5C6D3uLL);
    }
    else
    {
      v33 = 0;
      v34 = 0;
    }
  }
  *v29 = v34;
  is_float = CI::format_is_float(a9);
  is_full_float = CI::format_is_full_float(a9);
  if (is_float)
    v37 = 2053;
  else
    v37 = 261;
  if (is_float)
    v38 = 2054;
  else
    v38 = 262;
  if (is_full_float)
    v39 = 2309;
  else
    v39 = v37;
  if (is_full_float)
    v40 = 2310;
  else
    v40 = v38;
  v58 = v40;
  v59 = v39;
  if ((int)v30 <= 0)
  {
    if (a12)
      v51 = a12;
    else
      v51 = a9;
LABEL_56:
    *((_DWORD *)v24 + 30) = v51;
    goto LABEL_57;
  }
  v55 = a4;
  v56 = v24;
  v41 = 0;
  v42 = v60 + 6;
  do
  {
    v43 = *(_DWORD *)(a10 + 4 * v41);
    if (!v43)
      v43 = a9;
    (*v31)[v41] = v43;
    if (*(_DWORD *)(a10 + 4 * v41))
      v44 = 1;
    else
      v44 = v32 == 0;
    if (!v44)
    {
      v45 = v42;
      if (v41 >= 0xA)
        v45 = (_QWORD *)(*((_QWORD *)v60 + 2) + 8 * (v41 - 10));
      v46 = *v45;
      v47 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v45 + 312))(*v45);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 280))(v46))
      {
        v48 = v59;
        if (v47)
          v48 = v47;
        (*v31)[v41] = v48;
      }
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 272))(v46);
      v32 = a16;
      if (v49)
      {
        v50 = v58;
        if (v47)
          v50 = v47;
        (*v31)[v41] = v50;
      }
    }
    if (v33)
      *(_BYTE *)(*v29 + v41) = *(_BYTE *)(a11 + v41);
    ++v41;
    ++v42;
  }
  while (v30 != v41);
  if (a12)
    v51 = a12;
  else
    v51 = a9;
  a4 = v55;
  v24 = v56;
  *((_DWORD *)v56 + 30) = v51;
  if (!a12 && (v32 & 1) != 0)
  {
    if ((CI::format_is_r(**v31) & 1) == 0)
    {
      is_rg = CI::format_is_rg(**v31);
      v53 = v58;
      if (!is_rg)
        v53 = a9;
      v59 = v53;
    }
    v51 = v59;
    goto LABEL_56;
  }
LABEL_57:
  *((_BYTE *)v24 + 136) = a13;
  *((_BYTE *)v24 + 138) = a15;
  *((_BYTE *)v24 + 137) = v32;
  *((_BYTE *)v24 + 139) = a17;
  *((_BYTE *)v24 + 154) = a14;
  if (v51 && (CI::format_has_alpha(v51) & 1) == 0)
    *((_BYTE *)v24 + 154) = 1;
  *((_BYTE *)v24 + 153) = a18;
  *((_QWORD *)v24 + 7) = _Block_copy(a3);
  *((_QWORD *)v24 + 8) = _Block_copy(a4);
  return v24;
}

uint64_t CI::ProcessorNode::ProcessorNode(uint64_t a1, CI::Node *a2, const void *a3, const void *a4, __int128 *a5, const void *a6, uint64_t a7, char a8, int a9, int a10, int a11, char a12, char a13, char a14, char a15, char a16, char a17)
{
  unsigned int v22;
  __int128 v23;
  _DWORD *v24;

  *((_QWORD *)CI::NodeWithChildren::NodeWithChildren((CI::NodeWithChildren *)a1, a2) + 6) = off_1E2EBBCB8;
  do
    v22 = __ldaxr(&dword_1ECF872F0[39]);
  while (__stlxr(v22 + 1, &dword_1ECF872F0[39]));
  *(_QWORD *)a1 = &off_1E2EBA230;
  *(_QWORD *)(a1 + 48) = &unk_1E2EBA3E8;
  v23 = *a5;
  *(_OWORD *)(a1 + 88) = a5[1];
  *(_OWORD *)(a1 + 72) = v23;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 135) = 0;
  *(_BYTE *)(a1 + 139) = 1;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 154) = 0;
  if (a6)
  {
    *(_QWORD *)(a1 + 160) = a6;
    CFRetain(a6);
  }
  *(_QWORD *)(a1 + 168) = a7;
  *(_BYTE *)(a1 + 104) = a8;
  v24 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 112) = v24;
  *v24 = a10;
  if (a11)
    a9 = a11;
  *(_DWORD *)(a1 + 120) = a9;
  *(_BYTE *)(a1 + 136) = a12;
  *(_BYTE *)(a1 + 138) = a14;
  *(_BYTE *)(a1 + 137) = a15;
  *(_BYTE *)(a1 + 139) = a16;
  *(_BYTE *)(a1 + 154) = a13;
  if (a9 && (CI::format_has_alpha(a9) & 1) == 0)
    *(_BYTE *)(a1 + 154) = 1;
  *(_BYTE *)(a1 + 153) = a17;
  *(_QWORD *)(a1 + 56) = _Block_copy(a3);
  *(_QWORD *)(a1 + 64) = _Block_copy(a4);
  return a1;
}

CI::NodeWithChildren *CI::NodeWithChildren::NodeWithChildren(CI::NodeWithChildren *this, CI::Node *a2)
{
  CI::Node *v4;
  uint64_t v5;

  v4 = CI::Node::Node(this);
  *(_QWORD *)v4 = off_1E2EBCEB0;
  *((_QWORD *)v4 + 5) = 0;
  v5 = operator new();
  *(_QWORD *)v5 = 0xA00000001;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_QWORD *)(v5 + 96) = 0;
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = a2;
  if (a2)
    CI::Object::ref((uint64_t)a2);
  *((_QWORD *)this + 5) = v5;
  return this;
}

void CI::ProcessorNode::~ProcessorNode(CI::ProcessorNode *this)
{
  const void *v2;
  void *v3;
  void *v4;
  void *v5;
  const void *v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E2EBA230;
  *((_QWORD *)this + 6) = &unk_1E2EBA3E8;
  v2 = (const void *)*((_QWORD *)this + 20);
  if (v2)
    CFRelease(v2);
  v3 = (void *)*((_QWORD *)this + 14);
  if (v3)
    free(v3);
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
    free(v4);
  v5 = (void *)*((_QWORD *)this + 18);
  if (v5)
    free(v5);
  _Block_release(*((const void **)this + 8));
  v6 = (const void *)*((_QWORD *)this + 7);
  if (v6)
    _Block_release(v6);
  *((_QWORD *)this + 6) = off_1E2EBBCB8;
  do
    v7 = __ldaxr(&dword_1ECF872F0[39]);
  while (__stlxr(v7 - 1, &dword_1ECF872F0[39]));
  CI::NodeWithChildren::~NodeWithChildren(this);
}

{
  CI::ProcessorNode::~ProcessorNode(this);
  JUMPOUT(0x194025AACLL);
}

void CI::NodeWithChildren::~NodeWithChildren(CI::NodeWithChildren *this)
{
  CI::SerialObjectPtrArray *v2;

  *(_QWORD *)this = off_1E2EBCEB0;
  v2 = (CI::SerialObjectPtrArray *)*((_QWORD *)this + 5);
  if (v2)
  {
    CI::SerialObjectPtrArray::~SerialObjectPtrArray(v2);
    MEMORY[0x194025AAC]();
  }
  *((_QWORD *)this + 5) = 0;
  CI::Node::~Node(this);
}

void `non-virtual thunk to'CI::ProcessorNode::~ProcessorNode(CI::ProcessorNode *this)
{
  CI::ProcessorNode::~ProcessorNode((CI::ProcessorNode *)((char *)this - 48));
}

{
  CI::ProcessorNode::~ProcessorNode((CI::ProcessorNode *)((char *)this - 48));
  JUMPOUT(0x194025AACLL);
}

void CI::ProcessorNode::release_resources(CI::ProcessorNode *this)
{
  const void *v2;
  const void *v3;
  _QWORD *v4;
  const void *v5;

  v2 = (const void *)*((_QWORD *)this + 8);
  if (v2)
    _Block_release(v2);
  v5 = (const void *)*((_QWORD *)this + 7);
  v4 = (_QWORD *)((char *)this + 56);
  v3 = v5;
  if (v5)
    _Block_release(v3);
  *v4 = 0;
  v4[1] = 0;
}

uint64_t CI::ProcessorNode::print_for_graph_core(CFStringRef *a1, FILE *__stream, uint64_t a3, int a4)
{
  char v4;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  CFStringRef v12;
  uint64_t result;
  const char *v14;

  v4 = a4;
  if (a4)
    v7 = 32;
  else
    v7 = 10;
  fwrite("processor ", 0xAuLL, 1uLL, __stream);
  CI::fprintf(__stream, a1[20], v8);
  if ((v4 & 1) == 0
    && CI_GRAPHVIZ_INTERNAL()
    && ((int (*)(CFStringRef *))(*a1)[1].info)(a1) >= 1)
  {
    v9 = 0;
    do
    {
      if ((_DWORD)v9)
        v10 = " ";
      else
        v10 = "\n  ";
      v11 = ((uint64_t (*)(CFStringRef *, uint64_t))(*a1)[1].data)(a1, v9);
      fprintf(__stream, "%s(%d)", v10, *(_DWORD *)(v11 + 36));
      v9 = (v9 + 1);
    }
    while ((int)v9 < ((int (*)(CFStringRef *))(*a1)[1].info)(a1));
  }
  v12 = a1[21];
  if (v12)
    fprintf(__stream, "%c%016llX", v7, v12);
  result = *((unsigned int *)a1 + 30);
  if ((_DWORD)result)
  {
    v14 = CI::name_for_format(result);
    result = fprintf(__stream, "%coutputFormat=%s", v7, v14);
  }
  if (!*((_BYTE *)a1 + 139))
    result = fprintf(__stream, "%cnoPartialOutput", v7);
  if (*((_BYTE *)a1 + 137))
    result = fprintf(__stream, "%ccanReduceChannels", v7);
  if (*((_BYTE *)a1 + 104))
    return fprintf(__stream, "%csupportsCompressed", v7);
  return result;
}

double CI::ProcessorNode::roi_of_child(CI::ProcessorNode *this, CGRect a2)
{
  double height;
  double width;
  double y;
  double x;
  double *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  double v11;
  double v12;
  void *__p;
  _OWORD *v15;
  uint64_t v16;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  v7 = (double *)operator new(0x20uLL);
  *v7 = x;
  v7[1] = y;
  v7[2] = width;
  v7[3] = height;
  v8 = *((_QWORD *)this + 7);
  if (v8)
  {
    (*(void (**)(void **__return_ptr, double, double, double, double))(v8 + 16))(&__p, x, y, width, height);
  }
  else
  {
    __p = 0;
    v15 = 0;
    v16 = 0;
    std::vector<CGRect>::__vallocate[abi:nn180100](&__p, 1uLL);
    v9 = v15;
    v10 = *((_OWORD *)v7 + 1);
    *v15 = *(_OWORD *)v7;
    v9[1] = v10;
    v15 = v9 + 2;
  }
  CI::ProcessorNode::unionROI((uint64_t **)&__p);
  v12 = v11;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  operator delete(v7);
  return v12;
}

void CI::ProcessorNode::regions_of_child(CI::ProcessorNode *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, uint64_t a3@<X1>, CI::CGRectArray *a4@<X8>)
{
  double height;
  double width;
  double y;
  double x;
  double *v11;
  uint64_t v12;
  CGFloat *v13;
  _OWORD *v14;
  __int128 v15;
  CGFloat *v16;
  CGPoint *v17;
  CGPoint *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  unint64_t v23;
  CGRect *v24;
  CGPoint v25;
  CGSize v26;
  unint64_t v27;
  CGRect *v28;
  CGRect *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  _BYTE *v35;
  double v36;
  double v37;
  CGFloat v38;
  double v39;
  CGFloat v40;
  double v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  unint64_t v47;
  CGRect *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  CGPoint v55;
  char *v56;
  char *v57;
  CGSize v58;
  char *v59;
  CGPoint v60;
  char *v61;
  CGSize size;
  char *v63;
  CGSize v64;
  CGFloat *v65;
  void *__p;
  uint64_t v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;

  if ((a3 & 0x80000000) != 0
    || (height = a2.size.height, width = a2.size.width, y = a2.origin.y, x = a2.origin.x, CGRectIsEmpty(a2)))
  {
    CI::CGRectArray::CGRectArray(a4, MEMORY[0x1E0C9D628]);
    return;
  }
  v11 = (double *)operator new(0x20uLL);
  *v11 = x;
  v11[1] = y;
  v11[2] = width;
  v11[3] = height;
  v12 = *((_QWORD *)this + 7);
  if (v12)
  {
    (*(void (**)(CGFloat **__return_ptr, double, double, double, double))(v12 + 16))(&v65, x, y, width, height);
    v13 = (CGFloat *)__p;
  }
  else
  {
    v65 = 0;
    __p = 0;
    v67 = 0;
    std::vector<CGRect>::__vallocate[abi:nn180100](&v65, 1uLL);
    v14 = __p;
    v15 = *((_OWORD *)v11 + 1);
    *(_OWORD *)__p = *(_OWORD *)v11;
    v14[1] = v15;
    v13 = (CGFloat *)(v14 + 2);
    __p = v14 + 2;
  }
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  v16 = v65;
  if (v65 != v13)
  {
    v17 = (CGPoint *)MEMORY[0x1E0C9D628];
    v18 = (CGPoint *)MEMORY[0x1E0C9D5E0];
    while (1)
    {
      v19 = *v16;
      v20 = v16[1];
      v21 = v16[2];
      v22 = v16[3];
      v68.origin.x = *v16;
      v68.origin.y = v20;
      v68.size.width = v21;
      v68.size.height = v22;
      if (CGRectIsEmpty(v68))
        break;
      v69.origin.x = v19;
      v69.origin.y = v20;
      v69.size.width = v21;
      v69.size.height = v22;
      if (CGRectIsInfinite(v69))
      {
        v24 = (CGRect *)*((_QWORD *)a4 + 1);
        v27 = *((_QWORD *)a4 + 2);
        if ((unint64_t)v24 >= v27)
        {
          v29 = *(CGRect **)a4;
          v49 = ((uint64_t)v24 - *(_QWORD *)a4) >> 5;
          v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 59)
            goto LABEL_70;
          v51 = v27 - (_QWORD)v29;
          if (v51 >> 4 > v50)
            v50 = v51 >> 4;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFE0)
            v33 = 0x7FFFFFFFFFFFFFFLL;
          else
            v33 = v50;
          if (v33)
          {
            v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SoftwareDAGDescriptor::ArgumentInfo>>((uint64_t)a4 + 16, v33);
            v29 = *(CGRect **)a4;
            v24 = (CGRect *)*((_QWORD *)a4 + 1);
          }
          else
          {
            v34 = 0;
          }
          v60 = v18[1];
          v56 = &v34[32 * v49];
          *(CGPoint *)v56 = *v18;
          *((CGPoint *)v56 + 1) = v60;
          if (v24 != v29)
          {
            v61 = &v34[32 * v49];
            do
            {
              size = v24[-1].size;
              v59 = v61 - 32;
              *((_OWORD *)v61 - 2) = v24[-1].origin;
              *((CGSize *)v61 - 1) = size;
              --v24;
              v61 -= 32;
            }
            while (v24 != v29);
            goto LABEL_63;
          }
          goto LABEL_62;
        }
        v25 = *v18;
        v26 = (CGSize)v18[1];
        goto LABEL_15;
      }
      v35 = (_BYTE *)(*(uint64_t (**)(CI::ProcessorNode *, uint64_t))(*(_QWORD *)this + 48))(this, a3);
      v36 = (*(double (**)(_BYTE *))(*(_QWORD *)v35 + 160))(v35);
      v38 = v37;
      v40 = v39;
      v42 = v41;
      if ((*(int (**)(_BYTE *))(*(_QWORD *)v35 + 16))(v35) >= 41
        && (*(int (**)(_BYTE *))(*(_QWORD *)v35 + 16))(v35) <= 42)
      {
        v70.origin.x = v36;
        v70.origin.y = v38;
        v70.size.width = v40;
        v70.size.height = v42;
        if (!CGRectIsInfinite(v70) && !v35[139])
        {
          v21 = v40;
          v20 = v38;
          v19 = v36;
          v22 = v42;
        }
      }
      v71.origin.x = v19;
      v71.origin.y = v20;
      v71.size.width = v21;
      v71.size.height = v22;
      v72 = CGRectInset(v71, 0.001, 0.001);
      v73 = CGRectIntegral(v72);
      v43 = v73.origin.x;
      v44 = v73.origin.y;
      v45 = v73.size.width;
      v46 = v73.size.height;
      v48 = (CGRect *)*((_QWORD *)a4 + 1);
      v47 = *((_QWORD *)a4 + 2);
      if ((unint64_t)v48 >= v47)
      {
        v29 = *(CGRect **)a4;
        v52 = ((uint64_t)v48 - *(_QWORD *)a4) >> 5;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 59)
LABEL_70:
          abort();
        v54 = v47 - (_QWORD)v29;
        if (v54 >> 4 > v53)
          v53 = v54 >> 4;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFE0)
          v33 = 0x7FFFFFFFFFFFFFFLL;
        else
          v33 = v53;
        if (v33)
        {
          v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SoftwareDAGDescriptor::ArgumentInfo>>((uint64_t)a4 + 16, v33);
          v29 = *(CGRect **)a4;
          v48 = (CGRect *)*((_QWORD *)a4 + 1);
        }
        else
        {
          v34 = 0;
        }
        v56 = &v34[32 * v52];
        *(CGFloat *)v56 = v43;
        *((CGFloat *)v56 + 1) = v44;
        *((CGFloat *)v56 + 2) = v45;
        *((CGFloat *)v56 + 3) = v46;
        if (v48 != v29)
        {
          v63 = &v34[32 * v52];
          do
          {
            v64 = v48[-1].size;
            v59 = v63 - 32;
            *((_OWORD *)v63 - 2) = v48[-1].origin;
            *((CGSize *)v63 - 1) = v64;
            --v48;
            v63 -= 32;
          }
          while (v48 != v29);
LABEL_63:
          v28 = (CGRect *)(v56 + 32);
          *(_QWORD *)a4 = v59;
          *((_QWORD *)a4 + 1) = v56 + 32;
          *((_QWORD *)a4 + 2) = &v34[32 * v33];
          if (v29)
            operator delete(v29);
          goto LABEL_65;
        }
LABEL_62:
        v59 = v56;
        goto LABEL_63;
      }
      *v48 = v73;
      v28 = v48 + 1;
LABEL_65:
      *((_QWORD *)a4 + 1) = v28;
      v16 += 4;
      if (v16 == v13)
      {
        v13 = v65;
        goto LABEL_67;
      }
    }
    v24 = (CGRect *)*((_QWORD *)a4 + 1);
    v23 = *((_QWORD *)a4 + 2);
    if ((unint64_t)v24 >= v23)
    {
      v29 = *(CGRect **)a4;
      v30 = ((uint64_t)v24 - *(_QWORD *)a4) >> 5;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 59)
        goto LABEL_70;
      v32 = v23 - (_QWORD)v29;
      if (v32 >> 4 > v31)
        v31 = v32 >> 4;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFE0)
        v33 = 0x7FFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
      {
        v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SoftwareDAGDescriptor::ArgumentInfo>>((uint64_t)a4 + 16, v33);
        v29 = *(CGRect **)a4;
        v24 = (CGRect *)*((_QWORD *)a4 + 1);
      }
      else
      {
        v34 = 0;
      }
      v55 = v17[1];
      v56 = &v34[32 * v30];
      *(CGPoint *)v56 = *v17;
      *((CGPoint *)v56 + 1) = v55;
      if (v24 != v29)
      {
        v57 = &v34[32 * v30];
        do
        {
          v58 = v24[-1].size;
          v59 = v57 - 32;
          *((_OWORD *)v57 - 2) = v24[-1].origin;
          *((CGSize *)v57 - 1) = v58;
          --v24;
          v57 -= 32;
        }
        while (v24 != v29);
        goto LABEL_63;
      }
      goto LABEL_62;
    }
    v25 = *v17;
    v26 = (CGSize)v17[1];
LABEL_15:
    v24->origin = v25;
    v24->size = v26;
    v28 = v24 + 1;
    goto LABEL_65;
  }
LABEL_67:
  if (v13)
  {
    __p = v13;
    operator delete(v13);
  }
  operator delete(v11);
}

uint64_t CI::ProcessorNode::output_depth(CI::ProcessorNode *this)
{
  int v1;

  v1 = *((_DWORD *)this + 30);
  if ((v1 + 1) < 2)
    return 0;
  if (CI::format_is_deep(v1))
    return 1;
  return 0xFFFFFFFFLL;
}

uint64_t CI::ProcessorNode::output_is_rg(CI::ProcessorNode *this)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  CGRect v6;

  v2 = *((_DWORD *)this + 30);
  if (!v2)
    goto LABEL_12;
  if ((CI::format_is_rg(v2) & 1) != 0)
    return 1;
  if (!*((_DWORD *)this + 30))
  {
LABEL_12:
    if (*((_BYTE *)this + 137))
    {
      if ((*(uint64_t (**)(CI::ProcessorNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0))
      {
        v4 = (*(uint64_t (**)(CI::ProcessorNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
        v6.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v4 + 160))(v4);
        if (CGRectIsInfinite(v6))
        {
          v5 = (*(uint64_t (**)(CI::ProcessorNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 272))(v5) & 1) != 0)
            return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t CI::ProcessorNode::output_is_r(CI::ProcessorNode *this)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  CGRect v6;

  v2 = *((_DWORD *)this + 30);
  if (!v2)
    goto LABEL_12;
  if ((CI::format_is_r(v2) & 1) != 0)
    return 1;
  if (!*((_DWORD *)this + 30))
  {
LABEL_12:
    if (*((_BYTE *)this + 137))
    {
      if ((*(uint64_t (**)(CI::ProcessorNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0))
      {
        v4 = (*(uint64_t (**)(CI::ProcessorNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
        v6.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v4 + 160))(v4);
        if (CGRectIsInfinite(v6))
        {
          v5 = (*(uint64_t (**)(CI::ProcessorNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 280))(v5) & 1) != 0)
            return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t CI::ProcessorNode::add_args_to_hash(CFStringRef *this, CI::XXHashHelper *a2, const __CFString *a3)
{
  CFStringRef v6;
  CFStringRef __src;

  CI::XXHashHelper::add(a2, this[20]);
  v6 = this[21];
  if (!v6)
    v6 = a3;
  __src = v6;
  return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
}

uint64_t CI::ProcessorNode::append_to_tree(const void *a1, __int128 *a2, const void *a3, uint64_t a4, char a5, int a6, int a7, char a8, char a9, char a10, char a11)
{
  uint64_t v18;

  v18 = operator new();
  return CI::ProcessorNode::ProcessorNode(v18, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

CI::Node *CI::ProcessorNode::append_to_tree(CI::SerialObjectPtrArray *a1, void (**a2)(_QWORD *__return_ptr, _QWORD, _QWORD, double, double, double, double), const void *a3, double *a4, const void *a5, uint64_t a6, char a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, char a13, char a14, unsigned __int8 a15, char a16, char a17)
{
  unint64_t v20;
  CGFloat **v21;
  CGFloat **v22;
  CGFloat *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CI::Object *v46;
  CI::Node *v47;
  void *__p[4];
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;

  if (*(int *)a1 >= 1)
  {
    v20 = 0;
    v21 = (CGFloat **)((char *)a1 + 24);
    do
    {
      v22 = v21;
      if (v20 >= 0xA)
        v22 = (CGFloat **)(*((_QWORD *)a1 + 2) + 8 * (v20 - 10));
      v23 = *v22;
      ((void (**)(void **__return_ptr, _QWORD, _QWORD, double, double, double, double))a2)[2](__p, a2, 0, *a4, a4[1], a4[2], a4[3]);
      v24 = (*(uint64_t (**)(CGFloat *))(*(_QWORD *)v23 + 16))(v23);
      if (v24 == 30)
      {
        v38 = v23[7];
        v39 = v23[8];
        v40 = v23[9];
        v41 = v23[10];
        CI::ProcessorNode::unionROI((uint64_t **)__p);
        v58.origin.x = v42;
        v58.origin.y = v43;
        v58.size.width = v44;
        v58.size.height = v45;
        v56.origin.x = v38;
        v56.origin.y = v39;
        v56.size.width = v40;
        v56.size.height = v41;
        if (CGRectContainsRect(v56, v58))
          goto LABEL_12;
      }
      else if (v24 == 34)
      {
        v25 = (*(uint64_t (**)(CGFloat *, _QWORD))(*(_QWORD *)v23 + 48))(v23, 0);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25) == 41
          || (v26 = (*(uint64_t (**)(CGFloat *, _QWORD))(*(_QWORD *)v23 + 48))(v23, 0),
              (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26) == 42))
        {
          v27 = (*(double (**)(CGFloat *))(*(_QWORD *)v23 + 160))(v23);
          v29 = v28;
          v31 = v30;
          v33 = v32;
          CI::ProcessorNode::unionROI((uint64_t **)__p);
          v57.origin.x = v34;
          v57.origin.y = v35;
          v57.size.width = v36;
          v57.size.height = v37;
          v55.origin.x = v27;
          v55.origin.y = v29;
          v55.size.width = v31;
          v55.size.height = v33;
          if (CGRectContainsRect(v55, v57))
          {
LABEL_12:
            v46 = (CI::Object *)(*(uint64_t (**)(CGFloat *, _QWORD))(*(_QWORD *)v23 + 48))(v23, 0);
            CI::SerialObjectPtrArray::replace(a1, v46, v20);
          }
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v20;
      ++v21;
    }
    while ((uint64_t)v20 < *(int *)a1);
  }
  v47 = (CI::Node *)operator new();
  return CI::ProcessorNode::ProcessorNode(v47, (unsigned int *)a1, a2, a3, (__int128 *)a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

void CI::ProcessorNode::render(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, double *a8)
{
  NSObject *v12;
  os_signpost_id_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  NSObject *v26;
  os_signpost_id_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _OWORD *v33;
  _OWORD *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t (**v37)(void);
  const void *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  int i;
  CGFloat *v43;
  int v44;
  uint64_t v45;
  CFTypeRef v46;
  CFTypeRef v47;
  NSObject *v48;
  os_signpost_id_t v49;
  NSObject *v50;
  _BYTE *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  NSObject *v57;
  os_signpost_id_t v58;
  NSObject *v59;
  uint64_t v60;
  CFTypeRef cf;
  __n128 v63;
  void *__p;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  _QWORD *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint8_t buf[4];
  _QWORD v79[9];
  CGRect v80;

  *(_QWORD *)((char *)&v79[7] + 4) = *MEMORY[0x1E0C80C00];
  if (CI_VERBOSE_SIGNPOSTS())
  {
    v12 = ci_signpost_log_render();
    v13 = *((int *)a1 + 9) | (unint64_t)((*(uint64_t (**)(_QWORD *))(*a3 + 272))(a3) << 32);
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
    {
      v14 = a1[20];
      *(_DWORD *)buf = 138543362;
      v79[0] = v14;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v13, "processor_render", "%{public}@", buf, 0xCu);
    }
  }
  v15 = (*(uint64_t (**)(_QWORD *))(*a3 + 272))(a3);
  TimerBase::TimerBase((uint64_t)buf, v15, *((_DWORD *)a1 + 9), (uint64_t)"processor_render", 15);
  v17 = *a4;
  v16 = a4[1];
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v18 = v16 - v17;
  v19 = (v16 - v17) >> 3;
  if (v16 == v17)
  {
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    __p = 0;
    v65 = 0;
    v66 = 0;
  }
  else
  {
    std::vector<unsigned long>::__vallocate[abi:nn180100](&v73, (v16 - v17) >> 3);
    v20 = (char *)v74;
    bzero(v74, v16 - v17);
    v74 = &v20[v18];
    v70 = 0;
    v71 = 0;
    v72 = 0;
    std::vector<CI::Perspective::Line>::__vallocate[abi:nn180100](&v70, (v16 - v17) >> 3);
    v21 = v71;
    v22 = (char *)&v71[2 * v19];
    v23 = 16 * v19;
    do
    {
      *v21 = 0;
      v21 += 2;
      v23 -= 16;
    }
    while (v23);
    v71 = v22;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    std::vector<unsigned long>::__vallocate[abi:nn180100](&v67, (v16 - v17) >> 3);
    v24 = (char *)v68;
    bzero(v68, v16 - v17);
    v68 = &v24[v18];
    __p = 0;
    v65 = 0;
    v66 = 0;
    std::vector<CGRect>::__vallocate[abi:nn180100](&__p, (v16 - v17) >> 3);
    v25 = (char *)v65;
    bzero(v65, 4 * v18);
    v65 = &v25[4 * v18];
  }
  if (CI_VERBOSE_SIGNPOSTS())
  {
    v26 = ci_signpost_log_render();
    v27 = *((int *)a1 + 9) | (unint64_t)((*(uint64_t (**)(_QWORD *))(*a3 + 272))(a3) << 32);
    if (v27 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v26))
    {
      v28 = a1[20];
      LODWORD(v76) = 138543362;
      *(_QWORD *)((char *)&v76 + 4) = v28;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v26, OS_SIGNPOST_INTERVAL_BEGIN, v27, "processor_prepinputs", "%{public}@", (uint8_t *)&v76, 0xCu);
    }
  }
  v29 = (*(uint64_t (**)(_QWORD *))(*a3 + 272))(a3);
  TimerBase::TimerBase((uint64_t)&v76, v29, *((_DWORD *)a1 + 9), (uint64_t)"processor_prepinputs", 0);
  v60 = v16;
  if (v16 != v17)
  {
    v30 = 0;
    v31 = 0;
    do
    {
      v32 = (char *)(*(uint64_t (**)(_QWORD *, unint64_t))(*a1 + 48))(a1, v31);
      v33 = (_OWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a4 + 8 * v30) + 32))(*(_QWORD *)(*a4 + 8 * v30));
      v34 = (char *)__p + 32 * v30;
      v35 = v33[1];
      *v34 = *v33;
      v34[1] = v35;
      v36 = (***(uint64_t (****)(_QWORD))(*a4 + 8 * v30))(*(_QWORD *)(*a4 + 8 * v30));
      v37 = **(uint64_t (****)(void))(*a4 + 8 * v30);
      if (v36)
      {
        v38 = (const void *)(*v37)();
        *((_QWORD *)v73 + v30) = v38;
        RetainSurfaceFromCache(v38);
        v39 = (char *)v70 + 16 * v30;
        v63.n128_u64[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a4 + 8 * v30) + 24))(*(_QWORD *)(*a4 + 8 * v30));
        v63.n128_u64[1] = v40;
        std::vector<CI::Texture>::insert((uint64_t)&v70, v39, &v63);
        if (v32)
          goto LABEL_36;
      }
      else
      {
        v80 = *(CGRect *)v37[4]();
        if (!CGRectIsEmpty(v80))
        {
          for (i = (*(uint64_t (**)(char *))(*(_QWORD *)v32 + 16))(v32);
                i == 39;
                i = (*(uint64_t (**)(char *))(*(_QWORD *)v32 + 16))(v32))
          {
            v32 = (char *)(*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)v32 + 48))(v32, 0);
          }
          v43 = (CGFloat *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a4 + 8 * v30) + 32))(*(_QWORD *)(*a4 + 8 * v30));
          v63 = 0uLL;
          v44 = (*(uint64_t (**)(char *))(*(_QWORD *)v32 + 16))(v32);
          if (v44 > 45)
          {
            if (v44 != 46)
            {
              if (v44 == 48)
                std::vector<CI::Texture>::insert((uint64_t)&v70, (char *)v70 + 16 * v30, v32 + 48);
              goto LABEL_36;
            }
            CI::SurfaceNode::surfaceForROI((uint64_t)v32, (uint64_t)a3, (uint64_t)&v63, (__IOSurface **)&cf, *v43, v43[1], v43[2], v43[3]);
          }
          else
          {
            if (v44 != 29)
            {
              if (v44 == 44)
              {
                v45 = CI::ProviderNode::surfaceForROI((uint64_t)v32, a3, v43, (uint64_t)&v63);
                *((_QWORD *)v73 + v30) = v45;
              }
LABEL_36:
              v41 = (*(uint64_t (**)(char *))(*(_QWORD *)v32 + 384))(v32);
              goto LABEL_37;
            }
            CI::CGNode::surfaceForROI((uint64_t)v32, (uint64_t)a3, v43, (uint64_t)&v63, (__IOSurface **)&cf);
          }
          v46 = cf;
          cf = 0;
          *((_QWORD *)v73 + v30) = v46;
          v47 = cf;
          cf = 0;
          if (v47)
            CFRelease(v47);
          goto LABEL_36;
        }
        *((_QWORD *)v73 + v30) = 0;
        if (v32)
          goto LABEL_36;
      }
      v41 = 0;
LABEL_37:
      *((_QWORD *)v67 + v30) = v41;
      v30 = (v31 + 1);
      v31 = v30;
    }
    while (v19 > v30);
  }
  if (CI_VERBOSE_SIGNPOSTS())
  {
    v48 = ci_signpost_log_render();
    v49 = *((_QWORD *)&v76 + 1);
    if ((unint64_t)(*((_QWORD *)&v76 + 1) - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v50 = v48;
      if (os_signpost_enabled(v48))
      {
        v63.n128_u16[0] = 0;
        _os_signpost_emit_with_name_impl(&dword_1921E4000, v50, OS_SIGNPOST_INTERVAL_END, v49, "processor_prepinputs", (const char *)&unk_192520C83, (uint8_t *)&v63, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)&v76);
  v51 = (_BYTE *)a1[18];
  if (v51)
  {
    v52 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
    v77 = 0;
    v76 = 0uLL;
    std::vector<BOOL>::__init_with_size[abi:nn180100]<BOOL *,BOOL *>(&v76, v51, &v51[v52], v52);
  }
  else
  {
    v76 = 0uLL;
    v77 = 0;
  }
  v53 = a1[8];
  (*(void (**)(_QWORD *))(*a1 + 384))(a1);
  (*(void (**)(uint64_t, void **, void **, void **, void **, __int128 *, uint64_t, double, double, double, double))(v53 + 16))(v53, &v73, &v70, &v67, &__p, &v76, a5, *a8, a8[1], a8[2], a8[3]);
  if (v60 != v17)
  {
    v54 = 0;
    v55 = 1;
    do
    {
      ReturnSurfaceToCache(*((_QWORD *)v73 + v54));
      v54 = v55;
    }
    while (v19 > v55++);
  }
  if ((_QWORD)v76)
    operator delete((void *)v76);
  if (__p)
  {
    v65 = __p;
    operator delete(__p);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
  if (CI_VERBOSE_SIGNPOSTS())
  {
    v57 = ci_signpost_log_render();
    v58 = *(_QWORD *)((char *)v79 + 4);
    if ((unint64_t)(*(_QWORD *)((char *)v79 + 4) - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v59 = v57;
      if (os_signpost_enabled(v57))
      {
        LOWORD(v76) = 0;
        _os_signpost_emit_with_name_impl(&dword_1921E4000, v59, OS_SIGNPOST_INTERVAL_END, v58, "processor_render", (const char *)&unk_192520C83, (uint8_t *)&v76, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)buf);
}

char *std::vector<CI::Texture>::insert(uint64_t a1, char *__src, __n128 *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 4) + 1;
    if (v15 >> 60)
      abort();
    v16 = (__src - v14) >> 4;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 3 > v15)
      v15 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::Perspective::Line>>(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[16 * v16];
    v23 = v22;
    v24 = &v19[16 * v18];
    std::__split_buffer<CI::Texture>::push_back((__n128 **)&__p, a3);
    v4 = (char *)std::vector<CI::Texture>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(__n128 *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 16;
  }
  else
  {
    v10 = __src + 16;
    v11 = v6 - 16;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_OWORD *)v11;
      v11 += 16;
      *(_OWORD *)v12 = v13;
      v12 += 16;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-16 * ((v6 - v10) >> 4)], __src, v6 - v10);
    *(__n128 *)v4 = *a3;
  }
  return v4;
}

char *std::vector<CI::Texture>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 4) + 1;
    if (v14 >> 60)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 4;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 3 > v14)
      v14 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::Perspective::Line>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[16 * v16];
    __p = v19;
    v27 = v20;
    v29 = &v19[16 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 3;
        v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::Perspective::Line>>(v8, v22);
        v20 = &v23[16 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[16 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 16 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_OWORD *)v20 = *(_OWORD *)v3;
    v28 = v20 + 16;
    v4 = (char *)std::vector<CI::Texture>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 16;
  }
  else
  {
    v9 = __src + 16;
    v10 = v6 - 16;
    v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_OWORD *)v10;
      v10 += 16;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-16 * ((v6 - v9) >> 4)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 16 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_OWORD *)v4 = *(_OWORD *)v3;
  }
  return v4;
}

uint64_t CI::ConvertNode::ConvertNode(uint64_t a1, CI::Node *a2, signed int a3, char a4, const void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFString *v13;
  unsigned int v14;
  int v15;
  int v16;
  char is_alpha_one;
  unsigned int v18;
  char is_image_type;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)&v24 = (*(double (**)(CI::Node *))(*(_QWORD *)a2 + 160))(a2);
  *((_QWORD *)&v24 + 1) = v10;
  v25 = v11;
  v26 = v12;
  v13 = CI::cfname_for_conversion(a3);
  v14 = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)a2 + 16))(a2);
  if ((CI::is_image_type(v14) & 1) != 0)
    v15 = 0;
  else
    v15 = CI::input_format_for_conversion(a3);
  v16 = CI::output_format_for_conversion(a3);
  is_alpha_one = CI::conversion_is_alpha_one(a3);
  v18 = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)a2 + 16))(a2);
  is_image_type = CI::is_image_type(v18);
  CI::ProcessorNode::ProcessorNode(a1, a2, 0, a5, &v24, v13, a3, 0, 0, v15, v16, 0, is_alpha_one, 0, 0, a4, is_image_type ^ 1);
  *(_QWORD *)a1 = &off_1E2EB8840;
  *(_QWORD *)(a1 + 48) = &unk_1E2EB8A00;
  *(_DWORD *)(a1 + 176) = a3;
  *(double *)(a1 + 184) = (*(double (**)(CI::Node *))(*(_QWORD *)a2 + 168))(a2);
  *(_QWORD *)(a1 + 192) = v20;
  *(_QWORD *)(a1 + 200) = v21;
  *(_QWORD *)(a1 + 208) = v22;
  return a1;
}

CI::Node *CI::ConvertNode::append_to_tree(CI::Object *this, signed int a2)
{
  CI::Node *v2;
  int v4;
  uint64_t v5;
  char v7;
  CI::CropNode *v8;
  _QWORD v9[4];
  signed int v10;
  CGRect v11;

  v2 = this;
  if (a2)
  {
    if ((*(unsigned int (**)(CI::Object *))(*(_QWORD *)this + 16))(this) == 42
      && ((v4 = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)v2 + 424))(v2), a2 == 23) && v4 == 24
       || a2 == 25 && v4 == 26
       || a2 == 6 && v4 == 5
       || a2 == 5 && v4 == 6
       || a2 == 21 && v4 == 22
       || a2 == 22 && v4 == 21
       || a2 == 18 && v4 == 17
       || a2 == 20 && v4 == 19
       || a2 == 15 && v4 == 16
       || a2 == 16 && v4 == 15
       || a2 == 12 && v4 == 11
       || a2 == 14 && v4 == 13))
    {
      v5 = (*(uint64_t (**)(CI::Node *, _QWORD))(*(_QWORD *)v2 + 48))(v2, 0);
      v2 = (CI::Node *)v5;
      if (v5)
        CI::Object::ref(v5);
    }
    else
    {
      v7 = (*(int (**)(CI::Node *))(*(_QWORD *)v2 + 16))(v2) < 41
        || (*(int (**)(CI::Node *))(*(_QWORD *)v2 + 16))(v2) > 42
        || *((_BYTE *)v2 + 139) != 0;
      v8 = (CI::CropNode *)operator new();
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 0x40000000;
      v9[2] = ___ZN2CI11ConvertNode14append_to_treeEPNS_4NodeENS_11ConvertTypeE_block_invoke;
      v9[3] = &__block_descriptor_tmp_25;
      v10 = a2;
      CI::ConvertNode::ConvertNode((uint64_t)v8, v2, a2, v7, v9);
      v11.origin.x = (*(double (**)(CI::Node *))(*(_QWORD *)v2 + 168))(v2);
      v2 = (CI::Node *)CI::CropNode::append_to_tree(v8, (CI::Node *)1, v11);
      CI::Object::unref(v8);
    }
  }
  else if (this)
  {
    return (CI::Node *)CI::Object::ref((uint64_t)this);
  }
  return v2;
}

void ___ZN2CI11ConvertNode14append_to_treeEPNS_4NodeENS_11ConvertTypeE_block_invoke(uint64_t a1, __IOSurface ***a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, uint64_t a8, CGFloat **a9, uint64_t a10, __IOSurface *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  __IOSurface *v17;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  unint64_t height;
  unint64_t width;
  int y;
  int x;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  BOOL v39;
  BOOL v41;
  int8x16_t v42[9];
  _DWORD v43[2];
  unint64_t v44;
  unint64_t v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;

  v17 = **a2;
  if (!v17)
    return;
  v24 = **a9;
  v25 = (*a9)[1];
  v26 = (*a9)[2];
  v27 = (*a9)[3];
  v46.origin.x = v24;
  v46.origin.y = v25;
  v46.size.width = v26;
  v46.size.height = v27;
  if (CGRectIsNull(v46))
  {
    height = 0;
    width = 0;
    y = 0x7FFFFFFF;
    x = 0x7FFFFFFF;
  }
  else
  {
    v47.origin.x = v24;
    v47.origin.y = v25;
    v47.size.width = v26;
    v47.size.height = v27;
    if (CGRectIsInfinite(v47))
    {
      y = -2147483647;
      height = 0xFFFFFFFFLL;
      width = 0xFFFFFFFFLL;
      x = -2147483647;
    }
    else
    {
      v48.origin.x = v24;
      v48.origin.y = v25;
      v48.size.width = v26;
      v48.size.height = v27;
      v49 = CGRectInset(v48, 0.000001, 0.000001);
      v50 = CGRectIntegral(v49);
      x = (int)v50.origin.x;
      y = (int)v50.origin.y;
      width = (unint64_t)v50.size.width;
      height = (unint64_t)v50.size.height;
    }
  }
  v51.origin.x = a3;
  v51.origin.y = a4;
  v51.size.width = a5;
  v51.size.height = a6;
  if (CGRectIsNull(v51))
  {
    v32 = 0;
    v33 = 0;
    v34 = 0x7FFFFFFF;
    v35 = 0x7FFFFFFF;
  }
  else
  {
    v52.origin.x = a3;
    v52.origin.y = a4;
    v52.size.width = a5;
    v52.size.height = a6;
    if (CGRectIsInfinite(v52))
    {
      v34 = -2147483647;
      v32 = 0xFFFFFFFFLL;
      v33 = 0xFFFFFFFFLL;
      v35 = -2147483647;
    }
    else
    {
      v53.origin.x = a3;
      v53.origin.y = a4;
      v53.size.width = a5;
      v53.size.height = a6;
      v54 = CGRectInset(v53, 0.000001, 0.000001);
      v55 = CGRectIntegral(v54);
      v35 = (int)v55.origin.x;
      v34 = (int)v55.origin.y;
      v33 = (unint64_t)v55.size.width;
      v32 = (unint64_t)v55.size.height;
    }
  }
  if (x == -2147483647 && y == -2147483647 && width == 0xFFFFFFFF && height == 0xFFFFFFFF)
    goto LABEL_16;
  if (v35 != 0x7FFFFFFF)
  {
    if (v35 == -2147483647 && v34 == -2147483647 && v33 == 0xFFFFFFFF && v32 == 0xFFFFFFFF)
      return;
LABEL_30:
    if (height)
      v39 = 0;
    else
      v39 = width == 0;
    v41 = v39 && y == 0x7FFFFFFF && x == 0x7FFFFFFF;
    if (v41 || v35 < x || x + (int)width < v35 + (int)v33 || v34 < y || y + (int)height < v34 + (int)v32)
      return;
    goto LABEL_16;
  }
  if (v34 != 0x7FFFFFFF || v33 || v32)
    goto LABEL_30;
LABEL_16:
  v36 = v35 - x;
  v37 = v34 - y;
  v43[0] = v36;
  v43[1] = v34 - y;
  v44 = v33;
  v45 = v32;
  if (a11)
  {
    IOSurfaceGetPlaneCount(v17);
    CI::Bitmap::Bitmap((CI::Bitmap *)v42, 0);
    CI::convert_buffer_to_texture(a17, v17, v36, v37, v42, a11, a13, a14, *(_DWORD *)(a1 + 32));
LABEL_18:
    CI::Bitmap::~Bitmap((CI::Bitmap *)v42);
    return;
  }
  if (!IOSurfaceLock(v17, 1u, 0))
  {
    v38 = CI::input_format_for_conversion(*(_DWORD *)(a1 + 32));
    CI::Bitmap::Bitmap(v42, v17, v43, v38);
    CI::convert_buffer_to_texture(a17, v17, 0, 0, v42, 0, a13, a14, *(_DWORD *)(a1 + 32));
    IOSurfaceUnlock(v17, 1u, 0);
    goto LABEL_18;
  }
}

void CI::ConvertNode::render(int *a1, uint64_t a2, _QWORD *a3, uint64_t *a4, __IOSurface *a5, uint64_t a6, uint64_t a7, CGRect *a8)
{
  uint64_t v16;
  CGImageRef *v17;
  CGRect *v18;
  unint64_t v19;
  uint64_t v20;
  CGImage *v21;
  NSObject *v22;
  CFTypeRef v23;
  NSObject *v24;
  os_signpost_id_t v25;
  NSObject *v26;
  __IOSurface *v27;
  os_signpost_id_t spid;
  NSObject *log;
  __IOSurface *v30;
  CGRect buf[4];
  CFTypeRef cf;
  _BYTE v33[8];
  os_signpost_id_t v34;
  __IOSurface *v35;
  _QWORD v36[3];

  v16 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)a1 + 48))(a1, 0);
  if (!v16)
    goto LABEL_24;
  v17 = (CGImageRef *)v16;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16) != 29)
    goto LABEL_24;
  v18 = (CGRect *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)*a4 + 32))(*(_QWORD *)*a4);
  v36[0] = 0;
  v36[1] = 0;
  CI::CGNode::surfaceForROI((uint64_t)v17, (uint64_t)a3, &v18->origin.x, (uint64_t)v36, &v35);
  v30 = v35;
  if (v35)
  {
    ReturnSurfaceToCache((uint64_t)v35);
  }
  else
  {
    if (CI_VERBOSE_SIGNPOSTS())
    {
      log = ci_signpost_log_render();
      v19 = a1[9] | (unint64_t)((*(uint64_t (**)(_QWORD *))(*a3 + 272))(a3) << 32);
      if (v19 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        spid = v19;
        if (os_signpost_enabled(log))
        {
          LOWORD(buf[0].origin.x) = 0;
          _os_signpost_emit_with_name_impl(&dword_1921E4000, log, OS_SIGNPOST_INTERVAL_BEGIN, spid, "convert_processor", (const char *)&unk_192520C83, (uint8_t *)buf, 2u);
        }
      }
    }
    v20 = (*(uint64_t (**)(_QWORD *))(*a3 + 272))(a3);
    TimerBase::TimerBase((uint64_t)v33, v20, a1[9], (uint64_t)"convert_processor", 15);
    buf[0] = CGRectIntersection(*v18, *a8);
    CI::CGNode::cgImageForROI(v17, buf, (CGImageRef *)&cf);
    v21 = (CGImage *)cf;
    if (cf)
    {
      CI::Bitmap::Bitmap((CI::Bitmap *)buf);
      if ((CI::Bitmap::init((CI::Bitmap *)buf, v21) & 1) != 0)
      {
        CI::convert_buffer_to_texture((uint64_t)a3, 0, 0, 0, (int8x16_t *)buf, a5, a6, a7, a1[44]);
      }
      else
      {
        v22 = ci_logger_render();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          CI::ConvertNode::render((uint64_t)v21, v22);
      }
      CI::Bitmap::~Bitmap((CI::Bitmap *)buf);
      v23 = cf;
      cf = 0;
      if (v23)
        CFRelease(v23);
    }
    if (CI_VERBOSE_SIGNPOSTS())
    {
      v24 = ci_signpost_log_render();
      v25 = v34;
      if (v34 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v26 = v24;
        if (os_signpost_enabled(v24))
        {
          LOWORD(buf[0].origin.x) = 0;
          _os_signpost_emit_with_name_impl(&dword_1921E4000, v26, OS_SIGNPOST_INTERVAL_END, v25, "convert_processor", (const char *)&unk_192520C83, (uint8_t *)buf, 2u);
        }
      }
    }
    TimerBase::~TimerBase((TimerBase *)v33);
  }
  v27 = v35;
  v35 = 0;
  if (v27)
    CFRelease(v27);
  if (v30)
LABEL_24:
    CI::ProcessorNode::render(a1, a2, a3, a4, (uint64_t)a5, a6, a7, &a8->origin.x);
}

uint64_t CI::ConvertNode::print_for_graph_core(uint64_t a1, FILE *a2)
{
  const char *v3;

  v3 = CI::name_for_conversion(*(_DWORD *)(a1 + 176));
  return fputs(v3, a2);
}

uint64_t CI::ProcessorNode::type(CI::ProcessorNode *this)
{
  return 41;
}

uint64_t CI::ProcessorNode::description(CI::ProcessorNode *this)
{
  return *((_QWORD *)this + 20);
}

uint64_t CI::NodeWithChildren::child_count(CI::NodeWithChildren *this)
{
  unsigned int *v1;

  v1 = (unsigned int *)*((_QWORD *)this + 5);
  if (v1)
    return *v1;
  else
    return 0;
}

uint64_t CI::NodeWithChildren::child(CI::NodeWithChildren *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((a2 & 0x80000000) != 0)
    return 0;
  if ((*(int (**)(CI::NodeWithChildren *))(*(_QWORD *)this + 40))(this) <= (int)a2)
    return 0;
  v4 = *((_QWORD *)this + 5);
  if (a2 > 9)
    v5 = *(_QWORD *)(v4 + 16) + 8 * (a2 - 10);
  else
    v5 = v4 + 8 * a2 + 24;
  return *(_QWORD *)v5;
}

uint64_t CI::ProcessorNode::shape_for_graphviz(CI::ProcessorNode *this)
{
  return 1;
}

uint64_t CI::ProcessorNode::color_for_graphviz(CI::ProcessorNode *this)
{
  return 1;
}

double CI::ProcessorNode::extent(CI::ProcessorNode *this)
{
  return *((double *)this + 9);
}

double CI::ProcessorNode::extent_unclamped(CI::ProcessorNode *this)
{
  return *((double *)this + 9);
}

uint64_t CI::NodeWithChildren::child_type_is_image(CI::NodeWithChildren *this)
{
  return 1;
}

void CI::NodeWithChildren::set_child(CI::SerialObjectPtrArray **this, CI::Node *a2, int a3)
{
  if ((a3 & 0x80000000) == 0 && (*((int (**)(CI::SerialObjectPtrArray **))*this + 5))(this) > a3)
    CI::SerialObjectPtrArray::replace(this[5], a2, a3);
}

uint64_t CI::ProcessorNode::may_be_extended_range(CI::ProcessorNode *this)
{
  return 1;
}

uint64_t CI::ProcessorNode::alpha_one(CI::ProcessorNode *this)
{
  if (*((_BYTE *)this + 154)
    || ((*(uint64_t (**)(CI::ProcessorNode *))(*(_QWORD *)this + 272))(this) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (*(uint64_t (**)(CI::ProcessorNode *))(*(_QWORD *)this + 280))(this);
  }
}

uint64_t CI::ProcessorNode::output_is_luma(CI::ProcessorNode *this)
{
  uint64_t result;

  result = CI::format_is_luminance(*((_DWORD *)this + 30));
  if ((_DWORD)result)
    return (*(uint64_t (**)(CI::ProcessorNode *))(*(_QWORD *)this + 264))(this);
  return result;
}

uint64_t CI::ProcessorNode::output_format(CI::ProcessorNode *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t CI::ProcessorNode::is_flipped(CI::ProcessorNode *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'CI::ProcessorNode::type(CI::ProcessorNode *this)
{
  return 41;
}

void CI::ConvertNode::~ConvertNode(CI::ConvertNode *this)
{
  CI::ProcessorNode::~ProcessorNode(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::ConvertNode::type(CI::ConvertNode *this)
{
  return 42;
}

double CI::ConvertNode::extent_unclamped(CI::ConvertNode *this)
{
  return *((double *)this + 23);
}

uint64_t CI::ConvertNode::is_flipped(CI::ConvertNode *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = (*(uint64_t (**)(CI::ConvertNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return CI::is_image_type(v2) ^ 1;
}

uint64_t CI::ConvertNode::conversion(CI::ConvertNode *this)
{
  return *((unsigned int *)this + 44);
}

uint64_t `non-virtual thunk to'CI::ConvertNode::type(CI::ConvertNode *this)
{
  return 42;
}

void `non-virtual thunk to'CI::ConvertNode::~ConvertNode(CI::ConvertNode *this)
{
  CI::ProcessorNode::~ProcessorNode((CI::ConvertNode *)((char *)this - 48));
}

{
  CI::ProcessorNode::~ProcessorNode((CI::ConvertNode *)((char *)this - 48));
  JUMPOUT(0x194025AACLL);
}

double CI::Node::extent(CI::Node *this)
{
  return *MEMORY[0x1E0C9D628];
}

double CI::Node::extent_unclamped(CI::Node *this)
{
  return *MEMORY[0x1E0C9D628];
}

uint64_t CI::Node::alpha_one(CI::Node *this)
{
  return 0;
}

uint64_t CI::Node::output_depth(CI::Node *this)
{
  return 0;
}

__n128 std::__split_buffer<CI::Texture>::push_back(__n128 **a1, __n128 *a2)
{
  __n128 *v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 *v13;
  int64_t v14;
  __n128 *v15;
  unint64_t v16;
  __n128 *v17;
  uint64_t v18;
  __n128 *v19;
  __n128 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __n128 *v25;
  __n128 result;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = a1[1];
    v6 = (char *)v5 - (char *)*a1;
    if (v5 <= *a1)
    {
      if (v4 == *a1)
        v16 = 1;
      else
        v16 = ((char *)v4 - (char *)*a1) >> 3;
      v17 = (__n128 *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::Perspective::Line>>((uint64_t)a1[4], v16);
      v19 = &v17[v16 >> 2];
      v20 = a1[1];
      v4 = v19;
      v21 = (char *)a1[2] - (char *)v20;
      if (v21)
      {
        v4 = (__n128 *)((char *)v19 + (v21 & 0xFFFFFFFFFFFFFFF0));
        v22 = 16 * (v21 >> 4);
        v23 = (char *)&v17[v16 >> 2];
        do
        {
          v24 = (__int128)*v20++;
          *(_OWORD *)v23 = v24;
          v23 += 16;
          v22 -= 16;
        }
        while (v22);
      }
      v25 = *a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[v18];
      if (v25)
      {
        operator delete(v25);
        v4 = a1[2];
      }
    }
    else
    {
      v7 = v6 >> 4;
      v8 = v6 >> 4 < -1;
      v9 = (v6 >> 4) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-v12];
      v14 = (char *)v4 - (char *)v5;
      if (v4 != v5)
      {
        memmove(&v5[-v12], v5, (char *)v4 - (char *)v5);
        v4 = a1[1];
      }
      v15 = &v4[v11];
      v4 = (__n128 *)((char *)v13 + v14);
      a1[1] = v15;
      a1[2] = (__n128 *)((char *)v13 + v14);
    }
  }
  result = *a2;
  *v4 = *a2;
  ++a1[2];
  return result;
}

void *std::vector<CI::Texture>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void *std::vector<BOOL>::__vallocate[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    abort();
  result = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

_QWORD *std::vector<BOOL>::__init_with_size[abi:nn180100]<BOOL *,BOOL *>(_QWORD *result, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  _QWORD *v7;

  if (a4)
  {
    v7 = result;
    std::vector<BOOL>::__vallocate[abi:nn180100](result, a4);
    return std::vector<BOOL>::__construct_at_end<BOOL *,BOOL *>(v7, a2, a3, a4);
  }
  return result;
}

_QWORD *std::vector<BOOL>::__construct_at_end<BOOL *,BOOL *>(_QWORD *result, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = result[1];
  v5 = v4 + a4;
  result[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*result + 8 * v6) = 0;
  }
  if (a2 != a3)
  {
    v7 = v4 & 0x3F;
    v8 = (uint64_t *)(*result + 8 * (v4 >> 6));
    do
    {
      v9 = 1 << v7;
      if (*a2)
        v10 = *v8 | v9;
      else
        v10 = *v8 & ~v9;
      *v8 = v10;
      ++a2;
      v8 += v7 == 63;
      if (v7 == 63)
        v7 = 0;
      else
        ++v7;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t CI::InstanceCounted<(CI::Type)41>::type()
{
  return 41;
}

_QWORD *CI::InstanceCounted<(CI::Type)41>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBCB8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[39]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[39]));
  return result;
}

void CI::InstanceCounted<(CI::Type)41>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBCB8;
  do
    v1 = __ldaxr(&dword_1ECF872F0[39]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[39]));
  JUMPOUT(0x194025AACLL);
}

__guard CI::ProgramNode::queue_pool(CI::ProgramNode *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;
  uint64_t v5;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      v5 = operator new();
      CI::ProgramNode::queue_pool(void)::pool = QueuePool<4>::QueuePool(v5, "CI::MainProgramArgsQ");
    }
  }
  return v2[41];
}

CI::ProgramNode *CI::ProgramNode::ProgramNode(CI::ProgramNode *this, CI::Node *a2, CI::SerialStringArray *a3, CI::SerialObjectPtrArray *a4, const CI::GeneralKernelNode *a5)
{
  CI::Node *v10;
  unsigned int v11;
  char *v12;
  __guard v13;
  char v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t v25;
  const CI::SerialRectArray *v26;
  uint64_t v28[2];

  v10 = CI::Node::Node(this);
  *((_QWORD *)v10 + 5) = off_1E2EBBE48;
  do
    v11 = __ldaxr(&dword_1ECF872F0[50]);
  while (__stlxr(v11 + 1, &dword_1ECF872F0[50]));
  *(_QWORD *)this = &off_1E2EB8AE8;
  *((_QWORD *)this + 5) = &unk_1E2EB8C98;
  *((_QWORD *)this + 11) = 0;
  v12 = (char *)this + 88;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_QWORD *)this + 12) = 0;
  v13 = CI::ProgramNode::queue_pool(v10);
  QueuePool<4>::get(v13, 0, (_QWORD *)this + 13);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  if (a5)
    v14 = (*(uint64_t (**)(const CI::GeneralKernelNode *))(*(_QWORD *)a5 + 296))(a5) ^ 1;
  else
    v14 = 0;
  *((_BYTE *)this + 136) = v14;
  *((_BYTE *)this + 137) = a5 != 0;
  *(_QWORD *)((char *)this + 140) = 0;
  *((_BYTE *)this + 148) = 0;
  *((_DWORD *)this + 38) = 1;
  *((_QWORD *)this + 20) = 0;
  *((_BYTE *)this + 168) = 0;
  if (a2)
    v15 = CI::Object::ref((uint64_t)a2);
  else
    v15 = 0;
  *((_QWORD *)this + 6) = v15;
  *((_QWORD *)this + 7) = a3;
  *((_QWORD *)this + 8) = a4;
  v16 = *(_DWORD *)a4;
  if (*(int *)a4 >= 1)
  {
    v17 = 0;
    do
    {
      if (v17 > 9)
        v18 = (unint64_t *)(*((_QWORD *)a4 + 2) + 8 * (v17 - 10));
      else
        v18 = (unint64_t *)((char *)a4 + 8 * v17 + 24);
      v19 = *v18;
      v20 = *(_QWORD **)v12;
      if (!*(_QWORD *)v12)
        goto LABEL_25;
      v21 = (char *)this + 88;
      do
      {
        v22 = v20[4];
        v23 = v22 >= v19;
        if (v22 >= v19)
          v24 = v20;
        else
          v24 = v20 + 1;
        if (v23)
          v21 = (char *)v20;
        v20 = (_QWORD *)*v24;
      }
      while (*v24);
      if (v21 == v12 || v19 < *((_QWORD *)v21 + 4))
      {
LABEL_25:
        v25 = *((_QWORD *)this + 12);
        v28[0] = v19;
        v28[1] = v25;
        std::__tree<std::__value_type<CI::Object const*,unsigned long>,std::__map_value_compare<CI::Object const*,std::__value_type<CI::Object const*,unsigned long>,std::less<CI::Object const*>,true>,std::allocator<std::__value_type<CI::Object const*,unsigned long>>>::__emplace_unique_key_args<CI::Object const*,std::pair<CI::Object const*,unsigned long>>((uint64_t **)this + 10, (unint64_t *)v28, v28);
        v16 = *(_DWORD *)a4;
      }
      ++v17;
    }
    while ((uint64_t)v17 < v16);
  }
  v26 = (const CI::SerialRectArray *)CI::Node::rois(a2);
  CI::Node::set_rois(this, v26);
  return this;
}

void QueuePool<4>::get(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  NSObject *v4;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v4 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN9QueuePoolILi4EE3getEP21dispatch_queue_attr_s_block_invoke;
  block[3] = &unk_1E2EC81E8;
  block[4] = &v6;
  block[5] = a1;
  block[6] = a2;
  dispatch_sync(v4, block);
  *a3 = v7[3];
  a3[1] = dispatch_group_create();
  _Block_object_dispose(&v6, 8);
}

void CI::ProgramNode::~ProgramNode(CI::ProgramNode *this)
{
  NSObject **v2;
  CI::Object *v3;
  CI::SerialStringArray *v4;
  CI::SerialObjectPtrArray *v5;
  CI::SerialStringArray *v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E2EB8AE8;
  *((_QWORD *)this + 5) = &unk_1E2EB8C98;
  v2 = (NSObject **)((char *)this + 104);
  dispatch_sync(*((dispatch_queue_t *)this + 13), &__block_literal_global_159);
  CI::ProgramNode::release_program_and_arguments(this);
  v3 = (CI::Object *)*((_QWORD *)this + 6);
  if (v3)
    CI::Object::unref(v3);
  v4 = (CI::SerialStringArray *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    CI::SerialStringArray::~SerialStringArray(v4);
    MEMORY[0x194025AAC]();
  }
  v5 = (CI::SerialObjectPtrArray *)*((_QWORD *)this + 8);
  if (v5)
  {
    CI::SerialObjectPtrArray::~SerialObjectPtrArray(v5);
    MEMORY[0x194025AAC]();
  }
  v6 = (CI::SerialStringArray *)*((_QWORD *)this + 9);
  if (v6)
  {
    CI::SerialStringArray::~SerialStringArray(v6);
    MEMORY[0x194025AAC]();
  }
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  Queue::~Queue(v2);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  *((_QWORD *)this + 5) = off_1E2EBBE48;
  do
    v7 = __ldaxr(&dword_1ECF872F0[50]);
  while (__stlxr(v7 - 1, &dword_1ECF872F0[50]));
  CI::Node::~Node(this);
}

{
  CI::ProgramNode::~ProgramNode(this);
  JUMPOUT(0x194025AACLL);
}

CI::SerialObjectPtrArray *CI::ProgramNode::release_program_and_arguments(CI::ProgramNode *this)
{
  CI::Object *v2;
  CI::SerialObjectPtrArray *result;

  v2 = (CI::Object *)*((_QWORD *)this + 15);
  if (v2)
    CI::Object::unref(v2);
  *((_QWORD *)this + 15) = 0;
  result = (CI::SerialObjectPtrArray *)*((_QWORD *)this + 16);
  if (result)
  {
    CI::SerialObjectPtrArray::~SerialObjectPtrArray(result);
    result = (CI::SerialObjectPtrArray *)MEMORY[0x194025AAC]();
  }
  *((_QWORD *)this + 16) = 0;
  return result;
}

void `non-virtual thunk to'CI::ProgramNode::~ProgramNode(CI::ProgramNode *this)
{
  CI::ProgramNode::~ProgramNode((CI::ProgramNode *)((char *)this - 40));
}

{
  CI::ProgramNode::~ProgramNode((CI::ProgramNode *)((char *)this - 40));
  JUMPOUT(0x194025AACLL);
}

void CI::ProgramNode::traverse_graph_preorder_stoppable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[5];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v9 = malloc_type_calloc(0x400uLL, 1uLL, 0x7029249AuLL);
  v4 = *(_QWORD *)(a1 + 48);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK2CI11ProgramNode33traverse_graph_preorder_stoppableEU13block_pointerFbPNS_4NodeEPKS1_iiiE_block_invoke;
  v5[3] = &unk_1E2EC0EC0;
  v5[5] = &v6;
  v5[6] = a1;
  v5[4] = a2;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZN2CI4Node27traverse_preorder_stoppableEU13block_pointerFbPS0_PKS0_iiE_block_invoke;
  v10[3] = &unk_1E2EC8160;
  v10[4] = v5;
  CI::GraphObject::traverse_preorder_stoppable(v4, 0, 0, 0, (uint64_t)v10);
  free((void *)v7[3]);
  _Block_object_dispose(&v6, 8);
}

uint64_t ___ZNK2CI11ProgramNode33traverse_graph_preorder_stoppableEU13block_pointerFbPNS_4NodeEPKS1_iiiE_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  uint64_t v6;
  int IndexOfString;
  uint64_t result;

  v6 = a1[6];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + a4) = a5 + 48;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + a4 + 1) = 0;
  IndexOfString = CI::SerialStringArray::firstIndexOfString(*(CI::SerialStringArray **)(v6 + 56), (const char *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) + 1));
  LODWORD(result) = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (IndexOfString == -1)
    return result;
  else
    return 1;
}

void CI::ProgramNode::traverse_dag(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD *v12[2];

  v8 = malloc_type_calloc(0x400uLL, 1uLL, 0xE68F0782uLL);
  v9 = *(_QWORD *)(a1 + 48);
  if (v9 == a2)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v8[v10++] = 48;
      v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 48))(v9, 0);
    }
    while (v9 != a2);
  }
  v12[0] = 0;
  v12[1] = 0;
  v11 = v12;
  CI::_traverse_dag((CI::SerialStringArray **)a1, a2, 0, v10, 0, 0, 0, (uint64_t)v8, (uint64_t)&v11, 0, a3, a4);
  free(v8);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&v11, v12[0]);
}

uint64_t CI::_traverse_dag(CI::SerialStringArray **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  char *v12;
  uint64_t v19;
  uint64_t IndexOfString;
  unint64_t v21;
  uint64_t result;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  BOOL v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  CI::SerialStringArray **v40;
  uint64_t v41;
  uint64_t v42[2];

  v12 = (char *)a8;
  *(_BYTE *)(a8 + (int)a4) = a5 + 48;
  v19 = (int)a4;
  v37 = (int)a4 + 1;
  *(_BYTE *)(a8 + v37) = 0;
  IndexOfString = CI::SerialStringArray::firstIndexOfString(a1[7], (const char *)(a8 + 1));
  if ((_DWORD)IndexOfString != -1)
    a2 = (*((uint64_t (**)(CI::SerialStringArray **, uint64_t))*a1 + 6))(a1, IndexOfString);
  v38 = IndexOfString;
  v21 = CI::hash_dag_node_id(a2, a7, v12);
  result = a12;
  if (a12)
  {
    result = (*(uint64_t (**)(uint64_t, unint64_t))(a12 + 16))(a12, a2);
    v23 = result ^ 1;
  }
  else
  {
    v23 = 0;
  }
  v24 = *(_QWORD **)(a9 + 8);
  if (!v24)
    goto LABEL_19;
  v25 = (_QWORD *)(a9 + 8);
  do
  {
    v26 = v24[4];
    v27 = v26 >= v21;
    if (v26 >= v21)
      v28 = v24;
    else
      v28 = v24 + 1;
    if (v27)
      v25 = v24;
    v24 = (_QWORD *)*v28;
  }
  while (*v28);
  if (v25 == (_QWORD *)(a9 + 8))
    goto LABEL_19;
  if (v21 < v25[4])
    v23 = 1;
  if (v23 == 1)
  {
LABEL_19:
    v42[0] = v21;
    result = (uint64_t)std::__tree<char const*>::__emplace_unique_key_args<char const*,char const* const&>((uint64_t **)a9, (unint64_t *)v42, v42);
    if (a10)
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, char *, int))(a10 + 16))(a10, a2, a3, a4, a5, a6, a7, v12, v38);
    v36 = a4;
    v41 = a7;
    v40 = a1;
    if (v38 == -1)
    {
      result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 40))(a2);
      if ((int)result >= 1)
      {
        v29 = result;
        v30 = 0;
        do
        {
          v31 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v30);
          v32 = v12;
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 232))(a2))
            v33 = a2;
          else
            v33 = a6;
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 232))(a2))
            v34 = v21;
          else
            v34 = v41;
          v35 = v33;
          v12 = v32;
          result = CI::_traverse_dag(v40, v31, a2, v37, v30, v35, v34, v32, a9, a10, a11, a12);
          v30 = (v30 + 1);
        }
        while (v29 != (_DWORD)v30);
      }
    }
    if (a11)
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, _QWORD, unint64_t, uint64_t, char *, int))(a11 + 16))(a11, a2, a3, v36, a5, a6, v41, v12, v38);
  }
  v12[v19] = 0;
  return result;
}

void CI::ProgramNode::traverse_dag_preorder(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD *v12[2];

  v8 = malloc_type_calloc(0x400uLL, 1uLL, 0xC49614F4uLL);
  v9 = *(_QWORD *)(a1 + 48);
  if (v9 == a2)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v8[v10++] = 48;
      v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 48))(v9, 0);
    }
    while (v9 != a2);
  }
  v12[0] = 0;
  v12[1] = 0;
  v11 = v12;
  CI::_traverse_dag((CI::SerialStringArray **)a1, a2, 0, v10, 0, 0, 0, (uint64_t)v8, (uint64_t)&v11, a3, 0, a4);
  free(v8);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&v11, v12[0]);
}

uint64_t CI::ProgramNode::child_type_is_image(CI::ProgramNode *this, int a2)
{
  const char *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  const char *v10;
  int v11;

  if (a2 < 0)
    return 0;
  if ((*(int (**)(CI::ProgramNode *))(*(_QWORD *)this + 40))(this) <= a2)
    return 0;
  v4 = *(const char **)(*(_QWORD *)(*((_QWORD *)this + 7) + 32) + 8 * a2);
  v5 = strlen(v4);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *((_QWORD *)this + 6);
  v8 = v6 - 1;
  if (v6 != 1)
  {
    v9 = v6 - 1;
    v10 = v4;
    do
    {
      v11 = *v10++;
      v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 48))(v7, (v11 - 48));
      --v9;
    }
    while (v9);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 192))(v7, v4[v8]);
}

size_t CI::ProgramNode::child_depth(CI::ProgramNode *this, int a2)
{
  if (a2 < 0 || (*(int (**)(CI::ProgramNode *))(*(_QWORD *)this + 40))(this) <= a2)
    return 0;
  else
    return strlen(*(const char **)(*(_QWORD *)(*((_QWORD *)this + 7) + 32) + 8 * a2));
}

size_t CI::ProgramNode::child_can_sample_nearest(CI::ProgramNode *this, int a2)
{
  const char *v4;
  size_t result;
  size_t v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;

  if (a2 < 0)
    return 0;
  if ((*(int (**)(CI::ProgramNode *))(*(_QWORD *)this + 40))(this) <= a2)
    return 0;
  v4 = *(const char **)(*(_QWORD *)(*((_QWORD *)this + 7) + 32) + 8 * a2);
  result = strlen(v4);
  if (result)
  {
    v6 = result;
    v7 = *((_QWORD *)this + 6);
    v8 = result - 1;
    if (result != 1)
    {
      v9 = v4;
      do
      {
        v10 = *v9++;
        v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 48))(v7, (v10 - 48));
        --v8;
      }
      while (v8);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) == 45
      && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 408))(v7))
    {
      return 1;
    }
    else
    {
      v11 = *((_QWORD *)this + 6);
      if (v6 <= 1)
        v6 = 1;
      while (1)
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        result = 0;
        if (v12 > 0x31)
          break;
        if (((1 << v12) & 0xA17EC0000000) == 0)
        {
          if (v12 == 28)
          {
            if (!CI::Affine::isOrientationWithIntegralTranslation((CI::Affine *)(v11 + 56)))
              return 0;
          }
          else
          {
            if (v12 != 49)
              return result;
            result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 192))(v11, (*v4 - 48));
            if (!(_DWORD)result)
              return result;
          }
        }
        v13 = *v4++;
        v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 48))(v11, (v13 - 48));
        if (!--v6)
          return 1;
      }
    }
  }
  return result;
}

uint64_t CI::ProgramNode::child(CI::ProgramNode *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((a2 & 0x80000000) != 0)
    return 0;
  if ((*(int (**)(CI::ProgramNode *))(*(_QWORD *)this + 40))(this) <= (int)a2)
    return 0;
  v4 = *((_QWORD *)this + 8);
  if (a2 > 9)
    v5 = *(_QWORD *)(v4 + 16) + 8 * (a2 - 10);
  else
    v5 = v4 + 8 * a2 + 24;
  return *(_QWORD *)v5;
}

void CI::ProgramNode::set_child(CI::SerialObjectPtrArray **this, CI::Node *a2, int a3)
{
  if ((a3 & 0x80000000) == 0 && (*((int (**)(CI::SerialObjectPtrArray **))*this + 5))(this) > a3)
    CI::SerialObjectPtrArray::replace(this[8], a2, a3);
}

char *CI::ProgramNode::make_function_name(uint64_t a1, char **a2)
{
  _QWORD v5[5];

  x_stream_write((uint64_t)a2, "ci", 2uLL);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK2CI11ProgramNode18make_function_nameER15x_stream_struct_block_invoke;
  v5[3] = &__block_descriptor_tmp_5_3;
  v5[4] = a2;
  CI::ProgramNode::traverse_graph_preorder_stoppable(a1, (uint64_t)v5);
  return x_stream_get(a2);
}

uint64_t ___ZNK2CI11ProgramNode18make_function_nameER15x_stream_struct_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  char *v7;
  size_t v8;

  if (a6 == -1)
  {
    v7 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
    if (*v7 != 95)
      x_stream_write(*(_QWORD *)(a1 + 32), "_", 1uLL);
    v8 = strlen(v7);
    x_stream_write(*(_QWORD *)(a1 + 32), v7, v8);
  }
  return 0;
}

void CI::ProgramNode::print_for_graph_core(uint64_t a1, FILE *__stream)
{
  dispatch_queue_t v4;
  dispatch_queue_t v5;
  const char *v6;
  int v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  if (*(_QWORD *)(a1 + 160))
    fprintf(__stream, "program=%08X ", *(_QWORD *)(a1 + 160));
  else
    fwrite("program ", 8uLL, 1uLL, __stream);
  v4 = CI::ProgramNode::mainProgram((dispatch_queue_t *)a1);
  if (v4)
  {
    v5 = v4;
    v6 = (const char *)(*((uint64_t (**)(dispatch_queue_t))v4->isa + 8))(v4);
    fprintf(__stream, "type=%s ", v6);
    if (*(_BYTE *)(a1 + 168))
      fprintf(__stream, "compileTime=%0.1fms ", (*(double *)&v5[3].isa + *(double *)&v5[4].isa) * 1000.0);
  }
  if (CI::ProgramNode::print_for_graph_core(__sFILE *,std::unordered_map<CI::GraphObject const*,unsigned int> const&,BOOL)const::onceToken != -1)
    dispatch_once(&CI::ProgramNode::print_for_graph_core(__sFILE *,std::unordered_map<CI::GraphObject const*,unsigned int> const&,BOOL)const::onceToken, &__block_literal_global_95);
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = -1;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZNK2CI11ProgramNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke_2;
  v12[3] = &unk_1E2EC7EA0;
  v12[4] = &v13;
  v12[5] = __stream;
  CI::ProgramNode::traverse_graph_preorder_stoppable(a1, (uint64_t)v12);
  fprintf(__stream, "%.*s", *((_DWORD *)v14 + 6) + 1, (const char *)&CI::ProgramNode::print_for_graph_core(__sFILE *,std::unordered_map<CI::GraphObject const*,unsigned int> const&,BOOL)const::paren_str);
  v7 = *(_DWORD *)(a1 + 140);
  if (v7)
  {
    v8 = CI::name_for_format(v7);
    v9 = "s'";
    if ((*(_BYTE *)(a1 + 144) & 2) == 0)
      v9 = "";
    if ((*(_BYTE *)(a1 + 144) & 1) != 0)
      v10 = "s";
    else
      v10 = v9;
    fprintf(__stream, " format=%s%s", v8, v10);
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
  if (v11)
    fprintf(__stream, " digest=%08X", v11);
  _Block_object_dispose(&v13, 8);
}

__n128 ___ZNK2CI11ProgramNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke()
{
  __n128 result;

  result.n128_u64[0] = 0x2929292929292929;
  result.n128_u64[1] = 0x2929292929292929;
  xmmword_1EE284730 = (__int128)result;
  unk_1EE284740 = result;
  xmmword_1EE284710 = (__int128)result;
  unk_1EE284720 = result;
  xmmword_1EE2846F0 = (__int128)result;
  unk_1EE284700 = result;
  xmmword_1EE2846D0 = (__int128)result;
  unk_1EE2846E0 = result;
  xmmword_1EE2846B0 = (__int128)result;
  unk_1EE2846C0 = result;
  xmmword_1EE284690 = (__int128)result;
  unk_1EE2846A0 = result;
  xmmword_1EE284670 = (__int128)result;
  unk_1EE284680 = result;
  CI::ProgramNode::print_for_graph_core(__sFILE *,std::unordered_map<CI::GraphObject const*,unsigned int> const&,BOOL)const::paren_str = (__int128)result;
  unk_1EE284660 = result;
  byte_1EE284750 = 0;
  return result;
}

uint64_t ___ZNK2CI11ProgramNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  fprintf(*(FILE **)(a1 + 40), "%.*s", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) - a4 + 1, (const char *)&CI::ProgramNode::print_for_graph_core(__sFILE *,std::unordered_map<CI::GraphObject const*,unsigned int> const&,BOOL)const::paren_str);
  if (a5)
    fputc(44, *(FILE **)(a1 + 40));
  if (a6 == -1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 112))(a2, *(_QWORD *)(a1 + 40));
    fputc(40, *(FILE **)(a1 + 40));
  }
  else
  {
    fprintf(*(FILE **)(a1 + 40), "%d", a6);
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a4;
  return 0;
}

CFStringRef CI::ProgramNode::description(CI::ProgramNode *this)
{
  unsigned int v2;
  const char *v3;

  v2 = (*(uint64_t (**)(CI::ProgramNode *))(*(_QWORD *)this + 16))(this);
  v3 = CI::name_for_type(v2);
  return CFStringCreateWithFormat(0, 0, CFSTR("<CI::%s %p>"), v3, this);
}

double CI::ProgramNode::compute_regions_of_child@<D0>(CI::ProgramNode *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, int a3@<W1>, unint64_t a4@<X2>, int a5@<W3>, int a6@<W4>, uint64_t *a7@<X8>)
{
  const char *v12;
  size_t v13;
  size_t v14;
  CI::Node *v15;
  uint64_t i;
  double *v17;
  double *v18;
  uint64_t v19;
  CGFloat y;
  double *v21;
  unsigned int v22;
  uint64_t v23;
  double v24;
  double v25;
  double result;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  void *v31;
  CI::ProgramNode *v32;
  unsigned int v33;
  CGRect v35;
  void *__p[2];
  uint64_t v37;
  CI::Node *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;

  v44 = a2;
  if (a3 < 0
    || (*(int (**)(CI::ProgramNode *))(*(_QWORD *)this + 40))(this) <= a3
    || (v12 = *(const char **)(*(_QWORD *)(*((_QWORD *)this + 7) + 32) + 8 * a3),
        (v13 = strlen(v12)) == 0))
  {
    CI::CGRectArray::CGRectArray((CI::CGRectArray *)a7, MEMORY[0x1E0C9D628]);
    return result;
  }
  v14 = v13;
  v33 = a3;
  v32 = this;
  v15 = (CI::Node *)*((_QWORD *)this + 6);
  v38 = 0;
  v39 = -1;
  v41 = 0;
  v42 = 0;
  v40 = -1;
  v43 = 0;
  CI::CGRectArray::CGRectArray((CI::CGRectArray *)a7, &v44);
  for (i = 0; i != v14; ++i)
  {
    if (a5)
    {
      v17 = (double *)*a7;
      v18 = (double *)a7[1];
      while (v17 != v18)
      {
        (*(void (**)(CI::Node *, _QWORD, unint64_t, CI::Node **, double, double, double, double))(*(_QWORD *)v15 + 344))(v15, 0, a4, &v38, *v17, v17[1], v17[2], v17[3]);
        v17 += 4;
      }
    }
    v19 = (v12[i] - 48);
    std::vector<CGRect>::vector(&v35, (uint64_t)a7);
    a7[1] = *a7;
    v21 = *(double **)&v35.origin.x;
    y = v35.origin.y;
    while (v21 != *(double **)&y)
    {
      (*(void (**)(void **__return_ptr, CI::Node *, uint64_t, double, double, double, double))(*(_QWORD *)v15 + 368))(__p, v15, v19, *v21, v21[1], v21[2], v21[3]);
      std::vector<CGRect>::__insert_with_size[abi:nn180100]<std::__wrap_iter<CGRect const*>,std::__wrap_iter<CGRect const*>>((uint64_t)a7, a7[1], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 5);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v21 += 4;
    }
    v22 = CI::Node::rois_count(v15);
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v38 = v15;
    v39 = v22;
    v40 = v19 | 0xFFFFFFFF00000000;
    v15 = (CI::Node *)(*(uint64_t (**)(CI::Node *, uint64_t))(*(_QWORD *)v15 + 48))(v15, v19);
    if (*(_QWORD *)&v35.origin.x)
    {
      v35.origin.y = v35.origin.x;
      operator delete(*(void **)&v35.origin.x);
    }
  }
  v23 = (*(uint64_t (**)(CI::ProgramNode *, _QWORD))(*(_QWORD *)v32 + 48))(v32, v33);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 168))(v23);
  if (v24 <= v25)
    result = v25;
  else
    result = v24;
  if (result < (double)a4 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23) == 46)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 168))(v23);
  }
  else
  {
    if (!a6)
      return result;
    v45.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v23 + 168))(v23);
    if (CGRectIsInfinite(v45))
      return result;
    v46.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)v23 + 168))(v23);
    v47 = CGRectInset(v46, -1.0, -1.0);
    v48 = CGRectInset(v47, 0.001, 0.001);
    *(CGRect *)&v27 = CGRectIntegral(v48);
  }
  v35.origin.x = v27;
  v35.origin.y = v28;
  v35.size.width = v29;
  v35.size.height = v30;
  CI::CGRectArray::CGRectArray((CI::CGRectArray *)__p, &v35);
  v31 = (void *)*a7;
  if (*a7)
  {
    a7[1] = (uint64_t)v31;
    operator delete(v31);
  }
  result = *(double *)__p;
  *(_OWORD *)a7 = *(_OWORD *)__p;
  a7[2] = v37;
  return result;
}

double CI::ProgramNode::roi_of_child(CI::ProgramNode *this, CGRect a2)
{
  return *MEMORY[0x1E0C9D628];
}

unint64_t CI::ProgramNode::digest(CI::ProgramNode *this)
{
  uint64_t v2;
  int64x2_t v4[5];
  uint64_t __src;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 384))(*((_QWORD *)this + 6));
  XXH64_reset(v4, 0);
  __src = v2;
  XXH64_update((uint64_t)v4, (char *)&__src, 8uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 145);
  XXH64_update((uint64_t)v4, (char *)&__src, 4uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 146);
  XXH64_update((uint64_t)v4, (char *)&__src, 4uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 147);
  XXH64_update((uint64_t)v4, (char *)&__src, 4uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 148);
  XXH64_update((uint64_t)v4, (char *)&__src, 4uLL);
  LOBYTE(__src) = *((_BYTE *)this + 144);
  XXH64_update((uint64_t)v4, (char *)&__src, 1uLL);
  LODWORD(__src) = *((_DWORD *)this + 35);
  XXH64_update((uint64_t)v4, (char *)&__src, 4uLL);
  return XXH64_digest((uint64_t)v4);
}

void CI::ProgramNode::roiKeys_of_child(CI::ProgramNode *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, uint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  CI::Node *v18;
  uint64_t **v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  CI::Node *v29;
  uint64_t **v30;
  char v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  char *v40;
  char *v41;
  uint64_t v42;
  CGRect v43;
  CGRect v44;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  if ((int)CI::Node::rois_count(this) < 1)
    goto LABEL_16;
  v10 = 0;
  do
  {
    v11 = (_QWORD *)CI::Node::rois(this);
    v41 = 0;
    v42 = 0;
    v40 = 0;
    v12 = *v11 + 120 * v10;
    v13 = *(_DWORD *)(v12 + 80);
    v14 = *(_OWORD *)(v12 + 16);
    v36 = *(_OWORD *)v12;
    v37 = v14;
    CI::SerialRectArray::recurseSubdivide((double *)&v36, v13, (void **)&v40);
    v15 = v41;
    if (v41 == v40)
    {
LABEL_9:
      v20 = 0;
      if (!v15)
        goto LABEL_11;
LABEL_10:
      v41 = v15;
      operator delete(v15);
      goto LABEL_11;
    }
    v16 = 0;
    v17 = 0;
    v15 = v40;
    while (1)
    {
      v43.origin.x = x;
      v43.origin.y = y;
      v43.size.width = width;
      v43.size.height = height;
      if (CGRectEqualToRect(v43, *(CGRect *)&v15[v16]))
        break;
LABEL_8:
      ++v17;
      v15 = v40;
      v16 += 32;
      if (v17 >= (v41 - v40) >> 5)
        goto LABEL_9;
    }
    *(_QWORD *)&v36 = this;
    *((_QWORD *)&v36 + 1) = __PAIR64__(v17, v10);
    v37 = a3 | 0xFFFFFFFF00000000;
    v38 = 0;
    v39 = 0;
    v18 = (CI::Node *)(*(uint64_t (**)(CI::ProgramNode *, uint64_t))(*(_QWORD *)this + 48))(this, a3);
    v19 = (uint64_t **)CI::Node::rois(v18);
    CI::SerialRectArray::findParentROI(v19, (uint64_t)&v36, (uint64_t)&__block_literal_global_25_2, (uint64_t)&v33);
    if (!v35)
    {
      std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&v33, v34);
      goto LABEL_8;
    }
    CI::roiKeyVec::roiKeyVec(a4, (uint64_t)v18, &v33);
    std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&v33, v34);
    v20 = 1;
    v15 = v40;
    if (v40)
      goto LABEL_10;
LABEL_11:
    if ((v20 & 1) != 0)
      return;
    ++v10;
  }
  while (v10 < (int)CI::Node::rois_count(this));
LABEL_16:
  if ((int)CI::Node::rois_count(this) < 1)
    goto LABEL_31;
  v21 = 0;
  do
  {
    v22 = (_QWORD *)CI::Node::rois(this);
    v41 = 0;
    v42 = 0;
    v40 = 0;
    v23 = *v22 + 120 * v21;
    v24 = *(_DWORD *)(v23 + 80);
    v25 = *(_OWORD *)(v23 + 16);
    v36 = *(_OWORD *)v23;
    v37 = v25;
    CI::SerialRectArray::recurseSubdivide((double *)&v36, v24, (void **)&v40);
    v26 = v41;
    if (v41 == v40)
    {
LABEL_24:
      v31 = 0;
      if (!v26)
        goto LABEL_26;
LABEL_25:
      v41 = v26;
      operator delete(v26);
      goto LABEL_26;
    }
    v27 = 0;
    v28 = 0;
    v26 = v40;
    while (1)
    {
      v44.origin.x = x;
      v44.origin.y = y;
      v44.size.width = width;
      v44.size.height = height;
      if (CGRectEqualToRect(v44, *(CGRect *)&v26[v27]))
        break;
LABEL_23:
      ++v28;
      v26 = v40;
      v27 += 32;
      if (v28 >= (v41 - v40) >> 5)
        goto LABEL_24;
    }
    *(_QWORD *)&v36 = this;
    *((_QWORD *)&v36 + 1) = __PAIR64__(v28, v21);
    v37 = a3 | 0xFFFFFFFF00000000;
    v38 = 0;
    v39 = 0;
    v29 = (CI::Node *)(*(uint64_t (**)(CI::ProgramNode *, uint64_t))(*(_QWORD *)this + 48))(this, a3);
    v30 = (uint64_t **)CI::Node::rois(v29);
    CI::SerialRectArray::findRetiredParentROI(v30, (uint64_t)&v36, (uint64_t)&__block_literal_global_28_0, (uint64_t)&v33);
    if (!v35)
    {
      std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&v33, v34);
      goto LABEL_23;
    }
    CI::roiKeyVec::roiKeyVec(a4, (uint64_t)v29, &v33);
    std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&v33, v34);
    v31 = 1;
    v26 = v40;
    if (v40)
      goto LABEL_25;
LABEL_26:
    if ((v31 & 1) != 0)
      return;
    ++v21;
  }
  while (v21 < (int)CI::Node::rois_count(this));
LABEL_31:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
}

uint64_t **CI::SerialRectArray::findParentROI@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = a4 + 8;
  v15 = 0;
  v6 = *result;
  v5 = result[1];
  if (v5 != *result)
  {
    v9 = result;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = &v6[15 * v11];
      v13 = v12[4];
      v14 = v12[5];
      if (v13 != v14)
      {
        do
        {
          if (*(_QWORD *)v13 == *(_QWORD *)a2
            && *(_DWORD *)(a2 + 16) == *(_DWORD *)(v13 + 16)
            && *(_DWORD *)(a2 + 12) == *(_DWORD *)(v13 + 12)
            && *(_DWORD *)(a2 + 8) == *(_DWORD *)(v13 + 8))
          {
            (*(void (**)(uint64_t, uint64_t, _QWORD))(a3 + 16))(a3, v13, v15);
            result = std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a4, (int *)&v15, &v15);
          }
          v13 += 48;
        }
        while (v13 != v14);
        v10 = v15;
        v6 = *v9;
        v5 = v9[1];
      }
      v15 = ++v10;
      v11 = v10;
    }
    while (0xEEEEEEEEEEEEEEEFLL * (v5 - v6) > v10);
  }
  return result;
}

uint64_t **CI::SerialRectArray::findRetiredParentROI@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = a4 + 8;
  v15 = 0;
  v6 = *result;
  v5 = result[1];
  if (v5 != *result)
  {
    v9 = result;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = &v6[15 * v11];
      v13 = v12[7];
      v14 = v12[8];
      if (v13 != v14)
      {
        do
        {
          if (*(_QWORD *)v13 == *(_QWORD *)a2
            && *(_DWORD *)(a2 + 16) == *(_DWORD *)(v13 + 16)
            && *(_DWORD *)(a2 + 12) == *(_DWORD *)(v13 + 12)
            && *(_DWORD *)(a2 + 8) == *(_DWORD *)(v13 + 8))
          {
            (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v13);
            result = std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a4, &v15, &v15);
          }
          v13 += 48;
        }
        while (v13 != v14);
        v10 = v15;
        v6 = *v9;
        v5 = v9[1];
      }
      v15 = ++v10;
      v11 = v10;
    }
    while (0xEEEEEEEEEEEEEEEFLL * (v5 - v6) > v10);
  }
  return result;
}

void CI::ProgramNode::regions_of_child(CI::ProgramNode *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, uint64_t a3@<X1>, void **a4@<X8>)
{
  void *__p[3];

  CI::ProgramNode::roiKeys_of_child(this, a2, a3, __p);
  CI::roiKeyVec::roi((CI::roiKeyVec *)__p, a4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void CI::roiKeyVec::roi(CI::roiKeyVec *this@<X0>, void **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  _QWORD *v16;
  double *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v3)
  {
    v5 = (uint64_t)(a2 + 2);
    do
    {
      v6 = CI::Node::roi(*(CI::Node **)v2, *(_DWORD *)(v2 + 8));
      v10 = v6;
      v11 = v7;
      v12 = v8;
      v13 = v9;
      v15 = (double *)a2[1];
      v14 = (double *)a2[2];
      if (v15 >= v14)
      {
        v17 = (double *)*a2;
        v18 = ((char *)v15 - (_BYTE *)*a2) >> 5;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 59)
          abort();
        v20 = (char *)v14 - (char *)v17;
        if (v20 >> 4 > v19)
          v19 = v20 >> 4;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
          v21 = 0x7FFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SoftwareDAGDescriptor::ArgumentInfo>>(v5, v21);
          v17 = (double *)*a2;
          v15 = (double *)a2[1];
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[32 * v18];
        *(double *)v23 = v10;
        *((_QWORD *)v23 + 1) = v11;
        *((_QWORD *)v23 + 2) = v12;
        *((_QWORD *)v23 + 3) = v13;
        if (v15 == v17)
        {
          v26 = &v22[32 * v18];
        }
        else
        {
          v24 = &v22[32 * v18];
          do
          {
            v25 = *((_OWORD *)v15 - 1);
            v26 = v24 - 32;
            *((_OWORD *)v24 - 2) = *((_OWORD *)v15 - 2);
            *((_OWORD *)v24 - 1) = v25;
            v15 -= 4;
            v24 -= 32;
          }
          while (v15 != v17);
        }
        v16 = v23 + 32;
        *a2 = v26;
        a2[1] = v23 + 32;
        a2[2] = &v22[32 * v21];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v15 = v6;
        *((_QWORD *)v15 + 1) = v7;
        v16 = v15 + 4;
        *((_QWORD *)v15 + 2) = v8;
        *((_QWORD *)v15 + 3) = v9;
      }
      a2[1] = v16;
      v2 += 16;
    }
    while (v2 != v3);
  }
}

CI::ProgramNode *CI::ProgramNode::build_program_graph(CI::ProgramNode *this, CI::Node *a2, CI::Context *a3, CI::NodeToNodeMap *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  CI::Node *v12;
  CI::Node *v13;
  BOOL v14;
  CI::SerialStringArray *v15;
  uint64_t v16;
  CI::SerialStringArray *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  const void *v21;
  CI::Object *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int is_float;
  int is_full_float;
  int v37;
  int v38;
  CI::Node *v39;
  uint64_t v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD v44[24];
  unsigned int v45;
  int v46;
  _QWORD v47[4];
  _QWORD v48[4];
  _QWORD v49[3];
  char v50;
  _QWORD v51[3];
  char v52;
  _QWORD v53[3];
  char v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  char v60;
  _QWORD v61[4];
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  CI::SerialStringArray *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  CI::SerialStringArray *v73;
  _QWORD v74[3];
  char v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  void *v83;
  __int128 v84;
  uint64_t (*v85)(uint64_t);
  void *v86;
  _QWORD *v87;

  v8 = (*(uint64_t (**)(CI::ProgramNode *))(*(_QWORD *)this + 16))(this);
  if (!CI::is_image_type(v8))
  {
    if (v8 == 38 && (*(unsigned int (**)(CI::ProgramNode *))(*(_QWORD *)this + 224))(this))
    {
      v10 = (*(uint64_t (**)(CI::ProgramNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
      return (CI::ProgramNode *)(*(uint64_t (**)(uint64_t, CI::Node *, CI::Context *, CI::NodeToNodeMap *))(*(_QWORD *)v10 + 328))(v10, a2, a3, a4);
    }
    v12 = (*(unsigned int (**)(CI::Node *))(*(_QWORD *)a2 + 16))(a2) == 77 ? a2 : 0;
    v13 = (*(unsigned int (**)(CI::Node *))(*(_QWORD *)a2 + 16))(a2) == 75 ? a2 : 0;
    if (v8 - 30 < 9 || (v8 <= 0x33 ? (v14 = ((1 << v8) & 0xEA70010000000) == 0) : (v14 = 1), !v14))
    {
      v80 = 0;
      v81 = &v80;
      v82 = 0x2000000000;
      v83 = 0;
      v83 = malloc_type_calloc(0x400uLL, 1uLL, 0x918803B6uLL);
      v76 = 0;
      v77 = &v76;
      v78 = 0x2000000000;
      v79 = 0;
      v74[0] = 0;
      v74[1] = v74;
      v74[2] = 0x2000000000;
      v75 = 0;
      v70 = 0;
      v71 = &v70;
      v72 = 0x2000000000;
      v73 = 0;
      v15 = (CI::SerialStringArray *)operator new();
      v73 = CI::SerialStringArray::SerialStringArray(v15, 2u, 10);
      v66 = 0;
      v67 = &v66;
      v68 = 0x2000000000;
      v69 = 0;
      v16 = operator new();
      *(_QWORD *)v16 = 0;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      *(_OWORD *)(v16 + 56) = 0u;
      *(_OWORD *)(v16 + 72) = 0u;
      *(_OWORD *)(v16 + 88) = 0u;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 4) = 0x50000000ALL;
      v69 = v16;
      v62 = 0;
      v63 = &v62;
      v64 = 0x2000000000;
      v65 = 0;
      v17 = (CI::SerialStringArray *)operator new();
      v65 = CI::SerialStringArray::SerialStringArray(v17, 0xFu, 10);
      v61[0] = 0;
      v61[1] = v61;
      v61[2] = 0x2000000000;
      v61[3] = 0;
      v59[0] = 0;
      v59[1] = v59;
      v59[2] = 0x2000000000;
      v60 = 1;
      v55 = 0;
      v56 = &v55;
      v57 = 0x2000000000;
      v58 = 0;
      v53[0] = 0;
      v53[1] = v53;
      v53[2] = 0x2000000000;
      v54 = 1;
      v51[0] = 0;
      v51[1] = v51;
      v51[2] = 0x2000000000;
      v52 = 1;
      v49[0] = 0;
      v49[1] = v49;
      v49[2] = 0x2000000000;
      v50 = 1;
      v18 = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)a2 + 464))(a2);
      if (v18 >= (int)CI_MAX_PROGRAM_INPUT_TEXTURES())
        v19 = (int)CI_MAX_PROGRAM_INPUT_TEXTURES();
      else
        v19 = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)a2 + 464))(a2);
      v20 = CI_MAX_PROGRAM_DEPTH();
      v48[0] = 0;
      v48[1] = v48;
      v48[2] = 0x2000000000;
      v48[3] = 0;
      v47[0] = 0;
      v47[1] = v47;
      v47[2] = 0x2000000000;
      v47[3] = 0;
      v44[0] = MEMORY[0x1E0C809B0];
      v44[1] = 0x40000000;
      v44[2] = ___ZN2CI11ProgramNode19build_program_graphEPNS_4NodeEPNS_7ContextERNS_13NodeToNodeMapEb_block_invoke;
      v44[3] = &unk_1E2EC7F10;
      v44[4] = v53;
      v44[5] = v51;
      v44[6] = v49;
      v44[7] = &v80;
      v44[8] = v61;
      v44[9] = v48;
      v44[10] = &v76;
      v44[11] = v74;
      v44[12] = &v55;
      v44[13] = v47;
      v44[18] = v12;
      v44[19] = a3;
      v45 = v8;
      v46 = v20;
      v44[20] = a2;
      v44[21] = this;
      v44[22] = v19;
      v44[23] = v13;
      v44[14] = v59;
      v44[15] = &v66;
      v44[16] = &v70;
      v44[17] = &v62;
      *(_QWORD *)&v84 = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v84 + 1) = 0x40000000;
      v85 = ___ZN2CI4Node27traverse_preorder_stoppableEU13block_pointerFbPS0_PKS0_iiE_block_invoke;
      v86 = &unk_1E2EC8160;
      v87 = v44;
      CI::GraphObject::traverse_preorder_stoppable((uint64_t)this, 0, 0, 0, (uint64_t)&v84);
      free((void *)v81[3]);
      v21 = (const void *)v56[3];
      if (v21)
        CFRelease(v21);
      v9 = operator new();
      CI::ProgramNode::ProgramNode((CI::ProgramNode *)v9, this, (CI::SerialStringArray *)v71[3], (CI::SerialObjectPtrArray *)v67[3], (const CI::GeneralKernelNode *)v77[3]);
      v22 = (CI::Object *)v77[3];
      if (v22)
        CI::Object::unref(v22);
      *(_QWORD *)(v9 + 72) = v63[3];
      if ((*(int (**)(CI::ProgramNode *))(*(_QWORD *)this + 16))(this) < 41
        || (*(int (**)(CI::ProgramNode *))(*(_QWORD *)this + 16))(this) > 42)
      {
        if ((a4 & 1) == 0)
        {
          v34 = *(_QWORD *)(v9 + 48);
          v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 312))(v34);
          if (!(_DWORD)v32)
          {
            is_float = CI::format_is_float(*((_DWORD *)a2 + 8));
            is_full_float = CI::format_is_full_float(*((_DWORD *)a2 + 8));
            v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 304))(v34);
            if (v37 == 1)
            {
              is_float = 1;
            }
            else if (v37 == -1)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 280))(v34))
              {
                v38 = (*(uint64_t (**)(CI::Node *, uint64_t, uint64_t))(*(_QWORD *)a2 + 584))(a2, 261, 3);
              }
              else
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 272))(v34))
                {
                  v39 = a2;
                  v40 = 262;
                }
                else
                {
                  v39 = a2;
                  v40 = 266;
                }
                v38 = (*(uint64_t (**)(CI::Node *, uint64_t, uint64_t))(*(_QWORD *)a2 + 584))(v39, v40, 3);
              }
              is_float &= ~v38;
            }
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 280))(v34))
            {
              v41 = is_full_float == 0;
              v42 = 2053;
              v43 = 2309;
            }
            else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 272))(v34))
            {
              v41 = is_full_float == 0;
              v42 = 2054;
              v43 = 2310;
            }
            else
            {
              if (is_float)
                v42 = 2056;
              else
                v42 = 266;
              v41 = is_full_float == 0;
              v43 = 2312;
            }
            if (v41)
              v32 = v42;
            else
              v32 = v43;
          }
          v31 = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)a2 + 232))(a2);
          if (!CI_NO_CM())
          {
            v33 = *((_QWORD *)a2 + 3);
            if (!v33)
              goto LABEL_72;
            if ((int)CI::format_bits_per_component(v32) <= 8)
            {
              if (CI_INTERMEDIATE_SRGB_TEXTURES()
                && ((*(uint64_t (**)(CI::Node *, uint64_t, uint64_t))(*(_QWORD *)a2 + 584))(a2, v32, 3) & 1) != 0)
              {
                LOBYTE(v33) = 2;
              }
              else
              {
                LOBYTE(v33) = 1;
              }
              goto LABEL_72;
            }
          }
          LOBYTE(v33) = 0;
LABEL_72:
          *(_DWORD *)(v9 + 140) = v32;
          *(_BYTE *)(v9 + 144) = v33;
          *(_DWORD *)(v9 + 145) = 0;
          *(_DWORD *)(v9 + 152) = v31;
LABEL_73:
          _Block_object_dispose(v47, 8);
          _Block_object_dispose(v48, 8);
          _Block_object_dispose(v49, 8);
          _Block_object_dispose(v51, 8);
          _Block_object_dispose(v53, 8);
          _Block_object_dispose(&v55, 8);
          _Block_object_dispose(v59, 8);
          _Block_object_dispose(v61, 8);
          _Block_object_dispose(&v62, 8);
          _Block_object_dispose(&v66, 8);
          _Block_object_dispose(&v70, 8);
          _Block_object_dispose(v74, 8);
          _Block_object_dispose(&v76, 8);
          _Block_object_dispose(&v80, 8);
          return (CI::ProgramNode *)v9;
        }
      }
      else
      {
        if ((a4 & 1) == 0)
        {
          v84 = *(_OWORD *)(v9 + 140);
          v23 = (*(uint64_t (**)(CI::ProgramNode *))(*(_QWORD *)this + 312))(this);
          CI::update_intermediate_descriptor_for_processor((int *)&v84, (uint64_t)a2, this, v23, *((unsigned __int8 *)this + 136));
          BYTE6(v84) = 1;
          if ((BYTE4(v84) & 3) != 0)
            *((_BYTE *)this + 152) = 1;
          HIDWORD(v84) = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)a2 + 232))(a2);
          *(_OWORD *)(v9 + 140) = v84;
        }
        if ((*(unsigned int (**)(CI::ProgramNode *))(*(_QWORD *)this + 40))(this))
        {
          v24 = 0;
          do
          {
            v25 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v9 + 48))(v9, v24);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25) == 52)
            {
              v84 = *(_OWORD *)(v25 + 140);
              v26 = *((_QWORD *)this + 14);
              if (v26)
                v27 = *(_DWORD *)(v26 + 4 * v24);
              else
                v27 = 0;
              v28 = *((_QWORD *)this + 16);
              if (v28)
                v29 = *(unsigned __int8 *)(v28 + v24) != 0;
              else
                v29 = 0;
              CI::update_intermediate_descriptor_for_processor((int *)&v84, (uint64_t)a2, this, v27, v29);
              BYTE5(v84) = 1;
              if ((BYTE4(v84) & 3) != 0)
              {
                v30 = *((_QWORD *)this + 18);
                if (v30)
                  *(_BYTE *)(v30 + v24) = 1;
              }
              *(_OWORD *)(v25 + 140) = v84;
            }
            ++v24;
          }
          while (v24 < (*(unsigned int (**)(CI::ProgramNode *))(*(_QWORD *)this + 40))(this));
        }
        if (!(_DWORD)a4)
          goto LABEL_73;
      }
      v31 = 1;
      (*(void (**)(__int128 *__return_ptr, CI::Node *))(*(_QWORD *)a2 + 392))(&v84, a2);
      LODWORD(v32) = v84;
      (*(void (**)(__int128 *__return_ptr, CI::Node *))(*(_QWORD *)a2 + 392))(&v84, a2);
      LOBYTE(v33) = BYTE4(v84);
      goto LABEL_72;
    }
  }
  CI::Object::ref((uint64_t)this);
  return this;
}

uint64_t ___ZN2CI11ProgramNode19build_program_graphEPNS_4NodeEPNS_7ContextERNS_13NodeToNodeMapEb_block_invoke(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v10;
  signed int v11;
  const CI::Kernel *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  CI *v20;
  int is_kernel_metalextern_linkable;
  const CI::Kernel *v22;
  int v23;
  int is_kernel_metalstitchable_linkable;
  const CI::Kernel *v25;
  int v26;
  BOOL is_kernel_metalfosl_linkable;
  const __CFDictionary *v28;
  const __CFDictionary *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  char is_image_type;
  int v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  CI::Object *v38;
  size_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  char v45;
  const char *v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v52;
  uint64_t v53;
  BOOL v55;
  const CI::Kernel *v56;
  CI *v57;
  const CI::Kernel *v58;
  char v59;
  char v60;
  uint64_t v61;
  _QWORD v62[6];
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  char v66;
  _QWORD v67[5];

  LODWORD(v61) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  HIDWORD(v61) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v11 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) + a4) = a5 + 48;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) + a4 + 1) = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) += (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 336))(a2);
  if ((*(int (**)(unint64_t))(*(_QWORD *)a2 + 40))(a2) < 1)
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v14);
      v13 += (*(int (**)(uint64_t))(*(_QWORD *)v15 + 208))(v15);
      v14 = (v14 + 1);
    }
    while ((int)v14 < (*(int (**)(unint64_t))(*(_QWORD *)a2 + 40))(a2));
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) += v13;
  if (v11 == 49 || v11 == 50)
  {
    v17 = 0;
    v16 = *(_QWORD *)(a2 + 48);
  }
  else if (v11 == 51)
  {
    v16 = *(_QWORD *)(a2 + 48);
    if (HIDWORD(*(_QWORD *)(a2 + 136)) && *(_QWORD *)(a2 + 136) && *(_DWORD *)(a2 + 144)
      || (v17 = 0, HIDWORD(*(_QWORD *)(a2 + 148))) && *(_QWORD *)(a2 + 148) && *(_DWORD *)(a2 + 156))
    {
      v17 = 1;
    }
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
  if (v18 && v18 == a3)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 408))(a3, a5);
  v19 = v10 != 0;
  if (v16)
  {
    v20 = *(CI **)(a1 + 144);
    if (v20)
    {
      is_kernel_metalextern_linkable = CI::is_kernel_metalextern_linkable(v20, (const CI::MetalContext *)v16, v12);
      v23 = HIDWORD(v61);
      if (!is_kernel_metalextern_linkable)
        v23 = 0;
      HIDWORD(v61) = v23;
      is_kernel_metalstitchable_linkable = CI::is_kernel_metalstitchable_linkable(*(CI **)(a1 + 144), (const CI::MetalContext *)v16, v22);
      v26 = v61;
      if (!is_kernel_metalstitchable_linkable)
        v26 = 0;
      LODWORD(v61) = v26;
      is_kernel_metalfosl_linkable = CI::is_kernel_metalfosl_linkable(v16, v25);
      if (v10)
        v19 = is_kernel_metalfosl_linkable;
      else
        v19 = 0;
    }
  }
  v60 = v19;
  v63 = 0;
  v64 = &v63;
  v65 = 0x2000000000;
  v66 = 0;
  if (!v16)
  {
    v29 = 0;
    goto LABEL_36;
  }
  v28 = (const __CFDictionary *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  v29 = v28;
  if (!v28)
  {
LABEL_36:
    v59 = 1;
    goto LABEL_37;
  }
  v30 = *(_QWORD *)(a1 + 96);
  if (*(_QWORD *)(*(_QWORD *)(v30 + 8) + 24))
  {
    v62[0] = MEMORY[0x1E0C809B0];
    v62[1] = 0x40000000;
    v62[2] = ___ZN2CI11ProgramNode19build_program_graphEPNS_4NodeEPNS_7ContextERNS_13NodeToNodeMapEb_block_invoke_2;
    v62[3] = &unk_1E2EC7EE8;
    v62[4] = v30;
    v62[5] = &v63;
    __CFDictionary::for_each(v28, v62);
  }
  v59 = 0;
LABEL_37:
  if (v11 == 47 || v11 == 33)
  {
    v31 = (*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0);
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
    is_image_type = CI::is_image_type(v32);
    if (!a3)
      goto LABEL_140;
  }
  else
  {
    is_image_type = 0;
    if (!a3)
      goto LABEL_140;
  }
  v34 = *(_DWORD *)(a1 + 192);
  if ((v34 - 41) <= 1)
  {
    if (v34 == 41)
      v35 = "this is a Processor";
    else
      v35 = "this is a Convert";
LABEL_46:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = v35;
    goto LABEL_55;
  }
  if (v11 == 51 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
  {
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
    v37 = "program can only contain one General Kernel node";
    goto LABEL_54;
  }
  if (v17)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
    v37 = "child sets threadgroup dimensions";
    goto LABEL_54;
  }
  if (*((_BYTE *)v64 + 24))
  {
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
    v37 = "child contains conflicting kernel constants";
    goto LABEL_54;
  }
  if ((v11 - 41) <= 1)
  {
    v35 = "child is a Convert";
    if (v11 == 41)
      v35 = "child is a Processor";
    goto LABEL_46;
  }
  if (v11 == 39)
  {
    switch((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 408))(a2))
    {
      case 1u:
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
        v37 = "child is a Noop full_intermediate";
        break;
      case 2u:
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
        v37 = "child is a Noop intermediate_uncached";
        break;
      case 3u:
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
        v37 = "child is a Noop intermediate_cached";
        break;
      case 4u:
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
        v37 = "child is a Noop affine";
        break;
      case 5u:
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
        v37 = "child is a Noop multiuse";
        break;
      case 6u:
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
        v37 = "child is a Noop samplemode";
        break;
      case 7u:
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
        v37 = "child is a Noop disablemerging";
        break;
      default:
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
        v37 = "child is a Noop intermediate";
        break;
    }
    goto LABEL_54;
  }
  if (CI::is_image_type(v11))
  {
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
    v37 = "child is a raster leaf";
    goto LABEL_54;
  }
  v41 = *(_QWORD **)(*(_QWORD *)(a1 + 152) + 16);
  if (!v41)
  {
LABEL_81:
    if (v11 != 45)
    {
      if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 280))(a2) & 1) != 0
        || (*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 272))(a2))
      {
        v43 = *(_DWORD *)(a1 + 196);
        if (v43 <= 1024)
          v43 = 1024;
      }
      else
      {
        v43 = *(_DWORD *)(a1 + 196);
      }
      if (v43 < a4)
      {
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
        v37 = "beyond CI_MAX_PROGRAM_DEPTH";
        goto LABEL_54;
      }
    }
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 16))(*(_QWORD *)(a1 + 160)) == 74)
    {
      v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
      if (v44 > (int)CI_MAX_CL_COMPLEXITY()
        && ((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
      {
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
        v37 = "beyond CI_MAX_CL_COMPLEXITY";
        goto LABEL_54;
      }
    }
    if (v16 && !*(_DWORD *)(v16 + 16))
    {
      if (a4 != 1
        || *(_DWORD *)(a1 + 192) != 28
        || !CI::Affine::isOrientationWithIntegralTranslation((CI::Affine *)(*(_QWORD *)(a1 + 168) + 56)))
      {
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
        v37 = "child is a kernel with ReturnTypeNone";
        goto LABEL_54;
      }
      goto LABEL_140;
    }
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) > *(_QWORD *)(a1 + 176))
    {
      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
      v37 = "beyond max_texture_units";
      goto LABEL_54;
    }
    v45 = v60;
    if (v61)
      v45 = 1;
    if ((v45 & 1) == 0)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      {
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
        v37 = "program with non-Metal-extern kernels can't be linked with a Metal-extern kernels";
      }
      else if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      {
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
        v37 = "program with non-Metal-stitchable kernels can't be linked with a Metal-stitchable kernels";
      }
      else
      {
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
          v37 = "program with non-CIKL kernels can't be linked with a CIKL kernel";
        else
          v37 = "program can't be linked with the child's kernel";
      }
      goto LABEL_54;
    }
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24)
      || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24))
    {
      if (v11 != 51)
        goto LABEL_140;
      v47 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) != 0;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24))
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = "child is a GeneralKernel";
      if (CI_DISABLE_MERGING_POST_GENERAL())
      {
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
        v37 = "CI_DISABLE_MERGING_POST_GENERAL";
        goto LABEL_54;
      }
      goto LABEL_139;
    }
    if (v11 > 44)
    {
      if (v11 != 45)
      {
        if (v11 != 47)
          goto LABEL_130;
        v48 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 408))(a2);
        if (!SwizzlerMask(v48)
          && (*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 408))(a2) - 27 > 9)
        {
          v46 = "descendent of GeneralKernel is non-trivial Swizzle";
          goto LABEL_136;
        }
        v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
        if ((*(int (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49) > 1)
        {
          v46 = "descendent of multi-child GeneralKernel is a Swizzle";
          goto LABEL_136;
        }
        if (*(_QWORD *)(a1 + 184))
        {
          v46 = "descendent of SW GeneralKernel is a Swizzle";
          goto LABEL_136;
        }
        if (CI_ENABLE_METAL_DAG())
        {
          v57 = *(CI **)(a1 + 144);
          if (v57)
          {
            if ((CI::is_kernel_metalstitchable_linkable(v57, *(const CI::MetalContext **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) + 48), v56) & 1) != 0|| (CI::is_kernel_metalextern_linkable(*(CI **)(a1 + 144), *(const CI::MetalContext **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) + 48), v58) & 1) != 0)
            {
              v46 = "descendent of precompiled GeneralKernel is a Swizzle";
              goto LABEL_136;
            }
          }
        }
      }
    }
    else
    {
      if (v11 != 28)
      {
        if (v11 == 30)
        {
          v46 = "descendent of GeneralKernel is a Clamp";
LABEL_136:
          v47 = 0;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = v46;
LABEL_137:
          if (CI_DISABLE_MERGING_PRE_GENERAL())
          {
            v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
            v37 = "CI_DISABLE_MERGING_PRE_GENERAL";
            goto LABEL_54;
          }
LABEL_139:
          if (!v47)
            goto LABEL_55;
LABEL_140:
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) -= (*(int (**)(unint64_t))(*(_QWORD *)a2 + 208))(a2);
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2) == 51)
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = CI::Object::ref(a2);
          if ((v59 & 1) == 0)
          {
            v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24);
            if (!v50)
            {
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24);
            }
            v67[0] = MEMORY[0x1E0C809B0];
            v67[1] = 0x40000000;
            v67[2] = ___ZN14__CFDictionary9setValuesEPS_PKS__block_invoke;
            v67[3] = &__block_descriptor_tmp_199;
            v67[4] = v50;
            __CFDictionary::for_each(v29, v67);
          }
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24)
            || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24))
          {
            goto LABEL_147;
          }
          if (a4 || v11 != 28)
          {
            if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 232))(a2) & 1) == 0)
            {
              v52 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 40))(a2);
              v53 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8);
              v55 = v52 == 1 && *(_BYTE *)(v53 + 24) != 0;
              *(_BYTE *)(v53 + 24) = v55;
              if (!v16
                || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16) != 62
                || !*(_BYTE *)(v16 + 176))
              {
                goto LABEL_147;
              }
              goto LABEL_166;
            }
            if (v11 != 30)
LABEL_166:
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = 0;
          }
          else if (!CI::Affine::isOrientationWithIntegralTranslation((CI::Affine *)(a2 + 56)))
          {
            goto LABEL_166;
          }
LABEL_147:
          v40 = 0;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = HIDWORD(v61) != 0;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_DWORD)v61 != 0;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v60;
          goto LABEL_148;
        }
LABEL_130:
        v46 = "this program contains a GeneralKernel";
        goto LABEL_136;
      }
      if (!CI::Affine::isOrientationWithIntegralTranslation((CI::Affine *)(a2 + 56)))
      {
        v46 = "descendent of GeneralKernel is a resampling Affine";
        goto LABEL_136;
      }
    }
    v47 = 1;
    goto LABEL_137;
  }
  while (1)
  {
    v42 = v41[4];
    if (v42 <= a2)
      break;
LABEL_71:
    v41 = (_QWORD *)*v41;
    if (!v41)
      goto LABEL_81;
  }
  if (v42 < a2)
  {
    ++v41;
    goto LABEL_71;
  }
  if ((is_image_type & 1) != 0)
    goto LABEL_81;
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
  v37 = "child is a previously seen program";
LABEL_54:
  *(_QWORD *)(v36 + 24) = v37;
LABEL_55:
  v38 = (CI::Object *)(*(uint64_t (**)(unint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 328))(a2, *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152), 0);
  CI::SerialObjectPtrArray::append(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24), v38);
  CI::SerialStringArray::append(*(CI::SerialStringArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24), (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) + 1), a4);
  if (v38)
    CI::Object::unref(v38);
  v39 = strlen(*(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24));
  CI::SerialStringArray::append(*(CI::SerialStringArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24), *(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24), v39);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) -= v13;
  v40 = 1;
LABEL_148:
  _Block_object_dispose(&v63, 8);
  return v40;
}

char *SwizzlerMask(int a1)
{
  if ((a1 - 1) > 0x19)
    return 0;
  else
    return off_1E2EC8208[a1 - 1];
}

uint64_t CI::update_intermediate_descriptor_for_processor(int *a1, uint64_t a2, _BYTE *a3, int a4, int a5)
{
  int v8;
  uint64_t result;
  char v10;

  v8 = a4;
  if (a4 <= 0)
    v8 = *(_DWORD *)(a2 + 32);
  *a1 = v8;
  *((_BYTE *)a1 + 4) = 0;
  if ((a4 < 0 || a5)
    && !CI_NO_CM()
    && *(_QWORD *)(a2 + 24)
    && (int)CI::format_bits_per_component(*a1) <= 8)
  {
    if (CI_INTERMEDIATE_SRGB_TEXTURES()
      && ((*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 584))(a2, *a1, 3) & 1) != 0)
    {
      v10 = 2;
    }
    else
    {
      v10 = 1;
    }
    *((_BYTE *)a1 + 4) |= v10;
  }
  *((_BYTE *)a1 + 7) = a3[104];
  result = CI_FLIP_IMAGE_PROCESSOR();
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a3 + 408))(a3);
    if ((_DWORD)result)
      *((_BYTE *)a1 + 8) = 1;
  }
  return result;
}

void CI::ProgramNode::dispatch_main_program_args(uint64_t a1, uint64_t a2, void (**a3)(_QWORD), uint64_t a4, void *a5)
{
  dispatch_queue_t *v10;

  if (CI_ASYNC_KERNEL_COMPILE() && *(_DWORD *)(a2 + 344) != 1)
  {
    if (a4)
      (*(void (**)(uint64_t))(a4 + 16))(a4);
    v10 = (dispatch_queue_t *)(a1 + 104);
    Queue::execute_async(v10, a3);
    if (a5)
      Queue::execute_async(v10, a5);
  }
  else
  {
    a3[2](a3);
  }
}

unint64_t CI::ProgramNode::compute_kernel_digest(CI::ProgramNode *this, const CI::Context *a2)
{
  uint64_t v4;
  char *v5;
  int v6;
  char *p_src;
  size_t v8;
  unint64_t v9;
  _QWORD v11[8];
  _QWORD v12[5];
  _QWORD **v13;
  _QWORD *v14[2];
  _QWORD v15[4];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __n128 (*v19)(uint64_t, uint64_t);
  uint64_t (*v20)();
  int64x2_t v21[5];
  uint64_t __src;

  v16 = 0;
  v17 = &v16;
  v18 = 0x8002000000;
  v19 = __Block_byref_object_copy__26;
  v20 = __Block_byref_object_dispose__26;
  XXH64_reset(v21, 0);
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2000000000;
  v15[3] = 0;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x4002000000;
  v12[3] = __Block_byref_object_copy__67;
  v12[4] = __Block_byref_object_dispose__68;
  v14[0] = 0;
  v14[1] = 0;
  v13 = v14;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZNK2CI11ProgramNode21compute_kernel_digestEPKNS_7ContextE_block_invoke;
  v11[3] = &unk_1E2EC7F38;
  v11[4] = v12;
  v11[5] = v15;
  v11[6] = &v16;
  v11[7] = this;
  CI::ProgramNode::traverse_graph_preorder_stoppable((uint64_t)this, (uint64_t)v11);
  v4 = (uint64_t)(v17 + 5);
  __src = CI::Node::unique_child_count(this);
  XXH64_update(v4, (char *)&__src, 8uLL);
  LODWORD(__src) = *((_BYTE *)this + 144) & 1;
  XXH64_update((uint64_t)(v17 + 5), (char *)&__src, 4uLL);
  if (CI_ENABLE_METAL_IMAGEBLOCKS() == 2
    && (*(unsigned int (**)(const CI::Context *))(*(_QWORD *)a2 + 16))(a2) == 77)
  {
    v6 = *((_DWORD *)this + 35);
    v5 = (char *)this + 140;
    if (CI::MetalContext::use_imageblocks_for_format((uint64_t)a2, v6))
    {
      p_src = v5;
      v8 = 8;
    }
    else
    {
      LODWORD(__src) = 0;
      p_src = (char *)&__src;
      v8 = 4;
    }
    XXH64_update((uint64_t)(v17 + 5), p_src, v8);
  }
  v9 = XXH64_digest((uint64_t)(v17 + 5));
  _Block_object_dispose(v12, 8);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&v13, v14[0]);
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(&v16, 8);
  return v9;
}

__n128 __Block_byref_object_copy__26(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v2;
  result = *(__n128 *)(a2 + 72);
  v4 = *(_OWORD *)(a2 + 88);
  v5 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v4;
  *(__n128 *)(a1 + 72) = result;
  return result;
}

_QWORD *__Block_byref_object_copy__67(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__68(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
}

uint64_t ___ZNK2CI11ProgramNode21compute_kernel_digestEPKNS_7ContextE_block_invoke(_QWORD *a1, CI::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t v23;
  unint64_t v24;
  CI::Node *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  BOOL v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  int v42;
  uint64_t *__src;

  v9 = (_QWORD *)a1[7];
  v10 = *(_QWORD *)(a1[4] + 8);
  v11 = (uint64_t *)((char *)a2 + 36);
  v14 = *(_QWORD *)(v10 + 48);
  v12 = v10 + 48;
  v13 = v14;
  if (!v14)
    goto LABEL_12;
  v15 = *(_DWORD *)v11;
  v16 = v12;
  do
  {
    v17 = *(_DWORD *)(v13 + 32);
    v18 = v17 >= v15;
    if (v17 >= v15)
      v19 = (uint64_t *)v13;
    else
      v19 = (uint64_t *)(v13 + 8);
    if (v18)
      v16 = v13;
    v13 = *v19;
  }
  while (*v19);
  if (v16 != v12 && v15 >= *(_DWORD *)(v16 + 32))
  {
    v21 = *(uint64_t **)(v16 + 40);
  }
  else
  {
LABEL_12:
    v20 = *(_QWORD *)(a1[5] + 8);
    v21 = (uint64_t *)(*(_QWORD *)(v20 + 24) + 1);
    *(_QWORD *)(v20 + 24) = v21;
    v22 = (uint64_t **)(*(_QWORD *)(a1[4] + 8) + 40);
    __src = v11;
    std::__tree<std::__value_type<CI::NodeIndex,unsigned long>,std::__map_value_compare<CI::NodeIndex,std::__value_type<CI::NodeIndex,unsigned long>,std::less<CI::NodeIndex>,true>,std::allocator<std::__value_type<CI::NodeIndex,unsigned long>>>::__emplace_unique_key_args<CI::NodeIndex,std::piecewise_construct_t const&,std::tuple<CI::NodeIndex const&>,std::tuple<>>(v22, (unsigned int *)v11, (uint64_t)&std::piecewise_construct, (_DWORD **)&__src)[5] = v21;
  }
  v23 = *(_QWORD *)(a1[6] + 8) + 40;
  __src = v21;
  XXH64_update(v23, (char *)&__src, 8uLL);
  if ((_DWORD)a6 != -1)
  {
    v24 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v9 + 48))(v9, a6);
    v25 = (CI::Node *)v24;
    v28 = (_QWORD *)v9[11];
    v27 = v9 + 11;
    v26 = v28;
    if (!v28)
      goto LABEL_25;
    v29 = v27;
    do
    {
      v30 = v26[4];
      v31 = v30 >= v24;
      if (v30 >= v24)
        v32 = v26;
      else
        v32 = v26 + 1;
      if (v31)
        v29 = v26;
      v26 = (_QWORD *)*v32;
    }
    while (*v32);
    if (v29 == v27 || v24 < v29[4])
LABEL_25:
      v29 = v27;
    v33 = *(_QWORD *)(a1[6] + 8) + 40;
    __src = (uint64_t *)v29[5];
    XXH64_update(v33, (char *)&__src, 8uLL);
    v34 = *(_QWORD *)(a1[6] + 8) + 40;
    LODWORD(__src) = CI::Node::rois_count(v25);
    XXH64_update(v34, (char *)&__src, 4uLL);
    v35 = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)v25 + 16))(v25);
    v36 = *(_QWORD *)(a1[6] + 8) + 40;
    if (v35 == 52)
      LODWORD(__src) = *((_BYTE *)v25 + 144) & 1;
    else
      LODWORD(__src) = 0;
    XXH64_update(v36, (char *)&__src, 4uLL);
    if ((*(unsigned int (**)(CI::Node *))(*(_QWORD *)a2 + 16))(a2) == 46)
    {
      v41 = *(_QWORD *)(a1[6] + 8) + 40;
    }
    else
    {
      v42 = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)a2 + 16))(a2);
      v41 = *(_QWORD *)(a1[6] + 8) + 40;
      if (v42 != 44)
      {
        LODWORD(__src) = 1;
        goto LABEL_36;
      }
    }
    LODWORD(__src) = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)a2 + 208))(a2);
LABEL_36:
    v39 = v41;
    v40 = 4;
    goto LABEL_37;
  }
  v37 = *(_QWORD *)(a1[6] + 8) + 40;
  LODWORD(__src) = CI::Node::rois_count(a2);
  XXH64_update(v37, (char *)&__src, 4uLL);
  (*(void (**)(CI::Node *, uint64_t))(*(_QWORD *)a2 + 392))(a2, *(_QWORD *)(a1[6] + 8) + 40);
  v38 = *(_QWORD *)(a1[6] + 8) + 40;
  __src = (uint64_t *)CI::Node::unique_child_count(a2);
  v39 = v38;
  v40 = 8;
LABEL_37:
  XXH64_update(v39, (char *)&__src, v40);
  return 0;
}

uint64_t CI::ProgramNode::compute_kernel_attributes(CI::ProgramNode *this, CI::Context *a2)
{
  uint64_t v2;
  _QWORD v4[8];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 1;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 1;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI11ProgramNode25compute_kernel_attributesEPNS_7ContextE_block_invoke;
  v4[3] = &unk_1E2EC7F60;
  v4[4] = &v13;
  v4[5] = &v9;
  v4[6] = &v5;
  v4[7] = a2;
  CI::ProgramNode::traverse_graph_preorder_stoppable((uint64_t)this, (uint64_t)v4);
  v2 = *((unsigned __int8 *)v14 + 24) | (2 * *((unsigned __int8 *)v10 + 24)) | (4
                                                                              * *((unsigned __int8 *)v6
                                                                                              + 24));
  _Block_object_dispose(&v5, 8);
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  return v2;
}

uint64_t ___ZNK2CI11ProgramNode25compute_kernel_attributesEPNS_7ContextE_block_invoke(_QWORD *a1, CI::Object *this, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  CI::Object *v8;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  _QWORD v19[6];

  if (a6 == -1)
  {
    v19[4] = v6;
    v19[5] = v7;
    v8 = this;
    v19[0] = this;
    if (this)
      CI::Object::ref((uint64_t)this);
    v10 = (*(uint64_t (**)(CI::Object *, _QWORD))(*(_QWORD *)v8 + 320))(v8, a1[7]);
    v19[1] = v10;
    if (v10)
      v8 = (CI::Object *)v10;
    if ((*(unsigned int (**)(CI::Object *))(*(_QWORD *)v8 + 16))(v8) == 49
      || (*(unsigned int (**)(CI::Object *))(*(_QWORD *)v8 + 16))(v8) == 50
      || (*(unsigned int (**)(CI::Object *))(*(_QWORD *)v8 + 16))(v8) == 51)
    {
      v11 = (_BYTE *)*((_QWORD *)v8 + 6);
      if (v11)
      {
        v12 = *(_QWORD *)(a1[4] + 8);
        if (v11[165])
          v13 = *(_BYTE *)(v12 + 24) == 0;
        else
          v13 = 1;
        v14 = !v13;
        *(_BYTE *)(v12 + 24) = v14;
        v15 = *(_QWORD *)(a1[5] + 8);
        if (v11[162])
          v16 = *(_BYTE *)(v15 + 24) == 0;
        else
          v16 = 1;
        v17 = !v16;
        *(_BYTE *)(v15 + 24) = v17;
        *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) |= v11[166];
      }
    }
    CI::ConvertedNodeRAII::~ConvertedNodeRAII((CI::ConvertedNodeRAII *)v19);
  }
  return 0;
}

void CI::ProgramNode::addDestinationTransform(CI::ProgramNode *this, const CI::Context *a2, const CI::Affine *a3)
{
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  __int128 v11;
  double x;
  double y;
  double width;
  double height;
  _QWORD *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void (*v26[5])(_QWORD);
  __int128 v27;
  __int128 v28;
  __int128 v29;
  const CI::Context *v30;
  _QWORD v31[6];
  _OWORD v32[3];
  CGAffineTransform v33;
  _QWORD v34[3];
  CGRect v35;
  CGRect v36;

  v6 = (double *)*((_QWORD *)this + 6);
  v8 = v6[7];
  v7 = v6[8];
  v10 = v6[9];
  v9 = v6[10];
  v24 = v6[12];
  v25 = v6[11];
  CI::AffineNode::append_transform((CI::AffineNode *)v6, a3);
  memset(v34, 0, sizeof(v34));
  v35 = *(CGRect *)*(_QWORD *)CI::Node::rois(this);
  v11 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v33.a = *(_OWORD *)a3;
  *(_OWORD *)&v33.c = v11;
  *(_OWORD *)&v33.tx = *((_OWORD *)a3 + 2);
  v36 = CGRectApplyAffineTransform(v35, &v33);
  x = v36.origin.x;
  y = v36.origin.y;
  width = v36.size.width;
  height = v36.size.height;
  v16 = (_QWORD *)CI::Node::rois(this);
  CI::SerialRectArray::replace(v16, (uint64_t)v34, 0, x, y, width, height);
  v17 = *((double *)a3 + 2);
  v18 = *((double *)a3 + 3);
  v19 = *((double *)a3 + 1);
  v20 = v7 * v17 + v8 * *(double *)a3;
  v21 = v9 * v17 + v10 * *(double *)a3;
  v22 = *((double *)a3 + 5);
  v23 = v24 * v17 + v25 * *(double *)a3 + *((double *)a3 + 4);
  *(double *)v31 = v20;
  *(double *)&v31[1] = v7 * v18 + v8 * v19;
  *(double *)&v31[2] = v21;
  *(double *)&v31[3] = v9 * v18 + v10 * v19;
  *(double *)&v31[4] = v23;
  *(double *)&v31[5] = v24 * v18 + v25 * v19 + v22;
  CI::Affine::inverse((CI::Affine *)v31, (double *)v32);
  v26[1] = (void (*)(_QWORD))1174405120;
  v27 = v32[0];
  v26[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
  v26[2] = ___ZN2CI11ProgramNode23addDestinationTransformERKNS_7ContextERKNS_6AffineE_block_invoke;
  v26[3] = (void (*)(_QWORD))&__block_descriptor_tmp_71_0;
  v26[4] = (void (*)(_QWORD))this;
  v28 = v32[1];
  v29 = v32[2];
  v30 = a2;
  CI::ProgramNode::dispatch_main_program_args((uint64_t)this, (uint64_t)a2, v26, 0, 0);
}

double CI::AffineNode::append_transform(CI::AffineNode *this, const CI::Affine *a2)
{
  _OWORD *v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  v3 = (_OWORD *)((char *)this + 56);
  result = CI::Affine::operator*((double *)this + 7, (double *)a2, (double *)v6);
  if (v3 != v6)
  {
    v5 = v6[1];
    *(_OWORD *)((char *)this + 56) = v6[0];
    *(_OWORD *)((char *)this + 72) = v5;
    result = *(double *)&v7;
    *(_OWORD *)((char *)this + 88) = v7;
  }
  return result;
}

char *CI::SerialRectArray::replace(_QWORD *a1, uint64_t a2, int a3, double a4, double a5, double a6, double a7)
{
  CGRect *v10;
  char *result;
  CGRect v12;

  v12 = CGRectStandardize(*(CGRect *)&a4);
  v10 = (CGRect *)(*a1 + 120 * a3);
  *v10 = v12;
  result = (char *)&v10[1];
  if (&v10[1] != (CGRect *)a2)
    return std::vector<CI::parentROI>::__assign_with_size[abi:nn180100]<CI::parentROI*,CI::parentROI*>(result, *(char **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
  return result;
}

void ___ZN2CI11ProgramNode23addDestinationTransformERKNS_7ContextERKNS_6AffineE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  CI::Vector *v4;
  double v5;
  CI::Vector *v6;
  unsigned int v7;
  CGAffineTransform v8;
  _BYTE v9[16];
  uint64_t (**v10)();
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)&v8.a = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&v8.c = v3;
  *(_OWORD *)&v8.tx = *(_OWORD *)(a1 + 72);
  CI::Vector::Vector((CI::Vector *)v9, &v8);
  v4 = *(CI::Vector **)(*(_QWORD *)(v2 + 128) + 24);
  if ((*(unsigned int (**)(CI::Vector *))(*(_QWORD *)v4 + 16))(v4) == 58)
  {
    v5 = CI::Vector::clone(v4, (const CI::Vector *)v9);
    if ((*(unsigned int (**)(_QWORD, double))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), v5) == 74)
    {
      v6 = *(CI::Vector **)(*(_QWORD *)(v2 + 128) + 32);
      if ((*(unsigned int (**)(CI::Vector *))(*(_QWORD *)v6 + 16))(v6) == 58)
        CI::Vector::clone(v6, (const CI::Vector *)v9);
    }
  }
  v10 = off_1E2EBBEE8;
  do
    v7 = __ldaxr(dword_1ECF873D0);
  while (__stlxr(v7 - 1, dword_1ECF873D0));
}

double CI::ProgramNode::restoreDestinationTransform(CI::AffineNode **this, const CI::Affine *a2)
{
  return CI::AffineNode::append_transform(this[6], a2);
}

void CI::ProgramNode::create_program_and_arguments(CI::ProgramNode *this, CI::Context *a2, const char *a3)
{
  NSObject *v6;
  os_signpost_id_t v7;
  uint64_t v8;
  const CI::MetalContext *v9;
  uint64_t v10;
  double v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  size_t v18;
  int v19;
  CI::Vector *v20;
  CI::Object *v21;
  CI::Vector *v22;
  unint64_t v23;
  uint64_t CachedMainProgram;
  CI::SerialObjectPtrArray *v25;
  int v26;
  CI::SerialObjectPtrArray *v27;
  uint64_t v28;
  CI::SerialStringArray *v29;
  void *v30;
  NSObject *v31;
  os_signpost_id_t v32;
  NSObject *v33;
  _QWORD v34[6];
  _QWORD v35[6];
  void (*v36[9])(_QWORD);
  int v37;
  uint8_t buf[8];
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  CGAffineTransform v44;
  CGAffineTransform v45;
  CGAffineTransform v46;
  _BYTE v47[8];
  os_signpost_id_t v48;

  if (CI_VERBOSE_SIGNPOSTS())
  {
    v6 = ci_signpost_log_render();
    v7 = *((int *)this + 9) | (unint64_t)((*(uint64_t (**)(CI::Context *))(*(_QWORD *)a2 + 272))(a2) << 32);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v7, "create_program_and_arguments", (const char *)&unk_192520C83, buf, 2u);
    }
  }
  v8 = (*(uint64_t (**)(CI::Context *))(*(_QWORD *)a2 + 272))(a2);
  TimerBase::TimerBase((uint64_t)v47, v8, *((_DWORD *)this + 9), (uint64_t)"create_program_and_arguments", 37);
  v9 = (const CI::MetalContext *)*((_QWORD *)this + 6);
  v10 = operator new();
  *(_QWORD *)v10 = 0;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_DWORD *)(v10 + 4) = 32;
  *(_QWORD *)(v10 + 16) = malloc_type_calloc(0x16uLL, 8uLL, 0x80040B8603338uLL);
  *(_DWORD *)(v10 + 8) = 32;
  *((_QWORD *)this + 16) = v10;
  if ((*(unsigned int (**)(const CI::MetalContext *))(*(_QWORD *)v9 + 16))(v9) == 28)
  {
    v11 = CI::Affine::inverse((const CI::MetalContext *)((char *)v9 + 56), (double *)buf);
    v13 = *(double *)buf;
    v12 = v39;
    v15 = v40;
    v14 = v41;
    v16 = v42;
    v17 = v43;
    v9 = (const CI::MetalContext *)(*(uint64_t (**)(const CI::MetalContext *, _QWORD, double))(*(_QWORD *)v9 + 48))(v9, 0, v11);
    v18 = 1;
  }
  else
  {
    v18 = 0;
    v14 = 1.0;
    v12 = 0.0;
    v15 = 0.0;
    v16 = 0.0;
    v17 = 0.0;
    v13 = 1.0;
  }
  v19 = (*(uint64_t (**)(CI::Context *))(*(_QWORD *)a2 + 16))(a2);
  v20 = (CI::Vector *)operator new();
  v21 = v20;
  if (v19 == 74)
  {
    v46.a = v13;
    v46.b = v12;
    v46.c = v15;
    v46.d = v14;
    v46.tx = v16;
    v46.ty = v17;
    CI::Vector::Vector(v20, &v46);
    v22 = (CI::Vector *)operator new();
    v45.a = v13;
    v45.b = v12;
    v45.c = v15;
    v45.d = v14;
    v45.tx = v16;
    v45.ty = v17;
    CI::Vector::Vector(v22, &v45);
    CI::SerialObjectPtrArray::append(*((_QWORD *)this + 16), v21);
    CI::SerialObjectPtrArray::append(*((_QWORD *)this + 16), v22);
    CI::Object::unref(v21);
    v21 = v22;
  }
  else
  {
    v44.a = v13;
    v44.b = v12;
    v44.c = v15;
    v44.d = v14;
    v44.tx = v16;
    v44.ty = v17;
    CI::Vector::Vector(v20, &v44);
    CI::SerialObjectPtrArray::append(*((_QWORD *)this + 16), v21);
  }
  CI::Object::unref(v21);
  v23 = CI::ProgramNode::compute_kernel_digest(this, a2);
  *((_QWORD *)this + 20) = v23;
  CachedMainProgram = CI::Context::findCachedMainProgram((uint64_t)a2, v23);
  *((_QWORD *)this + 15) = CachedMainProgram;
  *((_BYTE *)this + 168) = CachedMainProgram == 0;
  if (CachedMainProgram)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)CachedMainProgram + 16))(CachedMainProgram) == 68)
    {
      CI::create_metal_args(a2, v9, this, *((const CI::ProgramNode **)this + 16), v25);
    }
    else if ((*(unsigned int (**)(CI::Context *))(*(_QWORD *)a2 + 16))(a2) == 75)
    {
      CI::create_sw_args(a2, v9, this, *((const CI::ProgramNode **)this + 16), v27);
    }
    else
    {
      v28 = operator new();
      *(_QWORD *)v28 = 0;
      *(_OWORD *)(v28 + 24) = 0u;
      *(_OWORD *)(v28 + 40) = 0u;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 4) = 32;
      *(_QWORD *)(v28 + 16) = malloc_type_calloc(0x16uLL, 4uLL, 0x100004052888210uLL);
      *(_DWORD *)(v28 + 8) = 32;
      v29 = (CI::SerialStringArray *)operator new();
      CI::SerialStringArray::SerialStringArray(v29, 0x20u, 64);
      CI::ShaderBuilder::ShaderBuilder(buf, (uint64_t)a2, (uint64_t)v9, (uint64_t)this);
      CI::ShaderBuilder::prepare_arguments_only((CI::ShaderBuilder *)buf, v18);
      CI::MainProgram::num_arguments(*((CI::MainProgram **)this + 15));
      v30 = *(void **)(v28 + 16);
      if (v30)
        free(v30);
      MEMORY[0x194025AAC](v28, 0x1010C40C0D7B093);
      CI::SerialStringArray::~SerialStringArray(v29);
      MEMORY[0x194025AAC]();
      CI::ShaderBuilder::~ShaderBuilder((CI::ShaderBuilder *)buf);
    }
  }
  else
  {
    v26 = *((_DWORD *)this + 9);
    v36[0] = (void (*)(_QWORD))MEMORY[0x1E0C809B0];
    v36[1] = (void (*)(_QWORD))0x40000000;
    v36[2] = ___ZN2CI11ProgramNode28create_program_and_argumentsEPNS_7ContextEPKc_block_invoke;
    v36[3] = (void (*)(_QWORD))&__block_descriptor_tmp_90_0;
    v36[4] = (void (*)(_QWORD))this;
    v36[5] = (void (*)(_QWORD))a3;
    v36[6] = (void (*)(_QWORD))a2;
    v36[7] = (void (*)(_QWORD))v9;
    v36[8] = (void (*)(_QWORD))v18;
    v37 = v26;
    v34[5] = v9;
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 0x40000000;
    v35[2] = ___ZN2CI11ProgramNode28create_program_and_argumentsEPNS_7ContextEPKc_block_invoke_3;
    v35[3] = &__block_descriptor_tmp_91_0;
    v35[4] = a2;
    v35[5] = v9;
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 0x40000000;
    v34[2] = ___ZN2CI11ProgramNode28create_program_and_argumentsEPNS_7ContextEPKc_block_invoke_4;
    v34[3] = &__block_descriptor_tmp_92;
    v34[4] = a2;
    CI::ProgramNode::dispatch_main_program_args((uint64_t)this, (uint64_t)a2, v36, (uint64_t)v35, v34);
  }
  if (CI_VERBOSE_SIGNPOSTS())
  {
    v31 = ci_signpost_log_render();
    v32 = v48;
    if (v48 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v33 = v31;
      if (os_signpost_enabled(v31))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1921E4000, v33, OS_SIGNPOST_INTERVAL_END, v32, "create_program_and_arguments", (const char *)&unk_192520C83, buf, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)v47);
}

void ___ZN2CI11ProgramNode28create_program_and_argumentsEPNS_7ContextEPKc_block_invoke(uint64_t a1)
{
  int *v2;
  CI *v3;
  std::chrono::steady_clock::time_point v4;
  CI::SerialObjectPtrArray *v5;
  CI::SerialObjectPtrArray *v6;
  uint64_t sw_dag;
  NSObject *v8;
  os_signpost_id_t v9;
  uint64_t v10;
  uint64_t v11;
  CI::SerialStringArray *v12;
  const char *v13;
  CI::SerialStringArray *v14;
  size_t v15;
  const char *v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_signpost_id_t v20;
  NSObject *v21;
  std::chrono::steady_clock::time_point v22;
  uint64_t v23;
  uint64_t CachedMainProgram;
  CI::Object *v25;
  char *v26;
  int v27;
  FILE *v28;
  FILE *v29;
  _QWORD v30[6];
  _QWORD v31[7];
  int v32;
  uint8_t buf[320];
  char v34[8];
  os_signpost_id_t v35;
  _QWORD v36[3];

  v2 = *(int **)(a1 + 32);
  v3 = *(CI **)(a1 + 40);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48)) == 77)
    v3 = (CI *)"ciKernelMain";
  x_stream_init(v36);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48)) == 74
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48)) == 77
    || (CI_PRINT_TIME() & 0x100) != 0)
  {
    v3 = (CI *)(*(uint64_t (**)(int *, _QWORD *))(*(_QWORD *)v2 + 408))(v2, v36);
  }
  v4.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (CI_ENABLE_METAL_DAG()
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48)) == 77)
  {
    *((_QWORD *)v2 + 15) = CI::create_metal_dag(v3, *(const CI::MetalContext **)(a1 + 48), *(const CI::MetalContext **)(a1 + 56), (const CI::Node *)v2, *((const CI::ProgramNode **)v2 + 16), v5);
    CI_ENABLE_METAL_DAG();
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48)) == 75)
  {
    sw_dag = CI::create_sw_dag(v3, *(const CI::SWContext **)(a1 + 48), *(const CI::SWContext **)(a1 + 56), (const CI::Node *)v2, *((const CI::ProgramNode **)v2 + 16), v6);
    *((_QWORD *)v2 + 15) = sw_dag;
    if (sw_dag)
      goto LABEL_29;
  }
  else if (*((_QWORD *)v2 + 15))
  {
    goto LABEL_29;
  }
  if (CI_VERBOSE_SIGNPOSTS())
  {
    v8 = ci_signpost_log_render();
    v9 = v2[9] | (unint64_t)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 272))(*(_QWORD *)(a1 + 48)) << 32);
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v9, "create_main_program_fosl", (const char *)&unk_192520C83, buf, 2u);
    }
  }
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 272))(*(_QWORD *)(a1 + 48));
  TimerBase::TimerBase((uint64_t)v34, v10, v2[9], (uint64_t)"create_main_program_fosl", 0);
  v11 = operator new();
  *(_QWORD *)v11 = 0;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_QWORD *)(v11 + 56) = 0;
  *(_DWORD *)(v11 + 4) = 32;
  *(_QWORD *)(v11 + 16) = malloc_type_calloc(0x16uLL, 4uLL, 0x100004052888210uLL);
  *(_DWORD *)(v11 + 8) = 32;
  v12 = (CI::SerialStringArray *)operator new();
  CI::SerialStringArray::SerialStringArray(v12, 0x20u, 64);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48)) == 74)
  {
    CI::SerialValArray<int>::append((void **)v11, 46);
    CI::SerialStringArray::append(v12, "vertexTransform0", 0x10uLL);
    CI::SerialValArray<int>::append((void **)v11, 47);
    v13 = "vertexTransform1";
    v14 = v12;
    v15 = 16;
  }
  else
  {
    CI::SerialValArray<int>::append((void **)v11, 44);
    v13 = "vertexTransform";
    v14 = v12;
    v15 = 15;
  }
  CI::SerialStringArray::append(v14, v13, v15);
  CI::ShaderBuilder::ShaderBuilder(buf, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)v2);
  CI::ShaderBuilder::prepare_tree_and_arguments((CI::ShaderBuilder *)buf, *(_QWORD *)(a1 + 64));
  if (CI_HARVEST_BIN_ARCHIVE() == 1)
    v16 = "ciKernelMain";
  else
    v16 = (const char *)v3;
  v17 = CI::ShaderBuilder::construct_shader((CI::ShaderBuilder *)buf, v16);
  v18 = CI::ProgramNode::compute_kernel_attributes((CI::ProgramNode *)v2, *(CI::Context **)(a1 + 48));
  *((_QWORD *)v2 + 15) = (*(uint64_t (**)(_QWORD, _QWORD, CI *, char *, uint64_t, CI::SerialStringArray *, uint64_t, int *))(**(_QWORD **)(a1 + 48) + 600))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 72), v3, v17, v11, v12, v18, v2 + 35);
  CI::ShaderBuilder::~ShaderBuilder((CI::ShaderBuilder *)buf);
  if (CI_VERBOSE_SIGNPOSTS())
  {
    v19 = ci_signpost_log_render();
    v20 = v35;
    if (v35 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v21 = v19;
      if (os_signpost_enabled(v19))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1921E4000, v21, OS_SIGNPOST_INTERVAL_END, v20, "create_main_program_fosl", (const char *)&unk_192520C83, buf, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)v34);
LABEL_29:
  v22.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v23 = *((_QWORD *)v2 + 15);
  *(double *)(v23 + 32) = (double)(v22.__d_.__rep_ - v4.__d_.__rep_) / 1000000000.0;
  *(_QWORD *)(v23 + 16) = *((_QWORD *)v2 + 20);
  if (CI_ENABLE_KERNEL_CACHE())
    CI::Context::cacheMainProgram(*(_QWORD *)(a1 + 48), *((_QWORD *)v2 + 20), *((CI::Object **)v2 + 15));
  CachedMainProgram = CI::Context::findCachedMainProgram(*(_QWORD *)(a1 + 48), *((_QWORD *)v2 + 20));
  v25 = (CI::Object *)*((_QWORD *)v2 + 15);
  *((_BYTE *)v2 + 168) = CachedMainProgram == (_QWORD)v25;
  if (CachedMainProgram)
  {
    if (v25)
      CI::Object::unref(v25);
    *((_QWORD *)v2 + 15) = CachedMainProgram;
  }
  v26 = *(char **)(a1 + 48);
  if (CI_PRINT_PROGRAM())
  {
    v27 = (*(uint64_t (**)(char *))(*(_QWORD *)v26 + 272))(v26);
    if (CI_PRINT_PROGRAM_context(v27, v26 + 236))
    {
      v28 = (FILE *)CI_LOG_FILE();
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 0x40000000;
      v31[2] = ___ZN2CI11ProgramNode28create_program_and_argumentsEPNS_7ContextEPKc_block_invoke_76;
      v31[3] = &__block_descriptor_tmp_84;
      v31[4] = v2;
      v31[5] = v3;
      v31[6] = *(_QWORD *)(a1 + 48);
      v32 = *(_DWORD *)(a1 + 72);
      stream_to_file(v28, (uint64_t)v31);
    }
  }
  if (CI::MainProgram::num_arguments(*((CI::MainProgram **)v2 + 15)) != **((_DWORD **)v2 + 16))
  {
    v29 = (FILE *)CI_LOG_FILE();
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 0x40000000;
    v30[2] = ___ZN2CI11ProgramNode28create_program_and_argumentsEPNS_7ContextEPKc_block_invoke_2;
    v30[3] = &__block_descriptor_tmp_89;
    v30[4] = v2;
    v30[5] = v3;
    stream_to_file(v29, (uint64_t)v30);
  }
  if ((int)CI_ASYNC_KERNEL_COMPILE() >= 2)
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v2 + 15) + 72))(*((_QWORD *)v2 + 15), *(unsigned int *)(a1 + 72));
  x_stream_free((uint64_t)v36);
}

uint64_t ___ZN2CI11ProgramNode28create_program_and_argumentsEPNS_7ContextEPKc_block_invoke_76(uint64_t a1, FILE *a2)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  int v7;
  uint64_t v8;
  const char *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(const char **)(a1 + 40);
  v6 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 304))(*(_QWORD *)(a1 + 48));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 272))(*(_QWORD *)(a1 + 48));
  v8 = *(_QWORD *)(a1 + 48);
  v10 = *(unsigned __int8 *)(v8 + 236);
  v9 = (const char *)(v8 + 236);
  if (v10)
    v11 = ":";
  else
    v11 = "";
  fprintf(a2, "CI_PRINT_PROGRAM %s (%s context %d%s%s frame %lu) node:%d digest:%016llX = \n", v5, v6, v7, v11, v9, *(_QWORD *)(v9 - 84), *(_DWORD *)(a1 + 56), *(_QWORD *)(v4 + 160));
  fwrite("// Argument Names\n", 0x12uLL, 1uLL, a2);
  CI::MainProgram::print_argument_names(*(CI::MainProgram **)(v4 + 120), a2);
  fputc(10, a2);
  fwrite("// Argument Types\n", 0x12uLL, 1uLL, a2);
  CI::MainProgram::print_argument_types(*(CI::MainProgram **)(v4 + 120), a2);
  fputc(10, a2);
  fwrite("// Arguments\n", 0xDuLL, 1uLL, a2);
  v12 = *(_QWORD *)(v4 + 128);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = ___ZNK2CI20SerialObjectPtrArray5printEP7__sFILE_block_invoke;
  v14[3] = &__block_descriptor_tmp_214;
  v14[4] = v12;
  stream_to_file(a2, (uint64_t)v14);
  fputc(10, a2);
  return (*(uint64_t (**)(_QWORD, FILE *))(**(_QWORD **)(v4 + 120) + 56))(*(_QWORD *)(v4 + 120), a2);
}

uint64_t ___ZN2CI11ProgramNode28create_program_and_argumentsEPNS_7ContextEPKc_block_invoke_2(uint64_t a1, FILE *a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD v9[5];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(const char **)(a1 + 40);
  v5 = *(_QWORD *)(v3 + 160);
  v6 = CI::MainProgram::num_arguments(*(CI::MainProgram **)(v3 + 120));
  fprintf(a2, "Argument count mismatch for program (%s) <%016llx> (%d != %d).\n\n", v4, v5, v6, **(_DWORD **)(v3 + 128));
  fwrite("[argument types]\n", 0x11uLL, 1uLL, a2);
  CI::MainProgram::print_argument_types(*(CI::MainProgram **)(v3 + 120), a2);
  fputc(10, a2);
  fwrite("[argument names]\n", 0x11uLL, 1uLL, a2);
  CI::MainProgram::print_argument_names(*(CI::MainProgram **)(v3 + 120), a2);
  fputc(10, a2);
  fwrite("[argument objects]\n", 0x13uLL, 1uLL, a2);
  v7 = *(_QWORD *)(v3 + 128);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK2CI20SerialObjectPtrArray5printEP7__sFILE_block_invoke;
  v9[3] = &__block_descriptor_tmp_214;
  v9[4] = v7;
  stream_to_file(a2, (uint64_t)v9);
  return fputc(10, a2);
}

uint64_t ___ZN2CI11ProgramNode28create_program_and_argumentsEPNS_7ContextEPKc_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    CI::Object::ref(v2);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return CI::Object::ref(result);
  return result;
}

void ___ZN2CI11ProgramNode28create_program_and_argumentsEPNS_7ContextEPKc_block_invoke_4(uint64_t a1)
{
  CI::Object *v2;
  CI::Object *v3;

  v2 = *(CI::Object **)(a1 + 32);
  if (v2)
    CI::Object::unref(v2);
  v3 = *(CI::Object **)(a1 + 40);
  if (v3)
    CI::Object::unref(v3);
}

const char *CI::ProgramNode::program_name(CI::ProgramNode *this)
{
  uint64_t v1;
  uint64_t v4;
  const __CFString *v5;

  v1 = *((_QWORD *)this + 15);
  if (v1)
    return *(const char **)(v1 + 48);
  v4 = *((_QWORD *)this + 6);
  if ((*(int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) < 41
    || (*(int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) > 42)
  {
    return 0;
  }
  v5 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6));
  return CFStringGetCStringPtr(v5, 0x8000100u);
}

void CI::ProgramNode::graphvis_set_title(uint64_t a1, void *a2, _QWORD *a3)
{
  unsigned int *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  _QWORD *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;

  if (CI_GRAPHVIZ_INTERNAL()
    || (CI_PRINT_TREE_dump_intermediates() & 1) != 0
    || CI_PRINT_TREE_dump_outputs())
  {
    v6 = (unsigned int *)(a1 + 36);
  }
  else
  {
    v18 = a1;
    v13 = std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(a3, &v18);
    if (!v13)
    {
      v8 = *(_DWORD *)(a1 + 140);
      goto LABEL_17;
    }
    v6 = (unsigned int *)(v13 + 3);
  }
  v7 = *v6;
  v8 = *(_DWORD *)(a1 + 140);
  if ((_DWORD)v7)
  {
    if (v8)
    {
      v9 = CI::name_for_format(v8);
      v10 = "s'";
      if ((*(_BYTE *)(a1 + 144) & 2) == 0)
        v10 = "";
      if ((*(_BYTE *)(a1 + 144) & 1) != 0)
        v11 = "s";
      else
        v11 = v10;
      v12 = (const char *)CFStringCreateWithFormat(0, 0, CFSTR("%u  %s%s"), v7, v9, v11);
    }
    else
    {
      v12 = (const char *)CFStringCreateWithFormat(0, 0, CFSTR("%u"), *v6);
    }
    goto LABEL_24;
  }
LABEL_17:
  if (!v8)
    return;
  v14 = CI::name_for_format(v8);
  v15 = "s'";
  if ((*(_BYTE *)(a1 + 144) & 2) == 0)
    v15 = "";
  if ((*(_BYTE *)(a1 + 144) & 1) != 0)
    v16 = "s";
  else
    v16 = v15;
  v12 = (const char *)CFStringCreateWithFormat(0, 0, CFSTR("%s%s"), v14, v16);
LABEL_24:
  v17 = v12;
  if (v12)
  {
    CIGVNodeSetTitle(a2, v12);
    CFRelease(v17);
  }
}

void CI::ProgramNode::print_for_graphviz(uint64_t a1, FILE *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  dispatch_queue_t v9;
  const char *v10;
  _QWORD v11[10];
  BOOL v12;
  _QWORD v13[6];
  _QWORD v14[3];
  char v15;
  _QWORD v16[5];
  _BYTE v17[32];
  int v18;
  _QWORD v19[3];
  int v20;
  _QWORD v21[5];
  _QWORD v22[3];
  int v23;
  _QWORD v24[5];
  _QWORD v25[129];

  v25[128] = *MEMORY[0x1E0C80C00];
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2000000000;
  v6 = MEMORY[0x1E0C809B0];
  v23 = -1;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 0x40000000;
  v21[2] = ___ZNK2CI11ProgramNode18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEENS_4Node9NodeStatsE_block_invoke;
  v21[3] = &unk_1E2EC8058;
  v21[4] = v22;
  CI::ProgramNode::traverse_graph_preorder_stoppable(a1, (uint64_t)v21);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  v19[0] = 0;
  v19[1] = v19;
  v8 = v7 == 30;
  v19[2] = 0x2000000000;
  v20 = -1;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x5002000000;
  v16[3] = __Block_byref_object_copy__100;
  v16[4] = __Block_byref_object_dispose__101;
  memset(v17, 0, sizeof(v17));
  v18 = 1065353216;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2000000000;
  v15 = 0;
  v13[0] = v6;
  v13[1] = 0x40000000;
  v13[2] = ___ZNK2CI11ProgramNode18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEENS_4Node9NodeStatsE_block_invoke_102;
  v13[3] = &unk_1E2EC8080;
  v13[4] = v16;
  v13[5] = v19;
  CI::ProgramNode::traverse_graph_preorder_stoppable(a1, (uint64_t)v13);
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x42802000000;
  v24[3] = __Block_byref_object_copy__104;
  v24[4] = __Block_byref_object_dispose__105;
  bzero(v25, 0x400uLL);
  v11[0] = v6;
  v11[1] = 0x40000000;
  v11[2] = ___ZNK2CI11ProgramNode18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEENS_4Node9NodeStatsE_block_invoke_106;
  v11[3] = &unk_1E2EC80A8;
  v12 = v8;
  v11[4] = v24;
  v11[5] = v16;
  v11[8] = a2;
  v11[9] = a3;
  v11[6] = v14;
  v11[7] = a1;
  CI::ProgramNode::traverse_graph_preorder_stoppable(a1, (uint64_t)v11);
  fputc(10, a2);
  v9 = CI::ProgramNode::mainProgram((dispatch_queue_t *)a1);
  if (v9)
  {
    v10 = (const char *)(*((uint64_t (**)(dispatch_queue_t))v9->isa + 8))(v9);
    fprintf(a2, "\ntype=%s", v10);
  }
  _Block_object_dispose(v24, 8);
  _Block_object_dispose(v14, 8);
  _Block_object_dispose(v16, 8);
  std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v17);
  _Block_object_dispose(v19, 8);
  _Block_object_dispose(v22, 8);
}

uint64_t ___ZNK2CI11ProgramNode18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEENS_4Node9NodeStatsE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_DWORD *)(v4 + 24) < a4)
    *(_DWORD *)(v4 + 24) = a4;
  return 0;
}

uint64_t __Block_byref_object_copy__100(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__101(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

BOOL ___ZNK2CI11ProgramNode18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEENS_4Node9NodeStatsE_block_invoke_102(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;

  v8 = a2;
  v3 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &v8);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
  if (v3)
  {
    v9 = &v8;
    if (!*((_DWORD *)std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v4, &v8, (uint64_t)&std::piecewise_construct, &v9)+ 6))
    {
      v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
      v9 = &v8;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v6, &v8, (uint64_t)&std::piecewise_construct, &v9)+ 6) = v5;
      --*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    }
  }
  else
  {
    v9 = &v8;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v4, &v8, (uint64_t)&std::piecewise_construct, &v9)+ 6) = 0;
  }
  return v3 != 0;
}

void *__Block_byref_object_copy__104(uint64_t a1, uint64_t a2)
{
  return memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x400uLL);
}

uint64_t ___ZNK2CI11ProgramNode18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEENS_4Node9NodeStatsE_block_invoke_106(uint64_t a1, _DWORD **a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6)
{
  _QWORD *v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  FILE *v17;
  const char *v18;
  size_t v19;
  _QWORD *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  FILE *v24;
  uint64_t v25;
  _QWORD *v26;
  int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  FILE *v35;
  uint64_t v36;
  _QWORD *v37;
  _DWORD **v38;
  _QWORD *v39;

  v38 = a2;
  v11 = *(_QWORD **)(a1 + 56);
  if (a4 <= 0x3FF)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + a4 + 40) = (*((uint64_t (**)(_DWORD **))*a2 + 5))(a2);
  if (a3)
  {
    fputc(10, *(FILE **)(a1 + 64));
    v12 = *(unsigned __int8 *)(a1 + 80);
    if ((int)v12 < (int)a4)
    {
      do
      {
        if (v12 <= 0x3FF
          && (v13 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + v12 + 40),
              v14 = v13 != 0,
              v15 = v13 - 1,
              v15 != 0 && v14))
        {
          v16 = v12 + 1;
          v17 = *(FILE **)(a1 + 64);
          if (v12 + 1 == a4 && v15 == a5)
          {
            fwrite("╰─", 6uLL, 1uLL, v17);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + v12 + 40) = 0;
          }
          else
          {
            if (v16 == a4)
            {
              v18 = "├─";
              v19 = 6;
            }
            else
            {
              v18 = "│ ";
              v19 = 4;
            }
            fwrite(v18, v19, 1uLL, v17);
          }
        }
        else
        {
          fwrite("  ", 2uLL, 1uLL, *(FILE **)(a1 + 64));
          v16 = v12 + 1;
        }
        v12 = v16;
      }
      while (v16 != a4);
    }
  }
  if ((_DWORD)a6 == -1)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40;
    v39 = &v38;
    if (*((int *)std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v23, &v38, (uint64_t)&std::piecewise_construct, &v39)+ 6) >= 1)
    {
      v24 = *(FILE **)(a1 + 64);
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40;
      v39 = &v38;
      v26 = std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v25, &v38, (uint64_t)&std::piecewise_construct, &v39);
      fprintf(v24, "<%d>", *((_DWORD *)v26 + 6));
      return 1;
    }
    if ((*((unsigned int (**)(_DWORD **))*v38 + 2))(v38) == 49)
    {
      v28 = *v38[7];
      if ((*((unsigned int (**)(_DWORD **))*v38 + 39))(v38))
        ++v28;
    }
    else
    {
      v28 = 0;
    }
    if ((*((unsigned int (**)(_DWORD **))*v38 + 2))(v38) == 50)
    {
      v28 = *v38[7];
      if ((*((unsigned int (**)(_DWORD **))*v38 + 39))(v38))
        ++v28;
    }
    if ((*((unsigned int (**)(_DWORD **))*v38 + 2))(v38) == 51)
    {
      v28 = *v38[7];
      if ((*((unsigned int (**)(_DWORD **))*v38 + 39))(v38))
        ++v28;
    }
    if (a4)
      v29 = 1;
    else
      v29 = v28 <= 2;
    v30 = !v29;
    if (a4 == 1)
    {
      if (*(_BYTE *)(a1 + 80))
        v31 = v28 <= 2;
      else
        v31 = 1;
      v30 = !v31;
    }
    (*((void (**)(_DWORD **, _QWORD, _QWORD, _QWORD))*v38 + 15))(v38, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v30 ^ 1u);
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40;
    v39 = &v38;
    if ((std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v32, &v38, (uint64_t)&std::piecewise_construct, &v39)[3] & 0x80000000) != 0)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40;
      v39 = &v38;
      v34 = std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v33, &v38, (uint64_t)&std::piecewise_construct, &v39);
      *((_DWORD *)v34 + 6) = -*((_DWORD *)v34 + 6);
      v35 = *(FILE **)(a1 + 64);
      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40;
      v39 = &v38;
      std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v36, &v38, (uint64_t)&std::piecewise_construct, &v39);
      fprintf(v35, "<%d>");
    }
  }
  else
  {
    v20 = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v11 + 48))(v11, a6);
    if (CI_GRAPHVIZ_INTERNAL()
      || (CI_PRINT_TREE_dump_intermediates() & 1) != 0
      || CI_PRINT_TREE_dump_outputs()
      || (v37 = *(_QWORD **)(a1 + 72),
          v39 = v20,
          std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(v37, &v39)))
    {
      fprintf(*(FILE **)(a1 + 64), "(%d)");
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    v21 = v11[9];
    if (v21)
      v22 = *(const char **)(*(_QWORD *)(v21 + 32) + 8 * (int)a6);
    else
      v22 = "";
    if (*v22)
      fprintf(*(FILE **)(a1 + 64), " // stopped concat because %s");
  }
  return 0;
}

CIGVNode *CI::ProgramNode::node_for_graphviz_stats(CI::Node *a1, uint64_t a2, __int128 *a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  CIGVNode *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  __CFString *v17;
  const void *v18;
  __int128 v19;
  __int128 v20;
  const char *v21;
  int v22;
  double v23;
  int v24;
  int v25;
  double v26;
  int v27;
  double v28;
  int v29;
  double v30;
  int v31;
  char *v32;
  pid_t v33;
  CGDataProvider *v34;
  char *v35;
  char *v36;
  pid_t v37;
  CGDataProvider *v38;
  _QWORD v40[8];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _QWORD v46[8];
  _QWORD v47[4];
  _QWORD v48[8];
  stat v49;
  char __str[256];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v6 = (*(double (**)(CI::Node *))(*(_QWORD *)a1 + 168))(a1);
  v10 = CIGVNodeCreateForNode((uint64_t)a1, v6, v7, v8, v9);
  v11 = (const char *)(*(uint64_t (**)(CI::Node *))(*(_QWORD *)a1 + 56))(a1);
  CIGVNodeSetShape(v10, v11);
  v12 = (const char *)(*(uint64_t (**)(CI::Node *))(*(_QWORD *)a1 + 64))(a1);
  CIGVNodeSetColor(v10, v12);
  v13 = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)a1 + 384))(a1);
  v15 = v13;
  v48[0] = 0;
  v48[1] = v48;
  v48[2] = 0x4002000000;
  v48[3] = __Block_byref_object_copy__117;
  v48[4] = __Block_byref_object_dispose__118;
  memset(&v48[5], 0, 24);
  v47[0] = 0;
  v47[1] = v47;
  v47[2] = 0x2000000000;
  v47[3] = 0;
  v16 = MEMORY[0x1E0C809B0];
  if (v13)
  {
    v17 = __CFString::createWithFormat((__CFString *)"%llX", v14, v13);
    v18 = (const void *)CopyPeakNonVolatileList();
    v46[0] = v16;
    v46[1] = 0x40000000;
    v46[2] = ___ZNK2CI11ProgramNode23node_for_graphviz_statsERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEENS_4Node9NodeStatsE_block_invoke;
    v46[3] = &unk_1E2EC80D0;
    v46[6] = v17;
    v46[7] = v10;
    v46[4] = v48;
    v46[5] = v47;
    __CFArray::for_each((CFIndex)v18, (uint64_t)v46);
    if (v18)
      CFRelease(v18);
    if (v17)
      CFRelease(v17);
  }
  (*(void (**)(CI::Node *, CIGVNode *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10, a2);
  v40[0] = v16;
  v40[1] = 0x40000000;
  v40[2] = ___ZNK2CI11ProgramNode23node_for_graphviz_statsERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEENS_4Node9NodeStatsE_block_invoke_2;
  v40[3] = &unk_1E2EC80F8;
  v40[6] = a1;
  v40[7] = a2;
  v19 = a3[1];
  v41 = *a3;
  v42 = v19;
  v20 = a3[3];
  v43 = a3[2];
  v44 = v20;
  v40[4] = v48;
  v40[5] = v47;
  v45 = v15;
  v21 = (const char *)stream_to_string((uint64_t)v40);
  CIGVNodeSetLabel(v10, v21);
  CFRelease(v21);
  if (CI_PRINT_TREE_dump_rois() && (int)CI::Node::rois_count(a1) >= 1)
  {
    v22 = 0;
    do
    {
      v23 = CI::Node::roi(a1, v22);
      CIGVNodeAddRoi(v10, v23);
      ++v22;
    }
    while (v22 < (int)CI::Node::rois_count(a1));
  }
  if (((CI_PRINT_TREE_dump_intermediates() & 1) != 0 || CI_PRINT_TREE_dump_outputs())
    && (int)CI::Node::rois_count(a1) >= 1)
  {
    v24 = 0;
    do
    {
      v25 = (int)CI::Node::roi(a1, v24);
      v27 = (int)v26;
      v29 = (int)v28;
      v31 = (int)v30;
      v32 = CI_TEMP_DIR();
      v33 = getpid();
      snprintf(__str, 0x100uLL, "%s/%d_intermediate_%d_%d_%d_%d_%d.png", v32, v33, *((_DWORD *)a1 + 9), v25, v27, v29, v31);
      if (!stat(__str, &v49) && (__int16)v49.st_mode < 0)
      {
        if (v49.st_size)
        {
          v34 = CGDataProviderCreateWithFilename(__str);
          v35 = (char *)CGImageCreateWithPNGDataProvider(v34, 0, 1, kCGRenderingIntentDefault);
          CGDataProviderRelease(v34);
          if (v35)
            goto LABEL_22;
        }
      }
      v36 = CI_TEMP_DIR();
      v37 = getpid();
      snprintf(__str, 0x100uLL, "%s/%d_output_%d_%d_%d_%d_%d.png", v36, v37, *((_DWORD *)a1 + 9), v25, v27, v29, v31);
      if (!stat(__str, &v49) && (__int16)v49.st_mode < 0)
      {
        if (v49.st_size)
        {
          v38 = CGDataProviderCreateWithFilename(__str);
          v35 = (char *)CGImageCreateWithPNGDataProvider(v38, 0, 1, kCGRenderingIntentDefault);
          CGDataProviderRelease(v38);
          if (v35)
          {
LABEL_22:
            CIGVNodeAddImage(v10, v35);
            CGImageRelease((CGImageRef)v35);
          }
        }
      }
      ++v24;
    }
    while (v24 < (int)CI::Node::rois_count(a1));
  }
  _Block_object_dispose(v47, 8);
  _Block_object_dispose(v48, 8);
  return v10;
}

__n128 __Block_byref_object_copy__117(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__CFString *__CFString::createWithFormat(__CFString *this, const char *a2, ...)
{
  const __CFString *v2;
  va_list va;

  va_start(va, a2);
  if (this)
  {
    v2 = CFStringCreateWithCString(0, (const char *)this, 0x600u);
    return (__CFString *)CFStringCreateWithFormatAndArguments(0, 0, v2, va);
  }
  return this;
}

CFIndex __CFArray::for_each(CFIndex result, uint64_t a2)
{
  __CFArray *v3;
  const __CFArray *i;
  const void *ObjectAtIndex;

  if (result)
  {
    v3 = (__CFArray *)result;
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      for (i = 0; (uint64_t)i < result; i = (const __CFArray *)((char *)i + 1))
      {
        ObjectAtIndex = __CFArray::getObjectAtIndex(v3, i);
        (*(void (**)(uint64_t, const void *))(a2 + 16))(a2, ObjectAtIndex);
        result = CFArrayGetCount(v3);
      }
    }
  }
  return result;
}

const __CFDictionary *__CFDictionary::getString(const __CFDictionary *this, const __CFDictionary *a2, const __CFString *a3)
{
  const __CFDictionary *v3;
  CFTypeID v4;

  if (this)
  {
    this = (const __CFDictionary *)CFDictionaryGetValue(this, a2);
    if (this)
    {
      v3 = this;
      v4 = CFGetTypeID(this);
      if (v4 == CFStringGetTypeID())
        return v3;
      else
        return 0;
    }
  }
  return this;
}

const __CFString *__CFDictionary::getInt32(__CFDictionary *this, const __CFDictionary *a2, const __CFString *a3)
{
  const __CFString *v6;
  const __CFDictionary *Number;
  unsigned int valuePtr;

  if (this && CFDictionaryContainsKey(this, a2))
  {
    Number = __CFDictionary::getNumber(this, a2, v6);
    valuePtr = 0;
    if (Number)
    {
      CFNumberGetValue(Number, kCFNumberSInt32Type, &valuePtr);
      return (const __CFString *)valuePtr;
    }
    else
    {
      return 0;
    }
  }
  return a3;
}

uint64_t ___ZNK2CI11ProgramNode23node_for_graphviz_statsERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEENS_4Node9NodeStatsE_block_invoke_2(uint64_t a1, FILE *a2)
{
  _BYTE *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  CGFloat x;
  CGFloat y;
  double width;
  double height;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __sFILE *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  __sFILE *v28;
  _QWORD *v29;
  uint64_t v30;
  __sFILE *v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  double v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  __sFILE *v42;
  const char *v43;
  size_t v44;
  uint64_t result;
  double *v46;
  const char *v47;
  _OWORD v48[4];
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;

  v4 = *(_BYTE **)(a1 + 48);
  if (*((_QWORD *)v4 + 20))
    fprintf(a2, "program=%016llX\n", *((_QWORD *)v4 + 20));
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_OWORD *)(a1 + 80);
  v48[0] = *(_OWORD *)(a1 + 64);
  v48[1] = v6;
  v7 = *(_OWORD *)(a1 + 112);
  v48[2] = *(_OWORD *)(a1 + 96);
  v48[3] = v7;
  (*(void (**)(_BYTE *, FILE *, uint64_t, _OWORD *))(*(_QWORD *)v4 + 152))(v4, a2, v5, v48);
  if ((int)CI::Node::rois_count((CI::Node *)v4) < 1)
  {
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 80;
    do
    {
      if (v10 == 80)
        fprintf(a2, "\nrois=");
      else
        fprintf(a2, ",");
      if (v10 != 80 && (v8 & 1) == 0)
        fwrite("\n     ", 6uLL, 1uLL, a2);
      v49.origin.x = CI::Node::roi((CI::Node *)v4, v8);
      x = v49.origin.x;
      y = v49.origin.y;
      width = v49.size.width;
      height = v49.size.height;
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v16 = *(_DWORD *)(v15 + 40);
      v17 = *(_DWORD *)(v15 + 44);
      v18 = *(_QWORD *)(v15 + 48);
      v19 = *(_QWORD *)(v15 + 56);
      if (CGRectIsNull(v49))
      {
        v21 = 0;
        v22 = 0;
        v23 = 0x7FFFFFFF;
        v24 = 0x7FFFFFFF;
      }
      else
      {
        v50.origin.x = x;
        v50.origin.y = y;
        v50.size.width = width;
        v50.size.height = height;
        if (CGRectIsInfinite(v50))
        {
          v23 = -2147483647;
          v21 = 0xFFFFFFFFLL;
          v22 = 0xFFFFFFFFLL;
          v24 = -2147483647;
        }
        else
        {
          v51.origin.x = x;
          v51.origin.y = y;
          v51.size.width = width;
          v51.size.height = height;
          v52 = CGRectInset(v51, 0.000001, 0.000001);
          v53 = CGRectIntegral(v52);
          v24 = (int)v53.origin.x;
          v23 = (int)v53.origin.y;
          v22 = (unint64_t)v53.size.width;
          v21 = (unint64_t)v53.size.height;
        }
      }
      if (v16 == v24 && v17 == v23 && v18 == v22 && v19 == v21)
      {
        fputc(60, a2);
        v55.origin.x = x;
        v55.origin.y = y;
        v55.size.width = width;
        v55.size.height = height;
        CI::fprintf(a2, v28, v55);
        fputc(62, a2);
      }
      else
      {
        v54.origin.x = x;
        v54.origin.y = y;
        v54.size.width = width;
        v54.size.height = height;
        CI::fprintf(a2, v20, v54);
      }
      v29 = (_QWORD *)CI::Node::rois((CI::Node *)v4);
      if (*(int *)(*v29 + v10) >= 2)
        fprintf(a2, "/%d", *(_DWORD *)(*v29 + v10));
      v9 = (unint64_t)((double)v9 + width * height);
      ++v8;
      v10 += 120;
    }
    while (v8 < (int)CI::Node::rois_count((CI::Node *)v4));
  }
  v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v30)
    fprintf(a2, "\npeakContribution=%.1fMB", (double)v30 * 0.000000953674316);
  fprintf(a2, "\npixels=%ld", v9);
  fwrite("\nextent=", 8uLL, 1uLL, a2);
  v56.origin.x = (*(double (**)(_BYTE *))(*(_QWORD *)v4 + 160))(v4);
  CI::fprintf(a2, v31, v56);
  v32 = (*(double (**)(_BYTE *))(*(_QWORD *)v4 + 160))(v4);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v59.origin.x = (*(double (**)(_BYTE *))(*(_QWORD *)v4 + 168))(v4);
  v59.origin.y = v39;
  v59.size.width = v40;
  v59.size.height = v41;
  v57.origin.x = v32;
  v57.origin.y = v34;
  v57.size.width = v36;
  v57.size.height = v38;
  if (!CGRectEqualToRect(v57, v59))
  {
    v58.origin.x = (*(double (**)(_BYTE *))(*(_QWORD *)v4 + 168))(v4);
    CI::fprintf(a2, v42, v58);
  }
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v4 + 288))(v4))
  {
    v43 = "\nluma-only opaque";
    v44 = 17;
  }
  else if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v4 + 280))(v4))
  {
    v43 = "\nr-only opaque";
    v44 = 14;
  }
  else if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v4 + 272))(v4))
  {
    v43 = "\nrg-only opaque";
    v44 = 15;
  }
  else
  {
    if (!(*(unsigned int (**)(_BYTE *))(*(_QWORD *)v4 + 264))(v4))
      goto LABEL_46;
    v43 = "\nopaque";
    v44 = 7;
  }
  fwrite(v43, v44, 1uLL, a2);
LABEL_46:
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v4 + 304))(v4) == -1)
    fwrite(" shallow", 8uLL, 1uLL, a2);
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 304))(v4);
  if ((_DWORD)result == 1)
    result = fwrite(" deep", 5uLL, 1uLL, a2);
  if (*(_QWORD *)(a1 + 128))
    result = fprintf(a2, "\ndigest=%016llX", *(_QWORD *)(a1 + 128));
  if (*(_BYTE *)(a1 + 120))
  {
    v46 = (double *)(a1 + 64);
    if (CI::ProgramNode::mainProgram((dispatch_queue_t *)v4))
    {
      if (v4[168])
        v47 = " cacheMiss";
      else
        v47 = "";
      fprintf(a2, "\ncompileTime=%.3fms (waited=%0.3fms%s)", *(double *)(a1 + 72) * 1000.0, *(double *)(a1 + 80) * 1000.0, v47);
    }
    if (*v46 == 0.0)
      result = fwrite("\nrenderTime=cacheHit", 0x14uLL, 1uLL, a2);
    else
      result = fprintf(a2, "\nrenderTime=%.3fms", *v46 * 1000.0);
    if (*(_QWORD *)(a1 + 104))
      return fprintf(a2, "\ncycles=%llu", *(_QWORD *)(a1 + 104));
  }
  return result;
}

uint64_t CI::ProgramNode::type(CI::ProgramNode *this)
{
  return 52;
}

uint64_t CI::ProgramNode::child_count(CI::ProgramNode *this)
{
  return **((unsigned int **)this + 8);
}

uint64_t CI::ProgramNode::shape_for_graphviz(CI::ProgramNode *this)
{
  return 1;
}

uint64_t CI::ProgramNode::color_for_graphviz(CI::ProgramNode *this)
{
  return 8
       * ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6)) != 41);
}

uint64_t CI::ProgramNode::extent(CI::ProgramNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 160))(*((_QWORD *)this + 6));
}

uint64_t CI::ProgramNode::extent_unclamped(CI::ProgramNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 168))(*((_QWORD *)this + 6));
}

uint64_t CI::ProgramNode::is_warp(CI::ProgramNode *this)
{
  return 0;
}

uint64_t CI::ProgramNode::is_position_invariant(CI::ProgramNode *this)
{
  return 0;
}

uint64_t CI::ProgramNode::may_be_extended_range(CI::ProgramNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 256))(*((_QWORD *)this + 6));
}

uint64_t CI::ProgramNode::alpha_one(CI::ProgramNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 264))(*((_QWORD *)this + 6));
}

uint64_t CI::ProgramNode::output_is_rg(CI::ProgramNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 272))(*((_QWORD *)this + 6));
}

uint64_t CI::ProgramNode::output_is_r(CI::ProgramNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 280))(*((_QWORD *)this + 6));
}

uint64_t CI::ProgramNode::output_is_luma(CI::ProgramNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 288))(*((_QWORD *)this + 6));
}

uint64_t CI::ProgramNode::output_depth(CI::ProgramNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 304))(*((_QWORD *)this + 6));
}

uint64_t CI::ProgramNode::output_format(CI::ProgramNode *this)
{
  return *((unsigned int *)this + 35);
}

uint64_t `non-virtual thunk to'CI::ProgramNode::type(CI::ProgramNode *this)
{
  return 52;
}

uint64_t ___ZN2CI4Node27traverse_preorder_stoppableEU13block_pointerFbPS0_PKS0_iiE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

char *std::vector<CGRect>::__insert_with_size[abi:nn180100]<std::__wrap_iter<CGRect const*>,std::__wrap_iter<CGRect const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  void *__p;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 5)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 5);
    if (v14 >> 59)
      abort();
    v15 = (__dst - (uint64_t)v13) >> 5;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 4 > v14)
      v14 = v16 >> 4;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
      v17 = 0x7FFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v39 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SoftwareDAGDescriptor::ArgumentInfo>>(v9, v17);
    else
      v18 = 0;
    v29 = &v18[32 * v15];
    __p = v18;
    v36 = v29;
    v38 = &v18[32 * v17];
    v30 = 32 * a5;
    v31 = &v29[32 * a5];
    do
    {
      v32 = *(_OWORD *)v7;
      v33 = *((_OWORD *)v7 + 1);
      v7 += 32;
      *(_OWORD *)v29 = v32;
      *((_OWORD *)v29 + 1) = v33;
      v29 += 32;
      v30 -= 32;
    }
    while (v30);
    v37 = v31;
    v5 = (char *)std::vector<CGRect>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v37 != v36)
      v37 += (v36 - v37 + 31) & 0xFFFFFFFFFFFFFFE0;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 5;
  if (v20 >= a5)
  {
    v21 = &__src[32 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[32 * a5];
    v25 = &v23[-32 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        v28 = *((_OWORD *)v25 + 1);
        v25 += 32;
        *(_OWORD *)v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        v26 += 32;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-32 * ((v23 - v24) >> 5)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[32 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[32 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void *std::vector<CGRect>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  void *v15;
  void *v16;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *((_OWORD *)v8 - 1);
      v7 = (void *)(v9 - 32);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v10;
      v8 -= 32;
      v9 -= 32;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v11 = a1[1];
  v12 = *(_QWORD *)(a2 + 16);
  v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v12 + v13;
  v14 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v14;
  v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v15;
  v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t **std::__tree<int>::__emplace_unique_key_args<int,int const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<std::string,CI::SWFunction>,std::__map_value_compare<std::string,std::__value_type<std::string,CI::SWFunction>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CI::SWFunction>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

_QWORD *CI::roiKeyVec::roiKeyVec(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 + 1;
  v5 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    v7 = 0;
    v8 = a1 + 2;
    do
    {
      v9 = *((_DWORD *)v5 + 7);
      if ((unint64_t)v7 >= *v8)
      {
        v10 = (uint64_t)&v7[-*a1] >> 4;
        if ((unint64_t)(v10 + 1) >> 60)
          abort();
        v11 = *v8 - *a1;
        v12 = v11 >> 3;
        if (v11 >> 3 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
          v13 = 0xFFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::Perspective::Line>>((uint64_t)(a1 + 2), v13);
        else
          v14 = 0;
        v15 = &v14[16 * v10];
        *(_QWORD *)v15 = a2;
        *((_DWORD *)v15 + 2) = v9;
        v17 = (char *)*a1;
        v16 = (char *)a1[1];
        v18 = v15;
        if (v16 != (char *)*a1)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v16 - 1);
            v18 -= 16;
            v16 -= 16;
          }
          while (v16 != v17);
          v16 = (char *)*a1;
        }
        v7 = v15 + 16;
        *a1 = v18;
        a1[1] = v15 + 16;
        a1[2] = &v14[16 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v7 = a2;
        *((_DWORD *)v7 + 2) = v9;
        v7 += 16;
      }
      a1[1] = v7;
      v19 = (_QWORD *)v5[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v5[2];
          v21 = *v20 == (_QWORD)v5;
          v5 = v20;
        }
        while (!v21);
      }
      v5 = v20;
    }
    while (v20 != v4);
  }
  return a1;
}

void ___ZN14__CFDictionary9setValuesEPS_PKS__block_invoke(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  __CFDictionary::setValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, a3, a4);
}

char *std::vector<CI::parentROI>::__assign_with_size[abi:nn180100]<CI::parentROI*,CI::parentROI*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 4) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x555555555555555)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v11;
    result = std::vector<CI::parentROI>::__vallocate[abi:nn180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 4) >= a4)
    goto LABEL_16;
  v16 = &__src[16 * ((v15 - v9) >> 4)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *std::vector<CI::parentROI>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::parentROI>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t ___ZNK2CI20SerialObjectPtrArray5printEP7__sFILE_block_invoke_2(uint64_t a1, int a2, const void *a3)
{
  FILE *v6;
  unsigned int v7;
  const char *v8;

  v6 = *(FILE **)(a1 + 32);
  v7 = (*(uint64_t (**)(const void *))(*(_QWORD *)a3 + 16))(a3);
  v8 = CI::name_for_type(v7);
  fprintf(v6, "[%i] = %p <%s> ", a2, a3, v8);
  (*(void (**)(const void *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, *(_QWORD *)(a1 + 32), 0);
  return fputc(10, *(FILE **)(a1 + 32));
}

const void *__CFArray::getObjectAtIndex(__CFArray *this, const __CFArray *a2)
{
  if (this && CFArrayGetCount(this) > (uint64_t)a2)
    return CFArrayGetValueAtIndex(this, (CFIndex)a2);
  else
    return 0;
}

const __CFDictionary *__CFDictionary::getNumber(const __CFDictionary *this, const __CFDictionary *a2, const __CFString *a3)
{
  const __CFDictionary *v3;
  CFTypeID v4;

  if (this)
  {
    this = (const __CFDictionary *)CFDictionaryGetValue(this, a2);
    if (this)
    {
      v3 = this;
      v4 = CFGetTypeID(this);
      if (v4 == CFNumberGetTypeID())
        return v3;
      else
        return 0;
    }
  }
  return this;
}

uint64_t CI::InstanceCounted<(CI::Type)52>::type()
{
  return 52;
}

_QWORD *CI::InstanceCounted<(CI::Type)52>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBE48;
  do
    v1 = __ldaxr(&dword_1ECF872F0[50]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[50]));
  return result;
}

void CI::InstanceCounted<(CI::Type)52>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBE48;
  do
    v1 = __ldaxr(&dword_1ECF872F0[50]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[50]));
  JUMPOUT(0x194025AACLL);
}

void ___ZN9QueuePoolILi4EE3getEP21dispatch_queue_attr_s_block_invoke(uint64_t a1)
{
  int *v2;
  int v3;
  const std::string::value_type *v4;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  const char *v12;
  NSObject *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  const char *v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  std::string __p;
  std::string v29;
  std::string v30;
  __int128 v31;
  uint64_t v32;

  v2 = *(int **)(a1 + 40);
  if (!*(_QWORD *)&v2[2 * *v2 + 10])
  {
    std::string::basic_string[abi:nn180100]<0>(&v29, "-Pool-");
    v3 = *((char *)v2 + 39);
    if (v3 >= 0)
      v4 = (const std::string::value_type *)(v2 + 4);
    else
      v4 = (const std::string::value_type *)*((_QWORD *)v2 + 2);
    if (v3 >= 0)
      v5 = *((unsigned __int8 *)v2 + 39);
    else
      v5 = *((_QWORD *)v2 + 3);
    v6 = std::string::insert(&v29, 0, v4, v5);
    v7 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, *v2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v10 = std::string::append(&v30, (const std::string::value_type *)p_p, size);
    v11 = v10->__r_.__value_.__r.__words[2];
    v31 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v32 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (v32 >= 0)
      v12 = (const char *)&v31;
    else
      v12 = (const char *)v31;
    v13 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    *(_QWORD *)&v2[2 * *v2 + 10] = dispatch_queue_create(v12, v13);
    if (SHIBYTE(v32) < 0)
      operator delete((void *)v31);
  }
  std::string::basic_string[abi:nn180100]<0>(&v29, "-");
  v14 = *((char *)v2 + 39);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)(v2 + 4);
  else
    v15 = (const std::string::value_type *)*((_QWORD *)v2 + 2);
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)v2 + 39);
  else
    v16 = *((_QWORD *)v2 + 3);
  v17 = std::string::insert(&v29, 0, v15, v16);
  v18 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *v2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &__p;
  else
    v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v20 = __p.__r_.__value_.__l.__size_;
  v21 = std::string::append(&v30, (const std::string::value_type *)v19, v20);
  v22 = v21->__r_.__value_.__r.__words[2];
  v31 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v32 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (v32 >= 0)
    v23 = (const char *)&v31;
  else
    v23 = (const char *)v31;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = dispatch_queue_create_with_target_V2(v23, *(dispatch_queue_attr_t *)(a1 + 48), *(dispatch_queue_t *)&v2[2 * *v2 + 10]);
  v24 = *v2 + 1;
  v25 = -v24 < 0;
  v26 = -v24 & 3;
  v27 = v24 & 3;
  if (!v25)
    v27 = -v26;
  *v2 = v27;
  if (SHIBYTE(v32) < 0)
    operator delete((void *)v31);
}

uint64_t *std::__tree<std::__value_type<CI::Object const*,unsigned long>,std::__map_value_compare<CI::Object const*,std::__value_type<CI::Object const*,unsigned long>,std::less<CI::Object const*>,true>,std::allocator<std::__value_type<CI::Object const*,unsigned long>>>::__emplace_unique_key_args<CI::Object const*,std::pair<CI::Object const*,unsigned long>>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    v11 = a3[1];
    v10[4] = *a3;
    v10[5] = v11;
    std::__tree<std::__value_type<std::string,CI::SWFunction>,std::__map_value_compare<std::string,std::__value_type<std::string,CI::SWFunction>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CI::SWFunction>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t **std::__tree<std::__value_type<CI::NodeIndex,unsigned long>,std::__map_value_compare<CI::NodeIndex,std::__value_type<CI::NodeIndex,unsigned long>,std::less<CI::NodeIndex>,true>,std::allocator<std::__value_type<CI::NodeIndex,unsigned long>>>::__emplace_unique_key_args<CI::NodeIndex,std::piecewise_construct_t const&,std::tuple<CI::NodeIndex const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,CI::SWFunction>,std::__map_value_compare<std::string,std::__value_type<std::string,CI::SWFunction>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CI::SWFunction>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_QWORD *std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}*>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v13 = *v22;
LABEL_38:
    *v22 = v13;
    goto LABEL_39;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

uint64_t CI::ProviderNode::FormatConversion(uint64_t result)
{
  if ((result - 1799) >= 2)
    return result;
  else
    return 2056;
}

uint64_t CI::ProviderNode::ProviderNode(uint64_t a1, int a2, CI *a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, int a10, int a11, int a12, int a13, char a14, char a15, char a16)
{
  unsigned int v20;
  CFTypeRef v21;
  int v22;
  CFStringRef CacheID;

  *((_QWORD *)CI::Node::Node((CI::Node *)a1) + 5) = off_1E2EBBCE0;
  do
    v20 = __ldaxr(&dword_1ECF872F0[42]);
  while (__stlxr(v20 + 1, &dword_1ECF872F0[42]));
  *(_DWORD *)(a1 + 48) = a11;
  *(_WORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 56) = &unk_1E2EB98A0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)a1 = &off_1E2EB96A8;
  *(_QWORD *)(a1 + 40) = &unk_1E2EB9878;
  *(_QWORD *)(a1 + 96) = a3;
  *(_QWORD *)(a1 + 120) = a6;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 188) = a2;
  *(_QWORD *)(a1 + 112) = _Block_copy(a5);
  dispatch_retain(*(dispatch_object_t *)(a1 + 120));
  if (a4)
    v21 = CFRetain(a4);
  else
    v21 = 0;
  *(_QWORD *)(a1 + 104) = v21;
  *(_QWORD *)(a1 + 128) = a7;
  *(_QWORD *)(a1 + 136) = a8;
  if ((uint64_t *)(a1 + 64) != a9)
    std::vector<std::vector<IRect>>::__assign_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>((uint64_t *)(a1 + 64), *a9, a9[1], 0xAAAAAAAAAAAAAAABLL * ((a9[1] - *a9) >> 3));
  *(_DWORD *)(a1 + 144) = a10;
  *(_WORD *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 150) = 0;
  if (a10 == 1799)
  {
    *(_BYTE *)(a1 + 149) = 1;
    v22 = a11;
  }
  else
  {
    v22 = a11;
    if (a10 == 1800)
      *(_BYTE *)(a1 + 148) = 1;
  }
  *(_BYTE *)(a1 + 192) = CI::PixelFormatType_from_format(v22) != 0;
  *(_DWORD *)(a1 + 176) = a12;
  *(_DWORD *)(a1 + 180) = a13;
  *(_BYTE *)(a1 + 184) = a14;
  *(_BYTE *)(a1 + 186) = a15;
  *(_BYTE *)(a1 + 187) = a16;
  *(_BYTE *)(a1 + 185) = CI::format_is_float(a10);
  if (a16)
  {
    CacheID = CI::makeCacheID(a3, a6, 0);
    CI::Tileable::updateCacheIdentity((CI::Tileable *)(a1 + 56), CacheID);
  }
  return a1;
}

{
  return CI::ProviderNode::ProviderNode(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

CFStringRef CI::makeCacheID(CI *this, uint64_t a2, dispatch_queue_s *a3)
{
  CFStringRef v3;
  CFStringRef v4;

  if (this)
  {
    v3 = CFStringCreateWithFormat(0, 0, CFSTR("ProvAssembled %llu"), this);
  }
  else if (a3)
  {
    v3 = CFStringCreateWithFormat(0, 0, CFSTR("ProvAssembled %p frame %llu"), a2, a3);
  }
  else
  {
    v3 = CFStringCreateWithFormat(0, 0, CFSTR("ProvAssembled %p"), a2);
  }
  v4 = v3;
  CFAutorelease(v3);
  return v4;
}

void CI::ProviderNode::~ProviderNode(CI::ProviderNode *this)
{
  CI::Tileable *v2;
  void *v3;
  unsigned int v4;

  *(_QWORD *)this = &off_1E2EB96A8;
  *((_QWORD *)this + 5) = &unk_1E2EB9878;
  *((_QWORD *)this + 7) = &unk_1E2EB98A0;
  v2 = (CI::ProviderNode *)((char *)this + 56);
  CI::ProviderNode::release_resources(this);
  v3 = (void *)*((_QWORD *)this + 19);
  if (v3)
  {
    *((_QWORD *)this + 20) = v3;
    operator delete(v3);
  }
  CI::Tileable::~Tileable(v2);
  *((_QWORD *)this + 5) = off_1E2EBBCE0;
  do
    v4 = __ldaxr(&dword_1ECF872F0[42]);
  while (__stlxr(v4 - 1, &dword_1ECF872F0[42]));
  CI::Node::~Node(this);
}

{
  CI::ProviderNode::~ProviderNode(this);
  JUMPOUT(0x194025AACLL);
}

void `non-virtual thunk to'CI::ProviderNode::~ProviderNode(CI::ProviderNode *this)
{
  CI::ProviderNode::~ProviderNode((CI::ProviderNode *)((char *)this - 40));
}

{
  CI::ProviderNode::~ProviderNode((CI::ProviderNode *)((char *)this - 40));
  JUMPOUT(0x194025AACLL);
}

CFStringRef CI::ProviderNode::cacheIdentity(CI::ProviderNode *this, dispatch_queue_s *a2)
{
  if (*((_BYTE *)this + 187) && *((_QWORD *)this + 11))
    return (CFStringRef)*((_QWORD *)this + 11);
  else
    return CI::makeCacheID(*((CI **)this + 12), *((_QWORD *)this + 15), a2);
}

CFStringRef `non-virtual thunk to'CI::ProviderNode::cacheIdentity(CI::ProviderNode *this, dispatch_queue_s *a2)
{
  if (*((_BYTE *)this + 131) && *((_QWORD *)this + 4))
    return (CFStringRef)*((_QWORD *)this + 4);
  else
    return CI::makeCacheID(*((CI **)this + 5), *((_QWORD *)this + 8), a2);
}

void CI::ProviderNode::release_resources(CI::ProviderNode *this)
{
  const void *v2;
  const void *v3;
  NSObject *v4;
  const void *v5;

  v2 = (const void *)*((_QWORD *)this + 14);
  if (v2)
    _Block_release(v2);
  *((_QWORD *)this + 14) = 0;
  v3 = (const void *)*((_QWORD *)this + 13);
  if (v3)
    CFRelease(v3);
  *((_QWORD *)this + 13) = 0;
  v4 = *((_QWORD *)this + 15);
  if (v4)
    dispatch_release(v4);
  *((_QWORD *)this + 15) = 0;
  v5 = (const void *)*((_QWORD *)this + 11);
  if (v5)
    CFRelease(v5);
  *((_QWORD *)this + 11) = 0;
}

void CI::ProviderNode::set_provider(uint64_t a1, int a2, CI *a3, void *aBlock, NSObject *a5)
{
  const void *v9;
  NSObject *v10;
  CFStringRef CacheID;

  *(_DWORD *)(a1 + 188) = a2;
  *(_QWORD *)(a1 + 96) = a3;
  v9 = *(const void **)(a1 + 112);
  if (v9)
    _Block_release(v9);
  *(_QWORD *)(a1 + 112) = _Block_copy(aBlock);
  dispatch_retain(a5);
  v10 = *(NSObject **)(a1 + 120);
  if (v10)
    dispatch_release(v10);
  *(_QWORD *)(a1 + 120) = a5;
  if (*(_BYTE *)(a1 + 187))
  {
    CacheID = CI::makeCacheID(a3, (uint64_t)a5, 0);
    CI::Tileable::updateCacheIdentity((CI::Tileable *)(a1 + 56), CacheID);
  }
}

double CI::ProviderNode::find_matching_roi(CI::ProviderNode *this, const CGRect *a2)
{
  CGRect **v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGRect v13;
  CGRect v14;
  CGRect v15;

  v4 = (CGRect **)CI::Node::rois(this);
  x = a2->origin.x;
  y = a2->origin.y;
  width = a2->size.width;
  height = a2->size.height;
  v15.origin.x = (*(double (**)(CI::ProviderNode *))(*(_QWORD *)this + 168))(this);
  v15.origin.y = v9;
  v15.size.width = v10;
  v15.size.height = v11;
  v13.origin.x = x;
  v13.origin.y = y;
  v13.size.width = width;
  v13.size.height = height;
  v14 = CGRectIntersection(v13, v15);
  return CI::SerialRectArray::smallestContainingRect(v4, v14);
}

unint64_t CI::ProviderNode::roiAlignment(CI::ProviderNode *this)
{
  unint64_t v1;
  CI::Tileable *v3;

  if (*((_BYTE *)this + 192))
    return 4;
  v3 = (CI::ProviderNode *)((char *)this + 56);
  if (CI::Tileable::widestTile((CI::ProviderNode *)((char *)this + 56)) >= 0x10)
  {
    if (CI::Tileable::widestTile(v3) <= 0x200)
      v1 = CI::Tileable::widestTile(v3);
    else
      v1 = 512;
  }
  else
  {
    v1 = 16;
  }
  if (!*((_BYTE *)this + 192) && CI::Tileable::tallestTile(v3) >= 0x10 && CI::Tileable::tallestTile(v3) <= 0x200)
    CI::Tileable::tallestTile(v3);
  return v1;
}

unint64_t CI::Tileable::widestTile(CI::Tileable *this)
{
  char *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v7;
  char *v8;
  uint64_t v9;
  char **v10;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(&v7, *((_QWORD *)this + 1), *((_QWORD *)this + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3));
  v1 = v7;
  v2 = 0;
  if (v8 != v7)
  {
    v3 = (v8 - v7) / 24;
    if (v3 <= 1)
      v3 = 1;
    do
    {
      v4 = *(_QWORD *)v1;
      v1 += 24;
      v5 = *(_QWORD *)(v4 + 8);
      if (v5 > v2)
        v2 = v5;
      --v3;
    }
    while (v3);
  }
  v10 = &v7;
  std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v10);
  return v2;
}

unint64_t CI::Tileable::tallestTile(CI::Tileable *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v8[3];
  void **v9;

  memset(v8, 0, sizeof(v8));
  std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v8, *((_QWORD *)this + 1), *((_QWORD *)this + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3));
  v1 = *(_QWORD *)(v8[0] + 8);
  v2 = 0;
  if (v1 != *(_QWORD *)v8[0])
  {
    v3 = (v1 - *(_QWORD *)v8[0]) / 24;
    if (v3 <= 1)
      v3 = 1;
    v4 = (unint64_t *)(*(_QWORD *)v8[0] + 16);
    do
    {
      v6 = *v4;
      v4 += 3;
      v5 = v6;
      if (v6 > v2)
        v2 = v5;
      --v3;
    }
    while (v3);
  }
  v9 = (void **)v8;
  std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v9);
  return v2;
}

void CI::ProviderNode::add_roi(CI::ProviderNode *this, unint64_t a2, unint64_t a3, CGRect a4, const CI::parentROI *a5)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CI::Node *v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  char v46;
  int v47;
  unint64_t v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  if (!CGRectIsEmpty(a4))
  {
    v21 = *((_QWORD *)this + 16);
    v20 = *((_QWORD *)this + 17);
    v49.origin.x = x;
    v49.origin.y = y;
    v49.size.width = width;
    v49.size.height = height;
    if (CGRectIsNull(v49))
    {
      v22 = 0;
      v23 = 0;
      v24 = 0x7FFFFFFF;
      v25 = 0x7FFFFFFF;
    }
    else
    {
      v50.origin.x = x;
      v50.origin.y = y;
      v50.size.width = width;
      v50.size.height = height;
      if (CGRectIsInfinite(v50))
      {
        v24 = -2147483647;
        v22 = 0xFFFFFFFFLL;
        v23 = 0xFFFFFFFFLL;
        v25 = -2147483647;
      }
      else
      {
        v51.origin.x = x;
        v51.origin.y = y;
        v51.size.width = width;
        v51.size.height = height;
        v52 = CGRectInset(v51, 0.000001, 0.000001);
        v53 = CGRectIntegral(v52);
        v25 = (int)v53.origin.x;
        v24 = (int)v53.origin.y;
        v23 = (unint64_t)v53.size.width;
        v22 = (unint64_t)v53.size.height;
      }
    }
    if (*((_DWORD *)this + 45) != 1)
      goto LABEL_19;
    if (v25 != -2147483647)
    {
      v26 = 0x7FFFFFFF;
      if (v25 == 0x7FFFFFFF)
      {
        if (v24 == 0x7FFFFFFF && !v23 && !v22)
        {
          v27 = 0;
          v28 = 0;
          v29 = 0x7FFFFFFF;
          goto LABEL_56;
        }
      }
      else if (v25 < 0)
      {
        goto LABEL_20;
      }
      if (v25 + (int)v23 <= (int)v21 && (v24 & 0x80000000) == 0 && v24 + (int)v22 <= (int)v20)
      {
LABEL_19:
        v27 = v22;
        v28 = v23;
        v26 = v24;
        v29 = v25;
        goto LABEL_56;
      }
    }
LABEL_20:
    if (v25 == 0x7FFFFFFF && v24 == 0x7FFFFFFF && !v23 && !v22)
      goto LABEL_24;
    if (v25 == -2147483647 && v24 == -2147483647 && v23 == 0xFFFFFFFF && v22 == 0xFFFFFFFF)
    {
      v26 = 0;
      v29 = 0;
      v27 = v20;
      v28 = v21;
      if (!v21)
        goto LABEL_24;
    }
    else
    {
      v29 = v25 & ~(v25 >> 31);
      v34 = v25 + v23;
      if ((int)v21 < v25 + (int)v23)
        v34 = v21;
      v35 = __OFSUB__(v34, v29);
      v36 = v34 - v29;
      if (v36 < 0 != v35)
        goto LABEL_24;
      v26 = v24 & ~(v24 >> 31);
      v37 = v24 + v22;
      if ((int)v20 < v24 + (int)v22)
        v37 = v20;
      v35 = __OFSUB__(v37, v26);
      v38 = v37 - v26;
      if (v38 < 0 != v35)
        goto LABEL_24;
      v28 = v36;
      v27 = v38;
      if (!v36)
        goto LABEL_24;
    }
    if (v27)
      goto LABEL_56;
LABEL_24:
    v30 = v25 + v23;
    if (v30 < 0)
    {
      v29 = 0;
    }
    else
    {
      if (v25 <= (int)v21)
      {
        v29 = v25 & ~(v25 >> 31);
        if (v30 >= (int)v21)
          v31 = v21;
        else
          v31 = v30;
        v28 = v31 - v29;
        goto LABEL_39;
      }
      v29 = v21 - 1;
    }
    v28 = 1;
LABEL_39:
    v32 = v24 + v22;
    if (v32 < 0)
    {
      v26 = 0;
      goto LABEL_43;
    }
    if (v24 > (int)v20)
    {
      v26 = v20 - 1;
LABEL_43:
      v27 = 1;
      goto LABEL_56;
    }
    v26 = v24 & ~(v24 >> 31);
    if (v32 >= (int)v20)
      v33 = v20;
    else
      v33 = v32;
    v27 = v33 - v26;
LABEL_56:
    if (CI::format_is_ycc_biplanar(*((_DWORD *)this + 36)))
      goto LABEL_81;
    v39 = 0x7FFFFFFF;
    if (v29 == 0x7FFFFFFF && v26 == 0x7FFFFFFF && !v28 && !v27)
    {
      v40 = 0;
      v41 = 0;
LABEL_72:
      v42 = 0x7FFFFFFF;
      goto LABEL_73;
    }
    if (v29 == -2147483647 && v26 == -2147483647 && v28 == 0xFFFFFFFFLL && v27 == 0xFFFFFFFFLL)
    {
      v39 = 0;
      v42 = 0;
      v40 = v21;
      v41 = v20;
    }
    else
    {
      v39 = v29 & ~(v29 >> 31);
      v43 = v29 + v28;
      if ((int)v21 < v29 + (int)v28)
        v43 = v21;
      v35 = __OFSUB__(v43, v39);
      LODWORD(v40) = v43 - v39;
      if (((v40 & 0x80000000) != 0) != v35)
      {
        v40 = 0;
        v41 = 0;
        v39 = 0x7FFFFFFF;
        goto LABEL_72;
      }
      v44 = v26 & ~(v26 >> 31);
      v45 = v26 + v27;
      if ((int)v20 < v26 + (int)v27)
        v45 = v20;
      v40 = (int)v40;
      v35 = __OFSUB__(v45, v44);
      v47 = v45 - v44;
      v46 = (v47 < 0) ^ v35;
      v48 = v47;
      if (v46)
      {
        v39 = 0x7FFFFFFF;
        v42 = 0x7FFFFFFF;
      }
      else
      {
        v42 = v26 & ~(v26 >> 31);
      }
      if (v46)
      {
        v40 = 0;
        v41 = 0;
      }
      else
      {
        v41 = v48;
      }
    }
LABEL_73:
    if (v21 > 0x1000 || v20 > 0x1000 || 3 * v21 * v20 > 4 * v40 * v41)
    {
      if (v39 != 0x7FFFFFFF || v42 != 0x7FFFFFFF || v40 || v41)
      {
        v16 = (double)v39;
        v17 = (double)v42;
        v18 = (double)v40;
        v19 = (double)v41;
      }
      else
      {
        v16 = *MEMORY[0x1E0C9D628];
        v17 = *(double *)(MEMORY[0x1E0C9D628] + 8);
        v18 = *(double *)(MEMORY[0x1E0C9D628] + 16);
        v19 = *(double *)(MEMORY[0x1E0C9D628] + 24);
      }
      goto LABEL_83;
    }
LABEL_81:
    v18 = (double)v21;
    v19 = (double)v20;
    v16 = 0.0;
    v17 = 0.0;
LABEL_83:
    v13 = this;
    v14 = a2;
    v15 = a3;
    goto LABEL_84;
  }
  v13 = this;
  v14 = a2;
  v15 = a3;
  v16 = x;
  v17 = y;
  v18 = width;
  v19 = height;
LABEL_84:
  CI::Node::add_roi(v13, v14, v15, *(CGRect *)&v16, a5);
}

uint64_t CI::ProviderNode::surfaceFormat(CI::ProviderNode *this)
{
  return CI::PixelFormatType_from_format(*((_DWORD *)this + 12));
}

uint64_t `non-virtual thunk to'CI::ProviderNode::surfaceFormat(CI::ProviderNode *this)
{
  return CI::PixelFormatType_from_format(*((_DWORD *)this - 2));
}

void CI::ProviderNode::tileRect(CI::ProviderNode *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v19;
  uint64_t v20;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  int v30;
  NSObject *v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  __int16 v40;
  unint64_t v41;
  __int16 v42;
  unint64_t v43;
  __int16 v44;
  unint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)*((_QWORD *)this + 8);
  v9 = (_QWORD *)*((_QWORD *)this + 9);
  if (v8 == v9
    || 0xAAAAAAAAAAAAAAABLL * (v9 - v8) <= a2
    || (v10 = v8[1], *v8 == v10)
    || 0xAAAAAAAAAAAAAAABLL * ((v10 - *v8) >> 3) <= a3)
  {
    v31 = ci_logger_render();
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
LABEL_34:
      *(_QWORD *)(a4 + 16) = 0;
      goto LABEL_35;
    }
    v33 = (uint64_t *)*((_QWORD *)this + 8);
    v32 = (uint64_t *)*((_QWORD *)this + 9);
    if (v33 == v32)
    {
      v34 = 0;
    }
    else
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * (v32 - v33);
      v36 = *v33;
      v35 = v33[1];
      if (v36 != v35)
      {
        v37 = 0xAAAAAAAAAAAAAAABLL * ((v35 - v36) >> 3);
        goto LABEL_42;
      }
    }
    v37 = 0;
LABEL_42:
    v38 = 134218752;
    v39 = a2;
    v40 = 2048;
    v41 = a3;
    v42 = 2048;
    v43 = v34;
    v44 = 2048;
    v45 = v37;
    _os_log_error_impl(&dword_1921E4000, v31, OS_LOG_TYPE_ERROR, "Request for a tile outside of expected indexes. Requested tile %zu %zu but only have %zu tiles horizontally and %zu tile vertically", (uint8_t *)&v38, 0x2Au);
    goto LABEL_34;
  }
  v11 = v8[3 * a2] + 24 * a3;
  v13 = *(_DWORD *)v11;
  v12 = *(_DWORD *)(v11 + 4);
  v15 = *(_QWORD *)(v11 + 8);
  v14 = *(_QWORD *)(v11 + 16);
  if (v13 == 0x7FFFFFFF && v12 == 0x7FFFFFFF && v15 == 0 && v14 == 0)
  {
LABEL_32:
    *(_QWORD *)(a4 + 16) = 0;
LABEL_35:
    *(_OWORD *)a4 = IRectNull;
    return;
  }
  v20 = *((_QWORD *)this + 16);
  v19 = *((_QWORD *)this + 17);
  if (v13 != -2147483647 || v12 != -2147483647 || v15 != 0xFFFFFFFFLL || v14 != 0xFFFFFFFFLL)
  {
    v24 = v13 & ~(v13 >> 31);
    v25 = v13 + v15;
    if (v25 >= (int)v20)
      v25 = *((_QWORD *)this + 16);
    v26 = __OFSUB__(v25, v24);
    v27 = v25 - v24;
    if (v27 < 0 == v26)
    {
      v28 = v12 & ~(v12 >> 31);
      v29 = v12 + v14;
      if (v29 >= (int)v19)
        v29 = *((_QWORD *)this + 17);
      v26 = __OFSUB__(v29, v28);
      v30 = v29 - v28;
      if (v30 < 0 == v26)
      {
        *(_DWORD *)a4 = v24;
        *(_DWORD *)(a4 + 4) = v28;
        *(_QWORD *)(a4 + 8) = v27;
        *(_QWORD *)(a4 + 16) = v30;
        return;
      }
    }
    goto LABEL_32;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v20;
  *(_QWORD *)(a4 + 16) = v19;
}

void `non-virtual thunk to'CI::ProviderNode::tileRect(CI::ProviderNode *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  CI::ProviderNode::tileRect((CI::ProviderNode *)((char *)this - 56), a2, a3, a4);
}

uint64_t CI::ProviderNode::tileSurface(CI::ProviderNode *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  CFStringRef v8;
  uint64_t v9;
  int v10;
  uint64_t SurfaceFromCacheAndFill;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[6];
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  if (*((_QWORD *)this + 12))
    v8 = CFStringCreateWithFormat(0, 0, CFSTR("ProvTile %llu"), *((_QWORD *)this + 12));
  else
    v8 = CFSTR("ProvTile");
  v18 = 0uLL;
  v19 = 0;
  (*(void (**)(__int128 *__return_ptr, CI::ProviderNode *, uint64_t, uint64_t))(*(_QWORD *)this + 424))(&v18, this, a2, a3);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 0x40000000;
  v15[2] = ___ZNK2CI12ProviderNode11tileSurfaceEmmRy_block_invoke;
  v15[3] = &__block_descriptor_tmp_5_4;
  v15[4] = this;
  v15[5] = a4;
  v16 = v18;
  v17 = v19;
  v13 = v18;
  v14 = v19;
  v9 = (*(uint64_t (**)(CI::ProviderNode *))(*(_QWORD *)this + 432))(this);
  if (*((_QWORD *)this + 12))
    v10 = 0;
  else
    v10 = *((_DWORD *)this + 47);
  SurfaceFromCacheAndFill = GetSurfaceFromCacheAndFill(&v13, v9, 0, v10, (uint64_t)v8, *((_QWORD *)this + 15), (uint64_t)v15);
  CFRelease(v8);
  return SurfaceFromCacheAndFill;
}

uint64_t ___ZNK2CI12ProviderNode11tileSurfaceEmmRy_block_invoke(uint64_t a1, __IOSurface *a2)
{
  uint64_t v2;
  _QWORD v4[5];
  __int128 v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  **(_QWORD **)(a1 + 40) = *(_QWORD *)(a1 + 64) * *(_QWORD *)(a1 + 56);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI12ProviderNode11tileSurfaceEmmRy_block_invoke_2;
  v4[3] = &__block_descriptor_tmp_27;
  v4[4] = v2;
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  return SurfaceApplyPlaneBlock(a2, (uint64_t)v4);
}

uint64_t ___ZNK2CI12ProviderNode11tileSurfaceEmmRy_block_invoke_2(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, size_t a6)
{
  uint64_t v9;
  char *v10;
  uint64_t result;
  vImagePixelCount v12;
  vImagePixelCount v13;
  vImagePixelCount v14;
  uint64_t v15;
  vImage_Buffer v16;
  vImage_Buffer rgbSrc;

  v9 = a1[4];
  if (*(_BYTE *)(v9 + 149) || (v10 = a2, *(_BYTE *)(v9 + 150)))
    v10 = &a2[2 * a4];
  result = (*(uint64_t (**)(void))(*(_QWORD *)(v9 + 112) + 16))();
  if (*(_BYTE *)(v9 + 149) || *(_BYTE *)(v9 + 150))
  {
    v13 = a1[6];
    v12 = a1[7];
    rgbSrc.data = v10;
    rgbSrc.height = v12;
    rgbSrc.width = v13;
    rgbSrc.rowBytes = a6;
    v16.data = a2;
    v16.height = v12;
    v16.width = v13;
    v16.rowBytes = a6;
    result = vImageConvert_RGB16UtoRGBA16U(&rgbSrc, 0, 0xFFFFu, &v16, 0, 0);
  }
  if (*(_BYTE *)(v9 + 148) || *(_BYTE *)(v9 + 149))
  {
    v15 = a1[6];
    v14 = a1[7];
    rgbSrc.data = a2;
    rgbSrc.height = v14;
    rgbSrc.width = 4 * v15;
    rgbSrc.rowBytes = a6;
    v16.data = a2;
    v16.height = v14;
    v16.width = 4 * v15;
    v16.rowBytes = a6;
    return vImageConvert_16Uto16F(&rgbSrc, &v16, 0);
  }
  return result;
}

uint64_t `non-virtual thunk to'CI::ProviderNode::tileSurface(CI::ProviderNode *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  return CI::ProviderNode::tileSurface((CI::ProviderNode *)((char *)this - 56), a2, a3, a4);
}

uint64_t CI::ProviderNode::surfaceForROI(uint64_t a1, _QWORD *a2, CGFloat *a3, uint64_t a4)
{
  NSObject *v8;
  os_signpost_id_t v9;
  CGFloat v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  unint64_t width;
  unint64_t height;
  _BOOL4 v23;
  int v24;
  int v25;
  int x;
  int y;
  _BOOL4 v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  double Current;
  uint64_t v41;
  uint64_t SurfaceFromCacheAndFill;
  unint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  NSObject *v57;
  os_signpost_id_t v58;
  NSObject *v59;
  __int128 v61;
  unint64_t v62;
  _QWORD v63[7];
  _QWORD v64[5];
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD v69[5];
  int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  uint8_t v74[16];
  uint8_t buf[4];
  _BYTE v76[18];
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;

  v81 = *MEMORY[0x1E0C80C00];
  if (CI_VERBOSE_SIGNPOSTS())
  {
    v8 = ci_signpost_log_render();
    v9 = *(int *)(a1 + 36) | (unint64_t)((*(uint64_t (**)(_QWORD *))(*a2 + 272))(a2) << 32);
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      v10 = *a3;
      v11 = *((_QWORD *)a3 + 1);
      v12 = *((_QWORD *)a3 + 2);
      v13 = *((_QWORD *)a3 + 3);
      *(_DWORD *)buf = 134218752;
      *(CGFloat *)v76 = v10;
      *(_WORD *)&v76[8] = 2048;
      *(_QWORD *)&v76[10] = v11;
      v77 = 2048;
      v78 = v12;
      v79 = 2048;
      v80 = v13;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v9, "surface_for_roi_from_prov", "[%g %g %g %g]", buf, 0x2Au);
    }
  }
  v14 = (*(uint64_t (**)(_QWORD *))(*a2 + 272))(a2);
  TimerBase::TimerBase((uint64_t)buf, v14, *(_DWORD *)(a1 + 36), (uint64_t)"surface_for_roi_from_prov", 23);
  v15 = *(_QWORD *)(a1 + 128);
  v16 = *(_QWORD *)(a1 + 136);
  v17 = *a3;
  v18 = a3[1];
  v19 = a3[2];
  v20 = a3[3];
  v82.origin.x = *a3;
  v82.origin.y = v18;
  v82.size.width = v19;
  v82.size.height = v20;
  if (CGRectIsNull(v82))
  {
    width = 0;
    height = 0;
    v23 = 0;
    v24 = 0x7FFFFFFF;
    v25 = 0x7FFFFFFF;
  }
  else
  {
    v83.origin.x = v17;
    v83.origin.y = v18;
    v83.size.width = v19;
    v83.size.height = v20;
    if (CGRectIsInfinite(v83))
    {
      v23 = 0;
      v24 = -2147483647;
      width = 0xFFFFFFFFLL;
      v25 = -2147483647;
      height = 0xFFFFFFFFLL;
    }
    else
    {
      v84.origin.x = v17;
      v84.origin.y = v18;
      v84.size.width = v19;
      v84.size.height = v20;
      v85 = CGRectInset(v84, 0.000001, 0.000001);
      v86 = CGRectIntegral(v85);
      x = (int)v86.origin.x;
      y = (int)v86.origin.y;
      width = (unint64_t)v86.size.width;
      height = (unint64_t)v86.size.height;
      v29 = v15 == (unint64_t)v86.size.width && v16 == height;
      if (y)
        v30 = (int)v86.origin.y;
      else
        v30 = 0;
      if (y)
        v29 = 0;
      if (x)
        v24 = (int)v86.origin.x;
      else
        v24 = 0;
      if (x)
        v25 = (int)v86.origin.y;
      else
        v25 = v30;
      if (x)
        v23 = 0;
      else
        v23 = v29;
    }
  }
  v31 = CI::PixelFormatType_from_format(*(_DWORD *)(a1 + 48));
  v32 = *(_DWORD *)(a1 + 188);
  v33 = *(_QWORD *)(a1 + 96);
  v34 = *(uint64_t **)(a1 + 64);
  v35 = *(uint64_t **)(a1 + 72);
  if (v34 == v35
    || 0xAAAAAAAAAAAAAAABLL * (v35 - v34) <= 1
    && ((v37 = *v34, v36 = v34[1], v37 == v36) || 0xAAAAAAAAAAAAAAABLL * ((v36 - v37) >> 3) < 2))
  {
    if (v23)
    {
      v64[0] = MEMORY[0x1E0C809B0];
      v64[1] = 0x40000000;
      v64[2] = ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_3;
      v64[3] = &__block_descriptor_tmp_9_3;
      v64[4] = a1;
      v65 = v24;
      v66 = v25;
      v67 = width;
      v68 = height;
      v38 = v64;
    }
    else
    {
      v63[0] = MEMORY[0x1E0C809B0];
      v63[1] = 0x40000000;
      v63[2] = ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_5;
      v63[3] = &__block_descriptor_tmp_11_1;
      v63[4] = a1;
      v63[5] = v25;
      v63[6] = v24;
      v38 = v63;
    }
  }
  else
  {
    v69[0] = MEMORY[0x1E0C809B0];
    v69[1] = 0x40000000;
    v69[2] = ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke;
    v69[3] = &__block_descriptor_tmp_7_4;
    v69[4] = a1;
    v70 = v24;
    v71 = v25;
    v72 = width;
    v73 = height;
    v38 = v69;
  }
  if (v33)
    v39 = 0;
  else
    v39 = v32;
  Current = CFAbsoluteTimeGetCurrent();
  *(_QWORD *)&v61 = __PAIR64__(v25, v24);
  *((_QWORD *)&v61 + 1) = width;
  v62 = height;
  v41 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 440))(a1, a2[19]);
  SurfaceFromCacheAndFill = GetSurfaceFromCacheAndFill(&v61, v31, 0, v39, v41, *(_QWORD *)(a1 + 120), (uint64_t)v38);
  *(double *)a4 = *(double *)a4 + CFAbsoluteTimeGetCurrent() - Current;
  *(_QWORD *)(a4 + 8) += height * width;
  v43 = *(_QWORD *)(a1 + 168);
  v44 = *(uint64_t **)(a1 + 160);
  if ((unint64_t)v44 >= v43)
  {
    v46 = *(_QWORD *)(a1 + 152);
    v47 = ((uint64_t)v44 - v46) >> 3;
    if ((unint64_t)(v47 + 1) >> 61)
      abort();
    v48 = v43 - v46;
    v49 = v48 >> 2;
    if (v48 >> 2 <= (unint64_t)(v47 + 1))
      v49 = v47 + 1;
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
      v50 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v50 = v49;
    if (v50)
      v51 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(a1 + 168, v50);
    else
      v51 = 0;
    v52 = (uint64_t *)&v51[8 * v47];
    v53 = &v51[8 * v50];
    *v52 = SurfaceFromCacheAndFill;
    v45 = v52 + 1;
    v55 = *(char **)(a1 + 152);
    v54 = *(char **)(a1 + 160);
    if (v54 != v55)
    {
      do
      {
        v56 = *((_QWORD *)v54 - 1);
        v54 -= 8;
        *--v52 = v56;
      }
      while (v54 != v55);
      v54 = *(char **)(a1 + 152);
    }
    *(_QWORD *)(a1 + 152) = v52;
    *(_QWORD *)(a1 + 160) = v45;
    *(_QWORD *)(a1 + 168) = v53;
    if (v54)
      operator delete(v54);
  }
  else
  {
    *v44 = SurfaceFromCacheAndFill;
    v45 = v44 + 1;
  }
  *(_QWORD *)(a1 + 160) = v45;
  if (CI_VERBOSE_SIGNPOSTS())
  {
    v57 = ci_signpost_log_render();
    v58 = *(_QWORD *)&v76[4];
    if ((unint64_t)(*(_QWORD *)&v76[4] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v59 = v57;
      if (os_signpost_enabled(v57))
      {
        *(_WORD *)v74 = 0;
        _os_signpost_emit_with_name_impl(&dword_1921E4000, v59, OS_SIGNPOST_INTERVAL_END, v58, "surface_for_roi_from_prov", (const char *)&unk_192520C83, v74, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)buf);
  return SurfaceFromCacheAndFill;
}

uint64_t ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke(uint64_t a1, __IOSurface *a2)
{
  uint64_t v2;
  _QWORD v4[5];
  __int128 v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_2;
  v4[3] = &__block_descriptor_tmp_6_3;
  v4[4] = v2;
  v5 = *(_OWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  return SurfaceApplyPlaneBlock(a2, (uint64_t)v4);
}

void ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  size_t v11;
  int v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  unint64_t v20;
  int v21;
  int v22;
  vImagePixelCount v23;
  vImagePixelCount v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v42;
  char *v43;
  unint64_t v44;
  vImage_Buffer rgbaDest;
  vImage_Buffer rgbSrc;
  uint64_t v47;
  vImagePixelCount v48;
  vImagePixelCount v49;

  v8 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v8 + 149) || *(_BYTE *)(v8 + 150))
  {
    v9 = *(_DWORD *)(v8 + 48);
    v10 = CI::Tileable::widestTile((CI::Tileable *)(v8 + 56));
    v11 = CI::format_bytes_per_row(v9, v10);
    v12 = CI::format_bytes_per_pixel(*(_DWORD *)(v8 + 48));
    v13 = CI::Tileable::tallestTile((CI::Tileable *)(v8 + 56));
    v14 = (char *)malloc_type_malloc(v13 * v11, 0xA18EE06AuLL);
    v42 = &v14[2 * CI::Tileable::widestTile((CI::Tileable *)(v8 + 56))];
    v43 = v14;
  }
  else
  {
    v37 = *(_DWORD *)(v8 + 144);
    v38 = CI::Tileable::widestTile((CI::Tileable *)(v8 + 56));
    v11 = CI::format_bytes_per_row(v37, v38);
    v12 = CI::format_bytes_per_pixel(*(_DWORD *)(v8 + 144));
    v39 = CI::Tileable::tallestTile((CI::Tileable *)(v8 + 56));
    v42 = (char *)malloc_type_malloc(v39 * v11, 0x92BD7F84uLL);
    v43 = v42;
  }
  v44 = 0;
  v40 = v12;
  v15 = *(_QWORD **)(v8 + 64);
  v16 = *(_QWORD **)(v8 + 72);
LABEL_5:
  if (v15 == v16)
  {
    v18 = 0;
  }
  else
  {
    v17 = v15[1];
    if (*v15 == v17)
      v18 = 0;
    else
      v18 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *v15) >> 3);
  }
  if (v44 < v18)
  {
    for (i = 0; ; ++i)
    {
      v20 = 0xAAAAAAAAAAAAAAABLL * (v16 - v15);
      if (v15 == v16)
        v20 = 0;
      if (i >= v20)
      {
        ++v44;
        goto LABEL_5;
      }
      v47 = 0;
      v48 = 0;
      v49 = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v8 + 424))(&v47, v8, i, v44);
      v22 = *(_DWORD *)(a1 + 40);
      v21 = *(_DWORD *)(a1 + 44);
      v23 = *(_QWORD *)(a1 + 48);
      v24 = *(_QWORD *)(a1 + 56);
      if ((v47 != 0x7FFFFFFF7FFFFFFFLL || v48 || v49) && (v22 != 0x7FFFFFFF || v21 != 0x7FFFFFFF || v23 || v24))
      {
        if (v47 == 0x8000000180000001 && v48 == 0xFFFFFFFF && v49 == 0xFFFFFFFF)
          goto LABEL_30;
        if (v22 == -2147483647 && v21 == -2147483647 && v23 == 0xFFFFFFFF && v24 == 0xFFFFFFFF)
        {
          v24 = v49;
          v23 = v48;
          v21 = HIDWORD(v47);
          v22 = v47;
LABEL_30:
          if (!v23)
            goto LABEL_54;
LABEL_31:
          if (v24)
          {
            (*(void (**)(void))(*(_QWORD *)(v8 + 112) + 16))();
            if (*(_BYTE *)(v8 + 149) || *(_BYTE *)(v8 + 150))
            {
              rgbSrc.data = v42;
              rgbSrc.height = v49;
              rgbSrc.width = v48;
              rgbSrc.rowBytes = v11;
              rgbaDest.data = v43;
              rgbaDest.height = v49;
              rgbaDest.width = v48;
              rgbaDest.rowBytes = v11;
              vImageConvert_RGB16UtoRGBA16U(&rgbSrc, 0, 0xFFFFu, &rgbaDest, 0, 0);
            }
            if (*(_BYTE *)(v8 + 148) || *(_BYTE *)(v8 + 149))
            {
              rgbSrc.data = v43;
              rgbSrc.height = v49;
              rgbSrc.width = 4 * v48;
              rgbSrc.rowBytes = v11;
              rgbaDest.data = v43;
              rgbaDest.height = v49;
              rgbaDest.width = 4 * v48;
              rgbaDest.rowBytes = v11;
              vImageConvert_16Uto16F(&rgbSrc, &rgbaDest, 0);
            }
            v25 = (v22 - (uint64_t)(int)v47) * v40;
            v26 = (v22 - (uint64_t)*(int *)(a1 + 40)) * v40;
            v27 = v23 * v40;
            v28 = (char *)(a2 + v26 + a6 * (v21 - (uint64_t)*(int *)(a1 + 44)));
            v29 = &v43[v25 + v11 * (v21 - (uint64_t)SHIDWORD(v47))];
            do
            {
              memmove(v28, v29, v27);
              v28 += a6;
              v29 += v11;
              --v24;
            }
            while (v24);
          }
          goto LABEL_54;
        }
        if ((int)v47 <= v22)
          v30 = *(_DWORD *)(a1 + 40);
        else
          v30 = v47;
        v31 = v47 + v48;
        if ((int)v47 + (int)v48 >= v22 + (int)v23)
          v31 = v22 + v23;
        v32 = v31 - v30;
        if (v31 >= v30)
        {
          if (SHIDWORD(v47) <= v21)
            v33 = *(_DWORD *)(a1 + 44);
          else
            v33 = HIDWORD(v47);
          v34 = HIDWORD(v47) + v49;
          if (HIDWORD(v47) + (int)v49 >= v21 + (int)v24)
            v34 = v21 + v24;
          v35 = __OFSUB__(v34, v33);
          v36 = v34 - v33;
          if (v36 < 0 == v35)
          {
            v23 = v32;
            v24 = v36;
            v21 = v33;
            v22 = v30;
            if (v32)
              goto LABEL_31;
          }
        }
      }
LABEL_54:
      v15 = *(_QWORD **)(v8 + 64);
      v16 = *(_QWORD **)(v8 + 72);
    }
  }
  free(v43);
}

uint64_t ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_3(uint64_t a1, __IOSurface *a2)
{
  uint64_t v2;
  _QWORD v4[5];
  __int128 v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_4;
  v4[3] = &__block_descriptor_tmp_8_4;
  v4[4] = v2;
  v5 = *(_OWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  return SurfaceApplyPlaneBlock(a2, (uint64_t)v4);
}

uint64_t ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_4(uint64_t a1, char *a2, uint64_t a3, vImagePixelCount a4, vImagePixelCount a5, size_t a6)
{
  uint64_t v10;
  char *v11;
  uint64_t result;
  char *v13;
  vImage_Buffer rgbaDest;
  vImage_Buffer rgbSrc;

  v10 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v10 + 149) || (v11 = a2, *(_BYTE *)(v10 + 150)))
    v11 = &a2[2 * a4];
  v13 = v11;
  if (a3 == 1 && !CI::format_is_ycc_422(*(_DWORD *)(v10 + 144)))
    CI::format_is_ycc_444(*(_DWORD *)(v10 + 144));
  result = (*(uint64_t (**)(void))(*(_QWORD *)(v10 + 112) + 16))();
  if (*(_BYTE *)(v10 + 149) || *(_BYTE *)(v10 + 150))
  {
    rgbSrc.data = v13;
    rgbSrc.height = a5;
    rgbSrc.width = a4;
    rgbSrc.rowBytes = a6;
    rgbaDest.data = a2;
    rgbaDest.height = a5;
    rgbaDest.width = a4;
    rgbaDest.rowBytes = a6;
    result = vImageConvert_RGB16UtoRGBA16U(&rgbSrc, 0, 0xFFFFu, &rgbaDest, 0, 0);
  }
  if (*(_BYTE *)(v10 + 148) || *(_BYTE *)(v10 + 149))
  {
    rgbSrc.data = a2;
    rgbSrc.height = a5;
    rgbSrc.width = 4 * a4;
    rgbSrc.rowBytes = a6;
    rgbaDest.data = a2;
    rgbaDest.height = a5;
    rgbaDest.width = 4 * a4;
    rgbaDest.rowBytes = a6;
    return vImageConvert_16Uto16F(&rgbSrc, &rgbaDest, 0);
  }
  return result;
}

void ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_5(_QWORD *a1, __IOSurface *a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  size_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  vImagePixelCount v16;
  vImagePixelCount v17;
  vImagePixelCount v18;
  uint64_t v19;
  _QWORD v20[8];
  vImage_Buffer rgbaDest;
  vImage_Buffer rgbSrc;

  v4 = a1[4];
  v5 = *(_DWORD *)(v4 + 48);
  v6 = CI::format_bytes_per_row(*(_DWORD *)(v4 + 144), *(_QWORD *)(v4 + 128));
  v7 = CI::format_bytes_per_row(v5, *(_QWORD *)(v4 + 128));
  v8 = v5;
  if (v6 > v7)
    v8 = *(_DWORD *)(v4 + 144);
  v9 = CI::format_bytes_per_row(v8, *(_QWORD *)(v4 + 128));
  v10 = CI::format_bytes_per_pixel(v5);
  v12 = a1[5];
  v11 = a1[6];
  v13 = (char *)malloc_type_malloc(*(_QWORD *)(v4 + 136) * v9, 0x9038C50EuLL);
  v14 = v13;
  if (*(_BYTE *)(v4 + 149) || *(_BYTE *)(v4 + 150))
    v15 = &v13[2 * *(_QWORD *)(v4 + 128)];
  else
    v15 = v13;
  (*(void (**)(void))(*(_QWORD *)(v4 + 112) + 16))();
  if (*(_BYTE *)(v4 + 149) || *(_BYTE *)(v4 + 150))
  {
    v17 = *(_QWORD *)(v4 + 128);
    v16 = *(_QWORD *)(v4 + 136);
    rgbSrc.data = v15;
    rgbSrc.height = v16;
    rgbSrc.width = v17;
    rgbSrc.rowBytes = v9;
    rgbaDest.data = v14;
    rgbaDest.height = v16;
    rgbaDest.width = v17;
    rgbaDest.rowBytes = v9;
    vImageConvert_RGB16UtoRGBA16U(&rgbSrc, 0, 0xFFFFu, &rgbaDest, 0, 0);
  }
  if (*(_BYTE *)(v4 + 148) || *(_BYTE *)(v4 + 149))
  {
    v19 = *(_QWORD *)(v4 + 128);
    v18 = *(_QWORD *)(v4 + 136);
    rgbSrc.data = v14;
    rgbSrc.height = v18;
    rgbSrc.width = 4 * v19;
    rgbSrc.rowBytes = v9;
    rgbaDest.data = v14;
    rgbaDest.height = v18;
    rgbaDest.width = 4 * v19;
    rgbaDest.rowBytes = v9;
    vImageConvert_16Uto16F(&rgbSrc, &rgbaDest, 0);
  }
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 0x40000000;
  v20[2] = ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_6;
  v20[3] = &__block_descriptor_tmp_10_3;
  v20[4] = v14;
  v20[5] = v12 * v9 + v11 * v10;
  v20[6] = v9;
  v20[7] = v10;
  SurfaceApplyPlaneBlock(a2, (uint64_t)v20);
  free(v14);
}

uint64_t CI::ProviderNode::print_for_graph_core(uint64_t a1, FILE *__stream, uint64_t a3, int a4)
{
  uint64_t v6;
  const __CFString *v7;
  const char *v8;
  const char *v9;
  uint64_t result;
  const char *v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  int v15;
  const char *v16;
  char buffer[64];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a4)
    v6 = 32;
  else
    v6 = 10;
  fwrite("provider", 8uLL, 1uLL, __stream);
  if (*(_QWORD *)(a1 + 96))
    fprintf(__stream, " content:%016llX");
  else
    fprintf(__stream, " %d");
  v7 = *(const __CFString **)(a1 + 104);
  if (v7 && CFStringGetCString(v7, buffer, 64, 0x8000100u))
    fprintf(__stream, ":%s", buffer);
  if (*(_BYTE *)(a1 + 52))
    v8 = "s";
  else
    v8 = "";
  v9 = CI::name_for_format(*(_DWORD *)(a1 + 144));
  fprintf(__stream, " %s%s", v8, v9);
  result = fprintf(__stream, " %ldx%ld", *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  if (*(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72))
  {
    if (CI::Tileable::hasVaryingTileSizes((CI::Tileable *)(a1 + 56)))
      v11 = "varying with max ";
    else
      v11 = "";
    v12 = CI::Tileable::widestTile((CI::Tileable *)(a1 + 56));
    v13 = CI::Tileable::tallestTile((CI::Tileable *)(a1 + 56));
    result = fprintf(__stream, "%ctile=%s%zux%zu", v6, v11, v12, v13);
  }
  if (*(_DWORD *)(a1 + 176) || *(_DWORD *)(a1 + 180) || *(_BYTE *)(a1 + 184) || *(_BYTE *)(a1 + 186))
  {
    result = fputc(v6, __stream);
    v14 = "alpha_one";
    switch(*(_DWORD *)(a1 + 176))
    {
      case 0:
        break;
      case 1:
        goto LABEL_27;
      case 2:
        v14 = "alpha_unpremul";
        goto LABEL_27;
      case 4:
        v14 = "alpha_premul-clear-edges";
        goto LABEL_27;
      case 6:
        v14 = "alpha_unpremul-clear-edges";
        goto LABEL_27;
      default:
        v14 = "alpha_unknown";
LABEL_27:
        result = fprintf(__stream, " %s", v14);
        break;
    }
  }
  v15 = *(_DWORD *)(a1 + 180);
  if (v15)
  {
    if (v15 == 1)
      v16 = "edge_clamp";
    else
      v16 = "edge_unknown";
    result = fprintf(__stream, " %s", v16);
  }
  if (*(_BYTE *)(a1 + 184))
    result = fwrite(" nearestsampling", 0x10uLL, 1uLL, __stream);
  if (*(_BYTE *)(a1 + 186))
    return fwrite(" cache", 6uLL, 1uLL, __stream);
  return result;
}

uint64_t CI::Tileable::hasVaryingTileSizes(CI::Tileable *this)
{
  uint64_t HasVaryingTileSizes;
  _QWORD v3[3];
  void **v4;

  memset(v3, 0, sizeof(v3));
  std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v3, *((_QWORD *)this + 1), *((_QWORD *)this + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3));
  HasVaryingTileSizes = CI::Tileable::findHasVaryingTileSizes((uint64_t)v3);
  v4 = (void **)v3;
  std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v4);
  return HasVaryingTileSizes;
}

uint64_t CI::ProviderNode::add_args_to_hash(CI::ProviderNode *this, CI::XXHashHelper *a2, uint64_t a3)
{
  uint64_t __src;

  if (*((_QWORD *)this + 12))
  {
    __src = *((_QWORD *)this + 12);
  }
  else
  {
    __src = *((_QWORD *)this + 14);
    XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
    __src = *((_QWORD *)this + 15);
    XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
    if (*((_BYTE *)this + 187))
      goto LABEL_5;
    __src = a3;
  }
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
LABEL_5:
  LODWORD(__src) = *((_DWORD *)this + 36);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((_DWORD *)this + 44);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((_DWORD *)this + 45);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 184);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 52);
  return XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
}

uint64_t CI::ProviderNode::chroma_scale_fix(CI::ProviderNode *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CI::ProviderNode *))(*(_QWORD *)this + 208))(this);
  if ((_DWORD)result == 2)
  {
    CI::format_is_ycc_444(*((_DWORD *)this + 36));
    __asm { FMOV            V1.2S, #1.0 }
    return CI::format_is_ycc_422(*((_DWORD *)this + 36));
  }
  else
  {
    __asm { FMOV            V0.2S, #1.0 }
  }
  return result;
}

uint64_t CI::ProviderNode::type(CI::ProviderNode *this)
{
  return 44;
}

uint64_t CI::ProviderNode::child_count(CI::ProviderNode *this)
{
  return 0;
}

uint64_t CI::ProviderNode::child(CI::ProviderNode *this)
{
  return 0;
}

uint64_t CI::ProviderNode::shape_for_graphviz(CI::ProviderNode *this)
{
  return 0;
}

uint64_t CI::ProviderNode::color_for_graphviz(CI::ProviderNode *this)
{
  return 12;
}

uint64_t CI::ProviderNode::imageIndex(CI::ProviderNode *this)
{
  return *((unsigned int *)this + 47);
}

_DWORD *CI::ProviderNode::extent(_DWORD *this)
{
  if (!this[45])
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 168))(this);
  return this;
}

double CI::ProviderNode::extent_unclamped(CI::ProviderNode *this)
{
  return 0.0;
}

uint64_t CI::ProviderNode::child_type_is_image(CI::ProviderNode *this)
{
  return 0;
}

uint64_t CI::ProviderNode::plane_count(CI::ProviderNode *this)
{
  if (CI::format_is_ycc_biplanar(*((_DWORD *)this + 36)))
    return 2;
  else
    return 1;
}

BOOL CI::ProviderNode::may_be_extended_range(CI::ProviderNode *this)
{
  return !*((_DWORD *)this + 44) || *((_BYTE *)this + 185) != 0;
}

BOOL CI::ProviderNode::alpha_one(CI::ProviderNode *this)
{
  return *((_DWORD *)this + 44) == 1;
}

uint64_t CI::ProviderNode::output_is_rg(CI::ProviderNode *this)
{
  return CI::format_is_rg(*((_DWORD *)this + 36));
}

uint64_t CI::ProviderNode::output_is_r(CI::ProviderNode *this)
{
  return CI::format_is_r(*((_DWORD *)this + 36));
}

uint64_t CI::ProviderNode::output_is_luma(CI::ProviderNode *this)
{
  uint64_t result;

  result = CI::format_is_luminance(*((_DWORD *)this + 36));
  if ((_DWORD)result)
    return (*(uint64_t (**)(CI::ProviderNode *))(*(_QWORD *)this + 264))(this);
  return result;
}

uint64_t CI::ProviderNode::output_depth(CI::ProviderNode *this)
{
  if (CI::format_is_deep(*((_DWORD *)this + 36)))
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t CI::ProviderNode::texture_bindable(CI::ProviderNode *this)
{
  return (uint64_t)this + 48;
}

uint64_t CI::ProviderNode::output_is_packed(CI::ProviderNode *this)
{
  return CI::format_is_packed(*((_DWORD *)this + 36));
}

uint64_t `non-virtual thunk to'CI::ProviderNode::type(CI::ProviderNode *this)
{
  return 44;
}

uint64_t CI::InstanceCounted<(CI::Type)44>::type()
{
  return 44;
}

_QWORD *CI::InstanceCounted<(CI::Type)44>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBCE0;
  do
    v1 = __ldaxr(&dword_1ECF872F0[42]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[42]));
  return result;
}

void CI::InstanceCounted<(CI::Type)44>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBCE0;
  do
    v1 = __ldaxr(&dword_1ECF872F0[42]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[42]));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::SampleModeNode::append_to_tree(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  CI::Node *v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  unsigned int v10;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) == 35)
    return CI::Object::ref(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) == 28
    && CI::Affine::isOrientationWithIntegralTranslation((CI::Affine *)(a1 + 56)))
  {
    v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, 0);
    v6 = (CI::Node *)CI::SampleModeNode::append_to_tree(v5, a2);
    v7 = operator new();
    *((_QWORD *)CI::NodeWithChild::NodeWithChild((CI::NodeWithChild *)v7, v6) + 6) = off_1E2EBBA60;
    do
      v8 = __ldaxr(&dword_1ECF872F0[26]);
    while (__stlxr(v8 + 1, &dword_1ECF872F0[26]));
    *(_QWORD *)v7 = &off_1E2EB80D8;
    *(_QWORD *)(v7 + 48) = &unk_1E2EB8280;
    v9 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(v7 + 72) = v9;
    *(_OWORD *)(v7 + 88) = *(_OWORD *)(a1 + 88);
    if (v6)
      CI::Object::unref(v6);
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) == 45
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1) == (_DWORD)a2)
    {
      return CI::Object::ref(a1);
    }
    v7 = operator new();
    *((_QWORD *)CI::NodeWithChild::NodeWithChild((CI::NodeWithChild *)v7, (CI::Node *)a1) + 6) = off_1E2EBBD08;
    do
      v10 = __ldaxr(&dword_1ECF872F0[43]);
    while (__stlxr(v10 + 1, &dword_1ECF872F0[43]));
    *(_QWORD *)v7 = &off_1E2EBADF8;
    *(_QWORD *)(v7 + 48) = &unk_1E2EBAFA8;
    *(_DWORD *)(v7 + 56) = a2;
  }
  return v7;
}

__n64 CI::SampleModeNode::extent(CI::SampleModeNode *this)
{
  __n64 result;
  int v6;
  CGRect v7;
  CGRect v8;
  CGRect v9;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 5) + 160))(*((_QWORD *)this + 5));
  v6 = *((_DWORD *)this + 14);
  if (v6 == -1)
  {
    v8 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
    *(CGRect *)result.n64_u64 = CGRectIntegral(v8);
    v6 = *((_DWORD *)this + 14);
    if (v6)
      goto LABEL_3;
  }
  else if (v6)
  {
    goto LABEL_3;
  }
  v9 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
  *(CGRect *)result.n64_u64 = CGRectIntegral(v9);
  v6 = *((_DWORD *)this + 14);
LABEL_3:
  if (v6 == 1)
  {
    v7 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
    return (__n64)CGRectIntegral(v7);
  }
  return result;
}

__n64 CI::SampleModeNode::extent_unclamped(CI::SampleModeNode *this)
{
  __n64 result;
  int v6;
  CGRect v7;
  CGRect v8;
  CGRect v9;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 5) + 168))(*((_QWORD *)this + 5));
  v6 = *((_DWORD *)this + 14);
  if (v6 == -1)
  {
    v8 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
    *(CGRect *)result.n64_u64 = CGRectIntegral(v8);
    v6 = *((_DWORD *)this + 14);
    if (v6)
      goto LABEL_3;
  }
  else if (v6)
  {
    goto LABEL_3;
  }
  v9 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
  *(CGRect *)result.n64_u64 = CGRectIntegral(v9);
  v6 = *((_DWORD *)this + 14);
LABEL_3:
  if (v6 == 1)
  {
    v7 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
    return (__n64)CGRectIntegral(v7);
  }
  return result;
}

uint64_t CI::SampleModeNode::convert_to_kernel_node(CI::SampleModeNode *this, CI::Context *a2)
{
  void (***v3)(CI::WarpKernel *__hidden);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;

  if (*((_DWORD *)this + 14))
    v3 = &CI::_ci_pass_thru;
  else
    v3 = &CI::_ci_nearest;
  v4 = operator new();
  v5 = *((_QWORD *)this + 5);
  *(_QWORD *)v4 = 0xA00000001;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 96) = 0;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = v5;
  if (v5)
    CI::Object::ref(v5);
  if (*((_DWORD *)this + 14))
  {
    v6 = operator new();
    (*(void (**)(CI::SampleModeNode *))(*(_QWORD *)this + 160))(this);
    CI::ColorKernelNode::ColorKernelNode(v6, v3, v4, 0, 0, 0);
  }
  else
  {
    v6 = operator new();
    v7 = (*(double (**)(CI::SampleModeNode *))(*(_QWORD *)this + 160))(this);
    CI::WarpKernelNode::WarpKernelNode(v6, v3, v4, 0, v7);
  }
  return v6;
}

CGFloat CI::SampleModeNode::roi_of_child(CI::SampleModeNode *this, CGRect a2)
{
  int v2;
  CGFloat v3;
  CGRect v5;

  v2 = *((_DWORD *)this + 14);
  if (v2 == 1)
  {
    v3 = -0.499;
    goto LABEL_6;
  }
  if (!v2 || v2 == -1)
  {
    v3 = 0.001;
LABEL_6:
    v5 = CGRectInset(a2, v3, v3);
    *(_QWORD *)&a2.origin.x = (unint64_t)CGRectIntegral(v5);
  }
  return a2.origin.x;
}

void CI::SampleModeNode::~SampleModeNode(CI::SampleModeNode *this)
{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBD08;
  do
    v1 = __ldaxr(&dword_1ECF872F0[43]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[43]));
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBD08;
  do
    v1 = __ldaxr(&dword_1ECF872F0[43]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[43]));
  CI::NodeWithChild::~NodeWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::SampleModeNode::type(CI::SampleModeNode *this)
{
  return 45;
}

uint64_t CI::SampleModeNode::shape_for_graphviz(CI::SampleModeNode *this)
{
  return 3;
}

uint64_t CI::SampleModeNode::color_for_graphviz(CI::SampleModeNode *this)
{
  return 2;
}

uint64_t CI::SampleModeNode::add_args_to_hash(CI::SampleModeNode *this, CI::XXHashHelper *a2)
{
  int __src;

  __src = 45;
  return XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
}

const char *CI::SampleModeNode::short_name(CI::SampleModeNode *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 14) + 1;
  if (v1 > 2)
    return "unknown";
  else
    return off_1E2EC83B8[v1];
}

size_t CI::SampleModeNode::print_for_graph_short(CI::SampleModeNode *this, __sFILE *__stream)
{
  return fwrite("samplemode", 0xAuLL, 1uLL, __stream);
}

uint64_t CI::SampleModeNode::print_for_graph_core(uint64_t a1, FILE *a2)
{
  unsigned int v2;
  const char *v3;

  v2 = *(_DWORD *)(a1 + 56) + 1;
  if (v2 > 2)
    v3 = "unknown";
  else
    v3 = off_1E2EC83B8[v2];
  return fprintf(a2, "samplemode %s", v3);
}

BOOL CI::SampleModeNode::is_warp(CI::SampleModeNode *this)
{
  return *((_DWORD *)this + 14) == 0;
}

uint64_t CI::SampleModeNode::may_be_extended_range(CI::SampleModeNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 256))(*((_QWORD *)this + 5));
}

uint64_t CI::SampleModeNode::alpha_one(CI::SampleModeNode *this)
{
  return 0;
}

uint64_t CI::SampleModeNode::output_depth(CI::SampleModeNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5));
}

uint64_t CI::SampleModeNode::mode(CI::SampleModeNode *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t `non-virtual thunk to'CI::SampleModeNode::type(CI::SampleModeNode *this)
{
  return 45;
}

void `non-virtual thunk to'CI::SampleModeNode::~SampleModeNode(CI::SampleModeNode *this)
{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBD08;
  v1 = (CI::SampleModeNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[43]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[43]));
  CI::NodeWithChild::~NodeWithChild(v1);
}

{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBD08;
  v1 = (CI::SampleModeNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[43]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[43]));
  CI::NodeWithChild::~NodeWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::InstanceCounted<(CI::Type)45>::type()
{
  return 45;
}

_QWORD *CI::InstanceCounted<(CI::Type)45>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBD08;
  do
    v1 = __ldaxr(&dword_1ECF872F0[43]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[43]));
  return result;
}

void CI::InstanceCounted<(CI::Type)45>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBD08;
  do
    v1 = __ldaxr(&dword_1ECF872F0[43]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[43]));
  JUMPOUT(0x194025AACLL);
}

float32x2_t cikernel::_ci_nearest(cikernel *this)
{
  return vadd_f32(vrndm_f32(*(float32x2_t *)CI::getDC(this)), (float32x2_t)0x3F0000003F000000);
}

void CI::f2(_QWORD *a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double (*v9)(_QWORD *);

  v9 = (double (*)(_QWORD *))a1[3];
  if (*((_BYTE *)a1 + 64))
    a1 = CI::setDC((CI *)(a3 + 16 * *(_QWORD *)(a1[6] + 8)), a2);
  *(double *)(a3 + 16 * a7) = v9(a1);
}

CI::SRGBNode *CI::SRGBNode::append_to_tree(CI::SRGBNode *this, CI::Node *a2, int a3)
{
  CI::SRGBNode *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  CI::NodeWithChild *v10;
  CI::NodeWithChild *v11;
  unsigned int v12;
  CI::NodeWithChild *v14;
  unsigned int v15;
  CI::NodeWithChild *v16;
  unsigned int v17;

  v3 = this;
  if ((_DWORD)a2)
  {
    v4 = (int)a2;
    if (a3 && (*(unsigned int (**)(CI::SRGBNode *))(*(_QWORD *)this + 232))(this))
    {
      v5 = 0;
      v6 = (uint64_t)v3;
      while (1)
      {
        v7 = v6;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6) & 1) != 0)
          break;
        v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 48))(v6, 0);
        v5 = v7;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 232))(v6) & 1) == 0)
          goto LABEL_9;
      }
      v7 = v5;
    }
    else
    {
      v7 = 0;
      v6 = (uint64_t)v3;
    }
LABEL_9:
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v9 = *(_QWORD *)v6;
    if (v8 == 35)
    {
      if (!(*(unsigned int (**)(uint64_t))(v9 + 416))(v6))
      {
        v10 = (CI::NodeWithChild *)operator new();
        v11 = CI::NodeWithChild::NodeWithChild(v10, (CI::Node *)v6);
        *((_QWORD *)v11 + 6) = off_1E2EBBC18;
        do
          v12 = __ldaxr(&dword_1ECF872F0[36]);
        while (__stlxr(v12 + 1, &dword_1ECF872F0[36]));
        goto LABEL_31;
      }
LABEL_19:
      CI::Object::ref(v6);
LABEL_20:
      if (!v7)
        return (CI::SRGBNode *)v6;
LABEL_21:
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 200))(v7, v6, 0);
      if (v6)
        CI::Object::unref((CI::Object *)v6);
      if (v3)
        CI::Object::ref((uint64_t)v3);
      return v3;
    }
    if ((*(unsigned int (**)(uint64_t))(v9 + 16))(v6) == 38)
    {
      if (!(*(_DWORD *)(v6 + 56) + v4))
      {
        v6 = *(_QWORD *)(v6 + 40);
        if (!v6)
          goto LABEL_20;
        goto LABEL_19;
      }
      v16 = (CI::NodeWithChild *)operator new();
      v11 = CI::NodeWithChild::NodeWithChild(v16, (CI::Node *)v6);
      *((_QWORD *)v11 + 6) = off_1E2EBBC18;
      do
        v17 = __ldaxr(&dword_1ECF872F0[36]);
      while (__stlxr(v17 + 1, &dword_1ECF872F0[36]));
    }
    else
    {
      v14 = (CI::NodeWithChild *)operator new();
      v11 = CI::NodeWithChild::NodeWithChild(v14, (CI::Node *)v6);
      *((_QWORD *)v11 + 6) = off_1E2EBBC18;
      do
        v15 = __ldaxr(&dword_1ECF872F0[36]);
      while (__stlxr(v15 + 1, &dword_1ECF872F0[36]));
    }
LABEL_31:
    *(_QWORD *)v11 = &off_1E2EBF808;
    *((_QWORD *)v11 + 6) = &unk_1E2EBF9B0;
    *((_DWORD *)v11 + 14) = v4;
    v6 = (uint64_t)v11;
    if (!v7)
      return (CI::SRGBNode *)v6;
    goto LABEL_21;
  }
  if (this)
    return (CI::SRGBNode *)CI::Object::ref((uint64_t)this);
  return v3;
}

uint64_t CI::SRGBNode::add_to_kernel_hash(uint64_t this, CI::XXHashHelper *a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(this + 56) + 1;
  if (v2 <= 2)
    return CI::XXHashHelper::addstr((uint64_t)a2, off_1E2EC83D0[v2]);
  return this;
}

uint64_t CI::SRGBNode::convert_to_kernel_node(CI::SRGBNode *this, CI::Context *a2)
{
  int *v2;
  unsigned int v3;
  void (***v5)(CI::ColorKernel *__hidden);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;

  v2 = (int *)((char *)this + 56);
  v3 = *((_DWORD *)this + 14) + 1;
  if (v3 >= 3)
  {
    v9 = ci_logger_render();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      CI::SRGBNode::convert_to_kernel_node(v2, v9);
    return 0;
  }
  else
  {
    v5 = off_1E2EC83E8[v3];
    v6 = operator new();
    v7 = *((_QWORD *)this + 5);
    *(_QWORD *)v6 = 0xA00000001;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_QWORD *)(v6 + 96) = 0;
    *(_DWORD *)(v6 + 8) = 1;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = v7;
    if (v7)
      CI::Object::ref(v7);
    v8 = operator new();
    (*(void (**)(CI::SRGBNode *))(*(_QWORD *)this + 160))(this);
    CI::ColorKernelNode::ColorKernelNode(v8, v5, v6, 0, 0, 0);
  }
  return v8;
}

void CI::SRGBNode::~SRGBNode(CI::SRGBNode *this)
{
  unsigned int v1;

  *(_QWORD *)this = &off_1E2EBF808;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 6) = off_1E2EBBC18;
  do
    v1 = __ldaxr(&dword_1ECF872F0[36]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[36]));
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  unsigned int v1;

  *(_QWORD *)this = &off_1E2EBF808;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 6) = off_1E2EBBC18;
  do
    v1 = __ldaxr(&dword_1ECF872F0[36]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[36]));
  CI::NodeWithChild::~NodeWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::SRGBNode::type(CI::SRGBNode *this)
{
  return 38;
}

uint64_t CI::SRGBNode::shape_for_graphviz(CI::SRGBNode *this)
{
  return 2;
}

uint64_t CI::SRGBNode::color_for_graphviz(CI::SRGBNode *this)
{
  return 4;
}

uint64_t CI::SRGBNode::add_args_to_hash(CI::SRGBNode *this, CI::XXHashHelper *a2)
{
  char __src;

  __src = *((_DWORD *)this + 14);
  return XXH64_update((uint64_t)a2, &__src, 1uLL);
}

const char *CI::SRGBNode::short_name(CI::SRGBNode *this)
{
  const char *v1;
  int v2;
  const char *v3;

  v1 = "linear_to_srgb";
  v2 = *((_DWORD *)this + 14);
  v3 = "srgb_invalid";
  if (!v2)
    v3 = "srgb_noop";
  if (v2 != 1)
    v1 = v3;
  if (v2 == -1)
    return "srgb_to_linear";
  else
    return v1;
}

BOOL CI::SRGBNode::is_identity(CI::SRGBNode *this)
{
  return *((_DWORD *)this + 14) == 0;
}

uint64_t CI::SRGBNode::may_be_extended_range(CI::SRGBNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 256))(*((_QWORD *)this + 5));
}

uint64_t CI::SRGBNode::output_depth(CI::SRGBNode *this)
{
  int v2;
  uint64_t result;

  v2 = *((_DWORD *)this + 14);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5));
  if (v2)
  {
    if ((int)result < 1)
      return 0;
    else
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5));
  }
  return result;
}

uint64_t CI::SRGBNode::code_complexity(CI::SRGBNode *this)
{
  return 2;
}

uint64_t `non-virtual thunk to'CI::SRGBNode::type(CI::SRGBNode *this)
{
  return 38;
}

void `non-virtual thunk to'CI::SRGBNode::~SRGBNode(CI::SRGBNode *this)
{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E2EBBC18;
  *((_QWORD *)this - 6) = &off_1E2EBF808;
  v1 = (CI::SRGBNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[36]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[36]));
  CI::NodeWithChild::~NodeWithChild(v1);
}

{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E2EBBC18;
  *((_QWORD *)this - 6) = &off_1E2EBF808;
  v1 = (CI::SRGBNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[36]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[36]));
  CI::NodeWithChild::~NodeWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::InstanceCounted<(CI::Type)38>::type()
{
  return 38;
}

_QWORD *CI::InstanceCounted<(CI::Type)38>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBC18;
  do
    v1 = __ldaxr(&dword_1ECF872F0[36]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[36]));
  return result;
}

void CI::InstanceCounted<(CI::Type)38>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBC18;
  do
    v1 = __ldaxr(&dword_1ECF872F0[36]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[36]));
  JUMPOUT(0x194025AACLL);
}

float32x4_t cikernel::_ci_lin_to_srgb(float32x4_t a1)
{
  float32x4_t v2;
  int8x16_t v3;
  float32x4_t result;
  float32x4_t v10;
  unsigned __int32 v11;
  int8x16_t v12;
  int8x16_t v13;

  v11 = a1.u32[3];
  v2 = vabsq_f32(a1);
  v13 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3B4D2E1Cu), v2);
  v12 = (int8x16_t)vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x414EB852u));
  v3.i64[0] = 0x8000000080000000;
  v3.i64[1] = 0x8000000080000000;
  __asm { FMOV            V2.4S, #1.0 }
  v10 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a1), (int8x16_t)vcgtzq_f32(a1)), vorrq_s8(vandq_s8((int8x16_t)a1, v3), _Q2), (int8x16_t)0);
  v2.i32[3] = 0;
  result = (float32x4_t)_simd_pow_f4((simd_float4)v2, (simd_float4)xmmword_19248E040);
  result.i64[0] = vbslq_s8(v13, v12, (int8x16_t)vmulq_f32(v10, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBD6147AE), (float32x4_t)vdupq_n_s32(0x3F870A3Du), result))).u64[0];
  result.i32[3] = v11;
  return result;
}

float32x4_t cikernel::_ci_srgb_to_lin(float32x4_t a1)
{
  float32x4_t v1;
  int8x16_t v2;
  int8x16_t v3;
  simd_float4 v9;
  float32x4_t result;
  float32x4_t v11;
  unsigned __int32 v12;
  int8x16_t v13;
  int8x16_t v14;

  v12 = a1.u32[3];
  v1 = vabsq_f32(a1);
  v14 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), v1);
  v13 = (int8x16_t)vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x3D9E8391u));
  v2.i64[0] = 0x8000000080000000;
  v2.i64[1] = 0x8000000080000000;
  v3 = vandq_s8((int8x16_t)a1, v2);
  __asm { FMOV            V2.4S, #1.0 }
  v11 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a1), (int8x16_t)vcgtzq_f32(a1)), vorrq_s8(v3, _Q2), (int8x16_t)0);
  v9 = (simd_float4)vmlaq_f32((float32x4_t)vdupq_n_s32(0x3D558919u), (float32x4_t)vdupq_n_s32(0x3F72A76Eu), v1);
  v9.i32[3] = 0;
  result = (float32x4_t)_simd_pow_f4(v9, (simd_float4)xmmword_19248E030);
  result.i64[0] = vbslq_s8(v14, v13, (int8x16_t)vmulq_f32(v11, result)).u64[0];
  result.i32[3] = v12;
  return result;
}

uint64_t CI::SurfaceNode::SurfaceNode(uint64_t a1, int a2, void *a3, uint64_t a4, int a5, int a6, int a7, char a8, char a9)
{
  unsigned int v17;
  __IOSurface *v18;
  size_t Height;
  int v20;

  *((_QWORD *)CI::Node::Node((CI::Node *)a1) + 5) = off_1E2EBBD30;
  do
    v17 = __ldaxr(&dword_1ECF872F0[44]);
  while (__stlxr(v17 + 1, &dword_1ECF872F0[44]));
  *(_DWORD *)(a1 + 48) = a5;
  *(_WORD *)(a1 + 52) = 0;
  *(_QWORD *)a1 = &off_1E2EB8CC0;
  *(_QWORD *)(a1 + 40) = &unk_1E2EB8E78;
  *(_QWORD *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 64) = a4;
  *(_DWORD *)(a1 + 108) = a2;
  CFRetain(a3);
  if (a3)
  {
    *(_DWORD *)(a1 + 72) = IOSurfaceGetPixelFormat((IOSurfaceRef)a3);
    *(_QWORD *)(a1 + 80) = IOSurfaceGetWidth((IOSurfaceRef)a3);
    Height = IOSurfaceGetHeight((IOSurfaceRef)a3);
  }
  else
  {
    Height = 0;
    *(_DWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_QWORD *)(a1 + 88) = Height;
  *(_DWORD *)(a1 + 96) = a6;
  *(_DWORD *)(a1 + 100) = a7;
  *(_BYTE *)(a1 + 104) = a8;
  v20 = CI::format_from_IOSurface((CI *)a3, v18);
  *(_BYTE *)(a1 + 105) = CI::format_is_float(v20);
  *(_BYTE *)(a1 + 106) = a9;
  return a1;
}

{
  return CI::SurfaceNode::SurfaceNode(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_19243BCCC(_Unwind_Exception *a1)
{
  CI::Node *v1;
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;

  *((_QWORD *)v1 + 5) = off_1E2EBBD30;
  v4 = (unsigned int *)(v2 + 184);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  CI::Node::~Node(v1);
  _Unwind_Resume(a1);
}

void CI::SurfaceNode::~SurfaceNode(CI::SurfaceNode *this)
{
  const void *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_1E2EB8CC0;
  *((_QWORD *)this + 5) = &unk_1E2EB8E78;
  v2 = (const void *)*((_QWORD *)this + 7);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = off_1E2EBBD30;
  do
    v3 = __ldaxr(&dword_1ECF872F0[44]);
  while (__stlxr(v3 - 1, &dword_1ECF872F0[44]));
  CI::Node::~Node(this);
}

{
  CI::SurfaceNode::~SurfaceNode(this);
  JUMPOUT(0x194025AACLL);
}

void sub_19243BD78(_Unwind_Exception *a1)
{
  CI::Node *v1;
  unsigned int v3;

  *((_QWORD *)v1 + 5) = off_1E2EBBD30;
  do
    v3 = __ldaxr(&dword_1ECF872F0[44]);
  while (__stlxr(v3 - 1, &dword_1ECF872F0[44]));
  CI::Node::~Node(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'CI::SurfaceNode::~SurfaceNode(CI::SurfaceNode *this)
{
  CI::SurfaceNode::~SurfaceNode((CI::SurfaceNode *)((char *)this - 40));
}

{
  CI::SurfaceNode::~SurfaceNode((CI::SurfaceNode *)((char *)this - 40));
  JUMPOUT(0x194025AACLL);
}

void CI::SurfaceNode::release_resources(CI::SurfaceNode *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 7);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 7) = 0;
}

void CI::SurfaceNode::set_surface(uint64_t a1, int a2, uint64_t a3, CFTypeRef cf)
{
  const void *v6;

  *(_DWORD *)(a1 + 108) = a2;
  *(_QWORD *)(a1 + 64) = a3;
  if (cf)
    CFRetain(cf);
  v6 = *(const void **)(a1 + 56);
  if (v6)
    CFRelease(v6);
  *(_QWORD *)(a1 + 56) = cf;
}

uint64_t CI::SurfaceNode::print_for_graph_core(uint64_t a1, FILE *__stream)
{
  IOSurfaceID ID;
  const char *v5;
  int v6;
  const char *v7;
  uint64_t result;
  int v9;
  int v10;
  const char *v11;
  const char *v12;
  int v13;
  const char *v14;

  fwrite("IOSurface", 9uLL, 1uLL, __stream);
  if (*(_QWORD *)(a1 + 64))
  {
    fprintf(__stream, " content:%016llX");
  }
  else if (*(_QWORD *)(a1 + 56))
  {
    fprintf(__stream, " %p", *(const void **)(a1 + 56));
    ID = IOSurfaceGetID(*(IOSurfaceRef *)(a1 + 56));
    fprintf(__stream, "(%d)", ID);
    IOSurfaceGetSeed(*(IOSurfaceRef *)(a1 + 56));
    fprintf(__stream, " seed:%d");
  }
  if (*(_BYTE *)(a1 + 52))
    v5 = "s";
  else
    v5 = "";
  v6 = CI::format_from_PixelFormatType((CI *)*(unsigned int *)(a1 + 72));
  v7 = CI::name_for_format(v6);
  result = fprintf(__stream, " %s%s", v5, v7);
  v9 = *(_DWORD *)(a1 + 72);
  v10 = v9 >> 24;
  if ((v9 & 0xFD000000) != 0x2D000000)
  {
    if (v10 == 38)
      goto LABEL_16;
    if (v10 != 124)
      goto LABEL_23;
LABEL_19:
    v11 = "lossy50";
    goto LABEL_22;
  }
  if (v10 > 46)
  {
    if (v10 == 47)
    {
      v11 = "lossy62";
      goto LABEL_22;
    }
    if (v10 != 124)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (v10 == 38)
  {
LABEL_16:
    v11 = "compressed";
    goto LABEL_22;
  }
  if (v10 != 45)
  {
LABEL_20:
    v11 = "";
    goto LABEL_22;
  }
  v11 = "lossy75";
LABEL_22:
  result = fprintf(__stream, "-%s", v11);
LABEL_23:
  v12 = "alpha_one";
  switch(*(_DWORD *)(a1 + 96))
  {
    case 0:
      goto LABEL_29;
    case 1:
      goto LABEL_28;
    case 2:
      v12 = "alpha_unpremul";
      goto LABEL_28;
    case 4:
      v12 = "alpha_premul-clear-edges";
      goto LABEL_28;
    case 6:
      v12 = "alpha_unpremul-clear-edges";
      goto LABEL_28;
    default:
      v12 = "alpha_unknown";
LABEL_28:
      result = fprintf(__stream, " %s", v12);
LABEL_29:
      v13 = *(_DWORD *)(a1 + 100);
      if (v13)
      {
        if (v13 == 1)
          v14 = "edge_clamp";
        else
          v14 = "edge_unknown";
        result = fprintf(__stream, " %s", v14);
      }
      if (*(_BYTE *)(a1 + 104))
        result = fwrite(" nearestsampling", 0x10uLL, 1uLL, __stream);
      if (*(_BYTE *)(a1 + 106))
        return fwrite(" cache", 6uLL, 1uLL, __stream);
      return result;
  }
}

uint64_t CI::SurfaceNode::add_args_to_hash(CI::SurfaceNode *this, CI::XXHashHelper *a2)
{
  CI::XXHashHelper *v4;
  size_t v5;
  uint64_t __src;

  if (*((_QWORD *)this + 8))
  {
    __src = *((_QWORD *)this + 8);
    v4 = a2;
    v5 = 8;
  }
  else
  {
    __src = *((_QWORD *)this + 7);
    XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
    LODWORD(__src) = *((_DWORD *)this + 27);
    XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
    LODWORD(__src) = IOSurfaceGetID(*((IOSurfaceRef *)this + 7));
    XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
    LODWORD(__src) = IOSurfaceGetSeed(*((IOSurfaceRef *)this + 7));
    v4 = a2;
    v5 = 4;
  }
  XXH64_update((uint64_t)v4, (char *)&__src, v5);
  LODWORD(__src) = IOSurfaceGetPixelFormat(*((IOSurfaceRef *)this + 7));
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((_DWORD *)this + 24);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((_DWORD *)this + 25);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 104);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 52);
  return XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
}

uint64_t CI::SurfaceNode::chroma_scale_fix(IOSurfaceRef *this)
{
  uint64_t result;
  int v3;

  result = (*((uint64_t (**)(IOSurfaceRef *))*this + 26))(this);
  if ((_DWORD)result != 2)
  {
    __asm { FMOV            V0.2S, #1.0 }
    return result;
  }
  IOSurfaceGetWidthOfPlane(this[7], 0);
  IOSurfaceGetWidthOfPlane(this[7], 1uLL);
  IOSurfaceGetHeightOfPlane(this[7], 0);
  IOSurfaceGetHeightOfPlane(this[7], 1uLL);
  result = equivalent_uncompressed_format(*((unsigned int *)this + 18));
  if ((int)result <= 1936077875)
  {
    if ((int)result <= 1751528499)
    {
      if ((_DWORD)result == 875836518)
        goto LABEL_18;
      v3 = 875836534;
    }
    else
    {
      if ((_DWORD)result == 1751528500 || (_DWORD)result == 1882469428)
        goto LABEL_18;
      v3 = 1885746228;
    }
LABEL_17:
    if ((_DWORD)result != v3)
      return result;
    goto LABEL_18;
  }
  if ((int)result > 1953903667)
  {
    if ((_DWORD)result == 1953903668 || (_DWORD)result == 2019963956)
      goto LABEL_18;
    v3 = 2016687156;
    goto LABEL_17;
  }
  if ((_DWORD)result != 1936077876 && (_DWORD)result != 1937126452)
  {
    v3 = 1952855092;
    goto LABEL_17;
  }
LABEL_18:
  __asm { FMOV            V0.2S, #1.0 }
  return result;
}

double CI::SurfaceNode::find_matching_roi(CI::SurfaceNode *this, const CGRect *a2)
{
  CGRect **v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGRect v13;
  CGRect v14;
  CGRect v15;

  v4 = (CGRect **)CI::Node::rois(this);
  x = a2->origin.x;
  y = a2->origin.y;
  width = a2->size.width;
  height = a2->size.height;
  v15.origin.x = (*(double (**)(CI::SurfaceNode *))(*(_QWORD *)this + 168))(this);
  v15.origin.y = v9;
  v15.size.width = v10;
  v15.size.height = v11;
  v13.origin.x = x;
  v13.origin.y = y;
  v13.size.width = width;
  v13.size.height = height;
  v14 = CGRectIntersection(v13, v15);
  return CI::SerialRectArray::smallestContainingRect(v4, v14);
}

void CI::SurfaceNode::add_roi(CI::SurfaceNode *this, unint64_t a2, unint64_t a3, CGRect a4, const CI::parentROI *a5)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CI::Node *v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  double *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  BOOL v50;
  BOOL v51;
  BOOL v53;
  int v54;
  int v55;
  int v56;
  int v57;
  BOOL v58;
  int v59;
  int v60;
  int v61;
  int v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  if (!CGRectIsEmpty(a4))
  {
    v63.origin.x = (*(double (**)(CI::SurfaceNode *))(*(_QWORD *)this + 168))(this);
    v20 = v63.origin.x;
    v21 = v63.origin.y;
    v22 = v63.size.width;
    v23 = v63.size.height;
    if (CGRectIsNull(v63))
    {
      v24 = 0;
      v25 = 0;
      v26 = 0x7FFFFFFF;
      v27 = 0x7FFFFFFF;
    }
    else
    {
      v64.origin.x = v20;
      v64.origin.y = v21;
      v64.size.width = v22;
      v64.size.height = v23;
      if (CGRectIsInfinite(v64))
      {
        v26 = -2147483647;
        v24 = 0xFFFFFFFFLL;
        v25 = 0xFFFFFFFFLL;
        v27 = -2147483647;
      }
      else
      {
        v65.origin.x = v20;
        v65.origin.y = v21;
        v65.size.width = v22;
        v65.size.height = v23;
        v66 = CGRectInset(v65, 0.000001, 0.000001);
        v67 = CGRectIntegral(v66);
        v27 = (int)v67.origin.x;
        v26 = (int)v67.origin.y;
        v25 = (unint64_t)v67.size.width;
        v24 = (unint64_t)v67.size.height;
      }
    }
    v68.origin.x = x;
    v68.origin.y = y;
    v68.size.width = width;
    v68.size.height = height;
    if (CGRectIsNull(v68))
    {
      v28 = 0;
      v29 = 0;
      v30 = 0x7FFFFFFF;
      v31 = 0x7FFFFFFF;
    }
    else
    {
      v69.origin.x = x;
      v69.origin.y = y;
      v69.size.width = width;
      v69.size.height = height;
      if (CGRectIsInfinite(v69))
      {
        v30 = -2147483647;
        v28 = 0xFFFFFFFFLL;
        v29 = 0xFFFFFFFFLL;
        v31 = -2147483647;
      }
      else
      {
        v70.origin.x = x;
        v70.origin.y = y;
        v70.size.width = width;
        v70.size.height = height;
        v71 = CGRectInset(v70, 0.000001, 0.000001);
        v72 = CGRectIntegral(v71);
        v31 = (int)v72.origin.x;
        v30 = (int)v72.origin.y;
        v29 = (unint64_t)v72.size.width;
        v28 = (unint64_t)v72.size.height;
      }
    }
    if (*((_DWORD *)this + 25) != 1
      || v27 == -2147483647 && v26 == -2147483647 && v25 == 0xFFFFFFFF && v24 == 0xFFFFFFFF)
    {
      goto LABEL_18;
    }
    v34 = 0x7FFFFFFF;
    if (v31 == 0x7FFFFFFF)
    {
      if (v30 == 0x7FFFFFFF && !v29 && !v28)
      {
        v32 = 0;
        v33 = 0;
        v35 = 0x7FFFFFFF;
        goto LABEL_19;
      }
    }
    else if (v31 == -2147483647 && v30 == -2147483647 && v29 == 0xFFFFFFFF && v28 == 0xFFFFFFFF)
    {
      goto LABEL_109;
    }
    if (v24)
      v51 = 0;
    else
      v51 = v25 == 0;
    v53 = v51 && v26 == 0x7FFFFFFF && v27 == 0x7FFFFFFF;
    if (!v53 && v27 <= v31 && v27 + (int)v25 >= v31 + (int)v29 && v26 <= v30 && v26 + (int)v24 >= v30 + (int)v28)
    {
LABEL_18:
      v32 = v28;
      v33 = v29;
      v34 = v30;
      v35 = v31;
      goto LABEL_19;
    }
LABEL_109:
    if (v27 == 0x7FFFFFFF && v26 == 0x7FFFFFFF && !v25 && !v24
      || v31 == 0x7FFFFFFF && v30 == 0x7FFFFFFF && !v29 && !v28)
    {
LABEL_117:
      v54 = v31 + v29;
      if (v54 >= v27)
      {
        v55 = v27 + v25;
        if (v31 <= v27 + (int)v25)
        {
          if (v31 <= v27)
            v35 = v27;
          else
            v35 = v31;
          if (v54 >= v55)
            v59 = v27 + v25;
          else
            v59 = v54;
          v33 = v59 - v35;
        }
        else
        {
          v35 = v55 - 1;
          v33 = 1;
        }
      }
      else
      {
        v33 = 1;
        v35 = v27;
      }
      v60 = v30 + v28;
      if (v60 >= v26)
      {
        v61 = v26 + v24;
        if (v30 <= v26 + (int)v24)
        {
          if (v30 <= v26)
            v34 = v26;
          else
            v34 = v30;
          if (v60 >= v61)
            v62 = v26 + v24;
          else
            v62 = v60;
          v32 = v62 - v34;
        }
        else
        {
          v34 = v61 - 1;
          v32 = 1;
        }
      }
      else
      {
        v32 = 1;
        v34 = v26;
      }
LABEL_19:
      v36 = 0x7FFFFFFF;
      if ((v27 != 0x7FFFFFFF || v26 != 0x7FFFFFFF || v25 || v24)
        && (v35 != 0x7FFFFFFF || v34 != 0x7FFFFFFF || v33 || v32))
      {
        if (v27 == -2147483647 && v26 == -2147483647 && v25 == 0xFFFFFFFF && v24 == 0xFFFFFFFF)
        {
          v36 = v35;
          v39 = v34;
          v37 = v33;
          v38 = v32;
        }
        else if (v35 != -2147483647
               || v34 != -2147483647
               || v33 != 0xFFFFFFFFLL
               || (v36 = v27, v39 = v26, v37 = v25, v38 = v24, v32 != 0xFFFFFFFFLL))
        {
          if (v27 <= v35)
            v42 = v35;
          else
            v42 = v27;
          v43 = v27 + v25;
          if (v27 + (int)v25 >= v35 + (int)v33)
            v43 = v35 + v33;
          if (v26 <= v34)
            v39 = v34;
          else
            v39 = v26;
          v44 = v26 + v24;
          v45 = v34 + v32;
          if (v26 + (int)v24 >= v45)
            v44 = v45;
          v46 = v44 < v39;
          v47 = v44 - v39;
          if (v46)
            v48 = 0x7FFFFFFF;
          else
            v48 = v42;
          if (v46)
          {
            v39 = 0x7FFFFFFF;
            v49 = 0;
          }
          else
          {
            v49 = v43 - v42;
          }
          if (v46)
            v47 = 0;
          v50 = v43 < v42;
          if (v43 >= v42)
            v36 = v48;
          else
            v36 = 0x7FFFFFFF;
          if (v50)
          {
            v39 = 0x7FFFFFFF;
            v37 = 0;
          }
          else
          {
            v37 = v49;
          }
          if (v50)
            v38 = 0;
          else
            v38 = v47;
        }
      }
      else
      {
        v37 = 0;
        v38 = 0;
        v39 = 0x7FFFFFFF;
      }
      if (v25 <= v24)
        v40 = v24;
      else
        v40 = v25;
      if (v40 > 0x1000 || 3 * v24 * v25 > 4 * v37 * v38)
      {
        if (v36 != -2147483647)
        {
          if (v36 != 0x7FFFFFFF || v39 != 0x7FFFFFFF || v37 || v38)
          {
LABEL_59:
            v16 = (double)v36;
            v17 = (double)v39;
            v18 = (double)v37;
            v19 = (double)v38;
LABEL_127:
            v13 = this;
            v14 = a2;
            v15 = a3;
            goto LABEL_128;
          }
          goto LABEL_55;
        }
        if (v39 != -2147483647 || v37 != 0xFFFFFFFF || v38 != 0xFFFFFFFF)
          goto LABEL_59;
LABEL_124:
        v41 = (double *)MEMORY[0x1E0C9D5E0];
        goto LABEL_125;
      }
      if (v27 == -2147483647)
      {
        if (v26 == -2147483647 && v25 == 0xFFFFFFFF && v24 == 0xFFFFFFFF)
          goto LABEL_124;
      }
      else if (v27 == 0x7FFFFFFF && v26 == 0x7FFFFFFF && !v25 && !v24)
      {
LABEL_55:
        v41 = (double *)MEMORY[0x1E0C9D628];
LABEL_125:
        v16 = *v41;
        v17 = v41[1];
        v18 = v41[2];
        v19 = v41[3];
        goto LABEL_127;
      }
      v16 = (double)v27;
      v17 = (double)v26;
      v18 = (double)v25;
      v19 = (double)v24;
      goto LABEL_127;
    }
    if (v31 != -2147483647
      || v30 != -2147483647
      || v29 != 0xFFFFFFFF
      || (v32 = v24, v33 = v25, v34 = v26, v35 = v27, v28 != 0xFFFFFFFF))
    {
      if (v27 <= v31)
        v35 = v31;
      else
        v35 = v27;
      v56 = v27 + v25;
      if (v27 + (int)v25 >= v31 + (int)v29)
        v56 = v31 + v29;
      LODWORD(v33) = v56 - v35;
      if (v56 < v35)
        goto LABEL_117;
      if (v26 <= v30)
        v34 = v30;
      else
        v34 = v26;
      v57 = v26 + v24;
      if (v26 + (int)v24 >= v30 + (int)v28)
        v57 = v30 + v28;
      v58 = __OFSUB__(v57, v34);
      LODWORD(v32) = v57 - v34;
      if ((int)v32 < 0 != v58)
        goto LABEL_117;
      v33 = (int)v33;
      v32 = (int)v32;
    }
    if (v33 && v32)
      goto LABEL_19;
    goto LABEL_117;
  }
  v13 = this;
  v14 = a2;
  v15 = a3;
  v16 = x;
  v17 = y;
  v18 = width;
  v19 = height;
LABEL_128:
  CI::Node::add_roi(v13, v14, v15, *(CGRect *)&v16, a5);
}

void CI::SurfaceNode::surfaceForROI(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __IOSurface **a4@<X8>, CGFloat a5@<D0>, CGFloat a6@<D1>, CGFloat a7@<D2>, CGFloat a8@<D3>)
{
  NSObject *v16;
  os_signpost_id_t v17;
  uint64_t v18;
  __IOSurface *Surface;
  __IOSurface *v20;
  uint64_t v21;
  unsigned int v22;
  double Current;
  unint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t PixelFormat;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  unsigned int v32;
  void *v33;
  void *v34;
  void *v35;
  double v36;
  __IOSurface *v37;
  _QWORD v38[10];
  _QWORD v39[6];
  uint8_t v40[4];
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  unsigned int v45;
  uint8_t buf[4];
  CGFloat v47;
  __int16 v48;
  CGFloat v49;
  __int16 v50;
  CGFloat v51;
  __int16 v52;
  CGFloat v53;
  uint64_t v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;

  v54 = *MEMORY[0x1E0C80C00];
  if (CI_VERBOSE_SIGNPOSTS())
  {
    v16 = ci_signpost_log_render();
    v17 = *(int *)(a1 + 36) | (unint64_t)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2) << 32);
    if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
    {
      *(_DWORD *)buf = 134218752;
      v47 = a5;
      v48 = 2048;
      v49 = a6;
      v50 = 2048;
      v51 = a7;
      v52 = 2048;
      v53 = a8;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v16, OS_SIGNPOST_INTERVAL_BEGIN, v17, "surface_for_roi_from_surface", "[%g %g %g %g]", buf, 0x2Au);
    }
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2);
  TimerBase::TimerBase((uint64_t)buf, v18, *(_DWORD *)(a1 + 36), (uint64_t)"surface_for_roi_from_surface", 24);
  v55.origin.x = a5;
  v55.origin.y = a6;
  v55.size.width = a7;
  v55.size.height = a8;
  if (!CGRectIsEmpty(v55))
  {
    v56.origin.x = a5;
    v56.origin.y = a6;
    v56.size.width = a7;
    v56.size.height = a8;
    if (!CGRectIsInfinite(v56))
    {
      v21 = CI::format_from_IOSurface(*(CI **)(a1 + 56), v20);
      v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 536))(a2, v21);
      Current = CFAbsoluteTimeGetCurrent();
      *(_QWORD *)(a3 + 8) += (unint64_t)a7 * (unint64_t)a8;
      v57.size.width = (double)*(unint64_t *)(a1 + 80);
      v57.size.height = (double)*(unint64_t *)(a1 + 88);
      v57.origin.x = 0.0;
      v57.origin.y = 0.0;
      v61 = CGRectInset(v57, 2.0, 2.0);
      v58.origin.x = a5;
      v58.origin.y = a6;
      v58.size.width = a7;
      v58.size.height = a8;
      if (CGRectContainsRect(v58, v61))
      {
        v24 = v22;
        if (SurfaceIsRowBytesAligned(*(__IOSurface **)(a1 + 56), v22))
        {
          CFRetain(*(CFTypeRef *)(a1 + 56));
          *(CFAbsoluteTime *)a3 = CFAbsoluteTimeGetCurrent() - Current + *(double *)a3;
          Surface = *(__IOSurface **)(a1 + 56);
          goto LABEL_30;
        }
      }
      else
      {
        v24 = v22;
      }
      if (!SurfaceIsRowBytesAligned(*(__IOSurface **)(a1 + 56), v24))
      {
        v25 = ci_logger_performance();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          v26 = *(_QWORD *)(a1 + 80);
          v27 = *(_QWORD *)(a1 + 88);
          *(_DWORD *)v40 = 134218496;
          v41 = v26;
          v42 = 2048;
          v43 = v27;
          v44 = 1024;
          v45 = v22;
          _os_log_impl(&dword_1921E4000, v25, OS_LOG_TYPE_INFO, "CI_CONVERSION: Converted %zux%zu input surface to a new surface with required rowbytes alignment (of %d bytes).", v40, 0x1Cu);
        }
      }
      if (CI_ENABLE_METAL_BLIT()
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 77)
      {
        v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 544))(a2, v21);
      }
      PixelFormat = IOSurfaceGetPixelFormat(*(IOSurfaceRef *)(a1 + 56));
      Surface = CreateSurface((__CVBuffer *)a7, (__CVBuffer *)a8, (void *)v22, PixelFormat, 0);
      if (CI_ENABLE_METAL_BLIT())
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 77
          && IOSurfaceGetPlaneCount(*(IOSurfaceRef *)(a1 + 56)) <= 1)
        {
          v29 = *(_QWORD *)(a1 + 80);
          if (v29 <= (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 440))(a2))
          {
            v30 = *(_QWORD *)(a1 + 88);
            if (v30 <= (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 440))(a2)
              && SurfaceIsRowBytesAligned(*(__IOSurface **)(a1 + 56), v24))
            {
              v31 = (void *)CI::MetalContext::device((id *)a2);
              v32 = CIMetalFormatForFormat(*(_DWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));
              v33 = CIMetalTextureCreateFromIOSurface(*(_QWORD *)(a2 + 1920), v31, *(IOSurfaceRef *)(a1 + 56), 0, v32, 1);
              if (v33)
              {
                v34 = CIMetalTextureCreateFromIOSurface(*(_QWORD *)(a2 + 1920), v31, Surface, 0, v32, 2);
                if (v34)
                {
                  v59.origin.x = a5;
                  v59.origin.y = a6;
                  v59.size.width = a7;
                  v59.size.height = a8;
                  v60 = CGRectIntegral(v59);
                  v35 = *(void **)(a2 + 1792);
                  CIMetalCommandBufferCopyTexture(v35, (uint64_t)v34, (uint64_t)v33, *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8), v60.origin.x, v60.origin.y, v60.size.width, v60.size.height);
                  v39[0] = MEMORY[0x1E0C809B0];
                  v39[1] = 3221225472;
                  v39[2] = ___ZNK2CI11SurfaceNode13surfaceForROIEPKNS_7ContextE6CGRectRNS_8Tileable5StatsE_block_invoke;
                  v39[3] = &unk_1E2EC4950;
                  v39[4] = v33;
                  v39[5] = v34;
                  CIMetalCommandBufferAddCompletionHandler(v35, (uint64_t)v39);
                  v36 = CFAbsoluteTimeGetCurrent();
LABEL_29:
                  *(double *)a3 = v36 - Current + *(double *)a3;
                  goto LABEL_30;
                }
                CFRelease(v33);
              }
            }
          }
        }
      }
      v37 = *(__IOSurface **)(a1 + 56);
      v38[0] = MEMORY[0x1E0C809B0];
      v38[1] = 3221225472;
      v38[2] = ___ZNK2CI11SurfaceNode13surfaceForROIEPKNS_7ContextE6CGRectRNS_8Tileable5StatsE_block_invoke_2;
      v38[3] = &__block_descriptor_80_e22_v48__0r_v8Q16Q24Q32Q40l;
      v38[4] = a1;
      v38[5] = Surface;
      *(CGFloat *)&v38[6] = a5;
      *(CGFloat *)&v38[7] = a6;
      *(CGFloat *)&v38[8] = a7;
      *(CGFloat *)&v38[9] = a8;
      SurfaceApplyPlaneReadOnlyBlock(v37, (uint64_t)v38);
      v36 = CFAbsoluteTimeGetCurrent();
      goto LABEL_29;
    }
  }
  Surface = 0;
LABEL_30:
  *a4 = Surface;
  CI::SurfaceNode::surfaceForROI(CI::Context const*,CGRect,CI::Tileable::Stats &)const::SignpostTimer::~SignpostTimer((TimerBase *)buf);
}

void sub_19243D07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  CI::SurfaceNode::surfaceForROI(CI::Context const*,CGRect,CI::Tileable::Stats &)const::SignpostTimer::~SignpostTimer((TimerBase *)&a29);
  _Unwind_Resume(a1);
}

void ___ZNK2CI11SurfaceNode13surfaceForROIEPKNS_7ContextE6CGRectRNS_8Tileable5StatsE_block_invoke(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t ___ZNK2CI11SurfaceNode13surfaceForROIEPKNS_7ContextE6CGRectRNS_8Tileable5StatsE_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __IOSurface *v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v10[6];
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v7 = *(_QWORD *)(a1 + 32);
  v6 = *(__IOSurface **)(a1 + 40);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZNK2CI11SurfaceNode13surfaceForROIEPKNS_7ContextE6CGRectRNS_8Tileable5StatsE_block_invoke_3;
  v10[3] = &__block_descriptor_96_e21_v48__0_v8Q16Q24Q32Q40l;
  v10[4] = v7;
  v10[5] = a3;
  v8 = *(_OWORD *)(a1 + 64);
  v11 = *(_OWORD *)(a1 + 48);
  v12 = v8;
  v13 = a2;
  v14 = a6;
  return SurfaceApplyPlaneBlock(v6, (uint64_t)v10);
}

uint64_t ___ZNK2CI11SurfaceNode13surfaceForROIEPKNS_7ContextE6CGRectRNS_8Tileable5StatsE_block_invoke_3(uint64_t result, char *a2, size_t planeIndex, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  size_t ElementWidthOfPlane;
  size_t ElementHeightOfPlane;
  __IOSurface *v15;
  uint64_t v16;
  int v17;
  __IOSurface *v18;
  double v19;
  int v20;
  double v21;
  size_t v22;
  char *v23;

  if (*(_QWORD *)(result + 40) != planeIndex)
    return result;
  v11 = result;
  v12 = *(_QWORD *)(result + 32);
  ElementWidthOfPlane = IOSurfaceGetElementWidthOfPlane(*(IOSurfaceRef *)(v12 + 56), planeIndex);
  ElementHeightOfPlane = IOSurfaceGetElementHeightOfPlane(*(IOSurfaceRef *)(v12 + 56), *(_QWORD *)(v11 + 40));
  result = IOSurfaceGetBytesPerElementOfPlane(*(IOSurfaceRef *)(v12 + 56), *(_QWORD *)(v11 + 40));
  v16 = result;
  if (!planeIndex)
  {
    v19 = 1.0;
    v21 = 1.0;
    if (!a5)
      return result;
    goto LABEL_12;
  }
  v17 = CI::format_from_IOSurface(*(CI **)(v12 + 56), v15);
  if (CI::format_is_ycc_biplanar(v17))
    v19 = 2.0;
  else
    v19 = 1.0;
  v20 = CI::format_from_IOSurface(*(CI **)(v12 + 56), v18);
  result = CI::format_is_ycc_420(v20);
  if ((_DWORD)result)
    v21 = 2.0;
  else
    v21 = 1.0;
  if (a5)
  {
LABEL_12:
    v22 = a4 / ElementWidthOfPlane * v16;
    v23 = (char *)(*(_QWORD *)(v11 + 80)
                 + (unint64_t)(*(double *)(v11 + 48) / v19) / ElementWidthOfPlane * v16
                 + *(_QWORD *)(v11 + 88) * ((unint64_t)(*(double *)(v11 + 56) / v21) / ElementHeightOfPlane));
    do
    {
      result = (uint64_t)memcpy(a2, v23, v22);
      v23 += *(_QWORD *)(v11 + 88);
      a2 += a6;
      --a5;
    }
    while (a5);
  }
  return result;
}

void CI::SurfaceNode::surfaceForROI(CI::Context const*,CGRect,CI::Tileable::Stats &)const::SignpostTimer::~SignpostTimer(TimerBase *a1)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  uint8_t v5[16];

  if (CI_VERBOSE_SIGNPOSTS())
  {
    v2 = ci_signpost_log_render();
    v3 = *((_QWORD *)a1 + 1);
    if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v4 = v2;
      if (os_signpost_enabled(v2))
      {
        *(_WORD *)v5 = 0;
        _os_signpost_emit_with_name_impl(&dword_1921E4000, v4, OS_SIGNPOST_INTERVAL_END, v3, "surface_for_roi_from_surface", (const char *)&unk_192520C83, v5, 2u);
      }
    }
  }
  TimerBase::~TimerBase(a1);
}

void sub_19243D328(_Unwind_Exception *a1)
{
  TimerBase *v1;

  TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

void CI::SurfaceNode::graphviz_add_images(__IOSurface **this, void *a2)
{
  char *CGImage;

  if (CI_PRINT_TREE_dump_inputs())
  {
    CGImage = (char *)SurfaceCreateCGImage(this[7], 0, 1);
    CIGVNodeAddImage(a2, CGImage);
    CGImageRelease((CGImageRef)CGImage);
  }
}

uint64_t CI::InstanceCounted<(CI::Type)46>::type()
{
  return 46;
}

_QWORD *CI::InstanceCounted<(CI::Type)46>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBD30;
  do
    v1 = __ldaxr(&dword_1ECF872F0[44]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[44]));
  return result;
}

void CI::InstanceCounted<(CI::Type)46>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBD30;
  do
    v1 = __ldaxr(&dword_1ECF872F0[44]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[44]));
  JUMPOUT(0x194025AACLL);
}

CI::Object *CI::SwizzleNode::append_to_tree(CI::Object *this, int a2, int a3, char a4)
{
  CI::Object *v4;
  CI::Object *v7;
  CI::Object *v8;
  CI::Object *v9;
  int v10;
  CI::NodeWithChild *v12;
  CI::NodeWithChild *v13;
  unsigned int v14;
  CI::NodeWithChild *v15;
  CI::NodeWithChild *v16;
  CI::Node *v17;
  unsigned int v18;
  unsigned int v19;

  v4 = this;
  if (a2)
  {
    if (a3 && (*(unsigned int (**)(CI::Object *))(*(_QWORD *)this + 232))(this))
    {
      v7 = 0;
      v8 = v4;
      while (1)
      {
        v9 = v8;
        if (((*(uint64_t (**)(CI::Object *))(*(_QWORD *)v8 + 176))(v8) & 1) != 0)
          break;
        v8 = (CI::Object *)(*(uint64_t (**)(CI::Object *, _QWORD))(*(_QWORD *)v8 + 48))(v8, 0);
        v7 = v9;
        if (((*(uint64_t (**)(CI::Object *))(*(_QWORD *)v8 + 232))(v8) & 1) == 0)
          goto LABEL_9;
      }
      v9 = v7;
    }
    else
    {
      v9 = 0;
      v8 = v4;
    }
LABEL_9:
    if ((*(unsigned int (**)(CI::Object *))(*(_QWORD *)v8 + 16))(v8) == 47)
    {
      v10 = *((_DWORD *)v8 + 14);
      if (a2 == 1 && v10 == 1)
      {
        v8 = (CI::Object *)*((_QWORD *)v8 + 5);
        if (!v8)
        {
LABEL_23:
          if (v9)
          {
LABEL_24:
            (*(void (**)(CI::Object *, CI::Object *, _QWORD))(*(_QWORD *)v9 + 200))(v9, v8, 0);
            if (v8)
              CI::Object::unref(v8);
            if (v4)
              CI::Object::ref((uint64_t)v4);
            return v4;
          }
          return v8;
        }
LABEL_22:
        CI::Object::ref((uint64_t)v8);
        goto LABEL_23;
      }
      if (a2 == 10 && (v10 & 0xFFFFFFFE) == 0xA)
        goto LABEL_22;
      v15 = (CI::NodeWithChild *)operator new();
      v16 = v15;
      if (a2 == 10 && v10 == 1)
      {
        v17 = (CI::Node *)(*(uint64_t (**)(CI::Object *, _QWORD))(*(_QWORD *)v8 + 48))(v8, 0);
        CI::NodeWithChild::NodeWithChild(v16, v17);
        *((_QWORD *)v16 + 6) = off_1E2EBBD58;
        do
          v18 = __ldaxr(&dword_1ECF872F0[45]);
        while (__stlxr(v18 + 1, &dword_1ECF872F0[45]));
        *(_QWORD *)v16 = &off_1E2EB9020;
        *((_QWORD *)v16 + 6) = &unk_1E2EB91E0;
        *((_DWORD *)v16 + 14) = 11;
        *((_BYTE *)v16 + 60) = 0;
      }
      else
      {
        CI::NodeWithChild::NodeWithChild(v15, v8);
        *((_QWORD *)v16 + 6) = off_1E2EBBD58;
        do
          v19 = __ldaxr(&dword_1ECF872F0[45]);
        while (__stlxr(v19 + 1, &dword_1ECF872F0[45]));
        *(_QWORD *)v16 = &off_1E2EB9020;
        *((_QWORD *)v16 + 6) = &unk_1E2EB91E0;
        *((_DWORD *)v16 + 14) = a2;
        *((_BYTE *)v16 + 60) = a4;
      }
      v8 = v16;
      if (v9)
        goto LABEL_24;
    }
    else
    {
      v12 = (CI::NodeWithChild *)operator new();
      v13 = CI::NodeWithChild::NodeWithChild(v12, v8);
      *((_QWORD *)v13 + 6) = off_1E2EBBD58;
      do
        v14 = __ldaxr(&dword_1ECF872F0[45]);
      while (__stlxr(v14 + 1, &dword_1ECF872F0[45]));
      *(_QWORD *)v13 = &off_1E2EB9020;
      *((_QWORD *)v13 + 6) = &unk_1E2EB91E0;
      *((_DWORD *)v13 + 14) = a2;
      *((_BYTE *)v13 + 60) = a4;
      v8 = v13;
      if (v9)
        goto LABEL_24;
    }
    return v8;
  }
  if (this)
    return (CI::Object *)CI::Object::ref((uint64_t)this);
  return v4;
}

uint64_t CI::SwizzleNode::convert_to_kernel_node(CI::SwizzleNode *this, CI::Context *a2)
{
  void (***v3)(CI::ColorKernel *__hidden);
  void (***v4)(CI::ColorKernel *__hidden);
  uint64_t v5;
  CI::Vector *v6;
  CI::Object *v7;
  __n128 v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v14;

  v3 = CI::Kernel::builtin(*((_DWORD *)this + 14));
  if (v3)
  {
    v4 = v3;
    if (((unsigned int (*)(_QWORD))(*v3)[2])(v3) != 64)
    {
      if ((*(unsigned int (**)(CI::SwizzleNode *))(*(_QWORD *)this + 408))(this) == 56)
      {
LABEL_5:
        v6 = (CI::Vector *)operator new();
        v7 = v6;
        v8.n128_u32[0] = 0.25;
        v9 = 0.25;
        v10 = 0.25;
        v11 = 0.25;
LABEL_8:
        CI::Vector::Vector(v6, v8, v9, v10, v11);
        v12 = operator new();
        CI::SerialObjectPtrArray::SerialObjectPtrArray((CI::SerialObjectPtrArray *)v12, *((CI::Object **)this + 5), v7);
        CI::Object::unref(v7);
LABEL_9:
        v5 = operator new();
        (*(void (**)(CI::SwizzleNode *))(*(_QWORD *)this + 160))(this);
        CI::ColorKernelNode::ColorKernelNode(v5, v4, v12, 0, 0, 0);
        return v5;
      }
      if ((*(unsigned int (**)(CI::SwizzleNode *))(*(_QWORD *)this + 408))(this) != 57)
      {
        if ((*(unsigned int (**)(CI::SwizzleNode *))(*(_QWORD *)this + 408))(this) == 58)
          goto LABEL_5;
        if ((*(unsigned int (**)(CI::SwizzleNode *))(*(_QWORD *)this + 408))(this) != 59)
        {
          v12 = operator new();
          v14 = *((_QWORD *)this + 5);
          *(_QWORD *)v12 = 0xA00000001;
          *(_OWORD *)(v12 + 32) = 0u;
          *(_OWORD *)(v12 + 48) = 0u;
          *(_OWORD *)(v12 + 64) = 0u;
          *(_OWORD *)(v12 + 80) = 0u;
          *(_QWORD *)(v12 + 96) = 0;
          *(_DWORD *)(v12 + 8) = 1;
          *(_QWORD *)(v12 + 16) = 0;
          *(_QWORD *)(v12 + 24) = v14;
          if (v14)
            CI::Object::ref(v14);
          goto LABEL_9;
        }
      }
      v6 = (CI::Vector *)operator new();
      v7 = v6;
      v8.n128_u32[0] = 0.5;
      v9 = 0.5;
      v10 = 0.0;
      v11 = 0.0;
      goto LABEL_8;
    }
  }
  return 0;
}

uint64_t CI::SwizzleNode::is_rgb_invariant(CI::SwizzleNode *this, char a2)
{
  unsigned int v2;
  _BOOL4 v3;
  _BOOL4 v5;
  _BOOL4 v6;
  unsigned int v8;

  v2 = *((_DWORD *)this + 14);
  v3 = v2 == 0;
  v5 = v2 <= 0xB && ((1 << v2) & 0xC12) != 0 || v2 == 21;
  if (!v2)
    v5 = 1;
  v6 = v5;
  if ((a2 & 1) != 0)
    v3 = v6;
  v8 = v2 == 22 || v2 == 25 || v3;
  if ((a2 & 2) != 0)
    return v8;
  else
    return v3;
}

uint64_t CI::SwizzleNode::alpha_one(CI::SwizzleNode *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = 1;
  switch(*((_DWORD *)this + 14))
  {
    case 9:
      v1 = 0;
      goto LABEL_2;
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1F:
    case 0x20:
    case 0x23:
    case 0x25:
    case 0x26:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x32:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x51:
    case 0x52:
    case 0x53:
    case 0x55:
    case 0x56:
LABEL_2:
      result = v1;
      break;
    default:
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 264))(*((_QWORD *)this + 5));
      break;
  }
  return result;
}

uint64_t CI::SwizzleNode::output_is_rg(CI::SwizzleNode *this)
{
  return (*((unsigned int *)this + 14) < 0x27uLL) & (0x6803000000uLL >> *((_DWORD *)this + 14));
}

uint64_t CI::SwizzleNode::output_is_r(CI::SwizzleNode *this)
{
  return (*((unsigned int *)this + 14) < 0x20uLL) & (0x88C00000 >> *((_DWORD *)this + 14));
}

BOOL CI::SwizzleNode::output_is_luma(CI::SwizzleNode *this)
{
  int v1;

  v1 = *((_DWORD *)this + 14);
  return v1 == 21 || v1 == 26;
}

uint64_t CI::SwizzleNode::output_format(CI::SwizzleNode *this)
{
  uint64_t v2;
  uint64_t result;
  int is_float;
  int v5;
  unsigned int v6;

  v2 = (*(uint64_t (**)(CI::SwizzleNode *, _QWORD))(*(_QWORD *)this + 48))(this, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 312))(v2);
  if ((_DWORD)result)
  {
    is_float = CI::format_is_float(result);
    if ((*(unsigned int (**)(CI::SwizzleNode *))(*(_QWORD *)this + 272))(this))
    {
      if (is_float)
        return 2054;
      else
        return 262;
    }
    else
    {
      v5 = (*(uint64_t (**)(CI::SwizzleNode *))(*(_QWORD *)this + 280))(this);
      if (is_float)
        v6 = 2053;
      else
        v6 = 261;
      if (v5)
        return v6;
      else
        return 0;
    }
  }
  return result;
}

void CI::SwizzleNode::~SwizzleNode(CI::SwizzleNode *this)
{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBD58;
  do
    v1 = __ldaxr(&dword_1ECF872F0[45]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[45]));
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  unsigned int v1;

  *((_QWORD *)this + 6) = off_1E2EBBD58;
  do
    v1 = __ldaxr(&dword_1ECF872F0[45]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[45]));
  CI::NodeWithChild::~NodeWithChild(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::SwizzleNode::type(CI::SwizzleNode *this)
{
  return 47;
}

uint64_t CI::SwizzleNode::shape_for_graphviz(CI::SwizzleNode *this)
{
  if ((*(unsigned int (**)(CI::SwizzleNode *))(*(_QWORD *)this + 424))(this))
    return 2;
  else
    return 3;
}

uint64_t CI::SwizzleNode::color_for_graphviz(CI::SwizzleNode *this)
{
  if ((*(unsigned int (**)(CI::SwizzleNode *))(*(_QWORD *)this + 424))(this))
    return 4;
  else
    return 2;
}

uint64_t CI::SwizzleNode::add_args_to_hash(CI::SwizzleNode *this, CI::XXHashHelper *a2)
{
  int __src;

  __src = *((_DWORD *)this + 14);
  return XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
}

const char *CI::SwizzleNode::short_name(CI::SwizzleNode *this)
{
  return SwizzlerName(*((_DWORD *)this + 14));
}

uint64_t CI::SwizzleNode::may_be_extended_range(CI::SwizzleNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 256))(*((_QWORD *)this + 5));
}

uint64_t CI::SwizzleNode::output_depth(CI::SwizzleNode *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 304))(*((_QWORD *)this + 5));
}

uint64_t CI::SwizzleNode::code_complexity(CI::SwizzleNode *this)
{
  return 0;
}

uint64_t CI::SwizzleNode::add_to_kernel_hash(CI::SwizzleNode *this, CI::XXHashHelper *a2)
{
  char *v3;

  v3 = (char *)SwizzlerName(*((_DWORD *)this + 14));
  return CI::XXHashHelper::addstr((uint64_t)a2, v3);
}

uint64_t CI::SwizzleNode::swizzletype(CI::SwizzleNode *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t CI::SwizzleNode::used_for_output_format(CI::SwizzleNode *this)
{
  return *((unsigned __int8 *)this + 60);
}

BOOL CI::SwizzleNode::isSimple(CI::SwizzleNode *this)
{
  return (*((_DWORD *)this + 14) - 1) < 0x24;
}

uint64_t `non-virtual thunk to'CI::SwizzleNode::type(CI::SwizzleNode *this)
{
  return 47;
}

void `non-virtual thunk to'CI::SwizzleNode::~SwizzleNode(CI::SwizzleNode *this)
{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBD58;
  v1 = (CI::SwizzleNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[45]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[45]));
  CI::NodeWithChild::~NodeWithChild(v1);
}

{
  CI::NodeWithChild *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EBBD58;
  v1 = (CI::SwizzleNode *)((char *)this - 48);
  do
    v2 = __ldaxr(&dword_1ECF872F0[45]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[45]));
  CI::NodeWithChild::~NodeWithChild(v1);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::InstanceCounted<(CI::Type)47>::type()
{
  return 47;
}

_QWORD *CI::InstanceCounted<(CI::Type)47>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBD58;
  do
    v1 = __ldaxr(&dword_1ECF872F0[45]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[45]));
  return result;
}

void CI::InstanceCounted<(CI::Type)47>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBD58;
  do
    v1 = __ldaxr(&dword_1ECF872F0[45]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[45]));
  JUMPOUT(0x194025AACLL);
}

const char *SwizzlerName(unsigned int a1)
{
  if (a1 > 0x58)
    return "unknown-swizzle";
  else
    return off_1E2EC8420[a1];
}

CI::Node *CI::TextureNode::TextureNode(CI::Node *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  CI::Node *result;
  unsigned int v16;

  result = CI::Node::Node(a1);
  *((_QWORD *)result + 5) = off_1E2EBBD80;
  do
    v16 = __ldaxr(&dword_1ECF872F0[46]);
  while (__stlxr(v16 + 1, &dword_1ECF872F0[46]));
  *(_QWORD *)result = off_1E2EB9208;
  *((_QWORD *)result + 5) = &unk_1E2EB93D8;
  *((_QWORD *)result + 6) = a2;
  *((_QWORD *)result + 7) = a3;
  *((_QWORD *)result + 8) = a4;
  *((_DWORD *)result + 18) = a5;
  *((_DWORD *)result + 19) = a6;
  *((_DWORD *)result + 20) = a7;
  *((_DWORD *)result + 21) = a8;
  *((_BYTE *)result + 88) = 0;
  return result;
}

void CI::TextureNode::~TextureNode(CI::TextureNode *this)
{
  unsigned int v1;

  *((_QWORD *)this + 5) = off_1E2EBBD80;
  do
    v1 = __ldaxr(&dword_1ECF872F0[46]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[46]));
  CI::Node::~Node(this);
}

uint64_t CI::TextureNode::print_for_graph_core(uint64_t a1, FILE *a2)
{
  const char *v4;
  uint64_t result;
  const char *v6;
  int v7;
  const char *v8;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1))
    fprintf(a2, "GLTexture %d", *(_DWORD *)(a1 + 48));
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1))
  {
    fprintf(a2, "MTLTexture %p", *(const void **)(a1 + 48));
    pixelFormatForMetalTexture(*(void **)(a1 + 48));
    v4 = stringForMetalTextureFormat();
    fprintf(a2, " %s", v4);
  }
  if (*(_QWORD *)(a1 + 64))
    fprintf(a2, " content:%016llX", *(_QWORD *)(a1 + 64));
  result = fprintf(a2, " %dx%d", *(_DWORD *)(a1 + 72), *(_DWORD *)(a1 + 76));
  v6 = "alpha_one";
  switch(*(_DWORD *)(a1 + 80))
  {
    case 0:
      goto LABEL_13;
    case 1:
      goto LABEL_12;
    case 2:
      v6 = "alpha_unpremul";
      goto LABEL_12;
    case 4:
      v6 = "alpha_premul-clear-edges";
      goto LABEL_12;
    case 6:
      v6 = "alpha_unpremul-clear-edges";
      goto LABEL_12;
    default:
      v6 = "alpha_unknown";
LABEL_12:
      result = fprintf(a2, " %s", v6);
LABEL_13:
      v7 = *(_DWORD *)(a1 + 84);
      if (v7)
      {
        if (v7 == 1)
          v8 = "edge_clamp";
        else
          v8 = "edge_unknown";
        return fprintf(a2, " %s", v8);
      }
      return result;
  }
}

uint64_t CI::TextureNode::add_args_to_hash(CI::TextureNode *this, CI::XXHashHelper *a2, uint64_t a3)
{
  uint64_t __src;

  if (*((_QWORD *)this + 8))
  {
    __src = *((_QWORD *)this + 8);
  }
  else
  {
    XXH64_update((uint64_t)a2, (char *)this + 48, 0x10uLL);
    __src = a3;
  }
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  LODWORD(__src) = *((_DWORD *)this + 20);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((_DWORD *)this + 21);
  return XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
}

double CI::TextureNode::find_matching_roi(CI::TextureNode *this, const CGRect *a2)
{
  CGRect **v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGRect v13;
  CGRect v14;
  CGRect v15;

  v4 = (CGRect **)CI::Node::rois(this);
  x = a2->origin.x;
  y = a2->origin.y;
  width = a2->size.width;
  height = a2->size.height;
  v15.origin.x = (*(double (**)(CI::TextureNode *))(*(_QWORD *)this + 168))(this);
  v15.origin.y = v9;
  v15.size.width = v10;
  v15.size.height = v11;
  v13.origin.x = x;
  v13.origin.y = y;
  v13.size.width = width;
  v13.size.height = height;
  v14 = CGRectIntersection(v13, v15);
  return CI::SerialRectArray::smallestContainingRect(v4, v14);
}

void CI::TextureNode::add_roi(CI::TextureNode *this, unint64_t a2, unint64_t a3, CGRect a4, const CI::parentROI *a5)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  double x;
  double v13;
  double v14;
  double v15;
  CGRect v16;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  if (!CGRectIsEmpty(a4))
  {
    x = (*(double (**)(CI::TextureNode *))(*(_QWORD *)this + 168))(this);
    y = v13;
    width = v14;
    height = v15;
  }
  v16.origin.x = x;
  v16.origin.y = y;
  v16.size.width = width;
  v16.size.height = height;
  CI::Node::add_roi(this, a2, a3, v16, a5);
}

uint64_t CI::MetalTextureNode::format(CI::MetalTextureNode *this)
{
  void *v1;
  int Format;

  v1 = (void *)(*(uint64_t (**)(CI::MetalTextureNode *))(*(_QWORD *)this + 432))(this);
  Format = CIMetalTextureGetFormat(v1);
  return CIFormatFromCIMetalTextureFormat(Format, 0);
}

void CI::MetalTextureNode::graphviz_add_images(CI::MetalTextureNode *this, void *a2)
{
  uint64_t v4;
  __IOSurface *IOSurface;
  char *CGImage;
  int v7;
  size_t v8;
  size_t v9;
  int v10;
  CGBitmapInfo v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  void *v16;
  CGDataProvider *v17;
  CGColorSpace *v18;
  char *v19;
  _QWORD v20[6];

  if (CI_PRINT_TREE_dump_inputs()
    && (*(uint64_t (**)(CI::MetalTextureNode *))(*(_QWORD *)this + 432))(this))
  {
    v4 = (*(uint64_t (**)(CI::MetalTextureNode *))(*(_QWORD *)this + 432))(this);
    IOSurface = (__IOSurface *)CIMetalTextureGetIOSurface(v4);
    if (IOSurface)
    {
      CGImage = (char *)SurfaceCreateCGImage(IOSurface, 0, 1);
      CIGVNodeAddImage(a2, CGImage);
      CGImageRelease((CGImageRef)CGImage);
    }
    else
    {
      v7 = (*(uint64_t (**)(CI::MetalTextureNode *))(*(_QWORD *)this + 408))(this);
      v8 = (int)CI::format_bits_per_pixel(v7);
      v9 = (int)CI::format_bits_per_component(v7);
      v10 = (*(unsigned int (**)(CI::MetalTextureNode *))(*(_QWORD *)this + 416))(this) != 2
         && (*(uint64_t (**)(CI::MetalTextureNode *))(*(_QWORD *)this + 416))(this) != 6;
      v11 = CI::format_CGBitmapInfo(v7, v10);
      v12 = (void *)(*(uint64_t (**)(CI::MetalTextureNode *))(*(_QWORD *)this + 432))(this);
      v13 = objc_msgSend(v12, "width");
      v14 = objc_msgSend(v12, "height");
      v15 = CI::format_bytes_per_row(v7, v13);
      v16 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", v15 * v14);
      memset(v20, 0, 24);
      v20[3] = v13;
      v20[4] = v14;
      v20[5] = 1;
      objc_msgSend(v12, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", objc_msgSend(v16, "mutableBytes"), v15, v20, 0);
      v17 = CGDataProviderCreateWithCFData((CFDataRef)v16);
      v18 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
      v19 = (char *)CGImageCreate(v13, v14, v9, v8, v15, v18, v11, v17, 0, 0, kCGRenderingIntentDefault);
      if (v19)
        CIGVNodeAddImage(a2, v19);
      CGDataProviderRelease(v17);
      CGImageRelease((CGImageRef)v19);
      CGColorSpaceRelease(v18);
    }
  }
}

void CI::MetalTextureNode::~MetalTextureNode(CI::MetalTextureNode *this)
{
  CI::MetalTextureNode::~MetalTextureNode(this);
  JUMPOUT(0x194025AACLL);
}

{
  const void *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_1E2EBCCB8;
  *((_QWORD *)this + 5) = &unk_1E2EBCE88;
  v2 = (const void *)*((_QWORD *)this + 6);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 5) = off_1E2EBBD80;
  do
    v3 = __ldaxr(&dword_1ECF872F0[46]);
  while (__stlxr(v3 - 1, &dword_1ECF872F0[46]));
  CI::Node::~Node(this);
}

uint64_t CI::MetalTextureNode::texture_id(CI::MetalTextureNode *this)
{
  return 0;
}

uint64_t CI::TextureNode::texture_ref(CI::TextureNode *this)
{
  return *((_QWORD *)this + 6);
}

CFTypeRef CI::MetalTextureNode::set_texture(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v8;
  CFTypeRef result;

  v8 = (const void *)(*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
  if (v8)
    CFRelease(v8);
  a1[6] = a2;
  a1[7] = a3;
  a1[8] = a4;
  result = (CFTypeRef)(*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
  if (result)
    return CFRetain(result);
  return result;
}

void `non-virtual thunk to'CI::MetalTextureNode::~MetalTextureNode(CI::MetalTextureNode *this)
{
  CI::MetalTextureNode::~MetalTextureNode((CI::MetalTextureNode *)((char *)this - 40));
}

{
  CI::MetalTextureNode::~MetalTextureNode((CI::MetalTextureNode *)((char *)this - 40));
  JUMPOUT(0x194025AACLL);
}

void sub_19243E45C(_Unwind_Exception *a1)
{
  CI::Node *v1;
  unsigned int v3;

  *((_QWORD *)v1 + 5) = off_1E2EBBD80;
  do
    v3 = __ldaxr(&dword_1ECF872F0[46]);
  while (__stlxr(v3 - 1, &dword_1ECF872F0[46]));
  CI::Node::~Node(v1);
  _Unwind_Resume(a1);
}

uint64_t CI::InstanceCounted<(CI::Type)48>::type()
{
  return 48;
}

_QWORD *CI::InstanceCounted<(CI::Type)48>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBD80;
  do
    v1 = __ldaxr(&dword_1ECF872F0[46]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[46]));
  return result;
}

void CI::InstanceCounted<(CI::Type)48>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBD80;
  do
    v1 = __ldaxr(&dword_1ECF872F0[46]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[46]));
  JUMPOUT(0x194025AACLL);
}

CI::Node *CI::Node::Node(CI::Node *this)
{
  _QWORD *v2;
  unsigned int v3;
  unsigned int v4;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E2EBE690;
  v2 = (_QWORD *)operator new();
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  *((_QWORD *)this + 2) = v2;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  do
  {
    v3 = __ldaxr(&CI::gNodeCounter);
    v4 = v3 + 1;
  }
  while (__stlxr(v4, &CI::gNodeCounter));
  *((_DWORD *)this + 9) = v4;
  return this;
}

void CI::Node::~Node(CI::Node *this)
{
  uint64_t v1;
  void **v2;

  *(_QWORD *)this = off_1E2EBE690;
  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = (void **)*((_QWORD *)this + 2);
    std::vector<CI::SerialRectArray::roiData>::__destroy_vector::operator()[abi:nn180100](&v2);
    MEMORY[0x194025AAC](v1, 0x20C40960023A9);
  }
}

unint64_t CI::hash_dag_node_id(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v5;
  int64x2_t v6[5];
  uint64_t __src;

  if (result)
  {
    v5 = result;
    XXH64_reset(v6, 0);
    LODWORD(__src) = *(_DWORD *)(v5 + 36);
    XXH64_update((uint64_t)v6, (char *)&__src, 4uLL);
    __src = a2;
    XXH64_update((uint64_t)v6, (char *)&__src, 8uLL);
    if ((int)(-286331153 * ((*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) - **(_QWORD **)(v5 + 16)) >> 3)) >= 2)
      CI::XXHashHelper::addstr((uint64_t)v6, a3);
    return XXH64_digest((uint64_t)v6);
  }
  return result;
}

uint64_t CI::Node::rois_count(CI::Node *this)
{
  return -286331153 * ((*(_QWORD *)(*((_QWORD *)this + 2) + 8) - **((_QWORD **)this + 2)) >> 3);
}

uint64_t CI::hash_image_node_id(uint64_t this, const CI::Node *a2)
{
  uint64_t v2;

  if (this)
  {
    if ((int)(-286331153 * ((*(_QWORD *)(*(_QWORD *)(this + 16) + 8) - **(_QWORD **)(this + 16)) >> 3)) <= 1)
      v2 = 0;
    else
      v2 = (_QWORD)a2 << 32;
    return v2 | *(unsigned int *)(this + 36);
  }
  return this;
}

double CI::parentROI::roi(CI::parentROI *this)
{
  _QWORD *v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  double v7;
  void *__p;
  void *v10;
  uint64_t v11;
  _OWORD v12[2];

  v2 = *(_QWORD **)(*(_QWORD *)this + 16);
  v3 = *((_DWORD *)this + 2);
  __p = 0;
  v10 = 0;
  v11 = 0;
  v4 = *v2 + 120 * v3;
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_OWORD *)(v4 + 16);
  v12[0] = *(_OWORD *)v4;
  v12[1] = v6;
  CI::SerialRectArray::recurseSubdivide((double *)v12, v5, &__p);
  v7 = *((double *)__p + 4 * *((int *)this + 3));
  v10 = __p;
  operator delete(__p);
  return v7;
}

uint64_t CI::Node::rois(CI::Node *this)
{
  return *((_QWORD *)this + 2);
}

void CI::Node::clear_rois(CI::Node *this)
{
  _QWORD *v1;
  _QWORD *i;
  _QWORD *v3;

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  v3 = (_QWORD *)*v1;
  for (i = (_QWORD *)v1[1]; i != v3; std::__destroy_at[abi:nn180100]<CI::SerialRectArray::roiData,0>(i))
    i -= 15;
  v1[1] = v3;
}

double CI::Node::find_matching_roi(CGRect ***this, const CGRect *a2)
{
  return CI::SerialRectArray::smallestContainingRect(this[2], *a2);
}

void CI::Node::set_rois(CI::Node *this, const CI::SerialRectArray *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  if (v2 != (uint64_t *)a2)
    std::vector<CI::SerialRectArray::roiData>::__assign_with_size[abi:nn180100]<CI::SerialRectArray::roiData*,CI::SerialRectArray::roiData*>(v2, *(_QWORD *)a2, *((_QWORD *)a2 + 1), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
}

void CI::Node::roi(CGRect ***this)
{
  CI::SerialRectArray::unionRect(this[2]);
}

void CI::SerialRectArray::unionRect(CGRect **this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CGRect *i;

  v1 = *MEMORY[0x1E0C9D628];
  v2 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 16);
  v4 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 24);
  for (i = *this; i != this[1]; i = (CGRect *)((char *)i + 120))
    *(CGRect *)&v1 = CGRectUnion(*(CGRect *)&v1, *i);
}

double CI::Node::roi(CI::Node *this, int a2)
{
  return *(double *)(**((_QWORD **)this + 2) + 120 * a2);
}

void CI::Node::add_roi(CI::Node *this, unint64_t a2, unint64_t a3, CGRect a4, const CI::parentROI *a5)
{
  double width;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  double v14;
  double v15;
  BOOL IsEmpty;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  CGFloat v28;
  CGFloat v29;
  double v30;
  double v31;
  _QWORD *v33;
  uint64_t v34;
  double v35;
  double height;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  CGFloat v41;
  CGFloat v42;
  double v43;
  double v44;
  double v46;
  uint64_t v47;
  unint64_t v48;
  CGFloat *v49;
  CGFloat v50;
  CGFloat v51;
  double v52;
  double v53;
  BOOL v54;
  double v56;
  double v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  double v63;
  int v64;
  int v65;
  int *v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int *v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double x;
  double y;
  double rect;
  void *__p;
  void *__dst;
  _OWORD *v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;

  y = a4.origin.y;
  rect = a4.size.height;
  width = a4.size.width;
  x = a4.origin.x;
  __p = 0;
  __dst = 0;
  v81 = 0;
  v10 = std::__allocate_at_least[abi:nn180100]<std::allocator<CI::parentROI>>((uint64_t)&v81, 1uLL);
  v13 = *((_OWORD *)a5 + 1);
  v12 = *((_OWORD *)a5 + 2);
  *v10 = *(_OWORD *)a5;
  v10[1] = v13;
  v10[2] = v12;
  __p = v10;
  v81 = &v10[3 * v11];
  __dst = v10 + 3;
  *(double *)&v12 = x;
  *(double *)&v13 = y;
  v14 = width;
  v15 = rect;
  IsEmpty = CGRectIsEmpty(*(CGRect *)((char *)&v13 - 8));
  v17 = (uint64_t *)*((_QWORD *)this + 2);
  v18 = *v17;
  v19 = v17[1];
  v20 = -286331153 * ((unint64_t)(v19 - *v17) >> 3);
  if (!IsEmpty)
  {
    if (v20 < 1)
      goto LABEL_85;
    v23 = 0;
    v24 = (double)a3;
    while (1)
    {
      v25 = -286331153 * ((unint64_t)(v19 - v18) >> 3);
      if (v23 < v25)
      {
        v26 = v23;
        v27 = 120 * v23 + 40;
        do
        {
          v28 = *(double *)(v18 + v27 - 40);
          v29 = *(double *)(v18 + v27 - 32);
          v30 = *(double *)(v18 + v27 - 24);
          v31 = *(double *)(v18 + v27 - 16);
          v82.origin.x = v28;
          v82.origin.y = v29;
          v82.size.width = v30;
          v82.size.height = v31;
          if (!CGRectIsEmpty(v82))
          {
            v83.origin.x = v28;
            v83.origin.y = v29;
            v83.size.width = v30;
            v83.size.height = v31;
            v97.origin.x = x;
            v97.origin.y = y;
            v97.size.width = width;
            v97.size.height = rect;
            v84 = CGRectUnion(v83, v97);
            if (v84.size.width <= v24 && v84.size.height <= v24)
            {
              v33 = (_QWORD *)(**((_QWORD **)this + 2) + v27);
              v34 = *(v33 - 1);
              if (*v33 != v34 && __dst != __p)
              {
                v35 = v84.size.width;
                height = v84.size.height;
                if (CI::parentROI::operator==(v34, (uint64_t)__p) && v35 * height < (width * rect + v30 * v31) * 1.1)
                {
                  std::vector<CI::parentROI>::__insert_with_size[abi:nn180100]<std::__wrap_iter<CI::parentROI const*>,std::__wrap_iter<CI::parentROI const*>>((uint64_t)&__p, (uint64_t)__dst, *(char **)(**((_QWORD **)this + 2) + v27 - 8), *(char **)(**((_QWORD **)this + 2) + v27), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(**((_QWORD **)this + 2) + v27)- *(_QWORD *)(**((_QWORD **)this + 2) + v27 - 8)) >> 4));
                  v85.origin.x = x;
                  v85.origin.y = y;
                  v85.size.width = width;
                  v85.size.height = rect;
                  v98.origin.x = v28;
                  v98.origin.y = v29;
                  v98.size.width = v30;
                  v98.size.height = v31;
                  v86 = CGRectUnion(v85, v98);
                  x = v86.origin.x;
                  y = v86.origin.y;
                  width = v86.size.width;
                  rect = v86.size.height;
                  CI::SerialRectArray::remove(*((CI::SerialRectArray **)this + 2), v26);
                  v23 = 0;
                  v17 = (uint64_t *)*((_QWORD *)this + 2);
                  v18 = *v17;
                  v19 = v17[1];
                  v25 = -286331153 * ((unint64_t)(v19 - *v17) >> 3);
                  goto LABEL_23;
                }
              }
            }
          }
          ++v26;
          v17 = (uint64_t *)*((_QWORD *)this + 2);
          v18 = *v17;
          v19 = v17[1];
          v25 = -286331153 * ((v19 - *v17) >> 3);
          v27 += 120;
        }
        while (v26 < v25);
        v23 = v26;
      }
LABEL_23:
      if (v23 >= v25)
      {
        if (v25 < 1)
          goto LABEL_85;
        v37 = 0;
        do
        {
          v38 = -286331153 * ((unint64_t)(v19 - v18) >> 3);
          if (v37 >= v38)
            continue;
          v39 = v37;
          v40 = 120 * v37;
          while (1)
          {
            v41 = *(double *)(v18 + v40);
            v42 = *(double *)(v18 + v40 + 8);
            v43 = *(double *)(v18 + v40 + 16);
            v44 = *(double *)(v18 + v40 + 24);
            v87.origin.x = v41;
            v87.origin.y = v42;
            v87.size.width = v43;
            v87.size.height = v44;
            if (!CGRectIsEmpty(v87))
            {
              v88.origin.x = v41;
              v88.origin.y = v42;
              v88.size.width = v43;
              v88.size.height = v44;
              v99.origin.x = x;
              v99.origin.y = y;
              v99.size.width = width;
              v99.size.height = rect;
              v89 = CGRectUnion(v88, v99);
              if (v89.size.width <= v24 && v89.size.height <= v24)
              {
                v46 = v43 * v44;
                if (v43 * v44 >= width * rect)
                  v46 = width * rect;
                if (v89.size.width * v89.size.height < v46 * 1.1)
                  break;
              }
            }
            ++v39;
            v17 = (uint64_t *)*((_QWORD *)this + 2);
            v18 = *v17;
            v19 = v17[1];
            v38 = -286331153 * ((v19 - *v17) >> 3);
            v40 += 120;
            if (v39 >= v38)
            {
              v37 = v39;
              goto LABEL_42;
            }
          }
          std::vector<CI::parentROI>::__insert_with_size[abi:nn180100]<std::__wrap_iter<CI::parentROI const*>,std::__wrap_iter<CI::parentROI const*>>((uint64_t)&__p, (uint64_t)__dst, *(char **)(**((_QWORD **)this + 2) + v40 + 32), *(char **)(**((_QWORD **)this + 2) + v40 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(**((_QWORD **)this + 2) + v40 + 40) - *(_QWORD *)(**((_QWORD **)this + 2) + v40 + 32)) >> 4));
          v90.origin.x = x;
          v90.origin.y = y;
          v90.size.width = width;
          v90.size.height = rect;
          v100.origin.x = v41;
          v100.origin.y = v42;
          v100.size.width = v43;
          v100.size.height = v44;
          v91 = CGRectUnion(v90, v100);
          x = v91.origin.x;
          y = v91.origin.y;
          width = v91.size.width;
          rect = v91.size.height;
          CI::SerialRectArray::remove(*((CI::SerialRectArray **)this + 2), v39);
          v37 = 0;
          v17 = (uint64_t *)*((_QWORD *)this + 2);
          v18 = *v17;
          v19 = v17[1];
          v38 = -286331153 * ((unint64_t)(v19 - *v17) >> 3);
LABEL_42:
          ;
        }
        while (v37 < v38);
        if (v38 < 1)
          goto LABEL_85;
        LODWORD(v47) = 0;
LABEL_45:
        LODWORD(v48) = -286331153 * ((unint64_t)(v19 - v18) >> 3);
        if ((int)v47 >= (int)v48)
          goto LABEL_84;
        v75 = width * rect;
        v47 = (int)v47;
        while (1)
        {
          v49 = (CGFloat *)(v18 + 120 * v47);
          v50 = *v49;
          v51 = v49[1];
          v52 = v49[2];
          v53 = v49[3];
          v92.origin.x = *v49;
          v92.origin.y = v51;
          v92.size.width = v52;
          v92.size.height = v53;
          if (!CGRectIsEmpty(v92))
          {
            v93.origin.x = v50;
            v93.origin.y = v51;
            v93.size.width = v52;
            v93.size.height = v53;
            v101.origin.x = x;
            v101.origin.y = y;
            v101.size.width = width;
            v101.size.height = rect;
            v94 = CGRectUnion(v93, v101);
            v54 = v94.size.width <= v24 && v94.size.height <= v24;
            if (v54 && a2 != 0)
            {
              v56 = v94.size.width;
              v57 = v94.size.height;
              if ((*(unsigned int (**)(CI::Node *, CGPoint, __n128))(*(_QWORD *)this + 312))(this, v94.origin, *(__n128 *)&v94.origin.y))
              {
                v58 = __p;
                if (__p == __dst)
                {
LABEL_66:
                  v63 = width * rect;
                  if (v75 >= v52 * v53)
                    v63 = v52 * v53;
                  v74 = v63;
                  v64 = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)this + 312))(this);
                  v65 = CI::format_bytes_per_pixel(v64);
                  v66 = (int *)__p;
                  if (__p == __dst)
                  {
                    v67 = 0;
                  }
                  else
                  {
                    v67 = 0;
                    do
                    {
                      if (v67 <= *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v66 + 16) + 120 * v66[2] + 88))
                        v67 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v66 + 16) + 120 * v66[2] + 88);
                      v66 += 12;
                    }
                    while (v66 != __dst);
                  }
                  v68 = **((_QWORD **)this + 2) + 120 * v47;
                  v69 = *(char **)(v68 + 32);
                  v70 = *(char **)(v68 + 40);
                  v71 = (int *)v69;
                  if (v69 != v70)
                  {
                    do
                    {
                      if (v67 <= *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v71 + 16) + 120 * v71[2] + 88))
                        v67 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v71 + 16) + 120 * v71[2] + 88);
                      v71 += 12;
                    }
                    while (v71 != (int *)v70);
                  }
                  v72 = v56 * v57;
                  v73 = width * rect;
                  if (v75 < v52 * v53)
                    v73 = v52 * v53;
                  if (v72 < v73 * 1.1 && (v72 - v74) * (double)v65 + (double)v67 < (double)a2)
                  {
                    std::vector<CI::parentROI>::__insert_with_size[abi:nn180100]<std::__wrap_iter<CI::parentROI const*>,std::__wrap_iter<CI::parentROI const*>>((uint64_t)&__p, (uint64_t)__dst, v69, v70, 0xAAAAAAAAAAAAAAABLL * ((v70 - v69) >> 4));
                    v95.origin.x = x;
                    v95.origin.y = y;
                    v95.size.width = width;
                    v95.size.height = rect;
                    v102.origin.x = v50;
                    v102.origin.y = v51;
                    v102.size.width = v52;
                    v102.size.height = v53;
                    v96 = CGRectUnion(v95, v102);
                    x = v96.origin.x;
                    y = v96.origin.y;
                    width = v96.size.width;
                    rect = v96.size.height;
                    CI::SerialRectArray::remove(*((CI::SerialRectArray **)this + 2), v47);
                    LODWORD(v47) = 0;
                    v17 = (uint64_t *)*((_QWORD *)this + 2);
                    v18 = *v17;
                    v19 = v17[1];
                    LODWORD(v48) = -286331153 * ((unint64_t)(v19 - *v17) >> 3);
LABEL_84:
                    if ((int)v47 >= (int)v48)
                    {
LABEL_85:
                      CI::SerialRectArray::append(v17, (uint64_t)&__p, x, y, width, rect);
                      goto LABEL_86;
                    }
                    goto LABEL_45;
                  }
                }
                else
                {
                  v59 = **((_QWORD **)this + 2) + 120 * v47;
                  v60 = *(_QWORD **)(v59 + 32);
                  v61 = *(_QWORD **)(v59 + 40);
                  while (v60 == v61)
                  {
LABEL_65:
                    v58 += 6;
                    if (v58 == __dst)
                      goto LABEL_66;
                  }
                  v62 = v60;
                  while (*v58 != *v62)
                  {
                    v62 += 6;
                    if (v62 == v61)
                      goto LABEL_65;
                  }
                }
              }
            }
          }
          ++v47;
          v17 = (uint64_t *)*((_QWORD *)this + 2);
          v18 = *v17;
          v19 = v17[1];
          v48 = 0xEEEEEEEEEEEEEEEFLL * ((v19 - *v17) >> 3);
          if (v47 >= (int)v48)
            goto LABEL_84;
        }
      }
    }
  }
  if (v20 < 1)
    goto LABEL_85;
  v21 = 0;
  v22 = 0;
  while (!CGRectIsEmpty(*(CGRect *)(v18 + v21)))
  {
    ++v22;
    v17 = (uint64_t *)*((_QWORD *)this + 2);
    v18 = *v17;
    v21 += 120;
    if (v22 >= (int)(-286331153 * ((unint64_t)(v17[1] - *v17) >> 3)))
      goto LABEL_85;
  }
  std::vector<CI::parentROI>::__insert_with_size[abi:nn180100]<std::__wrap_iter<CI::parentROI const*>,std::__wrap_iter<CI::parentROI const*>>((uint64_t)&__p, (uint64_t)__dst, *(char **)(**((_QWORD **)this + 2) + v21 + 32), *(char **)(**((_QWORD **)this + 2) + v21 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(**((_QWORD **)this + 2) + v21 + 40) - *(_QWORD *)(**((_QWORD **)this + 2) + v21 + 32)) >> 4));
  CI::SerialRectArray::replace(*((_QWORD **)this + 2), (uint64_t)&__p, v22, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
LABEL_86:
  if (__p)
  {
    __dst = __p;
    operator delete(__p);
  }
}

void CI::SerialRectArray::remove(CI::SerialRectArray *this, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;

  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<CI::SerialRectArray::roiData *,CI::SerialRectArray::roiData *,CI::SerialRectArray::roiData *>((uint64_t)&v6, *(_QWORD *)this + 120 * a2 + 120, *((_QWORD *)this + 1), (_OWORD *)(*(_QWORD *)this + 120 * a2));
  v4 = v3;
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (v5 != v3)
  {
    do
    {
      v5 -= 15;
      std::__destroy_at[abi:nn180100]<CI::SerialRectArray::roiData,0>(v5);
    }
    while (v5 != v4);
  }
  *((_QWORD *)this + 1) = v4;
}

void CI::SerialRectArray::append(uint64_t *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  __int128 v8;
  CGFloat width;
  CGFloat height;
  void *v11[2];
  void *v12[2];
  __int128 v13;
  int v14;
  void *__p[2];
  __int128 v16;
  CGRect v17;

  v13 = 0u;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = CGRectStandardize(*(CGRect *)&a3);
  *(CGFloat *)&v8 = v17.origin.x;
  *((_QWORD *)&v8 + 1) = *(_QWORD *)&v17.origin.y;
  width = v17.size.width;
  height = v17.size.height;
  v14 = 1;
  if (v11 != (void **)a2)
    std::vector<CI::parentROI>::__assign_with_size[abi:nn180100]<CI::parentROI*,CI::parentROI*>((char *)v11, *(char **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
  std::vector<CI::SerialRectArray::roiData>::push_back[abi:nn180100](a1, &v8);
  if (__p[1])
  {
    *(void **)&v16 = __p[1];
    operator delete(__p[1]);
  }
  if (v12[1])
  {
    *(void **)&v13 = v12[1];
    operator delete(v12[1]);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
}

void CI::Node::remove_parentROI(CI::SerialRectArray **a1, const CI::parentROI *a2, uint64_t a3, uint64_t a4, dispatch_object_t object)
{
  NSObject *v10;
  int v11;
  unsigned int v12;
  _BOOL4 v13;
  uint64_t (***intermediate_for_node)(_QWORD);
  uint64_t (***v15)(_QWORD);
  unsigned int v16;
  __IOSurface *v17;
  __IOSurface *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CI::SerialRectArray *v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  signed int v27;
  uint64_t **v28;
  size_t PlaneCount;
  _BOOL4 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[6];
  int v35;
  _QWORD v36[5];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  dispatch_object_t v41;
  int v42;
  char v43[8];
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD block[6];

  dispatch_retain(object);
  v10 = *(NSObject **)(a4 + 96);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN2CI4Node16remove_parentROIERKNS_9parentROIERKNS_6roiKeyEPNS_14TextureManagerEPv_block_invoke;
  block[3] = &__block_descriptor_tmp_28;
  block[4] = object;
  dispatch_async(v10, block);
  v31 = (uint64_t *)a3;
  v11 = *(_DWORD *)(a3 + 8);
  CI::SerialRectArray::removeTile(a1[2], v11, a2);
  v12 = (*((uint64_t (**)(CI::SerialRectArray **))*a1 + 2))(a1);
  v13 = (CI::is_image_type(v12) & 1) != 0
     || *(_QWORD *)(*(_QWORD *)a1[2] + 120 * v11 + 40) == *(_QWORD *)(*(_QWORD *)a1[2] + 120 * v11 + 32);
  v30 = v13;
  intermediate_for_node = (uint64_t (***)(_QWORD))CI::TextureManager::get_intermediate_for_node(a4, (uint64_t)v31);
  if (intermediate_for_node
    && (v15 = intermediate_for_node, (**intermediate_for_node)(intermediate_for_node))
    && (v16 = (*((uint64_t (**)(CI::SerialRectArray **))*a1 + 2))(a1), CI::is_image_type(v16))
    && (v17 = (__IOSurface *)(**v15)(v15), IOSurfaceGetPlaneCount(v17) >= 2))
  {
    v18 = (__IOSurface *)(**v15)(v15);
    PlaneCount = IOSurfaceGetPlaneCount(v18);
    if (!PlaneCount)
      return;
  }
  else
  {
    PlaneCount = 1;
  }
  v19 = 0;
  v33 = a4;
  do
  {
    v32 = v19;
    v20 = CI::TextureManager::release_intermediate_for_node(a4, v31);
    if (v30)
    {
      v21 = v20;
      v22 = *a1;
      if (v20)
      {
        v23 = (*((uint64_t (**)(CI::SerialRectArray **))v22 + 2))(a1);
        v25 = *(NSObject **)(v33 + 88);
        v24 = *(NSObject **)(v33 + 96);
        v34[0] = MEMORY[0x1E0C809B0];
        v34[1] = 0x40000000;
        v34[2] = ___ZN2CI4Node16remove_parentROIERKNS_9parentROIERKNS_6roiKeyEPNS_14TextureManagerEPv_block_invoke_3;
        v34[3] = &__block_descriptor_tmp_3_5;
        v35 = v23;
        v34[4] = v33;
        v34[5] = v21;
        dispatch_group_async(v25, v24, v34);
      }
      else if ((*((int (**)(CI::SerialRectArray **))v22 + 5))(a1) >= 1)
      {
        v26 = 0;
        do
        {
          if (*(int *)(*(_QWORD *)a1[2] + 120 * v11 + 80) >= 1)
          {
            v27 = 0;
            do
            {
              *(_QWORD *)&v45 = a1;
              *((_QWORD *)&v45 + 1) = __PAIR64__(v27, v11);
              v46 = v26 | 0xFFFFFFFF00000000;
              *(_QWORD *)&v47 = 0;
              DWORD2(v47) = 0;
              v28 = *(uint64_t ***)((*((uint64_t (**)(CI::SerialRectArray **, uint64_t))*a1 + 6))(a1, v26) + 16);
              v36[0] = MEMORY[0x1E0C809B0];
              v36[1] = 0x40000000;
              v36[2] = ___ZN2CI4Node16remove_parentROIERKNS_9parentROIERKNS_6roiKeyEPNS_14TextureManagerEPv_block_invoke_2;
              v36[3] = &__block_descriptor_tmp_2_1;
              v38 = v46;
              v39 = v47;
              v37 = v45;
              v42 = v26;
              v36[4] = a1;
              v40 = v33;
              v41 = object;
              CI::SerialRectArray::findParentROI(v28, (uint64_t)&v45, (uint64_t)v36, (uint64_t)v43);
              std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)v43, v44);
              ++v27;
            }
            while (v27 < *(_DWORD *)(*(_QWORD *)a1[2] + 120 * v11 + 80));
          }
          v26 = (v26 + 1);
        }
        while ((int)v26 < (*((int (**)(CI::SerialRectArray **))*a1 + 5))(a1));
      }
    }
    v19 = v32 + 1;
    a4 = v33;
  }
  while (v32 + 1 != PlaneCount);
}

void ___ZN2CI4Node16remove_parentROIERKNS_9parentROIERKNS_6roiKeyEPNS_14TextureManagerEPv_block_invoke(uint64_t a1)
{
  dispatch_group_wait(*(dispatch_group_t *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
}

void CI::SerialRectArray::removeTile(CI::SerialRectArray *this, int a2, const CI::parentROI *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char **v14;
  unint64_t v15;
  _OWORD *v16;
  void **v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v3 = *(_QWORD *)this + 120 * a2;
  v5 = *(_QWORD *)(v3 + 32);
  v3 += 32;
  v4 = v5;
  v7 = *(_QWORD *)(v3 + 8);
  v6 = (_QWORD *)(v3 + 8);
  if (v4 != v7)
  {
    v11 = -v4;
    while (!CI::parentROI::operator==(v4, (uint64_t)a3))
    {
      v4 += 48;
      v11 -= 48;
      if (v4 == *v6)
        return;
    }
    v12 = *(_QWORD *)this + 120 * a2;
    v15 = *(_QWORD *)(v12 + 72);
    v14 = (char **)(v12 + 72);
    v13 = v15;
    v17 = (void **)(v14 - 1);
    v16 = *(v14 - 1);
    if ((unint64_t)v16 >= v15)
    {
      v21 = (void **)(v14 - 2);
      v22 = (uint64_t)*(v14 - 2);
      v23 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v16 - v22) >> 4);
      v24 = v23 + 1;
      if (v23 + 1 > 0x555555555555555)
        abort();
      v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v22) >> 4);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x2AAAAAAAAAAAAAALL)
        v26 = 0x555555555555555;
      else
        v26 = v24;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::parentROI>>((uint64_t)v14, v26);
      else
        v27 = 0;
      v28 = &v27[48 * v23];
      v29 = &v27[48 * v26];
      v30 = *(_OWORD *)v4;
      v31 = *(_OWORD *)(v4 + 32);
      *((_OWORD *)v28 + 1) = *(_OWORD *)(v4 + 16);
      *((_OWORD *)v28 + 2) = v31;
      *(_OWORD *)v28 = v30;
      v20 = v28 + 48;
      v32 = (char *)*v17;
      v33 = (char *)*v21;
      if (*v17 != *v21)
      {
        do
        {
          v34 = *((_OWORD *)v32 - 3);
          v35 = *((_OWORD *)v32 - 1);
          *((_OWORD *)v28 - 2) = *((_OWORD *)v32 - 2);
          *((_OWORD *)v28 - 1) = v35;
          *((_OWORD *)v28 - 3) = v34;
          v28 -= 48;
          v32 -= 48;
        }
        while (v32 != v33);
        v32 = (char *)*v21;
      }
      *v21 = v28;
      *v17 = v20;
      *v14 = v29;
      if (v32)
        operator delete(v32);
    }
    else
    {
      v18 = *(_OWORD *)v4;
      v19 = *(_OWORD *)(v4 + 32);
      v16[1] = *(_OWORD *)(v4 + 16);
      v16[2] = v19;
      *v16 = v18;
      v20 = v16 + 3;
    }
    *v17 = v20;
    v36 = *v6 - (48 - v11);
    if (*v6 != 48 - v11)
      memmove((void *)-v11, (const void *)(48 - v11), *v6 - (48 - v11));
    *v6 = v36 - v11;
  }
}

uint64_t ___ZN2CI4Node16remove_parentROIERKNS_9parentROIERKNS_6roiKeyEPNS_14TextureManagerEPv_block_invoke_2(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  __int128 v6;
  int v7;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 40);
  v12 = v6;
  v13 = *(_OWORD *)(a1 + 72);
  DWORD1(v12) = *(_DWORD *)(a2 + 20);
  v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, *(unsigned int *)(a1 + 104));
  v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, *(unsigned int *)(a1 + 104));
  v10 = a3;
  return CI::Node::remove_parentROI(v7, (int)&v11, (int)&v9, *(_QWORD *)(a1 + 88), *(dispatch_object_t *)(a1 + 96));
}

void ___ZN2CI4Node16remove_parentROIERKNS_9parentROIERKNS_6roiKeyEPNS_14TextureManagerEPv_block_invoke_3(uint64_t a1)
{
  CI::TextureManager::complete_intermediate(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

CI::CGRectArray *CI::Node::regions_of_child@<X0>(CI::Node *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, uint64_t a3@<X1>, CI::CGRectArray *a4@<X8>)
{
  double height;
  double width;
  double y;
  double x;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  double *v27;
  int v28;
  int v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  CGFloat v37;
  double v38;
  double v39;
  double v40;
  _BOOL8 IsInfinite;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  const CGRect *v46;
  CGRect *v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;

  if ((a3 & 0x80000000) != 0)
    goto LABEL_40;
  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  if (CGRectIsEmpty(a2))
    goto LABEL_40;
  memset(&v54, 0, sizeof(v54));
  v11 = (*(double (**)(CI::Node *, uint64_t, double, double, double, double))(*(_QWORD *)this + 80))(this, a3, x, y, width, height);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = (_BYTE *)(*(uint64_t (**)(CI::Node *, uint64_t))(*(_QWORD *)this + 48))(this, a3);
  v19 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v18 + 352))(v18);
  if (v19 * v20)
  {
    v21 = v19;
    v22 = v20;
    v55.origin.x = v11;
    v55.origin.y = v13;
    v55.size.width = v15;
    v55.size.height = v17;
    if (CGRectIsNull(v55))
    {
      v23 = 0;
      v24 = 0;
      v25 = 0x7FFFFFFF;
LABEL_6:
      if (v25 != 0x7FFFFFFF || v23)
      {
        v26 = 0x7FFFFFFF;
      }
      else
      {
        v26 = 0x7FFFFFFF;
        if (!v24)
        {
          v27 = (double *)MEMORY[0x1E0C9D628];
LABEL_29:
          v11 = *v27;
          v13 = v27[1];
          v15 = v27[2];
          v17 = v27[3];
          goto LABEL_32;
        }
      }
      goto LABEL_31;
    }
    v56.origin.x = v11;
    v56.origin.y = v13;
    v56.size.width = v15;
    v56.size.height = v17;
    if (CGRectIsInfinite(v56))
    {
      v24 = 0xFFFFFFFFLL;
      v23 = 0xFFFFFFFFLL;
      v25 = -2147483647;
      v26 = -2147483647;
    }
    else
    {
      v57.origin.x = v11;
      v57.origin.y = v13;
      v57.size.width = v15;
      v57.size.height = v17;
      v58 = CGRectInset(v57, 0.000001, 0.000001);
      v59 = CGRectIntegral(v58);
      v26 = (int)v59.origin.x;
      v25 = (int)v59.origin.y;
      v23 = (unint64_t)v59.size.width;
      v24 = (unint64_t)v59.size.height;
    }
    if (v26 == -2147483647 && v25 == -2147483647 && v23 == 0xFFFFFFFF)
    {
      v25 = -2147483647;
      v23 = 0xFFFFFFFFLL;
      if (!v24 || v24 == 0xFFFFFFFF)
        goto LABEL_25;
    }
    else if (!v23 || !v24)
    {
LABEL_22:
      if (v26 != -2147483647)
      {
        if (v26 != 0x7FFFFFFF)
          goto LABEL_31;
        goto LABEL_6;
      }
LABEL_25:
      v26 = -2147483647;
      if (v25 == -2147483647 && v23 == 0xFFFFFFFF && v24 == 0xFFFFFFFF)
      {
        v27 = (double *)MEMORY[0x1E0C9D5E0];
        goto LABEL_29;
      }
LABEL_31:
      v11 = (double)v26;
      v13 = (double)v25;
      v15 = (double)v23;
      v17 = (double)v24;
      goto LABEL_32;
    }
    v28 = v21 + v26 + v23 - 1;
    v29 = v22 + v24 + v25 - 1;
    v26 = v26 / v21 * v21;
    v25 = v25 / v22 * v22;
    v23 = (int)(v28 - v26 - v28 % v21);
    v24 = (int)(v29 - v25 - v29 % v22);
    goto LABEL_22;
  }
LABEL_32:
  v30 = (*(double (**)(_BYTE *))(*(_QWORD *)v18 + 160))(v18);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v37 = (*(double (**)(_BYTE *))(*(_QWORD *)v18 + 168))(v18);
  v51 = v38;
  v52 = v37;
  v49 = v40;
  v50 = v39;
  if ((*(int (**)(_BYTE *))(*(_QWORD *)v18 + 16))(v18) >= 41
    && (*(int (**)(_BYTE *))(*(_QWORD *)v18 + 16))(v18) <= 42)
  {
    v60.origin.x = v30;
    v60.origin.y = v32;
    v60.size.width = v34;
    v60.size.height = v36;
    if (!CGRectIsInfinite(v60) && !v18[139])
    {
      v54.origin.x = v30;
      v54.origin.y = v32;
      v17 = v36;
      v15 = v34;
      v13 = v32;
      v11 = v30;
      v54.size.width = v34;
      v54.size.height = v36;
    }
  }
  v61.origin.x = v30;
  v61.origin.y = v32;
  v61.size.width = v34;
  v61.size.height = v36;
  if (CGRectIsInfinite(v61)
    && (v62.origin.y = v51,
        v62.origin.x = v52,
        v62.size.height = v49,
        v62.size.width = v50,
        !(IsInfinite = CGRectIsInfinite(v62))))
  {
    v67.origin.x = v11;
    v67.origin.y = v13;
    v67.size.width = v15;
    v67.size.height = v17;
    v72.origin.y = v51;
    v72.origin.x = v52;
    v72.size.height = v49;
    v72.size.width = v50;
    CI::ClampNode::adjust_roi_for_clamp_rect((CI::ClampNode *)IsInfinite, v67, v72);
    v53 = CGRectIntegral(v68);
    v48 = &v53;
  }
  else
  {
    v63.origin.x = v30;
    v63.origin.y = v32;
    v63.size.width = v34;
    v63.size.height = v36;
    v71 = CGRectInset(v63, -1.0, -1.0);
    v64.origin.x = v11;
    v64.origin.y = v13;
    v64.size.width = v15;
    v64.size.height = v17;
    v65 = CGRectIntersection(v64, v71);
    v42 = v65.origin.x;
    v43 = v65.origin.y;
    v44 = v65.size.width;
    v45 = v65.size.height;
    if (CGRectIsEmpty(v65))
    {
LABEL_40:
      v46 = (const CGRect *)MEMORY[0x1E0C9D628];
      return CI::CGRectArray::CGRectArray(a4, v46);
    }
    v66.origin.x = v42;
    v66.origin.y = v43;
    v66.size.width = v44;
    v66.size.height = v45;
    if (CGRectIsInfinite(v66))
    {
      v46 = (const CGRect *)MEMORY[0x1E0C9D5E0];
      return CI::CGRectArray::CGRectArray(a4, v46);
    }
    v69.origin.x = v42;
    v69.origin.y = v43;
    v69.size.width = v44;
    v69.size.height = v45;
    v70 = CGRectInset(v69, 0.001, 0.001);
    v54 = CGRectIntegral(v70);
    v48 = &v54;
  }
  return CI::CGRectArray::CGRectArray(a4, v48);
}

uint64_t CI::Node::unique_child_count(CI::Node *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)this + 40))(this);
  v3 = v2;
  if (v2 >= 2)
  {
    v4 = 0;
    v8 = 0;
    v9 = 0;
    v7 = (uint64_t *)&v8;
    do
    {
      v6 = (*(uint64_t (**)(CI::Node *, uint64_t))(*(_QWORD *)this + 48))(this, v4);
      std::__tree<char const*>::__emplace_unique_key_args<char const*,char const* const&>(&v7, (unint64_t *)&v6, &v6);
      v4 = (v4 + 1);
    }
    while ((_DWORD)v3 != (_DWORD)v4);
    v3 = v9;
    std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&v7, v8);
  }
  return v3;
}

CI::ProgramNode *CI::Node::program_graph(CI::Node *this, CI::Context *a2, CI::NodeToNodeMap *a3, CI::NodeToNodeMap *a4)
{
  CI::ProgramNode *v8;

  v8 = (CI::ProgramNode *)CI::NodeToNodeMap::findAndRef(a3, this);
  if (!v8)
  {
    v8 = CI::ProgramNode::build_program_graph(this, a2, a3, a4);
    CI::NodeToNodeMap::add(a3, this, v8);
  }
  return v8;
}

uint64_t CI::Node::print_for_graph(uint64_t a1, FILE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __sFILE *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  __sFILE *v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  __sFILE *v23;
  const char *v24;
  size_t v25;
  double v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  _OWORD v30[2];
  int v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;

  if (CI_GRAPHVIZ_INTERNAL()
    || (CI_PRINT_TREE_dump_intermediates() & 1) != 0
    || CI_PRINT_TREE_dump_outputs())
  {
    fprintf(a2, "{%d} ", *(_DWORD *)(a1 + 36));
  }
  memset(v30, 0, sizeof(v30));
  v31 = 1065353216;
  (*(void (**)(uint64_t, FILE *, _OWORD *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, v30, 1);
  std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v30);
  if ((int)(-286331153 * ((*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - **(_QWORD **)(a1 + 16)) >> 3)) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (v6)
        fprintf(a2, ",");
      else
        fprintf(a2, " rois=");
      CI::fprintf(a2, v8, *(CGRect *)(**(_QWORD **)(a1 + 16) + v6));
      v9 = *(uint64_t **)(a1 + 16);
      v10 = *v9;
      if (*(int *)(*v9 + v6 + 80) >= 2)
      {
        fprintf(a2, "/%d", *(_DWORD *)(*v9 + v6 + 80));
        v9 = *(uint64_t **)(a1 + 16);
        v10 = *v9;
      }
      ++v7;
      v6 += 120;
    }
    while (v7 < (int)(-286331153 * ((unint64_t)(v9[1] - v10) >> 3)));
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result != 39)
  {
    fwrite(" extent=", 8uLL, 1uLL, a2);
    v32.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    CI::fprintf(a2, v12, v32);
    v13 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    v35.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
    v35.origin.y = v20;
    v35.size.width = v21;
    v35.size.height = v22;
    v33.origin.x = v13;
    v33.origin.y = v15;
    v33.size.width = v17;
    v33.size.height = v19;
    if (!CGRectEqualToRect(v33, v35))
    {
      v34.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
      CI::fprintf(a2, v23, v34);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 288))(a1))
    {
      v24 = " luma opaque";
      v25 = 12;
    }
    else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1))
    {
      v24 = " r-only opaque";
      v25 = 14;
    }
    else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1))
    {
      v24 = " rg-only opaque";
      v25 = 15;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
      if (!(_DWORD)result)
        goto LABEL_25;
      v24 = " opaque";
      v25 = 7;
    }
    result = fwrite(v24, v25, 1uLL, a2);
  }
LABEL_25:
  if (!*(_BYTE *)(a3 + 56))
    return result;
  v26 = *(double *)(a3 + 24);
  if (v26 != 0.0)
    result = fprintf(a2, " ms=%.1f", v26 * 1000.0);
  v27 = *(_QWORD *)(a3 + 32);
  if (v27)
    result = fprintf(a2, " megapixels=%.2f", (double)v27 * 0.000000953674316);
  if (*(_QWORD *)(a3 + 40))
    result = fprintf(a2, " cycles=%llu", *(_QWORD *)(a3 + 40));
  v28 = *(_QWORD *)(a3 + 48);
  if (v28)
  {
    v29 = (double)v28 / 1000000.0;
  }
  else
  {
    if (*(double *)a3 == 0.0)
      return result;
    v29 = *(double *)a3 * 1000.0;
  }
  return fprintf(a2, " ms=%.1f", v29);
}

void CI::Node::graphvis_set_title(uint64_t a1, void *a2, _QWORD *a3)
{
  const char *v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;

  if (CI_GRAPHVIZ_INTERNAL())
  {
    v6 = (const char *)CFStringCreateWithFormat(0, 0, CFSTR("%u"), *(unsigned int *)(a1 + 36));
    CIGVNodeSetTitle(a2, v6);
    CFRelease(v6);
  }
  else
  {
    v9 = a1;
    v7 = std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(a3, &v9);
    if (v7)
    {
      v8 = (const char *)CFStringCreateWithFormat(0, 0, CFSTR("%u"), *((unsigned int *)v7 + 6));
      CIGVNodeSetTitle(a2, v8);
      CFRelease(v8);
    }
  }
}

CIGVNode *CI::Node::node_for_graphviz_stats(_QWORD **a1, uint64_t a2, __int128 *a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  CIGVNode *v10;
  const char *v11;
  const char *v12;
  int v13;
  uint64_t v14;
  int v15;
  const void *v16;
  __int128 v17;
  __int128 v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[8];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[7];
  int v30;
  _QWORD v31[4];
  _QWORD v32[5];

  v6 = ((double (*)(_QWORD **))(*a1)[21])(a1);
  v10 = CIGVNodeCreateForNode((uint64_t)a1, v6, v7, v8, v9);
  v11 = (const char *)((uint64_t (*)(_QWORD **))(*a1)[7])(a1);
  CIGVNodeSetShape(v10, v11);
  v12 = (const char *)((uint64_t (*)(_QWORD **))(*a1)[8])(a1);
  CIGVNodeSetColor(v10, v12);
  v13 = ((uint64_t (*)(_QWORD **))(*a1)[12])(a1);
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x2000000000;
  v32[3] = 0;
  v31[0] = 0;
  v31[1] = v31;
  v31[2] = 0x2000000000;
  v31[3] = 0;
  v14 = MEMORY[0x1E0C809B0];
  if (v13)
  {
    v15 = v13;
    v16 = (const void *)CopyPeakNonVolatileList();
    v29[0] = v14;
    v29[1] = 0x40000000;
    v29[2] = ___ZNK2CI4Node23node_for_graphviz_statsERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEENS0_9NodeStatsE_block_invoke;
    v29[3] = &unk_1E2EC8730;
    v30 = v15;
    v29[4] = v31;
    v29[5] = v32;
    v29[6] = v10;
    __CFArray::for_each((CFIndex)v16, (uint64_t)v29);
    if (v16)
      CFRelease(v16);
  }
  ((void (*)(_QWORD **, CIGVNode *, uint64_t))(*a1)[16])(a1, v10, a2);
  v24[0] = v14;
  v24[1] = 0x40000000;
  v24[2] = ___ZNK2CI4Node23node_for_graphviz_statsERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEENS0_9NodeStatsE_block_invoke_2;
  v24[3] = &unk_1E2EB7F40;
  v24[6] = a1;
  v24[7] = a2;
  v17 = a3[1];
  v25 = *a3;
  v26 = v17;
  v18 = a3[3];
  v27 = a3[2];
  v28 = v18;
  v24[4] = v32;
  v24[5] = v31;
  v19 = (const char *)stream_to_string((uint64_t)v24);
  CIGVNodeSetLabel(v10, v19);
  CFRelease(v19);
  ((void (*)(_QWORD **, CIGVNode *))(*a1)[17])(a1, v10);
  if (CI_PRINT_TREE_dump_rois())
  {
    v20 = *a1[2];
    if ((int)(-286331153 * ((unint64_t)(a1[2][1] - v20) >> 3)) >= 1)
    {
      v21 = 0;
      v22 = 0;
      do
      {
        CIGVNodeAddRoi(v10, *(double *)(v20 + v21));
        ++v22;
        v20 = *a1[2];
        v21 += 120;
      }
      while (v22 < (int)(-286331153 * ((unint64_t)(a1[2][1] - v20) >> 3)));
    }
  }
  _Block_object_dispose(v31, 8);
  _Block_object_dispose(v32, 8);
  return v10;
}

uint64_t ___ZNK2CI4Node23node_for_graphviz_statsERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEENS0_9NodeStatsE_block_invoke_2(uint64_t a1, FILE *a2)
{
  uint64_t v3;
  _QWORD **v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __sFILE *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  int v16;
  unint64_t v17;
  uint64_t result;
  __sFILE *v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  __sFILE *v30;
  uint64_t v31;
  double v32;
  _OWORD v34[4];
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;

  v4 = *(_QWORD ***)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 80);
  v34[0] = *(_OWORD *)(a1 + 64);
  v34[1] = v5;
  v6 = *(_OWORD *)(a1 + 112);
  v34[2] = *(_OWORD *)(a1 + 96);
  v34[3] = v6;
  ((void (*)(_QWORD **, FILE *, uint64_t, _OWORD *))(*v4)[19])(v4, a2, v3, v34);
  if ((int)(-286331153 * ((v4[2][1] - *v4[2]) >> 3)) < 1)
  {
    v9 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      if (v8)
        fprintf(a2, ",");
      else
        fprintf(a2, "\nrois=");
      if (v8 && (v8 & 1) == 0)
        fwrite("\n     ", 6uLL, 1uLL, a2);
      CI::fprintf(a2, v10, *(CGRect *)(*v4[2] + v7));
      v11 = v4[2];
      v12 = *v11;
      v13 = *v11 + v7;
      v14 = *(double *)(v13 + 16);
      v15 = *(double *)(v13 + 24);
      v16 = *(_DWORD *)(v13 + 80);
      if (v16 >= 2)
      {
        fprintf(a2, "/%d", v16);
        v11 = v4[2];
        v12 = *v11;
      }
      v9 = (unint64_t)((double)v9 + v14 * v15);
      ++v8;
      v7 += 120;
    }
    while (v8 < (int)(-286331153 * ((unint64_t)(v11[1] - v12) >> 3)));
  }
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v17)
    fprintf(a2, "\npeakContribution=%.1fMB", (double)v17 * 0.000000953674316);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    fprintf(a2, "\npeakContributionCount=%ld", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
  result = ((uint64_t (*)(_QWORD **))(*v4)[2])(v4);
  if ((_DWORD)result != 39)
  {
    fprintf(a2, "\npixels=%ld", v9);
    fprintf(a2, "%cextent=", 10);
    v35.origin.x = ((double (*)(_QWORD **))(*v4)[20])(v4);
    CI::fprintf(a2, v19, v35);
    v20 = ((double (*)(_QWORD **))(*v4)[20])(v4);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    v38.origin.x = ((double (*)(_QWORD **))(*v4)[21])(v4);
    v38.origin.y = v27;
    v38.size.width = v28;
    v38.size.height = v29;
    v36.origin.x = v20;
    v36.origin.y = v22;
    v36.size.width = v24;
    v36.size.height = v26;
    if (!CGRectEqualToRect(v36, v38))
    {
      v37.origin.x = ((double (*)(_QWORD **))(*v4)[21])(v4);
      CI::fprintf(a2, v30, v37);
    }
    if ((((uint64_t (*)(_QWORD **))(*v4)[36])(v4) & 1) != 0)
    {
      fprintf(a2, "%cluma opaque");
    }
    else if ((((uint64_t (*)(_QWORD **))(*v4)[35])(v4) & 1) != 0)
    {
      fprintf(a2, "%cr-only opaque");
    }
    else if ((((uint64_t (*)(_QWORD **))(*v4)[34])(v4) & 1) != 0)
    {
      fprintf(a2, "%crg-only opaque");
    }
    else if (((unsigned int (*)(_QWORD **))(*v4)[33])(v4))
    {
      fprintf(a2, "%copaque");
    }
    if (((unsigned int (*)(_QWORD **))(*v4)[38])(v4) == -1)
      fwrite(" shallow", 8uLL, 1uLL, a2);
    if (((unsigned int (*)(_QWORD **))(*v4)[38])(v4) == 1)
      fwrite(" deep", 5uLL, 1uLL, a2);
    result = ((uint64_t (*)(_QWORD **))(*v4)[48])(v4);
    if (result)
    {
      v31 = ((uint64_t (*)(_QWORD **))(*v4)[48])(v4);
      result = fprintf(a2, "%cdigest=%016llX", 10, v31);
    }
  }
  if (*(_BYTE *)(a1 + 120))
  {
    v32 = *(double *)(a1 + 88);
    if (v32 != 0.0)
      result = fprintf(a2, "\nfillTime=%.1fms", v32 * 1000.0);
    if (*(_QWORD *)(a1 + 96))
      return fprintf(a2, "\nfillPixels=%llu", *(_QWORD *)(a1 + 96));
  }
  return result;
}

uint64_t CI::Node::BuildMapToUseCount(CI::Node *this, CI::Node *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[5];

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v3 = (_QWORD *)operator new();
  v3[2] = 0;
  v3[1] = 0;
  *v3 = v3 + 1;
  v10 = v3;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN2CI4Node18BuildMapToUseCountEPS0__block_invoke;
  v6[3] = &unk_1E2EC8758;
  v6[4] = &v7;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZNK2CI4Node27traverse_preorder_stoppableEU13block_pointerFbPKS0_E_block_invoke;
  v11[3] = &unk_1E2EC8780;
  v11[4] = v6;
  CI::GraphObject::traverse_preorder_stoppable((uint64_t)this, 0, 0, 0, (uint64_t)v11);
  v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t ___ZN2CI4Node18BuildMapToUseCountEPS0__block_invoke(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t *v11;

  v10 = a2;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v3 = *(_QWORD **)(v2 + 8);
  if (!v3)
    goto LABEL_12;
  v4 = (_QWORD *)(v2 + 8);
  do
  {
    v5 = v3[4];
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v4 = v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 != (_QWORD *)(v2 + 8) && v4[4] <= a2)
  {
    ++*((_DWORD *)v4 + 10);
    return 1;
  }
  else
  {
LABEL_12:
    v11 = &v10;
    v8 = std::__tree<std::__value_type<CI::Node const*,CI::useCountDepth>,std::__map_value_compare<CI::Node const*,std::__value_type<CI::Node const*,CI::useCountDepth>,std::less<CI::Node const*>,true>,std::allocator<std::__value_type<CI::Node const*,CI::useCountDepth>>>::__emplace_unique_key_args<CI::Node const*,std::piecewise_construct_t const&,std::tuple<CI::Node const* const&>,std::tuple<>>((uint64_t **)v2, &v10, (uint64_t)&std::piecewise_construct, (uint64_t **)&v11);
    result = 0;
    *((_DWORD *)v8 + 10) = 1;
  }
  return result;
}

void std::vector<CI::SerialRectArray::roiData>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 15;
        std::__destroy_at[abi:nn180100]<CI::SerialRectArray::roiData,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:nn180100]<CI::SerialRectArray::roiData,0>(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
}

void std::vector<CI::SerialRectArray::roiData>::__assign_with_size[abi:nn180100]<CI::SerialRectArray::roiData*,CI::SerialRectArray::roiData*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _OWORD *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  char v19;

  v6 = (_OWORD *)a2;
  v8 = *a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) >= a4)
  {
    if (0xEEEEEEEEEEEEEEEFLL * ((a1[1] - v8) >> 3) >= a4)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<CI::SerialRectArray::roiData *,CI::SerialRectArray::roiData *,CI::SerialRectArray::roiData *>((uint64_t)&v19, a2, a3, v8);
      v16 = v15;
      v17 = (_QWORD *)a1[1];
      if (v17 != v15)
      {
        do
        {
          v17 -= 15;
          std::__destroy_at[abi:nn180100]<CI::SerialRectArray::roiData,0>(v17);
        }
        while (v17 != v16);
      }
      a1[1] = (uint64_t)v16;
    }
    else
    {
      v12 = (_OWORD *)(a2 + 8 * ((a1[1] - v8) >> 3));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<CI::SerialRectArray::roiData *,CI::SerialRectArray::roiData *,CI::SerialRectArray::roiData *>((uint64_t)&v18, a2, (uint64_t)v12, v8);
      v13 = a1[1];
      if (v12 != (_OWORD *)a3)
      {
        v14 = a1[1];
        do
        {
          std::construct_at[abi:nn180100]<CI::SerialRectArray::roiData,CI::SerialRectArray::roiData&,CI::SerialRectArray::roiData*>(v14, v12);
          v12 = (_OWORD *)((char *)v12 + 120);
          v14 += 120;
          v13 += 120;
        }
        while (v12 != (_OWORD *)a3);
      }
      a1[1] = v13;
    }
  }
  else
  {
    std::vector<CI::SerialRectArray::roiData>::__vdeallocate(a1);
    if (a4 > 0x222222222222222)
      abort();
    v9 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) >= 0x111111111111111)
      v10 = 0x222222222222222;
    else
      v10 = v9;
    std::vector<CI::SerialRectArray::roiData>::__vallocate[abi:nn180100](a1, v10);
    v11 = a1[1];
    while (v6 != (_OWORD *)a3)
    {
      std::construct_at[abi:nn180100]<CI::SerialRectArray::roiData,CI::SerialRectArray::roiData&,CI::SerialRectArray::roiData*>(v11, v6);
      v6 = (_OWORD *)((char *)v6 + 120);
      v11 += 120;
    }
    a1[1] = v11;
  }
}

void std::vector<CI::SerialRectArray::roiData>::__vdeallocate(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 15;
        std::__destroy_at[abi:nn180100]<CI::SerialRectArray::roiData,0>(v3);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<CI::SerialRectArray::roiData>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x222222222222223)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SerialRectArray::roiData>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[120 * v4];
  return result;
}

uint64_t std::construct_at[abi:nn180100]<CI::SerialRectArray::roiData,CI::SerialRectArray::roiData&,CI::SerialRectArray::roiData*>(uint64_t a1, _OWORD *a2)
{
  __int128 v4;

  v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v4;
  std::vector<CI::parentROI>::vector((_QWORD *)(a1 + 32), (uint64_t)(a2 + 2));
  std::vector<CI::parentROI>::vector((_QWORD *)(a1 + 56), (uint64_t)a2 + 56);
  *(_OWORD *)(a1 + 80) = a2[5];
  std::vector<unsigned long>::vector((_QWORD *)(a1 + 96), (uint64_t)(a2 + 6));
  return a1;
}

_QWORD *std::vector<CI::parentROI>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<CI::parentROI>::__vallocate[abi:nn180100](a1, 0xAAAAAAAAAAAAAAABLL * (v5 >> 4));
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<CI::SerialRectArray::roiData *,CI::SerialRectArray::roiData *,CI::SerialRectArray::roiData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a4 + v7;
    v9 = a2 + v7;
    v10 = *(_OWORD *)(a2 + v7 + 16);
    *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
    *(_OWORD *)(v8 + 16) = v10;
    if (a2 != a4)
    {
      std::vector<CI::parentROI>::__assign_with_size[abi:nn180100]<CI::parentROI*,CI::parentROI*>((char *)(v8 + 32), *(char **)(v9 + 32), *(_QWORD *)(v9 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 40) - *(_QWORD *)(v9 + 32)) >> 4));
      std::vector<CI::parentROI>::__assign_with_size[abi:nn180100]<CI::parentROI*,CI::parentROI*>((char *)(v8 + 56), *(char **)(v9 + 56), *(_QWORD *)(v9 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56)) >> 4));
      *(_OWORD *)(v8 + 80) = *(_OWORD *)(v9 + 80);
      std::vector<unsigned long>::__assign_with_size[abi:nn180100]<unsigned long *,unsigned long *>((char *)(v8 + 96), *(char **)(v9 + 96), *(_QWORD *)(v9 + 104), (uint64_t)(*(_QWORD *)(v9 + 104) - *(_QWORD *)(v9 + 96)) >> 3);
    }
    v7 += 120;
  }
  while (a2 + v7 != v6);
  return v6;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SerialRectArray::roiData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(120 * a2);
}

char *std::vector<CI::parentROI>::__insert_with_size[abi:nn180100]<std::__wrap_iter<CI::parentROI const*>,std::__wrap_iter<CI::parentROI const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  void *__p;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) < a5)
  {
    v13 = *(void **)a1;
    v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 4);
    if (v14 > 0x555555555555555)
      abort();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((__dst - (uint64_t)v13) >> 4);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v13) >> 4);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x2AAAAAAAAAAAAAALL)
      v18 = 0x555555555555555;
    else
      v18 = v17;
    v39 = v9;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::parentROI>>(v9, v18);
    else
      v19 = 0;
    v29 = &v19[48 * v15];
    __p = v19;
    v36 = v29;
    v38 = &v19[48 * v18];
    v30 = &v29[48 * a5];
    v31 = 48 * a5;
    do
    {
      v32 = *(_OWORD *)v7;
      v33 = *((_OWORD *)v7 + 2);
      *((_OWORD *)v29 + 1) = *((_OWORD *)v7 + 1);
      *((_OWORD *)v29 + 2) = v33;
      *(_OWORD *)v29 = v32;
      v29 += 48;
      v7 += 48;
      v31 -= 48;
    }
    while (v31);
    v37 = v30;
    v5 = (char *)std::vector<CI::parentROI>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v37 != v36)
      v37 = &v36[(v37 - v36 - 48) % 0x30uLL];
    if (__p)
      operator delete(__p);
    return v5;
  }
  v20 = v12 - __dst;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - __dst) >> 4)) >= a5)
  {
    v21 = &__src[48 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[48 * a5];
    v25 = &v23[-48 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        v28 = *((_OWORD *)v25 + 2);
        *((_OWORD *)v26 + 1) = *((_OWORD *)v25 + 1);
        *((_OWORD *)v26 + 2) = v28;
        *(_OWORD *)v26 = v27;
        v26 += 48;
        v25 += 48;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v5[48 * a5], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[16 * ((uint64_t)(v12 - __dst) >> 4)];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[16 * ((uint64_t)(v12 - __dst) >> 4)], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v20 >= 1)
    goto LABEL_17;
  return v5;
}

void *std::vector<CI::parentROI>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _BYTE *v12;
  uint64_t v13;
  int64_t v14;
  char *v15;
  void *v16;
  void *v17;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *((_OWORD *)v8 - 3);
      v11 = *((_OWORD *)v8 - 1);
      v7 = (void *)(v9 - 48);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v11;
      *(_OWORD *)(v9 - 48) = v10;
      v8 -= 48;
      v9 -= 48;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v12 = a1[1];
  v13 = *(_QWORD *)(a2 + 16);
  v14 = v12 - __src;
  if (v12 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v12 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v13 + v14;
  v15 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v15;
  v16 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v16;
  v17 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

BOOL CI::parentROI::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(_DWORD *)(a2 + 16) == *(_DWORD *)(a1 + 16)
      && *(_DWORD *)(a2 + 12) == *(_DWORD *)(a1 + 12)
      && *(_DWORD *)(a2 + 8) == *(_DWORD *)(a1 + 8)
      && *(_DWORD *)(a2 + 20) == *(_DWORD *)(a1 + 20);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<CI::SerialRectArray::roiData *,CI::SerialRectArray::roiData *,CI::SerialRectArray::roiData *>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v7 = *(_OWORD *)(v5 + 16);
    *a4 = *(_OWORD *)v5;
    a4[1] = v7;
    std::vector<CI::KernelArgumentType>::__move_assign((uint64_t)(a4 + 2), (__n128 *)(v5 + 32));
    std::vector<CI::KernelArgumentType>::__move_assign((uint64_t)a4 + 56, (__n128 *)(v5 + 56));
    a4[5] = *(_OWORD *)(v5 + 80);
    std::vector<CI::KernelArgumentType>::__move_assign((uint64_t)(a4 + 6), (__n128 *)(v5 + 96));
    a4 = (_OWORD *)((char *)a4 + 120);
    v5 += 120;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::vector<CI::SerialRectArray::roiData>::push_back[abi:nn180100](uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0x222222222222222)
      abort();
    v11 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - *a1) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x111111111111111)
      v13 = 0x222222222222222;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SerialRectArray::roiData>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[120 * v10];
    v18 = &v14[120 * v13];
    std::construct_at[abi:nn180100]<CI::SerialRectArray::roiData,CI::SerialRectArray::roiData&,CI::SerialRectArray::roiData*>((uint64_t)v16, a2);
    v17 = v16 + 120;
    std::vector<CI::SerialRectArray::roiData>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<CI::SerialRectArray::roiData>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = std::construct_at[abi:nn180100]<CI::SerialRectArray::roiData,CI::SerialRectArray::roiData&,CI::SerialRectArray::roiData*>(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 120;
  }
  a1[1] = v9;
  return result;
}

void std::vector<CI::SerialRectArray::roiData>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 120;
    v4 -= 120;
    std::construct_at[abi:nn180100]<CI::SerialRectArray::roiData,CI::SerialRectArray::roiData,CI::SerialRectArray::roiData*>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 std::construct_at[abi:nn180100]<CI::SerialRectArray::roiData,CI::SerialRectArray::roiData,CI::SerialRectArray::roiData*>(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  result = *(__n128 *)(a2 + 96);
  *(__n128 *)(a1 + 96) = result;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  return result;
}

uint64_t std::__split_buffer<CI::SerialRectArray::roiData>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    std::__destroy_at[abi:nn180100]<CI::SerialRectArray::roiData,0>((_QWORD *)(i - 120));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t ___ZNK2CI4Node27traverse_preorder_stoppableEU13block_pointerFbPKS0_E_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t *std::__tree<std::__value_type<CI::Node const*,CI::useCountDepth>,std::__map_value_compare<CI::Node const*,std::__value_type<CI::Node const*,CI::useCountDepth>,std::less<CI::Node const*>,true>,std::allocator<std::__value_type<CI::Node const*,CI::useCountDepth>>>::__emplace_unique_key_args<CI::Node const*,std::piecewise_construct_t const&,std::tuple<CI::Node const* const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x48uLL);
    v11[4] = **a4;
    v11[5] = 0x100000000;
    v11[8] = 0;
    v11[7] = 0;
    v11[6] = (uint64_t)(v11 + 7);
    std::__tree<std::__value_type<std::string,CI::SWFunction>,std::__map_value_compare<std::string,std::__value_type<std::string,CI::SWFunction>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CI::SWFunction>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void CI::Object::performDeferredRoot(void *a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v7[6];
  _QWORD block[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if ((v2 & 1) == 0
  {
    CI::Object::performDeferredRoot(void({block_pointer})(void))::gQueuePool = (uint64_t)&CI::Object::performDeferredRoot(void({block_pointer})(void))::gQueuePool;
    qword_1ECF870D8 = (uint64_t)&CI::Object::performDeferredRoot(void({block_pointer})(void))::gQueuePool;
    qword_1ECF870E0 = 0;
    __cxa_atexit((void (*)(void *))std::list<dispatch_queue_s *>::~list, &CI::Object::performDeferredRoot(void({block_pointer})(void))::gQueuePool, &dword_1921E4000);
  }
  if ((v3 & 1) == 0
  {
    CI::Object::performDeferredRoot(void({block_pointer})(void))::gGroupPool = (uint64_t)&CI::Object::performDeferredRoot(void({block_pointer})(void))::gGroupPool;
    qword_1ECF870C0 = (uint64_t)&CI::Object::performDeferredRoot(void({block_pointer})(void))::gGroupPool;
    qword_1ECF870C8 = 0;
    __cxa_atexit((void (*)(void *))std::list<dispatch_group_s *>::~list, &CI::Object::performDeferredRoot(void({block_pointer})(void))::gGroupPool, &dword_1921E4000);
  }
  if ((v4 & 1) == 0
  {
    v6 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    CI::Object::performDeferredRoot(void({block_pointer})(void))::gPoolAccessQueue = (uint64_t)dispatch_queue_create("CI::DispatchPoolAccessQueue", v6);
  }
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v5 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN2CI6Object19performDeferredRootEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E2EC0F28;
  block[4] = &v13;
  block[5] = &v9;
  dispatch_sync((dispatch_queue_t)CI::Object::performDeferredRoot(void({block_pointer})(void))::gPoolAccessQueue, block);
  dispatch_queue_set_specific((dispatch_queue_t)v14[3], &CI::Object::_queueKey, (void *)v14[3], 0);
  dispatch_queue_set_specific((dispatch_queue_t)v14[3], &CI::Object::_groupKey, (void *)v10[3], 0);
  dispatch_group_async((dispatch_group_t)v10[3], (dispatch_queue_t)v14[3], a1);
  dispatch_group_wait((dispatch_group_t)v10[3], 0xFFFFFFFFFFFFFFFFLL);
  dispatch_queue_set_specific((dispatch_queue_t)v14[3], &CI::Object::_queueKey, 0, 0);
  dispatch_queue_set_specific((dispatch_queue_t)v14[3], &CI::Object::_groupKey, 0, 0);
  v7[0] = v5;
  v7[1] = 0x40000000;
  v7[2] = ___ZN2CI6Object19performDeferredRootEU13block_pointerFvvE_block_invoke_2;
  v7[3] = &unk_1E2EC87A8;
  v7[4] = &v13;
  v7[5] = &v9;
  dispatch_async((dispatch_queue_t)CI::Object::performDeferredRoot(void({block_pointer})(void))::gPoolAccessQueue, v7);
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
}

_QWORD *std::list<dispatch_queue_s *>::~list(_QWORD *a1)
{
  std::__list_imp<CI::attached_surface_t *>::clear(a1);
  return a1;
}

_QWORD *std::list<dispatch_group_s *>::~list(_QWORD *a1)
{
  std::__list_imp<CI::attached_surface_t *>::clear(a1);
  return a1;
}

void ___ZN2CI6Object19performDeferredRootEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v2 = qword_1ECF870E0;
  if (qword_1ECF870E0)
  {
    v3 = (uint64_t *)qword_1ECF870D8;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(qword_1ECF870D8 + 16);
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = v3[1];
    *(_QWORD *)v3[1] = v4;
    qword_1ECF870E0 = v2 - 1;
    operator delete(v3);
  }
  else
  {
    v5 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = dispatch_queue_create("CI::PooledDispatchQueue", v5);
  }
  v6 = qword_1ECF870C8;
  if (qword_1ECF870C8)
  {
    v7 = (uint64_t *)qword_1ECF870C0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(qword_1ECF870C0 + 16);
    v8 = *v7;
    *(_QWORD *)(v8 + 8) = v7[1];
    *(_QWORD *)v7[1] = v8;
    qword_1ECF870C8 = v6 - 1;
    operator delete(v7);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = dispatch_group_create();
  }
}

void ___ZN2CI6Object19performDeferredRootEU13block_pointerFvvE_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = qword_1ECF870E0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if ((unint64_t)qword_1ECF870E0 > 9)
  {
    dispatch_release(*(dispatch_object_t *)(v3 + 24));
  }
  else
  {
    v4 = operator new(0x18uLL);
    v5 = *(_QWORD *)(v3 + 24);
    v6 = CI::Object::performDeferredRoot(void({block_pointer})(void))::gQueuePool;
    v4[1] = &CI::Object::performDeferredRoot(void({block_pointer})(void))::gQueuePool;
    v4[2] = v5;
    *v4 = v6;
    *(_QWORD *)(v6 + 8) = v4;
    CI::Object::performDeferredRoot(void({block_pointer})(void))::gQueuePool = (uint64_t)v4;
    qword_1ECF870E0 = v2 + 1;
  }
  v7 = qword_1ECF870C8;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if ((unint64_t)qword_1ECF870C8 > 9)
  {
    dispatch_release(*(dispatch_object_t *)(v8 + 24));
  }
  else
  {
    v9 = operator new(0x18uLL);
    v10 = *(_QWORD *)(v8 + 24);
    v11 = CI::Object::performDeferredRoot(void({block_pointer})(void))::gGroupPool;
    v9[1] = &CI::Object::performDeferredRoot(void({block_pointer})(void))::gGroupPool;
    v9[2] = v10;
    *v9 = v11;
    *(_QWORD *)(v11 + 8) = v9;
    CI::Object::performDeferredRoot(void({block_pointer})(void))::gGroupPool = (uint64_t)v9;
    qword_1ECF870C8 = v7 + 1;
  }
}

uint64_t CI::is_image_type(unsigned int a1)
{
  return (a1 < 0x31) & (0x1500020000000uLL >> a1);
}

uint64_t CI::is_raster_TypeImage(unsigned int a1)
{
  return (a1 < 0x1A) & (0x20C0008u >> a1);
}

BOOL CI::is_any_TypeNode(int a1)
{
  return (a1 - 28) < 0x19;
}

const char *CI::name_for_type(unsigned int a1)
{
  if (a1 > 0x58)
    return "Unknown";
  else
    return off_1E2EC88D8[a1];
}

CFStringRef CI::Object::description(CI::Object *this)
{
  unsigned int v2;
  const char *v3;
  uint64_t v4;

  v2 = (*(uint64_t (**)(CI::Object *))(*(_QWORD *)this + 16))(this);
  v3 = CI::name_for_type(v2);
  v4 = atomic_load((unsigned int *)this + 2);
  return CFStringCreateWithFormat(0, 0, CFSTR("<CI::Object %s %p ref=%u>"), v3, this, v4);
}

size_t CI::fprintf(FILE *this, __sFILE *a2, CGRect a3)
{
  double height;
  double width;
  double y;
  double x;
  const char *v8;
  size_t v9;
  CGRect v11;
  CGRect v12;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  if (CGRectIsInfinite(a3))
  {
    v8 = "[infinite]";
    v9 = 10;
    return fwrite(v8, v9, 1uLL, this);
  }
  v11.origin.x = x;
  v11.origin.y = y;
  v11.size.width = width;
  v11.size.height = height;
  if (CGRectIsNull(v11))
  {
    v8 = "[null]";
    v9 = 6;
    return fwrite(v8, v9, 1uLL, this);
  }
  v12.origin.x = x;
  v12.origin.y = y;
  v12.size.width = width;
  v12.size.height = height;
  if (CGRectIsEmpty(v12))
  {
    v8 = "[empty]";
    v9 = 7;
    return fwrite(v8, v9, 1uLL, this);
  }
  return fprintf(this, "[%g %g %g %g]", x, y, width, height);
}

uint64_t CI::fprintf(FILE *__stream, CFStringRef theString, const __CFString *a3)
{
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  uint64_t v7;
  char *v8;
  uint64_t result;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if (!theString)
    fwrite("nil", 3uLL, 1uLL, __stream);
  Length = CFStringGetLength(theString);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  MEMORY[0x1E0C80A78]();
  v8 = (char *)v10 - v7;
  bzero((char *)v10 - v7, MaximumSizeForEncoding);
  result = CFStringGetCString(theString, v8, MaximumSizeForEncoding, 0x8000100u);
  if ((_DWORD)result)
    return fputs(v8, __stream);
  return result;
}

void CI::GraphObject::traverse_preorder_stoppable(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  __int128 v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  char *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a2;
  v22 = a1;
  v19 = a4;
  v20 = a3;
  if (a1)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    std::vector<CI::TraverseVisit>::reserve(&v16, 0x40uLL);
    std::vector<CI::TraverseVisit>::vector(&v14, (uint64_t)&v16);
    std::stack<CI::TraverseVisit,std::vector<CI::TraverseVisit>>::emplace[abi:nn180100]<CI::GraphObject *&,CI::GraphObject *&,int &,int &>((void **)&v14, &v22, &v21, &v20, &v19);
    while (v15 != v14)
    {
      v6 = *((_OWORD *)v15 - 1);
      v12 = *((_OWORD *)v15 - 2);
      v13 = v6;
      v15 -= 32;
      if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(a5 + 16))(a5, v12, *((_QWORD *)&v12 + 1), v6, DWORD1(v6)) & 1) == 0)
      {
        v11 = 0;
        v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 40))(v12);
        v11 = v7 - 1;
        if (v7 >= 1)
        {
          do
          {
            v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 48))(v12);
            v9 = v13 + 1;
            std::stack<CI::TraverseVisit,std::vector<CI::TraverseVisit>>::emplace[abi:nn180100]<CI::GraphObject *&,CI::GraphObject *&,int &,int &>((void **)&v14, &v10, (uint64_t *)&v12, &v9, &v11);
            v8 = v11--;
          }
          while (v8 > 0);
        }
      }
    }
    if (v15)
      operator delete(v15);
    if (v16)
    {
      v17 = v16;
      operator delete(v16);
    }
  }
}

void std::vector<CI::TraverseVisit>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SoftwareDAGDescriptor::ArgumentInfo>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 23) = *(_OWORD *)(v10 - 23);
        *((_OWORD *)v12 - 2) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

char *std::stack<CI::TraverseVisit,std::vector<CI::TraverseVisit>>::emplace[abi:nn180100]<CI::GraphObject *&,CI::GraphObject *&,int &,int &>(void **a1, _QWORD *a2, uint64_t *a3, int *a4, int *a5)
{
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  char *v30;
  __int128 v31;

  v12 = a1[2];
  v10 = (uint64_t)(a1 + 2);
  v11 = v12;
  v13 = *(_QWORD *)(v10 - 8);
  if (v13 >= (unint64_t)v12)
  {
    v18 = (uint64_t)(v13 - (_QWORD)*a1) >> 5;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 59)
      abort();
    v20 = v11 - (_BYTE *)*a1;
    if (v20 >> 4 > v19)
      v19 = v20 >> 4;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
      v21 = 0x7FFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SoftwareDAGDescriptor::ArgumentInfo>>(v10, v21);
    v23 = &v22[32 * v18];
    v25 = &v22[32 * v24];
    v26 = *a3;
    v27 = *a4;
    v28 = *a5;
    *(_QWORD *)v23 = *a2;
    *((_QWORD *)v23 + 1) = v26;
    *((_DWORD *)v23 + 4) = v27;
    *((_DWORD *)v23 + 5) = v28;
    v23[24] = 0;
    v17 = v23 + 32;
    v30 = (char *)*a1;
    v29 = (char *)a1[1];
    if (v29 != *a1)
    {
      do
      {
        v31 = *((_OWORD *)v29 - 2);
        *(_OWORD *)(v23 - 23) = *(_OWORD *)(v29 - 23);
        *((_OWORD *)v23 - 2) = v31;
        v23 -= 32;
        v29 -= 32;
      }
      while (v29 != v30);
      v29 = (char *)*a1;
    }
    *a1 = v23;
    a1[1] = v17;
    a1[2] = v25;
    if (v29)
      operator delete(v29);
  }
  else
  {
    v14 = *a3;
    v15 = *a4;
    v16 = *a5;
    *(_QWORD *)v13 = *a2;
    *(_QWORD *)(v13 + 8) = v14;
    *(_DWORD *)(v13 + 16) = v15;
    *(_DWORD *)(v13 + 20) = v16;
    *(_BYTE *)(v13 + 24) = 0;
    v17 = (char *)(v13 + 32);
  }
  a1[1] = v17;
  return v17 - 32;
}

void CI::GraphObject::traverse_stoppable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD *v8;
  __int128 v9;
  _OWORD *v10;
  char v11;
  int v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unsigned int v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a1;
  if (a1)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    *(_QWORD *)&v15 = 0;
    LODWORD(v14) = 0;
    v17 = 0;
    std::stack<CI::TraverseVisit,std::vector<CI::TraverseVisit>>::emplace[abi:nn180100]<CI::GraphObject *&,decltype(nullptr),int,int>((void **)&v18, &v21, (uint64_t)&v15, (int *)&v14, (int *)&v17);
    v8 = v19;
    while (v8 != v18)
    {
      v9 = *(v8 - 1);
      v15 = *(v8 - 2);
      v16 = v9;
      if (BYTE8(v9))
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(a6 + 16))(a6, v15, *((_QWORD *)&v15 + 1), v9, DWORD1(v9));
        v10 = v19;
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(a5 + 16))(a5, v15, *((_QWORD *)&v15 + 1), v9, DWORD1(v9));
        v10 = v19;
        if ((v11 & 1) == 0)
        {
          *((_BYTE *)v19 - 8) = 1;
          v17 = 0;
          if ((*(int (**)(_QWORD))(*(_QWORD *)v15 + 40))(v15) >= 1)
          {
            do
            {
              v14 = 0;
              v14 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v15 + 48))(v15, v17);
              v13 = v16 + 1;
              std::stack<CI::TraverseVisit,std::vector<CI::TraverseVisit>>::emplace[abi:nn180100]<CI::GraphObject *&,CI::GraphObject *&,int &,int &>((void **)&v18, &v14, (uint64_t *)&v15, &v13, (int *)&v17);
              v12 = ++v17;
            }
            while (v12 < (*(int (**)(_QWORD))(*(_QWORD *)v15 + 40))(v15));
          }
          v8 = v19;
          continue;
        }
      }
      v8 = v10 - 2;
      v19 = v10 - 2;
    }
    if (v8)
    {
      v19 = v8;
      operator delete(v8);
    }
  }
}

char *std::stack<CI::TraverseVisit,std::vector<CI::TraverseVisit>>::emplace[abi:nn180100]<CI::GraphObject *&,decltype(nullptr),int,int>(void **a1, _QWORD *a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  char *v26;
  char *v27;
  __int128 v28;

  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (v12 >= (unint64_t)v11)
  {
    v16 = (uint64_t)(v12 - (_QWORD)*a1) >> 5;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 59)
      abort();
    v18 = v10 - (_BYTE *)*a1;
    if (v18 >> 4 > v17)
      v17 = v18 >> 4;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
      v19 = 0x7FFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SoftwareDAGDescriptor::ArgumentInfo>>(v9, v19);
    v21 = &v20[32 * v16];
    v23 = &v20[32 * v22];
    v24 = *a4;
    v25 = *a5;
    *(_QWORD *)v21 = *a2;
    *((_QWORD *)v21 + 1) = 0;
    *((_DWORD *)v21 + 4) = v24;
    *((_DWORD *)v21 + 5) = v25;
    v21[24] = 0;
    v15 = v21 + 32;
    v27 = (char *)*a1;
    v26 = (char *)a1[1];
    if (v26 != *a1)
    {
      do
      {
        v28 = *((_OWORD *)v26 - 2);
        *(_OWORD *)(v21 - 23) = *(_OWORD *)(v26 - 23);
        *((_OWORD *)v21 - 2) = v28;
        v21 -= 32;
        v26 -= 32;
      }
      while (v26 != v27);
      v26 = (char *)*a1;
    }
    *a1 = v21;
    a1[1] = v15;
    a1[2] = v23;
    if (v26)
      operator delete(v26);
  }
  else
  {
    v13 = *a4;
    v14 = *a5;
    *(_QWORD *)v12 = *a2;
    *(_QWORD *)(v12 + 8) = 0;
    *(_DWORD *)(v12 + 16) = v13;
    *(_DWORD *)(v12 + 20) = v14;
    *(_BYTE *)(v12 + 24) = 0;
    v15 = (char *)(v12 + 32);
  }
  a1[1] = v15;
  return v15 - 32;
}

uint64_t CI::GraphObject::traverse_unique(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];
  _QWORD v9[5];
  _QWORD v10[3];
  int v11;
  _QWORD v12[5];
  _BYTE v13[32];
  int v14;

  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x5002000000;
  v12[3] = __Block_byref_object_copy__27;
  v12[4] = __Block_byref_object_dispose__27;
  memset(v13, 0, sizeof(v13));
  v14 = 1065353216;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  v11 = 0;
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}*>>::__rehash<true>((uint64_t)v13, 0x80uLL);
  v8[5] = v10;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZN2CI11GraphObject15traverse_uniqueEPS0_U13block_pointerFvS1_iE_block_invoke;
  v9[3] = &unk_1E2EC87F0;
  v9[4] = v12;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN2CI11GraphObject15traverse_uniqueEPS0_U13block_pointerFvS1_iE_block_invoke_2;
  v8[3] = &unk_1E2EC8818;
  v8[4] = a2;
  CI::GraphObject::traverse_stoppable(a1, v4, v5, v6, (uint64_t)v9, (uint64_t)v8);
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v12, 8);
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v13);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];
  _QWORD v9[5];
  _QWORD v10[3];
  int v11;
  _QWORD v12[5];
  _BYTE v13[32];
  int v14;

  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x5002000000;
  v12[3] = __Block_byref_object_copy__92;
  v12[4] = __Block_byref_object_dispose__93;
  memset(v13, 0, sizeof(v13));
  v14 = 1065353216;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  v11 = 0;
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}*>>::__rehash<true>((uint64_t)v13, 0x80uLL);
  v8[5] = v10;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZN2CI11GraphObject15traverse_uniqueEPKS0_U13block_pointerFvS2_iE_block_invoke;
  v9[3] = &unk_1E2EC8840;
  v9[4] = v12;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN2CI11GraphObject15traverse_uniqueEPKS0_U13block_pointerFvS2_iE_block_invoke_2;
  v8[3] = &unk_1E2EC8868;
  v8[4] = a2;
  CI::GraphObject::traverse_stoppable(a1, v4, v5, v6, (uint64_t)v9, (uint64_t)v8);
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v12, 8);
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v13);
}

uint64_t __Block_byref_object_copy__27(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__27(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

BOOL ___ZN2CI11GraphObject15traverse_uniqueEPS0_U13block_pointerFvS1_iE_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v5;

  v5 = a2;
  v3 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &v5);
  if (!v3)
    std::__hash_table<CI::Node const*,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,std::allocator<CI::Node const*>>::__emplace_unique_key_args<CI::Node const*,CI::Node const* const&>(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, &v5, &v5);
  return v3 != 0;
}

uint64_t ___ZN2CI11GraphObject15traverse_uniqueEPS0_U13block_pointerFvS1_iE_block_invoke_2(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return (*(uint64_t (**)(uint64_t))(v1 + 16))(v1);
}

uint64_t __Block_byref_object_copy__92(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__93(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

BOOL ___ZN2CI11GraphObject15traverse_uniqueEPKS0_U13block_pointerFvS2_iE_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v5;

  v5 = a2;
  v3 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &v5);
  if (!v3)
    std::__hash_table<CI::Node const*,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,std::allocator<CI::Node const*>>::__emplace_unique_key_args<CI::Node const*,CI::Node const* const&>(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, &v5, &v5);
  return v3 != 0;
}

uint64_t ___ZN2CI11GraphObject15traverse_uniqueEPKS0_U13block_pointerFvS2_iE_block_invoke_2(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return (*(uint64_t (**)(uint64_t))(v1 + 16))(v1);
}

void *CI::GraphObject::graphviz_representation(CI::GraphObject *this, CI::GraphObject *a2, const __CFString *a3, CGImage *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  CIGVNode *v10;
  _QWORD *v11;
  _QWORD v13[7];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t (*v18)(uint64_t);
  _OWORD v19[2];
  int v20;
  _QWORD v21[8];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t (*v26)(uint64_t);
  _BYTE v27[32];
  int v28;
  _QWORD v29[5];
  _BYTE v30[32];
  int v31;
  _QWORD v32[5];
  _BYTE v33[32];
  int v34;
  CI::GraphObject *v35;

  v35 = this;
  if (!this)
    return 0;
  v7 = CIGVGraphCreate();
  v8 = v7;
  if (v7)
  {
    v32[0] = 0;
    v32[1] = v32;
    v32[2] = 0x5002000000;
    v32[3] = __Block_byref_object_copy__98;
    v32[4] = __Block_byref_object_dispose__99;
    memset(v33, 0, sizeof(v33));
    v34 = 1065353216;
    v29[0] = 0;
    v29[1] = v29;
    v29[2] = 0x5002000000;
    v29[3] = __Block_byref_object_copy__100_0;
    v29[4] = __Block_byref_object_dispose__101_0;
    memset(v30, 0, sizeof(v30));
    v31 = 1065353216;
    v22 = 0;
    v23 = &v22;
    v24 = 0x5002000000;
    v25 = __Block_byref_object_copy__102;
    v26 = __Block_byref_object_dispose__103;
    memset(v27, 0, sizeof(v27));
    v28 = 1065353216;
    v9 = MEMORY[0x1E0C809B0];
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 0x40000000;
    v21[2] = ___ZN2CI11GraphObject23graphviz_representationEPS0_PK10__CFStringP7CGImage_block_invoke;
    v21[3] = &unk_1E2EC8890;
    v21[4] = &v22;
    v21[5] = v32;
    v21[6] = v29;
    v21[7] = v7;
    CI::GraphObject::traverse_preorder_stoppable((uint64_t)this, 0, 0, 0, (uint64_t)v21);
    v14 = 0;
    v15 = &v14;
    v16 = 0x5002000000;
    v17 = __Block_byref_object_copy__27;
    v18 = __Block_byref_object_dispose__27;
    memset(v19, 0, sizeof(v19));
    v20 = 1065353216;
    v13[0] = v9;
    v13[1] = 0x40000000;
    v13[2] = ___ZN2CI11GraphObject23graphviz_representationEPS0_PK10__CFStringP7CGImage_block_invoke_2;
    v13[3] = &unk_1E2EC88B8;
    v13[4] = &v14;
    v13[5] = &v22;
    v13[6] = v8;
    CI::GraphObject::traverse_preorder_stoppable((uint64_t)this, 0, 0, 0, (uint64_t)v13);
    v10 = CIGVNodeCreate();
    CIGVNodeSetColor(v10, (const char *)0xD);
    CIGVNodeSetShape(v10, 0);
    CIGVNodeSetLabel(v10, (const char *)a2);
    CIGVNodeAddImage(v10, (const char *)a3);
    CIGVGraphAddNode(v8, (const char *)v10);
    v11 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>(v23 + 5, &v35);
    CIGVGraphAddEdge(v8, (const char *)v11[3], (uint64_t)v10);
    CFRelease(a2);
    CFRelease(v10);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::clear(v23 + 5);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::clear(v15 + 5);
    _Block_object_dispose(&v14, 8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v19);
    _Block_object_dispose(&v22, 8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v27);
    _Block_object_dispose(v29, 8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v30);
    _Block_object_dispose(v32, 8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v33);
  }
  return v8;
}

uint64_t __Block_byref_object_copy__98(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__99(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

uint64_t __Block_byref_object_copy__100_0(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__101_0(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

uint64_t __Block_byref_object_copy__102(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__103(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

BOOL ___ZN2CI11GraphObject23graphviz_representationEPS0_PK10__CFStringP7CGImage_block_invoke(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;

  v13 = a2;
  v3 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &v13);
  if (!v3)
  {
    if (!CI_GRAPHVIZ_INTERNAL()
      && (*(int (**)(_QWORD *))(*v13 + 40))(v13) >= 2
      && (*(int (**)(_QWORD *))(*v13 + 40))(v13) >= 1)
    {
      v4 = 0;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v6 = v5 + 40;
        v7 = *(_QWORD *)(v5 + 64);
        v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v13 + 48))(v13, v4);
        v14 = &v12;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v6, &v12, (uint64_t)&std::piecewise_construct, &v14)+ 6) = v7;
        v4 = (v4 + 1);
      }
      while ((int)v4 < (*(int (**)(_QWORD *))(*v13 + 40))(v13));
    }
    v8 = (char *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v13 + 72))(v13, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    CIGVGraphAddNode(*(void **)(a1 + 56), v8);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
    v14 = (uint64_t *)&v13;
    std::__hash_table<std::__hash_value_type<CI::Node const*,unsigned long>,std::__unordered_map_hasher<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,true>,std::__unordered_map_equal<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::equal_to<CI::Node const*>,std::hash<CI::Node const*>,true>,std::allocator<std::__hash_value_type<CI::Node const*,unsigned long>>>::__emplace_unique_key_args<CI::Node const*,std::piecewise_construct_t const&,std::tuple<CI::Node const* const&>,std::tuple<>>(v9, &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v8;
    v14 = 0;
    v10 = 0;
    if ((*(unsigned int (**)(_QWORD *))(*v13 + 16))(v13) - 28 <= 0x18)
    {
      v10 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v13 + 384))(v13);
      v14 = v10;
    }
    if ((*(unsigned int (**)(_QWORD *))(*v13 + 16))(v13) - 2 <= 0x17)
    {
      v10 = (uint64_t *)v13[10];
      v14 = v10;
    }
    if (v10)
    {
      if (std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}*>>::find<unsigned long long>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), (unint64_t *)&v14))
      {
        CIGVNodeSetColor(v8, (const char *)0xF);
      }
      std::__hash_table<CI::OtherDigest,std::hash<CI::OtherDigest>,std::equal_to<CI::OtherDigest>,std::allocator<CI::OtherDigest>>::__emplace_unique_key_args<CI::OtherDigest,CI::OtherDigest const&>(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40, (unint64_t *)&v14, &v14);
    }
  }
  return v3 != 0;
}

BOOL ___ZN2CI11GraphObject23graphviz_representationEPS0_PK10__CFStringP7CGImage_block_invoke_2(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v3 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &v10);
  if (!v3)
  {
    std::__hash_table<CI::Node const*,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,std::allocator<CI::Node const*>>::__emplace_unique_key_args<CI::Node const*,CI::Node const* const&>(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, &v10, &v10);
    v4 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), &v10)[3];
    if ((*(int (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10) >= 1)
    {
      v5 = 0;
      do
      {
        v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v5);
        v7 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>(v6, &v9);
        CIGVGraphAddEdge(*(void **)(a1 + 48), (const char *)v7[3], v4);
        v5 = (v5 + 1);
      }
      while ((int)v5 < (*(int (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10));
    }
  }
  return v3 != 0;
}

_QWORD *std::vector<CI::TraverseVisit>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<CGRect>::__vallocate[abi:nn180100](a1, v5 >> 5);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5 - 7);
    a1[1] = &v6[v5];
  }
  return a1;
}

_QWORD *std::__hash_table<CI::OtherDigest,std::hash<CI::OtherDigest>,std::equal_to<CI::OtherDigest>,std::allocator<CI::OtherDigest>>::__emplace_unique_key_args<CI::OtherDigest,CI::OtherDigest const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}*>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

uint64_t perfInit()
{
  uint64_t result;

  mach_timebase_info((mach_timebase_info_t)&timebase);
  result = mach_absolute_time();
  g_initTime = result;
  return result;
}

double timeElapsedSinceInit()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v0 = g_initTime;
  if (!g_initTime)
  {
    mach_timebase_info((mach_timebase_info_t)&timebase);
    v0 = mach_absolute_time();
    g_initTime = v0;
  }
  v1 = mach_absolute_time();
  LODWORD(v2) = timebase;
  LODWORD(v3) = *(_DWORD *)algn_1EE284764;
  return (double)(v1 - v0) * (double)v2 / (double)v3 / 1000000000.0;
}

double timestampToSeconds(unint64_t a1, double a2, double a3, double a4)
{
  LODWORD(a3) = timebase;
  LODWORD(a4) = *(_DWORD *)algn_1EE284764;
  return (double)a1 * (double)*(unint64_t *)&a3 / (double)*(unint64_t *)&a4 / 1000000000.0;
}

uint64_t PixelSumASM(uint8x16_t *a1, int a2, int a3, unsigned int a4, _DWORD *a5, uint32x4_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint16x8_t *v9;
  uint8x16_t *v10;
  _DWORD *v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  uint8x16_t v21;
  uint16x8_t *v22;
  uint8x16_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint16x8_t *v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int v32;
  int64x2_t v33;
  int64x2_t v34;
  int v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint32x4_t *v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint32x4_t *v41;
  uint32x4_t v42;
  uint32x4_t v43;
  uint32x4_t v44;
  uint32x4_t v45;

  if ((a2 & 0x1F) != 0 || (a3 & 1) != 0 || (a1 & 0xF) != 0 || (a4 & 0xF) != 0)
    return -1;
  v9 = (uint16x8_t *)&a9;
  v10 = (uint8x16_t *)((char *)a1 + a4 * (unint64_t)(a3 >> 1));
  v11 = (_DWORD *)((char *)a5 + 2 * a3);
  v12 = a4 - a2;
  v13 = 1;
  v14 = a2 >> 5;
  v15 = 128;
  v16 = 0uLL;
  v17 = 0uLL;
  do
  {
    v18 = *a1;
    v19 = a1[1];
    v20 = *v10;
    v21 = v10[1];
    a1 += 2;
    v10 += 2;
    v16 = vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(v16, *(uint8x8_t *)v18.i8), v18), *(uint8x8_t *)v19.i8), v19);
    v17 = vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(v17, *(uint8x8_t *)v20.i8), v20), *(uint8x8_t *)v21.i8), v21);
    *v9 = vaddw_u8(vmovl_u8(*(uint8x8_t *)v18.i8), *(uint8x8_t *)v20.i8);
    v9[1] = vaddw_high_u8(vmovl_high_u8(v18), v20);
    v22 = v9 + 2;
    *v22 = vaddw_u8(vmovl_u8(*(uint8x8_t *)v19.i8), *(uint8x8_t *)v21.i8);
    v22[1] = vaddw_high_u8(vmovl_high_u8(v19), v21);
    v9 = v22 + 2;
    --v14;
  }
  while (v14);
  while (1)
  {
    a1 = (uint8x16_t *)((char *)a1 + v12);
    v10 = (uint8x16_t *)((char *)v10 + v12);
    v33 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(v16));
    v34 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(v17));
    *a5++ = vpaddq_s64(v33, v33).u32[0];
    *v11++ = vpaddq_s64(v34, v34).u32[0];
    v16 = 0uLL;
    v17 = 0uLL;
    v9 = (uint16x8_t *)((char *)v9 - 2 * a2);
    v32 = a2 >> 5;
    a3 -= 2;
    if (!a3 || (--v15, !v15))
    {
      v35 = a2 >> 4;
      if (--v13)
      {
        do
        {
          v39 = *v9;
          v40 = v9[1];
          *v9 = 0uLL;
          v9[1] = 0uLL;
          v9 += 2;
          v42 = *a6;
          v43 = a6[1];
          v41 = a6 + 2;
          v44 = *v41;
          v45 = v41[1];
          v41 -= 2;
          *v41 = vaddw_u16(v42, *(uint16x4_t *)v39.i8);
          v41[1] = vaddw_high_u16(v43, v39);
          v41 += 2;
          *v41 = vaddw_u16(v44, *(uint16x4_t *)v40.i8);
          v41[1] = vaddw_high_u16(v45, v40);
          a6 = v41 + 2;
          --v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = *v9;
          v37 = v9[1];
          *v9 = 0uLL;
          v9[1] = 0uLL;
          v9 += 2;
          *a6 = vmovl_u16(*(uint16x4_t *)v36.i8);
          a6[1] = vmovl_high_u16(v36);
          v38 = a6 + 2;
          *v38 = vmovl_u16(*(uint16x4_t *)v37.i8);
          v38[1] = vmovl_high_u16(v37);
          a6 = v38 + 2;
          --v35;
        }
        while (v35);
      }
      v9 = (uint16x8_t *)((char *)v9 - 2 * a2);
      a6 = (uint32x4_t *)((char *)a6 - 4 * a2);
      v32 = a2 >> 5;
      v15 = 128;
      if (!a3)
        break;
    }
    do
    {
      v23 = *a1;
      v24 = a1[1];
      v25 = *v10;
      v26 = v10[1];
      a1 += 2;
      v10 += 2;
      v28 = *v9;
      v29 = v9[1];
      v27 = v9 + 2;
      v16 = vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(v16, *(uint8x8_t *)v23.i8), v23), *(uint8x8_t *)v24.i8), v24);
      v17 = vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(v17, *(uint8x8_t *)v25.i8), v25), *(uint8x8_t *)v26.i8), v26);
      v30 = vaddw_u8(vaddw_u8(*v27, *(uint8x8_t *)v24.i8), *(uint8x8_t *)v26.i8);
      v31 = vaddw_high_u8(vaddw_high_u8(v27[1], v24), v26);
      v27 -= 2;
      *v27 = vaddw_u8(vaddw_u8(v28, *(uint8x8_t *)v23.i8), *(uint8x8_t *)v25.i8);
      v27[1] = vaddw_high_u8(vaddw_high_u8(v29, v23), v25);
      v27 += 2;
      *v27 = v30;
      v27[1] = v31;
      v9 = v27 + 2;
      --v32;
    }
    while (v32);
  }
  return 0;
}

float MemDiff32(int32x4_t *a1, int32x4_t *a2, int a3)
{
  int32x4_t v3;
  int32x4_t v4;
  int v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int64x2_t v10;
  float result;

  v3 = 0uLL;
  v4 = 0uLL;
  v5 = a3 >> 3;
  do
  {
    v6 = *a1;
    v7 = a1[1];
    v8 = *a2;
    v9 = a2[1];
    a1 += 2;
    a2 += 2;
    v3 = vabaq_s32(v3, v6, v8);
    v4 = vabaq_s32(v4, v7, v9);
    --v5;
  }
  while (v5);
  v10 = (int64x2_t)vpaddlq_u32((uint32x4_t)vaddq_s32(v3, v4));
  LODWORD(result) = vpaddq_s64(v10, v10).u32[0];
  return result;
}

float MemDiffZeroMean32(int32x4_t *a1, unsigned int a2, int32x4_t *a3, unsigned int a4, int a5)
{
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int64x2_t v14;
  float result;

  v5 = 0uLL;
  v6 = 0uLL;
  v7 = vdupq_n_s32(a2);
  v8 = vdupq_n_s32(a4);
  v9 = a5 >> 3;
  do
  {
    v10 = *a1;
    v11 = a1[1];
    v12 = *a3;
    v13 = a3[1];
    a1 += 2;
    a3 += 2;
    v5 = vabaq_s32(v5, vsubq_s32(v10, v7), vsubq_s32(v12, v8));
    v6 = vabaq_s32(v6, vsubq_s32(v11, v7), vsubq_s32(v13, v8));
    --v9;
  }
  while (v9);
  v14 = (int64x2_t)vpaddlq_u32((uint32x4_t)vaddq_s32(v5, v6));
  LODWORD(result) = vpaddq_s64(v14, v14).u32[0];
  return result;
}

float MemSum32(int32x4_t *a1, int a2)
{
  int32x4_t v2;
  int32x4_t v3;
  int v4;
  int32x4_t v5;
  int32x4_t v6;
  int64x2_t v7;
  float result;

  v2 = 0uLL;
  v3 = 0uLL;
  v4 = a2 >> 3;
  do
  {
    v5 = *a1;
    v6 = a1[1];
    a1 += 2;
    v2 = vaddq_s32(v2, v5);
    v3 = vaddq_s32(v3, v6);
    --v4;
  }
  while (v4);
  v7 = (int64x2_t)vpaddlq_u32((uint32x4_t)vaddq_s32(v2, v3));
  LODWORD(result) = vpaddq_s64(v7, v7).u32[0];
  return result;
}

uint64_t getCFPreferenceNumber(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  const __CFString *v4;
  const __CFString *v5;
  CFTypeID v6;
  uint64_t IntValue;
  CFTypeID v8;
  CFTypeID v9;
  unsigned int valuePtr;

  v4 = (const __CFString *)CFPreferencesCopyValue(a1, a2, (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (v4)
  {
    v5 = v4;
    v6 = CFGetTypeID(v4);
    if (v6 == CFStringGetTypeID())
    {
      IntValue = CFStringGetIntValue(v5);
      if ((int)IntValue <= 0)
      {
        IntValue = 1;
        if (CFStringCompare(v5, CFSTR("true"), 1uLL))
        {
          IntValue = 1;
          if (CFStringCompare(v5, CFSTR("yes"), 1uLL))
          {
            if (CFStringCompare(v5, CFSTR("false"), 1uLL) == kCFCompareEqualTo
              || CFStringCompare(v5, CFSTR("no"), 1uLL) == kCFCompareEqualTo
              || (IntValue = a3, CFStringCompare(v5, CFSTR("0"), 1uLL) == kCFCompareEqualTo))
            {
              IntValue = 0;
            }
          }
        }
      }
    }
    else
    {
      v8 = CFGetTypeID(v5);
      if (v8 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        if (CFNumberGetValue((CFNumberRef)v5, kCFNumberIntType, &valuePtr))
          IntValue = valuePtr;
        else
          IntValue = a3;
      }
      else
      {
        v9 = CFGetTypeID(v5);
        IntValue = a3;
        if (v9 == CFBooleanGetTypeID())
          IntValue = CFEqual(v5, (CFTypeRef)*MEMORY[0x1E0C9AE50]);
      }
    }
    CFRelease(v5);
    return IntValue;
  }
  return a3;
}

float getCFPreferenceFloat(const __CFString *a1, const __CFString *a2, float DoubleValue)
{
  const __CFNumber *v4;
  const __CFNumber *v5;
  CFTypeID v6;
  CFTypeID v7;
  int valuePtr;

  v4 = (const __CFNumber *)CFPreferencesCopyValue(a1, a2, (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (v4)
  {
    v5 = v4;
    v6 = CFGetTypeID(v4);
    if (v6 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      if (CFNumberGetValue(v5, kCFNumberFloatType, &valuePtr))
        DoubleValue = (float)valuePtr;
    }
    v7 = CFGetTypeID(v5);
    if (v7 == CFStringGetTypeID())
      DoubleValue = CFStringGetDoubleValue((CFStringRef)v5);
    CFRelease(v5);
  }
  return DoubleValue;
}

CI::RenderToBitmap *CI::RenderToBitmap::RenderToBitmap(CI::RenderToBitmap *this, CI::Bitmap *a2)
{
  unsigned int v3;
  uint64_t v4;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E2EBDA00;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = off_1E2EBC028;
  do
    v3 = __ldaxr(&dword_1ECF873D0[23]);
  while (__stlxr(v3 + 1, &dword_1ECF873D0[23]));
  *(_QWORD *)this = &off_1E2EBAD78;
  *((_QWORD *)this + 5) = &unk_1E2EBADD0;
  *((_QWORD *)this + 6) = a2;
  if (a2)
  {
    CI::Object::ref((uint64_t)a2);
    v4 = *((_QWORD *)this + 6);
    if (v4)
      *((_DWORD *)this + 8) = *(_DWORD *)(v4 + 104);
  }
  return this;
}

void CI::RenderToBitmap::~RenderToBitmap(CI::RenderToBitmap *this)
{
  CI::Object *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_1E2EBAD78;
  *((_QWORD *)this + 5) = &unk_1E2EBADD0;
  v2 = (CI::Object *)*((_QWORD *)this + 6);
  if (v2)
    CI::Object::unref(v2);
  *((_QWORD *)this + 5) = off_1E2EBC028;
  do
    v3 = __ldaxr(&dword_1ECF873D0[23]);
  while (__stlxr(v3 - 1, &dword_1ECF873D0[23]));
  CI::RenderDestination::~RenderDestination(this);
}

{
  CI::RenderToBitmap::~RenderToBitmap(this);
  JUMPOUT(0x194025AACLL);
}

void CI::RenderDestination::~RenderDestination(CI::RenderDestination *this)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = off_1E2EBDA00;
  v2 = (const void *)*((_QWORD *)this + 3);
  if (v2)
    CFAutorelease(v2);
  *((_QWORD *)this + 3) = 0;
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
    CFAutorelease(v3);
  *((_QWORD *)this + 2) = 0;
}

void `non-virtual thunk to'CI::RenderToBitmap::~RenderToBitmap(CI::RenderToBitmap *this)
{
  CI::RenderToBitmap::~RenderToBitmap((CI::RenderToBitmap *)((char *)this - 40));
}

{
  CI::RenderToBitmap::~RenderToBitmap((CI::RenderToBitmap *)((char *)this - 40));
  JUMPOUT(0x194025AACLL);
}

CFStringRef CI::RenderToBitmap::description(CI::RenderToBitmap *this)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("bitmap: %p"), *((_QWORD *)this + 6));
}

uint64_t CI::RenderToBitmap::render(CI::RenderToBitmap *this, CI::Image *a2, CI::Context *a3)
{
  double x;
  double y;
  double width;
  double height;
  CI::Image *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  const CI::RenderDestination *v22;
  uint64_t v23;
  _BYTE v25[80];
  unint64_t v26;
  unint64_t v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;

  v28.origin.x = (*(double (**)(CI::Image *))(*(_QWORD *)a2 + 88))(a2);
  v29 = CGRectInset(v28, 0.00100000005, 0.00100000005);
  v30 = CGRectIntegral(v29);
  x = v30.origin.x;
  y = v30.origin.y;
  width = v30.size.width;
  height = v30.size.height;
  v10 = (CI::Image *)(*(uint64_t (**)(CI::Image *))(*(_QWORD *)a2 + 240))(a2);
  v11 = (unint64_t)x;
  v12 = (unint64_t)y;
  v13 = *((_QWORD *)this + 6);
  v14 = *(unsigned int *)(v13 + 104);
  v15 = *(_QWORD *)(v13 + 96);
  v16 = CI::format_bytes_per_pixel(*(_DWORD *)(v13 + 104));
  v17 = (_QWORD *)*((_QWORD *)this + 6);
  v18 = v17[9];
  if (v17[10] - (unint64_t)x >= (unint64_t)width)
    v19 = (unint64_t)width;
  else
    v19 = v17[10] - v11;
  v20 = v17[11] - v12;
  if (v20 >= (unint64_t)height)
    v21 = (unint64_t)height;
  else
    v21 = v20;
  CI::Bitmap::Bitmap(v25, v18 + v15 * v12 + v16 * v11, v19, v21, v15, v14, v10);
  v31.size.width = (double)v26;
  v31.size.height = (double)v27;
  v31.origin.x = x;
  v31.origin.y = y;
  v23 = CI::image_render_to_bitmap(a3, a2, v10, v31, (CGColorSpace *)v25, this, v22);
  CI::Bitmap::~Bitmap((CI::Bitmap *)v25);
  return v23;
}

uint64_t CI::RenderToBitmap::type(CI::RenderToBitmap *this)
{
  return 81;
}

uint64_t CI::RenderToBitmap::pointer(CI::RenderToBitmap *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 6) + 72);
}

uint64_t CI::RenderToBitmap::width(CI::RenderToBitmap *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 6) + 80);
}

uint64_t CI::RenderToBitmap::height(CI::RenderToBitmap *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 6) + 88);
}

uint64_t `non-virtual thunk to'CI::RenderToBitmap::type(CI::RenderToBitmap *this)
{
  return 81;
}

uint64_t CI::RenderDestination::description(CI::RenderDestination *this)
{
  return 0;
}

uint64_t CI::RenderDestination::pointer(CI::RenderDestination *this)
{
  return 0;
}

uint64_t CI::RenderDestination::width(CI::RenderDestination *this)
{
  return 0;
}

uint64_t CI::RenderDestination::height(CI::RenderDestination *this)
{
  return 0;
}

uint64_t CI::InstanceCounted<(CI::Type)81>::type()
{
  return 81;
}

_QWORD *CI::InstanceCounted<(CI::Type)81>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBC028;
  do
    v1 = __ldaxr(&dword_1ECF873D0[23]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[23]));
  return result;
}

void CI::InstanceCounted<(CI::Type)81>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBC028;
  do
    v1 = __ldaxr(&dword_1ECF873D0[23]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[23]));
  JUMPOUT(0x194025AACLL);
}

CI::RenderToPixelBuffer *CI::RenderToPixelBuffer::RenderToPixelBuffer(CI::RenderToPixelBuffer *this, CFTypeRef cf)
{
  unsigned int v3;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E2EBDA00;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = off_1E2EBC050;
  do
    v3 = __ldaxr(&dword_1ECF873D0[24]);
  while (__stlxr(v3 + 1, &dword_1ECF873D0[24]));
  *(_QWORD *)this = &off_1E2EBE030;
  *((_QWORD *)this + 5) = &unk_1E2EBE088;
  *((_QWORD *)this + 6) = cf;
  if (cf)
    CFRetain(cf);
  return this;
}

void CI::RenderToPixelBuffer::~RenderToPixelBuffer(CI::RenderToPixelBuffer *this)
{
  const void *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_1E2EBE030;
  *((_QWORD *)this + 5) = &unk_1E2EBE088;
  v2 = (const void *)*((_QWORD *)this + 6);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 5) = off_1E2EBC050;
  do
    v3 = __ldaxr(&dword_1ECF873D0[24]);
  while (__stlxr(v3 - 1, &dword_1ECF873D0[24]));
  CI::RenderDestination::~RenderDestination(this);
}

{
  CI::RenderToPixelBuffer::~RenderToPixelBuffer(this);
  JUMPOUT(0x194025AACLL);
}

void `non-virtual thunk to'CI::RenderToPixelBuffer::~RenderToPixelBuffer(CI::RenderToPixelBuffer *this)
{
  CI::RenderToPixelBuffer::~RenderToPixelBuffer((CI::RenderToPixelBuffer *)((char *)this - 40));
}

{
  CI::RenderToPixelBuffer::~RenderToPixelBuffer((CI::RenderToPixelBuffer *)((char *)this - 40));
  JUMPOUT(0x194025AACLL);
}

CFStringRef CI::RenderToPixelBuffer::description(CI::RenderToPixelBuffer *this)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("pixelbuffer: %p"), *((_QWORD *)this + 6));
}

CI::RenderTask *CI::RenderToPixelBuffer::render(CI **this, CI::Image *a2, CI::Context *a3)
{
  int v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  uint64_t v22;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  __CVBuffer *v32;
  CI::RenderTask *v33;
  NSObject *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  __IOSurface *Surface;
  __IOSurface *v41;
  uint8_t *v42;
  _QWORD *v43;
  uint8_t *v44;
  CI::AffineImage *v45;
  CI::AffineImage *v46;
  const CI::RenderDestination *v47;
  uint64_t v48;
  CFTypeRef v49;
  NSObject *v50;
  os_signpost_id_t v51;
  uint64_t v52;
  NSObject *v53;
  os_signpost_id_t v54;
  NSObject *v55;
  int is_ycc_full_range;
  size_t v58;
  size_t v59;
  char is_packed;
  char is_ycc_444;
  char is_ycc_422;
  char is_ycc_420;
  _BOOL4 is_deep;
  int is_half_float;
  _QWORD v66[18];
  int v67;
  _QWORD v68[5];
  int v69;
  int v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  BOOL v76;
  _QWORD v77[5];
  _QWORD v78[5];
  _QWORD v79[5];
  _BYTE buf[24];
  uint64_t v81;
  __int128 v82;
  uint8_t v83[8];
  uint64_t v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;

  v84 = *MEMORY[0x1E0C80C00];
  v6 = CI::format_from_CVPixelBuffer(this[6], a2);
  if (!CI::format_is_ycc_biplanar(v6))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v81 = 0;
    v15 = (*(double (**)(CI::Image *))(*(_QWORD *)a2 + 88))(a2);
    v17 = v16;
    v19 = v18;
    v21 = v20;
    v22 = (*(uint64_t (**)(CI::Image *))(*(_QWORD *)a2 + 240))(a2);
    v88.origin.x = v15;
    v88.origin.y = v17;
    v88.size.width = v19;
    v88.size.height = v21;
    v89 = CGRectInset(v88, 0.00100000005, 0.00100000005);
    v90 = CGRectIntegral(v89);
    x = v90.origin.x;
    y = v90.origin.y;
    width = v90.size.width;
    height = v90.size.height;
    v27 = (unint64_t)v90.origin.x;
    v28 = (unint64_t)v90.origin.y;
    v29 = (unint64_t)v90.size.width;
    v30 = (unint64_t)v90.size.height;
    v31 = CI::format_bytes_per_pixel(v6);
    v32 = this[6];
    v66[0] = MEMORY[0x1E0C809B0];
    v66[1] = 0x40000000;
    v66[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_17;
    v66[3] = &unk_1E2EC8C88;
    v66[6] = v28;
    v66[7] = v27;
    v66[8] = v31;
    v66[9] = v29;
    v67 = v6;
    v66[10] = v30;
    v66[11] = v22;
    *(CGFloat *)&v66[12] = x;
    *(CGFloat *)&v66[13] = y;
    *(CGFloat *)&v66[14] = width;
    *(CGFloat *)&v66[15] = height;
    v66[4] = buf;
    v66[5] = this;
    v66[16] = a3;
    v66[17] = a2;
    if (PixelBufferApplyPlaneBlock(v32, (uint64_t)v66))
    {
      v33 = (CI::RenderTask *)operator new();
      CI::RenderTask::RenderTask(v33, "Could not access memory of destination pixelbuffer.");
    }
    else
    {
      v33 = *(CI::RenderTask **)(*(_QWORD *)&buf[8] + 24);
    }
    _Block_object_dispose(buf, 8);
    return v33;
  }
  is_ycc_full_range = CI::format_is_ycc_full_range(v6);
  is_deep = CI::format_is_deep(v6);
  is_ycc_420 = CI::format_is_ycc_420(v6);
  is_ycc_422 = CI::format_is_ycc_422(v6);
  is_ycc_444 = CI::format_is_ycc_444(v6);
  is_packed = CI::format_is_packed(v6);
  is_half_float = CI::format_is_half_float(v6);
  v59 = CVPixelBufferGetWidth(this[6]);
  v58 = CVPixelBufferGetHeight(this[6]);
  v85.origin.x = (*(double (**)(CI::Image *))(*(_QWORD *)a2 + 88))(a2);
  v86 = CGRectInset(v85, 0.00100000005, 0.00100000005);
  v87 = CGRectIntegral(v86);
  v7 = v87.origin.x;
  v8 = v87.origin.y;
  v9 = v87.size.width;
  v10 = v87.size.height;
  if (!CGRectIsNull(v87))
  {
    v91.origin.x = v7;
    v91.origin.y = v8;
    v91.size.width = v9;
    v91.size.height = v10;
    if (CGRectIsInfinite(v91))
    {
      v12 = 0xFFFFFFFFLL;
      v11 = 0xFFFFFFFFLL;
      v14 = -2147483647;
      v13 = -2147483647;
    }
    else
    {
      v92.origin.x = v7;
      v92.origin.y = v8;
      v92.size.width = v9;
      v92.size.height = v10;
      v93 = CGRectInset(v92, 0.000001, 0.000001);
      v94 = CGRectIntegral(v93);
      v13 = (int)v94.origin.x;
      v14 = (int)v94.origin.y;
      v11 = (unint64_t)v94.size.width;
      v12 = (unint64_t)v94.size.height;
    }
    if (v13 == -2147483647 && v14 == -2147483647 && v11 == 0xFFFFFFFF)
    {
      v14 = -2147483647;
      LODWORD(v11) = -1;
      if (!v12 || v12 == 0xFFFFFFFF)
      {
        v13 = -2147483647;
        goto LABEL_20;
      }
    }
    else if (!v11 || !v12)
    {
      goto LABEL_20;
    }
    LODWORD(v11) = v13 + v11 + 1 - (v13 & 0xFFFFFFFE | (v13 + v11 + 1) & 1);
    LODWORD(v12) = v12 + v14 + 1 - (v14 & 0xFFFFFFFE | (v12 + v14 + 1) & 1);
    v13 &= ~1u;
    v14 &= ~1u;
    goto LABEL_20;
  }
  LODWORD(v11) = 0;
  LODWORD(v12) = 0;
  v13 = 0x7FFFFFFF;
  v14 = 0x7FFFFFFF;
LABEL_20:
  v34 = ci_logger_performance();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "render";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v59;
    *(_WORD *)&buf[22] = 2048;
    v81 = v58;
    LOWORD(v82) = 2082;
    *(_QWORD *)((char *)&v82 + 2) = CI::name_for_format(v6);
    _os_log_impl(&dword_1921E4000, v34, OS_LOG_TYPE_INFO, "%{public}s CI_CONVERSIONS: Rendered via an intermediate YCC444 buffer instead of directly to a (%zux%zu) %{public}s pixel buffer.", buf, 0x2Au);
  }
  if (is_deep)
    v35 = 1800;
  else
    v35 = 264;
  if (is_deep)
    v36 = 1815491698;
  else
    v36 = 1380401729;
  if (is_half_float)
    v37 = 2056;
  else
    v37 = v35;
  if (is_half_float)
    v38 = 1380411457;
  else
    v38 = v36;
  v39 = (*(uint64_t (**)(CI::Context *, uint64_t))(*(_QWORD *)a3 + 544))(a3, v37);
  Surface = CreateSurface((__CVBuffer *)v11, (__CVBuffer *)v12, (void *)v39, v38, 0);
  if (Surface)
  {
    v41 = Surface;
    if (is_deep)
    {
      *(_QWORD *)buf = 0xFFFF800080000000;
      *(_QWORD *)v83 = 0xFFFF800080000040;
      v42 = v83;
      if (is_ycc_full_range)
        v42 = buf;
      v79[0] = MEMORY[0x1E0C809B0];
      v79[1] = 0x40000000;
      v79[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke;
      v79[3] = &__block_descriptor_tmp_30;
      v79[4] = v42;
      v43 = v79;
    }
    else if (is_half_float)
    {
      *(_QWORD *)buf = 0x3C00000000000000;
      v78[0] = MEMORY[0x1E0C809B0];
      v78[1] = 0x40000000;
      v78[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_2;
      v78[3] = &__block_descriptor_tmp_4_4;
      v78[4] = buf;
      v43 = v78;
    }
    else
    {
      *(_DWORD *)buf = -8355840;
      *(_DWORD *)v83 = -8355824;
      v44 = v83;
      if (is_ycc_full_range)
        v44 = buf;
      v77[0] = MEMORY[0x1E0C809B0];
      v77[1] = 0x40000000;
      v77[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_3;
      v77[3] = &__block_descriptor_tmp_7_5;
      v77[4] = v44;
      v43 = v77;
    }
    SurfaceApplyPlaneBlock(Surface, (uint64_t)v43);
    v45 = (CI::AffineImage *)operator new();
    *(_QWORD *)buf = 0x3FF0000000000000;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    v81 = 0x3FF0000000000000;
    *(double *)&v82 = (double)-v13;
    *((double *)&v82 + 1) = (double)-v14;
    v46 = CI::AffineImage::AffineImage(v45, a2, (const CI::Affine *)buf, 0);
    v95.origin.x = (*(double (**)(CI::AffineImage *))(*(_QWORD *)v46 + 88))(v46);
    v33 = CI::image_render_to_surface(a3, v45, v41, v95, (__IOSurface *)this, v47);
    v48 = (*(uint64_t (**)(CI::Context *))(*(_QWORD *)a3 + 272))(a3);
    v49 = CI::RenderTask::waitUntilCompleted((uint64_t)v33, v48);
    if (v49)
      CFRelease(v49);
    CI::Object::unref(v45);
    v50 = ci_signpost_log_render();
    v51 = (*(uint64_t (**)(CI::Context *))(*(_QWORD *)a3 + 272))(a3) << 32;
    if (v51 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v50))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v50, OS_SIGNPOST_INTERVAL_BEGIN, v51, "convert_YCC444_to_420", (const char *)&unk_192520C83, buf, 2u);
    }
    v52 = (*(uint64_t (**)(CI::Context *))(*(_QWORD *)a3 + 272))(a3);
    TimerBase::TimerBase((uint64_t)buf, v52, 0, (uint64_t)"convert_YCC444_to_420", 29);
    v68[0] = MEMORY[0x1E0C809B0];
    v68[1] = 0x40000000;
    v68[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_8;
    v68[3] = &__block_descriptor_tmp_16_3;
    v68[4] = this;
    v71 = is_packed;
    v69 = v13;
    v70 = v14;
    v72 = is_ycc_444;
    v73 = is_ycc_422;
    v74 = is_ycc_420;
    v75 = is_half_float;
    v76 = is_deep;
    SurfaceApplyPlaneReadOnlyBlock(v41, (uint64_t)v68);
    CFRelease(v41);
    v53 = ci_signpost_log_render();
    v54 = *(_QWORD *)&buf[8];
    if ((unint64_t)(*(_QWORD *)&buf[8] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v55 = v53;
      if (os_signpost_enabled(v53))
      {
        *(_WORD *)v83 = 0;
        _os_signpost_emit_with_name_impl(&dword_1921E4000, v55, OS_SIGNPOST_INTERVAL_END, v54, "convert_YCC444_to_420", (const char *)&unk_192520C83, v83, 2u);
      }
    }
    TimerBase::~TimerBase((TimerBase *)buf);
  }
  else
  {
    v33 = (CI::RenderTask *)operator new();
    CI::RenderTask::RenderTask(v33, "Could not allocate memory for intermediate 444 buffer.");
  }
  return v33;
}

void ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke(uint64_t a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  memset_pattern8(__b, *(const void **)(a1 + 32), a6 * a5);
}

void ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_2(uint64_t a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  memset_pattern8(__b, *(const void **)(a1 + 32), a6 * a5);
}

void ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_3(uint64_t a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  memset_pattern4(__b, *(const void **)(a1 + 32), a6 * a5);
}

void ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  __CVBuffer *v7;
  _QWORD *v8;
  NSObject *v9;
  _QWORD v10[9];
  char v11;
  __int16 v12;
  _QWORD v13[9];
  char v14;
  __int16 v15;
  _QWORD v16[9];
  char v17;
  __int16 v18;
  _QWORD v19[9];
  char v20;
  __int16 v21;

  v6 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 48))
  {
    v7 = *(__CVBuffer **)(v6 + 48);
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 0x40000000;
    v19[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_2_9;
    v19[3] = &__block_descriptor_tmp_10_4;
    v19[4] = a2;
    v19[5] = a4;
    v19[6] = a5;
    v19[7] = a6;
    v19[8] = *(_QWORD *)(a1 + 40);
    v20 = *(_BYTE *)(a1 + 49);
    v21 = *(_WORD *)(a1 + 50);
    v8 = v19;
  }
  else if (*(_BYTE *)(a1 + 52))
  {
    v7 = *(__CVBuffer **)(v6 + 48);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 0x40000000;
    v16[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_3_11;
    v16[3] = &__block_descriptor_tmp_12_3;
    v16[4] = a2;
    v16[5] = a4;
    v16[6] = a5;
    v16[7] = a6;
    v16[8] = *(_QWORD *)(a1 + 40);
    v17 = *(_BYTE *)(a1 + 49);
    v18 = *(_WORD *)(a1 + 50);
    v8 = v16;
  }
  else
  {
    v7 = *(__CVBuffer **)(v6 + 48);
    if (*(_BYTE *)(a1 + 53))
    {
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 0x40000000;
      v13[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_4;
      v13[3] = &__block_descriptor_tmp_13;
      v13[4] = a2;
      v13[5] = a4;
      v13[6] = a5;
      v13[7] = a6;
      v13[8] = *(_QWORD *)(a1 + 40);
      v14 = *(_BYTE *)(a1 + 49);
      v15 = *(_WORD *)(a1 + 50);
      v8 = v13;
    }
    else
    {
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 0x40000000;
      v10[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_5;
      v10[3] = &__block_descriptor_tmp_14_3;
      v10[4] = a2;
      v10[5] = a4;
      v10[6] = a5;
      v10[7] = a6;
      v10[8] = *(_QWORD *)(a1 + 40);
      v11 = *(_BYTE *)(a1 + 49);
      v12 = *(_WORD *)(a1 + 50);
      v8 = v10;
    }
  }
  if (PixelBufferApplyPlaneBlock(v7, (uint64_t)v8))
  {
    v9 = ci_logger_api();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_8_cold_1(v9);
  }
}

uint64_t ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_5(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;

  if (!a3)
    return CopyYCC444_to_Y_8(*(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_QWORD *)(result + 48), *(_QWORD *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  if (*(_BYTE *)(result + 72))
    return CopyYCC444_to_CbCr444_8(*(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_QWORD *)(result + 48), *(_QWORD *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  if (*(_BYTE *)(result + 73))
    return CopyYCC444_to_CbCr422_8(*(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_QWORD *)(result + 48), *(_QWORD *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, *(int *)(result + 68), a6);
  if (*(_BYTE *)(result + 74))
  {
    v6 = *(_DWORD *)(result + 68);
    if (v6 >= 0)
      v7 = *(_DWORD *)(result + 68);
    else
      v7 = v6 + 1;
    return CopyYCC444_to_CbCr_8(*(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_QWORD *)(result + 48), *(_QWORD *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, (uint64_t)v7 >> 1, a6);
  }
  return result;
}

void ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CI::Bitmap *v10;
  uint64_t v11;
  const CI::RenderDestination *v12;
  _QWORD v13[18];
  CGRect v14;

  v7 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 72) >= (unint64_t)(a4 - v7))
    v8 = a4 - v7;
  else
    v8 = *(_QWORD *)(a1 + 72);
  v10 = *(CI::Bitmap **)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 80) >= (unint64_t)(a5 - v9))
    v11 = a5 - v9;
  else
    v11 = *(_QWORD *)(a1 + 80);
  CI::Bitmap::Bitmap(v13, a2 + v9 * a6 + *(_QWORD *)(a1 + 64) * v7, v8, v11, a6, *(unsigned int *)(a1 + 144), *(_QWORD *)(a1 + 88));
  v14.origin.x = *(CGFloat *)(a1 + 96);
  v14.origin.y = *(CGFloat *)(a1 + 104);
  v14.size.width = (double)v13[10];
  v14.size.height = (double)v13[11];
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CI::image_render_to_bitmap(*(CI **)(a1 + 128), *(CI::Context **)(a1 + 136), *(CI::Image **)(a1 + 88), v14, (CGColorSpace *)v13, v10, v12);
  CI::Bitmap::~Bitmap((CI::Bitmap *)v13);
}

uint64_t CI::RenderToPixelBuffer::type(CI::RenderToPixelBuffer *this)
{
  return 82;
}

uint64_t CI::RenderToPixelBuffer::pointer(CI::RenderToPixelBuffer *this)
{
  return *((_QWORD *)this + 6);
}

size_t CI::RenderToPixelBuffer::width(CVPixelBufferRef *this)
{
  return CVPixelBufferGetWidth(this[6]);
}

size_t CI::RenderToPixelBuffer::height(CVPixelBufferRef *this)
{
  return CVPixelBufferGetHeight(this[6]);
}

uint64_t `non-virtual thunk to'CI::RenderToPixelBuffer::type(CI::RenderToPixelBuffer *this)
{
  return 82;
}

uint64_t CI::InstanceCounted<(CI::Type)82>::type()
{
  return 82;
}

_QWORD *CI::InstanceCounted<(CI::Type)82>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBC050;
  do
    v1 = __ldaxr(&dword_1ECF873D0[24]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[24]));
  return result;
}

void CI::InstanceCounted<(CI::Type)82>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBC050;
  do
    v1 = __ldaxr(&dword_1ECF873D0[24]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[24]));
  JUMPOUT(0x194025AACLL);
}

CI::RenderToSurface *CI::RenderToSurface::RenderToSurface(CI::RenderToSurface *this, CFTypeRef cf)
{
  unsigned int v3;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E2EBDA00;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = off_1E2EB7B58;
  do
    v3 = __ldaxr(&dword_1ECF873D0[25]);
  while (__stlxr(v3 + 1, &dword_1ECF873D0[25]));
  *(_QWORD *)this = &off_1E2EBC2C0;
  *((_QWORD *)this + 5) = &unk_1E2EBC318;
  *((_QWORD *)this + 6) = cf;
  if (cf)
    CFRetain(cf);
  return this;
}

void CI::RenderToSurface::~RenderToSurface(CI::RenderToSurface *this)
{
  const void *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_1E2EBC2C0;
  *((_QWORD *)this + 5) = &unk_1E2EBC318;
  v2 = (const void *)*((_QWORD *)this + 6);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 5) = off_1E2EB7B58;
  do
    v3 = __ldaxr(&dword_1ECF873D0[25]);
  while (__stlxr(v3 - 1, &dword_1ECF873D0[25]));
  CI::RenderDestination::~RenderDestination(this);
}

{
  CI::RenderToSurface::~RenderToSurface(this);
  JUMPOUT(0x194025AACLL);
}

void `non-virtual thunk to'CI::RenderToSurface::~RenderToSurface(CI::RenderToSurface *this)
{
  CI::RenderToSurface::~RenderToSurface((CI::RenderToSurface *)((char *)this - 40));
}

{
  CI::RenderToSurface::~RenderToSurface((CI::RenderToSurface *)((char *)this - 40));
  JUMPOUT(0x194025AACLL);
}

CFStringRef CI::RenderToSurface::description(CI::RenderToSurface *this)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("surface: %p"), *((_QWORD *)this + 6));
}

CI::RenderTask *CI::RenderToSurface::render(CI **this, CI::Image *a2, CI::Context *a3)
{
  uint64_t v6;
  unint64_t v7;
  _BOOL4 IsRowBytesAligned;
  _BOOL4 v9;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  const CI::RenderDestination *v14;
  _BOOL4 is_deep;
  char is_ycc_420;
  int CompressionTypeOfPlane;
  int v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  CI::RenderTask *v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  BOOL v32;
  _BOOL4 v33;
  int v34;
  int v35;
  int v36;
  size_t v37;
  size_t v38;
  __IOSurface *v39;
  size_t v40;
  int v41;
  size_t v43;
  size_t v44;
  unint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  NSObject *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  __IOSurface *Surface;
  __IOSurface *v56;
  uint64_t v57;
  uint8_t *v58;
  _QWORD *v59;
  uint8_t *v60;
  CI::AffineImage *v61;
  CI::AffineImage *v62;
  const CI::RenderDestination *v63;
  uint64_t v64;
  CFTypeRef v65;
  NSObject *v66;
  os_signpost_id_t v67;
  uint64_t v68;
  NSObject *v69;
  os_signpost_id_t v70;
  NSObject *v71;
  unint64_t v72;
  int v73;
  unsigned int v74;
  char v75;
  _BOOL4 v76;
  int v77;
  unsigned int v78;
  int is_ycc_full_range;
  char is_ycc_444;
  char is_ycc_422;
  int is_packed;
  int is_half_float;
  _QWORD v84[5];
  unsigned int v85;
  unsigned int v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  BOOL v92;
  _QWORD v93[5];
  _QWORD v94[5];
  _QWORD v95[5];
  _BYTE buf[24];
  uint64_t v97;
  __int128 v98;
  uint8_t v99[8];
  uint64_t v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;
  CGRect v112;
  CGRect v113;
  CGRect v114;
  CGRect v115;

  v100 = *MEMORY[0x1E0C80C00];
  v6 = CI::format_from_IOSurface(this[6], a2);
  v7 = (*(uint64_t (**)(CI::Context *, uint64_t))(*(_QWORD *)a3 + 544))(a3, v6);
  IsRowBytesAligned = SurfaceIsRowBytesAligned(this[6], v7);
  v9 = (IOSurfaceGetWidth(this[6]) & 1) == 0 && (IOSurfaceGetHeight(this[6]) & 1) == 0;
  v101.origin.x = (*(double (**)(CI::Image *))(*(_QWORD *)a2 + 88))(a2);
  v102 = CGRectInset(v101, 0.00100000005, 0.00100000005);
  v103 = CGRectIntegral(v102);
  x = v103.origin.x;
  y = v103.origin.y;
  width = v103.size.width;
  height = v103.size.height;
  if (CI::format_is_ycc_biplanar(v6))
  {
    is_ycc_full_range = CI::format_is_ycc_full_range(v6);
    is_deep = CI::format_is_deep(v6);
    is_ycc_420 = CI::format_is_ycc_420(v6);
    is_ycc_422 = CI::format_is_ycc_422(v6);
    is_ycc_444 = CI::format_is_ycc_444(v6);
    is_packed = CI::format_is_packed(v6);
    is_half_float = CI::format_is_half_float(v6);
    CompressionTypeOfPlane = IOSurfaceGetCompressionTypeOfPlane();
    v18 = 1;
    if (((*(uint64_t (**)(CI::Context *, uint64_t, uint64_t))(*(_QWORD *)a3 + 432))(a3, v6, 1) & 1) != 0)
      goto LABEL_36;
    v19 = ((CompressionTypeOfPlane != 0) | ~is_packed) & CI::Context::format_is_supported_for_output((uint64_t)a3, v6, 1);
    v20 = (*(uint64_t (**)(CI::Context *))(*(_QWORD *)a3 + 16))(a3);
    v21 = v19 & ~is_half_float;
    if (v20 != 74)
      v21 = v19;
    v73 = v21;
    v104.origin.x = x;
    v104.origin.y = y;
    v104.size.width = width;
    v104.size.height = height;
    v75 = is_ycc_420;
    v76 = is_deep;
    v77 = CompressionTypeOfPlane;
    if (CGRectIsNull(v104))
    {
      v22 = 0;
      v23 = 0;
      v24 = 0x7FFFFFFF;
      v25 = 0x7FFFFFFF;
    }
    else
    {
      v105.origin.x = x;
      v105.origin.y = y;
      v105.size.width = width;
      v105.size.height = height;
      if (CGRectIsInfinite(v105))
      {
        v24 = -2147483647;
        v22 = 0xFFFFFFFFLL;
        v23 = 0xFFFFFFFFLL;
        v25 = -2147483647;
      }
      else
      {
        v106.origin.x = x;
        v106.origin.y = y;
        v106.size.width = width;
        v106.size.height = height;
        v107 = CGRectInset(v106, 0.000001, 0.000001);
        v108 = CGRectIntegral(v107);
        v25 = (int)v108.origin.x;
        v24 = (int)v108.origin.y;
        v23 = (unint64_t)v108.size.width;
        v22 = (unint64_t)v108.size.height;
      }
    }
    if ((*(unsigned int (**)(CI::Context *))(*(_QWORD *)a3 + 16))(a3) != 77
      || ((*(uint64_t (**)(CI::Context *))(*(_QWORD *)a3 + 576))(a3) & 0x10) != 0)
    {
      v32 = ((v25 | v24) & 1) == 0;
      is_ycc_420 = v75;
      if (v32)
        v18 = v73;
      else
        v18 = 0;
      is_deep = v76;
      CompressionTypeOfPlane = v77;
      goto LABEL_36;
    }
    v27 = v23;
    if (v25 == -2147483647 && v24 == -2147483647 && v23 == 0xFFFFFFFF)
    {
      v28 = -2147483647;
      v29 = 0xFFFFFFFFLL;
      if (!v22)
      {
        v30 = 0;
        v31 = -2147483647;
        CompressionTypeOfPlane = v77;
        goto LABEL_31;
      }
      v30 = v22;
      v31 = -2147483647;
      CompressionTypeOfPlane = v77;
      if (v22 == 0xFFFFFFFF)
      {
LABEL_31:
        v33 = 0;
        if (v25 == v31)
        {
          v34 = v73;
          is_ycc_420 = v75;
          if (v24 == v28)
          {
            is_deep = v76;
            if (v27 == v29)
              v33 = v22 == v30;
          }
          else
          {
            is_deep = v76;
          }
        }
        else
        {
          is_ycc_420 = v75;
          is_deep = v76;
          v34 = v73;
        }
        v18 = (v9 && v33) & v34;
LABEL_36:
        v35 = (*(unsigned int (**)(CI::Context *))(*(_QWORD *)a3 + 16))(a3) != 76 || v9;
        v36 = v18 & v35;
        v37 = IOSurfaceGetHeight(this[6]);
        v38 = IOSurfaceGetWidth(this[6]);
        v39 = this[6];
        if (v37 <= v38)
          v40 = IOSurfaceGetWidth(v39);
        else
          v40 = IOSurfaceGetHeight(v39);
        if (v40 <= (*(uint64_t (**)(CI::Context *))(*(_QWORD *)a3 + 440))(a3))
          v41 = v36;
        else
          v41 = 0;
        if ((v41 & IsRowBytesAligned) == 1)
          goto LABEL_46;
        if (CompressionTypeOfPlane)
        {
          v26 = (CI::RenderTask *)operator new();
          IOSurfaceGetWidth(this[6]);
          IOSurfaceGetHeight(this[6]);
          CI::RenderTask::RenderTask(v26, "Failure to render to compressed surface of %zu x %zu");
          return v26;
        }
        v43 = IOSurfaceGetWidth(this[6]);
        v44 = IOSurfaceGetHeight(this[6]);
        v110.origin.x = x;
        v110.origin.y = y;
        v110.size.width = width;
        v110.size.height = height;
        if (CGRectIsNull(v110))
        {
          v45 = 0;
          v72 = 0;
          v74 = 0x7FFFFFFF;
          v78 = 0x7FFFFFFF;
LABEL_65:
          v49 = ci_logger_performance();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "render";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v43;
            *(_WORD *)&buf[22] = 2048;
            v97 = v44;
            LOWORD(v98) = 2082;
            *(_QWORD *)((char *)&v98 + 2) = CI::name_for_format(v6);
            _os_log_impl(&dword_1921E4000, v49, OS_LOG_TYPE_INFO, "%{public}s CI_CONVERSIONS: Rendered via an intermediate YCC444 buffer instead of directly to a (%zux%zu) %{public}s surface.", buf, 0x2Au);
          }
          if (is_deep)
            v50 = 1800;
          else
            v50 = 264;
          if (is_deep)
            v51 = 1815491698;
          else
            v51 = 1380401729;
          if (is_half_float)
            v52 = 2056;
          else
            v52 = v50;
          if (is_half_float)
            v53 = 1380411457;
          else
            v53 = v51;
          v54 = (void *)(*(uint64_t (**)(CI::Context *, uint64_t))(*(_QWORD *)a3 + 544))(a3, v52);
          Surface = CreateSurface((__CVBuffer *)v45, (__CVBuffer *)v72, v54, v53, 0);
          if (Surface)
          {
            v56 = Surface;
            v57 = MEMORY[0x1E0C809B0];
            if (is_deep)
            {
              *(_QWORD *)buf = 0xFFFF800080000000;
              *(_QWORD *)v99 = 0xFFFF800080000040;
              v58 = v99;
              if (is_ycc_full_range)
                v58 = buf;
              v95[0] = MEMORY[0x1E0C809B0];
              v95[1] = 0x40000000;
              v95[2] = ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke;
              v95[3] = &__block_descriptor_tmp_31;
              v95[4] = v58;
              v59 = v95;
            }
            else if (is_half_float)
            {
              *(_QWORD *)buf = 0x3C00000000000000;
              v94[0] = MEMORY[0x1E0C809B0];
              v94[1] = 0x40000000;
              v94[2] = ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_2;
              v94[3] = &__block_descriptor_tmp_4_5;
              v94[4] = buf;
              v59 = v94;
            }
            else
            {
              *(_DWORD *)buf = -8355840;
              *(_DWORD *)v99 = -8355824;
              v60 = v99;
              if (is_ycc_full_range)
                v60 = buf;
              v93[0] = MEMORY[0x1E0C809B0];
              v93[1] = 0x40000000;
              v93[2] = ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_3;
              v93[3] = &__block_descriptor_tmp_7_6;
              v93[4] = v60;
              v59 = v93;
            }
            SurfaceApplyPlaneBlock(Surface, (uint64_t)v59);
            v61 = (CI::AffineImage *)operator new();
            *(_QWORD *)buf = 0x3FF0000000000000;
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)&buf[16] = 0;
            v97 = 0x3FF0000000000000;
            *(double *)&v98 = (double)-v74;
            *((double *)&v98 + 1) = (double)-v78;
            v62 = CI::AffineImage::AffineImage(v61, a2, (const CI::Affine *)buf, 0);
            v115.origin.x = (*(double (**)(CI::AffineImage *))(*(_QWORD *)v62 + 88))(v62);
            v26 = CI::image_render_to_surface(a3, v61, v56, v115, (__IOSurface *)this, v63);
            v64 = (*(uint64_t (**)(CI::Context *))(*(_QWORD *)a3 + 272))(a3);
            v65 = CI::RenderTask::waitUntilCompleted((uint64_t)v26, v64);
            if (v65)
              CFAutorelease(v65);
            CI::Object::unref(v61);
            v66 = ci_signpost_log_render();
            v67 = (*(uint64_t (**)(CI::Context *))(*(_QWORD *)a3 + 272))(a3) << 32;
            if (v67 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v66))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl(&dword_1921E4000, v66, OS_SIGNPOST_INTERVAL_BEGIN, v67, "convert_YCC444_to_420", (const char *)&unk_192520C83, buf, 2u);
            }
            v68 = (*(uint64_t (**)(CI::Context *))(*(_QWORD *)a3 + 272))(a3);
            TimerBase::TimerBase((uint64_t)buf, v68, 0, (uint64_t)"convert_YCC444_to_420", 29);
            v84[0] = v57;
            v84[1] = 0x40000000;
            v84[2] = ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_8;
            v84[3] = &__block_descriptor_tmp_16_4;
            v84[4] = this;
            v87 = is_packed;
            v85 = v74;
            v86 = v78;
            v88 = is_ycc_444;
            v89 = is_ycc_422;
            v90 = is_ycc_420;
            v91 = is_half_float;
            v92 = is_deep;
            SurfaceApplyPlaneReadOnlyBlock(v56, (uint64_t)v84);
            CFRelease(v56);
            v69 = ci_signpost_log_render();
            v70 = *(_QWORD *)&buf[8];
            if ((unint64_t)(*(_QWORD *)&buf[8] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v71 = v69;
              if (os_signpost_enabled(v69))
              {
                *(_WORD *)v99 = 0;
                _os_signpost_emit_with_name_impl(&dword_1921E4000, v71, OS_SIGNPOST_INTERVAL_END, v70, "convert_YCC444_to_420", (const char *)&unk_192520C83, v99, 2u);
              }
            }
            TimerBase::~TimerBase((TimerBase *)buf);
          }
          else
          {
            v26 = (CI::RenderTask *)operator new();
            CI::RenderTask::RenderTask(v26, "Could not allocate memory.");
          }
          return v26;
        }
        v111.origin.x = x;
        v111.origin.y = y;
        v111.size.width = width;
        v111.size.height = height;
        if (CGRectIsInfinite(v111))
        {
          v45 = 0xFFFFFFFFLL;
          v46 = -2147483647;
          v47 = -2147483647;
          v48 = 0xFFFFFFFFLL;
        }
        else
        {
          v112.origin.x = x;
          v112.origin.y = y;
          v112.size.width = width;
          v112.size.height = height;
          v113 = CGRectInset(v112, 0.000001, 0.000001);
          v114 = CGRectIntegral(v113);
          v46 = (int)v114.origin.x;
          v47 = (int)v114.origin.y;
          v45 = (unint64_t)v114.size.width;
          v48 = (unint64_t)v114.size.height;
        }
        if (v46 == -2147483647 && v47 == -2147483647 && v45 == 0xFFFFFFFF)
        {
          v47 = -2147483647;
          v45 = 0xFFFFFFFFLL;
          if (!v48 || v48 == 0xFFFFFFFF)
          {
            v72 = v48;
            v78 = -2147483647;
            v74 = -2147483647;
            goto LABEL_65;
          }
        }
        else if (!v45 || !v48)
        {
          v72 = v48;
          v74 = v46;
          v78 = v47;
          goto LABEL_65;
        }
        v45 = (int)(v45 + v46 + 1 - (v46 & 0xFFFFFFFE | (v45 + v46 + 1) & 1));
        v72 = (int)(v48 + v47 + 1 - (v47 & 0xFFFFFFFE | (v48 + v47 + 1) & 1));
        v74 = v46 & 0xFFFFFFFE;
        v78 = v47 & 0xFFFFFFFE;
        goto LABEL_65;
      }
    }
    else
    {
      v30 = v22;
      v29 = v23;
      v28 = v24;
      v31 = v25;
      CompressionTypeOfPlane = v77;
      if (!v27)
        goto LABEL_31;
      v30 = v22;
      v29 = v27;
      v28 = v24;
      v31 = v25;
      if (!v22)
        goto LABEL_31;
    }
    v31 = v25 & 0xFFFFFFFE;
    v28 = v24 & 0xFFFFFFFE;
    v29 = (int)(v27 + v25 + 1 - (v25 & 0xFFFFFFFE | (v27 + v25 + 1) & 1));
    v30 = (int)(v22 + v24 + 1 - (v24 & 0xFFFFFFFE | (v22 + v24 + 1) & 1));
    goto LABEL_31;
  }
  if (IsRowBytesAligned)
  {
LABEL_46:
    v109.origin.x = x;
    v109.origin.y = y;
    v109.size.width = width;
    v109.size.height = height;
    return CI::image_render_to_surface(a3, a2, this[6], v109, (__IOSurface *)this, v14);
  }
  v26 = (CI::RenderTask *)operator new();
  CI::RenderTask::RenderTask(v26, "Surface rowbytes must be a multiple of %ld.");
  return v26;
}

void ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke(uint64_t a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  memset_pattern8(__b, *(const void **)(a1 + 32), a6 * a5);
}

void ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_2(uint64_t a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  memset_pattern8(__b, *(const void **)(a1 + 32), a6 * a5);
}

void ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_3(uint64_t a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  memset_pattern4(__b, *(const void **)(a1 + 32), a6 * a5);
}

void ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  __IOSurface *v7;
  _QWORD *v8;
  NSObject *v9;
  _QWORD v10[9];
  char v11;
  __int16 v12;
  _QWORD v13[9];
  char v14;
  __int16 v15;
  _QWORD v16[9];
  char v17;
  __int16 v18;
  _QWORD v19[9];
  char v20;
  __int16 v21;

  v6 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 48))
  {
    v7 = *(__IOSurface **)(v6 + 48);
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 0x40000000;
    v19[2] = ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_2_9;
    v19[3] = &__block_descriptor_tmp_10_5;
    v19[4] = a2;
    v19[5] = a4;
    v19[6] = a5;
    v19[7] = a6;
    v19[8] = *(_QWORD *)(a1 + 40);
    v20 = *(_BYTE *)(a1 + 49);
    v21 = *(_WORD *)(a1 + 50);
    v8 = v19;
  }
  else if (*(_BYTE *)(a1 + 52))
  {
    v7 = *(__IOSurface **)(v6 + 48);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 0x40000000;
    v16[2] = ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_3_11;
    v16[3] = &__block_descriptor_tmp_12_4;
    v16[4] = a2;
    v16[5] = a4;
    v16[6] = a5;
    v16[7] = a6;
    v16[8] = *(_QWORD *)(a1 + 40);
    v17 = *(_BYTE *)(a1 + 49);
    v18 = *(_WORD *)(a1 + 50);
    v8 = v16;
  }
  else
  {
    v7 = *(__IOSurface **)(v6 + 48);
    if (*(_BYTE *)(a1 + 53))
    {
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 0x40000000;
      v13[2] = ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_4;
      v13[3] = &__block_descriptor_tmp_13_0;
      v13[4] = a2;
      v13[5] = a4;
      v13[6] = a5;
      v13[7] = a6;
      v13[8] = *(_QWORD *)(a1 + 40);
      v14 = *(_BYTE *)(a1 + 49);
      v15 = *(_WORD *)(a1 + 50);
      v8 = v13;
    }
    else
    {
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 0x40000000;
      v10[2] = ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_5;
      v10[3] = &__block_descriptor_tmp_14_4;
      v10[4] = a2;
      v10[5] = a4;
      v10[6] = a5;
      v10[7] = a6;
      v10[8] = *(_QWORD *)(a1 + 40);
      v11 = *(_BYTE *)(a1 + 49);
      v12 = *(_WORD *)(a1 + 50);
      v8 = v10;
    }
  }
  if (SurfaceApplyPlaneBlock(v7, (uint64_t)v8))
  {
    v9 = ci_logger_api();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_8_cold_1(v9);
  }
}

uint64_t ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_5(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;

  if (!a3)
    return CopyYCC444_to_Y_8(*(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_QWORD *)(result + 48), *(_QWORD *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  if (*(_BYTE *)(result + 72))
    return CopyYCC444_to_CbCr444_8(*(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_QWORD *)(result + 48), *(_QWORD *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  if (*(_BYTE *)(result + 73))
    return CopyYCC444_to_CbCr422_8(*(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_QWORD *)(result + 48), *(_QWORD *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, *(int *)(result + 68), a6);
  if (*(_BYTE *)(result + 74))
  {
    v6 = *(_DWORD *)(result + 68);
    if (v6 >= 0)
      v7 = *(_DWORD *)(result + 68);
    else
      v7 = v6 + 1;
    return CopyYCC444_to_CbCr_8(*(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_QWORD *)(result + 48), *(_QWORD *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, (uint64_t)v7 >> 1, a6);
  }
  return result;
}

uint64_t CI::RenderToSurface::type(CI::RenderToSurface *this)
{
  return 83;
}

uint64_t CI::RenderToSurface::pointer(CI::RenderToSurface *this)
{
  return *((_QWORD *)this + 6);
}

size_t CI::RenderToSurface::width(IOSurfaceRef *this)
{
  return IOSurfaceGetWidth(this[6]);
}

size_t CI::RenderToSurface::height(IOSurfaceRef *this)
{
  return IOSurfaceGetHeight(this[6]);
}

uint64_t `non-virtual thunk to'CI::RenderToSurface::type(CI::RenderToSurface *this)
{
  return 83;
}

uint64_t CI::InstanceCounted<(CI::Type)83>::type()
{
  return 83;
}

_QWORD *CI::InstanceCounted<(CI::Type)83>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EB7B58;
  do
    v1 = __ldaxr(&dword_1ECF873D0[25]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[25]));
  return result;
}

void CI::InstanceCounted<(CI::Type)83>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EB7B58;
  do
    v1 = __ldaxr(&dword_1ECF873D0[25]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[25]));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::RenderToGLTexture::RenderToGLTexture(uint64_t this, int a2, int a3, const CGSize *a4)
{
  unsigned int v4;

  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)this = off_1E2EBC340;
  *(CGSize *)(this + 40) = *a4;
  *(_QWORD *)(this + 56) = off_1E2EB7B80;
  do
    v4 = __ldaxr(&dword_1ECF873D0[26]);
  while (__stlxr(v4 + 1, &dword_1ECF873D0[26]));
  *(_QWORD *)this = &off_1E2EBDA58;
  *(_QWORD *)(this + 56) = &unk_1E2EBDAB0;
  *(_DWORD *)(this + 64) = a2;
  *(_DWORD *)(this + 68) = a3;
  return this;
}

void CI::RenderToGLTexture::~RenderToGLTexture(CI::RenderToGLTexture *this)
{
  unsigned int v1;

  *((_QWORD *)this + 7) = off_1E2EB7B80;
  do
    v1 = __ldaxr(&dword_1ECF873D0[26]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[26]));
  CI::RenderDestination::~RenderDestination(this);
}

{
  unsigned int v1;

  *((_QWORD *)this + 7) = off_1E2EB7B80;
  do
    v1 = __ldaxr(&dword_1ECF873D0[26]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[26]));
  CI::RenderDestination::~RenderDestination(this);
  JUMPOUT(0x194025AACLL);
}

void `non-virtual thunk to'CI::RenderToGLTexture::~RenderToGLTexture(CI::RenderToGLTexture *this)
{
  CI::RenderDestination *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EB7B80;
  v1 = (CI::RenderToGLTexture *)((char *)this - 56);
  do
    v2 = __ldaxr(&dword_1ECF873D0[26]);
  while (__stlxr(v2 - 1, &dword_1ECF873D0[26]));
  CI::RenderDestination::~RenderDestination(v1);
}

{
  CI::RenderDestination *v1;
  unsigned int v2;

  *(_QWORD *)this = off_1E2EB7B80;
  v1 = (CI::RenderToGLTexture *)((char *)this - 56);
  do
    v2 = __ldaxr(&dword_1ECF873D0[26]);
  while (__stlxr(v2 - 1, &dword_1ECF873D0[26]));
  CI::RenderDestination::~RenderDestination(v1);
  JUMPOUT(0x194025AACLL);
}

CFStringRef CI::RenderToGLTexture::description(CI::RenderToGLTexture *this)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("gltexture: %u"), *((unsigned int *)this + 16));
}

CI::RenderTask *CI::RenderToGLTexture::render(CI::RenderToGLTexture *this, CI::Image *a2, CI::Context *a3)
{
  CI::RenderTask *v7;

  if ((*(unsigned int (**)(CI::Context *))(*(_QWORD *)a3 + 16))(a3) == 76)
    return CI::RenderToTexture<CI::Texture>::render_to_texture(this, a2, (char *)a3, (uint64_t)this + 40, *((_QWORD *)this + 8), *((_QWORD *)this + 9));
  v7 = (CI::RenderTask *)operator new();
  CI::RenderTask::RenderTask(v7, "Render to GL texture requires a GL-backed CIContext.");
  return v7;
}

void sub_192445A48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194025AAC](v1, 0x10F1C40D5E332FALL);
  _Unwind_Resume(a1);
}

CI::RenderTask *CI::RenderToTexture<CI::Texture>::render_to_texture(CI::Image *a1, CI::Context *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const CI::RenderDestination *v9;
  CI::RenderTask *v10;
  CI::RenderTask *v12;

  if (((*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)a3 + 368))(a3, a5, a6) & 1) != 0)
  {
    v10 = CI::image_render((CI *)"render_to_texture", a3, a2, a1, v9);
    (*(void (**)(char *))(*(_QWORD *)a3 + 384))(a3);
    return v10;
  }
  else
  {
    v12 = (CI::RenderTask *)operator new();
    CI::RenderTask::RenderTask(v12, "Failed to set texture destination.");
    return v12;
  }
}

void sub_192445B14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194025AAC](v1, 0x10F1C40D5E332FALL);
  _Unwind_Resume(a1);
}

uint64_t CI::RenderToMTLTexture::RenderToMTLTexture(uint64_t a1, CFTypeRef cf, uint64_t a3, _OWORD *a4, int a5)
{
  unsigned int v6;
  CFTypeRef v7;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = off_1E2EBC340;
  *(_OWORD *)(a1 + 40) = *a4;
  *(_DWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 56) = off_1E2EBC078;
  do
    v6 = __ldaxr(&dword_1ECF873D0[27]);
  while (__stlxr(v6 + 1, &dword_1ECF873D0[27]));
  *(_QWORD *)a1 = &off_1E2EBDCF0;
  *(_QWORD *)(a1 + 56) = &unk_1E2EBDD48;
  *(_QWORD *)(a1 + 64) = a3;
  if (cf)
    v7 = CFRetain(cf);
  else
    v7 = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_192445BDC(_Unwind_Exception *a1)
{
  CI::RenderDestination *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;

  v4 = v2;
  *((_QWORD *)v1 + 7) = v4;
  v6 = (unsigned int *)(v3 + 340);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  CI::RenderDestination::~RenderDestination(v1);
  _Unwind_Resume(a1);
}

void CI::RenderToMTLTexture::~RenderToMTLTexture(CI::RenderToMTLTexture *this)
{
  const void *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_1E2EBDCF0;
  *((_QWORD *)this + 7) = &unk_1E2EBDD48;
  v2 = (const void *)*((_QWORD *)this + 9);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 7) = off_1E2EBC078;
  do
    v3 = __ldaxr(&dword_1ECF873D0[27]);
  while (__stlxr(v3 - 1, &dword_1ECF873D0[27]));
  CI::RenderDestination::~RenderDestination(this);
}

{
  CI::RenderToMTLTexture::~RenderToMTLTexture(this);
  JUMPOUT(0x194025AACLL);
}

void sub_192445C78(_Unwind_Exception *a1)
{
  CI::RenderDestination *v1;
  unsigned int v3;

  *((_QWORD *)v1 + 7) = off_1E2EBC078;
  do
    v3 = __ldaxr(&dword_1ECF873D0[27]);
  while (__stlxr(v3 - 1, &dword_1ECF873D0[27]));
  CI::RenderDestination::~RenderDestination(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'CI::RenderToMTLTexture::~RenderToMTLTexture(CI::RenderToMTLTexture *this)
{
  CI::RenderToMTLTexture::~RenderToMTLTexture((CI::RenderToMTLTexture *)((char *)this - 56));
}

{
  CI::RenderToMTLTexture::~RenderToMTLTexture((CI::RenderToMTLTexture *)((char *)this - 56));
  JUMPOUT(0x194025AACLL);
}

CFStringRef CI::RenderToMTLTexture::description(CI::RenderToMTLTexture *this)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("mtltexture: %p"), *((_QWORD *)this + 9));
}

CI::RenderTask *CI::RenderToMTLTexture::render(id *this, CI::Image *a2, id *a3)
{
  CI::RenderTask *v6;
  uint64_t v7;
  __IOSurface *v8;
  const CI::RenderDestination *v9;
  CGRect v11;

  if ((*((unsigned int (**)(id *))*a3 + 2))(a3) == 77)
  {
    CI::MetalContext::device(a3);
    objc_msgSend(this[9], "pixelFormat");
    MTLPixelFormatGetInfoForDevice();
    v6 = (CI::RenderTask *)operator new();
    CI::RenderTask::RenderTask(v6, "Rendering to this texture is not supported on the CIContex's MTLDevice.");
  }
  else
  {
    if (!this[8])
    {
      v7 = objc_msgSend(this[9], "iosurface");
      if (v7)
      {
        v8 = (__IOSurface *)v7;
        v11.origin.x = (*(double (**)(CI::Image *))(*(_QWORD *)a2 + 88))(a2);
        return CI::image_render_to_surface((CI *)a3, a2, v8, v11, (__IOSurface *)this, v9);
      }
    }
    v6 = (CI::RenderTask *)operator new();
    CI::RenderTask::RenderTask(v6, "Render to Metal texture requires a Metal-backed CIContext.");
  }
  return v6;
}

void sub_192445EC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194025AAC](v1, 0x10F1C40D5E332FALL);
  _Unwind_Resume(a1);
}

uint64_t CI::RenderToMTLTextureProvider::RenderToMTLTextureProvider(uint64_t a1, void *aBlock, uint64_t a3, _OWORD *a4, int a5)
{
  unsigned int v6;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = off_1E2EBC398;
  *(_OWORD *)(a1 + 40) = *a4;
  *(_DWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 56) = off_1E2EB7760;
  do
    v6 = __ldaxr(&dword_1ECF873D0[30]);
  while (__stlxr(v6 + 1, &dword_1ECF873D0[30]));
  *(_QWORD *)a1 = &off_1E2EBE538;
  *(_QWORD *)(a1 + 56) = &unk_1E2EBE590;
  *(_QWORD *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = _Block_copy(aBlock);
  return a1;
}

void sub_192445F8C(_Unwind_Exception *a1)
{
  CI::RenderDestination *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;

  v4 = v2;
  *((_QWORD *)v1 + 7) = v4;
  v6 = (unsigned int *)(v3 + 352);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  CI::RenderDestination::~RenderDestination(v1);
  _Unwind_Resume(a1);
}

void CI::RenderToMTLTextureProvider::~RenderToMTLTextureProvider(CI::RenderToMTLTextureProvider *this)
{
  const void *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_1E2EBE538;
  *((_QWORD *)this + 7) = &unk_1E2EBE590;
  v2 = (const void *)*((_QWORD *)this + 10);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 10) = 0;
  _Block_release(*((const void **)this + 9));
  *((_QWORD *)this + 7) = off_1E2EB7760;
  do
    v3 = __ldaxr(&dword_1ECF873D0[30]);
  while (__stlxr(v3 - 1, &dword_1ECF873D0[30]));
  CI::RenderDestination::~RenderDestination(this);
}

{
  CI::RenderToMTLTextureProvider::~RenderToMTLTextureProvider(this);
  JUMPOUT(0x194025AACLL);
}

void sub_192446034(_Unwind_Exception *a1)
{
  CI::RenderDestination *v1;
  unsigned int v3;

  *((_QWORD *)v1 + 7) = off_1E2EB7760;
  do
    v3 = __ldaxr(&dword_1ECF873D0[30]);
  while (__stlxr(v3 - 1, &dword_1ECF873D0[30]));
  CI::RenderDestination::~RenderDestination(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'CI::RenderToMTLTextureProvider::~RenderToMTLTextureProvider(CI::RenderToMTLTextureProvider *this)
{
  CI::RenderToMTLTextureProvider::~RenderToMTLTextureProvider((CI::RenderToMTLTextureProvider *)((char *)this - 56));
}

{
  CI::RenderToMTLTextureProvider::~RenderToMTLTextureProvider((CI::RenderToMTLTextureProvider *)((char *)this - 56));
  JUMPOUT(0x194025AACLL);
}

CFStringRef CI::RenderToMTLTextureProvider::description(CI::RenderToMTLTextureProvider *this)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("mtltexprov: %p"), *((_QWORD *)this + 9));
}

CI::RenderTask *CI::RenderToMTLTextureProvider::render(CI::RenderToMTLTextureProvider *this, CI::Image *a2, CI::Context *a3)
{
  const void *v6;
  CI::RenderTask *v7;
  const void *v8;
  _QWORD v10[5];

  if ((*(unsigned int (**)(CI::Context *))(*(_QWORD *)a3 + 16))(a3) == 77)
  {
    v6 = (const void *)*((_QWORD *)this + 8);
    if (v6)
      CI::MetalContext::set_command_buffer(a3, v6);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___ZNK2CI26RenderToMTLTextureProvider6renderEPNS_5ImageEPNS_7ContextE_block_invoke;
    v10[3] = &__block_descriptor_40_e33__Texture____Q___II_____v_v___8__0l;
    v10[4] = this;
    v7 = CI::RenderToTexture<CI::Texture({block_pointer})(void)>::render_to_texture(this, a2, (char *)a3, (uint64_t)this + 40, (uint64_t)v10);
    v8 = (const void *)*((_QWORD *)this + 10);
    if (v8)
      CFRelease(v8);
    *((_QWORD *)this + 10) = 0;
  }
  else
  {
    v7 = (CI::RenderTask *)operator new();
    CI::RenderTask::RenderTask(v7, "Render to Metal texture provider requires a Metal context.");
  }
  return v7;
}

void sub_1924461E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194025AAC](v1, 0x10F1C40D5E332FALL);
  _Unwind_Resume(a1);
}

CI::RenderTask *CI::RenderToTexture<CI::Texture({block_pointer})(void)>::render_to_texture(CI::Image *a1, CI::Context *a2, char *a3, uint64_t a4, uint64_t a5)
{
  const CI::RenderDestination *v8;
  CI::RenderTask *v9;
  CI::RenderTask *v11;

  if (((*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)a3 + 400))(a3, a5, a4) & 1) != 0)
  {
    v9 = CI::image_render((CI *)"render_to_texture", a3, a2, a1, v8);
    (*(void (**)(char *))(*(_QWORD *)a3 + 384))(a3);
    return v9;
  }
  else
  {
    v11 = (CI::RenderTask *)operator new();
    CI::RenderTask::RenderTask(v11, "Failed to set texture destination.");
    return v11;
  }
}

void sub_1924462B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194025AAC](v1, 0x10F1C40D5E332FALL);
  _Unwind_Resume(a1);
}

uint64_t CI::RenderToGLTexture::type(CI::RenderToGLTexture *this)
{
  return 84;
}

unint64_t CI::RenderToTexture<CI::Texture>::width(uint64_t a1)
{
  return (unint64_t)*(double *)(a1 + 40);
}

unint64_t CI::RenderToTexture<CI::Texture>::height(uint64_t a1)
{
  return (unint64_t)*(double *)(a1 + 48);
}

uint64_t `non-virtual thunk to'CI::RenderToGLTexture::type(CI::RenderToGLTexture *this)
{
  return 84;
}

uint64_t CI::RenderToMTLTexture::type(CI::RenderToMTLTexture *this)
{
  return 85;
}

uint64_t CI::RenderToMTLTexture::pointer(CI::RenderToMTLTexture *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t `non-virtual thunk to'CI::RenderToMTLTexture::type(CI::RenderToMTLTexture *this)
{
  return 85;
}

uint64_t CI::RenderToMTLTextureProvider::type(CI::RenderToMTLTextureProvider *this)
{
  return 88;
}

uint64_t CI::RenderToMTLTextureProvider::pointer(CI::RenderToMTLTextureProvider *this)
{
  return *((_QWORD *)this + 10);
}

unint64_t CI::RenderToTexture<CI::Texture({block_pointer})(void)>::width(uint64_t a1)
{
  return (unint64_t)*(double *)(a1 + 40);
}

unint64_t CI::RenderToTexture<CI::Texture({block_pointer})(void)>::height(uint64_t a1)
{
  return (unint64_t)*(double *)(a1 + 48);
}

uint64_t `non-virtual thunk to'CI::RenderToMTLTextureProvider::type(CI::RenderToMTLTextureProvider *this)
{
  return 88;
}

uint64_t CI::InstanceCounted<(CI::Type)84>::type()
{
  return 84;
}

_QWORD *CI::InstanceCounted<(CI::Type)84>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EB7B80;
  do
    v1 = __ldaxr(&dword_1ECF873D0[26]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[26]));
  return result;
}

void CI::InstanceCounted<(CI::Type)84>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EB7B80;
  do
    v1 = __ldaxr(&dword_1ECF873D0[26]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[26]));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::InstanceCounted<(CI::Type)85>::type()
{
  return 85;
}

_QWORD *CI::InstanceCounted<(CI::Type)85>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBC078;
  do
    v1 = __ldaxr(&dword_1ECF873D0[27]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[27]));
  return result;
}

void CI::InstanceCounted<(CI::Type)85>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBC078;
  do
    v1 = __ldaxr(&dword_1ECF873D0[27]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[27]));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::InstanceCounted<(CI::Type)88>::type()
{
  return 88;
}

_QWORD *CI::InstanceCounted<(CI::Type)88>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EB7760;
  do
    v1 = __ldaxr(&dword_1ECF873D0[30]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[30]));
  return result;
}

void CI::InstanceCounted<(CI::Type)88>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EB7760;
  do
    v1 = __ldaxr(&dword_1ECF873D0[30]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[30]));
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::traverse_releasing_resources(CI *this, CI::Node *a2)
{
  uint64_t result;
  _QWORD v4[5];

  result = CI_CACHE_PROGRAM_GRAPH();
  if ((_DWORD)result)
  {
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 0x40000000;
    v4[2] = ___ZN2CI4Node15traverse_uniqueEU13block_pointerFvPS0_E_block_invoke;
    v4[3] = &unk_1E2EB7F68;
    v4[4] = &__block_literal_global_96;
    return CI::GraphObject::traverse_unique((uint64_t)this, (uint64_t)v4);
  }
  return result;
}

uint64_t ___ZN2CI28traverse_releasing_resourcesEPNS_4NodeE_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 216))(a2);
}

CI::GraphObject *CI::prepare_initial_graph(uint64_t *a1, const char *a2, unsigned int *a3, uint64_t a4, CGColorSpace *a5, int a6, uint64_t a7, uint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, unsigned __int8 a13, uint64_t a14)
{
  NSObject *v21;
  os_signpost_id_t v22;
  uint64_t v23;
  NSObject *v24;
  os_signpost_id_t v25;
  NSObject *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CI::GraphObject *v32;
  NSObject *v33;
  os_signpost_id_t v34;
  uint64_t v35;
  CI::Image *v36;
  int v37;
  int v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  CI::ColorMatrixImage *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  int v49;
  const char *v50;
  int v51;
  void (***v52)(CI::ColorKernel *__hidden);
  double v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  CI::AffineImage *v60;
  CI::AffineImage *v61;
  CI::AffineImage *v62;
  CI::AffineImage *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  CI::AffineImage *v68;
  CI::AffineImage *v69;
  CI::AffineImage *v70;
  CI::AffineImage *v71;
  double v72;
  double x;
  double y;
  double width;
  double height;
  uint64_t v77;
  uint64_t v78;
  CI::Context *v79;
  const __CFString *v80;
  CFStringRef v81;
  FILE *v82;
  FILE *v83;
  const __CFString *v84;
  int v85;
  uint64_t v86;
  CFStringRef v87;
  const char *v88;
  const char *v89;
  int v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  const char *v96;
  int v97;
  const char *v98;
  CI::GraphObject *v99;
  CGImage *v100;
  void *v101;
  const __CFString *v102;
  pid_t v103;
  const char *v104;
  int v105;
  FILE *v106;
  unsigned int v107;
  char *v108;
  CI::Image *v109;
  int v110;
  uint64_t *v111;
  uint64_t v112;
  unsigned int v113;
  CI::AffineNode *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  CI::SerialObjectPtrArray *v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  unint64_t v128;
  unsigned int *v129;
  unsigned int *v130;
  uint64_t v131;
  uint64_t v132;
  CI::SerialObjectPtrArray *v133;
  CI::SerialObjectPtrArray *v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  double v138;
  double v139;
  double v140;
  double v141;
  CI::Node *v142;
  uint64_t v143;
  uint64_t v144;
  FILE *v145;
  NSObject *v146;
  os_signpost_id_t v147;
  NSObject *v148;
  CGColorSpace *v150;
  CGColorSpace *v151;
  unsigned int v152;
  CGColorSpace *v153;
  CI::ColorMatchImage *v154;
  int has_alpha;
  CI::PremultiplyImage *v156;
  CI::ColorMatchImage *v157;
  CI::ColorMatchImage *v158;
  CI::ColorMatchImage *v159;
  CI::Object *v160;
  CI::ClampToAlphaImage *v161;
  const __CFString *v162;
  BOOL v163;
  const __CFString *theString;
  uint64_t v165;
  const char *v166;
  int v167;
  int v168;
  CI::Object *v169;
  CI::Object *v170;
  CI::Object *v171;
  CI::Object *matched;
  const char *v173;
  const char *v174;
  CI::Object *v175;
  uint64_t v176;
  uint64_t v177;
  CI::Object *v178;
  const __CFString *cf;
  _QWORD *cfa;
  uint64_t v181;
  _QWORD v183[5];
  _QWORD **v184;
  _QWORD *v185[5];
  _QWORD v186[4];
  _QWORD **v187;
  _QWORD *v188[5];
  _QWORD v189[5];
  double v190[6];
  double v191;
  double v192;
  __int128 v193;
  double v194;
  double v195;
  double v196;
  double v197;
  __int128 v198;
  double v199;
  double v200;
  char v201[8];
  os_signpost_id_t v202;
  unsigned int *v203;
  _QWORD *v204[2];
  CGRect v205;
  double v206;
  uint64_t v207;
  __int128 v208;
  double v209;
  double v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  CGRect *v214;
  uint8_t *v215;
  int v216;
  uint8_t __src[16];
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  int64x2_t buf[2];
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  CGRect v249;
  CGRect v250;
  CGRect v251;

  v248 = *MEMORY[0x1E0C80C00];
  v205.origin.x = a9;
  v205.origin.y = a10;
  v205.size.width = a11;
  v205.size.height = a12;
  v204[1] = 0;
  v204[0] = 0;
  v203 = (unsigned int *)v204;
  if (CI_CACHE_PROGRAM_GRAPH())
  {
    v21 = ci_signpost_log_render();
    v22 = (*(uint64_t (**)(uint64_t *))(*a1 + 272))(a1) << 32;
    if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v21))
    {
      buf[0].i16[0] = 0;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v21, OS_SIGNPOST_INTERVAL_BEGIN, v22, "traverse_gathering_digests", (const char *)&unk_192520C83, (uint8_t *)buf, 2u);
    }
    v23 = (*(uint64_t (**)(uint64_t *))(*a1 + 272))(a1);
    TimerBase::TimerBase((uint64_t)buf, v23, 0, (uint64_t)"traverse_gathering_digests", 34);
    v206 = MEMORY[0x1E0C809B0];
    v207 = 0x40000000;
    *(_QWORD *)&v208 = ___ZN2CIL26traverse_gathering_digestsEPKNS_7ContextEPNS_5ImageERNSt3__13mapINS_10ImageIndexENS_30ImageDigestForRenderGraphCacheENS5_4lessIS7_EENS5_9allocatorINS5_4pairIKS7_S8_EEEEEE_block_invoke;
    *((_QWORD *)&v208 + 1) = &__block_descriptor_tmp_43;
    v209 = COERCE_DOUBLE(&v203);
    *(_QWORD *)__src = MEMORY[0x1E0C809B0];
    *(_QWORD *)&__src[8] = 0x40000000;
    *(_QWORD *)&v218 = ___ZNK2CI5Image15traverse_uniqueEU13block_pointerFvPKS0_iE_block_invoke;
    *((_QWORD *)&v218 + 1) = &unk_1E2EC8F00;
    *(_QWORD *)&v219 = &v206;
    CI::GraphObject::traverse_unique((uint64_t)a3, (uint64_t)__src);
    v24 = ci_signpost_log_render();
    v25 = buf[0].u64[1];
    if ((unint64_t)(buf[0].i64[1] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v26 = v24;
      if (os_signpost_enabled(v24))
      {
        *(_WORD *)__src = 0;
        _os_signpost_emit_with_name_impl(&dword_1921E4000, v26, OS_SIGNPOST_INTERVAL_END, v25, "traverse_gathering_digests", (const char *)&unk_192520C83, __src, 2u);
      }
    }
    TimerBase::~TimerBase((TimerBase *)buf);
    buf[0].i64[0] = (uint64_t)(a3 + 25);
    v27 = std::__tree<std::__value_type<CI::NodeIndex,unsigned long>,std::__map_value_compare<CI::NodeIndex,std::__value_type<CI::NodeIndex,unsigned long>,std::less<CI::NodeIndex>,true>,std::allocator<std::__value_type<CI::NodeIndex,unsigned long>>>::__emplace_unique_key_args<CI::NodeIndex,std::piecewise_construct_t const&,std::tuple<CI::NodeIndex const&>,std::tuple<>>((uint64_t **)&v203, a3 + 25, (uint64_t)&std::piecewise_construct, buf)[5];
    XXH64_reset(buf, 0);
    *(_QWORD *)__src = v27;
    XXH64_update((uint64_t)buf, (char *)__src, 8uLL);
    XXH64_update((uint64_t)buf, (char *)&v205, 0x20uLL);
    CI::XXHashHelper::add((CI::XXHashHelper *)buf, a5);
    *(_DWORD *)__src = a6;
    XXH64_update((uint64_t)buf, (char *)__src, 4uLL);
    *(_DWORD *)__src = *(_DWORD *)(a7 + 8);
    XXH64_update((uint64_t)buf, (char *)__src, 4uLL);
    XXH64_update((uint64_t)buf, (char *)a8, 0x30uLL);
    *(_DWORD *)__src = a13;
    XXH64_update((uint64_t)buf, (char *)__src, 4uLL);
    v28 = XXH64_digest((uint64_t)buf);
    v29 = CI::ObjectCache<CI::Node,unsigned long long,false>::find(a1[39], v28);
    if (v29)
    {
      v30 = v29;
      v31 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 48))(v29, 0);
      if (v31)
        v32 = (CI::GraphObject *)CI::Object::ref(v31);
      else
        v32 = 0;
      v48 = MEMORY[0x1E0C809B0];
      if (a14)
      {
        v49 = *(_DWORD *)(v30 + 104);
        *(_WORD *)(a14 + 4) = *(_WORD *)(v30 + 108);
        *(_DWORD *)a14 = v49;
      }
      *(double *)__src = v48;
      *(_QWORD *)&__src[8] = 0x40000000;
      *(_QWORD *)&v218 = ___ZN2CIL28traverse_restoring_resourcesERKNSt3__13mapINS_10ImageIndexENS_30ImageDigestForRenderGraphCacheENS0_4lessIS2_EENS0_9allocatorINS0_4pairIKS2_S3_EEEEEERKNS_14ImageToNodeMapEPNS_5ImageE_block_invoke;
      *((_QWORD *)&v218 + 1) = &__block_descriptor_tmp_53_1;
      *(_QWORD *)&v219 = &v203;
      *((_QWORD *)&v219 + 1) = v30 + 56;
      v206 = v48;
      v207 = 0x40000000;
      *(_QWORD *)&v208 = ___ZNK2CI5Image15traverse_uniqueEU13block_pointerFvPKS0_E_block_invoke;
      *((_QWORD *)&v208 + 1) = &unk_1E2EC8FA8;
      v209 = COERCE_DOUBLE(__src);
      CI::GraphObject::traverse_unique((uint64_t)a3, (uint64_t)&v206);
      v206 = v48;
      v207 = 0x40000000;
      *(_QWORD *)&v208 = ___ZN2CIL37traverse_node_graph_gathering_digestsEPKNS_7ContextEPNS_4NodeE_block_invoke;
      *((_QWORD *)&v208 + 1) = &__block_descriptor_tmp_54;
      v209 = *(double *)&a1;
      *(double *)__src = v48;
      *(_QWORD *)&__src[8] = 0x40000000;
      *(_QWORD *)&v218 = ___ZN2CI4Node15traverse_uniqueEU13block_pointerFvPS0_E_block_invoke;
      *((_QWORD *)&v218 + 1) = &unk_1E2EB7F68;
      *(_QWORD *)&v219 = &v206;
      CI::GraphObject::traverse_unique((uint64_t)v32, (uint64_t)__src);
      CI::Object::unref((CI::Object *)v30);
      (*(void (**)(unsigned int *))(*(_QWORD *)a3 + 88))(a3);
      if (CI::print_tree_enabled(2, (uint64_t)a1))
      {
        if (!strcmp(a2, "get_bitmap"))
          v50 = "get_bitmap_cacheHit";
        else
          v50 = a2;
        if (!strcmp(a2, "render_to_surface"))
          v50 = "render_to_surface_cacheHit";
        if (!strcmp(a2, "create_cgimage_check"))
          v50 = "create_cgimage_check_cacheHit";
        if (!strcmp(a2, "render_to_display"))
          v50 = "render_to_display_cacheHit";
        if (!strcmp(a2, "render_to_texture"))
          v50 = "render_to_texture_cacheHit";
        if (CI_PRINT_TREE_graphviz())
        {
          CI::dump_optimized_graph((uint64_t)a1, a4, (uint64_t)v50, v32, &v205, a6);
        }
        else
        {
          v83 = (FILE *)CI_LOG_FILE();
          *(double *)__src = v48;
          *(_QWORD *)&__src[8] = 0x40000000;
          *(_QWORD *)&v218 = ___ZN2CIL21print_optimized_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke;
          *((_QWORD *)&v218 + 1) = &__block_descriptor_tmp_89_1;
          *(_QWORD *)&v219 = a4;
          *((_QWORD *)&v219 + 1) = a1;
          DWORD2(v221) = a6;
          *(_QWORD *)&v220 = v50;
          *((_QWORD *)&v220 + 1) = &v205;
          *(_QWORD *)&v221 = v32;
          stream_to_file(v83, (uint64_t)__src);
        }
      }
      goto LABEL_192;
    }
    v176 = v28;
  }
  else
  {
    v176 = 0;
  }
  v33 = ci_signpost_log_render();
  v34 = (*(uint64_t (**)(uint64_t *))(*a1 + 272))(a1) << 32;
  if (v34 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v33))
  {
    buf[0].i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_1921E4000, v33, OS_SIGNPOST_INTERVAL_BEGIN, v34, "prepare_initial_graph", (const char *)&unk_192520C83, (uint8_t *)buf, 2u);
  }
  v35 = (*(uint64_t (**)(uint64_t *))(*a1 + 272))(a1);
  TimerBase::TimerBase((uint64_t)v201, v35, 0, (uint64_t)"prepare_initial_graph", 1);
  if (CI_DEBUG_CONTEXT_COLOR())
  {
    v241 = 0u;
    v240 = 0u;
    *(_QWORD *)&v239 = 0;
    v238 = 0u;
    v237 = 0u;
    v236 = 0u;
    v235 = 0u;
    v234 = 0u;
    memset(buf, 0, sizeof(buf));
    *((_QWORD *)&v239 + 1) = 0x3FF0000000000000;
    v37 = CI_DEBUG_CONTEXT_COLOR();
    v38 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
    v39 = 0.0;
    if (v38 == 77)
      v39 = 1.0;
    if (v37 == 2)
    {
      *(double *)&v240 = v39;
      v40 = 4;
      v41 = 4;
    }
    else
    {
      *(double *)buf[0].i64 = v39;
      v41 = 2;
      v40 = 1;
    }
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1) == 76)
      v42 = 1.0;
    else
      v42 = 0.0;
    *(double *)&buf[2 * v40].i64[1] = v42;
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1) == 74)
      v43 = 1.0;
    else
      v43 = 0.0;
    *(double *)buf[2 * v41 + 1].i64 = v43;
    v44 = (CI::ColorMatrixImage *)operator new();
    v175 = (CI::Object *)CI::ColorMatrixImage::ColorMatrixImage(v44, (CI::Image *)a3, (const double (*)[4])buf);
    a3 = (unsigned int *)v175;
  }
  else
  {
    v175 = 0;
  }
  v45 = a4;
  if (a4)
  {
    v170 = 0;
    v171 = 0;
    v169 = 0;
    matched = 0;
    goto LABEL_59;
  }
  if (CI_NO_CM() || (CI::format_only_alpha(a6) & 1) != 0)
  {
    matched = 0;
  }
  else
  {
    v150 = (CGColorSpace *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a3 + 248))(a3);
    v152 = CI::ColorSpace_is_HDR(v150, v151);
    if (a5 && v152 && (CI::ColorSpace_is_HDR(a5, v153) & 1) == 0 && !CGColorSpaceUsesExtendedRange(a5))
    {
      v157 = (CI::ColorMatchImage *)operator new();
      CI::ColorMatchImage::ColorMatchImage(v157, (CI::Image *)a3, v150);
      v158 = (CI::ColorMatchImage *)operator new();
      CI::ColorMatchImage::ColorMatchImage(v158, v157, v150, 1);
      v159 = (CI::ColorMatchImage *)operator new();
      CI::ColorMatchImage::ColorMatchImage(v159, v158, a5);
      v160 = v157;
      v45 = 0;
      CI::Object::unref(v160);
      CI::Object::unref(v158);
      matched = v159;
      a3 = (unsigned int *)v159;
    }
    else
    {
      v154 = (CI::ColorMatchImage *)operator new();
      matched = (CI::Object *)CI::ColorMatchImage::ColorMatchImage(v154, (CI::Image *)a3, a5);
      a3 = (unsigned int *)matched;
    }
  }
  if (a6 == 3079 || a6 == 2567)
    goto LABEL_37;
  if ((CI::format_only_alpha(a6) & 1) == 0
    && ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)a3 + 128))(a3) & 1) == 0)
  {
    has_alpha = CI::format_has_alpha(a6);
    if (a6 && !has_alpha)
    {
LABEL_37:
      v46 = operator new();
      v47 = CI::SwizzleImage::SwizzleImage(v46, (uint64_t *)a3, 10);
      v170 = (CI::Object *)v47;
      v171 = 0;
      v169 = 0;
LABEL_38:
      a3 = (unsigned int *)v47;
      goto LABEL_59;
    }
    if (!*((_BYTE *)a1 + 40) || CI::format_has_unpremul_alpha(a6))
    {
      v156 = (CI::PremultiplyImage *)operator new();
      v47 = (uint64_t)CI::PremultiplyImage::PremultiplyImage(v156, (CI::Image *)a3, -1);
      v169 = 0;
      v170 = 0;
      v171 = (CI::Object *)v47;
      goto LABEL_38;
    }
    if ((CI::format_is_float(a6) & 1) == 0 && *((_BYTE *)a1 + 41))
    {
      v161 = (CI::ClampToAlphaImage *)operator new();
      v47 = (uint64_t)CI::ClampToAlphaImage::ClampToAlphaImage(v161, (CI::Image *)a3);
      v170 = 0;
      v171 = 0;
      v169 = (CI::Object *)v47;
      goto LABEL_38;
    }
  }
  v170 = 0;
  v171 = 0;
  v169 = 0;
LABEL_59:
  v51 = *(_DWORD *)(a7 + 8);
  v177 = (uint64_t)a2;
  if (v51)
  {
    if (*(_QWORD *)(a7 + 16) <= 1uLL && *(_QWORD *)(a7 + 24) < 2uLL)
    {
      v66 = operator new();
      v178 = (CI::Object *)CI::SwizzleImage::SwizzleImage(v66, (uint64_t *)a3, *(_DWORD *)(a7 + 8));
      a3 = (unsigned int *)v178;
    }
    else
    {
      v52 = CI::Kernel::builtin(v51);
      v53 = (double)*(unint64_t *)(a7 + 24);
      *(double *)buf[0].i64 = (double)*(unint64_t *)(a7 + 16);
      buf[1].i64[0] = 0;
      buf[0].i64[1] = 0;
      *(double *)&buf[1].i64[1] = v53;
      v234 = 0uLL;
      v54 = operator new();
      *(_QWORD *)v54 = 0;
      *(_OWORD *)(v54 + 24) = 0u;
      *(_OWORD *)(v54 + 40) = 0u;
      *(_OWORD *)(v54 + 56) = 0u;
      *(_OWORD *)(v54 + 72) = 0u;
      *(_OWORD *)(v54 + 88) = 0u;
      *(_QWORD *)(v54 + 16) = 0;
      *(_QWORD *)(v54 + 4) = 0x40000000ALL;
      v55 = *(_QWORD *)(a7 + 16);
      if (v55 == 4)
      {
        v67 = *(double *)&v234 + *((double *)&v234 + 1) * 0.0;
        *(double *)__src = *(double *)buf[0].i64 + *(double *)&buf[0].i64[1] * 0.0;
        *(double *)&__src[8] = *(double *)&buf[0].i64[1] + *(double *)buf[0].i64 * 0.0;
        *(double *)&v218 = *(double *)buf[1].i64 + *(double *)&buf[1].i64[1] * 0.0;
        *((double *)&v218 + 1) = *(double *)&buf[1].i64[1] + *(double *)buf[1].i64 * 0.0;
        *(double *)&v219 = v67 + -1.5;
        *((double *)&v219 + 1) = *((double *)&v234 + 1) + *(double *)&v234 * 0.0 + 0.0;
        v206 = *(double *)__src;
        v207 = *(uint64_t *)&__src[8];
        v208 = v218;
        v209 = v67 + -0.5;
        v210 = *((double *)&v219 + 1);
        v196 = *(double *)__src;
        v197 = *(double *)&__src[8];
        v198 = v218;
        v199 = v67 + 0.5;
        v200 = *((double *)&v219 + 1);
        v191 = *(double *)__src;
        v192 = *(double *)&__src[8];
        v193 = v218;
        v194 = v67 + 1.5;
        v195 = *((double *)&v219 + 1);
        v68 = (CI::AffineImage *)operator new();
        CI::Affine::inverse((CI::Affine *)__src, v190);
        CI::AffineImage::AffineImage(v68, (CI::Image *)a3, (const CI::Affine *)v190, 0);
        v69 = (CI::AffineImage *)operator new();
        CI::Affine::inverse((CI::Affine *)&v206, v190);
        CI::AffineImage::AffineImage(v69, (CI::Image *)a3, (const CI::Affine *)v190, 0);
        v70 = (CI::AffineImage *)operator new();
        CI::Affine::inverse((CI::Affine *)&v196, v190);
        CI::AffineImage::AffineImage(v70, (CI::Image *)a3, (const CI::Affine *)v190, 0);
        v71 = (CI::AffineImage *)operator new();
        CI::Affine::inverse((CI::Affine *)&v191, v190);
        CI::AffineImage::AffineImage(v71, (CI::Image *)a3, (const CI::Affine *)v190, 0);
        CI::SerialObjectPtrArray::append(v54, v68);
        CI::SerialObjectPtrArray::append(v54, v69);
        CI::SerialObjectPtrArray::append(v54, v70);
        CI::SerialObjectPtrArray::append(v54, v71);
        CI::Object::unref(v68);
        CI::Object::unref(v69);
        CI::Object::unref(v70);
        v45 = a4;
        CI::Object::unref(v71);
      }
      else if (v55 == 2)
      {
        v167 = a6;
        if (*(_QWORD *)(a7 + 24) == 2)
          v56 = 0.5;
        else
          v56 = 0.0;
        v57 = *(double *)(a8 + 24) * v56;
        v58 = *(double *)&v234 + *((double *)&v234 + 1) * 0.0;
        v59 = *((double *)&v234 + 1) + *(double *)&v234 * 0.0;
        *(double *)__src = *(double *)buf[0].i64 + *(double *)&buf[0].i64[1] * 0.0;
        *(double *)&__src[8] = *(double *)&buf[0].i64[1] + *(double *)buf[0].i64 * 0.0;
        *(double *)&v218 = *(double *)buf[1].i64 + *(double *)&buf[1].i64[1] * 0.0;
        *((double *)&v218 + 1) = *(double *)&buf[1].i64[1] + *(double *)buf[1].i64 * 0.0;
        *(double *)&v219 = v58 + -0.5;
        *((double *)&v219 + 1) = v59 - v57;
        v206 = *(double *)__src;
        v207 = *(uint64_t *)&__src[8];
        v208 = v218;
        v209 = v58 + 0.5;
        v210 = v59 - v57;
        v196 = *(double *)__src;
        v197 = *(double *)&__src[8];
        v198 = v218;
        v199 = v58 + -0.5;
        v200 = v57 + v59;
        v191 = *(double *)__src;
        v192 = *(double *)&__src[8];
        v193 = v218;
        v194 = v58 + 0.5;
        v195 = v57 + v59;
        v60 = (CI::AffineImage *)operator new();
        CI::Affine::inverse((CI::Affine *)__src, v190);
        CI::AffineImage::AffineImage(v60, (CI::Image *)a3, (const CI::Affine *)v190, 0);
        v61 = (CI::AffineImage *)operator new();
        CI::Affine::inverse((CI::Affine *)&v206, v190);
        CI::AffineImage::AffineImage(v61, (CI::Image *)a3, (const CI::Affine *)v190, 0);
        v62 = (CI::AffineImage *)operator new();
        CI::Affine::inverse((CI::Affine *)&v196, v190);
        CI::AffineImage::AffineImage(v62, (CI::Image *)a3, (const CI::Affine *)v190, 0);
        v63 = (CI::AffineImage *)operator new();
        CI::Affine::inverse((CI::Affine *)&v191, v190);
        CI::AffineImage::AffineImage(v63, (CI::Image *)a3, (const CI::Affine *)v190, 0);
        CI::SerialObjectPtrArray::append(v54, v60);
        if (*(_QWORD *)(a7 + 16) == 2)
          CI::SerialObjectPtrArray::append(v54, v61);
        if (*(_QWORD *)(a7 + 24) == 2)
          CI::SerialObjectPtrArray::append(v54, v62);
        if (*(_QWORD *)(a7 + 16) == 2 && *(_QWORD *)(a7 + 24) == 2)
          CI::SerialObjectPtrArray::append(v54, v63);
        CI::Object::unref(v60);
        CI::Object::unref(v61);
        CI::Object::unref(v62);
        CI::Object::unref(v63);
        a6 = v167;
        v45 = a4;
      }
      v72 = CI::Affine::inverse((CI::Affine *)buf, (double *)__src);
      v249.origin.x = (*(double (**)(unsigned int *, double))(*(_QWORD *)a3 + 88))(a3, v72);
      v250.origin.x = CI::Affine::applyToRect((CI::Affine *)__src, v249);
      v251 = CGRectIntegral(v250);
      x = v251.origin.x;
      y = v251.origin.y;
      width = v251.size.width;
      height = v251.size.height;
      v77 = operator new();
      v178 = (CI::Object *)CI::ColorKernelImage::ColorKernelImage(v77, v52, v54, &__block_literal_global_13_1, 0, 0, x, y, width, height, 0.0);
      a3 = (unsigned int *)v178;
      a2 = (const char *)v177;
    }
    v64 = MEMORY[0x1E0C809B0];
    goto LABEL_86;
  }
  v178 = 0;
  if (a6 > 529)
  {
    v64 = MEMORY[0x1E0C809B0];
    if (a6 != 534 && a6 != 530)
      goto LABEL_86;
  }
  else
  {
    v64 = MEMORY[0x1E0C809B0];
    if (a6 != 274 && a6 != 278)
      goto LABEL_86;
  }
  v65 = operator new();
  v178 = (CI::Object *)CI::SwizzleImage::SwizzleImage(v65, (uint64_t *)a3, 61);
  a3 = (unsigned int *)v178;
LABEL_86:
  v78 = CI::Image::BuildMapToUnionRoi((CI::Image *)a3, v36, v205);
  (*(void (**)(unsigned int *))(*(_QWORD *)a3 + 88))(a3);
  v181 = v78;
  if (CI::print_tree_enabled(1, (uint64_t)a1))
  {
    v189[0] = v64;
    v189[1] = 0x40000000;
    v189[2] = ___ZN2CI21prepare_initial_graphEPNS_7ContextEPKcPNS_5ImageEPKNS_17RenderDestinationE6CGRectP12CGColorSpaceNS_11PixelFormatENS_19output_swizzle_infoERKNS_6AffineEbPNS_17TextureDescriptorE_block_invoke_2;
    v189[3] = &__block_descriptor_tmp_15_3;
    v189[4] = v78;
    buf[0].i64[0] = v64;
    buf[0].i64[1] = 0x40000000;
    buf[1].i64[0] = (uint64_t)___ZNK2CI5Image15traverse_uniqueEU13block_pointerFvPKS0_E_block_invoke;
    buf[1].i64[1] = (uint64_t)&unk_1E2EC8FA8;
    *(_QWORD *)&v234 = v189;
    CI::GraphObject::traverse_unique((uint64_t)a3, (uint64_t)buf);
    if (CI_PRINT_TREE_graphviz())
    {
      v168 = a6;
      v165 = a8;
      if (v45)
      {
        v80 = *(const __CFString **)(v45 + 16);
        v163 = v80 == 0;
        theString = v80;
        if (v80)
          v81 = CFStringCreateWithFormat(0, 0, CFSTR("destination=%@\n"), v80);
        else
          v81 = &stru_1E2ECD1B0;
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45))
        {
          v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
          v87 = CFStringCreateWithFormat(0, 0, CFSTR(" %p"), v86);
        }
        else
        {
          v87 = &stru_1E2ECD1B0;
        }
        cf = v81;
        if (a6)
          v85 = a6;
        else
          v85 = *(_DWORD *)(v45 + 32);
        v84 = v87;
      }
      else
      {
        theString = 0;
        v163 = 1;
        v84 = &stru_1E2ECD1B0;
        cf = &stru_1E2ECD1B0;
        v85 = a6;
      }
      v88 = CI::name_for_format(v85);
      if (*((_DWORD *)a1 + 86))
        v89 = "prepare";
      else
        v89 = "";
      v173 = v88;
      v174 = v89;
      v90 = (*(uint64_t (**)(uint64_t *))(*a1 + 264))(a1);
      v91 = "highp ";
      if (v90 != 1)
        v91 = "";
      if (v90 == -1)
        v91 = "lowp ";
      v166 = v91;
      v92 = (*(uint64_t (**)(uint64_t *))(*a1 + 304))(a1);
      v93 = (*(uint64_t (**)(uint64_t *))(*a1 + 272))(a1);
      if (*((_BYTE *)a1 + 236))
        v94 = ":";
      else
        v94 = "";
      v95 = a1[19];
      v96 = CI::name_for_format(*((_DWORD *)a1 + 8));
      v97 = (*(uint64_t (**)(uint64_t *))(*a1 + 168))(a1);
      v98 = "(lossyAllowed)";
      if (!v97)
        v98 = "";
      v99 = (CI::GraphObject *)CFStringCreateWithFormat(0, 0, CFSTR("initial graph %s\n%s%@\n(%s%s context %d%s%s frame %lu)\n%@workingFormat=%s%s\nformat=%s\nroi=[%g %g %g %g]"), v174, v177, v84, v166, v92, v93, v94, (char *)a1 + 236, v95, cf, v96, v98, v173, *(_QWORD *)&v205.origin.x, *(_QWORD *)&v205.origin.y, *(_QWORD *)&v205.size.width,
                                 *(_QWORD *)&v205.size.height);
      v101 = CI::GraphObject::graphviz_representation((CI::GraphObject *)a3, v99, 0, v100);
      if (v101)
      {
        v247 = 0u;
        v246 = 0u;
        v245 = 0u;
        v244 = 0u;
        v243 = 0u;
        v242 = 0u;
        v241 = 0u;
        v240 = 0u;
        v239 = 0u;
        v238 = 0u;
        v237 = 0u;
        v236 = 0u;
        v235 = 0u;
        v234 = 0u;
        memset(buf, 0, sizeof(buf));
        v162 = v84;
        if (v163)
        {
          strlcpy(buf[0].i8, (const char *)a1 + 236, 0x100uLL);
          v102 = theString;
        }
        else
        {
          v102 = theString;
          CFStringGetCString(theString, buf[0].i8, 256, 0x8000100u);
        }
        v232 = 0u;
        v231 = 0u;
        v230 = 0u;
        v229 = 0u;
        v228 = 0u;
        v227 = 0u;
        v225 = 0u;
        v226 = 0u;
        v223 = 0u;
        v224 = 0u;
        v221 = 0u;
        v222 = 0u;
        v219 = 0u;
        v220 = 0u;
        *(_OWORD *)__src = 0u;
        v218 = 0u;
        v103 = getpid();
        if (buf[0].i8[0])
          v104 = "_";
        else
          v104 = "";
        v105 = (*(uint64_t (**)(uint64_t *))(*a1 + 272))(a1);
        snprintf((char *)__src, 0x100uLL, "%d%s%s_%d_%lu_initial_graph", v103, v104, buf[0].i8, v105, a1[19]);
        v106 = (FILE *)CI_LOG_FILE();
        v206 = MEMORY[0x1E0C809B0];
        v207 = 0x40000000;
        *(_QWORD *)&v208 = ___ZN2CIL18dump_initial_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_5ImageERK6CGRectNS_11PixelFormatE_block_invoke;
        *((_QWORD *)&v208 + 1) = &__block_descriptor_tmp_118;
        v209 = *(double *)&v102;
        v210 = COERCE_DOUBLE(buf);
        v211 = a1;
        v212 = v177;
        v216 = v168;
        v213 = a4;
        v214 = &v205;
        v215 = __src;
        stream_to_file(v106, (uint64_t)&v206);
        if (CI::format_for_graphviz(void)::onceToken != -1)
          dispatch_once(&CI::format_for_graphviz(void)::onceToken, &__block_literal_global_78_0);
        v107 = CI::format_for_graphviz(void)::fmt;
        v108 = CI_TEMP_DIR();
        CIGVDumpToFile(v101, v107, (uint64_t)v108, (uint64_t)__src);
        CFRelease(v99);
        CFRelease(v101);
        CFRelease(cf);
        CFRelease(v162);
        a6 = v168;
        v64 = MEMORY[0x1E0C809B0];
        a8 = v165;
      }
      else
      {
        CFRelease(cf);
        CFRelease(v84);
        CFRelease(v99);
        a6 = v168;
        v64 = MEMORY[0x1E0C809B0];
        a8 = v165;
      }
    }
    else
    {
      v82 = (FILE *)CI_LOG_FILE();
      buf[0].i64[0] = v64;
      buf[0].i64[1] = 0x40000000;
      buf[1].i64[0] = (uint64_t)___ZN2CIL19print_initial_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_5ImageERK6CGRectNS_11PixelFormatE_block_invoke;
      buf[1].i64[1] = (uint64_t)&__block_descriptor_tmp_123;
      *(_QWORD *)&v234 = v45;
      *((_QWORD *)&v234 + 1) = a1;
      DWORD2(v236) = a6;
      *(_QWORD *)&v235 = a2;
      *((_QWORD *)&v235 + 1) = &v205;
      *(_QWORD *)&v236 = a3;
      stream_to_file(v82, (uint64_t)buf);
    }
    buf[0].i64[0] = v64;
    buf[0].i64[1] = 0x40000000;
    buf[1].i64[0] = (uint64_t)___ZNK2CI5Image15traverse_uniqueEU13block_pointerFvPKS0_E_block_invoke;
    buf[1].i64[1] = (uint64_t)&unk_1E2EC8FA8;
    *(_QWORD *)&v234 = &__block_literal_global_17_0;
    CI::GraphObject::traverse_unique((uint64_t)a3, (uint64_t)buf);
  }
  v109 = (CI::Image *)a1;
  v110 = a6;
  v111 = (uint64_t *)v109;
  cfa = (_QWORD *)CI::Image::BuildMapToUseCount((CI::Image *)a3, v109, v79);
  v112 = operator new();
  *((_QWORD *)CI::NodeWithChildren::NodeWithChildren((CI::NodeWithChildren *)v112, 0) + 6) = off_1E2EBBE70;
  do
    v113 = __ldaxr(&dword_1ECF872F0[52]);
  while (__stlxr(v113 + 1, &dword_1ECF872F0[52]));
  *(_QWORD *)v112 = &off_1E2EBAA30;
  *(_QWORD *)(v112 + 48) = &unk_1E2EBABD8;
  *(_QWORD *)(v112 + 64) = 0;
  *(_QWORD *)(v112 + 56) = v112 + 64;
  *(_QWORD *)(v112 + 88) = 0;
  *(_QWORD *)(v112 + 96) = 0;
  *(_QWORD *)(v112 + 72) = 0;
  *(_QWORD *)(v112 + 80) = v112 + 88;
  *(_DWORD *)(v112 + 104) = 0;
  *(_WORD *)(v112 + 108) = 0;
  v186[0] = v64;
  v186[1] = 1174405120;
  v186[2] = ___ZN2CI21prepare_initial_graphEPNS_7ContextEPKcPNS_5ImageEPKNS_17RenderDestinationE6CGRectP12CGColorSpaceNS_11PixelFormatENS_19output_swizzle_infoERKNS_6AffineEbPNS_17TextureDescriptorE_block_invoke_4;
  v186[3] = &__block_descriptor_tmp_19_2;
  v188[0] = 0;
  v188[1] = 0;
  v187 = v188;
  std::map<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,std::__tree_node<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,void *> *,long>>>((uint64_t *)&v187, v203, (unsigned int *)v204);
  v188[2] = (_QWORD *)v112;
  v188[3] = (_QWORD *)v181;
  v188[4] = cfa;
  v183[0] = v64;
  v183[1] = 1174405120;
  v183[2] = ___ZN2CI21prepare_initial_graphEPNS_7ContextEPKcPNS_5ImageEPKNS_17RenderDestinationE6CGRectP12CGColorSpaceNS_11PixelFormatENS_19output_swizzle_infoERKNS_6AffineEbPNS_17TextureDescriptorE_block_invoke_20;
  v183[3] = &__block_descriptor_tmp_22_3;
  v185[0] = 0;
  v185[1] = 0;
  v183[4] = v111;
  v184 = v185;
  std::map<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,std::__tree_node<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,void *> *,long>>>((uint64_t *)&v184, v203, (unsigned int *)v204);
  v185[2] = (_QWORD *)v112;
  v185[3] = (_QWORD *)v181;
  v185[4] = cfa;
  CI::Image::traverse_stoppable((uint64_t)a3, (uint64_t)v186, (uint64_t)v183);
  v114 = (CI::AffineNode *)CI::ImageToNodeMap::findAndRef(v112 + 56, *((_QWORD *)a3 + 10));
  v115 = CI::AffineNode::append_to_tree(v114, (CI::Node *)a8, (const CI::Affine *)a13);
  if (v114)
    CI::Object::unref(v114);
  v116 = a14;
  if (CI_INPUT_SRGB_TEXTURES() == 2
    && (((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v111 + 584))(v111, 264, 1) & 1) != 0
     || (*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*v111 + 584))(v111, 266, 1)))
  {
    v206 = 0.0;
    *(double *)&v207 = COERCE_DOUBLE(&v206);
    v208 = 0x2000000000uLL;
    v117 = operator new();
    *(_QWORD *)v117 = 0xA00000000;
    *(_OWORD *)(v117 + 24) = 0u;
    *(_OWORD *)(v117 + 40) = 0u;
    *(_OWORD *)(v117 + 56) = 0u;
    *(_OWORD *)(v117 + 72) = 0u;
    *(_OWORD *)(v117 + 88) = 0u;
    *(_QWORD *)(v117 + 16) = 0;
    *(_DWORD *)(v117 + 8) = 5;
    *((_QWORD *)&v208 + 1) = v117;
    v196 = 0.0;
    v197 = COERCE_DOUBLE(&v196);
    v198 = 0x2000000000uLL;
    v118 = operator new();
    *(_QWORD *)v118 = 0xA00000000;
    *(_OWORD *)(v118 + 24) = 0u;
    *(_OWORD *)(v118 + 40) = 0u;
    *(_OWORD *)(v118 + 56) = 0u;
    *(_OWORD *)(v118 + 72) = 0u;
    *(_OWORD *)(v118 + 88) = 0u;
    *(_QWORD *)(v118 + 16) = 0;
    *(_DWORD *)(v118 + 8) = 5;
    *((_QWORD *)&v198 + 1) = v118;
    v191 = 0.0;
    v192 = COERCE_DOUBLE(&v191);
    v193 = 0x2000000000uLL;
    v119 = operator new();
    *(_QWORD *)v119 = 0xA00000000;
    *(_OWORD *)(v119 + 24) = 0u;
    *(_OWORD *)(v119 + 40) = 0u;
    *(_OWORD *)(v119 + 56) = 0u;
    *(_OWORD *)(v119 + 72) = 0u;
    *(_OWORD *)(v119 + 88) = 0u;
    *(_QWORD *)(v119 + 16) = 0;
    *(_DWORD *)(v119 + 8) = 5;
    *((_QWORD *)&v193 + 1) = v119;
    buf[0].i64[0] = v64;
    buf[0].i64[1] = 0x40000000;
    buf[1].i64[0] = (uint64_t)___ZN2CIL22prune_input_sRGB_nodesEPKNS_7ContextEPNS_4NodeE_block_invoke;
    buf[1].i64[1] = (uint64_t)&unk_1E2EC9060;
    *(_QWORD *)&v234 = &v196;
    *((_QWORD *)&v234 + 1) = &v206;
    *((_QWORD *)&v235 + 1) = v111;
    *(_QWORD *)&v235 = &v191;
    *(_QWORD *)__src = v64;
    *(_QWORD *)&__src[8] = 0x40000000;
    *(_QWORD *)&v218 = ___ZN2CI4Node15traverse_uniqueEU13block_pointerFvPS0_E_block_invoke;
    *((_QWORD *)&v218 + 1) = &unk_1E2EB7F68;
    *(_QWORD *)&v219 = buf;
    CI::GraphObject::traverse_unique(v115, (uint64_t)__src);
    v120 = *(CI::SerialObjectPtrArray **)(v207 + 24);
    if (*(int *)v120 >= 1)
    {
      v121 = 0;
      do
      {
        if (v121 > 9)
          v122 = (_QWORD *)(*((_QWORD *)v120 + 2) + 8 * (v121 - 10));
        else
          v122 = (_QWORD *)((char *)v120 + 8 * v121 + 24);
        v123 = *v122;
        v124 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v122 + 48))(*v122, 0);
        v125 = v124;
        v126 = *(unsigned int **)(*(_QWORD *)&v192 + 24);
        v127 = *v126;
        if ((int)v127 < 1)
          goto LABEL_147;
        v128 = 0;
        v129 = v126 + 6;
        while (1)
        {
          v130 = v129;
          if (v128 >= 0xA)
            v130 = (unsigned int *)(*((_QWORD *)v126 + 2) + 8 * (v128 - 10));
          if (*(_QWORD *)v130 == v124)
            break;
          ++v128;
          v129 += 2;
          if (v127 == v128)
            goto LABEL_147;
        }
        if ((v128 & 0x80000000) != 0)
        {
LABEL_147:
          *(_DWORD *)(v123 + 56) = 0;
          v131 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v124 + 400))(v124);
          if (!v131)
          {
            v132 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v125 + 48))(v125, 0);
            v131 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 400))(v132);
          }
          *(_BYTE *)(v131 + 4) = 1;
        }
        ++v121;
        v120 = *(CI::SerialObjectPtrArray **)(v207 + 24);
      }
      while ((uint64_t)v121 < *(int *)v120);
    }
    CI::SerialObjectPtrArray::~SerialObjectPtrArray(v120);
    MEMORY[0x194025AAC]();
    v133 = *(CI::SerialObjectPtrArray **)(*(_QWORD *)&v197 + 24);
    if (v133)
    {
      CI::SerialObjectPtrArray::~SerialObjectPtrArray(v133);
      MEMORY[0x194025AAC]();
    }
    v134 = *(CI::SerialObjectPtrArray **)(*(_QWORD *)&v192 + 24);
    v64 = MEMORY[0x1E0C809B0];
    v116 = a14;
    if (v134)
    {
      CI::SerialObjectPtrArray::~SerialObjectPtrArray(v134);
      MEMORY[0x194025AAC]();
    }
    _Block_object_dispose(&v191, 8);
    _Block_object_dispose(&v196, 8);
    _Block_object_dispose(&v206, 8);
  }
  v206 = 0.0;
  *(double *)&v207 = COERCE_DOUBLE(&v206);
  *(_QWORD *)&v208 = 0x2000000000;
  *((_QWORD *)&v208 + 1) = v115;
  v135 = CI_OUTPUT_SRGB_TEXTURES();
  if (v116 && v135)
  {
    buf[0].i64[0] = v64;
    buf[0].i64[1] = 0x40000000;
    buf[1].i64[0] = (uint64_t)___ZN2CIL22prune_output_sRGB_nodeEPKNS_7ContextEPNS_4NodeEPNS_17TextureDescriptorE_block_invoke;
    buf[1].i64[1] = (uint64_t)&unk_1E2EC9088;
    *(_QWORD *)&v235 = v116;
    *((_QWORD *)&v234 + 1) = v111;
    *(_QWORD *)&v234 = &v206;
    *(_QWORD *)__src = v64;
    *(_QWORD *)&__src[8] = 0x40000000;
    *(_QWORD *)&v218 = ___ZN2CI4Node27traverse_preorder_stoppableEU13block_pointerFbPS0_S1_iiE_block_invoke;
    *((_QWORD *)&v218 + 1) = &unk_1E2EC90B0;
    *(_QWORD *)&v219 = buf;
    CI::GraphObject::traverse_preorder_stoppable(v115, 0, 0, 0, (uint64_t)__src);
  }
  v32 = *(CI::GraphObject **)(v207 + 24);
  _Block_object_dispose(&v206, 8);
  v136 = (*(uint64_t (**)(CI::GraphObject *))(*(_QWORD *)v32 + 16))(v32);
  if ((CI::is_image_type(v136) & 1) != 0
    || (*(unsigned int (**)(CI::GraphObject *))(*(_QWORD *)v32 + 16))(v32) == 41)
  {
    v137 = CI::SampleModeNode::append_to_tree((uint64_t)v32, 0xFFFFFFFFLL);
    CI::Object::unref(v32);
    v32 = (CI::GraphObject *)v137;
  }
  if (CI_CACHE_PROGRAM_GRAPH())
  {
    (*(void (**)(uint64_t, CI::GraphObject *, _QWORD))(*(_QWORD *)v112 + 200))(v112, v32, 0);
    if (v116)
    {
      *(_DWORD *)(v112 + 104) = *(_DWORD *)v116;
      *(_WORD *)(v112 + 108) = *(_WORD *)(v116 + 4);
    }
    CI::ObjectCache<CI::Node,unsigned long long,false>::insert(v111[39], v176, (CI::Object *)v112, a3[18]);
  }
  CI::Object::unref((CI::Object *)v112);
  *(_QWORD *)__src = v64;
  *(_QWORD *)&__src[8] = 0x40000000;
  *(_QWORD *)&v218 = ___ZN2CIL37traverse_node_graph_gathering_digestsEPKNS_7ContextEPNS_4NodeE_block_invoke;
  *((_QWORD *)&v218 + 1) = &__block_descriptor_tmp_54;
  *(_QWORD *)&v219 = v111;
  buf[0].i64[0] = v64;
  buf[0].i64[1] = 0x40000000;
  buf[1].i64[0] = (uint64_t)___ZN2CI4Node15traverse_uniqueEU13block_pointerFvPS0_E_block_invoke;
  buf[1].i64[1] = (uint64_t)&unk_1E2EB7F68;
  *(_QWORD *)&v234 = __src;
  CI::GraphObject::traverse_unique((uint64_t)v32, (uint64_t)buf);
  if (CI::print_tree_enabled(2, (uint64_t)v111))
  {
    v138 = v205.origin.x;
    v139 = v205.origin.y;
    v140 = v205.size.width;
    v141 = v205.size.height;
    buf[0].i64[0] = v64;
    buf[0].i64[1] = 0x40000000;
    buf[1].i64[0] = (uint64_t)___ZN2CI4Node15traverse_uniqueEU13block_pointerFvPS0_E_block_invoke;
    buf[1].i64[1] = (uint64_t)&unk_1E2EB7F68;
    *(_QWORD *)&v234 = &__block_literal_global_146_0;
    CI::GraphObject::traverse_unique((uint64_t)v32, (uint64_t)buf);
    v143 = CI::Node::BuildMapToUseCount(v32, v142);
    buf[0].i64[0] = 0;
    buf[0].i64[1] = -1;
    *(_QWORD *)&v234 = 0;
    buf[1] = (int64x2_t)0xFFFFFFFFFFFFFFFFLL;
    DWORD2(v234) = 0;
    v144 = (*(uint64_t (**)(uint64_t *))(*v111 + 440))(v111);
    (*(void (**)(CI::GraphObject *, _QWORD, uint64_t, int64x2_t *, double, double, double, double))(*(_QWORD *)v32 + 344))(v32, 0, v144, buf, v138, v139, v140, v141);
    CI::traverse_gathering_rois((uint64_t)v111, v32, 0, -1, -1, v143, 1);
    if (v143)
    {
      std::__tree<std::__value_type<CI::Node const*,CI::useCountDepth>,std::__map_value_compare<CI::Node const*,std::__value_type<CI::Node const*,CI::useCountDepth>,std::less<CI::Node const*>,true>,std::allocator<std::__value_type<CI::Node const*,CI::useCountDepth>>>::destroy(v143, *(_QWORD **)(v143 + 8));
      MEMORY[0x194025AAC](v143, 0x1020C4062D53EE8);
    }
    if (CI_PRINT_TREE_graphviz())
    {
      CI::dump_optimized_graph((uint64_t)v111, a4, v177, v32, &v205, v110);
    }
    else
    {
      v145 = (FILE *)CI_LOG_FILE();
      buf[0].i64[0] = v64;
      buf[0].i64[1] = 0x40000000;
      buf[1].i64[0] = (uint64_t)___ZN2CIL21print_optimized_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke;
      buf[1].i64[1] = (uint64_t)&__block_descriptor_tmp_89_1;
      *(_QWORD *)&v234 = a4;
      *((_QWORD *)&v234 + 1) = v111;
      DWORD2(v236) = v110;
      *(_QWORD *)&v235 = v177;
      *((_QWORD *)&v235 + 1) = &v205;
      *(_QWORD *)&v236 = v32;
      stream_to_file(v145, (uint64_t)buf);
    }
  }
  if (v175)
    CI::Object::unref(v175);
  if (matched)
    CI::Object::unref(matched);
  if (v170)
    CI::Object::unref(v170);
  if (v169)
    CI::Object::unref(v169);
  if (v178)
    CI::Object::unref(v178);
  if (v171)
    CI::Object::unref(v171);
  if (v181)
  {
    std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy(v181, *(_QWORD **)(v181 + 8));
    MEMORY[0x194025AAC](v181, 0x1020C4062D53EE8);
  }
  if (cfa)
  {
    std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)cfa, (_QWORD *)cfa[1]);
    MEMORY[0x194025AAC](cfa, 0x1020C4062D53EE8);
  }
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&v184, v185[0]);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&v187, v188[0]);
  v146 = ci_signpost_log_render();
  v147 = v202;
  if (v202 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v148 = v146;
    if (os_signpost_enabled(v146))
    {
      buf[0].i16[0] = 0;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v148, OS_SIGNPOST_INTERVAL_END, v147, "prepare_initial_graph", (const char *)&unk_192520C83, (uint8_t *)buf, 2u);
    }
  }
  TimerBase::~TimerBase((TimerBase *)v201);
LABEL_192:
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&v203, v204[0]);
  return v32;
}

uint64_t CI::ObjectCache<CI::Node,unsigned long long,false>::find(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD block[7];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN2CI11ObjectCacheINS_4NodeEyLb0EE4findEy_block_invoke;
  block[3] = &unk_1E2EC9258;
  block[5] = a1;
  block[6] = a2;
  block[4] = &v5;
  dispatch_sync(*(dispatch_queue_t *)(a1 + 56), block);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

BOOL CI::print_tree_enabled(int a1, uint64_t a2)
{
  int v3;
  _BOOL8 result;

  if ((CI_PRINT_TREE() & a1) == 0)
    return 0;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2);
  result = CI_PRINT_TREE_context(v3, (char *)(a2 + 236));
  if (!result)
    return result;
  return !CI_PRINT_TREE_frame() || *(_QWORD *)(a2 + 152) == (int)CI_PRINT_TREE_frame();
}

void CI::dump_optimized_graph(uint64_t a1, uint64_t a2, uint64_t a3, CI::GraphObject *a4, _QWORD *a5, int a6)
{
  const __CFString *v9;
  BOOL v10;
  CFStringRef v11;
  const __CFString *v12;
  int v13;
  uint64_t v14;
  CFStringRef v15;
  const char *v16;
  const char *v17;
  int v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  int v26;
  const char *v27;
  CI::GraphObject *v28;
  CGImage *v29;
  void *v30;
  void *v31;
  int v32;
  uint64_t v33;
  const __CFString *v34;
  const char *v35;
  pid_t v36;
  int v37;
  FILE *v38;
  unsigned int v39;
  char *v40;
  const __CFString *theString;
  char v42;
  const char *v45;
  const char *v46;
  const __CFString *cf;
  _QWORD v51[11];
  int v52;
  char __str[16];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char __dst[16];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v9 = *(const __CFString **)(a2 + 16);
    v10 = v9 == 0;
    theString = v9;
    if (v9)
      v11 = CFStringCreateWithFormat(0, 0, CFSTR("destination=%@\n"), v9);
    else
      v11 = &stru_1E2ECD1B0;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2))
    {
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v15 = CFStringCreateWithFormat(0, 0, CFSTR(" %p"), v14);
    }
    else
    {
      v15 = &stru_1E2ECD1B0;
    }
    v42 = v10;
    cf = v11;
    if (a6)
      v13 = a6;
    else
      v13 = *(_DWORD *)(a2 + 32);
    v12 = v15;
  }
  else
  {
    theString = 0;
    v42 = 1;
    v12 = &stru_1E2ECD1B0;
    cf = &stru_1E2ECD1B0;
    v13 = a6;
  }
  v16 = CI::name_for_format(v13);
  if (*(_DWORD *)(a1 + 344))
    v17 = "prepare";
  else
    v17 = "";
  v45 = v16;
  v46 = v17;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
  v19 = "highp ";
  if (v18 != 1)
    v19 = "";
  if (v18 == -1)
    v20 = "lowp ";
  else
    v20 = v19;
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  if (*(_BYTE *)(a1 + 236))
    v23 = ":";
  else
    v23 = "";
  v24 = *(_QWORD *)(a1 + 152);
  v25 = CI::name_for_format(*(_DWORD *)(a1 + 32));
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  v27 = "(lossyAllowed)";
  if (!v26)
    v27 = "";
  v28 = (CI::GraphObject *)CFStringCreateWithFormat(0, 0, CFSTR("optimized graph %s\n%s%@\n(%s%s context %d%s%s frame %lu)\n%@workingFormat=%s%s\nformat=%s\nroi=[%g %g %g %g]"), v46, a3, v12, v20, v21, v22, v23, a1 + 236, v24, cf, v25, v27, v45, *a5, a5[1], a5[2],
                             a5[3]);
  v30 = CI::GraphObject::graphviz_representation(a4, v28, 0, v29);
  if (v30)
  {
    v31 = v30;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    *(_OWORD *)__dst = 0u;
    v70 = 0u;
    if ((v42 & 1) != 0)
    {
      strlcpy(__dst, (const char *)(a1 + 236), 0x100uLL);
      v32 = a6;
      v33 = a2;
      v34 = theString;
    }
    else
    {
      v34 = theString;
      CFStringGetCString(theString, __dst, 256, 0x8000100u);
      v32 = a6;
      v33 = a2;
    }
    v35 = "";
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    *(_OWORD *)__str = 0u;
    v54 = 0u;
    v36 = getpid();
    if (__dst[0])
      v35 = "_";
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
    snprintf(__str, 0x100uLL, "%d%s%s_%d_%lu_optimized_graph", v36, v35, __dst, v37, *(_QWORD *)(a1 + 152));
    v38 = (FILE *)CI_LOG_FILE();
    v51[0] = MEMORY[0x1E0C809B0];
    v51[1] = 0x40000000;
    v51[2] = ___ZN2CIL20dump_optimized_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke;
    v51[3] = &__block_descriptor_tmp_75;
    v51[4] = v34;
    v51[5] = __dst;
    v51[6] = a1;
    v51[7] = a3;
    v52 = v32;
    v51[8] = v33;
    v51[9] = a5;
    v51[10] = __str;
    stream_to_file(v38, (uint64_t)v51);
    if (CI::format_for_graphviz(void)::onceToken != -1)
      dispatch_once(&CI::format_for_graphviz(void)::onceToken, &__block_literal_global_78_0);
    v39 = CI::format_for_graphviz(void)::fmt;
    v40 = CI_TEMP_DIR();
    CIGVDumpToFile(v31, v39, (uint64_t)v40, (uint64_t)__str);
    CFRelease(v28);
    CFRelease(v31);
    CFRelease(cf);
    CFRelease(v12);
  }
  else
  {
    CFRelease(cf);
    CFRelease(v12);
    CFRelease(v28);
  }
}

__n128 ___ZN2CI21prepare_initial_graphEPNS_7ContextEPKcPNS_5ImageEPKNS_17RenderDestinationE6CGRectP12CGColorSpaceNS_11PixelFormatENS_19output_swizzle_infoERKNS_6AffineEbPNS_17TextureDescriptorE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  __n128 result;
  __int128 v12;

  v2 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD **)(v2 + 8);
  v3 = (_QWORD *)(v2 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 80);
    v7 = v3;
    do
    {
      v8 = v4[4];
      v9 = v8 >= v6;
      if (v8 >= v6)
        v10 = v4;
      else
        v10 = v4 + 1;
      if (v9)
        v7 = v4;
      v4 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != v3 && v6 >= v7[4])
    {
      result = *(__n128 *)(v7 + 5);
      v12 = *(_OWORD *)(v7 + 7);
      *(__n128 *)(a2 + 16) = result;
      *(_OWORD *)(a2 + 32) = v12;
    }
  }
  return result;
}

__n128 ___ZN2CI21prepare_initial_graphEPNS_7ContextEPKcPNS_5ImageEPKNS_17RenderDestinationE6CGRectP12CGColorSpaceNS_11PixelFormatENS_19output_swizzle_infoERKNS_6AffineEbPNS_17TextureDescriptorE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)MEMORY[0x1E0C9D628];
  v3 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(a2 + 16) = *MEMORY[0x1E0C9D628];
  *(_OWORD *)(a2 + 32) = v3;
  return result;
}

void CI::Image::traverse_stoppable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[5];
  _QWORD v4[5];

  v3[4] = a3;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI5Image18traverse_stoppableEU13block_pointerFbPKS0_S2_EU13block_pointerFvS2_S2_E_block_invoke;
  v4[3] = &unk_1E2EC9010;
  v4[4] = a2;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZNK2CI5Image18traverse_stoppableEU13block_pointerFbPKS0_S2_EU13block_pointerFvS2_S2_E_block_invoke_2;
  v3[3] = &unk_1E2EC9038;
  CI::GraphObject::traverse_stoppable(a1, 0, 0, 0, (uint64_t)v4, (uint64_t)v3);
}

uint64_t ___ZN2CI21prepare_initial_graphEPNS_7ContextEPKcPNS_5ImageEPKNS_17RenderDestinationE6CGRectP12CGColorSpaceNS_11PixelFormatENS_19output_swizzle_infoERKNS_6AffineEbPNS_17TextureDescriptorE_block_invoke_4(_QWORD *a1, _QWORD *a2)
{
  return CI::Image::render_graph_early_out(a2, (uint64_t)(a1 + 4), (uint64_t *)(a1[7] + 56), a1[8], a1[9]);
}

uint64_t *__copy_helper_block_8_32c120_ZTSNSt3__13mapIN2CI10ImageIndexENS1_30ImageDigestForRenderGraphCacheENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v2 = (uint64_t *)(a1 + 32);
  v2[2] = 0;
  return std::map<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,std::__tree_node<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,void *> *,long>>>(v2, *(unsigned int **)(a2 + 32), (unsigned int *)(a2 + 40));
}

void __destroy_helper_block_8_32c120_ZTSNSt3__13mapIN2CI10ImageIndexENS1_30ImageDigestForRenderGraphCacheENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy(a1 + 32, *(_QWORD **)(a1 + 40));
}

void ___ZN2CI21prepare_initial_graphEPNS_7ContextEPKcPNS_5ImageEPKNS_17RenderDestinationE6CGRectP12CGColorSpaceNS_11PixelFormatENS_19output_swizzle_infoERKNS_6AffineEbPNS_17TextureDescriptorE_block_invoke_20(uint64_t *a1, _QWORD *a2)
{
  CI::Image::add_render_graph_to_map(a2, a1[4], (uint64_t)(a1 + 5), (uint64_t *)(a1[8] + 56), a1[9], a1[10]);
}

uint64_t *__copy_helper_block_8_40c120_ZTSNSt3__13mapIN2CI10ImageIndexENS1_30ImageDigestForRenderGraphCacheENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  v2 = (uint64_t *)(a1 + 40);
  v2[2] = 0;
  return std::map<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,std::__tree_node<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,void *> *,long>>>(v2, *(unsigned int **)(a2 + 40), (unsigned int *)(a2 + 48));
}

void __destroy_helper_block_8_40c120_ZTSNSt3__13mapIN2CI10ImageIndexENS1_30ImageDigestForRenderGraphCacheENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
}

void CI::ObjectCache<CI::Node,unsigned long long,false>::insert(uint64_t a1, uint64_t a2, CI::Object *this, int a4)
{
  _QWORD v8[7];
  int v9;

  if (this)
    CI::Object::ref((uint64_t)this);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN2CI11ObjectCacheINS_4NodeEyLb0EE6insertEyPS1_j_block_invoke;
  v8[3] = &__block_descriptor_tmp_210;
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = this;
  v9 = a4;
  Queue::execute_async((dispatch_queue_t *)(a1 + 56), v8);
}

CI::RenderTask *CI::image_render(CI *this, char *a2, CI::Context *a3, CI::Image *a4, const CI::RenderDestination *a5)
{
  double Current;
  CGFloat v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  CI::GraphObject *v16;
  uint64_t v17;
  CI *v18;
  CI::RenderTask *v19;
  CI::Context *v20;
  double v21;
  double v22;
  CI::Node *v23;
  NSObject *v24;
  int v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  double v31;
  int v32;
  const char *v33;
  const char *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD v38[5];
  CGRect v39;
  _BYTE buf[24];
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  unint64_t v49;
  __int16 v50;
  unint64_t v51;
  __int16 v52;
  double v53;
  __int16 v54;
  const char *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  Current = CFAbsoluteTimeGetCurrent();
  v10 = (*(double (**)(CI::Context *))(*(_QWORD *)a3 + 88))(a3);
  v12 = v11;
  v14 = v13;
  v39.origin.x = v10;
  v39.origin.y = v15;
  v39.size.width = v11;
  v39.size.height = v13;
  *(_QWORD *)buf = 0x3FF0000000000000;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = 0;
  v41 = 0x3FF0000000000000;
  v42 = 0;
  v43 = 0;
  v16 = CI::prepare_initial_graph((uint64_t *)a2, (const char *)this, (unsigned int *)a3, (uint64_t)a4, 0, 0, (uint64_t)&CI::defaultSwizzle, (uint64_t)buf, v10, v15, v11, v13, 0, 0);
  if (v16)
  {
    v18 = v16;
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 0x40000000;
    v38[2] = ___ZN2CI12image_renderEPKcPNS_7ContextEPNS_5ImageEPKNS_17RenderDestinationE_block_invoke;
    v38[3] = &__block_descriptor_tmp_27_1;
    v38[4] = a2;
    v19 = (CI::RenderTask *)CI::tile_node_graph((uint64_t)a2, (uint64_t)a4, (const char *)this, v16, v17, &v39, 0, (uint64_t)&CI::defaultSwizzle, (uint64_t)v38);
    v21 = CFAbsoluteTimeGetCurrent();
    if (!*((_QWORD *)v19 + 16))
    {
      v22 = v21;
      if (CI::print_time_enabled((CI *)a2, v20))
      {
        v24 = ci_logger_render();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          v36 = vcvtpd_u64_f64(v12);
          v37 = vcvtpd_u64_f64(v14);
          v25 = (*(uint64_t (**)(char *))(*(_QWORD *)a2 + 264))(a2);
          v26 = "highp ";
          if (v25 != 1)
            v26 = "";
          v27 = "";
          if (v25 == -1)
            v26 = "lowp ";
          v35 = v26;
          v28 = (*(uint64_t (**)(char *))(*(_QWORD *)a2 + 304))(a2);
          v29 = (*(uint64_t (**)(char *))(*(_QWORD *)a2 + 272))(a2);
          if (a2[236])
            v27 = ":";
          v30 = *((_QWORD *)a2 + 19);
          v31 = (v22 - Current) * 1000.0;
          v32 = (*(uint64_t (**)(char *))(*(_QWORD *)a2 + 248))(a2);
          *(_DWORD *)buf = 136448770;
          v33 = " (aborted)";
          *(_QWORD *)&buf[4] = this;
          if (!v32)
            v33 = "";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v35;
          *(_WORD *)&buf[22] = 2082;
          v41 = v28;
          LOWORD(v42) = 1024;
          *(_DWORD *)((char *)&v42 + 2) = v29;
          HIWORD(v42) = 2082;
          v43 = v27;
          v44 = 2082;
          v45 = a2 + 236;
          v46 = 2048;
          v47 = v30;
          v48 = 2048;
          v49 = v36;
          v50 = 2048;
          v51 = v37;
          v52 = 2048;
          v53 = v31;
          v54 = 2082;
          v55 = v33;
          _os_log_impl(&dword_1921E4000, v24, OS_LOG_TYPE_DEFAULT, "CI_PRINT_TIME %{public}s (%{public}s%{public}s context %d%{public}s%{public}s frame %lu) (%llux%llu) = %.2fms%{public}s\n\n", buf, 0x6Cu);
        }
      }
      CI::traverse_releasing_resources(v18, v23);
      CI::Object::unref(v18);
    }
  }
  else
  {
    v19 = (CI::RenderTask *)operator new();
    CI::RenderTask::RenderTask(v19, "%s:%d: Assertion failed: %s\n", "/Library/Caches/com.apple.xbs/Sources/EmbeddedCoreImage/Framework/internal/render.cpp", 2655, "graph.node != NULL");
  }
  return v19;
}

uint64_t CI::tile_node_graph(uint64_t a1, uint64_t a2, const char *a3, _DWORD *a4, uint64_t a5, CGRect *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CI::RenderTask *v21;
  uint64_t v22;
  const __CFString *v23;
  _BOOL4 IsInfinite;
  CI::RenderTask *v26;
  unsigned __int8 v27;
  CI::Context *v28;
  NSObject *v29;
  unint64_t v30;
  unint64_t v31;
  NSObject *v32;
  _BOOL4 v33;
  char v34;
  _QWORD block[5];
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;

  if (!a1)
  {
    v21 = (CI::RenderTask *)operator new();
    v22 = (uint64_t)v21;
    v23 = CFSTR("Invalid context");
    goto LABEL_8;
  }
  if (!a4)
  {
    v21 = (CI::RenderTask *)operator new();
    v22 = (uint64_t)v21;
    v23 = CFSTR("Invalid graph");
    goto LABEL_8;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1))
  {
    v21 = (CI::RenderTask *)operator new();
    v22 = (uint64_t)v21;
    v23 = CFSTR("Render aborted");
    goto LABEL_8;
  }
  v37.origin.x = (*(double (**)(_DWORD *))(*(_QWORD *)a4 + 160))(a4);
  v38 = CGRectInset(v37, 0.00100000005, 0.00100000005);
  v41 = CGRectIntegral(v38);
  v39 = CGRectIntersection(*a6, v41);
  x = v39.origin.x;
  y = v39.origin.y;
  width = v39.size.width;
  height = v39.size.height;
  v36 = v39;
  if (CGRectIsEmpty(v39))
  {
    v21 = (CI::RenderTask *)operator new();
    v22 = (uint64_t)v21;
    v23 = CFSTR("No need to render");
LABEL_8:
    CI::RenderTask::RenderTask(v21, v23);
    return v22;
  }
  v40.origin.x = x;
  v40.origin.y = y;
  v40.size.width = width;
  v40.size.height = height;
  IsInfinite = CGRectIsInfinite(v40);
  v21 = (CI::RenderTask *)operator new();
  v22 = (uint64_t)v21;
  if (IsInfinite)
  {
    v23 = CFSTR("Cannot render to infinite output region.");
    goto LABEL_8;
  }
  v26 = (CI::RenderTask *)CI::RenderTask::RenderTask(v21, a3, a1, a4, &v36, a7, a2);
  CI::recursive_tile(v26, a1, a2, a3, a4, a5, &v36.origin.x, a7, a8, a9);
  if ((v27 & 1) == 0
  {
    if ((CI_PRINT_TREE_dump_timing() & 1) != 0 || (CI_PRINT_TREE_dump_intermediates() & 1) != 0)
      v34 = 1;
    else
      v34 = CI_PRINT_TREE_dump_outputs();
    CI::tile_node_graph(CI::Context *,CI::RenderDestination const*,char const*,CI::GraphWithDepth,CGRect const&,CI::PixelFormat,CI::output_swizzle_info const&,CI::TileTask *({block_pointer})(CI::ProgramNode *,CGRect))::dump_post = v34;
  }
  if (CI_PRINT_TREE_graphviz()
    && CI::tile_node_graph(CI::Context *,CI::RenderDestination const*,char const*,CI::GraphWithDepth,CGRect const&,CI::PixelFormat,CI::output_swizzle_info const&,CI::TileTask *({block_pointer})(CI::ProgramNode *,CGRect))::dump_post
    && CI::print_tree_enabled(4, a1))
  {
    v28 = (CI::Context *)CI::Object::ref(v22);
    v29 = CI::Context::render_completion_queue(v28);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN2CIL15tile_node_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcNS_14GraphWithDepthERK6CGRectNS_11PixelFormatERKNS_19output_swizzle_infoEU13block_pointerFPNS_8TileTaskEPNS_11ProgramNodeES8_E_block_invoke;
    block[3] = &__block_descriptor_tmp_157;
    block[4] = v22;
    dispatch_async(v29, block);
  }
  if (*(_QWORD *)(v22 + 128))
  {
    v30 = vcvtpd_u64_f64(v36.size.height) * vcvtpd_u64_f64(v36.size.width);
    v31 = *(_QWORD *)(v22 + 88);
    if (v31 < v30 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1) & 1) == 0)
    {
      v32 = ci_logger_render();
      v33 = os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
      if (v31)
      {
        if (v33)
          CI::tile_node_graph(v30, v31, v32);
      }
      else if (v33)
      {
        CI::tile_node_graph(v30, v32);
      }
    }
  }
  return v22;
}

uint64_t CI::print_time_enabled(CI *this, CI::Context *a2)
{
  uint64_t result;
  int v4;

  result = CI_PRINT_TIME();
  if ((_DWORD)result)
  {
    v4 = (*(uint64_t (**)(CI *))(*(_QWORD *)this + 272))(this);
    return CI_PRINT_TIME_context(v4, (char *)this + 236);
  }
  return result;
}

uint64_t CI::image_render_to_display(uint64_t result, unsigned int *a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  uint64_t v13;
  double Current;
  CI::GraphObject *v15;
  uint64_t v16;
  CI *v17;
  uint64_t v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  CI::Object *v25;
  double v26;
  CI::Context *v27;
  CI::Node *v28;
  NSObject *v29;
  int v30;
  const char *v31;
  int v32;
  const char *v33;
  uint64_t v34;
  double v35;
  int v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v42[5];
  _QWORD v43[6];
  CGRect v44;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  unint64_t v60;
  __int16 v61;
  unint64_t v62;
  __int16 v63;
  double v64;
  __int16 v65;
  const char *v66;
  uint64_t v67;
  CGRect v68;

  v67 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v13 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 376))(result);
    if ((_DWORD)result)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13) == 76)
        a3 = CI::GLContext::user_destination_format((CI::GLContext *)v13);
      if (a2)
      {
        Current = CFAbsoluteTimeGetCurrent();
        v43[0] = 0x3FF0000000000000;
        v43[1] = 0;
        v43[2] = 0;
        v43[3] = 0x3FF0000000000000;
        *(double *)&v43[4] = -(a4 - a4);
        *(double *)&v43[5] = -(a5 - a5);
        v15 = CI::prepare_initial_graph((uint64_t *)v13, "render_to_display", a2, 0, 0, a3, (uint64_t)&CI::defaultSwizzle, (uint64_t)v43, a4, a5, a6, a7, 0, 0);
        if (v15)
        {
          v17 = v15;
          v18 = v16;
          v68.origin.x = a4;
          v68.origin.y = a5;
          v68.size.width = a6;
          v68.size.height = a7;
          v19 = CI::Affine::applyToRect((CI::Affine *)v43, v68);
          v21 = v20;
          v23 = v22;
          v44.origin.x = v19;
          v44.origin.y = v24;
          v44.size.width = v20;
          v44.size.height = v22;
          v42[0] = MEMORY[0x1E0C809B0];
          v42[1] = 0x40000000;
          v42[2] = ___ZN2CIL13_image_renderEPKcPNS_7ContextEPNS_5ImageE6CGRectNS_11PixelFormatEmRK7CGPoint_block_invoke;
          v42[3] = &__block_descriptor_tmp_199_0;
          v42[4] = v13;
          v25 = (CI::Object *)CI::tile_node_graph(v13, 0, "render_to_display", v17, v18, &v44, a3, (uint64_t)&CI::defaultSwizzle, (uint64_t)v42);
          v26 = CFAbsoluteTimeGetCurrent();
          if (CI::print_time_enabled((CI *)v13, v27))
          {
            v29 = ci_logger_render();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              v40 = vcvtpd_u64_f64(v21);
              v41 = vcvtpd_u64_f64(v23);
              v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 264))(v13);
              v31 = "highp ";
              if (v30 != 1)
                v31 = "";
              if (v30 == -1)
                v31 = "lowp ";
              v39 = v31;
              v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 304))(v13);
              v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 272))(v13);
              if (*(_BYTE *)(v13 + 236))
                v33 = ":";
              else
                v33 = "";
              v34 = *(_QWORD *)(v13 + 152);
              v35 = (v26 - Current) * 1000.0;
              v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 248))(v13);
              *(_DWORD *)buf = 136448770;
              v37 = " (aborted)";
              v46 = "render_to_display";
              if (!v36)
                v37 = "";
              v47 = 2082;
              v48 = v39;
              v49 = 2082;
              v50 = v38;
              v51 = 1024;
              v52 = v32;
              v53 = 2082;
              v54 = v33;
              v55 = 2082;
              v56 = v13 + 236;
              v57 = 2048;
              v58 = v34;
              v59 = 2048;
              v60 = v40;
              v61 = 2048;
              v62 = v41;
              v63 = 2048;
              v64 = v35;
              v65 = 2082;
              v66 = v37;
              _os_log_impl(&dword_1921E4000, v29, OS_LOG_TYPE_DEFAULT, "CI_PRINT_TIME %{public}s (%{public}s%{public}s context %d%{public}s%{public}s frame %lu) (%llux%llu) = %.2fms%{public}s\n\n", buf, 0x6Cu);
            }
          }
          CI::traverse_releasing_resources(v17, v28);
          CI::Object::unref(v17);
          if (v25)
            CI::Object::unref(v25);
        }
      }
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 384))(v13);
    }
  }
  return result;
}

CI::RenderTask *CI::image_render_to_surface(CI *this, CI::Context *a2, IOSurfaceRef buffer, CGRect a4, __IOSurface *a5, const CI::RenderDestination *a6)
{
  double height;
  double width;
  CGFloat y;
  CGFloat x;
  CI *PixelFormat;
  unsigned int v15;
  __IOSurface *v16;
  uint64_t v17;
  __int32 v18;
  NSObject *v19;
  NSObject *v20;
  int v21;
  CI::RenderTask *v22;
  unsigned int v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  size_t v29;
  double v30;
  size_t v31;
  double v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  unint64_t v44;
  unint64_t v45;
  NSObject *v46;
  os_signpost_id_t v47;
  uint64_t v48;
  CGColorSpace *v49;
  NSObject *v50;
  os_signpost_id_t v51;
  NSObject *v52;
  const CI::RenderDestination *v53;
  double Current;
  double v56;
  double v57;
  CI::GraphObject *v58;
  uint64_t v59;
  CI *v60;
  uint64_t v61;
  CI::Node *v62;
  double v63;
  double v64;
  NSObject *v65;
  int v66;
  const char *v67;
  const char *v68;
  int v69;
  uint64_t v70;
  const char *v71;
  int v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD v78[7];
  _OWORD v79[3];
  CGAffineTransform v80;
  CGAffineTransform v81;
  __int128 v82;
  unint64_t v83;
  double v84[2];
  int64x2_t v85;
  int64x2_t v86;
  __int128 v87;
  CGRect v88;
  uint8_t v89[16];
  _BYTE buf[24];
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  __int16 v94;
  char *v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  unint64_t v99;
  __int16 v100;
  unint64_t v101;
  __int16 v102;
  const char *v103;
  __int16 v104;
  double v105;
  __int16 v106;
  const char *v107;
  uint64_t v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;
  CGRect v112;
  CGRect v113;
  CGRect v114;
  CGRect v115;
  CGRect v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;

  v108 = *MEMORY[0x1E0C80C00];
  v88 = a4;
  if (this)
  {
    height = a4.size.height;
    width = a4.size.width;
    y = a4.origin.y;
    x = a4.origin.x;
    PixelFormat = (CI *)IOSurfaceGetPixelFormat(buffer);
    v15 = PixelFormat;
    if ((CI::iosurface_destination_format_supported_p(PixelFormat) & 1) != 0)
    {
      v17 = CI::format_from_IOSurface(buffer, v16);
      CI::Context::swizzler_for_output((uint64_t)this, v17, 1, &v85);
      if (((width | height) & 1) != 0)
      {
        v18 = v85.i32[2];
        if (v85.i32[2] == 56 || v85.i32[2] == 53)
        {
          v19 = ci_logger_performance();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "image_render_to_surface";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = width;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = height;
            _os_log_impl(&dword_1921E4000, v19, OS_LOG_TYPE_INFO, "%{public}s Rendering a region that has odd width (%d) or height (%d) may impact performance", buf, 0x18u);
          }
          v18 = 58;
          v85.i32[2] = 58;
          v86 = vdupq_n_s64(1uLL);
          *(_QWORD *)&v87 = 1;
        }
        if ((width & 1) != 0 && (v18 == 57 || v18 == 54))
        {
          v20 = ci_logger_performance();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "image_render_to_surface";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = width;
            _os_log_impl(&dword_1921E4000, v20, OS_LOG_TYPE_INFO, "%{public}s Rendering a region that has odd width (%d) may impact performance", buf, 0x12u);
          }
          v85.i32[2] = 59;
          v86 = vdupq_n_s64(1uLL);
          *(_QWORD *)&v87 = 1;
        }
      }
      if ((*(unsigned int (**)(CI *))(*(_QWORD *)this + 16))(this) != 76)
        goto LABEL_24;
      if ((int)CI::format_bytes_per_pixel(v17) <= 5)
        CI::format_is_half_float(v17);
      if (CI::format_is_full_float(v17))
        CI::format_bytes_per_pixel(v17);
      if (CI::format_is_packed(v17))
        v21 = CI::format_is_ycc(v17) ^ 1;
      else
LABEL_24:
        v21 = 0;
      if ((*(unsigned int (**)(CI *))(*(_QWORD *)this + 16))(this) == 76
        || (*(unsigned int (**)(CI *))(*(_QWORD *)this + 16))(this) == 74)
      {
        HIDWORD(v24) = v17 - 263;
        LODWORD(v24) = v17 - 263;
        v23 = v24 >> 8;
        if (v23 <= 8)
          v21 |= 0x1C1u >> v23;
      }
      v25 = IOSurfaceGetWidth(buffer);
      v26 = v86.i64[0];
      v27 = IOSurfaceGetHeight(buffer);
      v28 = v86.u64[1];
      v29 = IOSurfaceGetWidth(buffer);
      v30 = (double)(v29 / v86.i64[0]);
      v31 = IOSurfaceGetHeight(buffer);
      v32 = (double)(v31 / v86.i64[1]) * (double)*((unint64_t *)&v87 + 1);
      v84[0] = v30 * (double)(unint64_t)v87;
      v84[1] = v32;
      if (v84[0] > v32)
        v32 = v30 * (double)(unint64_t)v87;
      if ((v21 & 1) != 0
        || (v25 % v26) | (v27 % v28)
        || (*(uint64_t (**)(CI *))(*(_QWORD *)this + 440))(this) < (unint64_t)v32)
      {
        if (IOSurfaceGetPlaneCount(buffer) >= 2)
        {
          v22 = (CI::RenderTask *)operator new();
          CI::RenderTask::RenderTask(v22, "Unsupported format for large or biplanar surfaces");
        }
        else
        {
          IOSurfaceLock(buffer, 0, 0);
          v119.origin.x = (*(double (**)(CI::Context *))(*(_QWORD *)a2 + 88))(a2);
          v119.origin.y = v33;
          v119.size.width = v34;
          v119.size.height = v35;
          v109.origin.x = x;
          v109.origin.y = y;
          v109.size.width = width;
          v109.size.height = height;
          v110 = CGRectIntersection(v109, v119);
          v36 = v110.origin.x;
          v37 = v110.origin.y;
          v38 = v110.size.width;
          v39 = v110.size.height;
          v81.a = 1.0;
          v81.b = 0.0;
          v81.c = 0.0;
          v81.d = 1.0;
          v81.tx = 0.0;
          v81.ty = 0.0;
          v111 = CGRectApplyAffineTransform(v110, &v81);
          v40 = v111.origin.x;
          v41 = v111.origin.y;
          v42 = v111.size.width;
          v43 = v111.size.height;
          if (CGRectIsNull(v111))
          {
            v44 = 0;
            v45 = 0;
            v83 = 0;
            v82 = IRectNull;
          }
          else
          {
            v112.origin.x = v40;
            v112.origin.y = v41;
            v112.size.width = v42;
            v112.size.height = v43;
            if (CGRectIsInfinite(v112))
            {
              v82 = IRectInfinite;
              v44 = 0xFFFFFFFFLL;
              v83 = 0xFFFFFFFFLL;
              v45 = 0xFFFFFFFFLL;
            }
            else
            {
              v113.origin.x = v40;
              v113.origin.y = v41;
              v113.size.width = v42;
              v113.size.height = v43;
              v114 = CGRectInset(v113, 0.000001, 0.000001);
              v115 = CGRectIntegral(v114);
              v45 = (unint64_t)v115.size.width;
              v44 = (unint64_t)v115.size.height;
              LODWORD(v82) = (int)v115.origin.x;
              DWORD1(v82) = (int)v115.origin.y;
              *((_QWORD *)&v82 + 1) = (unint64_t)v115.size.width;
              v83 = (unint64_t)v115.size.height;
            }
          }
          v46 = ci_signpost_log_render();
          v47 = (*(uint64_t (**)(CI *))(*(_QWORD *)this + 272))(this) << 32;
          if (v47 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v46))
          {
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = v45;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v44;
            _os_signpost_emit_with_name_impl(&dword_1921E4000, v46, OS_SIGNPOST_INTERVAL_BEGIN, v47, "new_bitmap", "[%zu %zu]", buf, 0x16u);
          }
          v48 = (*(uint64_t (**)(CI *))(*(_QWORD *)this + 272))(this);
          TimerBase::TimerBase((uint64_t)buf, v48, 0, (uint64_t)"new_bitmap", 0);
          v49 = (CGColorSpace *)operator new();
          CI::Bitmap::Bitmap(v49, buffer, &v82, v17);
          v50 = ci_signpost_log_render();
          v51 = *(_QWORD *)&buf[8];
          if ((unint64_t)(*(_QWORD *)&buf[8] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v52 = v50;
            if (os_signpost_enabled(v50))
            {
              *(_WORD *)v89 = 0;
              _os_signpost_emit_with_name_impl(&dword_1921E4000, v52, OS_SIGNPOST_INTERVAL_END, v51, "new_bitmap", (const char *)&unk_192520C83, v89, 2u);
            }
          }
          TimerBase::~TimerBase((TimerBase *)buf);
          v116.origin.x = v36;
          v116.origin.y = v37;
          v116.size.width = v38;
          v116.size.height = v39;
          v22 = (CI::RenderTask *)CI::image_render_to_bitmap(this, a2, 0, v116, v49, a5, v53);
          IOSurfaceUnlock(buffer, 0, 0);
          (*(void (**)(CGColorSpace *))(*(_QWORD *)v49 + 8))(v49);
        }
      }
      else
      {
        Current = CFAbsoluteTimeGetCurrent();
        v80.a = 1.0 / (double)v86.u64[0];
        v80.b = 0.0;
        v80.c = 0.0;
        v80.d = 1.0 / (double)v86.u64[1];
        v80.tx = 0.0;
        v80.ty = 0.0;
        v117.origin.x = x;
        v117.origin.y = y;
        v117.size.width = width;
        v117.size.height = height;
        v118 = CGRectApplyAffineTransform(v117, &v80);
        v56 = v118.size.width;
        v57 = v118.size.height;
        v88 = v118;
        LODWORD(v82) = v85.i32[0];
        WORD2(v82) = 0;
        v79[0] = v85;
        v79[1] = v86;
        v79[2] = v87;
        *(_QWORD *)buf = 0x3FF0000000000000;
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[16] = 0;
        v91 = 0x3FF0000000000000;
        v92 = 0;
        v93 = 0;
        v58 = CI::prepare_initial_graph((uint64_t *)this, "render_to_surface", (unsigned int *)a2, (uint64_t)a5, 0, v17, (uint64_t)v79, (uint64_t)buf, v118.origin.x, v118.origin.y, v118.size.width, v118.size.height, 0, (uint64_t)&v82);
        if (v58)
        {
          v60 = v58;
          v61 = v59;
          (*(void (**)(CI *, IOSurfaceRef, double *, __int128 *))(*(_QWORD *)this + 360))(this, buffer, v84, &v82);
          v78[0] = MEMORY[0x1E0C809B0];
          v78[1] = 0x40000000;
          v78[2] = ___ZN2CI23image_render_to_surfaceEPNS_7ContextEPNS_5ImageE6CGRectP11__IOSurfacePKNS_17RenderDestinationE_block_invoke;
          v78[3] = &__block_descriptor_tmp_36_0;
          v78[4] = this;
          v78[5] = buffer;
          v78[6] = a5;
          v22 = (CI::RenderTask *)CI::tile_node_graph((uint64_t)this, (uint64_t)a5, "render_to_surface", v60, v61, &v88, v17, (uint64_t)&v85, (uint64_t)v78);
          (*(void (**)(CI *))(*(_QWORD *)this + 384))(this);
          CI::traverse_releasing_resources(v60, v62);
          CI::Object::unref(v60);
          v63 = CFAbsoluteTimeGetCurrent();
          if (!*((_QWORD *)v22 + 16))
          {
            v64 = v63;
            if (CI_PRINT_TIME())
            {
              v65 = ci_logger_render();
              if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
              {
                v76 = vcvtpd_u64_f64(v56);
                v77 = vcvtpd_u64_f64(v57);
                v66 = (*(uint64_t (**)(CI *))(*(_QWORD *)this + 264))(this);
                v67 = "highp ";
                if (v66 != 1)
                  v67 = "";
                v68 = "";
                if (v66 == -1)
                  v67 = "lowp ";
                v75 = v67;
                v74 = (*(uint64_t (**)(CI *))(*(_QWORD *)this + 304))(this);
                v69 = (*(uint64_t (**)(CI *))(*(_QWORD *)this + 272))(this);
                if (*((_BYTE *)this + 236))
                  v68 = ":";
                v70 = *((_QWORD *)this + 19);
                v71 = CI::name_for_format(v17);
                v72 = (*(uint64_t (**)(CI *))(*(_QWORD *)this + 248))(this);
                *(_DWORD *)buf = 136449026;
                v73 = " (aborted)";
                *(_QWORD *)&buf[4] = "render_to_surface";
                if (!v72)
                  v73 = "";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v75;
                *(_WORD *)&buf[22] = 2082;
                v91 = v74;
                LOWORD(v92) = 1024;
                *(_DWORD *)((char *)&v92 + 2) = v69;
                HIWORD(v92) = 2082;
                v93 = v68;
                v94 = 2082;
                v95 = (char *)this + 236;
                v96 = 2048;
                v97 = v70;
                v98 = 2048;
                v99 = v76;
                v100 = 2048;
                v101 = v77;
                v102 = 2082;
                v103 = v71;
                v104 = 2048;
                v105 = (v64 - Current) * 1000.0;
                v106 = 2082;
                v107 = v73;
                _os_log_impl(&dword_1921E4000, v65, OS_LOG_TYPE_DEFAULT, "CI_PRINT_TIME %{public}s (%{public}s%{public}s context %d%{public}s%{public}s frame %lu) (%llux%llu %{public}s) = %.2fms%{public}s\n\n", buf, 0x76u);
              }
            }
          }
        }
        else
        {
          v22 = (CI::RenderTask *)operator new();
          CI::RenderTask::RenderTask(v22, "%s:%d: Assertion failed: %s\n");
        }
      }
    }
    else if (v15 < 0x29)
    {
      v22 = (CI::RenderTask *)operator new();
      CI::RenderTask::RenderTask(v22, "render:toIOSurface: failed because format was %ld.");
    }
    else
    {
      *(_DWORD *)buf = bswap32(v15);
      v22 = (CI::RenderTask *)operator new();
      CI::RenderTask::RenderTask(v22, "render:toIOSurface: failed because format was %.4s.");
    }
  }
  else
  {
    v22 = (CI::RenderTask *)operator new();
    CI::RenderTask::RenderTask(v22, "Invalid context");
  }
  return v22;
}

uint64_t CI::image_render_to_bitmap(CI *this, CI::Context *a2, CI::Image *a3, CGRect a4, CGColorSpace *a5, CI::Bitmap *a6, const CI::RenderDestination *a7)
{
  CGFloat height;
  CGFloat width;
  double y;
  double x;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float v23;
  float v24;
  float v25;
  float v26;
  int v27;
  int v28;
  signed int v29;
  int v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  double v34;
  CGFloat v35;
  CGFloat v36;
  CI::GraphObject *v37;
  uint64_t v38;
  CI *v39;
  float64x2_t v40;
  uint64_t v41;
  double v42;
  CI::Context *v43;
  CI::Node *v44;
  NSObject *v45;
  int v46;
  const char *v47;
  const char *v48;
  const char *v49;
  double v50;
  int v51;
  const char *v52;
  CI::Image *v54;
  double v55;
  double v56;
  double Current;
  unint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  CGFloat v62;
  const char *v63;
  double v64;
  double v65;
  unint64_t v66;
  double v67;
  double v68;
  unint64_t v69;
  _QWORD v70[23];
  int64x2_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  _OWORD v75[3];
  CGAffineTransform v76;
  uint64_t v77;
  int64x2_t v78;
  __int128 v79;
  __int128 v80;
  CGAffineTransform v81;
  CGAffineTransform v82;
  CGRect buf;
  uint64_t v84;
  const char *v85;
  __int16 v86;
  char *v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  unint64_t v91;
  __int16 v92;
  unint64_t v93;
  __int16 v94;
  const char *v95;
  __int16 v96;
  double v97;
  __int16 v98;
  const char *v99;
  uint64_t v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v100 = *MEMORY[0x1E0C80C00];
  Current = CFAbsoluteTimeGetCurrent();
  v58 = *((_QWORD *)a5 + 10);
  v60 = *((_QWORD *)a5 + 11);
  v82.a = 1.0;
  v82.b = 0.0;
  v82.c = 0.0;
  v82.d = 1.0;
  v82.tx = -x;
  v82.ty = -y;
  v101.origin.x = x;
  v101.origin.y = y;
  v101.size.width = width;
  v101.size.height = height;
  v102 = CGRectApplyAffineTransform(v101, &v82);
  v55 = v102.origin.y;
  v56 = v102.origin.x;
  v64 = v102.size.width;
  v67 = v102.size.height;
  v110.origin.x = (*(double (**)(CI::Context *))(*(_QWORD *)a2 + 88))(a2);
  v110.origin.y = v16;
  v110.size.width = v17;
  v110.size.height = v18;
  v103.origin.x = x;
  v103.origin.y = y;
  v103.size.width = width;
  v103.size.height = height;
  v104 = CGRectIntersection(v103, v110);
  v81.a = 1.0;
  v81.b = 0.0;
  v81.c = 0.0;
  v81.d = 1.0;
  v81.tx = -x;
  v81.ty = -y;
  v105 = CGRectApplyAffineTransform(v104, &v81);
  v19 = v105.origin.x;
  v20 = v105.origin.y;
  v21 = v105.size.width;
  v22 = v105.size.height;
  if (!CGRectIsEmpty(v105))
  {
    v106.origin.x = v19;
    v106.origin.y = v20;
    v106.size.width = v21;
    v106.size.height = v22;
    if (!CGRectIsNull(v106))
    {
      v107.origin.x = v19;
      v107.origin.y = v20;
      v107.size.width = v21;
      v107.size.height = v22;
      if (!CGRectIsInfinite(v107))
      {
        v23 = v20 - v55;
        v24 = v67 + v55 - (v20 + v22);
        v25 = v19 - v56;
        v26 = v64 + v56 - (v19 + v21);
        v27 = vcvtps_s32_f32(v23);
        v54 = a3;
        v28 = vcvtps_s32_f32(v24);
        v29 = vcvtps_s32_f32(v25);
        v30 = vcvtps_s32_f32(v26);
        CI::clearBitmap(a5, (const CI::Bitmap *)v64, v27, (int)v56, (int)v55);
        CI::clearBitmap(a5, (const CI::Bitmap *)v29, (unint64_t)(v67 - (double)(v28 + v27)), (int)v56, v27);
        CI::clearBitmap(a5, (const CI::Bitmap *)v30, (unint64_t)(v67 - (double)(v28 + v27)), (int)(v64 - (double)v30), v27);
        v31 = v28;
        v32 = (double)v28;
        a3 = v54;
        CI::clearBitmap(a5, (const CI::Bitmap *)v64, v31, (int)v56, (int)(v67 - v32));
      }
    }
  }
  v33 = *((unsigned int *)a5 + 26);
  CI::Context::swizzler_for_output((uint64_t)this, v33, 0, &v78);
  LODWORD(v77) = v78.i32[0];
  WORD2(v77) = 0;
  v34 = 1.0 / (double)(unint64_t)v79;
  v76.a = v34;
  v76.b = 0.0;
  v76.c = 0.0;
  v76.tx = 0.0;
  v76.ty = 0.0;
  v76.d = 1.0;
  v108.origin.x = x;
  v108.origin.y = y;
  v108.size.width = width;
  v108.size.height = height;
  v109 = CGRectApplyAffineTransform(v108, &v76);
  v35 = v109.origin.x;
  v36 = v109.origin.y;
  v75[0] = v78;
  v75[1] = v79;
  v75[2] = v80;
  buf.origin.x = 1.0;
  buf.origin.y = 0.0;
  buf.size.width = 0.0;
  buf.size.height = 1.0;
  v85 = 0;
  v84 = 0;
  v65 = v109.size.width;
  v68 = v109.size.height;
  v37 = CI::prepare_initial_graph((uint64_t *)this, "get_bitmap", (unsigned int *)a2, (uint64_t)a6, 0, v33, (uint64_t)v75, (uint64_t)&buf, v109.origin.x, v109.origin.y, v109.size.width, v109.size.height, 1u, (uint64_t)&v77);
  if (!v37)
    return 0;
  v39 = v37;
  v40.f64[0] = v65;
  v40.f64[1] = v68;
  buf.origin.x = v35;
  buf.origin.y = v36;
  buf.size = (CGSize)vcvtq_f64_f32(vrndp_f32(vcvt_f32_f64(v40)));
  v70[0] = MEMORY[0x1E0C809B0];
  v70[1] = 1174405120;
  v70[2] = ___ZN2CI22image_render_to_bitmapEPNS_7ContextEPNS_5ImageE6CGRectP12CGColorSpacePNS_6BitmapEPKNS_17RenderDestinationE_block_invoke;
  v70[3] = &__block_descriptor_tmp_37_0;
  v70[4] = this;
  v70[5] = a5;
  *(double *)&v70[6] = v34;
  v70[7] = 0;
  v70[8] = 0;
  v70[9] = 0x3FF0000000000000;
  v70[10] = 0;
  v70[11] = 0;
  v70[12] = 0x3FF0000000000000;
  v70[13] = 0;
  v70[14] = 0;
  v70[15] = 0x3FF0000000000000;
  *(double *)&v70[16] = -x;
  *(double *)&v70[17] = -y;
  *(double *)&v70[18] = x;
  *(double *)&v70[19] = y;
  *(double *)&v70[20] = (double)v58;
  *(double *)&v70[21] = (double)v60;
  v73 = v80;
  v72 = v79;
  v71 = v78;
  v70[22] = a3;
  v74 = v77;
  v41 = CI::tile_node_graph((uint64_t)this, (uint64_t)a6, "get_bitmap", v37, v38, &buf, v33, (uint64_t)&v78, (uint64_t)v70);
  v42 = CFAbsoluteTimeGetCurrent();
  if (CI::print_time_enabled(this, v43))
  {
    v45 = ci_logger_render();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      v66 = vcvtpd_u64_f64(v65);
      v69 = vcvtpd_u64_f64(v68);
      v46 = (*(uint64_t (**)(CI *))(*(_QWORD *)this + 264))(this);
      v47 = "highp ";
      if (v46 != 1)
        v47 = "";
      if (v46 == -1)
        v47 = "lowp ";
      v63 = v47;
      v62 = COERCE_DOUBLE((*(uint64_t (**)(CI *))(*(_QWORD *)this + 304))(this));
      v59 = (*(uint64_t (**)(CI *))(*(_QWORD *)this + 272))(this);
      if (*((_BYTE *)this + 236))
        v48 = ":";
      else
        v48 = "";
      v61 = *((_QWORD *)this + 19);
      v49 = CI::name_for_format(*((_DWORD *)a5 + 26));
      v50 = (v42 - Current) * 1000.0;
      v51 = (*(uint64_t (**)(CI *))(*(_QWORD *)this + 248))(this);
      LODWORD(buf.origin.x) = 136449026;
      v52 = " (aborted)";
      *(_QWORD *)((char *)&buf.origin.x + 4) = "get_bitmap";
      if (!v51)
        v52 = "";
      WORD2(buf.origin.y) = 2082;
      *(_QWORD *)((char *)&buf.origin.y + 6) = v63;
      HIWORD(buf.size.width) = 2082;
      buf.size.height = v62;
      LOWORD(v84) = 1024;
      *(_DWORD *)((char *)&v84 + 2) = v59;
      HIWORD(v84) = 2082;
      v85 = v48;
      v86 = 2082;
      v87 = (char *)this + 236;
      v88 = 2048;
      v89 = v61;
      v90 = 2048;
      v91 = v66;
      v92 = 2048;
      v93 = v69;
      v94 = 2082;
      v95 = v49;
      v96 = 2048;
      v97 = v50;
      v98 = 2082;
      v99 = v52;
      _os_log_impl(&dword_1921E4000, v45, OS_LOG_TYPE_DEFAULT, "CI_PRINT_TIME %{public}s (%{public}s%{public}s context %d%{public}s%{public}s frame %lu) (%llux%llu %{public}s) = %.2fms%{public}s\n\n", (uint8_t *)&buf, 0x76u);
    }
  }
  CI::traverse_releasing_resources(v39, v44);
  CI::Object::unref(v39);
  return v41;
}

void CI::clearBitmap(CI *this, const CI::Bitmap *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;

  if (((a5 | a4) & 0x80000000) == 0
    && (unint64_t)a2 + a4 <= *((_QWORD *)this + 10)
    && a3 * (_QWORD)a2
    && (unint64_t)(a3 + a5) <= *((_QWORD *)this + 11)
    && (CI::format_is_ycc(*((_DWORD *)this + 26)) & 1) == 0)
  {
    v11 = *((_QWORD *)this + 9);
    v24 = *((_QWORD *)this + 12);
    v12 = CI::format_bytes_per_pixel(*((_DWORD *)this + 26));
    v13 = *((_QWORD *)this + 11);
    v14 = *((_QWORD *)this + 12);
    v15 = *((_QWORD *)this + 9);
    v23 = *((_QWORD *)this + 10);
    v16 = CI::format_bytes_per_pixel(*((_DWORD *)this + 26));
    if (a3)
    {
      v17 = v11;
      v18 = 0;
      v19 = v17 + v24 * a5 + v12 * a4;
      v20 = v15 + (v13 - 1) * v14 + v23 * v16 + 1;
      do
      {
        v21 = (void *)(v19 + *((_QWORD *)this + 12) * v18);
        v22 = (int)CI::format_bytes_per_pixel(*((_DWORD *)this + 26)) * (_QWORD)a2;
        if ((unint64_t)v21 + v22 >= v20)
          break;
        bzero(v21, v22);
        ++v18;
      }
      while (a3 != v18);
    }
  }
}

uint64_t ___ZN2CI4Node15traverse_uniqueEU13block_pointerFvPS0_E_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZNK2CI5Image15traverse_uniqueEU13block_pointerFvPKS0_iE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZN2CIL28traverse_restoring_resourcesERKNSt3__13mapINS_10ImageIndexENS_30ImageDigestForRenderGraphCacheENS0_4lessIS2_EENS0_9allocatorINS0_4pairIKS2_S3_EEEEEERKNS_14ImageToNodeMapEPNS_5ImageE_block_invoke(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  BOOL v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  BOOL v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  BOOL v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  BOOL v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  BOOL v81;
  _QWORD *v82;

  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
  result = CI::is_raster_TypeImage(v4);
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(v6 + 8);
    v7 = v6 + 8;
    v8 = v9;
    if (!v9)
      goto LABEL_13;
    v10 = a2[25];
    v11 = v7;
    do
    {
      v12 = *(_DWORD *)(v8 + 32);
      v13 = v12 >= v10;
      if (v12 >= v10)
        v14 = (uint64_t *)v8;
      else
        v14 = (uint64_t *)(v8 + 8);
      if (v13)
        v11 = v8;
      v8 = *v14;
    }
    while (*v14);
    if (v11 == v7 || v10 < *(_DWORD *)(v11 + 32))
LABEL_13:
      v11 = v7;
    v15 = *(_QWORD *)(a1 + 40);
    v18 = *(_QWORD **)(v15 + 32);
    v16 = (_QWORD *)(v15 + 32);
    v17 = v18;
    if (!v18)
      return result;
    v19 = *(_QWORD *)(v11 + 40);
    v20 = v16;
    do
    {
      v21 = v17[4];
      v22 = v21 >= v19;
      if (v21 >= v19)
        v23 = v17;
      else
        v23 = v17 + 1;
      if (v22)
        v20 = v17;
      v17 = (_QWORD *)*v23;
    }
    while (*v23);
    if (v20 == v16)
      return result;
    if (v20[4] > v19)
      return result;
    v24 = v20[5];
    if (!v24)
      return result;
    while (1)
    {
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      v26 = *(_QWORD *)v24;
      if (!v25)
        break;
      result = (*(uint64_t (**)(uint64_t, _QWORD))(v26 + 48))(v24, 0);
      v24 = result;
      if (!result)
        return result;
    }
    v27 = (*(uint64_t (**)(uint64_t))(v26 + 16))(v24);
    if (CI::is_image_type(v27))
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 192))(a2, v24);
  }
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
  if ((_DWORD)result == 17)
  {
    v28 = *(_QWORD *)(a1 + 32);
    v31 = *(_QWORD *)(v28 + 8);
    v29 = v28 + 8;
    v30 = v31;
    if (!v31)
      goto LABEL_43;
    v32 = a2[25];
    v33 = v29;
    do
    {
      v34 = *(_DWORD *)(v30 + 32);
      v35 = v34 >= v32;
      if (v34 >= v32)
        v36 = (uint64_t *)v30;
      else
        v36 = (uint64_t *)(v30 + 8);
      if (v35)
        v33 = v30;
      v30 = *v36;
    }
    while (*v36);
    if (v33 == v29 || v32 < *(_DWORD *)(v33 + 32))
LABEL_43:
      v33 = v29;
    v37 = *(_QWORD *)(a1 + 40);
    v40 = *(_QWORD **)(v37 + 32);
    v38 = (_QWORD *)(v37 + 32);
    v39 = v40;
    if (!v40)
      return result;
    v41 = *(_QWORD *)(v33 + 40);
    v42 = v38;
    do
    {
      v43 = v39[4];
      v44 = v43 >= v41;
      if (v43 >= v41)
        v45 = v39;
      else
        v45 = v39 + 1;
      if (v44)
        v42 = v39;
      v39 = (_QWORD *)*v45;
    }
    while (*v45);
    if (v42 == v38)
      return result;
    if (v42[4] > v41)
      return result;
    v46 = v42[5];
    if (!v46)
      return result;
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v46 + 16))(v42[5]) == 42)
      v46 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 48))(v46, 0);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
    if ((_DWORD)result != 41)
      return result;
    return (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 192))(a2, v46);
  }
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
  if ((_DWORD)result == 13)
  {
    v47 = *(_QWORD *)(a1 + 32);
    v50 = *(_QWORD *)(v47 + 8);
    v48 = v47 + 8;
    v49 = v50;
    if (!v50)
      goto LABEL_72;
    v51 = a2[25];
    v52 = v48;
    do
    {
      v53 = *(_DWORD *)(v49 + 32);
      v54 = v53 >= v51;
      if (v53 >= v51)
        v55 = (uint64_t *)v49;
      else
        v55 = (uint64_t *)(v49 + 8);
      if (v54)
        v52 = v49;
      v49 = *v55;
    }
    while (*v55);
    if (v52 == v48 || v51 < *(_DWORD *)(v52 + 32))
LABEL_72:
      v52 = v48;
    v56 = *(_QWORD *)(a1 + 40);
    v59 = *(_QWORD **)(v56 + 32);
    v57 = (_QWORD *)(v56 + 32);
    v58 = v59;
    if (v59)
    {
      v60 = *(_QWORD *)(v52 + 40);
      v61 = v57;
      do
      {
        v62 = v58[4];
        v63 = v62 >= v60;
        if (v62 >= v60)
          v64 = v58;
        else
          v64 = v58 + 1;
        if (v63)
          v61 = v58;
        v58 = (_QWORD *)*v64;
      }
      while (*v64);
      if (v61 != v57 && v61[4] <= v60)
      {
        v46 = v61[5];
        if (v46)
        {
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v46 + 16))(v61[5]) == 47)
            v46 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 48))(v46, 0);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
          if ((_DWORD)result == 51)
            return (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 192))(a2, v46);
        }
      }
    }
  }
  else
  {
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    if ((_DWORD)result == 12)
    {
      v65 = *(_QWORD *)(a1 + 32);
      v68 = *(_QWORD *)(v65 + 8);
      v66 = v65 + 8;
      v67 = v68;
      if (!v68)
        goto LABEL_101;
      v69 = a2[25];
      v70 = v66;
      do
      {
        v71 = *(_DWORD *)(v67 + 32);
        v72 = v71 >= v69;
        if (v71 >= v69)
          v73 = (uint64_t *)v67;
        else
          v73 = (uint64_t *)(v67 + 8);
        if (v72)
          v70 = v67;
        v67 = *v73;
      }
      while (*v73);
      if (v70 == v66 || v69 < *(_DWORD *)(v70 + 32))
LABEL_101:
        v70 = v66;
      v74 = *(_QWORD *)(a1 + 40);
      v77 = *(_QWORD **)(v74 + 32);
      v75 = (_QWORD *)(v74 + 32);
      v76 = v77;
      if (v77)
      {
        v78 = *(_QWORD *)(v70 + 40);
        v79 = v75;
        do
        {
          v80 = v76[4];
          v81 = v80 >= v78;
          if (v80 >= v78)
            v82 = v76;
          else
            v82 = v76 + 1;
          if (v81)
            v79 = v76;
          v76 = (_QWORD *)*v82;
        }
        while (*v82);
        if (v79 != v75 && v79[4] <= v78)
        {
          v46 = v79[5];
          if (v46)
          {
            if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v46 + 16))(v79[5]) == 39)
              v46 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 48))(v46, 0);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
            if ((_DWORD)result == 50)
              return (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 192))(a2, v46);
          }
        }
      }
    }
  }
  return result;
}

unint64_t ___ZN2CIL37traverse_node_graph_gathering_digestsEPKNS_7ContextEPNS_4NodeE_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  _QWORD __src[4];
  int64x2_t v13[5];

  XXH64_reset(v13, 0);
  LOBYTE(__src[0]) = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  XXH64_update((uint64_t)v13, (char *)__src, 1uLL);
  __src[0] = (*(double (**)(_QWORD *))(*a2 + 160))(a2);
  __src[1] = v4;
  __src[2] = v5;
  __src[3] = v6;
  XXH64_update((uint64_t)v13, (char *)__src, 0x20uLL);
  (*(void (**)(_QWORD *, int64x2_t *, _QWORD))(*a2 + 376))(a2, v13, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152));
  v7 = (*(uint64_t (**)(_QWORD *))(*a2 + 40))(a2);
  if (v7 >= 1)
  {
    v8 = v7;
    v9 = 0;
    do
    {
      v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 48))(a2, v9);
      __src[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 384))(v10);
      XXH64_update((uint64_t)v13, (char *)__src, 8uLL);
      v9 = (v9 + 1);
    }
    while (v8 != (_DWORD)v9);
  }
  result = XXH64_digest((uint64_t)v13);
  a2[3] = result;
  return result;
}

uint64_t ___ZN2CIL20dump_optimized_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke(uint64_t a1, FILE *a2)
{
  int v4;
  const char *v5;
  const char *v6;
  const char *v7;
  int v8;
  uint64_t v9;
  const char *v10;
  int v11;
  const char *v12;
  int v13;
  uint64_t v14;
  const char *v15;
  __sFILE *v16;
  char *v17;
  const char *v18;
  const char *v19;

  if (*(_QWORD *)(a1 + 32))
    fprintf(a2, "[%s] ", *(const char **)(a1 + 40));
  if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 344))
    fprintf(a2, "optimized graph prepare %s ");
  else
    fprintf(a2, "optimized graph %s ");
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 264))(*(_QWORD *)(a1 + 48));
  v5 = "highp ";
  if (v4 != 1)
    v5 = "";
  if (v4 == -1)
    v6 = "lowp ";
  else
    v6 = v5;
  v7 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 304))(*(_QWORD *)(a1 + 48));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 272))(*(_QWORD *)(a1 + 48));
  v9 = *(_QWORD *)(a1 + 48);
  v11 = *(unsigned __int8 *)(v9 + 236);
  v10 = (const char *)(v9 + 236);
  if (v11)
    v12 = ":";
  else
    v12 = "";
  fprintf(a2, "(%s%s context %d%s%s frame %lu) ", v6, v7, v8, v12, v10, *(_QWORD *)(v10 - 84));
  v13 = *(_DWORD *)(a1 + 88);
  if (!v13)
  {
    v14 = *(_QWORD *)(a1 + 64);
    if (v14)
      v13 = *(_DWORD *)(v14 + 32);
    else
      v13 = 0;
  }
  v15 = CI::name_for_format(v13);
  fprintf(a2, "format=%s roi=", v15);
  CI::fprintf(a2, v16, *(CGRect *)*(_QWORD *)(a1 + 72));
  fwrite(" = \n", 4uLL, 1uLL, a2);
  v17 = CI_TEMP_DIR();
  v18 = *(const char **)(a1 + 80);
  v19 = (const char *)CI_PRINT_TREE_graphviz();
  fprintf(a2, "  %s/%s.%s\n", v17, v18, v19);
  return fputc(10, a2);
}

uint64_t ___ZN2CIL19format_for_graphvizEv_block_invoke()
{
  uint64_t result;
  const char *v1;
  int v2;

  result = CI_PRINT_TREE_graphviz();
  if (result)
  {
    v1 = (const char *)result;
    result = strcmp((const char *)result, "pdf");
    if ((_DWORD)result)
    {
      result = strcmp(v1, "png");
      if ((_DWORD)result)
      {
        result = strcmp(v1, "dot");
        if ((_DWORD)result)
          return result;
        v2 = 2;
      }
      else
      {
        v2 = 1;
      }
    }
    else
    {
      v2 = 0;
    }
    CI::format_for_graphviz(void)::fmt = v2;
  }
  return result;
}

uint64_t ___ZN2CIL21print_optimized_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke(uint64_t a1, FILE *__stream)
{
  uint64_t v4;
  const __CFString *v5;
  const __CFString *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  const char *v14;
  const char *v15;
  int v16;
  uint64_t v17;
  const char *v18;
  int v19;
  const char *v20;
  int v21;
  uint64_t v22;
  const char *v23;
  __sFILE *v24;
  uint64_t v25;
  _OWORD v27[2];
  int v28;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = *(const __CFString **)(v4 + 16);
    if (v5)
    {
      fputc(91, __stream);
      CI::fprintf(__stream, v5, v6);
      fwrite("] ", 2uLL, 1uLL, __stream);
    }
  }
  fwrite("optimized graph ", 0x10uLL, 1uLL, __stream);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 344))
    fwrite("prepare ", 8uLL, 1uLL, __stream);
  fprintf(__stream, "%s ", *(const char **)(a1 + 48));
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7))
    {
      v8 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
      fprintf(__stream, "%p ", v8);
    }
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32));
      fprintf(__stream, "%ldx%ld ", v10, v11);
    }
  }
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 264))(*(_QWORD *)(a1 + 40));
  v13 = "highp ";
  if (v12 != 1)
    v13 = "";
  if (v12 == -1)
    v14 = "lowp ";
  else
    v14 = v13;
  v15 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 304))(*(_QWORD *)(a1 + 40));
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 272))(*(_QWORD *)(a1 + 40));
  v17 = *(_QWORD *)(a1 + 40);
  v19 = *(unsigned __int8 *)(v17 + 236);
  v18 = (const char *)(v17 + 236);
  if (v19)
    v20 = ":";
  else
    v20 = "";
  fprintf(__stream, "(%s%s context %d%s%s frame %lu) ", v14, v15, v16, v20, v18, *(_QWORD *)(v18 - 84));
  v21 = *(_DWORD *)(a1 + 72);
  if (!v21)
  {
    v22 = *(_QWORD *)(a1 + 32);
    if (v22)
      v21 = *(_DWORD *)(v22 + 32);
    else
      v21 = 0;
  }
  v23 = CI::name_for_format(v21);
  fprintf(__stream, "format=%s roi=", v23);
  CI::fprintf(__stream, v24, *(CGRect *)*(_QWORD *)(a1 + 56));
  fwrite(" = \n", 4uLL, 1uLL, __stream);
  v25 = *(_QWORD *)(a1 + 64);
  memset(v27, 0, sizeof(v27));
  v28 = 1065353216;
  CI::Node::print_graph(v25, __stream, (uint64_t)v27);
  std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v27);
  return fputc(10, __stream);
}

uint64_t ___ZNK2CI5Image15traverse_uniqueEU13block_pointerFvPKS0_E_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZN2CIL18dump_initial_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_5ImageERK6CGRectNS_11PixelFormatE_block_invoke(uint64_t a1, FILE *__stream)
{
  const char *v4;
  size_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  const char *v13;
  const char *v14;
  int v15;
  uint64_t v16;
  const char *v17;
  int v18;
  const char *v19;
  int v20;
  uint64_t v21;
  const char *v22;
  __sFILE *v23;
  char *v24;
  const char *v25;
  const char *v26;

  if (*(_QWORD *)(a1 + 32))
    fprintf(__stream, "[%s] ", *(const char **)(a1 + 40));
  if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 344))
  {
    v4 = "initial graph prepare ";
    v5 = 22;
  }
  else
  {
    v4 = "initial graph ";
    v5 = 14;
  }
  fwrite(v4, v5, 1uLL, __stream);
  fprintf(__stream, "%s ", *(const char **)(a1 + 56));
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6))
    {
      v7 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 40))(*(_QWORD *)(a1 + 64));
      fprintf(__stream, "%p ", v7);
    }
    v8 = *(_QWORD *)(a1 + 64);
    if (v8)
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
      v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 56))(*(_QWORD *)(a1 + 64));
      fprintf(__stream, "%ldx%ld ", v9, v10);
    }
  }
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 264))(*(_QWORD *)(a1 + 48));
  v12 = "highp ";
  if (v11 != 1)
    v12 = "";
  if (v11 == -1)
    v13 = "lowp ";
  else
    v13 = v12;
  v14 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 304))(*(_QWORD *)(a1 + 48));
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 272))(*(_QWORD *)(a1 + 48));
  v16 = *(_QWORD *)(a1 + 48);
  v18 = *(unsigned __int8 *)(v16 + 236);
  v17 = (const char *)(v16 + 236);
  if (v18)
    v19 = ":";
  else
    v19 = "";
  fprintf(__stream, "(%s%s context %d%s%s frame %lu) ", v13, v14, v15, v19, v17, *(_QWORD *)(v17 - 84));
  v20 = *(_DWORD *)(a1 + 88);
  if (!v20)
  {
    v21 = *(_QWORD *)(a1 + 64);
    if (v21)
      v20 = *(_DWORD *)(v21 + 32);
    else
      v20 = 0;
  }
  v22 = CI::name_for_format(v20);
  fprintf(__stream, "format=%s roi=", v22);
  CI::fprintf(__stream, v23, *(CGRect *)*(_QWORD *)(a1 + 72));
  fwrite(" = \n", 4uLL, 1uLL, __stream);
  v24 = CI_TEMP_DIR();
  v25 = *(const char **)(a1 + 80);
  v26 = (const char *)CI_PRINT_TREE_graphviz();
  fprintf(__stream, "  %s/%s.%s\n", v24, v25, v26);
  return fputc(10, __stream);
}

uint64_t ___ZN2CIL19print_initial_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_5ImageERK6CGRectNS_11PixelFormatE_block_invoke(uint64_t a1, FILE *__stream)
{
  uint64_t v4;
  const __CFString *v5;
  const __CFString *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  const char *v14;
  const char *v15;
  int v16;
  uint64_t v17;
  const char *v18;
  int v19;
  const char *v20;
  int v21;
  uint64_t v22;
  const char *v23;
  __sFILE *v24;
  __sFILE *v25;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = *(const __CFString **)(v4 + 16);
    if (v5)
    {
      fputc(91, __stream);
      CI::fprintf(__stream, v5, v6);
      fwrite("] ", 2uLL, 1uLL, __stream);
    }
  }
  fwrite("initial graph ", 0xEuLL, 1uLL, __stream);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 344))
    fwrite("prepare ", 8uLL, 1uLL, __stream);
  fprintf(__stream, "%s ", *(const char **)(a1 + 48));
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7))
    {
      v8 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
      fprintf(__stream, "%p ", v8);
    }
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32));
      fprintf(__stream, "%ldx%ld ", v10, v11);
    }
  }
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 264))(*(_QWORD *)(a1 + 40));
  v13 = "highp ";
  if (v12 != 1)
    v13 = "";
  if (v12 == -1)
    v14 = "lowp ";
  else
    v14 = v13;
  v15 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 304))(*(_QWORD *)(a1 + 40));
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 272))(*(_QWORD *)(a1 + 40));
  v17 = *(_QWORD *)(a1 + 40);
  v19 = *(unsigned __int8 *)(v17 + 236);
  v18 = (const char *)(v17 + 236);
  if (v19)
    v20 = ":";
  else
    v20 = "";
  fprintf(__stream, "(%s%s context %d%s%s frame %lu) ", v14, v15, v16, v20, v18, *(_QWORD *)(v18 - 84));
  v21 = *(_DWORD *)(a1 + 72);
  if (!v21)
  {
    v22 = *(_QWORD *)(a1 + 32);
    if (v22)
      v21 = *(_DWORD *)(v22 + 32);
    else
      v21 = 0;
  }
  v23 = CI::name_for_format(v21);
  fprintf(__stream, "format=%s ", v23);
  v24 = *(__sFILE **)(*(_QWORD *)(a1 + 40) + 24);
  if (v24)
  {
    fwrite("workingspace=", 0xDuLL, 1uLL, __stream);
    CI::fprintf_cs(__stream, v24, (CGColorSpace *)1);
    fputc(32, __stream);
  }
  fwrite("roi=", 4uLL, 1uLL, __stream);
  CI::fprintf(__stream, v25, *(CGRect *)*(_QWORD *)(a1 + 56));
  fwrite(" = \n", 4uLL, 1uLL, __stream);
  CI::Image::print_graph(*(CI::Image **)(a1 + 64), __stream);
  return fputc(10, __stream);
}

void CI::OptimizedGraph::~OptimizedGraph(CI::OptimizedGraph *this)
{
  unsigned int v2;

  *(_QWORD *)this = &off_1E2EBAA30;
  *((_QWORD *)this + 6) = &unk_1E2EBABD8;
  CI::ImageToNodeMap::~ImageToNodeMap((CI::ImageToNodeMap **)this + 7);
  *((_QWORD *)this + 6) = off_1E2EBBE70;
  do
    v2 = __ldaxr(&dword_1ECF872F0[52]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[52]));
  CI::NodeWithChildren::~NodeWithChildren(this);
}

{
  unsigned int v2;

  *(_QWORD *)this = &off_1E2EBAA30;
  *((_QWORD *)this + 6) = &unk_1E2EBABD8;
  CI::ImageToNodeMap::~ImageToNodeMap((CI::ImageToNodeMap **)this + 7);
  *((_QWORD *)this + 6) = off_1E2EBBE70;
  do
    v2 = __ldaxr(&dword_1ECF872F0[52]);
  while (__stlxr(v2 - 1, &dword_1ECF872F0[52]));
  CI::NodeWithChildren::~NodeWithChildren(this);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::OptimizedGraph::type(CI::OptimizedGraph *this)
{
  return 54;
}

uint64_t CI::OptimizedGraph::may_be_extended_range(CI::OptimizedGraph *this)
{
  return 0;
}

uint64_t CI::OptimizedGraph::alpha_one(CI::OptimizedGraph *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'CI::OptimizedGraph::type(CI::OptimizedGraph *this)
{
  return 54;
}

void `non-virtual thunk to'CI::OptimizedGraph::~OptimizedGraph(CI::OptimizedGraph *this)
{
  CI::NodeWithChildren *v2;
  unsigned int v3;

  *((_QWORD *)this - 6) = &off_1E2EBAA30;
  v2 = (CI::OptimizedGraph *)((char *)this - 48);
  *(_QWORD *)this = &unk_1E2EBABD8;
  CI::ImageToNodeMap::~ImageToNodeMap((CI::ImageToNodeMap **)this + 1);
  *(_QWORD *)this = off_1E2EBBE70;
  do
    v3 = __ldaxr(&dword_1ECF872F0[52]);
  while (__stlxr(v3 - 1, &dword_1ECF872F0[52]));
  CI::NodeWithChildren::~NodeWithChildren(v2);
}

{
  CI::NodeWithChildren *v2;
  unsigned int v3;

  *((_QWORD *)this - 6) = &off_1E2EBAA30;
  v2 = (CI::OptimizedGraph *)((char *)this - 48);
  *(_QWORD *)this = &unk_1E2EBABD8;
  CI::ImageToNodeMap::~ImageToNodeMap((CI::ImageToNodeMap **)this + 1);
  *(_QWORD *)this = off_1E2EBBE70;
  do
    v3 = __ldaxr(&dword_1ECF872F0[52]);
  while (__stlxr(v3 - 1, &dword_1ECF872F0[52]));
  CI::NodeWithChildren::~NodeWithChildren(v2);
  JUMPOUT(0x194025AACLL);
}

uint64_t CI::InstanceCounted<(CI::Type)54>::type()
{
  return 54;
}

_QWORD *CI::InstanceCounted<(CI::Type)54>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBE70;
  do
    v1 = __ldaxr(&dword_1ECF872F0[52]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[52]));
  return result;
}

void CI::InstanceCounted<(CI::Type)54>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBE70;
  do
    v1 = __ldaxr(&dword_1ECF872F0[52]);
  while (__stlxr(v1 - 1, &dword_1ECF872F0[52]));
  JUMPOUT(0x194025AACLL);
}

void CI::ImageToNodeMap::~ImageToNodeMap(CI::ImageToNodeMap **this)
{
  CI::ImageToNodeMap **v2;
  CI::ImageToNodeMap *v3;
  CI::Object *v4;
  CI::ImageToNodeMap *v5;
  CI::ImageToNodeMap **v6;
  BOOL v7;
  CI::ImageToNodeMap *v8;
  CI::Object *v9;
  CI::ImageToNodeMap *v10;
  CI::ImageToNodeMap *v11;

  v2 = this + 1;
  v3 = *this;
  if (*this != (CI::ImageToNodeMap *)(this + 1))
  {
    do
    {
      v4 = (CI::Object *)*((_QWORD *)v3 + 5);
      if (v4)
        CI::Object::unref(v4);
      v5 = (CI::ImageToNodeMap *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = (CI::ImageToNodeMap **)v5;
          v5 = *(CI::ImageToNodeMap **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (CI::ImageToNodeMap **)*((_QWORD *)v3 + 2);
          v7 = *v6 == v3;
          v3 = (CI::ImageToNodeMap *)v6;
        }
        while (!v7);
      }
      v3 = (CI::ImageToNodeMap *)v6;
    }
    while (v6 != v2);
  }
  v8 = this[3];
  if (v8 != (CI::ImageToNodeMap *)(this + 4))
  {
    do
    {
      v9 = (CI::Object *)*((_QWORD *)v8 + 5);
      if (v9)
        CI::Object::unref(v9);
      v10 = (CI::ImageToNodeMap *)*((_QWORD *)v8 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(CI::ImageToNodeMap **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (CI::ImageToNodeMap *)*((_QWORD *)v8 + 2);
          v7 = *(_QWORD *)v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v7);
      }
      v8 = v11;
    }
    while (v11 != (CI::ImageToNodeMap *)(this + 4));
  }
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)(this + 3), this[4]);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this, this[1]);
}

uint64_t ___ZNK2CI5Image18traverse_stoppableEU13block_pointerFbPKS0_S2_EU13block_pointerFvS2_S2_E_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZNK2CI5Image18traverse_stoppableEU13block_pointerFbPKS0_S2_EU13block_pointerFvS2_S2_E_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZN2CIL22prune_input_sRGB_nodesEPKNS_7ContextEPNS_4NodeE_block_invoke(uint64_t a1, CI::Object *a2)
{
  unsigned int *v4;
  uint64_t result;
  _BOOL4 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  _BOOL4 v16;
  unsigned int *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  _BOOL4 v22;
  uint64_t v23;
  unint64_t v24;
  CI::Object **v25;
  CI::Object **v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  CI::Object *v31;

  v4 = (unsigned int *)(*(uint64_t (**)(CI::Object *))(*(_QWORD *)a2 + 400))(a2);
  if (v4
    && (*(unsigned int (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 584))(*(_QWORD *)(a1 + 56), *v4, 1))
  {
    return CI::SerialObjectPtrArray::append(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a2);
  }
  v6 = (*(unsigned int (**)(CI::Object *))(*(_QWORD *)a2 + 16))(a2) == 38 && *((_DWORD *)a2 + 14) == -1;
  result = (*(uint64_t (**)(CI::Object *))(*(_QWORD *)a2 + 40))(a2);
  if ((int)result >= 1)
  {
    v7 = result;
    v8 = 0;
    do
    {
      v9 = (*(uint64_t (**)(CI::Object *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v8);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      if ((_DWORD)result != 47)
        goto LABEL_24;
      v10 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 48))(v9, 0);
      v11 = *v10;
      if ((int)v11 < 1)
        goto LABEL_24;
      v12 = 0;
      v13 = v10 + 6;
      while (1)
      {
        v14 = v13;
        if (v12 >= 0xA)
          v14 = (unsigned int *)(*((_QWORD *)v10 + 2) + 8 * (v12 - 10));
        if (*(_QWORD *)v14 == result)
          break;
        ++v12;
        v13 += 2;
        if (v11 == v12)
          goto LABEL_24;
      }
      if ((v12 & 0x80000000) != 0)
      {
LABEL_24:
        v16 = 0;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 408))(v9);
        v16 = (_DWORD)result == 1 || (result & 0xFFFFFFFE) == 10;
      }
      v17 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v18 = *v17;
      if ((int)v18 < 1)
      {
LABEL_31:
        v22 = 0;
      }
      else
      {
        v19 = 0;
        v20 = v17 + 6;
        while (1)
        {
          v21 = v20;
          if (v19 >= 0xA)
            v21 = (unsigned int *)(*((_QWORD *)v17 + 2) + 8 * (v19 - 10));
          if (*(_QWORD *)v21 == v9)
            break;
          ++v19;
          v20 += 2;
          if (v18 == v19)
            goto LABEL_31;
        }
        v22 = (v19 & 0x80000000) == 0;
      }
      if (!v16 && !v22)
        goto LABEL_54;
      if (v6)
      {
        result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
        v23 = *(unsigned int *)result;
        if ((int)v23 >= 1)
        {
          v24 = 0;
          v25 = (CI::Object **)(result + 24);
          while (1)
          {
            v26 = v25;
            if (v24 >= 0xA)
              v26 = (CI::Object **)(*(_QWORD *)(result + 16) + 8 * (v24 - 10));
            if (*v26 == a2)
              break;
            ++v24;
            ++v25;
            if (v23 == v24)
              goto LABEL_50;
          }
          if ((v24 & 0x80000000) == 0)
            goto LABEL_54;
        }
LABEL_50:
        v31 = a2;
      }
      else
      {
        result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        v27 = *(unsigned int *)result;
        if ((int)v27 >= 1)
        {
          v28 = 0;
          v29 = (_QWORD *)(result + 24);
          while (1)
          {
            v30 = v29;
            if (v28 >= 0xA)
              v30 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * (v28 - 10));
            if (*v30 == v9)
              break;
            ++v28;
            ++v29;
            if (v27 == v28)
              goto LABEL_52;
          }
          if ((v28 & 0x80000000) == 0)
            goto LABEL_54;
        }
LABEL_52:
        v31 = (CI::Object *)v9;
      }
      result = CI::SerialObjectPtrArray::append(result, v31);
LABEL_54:
      v8 = (v8 + 1);
    }
    while ((_DWORD)v8 != v7);
  }
  return result;
}

uint64_t ___ZN2CIL22prune_output_sRGB_nodeEPKNS_7ContextEPNS_4NodeEPNS_17TextureDescriptorE_block_invoke(uint64_t a1, CI::Object *a2, uint64_t a3)
{
  int v6;
  uint64_t v8;
  uint64_t v9;

  if ((*(unsigned int (**)(CI::Object *))(*(_QWORD *)a2 + 16))(a2) == 38)
  {
    v6 = *((_DWORD *)a2 + 14);
    if (v6 == 1)
    {
      if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 584))(*(_QWORD *)(a1 + 40), **(unsigned int **)(a1 + 48), 3))
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 48) + 4) = 1;
        goto LABEL_10;
      }
      v6 = *((_DWORD *)a2 + 14);
    }
    if (!v6)
    {
LABEL_10:
      v8 = (*(uint64_t (**)(CI::Object *, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0);
      if (a3)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 200))(a3, v8, 0);
      }
      else
      {
        if (v8)
          v9 = CI::Object::ref(v8);
        else
          v9 = 0;
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v9;
        CI::Object::unref(a2);
      }
    }
  }
  else if ((*(unsigned int (**)(CI::Object *))(*(_QWORD *)a2 + 40))(a2) == 1
         && ((*(uint64_t (**)(CI::Object *, uint64_t))(*(_QWORD *)a2 + 248))(a2, 3) & 1) != 0)
  {
    return 0;
  }
  return 1;
}

uint64_t ___ZN2CI4Node27traverse_preorder_stoppableEU13block_pointerFbPS0_S1_iiE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN2CIL26gather_rois_for_node_graphEPNS_7ContextEPKcPNS_4NodeE6CGRect_block_invoke(int a1, CI::Node *this)
{
  CI::Node::clear_rois(this);
}

uint64_t CI::traverse_gathering_rois(uint64_t a1, CI::Node *a2, CI::Node *a3, int a4, int a5, uint64_t a6, int a7)
{
  int NodeUseCount;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t result;
  uint64_t v29;
  int v30;
  uint64_t v31;
  double v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  CI::Node *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  CGRect v48;
  CGRect v49;

  NodeUseCount = CI::Node::GetNodeUseCount(a6, (unint64_t)a2);
  v15 = NodeUseCount;
  if (a7)
  {
    v16 = *(_QWORD **)(a6 + 8);
    if (v16)
    {
      v17 = a6 + 8;
      do
      {
        v18 = v16[4];
        v19 = v18 >= (unint64_t)a2;
        if (v18 >= (unint64_t)a2)
          v20 = v16;
        else
          v20 = v16 + 1;
        if (v19)
          v17 = (uint64_t)v16;
        v16 = (_QWORD *)*v20;
      }
      while (*v20);
      if (v17 != a6 + 8 && *(_QWORD *)(v17 + 32) <= (unint64_t)a2)
        --*(_DWORD *)(v17 + 40);
    }
    v15 = NodeUseCount - 1;
  }
  if (a3 && CI::Node::rois_count(a3))
  {
    v48.origin.x = CI::Node::roi(a3, a5);
    v21 = CI::Node::region_of_child(a3, v48);
    v23 = v22;
    v25 = v24;
    v27 = v26;
  }
  else
  {
    v21 = *MEMORY[0x1E0C9D628];
    v23 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v25 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v27 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  v49.origin.x = v21;
  v49.origin.y = v23;
  v49.size.width = v25;
  v49.size.height = v27;
  result = CGRectIsEmpty(v49);
  if ((result & 1) == 0)
  {
    v40 = a3;
    v41 = a5;
    v42 = 0;
    v43 = a4;
    v44 = -1;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
    result = (*(uint64_t (**)(CI::Node *, _QWORD, uint64_t, CI::Node **, double, double, double, double))(*(_QWORD *)a2 + 344))(a2, 0, v29, &v40, v21, v23, v25, v27);
  }
  if (!v15)
  {
    if (CI::Node::rois_count(a2))
    {
      result = CI::Node::rois_count(a2);
      if ((int)result >= 1)
      {
        v30 = result;
        v31 = 0;
        do
        {
          v32 = CI::Node::roi(a2, v31);
          result = (*(uint64_t (**)(CI::Node *, double))(*(_QWORD *)a2 + 40))(a2, v32);
          v33 = v31 + 1;
          if ((int)result >= 1)
          {
            v34 = result;
            v35 = 0;
            do
            {
              v36 = (*(uint64_t (**)(CI::Node *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v35);
              result = CI::traverse_gathering_rois(a1, v36, a2, v35, v31, a6, v33 == v30);
              v35 = (v35 + 1);
            }
            while (v34 != (_DWORD)v35);
          }
          v31 = (v31 + 1);
        }
        while (v33 != v30);
      }
    }
    else
    {
      result = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)a2 + 40))(a2);
      if ((int)result >= 1)
      {
        v37 = result;
        v38 = 0;
        do
        {
          v39 = (*(uint64_t (**)(CI::Node *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v38);
          result = CI::traverse_gathering_rois(a1, v39, a2, v38, 0xFFFFFFFFLL, a6, 1);
          v38 = (v38 + 1);
        }
        while (v37 != (_DWORD)v38);
      }
    }
  }
  return result;
}

uint64_t CI::Node::GetNodeUseCount(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;

  v2 = 0;
  if (a1 && a2)
  {
    v5 = *(_QWORD **)(a1 + 8);
    v3 = (_QWORD *)(a1 + 8);
    v4 = v5;
    if (!v5)
      return 0;
    v6 = v3;
    do
    {
      v7 = v4[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = v4;
      else
        v9 = v4 + 1;
      if (v8)
        v6 = v4;
      v4 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 != v3 && v6[4] <= a2)
      return *((unsigned int *)v6 + 10);
    else
      return 0;
  }
  return v2;
}

void std::__tree<std::__value_type<CI::Node const*,CI::useCountDepth>,std::__map_value_compare<CI::Node const*,std::__value_type<CI::Node const*,CI::useCountDepth>,std::less<CI::Node const*>,true>,std::allocator<std::__value_type<CI::Node const*,CI::useCountDepth>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<CI::Node const*,CI::useCountDepth>,std::__map_value_compare<CI::Node const*,std::__value_type<CI::Node const*,CI::useCountDepth>,std::less<CI::Node const*>,true>,std::allocator<std::__value_type<CI::Node const*,CI::useCountDepth>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<CI::Node const*,CI::useCountDepth>,std::__map_value_compare<CI::Node const*,std::__value_type<CI::Node const*,CI::useCountDepth>,std::less<CI::Node const*>,true>,std::allocator<std::__value_type<CI::Node const*,CI::useCountDepth>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)(a2 + 6), (_QWORD *)a2[7]);
    operator delete(a2);
  }
}

void CI::recursive_tile(CI::RenderTask *a1, uint64_t a2, uint64_t a3, const char *a4, _DWORD *a5, uint64_t a6, double *a7, unsigned int a8, uint64_t a9, uint64_t a10)
{
  double v16;
  double v17;
  NSObject *v18;
  os_signpost_id_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  unint64_t v24;
  CI::Context *v25;
  const char *v26;
  CI::ProgramNode *v27;
  CI::Context *v28;
  NSObject *v29;
  os_signpost_id_t v30;
  uint64_t v31;
  NSObject *v32;
  os_signpost_id_t v33;
  NSObject *v34;
  const char *v35;
  CI::ProgramNode *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  NSObject *v41;
  os_signpost_id_t v42;
  uint64_t v43;
  NSObject *v44;
  os_signpost_id_t v45;
  NSObject *v46;
  NSObject *v47;
  os_signpost_id_t v48;
  NSObject *v49;
  NSObject *v50;
  os_signpost_id_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  const __CFString *v55;
  CFStringRef v56;
  __int128 v57;
  __int128 v58;
  FILE *v59;
  __int128 v60;
  int v61;
  uint64_t v62;
  CFStringRef v63;
  const char *v64;
  int v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  const char *v69;
  unint64_t v70;
  const char *v71;
  int v72;
  const char *v73;
  const __CFString *v74;
  CI::GraphObject *v75;
  CGImage *v76;
  __CFString *v77;
  const __CFString *v78;
  const __CFString *v79;
  pid_t v80;
  const char *v81;
  int v82;
  FILE *v83;
  unsigned int v84;
  char *v85;
  CI::TileTask *v86;
  __int128 v87;
  char *v88;
  NSObject *v89;
  const __CFString *v90;
  const char *CStringPtr;
  NSObject *v92;
  os_signpost_id_t v93;
  NSObject *v94;
  char v95;
  unint64_t v96;
  BOOL v97;
  const __CFString *theString;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  const char *v106;
  const char *v107;
  CI::GraphObject *v108;
  const __CFString *v109;
  unint64_t v110;
  unint64_t v111;
  const __CFString *v112;
  unsigned int v114;
  _QWORD block[10];
  __int128 v117;
  __int128 v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(uint64_t, CI::ProgramNode *);
  void *v123;
  uint64_t v124;
  uint8_t __src[8];
  uint64_t v126;
  void *v127;
  void *v128;
  const __CFString *v129;
  uint8_t *v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  double *v134;
  char *v135;
  unsigned int v136;
  char __str[16];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  char v169[16];
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint8_t buf[16];
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;

  v201 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a1 + 16))
    return;
  v16 = a7[2];
  v17 = a7[3];
  v168 = 0u;
  v167 = 0u;
  v166 = 0u;
  v164 = 0u;
  v165 = 0u;
  v162 = 0u;
  v163 = 0u;
  v160 = 0u;
  v161 = 0u;
  v158 = 0u;
  v159 = 0u;
  v156 = 0u;
  v157 = 0u;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  *(_OWORD *)__str = 0u;
  *(_OWORD *)(a2 + 200) = *(_OWORD *)a7;
  *(double *)(a2 + 216) = v16;
  *(double *)(a2 + 224) = v17;
  v18 = ci_signpost_log_render();
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2) << 32;
  if (v19 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1921E4000, v18, OS_SIGNPOST_INTERVAL_BEGIN, v19, "make_program_graph_if_renderable", (const char *)&unk_192520C83, buf, 2u);
  }
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2);
  TimerBase::TimerBase((uint64_t)v169, v20, 0, (uint64_t)"make_program_graph_if_renderable", 2);
  v21 = a7[3];
  v22 = a7[2] * (double)*(unint64_t *)(a9 + 32);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 448))(a2);
  v23 = (double)(unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 456))(a2);
  v114 = a8;
  if (v22 > v23 || v21 > v23)
  {
    snprintf(__str, 0x200uLL, "destination %dx%d too big", (int)v22, (int)v21);
LABEL_11:
    v28 = 0;
    goto LABEL_44;
  }
  if (CI_CACHE_PROGRAM_GRAPH())
  {
    XXH64_reset((int64x2_t *)buf, 0);
    *(_DWORD *)__src = a5[9];
    XXH64_update((uint64_t)buf, (char *)__src, 4uLL);
    XXH64_update((uint64_t)buf, (char *)a7, 0x20uLL);
    v24 = XXH64_digest((uint64_t)buf);
    v25 = (CI::Context *)CI::ObjectCache<CI::Node,unsigned long long,false>::find(*(_QWORD *)(a2 + 320), v24);
    if (v25)
    {
      v28 = v25;
      CI::gather_rois_for_program_graph((CI *)a2, v25, v26, v27, *(CGRect *)a7);
      goto LABEL_44;
    }
  }
  else
  {
    v24 = 0;
  }
  v29 = ci_signpost_log_render();
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2) << 32;
  if (v30 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v29))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1921E4000, v29, OS_SIGNPOST_INTERVAL_BEGIN, v30, "make_program_graph", (const char *)&unk_192520C83, buf, 2u);
  }
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2);
  TimerBase::TimerBase((uint64_t)buf, v31, 0, (uint64_t)"make_program_graph", 35);
  v127 = 0;
  v128 = 0;
  *(_QWORD *)__src = &off_1E2EBA068;
  v126 = (uint64_t)&v127;
  v28 = (CI::Context *)(*(uint64_t (**)(_DWORD *, uint64_t, uint8_t *, uint64_t))(*(_QWORD *)a5 + 328))(a5, a2, __src, 1);
  CI::NodeToNodeMap::~NodeToNodeMap((CI::NodeToNodeMap *)__src);
  v32 = ci_signpost_log_render();
  v33 = *(_QWORD *)&buf[8];
  if ((unint64_t)(*(_QWORD *)&buf[8] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v34 = v32;
    if (os_signpost_enabled(v32))
    {
      *(_WORD *)__src = 0;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v34, OS_SIGNPOST_INTERVAL_END, v33, "make_program_graph", (const char *)&unk_192520C83, __src, 2u);
    }
  }
  TimerBase::~TimerBase((TimerBase *)buf);
  v37 = CI::gather_rois_for_program_graph((CI *)a2, v28, v35, v36, *(CGRect *)a7);
  v38 = CI::Context::bytesLimit((CI::Context *)a2);
  if (_CFMZEnabled() != 1
    || dyld_get_active_platform() != 1 && dyld_get_active_platform() != 6
    || *(_QWORD *)(a2 + 368))
  {
    if (v37 > v38)
      goto LABEL_24;
LABEL_34:
    if (CI_CACHE_PROGRAM_GRAPH()
      && (*(unsigned int (**)(CI::Context *))(*(_QWORD *)v28 + 16))(v28) != 52)
    {
      CI::ObjectCache<CI::Node,unsigned long long,false>::insert(*(_QWORD *)(a2 + 320), v24, v28, a6);
    }
    v41 = ci_signpost_log_render();
    v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2) << 32;
    if (v42 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v41))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v41, OS_SIGNPOST_INTERVAL_BEGIN, v42, "create_program_and_arguments", (const char *)&unk_192520C83, buf, 2u);
    }
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2);
    TimerBase::TimerBase((uint64_t)buf, v43, 0, (uint64_t)"create_program_and_arguments", 37);
    v120 = MEMORY[0x1E0C809B0];
    v121 = 0x40000000;
    v122 = ___ZN2CIL32make_program_graph_if_renderableEPNS_7ContextEPKcNS_14GraphWithDepthERK6CGRectRKNS_19output_swizzle_infoEPcm_block_invoke;
    v123 = &__block_descriptor_tmp_166;
    v124 = a2;
    *(_QWORD *)__src = MEMORY[0x1E0C809B0];
    v126 = 0x40000000;
    v127 = ___ZN2CI4Node15traverse_uniqueEU13block_pointerFvPS0_E_block_invoke;
    v128 = &unk_1E2EB7F68;
    v129 = (const __CFString *)&v120;
    CI::GraphObject::traverse_unique((uint64_t)v28, (uint64_t)__src);
    v44 = ci_signpost_log_render();
    v45 = *(_QWORD *)&buf[8];
    if ((unint64_t)(*(_QWORD *)&buf[8] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v46 = v44;
      if (os_signpost_enabled(v44))
      {
        *(_WORD *)__src = 0;
        _os_signpost_emit_with_name_impl(&dword_1921E4000, v46, OS_SIGNPOST_INTERVAL_END, v45, "create_program_and_arguments", (const char *)&unk_192520C83, __src, 2u);
      }
    }
    TimerBase::~TimerBase((TimerBase *)buf);
    goto LABEL_44;
  }
  v110 = CI_RENDER_MB_LIMIT() << 20;
  if (v110 <= (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 496))(a2) >> 1)
    v39 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 496))(a2) >> 1;
  else
    v39 = CI_RENDER_MB_LIMIT() << 20;
  v111 = v39;
  v40 = CI::format_bytes_per_pixel(*(_DWORD *)(a2 + 32));
  if (*(_DWORD *)a9)
    v40 = CI::format_bytes_per_pixel(*(_DWORD *)a9);
  if ((v37 <= v38 || v21 * v22 * (double)(unint64_t)v40 <= 4194304.0) && v37 <= v111)
    goto LABEL_34;
LABEL_24:
  snprintf(__str, 0x200uLL, "memory requirement of %d too big", v37);
  if (v28)
  {
    CI::Object::unref(v28);
    goto LABEL_11;
  }
LABEL_44:
  v47 = ci_signpost_log_render();
  v48 = *(_QWORD *)&v169[8];
  if ((unint64_t)(*(_QWORD *)&v169[8] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v49 = v47;
    if (os_signpost_enabled(v47))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v49, OS_SIGNPOST_INTERVAL_END, v48, "make_program_graph_if_renderable", (const char *)&unk_192520C83, buf, 2u);
    }
  }
  TimerBase::~TimerBase((TimerBase *)v169);
  if (v28)
  {
    ++*(_QWORD *)(a2 + 192);
    v50 = ci_signpost_log_render();
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2) << 32;
    if (v51 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v50))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v50, OS_SIGNPOST_INTERVAL_BEGIN, v51, "render_tile", (const char *)&unk_192520C83, buf, 2u);
    }
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2);
    TimerBase::TimerBase((uint64_t)&v120, v52, 0, (uint64_t)"render_tile", 3);
    if (CI::print_tree_enabled(4, a2))
    {
      if (CI_PRINT_TREE_graphviz())
      {
        if ((v53 & 1) == 0
        {
          if ((CI_PRINT_TREE_dump_timing() & 1) != 0 || (CI_PRINT_TREE_dump_intermediates() & 1) != 0)
            v95 = 0;
          else
            v95 = CI_PRINT_TREE_dump_outputs() ^ 1;
          CI::recursive_tile(CI::RenderTask *,CI::Context *,CI::RenderDestination const*,char const*,CI::GraphWithDepth,CGRect const&,CI::PixelFormat,CI::output_swizzle_info const&,CI::TileTask *({block_pointer})(CI::ProgramNode *,CGRect))::dump_pre = v95;
        }
        if (CI::recursive_tile(CI::RenderTask *,CI::Context *,CI::RenderDestination const*,char const*,CI::GraphWithDepth,CGRect const&,CI::PixelFormat,CI::output_swizzle_info const&,CI::TileTask *({block_pointer})(CI::ProgramNode *,CGRect))::dump_pre)
        {
          v54 = a3;
          if (a3)
          {
            v55 = *(const __CFString **)(a3 + 16);
            v97 = v55 == 0;
            theString = v55;
            if (v55)
            {
              v54 = a3;
              v56 = CFStringCreateWithFormat(0, 0, CFSTR("destination=%@\n"), v55);
            }
            else
            {
              v56 = &stru_1E2ECD1B0;
            }
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 40))(v54))
            {
              v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 40))(v54);
              v63 = CFStringCreateWithFormat(0, 0, CFSTR(" %p"), v62);
            }
            else
            {
              v63 = &stru_1E2ECD1B0;
            }
            v61 = v114;
            v109 = v63;
            v112 = v56;
            if (!v114)
              v61 = *(_DWORD *)(a3 + 32);
          }
          else
          {
            theString = 0;
            v97 = 1;
            v109 = &stru_1E2ECD1B0;
            v112 = &stru_1E2ECD1B0;
            v61 = v114;
          }
          v105 = CI::name_for_format(v61);
          if (*(_DWORD *)(a2 + 344))
            v64 = "prepare";
          else
            v64 = "";
          v107 = v64;
          v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 264))(a2);
          v66 = "highp ";
          if (v65 != 1)
            v66 = "";
          if (v65 == -1)
            v66 = "lowp ";
          v106 = v66;
          v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2);
          v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2);
          if (*(_BYTE *)(a2 + 236))
            v68 = ":";
          else
            v68 = "";
          v102 = v68;
          v103 = v67;
          v100 = *(_QWORD *)(a2 + 192);
          v101 = *(_QWORD *)(a2 + 152);
          v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 312))(a2);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2) == -1)
            v69 = "false";
          else
            v69 = "true";
          v70 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 488))(a2) >> 20;
          v71 = CI::name_for_format(*(_DWORD *)(a2 + 32));
          v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 168))(a2);
          v73 = "(lossyAllowed)";
          if (!v72)
            v73 = "";
          v96 = v70;
          v74 = v109;
          v75 = (CI::GraphObject *)CFStringCreateWithFormat(0, 0, CFSTR("program graph %s\n%s%@\n(%s%s context %d%s%s frame %lu tile %lu)\n%@deviceName=%s\ncacheIntermediates=%s\nintermediatesLimit=%ldMB\nworkingFormat=%s%s\nformat=%s\nroi=[%g %g %g %g]"), v107, a4, v109, v106, v104, v103, v102, a2 + 236, v101, v100, v112, v99, v69, v96, v71, v73,
                                     v105,
                                     *(_QWORD *)a7,
                                     *((_QWORD *)a7 + 1),
                                     *((_QWORD *)a7 + 2),
                                     *((_QWORD *)a7 + 3));
          v77 = (__CFString *)CI::GraphObject::graphviz_representation(v28, v75, 0, v76);
          if (v77)
          {
            v108 = v75;
            v200 = 0u;
            v199 = 0u;
            v198 = 0u;
            v197 = 0u;
            v196 = 0u;
            v195 = 0u;
            v194 = 0u;
            v193 = 0u;
            v192 = 0u;
            v191 = 0u;
            v190 = 0u;
            v189 = 0u;
            v188 = 0u;
            v187 = 0u;
            v186 = 0u;
            *(_OWORD *)buf = 0u;
            if (v97)
            {
              strlcpy((char *)buf, (const char *)(a2 + 236), 0x100uLL);
              v78 = theString;
            }
            else
            {
              v78 = theString;
              CFStringGetCString(theString, (char *)buf, 256, 0x8000100u);
            }
            v184 = 0u;
            v183 = 0u;
            v182 = 0u;
            v181 = 0u;
            v180 = 0u;
            v179 = 0u;
            v178 = 0u;
            v177 = 0u;
            v176 = 0u;
            v175 = 0u;
            v174 = 0u;
            v173 = 0u;
            v172 = 0u;
            v171 = 0u;
            v170 = 0u;
            *(_OWORD *)v169 = 0u;
            v80 = getpid();
            if (buf[0])
              v81 = "_";
            else
              v81 = "";
            v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2);
            snprintf(v169, 0x100uLL, "%d%s%s_%d_%lu_program_graph_%lu", v80, v81, (const char *)buf, v82, *(_QWORD *)(a2 + 152), *(_QWORD *)(a2 + 192));
            v83 = (FILE *)CI_LOG_FILE();
            *(_QWORD *)__src = MEMORY[0x1E0C809B0];
            v126 = 0x40000000;
            v127 = ___ZN2CIL22dump_program_graph_preEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke;
            v128 = &__block_descriptor_tmp_186;
            v129 = v78;
            v130 = buf;
            v131 = a2;
            v132 = a4;
            v136 = v114;
            v133 = a3;
            v134 = a7;
            v135 = v169;
            stream_to_file(v83, (uint64_t)__src);
            if (CI::format_for_graphviz(void)::onceToken != -1)
              dispatch_once(&CI::format_for_graphviz(void)::onceToken, &__block_literal_global_78_0);
            v75 = (CI::GraphObject *)v109;
            v74 = v112;
            v84 = CI::format_for_graphviz(void)::fmt;
            v85 = CI_TEMP_DIR();
            CIGVDumpToFile(v77, v84, (uint64_t)v85, (uint64_t)v169);
            CFRelease(v108);
            v79 = v77;
          }
          else
          {
            v79 = v112;
          }
          CFRelease(v79);
          CFRelease(v74);
          CFRelease(v75);
        }
      }
      else if ((CI_PRINT_TREE_dump_timing() & 1) == 0)
      {
        v59 = (FILE *)CI_LOG_FILE();
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&v186 = ___ZN2CIL19print_program_graphEPNS_7ContextEPKNS_17RenderDestinationEdPKNS_8TileTaskEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke;
        *((_QWORD *)&v186 + 1) = &__block_descriptor_tmp_193;
        *(_QWORD *)&v187 = a3;
        *((_QWORD *)&v187 + 1) = a2;
        DWORD2(v190) = v114;
        *(_QWORD *)&v188 = a4;
        *((_QWORD *)&v188 + 1) = a7;
        v189 = 0uLL;
        *(_QWORD *)&v190 = v28;
        stream_to_file(v59, (uint64_t)buf);
      }
    }
    v86 = (CI::TileTask *)(*(uint64_t (**)(uint64_t, CI::Context *, double, double, double, double))(a10 + 16))(a10, v28, *a7, a7[1], a7[2], a7[3]);
    if (CI_PRINT_TREE_dump_timing() && !CI_PRINT_TREE_graphviz() && !*(_DWORD *)(a2 + 344))
    {
      if (v86)
        CI::Object::ref((uint64_t)v86);
      v87 = *((_OWORD *)a7 + 1);
      *(_OWORD *)buf = *(_OWORD *)a7;
      v186 = v87;
      CI::Object::ref(a2);
      CI::Object::ref((uint64_t)v28);
      if (a3)
        CI::Object::ref(a3);
      CI::Object::ref((uint64_t)a1);
      v88 = strdup(a4);
      v89 = CI::Context::render_completion_queue((CI::Context *)v88);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = ___ZN2CIL14recursive_tileEPNS_10RenderTaskEPNS_7ContextEPKNS_17RenderDestinationEPKcNS_14GraphWithDepthERK6CGRectNS_11PixelFormatERKNS_19output_swizzle_infoEU13block_pointerFPNS_8TileTaskEPNS_11ProgramNodeESA_E_block_invoke;
      block[3] = &__block_descriptor_tmp_159;
      block[4] = a2;
      block[5] = a3;
      block[6] = a1;
      block[7] = v86;
      block[8] = v88;
      block[9] = v28;
      v117 = *(_OWORD *)buf;
      v118 = v186;
      v119 = v114;
      dispatch_async(v89, block);
    }
    CI::RenderTask::addTileTask(a1, v86);
    v90 = (const __CFString *)*((_QWORD *)v86 + 23);
    if (v90)
    {
      CStringPtr = CFStringGetCStringPtr(v90, 0x8000100u);
      CI::RenderTask::raise(a1, "%s", CStringPtr);
    }
    CI::Object::unref(v86);
    CI::Object::unref(v28);
    v92 = ci_signpost_log_render();
    v93 = v121;
    if ((unint64_t)(v121 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v94 = v92;
      if (os_signpost_enabled(v92))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1921E4000, v94, OS_SIGNPOST_INTERVAL_END, v93, "render_tile", (const char *)&unk_192520C83, buf, 2u);
      }
    }
    TimerBase::~TimerBase((TimerBase *)&v120);
  }
  else if (v16 >= 16.0 || v17 >= 16.0)
  {
    if (v16 <= v17)
    {
      v60 = *((_OWORD *)a7 + 1);
      *(_OWORD *)buf = *(_OWORD *)a7;
      *(double *)&v186 = a7[2];
      *((double *)&v186 + 1) = floor(v17 * 0.5 * 0.25) * 4.0;
      *(_OWORD *)v169 = *(_OWORD *)a7;
      *(_QWORD *)&v170 = v60;
      *(double *)&v169[8] = *((double *)&v186 + 1) + *(double *)&v169[8];
      *((double *)&v170 + 1) = v17 - *((double *)&v186 + 1);
    }
    else
    {
      v57 = *(_OWORD *)a7;
      *((double *)&v186 + 1) = a7[3];
      *(_OWORD *)buf = v57;
      *(double *)&v186 = floor(v16 * 0.5 * 0.25) * 4.0;
      v58 = *((_OWORD *)a7 + 1);
      *(_OWORD *)v169 = *(_OWORD *)a7;
      *((_QWORD *)&v170 + 1) = *((_QWORD *)&v58 + 1);
      *(double *)v169 = *(double *)&v186 + *(double *)v169;
      *(double *)&v170 = v16 - *(double *)&v186;
    }
    CI::recursive_tile(a1, a2, a3, a4, a5, a6, buf, v114, a9, a10);
    CI::recursive_tile(a1, a2, a3, a4, a5, a6, v169, v114, a9, a10);
  }
  else
  {
    CI::RenderTask::raise(a1, "Failed to render part of the image because %s", __str);
  }
}

void ___ZN2CIL15tile_node_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcNS_14GraphWithDepthERK6CGRectNS_11PixelFormatERKNS_19output_swizzle_infoEU13block_pointerFPNS_8TileTaskEPNS_11ProgramNodeES8_E_block_invoke(uint64_t a1)
{
  uint64_t v1;
  FILE *v3;
  CI::Object *v4;
  _QWORD v5[5];

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v3 = (FILE *)CI_LOG_FILE();
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 0x40000000;
    v5[2] = ___ZN2CIL23dump_program_graph_postEPNS_10RenderTaskE_block_invoke;
    v5[3] = &__block_descriptor_tmp_196;
    v5[4] = v1;
    stream_to_file(v3, (uint64_t)v5);
    v4 = *(CI::Object **)(a1 + 32);
    if (v4)
      CI::Object::unref(v4);
  }
}

void ___ZN2CIL14recursive_tileEPNS_10RenderTaskEPNS_7ContextEPKNS_17RenderDestinationEPKcNS_14GraphWithDepthERK6CGRectNS_11PixelFormatERKNS_19output_swizzle_infoEU13block_pointerFPNS_8TileTaskEPNS_11ProgramNodeESA_E_block_invoke(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  FILE *v7;
  uint64_t v8;
  CI::Object *v9;
  CI::Object *v10;
  CI::Object *v11;
  NSObject *global_queue;
  CI::Object *v13;
  int8x16_t v14;
  _QWORD block[5];
  _QWORD v16[4];
  int8x16_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  int v23;

  v14 = *(int8x16_t *)(a1 + 32);
  v2 = CI::RenderTask::completionTime(*(CI::RenderTask **)(a1 + 48));
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_DWORD *)(a1 + 112);
  v7 = (FILE *)CI_LOG_FILE();
  v8 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZN2CIL19print_program_graphEPNS_7ContextEPKNS_17RenderDestinationEdPKNS_8TileTaskEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke;
  v16[3] = &__block_descriptor_tmp_193;
  v17 = vextq_s8(v14, v14, 8uLL);
  v23 = v6;
  v18 = v4;
  v19 = a1 + 80;
  v20 = v3;
  v21 = v2;
  v22 = v5;
  stream_to_file(v7, (uint64_t)v16);
  v9 = *(CI::Object **)(a1 + 40);
  if (v9)
    CI::Object::unref(v9);
  v10 = *(CI::Object **)(a1 + 56);
  if (v10)
    CI::Object::unref(v10);
  v11 = *(CI::Object **)(a1 + 48);
  if (v11)
    CI::Object::unref(v11);
  global_queue = dispatch_get_global_queue(17, 0);
  block[0] = v8;
  block[1] = 0x40000000;
  block[2] = ___ZN2CIL14recursive_tileEPNS_10RenderTaskEPNS_7ContextEPKNS_17RenderDestinationEPKcNS_14GraphWithDepthERK6CGRectNS_11PixelFormatERKNS_19output_swizzle_infoEU13block_pointerFPNS_8TileTaskEPNS_11ProgramNodeESA_E_block_invoke_2;
  block[3] = &__block_descriptor_tmp_158_0;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(global_queue, block);
  v13 = *(CI::Object **)(a1 + 72);
  if (v13)
    CI::Object::unref(v13);
  free(*(void **)(a1 + 64));
}

void ___ZN2CIL14recursive_tileEPNS_10RenderTaskEPNS_7ContextEPKNS_17RenderDestinationEPKcNS_14GraphWithDepthERK6CGRectNS_11PixelFormatERKNS_19output_swizzle_infoEU13block_pointerFPNS_8TileTaskEPNS_11ProgramNodeESA_E_block_invoke_2(uint64_t a1)
{
  CI::Object *v1;

  v1 = *(CI::Object **)(a1 + 32);
  if (v1)
    CI::Object::unref(v1);
}

unint64_t CI::gather_rois_for_program_graph(CI *this, CI::Context *a2, const char *a3, CI::ProgramNode *a4, CGRect a5)
{
  double height;
  double width;
  CGFloat y;
  CGFloat x;
  NSObject *v11;
  os_signpost_id_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  __int16 v23;
  unsigned __int16 v24;
  double v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  NSObject *v31;
  os_signpost_id_t v32;
  NSObject *v33;
  unint64_t v35;
  uint8_t buf[8];
  os_signpost_id_t v37;
  void *__p;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;

  height = a5.size.height;
  width = a5.size.width;
  y = a5.origin.y;
  x = a5.origin.x;
  v11 = ci_signpost_log_render();
  v12 = (*(uint64_t (**)(CI *))(*(_QWORD *)this + 272))(this) << 32;
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1921E4000, v11, OS_SIGNPOST_INTERVAL_BEGIN, v12, "gather_rois_for_program_graph", (const char *)&unk_192520C83, buf, 2u);
  }
  v13 = (*(uint64_t (**)(CI *))(*(_QWORD *)this + 272))(this);
  TimerBase::TimerBase((uint64_t)buf, v13, 0, (uint64_t)"gather_rois_for_program_graph", 36);
  v14 = CI::Context::bytesLimit(this);
  v35 = 0;
  v43.origin.x = x;
  v43.origin.y = y;
  v43.size.width = width;
  v43.size.height = height;
  v17 = CI::_gather_rois_for_program_graph(this, a2, 0, (CI::ProgramNode *)&v35, v43, v15, v16);
  if (*((_QWORD *)this + 46))
  {
    if (*(int *)(*(_QWORD *)CI::Node::rois(a2) + 80) > 63)
    {
      v19 = 0;
    }
    else
    {
      do
      {
        v42 = 0;
        v18 = CI::format_bytes_per_pixel(*((_DWORD *)this + 8));
        __p = 0;
        v39 = 0;
        v40 = 0;
        v41 = v18;
        CI::_traverse_program_graph(a2, 0, (char **)&__p, &v42);
        v19 = v42;
        if (__p)
        {
          v39 = __p;
          operator delete(__p);
        }
        if (v19 <= v14)
          break;
        v20 = CI::Node::rois(a2);
        v23 = 64 - __clz(*(int *)(*(_QWORD *)v20 + 80));
        v24 = *(_DWORD *)(*(_QWORD *)v20 + 80) ? v23 : 0;
        v44.origin.x = x;
        v44.origin.y = y;
        v44.size.width = width;
        v44.size.height = height;
        CI::_gather_rois_for_program_graph(this, a2, (const char *)v24, (CI::ProgramNode *)&v35, v44, v21, v22);
      }
      while (*(int *)(*(_QWORD *)CI::Node::rois(a2) + 80) < 64);
    }
  }
  else
  {
    v19 = v17;
    if (v35 && *(int *)(*(_QWORD *)CI::Node::rois(a2) + 80) <= 1)
    {
      v25 = width >= height ? height : width;
      if (v25 > 16.0 && (*(unsigned int (**)(CI *))(*(_QWORD *)this + 232))(this) == -1 && !(v14 >> 28))
      {
        __p = 0;
        v45.origin.x = x;
        v45.origin.y = y;
        v45.size.width = width;
        v45.size.height = height;
        v28 = CI::_gather_rois_for_program_graph(this, a2, (const char *)1, (CI::ProgramNode *)&__p, v45, v26, v27);
        if ((unint64_t)__p >= v35)
        {
          v46.origin.x = x;
          v46.origin.y = y;
          v46.size.width = width;
          v46.size.height = height;
          v28 = CI::_gather_rois_for_program_graph(this, a2, 0, (CI::ProgramNode *)&__p, v46, v29, v30);
        }
        v19 = v28;
      }
    }
  }
  v31 = ci_signpost_log_render();
  v32 = v37;
  if (v37 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v33 = v31;
    if (os_signpost_enabled(v31))
    {
      LOWORD(__p) = 0;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v33, OS_SIGNPOST_INTERVAL_END, v32, "gather_rois_for_program_graph", (const char *)&unk_192520C83, (uint8_t *)&__p, 2u);
    }
  }
  TimerBase::~TimerBase((TimerBase *)buf);
  return v19;
}

void ___ZN2CIL32make_program_graph_if_renderableEPNS_7ContextEPKcNS_14GraphWithDepthERK6CGRectRKNS_19output_swizzle_infoEPcm_block_invoke(uint64_t a1, CI::ProgramNode *a2)
{
  if ((*(unsigned int (**)(CI::ProgramNode *))(*(_QWORD *)a2 + 16))(a2) == 52)
  {
    CI::ProgramNode::release_program_and_arguments(a2);
    if ((*(unsigned int (**)(_QWORD *))(**((_QWORD **)a2 + 6) + 16))(*((_QWORD **)a2 + 6)) != 41
      && (*(unsigned int (**)(_QWORD *))(**((_QWORD **)a2 + 6) + 16))(*((_QWORD **)a2 + 6)) != 42)
    {
      CI::ProgramNode::create_program_and_arguments(a2, *(CI::Context **)(a1 + 32), "main");
    }
  }
}

uint64_t CI::_gather_rois_for_program_graph(CI *this, CI::Context *a2, const char *a3, CI::ProgramNode *a4, CGRect a5, uint64_t a6, unint64_t *a7)
{
  int v8;
  double height;
  double width;
  double y;
  double x;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  int v27;

  v8 = (int)a3;
  height = a5.size.height;
  width = a5.size.width;
  y = a5.origin.y;
  x = a5.origin.x;
  v15 = CI::Node::BuildMapToUseCount(a2, a2);
  __p = 0;
  v23 = 0;
  v24 = 0;
  CI::recurseGraphStats(a2, 0, 0, (unint64_t **)&__p, v15);
  if (__p)
  {
    v23 = (uint64_t)__p;
    operator delete(__p);
  }
  v16 = *((_QWORD *)a2 + 6);
  __p = (void *)MEMORY[0x1E0C809B0];
  v23 = 0x40000000;
  v24 = (uint64_t)___ZN2CI4Node15traverse_uniqueEU13block_pointerFvPS0_E_block_invoke;
  v25 = &unk_1E2EB7F68;
  v26 = &__block_literal_global_170;
  CI::GraphObject::traverse_unique(v16, (uint64_t)&__p);
  __p = 0;
  v23 = -1;
  v25 = 0;
  v26 = 0;
  v24 = -1;
  v27 = 0;
  v17 = CI::Context::bytesLimit(this);
  v18 = (*(uint64_t (**)(CI *))(*(_QWORD *)this + 440))(this);
  (*(void (**)(CI::Context *, uint64_t, uint64_t, void **, double, double, double, double))(*(_QWORD *)a2 + 344))(a2, v17, v18, &__p, x, y, width, height);
  for (; v8; --v8)
  {
    v19 = CI::Node::rois(a2);
    *(_DWORD *)(*(_QWORD *)v19 + 80) *= 2;
  }
  v20 = CI::subdivide_program_rois((int *)this, (unint64_t)a2, v15, 1, (unint64_t *)a4, x, y, width, height);
  if (v15)
  {
    std::__tree<std::__value_type<CI::Node const*,CI::useCountDepth>,std::__map_value_compare<CI::Node const*,std::__value_type<CI::Node const*,CI::useCountDepth>,std::less<CI::Node const*>,true>,std::allocator<std::__value_type<CI::Node const*,CI::useCountDepth>>>::destroy(v15, *(_QWORD **)(v15 + 8));
    MEMORY[0x194025AAC](v15, 0x1020C4062D53EE8);
  }
  return v20;
}

void ___ZN2CIL30_gather_rois_for_program_graphEPNS_7ContextEPKcPNS_11ProgramNodeE6CGRecttRm_block_invoke(int a1, CI::Node *this)
{
  CI::Node::clear_rois(this);
}

uint64_t CI::subdivide_program_rois(int *a1, unint64_t a2, uint64_t a3, int a4, unint64_t *a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  unint64_t v15;
  int NodeUseCount;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  CGRect **v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  int v38;
  int v39;
  _QWORD *v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  unint64_t v59;
  const CGRect *v60;
  CGRect **v61;
  CI *v62;
  CI *v63;
  CGFloat v64;
  CGFloat v65;
  CGRect **v66;
  CGFloat v67;
  CGFloat v68;
  CGFloat v69;
  CGFloat v70;
  int v71;
  uint64_t v72;
  _DWORD *v73;
  int v74;
  CGFloat y;
  unint64_t v76;
  uint64_t v77;
  int v78;
  const CI::ProgramNode *v79;
  unint64_t v80;
  CI::SerialRectArray *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  double v98;
  double v99;
  CGFloat v100;
  double v101;
  CGFloat v102;
  double v103;
  CGFloat v104;
  int v105;
  _BOOL4 v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  const CI::ProgramNode *v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int *v118;
  int v119;
  int v120;
  uint64_t v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t *v135;
  unint64_t v136;
  unsigned int v137;
  uint64_t *v138;
  CI *v139;
  int v140;
  int v141;
  CI *v142;
  CGFloat v143;
  CGFloat v144;
  unsigned int v145;
  CGRect *v146;
  unint64_t v147;
  CGFloat v148;
  CGFloat v149;
  CGFloat v150;
  unint64_t v151;
  BOOL v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  _BOOL4 v160;
  double width;
  double height;
  _BOOL4 v163;
  CI *v164;
  CGFloat v165;
  CGFloat v166;
  CGFloat v167;
  CGFloat v168;
  CGFloat v169;
  int v170;
  unint64_t v171;
  unint64_t v172;
  CI::SerialRectArray *v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  int v177;
  CGSize v178;
  unint64_t v179;
  CGFloat x;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  const CI::ProgramNode *v184;
  uint64_t v185;
  uint64_t v186;
  _DWORD *v187;
  unint64_t v188;
  int v189;
  CGRect *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  _BOOL4 v194;
  _BOOL8 v195;
  CI::SerialRectArray *v196;
  int v197;
  _BOOL8 v198;
  unint64_t v199;
  unint64_t v200;
  int v201;
  const CI::ProgramNode *v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  _QWORD *v214;
  uint64_t v215;
  int i;
  int v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  BOOL isRootNode;
  double v230;
  double v231;
  double v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  unint64_t v244;
  int v245;
  _QWORD *v246;
  uint64_t v247;
  int v248;
  CGSize v249;
  CGRect *v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  CGRect *v254;
  int v255;
  int v256;
  CGRect *v257;
  uint64_t v258;
  uint64_t *v259;
  CI *v260;
  CGRect *v261;
  CI::roiList *v262;
  uint64_t *v263;
  int v264;
  unint64_t v265;
  CI *v266;
  uint64_t v267;
  unint64_t v268;
  double v269;
  double v270;
  double v271;
  double v272;
  uint64_t *v273;
  uint64_t **v274;
  BOOL v275;
  _QWORD *v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  int v280;
  unint64_t v281;
  int v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  int v286;
  int v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  int *v292;
  unint64_t v293;
  CGRect *v295;
  CI *v296;
  unint64_t v297;
  void *__p[3];
  CI *v299[2];
  CGSize size;
  unint64_t v301;
  unsigned int v302;
  CGRect v303;
  uint64_t *v304;
  uint64_t *v305;
  unint64_t v306;
  CGRect *v307;
  CGRect *v308;
  uint64_t v309;
  CGRect v310;
  CGRect v311;
  CGRect v312;
  CGRect v313;
  CGRect v314;
  CGRect v315;
  CGRect v316;

  v15 = a2;
  NodeUseCount = CI::Node::GetNodeUseCount(a3, a2);
  if (a4)
  {
    v18 = *(_QWORD **)(a3 + 8);
    if (v18)
    {
      v19 = a3 + 8;
      do
      {
        v20 = v18[4];
        v21 = v20 >= v15;
        if (v20 >= v15)
          v22 = v18;
        else
          v22 = v18 + 1;
        if (v21)
          v19 = (uint64_t)v18;
        v18 = (_QWORD *)*v22;
      }
      while (*v22);
      if (v19 != a3 + 8 && *(_QWORD *)(v19 + 32) <= v15)
        --*(_DWORD *)(v19 + 40);
    }
    --NodeUseCount;
  }
  if (NodeUseCount)
    return 0;
  v24 = CI::Node::rois_count((CI::Node *)v15);
  v25 = *(_QWORD *)v15;
  if (!v24)
  {
    v53 = (*(uint64_t (**)(unint64_t))(v25 + 40))(v15);
    if (v53 >= 1)
    {
      v54 = v53;
      v55 = 0;
      do
      {
        v56 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, v55);
        v310.origin.x = a6;
        v310.origin.y = a7;
        v310.size.width = a8;
        v310.size.height = a9;
        v57 = CI::Node::region_of_child((CI::Node *)v15, v310);
        v58 = CI::subdivide_program_rois(a1, v56, a3, 1, a5, v57);
        v55 = (v55 + 1);
      }
      while (v54 != (_DWORD)v55);
      return v58;
    }
    return 0;
  }
  if ((*(unsigned int (**)(unint64_t))(v25 + 16))(v15) != 52)
    return 0;
  v293 = CI::Context::bytesLimit((CI::Context *)a1);
  v26 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 448))(a1);
  v27 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 456))(a1);
  v28 = 456;
  if (v26 < v27)
    v28 = 448;
  v295 = (CGRect *)(*(uint64_t (**)(int *))(*(_QWORD *)a1 + v28))(a1);
  v29 = (CGRect **)CI::Node::rois((CI::Node *)v15);
  CI::SerialRectArray::unionRect(v29);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v38 = *(_DWORD *)(v15 + 140);
  if (!v38)
    v38 = a1[8];
  v39 = CI::format_bytes_per_pixel(v38);
  v40 = *(_QWORD **)(a3 + 8);
  v41 = a5;
  if (!v40)
    goto LABEL_35;
  v42 = a3 + 8;
  do
  {
    v43 = v40[4];
    v44 = v43 >= v15;
    if (v43 >= v15)
      v45 = v40;
    else
      v45 = v40 + 1;
    if (v44)
      v42 = (uint64_t)v40;
    v40 = (_QWORD *)*v45;
  }
  while (*v45);
  if (v42 == a3 + 8 || *(_QWORD *)(v42 + 32) > v15)
LABEL_35:
    v42 = a3 + 8;
  v279 = v39;
  v296 = (CI *)v15;
  v291 = a3;
  if (*(_BYTE *)(v42 + 44) && (int)CI::Node::rois_count((CI::Node *)v15) >= 2)
  {
    v46 = CI::Node::rois_count((CI::Node *)v15);
    if (v46 < 1)
    {
      v48 = 0;
    }
    else
    {
      v47 = 0;
      v48 = 0;
      v49 = v46;
      do
      {
        v50 = *(_QWORD *)CI::Node::rois((CI::Node *)v15) + 120 * v47;
        v51 = *(_QWORD *)(v50 + 32);
        v52 = *(_QWORD *)(v50 + 40);
        while (v51 != v52)
        {
          if (v48 <= *(_QWORD *)(v51 + 24))
            v48 = *(_QWORD *)(v51 + 24);
          v51 += 48;
        }
        ++v47;
      }
      while (v47 != v49);
    }
    v61 = (CGRect **)CI::Node::rois((CI::Node *)v15);
    CI::SerialRectArray::unionRect(v61);
    v299[0] = v62;
    v299[1] = v63;
    size.width = v64;
    size.height = v65;
    v66 = (CGRect **)CI::Node::rois((CI::Node *)v15);
    CI::SerialRectArray::unionRect(v66);
    v303.origin.x = v67;
    v303.origin.y = v68;
    v303.size.width = v69;
    v303.size.height = v70;
    v71 = CI::format_bytes_per_pixel(a1[8]);
    v60 = v295;
    v59 = CI::programNodeMemoryLoad((CI *)v15, (CGFloat *)v299, &v303, v295, v71, 1) + v48;
    v41 = a5;
  }
  else
  {
    v59 = 0x7FFFFFFFFFFFFFFFLL;
    v60 = v295;
  }
  v292 = a1;
  if (v59 < v293)
  {
    v286 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v15 + 40))(v15);
    if (v286 >= 1)
    {
      v297 = 0;
      v72 = 0;
      do
      {
        v73 = (_DWORD *)(*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, v72);
        v74 = (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v73 + 16))(v73) == 52 && v73[38] > 1;
        v311.origin.x = v31;
        v311.origin.y = v33;
        v311.size.width = v35;
        v311.size.height = v37;
        CI::ProgramNode::compute_regions_of_child((CI::ProgramNode *)v15, v311, v72, (unint64_t)v60, 0, v74, (uint64_t *)&v303);
        y = v303.origin.y;
        if (*(_QWORD *)&v303.origin.y != *(_QWORD *)&v303.origin.x)
        {
          v76 = 0;
          v77 = v72;
          do
          {
            v78 = CI::Node::rois_count((CI::Node *)v15);
            if (v78 >= 1)
            {
              v79 = 0;
              v80 = v78;
              do
              {
                v81 = (CI::SerialRectArray *)CI::Node::rois((CI::Node *)v15);
                *(_QWORD *)(*(_QWORD *)v81 + 120 * (_QWORD)v79 + 88) = v59;
                CI::SerialRectArray::updateParents(v81, (int)v79, v59);
                v82 = *(_QWORD *)CI::Node::rois((CI::Node *)v15) + 120 * (_QWORD)v79;
                v83 = *(_QWORD *)(v82 + 32);
                v84 = *(_QWORD *)(v82 + 40);
                if (v83 == v84)
                {
                  v86 = 0;
                  v85 = 0;
                }
                else
                {
                  v85 = 0;
                  v86 = 0;
                  do
                  {
                    if (v86 <= *(_QWORD *)(v83 + 32))
                      v86 = *(_QWORD *)(v83 + 32);
                    if (v85 <= *(_QWORD *)(v83 + 24))
                      v85 = *(_QWORD *)(v83 + 24);
                    v83 += 48;
                  }
                  while (v83 != v84);
                }
                v87 = CI::nodePathLoad(v296, v79, v279);
                if (v86 <= v59)
                  v86 = v59;
                v88 = (_QWORD *)CI::Node::rois(v296);
                v89 = *v88 + 120 * (_QWORD)v79;
                v90 = *(_QWORD *)(v89 + 32);
                v91 = *(_QWORD *)(v89 + 40);
                if (v90 == v91)
                {
                  v92 = 0;
                  v72 = v77;
                }
                else
                {
                  v92 = 0;
                  v72 = v77;
                  do
                  {
                    if (v92 <= *(_DWORD *)(v90 + 40))
                      v92 = *(_DWORD *)(v90 + 40);
                    v90 += 48;
                  }
                  while (v90 != v91);
                }
                v93 = *v88 + 120 * (_QWORD)v79;
                v94 = *(_QWORD *)(v93 + 56);
                v95 = *(_QWORD *)(v93 + 64);
                while (v94 != v95)
                {
                  if (v92 <= *(_DWORD *)(v94 + 40))
                    v92 = *(_DWORD *)(v94 + 40);
                  v94 += 48;
                }
                v96 = v87 + v85;
                v15 = (unint64_t)v296;
                v299[0] = v296;
                v299[1] = (CI *)v79;
                *(_QWORD *)&size.width = __PAIR64__(v76, v72);
                *(_QWORD *)&size.height = v96;
                v301 = v86;
                v302 = v92 + 1;
                v41 = a5;
                v97 = *a5;
                if (*a5 <= v96)
                  v97 = v96;
                *a5 = v97;
                v98 = CI::Node::roi(v296, (int)v79);
                v100 = v99;
                v102 = v101;
                v104 = v103;
                v105 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v73 + 16))(v73);
                v106 = 0;
                if (v105 == 52)
                  v106 = v73[38] > 1;
                v312.origin.x = v98;
                v312.origin.y = v100;
                v312.size.width = v102;
                v312.size.height = v104;
                v60 = v295;
                CI::ProgramNode::compute_regions_of_child(v296, v312, v72, (unint64_t)v295, 1, v106, (uint64_t *)__p);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                (*(void (**)(_DWORD *, unint64_t, CGRect *, CI **, double, double, double, double))(*(_QWORD *)v73 + 344))(v73, v293, v295, v299, *(double *)(*(_QWORD *)&v303.origin.x + 32 * v76), *(double *)(*(_QWORD *)&v303.origin.x + 32 * v76 + 8), *(double *)(*(_QWORD *)&v303.origin.x + 32 * v76 + 16), *(double *)(*(_QWORD *)&v303.origin.x + 32 * v76 + 24));
                v79 = (const CI::ProgramNode *)((char *)v79 + 1);
              }
              while (v79 != (const CI::ProgramNode *)v80);
            }
            v107 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, v72);
            v108 = CI::subdivide_program_rois(v292, v107, v291, 1, v41, *(double *)(*(_QWORD *)&v303.origin.x + 32 * v76));
            v109 = v297;
            if (v108 > v297)
              v109 = v108;
            v297 = v109;
            ++v76;
            y = v303.origin.x;
          }
          while (v76 < (uint64_t)(*(_QWORD *)&v303.origin.y - *(_QWORD *)&v303.origin.x) >> 5);
        }
        if (y != 0.0)
        {
          v303.origin.y = y;
          operator delete(*(void **)&y);
        }
        v72 = (v72 + 1);
      }
      while ((_DWORD)v72 != v286);
      return v297;
    }
    return 0;
  }
  v110 = CI::Node::rois_count((CI::Node *)v15);
  if (v110 < 1)
    return 0;
  v111 = 0;
  v297 = 0;
  v112 = (double)(unint64_t)v60;
  v290 = v110;
  do
  {
    v113 = *(_QWORD *)CI::Node::rois((CI::Node *)v15) + 120 * (_QWORD)v111;
    v114 = *(_QWORD *)(v113 + 32);
    v115 = *(_QWORD *)(v113 + 40);
    if (v114 == v115)
    {
      v117 = 0;
      v116 = 0;
      v118 = v292;
    }
    else
    {
      v116 = 0;
      v117 = 0;
      v118 = v292;
      do
      {
        if (v116 <= *(_QWORD *)(v114 + 24))
          v116 = *(_QWORD *)(v114 + 24);
        if (v117 <= *(_QWORD *)(v114 + 32))
          v117 = *(_QWORD *)(v114 + 32);
        v114 += 48;
      }
      while (v114 != v115);
    }
    v278 = v117;
    v287 = v118[8];
    v304 = 0;
    v305 = 0;
    v306 = 0;
    v119 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v15 + 40))(v15);
    if (v119 < 1)
    {
      v135 = 0;
      v138 = 0;
LABEL_162:
      v160 = v138 != v135;
      if (!v135)
        goto LABEL_164;
LABEL_163:
      v305 = v135;
      operator delete(v135);
      goto LABEL_164;
    }
    v120 = v119;
    v121 = 0;
    do
    {
      v122 = (int *)(*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, v121);
      if ((*(unsigned int (**)(int *))(*(_QWORD *)v122 + 16))(v122) == 52 && v122[38] > 1)
      {
        v123 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, v121);
        v124 = v123;
        v125 = v305;
        if ((unint64_t)v305 >= v306)
        {
          v127 = v305 - v304;
          if ((unint64_t)(v127 + 1) >> 61)
            abort();
          v128 = (uint64_t)(v306 - (_QWORD)v304) >> 2;
          if (v128 <= v127 + 1)
            v128 = v127 + 1;
          if (v306 - (unint64_t)v304 >= 0x7FFFFFFFFFFFFFF8)
            v129 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v129 = v128;
          if (v129)
            v130 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v306, v129);
          else
            v130 = 0;
          v131 = (uint64_t *)&v130[8 * v127];
          *v131 = v124;
          v126 = v131 + 1;
          v133 = v304;
          v132 = v305;
          if (v305 != v304)
          {
            do
            {
              v134 = *--v132;
              *--v131 = v134;
            }
            while (v132 != v133);
            v132 = v304;
          }
          v304 = v131;
          v305 = v126;
          v306 = (unint64_t)&v130[8 * v129];
          if (v132)
            operator delete(v132);
        }
        else
        {
          *v305 = v123;
          v126 = v125 + 1;
        }
        v305 = v126;
      }
      v121 = (v121 + 1);
    }
    while ((_DWORD)v121 != v120);
    v135 = v305;
    if (v305 == v304)
    {
      v138 = v305;
LABEL_161:
      v41 = a5;
      goto LABEL_162;
    }
    v136 = 0;
    v135 = v304;
    while (1)
    {
      v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135[v136] + 16))(v135[v136]);
      if ((CI::is_image_type(v137) & 1) == 0)
        break;
LABEL_137:
      ++v136;
      v135 = v304;
      v138 = v305;
      if (v136 >= v305 - v304)
        goto LABEL_161;
    }
    v139 = (CI *)v304[v136];
    v140 = 1;
    do
    {
      v141 = CI::format_bytes_per_pixel(v287);
      v307 = 0;
      v308 = 0;
      v309 = 0;
      v299[0] = COERCE_CI_((*(double (**)(CI *))(*(_QWORD *)v139 + 168))(v139));
      v299[1] = v142;
      size.width = v143;
      size.height = v144;
      v145 = v140;
      CI::SerialRectArray::recurseSubdivide((double *)v299, v140, (void **)&v307);
      v146 = v307;
      if (v307 == v308)
      {
        v147 = 0;
        if (v307)
          goto LABEL_146;
      }
      else
      {
        v147 = 0;
        do
        {
          *(CGPoint *)v299 = v146->origin;
          size = v146->size;
          v303.origin.x = (*(double (**)(CI *))(*(_QWORD *)v139 + 168))(v139);
          v303.origin.y = v148;
          v303.size.width = v149;
          v303.size.height = v150;
          v151 = CI::programNodeMemoryLoad(v139, (CGFloat *)v299, &v303, v60, v141, 0);
          if (v147 <= v151)
            v147 = v151;
          ++v146;
        }
        while (v146 != v308);
        v146 = v307;
        if (v307)
        {
LABEL_146:
          v308 = v146;
          operator delete(v146);
        }
      }
      v152 = v147 + v116 > v293;
      v15 = (unint64_t)v296;
      if (!v152)
        goto LABEL_137;
      (*(void (**)(CI *))(*(_QWORD *)v139 + 168))(v139);
      v154 = v153;
      (*(void (**)(CI *))(*(_QWORD *)v139 + 168))(v139);
      v156 = v155;
      (*(void (**)(CI *))(*(_QWORD *)v139 + 168))(v139);
      if (v154 <= v156)
        v159 = v158;
      else
        v159 = v157;
      if (v159 > v112)
        break;
      v140 = 2 * v145;
    }
    while (v145 < 0x40);
    v160 = 0;
    v135 = v304;
    v41 = a5;
    if (v304)
      goto LABEL_163;
LABEL_164:
    v313 = CGRectInset(*((CGRect *)v118 + 5), 0.000001, 0.000001);
    v314 = CGRectIntegral(v313);
    width = v314.size.width;
    height = v314.size.height;
    v315 = CGRectInset(*(CGRect *)(v118 + 50), 0.000001, 0.000001);
    v316 = CGRectIntegral(v315);
    v163 = v316.size.width == width;
    if (v316.size.height != height)
      v163 = 0;
    v280 = v160 && v163;
    if (!CI_ENABLE_SUBDIVIDE_ROI()
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v15 + 48) + 16))(*(_QWORD *)(v15 + 48)) == 41
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v15 + 48) + 16))(*(_QWORD *)(v15 + 48)) == 42
      || (*(unsigned int (**)(int *))(*(_QWORD *)v118 + 16))(v118) == 74)
    {
      v299[0] = COERCE_CI_(CI::Node::roi((CI::Node *)v15, (int)v111));
      v299[1] = v164;
      size.width = v165;
      size.height = v166;
      v303.origin.x = CI::Node::roi((CI::Node *)v15, (int)v111);
      v303.origin.y = v167;
      v303.size.width = v168;
      v303.size.height = v169;
      v170 = CI::format_bytes_per_pixel(v118[8]);
      v171 = CI::programNodeMemoryLoad((CI *)v15, (CGFloat *)v299, &v303, v60, v170, 0) + v116;
      goto LABEL_171;
    }
    while (1)
    {
      v201 = CI::format_bytes_per_pixel(v118[8]);
      v171 = CI::estimateProgramNodeMemoryLoad((CI *)v15, v111, v60, v201, v280) + v116;
      if (v171 <= v293)
        break;
      v203 = (uint64_t *)CI::Node::rois((CI::Node *)v15);
      v204 = *v203;
      v205 = v203[1];
      if (*v203 != v205)
      {
        v206 = 0;
        do
        {
          v206 += *(int *)(v204 + 80);
          v204 += 120;
        }
        while (v204 != v205);
        if (v206 > 0x3F)
          goto LABEL_215;
      }
      CI::Node::roi((CI::Node *)v15, (int)v111);
      v208 = v207;
      CI::Node::roi((CI::Node *)v15, (int)v111);
      v210 = v209;
      CI::Node::roi((CI::Node *)v15, (int)v111);
      v213 = v208 <= v210 ? v212 : v211;
      if (v213 > v112)
      {
LABEL_215:
        if (v280)
        {
          v215 = *(_QWORD *)CI::Node::rois((CI::Node *)v15) + 120 * (_QWORD)v111;
          for (i = 1; ; i = 2 * *(_DWORD *)(v215 + 80))
          {
            *(_DWORD *)(v215 + 80) = i;
            v217 = CI::format_bytes_per_pixel(v118[8]);
            LOBYTE(v280) = 0;
            v171 = CI::estimateProgramNodeMemoryLoad((CI *)v15, v111, v60, v217, 0) + v116;
            if (v171 <= v293)
              break;
            v218 = (uint64_t *)CI::Node::rois((CI::Node *)v15);
            v219 = *v218;
            v220 = v218[1];
            if (*v218 != v220)
            {
              v221 = 0;
              do
              {
                v221 += *(int *)(v219 + 80);
                v219 += 120;
              }
              while (v219 != v220);
              if (v221 > 0x3F)
                goto LABEL_227;
            }
            CI::Node::roi((CI::Node *)v15, (int)v111);
            v223 = v222;
            CI::Node::roi((CI::Node *)v15, (int)v111);
            v225 = v224;
            CI::Node::roi((CI::Node *)v15, (int)v111);
            v228 = v223 <= v225 ? v227 : v226;
            if (v228 > v112)
              goto LABEL_227;
            v215 = *(_QWORD *)CI::Node::rois((CI::Node *)v15) + 120 * (_QWORD)v111;
          }
        }
        else
        {
LABEL_227:
          LOBYTE(v280) = 0;
        }
        break;
      }
      v214 = (_QWORD *)CI::Node::rois((CI::Node *)v15);
      *(_DWORD *)(*v214 + 120 * (_QWORD)v111 + 80) *= 2;
    }
    isRootNode = CI::isRootNode((CI *)v15, v202);
    v230 = 0.0;
    if (!isRootNode)
    {
      CI::Node::roi((CI::Node *)v15, (int)v111);
      v230 = v232 * v231 * (double)v279;
    }
    if ((v280 & 1) != 0)
    {
      v280 = 1;
      goto LABEL_171;
    }
    v281 = (unint64_t)v230;
    v277 = v171;
    v285 = v116;
    while (2)
    {
      v233 = (uint64_t *)CI::Node::rois((CI::Node *)v15);
      v234 = *v233;
      v235 = v233[1];
      if (*v233 == v235)
        goto LABEL_240;
      v236 = 0;
      do
      {
        v236 += *(int *)(v234 + 80);
        v234 += 120;
      }
      while (v234 != v235);
      if (v236 <= 0x3F)
      {
LABEL_240:
        CI::Node::roi((CI::Node *)v15, (int)v111);
        v238 = v237;
        CI::Node::roi((CI::Node *)v15, (int)v111);
        v240 = v239;
        CI::Node::roi((CI::Node *)v15, (int)v111);
        v243 = v238 <= v240 ? v242 : v241;
        if (v243 <= v112)
        {
          v244 = CI::nodePathLoad((CI *)v15, v111, v279);
          v245 = CI::format_bytes_per_pixel(v118[8]);
          v246 = (_QWORD *)CI::Node::rois((CI::Node *)v15);
          v308 = 0;
          v309 = 0;
          v307 = 0;
          v247 = *v246 + 120 * (_QWORD)v111;
          v248 = *(_DWORD *)(v247 + 80);
          v249 = *(CGSize *)(v247 + 16);
          *(_OWORD *)v299 = *(_OWORD *)v247;
          size = v249;
          CI::SerialRectArray::recurseSubdivide((double *)v299, v248, (void **)&v307);
          v250 = v307;
          if (v307 == v308)
          {
            v253 = 0;
            v41 = a5;
            if (v307)
              goto LABEL_277;
          }
          else
          {
            v251 = v293 - v116 - v244;
            v252 = v245;
            v253 = 0;
            v41 = a5;
            v254 = v307;
            v283 = v251;
            do
            {
              v255 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v15 + 40))(v15);
              v305 = 0;
              v306 = 0;
              v304 = (uint64_t *)&v305;
              if (v255)
              {
                v256 = v255;
                v289 = v253;
                v257 = v254;
                v258 = 0;
                do
                {
                  v303.origin.x = 0.0;
                  *(_QWORD *)&v303.origin.x = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, v258);
                  v299[0] = (CI *)&v303;
                  v259 = std::__tree<std::__value_type<CI::Node *,CI::roiList>,std::__map_value_compare<CI::Node *,std::__value_type<CI::Node *,CI::roiList>,std::less<CI::Node *>,true>,std::allocator<std::__value_type<CI::Node *,CI::roiList>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(&v304, (unint64_t *)&v303, (uint64_t)&std::piecewise_construct, (uint64_t **)v299);
                  CI::ProgramNode::compute_regions_of_child((CI::ProgramNode *)v15, *v257, v258, (unint64_t)v60, 0, 0, (uint64_t *)v299);
                  v261 = (CGRect *)v299[0];
                  v260 = v299[1];
                  if (v299[0] != v299[1])
                  {
                    v262 = (CI::roiList *)(v259 + 5);
                    do
                      CI::roiList::_insertROI(v262, v261++);
                    while (v261 != (CGRect *)v260);
                    v261 = (CGRect *)v299[0];
                  }
                  if (v261)
                  {
                    v299[1] = (CI *)v261;
                    operator delete(v261);
                  }
                  v258 = (v258 + 1);
                }
                while ((_DWORD)v258 != v256);
                v263 = v304;
                v41 = a5;
                v254 = v257;
                v116 = v285;
                v253 = v289;
                if (v304 != (uint64_t *)&v305)
                {
                  do
                  {
                    v299[0] = (CI *)v263[4];
                    std::vector<CGRect>::vector(&v299[1], (uint64_t)(v263 + 5));
                    if ((*(unsigned int (**)(CI *))(*(_QWORD *)v299[0] + 16))(v299[0]) == 52)
                    {
                      v264 = *((_DWORD *)v299[0] + 35);
                      v265 = v252;
                      if (v264)
                        v265 = (int)CI::format_bytes_per_pixel(v264);
                      v266 = *(CI **)&size.width;
                      if (*(CI **)&size.width != v299[1])
                      {
                        v267 = 0;
                        v268 = 0;
                        v269 = (double)v265;
                        v266 = v299[1];
                        do
                        {
                          v270 = *(double *)((char *)v266 + v267 + 16);
                          v271 = *(double *)((char *)v266 + v267 + 24);
                          v303.origin = *(CGPoint *)((char *)v266 + v267);
                          v303.size.width = v270;
                          v303.size.height = v271;
                          if (CI::programNodeMemoryLoad(v299[0], &v303.origin.x, &v303, v60, v252, 0) > v283)
                          {
                            v272 = (double)v253;
                            if (v270 * v271 * v269 >= (double)v253)
                              v272 = v270 * v271 * v269;
                            v253 = (unint64_t)v272;
                          }
                          ++v268;
                          v266 = v299[1];
                          v267 += 32;
                        }
                        while (v268 < (uint64_t)(*(_QWORD *)&size.width - (unint64_t)v299[1]) >> 5);
                      }
                    }
                    else
                    {
                      v266 = v299[1];
                    }
                    if (v266)
                    {
                      *(_QWORD *)&size.width = v266;
                      operator delete(v266);
                    }
                    v273 = (uint64_t *)v263[1];
                    v41 = a5;
                    v15 = (unint64_t)v296;
                    if (v273)
                    {
                      do
                      {
                        v274 = (uint64_t **)v273;
                        v273 = (uint64_t *)*v273;
                      }
                      while (v273);
                    }
                    else
                    {
                      do
                      {
                        v274 = (uint64_t **)v263[2];
                        v275 = *v274 == v263;
                        v263 = (uint64_t *)v274;
                      }
                      while (!v275);
                    }
                    v263 = (uint64_t *)v274;
                  }
                  while (v274 != &v305);
                }
              }
              else
              {
                v116 = v285;
              }
              std::__tree<std::__value_type<CI::Node *,CI::roiList>,std::__map_value_compare<CI::Node *,std::__value_type<CI::Node *,CI::roiList>,std::less<CI::Node *>,true>,std::allocator<std::__value_type<CI::Node *,CI::roiList>>>::destroy((uint64_t)&v304, v305);
              ++v254;
            }
            while (v254 != v308);
            v250 = v307;
            v171 = v277;
            v118 = v292;
            if (v307)
            {
LABEL_277:
              v308 = v250;
              operator delete(v250);
            }
          }
          if (v253 <= v281)
            break;
          v276 = (_QWORD *)CI::Node::rois((CI::Node *)v15);
          *(_DWORD *)(*v276 + 120 * (_QWORD)v111 + 80) *= 2;
          continue;
        }
      }
      break;
    }
    v280 = 0;
LABEL_171:
    v172 = v297;
    if (v171 > v297)
      v172 = v171;
    v297 = v172;
    v173 = (CI::SerialRectArray *)CI::Node::rois((CI::Node *)v15);
    *(_QWORD *)(*(_QWORD *)v173 + 120 * (_QWORD)v111 + 88) = v171;
    CI::SerialRectArray::updateParents(v173, (int)v111, v171);
    v174 = v278;
    if (v278 <= v171)
      v174 = v171;
    v288 = v174;
    v175 = (_QWORD *)CI::Node::rois((CI::Node *)v15);
    memset(&v303, 0, 24);
    v176 = *v175 + 120 * (_QWORD)v111;
    v177 = *(_DWORD *)(v176 + 80);
    v178 = *(CGSize *)(v176 + 16);
    *(_OWORD *)v299 = *(_OWORD *)v176;
    size = v178;
    CI::SerialRectArray::recurseSubdivide((double *)v299, v177, (void **)&v303);
    v179 = CI::nodePathLoad((CI *)v15, v111, v279);
    x = v303.origin.y;
    if (*(_QWORD *)&v303.origin.y != *(_QWORD *)&v303.origin.x)
    {
      v181 = 0;
      v182 = v179 + v116;
      v183 = (char *)v111 + 1;
      v184 = v111;
      do
      {
        v284 = v181 + 1;
        v282 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v15 + 40))(v15);
        if (v282 >= 1)
        {
          v185 = 0;
          do
          {
            v186 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, v185);
            v187 = (_DWORD *)v186;
            v188 = *v41;
            if (*v41 <= v182)
              v188 = v182;
            *v41 = v188;
            v189 = v280
                && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v186 + 16))(v186) == 52
                && v187[38] > 1;
            CI::ProgramNode::compute_regions_of_child((CI::ProgramNode *)v15, *(CGRect *)(*(_QWORD *)&v303.origin.x + 32 * v181), v185, (unint64_t)v295, 1, v189, (uint64_t *)&v307);
            v190 = v308;
            if (v308 != v307)
            {
              v191 = 0;
              v192 = 0;
              v193 = v308 - v307;
              do
              {
                if (v183 == (char *)v290)
                {
                  v194 = v192 + 1 == v193;
                  v195 = v284 == (uint64_t)(*(_QWORD *)&v303.origin.y - *(_QWORD *)&v303.origin.x) >> 5 && v194;
                }
                else
                {
                  v195 = 0;
                }
                v196 = (CI::SerialRectArray *)CI::Node::rois(v296);
                v197 = CI::SerialRectArray::maxParentDistance(v196);
                v299[0] = v296;
                v111 = v184;
                v299[1] = (CI *)__PAIR64__(v181, v184);
                *(_QWORD *)&size.width = __PAIR64__(v192, v185);
                *(_QWORD *)&size.height = v182;
                v301 = v288;
                v302 = v197 + 1;
                (*(void (**)(_DWORD *, unint64_t, CGRect *, CI **, CGFloat, CGFloat, CGFloat, CGFloat))(*(_QWORD *)v187 + 344))(v187, v293, v295, v299, v307[v191].origin.x, v307[v191].origin.y, v307[v191].size.width, v307[v191].size.height);
                v198 = v195;
                v41 = a5;
                v199 = CI::subdivide_program_rois(v292, v187, v291, v198, a5, v307[v191].origin.x);
                v200 = v297;
                if (v199 > v297)
                  v200 = v199;
                v297 = v200;
                ++v192;
                v190 = v307;
                v193 = v308 - v307;
                ++v191;
              }
              while (v193 > v192);
              v15 = (unint64_t)v296;
            }
            if (v190)
            {
              v308 = v190;
              operator delete(v190);
            }
            v185 = (v185 + 1);
          }
          while ((_DWORD)v185 != v282);
        }
        x = v303.origin.x;
        ++v181;
      }
      while (v284 < (uint64_t)(*(_QWORD *)&v303.origin.y - *(_QWORD *)&v303.origin.x) >> 5);
      v60 = v295;
    }
    if (x != 0.0)
    {
      v303.origin.y = x;
      operator delete(*(void **)&x);
    }
    v111 = (const CI::ProgramNode *)((char *)v111 + 1);
  }
  while (v111 != (const CI::ProgramNode *)v290);
  return v297;
}

void CI::recurseGraphStats(CI::Node *a1, unint64_t a2, int a3, unint64_t **a4, uint64_t a5)
{
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  BOOL v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  BOOL v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  BOOL v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  BOOL v53;
  unint64_t v54;
  unint64_t *v55;

  if (a1)
  {
    if (a2)
    {
      v10 = (unint64_t)a4[2];
      v11 = a4[1];
      if ((unint64_t)v11 >= v10)
      {
        v13 = v11 - *a4;
        if ((unint64_t)(v13 + 1) >> 61)
          abort();
        v14 = v10 - (_QWORD)*a4;
        v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)(a4 + 2), v16);
        else
          v17 = 0;
        v18 = &v17[8 * v13];
        v19 = &v17[8 * v16];
        *(_QWORD *)v18 = a2;
        v12 = (unint64_t *)(v18 + 8);
        v21 = *a4;
        v20 = (char *)a4[1];
        if (v20 != (char *)*a4)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v18 - 1) = v22;
            v18 -= 8;
          }
          while (v20 != (char *)v21);
          v20 = (char *)*a4;
        }
        *a4 = (unint64_t *)v18;
        a4[1] = v12;
        a4[2] = (unint64_t *)v19;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v11 = a2;
        v12 = v11 + 1;
      }
      a4[1] = v12;
    }
    v24 = (_QWORD *)(a5 + 8);
    v23 = *(_QWORD **)(a5 + 8);
    if (!v23)
      goto LABEL_31;
    v25 = (_QWORD *)(a5 + 8);
    do
    {
      v26 = v23[4];
      v27 = v26 >= (unint64_t)a1;
      if (v26 >= (unint64_t)a1)
        v28 = v23;
      else
        v28 = v23 + 1;
      if (v27)
        v25 = v23;
      v23 = (_QWORD *)*v28;
    }
    while (*v28);
    if (v25 == v24 || v25[4] > (unint64_t)a1)
LABEL_31:
      v25 = (_QWORD *)(a5 + 8);
    if (!v25[8])
    {
      CI::Node::clear_rois(a1);
      if ((*(int (**)(CI::Node *))(*(_QWORD *)a1 + 40))(a1) >= 1)
      {
        v29 = 0;
        v30 = (a3 + 1);
        do
        {
          v31 = (*(uint64_t (**)(CI::Node *, uint64_t))(*(_QWORD *)a1 + 48))(a1, v29);
          CI::recurseGraphStats(v31, a1, v30, a4, a5);
          v29 = (v29 + 1);
        }
        while ((int)v29 < (*(int (**)(CI::Node *))(*(_QWORD *)a1 + 40))(a1));
      }
    }
    if (a2)
    {
      if ((*(unsigned int (**)(CI::Node *))(*(_QWORD *)a1 + 40))(a1))
      {
        v32 = *((_DWORD *)v25 + 10);
        if (v32 >= 2)
        {
          v33 = *a4;
          v34 = a4[1];
          if (*a4 == v34)
          {
            v35 = 0;
          }
          else
          {
            v35 = 0;
            v36 = v25 + 7;
            do
            {
              v37 = *v33;
              v54 = *v33;
              v38 = (_QWORD *)*v36;
              if (!*v36)
                goto LABEL_52;
              v39 = v25 + 7;
              do
              {
                v40 = v38[4];
                v41 = v40 >= v37;
                if (v40 >= v37)
                  v42 = v38;
                else
                  v42 = v38 + 1;
                if (v41)
                  v39 = v38;
                v38 = (_QWORD *)*v42;
              }
              while (*v42);
              if (v39 != v36 && v37 >= v39[4])
              {
                ++*((_DWORD *)v39 + 10);
              }
              else
              {
LABEL_52:
                v55 = &v54;
                *((_DWORD *)std::__tree<std::__value_type<CI::ImageDigest,int>,std::__map_value_compare<CI::ImageDigest,std::__value_type<CI::ImageDigest,int>,std::less<CI::ImageDigest>,true>,std::allocator<std::__value_type<CI::ImageDigest,int>>>::__emplace_unique_key_args<CI::ImageDigest,std::piecewise_construct_t const&,std::tuple<CI::ImageDigest const&>,std::tuple<>>((uint64_t **)v25 + 6, &v54, (uint64_t)&std::piecewise_construct, &v55)+ 10) = 1;
              }
              v55 = &v54;
              if (v35 <= *((unsigned int *)std::__tree<std::__value_type<CI::ImageDigest,int>,std::__map_value_compare<CI::ImageDigest,std::__value_type<CI::ImageDigest,int>,std::less<CI::ImageDigest>,true>,std::allocator<std::__value_type<CI::ImageDigest,int>>>::__emplace_unique_key_args<CI::ImageDigest,std::piecewise_construct_t const&,std::tuple<CI::ImageDigest const&>,std::tuple<>>((uint64_t **)v25 + 6, &v54, (uint64_t)&std::piecewise_construct, &v55)+ 10))
              {
                v55 = &v54;
                v35 = *((unsigned int *)std::__tree<std::__value_type<CI::ImageDigest,int>,std::__map_value_compare<CI::ImageDigest,std::__value_type<CI::ImageDigest,int>,std::less<CI::ImageDigest>,true>,std::allocator<std::__value_type<CI::ImageDigest,int>>>::__emplace_unique_key_args<CI::ImageDigest,std::piecewise_construct_t const&,std::tuple<CI::ImageDigest const&>,std::tuple<>>((uint64_t **)v25 + 6, &v54, (uint64_t)&std::piecewise_construct, &v55)+ 10);
              }
              ++v33;
            }
            while (v33 != v34);
            v32 = *((_DWORD *)v25 + 10);
          }
          if (v35 == v32)
          {
            v43 = (_QWORD *)v25[6];
            v44 = v25 + 7;
            if (v43 != v25 + 7)
            {
              do
              {
                if (*((_DWORD *)v43 + 10) < v32)
                {
                  v45 = (_QWORD *)*v24;
                  if (!*v24)
                    goto LABEL_73;
                  v46 = v43[4];
                  v47 = v24;
                  do
                  {
                    v48 = v45[4];
                    v49 = v48 >= v46;
                    if (v48 >= v46)
                      v50 = v45;
                    else
                      v50 = v45 + 1;
                    if (v49)
                      v47 = v45;
                    v45 = (_QWORD *)*v50;
                  }
                  while (*v50);
                  if (v47 == v24 || v46 < v47[4])
LABEL_73:
                    v47 = v24;
                  *((_BYTE *)v47 + 44) = 0;
                }
                v51 = (_QWORD *)v43[1];
                if (v51)
                {
                  do
                  {
                    v52 = v51;
                    v51 = (_QWORD *)*v51;
                  }
                  while (v51);
                }
                else
                {
                  do
                  {
                    v52 = (_QWORD *)v43[2];
                    v53 = *v52 == (_QWORD)v43;
                    v43 = v52;
                  }
                  while (!v53);
                }
                v43 = v52;
              }
              while (v52 != v44);
            }
            std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)(v25 + 6), (_QWORD *)v25[7]);
            v25[7] = 0;
            v25[8] = 0;
            v25[6] = v44;
            *((_BYTE *)v25 + 44) = 0;
          }
        }
      }
      --a4[1];
    }
  }
}

unint64_t CI::programNodeMemoryLoad(CI *this, CGFloat *a2, const CGRect *a3, const CGRect *a4, unint64_t a5, int a6)
{
  double width;
  double height;
  double v8;
  double v9;
  unint64_t v10;
  int v16;
  unint64_t v17;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  uint64_t v27;
  int v28;
  CGRect *v29;
  uint64_t *v30;
  CI::roiList *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  size_t v40;
  int v41;
  int v42;
  uint64_t *v43;
  uint64_t *v44;
  BOOL v45;
  size_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54[2];
  CGRect v55;

  width = a3->size.width;
  height = a3->size.height;
  if (width <= height)
    v8 = a3->size.height;
  else
    v8 = a3->size.width;
  v9 = (double)(unint64_t)a4;
  if (v8 <= (double)(unint64_t)a4)
  {
    v16 = *((_DWORD *)this + 35);
    v17 = a5;
    if (v16)
    {
      v17 = (int)CI::format_bytes_per_pixel(v16);
      width = a3->size.width;
      height = a3->size.height;
    }
    v10 = (unint64_t)(width * height * (double)v17);
    v19 = (*(uint64_t (**)(CI *))(*(_QWORD *)this + 40))(this);
    v54[0] = 0;
    v54[1] = 0;
    v53 = (uint64_t *)v54;
    if (v19)
    {
      v20 = v19;
      v48 = v10;
      v47 = a5;
      v21 = 0;
      do
      {
        v52 = 0;
        v52 = (*(uint64_t (**)(CI *, uint64_t))(*(_QWORD *)this + 48))(this, v21);
        v49 = &v52;
        v22 = std::__tree<std::__value_type<CI::Node *,CI::roiList>,std::__map_value_compare<CI::Node *,std::__value_type<CI::Node *,CI::roiList>,std::less<CI::Node *>,true>,std::allocator<std::__value_type<CI::Node *,CI::roiList>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(&v53, (unint64_t *)&v52, (uint64_t)&std::piecewise_construct, &v49);
        v23 = *a2;
        v24 = a2[1];
        v26 = a2[2];
        v25 = a2[3];
        v28 = a6
           && (v27 = v52, (*(unsigned int (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52) == 52)
           && *(_DWORD *)(v27 + 152) > 1;
        v55.origin.x = v23;
        v55.origin.y = v24;
        v55.size.width = v26;
        v55.size.height = v25;
        CI::ProgramNode::compute_regions_of_child(this, v55, v21, (unint64_t)a4, 0, v28, (uint64_t *)&v49);
        v29 = (CGRect *)v49;
        v30 = v50;
        if (v49 != v50)
        {
          v31 = (CI::roiList *)(v22 + 5);
          do
            CI::roiList::_insertROI(v31, v29++);
          while (v29 != (CGRect *)v30);
          v29 = (CGRect *)v49;
        }
        if (v29)
        {
          v50 = (uint64_t *)v29;
          operator delete(v29);
        }
        v21 = (v21 + 1);
      }
      while ((_DWORD)v21 != v20);
      v32 = v53;
      if (v53 != (uint64_t *)v54)
      {
        v10 = v48;
        while (1)
        {
          v49 = (uint64_t *)v32[4];
          std::vector<CGRect>::vector(&v50, (uint64_t)(v32 + 5));
          v33 = v51;
          if (v51 != v50)
            break;
LABEL_39:
          if (v33)
          {
            v51 = v33;
            operator delete(v33);
          }
          v43 = (uint64_t *)v32[1];
          if (v43)
          {
            do
            {
              v44 = v43;
              v43 = (uint64_t *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              v44 = (uint64_t *)v32[2];
              v45 = *v44 == (_QWORD)v32;
              v32 = v44;
            }
            while (!v45);
          }
          v32 = v44;
          if (v44 == (uint64_t *)v54)
            goto LABEL_50;
        }
        v34 = 0;
        v35 = 0;
        v33 = v50;
        while (1)
        {
          v36 = *(double *)&v33[v34 + 2];
          v37 = *(double *)&v33[v34 + 3];
          if (v36 <= v37)
            v38 = *(double *)&v33[v34 + 3];
          else
            v38 = *(double *)&v33[v34 + 2];
          if (v38 > v9)
          {
            v51 = v33;
            operator delete(v33);
            v10 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_50;
          }
          if ((*(unsigned int (**)(uint64_t *))(*v49 + 16))(v49) != 46)
            break;
LABEL_38:
          ++v35;
          v33 = v50;
          v34 += 4;
          if (v35 >= ((char *)v51 - (char *)v50) >> 5)
            goto LABEL_39;
        }
        v39 = v36 * v37;
        if ((*(unsigned int (**)(uint64_t *))(*v49 + 16))(v49) == 29)
        {
          v40 = CGImageGetBitsPerPixel((CGImageRef)v49[13]) >> 3;
        }
        else
        {
          if ((*(unsigned int (**)(uint64_t *))(*v49 + 16))(v49) == 44)
          {
            v41 = *((_DWORD *)v49 + 12);
          }
          else
          {
            (*(void (**)(uint64_t *))(*v49 + 16))(v49);
            v42 = (*(uint64_t (**)(uint64_t *))(*v49 + 16))(v49);
            v40 = v47;
            if (v42 != 52)
              goto LABEL_37;
            v41 = *((_DWORD *)v49 + 35);
            v40 = v47;
            if (!v41)
              goto LABEL_37;
          }
          v40 = (int)CI::format_bytes_per_pixel(v41);
        }
LABEL_37:
        v10 = (unint64_t)((double)v10 + v39 * (double)v40);
        goto LABEL_38;
      }
      v10 = v48;
    }
LABEL_50:
    std::__tree<std::__value_type<CI::Node *,CI::roiList>,std::__map_value_compare<CI::Node *,std::__value_type<CI::Node *,CI::roiList>,std::less<CI::Node *>,true>,std::allocator<std::__value_type<CI::Node *,CI::roiList>>>::destroy((uint64_t)&v53, v54[0]);
    return v10;
  }
  return 0x7FFFFFFFFFFFFFFFLL;
}

unint64_t CI::nodePathLoad(CI *this, const CI::ProgramNode *a2, unint64_t a3)
{
  int v4;
  const CI::ProgramNode *v6;
  double v8;
  double v9;

  v4 = (int)a2;
  if (*(int *)(*(_QWORD *)CI::Node::rois(this) + 120 * (int)a2 + 80) < 2 || CI::isRootNode(this, v6))
    return 0;
  CI::Node::roi(this, v4);
  return (unint64_t)(v9 * v8 * (double)a3);
}

unint64_t CI::estimateProgramNodeMemoryLoad(CI *this, const CI::ProgramNode *a2, const CGRect *a3, unint64_t a4, int a5)
{
  unsigned int v8;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 *v14;
  __int128 *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v8 = a2;
  v10 = (_QWORD *)CI::Node::rois(this);
  v21 = 0;
  v22 = 0;
  v20 = 0;
  if ((v8 & 0x80000000) != 0)
    return 0;
  v11 = *v10 + 120 * v8;
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(_OWORD *)(v11 + 16);
  v23 = *(_OWORD *)v11;
  v24 = v13;
  CI::SerialRectArray::recurseSubdivide((double *)&v23, v12, (void **)&v20);
  v15 = v20;
  v14 = v21;
  if (v20 == v21)
  {
    v16 = 0;
    if (!v21)
      return v16;
LABEL_11:
    v21 = v14;
    operator delete(v14);
    return v16;
  }
  v16 = 0;
  do
  {
    v23 = *v15;
    v24 = v15[1];
    v17 = (_QWORD *)CI::Node::rois(this);
    v18 = CI::programNodeMemoryLoad(this, (CGFloat *)&v23, (const CGRect *)(*v17 + 120 * v8), a3, a4, a5);
    if (v16 <= v18)
      v16 = v18;
    v15 += 2;
  }
  while (v15 != v21);
  v14 = v20;
  if (v20)
    goto LABEL_11;
  return v16;
}

BOOL CI::isRootNode(CI *this, const CI::ProgramNode *a2)
{
  return !**(_QWORD **)(*(_QWORD *)CI::Node::rois(this) + 32) && CI::Node::rois_count(this) == 1;
}

uint64_t *std::__tree<std::__value_type<CI::Node *,CI::roiList>,std::__map_value_compare<CI::Node *,std::__value_type<CI::Node *,CI::roiList>,std::less<CI::Node *>,true>,std::allocator<std::__value_type<CI::Node *,CI::roiList>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,CI::SWFunction>,std::__map_value_compare<std::string,std::__value_type<std::string,CI::SWFunction>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CI::SWFunction>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void CI::roiList::_insertROI(CI::roiList *this, const CGRect *a2)
{
  char *v4;
  unint64_t v5;
  double width;
  double height;
  uint64_t v8;
  CGFloat x;
  CGFloat y;
  double *v11;
  unint64_t v12;
  unint64_t v13;
  CGSize v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  double *v21;
  uint64_t v22;
  CGSize *v23;
  char *v24;
  CGSize size;
  char *v26;
  char *v27;
  CGSize v28;
  CGRect v29;
  CGRect v30;

  v4 = (char *)*((_QWORD *)this + 1);
  if (v4 == *(char **)this)
  {
    v12 = *((_QWORD *)this + 1);
LABEL_7:
    v13 = *((_QWORD *)this + 2);
    if (v12 >= v13)
    {
      v16 = (uint64_t)(v12 - (_QWORD)v4) >> 5;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 59)
        abort();
      v18 = v13 - (_QWORD)v4;
      if (v18 >> 4 > v17)
        v17 = v18 >> 4;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
        v19 = 0x7FFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
        v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SoftwareDAGDescriptor::ArgumentInfo>>((uint64_t)this + 16, v19);
      else
        v20 = 0;
      v23 = (CGSize *)&v20[32 * v16];
      v24 = &v20[32 * v19];
      size = a2->size;
      *v23 = (CGSize)a2->origin;
      v23[1] = size;
      v15 = (char *)&v23[2];
      v27 = *(char **)this;
      v26 = (char *)*((_QWORD *)this + 1);
      if (v26 != *(char **)this)
      {
        do
        {
          v28 = (CGSize)*((_OWORD *)v26 - 1);
          v23[-2] = *((CGSize *)v26 - 2);
          v23[-1] = v28;
          v23 -= 2;
          v26 -= 32;
        }
        while (v26 != v27);
        v26 = *(char **)this;
      }
      *(_QWORD *)this = v23;
      *((_QWORD *)this + 1) = v15;
      *((_QWORD *)this + 2) = v24;
      if (v26)
        operator delete(v26);
    }
    else
    {
      v14 = a2->size;
      *(CGPoint *)v12 = a2->origin;
      *(CGSize *)(v12 + 16) = v14;
      v15 = (char *)(v12 + 32);
    }
    *((_QWORD *)this + 1) = v15;
  }
  else
  {
    v5 = 0;
    width = a2->size.width;
    height = a2->size.height;
    v8 = 32;
    v4 = *(char **)this;
    while (1)
    {
      x = a2->origin.x;
      y = a2->origin.y;
      v30 = CGRectUnion(*(CGRect *)(&width - 2), *(CGRect *)&v4[v8 - 32]);
      v29 = v30;
      v30.origin.x = v30.size.height * v30.size.width;
      width = a2->size.width;
      height = a2->size.height;
      v4 = *(char **)this;
      v11 = (double *)(*(_QWORD *)this + v8);
      if (v30.origin.x < (height * width + *(v11 - 1) * *(v11 - 2)) * 1.1)
        break;
      ++v5;
      v12 = *((_QWORD *)this + 1);
      v8 += 32;
      if (v5 >= (uint64_t)(v12 - (_QWORD)v4) >> 5)
        goto LABEL_7;
    }
    v21 = (double *)*((_QWORD *)this + 1);
    v22 = (char *)v21 - v4 - v8;
    if (v11 != v21)
      memmove(v11 - 4, v11, (char *)v21 - v4 - v8);
    *((_QWORD *)this + 1) = &v4[v8 - 32 + (v22 & 0xFFFFFFFFFFFFFFE0)];
    CI::roiList::_insertROI(this, &v29);
  }
}

void std::__tree<std::__value_type<CI::Node *,CI::roiList>,std::__map_value_compare<CI::Node *,std::__value_type<CI::Node *,CI::roiList>,std::less<CI::Node *>,true>,std::allocator<std::__value_type<CI::Node *,CI::roiList>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<CI::Node *,CI::roiList>,std::__map_value_compare<CI::Node *,std::__value_type<CI::Node *,CI::roiList>,std::less<CI::Node *>,true>,std::allocator<std::__value_type<CI::Node *,CI::roiList>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<CI::Node *,CI::roiList>,std::__map_value_compare<CI::Node *,std::__value_type<CI::Node *,CI::roiList>,std::less<CI::Node *>,true>,std::allocator<std::__value_type<CI::Node *,CI::roiList>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void CI::SerialRectArray::updateParents(CI::SerialRectArray *this, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  CI::Node *v7;
  int v8;
  CI::SerialRectArray *v9;
  int v10;

  v3 = *(_QWORD *)this + 120 * a2;
  v4 = *(_QWORD *)(v3 + 32);
  for (i = *(_QWORD *)(v3 + 40); v4 != i; v4 += 48)
  {
    v7 = *(CI::Node **)v4;
    if (*(_QWORD *)v4)
    {
      v8 = *(_DWORD *)(v4 + 8);
      v9 = (CI::SerialRectArray *)CI::Node::rois(*(CI::Node **)v4);
      v10 = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)v7 + 40))(v7);
      CI::SerialRectArray::updateSubGraphLoad(v9, v8, a3, v10);
    }
  }
}

void CI::SerialRectArray::updateSubGraphLoad(CI::SerialRectArray *this, int a2, uint64_t a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  char **v10;
  unint64_t v11;
  char *v12;
  char **v13;
  char *v14;
  void **v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v8 = *(_QWORD *)this + 120 * a2;
  v11 = *(_QWORD *)(v8 + 112);
  v10 = (char **)(v8 + 112);
  v9 = v11;
  v13 = v10 - 1;
  v12 = *(v10 - 1);
  if ((unint64_t)v12 >= v11)
  {
    v15 = (void **)(v10 - 2);
    v16 = *(v10 - 2);
    v17 = (v12 - v16) >> 3;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      abort();
    v19 = v9 - (_QWORD)v16;
    if (v19 >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)v10, v20);
      v12 = *v13;
      v16 = (char *)*v15;
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = a3;
    v14 = v22 + 8;
    while (v12 != v16)
    {
      v24 = *((_QWORD *)v12 - 1);
      v12 -= 8;
      *((_QWORD *)v22 - 1) = v24;
      v22 -= 8;
    }
    *v15 = v22;
    *v13 = v14;
    *v10 = v23;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_QWORD *)v12 = a3;
    v14 = v12 + 8;
  }
  *v13 = v14;
  v26 = *(unint64_t **)(*(_QWORD *)this + 120 * a2 + 96);
  v25 = *(unint64_t **)(*(_QWORD *)this + 120 * a2 + 104);
  if (a4 == v25 - v26)
  {
    v27 = *(_QWORD *)(*(_QWORD *)this + 120 * a2 + 88);
    if (v26 != v25)
    {
      v28 = 0;
      v29 = *(unint64_t **)(*(_QWORD *)this + 120 * a2 + 96);
      do
      {
        v31 = *v29++;
        v30 = v31;
        if (v28 <= v31)
          v28 = v30;
      }
      while (v29 != v25);
      if (v27 <= v28)
      {
        v27 = 0;
        do
        {
          v33 = *v26++;
          v32 = v33;
          if (v27 <= v33)
            v27 = v32;
        }
        while (v26 != v25);
      }
    }
    CI::SerialRectArray::updateParents(this, a2, v27);
  }
}

void CI::_traverse_program_graph(CI::Node *a1, uint64_t a2, char **a3, unint64_t *a4)
{
  unsigned int v6;
  char *i;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  _BYTE *v13;
  uint64_t v14;
  CI::Node *v15;
  uint64_t **v16;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD **v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  __int128 v39;
  int v40;
  unint64_t v41;
  _QWORD **v42;
  _QWORD *v43[2];
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  CI::Node *v54;
  uint64_t v55;

  v6 = a2;
  v54 = a1;
  v55 = a2;
  for (i = *a3; i != a3[1]; i += 24)
  {
    if (*(CI::Node **)i == a1 && *((_DWORD *)i + 2) == (_DWORD)a2)
      return;
  }
  v9 = (_QWORD *)CI::Node::rois(a1);
  v52 = 0;
  v53 = 0;
  v51 = 0;
  if ((v6 & 0x80000000) == 0)
  {
    v10 = *v9 + 120 * v6;
    v11 = *(_DWORD *)(v10 + 80);
    v12 = *(_OWORD *)(v10 + 16);
    v44 = *(_OWORD *)v10;
    v45 = v12;
    CI::SerialRectArray::recurseSubdivide((double *)&v44, v11, (void **)&v51);
    v13 = v51;
    if (v52 != v51)
    {
      v41 = 0;
      do
      {
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v40 = (*(uint64_t (**)(CI::Node *))(*(_QWORD *)a1 + 40))(a1);
        if (v40)
        {
          v14 = 0;
          do
          {
            *(_QWORD *)&v44 = a1;
            *((_QWORD *)&v44 + 1) = __PAIR64__(v41, v55);
            v45 = v14 | 0xFFFFFFFF00000000;
            v46 = 0;
            v47 = 0;
            v15 = (CI::Node *)(*(uint64_t (**)(CI::Node *, uint64_t))(*(_QWORD *)a1 + 48))(a1, v14);
            v16 = (uint64_t **)CI::Node::rois(v15);
            CI::SerialRectArray::findParentROI(v16, (uint64_t)&v44, (uint64_t)&__block_literal_global_174, (uint64_t)&v42);
            v17 = v42;
            if (v42 != v43)
            {
              do
              {
                v18 = (*(uint64_t (**)(CI::Node *, uint64_t))(*(_QWORD *)a1 + 48))(a1, v14);
                v19 = v18;
                v20 = *((unsigned int *)v17 + 7);
                v21 = v49;
                if (v49 >= v50)
                {
                  v23 = ((char *)v49 - (char *)v48) >> 4;
                  v24 = v23 + 1;
                  if ((unint64_t)(v23 + 1) >> 60)
                    abort();
                  v25 = (char *)v50 - (char *)v48;
                  if (v50 - v48 > v24)
                    v24 = v25 >> 3;
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
                    v26 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v26 = v24;
                  if (v26)
                    v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::Perspective::Line>>((uint64_t)&v50, v26);
                  else
                    v27 = 0;
                  v28 = (uint64_t *)&v27[16 * v23];
                  *v28 = v19;
                  v28[1] = v20;
                  v30 = v48;
                  v29 = v49;
                  v31 = v28;
                  if (v49 != v48)
                  {
                    do
                    {
                      *((_OWORD *)v31 - 1) = *((_OWORD *)v29 - 1);
                      v31 -= 2;
                      v29 -= 2;
                    }
                    while (v29 != v30);
                    v29 = v48;
                  }
                  v22 = v28 + 2;
                  v48 = v31;
                  v49 = v28 + 2;
                  v50 = (uint64_t *)&v27[16 * v26];
                  if (v29)
                    operator delete(v29);
                }
                else
                {
                  *v49 = v18;
                  v21[1] = v20;
                  v22 = v21 + 2;
                }
                v49 = v22;
                CI::_traverse_program_graph(v19, v20, a3, a4);
                v32 = v17[1];
                if (v32)
                {
                  do
                  {
                    v33 = (_QWORD **)v32;
                    v32 = (_QWORD *)*v32;
                  }
                  while (v32);
                }
                else
                {
                  do
                  {
                    v33 = (_QWORD **)v17[2];
                    v34 = *v33 == v17;
                    v17 = v33;
                  }
                  while (!v34);
                }
                v17 = v33;
              }
              while (v33 != v43);
            }
            std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&v42, v43[0]);
            v14 = (v14 + 1);
          }
          while ((_DWORD)v14 != v40);
        }
        CI::liveROIs::add_roi(a3, (uint64_t)&v54);
        v35 = *a4;
        if (v35 <= CI::liveROIs::currentMemory((CI::liveROIs *)a3))
          v36 = CI::liveROIs::currentMemory((CI::liveROIs *)a3);
        else
          v36 = *a4;
        *a4 = v36;
        v38 = v48;
        v37 = v49;
        if (v48 != v49)
        {
          do
          {
            v39 = *(_OWORD *)v38;
            v38 += 2;
            v44 = v39;
            CI::liveROIs::unref_roi(a3, (uint64_t)&v44);
          }
          while (v38 != v37);
          v38 = v48;
        }
        if (v38)
        {
          v49 = v38;
          operator delete(v38);
        }
        v13 = v51;
        ++v41;
      }
      while (v41 < (v52 - v51) >> 5);
    }
    if (v13)
    {
      v52 = v13;
      operator delete(v13);
    }
  }
}

void CI::liveROIs::add_roi(char **a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  CI::Node *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;

  v4 = (_QWORD *)CI::Node::rois(*(CI::Node **)a2);
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *v4 + 120 * v5;
  v8 = *(_QWORD *)(v6 + 32);
  v7 = *(_QWORD *)(v6 + 40);
  v9 = *a1;
  v10 = a1[1];
  if (*a1 == v10)
  {
    v12 = *a1;
  }
  else
  {
    v11 = *(CI::Node **)a2;
    v12 = *a1;
    while (*(CI::Node **)v12 != v11 || *((_DWORD *)v12 + 2) != v5)
    {
      v12 += 24;
      if (v12 == v10)
        goto LABEL_10;
    }
  }
  if (v12 == v10)
  {
    v11 = *(CI::Node **)a2;
LABEL_10:
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 4);
    v14 = a1[2];
    if (v10 >= v14)
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3);
      v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v18 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v9) >> 3);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v17;
      if (v19)
        v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 2), v19);
      else
        v20 = 0;
      v21 = &v20[24 * v16];
      v22 = &v20[24 * v19];
      *(_QWORD *)v21 = v11;
      *((_DWORD *)v21 + 2) = v5;
      *((_QWORD *)v21 + 2) = v13;
      v15 = v21 + 24;
      v24 = *a1;
      v23 = a1[1];
      if (v23 != *a1)
      {
        do
        {
          v25 = *(_OWORD *)(v23 - 24);
          *((_QWORD *)v21 - 1) = *((_QWORD *)v23 - 1);
          *(_OWORD *)(v21 - 24) = v25;
          v21 -= 24;
          v23 -= 24;
        }
        while (v23 != v24);
        v23 = *a1;
      }
      *a1 = v21;
      a1[1] = v15;
      a1[2] = v22;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *(_QWORD *)v10 = v11;
      *((_DWORD *)v10 + 2) = v5;
      v15 = v10 + 24;
      *((_QWORD *)v10 + 2) = v13;
    }
    a1[1] = v15;
  }
}

unint64_t CI::liveROIs::currentMemory(CI::liveROIs *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  CI::Node *v5;
  int v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  size_t v11;
  int v12;

  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v2)
  {
    v4 = 0;
    while (1)
    {
      v5 = *(CI::Node **)v1;
      v6 = *(_DWORD *)(v1 + 8);
      v7 = *(_QWORD *)CI::Node::rois(*(CI::Node **)v1) + 120 * v6;
      v8 = *(double *)(v7 + 16);
      v9 = *(double *)(v7 + 24);
      if ((*(unsigned int (**)(CI::Node *))(*(_QWORD *)v5 + 16))(v5) != 46)
      {
        v10 = v8 * v9;
        if ((*(unsigned int (**)(CI::Node *))(*(_QWORD *)v5 + 16))(v5) == 29)
        {
          v11 = CGImageGetBitsPerPixel(*((CGImageRef *)v5 + 13)) >> 3;
          goto LABEL_13;
        }
        if ((*(unsigned int (**)(CI::Node *))(*(_QWORD *)v5 + 16))(v5) == 44)
        {
          v12 = *((_DWORD *)v5 + 12);
          goto LABEL_8;
        }
        if ((*(unsigned int (**)(CI::Node *))(*(_QWORD *)v5 + 16))(v5) != 48)
        {
          if ((*(unsigned int (**)(CI::Node *))(*(_QWORD *)v5 + 16))(v5) != 52
            || (v12 = *((_DWORD *)v5 + 35)) == 0)
          {
            v11 = *((_QWORD *)this + 3);
            goto LABEL_13;
          }
LABEL_8:
          v11 = (int)CI::format_bytes_per_pixel(v12);
LABEL_13:
          v4 = (unint64_t)((double)v4 + v10 * (double)v11);
        }
      }
      v1 += 24;
      if (v1 == v2)
        return v4;
    }
  }
  return 0;
}

_QWORD *CI::liveROIs::unref_roi(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  v4 = *result;
  v3 = result[1];
  if (*result != v3)
  {
    while (*(_QWORD *)v4 != *(_QWORD *)a2 || *(_DWORD *)(v4 + 8) != *(_DWORD *)(a2 + 8))
    {
      v4 += 24;
      if (v4 == v3)
      {
        v4 = result[1];
        break;
      }
    }
  }
  v5 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v5;
  if (!v5)
  {
    v6 = v3 - (v4 + 24);
    if (v3 != v4 + 24)
      result = memmove((void *)v4, (const void *)(v4 + 24), v3 - (v4 + 24));
    v2[1] = v4 + v6;
  }
  return result;
}

void CI::NodeToNodeMap::~NodeToNodeMap(CI::NodeToNodeMap *this)
{
  CI::NodeToNodeMap::~NodeToNodeMap(this);
  JUMPOUT(0x194025AACLL);
}

{
  char *v2;
  char *v3;
  char *v4;
  CI::Object *v5;
  CI::Object *v6;
  char *v7;
  char *v8;
  BOOL v9;

  *(_QWORD *)this = &off_1E2EBA068;
  v2 = (char *)this + 16;
  v3 = (char *)this + 8;
  v4 = (char *)*((_QWORD *)this + 1);
  if (v4 != (char *)this + 16)
  {
    do
    {
      v5 = (CI::Object *)*((_QWORD *)v4 + 4);
      if (v5)
        CI::Object::unref(v5);
      v6 = (CI::Object *)*((_QWORD *)v4 + 5);
      if (v6)
        CI::Object::unref(v6);
      v7 = (char *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != v2);
  }
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)v3, *((_QWORD **)this + 2));
}

uint64_t ___ZN2CIL22dump_program_graph_preEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke(uint64_t a1, FILE *__stream)
{
  int v4;
  const char *v5;
  const char *v6;
  const char *v7;
  int v8;
  uint64_t v9;
  const char *v10;
  int v11;
  const char *v12;
  const void *v13;
  int v14;
  uint64_t v15;
  const char *v16;
  __sFILE *v17;
  char *v18;
  const char *v19;
  const char *v20;

  if (*(_QWORD *)(a1 + 32))
    fprintf(__stream, "[%s] ", *(const char **)(a1 + 40));
  fwrite("program graph ", 0xEuLL, 1uLL, __stream);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 344))
    fwrite("prepare ", 8uLL, 1uLL, __stream);
  fprintf(__stream, "%s ", *(const char **)(a1 + 56));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 264))(*(_QWORD *)(a1 + 48));
  v5 = "highp ";
  if (v4 != 1)
    v5 = "";
  if (v4 == -1)
    v6 = "lowp ";
  else
    v6 = v5;
  v7 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 304))(*(_QWORD *)(a1 + 48));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 272))(*(_QWORD *)(a1 + 48));
  v9 = *(_QWORD *)(a1 + 48);
  v11 = *(unsigned __int8 *)(v9 + 236);
  v10 = (const char *)(v9 + 236);
  if (v11)
    v12 = ":";
  else
    v12 = "";
  fprintf(__stream, "(%s%s context %d%s%s frame %lu tile %lu) ", v6, v7, v8, v12, v10, *(_QWORD *)(v10 - 84), *(_QWORD *)(v10 - 44));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48)) == 77)
  {
    v13 = (const void *)CI::MetalContext::queue(*(CI::MetalContext **)(a1 + 48));
    fprintf(__stream, "commandQueue=%p ", v13);
  }
  v14 = *(_DWORD *)(a1 + 88);
  if (!v14)
  {
    v15 = *(_QWORD *)(a1 + 64);
    if (v15)
      v14 = *(_DWORD *)(v15 + 32);
    else
      v14 = 0;
  }
  v16 = CI::name_for_format(v14);
  fprintf(__stream, "format=%s roi=", v16);
  CI::fprintf(__stream, v17, *(CGRect *)*(_QWORD *)(a1 + 72));
  fwrite(" = \n", 4uLL, 1uLL, __stream);
  v18 = CI_TEMP_DIR();
  v19 = *(const char **)(a1 + 80);
  v20 = (const char *)CI_PRINT_TREE_graphviz();
  fprintf(__stream, "  %s/%s.%s\n", v18, v19, v20);
  return fputc(10, __stream);
}

uint64_t ___ZN2CIL19print_program_graphEPNS_7ContextEPKNS_17RenderDestinationEdPKNS_8TileTaskEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke(uint64_t a1, FILE *__stream)
{
  uint64_t v4;
  const __CFString *v5;
  const __CFString *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  const char *v14;
  const char *v15;
  int v16;
  uint64_t v17;
  const char *v18;
  int v19;
  const char *v20;
  const void *v21;
  int v22;
  uint64_t v23;
  const char *v24;
  __sFILE *v25;
  CI::TileTask *v26;
  unint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  unint64_t SurfaceCachePeakNonVolatileSize;
  double v32;
  uint64_t v33;
  _OWORD v35[2];
  int v36;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = *(const __CFString **)(v4 + 16);
    if (v5)
    {
      fputc(91, __stream);
      CI::fprintf(__stream, v5, v6);
      fwrite("] ", 2uLL, 1uLL, __stream);
    }
  }
  fwrite("program graph ", 0xEuLL, 1uLL, __stream);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 344))
    fwrite("prepare ", 8uLL, 1uLL, __stream);
  fprintf(__stream, "%s ", *(const char **)(a1 + 48));
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7))
    {
      v8 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
      fprintf(__stream, "%p ", v8);
    }
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32));
      fprintf(__stream, "%ldx%ld ", v10, v11);
    }
  }
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 264))(*(_QWORD *)(a1 + 40));
  v13 = "highp ";
  if (v12 != 1)
    v13 = "";
  if (v12 == -1)
    v14 = "lowp ";
  else
    v14 = v13;
  v15 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 304))(*(_QWORD *)(a1 + 40));
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 272))(*(_QWORD *)(a1 + 40));
  v17 = *(_QWORD *)(a1 + 40);
  v19 = *(unsigned __int8 *)(v17 + 236);
  v18 = (const char *)(v17 + 236);
  if (v19)
    v20 = ":";
  else
    v20 = "";
  fprintf(__stream, "(%s%s context %d%s%s frame %lu tile %lu) ", v14, v15, v16, v20, v18, *(_QWORD *)(v18 - 84), *(_QWORD *)(v18 - 44));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40)) == 77)
  {
    v21 = (const void *)CI::MetalContext::queue(*(CI::MetalContext **)(a1 + 40));
    fprintf(__stream, "commandQueue=%p ", v21);
  }
  v22 = *(_DWORD *)(a1 + 88);
  if (!v22)
  {
    v23 = *(_QWORD *)(a1 + 32);
    if (v23)
      v22 = *(_DWORD *)(v23 + 32);
    else
      v22 = 0;
  }
  v24 = CI::name_for_format(v22);
  fprintf(__stream, "format=%s roi=", v24);
  CI::fprintf(__stream, v25, *(CGRect *)*(_QWORD *)(a1 + 56));
  v26 = *(CI::TileTask **)(a1 + 64);
  if (v26)
  {
    v27 = CI::TileTask::executionNanoSec(v26);
    v28 = CI::TileTask::executionCycles(*(CI::TileTask **)(a1 + 64));
    v29 = CI::TileTask::compileTime(*(CI::TileTask **)(a1 + 64));
    v30 = CI::TileTask::compileWaitTime(*(CI::TileTask **)(a1 + 64));
    fprintf(__stream, " frameTime=%dms", (int)(*(double *)(a1 + 72) * 1000.0 + 0.5));
    SurfaceCachePeakNonVolatileSize = GetSurfaceCachePeakNonVolatileSize();
    fprintf(__stream, " peakNonVolatile=%ldMB", SurfaceCachePeakNonVolatileSize >> 20);
    if (v27)
      v32 = (double)v27 / 1000000.0 + 0.5;
    else
      v32 = CI::TileTask::executionTime(*(CI::TileTask **)(a1 + 64)) * 1000.0 + 0.5;
    fprintf(__stream, " kernelExecutionTime=%dms", v32);
    fprintf(__stream, " kernelCompileTime= %.1f", v29 * 1000.0);
    fprintf(__stream, " compileWaitTime= %.1f", v30 * 1000.0);
    if (v28)
      fprintf(__stream, " kernelCycles=%d", v28);
    fwrite(" = \n", 4uLL, 1uLL, __stream);
    CI::Node::print_graph(*(_QWORD *)(a1 + 80), __stream, *(_QWORD *)(a1 + 64) + 88);
  }
  else
  {
    fwrite(" = \n", 4uLL, 1uLL, __stream);
    v33 = *(_QWORD *)(a1 + 80);
    memset(v35, 0, sizeof(v35));
    v36 = 1065353216;
    CI::Node::print_graph(v33, __stream, (uint64_t)v35);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v35);
  }
  return fputc(10, __stream);
}

uint64_t ___ZN2CIL23dump_program_graph_postEPNS_10RenderTaskE_block_invoke(uint64_t a1, FILE *a2)
{
  uint64_t v4;
  const __CFString *v5;
  pid_t v6;
  const char *v7;
  int v8;
  const char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  int v15;
  const char *v16;
  const char *v17;
  __sFILE *v18;
  char *v19;
  const char *v20;
  CI::RenderTask *v21;
  char __str[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char buffer[16];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(const __CFString **)(v4 + 96);
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  *(_OWORD *)buffer = 0u;
  v40 = 0u;
  if (v5)
    CFStringGetCString(v5, buffer, 256, 0x8000100u);
  else
    strlcpy(buffer, (const char *)(*(_QWORD *)(v4 + 24) + 236), 0x100uLL);
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  *(_OWORD *)__str = 0u;
  v24 = 0u;
  v6 = getpid();
  if (buffer[0])
    v7 = "_";
  else
    v7 = "";
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 24) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  snprintf(__str, 0x100uLL, "%d%s%s_%d_%lu_program_graph", v6, v7, buffer, v8, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
  if (v5)
    fprintf(a2, "[%s] ", buffer);
  fprintf(a2, "program graph file %s ", *(const char **)(*(_QWORD *)(a1 + 32) + 16));
  v9 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 24) + 304))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 24) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  v11 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(v11 + 24);
  v12 = *(_QWORD *)(v11 + 32);
  v15 = *(unsigned __int8 *)(v13 + 236);
  v14 = (const char *)(v13 + 236);
  if (v15)
    v16 = ":";
  else
    v16 = "";
  fprintf(a2, "(%s%s context %d%s%s frame %lu) ", "", v9, v10, v16, v14, v12);
  v17 = CI::name_for_format(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 80));
  fprintf(a2, "format=%s roi=", v17);
  CI::fprintf(a2, v18, *(CGRect *)(*(_QWORD *)(a1 + 32) + 48));
  fwrite(" = \n", 4uLL, 1uLL, a2);
  v19 = CI_TEMP_DIR();
  v20 = (const char *)CI_PRINT_TREE_graphviz();
  fprintf(a2, "  %s/%s.%s\n", v19, __str, v20);
  v21 = *(CI::RenderTask **)(a1 + 32);
  if (CI::format_for_graphviz(void)::onceToken != -1)
    dispatch_once(&CI::format_for_graphviz(void)::onceToken, &__block_literal_global_78_0);
  CI::RenderTask::dump_for_graphviz(v21, __str, CI::format_for_graphviz(void)::fmt);
  return fputc(10, a2);
}

uint64_t ___ZN2CI11ObjectCacheINS_4NodeEyLb0EE4findEy_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = a1[5];
  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}*>>::find<unsigned long long>((_QWORD *)(v2 + 16), a1 + 6);
  if (result)
  {
    v4 = *(_QWORD *)(v2 + 8) + 1;
    *(_QWORD *)(v2 + 8) = v4;
    *(_QWORD *)(result + 32) = v4;
    result = *(_QWORD *)(result + 24);
    if (result)
      result = CI::Object::ref(result);
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  }
  return result;
}

void ___ZN2CI11ObjectCacheINS_4NodeEyLb0EE6insertEyPS1_j_block_invoke(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  CI::Object *v5;
  CI::Object *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = (_QWORD *)a1[4];
  ++v2[1];
  v3 = a1 + 5;
  v4 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}*>>::find<unsigned long long>(v2 + 2, a1 + 5);
  if (v4)
  {
    v4[4] = v2[1];
    v5 = (CI::Object *)a1[6];
    if (v5)
      CI::Object::unref(v5);
  }
  else
  {
    if (v2[5] == *v2)
      CI::ObjectCache<CI::Node,unsigned long long,false>::evict((uint64_t)v2);
    *(_QWORD *)&v7 = a1 + 6;
    *((_QWORD *)&v7 + 1) = v2 + 1;
    v8 = a1 + 7;
    v9 = v3;
    std::__hash_table<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>>>::__emplace_unique_impl<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<CI::Node* const&,unsigned long long &,unsigned int const&>>(v2 + 2, (uint64_t)&std::piecewise_construct, &v9, &v7);
    v6 = (CI::Object *)a1[6];
    if (v6)
      CI::Object::unref(v6);
  }
}

void CI::ObjectCache<CI::Node,unsigned long long,false>::evict(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _BYTE v3[24];

  v1 = *(_QWORD **)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD **)(a1 + 32);
    do
    {
      if (v2[4] < v1[4])
        v1 = v2;
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  std::__hash_table<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::__unordered_map_hasher<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::hash<CI::ProgramDigest>,std::equal_to<CI::ProgramDigest>,true>,std::__unordered_map_equal<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::equal_to<CI::ProgramDigest>,std::hash<CI::ProgramDigest>,true>,std::allocator<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>>>::remove((_QWORD *)(a1 + 16), v1, (uint64_t)v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,void *>>>>::reset[abi:nn180100]((uint64_t)v3, 0);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      CI::ObjectCache<CI::Node,unsigned long long,false>::Entry::~Entry((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>>>::__emplace_unique_impl<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<CI::Node* const&,unsigned long long &,unsigned int const&>>(_QWORD *a1, uint64_t a2, _QWORD **a3, __int128 *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *inserted;
  char v11;
  _QWORD v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;

  v7 = a1 + 2;
  v8 = operator new(0x30uLL);
  v13[0] = v8;
  v13[1] = v7;
  *v8 = 0;
  v8[1] = 0;
  v9 = *a3;
  v15 = *a4;
  v16 = *((_QWORD *)a4 + 2);
  std::pair<CI::ProgramDigest const,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>::pair[abi:nn180100]<CI::ProgramDigest const&,CI::MainProgram* const&,unsigned long long &,unsigned int const&>((uint64_t)(v8 + 2), v9, (uint64_t)&v15);
  v14 = 1;
  v8[1] = v8[2];
  inserted = std::__hash_table<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::__unordered_map_hasher<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::hash<CI::ProgramDigest>,std::equal_to<CI::ProgramDigest>,true>,std::__unordered_map_equal<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::equal_to<CI::ProgramDigest>,std::hash<CI::ProgramDigest>,true>,std::allocator<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>>>::__node_insert_unique(a1, v8);
  if ((v11 & 1) != 0)
    v13[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,void *>>>>::reset[abi:nn180100]((uint64_t)v13, 0);
  return inserted;
}

uint64_t *std::map<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,std::__tree_node<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,void *> *,long>>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,std::__map_value_compare<CI::ImageIndex,std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,std::less<CI::ImageIndex>,true>,std::allocator<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>>>::__emplace_hint_unique_key_args<CI::ImageIndex,std::pair<CI::ImageIndex const,CI::ImageDigestForRenderGraphCache> const&>(v5, v6, v4 + 8, (_OWORD *)v4 + 2);
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,std::__map_value_compare<CI::ImageIndex,std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,std::less<CI::ImageIndex>,true>,std::allocator<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>>>::__emplace_hint_unique_key_args<CI::ImageIndex,std::pair<CI::ImageIndex const,CI::ImageDigestForRenderGraphCache> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,std::__map_value_compare<CI::ImageIndex,std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,std::less<CI::ImageIndex>,true>,std::allocator<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>>>::__find_equal<CI::ImageIndex>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<std::string,CI::SWFunction>,std::__map_value_compare<std::string,std::__value_type<std::string,CI::SWFunction>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CI::SWFunction>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,std::__map_value_compare<CI::ImageIndex,std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,std::less<CI::ImageIndex>,true>,std::allocator<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>>>::__find_equal<CI::ImageIndex>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *CI::ShaderBuilder::ShaderBuilder(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  CI::FoslAdapter::FoslAdapter(a1 + 3);
  a1[36] = 0;
  x_stream_init(a1 + 37);
  return a1;
}

void CI::ShaderBuilder::~ShaderBuilder(CI::ShaderBuilder *this)
{
  x_stream_free((uint64_t)this + 296);
  CI::FoslAdapter::~FoslAdapter((CI::ShaderBuilder *)((char *)this + 24));
}

void CI::ShaderBuilder::convert_tree(CI::ShaderBuilder *this, size_t a2, int a3)
{
  void *v6;

  v6 = malloc_type_calloc(0x400uLL, 1uLL, 0xCBC4C74EuLL);
  memset(v6, 48, a2);
  *((_QWORD *)this + 36) = CI::FoslAdapter::convertTree((CI::ShaderBuilder *)((char *)this + 24), *((CI::Node **)this + 1), (char *)v6, a2, a3);
  free(v6);
}

void CI::ShaderBuilder::prepare_tree_and_arguments(CI::ShaderBuilder *this, size_t a2)
{
  CI::ShaderBuilder::convert_tree(this, a2, 3);
}

void CI::ShaderBuilder::prepare_arguments_only(CI::ShaderBuilder *this, size_t a2)
{
  CI::ShaderBuilder::convert_tree(this, a2, 1);
}

char *CI::ShaderBuilder::construct_shader(CI::ShaderBuilder *this, const char *a2)
{
  NSObject *v4;
  os_signpost_id_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  size_t v13;
  char *v14;
  int64_t size;
  std::string *v16;
  char *v17;
  std::string *v18;
  char *v19;
  char *v20;
  std::string::size_type v21;
  std::string *p_p;
  std::string::size_type v23;
  const char *v24;
  const char *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  void (***v32)(CI::ColorKernel *__hidden);
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char **v49;
  std::string::size_type v50;
  _QWORD *v51;
  std::string::size_type v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  std::string::size_type v63;
  char *v64;
  std::string::size_type v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  std::string::size_type v73;
  char *v74;
  std::string::size_type v75;
  uint64_t v76;
  std::string::size_type v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  std::string::size_type v83;
  char *v84;
  std::string::size_type v85;
  uint64_t v86;
  char *v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  const char **v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  const char **v103;
  char *v104;
  char *v105;
  char *v106;
  const char *v107;
  const char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  std::string::size_type v120;
  char *v121;
  std::string::size_type v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  std::string::size_type v130;
  char *v131;
  std::string::size_type v132;
  uint64_t v133;
  std::string::size_type v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  std::string::size_type v140;
  char *v141;
  std::string::size_type v142;
  uint64_t v143;
  char *v144;
  _QWORD *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  const char **v159;
  char *v160;
  char *v161;
  char *v162;
  const char *v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  const void *v171;
  int64_t v172;
  char *v173;
  char *appended;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  size_t v199;
  char *v200;
  char *v201;
  char *v202;
  void *v203;
  int64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  size_t v227;
  char *v228;
  NSObject *v229;
  os_signpost_id_t v230;
  NSObject *v231;
  std::string *v233;
  char *v234;
  std::string::size_type v235;
  std::string::size_type v236;
  int64_t v237;
  char *v238;
  char *v239;
  int64_t v240;
  int v241;
  int64_t v242;
  char *v243;
  char *v244;
  char *v245;
  int64_t v246;
  std::string *v247;
  std::string::size_type v248;
  char *v249;
  char *v250;
  std::string::size_type v251;
  uint64_t v252;
  char *v253;
  _BYTE *v254;
  size_t v255;
  _BYTE *v256;
  unsigned int v257;
  unsigned int v258;
  std::string *v259;
  std::string::size_type v260;
  std::string *v261;
  std::string::size_type v262;
  std::string *v263;
  std::string::size_type v264;
  std::string *v265;
  std::string::size_type v266;
  std::string *v267;
  void *v268;
  unsigned __int8 v269;
  int64_t v270;
  std::string *v271;
  char *v272;
  int64_t v273;
  char *v274;
  char *v275;
  std::string::size_type v276;
  int v277;
  int64_t v278;
  std::string *v279;
  int64_t v280;
  char *v281;
  int v282;
  std::string *v283;
  int64_t v284;
  char *v285;
  std::string *v286;
  std::string::size_type v287;
  std::string *v288;
  std::string::size_type v289;
  std::string *v290;
  std::string::size_type v291;
  std::string *v292;
  std::string::size_type v293;
  std::string *v294;
  void *v295;
  unsigned __int8 v296;
  int64_t v297;
  std::string *v298;
  char *v299;
  int64_t v300;
  char *v301;
  char *v302;
  std::string::size_type v303;
  std::string *v304;
  std::string::size_type v305;
  std::string *v306;
  std::string::size_type v307;
  std::string *v308;
  std::string::size_type v309;
  int v310;
  std::string *v311;
  int64_t v312;
  std::string *v313;
  std::string::size_type v314;
  char *v315;
  char *v316;
  std::string::size_type v317;
  uint64_t v318;
  char *v319;
  _BYTE *v320;
  int64_t v321;
  _BYTE *v322;
  unsigned int v323;
  std::string *v324;
  std::string::size_type v325;
  std::string::size_type v326;
  std::string::size_type v327;
  std::string::size_type v328;
  std::string *v329;
  BOOL v330;
  std::string::size_type v331;
  std::string *v332;
  int64_t v333;
  char *v334;
  char *v335;
  int64_t v336;
  int v337;
  int64_t v338;
  char *v339;
  char *v340;
  std::string::size_type v341;
  std::string *v342;
  std::string::size_type v343;
  std::string *v344;
  std::string::size_type v345;
  std::string *v346;
  std::string::size_type v347;
  char *v348;
  std::string *v349;
  std::string::size_type v350;
  int64_t v351;
  int64_t v352;
  std::string *v353;
  std::string *v354;
  int64_t v355;
  char *v356;
  char *v357;
  std::string::size_type v358;
  std::string *v359;
  std::string::size_type v360;
  std::string::size_type v361;
  std::string::size_type v362;
  std::string::size_type v363;
  std::string *v364;
  BOOL v365;
  std::string::size_type v366;
  std::string *v367;
  int64_t v368;
  char *v369;
  char *v370;
  int64_t v371;
  int v372;
  int64_t v373;
  char *v374;
  char *v375;
  std::string::size_type v376;
  std::string *v377;
  std::string::size_type v378;
  std::string *v379;
  std::string::size_type v380;
  std::string *v381;
  std::string::size_type v382;
  char *v383;
  int v384;
  int64_t v385;
  std::string *v386;
  int64_t v387;
  char *v388;
  int v389;
  std::string *v390;
  int64_t v391;
  char *v392;
  std::string *v393;
  size_t v394;
  int v395;
  std::string *v396;
  int64_t v397;
  char *v398;
  char **v399;
  int v400;
  int v401;
  const char *v402;
  std::string v403;
  std::string v404;
  std::string v405;
  std::string __str;
  void *v407;
  _BYTE v408[15];
  unsigned __int8 v409;
  void *v410;
  void *v411;
  uint64_t v412;
  void *v413;
  void *__dst;
  uint64_t v415;
  void *v416;
  char *v417;
  unint64_t v418;
  std::string __p;
  std::string v420;
  uint8_t buf[8];
  os_signpost_id_t v422;
  std::string v423;
  std::string v424;
  uint64_t v425;

  v425 = *MEMORY[0x1E0C80C00];
  if (CI_VERBOSE_SIGNPOSTS())
  {
    v4 = ci_signpost_log_render();
    v5 = *(int *)(*((_QWORD *)this + 2) + 36) | (unint64_t)((*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 272))(*(_QWORD *)this) << 32);
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v5, "construct_shader", (const char *)&unk_192520C83, buf, 2u);
    }
  }
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 272))(*(_QWORD *)this);
  TimerBase::TimerBase((uint64_t)buf, v6, *(_DWORD *)(*((_QWORD *)this + 2) + 36), (uint64_t)"construct_shader", 4);
  v7 = (char **)((char *)this + 296);
  x_stream_grow((char **)this + 37, 0x1000uLL);
  if (*(_BYTE *)(*((_QWORD *)this + 2) + 137))
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) == 74)
    {
      v8 = "static constant float4 _ci_constants = (float4)(1.0,0.0,1.0/257.0,256.0/257.0);\n";
      v9 = (char *)this + 296;
      v10 = 80;
    }
    else if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) == 76)
    {
      v8 = "const lowp vec4 _ci_constants = vec4(1.0,0.0,1.0/257.0,256.0/257.0);\n";
      v9 = (char *)this + 296;
      v10 = 69;
    }
    else
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) != 77)
        goto LABEL_13;
      v8 = "static constant metal::float4 _ci_constants = metal::float4(1.0,0.0,1.0/257.0,256.0/257.0);\n";
      v9 = (char *)this + 296;
      v10 = 92;
    }
    x_stream_write((uint64_t)v9, v8, v10);
  }
LABEL_13:
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) == 74)
  {
    x_stream_write((uint64_t)this + 296, "#define writeImage(c, p, _dc) write_imagef(_outputTexture, (int2)p, c)\n", 0x47uLL);
    x_stream_write((uint64_t)this + 296, "#define writeImagePlane(c, p, _dc) write_imagef(_outputTexturePlane, (int2)p, c)\n", 0x51uLL);
    x_stream_write((uint64_t)this + 296, "#define writePixel(r, g, b, a, p, _dc) write_imagei(_outputTexture, (int2)p, (int4)(r,g,b,a))\n", 0x5EuLL);
    v11 = "#define writeCoord(_dc) (float2)_writeLoc\n\n";
    v12 = (char *)this + 296;
    v13 = 43;
LABEL_19:
    x_stream_write((uint64_t)v12, v11, v13);
    goto LABEL_20;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) == 76)
  {
    x_stream_write((uint64_t)this + 296, "#define writeImage(c, p) gl_FragData[0] = c\n", 0x2CuLL);
    x_stream_write((uint64_t)this + 296, "#define writeImagePlane(c, p) gl_FragData[1] = c\n", 0x31uLL);
    x_stream_write((uint64_t)this + 296, "#define writePixel(r, g, b, a, p) \n", 0x23uLL);
    v11 = "#define writeCoord() p0\n\n";
    v12 = (char *)this + 296;
    v13 = 25;
    goto LABEL_19;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) == 77)
  {
    x_stream_write((uint64_t)this + 296, "#define writeImage(c, p, _dc) _outputTexture.write(c, static_cast<uint2>(p))\n", 0x4DuLL);
    x_stream_write((uint64_t)this + 296, "#define writeImageWidth(_dc) (int)_outputTexture.get_width()\n", 0x3DuLL);
    x_stream_write((uint64_t)this + 296, "#define writeImageHeight(_dc) (int)_outputTexture.get_height()\n", 0x3FuLL);
    x_stream_write((uint64_t)this + 296, "#define writeImagePlane(c, p, _dc) _outputTexturePlane.write(c, static_cast<uint2>(p))\n", 0x57uLL);
    x_stream_write((uint64_t)this + 296, "#define writePixel(r, g, b, a, p, _dc) _outputTexture.write(float4(r,g,b,a) / 255.0, static_cast<uint2>(p))\n", 0x6CuLL);
    x_stream_write((uint64_t)this + 296, "#define writeCoord(_dc) static_cast<float2>(_wc)\n\n", 0x32uLL);
    x_stream_write((uint64_t)this + 296, "#define _ci_simd_shuffle_down(c, p, _dc) simd_shuffle_down(c, p)\n", 0x41uLL);
    v11 = "#define _ci_simdgroup_barrier(f) simdgroup_barrier(mem_flags::mem_threadgroup)\n";
    v12 = (char *)this + 296;
    v13 = 79;
    goto LABEL_19;
  }
LABEL_20:
  CI::FoslAdapter::addLibraryFunctions((CI::ShaderBuilder *)((char *)this + 24), aCopyright2022A);
  (*(void (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  v14 = (char *)CI::FoslAdapter::constructShader((CI::ShaderBuilder *)((char *)this + 24), a2, *((_QWORD *)this + 36));
  std::string::basic_string[abi:nn180100]<0>(&v420, v14);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) == 77
    && (int)fosl_filter_interface_version() <= 0)
  {
    size = HIBYTE(v420.__r_.__value_.__r.__words[2]);
    if ((v420.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v16 = &v420;
    }
    else
    {
      size = v420.__r_.__value_.__l.__size_;
      v16 = (std::string *)v420.__r_.__value_.__r.__words[0];
    }
    if (size >= 81)
    {
      v17 = (char *)v16 + size;
      v18 = v16;
      do
      {
        v19 = (char *)memchr(v18, 103, size - 80);
        if (!v19)
          break;
        v20 = v19;
        if (!memcmp(v19, "gid += static_cast<uint2>(params.outputRect.xy * step(params.outputRect.w, 0.0));", 0x51uLL))
        {
          if (v20 == v17)
            break;
          v21 = v20 - (char *)v16;
          v30 = v20 - (char *)v16 == -1;
          v7 = (char **)((char *)this + 296);
          if (!v30)
          {
            std::string::basic_string[abi:nn180100]<0>(&__p, "gid.y += lessThan(params.outputRect.w, 0) * ((-params.outputRect.w-1)-2*gid.y);\n"
              "  gid += static_cast<uint2>(params.outputRect.xy);");
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v23 = __p.__r_.__value_.__l.__size_;
            std::string::replace(&v420, v21, 0x51uLL, (const std::string::value_type *)p_p, v23);
            if ((v420.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v14 = (char *)&v420;
            else
              v14 = (char *)v420.__r_.__value_.__r.__words[0];
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            break;
          }
          goto LABEL_45;
        }
        v18 = (std::string *)(v20 + 1);
        size = v17 - (v20 + 1);
      }
      while (size >= 81);
    }
    v7 = (char **)((char *)this + 296);
  }
LABEL_45:
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) == 74)
  {
    v24 = "write_only image2d_t out";
  }
  else if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) == 77)
  {
    v24 = "texture2d<float, access::write> outputTexture";
  }
  else
  {
    v24 = 0;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) == 74)
  {
    v25 = "write_imagef";
  }
  else if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) == 76)
  {
    v25 = "gl_FragColor";
  }
  else if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) == 77)
  {
    v25 = "outputTexture.write";
  }
  else
  {
    v25 = 0;
  }
  v26 = (_QWORD *)*((_QWORD *)this + 1);
  if ((*(unsigned int (**)(_QWORD *))(*v26 + 232))(v26))
  {
    do
      v26 = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*v26 + 48))(v26, 0);
    while (((*(uint64_t (**)(_QWORD *))(*v26 + 232))(v26) & 1) != 0);
  }
  v27 = (*(uint64_t (**)(_QWORD *))(*v26 + 16))(v26);
  v28 = *v26;
  if (v27 == 47)
  {
    v29 = (*(uint64_t (**)(_QWORD *))(v28 + 408))(v26);
    v30 = v29 > 0x3C || ((1 << v29) & 0x1FEFC00000000000) == 0;
    if (v30)
      goto LABEL_305;
    v31 = (*(uint64_t (**)(_QWORD *))(*v26 + 408))(v26);
    v32 = CI::Kernel::builtin(v31);
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD *))(v28 + 16))(v26) != 49)
      goto LABEL_305;
    v32 = (void (***)(CI::ColorKernel *__hidden))v26[6];
    if (*((_DWORD *)v32 + 4))
      goto LABEL_305;
  }
  v33 = strstr(v14, "writeImage");
  if (v33 > v14)
  {
    v34 = v33;
    x_stream_write((uint64_t)v7, v14, v33 - v14);
    x_stream_write((uint64_t)v7, "_STUB_", 6uLL);
    v14 = v34;
  }
  v35 = strstr(v14, "writeImageWidth");
  if (v35 > v14)
  {
    v36 = v35;
    x_stream_write((uint64_t)v7, v14, v35 - v14);
    x_stream_write((uint64_t)v7, "_STUB_", 6uLL);
    v14 = v36;
  }
  v37 = strstr(v14, "writeImageHeight");
  if (v37 > v14)
  {
    v38 = v37;
    x_stream_write((uint64_t)v7, v14, v37 - v14);
    x_stream_write((uint64_t)v7, "_STUB_", 6uLL);
    v14 = v38;
  }
  v39 = strstr(v14, "writeImagePlane");
  if (v39 > v14)
  {
    v40 = v39;
    x_stream_write((uint64_t)v7, v14, v39 - v14);
    x_stream_write((uint64_t)v7, "_STUB_", 6uLL);
    v14 = v40;
  }
  v41 = strstr(v14, "writePixel");
  if (v41 > v14)
  {
    v42 = v41;
    x_stream_write((uint64_t)v7, v14, v41 - v14);
    x_stream_write((uint64_t)v7, "_STUB_", 6uLL);
    v14 = v42;
  }
  v43 = strstr(v14, "writeCoord");
  if (v43 > v14)
  {
    v44 = v43;
    x_stream_write((uint64_t)v7, v14, v43 - v14);
    x_stream_write((uint64_t)v7, "_STUB_", 6uLL);
    v14 = v44;
  }
  v45 = strstr(v14, "_ci_simd_shuffle_down");
  if (v45 > v14)
  {
    v46 = v45;
    x_stream_write((uint64_t)v7, v14, v45 - v14);
    x_stream_write((uint64_t)v7, "_STUB_", 6uLL);
    v14 = v46;
  }
  v47 = strstr(v14, "_ci_simdgroup_barrier");
  if (v47 > v14)
  {
    v48 = v47;
    x_stream_write((uint64_t)v7, v14, v47 - v14);
    x_stream_write((uint64_t)v7, "_STUB_", 6uLL);
    v14 = v48;
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) != 76)
  {
    memset(&__p, 0, sizeof(__p));
    v416 = 0;
    v417 = 0;
    v418 = 0;
    v402 = v25;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) == 74)
    {
      v49 = v7;
      v50 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        v54 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
        if ((unint64_t)(v54 + 1) >> 61)
          goto LABEL_675;
        v55 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
        if (v55 <= v54 + 1)
          v55 = v54 + 1;
        if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v55;
        if (v56)
          v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v56);
        else
          v57 = 0;
        v62 = &v57[8 * v54];
        v63 = (std::string::size_type)&v57[8 * v56];
        *(_QWORD *)v62 = "write_only image2d_t _outputTexture";
        v51 = v62 + 8;
        v64 = (char *)__p.__r_.__value_.__l.__size_;
        v65 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            v66 = *((_QWORD *)v64 - 1);
            v64 -= 8;
            *((_QWORD *)v62 - 1) = v66;
            v62 -= 8;
          }
          while (v64 != (char *)v65);
          v64 = (char *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
        __p.__r_.__value_.__r.__words[2] = v63;
        if (v64)
          operator delete(v64);
      }
      else
      {
        *(_QWORD *)__p.__r_.__value_.__l.__size_ = "write_only image2d_t _outputTexture";
        v51 = (_QWORD *)(v50 + 8);
      }
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
      if ((unint64_t)v51 >= __p.__r_.__value_.__r.__words[2])
      {
        v68 = (uint64_t)((uint64_t)v51 - __p.__r_.__value_.__r.__words[0]) >> 3;
        if ((unint64_t)(v68 + 1) >> 61)
          goto LABEL_675;
        v69 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
        if (v69 <= v68 + 1)
          v69 = v68 + 1;
        if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
          v70 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v70 = v69;
        if (v70)
          v71 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v70);
        else
          v71 = 0;
        v72 = &v71[8 * v68];
        v73 = (std::string::size_type)&v71[8 * v70];
        *(_QWORD *)v72 = "write_only image2d_t _outputTexturePlane";
        v67 = v72 + 8;
        v74 = (char *)__p.__r_.__value_.__l.__size_;
        v75 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            v76 = *((_QWORD *)v74 - 1);
            v74 -= 8;
            *((_QWORD *)v72 - 1) = v76;
            v72 -= 8;
          }
          while (v74 != (char *)v75);
          v74 = (char *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v67;
        __p.__r_.__value_.__r.__words[2] = v73;
        if (v74)
          operator delete(v74);
      }
      else
      {
        *v51 = "write_only image2d_t _outputTexturePlane";
        v67 = v51 + 1;
      }
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v67;
      if ((unint64_t)v67 >= __p.__r_.__value_.__r.__words[2])
      {
        v78 = (uint64_t)((uint64_t)v67 - __p.__r_.__value_.__r.__words[0]) >> 3;
        if ((unint64_t)(v78 + 1) >> 61)
          goto LABEL_675;
        v79 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
        if (v79 <= v78 + 1)
          v79 = v78 + 1;
        if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
          v80 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v80 = v79;
        if (v80)
          v81 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v80);
        else
          v81 = 0;
        v82 = &v81[8 * v78];
        v83 = (std::string::size_type)&v81[8 * v80];
        *(_QWORD *)v82 = "int2 _writeLoc";
        v77 = (std::string::size_type)(v82 + 8);
        v84 = (char *)__p.__r_.__value_.__l.__size_;
        v85 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            v86 = *((_QWORD *)v84 - 1);
            v84 -= 8;
            *((_QWORD *)v82 - 1) = v86;
            v82 -= 8;
          }
          while (v84 != (char *)v85);
          v84 = (char *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
        __p.__r_.__value_.__l.__size_ = v77;
        __p.__r_.__value_.__r.__words[2] = v83;
        if (v84)
          operator delete(v84);
      }
      else
      {
        *v67 = "int2 _writeLoc";
        v77 = (std::string::size_type)(v67 + 1);
      }
      __p.__r_.__value_.__l.__size_ = v77;
      v87 = v417;
      if ((unint64_t)v417 >= v418)
      {
        v89 = (v417 - (_BYTE *)v416) >> 3;
        if ((unint64_t)(v89 + 1) >> 61)
          goto LABEL_675;
        v90 = (uint64_t)(v418 - (_QWORD)v416) >> 2;
        if (v90 <= v89 + 1)
          v90 = v89 + 1;
        if (v418 - (unint64_t)v416 >= 0x7FFFFFFFFFFFFFF8)
          v91 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v91 = v90;
        if (v91)
          v92 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v418, v91);
        else
          v92 = 0;
        v93 = &v92[8 * v89];
        v94 = &v92[8 * v91];
        *(_QWORD *)v93 = "out";
        v88 = v93 + 8;
        v96 = (char *)v416;
        v95 = v417;
        if (v417 != v416)
        {
          do
          {
            v97 = *((_QWORD *)v95 - 1);
            v95 -= 8;
            *((_QWORD *)v93 - 1) = v97;
            v93 -= 8;
          }
          while (v95 != v96);
          v95 = (char *)v416;
        }
        v416 = v93;
        v417 = (char *)v88;
        v418 = (unint64_t)v94;
        if (v95)
          operator delete(v95);
      }
      else
      {
        *(_QWORD *)v417 = "out";
        v88 = v87 + 8;
      }
      v417 = (char *)v88;
      if ((unint64_t)v88 >= v418)
      {
        v99 = ((char *)v88 - (_BYTE *)v416) >> 3;
        if ((unint64_t)(v99 + 1) >> 61)
          goto LABEL_675;
        v100 = (uint64_t)(v418 - (_QWORD)v416) >> 2;
        if (v100 <= v99 + 1)
          v100 = v99 + 1;
        if (v418 - (unint64_t)v416 >= 0x7FFFFFFFFFFFFFF8)
          v101 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v101 = v100;
        if (v101)
          v102 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v418, v101);
        else
          v102 = 0;
        v103 = (const char **)&v102[8 * v99];
        v104 = &v102[8 * v101];
        *v103 = "out1";
        v98 = v103 + 1;
        v106 = (char *)v416;
        v105 = v417;
        if (v417 != v416)
        {
          do
          {
            v107 = (const char *)*((_QWORD *)v105 - 1);
            v105 -= 8;
            *--v103 = v107;
          }
          while (v105 != v106);
          v105 = (char *)v416;
        }
        v416 = v103;
        v417 = (char *)v98;
        v418 = (unint64_t)v104;
        if (v105)
          operator delete(v105);
      }
      else
      {
        *v88 = "out1";
        v98 = (const char **)(v88 + 1);
      }
      v417 = (char *)v98;
      if ((unint64_t)v98 < v418)
      {
        v108 = "_writeLoc";
LABEL_263:
        *v98 = v108;
        v115 = (char *)(v98 + 1);
LABEL_278:
        v417 = v115;
        v7 = v49;
        goto LABEL_279;
      }
      v109 = ((char *)v98 - (_BYTE *)v416) >> 3;
      if (!((unint64_t)(v109 + 1) >> 61))
      {
        v110 = (uint64_t)(v418 - (_QWORD)v416) >> 2;
        if (v110 <= v109 + 1)
          v110 = v109 + 1;
        if (v418 - (unint64_t)v416 >= 0x7FFFFFFFFFFFFFF8)
          v111 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v111 = v110;
        if (v111)
          v112 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v418, v111);
        else
          v112 = 0;
        v113 = &v112[8 * v109];
        v114 = &v112[8 * v111];
        *(_QWORD *)v113 = "_writeLoc";
        v115 = v113 + 8;
        v117 = (char *)v416;
        v116 = v417;
        if (v417 == v416)
          goto LABEL_276;
        do
        {
          v118 = *((_QWORD *)v116 - 1);
          v116 -= 8;
          *((_QWORD *)v113 - 1) = v118;
          v113 -= 8;
        }
        while (v116 != v117);
LABEL_275:
        v116 = (char *)v416;
LABEL_276:
        v416 = v113;
        v417 = v115;
        v418 = (unint64_t)v114;
        if (v116)
          operator delete(v116);
        goto LABEL_278;
      }
    }
    else
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) != 77)
      {
LABEL_279:
        v170 = (char *)v32[3];
        __dst = 0;
        v415 = 0;
        v413 = 0;
        v171 = (const void *)__p.__r_.__value_.__r.__words[0];
        v172 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          std::vector<unsigned long>::__vallocate[abi:nn180100](&v413, v172 >> 3);
          v173 = (char *)__dst;
          memmove(__dst, v171, v172);
          __dst = &v173[v172];
        }
        appended = CI::append_arguments_to_kernel((uint64_t)v7, v14, v170, &v413);
        if (v413)
        {
          __dst = v413;
          operator delete(v413);
        }
        v175 = (char *)v32[3];
        if (strstr(v175, "_ci_writeTG_42X"))
        {
          x_stream_printf((uint64_t)v7, ", %s", v176, v177, v178, v179, v180, v181, (uint64_t)"threadgroup float4 tgcc[]");
          v175 = (char *)v32[3];
        }
        if (strstr(v175, "_ci_writeTG_42X"))
        {
          v182 = strstr(appended, "float4 tgcc");
          if (v182 > appended)
          {
            v183 = v182;
            x_stream_write((uint64_t)v7, appended, v182 - appended);
            x_stream_write((uint64_t)v7, "//", 2uLL);
            appended = v183;
          }
        }
        v184 = strstr(appended, a2);
        v185 = strstr(v184, v24);
        if (v185 > appended)
        {
          v186 = v185;
          x_stream_write((uint64_t)v7, appended, v185 - appended);
          x_stream_printf((uint64_t)v7, "%s,", v187, v188, v189, v190, v191, v192, (uint64_t)v24);
          x_stream_printf((uint64_t)v7, " %s1,", v193, v194, v195, v196, v197, v198, (uint64_t)v24);
          v199 = strlen(v24);
          appended = strchr(&v186[v199], 44) + 1;
        }
        v200 = (char *)v32[3];
        if (strstr(v200, "_ci_writeTG_42X"))
        {
          v201 = strchr(appended, 123);
          if (v201 > appended)
          {
            v202 = v201;
            x_stream_write((uint64_t)v7, appended, v201 - appended);
            x_stream_write((uint64_t)v7, "{\nthreadgroup float4 _ci_writeTG_42X_tgcc[16*16] = {0.,0.,0.,0.};\n", 0x42uLL);
            appended = v202 + 1;
            v200 = (char *)v32[3];
          }
        }
        v410 = 0;
        v411 = 0;
        v412 = 0;
        v203 = v416;
        v204 = v417 - (_BYTE *)v416;
        if (v417 != v416)
        {
          std::vector<unsigned long>::__vallocate[abi:nn180100](&v410, v204 >> 3);
          v205 = (char *)v411;
          memmove(v411, v203, v204);
          v411 = &v205[v204];
        }
        v14 = CI::append_arguments_to_kernel((uint64_t)v7, appended, v200, &v410);
        if (v410)
        {
          v411 = v410;
          operator delete(v410);
        }
        v25 = v402;
        if (strstr((char *)v32[3], "_ci_writeTG_42X"))
          x_stream_printf((uint64_t)v7, ", %s", v206, v207, v208, v209, v210, v211, (uint64_t)"_ci_writeTG_42X_tgcc");
        if (v416)
        {
          v417 = (char *)v416;
          operator delete(v416);
        }
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_303;
      }
      v49 = v7;
      v52 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        v58 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_675;
        v59 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
        if (v59 <= v58 + 1)
          v59 = v58 + 1;
        if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
          v60 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v60 = v59;
        if (v60)
          v61 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v60);
        else
          v61 = 0;
        v119 = &v61[8 * v58];
        v120 = (std::string::size_type)&v61[8 * v60];
        *(_QWORD *)v119 = "texture2d<float, access::write> _outputTexture";
        v53 = v119 + 8;
        v121 = (char *)__p.__r_.__value_.__l.__size_;
        v122 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            v123 = *((_QWORD *)v121 - 1);
            v121 -= 8;
            *((_QWORD *)v119 - 1) = v123;
            v119 -= 8;
          }
          while (v121 != (char *)v122);
          v121 = (char *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v53;
        __p.__r_.__value_.__r.__words[2] = v120;
        if (v121)
          operator delete(v121);
      }
      else
      {
        *(_QWORD *)__p.__r_.__value_.__l.__size_ = "texture2d<float, access::write> _outputTexture";
        v53 = (_QWORD *)(v52 + 8);
      }
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v53;
      if ((unint64_t)v53 >= __p.__r_.__value_.__r.__words[2])
      {
        v125 = (uint64_t)((uint64_t)v53 - __p.__r_.__value_.__r.__words[0]) >> 3;
        if ((unint64_t)(v125 + 1) >> 61)
          goto LABEL_675;
        v126 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
        if (v126 <= v125 + 1)
          v126 = v125 + 1;
        if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
          v127 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v127 = v126;
        if (v127)
          v128 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v127);
        else
          v128 = 0;
        v129 = &v128[8 * v125];
        v130 = (std::string::size_type)&v128[8 * v127];
        *(_QWORD *)v129 = "texture2d<float, access::write> _outputTexturePlane";
        v124 = v129 + 8;
        v131 = (char *)__p.__r_.__value_.__l.__size_;
        v132 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            v133 = *((_QWORD *)v131 - 1);
            v131 -= 8;
            *((_QWORD *)v129 - 1) = v133;
            v129 -= 8;
          }
          while (v131 != (char *)v132);
          v131 = (char *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v129;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v124;
        __p.__r_.__value_.__r.__words[2] = v130;
        if (v131)
          operator delete(v131);
      }
      else
      {
        *v53 = "texture2d<float, access::write> _outputTexturePlane";
        v124 = v53 + 1;
      }
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v124;
      if ((unint64_t)v124 >= __p.__r_.__value_.__r.__words[2])
      {
        v135 = (uint64_t)((uint64_t)v124 - __p.__r_.__value_.__r.__words[0]) >> 3;
        if ((unint64_t)(v135 + 1) >> 61)
          goto LABEL_675;
        v136 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
        if (v136 <= v135 + 1)
          v136 = v135 + 1;
        if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
          v137 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v137 = v136;
        if (v137)
          v138 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v137);
        else
          v138 = 0;
        v139 = &v138[8 * v135];
        v140 = (std::string::size_type)&v138[8 * v137];
        *(_QWORD *)v139 = "uint2 _wc";
        v134 = (std::string::size_type)(v139 + 8);
        v141 = (char *)__p.__r_.__value_.__l.__size_;
        v142 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            v143 = *((_QWORD *)v141 - 1);
            v141 -= 8;
            *((_QWORD *)v139 - 1) = v143;
            v139 -= 8;
          }
          while (v141 != (char *)v142);
          v141 = (char *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v139;
        __p.__r_.__value_.__l.__size_ = v134;
        __p.__r_.__value_.__r.__words[2] = v140;
        if (v141)
          operator delete(v141);
      }
      else
      {
        *v124 = "uint2 _wc";
        v134 = (std::string::size_type)(v124 + 1);
      }
      __p.__r_.__value_.__l.__size_ = v134;
      v144 = v417;
      if ((unint64_t)v417 >= v418)
      {
        v146 = (v417 - (_BYTE *)v416) >> 3;
        if ((unint64_t)(v146 + 1) >> 61)
          goto LABEL_675;
        v147 = (uint64_t)(v418 - (_QWORD)v416) >> 2;
        if (v147 <= v146 + 1)
          v147 = v146 + 1;
        if (v418 - (unint64_t)v416 >= 0x7FFFFFFFFFFFFFF8)
          v148 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v148 = v147;
        if (v148)
          v149 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v418, v148);
        else
          v149 = 0;
        v150 = &v149[8 * v146];
        v151 = &v149[8 * v148];
        *(_QWORD *)v150 = "outputTexture";
        v145 = v150 + 8;
        v153 = (char *)v416;
        v152 = v417;
        if (v417 != v416)
        {
          do
          {
            v154 = *((_QWORD *)v152 - 1);
            v152 -= 8;
            *((_QWORD *)v150 - 1) = v154;
            v150 -= 8;
          }
          while (v152 != v153);
          v152 = (char *)v416;
        }
        v416 = v150;
        v417 = (char *)v145;
        v418 = (unint64_t)v151;
        if (v152)
          operator delete(v152);
      }
      else
      {
        *(_QWORD *)v417 = "outputTexture";
        v145 = v144 + 8;
      }
      v417 = (char *)v145;
      if ((unint64_t)v145 >= v418)
      {
        v155 = ((char *)v145 - (_BYTE *)v416) >> 3;
        if ((unint64_t)(v155 + 1) >> 61)
          goto LABEL_675;
        v156 = (uint64_t)(v418 - (_QWORD)v416) >> 2;
        if (v156 <= v155 + 1)
          v156 = v155 + 1;
        if (v418 - (unint64_t)v416 >= 0x7FFFFFFFFFFFFFF8)
          v157 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v157 = v156;
        if (v157)
          v158 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v418, v157);
        else
          v158 = 0;
        v159 = (const char **)&v158[8 * v155];
        v160 = &v158[8 * v157];
        *v159 = "outputTexture1";
        v98 = v159 + 1;
        v162 = (char *)v416;
        v161 = v417;
        if (v417 != v416)
        {
          do
          {
            v163 = (const char *)*((_QWORD *)v161 - 1);
            v161 -= 8;
            *--v159 = v163;
          }
          while (v161 != v162);
          v161 = (char *)v416;
        }
        v416 = v159;
        v417 = (char *)v98;
        v418 = (unint64_t)v160;
        if (v161)
          operator delete(v161);
      }
      else
      {
        *v145 = "outputTexture1";
        v98 = (const char **)(v145 + 1);
      }
      v417 = (char *)v98;
      if ((unint64_t)v98 < v418)
      {
        v108 = "_wc";
        goto LABEL_263;
      }
      v164 = ((char *)v98 - (_BYTE *)v416) >> 3;
      if (!((unint64_t)(v164 + 1) >> 61))
      {
        v165 = (uint64_t)(v418 - (_QWORD)v416) >> 2;
        if (v165 <= v164 + 1)
          v165 = v164 + 1;
        if (v418 - (unint64_t)v416 >= 0x7FFFFFFFFFFFFFF8)
          v166 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v166 = v165;
        if (v166)
          v167 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v418, v166);
        else
          v167 = 0;
        v113 = &v167[8 * v164];
        v114 = &v167[8 * v166];
        *(_QWORD *)v113 = "_wc";
        v115 = v113 + 8;
        v168 = (char *)v416;
        v116 = v417;
        if (v417 == v416)
          goto LABEL_276;
        do
        {
          v169 = *((_QWORD *)v116 - 1);
          v116 -= 8;
          *((_QWORD *)v113 - 1) = v169;
          v113 -= 8;
        }
        while (v116 != v168);
        goto LABEL_275;
      }
    }
LABEL_675:
    abort();
  }
LABEL_303:
  v212 = strstr(v14, v25);
  if (v212 > v14)
  {
    v213 = v212;
    x_stream_write((uint64_t)v7, v14, v212 - v14);
    x_stream_write((uint64_t)v7, "//", 2uLL);
    v14 = v213;
  }
LABEL_305:
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) == 77
    && CI::MetalContext::use_imageblocks_for_format(*(_QWORD *)this, *(_DWORD *)(*((_QWORD *)this + 2) + 140)))
  {
    v214 = strstr(v14, "kernel void");
    x_stream_write((uint64_t)v7, v14, v214 - v14);
    x_stream_write((uint64_t)v7, "struct PixelData {\n  float4 c", 0x1DuLL);
    if (CI_ENABLE_METAL_IMAGEBLOCKS() == 2)
      x_stream_write((uint64_t)v7, " [[color(0)]]", 0xDuLL);
    x_stream_write((uint64_t)v7, ";\n};\n\n", 6uLL);
    v215 = strstr(v214, v24);
    if (v215 > v214)
    {
      v216 = v215;
      x_stream_write((uint64_t)v7, v214, v215 - v214);
      x_stream_write((uint64_t)v7, "imageblock<PixelData> imageBlock, ushort2 lid [[ thread_position_in_threadgroup ]],\n", 0x54uLL);
      v214 = v216;
    }
    v217 = strstr(v214, "if (gid.x >= abs(params.outputRect.z) || gid.y >= abs(params.outputRect.w)) return;");
    if (v217 > v214)
    {
      v218 = v217;
      x_stream_write((uint64_t)v7, v214, v217 - v214);
      x_stream_write((uint64_t)v7, "if (any(static_cast<float2>(gid) < params.outputRect.xy)) return;\n  ", 0x44uLL);
      x_stream_write((uint64_t)v7, "if (any(static_cast<float2>(gid) >= params.outputRect.xy + abs(params.outputRect.zw))) return;",
        0x5EuLL);
      v214 = v218 + 83;
    }
    v219 = strstr(v214, " + params.outputRect.xy");
    if (v219 > v214)
    {
      v220 = v219;
      x_stream_write((uint64_t)v7, v214, v219 - v214);
      v214 = v220 + 23;
    }
    v221 = strstr(v214, v25);
    if (v221 <= v214)
    {
      v14 = v214;
    }
    else
    {
      v222 = v221;
      x_stream_write((uint64_t)v7, v214, v221 - v214);
      if (CI_ENABLE_METAL_IMAGEBLOCKS() == 2)
      {
        x_stream_write((uint64_t)v7, "\n  PixelData output = { ", 0x18uLL);
        v223 = &v222[strlen(v25) + 1];
        v224 = strchr(v222, 44);
        x_stream_write((uint64_t)v7, v223, v224 - v223);
        x_stream_write((uint64_t)v7, " };\n", 4uLL);
        x_stream_write((uint64_t)v7, "  imageBlock.write(output, lid);\n", 0x21uLL);
        v14 = strchr(v224, 59) + 2;
      }
      else
      {
        x_stream_write((uint64_t)v7, "\n  threadgroup_imageblock PixelData* output = imageBlock.data(lid);\n", 0x44uLL);
        x_stream_write((uint64_t)v7, "  output->c = ", 0xEuLL);
        v225 = &v222[strlen(v25) + 1];
        v14 = strchr(v222, 44);
        x_stream_write((uint64_t)v7, v225, v14 - v225);
        x_stream_write((uint64_t)v7, ";\n", 2uLL);
        x_stream_write((uint64_t)v7, "  threadgroup_barrier(mem_flags::mem_threadgroup_imageblock);\n", 0x3EuLL);
        x_stream_write((uint64_t)v7, "  if (lid.x == 0 && lid.y == 0)\n", 0x20uLL);
        x_stream_write((uint64_t)v7, "    outputTexture.write(imageBlock.slice(output->c)", 0x33uLL);
      }
    }
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this) == 76)
  {
    v226 = *((_QWORD *)this + 2);
    if (!*(_BYTE *)(v226 + 136))
    {
      if (*(_BYTE *)(v226 + 137))
      {
        v399 = v7;
        v233 = &__p;
        std::string::basic_string[abi:nn180100]<0>(&__p, v14);
        v234 = (char *)&v416;
        std::string::basic_string[abi:nn180100]<0>(&v416, "sampler2D _i");
        v235 = 0;
        v400 = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        {
          v236 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else
        {
          v236 = __p.__r_.__value_.__l.__size_;
          v233 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((v418 & 0x8000000000000000) == 0)
        {
          v237 = HIBYTE(v418);
        }
        else
        {
          v234 = (char *)v416;
          v237 = (int64_t)v417;
        }
        v238 = (char *)v233 + v236;
        while (!v237)
        {
LABEL_349:
          if (v235 != -1)
          {
            ++v400;
            v235 += v237;
            if (v236 >= v235)
              continue;
          }
          goto LABEL_351;
        }
        v239 = (char *)v233 + v235;
        v240 = v236 - v235;
        if (v240 >= v237)
        {
          v241 = *v234;
          do
          {
            v242 = v240 - v237;
            if (v242 == -1)
              break;
            v243 = (char *)memchr(v239, v241, v242 + 1);
            if (!v243)
              break;
            v244 = v243;
            if (!memcmp(v243, v234, v237))
            {
              if (v244 == v238)
                break;
              v235 = v244 - (char *)v233;
              goto LABEL_349;
            }
            v239 = v244 + 1;
            v240 = v238 - (v244 + 1);
          }
          while (v240 >= v237);
        }
LABEL_351:
        std::string::basic_string[abi:nn180100]<0>(&v407, "uniform highp sampler2D _samplers [");
        if ((v409 & 0x80u) == 0)
          v245 = (char *)&v407;
        else
          v245 = (char *)v407;
        if ((v409 & 0x80u) == 0)
          v246 = v409;
        else
          v246 = *(_QWORD *)v408;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v247 = &__p;
        else
          v247 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v248 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v248 = __p.__r_.__value_.__l.__size_;
        if (v246)
        {
          v249 = (char *)v247 + v248;
          if ((uint64_t)v248 >= v246)
          {
            v277 = *v245;
            v278 = v248;
            v279 = v247;
            do
            {
              v280 = v278 - v246;
              if (v280 == -1)
                break;
              v281 = (char *)memchr(v279, v277, v280 + 1);
              if (!v281)
                break;
              v250 = v281;
              if (!memcmp(v281, v245, v246))
                goto LABEL_366;
              v279 = (std::string *)(v250 + 1);
              v278 = v249 - (v250 + 1);
            }
            while (v278 >= v246);
          }
          v250 = (char *)v247 + v248;
LABEL_366:
          if (v250 == v249)
            v251 = -1;
          else
            v251 = v250 - (char *)v247;
          if (v248 < v251)
          {
            v252 = -1;
            goto LABEL_380;
          }
        }
        else
        {
          v251 = 0;
        }
        v253 = (char *)v247 + v251;
        v254 = (char *)v247 + v248;
        v255 = v248 - v251;
        if ((uint64_t)(v248 - v251) >= 1)
        {
          do
          {
            v256 = memchr(v253, 59, v255);
            if (!v256)
              break;
            if (*v256 == 59)
              goto LABEL_377;
            v253 = v256 + 1;
            v255 = v254 - v253;
          }
          while (v254 - v253 > 0);
        }
        v256 = (char *)v247 + v248;
LABEL_377:
        if (v256 == v254)
          v252 = -1;
        else
          v252 = v256 - (_BYTE *)v247;
LABEL_380:
        std::string::basic_string(&__str, &__p, v251 + v246, v252 - (v251 + v246), (std::allocator<char> *)&v405);
        v257 = std::stoi(&__str, 0, 10);
        std::string::erase(&__p, v251, v252 - v251 + 1);
        v258 = v257 + v400;
        std::to_string(&v424, v257 + v400);
        v259 = std::string::insert(&v424, 0, "uniform highp sampler2D _samplers [", 0x23uLL);
        v260 = v259->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v404.__r_.__value_.__l.__data_ = *(_OWORD *)&v259->__r_.__value_.__l.__data_;
        v404.__r_.__value_.__r.__words[2] = v260;
        v259->__r_.__value_.__l.__size_ = 0;
        v259->__r_.__value_.__r.__words[2] = 0;
        v259->__r_.__value_.__r.__words[0] = 0;
        v261 = std::string::append(&v404, "];", 2uLL);
        v262 = v261->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v405.__r_.__value_.__l.__data_ = *(_OWORD *)&v261->__r_.__value_.__l.__data_;
        v405.__r_.__value_.__r.__words[2] = v262;
        v261->__r_.__value_.__l.__size_ = 0;
        v261->__r_.__value_.__r.__words[2] = 0;
        v261->__r_.__value_.__r.__words[0] = 0;
        if ((v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v263 = &v405;
        else
          v263 = (std::string *)v405.__r_.__value_.__r.__words[0];
        if ((v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v264 = HIBYTE(v405.__r_.__value_.__r.__words[2]);
        else
          v264 = v405.__r_.__value_.__l.__size_;
        std::string::insert(&__p, v251, (const std::string::value_type *)v263, v264);
        if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v405.__r_.__value_.__l.__data_);
        if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v404.__r_.__value_.__l.__data_);
        if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v424.__r_.__value_.__l.__data_);
        std::to_string(&v404, v257);
        v265 = std::string::insert(&v404, 0, "uniform highp mat3 _transforms [", 0x20uLL);
        v266 = v265->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v405.__r_.__value_.__l.__data_ = *(_OWORD *)&v265->__r_.__value_.__l.__data_;
        v405.__r_.__value_.__r.__words[2] = v266;
        v265->__r_.__value_.__l.__size_ = 0;
        v265->__r_.__value_.__r.__words[2] = 0;
        v265->__r_.__value_.__r.__words[0] = 0;
        v267 = std::string::append(&v405, "];", 2uLL);
        v268 = (void *)v267->__r_.__value_.__r.__words[0];
        v424.__r_.__value_.__r.__words[0] = v267->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v424.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v267->__r_.__value_.__r.__words[1] + 7);
        v269 = HIBYTE(v267->__r_.__value_.__r.__words[2]);
        v267->__r_.__value_.__l.__size_ = 0;
        v267->__r_.__value_.__r.__words[2] = 0;
        v267->__r_.__value_.__r.__words[0] = 0;
        if ((char)v409 < 0)
          operator delete(v407);
        v407 = v268;
        *(_QWORD *)v408 = v424.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v408[7] = *(std::string::size_type *)((char *)v424.__r_.__value_.__r.__words + 7);
        v409 = v269;
        if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v405.__r_.__value_.__l.__data_);
        if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v404.__r_.__value_.__l.__data_);
        v270 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v271 = &__p;
        else
          v271 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((v409 & 0x80u) == 0)
          v272 = (char *)&v407;
        else
          v272 = (char *)v407;
        if ((v409 & 0x80u) == 0)
          v273 = v409;
        else
          v273 = *(_QWORD *)v408;
        if (v273)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v270 = __p.__r_.__value_.__l.__size_;
          v274 = (char *)v271 + v270;
          if (v270 >= v273)
          {
            v282 = *v272;
            v283 = v271;
            do
            {
              v284 = v270 - v273;
              if (v284 == -1)
                break;
              v285 = (char *)memchr(v283, v282, v284 + 1);
              if (!v285)
                break;
              v275 = v285;
              if (!memcmp(v285, v272, v273))
                goto LABEL_425;
              v283 = (std::string *)(v275 + 1);
              v270 = v274 - (v275 + 1);
            }
            while (v270 >= v273);
            v275 = v274;
          }
          else
          {
            v275 = (char *)v271 + v270;
          }
LABEL_425:
          if (v275 == v274)
            v276 = -1;
          else
            v276 = v275 - (char *)v271;
        }
        else
        {
          v276 = 0;
        }
        std::string::erase(&__p, v276, v273);
        std::to_string(&v424, v258);
        v286 = std::string::insert(&v424, 0, "uniform highp mat3 _transforms [", 0x20uLL);
        v287 = v286->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v404.__r_.__value_.__l.__data_ = *(_OWORD *)&v286->__r_.__value_.__l.__data_;
        v404.__r_.__value_.__r.__words[2] = v287;
        v286->__r_.__value_.__l.__size_ = 0;
        v286->__r_.__value_.__r.__words[2] = 0;
        v286->__r_.__value_.__r.__words[0] = 0;
        v288 = std::string::append(&v404, "];", 2uLL);
        v289 = v288->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v405.__r_.__value_.__l.__data_ = *(_OWORD *)&v288->__r_.__value_.__l.__data_;
        v405.__r_.__value_.__r.__words[2] = v289;
        v288->__r_.__value_.__l.__size_ = 0;
        v288->__r_.__value_.__r.__words[2] = 0;
        v288->__r_.__value_.__r.__words[0] = 0;
        if ((v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v290 = &v405;
        else
          v290 = (std::string *)v405.__r_.__value_.__r.__words[0];
        if ((v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v291 = HIBYTE(v405.__r_.__value_.__r.__words[2]);
        else
          v291 = v405.__r_.__value_.__l.__size_;
        std::string::insert(&__p, v276, (const std::string::value_type *)v290, v291);
        if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v405.__r_.__value_.__l.__data_);
        if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v404.__r_.__value_.__l.__data_);
        if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v424.__r_.__value_.__l.__data_);
        std::to_string(&v404, v257);
        v292 = std::string::insert(&v404, 0, "uniform highp vec4 _extents [", 0x1DuLL);
        v293 = v292->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v405.__r_.__value_.__l.__data_ = *(_OWORD *)&v292->__r_.__value_.__l.__data_;
        v405.__r_.__value_.__r.__words[2] = v293;
        v292->__r_.__value_.__l.__size_ = 0;
        v292->__r_.__value_.__r.__words[2] = 0;
        v292->__r_.__value_.__r.__words[0] = 0;
        v294 = std::string::append(&v405, "];", 2uLL);
        v295 = (void *)v294->__r_.__value_.__r.__words[0];
        v424.__r_.__value_.__r.__words[0] = v294->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v424.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v294->__r_.__value_.__r.__words[1] + 7);
        v296 = HIBYTE(v294->__r_.__value_.__r.__words[2]);
        v294->__r_.__value_.__l.__size_ = 0;
        v294->__r_.__value_.__r.__words[2] = 0;
        v294->__r_.__value_.__r.__words[0] = 0;
        if ((char)v409 < 0)
          operator delete(v407);
        v407 = v295;
        *(_QWORD *)v408 = v424.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v408[7] = *(std::string::size_type *)((char *)v424.__r_.__value_.__r.__words + 7);
        v409 = v296;
        if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v405.__r_.__value_.__l.__data_);
        if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v404.__r_.__value_.__l.__data_);
        v297 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v298 = &__p;
        else
          v298 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((v409 & 0x80u) == 0)
          v299 = (char *)&v407;
        else
          v299 = (char *)v407;
        if ((v409 & 0x80u) == 0)
          v300 = v409;
        else
          v300 = *(_QWORD *)v408;
        if (v300)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v297 = __p.__r_.__value_.__l.__size_;
          v301 = (char *)v298 + v297;
          if (v297 >= v300)
          {
            v395 = *v299;
            v396 = v298;
            do
            {
              v397 = v297 - v300;
              if (v397 == -1)
                break;
              v398 = (char *)memchr(v396, v395, v397 + 1);
              if (!v398)
                break;
              v302 = v398;
              if (!memcmp(v398, v299, v300))
                goto LABEL_460;
              v396 = (std::string *)(v302 + 1);
              v297 = v301 - (v302 + 1);
            }
            while (v297 >= v300);
          }
          v302 = v301;
LABEL_460:
          if (v302 == v301)
            v303 = -1;
          else
            v303 = v302 - (char *)v298;
        }
        else
        {
          v303 = 0;
        }
        std::string::erase(&__p, v303, v300);
        std::to_string(&v424, v258);
        v304 = std::string::insert(&v424, 0, "uniform highp vec4 _extents [", 0x1DuLL);
        v305 = v304->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v404.__r_.__value_.__l.__data_ = *(_OWORD *)&v304->__r_.__value_.__l.__data_;
        v404.__r_.__value_.__r.__words[2] = v305;
        v304->__r_.__value_.__l.__size_ = 0;
        v304->__r_.__value_.__r.__words[2] = 0;
        v304->__r_.__value_.__r.__words[0] = 0;
        v306 = std::string::append(&v404, "];", 2uLL);
        v307 = v306->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v405.__r_.__value_.__l.__data_ = *(_OWORD *)&v306->__r_.__value_.__l.__data_;
        v405.__r_.__value_.__r.__words[2] = v307;
        v306->__r_.__value_.__l.__size_ = 0;
        v306->__r_.__value_.__r.__words[2] = 0;
        v306->__r_.__value_.__r.__words[0] = 0;
        if ((v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v308 = &v405;
        else
          v308 = (std::string *)v405.__r_.__value_.__r.__words[0];
        if ((v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v309 = HIBYTE(v405.__r_.__value_.__r.__words[2]);
        else
          v309 = v405.__r_.__value_.__l.__size_;
        std::string::insert(&__p, v303, (const std::string::value_type *)v308, v309);
        if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v405.__r_.__value_.__l.__data_);
        if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v404.__r_.__value_.__l.__data_);
        if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v424.__r_.__value_.__l.__data_);
        if (v400)
        {
          v310 = 0;
          while (1)
          {
            v401 = v310;
            std::string::basic_string[abi:nn180100]<0>(&v405, "uniform lowp sampler2D _i");
            v311 = (v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &v405
                 : (std::string *)v405.__r_.__value_.__r.__words[0];
            v312 = (v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? HIBYTE(v405.__r_.__value_.__r.__words[2])
                 : v405.__r_.__value_.__l.__size_;
            v313 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &__p
                 : (std::string *)__p.__r_.__value_.__r.__words[0];
            v314 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? HIBYTE(__p.__r_.__value_.__r.__words[2])
                 : __p.__r_.__value_.__l.__size_;
            if (!v312)
              break;
            v315 = (char *)v313 + v314;
            if ((uint64_t)v314 >= v312)
            {
              v384 = v311->__r_.__value_.__s.__data_[0];
              v385 = v314;
              v386 = v313;
              do
              {
                v387 = v385 - v312;
                if (v387 == -1)
                  break;
                v388 = (char *)memchr(v386, v384, v387 + 1);
                if (!v388)
                  break;
                v316 = v388;
                if (!memcmp(v388, v311, v312))
                  goto LABEL_493;
                v386 = (std::string *)(v316 + 1);
                v385 = v315 - (v316 + 1);
              }
              while (v385 >= v312);
            }
            v316 = (char *)v313 + v314;
LABEL_493:
            if (v316 == v315)
              v317 = -1;
            else
              v317 = v316 - (char *)v313;
            if (v314 >= v317)
              goto LABEL_499;
            v318 = -1;
LABEL_507:
            std::string::basic_string(&v404, &__p, v317 + v312, v318 - (v317 + v312), (std::allocator<char> *)&v424);
            v323 = std::stoi(&v404, 0, 10);
            std::string::erase(&__p, v317, v318 - v317 + 1);
            std::to_string(&v424, v323);
            v324 = std::string::insert(&v424, 0, "_i", 2uLL);
            v325 = v324->__r_.__value_.__r.__words[0];
            v423.__r_.__value_.__r.__words[0] = v324->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v423.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v324->__r_.__value_.__r.__words[1] + 7);
            v326 = HIBYTE(v324->__r_.__value_.__r.__words[2]);
            v324->__r_.__value_.__r.__words[0] = 0;
            v324->__r_.__value_.__l.__size_ = 0;
            v324->__r_.__value_.__r.__words[2] = 0;
            if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v405.__r_.__value_.__l.__data_);
            v405.__r_.__value_.__r.__words[0] = v325;
            v405.__r_.__value_.__l.__size_ = v423.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v405.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v423.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v405.__r_.__value_.__s + 23) = v326;
            if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v424.__r_.__value_.__l.__data_);
              v326 = HIBYTE(v405.__r_.__value_.__r.__words[2]);
              v325 = v405.__r_.__value_.__r.__words[0];
            }
            v327 = 0;
            v328 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v329 = &__p;
            else
              v329 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v328 = __p.__r_.__value_.__l.__size_;
            v330 = (v326 & 0x80u) != 0;
            v331 = v405.__r_.__value_.__l.__size_;
            if ((v326 & 0x80u) == 0)
              v332 = &v405;
            else
              v332 = (std::string *)v325;
            if ((v326 & 0x80u) == 0)
              v333 = v326;
            else
              v333 = v405.__r_.__value_.__l.__size_;
            while (!v333)
            {
LABEL_532:
              if (v327 != -1)
              {
                if (v330)
                  v341 = v331;
                else
                  v341 = v326;
                std::string::erase(&__p, v327, v341);
                std::to_string(&v403, v323);
                v342 = std::string::insert(&v403, 0, "_samplers[", 0xAuLL);
                v343 = v342->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v423.__r_.__value_.__l.__data_ = *(_OWORD *)&v342->__r_.__value_.__l.__data_;
                v423.__r_.__value_.__r.__words[2] = v343;
                v342->__r_.__value_.__l.__size_ = 0;
                v342->__r_.__value_.__r.__words[2] = 0;
                v342->__r_.__value_.__r.__words[0] = 0;
                v344 = std::string::append(&v423, "]", 1uLL);
                v345 = v344->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v424.__r_.__value_.__l.__data_ = *(_OWORD *)&v344->__r_.__value_.__l.__data_;
                v424.__r_.__value_.__r.__words[2] = v345;
                v344->__r_.__value_.__l.__size_ = 0;
                v344->__r_.__value_.__r.__words[2] = 0;
                v344->__r_.__value_.__r.__words[0] = 0;
                if ((v424.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v346 = &v424;
                else
                  v346 = (std::string *)v424.__r_.__value_.__r.__words[0];
                if ((v424.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v347 = HIBYTE(v424.__r_.__value_.__r.__words[2]);
                else
                  v347 = v424.__r_.__value_.__l.__size_;
                std::string::insert(&__p, v327, (const std::string::value_type *)v346, v347);
                if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v424.__r_.__value_.__l.__data_);
                if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v423.__r_.__value_.__l.__data_);
                if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v403.__r_.__value_.__l.__data_);
                v348 = (char *)HIBYTE(v418);
                if ((v418 & 0x8000000000000000) != 0)
                  v348 = v417;
                v327 += (std::string::size_type)v348;
                v328 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v329 = &__p;
                else
                  v329 = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v328 = __p.__r_.__value_.__l.__size_;
                v330 = (v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
                v331 = v405.__r_.__value_.__l.__size_;
                v326 = HIBYTE(v405.__r_.__value_.__r.__words[2]);
                v332 = (v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? &v405
                     : (std::string *)v405.__r_.__value_.__r.__words[0];
                v333 = (v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? HIBYTE(v405.__r_.__value_.__r.__words[2])
                     : v405.__r_.__value_.__l.__size_;
                if (v328 >= v327)
                  continue;
              }
              goto LABEL_562;
            }
            v334 = (char *)v329 + v327;
            v335 = (char *)v329 + v328;
            v336 = v328 - v327;
            if (v336 >= v333)
            {
              v337 = v332->__r_.__value_.__s.__data_[0];
              do
              {
                v338 = v336 - v333;
                if (v338 == -1)
                  break;
                v339 = (char *)memchr(v334, v337, v338 + 1);
                if (!v339)
                  break;
                v340 = v339;
                if (!memcmp(v339, v332, v333))
                {
                  if (v340 == v335)
                    break;
                  v327 = v340 - (char *)v329;
                  goto LABEL_532;
                }
                v334 = v340 + 1;
                v336 = v335 - (v340 + 1);
              }
              while (v336 >= v333);
            }
LABEL_562:
            std::to_string(&v424, v323);
            v349 = std::string::insert(&v424, 0, "uniform highp mat3 _t", 0x15uLL);
            v350 = v349->__r_.__value_.__r.__words[0];
            v423.__r_.__value_.__r.__words[0] = v349->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v423.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v349->__r_.__value_.__r.__words[1] + 7);
            v351 = HIBYTE(v349->__r_.__value_.__r.__words[2]);
            v349->__r_.__value_.__r.__words[0] = 0;
            v349->__r_.__value_.__l.__size_ = 0;
            v349->__r_.__value_.__r.__words[2] = 0;
            if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v405.__r_.__value_.__l.__data_);
            v405.__r_.__value_.__r.__words[0] = v350;
            v405.__r_.__value_.__l.__size_ = v423.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v405.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v423.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v405.__r_.__value_.__s + 23) = v351;
            if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v424.__r_.__value_.__l.__data_);
              v351 = HIBYTE(v405.__r_.__value_.__r.__words[2]);
              v350 = v405.__r_.__value_.__r.__words[0];
            }
            v352 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v353 = &__p;
            else
              v353 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((v351 & 0x80u) == 0)
              v354 = &v405;
            else
              v354 = (std::string *)v350;
            if ((v351 & 0x80u) == 0)
              v355 = v351;
            else
              v355 = v405.__r_.__value_.__l.__size_;
            if (v355)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v352 = __p.__r_.__value_.__l.__size_;
              v356 = (char *)v353 + v352;
              if (v352 >= v355)
              {
                v389 = v354->__r_.__value_.__s.__data_[0];
                v390 = v353;
                do
                {
                  v391 = v352 - v355;
                  if (v391 == -1)
                    break;
                  v392 = (char *)memchr(v390, v389, v391 + 1);
                  if (!v392)
                    break;
                  v357 = v392;
                  if (!memcmp(v392, v354, v355))
                    goto LABEL_580;
                  v390 = (std::string *)(v357 + 1);
                  v352 = v356 - (v357 + 1);
                }
                while (v352 >= v355);
              }
              v357 = v356;
LABEL_580:
              if (v357 == v356)
                v358 = -1;
              else
                v358 = v357 - (char *)v353;
            }
            else
            {
              v358 = 0;
            }
            std::string::erase(&__p, v358, v355 + 1);
            std::to_string(&v424, v323);
            v359 = std::string::insert(&v424, 0, "_t", 2uLL);
            v360 = v359->__r_.__value_.__r.__words[0];
            v423.__r_.__value_.__r.__words[0] = v359->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v423.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v359->__r_.__value_.__r.__words[1] + 7);
            v361 = HIBYTE(v359->__r_.__value_.__r.__words[2]);
            v359->__r_.__value_.__r.__words[0] = 0;
            v359->__r_.__value_.__l.__size_ = 0;
            v359->__r_.__value_.__r.__words[2] = 0;
            if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v405.__r_.__value_.__l.__data_);
            v405.__r_.__value_.__r.__words[0] = v360;
            v405.__r_.__value_.__l.__size_ = v423.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v405.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v423.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v405.__r_.__value_.__s + 23) = v361;
            if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v424.__r_.__value_.__l.__data_);
              v361 = HIBYTE(v405.__r_.__value_.__r.__words[2]);
              v360 = v405.__r_.__value_.__r.__words[0];
            }
            v362 = 0;
            v363 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v364 = &__p;
            else
              v364 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v363 = __p.__r_.__value_.__l.__size_;
            v365 = (v361 & 0x80u) != 0;
            v366 = v405.__r_.__value_.__l.__size_;
            if ((v361 & 0x80u) == 0)
              v367 = &v405;
            else
              v367 = (std::string *)v360;
            if ((v361 & 0x80u) == 0)
              v368 = v361;
            else
              v368 = v405.__r_.__value_.__l.__size_;
            while (!v368)
            {
LABEL_609:
              if (v362 != -1)
              {
                if (v365)
                  v376 = v366;
                else
                  v376 = v361;
                std::string::erase(&__p, v362, v376);
                std::to_string(&v403, v323);
                v377 = std::string::insert(&v403, 0, "_transforms[", 0xCuLL);
                v378 = v377->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v423.__r_.__value_.__l.__data_ = *(_OWORD *)&v377->__r_.__value_.__l.__data_;
                v423.__r_.__value_.__r.__words[2] = v378;
                v377->__r_.__value_.__l.__size_ = 0;
                v377->__r_.__value_.__r.__words[2] = 0;
                v377->__r_.__value_.__r.__words[0] = 0;
                v379 = std::string::append(&v423, "]", 1uLL);
                v380 = v379->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v424.__r_.__value_.__l.__data_ = *(_OWORD *)&v379->__r_.__value_.__l.__data_;
                v424.__r_.__value_.__r.__words[2] = v380;
                v379->__r_.__value_.__l.__size_ = 0;
                v379->__r_.__value_.__r.__words[2] = 0;
                v379->__r_.__value_.__r.__words[0] = 0;
                if ((v424.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v381 = &v424;
                else
                  v381 = (std::string *)v424.__r_.__value_.__r.__words[0];
                if ((v424.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v382 = HIBYTE(v424.__r_.__value_.__r.__words[2]);
                else
                  v382 = v424.__r_.__value_.__l.__size_;
                std::string::insert(&__p, v362, (const std::string::value_type *)v381, v382);
                if (SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v424.__r_.__value_.__l.__data_);
                if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v423.__r_.__value_.__l.__data_);
                if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v403.__r_.__value_.__l.__data_);
                v383 = (char *)HIBYTE(v418);
                if ((v418 & 0x8000000000000000) != 0)
                  v383 = v417;
                v362 += (std::string::size_type)v383;
                v363 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v364 = &__p;
                else
                  v364 = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v363 = __p.__r_.__value_.__l.__size_;
                v361 = HIBYTE(v405.__r_.__value_.__r.__words[2]);
                v365 = (v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
                v366 = v405.__r_.__value_.__l.__size_;
                v367 = (v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? &v405
                     : (std::string *)v405.__r_.__value_.__r.__words[0];
                v368 = (v405.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? HIBYTE(v405.__r_.__value_.__r.__words[2])
                     : v405.__r_.__value_.__l.__size_;
                if (v363 >= v362)
                  continue;
              }
              goto LABEL_639;
            }
            v369 = (char *)v364 + v362;
            v370 = (char *)v364 + v363;
            v371 = v363 - v362;
            if (v371 >= v368)
            {
              v372 = v367->__r_.__value_.__s.__data_[0];
              do
              {
                v373 = v371 - v368;
                if (v373 == -1)
                  break;
                v374 = (char *)memchr(v369, v372, v373 + 1);
                if (!v374)
                  break;
                v375 = v374;
                if (!memcmp(v374, v367, v368))
                {
                  if (v375 == v370)
                    break;
                  v362 = v375 - (char *)v364;
                  goto LABEL_609;
                }
                v369 = v375 + 1;
                v371 = v370 - (v375 + 1);
              }
              while (v371 >= v368);
            }
LABEL_639:
            if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v404.__r_.__value_.__l.__data_);
              LOBYTE(v361) = *((_BYTE *)&v405.__r_.__value_.__s + 23);
            }
            if ((v361 & 0x80) != 0)
              operator delete(v405.__r_.__value_.__l.__data_);
            v310 = v401 + 1;
            if (v401 + 1 == v400)
              goto LABEL_657;
          }
          v317 = 0;
LABEL_499:
          v319 = (char *)v313 + v317;
          v320 = (char *)v313 + v314;
          v321 = v320 - ((char *)v313 + v317);
          if (v321 >= 1)
          {
            do
            {
              v322 = memchr(v319, 59, v321);
              if (!v322)
                break;
              if (*v322 == 59)
                goto LABEL_504;
              v319 = v322 + 1;
              v321 = v320 - v319;
            }
            while (v320 - v319 > 0);
          }
          v322 = v320;
LABEL_504:
          if (v322 == v320)
            v318 = -1;
          else
            v318 = v322 - (_BYTE *)v313;
          goto LABEL_507;
        }
LABEL_657:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v393 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v7 = v399;
          if (!__p.__r_.__value_.__r.__words[0])
          {
LABEL_661:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if ((char)v409 < 0)
              operator delete(v407);
            if (SHIBYTE(v418) < 0)
              operator delete(v416);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_324;
          }
        }
        else
        {
          v393 = &__p;
          v7 = v399;
        }
        v394 = strlen((const char *)v393);
        x_stream_write((uint64_t)v7, v393, v394);
        goto LABEL_661;
      }
    }
  }
  if (v14)
  {
    v227 = strlen(v14);
    x_stream_write((uint64_t)v7, v14, v227);
  }
LABEL_324:
  v228 = x_stream_get(v7);
  if (SHIBYTE(v420.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v420.__r_.__value_.__l.__data_);
  if (CI_VERBOSE_SIGNPOSTS())
  {
    v229 = ci_signpost_log_render();
    v230 = v422;
    if (v422 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v231 = v229;
      if (os_signpost_enabled(v229))
      {
        LOWORD(v420.__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1921E4000, v231, OS_SIGNPOST_INTERVAL_END, v230, "construct_shader", (const char *)&unk_192520C83, (uint8_t *)&v420, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)buf);
  return v228;
}

char *CI::append_arguments_to_kernel(uint64_t a1, char *__s1, char *__s2, _QWORD *a4)
{
  char *v5;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v5 = __s1;
  v7 = strstr(__s1, __s2);
  if (v7 > v5)
  {
    v8 = strchr(v7, 41);
    x_stream_write(a1, v5, v8 - v5);
    v15 = a4[1] - *a4;
    if (v15)
    {
      v16 = 0;
      v17 = v15 >> 3;
      if (v17 <= 1)
        v18 = 1;
      else
        v18 = v17;
      do
        x_stream_printf(a1, ", %s", v9, v10, v11, v12, v13, v14, *(_QWORD *)(*a4 + 8 * v16++));
      while (v18 != v16);
    }
    return v8;
  }
  return v5;
}

void CI::FoslAdapter::~FoslAdapter(CI::FoslAdapter *this)
{
  CI::FoslAdapter *v2;
  CI::FoslAdapter *v3;
  CI::FoslAdapter *v4;
  BOOL v5;
  uint64_t i;

  fosl_filter_destroyGraph(*((_QWORD *)this + 3));
  v2 = (CI::FoslAdapter *)*((_QWORD *)this + 22);
  if (v2 != (CI::FoslAdapter *)((char *)this + 184))
  {
    do
    {
      free(*((void **)v2 + 5));
      v3 = (CI::FoslAdapter *)*((_QWORD *)v2 + 1);
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = *(CI::FoslAdapter **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (CI::FoslAdapter *)*((_QWORD *)v2 + 2);
          v5 = *(_QWORD *)v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (v4 != (CI::FoslAdapter *)((char *)this + 184));
  }
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this + 232, *((_QWORD **)this + 30));
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this + 176, *((_QWORD **)this + 23));
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this + 128, *((_QWORD **)this + 17));
  for (i = 0; i != -48; i -= 24)
    std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this + i + 104, *(_QWORD **)((char *)this + i + 112));
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
}

uint64_t CI::gReleaseSurfaceBlockMap(CI *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  int v4;
  _QWORD *v5;

  v2 = 0x1ECF86000uLL;
  if ((v1 & 1) == 0)
  {
    v2 = 0x1ECF86000;
    if (v4)
    {
      v5 = (_QWORD *)operator new();
      v5[2] = 0;
      v5[1] = 0;
      *v5 = v5 + 1;
      CI::gReleaseSurfaceBlockMap(void)::gReleaseSurfaceBlockMap = (uint64_t)v5;
      v2 = 0x1ECF86000;
    }
  }
  return *(_QWORD *)(v2 + 4048);
}

uint64_t CI::SurfaceCacheEntry::SurfaceCacheEntry(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, int a7, int a8, const void *a9, NSObject *a10, const void *a11)
{
  unsigned int v12;
  unsigned int v17;
  __int128 v18;
  __IOSurface *CachedSurface;
  OSType PixelFormat;
  uint64_t v21;
  NSObject *v22;
  _BOOL4 v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  CI *v27;
  uint64_t CurrentCacheVolatileSize;
  unint64_t v29;
  unint64_t v30;
  NSObject *v31;
  uint64_t v32;
  unint64_t v33;
  double v34;
  double v35;
  unint64_t v36;
  const char *v37;
  const char *v38;
  unint64_t v39;
  const char *v40;
  unint64_t v41;
  const char *v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  const char *v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  double v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  uint64_t MemorySize;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v64;
  unsigned int v66;
  __int128 v67;
  uint64_t v68;
  _BYTE info[12];
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  _QWORD v73[5];

  v12 = a5;
  v73[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &unk_1E2EBED30;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = off_1E2EBBFD8;
  do
    v17 = __ldaxr(&dword_1ECF873D0[20]);
  while (__stlxr(v17 + 1, &dword_1ECF873D0[20]));
  *(_QWORD *)a1 = &off_1E2EBDAF8;
  *(_QWORD *)(a1 + 16) = &unk_1E2EBDB30;
  *(_QWORD *)(a1 + 112) = a3;
  *(_QWORD *)(a1 + 120) = a4;
  v18 = *a6;
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a6 + 2);
  *(_OWORD *)(a1 + 136) = v18;
  v67 = *a6;
  v68 = *((_QWORD *)a6 + 2);
  CachedSurface = CreateCachedSurface((__CVBuffer *)a3, (__CVBuffer *)a4, (void *)0x20, a5, (uint64_t)&v67, 0);
  *(_QWORD *)(a1 + 24) = CachedSurface;
  if (CachedSurface)
  {
    PixelFormat = IOSurfaceGetPixelFormat(CachedSurface);
    v21 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 128) = PixelFormat;
    if (v21)
      goto LABEL_57;
  }
  else
  {
    *(_DWORD *)(a1 + 128) = 0;
  }
  v64 = a8;
  v66 = bswap32(v12);
  v22 = ci_logger_render();
  v23 = os_log_type_enabled(v22, OS_LOG_TYPE_FAULT);
  if (v12 < 0x29)
  {
    if (!v23)
      goto LABEL_11;
    *(_DWORD *)info = 134218496;
    *(_QWORD *)&info[4] = a3;
    v70 = 2048;
    v71 = a4;
    v72 = 2048;
    v73[0] = v66;
    v24 = "Failed to allocate IOSurface (%zux%zu format:%ld)";
    v25 = v22;
    v26 = 32;
  }
  else
  {
    if (!v23)
      goto LABEL_11;
    *(_DWORD *)info = 134218754;
    *(_QWORD *)&info[4] = a3;
    v70 = 2048;
    v71 = a4;
    v72 = 1040;
    LODWORD(v73[0]) = 4;
    WORD2(v73[0]) = 2080;
    *(_QWORD *)((char *)v73 + 6) = &v66;
    v24 = "Failed to allocate IOSurface (%zux%zu format:%.4s)";
    v25 = v22;
    v26 = 38;
  }
  _os_log_fault_impl(&dword_1921E4000, v25, OS_LOG_TYPE_FAULT, v24, info, v26);
LABEL_11:
  v27 = (CI *)mach_timebase_info((mach_timebase_info_t)info);
  CurrentCacheVolatileSize = CI::GetCurrentCacheVolatileSize(v27);
  v29 = atomic_load(&CI::gCacheSize);
  v30 = v29 - CurrentCacheVolatileSize;
  v31 = ci_logger_render();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
    CI::SurfaceCacheEntry::SurfaceCacheEntry(v30, v31);
  v32 = CI::gCacheList;
  if (CI::gCacheList)
    v32 = *(_QWORD *)(CI::gCacheList + 16);
  v33 = atomic_load(&CI::gCacheSize);
  if (v33 >= 0x80000001)
  {
    v34 = (double)v33;
    v35 = 9.31322575e-10;
LABEL_21:
    v33 = llround(v34 * v35);
    goto LABEL_22;
  }
  if (v33 > 0x200000)
  {
    v34 = (double)v33;
    v35 = 0.000000953674316;
    goto LABEL_21;
  }
  if (v33 >= 0x801)
  {
    v34 = (double)v33;
    v35 = 0.0009765625;
    goto LABEL_21;
  }
LABEL_22:
  v36 = atomic_load(&CI::gCacheSize);
  v37 = "B";
  if (v36 <= 0x80000000)
  {
    if (v36 <= 0x200000)
    {
      if (v36 <= 0x800)
        v38 = "B";
      else
        v38 = "KB";
    }
    else
    {
      v38 = "MB";
    }
  }
  else
  {
    v38 = "GB";
  }
  v39 = llround((double)v30 * 9.31322575e-10);
  v40 = "GB";
  v41 = llround((double)v30 * 0.000000953674316);
  v42 = "MB";
  v43 = llround((double)v30 * 0.0009765625);
  if (v30 > 0x800)
  {
    v44 = "KB";
  }
  else
  {
    v43 = v30;
    v44 = "B";
  }
  if (v30 <= 0x200000)
  {
    v41 = v43;
    v42 = v44;
  }
  if (v30 <= 0x80000000)
  {
    v39 = v41;
    v40 = v42;
  }
  v45 = llround((double)(unint64_t)CI::gCacheSizePeak * 9.31322575e-10);
  v46 = "GB";
  v47 = llround((double)(unint64_t)CI::gCacheSizePeak * 0.000000953674316);
  v48 = "MB";
  v49 = llround((double)(unint64_t)CI::gCacheSizePeak * 0.0009765625);
  if ((unint64_t)CI::gCacheSizePeak > 0x800)
  {
    v50 = "KB";
  }
  else
  {
    v49 = CI::gCacheSizePeak;
    v50 = "B";
  }
  if ((unint64_t)CI::gCacheSizePeak <= 0x200000)
  {
    v47 = v49;
    v48 = v50;
  }
  if ((unint64_t)CI::gCacheSizePeak <= 0x80000000)
    v51 = v47;
  else
    v51 = v45;
  v52 = (double)(unint64_t)CI::gCacheNonVolatileSizePeak;
  if ((unint64_t)CI::gCacheSizePeak <= 0x80000000)
    v46 = v48;
  v53 = llround(v52 * 9.31322575e-10);
  v54 = llround(v52 * 0.000000953674316);
  v55 = llround(v52 * 0.0009765625);
  if ((unint64_t)CI::gCacheNonVolatileSizePeak > 0x800)
    v37 = "KB";
  else
    v55 = CI::gCacheNonVolatileSizePeak;
  if ((unint64_t)CI::gCacheNonVolatileSizePeak <= 0x200000)
    v56 = v55;
  else
    v56 = v54;
  if ((unint64_t)CI::gCacheNonVolatileSizePeak > 0x200000)
    v37 = "MB";
  if ((unint64_t)CI::gCacheNonVolatileSizePeak > 0x80000000)
  {
    v56 = v53;
    v37 = "GB";
  }
  snprintf(CI::SurfaceCacheEntry::SurfaceCacheEntry(IRect,ISize,unsigned int,iosurface_properties_t,unsigned int,unsigned int,__CFString const*,dispatch_queue_s *,void({block_pointer})(__IOSurface *))::msg, 0x400uLL, "Cache Stats: count=%ld size=%ld%s non-volatile=%ld%s peakCount=%ld peakSize=%ld%s peakNVSize=%ld%s", v32, v33, v38, v39, v40, CI::gCacheCountPeak, v51, v46, v56, v37);
  qword_1ECF86DA0 = (uint64_t)CI::SurfaceCacheEntry::SurfaceCacheEntry(IRect,ISize,unsigned int,iosurface_properties_t,unsigned int,unsigned int,__CFString const*,dispatch_queue_s *,void({block_pointer})(__IOSurface *))::msg;
  a8 = v64;
LABEL_57:
  v57 = *a2;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v57;
  *(_DWORD *)(a1 + 56) = a7;
  *(_DWORD *)(a1 + 60) = a8;
  *(_QWORD *)(a1 + 64) = CFRetain(a9);
  if (a10)
    dispatch_retain(a10);
  *(_QWORD *)(a1 + 72) = a10;
  *(_QWORD *)(a1 + 80) = 0;
  if (a11)
    *(_QWORD *)(a1 + 80) = _Block_copy(a11);
  MemorySize = SurfaceGetMemorySize(*(__IOSurface **)(a1 + 24));
  *(_QWORD *)(a1 + 104) = MemorySize;
  do
    v59 = __ldaxr(&CI::gCacheSize);
  while (__stlxr(v59 + MemorySize, &CI::gCacheSize));
  v60 = CI::gCacheSizePeak;
  v61 = atomic_load(&CI::gCacheSize);
  if (v60 < v61)
  {
    v62 = atomic_load(&CI::gCacheSize);
    CI::gCacheSizePeak = v62;
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1;
  return a1;
}

uint64_t CI::GetCurrentCacheVolatileSize(CI *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  if (!CI::gCacheList)
    return 0;
  v1 = *(_QWORD *)(CI::gCacheList + 8);
  if (v1 == CI::gCacheList)
    return 0;
  result = 0;
  do
  {
    v3 = *(_QWORD *)(v1 + 16);
    if (!*(_QWORD *)(v3 + 88) && *(_DWORD *)(v3 + 96) != 8)
      result += *(_QWORD *)(v3 + 104);
    v1 = *(_QWORD *)(v1 + 8);
  }
  while (v1 != CI::gCacheList);
  return result;
}

void CI::SurfaceCacheEntry::~SurfaceCacheEntry(CI::SurfaceCacheEntry *this)
{
  uint64_t v2;
  unint64_t v3;
  const void *v4;
  const void *v5;
  NSObject *v6;
  const void *v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E2EBDAF8;
  *((_QWORD *)this + 2) = &unk_1E2EBDB30;
  v2 = *((_QWORD *)this + 13);
  do
    v3 = __ldaxr(&CI::gCacheSize);
  while (__stlxr(v3 - v2, &CI::gCacheSize));
  v4 = (const void *)*((_QWORD *)this + 3);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 7) = 0;
  v5 = (const void *)*((_QWORD *)this + 8);
  if (v5)
    CFRelease(v5);
  *((_QWORD *)this + 8) = 0;
  v6 = *((_QWORD *)this + 9);
  if (v6)
    dispatch_release(v6);
  *((_QWORD *)this + 9) = 0;
  v7 = (const void *)*((_QWORD *)this + 10);
  if (v7)
    _Block_release(v7);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 2) = off_1E2EBBFD8;
  do
    v8 = __ldaxr(&dword_1ECF873D0[20]);
  while (__stlxr(v8 - 1, &dword_1ECF873D0[20]));
}

{
  CI::SurfaceCacheEntry::~SurfaceCacheEntry(this);
  JUMPOUT(0x194025AACLL);
}

void CI::SurfaceCacheEntry::setFillQueue(CI::SurfaceCacheEntry *this, dispatch_object_t object)
{
  NSObject *v4;

  if (object)
    dispatch_retain(object);
  v4 = *((_QWORD *)this + 9);
  if (v4)
    dispatch_release(v4);
  *((_QWORD *)this + 9) = object;
}

void CI::SurfaceCacheEntry::setFillBlock(uint64_t a1, void *aBlock)
{
  void *v3;
  const void *v4;

  if (aBlock)
    v3 = _Block_copy(aBlock);
  else
    v3 = 0;
  v4 = *(const void **)(a1 + 80);
  if (v4)
    _Block_release(v4);
  *(_QWORD *)(a1 + 80) = v3;
}

void `non-virtual thunk to'CI::SurfaceCacheEntry::~SurfaceCacheEntry(CI::SurfaceCacheEntry *this)
{
  CI::SurfaceCacheEntry::~SurfaceCacheEntry((CI::SurfaceCacheEntry *)((char *)this - 16));
}

{
  CI::SurfaceCacheEntry::~SurfaceCacheEntry((CI::SurfaceCacheEntry *)((char *)this - 16));
  JUMPOUT(0x194025AACLL);
}

void CI::SurfaceCacheEntry::fillAsync(CI::SurfaceCacheEntry *this)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    if (*((_QWORD *)this + 10))
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = ___ZN2CI17SurfaceCacheEntry9fillAsyncEv_block_invoke;
      block[3] = &__block_descriptor_tmp_3_7;
      block[4] = this;
      dispatch_async(v2, block);
      CI::gCacheBytesFilled += *((_QWORD *)this + 13);
    }
  }
}

void ___ZN2CI17SurfaceCacheEntry9fillAsyncEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (CI_VERBOSE_SIGNPOSTS())
  {
    v2 = ci_signpost_log_cache();
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)v6 = 0;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CacheEntryFillAsync", (const char *)&unk_192520C83, v6, 2u);
    }
  }
  v3 = mach_absolute_time();
  (*(void (**)(void))(*(_QWORD *)(v1 + 80) + 16))();
  v4 = mach_absolute_time() - v3;
  do
    v5 = __ldxr((unint64_t *)&CI::gTimeFilling);
  while (__stxr(v5 + v4, (unint64_t *)&CI::gTimeFilling));
  ___ZN2CI17SurfaceCacheEntry9fillAsyncEv_block_invoke_1();
}

void ___ZN2CI17SurfaceCacheEntry9fillAsyncEv_block_invoke_1()
{
  NSObject *v0;
  uint8_t v1[16];

  if (CI_VERBOSE_SIGNPOSTS())
  {
    v0 = ci_signpost_log_cache();
    if (os_signpost_enabled(v0))
    {
      *(_WORD *)v1 = 0;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CacheEntryFillAsync", (const char *)&unk_192520C83, v1, 2u);
    }
  }
}

uint64_t CI::SurfaceCacheEntry::print_core(CI::SurfaceCacheEntry *this, __sFILE *a2)
{
  const __CFString *v4;
  const char *CStringPtr;
  __IOSurface *v6;
  IOSurfaceID ID;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  const char *v13;
  BOOL v14;
  unint64_t v15;
  const char *v16;
  char buffer[1024];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFString *)*((_QWORD *)this + 8);
  if (v4)
  {
    CStringPtr = CFStringGetCStringPtr(*((CFStringRef *)this + 8), 0x8000100u);
    if (!CStringPtr)
    {
      CStringPtr = buffer;
      if (!CFStringGetCString(v4, buffer, 1024, 0x8000100u))
        CStringPtr = 0;
    }
  }
  else
  {
    CStringPtr = buffer;
  }
  v6 = (__IOSurface *)*((_QWORD *)this + 3);
  ID = IOSurfaceGetID(v6);
  fprintf(a2, "surface=%p(%0.4u)", v6, ID);
  if (*((_DWORD *)this + 32) < 0x29u)
    fprintf(a2, " fmt=%-4d");
  else
    fprintf(a2, " fmt=%.4s");
  fprintf(a2, " width=%-4zu height=%-4zu", *((_QWORD *)this + 14), *((_QWORD *)this + 15));
  fprintf(a2, " x=%-4d y=%-4d w=%-4zu h=%-4zu ctx=%-4u img=%-4u vol=%-2d", *((_DWORD *)this + 8), *((_DWORD *)this + 9), *((_QWORD *)this + 5), *((_QWORD *)this + 6), *((_DWORD *)this + 14), *((_DWORD *)this + 15), *((_DWORD *)this + 24));
  v8 = *((_QWORD *)this + 13);
  v9 = llround((double)v8 * 9.31322575e-10);
  v10 = llround((double)v8 * 0.000000953674316);
  v11 = "MB";
  v12 = llround((double)v8 * 0.0009765625);
  if (v8 <= 0x800)
    v12 = *((_QWORD *)this + 13);
  v13 = "B";
  if (v8 > 0x800)
    v13 = "KB";
  if (v8 <= 0x200000)
  {
    v10 = v12;
    v11 = v13;
  }
  v14 = v8 > 0x80000000;
  if (v8 <= 0x80000000)
    v15 = v10;
  else
    v15 = v9;
  if (v14)
    v16 = "GB";
  else
    v16 = v11;
  fprintf(a2, " size=%ld%s", v15, v16);
  if (v4)
    fprintf(a2, " id='%s'", CStringPtr);
  else
    fwrite(" id=nil", 7uLL, 1uLL, a2);
  if (!*((_QWORD *)this + 8) || SurfaceIsVolatileEmpty(*((__IOSurface **)this + 3)))
    fwrite(" empty", 6uLL, 1uLL, a2);
  if (*((_QWORD *)this + 11))
    fprintf(a2, " use=%ld", *((_QWORD *)this + 11));
  if (*((_QWORD *)this + 19))
    fprintf(a2, " pool=%lld", *((_QWORD *)this + 19));
  return fputc(10, a2);
}

uint64_t CI::SurfaceCacheEntry::print(CI::SurfaceCacheEntry *this, __sFILE *__stream)
{
  fwrite("SurfaceCacheEntry ", 0x12uLL, 1uLL, __stream);
  return CI::SurfaceCacheEntry::print_core(this, __stream);
}

uint64_t GetSurfaceFromCacheAndFill(__int128 *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v15;
  NSObject *v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  dispatch_queue_t *v21;
  int v22;
  int v23;
  int v25;
  _QWORD v26[4];
  int v27;
  _QWORD block[7];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE buf[32];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v37 = 0;
  v38 = &v37;
  v39 = 0x2000000000;
  v40 = 0;
  if (*((_QWORD *)a1 + 1))
  {
    v8 = 0;
    if (a5)
    {
      v9 = a2;
      if ((_DWORD)a2)
      {
        if (*((_QWORD *)a1 + 2))
        {
          v8 = 0;
          if (a6)
          {
            if (a7)
            {
              if ((a2 & 0xFD000000) == 0x2D000000 || (int)a2 >> 24 == 124 || (int)a2 >> 24 == 38)
              {
                v36 = bswap32(a2);
                v15 = ci_logger_cache();
                if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "GetSurfaceFromCacheAndFill";
                  *(_WORD *)&buf[12] = 1042;
                  *(_DWORD *)&buf[14] = 4;
                  *(_WORD *)&buf[18] = 2082;
                  *(_QWORD *)&buf[20] = &v36;
                  _os_log_impl(&dword_1921E4000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s  was passed compressed format '%{public}.4s'.  Ignoring compression.\n", buf, 0x1Cu);
                }
                LODWORD(v9) = equivalent_uncompressed_format(v9);
              }
              if (a3 && a4)
              {
                v16 = ci_logger_cache();
                v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
                v18 = 0;
                if (v17)
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "GetSurfaceFromCacheAndFill";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = a3;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = a4;
                  _os_log_impl(&dword_1921E4000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s  was passed contextIndex=%d and imageIndex=%d.  Ignoring imageIndex.\n", buf, 0x18u);
                  v18 = 0;
                }
              }
              else
              {
                v18 = a4;
              }
              *(_QWORD *)buf = 0;
              *(_QWORD *)&buf[8] = buf;
              *(_QWORD *)&buf[16] = 0x2000000000;
              *(_QWORD *)&buf[24] = 0;
              if (GetQueue(void)::onceToken != -1)
              {
                v25 = v18;
                dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
                v18 = v25;
              }
              v19 = MEMORY[0x1E0C809B0];
              block[0] = MEMORY[0x1E0C809B0];
              block[1] = 0x40000000;
              block[2] = __GetSurfaceFromCacheAndFill_block_invoke;
              block[3] = &unk_1E2EC1030;
              v33 = a3;
              v34 = v18;
              v29 = *a1;
              v20 = *((_QWORD *)a1 + 2);
              v35 = v9;
              v30 = v20;
              v31 = a5;
              block[4] = a7;
              block[5] = &v37;
              v32 = a6;
              block[6] = buf;
              dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
              v21 = *(dispatch_queue_t **)(*(_QWORD *)&buf[8] + 24);
              if (v21)
              {
                if (v21[9])
                {
                  dispatch_sync(v21[9], &__block_literal_global_5_0);
                  v21 = *(dispatch_queue_t **)(*(_QWORD *)&buf[8] + 24);
                }
                CI::Object::unref((CI::Object *)v21);
              }
              v22 = CI_LOG_SURFACE_CACHE();
              if (v22)
              {
                v23 = v22;
                if (GetQueue(void)::onceToken != -1)
                  dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
                v26[0] = v19;
                v26[1] = 0x40000000;
                v26[2] = __GetSurfaceFromCacheAndFill_block_invoke_22;
                v26[3] = &__block_descriptor_tmp_23_0;
                v27 = v23;
                dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, v26);
              }
              v8 = v38[3];
              _Block_object_dispose(buf, 8);
            }
          }
        }
      }
    }
  }
  else
  {
    v8 = 0;
  }
  _Block_object_dispose(&v37, 8);
  return v8;
}

uint64_t CI::FindCacheEntryWithInfo(uint64_t a1, int a2, uint64_t a3, int a4, int a5, CFStringRef theString1)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  const __CFString *v18;

  v6 = CI::gCacheList;
  if (!CI::gCacheList)
    return 0;
  v7 = *(_QWORD *)(CI::gCacheList + 8);
  if (v7 == CI::gCacheList)
    return 0;
  while (1)
  {
    v14 = *(_QWORD *)(v7 + 16);
    if (*(_DWORD *)(v14 + 56) == a4 && *(_DWORD *)(v14 + 60) == a5 && *(_QWORD *)(v14 + 24))
    {
      v15 = *(_DWORD *)(v14 + 32) == *(_DWORD *)a1 && *(_DWORD *)(v14 + 36) == *(_DWORD *)(a1 + 4);
      v16 = v15 && *(_QWORD *)(v14 + 40) == *(_QWORD *)(a1 + 8);
      if (v16
        && *(_QWORD *)(v14 + 48) == *(_QWORD *)(a1 + 16)
        && *(_DWORD *)(v14 + 128) == a2
        && *(_QWORD *)(v14 + 144) == *(_QWORD *)(a3 + 8)
        && *(_DWORD *)(v14 + 136) == *(_DWORD *)a3
        && *(_QWORD *)(v14 + 152) == *(_QWORD *)(a3 + 16))
      {
        v18 = *(const __CFString **)(v14 + 64);
        if (v18)
        {
          if (CFStringCompare(theString1, v18, 0) == kCFCompareEqualTo)
            break;
        }
      }
    }
    v7 = *(_QWORD *)(v7 + 8);
    if (v7 == v6)
      return 0;
  }
  return v14;
}

void CI::SurfaceCacheEntry::setIdentifier(CI::SurfaceCacheEntry *this, CFTypeRef cf)
{
  const void *v4;

  if (cf)
    CFRetain(cf);
  v4 = (const void *)*((_QWORD *)this + 8);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 8) = cf;
}

_QWORD *CI::MoveCacheEntryToEnd(CI *this, CI::SurfaceCacheEntry *a2)
{
  uint64_t *v2;
  _QWORD *result;
  uint64_t v4;
  CI *v5;

  v5 = this;
  std::list<CI::attached_surface_t *>::remove((_QWORD *)CI::gCacheList, &v5);
  v2 = (uint64_t *)CI::gCacheList;
  result = operator new(0x18uLL);
  result[2] = v5;
  v4 = *v2;
  *result = *v2;
  result[1] = v2;
  *(_QWORD *)(v4 + 8) = result;
  *v2 = (uint64_t)result;
  ++v2[2];
  return result;
}

CFIndex CI::FindUnusedCacheEntryWithInfo(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int a5, uint64_t a6, int a7, int a8, char a9, _BYTE *a10, CFArrayRef theArray)
{
  uint64_t v12;
  int v13;
  uint64_t v18;
  const __CFArray *v19;
  int v20;
  CFIndex result;
  CFIndex v22;
  uint64_t v23;
  CFIndex v24;
  CFIndex v25;
  int v26;
  CFIndex v27;
  CFIndex v28;
  CFIndex v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v34;
  CFIndex v35;
  int v36;
  CFIndex v37;
  uint64_t v38;
  uint64_t v39;
  BOOL IsVolatileEmpty;
  CFIndex v41;
  CFIndex v42;
  BOOL v43;
  BOOL v44;
  int v45;
  int v46;
  CFIndex v47;
  CFIndex v48;
  CFIndex v49;
  CFIndex v50;
  CFIndex v51;
  CFIndex v52;
  CFIndex v53;
  CFIndex v54;
  CFIndex v55;
  CFIndex v56;
  CFIndex v57;
  CFIndex v58;
  CFIndex v59;
  CFIndex v60;
  int v62;
  int v63;
  int v64;
  const __CFArray *v66;
  const __CFArray *v67;
  const __CFArray *v68;
  int v69;
  CFRange v70;

  v12 = a6;
  v13 = a5;
  if (a10)
    *a10 = 0;
  v18 = CI::gCacheList;
  if (!CI::gCacheList)
    return 0;
  v19 = theArray;
  if (theArray)
  {
    v20 = a7;
    result = CFArrayGetCount(theArray);
    if (!result)
      return result;
    v22 = result;
    v18 = CI::gCacheList;
    a7 = v20;
    v12 = a6;
    v13 = a5;
    v19 = theArray;
  }
  else
  {
    v22 = 0;
  }
  v23 = *(_QWORD *)(v18 + 8);
  v69 = a8;
  if (v23 != v18)
  {
    v45 = a7;
    v46 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    while (1)
    {
      v29 = *(_QWORD *)(v23 + 16);
      v30 = *(_QWORD *)(v29 + 112);
      v31 = *(_QWORD *)(v29 + 120);
      v34 = v30 < a1 || v30 > a3 || v31 < a2 || v31 > a4;
      if (v34
        || *(_DWORD *)(v29 + 128) != v13
        || *(_QWORD *)(v29 + 144) != *(_QWORD *)(v12 + 8)
        || *(_DWORD *)(v29 + 136) != *(_DWORD *)v12
        || *(_QWORD *)(v29 + 152) != *(_QWORD *)(v12 + 16))
      {
        goto LABEL_86;
      }
      if (*(_QWORD *)(v29 + 88))
      {
        v51 = v28;
        v53 = v24;
        v62 = v26;
        v57 = v25;
        v47 = v22;
        v66 = v19;
        v35 = v27;
        v36 = CI_USE_INFLIGHT_INTERMEDIATES();
        v27 = v35;
        if (v36 && !v35 && *(_QWORD *)(v29 + 88) == 1 && *(_DWORD *)(v29 + 96) == -1 && *(_DWORD *)(v29 + 56) == v45)
        {
          v28 = v29;
          v27 = v29;
          v24 = v29;
          v19 = v66;
          v22 = v47;
          v25 = v57;
LABEL_49:
          v26 = v62;
          goto LABEL_82;
        }
        v26 = v62;
        v28 = v51;
        if ((v62 & 1) != 0)
        {
          v19 = v66;
          v22 = v47;
          v24 = v53;
          v25 = v57;
        }
        else
        {
          v19 = v66;
          v22 = v47;
          v24 = v53;
          if (!v35)
            v26 = (*(_QWORD *)(v29 + 88) > 0) | v62;
          v25 = v57;
        }
        goto LABEL_82;
      }
      if (v22 >= 1)
      {
        v52 = v28;
        v54 = v24;
        v62 = v26;
        v48 = v27;
        v58 = v25;
        v67 = v19;
        v70.location = 0;
        v37 = v22;
        v70.length = v22;
        if (CFArrayGetFirstIndexOfValue(v19, v70, *(const void **)(v29 + 24)) < 0)
        {
          v19 = v67;
          v22 = v37;
          v24 = v54;
          v25 = v58;
          v27 = v48;
          v28 = v52;
          goto LABEL_49;
        }
        v22 = v37;
        v28 = v52;
        if (v52)
        {
LABEL_38:
          if (!v46)
            v46 = *(_DWORD *)(v29 + 60);
          goto LABEL_63;
        }
        v38 = *(_QWORD *)(v29 + 64);
        if (*(_DWORD *)(v29 + 60))
        {
          v19 = v67;
          v27 = v48;
          if (v38)
          {
            if (v46)
            {
              v28 = 0;
              goto LABEL_65;
            }
LABEL_61:
            IsVolatileEmpty = SurfaceIsVolatileEmpty(*(__IOSurface **)(v29 + 24));
            v28 = 0;
            v22 = v37;
            if (!IsVolatileEmpty)
              goto LABEL_38;
            v28 = v29;
LABEL_63:
            v19 = v67;
            v25 = v58;
            v27 = v48;
LABEL_66:
            v26 = v62;
            v24 = v54;
            if (!v54)
            {
              if (*(int *)(v29 + 96) >= 7)
                v24 = 0;
              else
                v24 = v29;
            }
            goto LABEL_82;
          }
        }
        else
        {
          v19 = v67;
          v27 = v48;
          if (v38)
            goto LABEL_61;
        }
        v28 = v29;
LABEL_65:
        v25 = v58;
        goto LABEL_66;
      }
      if (v28)
      {
        if (v24)
          goto LABEL_43;
      }
      else
      {
        v39 = *(_QWORD *)(v29 + 64);
        if (*(_DWORD *)(v29 + 60))
        {
          if (!v39)
            goto LABEL_74;
          if (!v46)
          {
            v68 = v19;
            v56 = v24;
            v60 = v25;
            v50 = v22;
            v64 = v26;
            v42 = v27;
            v43 = SurfaceIsVolatileEmpty(*(__IOSurface **)(v29 + 24));
            v27 = v42;
            v24 = v56;
            v25 = v60;
            v26 = v64;
            v22 = v50;
            if (v43)
            {
              v46 = 0;
              v28 = v29;
              goto LABEL_93;
            }
            goto LABEL_92;
          }
          v28 = 0;
          if (v24)
            goto LABEL_43;
        }
        else
        {
          if (!v39)
          {
LABEL_74:
            v28 = *(_QWORD *)(v23 + 16);
            if (v24)
              goto LABEL_43;
            goto LABEL_75;
          }
          v55 = v24;
          v59 = v25;
          v63 = v26;
          v49 = v27;
          v41 = v22;
          v68 = v19;
          if (!SurfaceIsVolatileEmpty(*(__IOSurface **)(v29 + 24)))
          {
            v22 = v41;
            v24 = v55;
            v25 = v59;
            v27 = v49;
            v26 = v63;
            if (v46)
            {
              v28 = 0;
              goto LABEL_93;
            }
LABEL_92:
            v28 = 0;
            v46 = *(_DWORD *)(v29 + 60);
LABEL_93:
            v19 = v68;
            if (v24)
            {
LABEL_43:
              if (v25)
                goto LABEL_82;
              goto LABEL_44;
            }
            goto LABEL_75;
          }
          v28 = v29;
          v19 = v68;
          v22 = v41;
          v24 = v55;
          v25 = v59;
          v27 = v49;
          v26 = v63;
          if (v55)
            goto LABEL_43;
        }
      }
LABEL_75:
      if (*(int *)(v29 + 96) > 6)
      {
        v24 = 0;
        if (v25)
          goto LABEL_82;
LABEL_44:
        if (*(int *)(v29 + 96) > 6)
        {
          v25 = 0;
        }
        else if (*(_DWORD *)(v29 + 60))
        {
          v25 = v29;
        }
        else
        {
          v25 = 0;
        }
        goto LABEL_82;
      }
      if (*(_DWORD *)(v29 + 60))
        v24 = 0;
      else
        v24 = v29;
      if (!v25)
        goto LABEL_44;
LABEL_82:
      if (v24 && v28 && v27 && (v26 & 1) != 0)
        goto LABEL_96;
LABEL_86:
      v23 = *(_QWORD *)(v23 + 8);
      if (v23 == v18)
        goto LABEL_96;
    }
  }
  v28 = 0;
  v27 = 0;
  LOBYTE(v26) = 0;
  v25 = 0;
  v24 = 0;
LABEL_96:
  if (a10)
    *a10 = v26 & 1;
  result = v27 ? v27 : v28;
  if (!v27 && (a9 & 1) == 0)
  {
    result = v28;
    if (!v28)
    {
      result = v24;
      if (!v24)
      {
        if (!v69)
          return 0;
        v44 = *(_QWORD *)(CI::gCacheList + 16) < 0x201uLL || v25 == 0;
        result = v25;
        if (v44)
          return 0;
      }
    }
  }
  return result;
}

_QWORD *CI::AppendCacheEntry(CI *this, CI::SurfaceCacheEntry *a2)
{
  uint64_t *v3;
  _QWORD *result;
  uint64_t v5;

  v3 = (uint64_t *)CI::gCacheList;
  if (!CI::gCacheList)
  {
    v3 = (uint64_t *)operator new();
    *v3 = (uint64_t)v3;
    v3[1] = (uint64_t)v3;
    v3[2] = 0;
    CI::gCacheList = (uint64_t)v3;
  }
  result = operator new(0x18uLL);
  result[2] = this;
  v5 = *v3;
  *result = *v3;
  result[1] = v3;
  *(_QWORD *)(v5 + 8) = result;
  *v3 = (uint64_t)result;
  ++v3[2];
  if (CI::gCacheList)
  {
    if ((unint64_t)CI::gCacheCountPeak < *(_QWORD *)(CI::gCacheList + 16))
      CI::gCacheCountPeak = *(_QWORD *)(CI::gCacheList + 16);
  }
  return result;
}

unint64_t CI::RemoveFromStartUntilAtOrBelowCapacity(CI *this)
{
  unint64_t result;
  const CI::SurfaceCacheEntry *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t i;
  CI *v8;
  uint64_t v9;
  uint64_t j;
  CI *v11;
  uint64_t v12;
  unint64_t v13;
  CI *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  CI *v21;
  __int128 v22;
  __int128 v23;
  unsigned __int128 v24;

  result = CI_SURFACE_CACHE_CAPACITY();
  if (CI::gCacheList)
  {
    v3 = result;
    v4 = atomic_load(&CI::gCacheSize);
    v5 = CI::gCacheList;
    v6 = *(_QWORD *)(CI::gCacheList + 16);
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    for (i = *(_QWORD *)(CI::gCacheList + 8); i != v5; i = *(_QWORD *)(i + 8))
    {
      v8 = *(CI **)(i + 16);
      v21 = v8;
      if (v4 <= v3 && v6 < 0x101)
        break;
      if (!CI::isPriorEntry(v8, v2))
      {
        v4 -= *((_QWORD *)v21 + 13);
        std::deque<CI::SurfaceCacheEntry *>::push_back(&v22, &v21);
        --v6;
      }
    }
    v9 = CI::gCacheList;
    for (j = *(_QWORD *)(CI::gCacheList + 8); j != v9; j = *(_QWORD *)(j + 8))
    {
      v11 = *(CI **)(j + 16);
      v21 = v11;
      if (v4 <= v3 && v6 < 0x101)
        break;
      if (CI::isPriorEntry(v11, v2) && !*((_QWORD *)v21 + 11))
      {
        v4 -= *((_QWORD *)v21 + 13);
        std::deque<CI::SurfaceCacheEntry *>::push_back(&v22, &v21);
        --v6;
      }
    }
    v12 = *((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1) && *(_QWORD *)(CI::gCacheList + 16) >= 0x401uLL)
    {
      v13 = v24;
      do
      {
        v14 = *(CI **)(*(_QWORD *)(*((_QWORD *)&v22 + 1) + ((v13 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v13 & 0x1FF));
        CI::RemoveCacheEntry(v14, v2);
        if (v14)
          (*(void (**)(CI *))(*(_QWORD *)v14 + 8))(v14);
        v12 = *((_QWORD *)&v24 + 1) - 1;
        v13 = v24 + 1;
        v24 = __PAIR128__(*((unint64_t *)&v24 + 1), (uint64_t)v24 + 1) + __PAIR128__(-1, 0);
        if (v13 >= 0x400)
        {
          operator delete(**((void ***)&v22 + 1));
          v13 = v24 - 512;
          *((_QWORD *)&v22 + 1) += 8;
          *(_QWORD *)&v24 = v24 - 512;
          v12 = *((_QWORD *)&v24 + 1);
        }
      }
      while (v12 && *(_QWORD *)(CI::gCacheList + 16) >= 0x401uLL);
    }
    if ((_QWORD)v23 != *((_QWORD *)&v22 + 1))
    {
      v15 = (_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * ((unint64_t)v24 >> 9));
      v16 = *v15 + 8 * (v24 & 0x1FF);
      v17 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + (((unint64_t)(v24 + v12) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((v24 + v12) & 0x1FF);
      if (v16 != v17)
      {
        v18 = 0;
        while (1)
        {
          v19 = *(_QWORD *)v16;
          if (!*(_DWORD *)(*(_QWORD *)v16 + 60))
            goto LABEL_34;
          if (!v18)
            break;
LABEL_35:
          v16 += 8;
          if (v16 - *v15 == 4096)
          {
            v20 = v15[1];
            ++v15;
            v16 = v20;
          }
          if (v16 == v17)
            return std::deque<CI::SurfaceCacheEntry *>::~deque[abi:nn180100](&v22);
        }
        if (!*(_QWORD *)(v19 + 64))
        {
          v18 = *(_DWORD *)(*(_QWORD *)v16 + 60);
          goto LABEL_35;
        }
        if (!SurfaceIsVolatileEmpty(*(__IOSurface **)(v19 + 24)))
        {
          v18 = *(_DWORD *)(v19 + 60);
          goto LABEL_35;
        }
        v18 = 0;
LABEL_34:
        CI::RemoveCacheEntry((CI *)v19, v2);
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        goto LABEL_35;
      }
    }
    return std::deque<CI::SurfaceCacheEntry *>::~deque[abi:nn180100](&v22);
  }
  return result;
}

void CI::UpdateVolatilityStats(CI *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __CFDictionary *Mutable;
  const void *v9;
  __CFString *v10;
  __CFString *v11;

  v1 = CI::gCacheNonVolatileSizePeak;
  atomic_store(CI::GetCurrentCacheVolatileSize(this), &CI::gVolatileSize);
  v2 = atomic_load(&CI::gCacheSize);
  v3 = atomic_load(&CI::gVolatileSize);
  v4 = v2 - v3;
  if (v2 - v3 > v1)
  {
    if (CI_TRACE_PEAK_SURFACE_CACHE())
    {
      if (CI::gPeakNonVolatileList)
        CFArrayRemoveAllValues((CFMutableArrayRef)CI::gPeakNonVolatileList);
      else
        CI::gPeakNonVolatileList = (uint64_t)CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v5 = CI::gCacheList;
      if (CI::gCacheList)
      {
        v6 = *(_QWORD *)(CI::gCacheList + 8);
        if (v6 != CI::gCacheList)
        {
          do
          {
            v7 = *(_QWORD *)(v6 + 16);
            if (*(_QWORD *)(v7 + 88) || *(_DWORD *)(v7 + 96) == 8)
            {
              Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              __CFDictionary::setValue(Mutable, CFSTR("id"), *(const void **)(v7 + 64), v9);
              __CFDictionary::setValue(Mutable, (__CFDictionary *)CFSTR("x"), (const __CFString *)*(int *)(v7 + 32));
              __CFDictionary::setValue(Mutable, (__CFDictionary *)CFSTR("y"), (const __CFString *)*(int *)(v7 + 36));
              __CFDictionary::setValue(Mutable, (__CFDictionary *)CFSTR("w"), *(const __CFString **)(v7 + 40));
              __CFDictionary::setValue(Mutable, (__CFDictionary *)CFSTR("h"), *(const __CFString **)(v7 + 48));
              __CFDictionary::setValue(Mutable, (__CFDictionary *)CFSTR("size"), *(const __CFString **)(v7 + 104));
              v10 = (__CFString *)*(unsigned int *)(v7 + 56);
              if ((_DWORD)v10)
                __CFDictionary::setValue(Mutable, (__CFDictionary *)CFSTR("ctxIndex"), v10);
              v11 = (__CFString *)*(unsigned int *)(v7 + 60);
              if ((_DWORD)v11)
                __CFDictionary::setValue(Mutable, (__CFDictionary *)CFSTR("imgIndex"), v11);
              if (CI::gPeakNonVolatileList)
                CFArrayAppendValue((CFMutableArrayRef)CI::gPeakNonVolatileList, Mutable);
            }
            v6 = *(_QWORD *)(v6 + 8);
          }
          while (v6 != v5);
        }
      }
    }
    CI::gCacheNonVolatileSizePeak = v4;
  }
}

void CI::LogCacheState(CI *this, uint64_t a2, const char *a3)
{
  int v4;
  CI *v5;
  uint64_t v6;
  CI *v7;
  uint64_t CurrentCacheVolatileSize;
  unint64_t v9;
  CFStringRef v10;
  CFStringRef v11;
  NSObject *v12;
  CFStringRef v13;
  CFStringRef v14;
  NSObject *v15;
  _QWORD v16[9];
  uint8_t buf[4];
  CFStringRef v18;
  uint64_t v19;

  v4 = (int)this;
  v19 = *MEMORY[0x1E0C80C00];
  v5 = (CI *)CI_SURFACE_CACHE_CAPACITY();
  if (CI::gCacheList)
  {
    v6 = *(_QWORD *)(CI::gCacheList + 16);
    if (v6)
    {
      v7 = v5;
      CurrentCacheVolatileSize = CI::GetCurrentCacheVolatileSize(v5);
      v9 = atomic_load(&CI::gCacheSize);
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 0x40000000;
      v16[2] = ___ZN2CIL13LogCacheStateEbPKc_block_invoke;
      v16[3] = &__block_descriptor_tmp_100;
      v16[4] = a2;
      v16[5] = v6;
      v16[6] = v9 - CurrentCacheVolatileSize;
      v16[7] = CurrentCacheVolatileSize;
      v16[8] = v7;
      v10 = stream_to_string((uint64_t)v16);
      if (v10)
      {
        v11 = v10;
        v12 = ci_logger_cache();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          v18 = v11;
          _os_log_impl(&dword_1921E4000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
        }
        CFRelease(v11);
      }
      if (v4)
      {
        v13 = stream_to_string((uint64_t)&__block_literal_global_103);
        if (v13)
        {
          v14 = v13;
          v15 = ci_logger_cache();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            v18 = v14;
            _os_log_impl(&dword_1921E4000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
          }
          CFRelease(v14);
        }
      }
    }
  }
}

uint64_t GetValidSurfaceFromCache(__int128 *a1, int a2, __int128 *a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v8;
  NSObject *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD v22[4];
  int v23;
  _QWORD block[5];
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _BYTE buf[24];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)a1 + 1))
    return 0;
  v8 = 0;
  if (a7 && a2 && *((_QWORD *)a1 + 2))
  {
    if (a4 && a5)
    {
      v15 = ci_logger_cache();
      v16 = 0;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "GetValidSurfaceFromCache";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = a4;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = a5;
        _os_log_impl(&dword_1921E4000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s  was passed contextIndex=%d and imageIndex=%d.  Ignoring imageIndex.\n", buf, 0x18u);
        v16 = 0;
      }
    }
    else
    {
      v16 = a5;
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2000000000;
    v35 = 0;
    if (GetQueue(void)::onceToken != -1)
      dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
    v17 = MEMORY[0x1E0C809B0];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __GetValidSurfaceFromCache_block_invoke;
    block[3] = &unk_1E2EC1100;
    v25 = *a1;
    v26 = *((_QWORD *)a1 + 2);
    v27 = *a3;
    v18 = *((_QWORD *)a3 + 2);
    v30 = a2;
    v31 = a4;
    v28 = v18;
    v29 = a7;
    block[4] = buf;
    v32 = v16;
    v33 = a6;
    dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
    v19 = CI_LOG_SURFACE_CACHE();
    if (v19)
    {
      v20 = v19;
      if (GetQueue(void)::onceToken != -1)
        dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
      v22[0] = v17;
      v22[1] = 0x40000000;
      v22[2] = __GetValidSurfaceFromCache_block_invoke_2;
      v22[3] = &__block_descriptor_tmp_25_1;
      v23 = v20;
      dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, v22);
    }
    v8 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
  }
  return v8;
}

void CI::SurfaceCacheEntry::empty(IOSurfaceRef *this)
{
  IOSurfaceRef v2;

  SurfaceSetVolatileEmpty(this[3]);
  v2 = this[8];
  if (v2)
    CFRelease(v2);
  this[8] = 0;
  *((_DWORD *)this + 15) = 0;
}

uint64_t GetSurfaceFromCache(__int128 *a1, uint64_t a2, uint64_t a3, int a4, __int128 *a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFArrayRef theArray)
{
  CFIndex Count;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  NSObject *log;
  uint64_t v26;
  _QWORD v27[4];
  int v28;
  _QWORD block[5];
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CFIndex v38;
  CFArrayRef v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  v44 = 0;
  v45 = &v44;
  v46 = 0x2000000000;
  v47 = 0;
  if (*((_QWORD *)a1 + 1))
  {
    v26 = a3;
    v20 = 0;
    if (a10 && a9 && a4 && *((_QWORD *)a1 + 2))
    {
      if (a6 && a7)
      {
        log = ci_logger_cache();
        v21 = 0;
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          v49 = "GetSurfaceFromCache";
          v50 = 1024;
          v51 = a6;
          v52 = 1024;
          v53 = a7;
          _os_log_impl(&dword_1921E4000, log, OS_LOG_TYPE_DEFAULT, "%{public}s  was passed contextIndex=%d and imageIndex=%d.  Ignoring imageIndex.\n", buf, 0x18u);
          v21 = 0;
        }
      }
      else
      {
        v21 = a7;
      }
      if (GetQueue(void)::onceToken != -1)
        dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __GetSurfaceFromCache_block_invoke;
      block[3] = &unk_1E2EC9360;
      v40 = a6;
      v41 = v21;
      v30 = *a1;
      v31 = *((_QWORD *)a1 + 2);
      v32 = *a5;
      v33 = *((_QWORD *)a5 + 2);
      v34 = a9;
      block[4] = &v44;
      v42 = a4;
      v43 = a8;
      v35 = a10;
      v36 = a2;
      v37 = v26;
      v38 = Count;
      v39 = theArray;
      dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
      v22 = CI_LOG_SURFACE_CACHE();
      if (v22)
      {
        v23 = v22;
        if (GetQueue(void)::onceToken != -1)
          dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
        v27[0] = MEMORY[0x1E0C809B0];
        v27[1] = 0x40000000;
        v27[2] = __GetSurfaceFromCache_block_invoke_29;
        v27[3] = &__block_descriptor_tmp_30_1;
        v28 = v23;
        dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, v27);
      }
      v20 = v45[3];
    }
  }
  else
  {
    v20 = 0;
  }
  _Block_object_dispose(&v44, 8);
  return v20;
}

void RetainSurfaceFromCache(CFTypeRef cf)
{
  _QWORD block[5];

  if (cf)
    CFRetain(cf);
  if (GetQueue(void)::onceToken != -1)
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __RetainSurfaceFromCache_block_invoke;
  block[3] = &__block_descriptor_tmp_32_0;
  block[4] = cf;
  dispatch_async((dispatch_queue_t)gSurfaceCacheQueue, block);
}

void ReturnSurfaceToCache(uint64_t a1)
{
  _QWORD block[5];

  if (GetQueue(void)::onceToken != -1)
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __ReturnSurfaceToCache_block_invoke;
  block[3] = &__block_descriptor_tmp_34_0;
  block[4] = a1;
  dispatch_async((dispatch_queue_t)gSurfaceCacheQueue, block);
}

void CI::RemoveCacheEntry(CI *this, CI::SurfaceCacheEntry *a2)
{
  CI *v2;
  const void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD block[6];
  CI *v14;

  v14 = this;
  if (CI::gCacheList)
  {
    v2 = (CI *)std::list<CI::attached_surface_t *>::remove((_QWORD *)CI::gCacheList, &v14);
    v3 = (const void *)*((_QWORD *)v14 + 3);
    v4 = (_QWORD *)CI::gReleaseSurfaceBlockMap(v2);
    v5 = v4 + 1;
    v6 = (_QWORD *)*v4;
    if ((_QWORD *)*v4 != v4 + 1)
    {
      v7 = MEMORY[0x1E0C809B0];
      do
      {
        v8 = _Block_copy((const void *)v6[5]);
        CFRetain(v3);
        v9 = v6[4];
        block[0] = v7;
        block[1] = 0x40000000;
        block[2] = ___ZN2CIL16RemoveCacheEntryEPNS_17SurfaceCacheEntryE_block_invoke;
        block[3] = &unk_1E2EC9630;
        block[4] = v8;
        block[5] = v3;
        dispatch_async(v9, block);
        v10 = (_QWORD *)v6[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v6[2];
            v12 = *v11 == (_QWORD)v6;
            v6 = v11;
          }
          while (!v12);
        }
        v6 = v11;
      }
      while (v11 != v5);
    }
  }
}

void AddReleaseSurfaceBlock(uint64_t a1, uint64_t a2)
{
  _QWORD v4[6];

  if (GetQueue(void)::onceToken != -1)
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __AddReleaseSurfaceBlock_block_invoke;
  v4[3] = &unk_1E2EB7840;
  v4[4] = a2;
  v4[5] = a1;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, v4);
}

void RemoveReleaseSurfaceBlock(uint64_t a1)
{
  _QWORD block[5];

  if (GetQueue(void)::onceToken != -1)
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __RemoveReleaseSurfaceBlock_block_invoke;
  block[3] = &__block_descriptor_tmp_43_0;
  block[4] = a1;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
}

void RegularizePriorityForContextEntries(int a1)
{
  _QWORD block[4];
  int v3;

  if (GetQueue(void)::onceToken != -1)
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __RegularizePriorityForContextEntries_block_invoke;
  block[3] = &__block_descriptor_tmp_46_0;
  v3 = a1;
  dispatch_async((dispatch_queue_t)gSurfaceCacheQueue, block);
}

void PurgeCacheEntriesForImage(int a1)
{
  _QWORD block[4];
  int v3;

  if (GetQueue(void)::onceToken != -1)
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __PurgeCacheEntriesForImage_block_invoke;
  block[3] = &__block_descriptor_tmp_50;
  v3 = a1;
  dispatch_async((dispatch_queue_t)gSurfaceCacheQueue, block);
}

float GetSurfaceCacheFillTime()
{
  float v0;
  _QWORD block[5];
  uint64_t v3;
  float *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = (float *)&v3;
  v5 = 0x2000000000;
  v6 = 0;
  if (GetQueue(void)::onceToken != -1)
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __GetSurfaceCacheFillTime_block_invoke;
  block[3] = &unk_1E2EC9468;
  block[4] = &v3;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
  v0 = v4[6];
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t GetSurfaceCacheNonVolatileSize()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  if (GetQueue(void)::onceToken != -1)
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __GetSurfaceCacheNonVolatileSize_block_invoke;
  block[3] = &unk_1E2EC9490;
  block[4] = &v3;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
  v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t GetSurfaceCachePeakNonVolatileSize()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  if (GetQueue(void)::onceToken != -1)
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __GetSurfaceCachePeakNonVolatileSize_block_invoke;
  block[3] = &unk_1E2EB78F0;
  block[4] = &v3;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
  v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t GetSurfaceCacheNonVolatileSizeForContext(int a1)
{
  uint64_t v2;
  _QWORD v4[5];
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  if (GetQueue(void)::onceToken != -1)
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __GetSurfaceCacheNonVolatileSizeForContext_block_invoke;
  v4[3] = &unk_1E2EC94B8;
  v4[4] = &v6;
  v5 = a1;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, v4);
  v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

uint64_t CopyPeakNonVolatileList()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  if (GetQueue(void)::onceToken != -1)
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __CopyPeakNonVolatileList_block_invoke;
  block[3] = &unk_1E2EC94E0;
  block[4] = &v3;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
  v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t GetSurfaceCacheCountAllocated()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  if (GetQueue(void)::onceToken != -1)
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __GetSurfaceCacheCountAllocated_block_invoke;
  block[3] = &unk_1E2EC9508;
  block[4] = &v3;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
  v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

void ResetCacheStatistics()
{
  if (GetQueue(void)::onceToken != -1)
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_67_0);
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, &__block_literal_global_60_1);
}

uint64_t CI::SurfaceCacheEntry::type(CI::SurfaceCacheEntry *this)
{
  return 78;
}

uint64_t `non-virtual thunk to'CI::SurfaceCacheEntry::type(CI::SurfaceCacheEntry *this)
{
  return 78;
}

void ___ZL8GetQueuev_block_invoke_2()
{
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, &__block_literal_global_72_1);
}

void ___ZL8GetQueuev_block_invoke_3(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  CI **v4;
  char v5;
  CI *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  CI **v11;
  uint64_t v12;
  CI **v13;
  CI *v14;
  int v15;
  const char *v16;
  char *v17;
  CI **v18;
  CI **v19;

  v2 = CI::gCacheList;
  if (!CI::gCacheList || (v18 = 0, v19 = 0, v17 = 0, v3 = *(_QWORD *)(CI::gCacheList + 8), v3 == CI::gCacheList))
  {
    CI_LOG_SURFACE_CACHE();
  }
  else
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(CI **)(v3 + 16);
      if (!*((_QWORD *)v6 + 11))
      {
        if (v4 >= v19)
        {
          v7 = ((char *)v4 - v17) >> 3;
          if ((unint64_t)(v7 + 1) >> 61)
            abort();
          v8 = ((char *)v19 - v17) >> 2;
          if (v8 <= v7 + 1)
            v8 = v7 + 1;
          if ((unint64_t)((char *)v19 - v17) >= 0x7FFFFFFFFFFFFFF8)
            a2 = 0x1FFFFFFFFFFFFFFFLL;
          else
            a2 = v8;
          if (a2)
            v9 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v19, a2);
          else
            v9 = 0;
          v10 = &v9[8 * v7];
          *(_QWORD *)v10 = v6;
          v4 = (CI **)(v10 + 8);
          v11 = v18;
          if (v18 != (CI **)v17)
          {
            do
            {
              v12 = (uint64_t)*--v11;
              *((_QWORD *)v10 - 1) = v12;
              v10 -= 8;
            }
            while (v11 != (CI **)v17);
            v11 = (CI **)v17;
          }
          v17 = v10;
          v19 = (CI **)&v9[8 * a2];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *v4++ = v6;
        }
        v18 = v4;
        v5 = 1;
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
    v13 = (CI **)v17;
    if (v17 != (char *)v4)
    {
      do
      {
        v14 = *v13;
        CI::RemoveCacheEntry(*v13, (CI::SurfaceCacheEntry *)a2);
        if (v14)
          (*(void (**)(CI *))(*(_QWORD *)v14 + 8))(v14);
        ++v13;
      }
      while (v13 != v4);
      v4 = (CI **)v17;
    }
    if (v4)
      operator delete(v4);
    v15 = CI_LOG_SURFACE_CACHE();
    if ((v5 & (v15 != 0)) == 1)
      CI::LogCacheState((CI *)(v15 > 1), (uint64_t)"MemoryPreasure", v16);
  }
}

BOOL CI::isPriorEntry(CI *this, const CI::SurfaceCacheEntry *a2)
{
  if (*((uint64_t *)this + 11) > 0)
    return 1;
  if (*((int *)this + 24) >= 7 && *((_QWORD *)this + 8))
    return !SurfaceIsVolatileEmpty(*((__IOSurface **)this + 3));
  return 0;
}

void std::deque<CI::SurfaceCacheEntry *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<CI::SurfaceCacheEntry *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<CI::SurfaceCacheEntry *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v29 = 1;
      else
        v29 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v5, v29);
      v31 = &v30[8 * (v29 >> 2)];
      v33 = &v30[8 * v32];
      v34 = (uint64_t *)a1[1];
      v8 = v31;
      v35 = a1[2] - (_QWORD)v34;
      if (v35)
      {
        v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        v36 = 8 * (v35 >> 3);
        v37 = &v30[8 * (v29 >> 2)];
        do
        {
          v38 = *v34++;
          *(_QWORD *)v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<CI::SurfaceCacheEntry **>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<CI::SurfaceCacheEntry **>::push_front((uint64_t)a1, &v54);
    v40 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v41 = *v40;
    v9 = (char *)(v40 + 1);
    v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_29;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v31 = &v30[8 * (v46 >> 2)];
      v33 = &v30[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v31;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v30[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<CI::SurfaceCacheEntry **>::push_back(&v54, &v53);
  v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      std::__split_buffer<CI::SurfaceCacheEntry **>::push_front((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    v28 = (char *)a1[2];
  }
  v42 = (char *)*a1;
  v43 = v54;
  v44 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(_QWORD *)&v55 = v28;
  *((_QWORD *)&v55 + 1) = v45;
  if (v28 != v27)
    *(_QWORD *)&v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v42)
    operator delete(v42);
}

void std::__split_buffer<CI::SurfaceCacheEntry **>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<CI::SurfaceCacheEntry **>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<CI::SurfaceCacheEntry *>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<CI::SurfaceCacheEntry **>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<CI::SurfaceCacheEntry **>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void __CFDictionary::setValue(__CFDictionary *this, __CFDictionary *a2, __CFString *a3)
{
  CFNumberRef v5;
  const void *v6;

  v5 = __CFNumber::number((__CFNumber *)a3);
  __CFDictionary::setValue(this, a2, v5, v6);
  if (v5)
    CFRelease(v5);
}

CFNumberRef __CFNumber::number(__CFNumber *this)
{
  uint64_t *p_valuePtr;
  CFNumberType v2;
  int v4;
  uint64_t valuePtr;

  if ((this & 0x80000000) != 0)
  {
    valuePtr = this;
    p_valuePtr = &valuePtr;
    v2 = kCFNumberSInt64Type;
  }
  else
  {
    v4 = (int)this;
    p_valuePtr = (uint64_t *)&v4;
    v2 = kCFNumberSInt32Type;
  }
  return CFNumberCreate(0, v2, p_valuePtr);
}

uint64_t ___ZN2CIL13LogCacheStateEbPKc_block_invoke(uint64_t a1, FILE *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  const char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  const char *v16;
  BOOL v17;
  unint64_t v18;
  const char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  const char *v23;
  unint64_t v24;
  const char *v25;
  BOOL v26;
  unint64_t v27;
  const char *v28;
  uint64_t result;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  unint64_t v34;
  const char *v35;
  BOOL v36;
  unint64_t v37;
  const char *v38;
  double v39;
  unint64_t v40;
  const char *v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  unint64_t v46;
  const char *v47;
  unint64_t v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  mach_timebase_info info;

  fprintf(a2, "SurfaceCache: %s\n", *(const char **)(a1 + 32));
  fprintf(a2, "  count: %ld\n", *(_QWORD *)(a1 + 40));
  v6 = atomic_load(&CI::gCacheSize);
  if (v6 < 0x80000001)
  {
    if (v6 <= 0x200000)
    {
      if (v6 < 0x801)
        goto LABEL_8;
      v7 = (double)v6;
      v8 = 0.0009765625;
    }
    else
    {
      v7 = (double)v6;
      v8 = 0.000000953674316;
    }
  }
  else
  {
    v7 = (double)v6;
    v8 = 9.31322575e-10;
  }
  v6 = llround(v7 * v8);
LABEL_8:
  v9 = atomic_load(&CI::gCacheSize);
  if (v9 <= 0x80000000)
  {
    if (v9 <= 0x200000)
    {
      if (v9 <= 0x800)
        v10 = "B";
      else
        v10 = "KB";
    }
    else
    {
      v10 = "MB";
    }
  }
  else
  {
    v10 = "GB";
  }
  fprintf(a2, "  size: %ld%s\n", v6, v10);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = llround((double)v11 * 9.31322575e-10);
  v13 = llround((double)v11 * 0.000000953674316);
  v14 = "MB";
  v15 = llround((double)v11 * 0.0009765625);
  if (v11 > 0x800)
  {
    v16 = "KB";
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 48);
    v16 = "B";
  }
  if (v11 <= 0x200000)
  {
    v13 = v15;
    v14 = v16;
  }
  v17 = v11 > 0x80000000;
  if (v11 <= 0x80000000)
    v18 = v13;
  else
    v18 = v12;
  if (v17)
    v19 = "GB";
  else
    v19 = v14;
  fprintf(a2, "  non-volatile: %ld%s\n", v18, v19);
  v20 = *(_QWORD *)(a1 + 56);
  v21 = llround((double)v20 * 9.31322575e-10);
  v22 = llround((double)v20 * 0.000000953674316);
  v23 = "MB";
  v24 = llround((double)v20 * 0.0009765625);
  if (v20 > 0x800)
  {
    v25 = "KB";
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 56);
    v25 = "B";
  }
  if (v20 <= 0x200000)
  {
    v22 = v24;
    v23 = v25;
  }
  v26 = v20 > 0x80000000;
  if (v20 <= 0x80000000)
    v27 = v22;
  else
    v27 = v21;
  if (v26)
    v28 = "GB";
  else
    v28 = v23;
  result = fprintf(a2, "  volatile: %ld%s\n", v27, v28);
  v30 = *(_QWORD *)(a1 + 64);
  if (v30 != -1)
  {
    v31 = llround((double)v30 * 9.31322575e-10);
    v32 = llround((double)v30 * 0.000000953674316);
    v33 = "MB";
    v34 = llround((double)v30 * 0.0009765625);
    if (v30 > 0x800)
    {
      v35 = "KB";
    }
    else
    {
      v34 = *(_QWORD *)(a1 + 64);
      v35 = "B";
    }
    if (v30 <= 0x200000)
    {
      v32 = v34;
      v33 = v35;
    }
    v36 = v30 > 0x80000000;
    if (v30 <= 0x80000000)
      v37 = v32;
    else
      v37 = v31;
    if (v36)
      v38 = "GB";
    else
      v38 = v33;
    result = fprintf(a2, "  capacity: %ld%s\n", v37, v38);
  }
  if (CI::gCacheGetCount)
  {
    mach_timebase_info(&info);
    v39 = (double)CI::gTimeFilling;
    LODWORD(v2) = info.numer;
    LODWORD(v3) = info.denom;
    fwrite("  cumulativeStats:\n", 0x13uLL, 1uLL, a2);
    v40 = CI::gCacheSizePeak;
    if ((unint64_t)CI::gCacheSizePeak <= 0x80000000)
    {
      if ((unint64_t)CI::gCacheSizePeak <= 0x200000)
      {
        v42 = llround((double)(unint64_t)CI::gCacheSizePeak * 0.0009765625);
        if ((unint64_t)CI::gCacheSizePeak <= 0x800)
        {
          v41 = "B";
        }
        else
        {
          v40 = v42;
          v41 = "KB";
        }
      }
      else
      {
        v40 = llround((double)(unint64_t)CI::gCacheSizePeak * 0.000000953674316);
        v41 = "MB";
      }
    }
    else
    {
      v40 = llround((double)(unint64_t)CI::gCacheSizePeak * 9.31322575e-10);
      v41 = "GB";
    }
    v43 = CI::gCacheNonVolatileSizePeak;
    if ((unint64_t)CI::gCacheNonVolatileSizePeak <= 0x80000000)
    {
      if ((unint64_t)CI::gCacheNonVolatileSizePeak <= 0x200000)
      {
        v45 = llround((double)(unint64_t)CI::gCacheNonVolatileSizePeak * 0.0009765625);
        if ((unint64_t)CI::gCacheNonVolatileSizePeak <= 0x800)
        {
          v44 = "B";
        }
        else
        {
          v43 = v45;
          v44 = "KB";
        }
      }
      else
      {
        v43 = llround((double)(unint64_t)CI::gCacheNonVolatileSizePeak * 0.000000953674316);
        v44 = "MB";
      }
    }
    else
    {
      v43 = llround((double)(unint64_t)CI::gCacheNonVolatileSizePeak * 9.31322575e-10);
      v44 = "GB";
    }
    v46 = CI::gCacheBytesAllocated;
    if ((unint64_t)CI::gCacheBytesAllocated <= 0x80000000)
    {
      if ((unint64_t)CI::gCacheBytesAllocated <= 0x200000)
      {
        v48 = llround((double)(unint64_t)CI::gCacheBytesAllocated * 0.0009765625);
        if ((unint64_t)CI::gCacheBytesAllocated <= 0x800)
        {
          v47 = "B";
        }
        else
        {
          v46 = v48;
          v47 = "KB";
        }
      }
      else
      {
        v46 = llround((double)(unint64_t)CI::gCacheBytesAllocated * 0.000000953674316);
        v47 = "MB";
      }
    }
    else
    {
      v46 = llround((double)(unint64_t)CI::gCacheBytesAllocated * 9.31322575e-10);
      v47 = "GB";
    }
    v49 = CI::gCacheBytesFilled;
    if ((unint64_t)CI::gCacheBytesFilled <= 0x80000000)
    {
      if ((unint64_t)CI::gCacheBytesFilled <= 0x200000)
      {
        v51 = llround((double)(unint64_t)CI::gCacheBytesFilled * 0.0009765625);
        if ((unint64_t)CI::gCacheBytesFilled <= 0x800)
        {
          v50 = "B";
        }
        else
        {
          v49 = v51;
          v50 = "KB";
        }
      }
      else
      {
        v49 = llround((double)(unint64_t)CI::gCacheBytesFilled * 0.000000953674316);
        v50 = "MB";
      }
    }
    else
    {
      v49 = llround((double)(unint64_t)CI::gCacheBytesFilled * 9.31322575e-10);
      v50 = "GB";
    }
    fprintf(a2, "    allocCount=%ld peakCount=%ld peakSize=%ld%s peakNVSize=%ld%s totalAlloced=%ld%s totalFilled=%ld%s timeFilling=%.3gms\n", CI::gCacheCountAllocated, CI::gCacheCountPeak, v40, v41, v43, v44, v46, v47, v49, v50, v39 * 1000.0 * (double)v2 / ((double)v3 * 1000000000.0));
    return fprintf(a2, "    hits=%ld (%lu%%)  purgedHits=%ld (%lu%%)  recycledMisses=%ld (%lu%%)  misses=%ld (%lu%%)  inusemisses=%ld (%lu%%)\n", CI::gCacheGetCount - (CI::gCacheGetCountMissed + CI::gCacheGetCountPurged), 100* (CI::gCacheGetCount - (CI::gCacheGetCountMissed + CI::gCacheGetCountPurged))/ (unint64_t)CI::gCacheGetCount, CI::gCacheGetCountPurged, 100 * CI::gCacheGetCountPurged / (unint64_t)CI::gCacheGetCount, CI::gCacheGetCountRecycled, 100 * CI::gCacheGetCountRecycled / (unint64_t)CI::gCacheGetCount, CI::gCacheGetCountMissed - CI::gCacheGetCountRecycled, 100 * (CI::gCacheGetCountMissed - CI::gCacheGetCountRecycled) / (unint64_t)CI::gCacheGetCount, CI::gCacheGetCountInUseMissed, 100 * CI::gCacheGetCountInUseMissed / (unint64_t)CI::gCacheGetCount);
  }
  return result;
}

uint64_t ___ZN2CIL13LogCacheStateEbPKc_block_invoke_101(int a1, FILE *__stream)
{
  uint64_t v2;
  uint64_t v3;
  CI::SurfaceCacheEntry *v5;
  uint64_t result;

  v2 = CI::gCacheList;
  v3 = *(_QWORD *)(CI::gCacheList + 8);
  if (v3 != CI::gCacheList)
  {
    do
    {
      v5 = *(CI::SurfaceCacheEntry **)(v3 + 16);
      fwrite("  ", 2uLL, 1uLL, __stream);
      result = CI::SurfaceCacheEntry::print_core(v5, __stream);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return result;
}

void ___ZN2CIL16RemoveCacheEntryEPNS_17SurfaceCacheEntryE_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  _Block_release(*(const void **)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

CFArrayRef __CFArray::createCopy(CFArrayRef theArray, const __CFArray *a2)
{
  if (theArray)
    return CFArrayCreateCopy(0, theArray);
  else
    return CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B378]);
}

uint64_t CI::InstanceCounted<(CI::Type)78>::type()
{
  return 78;
}

_QWORD *CI::InstanceCounted<(CI::Type)78>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EBBFD8;
  do
    v1 = __ldaxr(&dword_1ECF873D0[20]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[20]));
  return result;
}

void CI::InstanceCounted<(CI::Type)78>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EBBFD8;
  do
    v1 = __ldaxr(&dword_1ECF873D0[20]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[20]));
  JUMPOUT(0x194025AACLL);
}

uint64_t std::__tree<std::__value_type<dispatch_queue_s *,void({block_pointer})(__IOSurface *)>,std::__map_value_compare<dispatch_queue_s *,std::__value_type<dispatch_queue_s *,void({block_pointer})(__IOSurface *)>,std::less<dispatch_queue_s *>,true>,std::allocator<std::__value_type<dispatch_queue_s *,void({block_pointer})(__IOSurface *)>>>::__erase_unique<dispatch_queue_s *>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>>>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

CI::TileTask *CI::TileTask::TileTask(CI::TileTask *this, CI::Context *a2, CI::ProgramNode *a3, const CGRect *a4)
{
  dispatch_group_t v8;
  uint64_t v9;
  uint64_t v10;
  CGPoint origin;
  NSObject *v12;
  dispatch_queue_t v13;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = &off_1E2EBF9D8;
  *((_QWORD *)this + 2) = dispatch_group_create();
  v8 = dispatch_group_create();
  v9 = *((_QWORD *)a2 + 24);
  *((_QWORD *)this + 3) = v8;
  *((_QWORD *)this + 4) = v9;
  *((_QWORD *)this + 5) = 0;
  if (a3)
    v10 = CI::Object::ref((uint64_t)a3);
  else
    v10 = 0;
  *((_QWORD *)this + 6) = v10;
  origin = a4->origin;
  *(CGSize *)((char *)this + 72) = a4->size;
  *(CGPoint *)((char *)this + 56) = origin;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  v12 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v13 = dispatch_queue_create("CI::TileTaskQueue", v12);
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = v13;
  return this;
}

void CI::TileTask::~TileTask(dispatch_queue_t *this)
{
  CI::Object *v2;
  dispatch_queue_t v3;
  dispatch_queue_t v4;

  *this = (dispatch_queue_t)&off_1E2EBF9D8;
  dispatch_sync(this[21], &__block_literal_global_97);
  v2 = (CI::Object *)this[6];
  if (v2)
    CI::Object::unref(v2);
  dispatch_release(this[2]);
  dispatch_release(this[3]);
  dispatch_release(this[21]);
  v3 = this[22];
  if (v3)
    CFRelease(v3);
  v4 = this[23];
  if (v4)
    CFRelease(v4);
  std::__hash_table<std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::__unordered_map_hasher<CI::ProgramNode *,std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::hash<CI::ProgramNode *>,std::equal_to<CI::ProgramNode *>,true>,std::__unordered_map_equal<CI::ProgramNode *,std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::equal_to<CI::ProgramNode *>,std::hash<CI::ProgramNode *>,true>,std::allocator<std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>>>::~__hash_table((uint64_t)(this + 16));
  std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)(this + 11));
}

{
  CI::TileTask::~TileTask(this);
  JUMPOUT(0x194025AACLL);
}

_QWORD *CI::TileTask::setTaskError(_QWORD *this, CFTypeRef cf)
{
  if (!this[23])
  {
    this[23] = cf;
    return CFRetain(cf);
  }
  return this;
}

void CI::TileTask::setCommandBufferError(CI::TileTask *this, CFTypeRef cf)
{
  NSObject *v4;
  _QWORD v5[6];

  CFRetain(cf);
  v4 = *((_QWORD *)this + 21);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN2CI8TileTask21setCommandBufferErrorEP9__CFError_block_invoke;
  v5[3] = &__block_descriptor_tmp_2_2;
  v5[4] = this;
  v5[5] = cf;
  dispatch_async(v4, v5);
}

void ___ZN2CI8TileTask21setCommandBufferErrorEP9__CFError_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v1 + 176))
  {
    *(_QWORD *)(v1 + 176) = CFRetain(*(CFTypeRef *)(a1 + 40));
    CFRelease(*(CFTypeRef *)(a1 + 40));
  }
}

uint64_t CI::TileTask::commandBufferError(CI::TileTask *this)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = *((_QWORD *)this + 21);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI8TileTask18commandBufferErrorEv_block_invoke;
  v4[3] = &unk_1E2EC9678;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t ___ZNK2CI8TileTask18commandBufferErrorEv_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 40) + 176);
  return result;
}

void CI::TileTask::setCompileTimeForNode(CI::TileTask *this, const CI::ProgramNode *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD block[9];

  if (a3 != 0.0)
  {
    block[7] = v3;
    block[8] = v4;
    v5 = *((_QWORD *)this + 21);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN2CI8TileTask21setCompileTimeForNodeEPKNS_11ProgramNodeEd_block_invoke;
    block[3] = &__block_descriptor_tmp_4_7;
    block[4] = this;
    block[5] = a2;
    *(double *)&block[6] = a3;
    dispatch_async(v5, block);
  }
}

void CI::TileTask::incrementCompileWaitTimeForNode(CI::TileTask *this, const CI::ProgramNode *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD block[9];

  if (a3 != 0.0)
  {
    block[7] = v3;
    block[8] = v4;
    v5 = *((_QWORD *)this + 21);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN2CI8TileTask31incrementCompileWaitTimeForNodeEPKNS_11ProgramNodeEd_block_invoke;
    block[3] = &__block_descriptor_tmp_5_5;
    block[4] = this;
    block[5] = a2;
    *(double *)&block[6] = a3;
    dispatch_async(v5, block);
  }
}

double ___ZN2CI8TileTask31incrementCompileWaitTimeForNodeEPKNS_11ProgramNodeEd_block_invoke(uint64_t a1)
{
  uint64_t v2;
  double v3;
  char *v4;
  double result;
  unsigned int *v6;

  v2 = *(_QWORD *)(a1 + 32) + 88;
  v6 = (unsigned int *)(*(_QWORD *)(a1 + 40) + 36);
  std::__hash_table<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::__unordered_map_hasher<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::hash<CI::NodeIndex>,std::equal_to<CI::NodeIndex>,true>,std::__unordered_map_equal<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::equal_to<CI::NodeIndex>,std::hash<CI::NodeIndex>,true>,std::allocator<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>>>::__emplace_unique_key_args<CI::NodeIndex,std::piecewise_construct_t const&,std::tuple<CI::NodeIndex const&>,std::tuple<>>(v2, v6, (uint64_t)&std::piecewise_construct, &v6)[80] = 1;
  v3 = *(double *)(a1 + 48);
  v6 = (unsigned int *)(*(_QWORD *)(a1 + 40) + 36);
  v4 = std::__hash_table<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::__unordered_map_hasher<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::hash<CI::NodeIndex>,std::equal_to<CI::NodeIndex>,true>,std::__unordered_map_equal<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::equal_to<CI::NodeIndex>,std::hash<CI::NodeIndex>,true>,std::allocator<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>>>::__emplace_unique_key_args<CI::NodeIndex,std::piecewise_construct_t const&,std::tuple<CI::NodeIndex const&>,std::tuple<>>(v2, v6, (uint64_t)&std::piecewise_construct, &v6);
  result = v3 + *((double *)v4 + 5);
  *((double *)v4 + 5) = result;
  return result;
}

void CI::TileTask::incrementTimeForNode(CI::TileTask *this, const CI::ProgramNode *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD block[9];

  if (a3 != 0.0)
  {
    block[7] = v3;
    block[8] = v4;
    v5 = *((_QWORD *)this + 21);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN2CI8TileTask20incrementTimeForNodeEPKNS_11ProgramNodeEd_block_invoke;
    block[3] = &__block_descriptor_tmp_6_4;
    block[4] = this;
    block[5] = a2;
    *(double *)&block[6] = a3;
    dispatch_async(v5, block);
  }
}

double ___ZN2CI8TileTask20incrementTimeForNodeEPKNS_11ProgramNodeEd_block_invoke(uint64_t a1)
{
  uint64_t v2;
  double v3;
  char *v4;
  double result;
  unsigned int *v6;

  v2 = *(_QWORD *)(a1 + 32) + 88;
  v6 = (unsigned int *)(*(_QWORD *)(a1 + 40) + 36);
  std::__hash_table<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::__unordered_map_hasher<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::hash<CI::NodeIndex>,std::equal_to<CI::NodeIndex>,true>,std::__unordered_map_equal<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::equal_to<CI::NodeIndex>,std::hash<CI::NodeIndex>,true>,std::allocator<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>>>::__emplace_unique_key_args<CI::NodeIndex,std::piecewise_construct_t const&,std::tuple<CI::NodeIndex const&>,std::tuple<>>(v2, v6, (uint64_t)&std::piecewise_construct, &v6)[80] = 1;
  v3 = *(double *)(a1 + 48);
  v6 = (unsigned int *)(*(_QWORD *)(a1 + 40) + 36);
  v4 = std::__hash_table<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::__unordered_map_hasher<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::hash<CI::NodeIndex>,std::equal_to<CI::NodeIndex>,true>,std::__unordered_map_equal<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::equal_to<CI::NodeIndex>,std::hash<CI::NodeIndex>,true>,std::allocator<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>>>::__emplace_unique_key_args<CI::NodeIndex,std::piecewise_construct_t const&,std::tuple<CI::NodeIndex const&>,std::tuple<>>(v2, v6, (uint64_t)&std::piecewise_construct, &v6);
  result = v3 + *((double *)v4 + 3);
  *((double *)v4 + 3) = result;
  return result;
}

void CI::TileTask::incrementCyclesForNode(CI::TileTask *this, const CI::ProgramNode *a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  if (a3)
  {
    v3 = *((_QWORD *)this + 21);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN2CI8TileTask22incrementCyclesForNodeEPKNS_11ProgramNodeEy_block_invoke;
    block[3] = &__block_descriptor_tmp_7_7;
    block[4] = this;
    block[5] = a2;
    block[6] = a3;
    dispatch_async(v3, block);
  }
}

void CI::TileTask::incrementNanoSecForNode(CI::TileTask *this, const CI::ProgramNode *a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  if (a3)
  {
    v3 = *((_QWORD *)this + 21);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN2CI8TileTask23incrementNanoSecForNodeEPKNS_11ProgramNodeEy_block_invoke;
    block[3] = &__block_descriptor_tmp_8_5;
    block[4] = this;
    block[5] = a2;
    block[6] = a3;
    dispatch_async(v3, block);
  }
}

void CI::TileTask::incrementFillTimeForNode(CI::TileTask *this, const CI::Node *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD block[9];

  if (a3 != 0.0)
  {
    block[7] = v3;
    block[8] = v4;
    v5 = *((_QWORD *)this + 21);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN2CI8TileTask24incrementFillTimeForNodeEPKNS_4NodeEd_block_invoke;
    block[3] = &__block_descriptor_tmp_9_4;
    block[4] = this;
    block[5] = a2;
    *(double *)&block[6] = a3;
    dispatch_async(v5, block);
  }
}

double ___ZN2CI8TileTask24incrementFillTimeForNodeEPKNS_4NodeEd_block_invoke(uint64_t a1)
{
  uint64_t v2;
  double v3;
  char *v4;
  double result;
  unsigned int *v6;

  v2 = *(_QWORD *)(a1 + 32) + 88;
  v6 = (unsigned int *)(*(_QWORD *)(a1 + 40) + 36);
  std::__hash_table<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::__unordered_map_hasher<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::hash<CI::NodeIndex>,std::equal_to<CI::NodeIndex>,true>,std::__unordered_map_equal<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::equal_to<CI::NodeIndex>,std::hash<CI::NodeIndex>,true>,std::allocator<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>>>::__emplace_unique_key_args<CI::NodeIndex,std::piecewise_construct_t const&,std::tuple<CI::NodeIndex const&>,std::tuple<>>(v2, v6, (uint64_t)&std::piecewise_construct, &v6)[80] = 1;
  v3 = *(double *)(a1 + 48);
  v6 = (unsigned int *)(*(_QWORD *)(a1 + 40) + 36);
  v4 = std::__hash_table<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::__unordered_map_hasher<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::hash<CI::NodeIndex>,std::equal_to<CI::NodeIndex>,true>,std::__unordered_map_equal<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::equal_to<CI::NodeIndex>,std::hash<CI::NodeIndex>,true>,std::allocator<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>>>::__emplace_unique_key_args<CI::NodeIndex,std::piecewise_construct_t const&,std::tuple<CI::NodeIndex const&>,std::tuple<>>(v2, v6, (uint64_t)&std::piecewise_construct, &v6);
  result = v3 + *((double *)v4 + 6);
  *((double *)v4 + 6) = result;
  return result;
}

void CI::TileTask::incrementFillPixelsForNode(CI::TileTask *this, const CI::Node *a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  if (a3)
  {
    v3 = *((_QWORD *)this + 21);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN2CI8TileTask26incrementFillPixelsForNodeEPKNS_4NodeEy_block_invoke;
    block[3] = &__block_descriptor_tmp_10_6;
    block[4] = this;
    block[5] = a2;
    block[6] = a3;
    dispatch_async(v3, block);
  }
}

void CI::TileTask::addROIForNode(CI::TileTask *this, CI::ProgramNode *a2, const CGRect *a3)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  CGSize v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  CGSize *v15;
  char *v16;
  CGSize size;
  char *v18;
  char *v19;
  CGSize v20;
  CI::ProgramNode *v21;
  CI::ProgramNode **v22;

  v21 = a2;
  v22 = &v21;
  v4 = std::__hash_table<std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::__unordered_map_hasher<CI::ProgramNode *,std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::hash<CI::ProgramNode *>,std::equal_to<CI::ProgramNode *>,true>,std::__unordered_map_equal<CI::ProgramNode *,std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::equal_to<CI::ProgramNode *>,std::hash<CI::ProgramNode *>,true>,std::allocator<std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>>>::__emplace_unique_key_args<CI::ProgramNode *,std::piecewise_construct_t const&,std::tuple<CI::ProgramNode * const&>,std::tuple<>>((uint64_t)this + 128, &v21, (uint64_t)&std::piecewise_construct, &v22);
  v5 = v4[4];
  v6 = v4[5];
  if (v5 >= v6)
  {
    v9 = v4[3];
    v10 = (uint64_t)(v5 - v9) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      abort();
    v12 = v6 - v9;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SoftwareDAGDescriptor::ArgumentInfo>>((uint64_t)(v4 + 5), v13);
    else
      v14 = 0;
    v15 = (CGSize *)&v14[32 * v10];
    v16 = &v14[32 * v13];
    size = a3->size;
    *v15 = (CGSize)a3->origin;
    v15[1] = size;
    v8 = (char *)&v15[2];
    v19 = (char *)v4[3];
    v18 = (char *)v4[4];
    if (v18 != v19)
    {
      do
      {
        v20 = (CGSize)*((_OWORD *)v18 - 1);
        v15[-2] = *((CGSize *)v18 - 2);
        v15[-1] = v20;
        v15 -= 2;
        v18 -= 32;
      }
      while (v18 != v19);
      v18 = (char *)v4[3];
    }
    v4[3] = v15;
    v4[4] = v8;
    v4[5] = v16;
    if (v18)
      operator delete(v18);
  }
  else
  {
    v7 = a3->size;
    *(CGPoint *)v5 = a3->origin;
    *(CGSize *)(v5 + 16) = v7;
    v8 = (char *)(v5 + 32);
  }
  v4[4] = v8;
}

double CI::TileTask::executionTime(CI::TileTask *this)
{
  NSObject *v1;
  double v2;
  _QWORD v4[6];
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = (double *)&v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = *((_QWORD *)this + 21);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI8TileTask13executionTimeEv_block_invoke;
  v4[3] = &unk_1E2EC9780;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

double ___ZNK2CI8TileTask13executionTimeEv_block_invoke(uint64_t a1)
{
  double *i;
  uint64_t v2;
  double result;

  for (i = *(double **)(*(_QWORD *)(a1 + 40) + 104); i; i = *(double **)i)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    result = i[3] + *(double *)(v2 + 24);
    *(double *)(v2 + 24) = result;
  }
  return result;
}

double CI::TileTask::compileWaitTime(CI::TileTask *this)
{
  NSObject *v1;
  double v2;
  _QWORD v4[6];
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = (double *)&v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = *((_QWORD *)this + 21);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI8TileTask15compileWaitTimeEv_block_invoke;
  v4[3] = &unk_1E2EC97A8;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

double ___ZNK2CI8TileTask15compileWaitTimeEv_block_invoke(uint64_t a1)
{
  double *i;
  uint64_t v2;
  double result;

  for (i = *(double **)(*(_QWORD *)(a1 + 40) + 104); i; i = *(double **)i)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    result = i[5] + *(double *)(v2 + 24);
    *(double *)(v2 + 24) = result;
  }
  return result;
}

double CI::TileTask::compileTime(CI::TileTask *this)
{
  NSObject *v1;
  double v2;
  _QWORD v4[6];
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = (double *)&v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = *((_QWORD *)this + 21);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI8TileTask11compileTimeEv_block_invoke;
  v4[3] = &unk_1E2EC97D0;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

double ___ZNK2CI8TileTask11compileTimeEv_block_invoke(uint64_t a1)
{
  double *i;
  uint64_t v2;
  double result;

  for (i = *(double **)(*(_QWORD *)(a1 + 40) + 104); i; i = *(double **)i)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    result = i[4] + *(double *)(v2 + 24);
    *(double *)(v2 + 24) = result;
  }
  return result;
}

uint64_t CI::TileTask::executionCycles(CI::TileTask *this)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = *((_QWORD *)this + 21);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI8TileTask15executionCyclesEv_block_invoke;
  v4[3] = &unk_1E2EC97F8;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t ___ZNK2CI8TileTask15executionCyclesEv_block_invoke(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD **)(*(_QWORD *)(result + 40) + 104);
  if (v1)
  {
    v2 = 0;
    while (1)
    {
      v3 = v1[8];
      if (!v3)
        break;
      v2 += v3;
      v1 = (_QWORD *)*v1;
      if (!v1)
        goto LABEL_7;
    }
  }
  else
  {
    v2 = 0;
LABEL_7:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v2;
  }
  return result;
}

uint64_t CI::TileTask::executionNanoSec(CI::TileTask *this)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = *((_QWORD *)this + 21);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI8TileTask16executionNanoSecEv_block_invoke;
  v4[3] = &unk_1E2EC9820;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t ___ZNK2CI8TileTask16executionNanoSecEv_block_invoke(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD **)(*(_QWORD *)(result + 40) + 104);
  if (v1)
  {
    v2 = 0;
    while (1)
    {
      v3 = v1[9];
      if (!v3)
        break;
      v2 += v3;
      v1 = (_QWORD *)*v1;
      if (!v1)
        goto LABEL_7;
    }
  }
  else
  {
    v2 = 0;
LABEL_7:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v2;
  }
  return result;
}

unint64_t CI::TileTask::pixelsProcessed(CI::TileTask *this)
{
  _QWORD *v1;
  unint64_t result;
  uint64_t i;

  v1 = (_QWORD *)*((_QWORD *)this + 18);
  if (!v1)
    return 0;
  result = 0;
  do
  {
    for (i = v1[3]; i != v1[4]; i += 32)
      result = (unint64_t)((double)result + ceil(*(double *)(i + 16)) * ceil(*(double *)(i + 24)));
    v1 = (_QWORD *)*v1;
  }
  while (v1);
  return result;
}

uint64_t CI::TileTask::pixelsOverdrawn(CI::TileTask *this)
{
  uint64_t v1;
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double *v18;
  double **v19;
  unint64_t v20;
  _QWORD *v21;
  double *v22;
  double *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  double *v32;
  double **v33;
  unint64_t v34;
  _QWORD *v35;
  double *v36;
  double *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  double v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  double v60;
  double v61;
  uint64_t v64;
  uint64_t *v65;
  double v66;
  uint64_t *v67;
  uint64_t *v68;
  _QWORD *v69;
  unint64_t v70;
  void *__p;
  double *v72;
  uint64_t v73;
  void **v74;

  v1 = *((_QWORD *)this + 18);
  if (v1)
  {
    v2 = 0;
    do
    {
      v64 = v2;
      __p = 0;
      v72 = 0;
      v73 = 0;
      v69 = 0;
      v70 = 0;
      v68 = (uint64_t *)&v69;
      v4 = *(double **)(v1 + 24);
      v3 = *(double **)(v1 + 32);
      if (v4 == v3)
      {
        v5 = 0;
      }
      else
      {
        do
        {
          std::__tree<double>::__emplace_unique_key_args<double,double const&>(&v68, v4, (uint64_t *)v4);
          v66 = *v4 + v4[2];
          std::__tree<double>::__emplace_unique_key_args<double,double const&>(&v68, &v66, (uint64_t *)&v66);
          v4 += 4;
        }
        while (v4 != v3);
        v5 = v70;
      }
      std::vector<double>::reserve(&__p, v5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>,std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>,std::back_insert_iterator<std::vector<double>>>((uint64_t)&v66, v68, &v69, (uint64_t)&__p);
      std::__sort<std::__less<double,double> &,double *>();
      std::vector<std::vector<CGRect>>::vector(&v66, ((char *)v72 - (_BYTE *)__p) >> 3);
      v65 = (uint64_t *)v1;
      v6 = *(double **)(v1 + 24);
      v7 = *(double **)(v1 + 32);
      if (v6 != v7)
      {
        v9 = (double *)__p;
        v8 = v72;
        v10 = v72;
        do
        {
          if (v10 == v9)
          {
            v10 = v9;
          }
          else
          {
            v11 = *v6;
            v12 = *v6 + v6[2];
            v13 = *v9;
            if (*v9 < v12)
            {
              v14 = 0;
              v15 = v6[1];
              v16 = v15 + v6[3];
              while (1)
              {
                if (v13 >= v11)
                {
                  v17 = *(_QWORD *)&v66 + 24 * v14;
                  v19 = (double **)(v17 + 8);
                  v18 = *(double **)(v17 + 8);
                  v21 = (_QWORD *)(v17 + 16);
                  v20 = *(_QWORD *)(v17 + 16);
                  if ((unint64_t)v18 >= v20)
                  {
                    v23 = *(double **)v17;
                    v24 = ((uint64_t)v18 - *(_QWORD *)v17) >> 4;
                    v25 = v24 + 1;
                    if ((unint64_t)(v24 + 1) >> 60)
                      goto LABEL_75;
                    v26 = v20 - (_QWORD)v23;
                    if (v26 >> 3 > v25)
                      v25 = v26 >> 3;
                    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
                      v27 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v27 = v25;
                    if (v27)
                    {
                      v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::Perspective::Line>>((uint64_t)v21, v27);
                      v18 = *v19;
                      v23 = *(double **)v17;
                    }
                    else
                    {
                      v28 = 0;
                    }
                    v29 = &v28[16 * v24];
                    *(double *)v29 = v15;
                    *((_DWORD *)v29 + 2) = 1;
                    v30 = v29;
                    if (v18 != v23)
                    {
                      do
                      {
                        *((_OWORD *)v30 - 1) = *((_OWORD *)v18 - 1);
                        v30 -= 16;
                        v18 -= 2;
                      }
                      while (v18 != v23);
                      v23 = *(double **)v17;
                    }
                    *(_QWORD *)v17 = v30;
                    v22 = (double *)(v29 + 16);
                    *v19 = (double *)(v29 + 16);
                    *v21 = &v28[16 * v27];
                    if (v23)
                      operator delete(v23);
                  }
                  else
                  {
                    *v18 = v15;
                    *((_DWORD *)v18 + 2) = 1;
                    v22 = v18 + 2;
                  }
                  *v19 = v22;
                  v31 = *(_QWORD *)&v66 + 24 * v14;
                  v33 = (double **)(v31 + 8);
                  v32 = *(double **)(v31 + 8);
                  v35 = (_QWORD *)(v31 + 16);
                  v34 = *(_QWORD *)(v31 + 16);
                  if ((unint64_t)v32 >= v34)
                  {
                    v37 = *(double **)v31;
                    v38 = ((uint64_t)v32 - *(_QWORD *)v31) >> 4;
                    v39 = v38 + 1;
                    if ((unint64_t)(v38 + 1) >> 60)
LABEL_75:
                      abort();
                    v40 = v34 - (_QWORD)v37;
                    if (v40 >> 3 > v39)
                      v39 = v40 >> 3;
                    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
                      v41 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v41 = v39;
                    if (v41)
                    {
                      v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::Perspective::Line>>((uint64_t)v35, v41);
                      v32 = *v33;
                      v37 = *(double **)v31;
                    }
                    else
                    {
                      v42 = 0;
                    }
                    v43 = &v42[16 * v38];
                    *(double *)v43 = v16;
                    *((_DWORD *)v43 + 2) = -1;
                    v44 = v43;
                    if (v32 != v37)
                    {
                      do
                      {
                        *((_OWORD *)v44 - 1) = *((_OWORD *)v32 - 1);
                        v44 -= 16;
                        v32 -= 2;
                      }
                      while (v32 != v37);
                      v37 = *(double **)v31;
                    }
                    *(_QWORD *)v31 = v44;
                    v36 = (double *)(v43 + 16);
                    *v33 = (double *)(v43 + 16);
                    *v35 = &v42[16 * v41];
                    if (v37)
                      operator delete(v37);
                  }
                  else
                  {
                    *v32 = v16;
                    *((_DWORD *)v32 + 2) = -1;
                    v36 = v32 + 2;
                  }
                  *v33 = v36;
                  v9 = (double *)__p;
                  v8 = v72;
                }
                if (++v14 >= (unint64_t)(v8 - v9))
                  break;
                v13 = v9[v14];
                v10 = v8;
                if (v13 >= v12)
                  goto LABEL_51;
              }
              v10 = v8;
            }
          }
LABEL_51:
          v6 += 4;
        }
        while (v6 != v7);
      }
      v45 = *(uint64_t **)&v66;
      v46 = v67;
      while (v45 != v46)
      {
        v47 = *v45;
        v48 = v45[1];
        v45 += 3;
        v49 = 126 - 2 * __clz((uint64_t)(v48 - v47) >> 4);
        if (v48 == v47)
          v50 = 0;
        else
          v50 = v49;
        std::__introsort<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*,false>(v47, v48, v50, 1);
      }
      v51 = 0;
      if (((char *)v72 - (_BYTE *)__p) >> 3 == 1)
      {
        v54 = v64;
      }
      else
      {
        v52 = 0;
        v53 = *(double *)__p;
        v54 = v64;
        do
        {
          v55 = v53;
          v56 = (uint64_t *)(*(_QWORD *)&v66 + 24 * v52++);
          v53 = *((double *)__p + v52);
          v57 = *v56;
          v58 = v56[1];
          if (v57 != v58)
          {
            v59 = 0;
            v60 = v53 - v55;
            v61 = 0.0;
            do
            {
              if (v59)
              {
                v59 += *(_DWORD *)(v57 + 8);
                if (!v59)
                  v51 = (unint64_t)((double)v51 + v60 * (*(double *)v57 - v61));
              }
              else
              {
                v61 = *(double *)v57;
                v59 = *(_DWORD *)(v57 + 8);
              }
              v57 += 16;
            }
            while (v57 != v58);
          }
        }
        while (v52 != (((char *)v72 - (_BYTE *)__p) >> 3) - 1);
      }
      v74 = (void **)&v66;
      std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v74);
      std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&v68, v69);
      if (__p)
      {
        v72 = (double *)__p;
        operator delete(__p);
      }
      v2 = v51 + v54;
      v1 = *v65;
    }
    while (*v65);
  }
  else
  {
    v2 = 0;
  }
  return CI::TileTask::pixelsProcessed(this) - v2;
}

void *CI::TileTask::graphviz_representation(CI::TileTask *this, const CI::RenderTask *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  CIGVNode *v8;
  CFStringRef v9;
  const char *v10;
  _QWORD *v11;
  _BYTE *v13;
  const CI::RenderTask *v14;
  _QWORD v15[6];
  _QWORD v16[7];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t (*v21)(uint64_t);
  _BYTE v22[32];
  int v23;
  _QWORD v24[9];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t (*v29)(uint64_t);
  _BYTE v30[32];
  int v31;
  _QWORD v32[5];
  _BYTE v33[32];
  int v34;
  _QWORD v35[5];
  _BYTE v36[32];
  int v37;
  _QWORD v38[6];

  v4 = *((_QWORD *)this + 6);
  v5 = CIGVGraphCreate();
  v6 = v5;
  if (v5)
  {
    v35[0] = 0;
    v35[1] = v35;
    v35[2] = 0x5002000000;
    v35[3] = __Block_byref_object_copy__28;
    v35[4] = __Block_byref_object_dispose__28;
    memset(v36, 0, sizeof(v36));
    v37 = 1065353216;
    v32[0] = 0;
    v32[1] = v32;
    v32[2] = 0x5002000000;
    v32[3] = __Block_byref_object_copy__16;
    v32[4] = __Block_byref_object_dispose__17;
    memset(v33, 0, sizeof(v33));
    v34 = 1065353216;
    v25 = 0;
    v26 = &v25;
    v27 = 0x5002000000;
    v28 = __Block_byref_object_copy__18;
    v29 = __Block_byref_object_dispose__19;
    v14 = a2;
    memset(v30, 0, sizeof(v30));
    v31 = 1065353216;
    v7 = MEMORY[0x1E0C809B0];
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 0x40000000;
    v24[2] = ___ZNK2CI8TileTask23graphviz_representationEPKNS_10RenderTaskE_block_invoke;
    v24[3] = &unk_1E2EC1058;
    v24[4] = &v25;
    v24[5] = v35;
    v24[6] = v32;
    v24[7] = this;
    v24[8] = v5;
    v17 = MEMORY[0x1E0C809B0];
    v18 = 0x40000000;
    v19 = (uint64_t)___ZNK2CI4Node27traverse_preorder_stoppableEU13block_pointerFbPKS0_E_block_invoke_0;
    v20 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E2EC9870;
    v21 = (uint64_t (*)(uint64_t))v24;
    CI::GraphObject::traverse_preorder_stoppable(v4, 0, 0, 0, (uint64_t)&v17);
    v17 = 0;
    v18 = (uint64_t)&v17;
    v19 = 0x5002000000;
    v20 = __Block_byref_object_copy__22;
    v21 = __Block_byref_object_dispose__23;
    v13 = v22;
    memset(v22, 0, sizeof(v22));
    v23 = 1065353216;
    v16[0] = v7;
    v16[1] = 0x40000000;
    v16[2] = ___ZNK2CI8TileTask23graphviz_representationEPKNS_10RenderTaskE_block_invoke_24;
    v16[3] = &unk_1E2EC9848;
    v16[4] = &v17;
    v16[5] = &v25;
    v16[6] = v6;
    v38[0] = v7;
    v38[1] = 0x40000000;
    v38[2] = ___ZNK2CI4Node27traverse_preorder_stoppableEU13block_pointerFbPKS0_E_block_invoke_0;
    v38[3] = &unk_1E2EC9870;
    v38[4] = v16;
    CI::GraphObject::traverse_preorder_stoppable(v4, 0, 0, 0, (uint64_t)v38);
    v8 = CIGVNodeCreate();
    CIGVNodeSetColor(v8, (const char *)0xD);
    CIGVNodeSetShape(v8, 0);
    if (*((_QWORD *)v14 + 12))
      v9 = CFStringCreateWithFormat(0, 0, CFSTR("destination=%@\n"), *((_QWORD *)v14 + 12), v22);
    else
      v9 = &stru_1E2ECD1B0;
    v15[0] = v7;
    v15[1] = 0x40000000;
    v15[2] = ___ZNK2CI8TileTask23graphviz_representationEPKNS_10RenderTaskE_block_invoke_2;
    v15[3] = &__block_descriptor_tmp_42_1;
    v15[4] = this;
    v15[5] = v14;
    v10 = (const char *)stream_to_string((uint64_t)v15);
    CIGVNodeSetLabel(v8, v10);
    CFRelease(v9);
    CFRelease(v10);
    CIGVGraphAddNode(v6, (const char *)v8);
    v38[0] = v4;
    v11 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>(v26 + 5, v38);
    CIGVGraphAddEdge(v6, (const char *)v11[3], (uint64_t)v8);
    CFRelease(v8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::clear(v26 + 5);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::clear((_QWORD *)(v18 + 40));
    _Block_object_dispose(&v17, 8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v13);
    _Block_object_dispose(&v25, 8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v30);
    _Block_object_dispose(v32, 8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v33);
    _Block_object_dispose(v35, 8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v36);
  }
  return v6;
}

uint64_t __Block_byref_object_copy__28(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__28(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

uint64_t __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__17(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

uint64_t __Block_byref_object_copy__18(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__19(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

uint64_t ___ZNK2CI8TileTask23graphviz_representationEPKNS_10RenderTaskE_block_invoke(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL4 is_any_TypeNode;
  uint64_t *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _OWORD v19[3];
  uint64_t v20;
  char v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int **v24;

  v23 = a2;
  v3 = *(_QWORD *)(a1 + 56);
  if (std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &v23))
  {
    return 1;
  }
  if (!CI_GRAPHVIZ_INTERNAL()
    && (*(int (**)(unsigned int *))(*(_QWORD *)v23 + 40))(v23) >= 2
    && (*(int (**)(unsigned int *))(*(_QWORD *)v23 + 40))(v23) >= 1)
  {
    v5 = 0;
    do
    {
      v22 = 0;
      v22 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v23 + 48))(v23, v5);
      if (!std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), &v22))
      {
        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v7 = *(_QWORD *)(v6 + 64);
        v24 = (unsigned int **)&v22;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v6 + 40, &v22, (uint64_t)&std::piecewise_construct, &v24)+ 6) = v7;
      }
      v5 = (v5 + 1);
    }
    while ((int)v5 < (*(int (**)(unsigned int *))(*(_QWORD *)v23 + 40))(v23));
  }
  v8 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
  is_any_TypeNode = CI::is_any_TypeNode(v8);
  if (is_any_TypeNode)
  {
    v10 = std::__hash_table<std::__hash_value_type<CI::ImageIndex,CI::Image::ImageStats>,std::__unordered_map_hasher<CI::ImageIndex,std::__hash_value_type<CI::ImageIndex,CI::Image::ImageStats>,std::hash<CI::ImageIndex>,std::equal_to<CI::ImageIndex>,true>,std::__unordered_map_equal<CI::ImageIndex,std::__hash_value_type<CI::ImageIndex,CI::Image::ImageStats>,std::equal_to<CI::ImageIndex>,std::hash<CI::ImageIndex>,true>,std::allocator<std::__hash_value_type<CI::ImageIndex,CI::Image::ImageStats>>>::find<CI::ImageIndex>((_QWORD *)(v3 + 88), v23 + 9);
    if (v10)
    {
      v11 = *(_OWORD *)(v10 + 3);
      v12 = *(_OWORD *)(v10 + 5);
      v13 = *(_OWORD *)(v10 + 7);
      v14 = v10[9];
      v15 = *((_BYTE *)v10 + 80);
    }
    else
    {
      v15 = 0;
      v14 = 0;
      v11 = 0uLL;
      v13 = 0uLL;
      v12 = 0uLL;
    }
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40;
    v19[0] = v11;
    v19[1] = v12;
    v19[2] = v13;
    v20 = v14;
    v21 = v15;
    v17 = (void *)(*(uint64_t (**)(unsigned int *, uint64_t, _OWORD *))(*(_QWORD *)v23 + 144))(v23, v16, v19);
    v24 = (unsigned int **)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v23 + 384))(v23);
    if (std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}*>>::find<unsigned long long>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), (unint64_t *)&v24))
    {
      CIGVNodeSetColor(v17, (const char *)0xF);
    }
    std::__hash_table<CI::OtherDigest,std::hash<CI::OtherDigest>,std::equal_to<CI::OtherDigest>,std::allocator<CI::OtherDigest>>::__emplace_unique_key_args<CI::OtherDigest,CI::OtherDigest const&>(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40, (unint64_t *)&v24, &v24);
    CIGVGraphAddNode(*(void **)(a1 + 64), (const char *)v17);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40;
    v24 = &v23;
    std::__hash_table<std::__hash_value_type<CI::Node const*,unsigned long>,std::__unordered_map_hasher<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,true>,std::__unordered_map_equal<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::equal_to<CI::Node const*>,std::hash<CI::Node const*>,true>,std::allocator<std::__hash_value_type<CI::Node const*,unsigned long>>>::__emplace_unique_key_args<CI::Node const*,std::piecewise_construct_t const&,std::tuple<CI::Node const* const&>,std::tuple<>>(v18, &v23, (uint64_t)&std::piecewise_construct, &v24)[3] = v17;
  }
  return !is_any_TypeNode;
}

uint64_t __Block_byref_object_copy__22(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

BOOL ___ZNK2CI8TileTask23graphviz_representationEPKNS_10RenderTaskE_block_invoke_24(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v3 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &v10);
  if (!v3)
  {
    std::__hash_table<CI::Node const*,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,std::allocator<CI::Node const*>>::__emplace_unique_key_args<CI::Node const*,CI::Node const* const&>(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, &v10, &v10);
    v4 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), &v10)[3];
    if ((*(int (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10) >= 1)
    {
      v5 = 0;
      do
      {
        v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v5);
        v7 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>(v6, &v9);
        CIGVGraphAddEdge(*(void **)(a1 + 48), (const char *)v7[3], v4);
        v5 = (v5 + 1);
      }
      while ((int)v5 < (*(int (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10));
    }
  }
  return v3 != 0;
}

uint64_t ___ZNK2CI8TileTask23graphviz_representationEPKNS_10RenderTaskE_block_invoke_2(uint64_t a1, FILE *a2)
{
  _QWORD *v4;
  uint64_t v5;
  const char *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  int v16;
  const char *v17;
  uint64_t v18;
  const __CFString *v19;
  const char *v20;
  const char *v21;
  unint64_t v22;
  const char *v23;
  const char *v24;
  const char *v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  uint64_t result;
  uint64_t v33;
  double v34;
  __int128 v35;
  __int128 v36;
  char buffer[16];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(a1 + 40);
  v6 = (const char *)v4[2];
  v7 = (const void *)v4[13];
  v8 = (*(uint64_t (**)(_QWORD *))(*v4 + 40))(v4);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
  fprintf(a2, "program graph\n%s %p %ldx%ld\n", v6, v7, v8, v9);
  v10 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 24) + 304))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24));
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 24) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24));
  v12 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(v12 + 24);
  v13 = *(_QWORD *)(v12 + 32);
  v16 = *(unsigned __int8 *)(v14 + 236);
  v15 = (const char *)(v14 + 236);
  if (v16)
    v17 = ":";
  else
    v17 = "";
  fprintf(a2, "(%s%s context %d%s%s frame %lu tile %lu)\n", "", v10, v11, v17, v15, v13, *(_QWORD *)(v5 + 32));
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(const __CFString **)(v18 + 96);
  if (v19)
  {
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    *(_OWORD *)buffer = 0u;
    v38 = 0u;
    CFStringGetCString(v19, buffer, 256, 0x8000100u);
    fprintf(a2, "destination=%s\n", buffer);
    v18 = *(_QWORD *)(a1 + 40);
  }
  v20 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 24) + 312))(*(_QWORD *)(v18 + 24));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 24) + 232))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24)) == -1)
    v21 = "false";
  else
    v21 = "true";
  v22 = (unint64_t)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 24) + 488))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24)) >> 20;
  v23 = CI::name_for_format(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 32));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 24) + 168))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24)))
    v24 = "(lossyAllowed)";
  else
    v24 = "";
  v25 = CI::name_for_format(*(_DWORD *)(*(_QWORD *)(a1 + 40) + 80));
  v26 = *(double *)(v5 + 72);
  v27 = *(double *)(v5 + 80);
  v28 = *(_QWORD *)(a1 + 40);
  v35 = *(_OWORD *)(v28 + 200);
  v36 = *(_OWORD *)(v5 + 56);
  v29 = *(_QWORD *)(v28 + 216);
  v30 = (unint64_t)GetSurfaceCachePeakNonVolatileSize() >> 20;
  v31 = CI::RenderTask::completionTime(*(CI::RenderTask **)(a1 + 40));
  fprintf(a2, "deviceName=%s\ncacheIntermediates=%s\nintermediatesLimit=%ldMB\nworkingFormat=%s%s\nformat=%s\nroi=[%g %g %g %g]\npassCount=%ld\npixelsProcessed=%ld\npixelsOverdrawn=%ld\npeakNonVolatile=%ldMB\ncompletionTime=%.3fs", v20, v21, v22, v23, v24, v25, *(double *)&v36,
    *((double *)&v36 + 1),
    v26,
    v27,
    (_QWORD)v35,
    *((_QWORD *)&v35 + 1),
    v29,
    v30,
    v31);
  fprintf(a2, "\ncompileTime=%.3fms", *(double *)(*(_QWORD *)(a1 + 40) + 176) * 1000.0);
  result = fprintf(a2, "\ncompileWaitTime=%.3fms", *(double *)(*(_QWORD *)(a1 + 40) + 184) * 1000.0);
  v33 = *(_QWORD *)(a1 + 40);
  v34 = *(double *)(v33 + 168);
  if (v34 != 0.0)
    return fprintf(a2, "\nkernelExecutionTime=%.3fms\nrate=%.3fMP/s", v34 * 1000.0, (double)*(unint64_t *)(v33 + 208) / 1000000.0 / v34);
  return result;
}

double CI::RenderTask::completionTime(CI::RenderTask *this)
{
  uint64_t v1;
  double v2;
  double v3;
  NSObject *v4;

  v1 = *((_QWORD *)this + 18);
  v2 = 0.0;
  if (v1 != *((_QWORD *)this + 17))
  {
    v3 = *(double *)(*(_QWORD *)(v1 - 8) + 40);
    if (v3 <= 0.0)
    {
      v4 = ci_logger_render();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        CI::RenderTask::completionTime(v4);
    }
    else
    {
      return v3 - *((double *)this + 20);
    }
  }
  return v2;
}

uint64_t CI::RenderTask::RenderTask(uint64_t a1, uint64_t a2, uint64_t a3, CI::Object *this, _OWORD *a5, int a6, uint64_t a7)
{
  uint64_t v11;
  __int128 v12;
  const void *v13;
  uint64_t v14;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1E2EB85A8;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 152);
  if (this)
  {
    v11 = CI::Object::ref((uint64_t)this);
    a3 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)(a1 + 40) = v11;
  v12 = a5[1];
  *(_OWORD *)(a1 + 48) = *a5;
  *(_OWORD *)(a1 + 64) = v12;
  *(_DWORD *)(a1 + 80) = a6;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  CI::Object::ref(a3);
  if (a7)
  {
    v13 = *(const void **)(a7 + 16);
    *(_QWORD *)(a1 + 96) = v13;
    if (v13)
      CFRetain(v13);
    *(_QWORD *)(a1 + 104) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a7 + 40))(a7);
    *(_QWORD *)(a1 + 112) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a7 + 48))(a7);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a7 + 56))(a7);
  }
  else
  {
    v14 = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 120) = v14;
  *(CFAbsoluteTime *)(a1 + 160) = CFAbsoluteTimeGetCurrent();
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  if (a7 && !*(_DWORD *)(a1 + 80))
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a7 + 32);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  return a1;
}

CI::RenderTask *CI::RenderTask::RenderTask(CI::RenderTask *this, CFTypeRef cf)
{
  CFTypeRef v3;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = &off_1E2EB85A8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  if (cf)
    v3 = CFRetain(cf);
  else
    v3 = 0;
  *((_QWORD *)this + 16) = v3;
  return this;
}

CI::RenderTask *CI::RenderTask::RenderTask(CI::RenderTask *this, const char *a2, ...)
{
  const __CFString *v3;
  va_list va;

  va_start(va, a2);
  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = &off_1E2EB85A8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  v3 = CFStringCreateWithCString(0, a2, 0x600u);
  *((_QWORD *)this + 16) = CFStringCreateWithFormatAndArguments(0, 0, v3, va);
  CFRelease(v3);
  return this;
}

void CI::RenderTask::~RenderTask(CI::RenderTask *this)
{
  CI::Object *v2;
  const void *v3;
  const void *v4;
  CI::Object *v5;
  void **v6;

  *(_QWORD *)this = &off_1E2EB85A8;
  v2 = (CI::Object *)*((_QWORD *)this + 5);
  if (v2)
    CI::Object::unref(v2);
  *((_QWORD *)this + 5) = 0;
  v3 = (const void *)*((_QWORD *)this + 16);
  if (v3)
    CFRelease(v3);
  *((_QWORD *)this + 16) = 0;
  v4 = (const void *)*((_QWORD *)this + 12);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 12) = 0;
  v5 = (CI::Object *)*((_QWORD *)this + 3);
  if (v5)
    CI::Object::unref(v5);
  *((_QWORD *)this + 3) = 0;
  v6 = (void **)((char *)this + 136);
  std::vector<std::unique_ptr<CI::TileTask,CI::ObjectDeleter<CI::TileTask>>>::__destroy_vector::operator()[abi:nn180100](&v6);
}

{
  CI::RenderTask::~RenderTask(this);
  JUMPOUT(0x194025AACLL);
}

_QWORD *CI::RenderTask::addTileTask(_QWORD *this, CI::TileTask *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int64x2_t v18;
  char *v19;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  _QWORD *v23;

  if (!this[16])
  {
    v2 = this;
    if (a2)
      v3 = CI::Object::ref((uint64_t)a2);
    else
      v3 = 0;
    this = v2 + 19;
    v4 = v2[19];
    v5 = (uint64_t *)v2[18];
    if ((unint64_t)v5 >= v4)
    {
      v7 = v2[17];
      v8 = ((uint64_t)v5 - v7) >> 3;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v9 = v4 - v7;
      v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1))
        v10 = v8 + 1;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      v23 = v2 + 19;
      if (v11)
        v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)this, v11);
      else
        v12 = 0;
      v13 = (uint64_t *)&v12[8 * v8];
      v14 = &v12[8 * v11];
      v22 = v14;
      *v13 = v3;
      v6 = v13 + 1;
      v21.i64[1] = (uint64_t)(v13 + 1);
      v16 = (_QWORD *)v2[17];
      v15 = (_QWORD *)v2[18];
      if (v15 == v16)
      {
        v18 = vdupq_n_s64((unint64_t)v15);
      }
      else
      {
        do
        {
          v17 = *--v15;
          *v15 = 0;
          *--v13 = v17;
        }
        while (v15 != v16);
        v18 = *(int64x2_t *)(v2 + 17);
        v6 = (_QWORD *)v21.i64[1];
        v14 = v22;
      }
      v2[17] = v13;
      v2[18] = v6;
      v21 = v18;
      v19 = (char *)v2[19];
      v2[19] = v14;
      v22 = v19;
      v20 = v18.i64[0];
      this = (_QWORD *)std::__split_buffer<std::unique_ptr<CI::TileTask,CI::ObjectDeleter<CI::TileTask>>>::~__split_buffer((uint64_t)&v20);
    }
    else
    {
      *v5 = v3;
      v6 = v5 + 1;
    }
    v2[18] = v6;
  }
  return this;
}

void CI::RenderTask::raise(CI::RenderTask *this, const char *a2, ...)
{
  const __CFString *v3;
  va_list va;

  va_start(va, a2);
  v3 = CFStringCreateWithCString(0, a2, 0x600u);
  *((_QWORD *)this + 16) = CFStringCreateWithFormatAndArguments(0, 0, v3, va);
  CFRelease(v3);
}

CFTypeRef CI::RenderTask::waitUntilCompleted(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  CI::TileTask **v6;
  CI::TileTask **v7;
  uint64_t v8;
  CI::TileTask *v9;
  CI::TileTask *v10;
  _QWORD *v11;
  uint64_t v12;
  CFTypeRef v13;
  const void *v14;
  NSObject *v15;
  os_signpost_id_t v16;
  NSObject *v17;
  uint8_t v19[8];
  os_signpost_id_t v20;
  uint8_t buf[16];

  if (*(_QWORD *)(a1 + 144) == *(_QWORD *)(a1 + 136))
    return 0;
  v4 = ci_signpost_log_render();
  if ((unint64_t)((a2 << 32) - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = v4;
    if (os_signpost_enabled(v4))
    {
      *(_WORD *)v19 = 0;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v5, OS_SIGNPOST_INTERVAL_BEGIN, a2 << 32, "wait", (const char *)&unk_192520C83, v19, 2u);
    }
  }
  TimerBase::TimerBase((uint64_t)v19, a2, 0, (uint64_t)"wait", 19);
  dispatch_group_wait(*(dispatch_group_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) - 8) + 16), 0xFFFFFFFFFFFFFFFFLL);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  v6 = *(CI::TileTask ***)(a1 + 136);
  v7 = *(CI::TileTask ***)(a1 + 144);
  while (1)
  {
    if (v6 == v7)
    {
      v13 = 0;
      goto LABEL_17;
    }
    v8 = CI::TileTask::commandBufferError(*v6);
    v9 = *v6;
    if (v8)
      break;
    *(double *)(a1 + 168) = CI::TileTask::executionTime(v9) + *(double *)(a1 + 168);
    *(double *)(a1 + 176) = CI::TileTask::compileTime(*v6);
    *(double *)(a1 + 184) = CI::TileTask::compileWaitTime(*v6) + *(double *)(a1 + 184);
    *(_QWORD *)(a1 + 192) += CI::TileTask::executionCycles(*v6);
    v10 = *v6;
    v11 = (_QWORD *)*((_QWORD *)*v6 + 18);
    if (v11)
    {
      v12 = 0;
      do
      {
        v12 += (uint64_t)(v11[4] - v11[3]) >> 5;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      v12 = 0;
    }
    *(_QWORD *)(a1 + 200) += v12;
    *(_QWORD *)(a1 + 208) += CI::TileTask::pixelsProcessed(v10);
    *(_QWORD *)(a1 + 216) += CI::TileTask::pixelsOverdrawn(v10);
    ++v6;
  }
  v14 = (const void *)CI::TileTask::commandBufferError(v9);
  v13 = CFRetain(v14);
LABEL_17:
  v15 = ci_signpost_log_render();
  v16 = v20;
  if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v17 = v15;
    if (os_signpost_enabled(v15))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1921E4000, v17, OS_SIGNPOST_INTERVAL_END, v16, "wait", (const char *)&unk_192520C83, buf, 2u);
    }
  }
  TimerBase::~TimerBase((TimerBase *)v19);
  return v13;
}

intptr_t CI::RenderTask::waitUntilScheduled(intptr_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 144);
  if (v1 != *(_QWORD *)(this + 136))
    return dispatch_group_wait(*(dispatch_group_t *)(*(_QWORD *)(v1 - 8) + 24), 0xFFFFFFFFFFFFFFFFLL);
  return this;
}

uint64_t CI::RenderTask::quicklookDataForRenderTask(CI::RenderTask *this)
{
  unsigned __int8 v2;
  const char *v3;
  int v4;
  uint64_t v5;
  const char *v6;
  int v7;
  const char *v8;
  const char *v9;
  CFStringRef v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  CI::GraphObject *v19;
  CGImage *v20;
  void *v21;
  char __str[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    CI::RenderTask::quicklookDataForRenderTask(void)const::renderer = (uint64_t)CIGVRendererCreatePDFRenderer();
  }
  CIGVRendererSetOutputFileURL((void *)CI::RenderTask::quicklookDataForRenderTask(void)const::renderer, 0);
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  *(_OWORD *)__str = 0u;
  v24 = 0u;
  v3 = (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 304))(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 272))(*((_QWORD *)this + 3));
  v5 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v5 + 236);
  v6 = (const char *)(v5 + 236);
  v8 = ":";
  if (v7)
    v9 = ":";
  else
    v9 = "";
  snprintf(__str, 0x200uLL, "CIRenderTask <%s context %d%s%s frame %lu>", v3, v4, v9, v6, *((_QWORD *)this + 4));
  CIGVRendererSetOutputFileTitle((void *)CI::RenderTask::quicklookDataForRenderTask(void)const::renderer, (uint64_t)__str);
  if (*((_QWORD *)this + 12))
    v10 = CFStringCreateWithFormat(0, 0, CFSTR("destination=%@\n"), *((_QWORD *)this + 12));
  else
    v10 = &stru_1E2ECD1B0;
  v11 = *((_QWORD *)this + 2);
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 304))(*((_QWORD *)this + 3));
  v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 272))(*((_QWORD *)this + 3));
  v14 = *((_QWORD *)this + 3);
  v15 = *((_QWORD *)this + 4);
  v17 = *(unsigned __int8 *)(v14 + 236);
  v16 = v14 + 236;
  if (!v17)
    v8 = "";
  v18 = CI::name_for_format(*((_DWORD *)this + 20));
  v19 = (CI::GraphObject *)CFStringCreateWithFormat(0, 0, CFSTR("optimized graph\n%s\n(%s context %d%s%s frame %lu)\n%@format=%s\nroi=[%g %g %g %g]"), v11, v12, v13, v8, v16, v15, v10, v18, *((_QWORD *)this + 6), *((_QWORD *)this + 7), *((_QWORD *)this + 8), *((_QWORD *)this + 9));
  v21 = CI::GraphObject::graphviz_representation(*((CI::GraphObject **)this + 5), v19, 0, v20);
  CIGVGraphRender(v21, (const char *)CI::RenderTask::quicklookDataForRenderTask(void)const::renderer);
  CFRelease(v19);
  CFRelease(v21);
  CFRelease(v10);
  CIGVRenddererFlushRender(CI::RenderTask::quicklookDataForRenderTask(void)const::renderer);
  return CIGVRendererGetPDFData(CI::RenderTask::quicklookDataForRenderTask(void)const::renderer);
}

uint64_t CI::RenderTask::quicklookDataForRenderInfo(CI::RenderTask *this)
{
  unsigned __int8 v2;
  const char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  CI::TileTask **v13;
  CI::TileTask **v14;
  CI::TileTask *v15;
  void *v16;
  char __str[16];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    CI::RenderTask::quicklookDataForRenderInfo(void)const::renderer = (uint64_t)CIGVRendererCreatePDFRenderer();
  }
  CIGVRendererSetOutputFileURL((void *)CI::RenderTask::quicklookDataForRenderInfo(void)const::renderer, 0);
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  *(_OWORD *)__str = 0u;
  v19 = 0u;
  v3 = (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 304))(*((_QWORD *)this + 3));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 272))(*((_QWORD *)this + 3));
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 4);
  v8 = *(unsigned __int8 *)(v5 + 236);
  v7 = (const char *)(v5 + 236);
  if (v8)
    v9 = ":";
  else
    v9 = "";
  v10 = *((_QWORD *)this + 25);
  v11 = *((_QWORD *)this + 26);
  v12 = CI::RenderTask::completionTime(this);
  snprintf(__str, 0x200uLL, "CIRenderInfo <%s context %d%s%s frame %lu>\npassCount=%ld\npixelsProcessed=%ld\ncompletionTime=%.3fs", v3, v4, v9, v7, v6, v10, v11, v12);
  CIGVRendererSetOutputFileTitle((void *)CI::RenderTask::quicklookDataForRenderInfo(void)const::renderer, (uint64_t)__str);
  v13 = (CI::TileTask **)*((_QWORD *)this + 17);
  v14 = (CI::TileTask **)*((_QWORD *)this + 18);
  while (v13 != v14)
  {
    v15 = *v13++;
    v16 = CI::TileTask::graphviz_representation(v15, this);
    CIGVGraphRender(v16, (const char *)CI::RenderTask::quicklookDataForRenderInfo(void)const::renderer);
    CFRelease(v16);
  }
  CIGVRenddererFlushRender(CI::RenderTask::quicklookDataForRenderInfo(void)const::renderer);
  return CIGVRendererGetPDFData(CI::RenderTask::quicklookDataForRenderInfo(void)const::renderer);
}

void CI::RenderTask::dump_for_graphviz(CI::RenderTask *this, const char *a2, unsigned int a3)
{
  CI::TileTask **v5;
  CI::TileTask **v6;
  void *v8;
  CI::TileTask *v9;
  char *v10;
  const __CFData *v11;
  char *v12;
  FILE *v13;
  const UInt8 *BytePtr;
  size_t Length;
  char __str[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5 = (CI::TileTask **)*((_QWORD *)this + 17);
    v6 = (CI::TileTask **)*((_QWORD *)this + 18);
    while (v5 != v6)
    {
      v8 = CI::TileTask::graphviz_representation(*v5, this);
      v9 = *v5++;
      snprintf(__str, 0x100uLL, "%s_%lu", a2, *((_QWORD *)v9 + 4));
      v10 = CI_TEMP_DIR();
      CIGVDumpToFile(v8, a3, (uint64_t)v10, (uint64_t)__str);
      CFRelease(v8);
    }
  }
  else
  {
    v11 = (const __CFData *)CI::RenderTask::quicklookDataForRenderInfo(this);
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)__str = 0u;
    v17 = 0u;
    v12 = CI_TEMP_DIR();
    snprintf(__str, 0x100uLL, "%s/%s.pdf", v12, a2);
    v13 = fopen(__str, "w");
    BytePtr = CFDataGetBytePtr(v11);
    Length = CFDataGetLength(v11);
    fwrite(BytePtr, Length, 1uLL, v13);
    fclose(v13);
    CFRelease(v11);
  }
}

uint64_t CI::TileTask::type(CI::TileTask *this)
{
  return 79;
}

uint64_t CI::RenderTask::type(CI::RenderTask *this)
{
  return 80;
}

uint64_t CI::RenderTask::destWidth(CI::RenderTask *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t CI::RenderTask::destHeight(CI::RenderTask *this)
{
  return *((_QWORD *)this + 15);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t *std::__tree<double>::__emplace_unique_key_args<double,double const&>(uint64_t **a1, double *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  double v7;
  uint64_t **v8;
  double v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((double *)v5 + 4);
        if (v7 >= v9)
          break;
        v5 = (uint64_t *)*v5;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<std::string,CI::SWFunction>,std::__map_value_compare<std::string,std::__value_type<std::string,CI::SWFunction>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CI::SWFunction>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

_QWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>,std::__tree_const_iterator<double,std::__tree_node<double,void *> *,long>,std::back_insert_iterator<std::vector<double>>>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v10;

  v4 = a2;
  v10 = a4;
  if (a2 == a3)
    return a2;
  v5 = a3;
  do
  {
    std::back_insert_iterator<std::vector<double>>::operator=[abi:nn180100](&v10, v4 + 4);
    v6 = (_QWORD *)v4[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v4[2];
        v8 = *v7 == (_QWORD)v4;
        v4 = v7;
      }
      while (!v8);
    }
    v4 = v7;
  }
  while (v7 != v5);
  return v5;
}

uint64_t *std::back_insert_iterator<std::vector<double>>::operator=[abi:nn180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *(_QWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_QWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)v6, v12);
      v8 = *(_QWORD **)v4;
      v5 = *(_QWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  int v25;
  double v26;
  double v27;
  BOOL v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  double v33;
  double v34;
  int v35;
  double v36;
  double v37;
  double v38;
  double v39;
  int v40;
  double v41;
  double v42;
  int v43;
  double v44;
  double v45;
  int v46;
  int v47;
  double v48;
  int v49;
  double v50;
  int v51;
  unint64_t v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double v70;
  double v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  double v87;
  double v88;
  uint64_t v89;
  unint64_t v90;
  double *v92;
  uint64_t v93;
  double v94;
  double v95;
  uint64_t v96;
  double *v97;
  double *v98;
  int v99;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(double *)(a2 - 16);
        v39 = *(double *)v8;
        if (v38 < *(double *)v8)
        {
          *(double *)v8 = v38;
          *(double *)(a2 - 16) = v39;
          v40 = *(_DWORD *)(v8 + 8);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v40;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(v8, v8 + 16, a2 - 16);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(v8, v8 + 16, v8 + 32, a2 - 16);
      case 5uLL:
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(v8, v8 + 16, v8 + 32, v8 + 48);
        v41 = *(double *)(a2 - 16);
        v42 = *(double *)(v8 + 48);
        if (v41 < v42)
        {
          *(double *)(v8 + 48) = v41;
          *(double *)(a2 - 16) = v42;
          v43 = *(_DWORD *)(v8 + 56);
          *(_DWORD *)(v8 + 56) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v43;
          v44 = *(double *)(v8 + 48);
          v45 = *(double *)(v8 + 32);
          if (v44 < v45)
          {
            *(double *)(v8 + 32) = v44;
            *(double *)(v8 + 48) = v45;
            v46 = *(_DWORD *)(v8 + 40);
            v47 = *(_DWORD *)(v8 + 56);
            *(_DWORD *)(v8 + 40) = v47;
            *(_DWORD *)(v8 + 56) = v46;
            v48 = *(double *)(v8 + 16);
            if (v44 < v48)
            {
              *(double *)(v8 + 16) = v44;
              *(double *)(v8 + 32) = v48;
              v49 = *(_DWORD *)(v8 + 24);
              *(_DWORD *)(v8 + 24) = v47;
              *(_DWORD *)(v8 + 40) = v49;
              v50 = *(double *)v8;
              if (v44 < *(double *)v8)
              {
                *(double *)v8 = v44;
                *(double *)(v8 + 16) = v50;
                v51 = *(_DWORD *)(v8 + 8);
                *(_DWORD *)(v8 + 8) = v47;
                *(_DWORD *)(v8 + 24) = v51;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v52 = v8 + 16;
          v54 = v8 == a2 || v52 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = v8;
              do
              {
                v57 = v52;
                v58 = *(double *)(v56 + 16);
                v59 = *(double *)v56;
                if (v58 < *(double *)v56)
                {
                  v60 = *(_QWORD *)(v56 + 24);
                  v61 = v55;
                  while (1)
                  {
                    v62 = v8 + v61;
                    *(double *)(v62 + 16) = v59;
                    *(_DWORD *)(v62 + 24) = *(_DWORD *)(v8 + v61 + 8);
                    if (!v61)
                      break;
                    v59 = *(double *)(v62 - 16);
                    v61 -= 16;
                    if (v58 >= v59)
                    {
                      v63 = v8 + v61 + 16;
                      goto LABEL_80;
                    }
                  }
                  v63 = v8;
LABEL_80:
                  *(double *)v63 = v58;
                  *(_DWORD *)(v63 + 8) = v60;
                }
                v52 = v57 + 16;
                v55 += 16;
                v56 = v57;
              }
              while (v57 + 16 != a2);
            }
          }
          else if (!v54)
          {
            v92 = (double *)(v8 + 24);
            do
            {
              v93 = v52;
              v94 = *(double *)(v7 + 16);
              v95 = *(double *)v7;
              if (v94 < *(double *)v7)
              {
                v96 = *(_QWORD *)(v7 + 24);
                v97 = v92;
                do
                {
                  v98 = v97;
                  *(v97 - 1) = v95;
                  v99 = *((_DWORD *)v97 - 4);
                  v97 -= 2;
                  *(_DWORD *)v98 = v99;
                  v95 = *(v98 - 5);
                }
                while (v94 < v95);
                *(v97 - 1) = v94;
                *(_DWORD *)v97 = v96;
              }
              v52 = v93 + 16;
              v92 += 2;
              v7 = v93;
            }
            while (v93 + 16 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v64 = (v10 - 2) >> 1;
            v65 = v64;
            do
            {
              v66 = v65;
              if (v64 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = v8 + 16 * v67;
                if (2 * v66 + 2 < (uint64_t)v10 && *(double *)v68 < *(double *)(v68 + 16))
                {
                  v68 += 16;
                  v67 = 2 * v66 + 2;
                }
                v69 = v8 + 16 * v66;
                v70 = *(double *)v68;
                v71 = *(double *)v69;
                if (*(double *)v68 >= *(double *)v69)
                {
                  v72 = *(_QWORD *)(v69 + 8);
                  do
                  {
                    v73 = v69;
                    v69 = v68;
                    *(double *)v73 = v70;
                    *(_DWORD *)(v73 + 8) = *(_DWORD *)(v68 + 8);
                    if (v64 < v67)
                      break;
                    v74 = 2 * v67;
                    v67 = (2 * v67) | 1;
                    v68 = v8 + 16 * v67;
                    v75 = v74 + 2;
                    if (v75 < (uint64_t)v10 && *(double *)v68 < *(double *)(v68 + 16))
                    {
                      v68 += 16;
                      v67 = v75;
                    }
                    v70 = *(double *)v68;
                  }
                  while (*(double *)v68 >= v71);
                  *(double *)v69 = v71;
                  *(_DWORD *)(v69 + 8) = v72;
                }
              }
              v65 = v66 - 1;
            }
            while (v66);
            v76 = (unint64_t)v9 >> 4;
            do
            {
              v77 = 0;
              v78 = *(double *)v8;
              v79 = *(_DWORD *)(v8 + 8);
              v80 = v8;
              do
              {
                v81 = v80;
                v80 += 16 * v77 + 16;
                v82 = 2 * v77;
                v77 = (2 * v77) | 1;
                v83 = v82 + 2;
                if (v83 < v76 && *(double *)v80 < *(double *)(v80 + 16))
                {
                  v80 += 16;
                  v77 = v83;
                }
                *(_QWORD *)v81 = *(_QWORD *)v80;
                *(_DWORD *)(v81 + 8) = *(_DWORD *)(v80 + 8);
              }
              while (v77 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
              if (v80 == a2 - 16)
              {
                *(double *)v80 = v78;
                *(_DWORD *)(v80 + 8) = v79;
              }
              else
              {
                *(_QWORD *)v80 = *(_QWORD *)(a2 - 16);
                *(_DWORD *)(v80 + 8) = *(_DWORD *)(a2 - 8);
                *(double *)(a2 - 16) = v78;
                *(_DWORD *)(a2 - 8) = v79;
                v84 = v80 - v8 + 16;
                if (v84 >= 17)
                {
                  v85 = (((unint64_t)v84 >> 4) - 2) >> 1;
                  v86 = v8 + 16 * v85;
                  v87 = *(double *)v86;
                  v88 = *(double *)v80;
                  if (*(double *)v86 < *(double *)v80)
                  {
                    v89 = *(_QWORD *)(v80 + 8);
                    do
                    {
                      v90 = v80;
                      v80 = v86;
                      *(double *)v90 = v87;
                      *(_DWORD *)(v90 + 8) = *(_DWORD *)(v86 + 8);
                      if (!v85)
                        break;
                      v85 = (v85 - 1) >> 1;
                      v86 = v8 + 16 * v85;
                      v87 = *(double *)v86;
                    }
                    while (*(double *)v86 < v88);
                    *(double *)v80 = v88;
                    *(_DWORD *)(v80 + 8) = v89;
                  }
                }
              }
              a2 -= 16;
            }
            while (v76-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = v8 + 16 * (v10 >> 1);
        if ((unint64_t)v9 < 0x801)
        {
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(v7 + 16 * (v10 >> 1), v7, a2 - 16);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(v7, v7 + 16 * (v10 >> 1), a2 - 16);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(v7 + 16, v12 - 16, a2 - 32);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(v7 + 32, v7 + 16 + 16 * v11, a2 - 48);
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(v12 - 16, v12, v7 + 16 + 16 * v11);
          v13 = *(double *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(double *)v12 = v13;
          v14 = *(_DWORD *)(v7 + 8);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v12 + 8);
          *(_DWORD *)(v12 + 8) = v14;
        }
        --a3;
        v15 = *(double *)v7;
        if ((a4 & 1) == 0)
        {
          v16 = *(_QWORD *)(v7 + 8);
          if (*(double *)(v7 - 16) < v15)
            goto LABEL_12;
          if (v15 >= *(double *)(a2 - 16))
          {
            v30 = v7 + 16;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              v30 += 16;
            }
            while (v15 >= *(double *)v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = *(double *)(v8 + 16);
              v8 += 16;
            }
            while (v15 >= v29);
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
            {
              v32 = *(double *)(v31 - 16);
              v31 -= 16;
            }
            while (v15 < v32);
          }
          if (v8 < v31)
          {
            v33 = *(double *)v8;
            v34 = *(double *)v31;
            do
            {
              *(double *)v8 = v34;
              *(double *)v31 = v33;
              v35 = *(_DWORD *)(v8 + 8);
              *(_DWORD *)(v8 + 8) = *(_DWORD *)(v31 + 8);
              *(_DWORD *)(v31 + 8) = v35;
              do
              {
                v36 = *(double *)(v8 + 16);
                v8 += 16;
                v33 = v36;
              }
              while (v15 >= v36);
              do
              {
                v37 = *(double *)(v31 - 16);
                v31 -= 16;
                v34 = v37;
              }
              while (v15 < v37);
            }
            while (v8 < v31);
          }
          if (v8 - 16 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 16);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 8);
          }
          a4 = 0;
          *(double *)(v8 - 16) = v15;
          *(_DWORD *)(v8 - 8) = v16;
          continue;
        }
        v16 = *(_QWORD *)(v7 + 8);
LABEL_12:
        v17 = 0;
        do
        {
          v18 = *(double *)(v7 + v17 + 16);
          v17 += 16;
        }
        while (v18 < v15);
        v19 = v7 + v17;
        v20 = (double *)a2;
        if (v17 == 16)
        {
          v20 = (double *)a2;
          do
          {
            if (v19 >= (unint64_t)v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v15);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v15);
        }
        if (v19 >= (unint64_t)v20)
        {
          v8 = v7 + v17;
        }
        else
        {
          v23 = *v20;
          v8 = v7 + v17;
          v24 = v20;
          do
          {
            *(double *)v8 = v23;
            *v24 = v18;
            v25 = *(_DWORD *)(v8 + 8);
            *(_DWORD *)(v8 + 8) = *((_DWORD *)v24 + 2);
            *((_DWORD *)v24 + 2) = v25;
            do
            {
              v26 = *(double *)(v8 + 16);
              v8 += 16;
              v18 = v26;
            }
            while (v26 < v15);
            do
            {
              v27 = *(v24 - 2);
              v24 -= 2;
              v23 = v27;
            }
            while (v27 >= v15);
          }
          while (v8 < (unint64_t)v24);
        }
        if (v8 - 16 != v7)
        {
          *(_QWORD *)v7 = *(_QWORD *)(v8 - 16);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 8);
        }
        *(double *)(v8 - 16) = v15;
        *(_DWORD *)(v8 - 8) = v16;
        if (v19 < (unint64_t)v20)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*,false>(v7, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(v7, v8 - 16);
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 16;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  double v5;
  int v6;
  int v7;
  double v8;
  int v9;

  v3 = *(double *)a2;
  v4 = *(double *)result;
  v5 = *(double *)a3;
  if (*(double *)a2 >= *(double *)result)
  {
    if (v5 < v3)
    {
      *(double *)a2 = v5;
      *(double *)a3 = v3;
      v7 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v7;
      v8 = *(double *)result;
      if (*(double *)a2 < *(double *)result)
      {
        *(_QWORD *)result = *(_QWORD *)a2;
        *(double *)a2 = v8;
        v9 = *(_DWORD *)(result + 8);
        *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v9;
      }
    }
  }
  else
  {
    if (v5 >= v3)
    {
      *(double *)result = v3;
      *(double *)a2 = v4;
      v6 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v6;
      if (*(double *)a3 >= v4)
        return result;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(double *)a3 = v4;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    }
    else
    {
      *(double *)result = v5;
      *(double *)a3 = v4;
      v6 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a3 + 8);
    }
    *(_DWORD *)(a3 + 8) = v6;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  int v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  int v21;
  double v22;
  double v23;
  int v24;
  int v25;
  double v26;
  int v27;
  double v28;
  int v29;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(double *)(a2 - 16);
      v7 = *(double *)a1;
      if (v6 < *(double *)a1)
      {
        *(double *)a1 = v6;
        *(double *)(a2 - 16) = v7;
        v8 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(a1, a1 + 16, a1 + 32, a1 + 48);
      v19 = *(double *)(a2 - 16);
      v20 = *(double *)(a1 + 48);
      if (v19 < v20)
      {
        *(double *)(a1 + 48) = v19;
        *(double *)(a2 - 16) = v20;
        v21 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v21;
        v22 = *(double *)(a1 + 48);
        v23 = *(double *)(a1 + 32);
        if (v22 < v23)
        {
          *(double *)(a1 + 32) = v22;
          *(double *)(a1 + 48) = v23;
          v24 = *(_DWORD *)(a1 + 40);
          v25 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)(a1 + 40) = v25;
          *(_DWORD *)(a1 + 56) = v24;
          v26 = *(double *)(a1 + 16);
          if (v22 < v26)
          {
            *(double *)(a1 + 16) = v22;
            *(double *)(a1 + 32) = v26;
            v27 = *(_DWORD *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = v25;
            *(_DWORD *)(a1 + 40) = v27;
            v28 = *(double *)a1;
            if (v22 < *(double *)a1)
            {
              *(double *)a1 = v22;
              *(double *)(a1 + 16) = v28;
              v29 = *(_DWORD *)(a1 + 8);
              *(_DWORD *)(a1 + 8) = v25;
              *(_DWORD *)(a1 + 24) = v29;
            }
          }
        }
      }
      return 1;
    default:
      v9 = (double *)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(a1, a1 + 16, a1 + 32);
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)v10;
    v14 = *v9;
    if (*(double *)v10 < *v9)
    {
      v15 = *(_QWORD *)(v10 + 8);
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(double *)(v17 + 48) = v14;
        *(_DWORD *)(v17 + 56) = *(_DWORD *)(a1 + v16 + 40);
        if (v16 == -32)
          break;
        v14 = *(double *)(v17 + 16);
        v16 -= 16;
        if (v13 >= v14)
        {
          v18 = a1 + v16 + 48;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(double *)v18 = v13;
      *(_DWORD *)(v18 + 8) = v15;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = (double *)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  double v9;
  int v10;
  double v11;
  int v12;
  double v13;
  int v14;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(a1, a2, a3);
  v9 = *(double *)a3;
  if (*(double *)a4 < *(double *)a3)
  {
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(double *)a4 = v9;
    v10 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v10;
    v11 = *(double *)a2;
    if (*(double *)a3 < *(double *)a2)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(double *)a3 = v11;
      v12 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v12;
      v13 = *(double *)a1;
      if (*(double *)a2 < *(double *)a1)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(double *)a2 = v13;
        v14 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v14;
      }
    }
  }
  return result;
}

uint64_t ___ZNK2CI4Node27traverse_preorder_stoppableEU13block_pointerFbPKS0_E_block_invoke_0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void std::vector<std::unique_ptr<CI::TileTask,CI::ObjectDeleter<CI::TileTask>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<CI::TileTask,CI::ObjectDeleter<CI::TileTask>>>::__clear[abi:nn180100](v2);
    operator delete(**a1);
  }
}

void std::vector<std::unique_ptr<CI::TileTask,CI::ObjectDeleter<CI::TileTask>>>::__clear[abi:nn180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  CI::Object *v4;
  CI::Object *v5;

  v2 = (_QWORD *)*a1;
  v3 = (_QWORD *)a1[1];
  while (v3 != v2)
  {
    v5 = (CI::Object *)*--v3;
    v4 = v5;
    *v3 = 0;
    if (v5)
      CI::Object::unref(v4);
  }
  a1[1] = v2;
}

uint64_t std::__split_buffer<std::unique_ptr<CI::TileTask,CI::ObjectDeleter<CI::TileTask>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::unique_ptr<CI::TileTask,CI::ObjectDeleter<CI::TileTask>>>::__destruct_at_end[abi:nn180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::unique_ptr<CI::TileTask,CI::ObjectDeleter<CI::TileTask>>>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  CI::Object *v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v5 = *(CI::Object **)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v5)
      CI::Object::unref(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::__unordered_map_hasher<CI::ProgramNode *,std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::hash<CI::ProgramNode *>,std::equal_to<CI::ProgramNode *>,true>,std::__unordered_map_equal<CI::ProgramNode *,std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::equal_to<CI::ProgramNode *>,std::hash<CI::ProgramNode *>,true>,std::allocator<std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::__unordered_map_hasher<CI::ProgramNode *,std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::hash<CI::ProgramNode *>,std::equal_to<CI::ProgramNode *>,true>,std::__unordered_map_equal<CI::ProgramNode *,std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::equal_to<CI::ProgramNode *>,std::hash<CI::ProgramNode *>,true>,std::allocator<std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::__unordered_map_hasher<CI::ProgramNode *,std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::hash<CI::ProgramNode *>,std::equal_to<CI::ProgramNode *>,true>,std::__unordered_map_equal<CI::ProgramNode *,std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::equal_to<CI::ProgramNode *>,std::hash<CI::ProgramNode *>,true>,std::allocator<std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

char *std::__hash_table<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::__unordered_map_hasher<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::hash<CI::NodeIndex>,std::equal_to<CI::NodeIndex>,true>,std::__unordered_map_equal<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::equal_to<CI::NodeIndex>,std::hash<CI::NodeIndex>,true>,std::allocator<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>>>::__emplace_unique_key_args<CI::NodeIndex,std::piecewise_construct_t const&,std::tuple<CI::NodeIndex const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v11 = (char *)operator new(0x58uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}*>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *(_QWORD *)v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v11)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

_QWORD *std::__hash_table<std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::__unordered_map_hasher<CI::ProgramNode *,std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::hash<CI::ProgramNode *>,std::equal_to<CI::ProgramNode *>,true>,std::__unordered_map_equal<CI::ProgramNode *,std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>,std::equal_to<CI::ProgramNode *>,std::hash<CI::ProgramNode *>,true>,std::allocator<std::__hash_value_type<CI::ProgramNode *,std::vector<CGRect>>>>::__emplace_unique_key_args<CI::ProgramNode *,std::piecewise_construct_t const&,std::tuple<CI::ProgramNode * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto23MTLComputePipelineState}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}*>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

__IOSurface *CI::TextureManager::get_empty_surface(CI::TextureManager *this)
{
  __IOSurface *result;

  result = (__IOSurface *)*((_QWORD *)this + 7);
  if (!result)
  {
    result = CreateSurface((__CVBuffer *)1, (__CVBuffer *)1, (void *)0x10, 1111970369, 1);
    *((_QWORD *)this + 7) = result;
    if (!result)
    {
      x_log("TextureManager::TextureManager() failed to create empty surface\n");
      return (__IOSurface *)*((_QWORD *)this + 7);
    }
  }
  return result;
}

_QWORD *CI::TextureManager::mark_usage(CI::TextureManager *this, void *a2)
{
  char *v3;
  _QWORD *result;
  void *v5;
  uint64_t v6;
  void *v7;

  v7 = a2;
  v3 = (char *)this + 32;
  std::list<CI::attached_surface_t *>::remove((_QWORD *)this + 4, &v7);
  result = operator new(0x18uLL);
  v5 = v7;
  result[1] = v3;
  result[2] = v5;
  v6 = *((_QWORD *)this + 4);
  *result = v6;
  *(_QWORD *)(v6 + 8) = result;
  *((_QWORD *)this + 4) = result;
  ++*((_QWORD *)this + 6);
  return result;
}

void CI::TextureManager::append_to_lru(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  v3 = *(NSObject **)(a1 + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN2CI14TextureManager13append_to_lruEPvPNS_13source_info_tE_block_invoke;
  block[3] = &__block_descriptor_tmp_4_8;
  block[4] = a1;
  block[5] = a2;
  block[6] = a3;
  dispatch_sync(v3, block);
}

void CI::TextureManager::remove_lru(CI::TextureManager *this, CI::Object *a2)
{
  char *v3;
  char *v4;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;

  v3 = (char *)this + 32;
  v4 = (char *)*((_QWORD *)this + 5);
  if (v4 != v3)
  {
    while (*((CI::Object **)v4 + 2) != a2)
    {
      v4 = (char *)*((_QWORD *)v4 + 1);
      if (v4 == v3)
        return;
    }
    if (v4 != v3)
    {
      v6 = (_QWORD *)*((_QWORD *)this + 15);
      if (!v6)
        goto LABEL_17;
      v7 = (uint64_t *)((char *)this + 120);
      do
      {
        v8 = v6[4];
        v9 = v8 >= (unint64_t)a2;
        if (v8 >= (unint64_t)a2)
          v10 = v6;
        else
          v10 = v6 + 1;
        if (v9)
          v7 = v6;
        v6 = (_QWORD *)*v10;
      }
      while (*v10);
      if (v7 != (uint64_t *)((char *)this + 120) && v7[4] <= (unint64_t)a2)
      {
        v11 = (_DWORD *)v7[5];
        v12 = v11[5];
        if (v12 < 2)
        {
          v13 = *(_QWORD *)v4;
          *(_QWORD *)(v13 + 8) = *((_QWORD *)v4 + 1);
          **((_QWORD **)v4 + 1) = v13;
          --*((_QWORD *)this + 6);
          operator delete(v4);
          std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>>>::__remove_node_pointer((uint64_t **)this + 14, v7);
          operator delete(v7);
          (**(void (***)(CI::TextureManager *, _QWORD, _QWORD))this)(this, *(_QWORD *)v11, *((_QWORD *)v11 + 1));
          if (a2)
          {
            switch(v11[4])
            {
              case 0:
                CI::Object::unref(a2);
                break;
              case 1:
                CGImageRelease(a2);
                break;
              case 2:
                CFRelease(a2);
                break;
              case 4:
                ReturnSurfaceToCache((uint64_t)a2);
                break;
              default:
                break;
            }
          }
          free(v11);
        }
        else
        {
          v11[5] = v12 - 1;
        }
      }
      else
      {
LABEL_17:
        x_log("TextureManager::remove_lru() did not find an info struct!\n");
      }
    }
  }
}

uint64_t CI::TextureManager::_lookup_texture(CI::TextureManager *this, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (_QWORD *)*((_QWORD *)this + 15);
  if (!v2)
    return 0;
  v3 = (_QWORD *)((char *)this + 120);
  do
  {
    v4 = v2[4];
    v5 = v4 >= (unint64_t)a2;
    if (v4 >= (unint64_t)a2)
      v6 = v2;
    else
      v6 = v2 + 1;
    if (v5)
      v3 = v2;
    v2 = (_QWORD *)*v6;
  }
  while (*v6);
  if (v3 == (_QWORD *)((char *)this + 120) || v3[4] > (unint64_t)a2)
    return 0;
  v7 = v3[5];
  if (v7)
    CI::TextureManager::mark_usage(this, a2);
  return v7;
}

uint64_t CI::TextureManager::lookup_texture(CI::TextureManager *this, void *a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v2 = *((_QWORD *)this + 13);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN2CI14TextureManager14lookup_textureEPv_block_invoke;
  block[3] = &unk_1E2EC98D8;
  block[4] = &v6;
  block[5] = this;
  block[6] = a2;
  dispatch_sync(v2, block);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZN2CI14TextureManager14lookup_textureEPv_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = CI::TextureManager::_lookup_texture(*(CI::TextureManager **)(a1 + 40), *(void **)(a1 + 48));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

__n128 CI::TextureManager::intermediate(CI::TextureManager *this, char a2)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = operator new();
  *(_QWORD *)v3 = off_1E2EBAFD0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  result = *(__n128 *)MEMORY[0x1E0C9D628];
  v5 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(v3 + 32) = *MEMORY[0x1E0C9D628];
  *(_OWORD *)(v3 + 48) = v5;
  *(_QWORD *)(v3 + 64) = 0;
  *(_BYTE *)(v3 + 73) = 0;
  *(_BYTE *)(v3 + 72) = a2;
  return result;
}

__n128 CI::TextureManager::intermediate(CI::TextureManager *this, Texture a2, __IOSurface *a3, const CGRect *a4, uint64_t a5, char a6)
{
  void *var1;
  unint64_t var0;
  uint64_t v12;
  __n128 result;
  CGSize size;

  var1 = a2.var0.var2.var1;
  var0 = a2.var0.var0;
  v12 = operator new();
  *(_BYTE *)(v12 + 73) = 0;
  *(_QWORD *)v12 = off_1E2EBAFD0;
  *(_QWORD *)(v12 + 8) = var0;
  *(_QWORD *)(v12 + 16) = var1;
  *(_QWORD *)(v12 + 24) = a3;
  result = (__n128)a4->origin;
  size = a4->size;
  *(CGPoint *)(v12 + 32) = a4->origin;
  *(CGSize *)(v12 + 48) = size;
  *(_QWORD *)(v12 + 64) = a5;
  *(_BYTE *)(v12 + 72) = a6;
  return result;
}

uint64_t CI::TextureManager::intermediate(CI::TextureManager *this, __IOSurface *a2, const CGRect *a3, unint64_t a4, char a5, char a6)
{
  uint64_t v11;
  uint64_t (**v12)(CI::TextureManager::tmIntermediate_t *__hidden);
  CGSize size;
  unint64_t v14;
  const void *v15;
  const void *v16;

  v11 = operator new();
  v12 = off_1E2EBAFD0;
  *(_QWORD *)v11 = off_1E2EBAFD0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 24) = a2;
  size = a3->size;
  *(CGPoint *)(v11 + 32) = a3->origin;
  *(CGSize *)(v11 + 48) = size;
  *(_QWORD *)(v11 + 64) = a4;
  *(_BYTE *)(v11 + 72) = a5;
  *(_BYTE *)(v11 + 73) = a6;
  if (a4 >= 2)
  {
    v14 = a4 - 1;
    do
    {
      v15 = (const void *)(**(uint64_t (***)(uint64_t))v11)(v11);
      RetainSurfaceFromCache(v15);
      --v14;
    }
    while (v14);
    v12 = *(uint64_t (***)(CI::TextureManager::tmIntermediate_t *__hidden))v11;
  }
  if ((v12[8]((CI::TextureManager::tmIntermediate_t *)v11) & 1) != 0)
  {
    v16 = (const void *)(**(uint64_t (***)(uint64_t))v11)(v11);
    RetainSurfaceFromCache(v16);
  }
  return v11;
}

_QWORD *CI::TextureManager::_find_match_for_surface(CI::TextureManager *this, IOSurfaceRef buffer, CGSize a3)
{
  uint64_t v4;
  uint64_t v5;
  double height;
  double width;
  _QWORD *v9;
  IOSurfaceID ID;
  __IOSurface *v11;
  uint64_t v12;
  uint64_t v14;
  const void *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v4 = *((_QWORD *)this + 17);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8), v5 == v4))
  {
LABEL_11:
    ++*((_QWORD *)this + 3);
    if (CI_LOG_TEXTURE_CACHE())
    {
      v14 = *((_QWORD *)this + 17);
      if (v14)
        v14 = *(_QWORD *)(v14 + 16);
      x_log("TextureCache Missed: context:%u count:%lu hits:%zu misses:%zu\n\n", *((_DWORD *)this + 2), v14, *((_QWORD *)this + 2), *((_QWORD *)this + 3));
    }
    return 0;
  }
  else
  {
    height = a3.height;
    width = a3.width;
    while (1)
    {
      v9 = *(_QWORD **)(v5 + 16);
      v21 = v9;
      if (v9[8] <= 1uLL)
      {
        ID = IOSurfaceGetID(buffer);
        v11 = (__IOSurface *)(*(uint64_t (**)(_QWORD *))*v9)(v9);
        if (IOSurfaceGetID(v11) == ID)
        {
          v12 = (*(uint64_t (**)(_QWORD *))(*v9 + 32))(v9);
          if (width == *(double *)(v12 + 16) && height == *(double *)(v12 + 24))
            break;
        }
      }
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == v4)
        goto LABEL_11;
    }
    v16 = (const void *)(*(uint64_t (**)(_QWORD *))*v9)(v9);
    CFGetRetainCount(v16);
    std::list<CI::attached_surface_t *>::remove(*((_QWORD **)this + 17), &v21);
    v17 = (uint64_t *)*((_QWORD *)this + 17);
    v18 = operator new(0x18uLL);
    v18[2] = v21;
    v19 = *v17;
    *v18 = *v17;
    v18[1] = v17;
    *(_QWORD *)(v19 + 8) = v18;
    *v17 = (uint64_t)v18;
    ++v17[2];
    ++*((_QWORD *)this + 2);
    if (CI_LOG_TEXTURE_CACHE())
    {
      v20 = *((_QWORD *)this + 17);
      if (v20)
        v20 = *(_QWORD *)(v20 + 16);
      x_log("TextureCache Matched: context:%u count:%lu hits:%zu misses:%zu\n\n", *((_DWORD *)this + 2), v20, *((_QWORD *)this + 2), *((_QWORD *)this + 3));
    }
    return v21;
  }
}

uint64_t CI::TextureManager::_release_intermediate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v6 = a2;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  (**(void (***)(uint64_t, uint64_t, uint64_t))a1)(a1, v3, v4);
  std::list<CI::attached_surface_t *>::remove(*(_QWORD **)(a1 + 136), &v6);
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  return result;
}

uint64_t CI::TextureManager::add_intermediate_for_node(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[8];
  _QWORD v7[4];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = 0;
  v8 = 0;
  v9 = &v8;
  v7[0] = 0;
  v7[1] = v7;
  v10 = 0x2000000000;
  v11 = 0;
  v7[2] = 0x2000000000;
  v7[3] = a3;
  if (a3 && *a2)
  {
    v4 = *(NSObject **)(a1 + 104);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 0x40000000;
    v6[2] = ___ZN2CI14TextureManager25add_intermediate_for_nodeERKNS_6roiKeyEPNS_14intermediate_tE_block_invoke;
    v6[3] = &unk_1E2EC9920;
    v6[6] = a1;
    v6[7] = a2;
    v6[4] = v7;
    v6[5] = &v8;
    dispatch_sync(v4, v6);
    v3 = v9[3];
  }
  _Block_object_dispose(v7, 8);
  _Block_object_dispose(&v8, 8);
  return v3;
}

uint64_t CI::TextureManager::get_intermediate_for_node(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v2 = *(NSObject **)(a1 + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK2CI14TextureManager25get_intermediate_for_nodeERKNS_6roiKeyE_block_invoke;
  block[3] = &unk_1E2EC9948;
  block[5] = a1;
  block[6] = a2;
  block[4] = &v6;
  dispatch_sync(v2, block);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

unint64_t ___ZNK2CI14TextureManager25get_intermediate_for_nodeERKNS_6roiKeyE_block_invoke(unint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  CI::Node *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  CGRect v19;

  v1 = *(_QWORD *)(result + 40);
  v4 = *(_QWORD **)(v1 + 152);
  v2 = (_QWORD *)(v1 + 152);
  v3 = v4;
  if (v4)
  {
    v5 = (CI::Node *)result;
    v6 = *(_QWORD *)(result + 48);
    result = *(_QWORD *)v6;
    v7 = v2;
    do
    {
      v8 = v3[4];
      v9 = v8 >= result;
      if (v8 >= result)
        v10 = v3;
      else
        v10 = v3 + 1;
      if (v9)
        v7 = v3;
      v3 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != v2 && result >= v7[4])
    {
      v13 = v7[6];
      v11 = v7 + 6;
      v12 = v13;
      if (v13)
      {
        v14 = *(_DWORD *)(v6 + 8);
        v15 = v11;
        do
        {
          v16 = *(_DWORD *)(v12 + 32);
          v17 = v16 < v14;
          if (v16 >= v14)
            v18 = (uint64_t *)v12;
          else
            v18 = (uint64_t *)(v12 + 8);
          if (!v17)
            v15 = (_QWORD *)v12;
          v12 = *v18;
        }
        while (*v18);
        if (v15 != v11 && v14 >= *((_DWORD *)v15 + 8))
        {
          v19.origin.x = CI::Node::roi((CI::Node *)result, v14);
          result = CGRectIsInfinite(v19);
          *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 4) + 8) + 24) = v15[5];
        }
      }
    }
  }
  return result;
}

void CI::TextureManager::complete_intermediate(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[6];
  int v5;

  if (a3)
  {
    v3 = *(NSObject **)(a1 + 104);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN2CI14TextureManager21complete_intermediateENS_4TypeEPNS_14intermediate_tE_block_invoke;
    block[3] = &__block_descriptor_tmp_13_2;
    block[4] = a1;
    block[5] = a3;
    v5 = a2;
    dispatch_sync(v3, block);
  }
}

uint64_t ___ZN2CI14TextureManager21complete_intermediateENS_4TypeEPNS_14intermediate_tE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  --*(_QWORD *)(v2 + 64);
  v4 = (**(uint64_t (***)(uint64_t))v2)(v2);
  ReturnSurfaceToCache(v4);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  if (!result)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40)))
    {
      v6 = (***(uint64_t (****)(_QWORD))(a1 + 40))(*(_QWORD *)(a1 + 40));
      ReturnSurfaceToCache(v6);
    }
    v7 = *(_QWORD *)(a1 + 40);
    if (*(_DWORD *)(a1 + 48) == 52)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v7);
    else
      return CI::TextureManager::_release_intermediate(v3, v7);
  }
  return result;
}

uint64_t CI::TextureManager::releaseDeepIntermediate(CI::TextureManager *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v8[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD block[6];
  int v18;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v2 = *((_QWORD *)this + 13);
  v3 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN2CI14TextureManager23releaseDeepIntermediateEv_block_invoke;
  v8[3] = &unk_1E2EC9990;
  v8[5] = &v9;
  v8[6] = this;
  v8[4] = &v13;
  dispatch_sync(v2, v8);
  v4 = v14[3];
  if (v4)
  {
    v5 = *((_QWORD *)this + 13);
    block[0] = v3;
    block[1] = 0x40000000;
    block[2] = ___ZN2CI14TextureManager21complete_intermediateENS_4TypeEPNS_14intermediate_tE_block_invoke;
    block[3] = &__block_descriptor_tmp_13_2;
    block[4] = this;
    block[5] = v4;
    v18 = 52;
    dispatch_sync(v5, block);
  }
  v6 = v10[3];
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  return v6;
}

void ___ZN2CI14TextureManager23releaseDeepIntermediateEv_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t **v3;
  uint64_t v5;
  uint64_t **v6;
  unsigned int v7;
  CI::Node *v8;
  uint64_t v9;
  BOOL v10;
  _OWORD **v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (***v27)(_QWORD);
  __IOSurface *v28;
  uint64_t v29;
  _QWORD v30[3];
  void **v31;

  v1 = a1[6];
  v2 = *(uint64_t ***)(v1 + 144);
  v3 = (uint64_t **)(v1 + 152);
  if (v2 == (uint64_t **)(v1 + 152))
    return;
  v5 = v1 + 64;
  while (1)
  {
    v6 = (uint64_t **)v2[5];
    if (v6 != v2 + 6)
      break;
LABEL_27:
    v22 = v2[1];
    if (v22)
    {
      do
      {
        v23 = (uint64_t **)v22;
        v22 = (uint64_t *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        v23 = (uint64_t **)v2[2];
        v10 = *v23 == (uint64_t *)v2;
        v2 = v23;
      }
      while (!v10);
    }
    v2 = v23;
    if (v23 == v3)
      return;
  }
  while (1)
  {
    if ((unint64_t)(*(uint64_t (**)(uint64_t *))(*v6[5] + 16))(v6[5]) >= 2)
    {
      v7 = (*(uint64_t (**)(uint64_t *))(*v2[4] + 16))(v2[4]);
      if ((CI::is_image_type(v7) & 1) == 0)
        break;
    }
LABEL_21:
    v20 = v6[1];
    if (v20)
    {
      do
      {
        v21 = (uint64_t **)v20;
        v20 = (uint64_t *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = (uint64_t **)v6[2];
        v10 = *v21 == (uint64_t *)v6;
        v6 = v21;
      }
      while (!v10);
    }
    v6 = v21;
    if (v21 == v2 + 6)
      goto LABEL_27;
  }
  v8 = (CI::Node *)v2[4];
  v9 = v5;
  while (1)
  {
    v9 = *(_QWORD *)(v9 + 8);
    if (v9 == v5)
      break;
    v10 = v8 == *(CI::Node **)(v9 + 16) && *((_DWORD *)v6 + 8) == *(_DWORD *)(v9 + 24);
    if (v10)
      goto LABEL_21;
  }
  v11 = (_OWORD **)CI::Node::rois(v8);
  memset(v30, 0, sizeof(v30));
  std::vector<CI::SerialRectArray::roiData>::__init_with_size[abi:nn180100]<CI::SerialRectArray::roiData*,CI::SerialRectArray::roiData*>(v30, *v11, v11[1], 0xEEEEEEEEEEEEEEEFLL * (((char *)v11[1] - (char *)*v11) >> 3));
  v12 = *((_DWORD *)v6 + 8);
  v13 = v30[0];
  v14 = v30[0] + 120 * v12;
  v15 = *(unint64_t **)(v14 + 96);
  v16 = *(unint64_t **)(v14 + 104);
  if (v15 != v16)
  {
    v17 = 0;
    do
    {
      v19 = *v15++;
      v18 = v19;
      if (v17 <= v19)
        v17 = v18;
    }
    while (v15 != v16);
    if (v17)
    {
      v31 = (void **)v30;
      std::vector<CI::SerialRectArray::roiData>::__destroy_vector::operator()[abi:nn180100](&v31);
      goto LABEL_21;
    }
  }
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v6[5];
  v24 = *(_QWORD *)(v13 + 120 * v12 + 40) - *(_QWORD *)(v13 + 120 * v12 + 32);
  if (v24)
  {
    v25 = v24 / 48;
    if (v25 <= 1)
      v26 = 1;
    else
      v26 = v25;
    do
    {
      v27 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(a1[4] + 8) + 24);
      v28 = (__IOSurface *)(**v27)(v27);
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = IOSurfaceGetAllocSize(v28);
      if (v28)
        ReturnSurfaceToCache((uint64_t)v28);
      v29 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
      --*(_QWORD *)(v29 + 64);
      --v26;
    }
    while (v26);
  }
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>>>::__remove_node_pointer(v2 + 5, (uint64_t *)v6);
  operator delete(v6);
  v31 = (void **)v30;
  std::vector<CI::SerialRectArray::roiData>::__destroy_vector::operator()[abi:nn180100](&v31);
}

uint64_t CI::TextureManager::release_intermediate_for_node(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD block[9];
  _QWORD v7[4];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a2;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2000000000;
  v7[3] = 0;
  v3 = *(NSObject **)(a1 + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN2CI14TextureManager29release_intermediate_for_nodeERKNS_6roiKeyEb_block_invoke;
  block[3] = &unk_1E2EC99B8;
  block[6] = a1;
  block[7] = v2;
  block[8] = a2;
  block[4] = &v8;
  block[5] = v7;
  dispatch_sync(v3, block);
  v4 = v9[3];
  _Block_object_dispose(v7, 8);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void ___ZN2CI14TextureManager29release_intermediate_for_nodeERKNS_6roiKeyEb_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t **v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t (***v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = a1[6];
  v4 = *(_QWORD **)(v1 + 152);
  v2 = v1 + 152;
  v3 = v4;
  if (v4)
  {
    v6 = (uint64_t **)(v2 - 8);
    v7 = a1[7];
    v8 = v2;
    do
    {
      v9 = v3[4];
      v10 = v9 >= v7;
      if (v9 >= v7)
        v11 = v3;
      else
        v11 = v3 + 1;
      if (v10)
        v8 = (uint64_t)v3;
      v3 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 != v2 && v7 >= *(_QWORD *)(v8 + 32))
    {
      v12 = *(_QWORD *)(v8 + 48);
      if (v12)
      {
        v13 = *(_DWORD *)(a1[8] + 8);
        v14 = v8 + 48;
        do
        {
          v15 = *(_DWORD *)(v12 + 32);
          v16 = v15 < v13;
          if (v15 >= v13)
            v17 = (uint64_t *)v12;
          else
            v17 = (uint64_t *)(v12 + 8);
          if (!v16)
            v14 = v12;
          v12 = *v17;
        }
        while (*v17);
        if (v14 != v8 + 48 && v13 >= *(_DWORD *)(v14 + 32))
        {
          *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_QWORD *)(v14 + 40);
          v18 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(a1[4] + 8) + 24);
          *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = (**v18)(v18);
          v19 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
          if (v19)
            ReturnSurfaceToCache(v19);
          v20 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
          --*(_QWORD *)(v20 + 64);
          v21 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21) == 1)
          {
            std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>>>::__remove_node_pointer((uint64_t **)(v8 + 40), (uint64_t *)v14);
            operator delete((void *)v14);
          }
        }
      }
      if (!*(_QWORD *)(v8 + 56))
        std::__tree<std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>,std::__map_value_compare<CI::Node const*,std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>,std::less<CI::Node const*>,true>,std::allocator<std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>>>::erase(v6, v8);
    }
  }
}

void CI::TextureManager::add_to_pending(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 104);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN2CI14TextureManager14add_to_pendingERKNS_6roiKeyE_block_invoke;
  v3[3] = &__block_descriptor_tmp_17_1;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

__n128 ___ZN2CI14TextureManager14add_to_pendingERKNS_6roiKeyE_block_invoke(uint64_t a1)
{
  __n128 **v1;
  __n128 *v2;
  __n128 *v3;
  __n128 result;
  unint64_t v5;

  v1 = *(__n128 ***)(a1 + 32);
  v2 = *(__n128 **)(a1 + 40);
  v3 = (__n128 *)operator new(0x20uLL);
  result = *v2;
  v3[1] = *v2;
  v5 = (unint64_t)v1[8];
  v1 += 8;
  v3->n128_u64[0] = v5;
  v3->n128_u64[1] = (unint64_t)v1;
  *(_QWORD *)(v5 + 8) = v3;
  *v1 = v3;
  v1[2] = (__n128 *)((char *)v1[2] + 1);
  return result;
}

void CI::TextureManager::remove_from_pending(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 104);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN2CI14TextureManager19remove_from_pendingERKNS_6roiKeyE_block_invoke;
  v3[3] = &__block_descriptor_tmp_18_3;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

void ___ZN2CI14TextureManager19remove_from_pendingERKNS_6roiKeyE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = v2 + 8;
  v4 = v2[9];
  if ((_QWORD *)v4 != v2 + 8)
  {
    v5 = *(uint64_t **)(a1 + 40);
    v6 = *v5;
    v7 = *((_DWORD *)v5 + 2);
    while (v6 != *(_QWORD *)(v4 + 16) || v7 != *(_DWORD *)(v4 + 24))
    {
      v4 = *(_QWORD *)(v4 + 8);
      if ((uint64_t *)v4 == v3)
        goto LABEL_8;
    }
    v3 = (uint64_t *)v4;
  }
LABEL_8:
  v8 = *v3;
  *(_QWORD *)(v8 + 8) = v3[1];
  *(_QWORD *)v3[1] = v8;
  --v2[10];
  operator delete(v3);
}

_QWORD *std::vector<CI::SerialRectArray::roiData>::__init_with_size[abi:nn180100]<CI::SerialRectArray::roiData*,CI::SerialRectArray::roiData*>(_QWORD *result, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<CI::SerialRectArray::roiData>::__vallocate[abi:nn180100](result, a4);
    v7 = v6[1];
    while (a2 != a3)
    {
      result = (_QWORD *)std::construct_at[abi:nn180100]<CI::SerialRectArray::roiData,CI::SerialRectArray::roiData&,CI::SerialRectArray::roiData*>(v7, a2);
      a2 = (_OWORD *)((char *)a2 + 120);
      v7 += 120;
    }
    v6[1] = v7;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>,std::__map_value_compare<CI::Node const*,std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>,std::less<CI::Node const*>,true>,std::allocator<std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>>>::__emplace_unique_key_args<CI::Node const*,std::piecewise_construct_t const&,std::tuple<CI::Node const* const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[7] = 0;
    v11[6] = 0;
    v11[4] = v12;
    v11[5] = (uint64_t)(v11 + 6);
    std::__tree<std::__value_type<std::string,CI::SWFunction>,std::__map_value_compare<std::string,std::__value_type<std::string,CI::SWFunction>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CI::SWFunction>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

_OWORD *std::__tree<std::__value_type<int const,CI::TextureManager::tmIntermediate_t *>,std::__map_value_compare<int const,std::__value_type<int const,CI::TextureManager::tmIntermediate_t *>,std::less<int const>,true>,std::allocator<std::__value_type<int const,CI::TextureManager::tmIntermediate_t *>>>::__emplace_multi<std::pair<int const,CI::TextureManager::tmIntermediate_t *>>(uint64_t **a1, _OWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = operator new(0x30uLL);
  v5 = v4;
  v4[2] = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (*((_DWORD *)v4 + 8) >= *((_DWORD *)v7 + 8))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,CI::SWFunction>,std::__map_value_compare<std::string,std::__value_type<std::string,CI::SWFunction>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CI::SWFunction>>>::__insert_node_at(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v5;
}

uint64_t *std::__tree<std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>,std::__map_value_compare<CI::Node const*,std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>,std::less<CI::Node const*>,true>,std::allocator<std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy(a2 + 40, *(_QWORD **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

CI::TextureSampler *CI::TextureSampler::TextureSampler(CI::TextureSampler *this, CI::Node *a2, int a3)
{
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = &unk_1E2EBED30;
  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = off_1E2EB76E8;
  do
    v5 = __ldaxr(&dword_1ECF873D0[2]);
  while (__stlxr(v5 + 1, &dword_1ECF873D0[2]));
  *(_QWORD *)this = &off_1E2EBB090;
  *((_QWORD *)this + 2) = &unk_1E2EBB0C8;
  if (a2)
    v6 = CI::Object::ref((uint64_t)a2);
  else
    v6 = 0;
  *((_QWORD *)this + 3) = v6;
  *((_DWORD *)this + 8) = a3;
  *((_QWORD *)this + 5) = 0x3FF0000000000000;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0x3FF0000000000000;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  CI::set_sampler_modes_for_texture(v6, (_DWORD *)this + 30, (int *)this + 31);
  return this;
}

uint64_t CI::set_sampler_modes_for_texture(uint64_t result, _DWORD *a2, int *a3)
{
  uint64_t v5;
  int v6;

  if (result)
  {
    v5 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    if ((int)result > 45)
    {
      if ((_DWORD)result == 46)
      {
        *a2 = *(_BYTE *)(v5 + 104) == 0;
        v6 = *(_DWORD *)(v5 + 100);
        goto LABEL_12;
      }
      if ((_DWORD)result == 48)
      {
        *a2 = 1;
        v6 = *(_DWORD *)(v5 + 84);
        goto LABEL_12;
      }
    }
    else
    {
      if ((_DWORD)result == 29)
      {
        *a2 = *(_BYTE *)(v5 + 152) == 0;
        v6 = *(_DWORD *)(v5 + 148);
        goto LABEL_12;
      }
      if ((_DWORD)result == 44)
      {
        *a2 = *(_BYTE *)(v5 + 184) == 0;
        v6 = *(_DWORD *)(v5 + 180);
LABEL_12:
        *a3 = v6;
        return result;
      }
    }
    v6 = 1;
    *a2 = 1;
    goto LABEL_12;
  }
  return result;
}

uint64_t CI::TextureSampler::TextureSampler(uint64_t a1, CI::Object *this, int a3, __int128 *a4, __int128 *a5, int a6, int a7)
{
  unsigned int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *(_QWORD *)a1 = &unk_1E2EBED30;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = off_1E2EB76E8;
  do
    v13 = __ldaxr(&dword_1ECF873D0[2]);
  while (__stlxr(v13 + 1, &dword_1ECF873D0[2]));
  *(_QWORD *)a1 = &off_1E2EBB090;
  *(_QWORD *)(a1 + 16) = &unk_1E2EBB0C8;
  if (this)
    v14 = CI::Object::ref((uint64_t)this);
  else
    v14 = 0;
  *(_QWORD *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = a3;
  v15 = *a4;
  v16 = a4[1];
  *(_OWORD *)(a1 + 72) = a4[2];
  *(_OWORD *)(a1 + 56) = v16;
  *(_OWORD *)(a1 + 40) = v15;
  v17 = *a5;
  *(_OWORD *)(a1 + 104) = a5[1];
  *(_OWORD *)(a1 + 88) = v17;
  CI::set_sampler_modes_for_texture(v14, (_DWORD *)(a1 + 120), (int *)(a1 + 124));
  if (a6 != -1)
    *(_DWORD *)(a1 + 120) = a6;
  if (a7 != -1)
    *(_DWORD *)(a1 + 124) = a7;
  return a1;
}

void CI::TextureSampler::~TextureSampler(CI::TextureSampler *this)
{
  CI::Object *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_1E2EBB090;
  *((_QWORD *)this + 2) = &unk_1E2EBB0C8;
  v2 = (CI::Object *)*((_QWORD *)this + 3);
  if (v2)
    CI::Object::unref(v2);
  *((_QWORD *)this + 2) = off_1E2EB76E8;
  *((_QWORD *)this + 3) = 0;
  do
    v3 = __ldaxr(&dword_1ECF873D0[2]);
  while (__stlxr(v3 - 1, &dword_1ECF873D0[2]));
}

{
  CI::Object *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_1E2EBB090;
  *((_QWORD *)this + 2) = &unk_1E2EBB0C8;
  v2 = (CI::Object *)*((_QWORD *)this + 3);
  if (v2)
    CI::Object::unref(v2);
  *((_QWORD *)this + 2) = off_1E2EB76E8;
  *((_QWORD *)this + 3) = 0;
  do
    v3 = __ldaxr(&dword_1ECF873D0[2]);
  while (__stlxr(v3 - 1, &dword_1ECF873D0[2]));
  JUMPOUT(0x194025AACLL);
}

void `non-virtual thunk to'CI::TextureSampler::~TextureSampler(CI::TextureSampler *this)
{
  CI::Object *v2;
  unsigned int v3;

  *((_QWORD *)this - 2) = &off_1E2EBB090;
  *(_QWORD *)this = &unk_1E2EBB0C8;
  v2 = (CI::Object *)*((_QWORD *)this + 1);
  if (v2)
    CI::Object::unref(v2);
  *(_QWORD *)this = off_1E2EB76E8;
  *((_QWORD *)this + 1) = 0;
  do
    v3 = __ldaxr(&dword_1ECF873D0[2]);
  while (__stlxr(v3 - 1, &dword_1ECF873D0[2]));
}

{
  CI::TextureSampler::~TextureSampler((CI::TextureSampler *)((char *)this - 16));
}

double CI::TextureSampler::transform@<D0>(CI::TextureSampler *this@<X0>, const CI::Context *a2@<X1>, const CGRect *a3@<X2>, float64x2_t *a4@<X8>)
{
  double result;
  CGFloat MidY;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64_t v13;
  float64x2_t v14;
  _OWORD v15[2];
  float64x2_t v16;

  if (CGRectIsEmpty(*a3))
  {
    result = 0.0;
    a4[1] = 0u;
    a4[2] = 0u;
    *a4 = 0u;
  }
  else
  {
    (*(void (**)(const CI::Context *, const CGRect *))(*(_QWORD *)a2 + 592))(a2, a3);
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3)) == 52
      && *(_BYTE *)(*((_QWORD *)this + 3) + 148))
    {
      MidY = CGRectGetMidY(*a3);
      v10 = a4[1];
      v11 = *a4;
      v12 = vaddq_f64(a4[2], vmlaq_f64(vmulq_n_f64(v10, MidY + MidY), (float64x2_t)0, *a4));
      v13 = a4->f64[1] + vmuld_lane_f64(0.0, v10, 1);
      a4->f64[0] = a4->f64[0] + 0.0 * v10.f64[0];
      a4->f64[1] = v13;
      a4[1] = vmlaq_f64(vnegq_f64(v10), (float64x2_t)0, v11);
      a4[2] = v12;
    }
    result = CI::Affine::operator*((double *)this + 5, a4->f64, (double *)v15);
    if (v15 != (_OWORD *)a4)
    {
      v14 = (float64x2_t)v15[1];
      *a4 = (float64x2_t)v15[0];
      a4[1] = v14;
      result = v16.f64[0];
      a4[2] = v16;
    }
  }
  return result;
}

size_t CI::TextureSampler::print(CI::TextureSampler *this, __sFILE *a2)
{
  int v4;
  _DWORD *v5;
  int v6;
  int v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  int v13;
  int v14;
  const char *v15;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  if (v4 == 46)
    v6 = v5[12];
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  v8 = (_DWORD *)*((_QWORD *)this + 3);
  if (v7 == 44)
    v6 = v8[12];
  v9 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
  v10 = *((_QWORD *)this + 3);
  if (v9 == 29)
    v6 = *(_DWORD *)(v10 + 48);
  fprintf(a2, "node%d", *(_DWORD *)(v10 + 36));
  if (v6)
  {
    v11 = CI::name_for_format(v6);
    fprintf(a2, " %s", v11);
  }
  v12 = "edge_unknown";
  v14 = *((_DWORD *)this + 30);
  v13 = *((_DWORD *)this + 31);
  if (v13 == 1)
    v12 = "edge_clamp";
  if (!v13)
    v12 = "edge_black";
  if ((v14 + 1) > 2)
    v15 = "unknown";
  else
    v15 = (&off_1E2EC9A18)[v14 + 1];
  fprintf(a2, " %s %s", v12, v15);
  fwrite(" transform:", 0xBuLL, 1uLL, a2);
  if (CI::Affine::isIdentity((CI::TextureSampler *)((char *)this + 40)))
    return fwrite("identity", 8uLL, 1uLL, a2);
  else
    return fprintf(a2, "[%g %g %g %g %g %g]", *((double *)this + 5), *((double *)this + 6), *((double *)this + 7), *((double *)this + 8), *((double *)this + 9), *((double *)this + 10));
}

uint64_t CI::TextureSampler::type(CI::TextureSampler *this)
{
  return 60;
}

uint64_t `non-virtual thunk to'CI::TextureSampler::type(CI::TextureSampler *this)
{
  return 60;
}

uint64_t CI::InstanceCounted<(CI::Type)60>::type()
{
  return 60;
}

_QWORD *CI::InstanceCounted<(CI::Type)60>::~InstanceCounted(_QWORD *result)
{
  unsigned int v1;

  *result = off_1E2EB76E8;
  do
    v1 = __ldaxr(&dword_1ECF873D0[2]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[2]));
  return result;
}

void CI::InstanceCounted<(CI::Type)60>::~InstanceCounted(_QWORD *a1)
{
  unsigned int v1;

  *a1 = off_1E2EB76E8;
  do
    v1 = __ldaxr(&dword_1ECF873D0[2]);
  while (__stlxr(v1 - 1, &dword_1ECF873D0[2]));
  JUMPOUT(0x194025AACLL);
}

__n64 CI::Vector::Vector(CI::Vector *this, __n64 result, float a3)
{
  unsigned int v3;

  *(_QWORD *)this = &unk_1E2EBED30;
  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = off_1E2EBBEE8;
  do
    v3 = __ldaxr(dword_1ECF873D0);
  while (__stlxr(v3 + 1, dword_1ECF873D0));
  *(_QWORD *)this = &off_1E2EBED68;
  *((_QWORD *)this + 2) = &unk_1E2EBEDA0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *((_DWORD *)this + 6) = 2;
  *((_DWORD *)this + 7) = result.n64_u32[0];
  *((float *)this + 8) = a3;
  result.n64_f32[1] = a3;
  *((__n64 *)this + 12) = result;
  return result;
}

__n64 CI::Vector::Vector(CI::Vector *this, __n64 result, float a3, float a4)
{
  unsigned int v4;

  *(_QWORD *)this = &unk_1E2EBED30;
  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = off_1E2EBBEE8;
  do
    v4 = __ldaxr(dword_1ECF873D0);
  while (__stlxr(v4 + 1, dword_1ECF873D0));
  *(_QWORD *)this = &off_1E2EBED68;
  *((_QWORD *)this + 2) = &unk_1E2EBEDA0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 6) = 3;
  *((_DWORD *)this + 7) = result.n64_u32[0];
  *((float *)this + 8) = a3;
  *((float *)this + 9) = a4;
  result.n64_f32[1] = a3;
  *((float *)this + 26) = a4;
  *((__n64 *)this + 12) = result;
  return result;
}

__n128 CI::Vector::Vector(CI::Vector *this, __n128 result, float a3, float a4, float a5)
{
  unsigned int v5;

  *(_QWORD *)this = &unk_1E2EBED30;
  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = off_1E2EBBEE8;
  do
    v5 = __ldaxr(dword_1ECF873D0);
  while (__stlxr(v5 + 1, dword_1ECF873D0));
  *(_QWORD *)this = &off_1E2EBED68;
  *((_QWORD *)this + 2) = &unk_1E2EBEDA0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 6) = 4;
  *((_DWORD *)this + 7) = result.n128_u32[0];
  *((float *)this + 8) = a3;
  *((float *)this + 9) = a4;
  *((float *)this + 10) = a5;
  result.n128_f32[1] = a3;
  result.n128_u64[1] = __PAIR64__(LODWORD(a5), LODWORD(a4));
  *((__n128 *)this + 6) = result;
  return result;
}

CI::Vector *CI::Vector::Vector(CI::Vector *this, CGRect a2)
{
  unsigned int v3;
  unsigned int IsInfinite;
  float64x2_t v5;
  float64x2_t v6;
  int8x16_t v7;
  CGFloat height;
  CGFloat width;
  CGFloat x;
  CGFloat y;

  *(_QWORD *)this = &unk_1E2EBED30;
  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = off_1E2EBBEE8;
  do
    v3 = __ldaxr(dword_1ECF873D0);
  while (__stlxr(v3 + 1, dword_1ECF873D0));
  *(_QWORD *)this = &off_1E2EBED68;
  *((_QWORD *)this + 2) = &unk_1E2EBEDA0;
  *((_QWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 6) = 4;
  y = a2.origin.y;
  width = a2.size.width;
  x = a2.origin.x;
  height = a2.size.height;
  IsInfinite = CGRectIsInfinite(a2);
  v5.f64[0] = width;
  v5.f64[1] = height;
  v6.f64[0] = x;
  v6.f64[1] = y;
  v7 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v6), v5);
  *(int8x16_t *)((char *)this + 28) = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(IsInfinite)), 0x1FuLL)), (int8x16_t)xmmword_19249CBB0, v7);
  *((int8x16_t *)this + 6) = v7;
  return this;
}

CI::Vector *CI::Vector::Vector(CI::Vector *this, CGAffineTransform *a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  __int128 v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)this = &unk_1E2EBED30;
  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = off_1E2EBBEE8;
  do
    v3 = __ldaxr(dword_1ECF873D0);
  while (__stlxr(v3 + 1, dword_1ECF873D0));
  *(_QWORD *)this = &off_1E2EBED68;
  *((_QWORD *)this + 2) = &unk_1E2EBEDA0;
  *((_QWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 6) = 9;
  *(float *)&v4 = a2->a;
  *((_DWORD *)this + 7) = v4;
  *(float *)&v5 = a2->c;
  *((_DWORD *)this + 8) = v5;
  *(float *)&v6 = a2->tx;
  *((_DWORD *)this + 9) = v6;
  *(float *)&v7 = a2->b;
  *((_DWORD *)this + 10) = v7;
  *(float *)&v8 = a2->d;
  *((_DWORD *)this + 11) = v8;
  *(float *)&v9 = a2->ty;
  *((_DWORD *)this + 12) = v9;
  *((_QWORD *)this + 7) = 0x3F80000000000000;
  *(_QWORD *)&v12 = __PAIR64__(v5, v4);
  *((_QWORD *)&v12 + 1) = __PAIR64__(v7, v6);
  v13 = __PAIR64__(v9, v8);
  LODWORD(v14) = 1065353216;
  HIDWORD(v14) = mat3::type((mat3 *)&v12);
  v10 = v13;
  *((_OWORD *)this + 6) = v12;
  *((_OWORD *)this + 7) = v10;
  *((_QWORD *)this + 16) = v14;
  return this;
}

uint64_t CI::Vector::Vector(uint64_t a1, double *a2, double a3, double a4, double a5, double a6)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  __int128 v18;
  float v19;
  float v20;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *(_QWORD *)a1 = &unk_1E2EBED30;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = off_1E2EBBEE8;
  do
    v11 = __ldaxr(dword_1ECF873D0);
  while (__stlxr(v11 + 1, dword_1ECF873D0));
  *(_QWORD *)a1 = &off_1E2EBED68;
  *(_QWORD *)(a1 + 16) = &unk_1E2EBEDA0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 24) = 13;
  *(float *)&v12 = *a2;
  *(_DWORD *)(a1 + 28) = v12;
  *(float *)&v13 = a2[2];
  *(_DWORD *)(a1 + 32) = v13;
  *(float *)&v14 = a2[4];
  *(_DWORD *)(a1 + 36) = v14;
  *(float *)&v15 = a2[1];
  *(_DWORD *)(a1 + 40) = v15;
  *(float *)&v16 = a2[3];
  *(_DWORD *)(a1 + 44) = v16;
  *(float *)&v17 = a2[5];
  *(_DWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = 0x3F80000000000000;
  *(_QWORD *)&v22 = __PAIR64__(v13, v12);
  *((_QWORD *)&v22 + 1) = __PAIR64__(v15, v14);
  v23 = __PAIR64__(v17, v16);
  LODWORD(v24) = 1065353216;
  HIDWORD(v24) = mat3::type((mat3 *)&v22);
  v18 = v23;
  *(_OWORD *)(a1 + 96) = v22;
  *(_OWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 128) = v24;
  v19 = a3;
  *(float *)&v18 = a4;
  *(float *)(a1 + 64) = v19;
  *(_DWORD *)(a1 + 68) = v18;
  v20 = a5;
  *(float *)&v18 = a6;
  *(float *)(a1 + 72) = v20;
  *(_DWORD *)(a1 + 76) = v18;
  return a1;
}

float CI::Vector::Vector(CI::Vector *this, double *a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  float result;
  float *v6;
  double v7;

  *(_QWORD *)this = &unk_1E2EBED30;
  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = off_1E2EBBEE8;
  do
    v3 = __ldaxr(dword_1ECF873D0);
  while (__stlxr(v3 + 1, dword_1ECF873D0));
  *(_QWORD *)this = &off_1E2EBED68;
  *((_QWORD *)this + 2) = &unk_1E2EBEDA0;
  *((_QWORD *)this + 12) = 0;
  if (a3 >= 0x10)
    v4 = 16;
  else
    v4 = a3;
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 6) = v4;
  if (!a2)
    CI::Vector::Vector();
  if ((_DWORD)v4)
  {
    v6 = (float *)((char *)this + 28);
    do
    {
      v7 = *a2++;
      result = v7;
      *v6++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

double CI::Vector::clone(CI::Vector *this, const CI::Vector *a2)
{
  uint64_t v3;
  int v4;
  __int128 v5;
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v3 = *((int *)a2 + 6);
  *((_DWORD *)this + 6) = v3;
  memcpy((char *)this + 28, (char *)a2 + 28, 4 * v3);
  v4 = *((_DWORD *)this + 15);
  v5 = *(_OWORD *)((char *)this + 44);
  v8 = *(_OWORD *)((char *)this + 28);
  v9 = v5;
  LODWORD(v10) = v4;
  HIDWORD(v10) = mat3::type((mat3 *)&v8);
  result = *(double *)&v8;
  v7 = v9;
  *((_OWORD *)this + 6) = v8;
  *((_OWORD *)this + 7) = v7;
  *((_QWORD *)this + 16) = v10;
  return result;
}

float *CI::Vector::copy_to(float *this, float *__dst)
{
  uint64_t v2;

  v2 = *((int *)this + 6);
  if ((_DWORD)v2 != 9)
    return (float *)memcpy(__dst, this + 7, 4 * v2);
  *__dst = this[7];
  __dst[1] = this[8];
  __dst[2] = this[9];
  __dst[3] = 0.0;
  __dst[4] = this[10];
  __dst[5] = this[11];
  __dst[6] = this[12];
  __dst[7] = 0.0;
  __dst[8] = this[13];
  __dst[9] = this[14];
  __dst[10] = this[15];
  __dst[11] = 0.0;
  return this;
}

uint64_t CI::Vector::copy_to(CI::Vector *this, unsigned __int16 *a2)
{
  vImagePixelCount v3;
  uint64_t result;
  vImage_Buffer dest;
  vImage_Buffer src;

  v3 = *((int *)this + 6);
  if ((_DWORD)v3 == 9)
  {
    *(_OWORD *)&src.height = xmmword_19249B970;
    src.rowBytes = 4;
    dest.data = a2;
    *(_OWORD *)&dest.height = xmmword_19249B970;
    dest.rowBytes = 2;
    src.data = (char *)this + 28;
    vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
    a2[3] = 0;
    dest.rowBytes = 2;
    src.data = (char *)this + 40;
    *(_OWORD *)&src.height = xmmword_19249B970;
    src.rowBytes = 4;
    dest.data = a2 + 4;
    *(_OWORD *)&dest.height = xmmword_19249B970;
    vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
    a2[7] = 0;
    dest.rowBytes = 2;
    src.data = (char *)this + 52;
    *(_OWORD *)&src.height = xmmword_19249B970;
    src.rowBytes = 4;
    dest.data = a2 + 8;
    *(_OWORD *)&dest.height = xmmword_19249B970;
    result = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
    a2[11] = 0;
  }
  else
  {
    src.data = (char *)this + 28;
    src.height = v3;
    *(_OWORD *)&src.width = xmmword_19248E2C0;
    dest.data = a2;
    dest.height = v3;
    *(_OWORD *)&dest.width = xmmword_19249CBC0;
    return vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
  }
  return result;
}

double CI::Vector::affine@<D0>(CI::Vector *this@<X0>, double *a2@<X8>)
{
  double result;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  result = *((float *)this + 7);
  v3 = *((float *)this + 10);
  v4 = *((float *)this + 8);
  v5 = *((float *)this + 11);
  v6 = *((float *)this + 9);
  v7 = *((float *)this + 12);
  *a2 = result;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  return result;
}

CFStringRef CI::Vector::description(CI::Vector *this)
{
  uint64_t v1;
  CFStringRef result;

  v1 = *((unsigned int *)this + 6);
  switch((int)v1)
  {
    case 0:
      result = CFStringCreateWithFormat(0, 0, CFSTR("<CI::Vector %p>[]"), this);
      break;
    case 1:
      result = CFStringCreateWithFormat(0, 0, CFSTR("<CI::Vector %p>[%g]"), this, *((float *)this + 7));
      break;
    case 2:
      result = CFStringCreateWithFormat(0, 0, CFSTR("<CI::Vector %p>[%g %g]"), this, *((float *)this + 7), *((float *)this + 8));
      break;
    case 3:
      result = CFStringCreateWithFormat(0, 0, CFSTR("<CI::Vector %p>[%g %g %g]"), this, *((float *)this + 7), *((float *)this + 8), *((float *)this + 9));
      break;
    case 4:
      result = CFStringCreateWithFormat(0, 0, CFSTR("<CI::Vector %p>[%g %g %g %g]"), this, *((float *)this + 7), *((float *)this + 8), *((float *)this + 9), *((float *)this + 10));
      break;
    case 9:
      result = CFStringCreateWithFormat(0, 0, CFSTR("<CI::Vector %p>[%g %g %g %g %g %g %g %g %g]"), this, *((float *)this + 7), *((float *)this + 8), *((float *)this + 9), *((float *)this + 10), *((float *)this + 11), *((float *)this + 12), *((float *)this + 13), *((float *)this + 14), *((float *)this + 15));
      break;
    default:
      result = CFStringCreateWithFormat(0, 0, CFSTR("<CI::Vector %p>[%d values]"), this, v1);
      break;
  }
  return result;
}

size_t CI::Vector::print(CI::Vector *this, __sFILE *__stream)
{
  int v3;
  uint64_t v6;
  float v7;
  double v8;
  uint64_t v9;

  v3 = *((_DWORD *)this + 6);
  if (!v3)
    return fwrite("[]", 2uLL, 1uLL, __stream);
  if (v3 == 1)
    return fprintf(__stream, "%g", *((float *)this + 7));
  if (v3 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *((float *)this + v6 + 7);
      if (v7 == 0.0)
        v7 = 0.0;
      v8 = v7;
      if (v6)
        v9 = 32;
      else
        v9 = 91;
      fprintf(__stream, "%c%g", v9, v8);
      ++v6;
    }
    while (v6 < *((int *)this + 6));
  }
  return fputc(93, __stream);
}

uint64_t `non-virtual thunk to'CI::Vector::type(CI::Vector *this)
{
  return 58;
}

void `non-virtual thunk to'CI::Vector::~Vector(CI::Vector *this)
{
  unsigned int v1;

  *(_QWORD *)this = off_1E2EBBEE8;
  do
    v1 = __ldaxr(dword_1ECF873D0);
  while (__stlxr(v1 - 1, dword_1ECF873D0));
}

{
  unsigned int v1;

  *(_QWORD *)this = off_1E2EBBEE8;
  do
    v1 = __ldaxr(dword_1ECF873D0);
  while (__stlxr(v1 - 1, dword_1ECF873D0));
  JUMPOUT(0x194025AACLL);
}

BOOL mat3::type(mat3 *this)
{
  float v1;
  float v2;
  uint64_t v3;

  v1 = *((float *)this + 1);
  if (*(float *)this != 1.0
    || v1 != 0.0
    || *((float *)this + 2) != 0.0
    || *((float *)this + 3) != 0.0
    || *((float *)this + 4) != 1.0
    || *((float *)this + 5) != 0.0
    || *((float *)this + 6) != 0.0
    || *((float *)this + 7) != 0.0)
  {
    if (v1 != 0.0)
      return 0;
    goto LABEL_13;
  }
  v2 = *((float *)this + 8);
  v3 = 2 * (v2 == 1.0);
  if (v2 != 1.0 && v1 == 0.0)
  {
LABEL_13:
    if (*((float *)this + 3) == 0.0 && *((float *)this + 6) == 0.0 && *((float *)this + 7) == 0.0)
      return *((float *)this + 8) == 1.0;
    return 0;
  }
  return v3;
}

long double pow_10(long double __x, long double __y)
{
  unsigned int v2;
  long double result;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  double *v7;
  unsigned int v8;
  BOOL v9;

  result = 1.0;
  if ((int)v2 >= 1)
  {
    if (v2 < 0x21)
    {
      v4 = v2;
    }
    else
    {
      do
      {
        result = result * 1.0e32;
        v4 = v2 - 32;
        v5 = v2 > 0x40;
        v2 -= 32;
      }
      while (v5);
    }
    v6 = v4 - 1;
    v7 = (double *)&pow_10_up;
    return result * v7[v6];
  }
  if ((v2 & 0x80000000) != 0)
  {
    if (v2 > 0xFFFFFFDF)
    {
      v8 = v2;
    }
    else
    {
      do
      {
        result = result * 1.0e-32;
        v8 = v2 + 32;
        v9 = __CFADD__(v2, 64);
        v2 += 32;
      }
      while (!v9);
    }
    v6 = ~v8;
    v7 = (double *)&pow_10_down;
    return result * v7[v6];
  }
  return result;
}

_BYTE *x_dtostr_(_BYTE *a1, unint64_t a2, char a3, double a4, double a5)
{
  double v5;
  double v6;
  _BYTE *result;
  _WORD *v11;
  int v12;
  int v13;
  double v16;
  int v17;
  long double v18;
  double v19;
  long double v20;
  double v21;
  double i;
  unsigned int v23;
  _BYTE *v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char v32;
  double v33;
  double v34;
  int v35;
  _BYTE *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int __e;

  v5 = a4;
  if (a5 <= 0.0)
    v6 = 0.000001;
  else
    v6 = a5;
  if (a2 < 8)
    return 0;
  if (a4 >= 0.0)
  {
    v11 = a1;
  }
  else
  {
    *a1 = 45;
    v11 = a1 + 1;
    v5 = -a4;
  }
  v12 = __fpclassifyd(v5);
  switch(v12)
  {
    case 5:
      *v11 = 48;
      return (char *)v11 + 1;
    case 2:
      v13 = 6712905;
      goto LABEL_15;
    case 1:
      v13 = 5136718;
LABEL_15:
      *(_DWORD *)v11 = v13;
      return (char *)v11 + 3;
  }
  __e = 0;
  if (v5 <= 0.0)
  {
    __e = 0;
  }
  else
  {
    if (v5 >= 0.01 && v5 <= 100.0)
    {
      v17 = 0;
      v21 = v5;
      v19 = v6;
    }
    else
    {
      frexp(v5, &__e);
      v16 = (double)__e * 0.301029996;
      v17 = llround(v16);
      v18 = pow_10(v16, 0.301029996);
      v19 = v6 * v18;
      v21 = v5 * pow_10(v18, v20);
    }
    for (i = v21 + v6 * 0.5; i >= 10.0; i = v21 + v6 * 0.5)
    {
      ++v17;
      v21 = v21 * 0.1;
      v19 = v19 * 10.0;
    }
    if (i < 1.0)
    {
      do
      {
        --v17;
        v21 = v21 * 10.0;
        v19 = v19 * 0.1;
      }
      while (v21 + v6 * 0.5 < 1.0);
    }
    __e = v17;
    if (v17 >= 0)
      v23 = v17;
    else
      v23 = -v17;
    if (v23 <= 3)
    {
      __e = 0;
      if (v19 < v6)
        goto LABEL_36;
    }
    else
    {
      v5 = v21;
    }
  }
  v19 = v6;
LABEL_36:
  v24 = &a1[a2];
  v25 = v5 + v19 * 0.5;
  v26 = floor(v25);
  if (v26 > v19)
  {
    v27 = 1;
    v28 = v26;
    result = v11;
    while (result != v24)
    {
      v29 = v27;
      v30 = v28 * 0.1 + 0.05;
      v28 = floor(v30);
      *result++ = (int)((v30 - v28) * 10.0) + 48;
      ++v27;
      if (v28 <= v19)
      {
        if (result <= (_BYTE *)v11)
        {
          v11 = result;
          goto LABEL_46;
        }
        if (result - (_BYTE *)v11 >= 2)
        {
          v31 = -1;
          do
          {
            v32 = result[v31];
            result[v31] = *(_BYTE *)v11;
            *(_BYTE *)v11 = v32;
            v11 = (_WORD *)((char *)v11 + 1);
            v29 -= 2;
            --v31;
          }
          while (v29 > 1);
        }
        goto LABEL_47;
      }
    }
    return 0;
  }
LABEL_46:
  *(_BYTE *)v11 = 48;
  result = (char *)v11 + 1;
LABEL_47:
  v33 = v25 - v26;
  if (v33 > v19)
  {
    if (result != v24)
    {
      *result++ = 46;
      while (result != v24)
      {
        v34 = v33 * 10.0;
        *result++ = vcvtmd_s64_f64(v34) + 48;
        v33 = v34 - floor(v34);
        v19 = v19 * 10.0;
        if (v33 <= v19)
          goto LABEL_56;
      }
    }
    return 0;
  }
  v35 = __e;
  if (!(__e | a3 & 1))
  {
    if (v24 - result < 2)
      return 0;
    *(_WORD *)result = 12334;
    result += 2;
LABEL_56:
    v35 = __e;
  }
  if (!v35)
    goto LABEL_68;
  if (v24 - result < 3)
    return 0;
  *result = 101;
  v36 = result + 1;
  v37 = __e;
  if (__e < 0)
  {
    v36 = result + 2;
    result[1] = 45;
    v37 = -__e;
    __e = -__e;
  }
  result = v36;
  if (v37 >= 1)
  {
    result = v36;
    while (result != v24)
    {
      *result++ = (v37 % 0xAu) | 0x30;
      v38 = __e;
      v37 = __e / 10;
      __e /= 10;
      if (v38 <= 9)
        goto LABEL_65;
    }
    return 0;
  }
LABEL_65:
  v39 = result - v36;
  if (result - v36 >= 2)
  {
    v40 = -1;
    do
    {
      v41 = result[v40];
      result[v40] = *v36;
      *v36++ = v41;
      v39 -= 2;
      --v40;
    }
    while (v39 > 1);
  }
LABEL_68:
  if (result == v24)
    return 0;
  *result = 0;
  return result;
}

_QWORD *x_stream_init(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

BOOL x_stream_grow(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  char *v10;
  char *v11;

  v3 = a1[2];
  v4 = *a1;
  v6 = v3 - v4;
  v5 = v6 == 0;
  v7 = 2 * v6;
  if (v5)
    v7 = 1024;
  do
  {
    v8 = v7;
    v9 = (char *)(&v4[v7] - a1[1]);
    v7 *= 2;
  }
  while ((unint64_t)v9 < a2);
  v10 = (char *)malloc_type_realloc(v4, v8, 0x3BB4E2BEuLL);
  if (v10)
  {
    v11 = &v10[a1[1] - *a1];
    *a1 = v10;
    a1[1] = v11;
    a1[2] = &v10[v8];
  }
  return v10 != 0;
}

char *x_stream_get(char **a1)
{
  char *v2;

  v2 = a1[1];
  if (v2 + 1 < a1[2])
    goto LABEL_4;
  if (x_stream_grow(a1, 1uLL))
  {
    v2 = a1[1];
LABEL_4:
    *v2 = 0;
    return *a1;
  }
  return 0;
}

void x_stream_free(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    free(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t x_stream_printf(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  char *v11;
  char *v12;
  int64_t v13;
  void *v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  char *v19;
  double v20;
  double v21;
  double *v23;
  double v24;
  int *v25;
  int v26;
  size_t v27;
  uint64_t v28;
  size_t v29;
  double *v30;
  double v31;
  double *v32;
  char *v33;
  char v34;
  int v35;
  int v36;
  const char **v37;
  const char *v38;
  void *v39;
  char *v40;
  int *v41;
  int v42;
  void *v43;
  void *v44;
  size_t v45;
  void *v46;
  uint64_t result;
  double *v48;
  char __str[256];
  uint64_t v50;

  v9 = __s;
  v50 = *MEMORY[0x1E0C80C00];
  v48 = (double *)&a9;
  v11 = strchr(__s, 37);
  if (v11)
  {
    v12 = v11;
    do
    {
      v13 = v12 - v9;
      if (v12 <= v9)
        goto LABEL_8;
      v14 = *(void **)(a1 + 8);
      if ((unint64_t)v14 + v13 >= *(_QWORD *)(a1 + 16))
      {
        if (!x_stream_grow((char **)a1, v12 - v9))
          goto LABEL_8;
        v14 = *(void **)(a1 + 8);
      }
      memcpy(v14, v9, v12 - v9);
      *(_QWORD *)(a1 + 8) += v13;
LABEL_8:
      v16 = v12 + 1;
      v15 = v12[1];
      if (v15 == 46)
      {
        v17 = v12[2];
        if ((v17 - 48) > 9)
        {
          v18 = 0;
        }
        else
        {
          v18 = 0;
          v19 = v12 + 1;
          do
          {
            v18 = v17 + 10 * v18 - 48;
            v16 = v19 + 1;
            v17 = v19[2];
            ++v19;
          }
          while ((v17 - 48) < 0xA);
        }
        v21 = __exp10((double)-v18);
        if (v21 >= 1.0 || v21 <= 0.0)
          v20 = 0.000001;
        else
          v20 = v21;
        LOBYTE(v15) = v16[1];
        v12 = v16;
      }
      else
      {
        v20 = 0.000001;
      }
      if ((char)v15 <= 96)
      {
        if (((char)v15 - 70) < 2)
        {
          v30 = v48++;
          v31 = *v30;
          if ((__fpclassifyd(*v30) - 1) >= 2)
            v24 = v31;
          else
            v24 = 0.0;
LABEL_36:
          if (!x_dtostr_(__str, 0x100uLL, 0, v24, v20))
            goto LABEL_68;
LABEL_61:
          v29 = strlen(__str);
        }
        else
        {
          if ((char)v15 == 37)
          {
            v33 = *(char **)(a1 + 8);
            if ((unint64_t)(v33 + 1) >= *(_QWORD *)(a1 + 16))
            {
              if (!x_stream_grow((char **)a1, 1uLL))
                goto LABEL_68;
              v33 = *(char **)(a1 + 8);
            }
            v34 = 37;
LABEL_74:
            *v33 = v34;
            v29 = 1;
            goto LABEL_67;
          }
          if ((char)v15 != 87)
            goto LABEL_68;
          v25 = (int *)v48++;
          v26 = *v25;
          if (v26 < 1)
            goto LABEL_68;
          v27 = v26 & 7;
          if (v26 >> 3 >= 0xF8)
            v28 = 248;
          else
            v28 = v26 >> 3;
          v29 = (v28 + v27);
          __memset_chk();
          memset(&__str[v28], 32, v27);
        }
LABEL_62:
        v39 = *(void **)(a1 + 8);
        if ((unint64_t)v39 + v29 < *(_QWORD *)(a1 + 16))
          goto LABEL_65;
        if (x_stream_grow((char **)a1, v29))
        {
          v39 = *(void **)(a1 + 8);
LABEL_65:
          v40 = __str;
LABEL_66:
          memcpy(v39, v40, v29);
LABEL_67:
          *(_QWORD *)(a1 + 8) += v29;
        }
      }
      else
      {
        switch((char)v15)
        {
          case 'a':
            ++v48;
            snprintf(__str, 0x100uLL, "%a");
            goto LABEL_61;
          case 'c':
            v32 = v48++;
            __str[0] = *(_DWORD *)v32;
            v33 = *(char **)(a1 + 8);
            if ((unint64_t)(v33 + 1) < *(_QWORD *)(a1 + 16))
              goto LABEL_42;
            if (!x_stream_grow((char **)a1, 1uLL))
              break;
            v33 = *(char **)(a1 + 8);
LABEL_42:
            v34 = __str[0];
            goto LABEL_74;
          case 'd':
            ++v48;
            snprintf(__str, 0x100uLL, "%d");
            goto LABEL_61;
          case 'f':
          case 'g':
            v23 = v48++;
            v24 = *v23;
            goto LABEL_36;
          case 'l':
            v35 = v12[2];
            if (v35 > 116)
            {
              if (v35 == 117)
              {
                ++v48;
                snprintf(__str, 0x100uLL, "%lu");
              }
              else
              {
                if (v35 != 120)
                  break;
                ++v48;
                snprintf(__str, 0x100uLL, "%lx");
              }
            }
            else
            {
              if (v35 != 100)
              {
                if (v35 != 108)
                  break;
                v36 = v12[3];
                if (v36 == 88)
                {
                  ++v48;
                  snprintf(__str, 0x100uLL, "%016llX");
                }
                else
                {
                  if (v36 != 120)
                    break;
                  ++v48;
                  snprintf(__str, 0x100uLL, "%016llx");
                }
                v29 = strlen(__str);
                v44 = *(void **)(a1 + 8);
                if ((unint64_t)v44 + v29 >= *(_QWORD *)(a1 + 16))
                {
                  if (!x_stream_grow((char **)a1, v29))
                  {
                    v12 += 2;
                    break;
                  }
                  v44 = *(void **)(a1 + 8);
                }
                memcpy(v44, __str, v29);
                v12 += 2;
                goto LABEL_67;
              }
              ++v48;
              snprintf(__str, 0x100uLL, "%ld");
            }
            v29 = strlen(__str);
            v43 = *(void **)(a1 + 8);
            if ((unint64_t)v43 + v29 < *(_QWORD *)(a1 + 16))
              goto LABEL_83;
            if (x_stream_grow((char **)a1, v29))
            {
              v43 = *(void **)(a1 + 8);
LABEL_83:
              memcpy(v43, __str, v29);
              ++v12;
              goto LABEL_67;
            }
            ++v12;
            break;
          case 's':
            v37 = (const char **)v48++;
            v38 = *v37;
            v29 = strlen(*v37);
            v39 = *(void **)(a1 + 8);
            if ((unint64_t)v39 + v29 < *(_QWORD *)(a1 + 16))
              goto LABEL_53;
            if (!x_stream_grow((char **)a1, v29))
              break;
            v39 = *(void **)(a1 + 8);
LABEL_53:
            v40 = (char *)v38;
            goto LABEL_66;
          case 'u':
            ++v48;
            snprintf(__str, 0x100uLL, "%u");
            goto LABEL_61;
          case 'w':
            v41 = (int *)v48++;
            v42 = *v41;
            if (v42 < 1)
              break;
            if (v42 >= 256)
              v29 = 256;
            else
              v29 = v42;
            __memset_chk();
            goto LABEL_62;
          case 'x':
            ++v48;
            snprintf(__str, 0x100uLL, "%x");
            goto LABEL_61;
          default:
            break;
        }
      }
LABEL_68:
      v9 = v12 + 2;
      v12 = strchr(v12 + 2, 37);
    }
    while (v12);
  }
  v45 = strlen(v9);
  v46 = *(void **)(a1 + 8);
  if ((unint64_t)v46 + v45 >= *(_QWORD *)(a1 + 16))
  {
    result = x_stream_grow((char **)a1, v45);
    if (!(_DWORD)result)
      return result;
    v46 = *(void **)(a1 + 8);
  }
  result = (uint64_t)memcpy(v46, v9, v45);
  *(_QWORD *)(a1 + 8) += v45;
  return result;
}

uint64_t x_stream_write(uint64_t a1, void *__src, size_t __n)
{
  void *v6;
  uint64_t result;

  v6 = *(void **)(a1 + 8);
  if ((unint64_t)v6 + __n >= *(_QWORD *)(a1 + 16))
  {
    result = x_stream_grow((char **)a1, __n);
    if (!(_DWORD)result)
      return result;
    v6 = *(void **)(a1 + 8);
  }
  result = (uint64_t)memcpy(v6, __src, __n);
  *(_QWORD *)(a1 + 8) += __n;
  return result;
}

const void *metadataPropertyWithBool()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)CGImageMetadataPropertyCreate();
  v1 = (const void *)CGImageMetadataValueCreate();
  CGImageMetadataPropertySetValue();
  CFRelease(v1);
  if (v0)
    CFAutorelease(v0);
  return v0;
}

const void *metadataPropertyWithArray(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  const void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 0);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v6 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v15;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(a4);
        v10 = (const void *)CGImageMetadataValueCreate();
        objc_msgSend(v5, "addObject:", v10);
        CFRelease(v10);
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v7);
  }
  v11 = (const void *)CGImageMetadataPropertyCreate();
  v12 = (const void *)CGImageMetadataValueCreate();
  CGImageMetadataPropertySetValue();
  CFRelease(v12);
  if (v11)
    CFAutorelease(v11);
  return v11;
}

uint64_t metadataPropertyArrayGetArrayOfStrings()
{
  void *Value;
  void *v1;
  CFTypeID v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!GetMetadataPropertyMatchingSchemaAndPropertyName())
    return 0;
  if (!CGImageMetadataPropertyGetValue())
    return objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  Value = (void *)CGImageMetadataValueGetValue();
  v1 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (Value)
  {
    v2 = CFGetTypeID(Value);
    if (v2 == CFArrayGetTypeID())
    {
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v3 = objc_msgSend(Value, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
      {
        v4 = v3;
        v5 = *(_QWORD *)v10;
        do
        {
          for (i = 0; i != v4; ++i)
          {
            if (*(_QWORD *)v10 != v5)
              objc_enumerationMutation(Value);
            if (*(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * i))
              v7 = CGImageMetadataValueGetValue();
            else
              v7 = 0;
            objc_msgSend(v1, "addObject:", v7);
          }
          v4 = objc_msgSend(Value, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        }
        while (v4);
      }
    }
  }
  return (uint64_t)v1;
}

const void *metadataPropertyWithArrayOfStructs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  id obj;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v24 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  obj = a6;
  v25 = objc_msgSend(a6, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (v25)
  {
    v23 = *(_QWORD *)v28;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v28 != v23)
          objc_enumerationMutation(obj);
        v26 = v7;
        v8 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v7);
        v9 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v10 = (void *)objc_msgSend(v8, "allKeys");
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v32;
          do
          {
            for (i = 0; i != v12; ++i)
            {
              if (*(_QWORD *)v32 != v13)
                objc_enumerationMutation(v10);
              v15 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * i);
              v16 = (void *)objc_msgSend(v8, "objectForKey:", v15);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                objc_msgSend(v16, "stringValue");
              v17 = (const void *)CGImageMetadataValueCreate();
              CGImageMetadataValueSetNamespaceURI();
              CGImageMetadataValueSetSuggestedNamespacePrefix();
              objc_msgSend(v9, "setObject:forKey:", v17, v15);
              CFRelease(v17);
            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
          }
          while (v12);
        }
        v18 = (const void *)CGImageMetadataValueCreate();
        objc_msgSend(v24, "addObject:", v18);
        CFRelease(v18);
        v7 = v26 + 1;
      }
      while (v26 + 1 != v25);
      v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    }
    while (v25);
  }
  v19 = (const void *)CGImageMetadataPropertyCreate();
  v20 = (const void *)CGImageMetadataValueCreate();
  CGImageMetadataPropertySetValue();
  CFRelease(v20);
  if (v19)
    CFAutorelease(v19);
  return v19;
}

uint64_t metadataPropertyArrayGetArrayOfStructs(uint64_t a1, uint64_t a2, void *a3)
{
  void *Value;
  CFTypeID v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  const __CFString *v19;
  CFNumberRef v20;
  id obj;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  double valuePtr;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  _BYTE v37[128];
  uint64_t v38;
  CFRange v39;

  v38 = *MEMORY[0x1E0C80C00];
  if (!GetMetadataPropertyMatchingSchemaAndPropertyName())
    return 0;
  if (!CGImageMetadataPropertyGetValue())
    return objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  Value = (void *)CGImageMetadataValueGetValue();
  v24 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (Value)
  {
    v5 = CFGetTypeID(Value);
    if (v5 == CFArrayGetTypeID())
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v25 = objc_msgSend(Value, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
      if (v25)
      {
        obj = Value;
        v23 = *(_QWORD *)v33;
        do
        {
          v6 = 0;
          do
          {
            if (*(_QWORD *)v33 != v23)
              objc_enumerationMutation(obj);
            v7 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * v6);
            v8 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary", obj);
            v26 = v6;
            if (v7)
              v9 = (void *)CGImageMetadataValueGetValue();
            else
              v9 = 0;
            v30 = 0u;
            v31 = 0u;
            v28 = 0u;
            v29 = 0u;
            v10 = (void *)objc_msgSend(v9, "allKeys");
            v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
            if (v11)
            {
              v12 = v11;
              v13 = *(_QWORD *)v29;
              do
              {
                for (i = 0; i != v12; ++i)
                {
                  if (*(_QWORD *)v29 != v13)
                    objc_enumerationMutation(v10);
                  v15 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * i);
                  v16 = objc_msgSend(v9, "objectForKey:", v15);
                  v17 = objc_msgSend(a3, "isEqualToString:", CGImageMetadataValueGetNamespaceURI());
                  if (v16)
                    v18 = v17 == 0;
                  else
                    v18 = 1;
                  if (!v18)
                  {
                    v19 = (const __CFString *)CGImageMetadataValueGetValue();
                    v39.length = CFStringGetLength(v19);
                    v39.location = 0;
                    if (CFStringFindWithOptions(v19, CFSTR(" "), v39, 0, 0))
                    {
                      objc_msgSend(v8, "setObject:forKey:", v19, v15);
                    }
                    else
                    {
                      valuePtr = 0.0;
                      valuePtr = CFStringGetDoubleValue(v19);
                      v20 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
                      objc_msgSend(v8, "setObject:forKey:", v20, v15);
                      CFRelease(v20);
                    }
                  }
                }
                v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
              }
              while (v12);
            }
            objc_msgSend(v24, "addObject:", v8);
            v6 = v26 + 1;
          }
          while (v26 + 1 != v25);
          v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
        }
        while (v25);
      }
    }
  }
  return (uint64_t)v24;
}

const void *metadataPropertyWithDouble(double a1)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)CGImageMetadataPropertyCreate();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%g"), *(_QWORD *)&a1);
  v3 = (const void *)CGImageMetadataValueCreate();
  CGImageMetadataPropertySetValue();
  CFRelease(v3);
  if (v2)
    CFAutorelease(v2);
  return v2;
}

uint64_t metadataPropertyArrayGetDouble(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t result;
  double DoubleValue;

  result = GetMetadataPropertyMatchingSchemaAndPropertyName();
  if (result && (result = CGImageMetadataPropertyGetValue()) != 0 && (result = CGImageMetadataValueGetValue()) != 0)
  {
    DoubleValue = CFStringGetDoubleValue((CFStringRef)result);
    result = 1;
  }
  else
  {
    DoubleValue = NAN;
  }
  *a4 = DoubleValue;
  return result;
}

uint64_t metadataPropertyArrayGetBool(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  const __CFString *Value;
  uint64_t v6;
  BOOL v7;

  if (GetMetadataPropertyMatchingSchemaAndPropertyName())
  {
    if (CGImageMetadataPropertyGetValue() && (Value = (const __CFString *)CGImageMetadataValueGetValue()) != 0)
    {
      v6 = 1;
      v7 = CFStringCompare(Value, CFSTR("TRUE"), 1uLL) == kCFCompareEqualTo;
    }
    else
    {
      v6 = 0;
      v7 = 1;
    }
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a4 = v7;
  return v6;
}

const void *metadataPropertyWithString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v4;
  const void *v5;

  if (!a4)
    return 0;
  v4 = (const void *)CGImageMetadataPropertyCreate();
  v5 = (const void *)CGImageMetadataValueCreate();
  CGImageMetadataPropertySetValue();
  CFRelease(v5);
  if (v4)
    CFAutorelease(v4);
  return v4;
}

id metadataPropertyArrayGetString()
{
  void *Value;
  CFTypeID v1;

  if (GetMetadataPropertyMatchingSchemaAndPropertyName()
    && (!CGImageMetadataPropertyGetValue() ? (Value = 0) : (Value = (void *)CGImageMetadataValueGetValue()),
        v1 = CFGetTypeID(Value),
        v1 == CFStringGetTypeID()))
  {
    return Value;
  }
  else
  {
    return 0;
  }
}

uint64_t get_ycc_to_rgb_matrix(int a1, int a2, int a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  uint64_t result;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t v20;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;

  HIDWORD(v8) = a3;
  LODWORD(v8) = a3;
  v7 = v8 >> 1;
  v9 = v7 > 8;
  v10 = (1 << v7) & 0x171;
  if (v9 || v10 == 0)
    return 0;
  result = 0;
  if (a1 > 708)
  {
    if (a1 == 2020)
    {
      v14 = (float64x2_t)xmmword_19249CE30;
      v15 = 0x3FE5B22D0E560419;
    }
    else
    {
      if (a1 != 709)
        return result;
      v14 = (float64x2_t)xmmword_19249CE50;
      v15 = 0x3FE6E2EB1C432CA5;
    }
  }
  else if (a1 == 240)
  {
    v14 = (float64x2_t)xmmword_19249CE40;
    v15 = 0x3FE66E978D4FDF3BLL;
  }
  else
  {
    if (a1 != 601)
      return result;
    v14 = (float64x2_t)xmmword_19249CE20;
    v15 = 0x3FE2C8B439581062;
  }
  *(_OWORD *)a5 = xmmword_19249C590;
  __asm { FMOV            V2.2D, #1.0 }
  v20 = vsubq_f64(_Q2, v14);
  *(double *)(a5 + 16) = v20.f64[1] + v20.f64[1];
  *(_QWORD *)a6 = 0x3FF0000000000000;
  __asm { FMOV            V3.2D, #-2.0 }
  *(float64x2_t *)(a6 + 8) = vdivq_f64(vmulq_f64(v14, vmulq_f64(v20, _Q3)), (float64x2_t)vdupq_lane_s64(v15, 0));
  *(_QWORD *)a7 = 0x3FF0000000000000;
  *(double *)(a7 + 8) = v20.f64[0] + v20.f64[0];
  *(_QWORD *)(a7 + 16) = 0;
  switch(a3)
  {
    case 16:
      v22 = 32768.0;
      v23 = 65535.0;
      v24 = 65534.0;
      break;
    case 10:
      v22 = 512.0;
      v23 = 1023.0;
      v24 = 1022.0;
      break;
    case 12:
      v22 = 2048.0;
      v23 = 4095.0;
      v24 = 4094.0;
      break;
    default:
      v22 = 1.0;
      if (a3 == 8)
        v23 = 255.0;
      else
        v23 = 1.0;
      if (a3 == 8)
        v24 = 254.0;
      else
        v24 = 1.0;
      if (a3 == 8)
        v22 = 128.0;
      break;
  }
  v25 = 1.0;
  v26 = 4.0;
  if (a3 != 10)
    v26 = 1.0;
  if (a3 == 12)
    v26 = 16.0;
  if (a3 == 16)
    v26 = 256.0;
  if (!a2)
  {
    if (a3)
    {
      v25 = v23 / (v26 * 219.0);
      v28 = v23 / (v26 * 224.0);
      v27 = v26 * -16.0 / v23;
      goto LABEL_40;
    }
    v27 = 0.0;
LABEL_42:
    v29 = 0.0;
    v28 = 1.0;
    goto LABEL_43;
  }
  v27 = 0.0;
  if (!a3)
    goto LABEL_42;
  v28 = v23 / v24;
LABEL_40:
  v29 = -v22 / v23;
LABEL_43:
  a4[1] = v29;
  a4[2] = v29;
  *a4 = v27;
  *(double *)a5 = v25 * *(double *)a5;
  *(float64x2_t *)(a5 + 8) = vmulq_n_f64(*(float64x2_t *)(a5 + 8), v28);
  *(double *)a6 = v25 * *(double *)a6;
  *(float64x2_t *)(a6 + 8) = vmulq_n_f64(*(float64x2_t *)(a6 + 8), v28);
  *(double *)a7 = v25 * *(double *)a7;
  *(float64x2_t *)(a7 + 8) = vmulq_n_f64(*(float64x2_t *)(a7 + 8), v28);
  return 1;
}

uint64_t get_rgb_to_ycc_matrix(int a1, int a2, int a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  uint64_t result;
  float64x2_t v14;
  double v15;
  double v16;
  float64x2_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;

  HIDWORD(v8) = a3;
  LODWORD(v8) = a3;
  v7 = v8 >> 1;
  v9 = v7 > 8;
  v10 = (1 << v7) & 0x171;
  if (v9 || v10 == 0)
    return 0;
  result = 0;
  if (a1 > 708)
  {
    if (a1 == 2020)
    {
      v14 = (float64x2_t)xmmword_19249CE70;
      v15 = 0.2627;
    }
    else
    {
      if (a1 != 709)
        return result;
      v14 = (float64x2_t)xmmword_19249CE90;
      v15 = 0.2126;
    }
  }
  else if (a1 == 240)
  {
    v14 = (float64x2_t)xmmword_19249CE80;
    v15 = 0.212;
  }
  else
  {
    if (a1 != 601)
      return result;
    v14 = (float64x2_t)xmmword_19249CE60;
    v15 = 0.299;
  }
  *(double *)a5 = v15;
  *(float64x2_t *)(a5 + 8) = v14;
  v16 = v14.f64[1];
  __asm { FMOV            V2.2D, #-0.5 }
  v21 = vmulq_f64(v14, _Q2);
  v22 = 1.0;
  v23 = 1.0 - v16;
  *(double *)a6 = v15 * -0.5 / v23;
  *(double *)(a6 + 8) = v21.f64[0] / v23;
  *(_QWORD *)(a6 + 16) = 0x3FE0000000000000;
  *(_QWORD *)a7 = 0x3FE0000000000000;
  *(float64x2_t *)(a7 + 8) = vdivq_f64(v21, (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0 - v15), 0));
  if (a3 == 16)
  {
    v24 = 32768.0;
    v25 = 65535.0;
    v26 = 65534.0;
  }
  else if (a3 == 10)
  {
    v24 = 512.0;
    v25 = 1023.0;
    v26 = 1022.0;
  }
  else if (a3 == 12)
  {
    v24 = 2048.0;
    v25 = 4095.0;
    v26 = 4094.0;
  }
  else
  {
    if (a3 == 8)
      v25 = 255.0;
    else
      v25 = 1.0;
    if (a3 == 8)
      v26 = 254.0;
    else
      v26 = 1.0;
    v24 = 128.0;
    if (a3 != 8)
      v24 = 1.0;
  }
  if (a3 == 10)
    v22 = 4.0;
  if (a3 == 12)
    v22 = 16.0;
  v27 = 256.0;
  if (a3 != 16)
    v27 = v22;
  if (a2)
  {
    v28 = v26 / v25;
    v29 = 1.0;
    if (!a3)
      v28 = 1.0;
    v30 = 0.0;
  }
  else if (a3)
  {
    v29 = v27 * 219.0 / v25;
    v28 = v27 * 224.0 / v25;
    v30 = v27 * 16.0 / v25;
  }
  else
  {
    v29 = 1.0;
    v30 = 0.0;
    v28 = 1.0;
  }
  v31 = v24 / v25;
  if (!a3)
    v31 = 0.0;
  a4[1] = v31;
  a4[2] = v31;
  *a4 = v30;
  *(float64x2_t *)a5 = vmulq_n_f64(*(float64x2_t *)a5, v29);
  *(double *)(a5 + 16) = v29 * *(double *)(a5 + 16);
  *(float64x2_t *)a6 = vmulq_n_f64(*(float64x2_t *)a6, v28);
  *(double *)(a6 + 16) = v28 * *(double *)(a6 + 16);
  *(float64x2_t *)a7 = vmulq_n_f64(*(float64x2_t *)a7, v28);
  *(double *)(a7 + 16) = v28 * *(double *)(a7 + 16);
  return 1;
}

double get_ycc_to_rgb_bias_matrix(int a1, int a2, int a3, double *a4, double *a5, double *a6, double *a7)
{
  double v11;
  double v12;
  double v13;
  double result;
  double v15;
  double v16;
  double v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v15 = 0.0;
  v16 = 0.0;
  v17 = 0.0;
  get_ycc_to_rgb_matrix(a1, a2, a3, &v15, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6);
  v11 = v15;
  v12 = v16;
  v13 = v17;
  *a7 = a4[1] * v16 + *a4 * v15 + a4[2] * v17;
  a7[1] = v12 * a5[1] + *a5 * v11 + a5[2] * v13;
  result = v12 * a6[1] + *a6 * v11 + a6[2] * v13;
  a7[2] = result;
  return result;
}

void CI::BitmapSampler::write(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *(_QWORD *)(a2 + 88);
  v5 = 134349312;
  v6 = v3;
  v7 = 2050;
  v8 = v4;
  _os_log_error_impl(&dword_1921E4000, log, OS_LOG_TYPE_ERROR, "Bitmap write error: Accessing corrupted bitmap size: (%{public}zu , %{public}zu)", (uint8_t *)&v5, 0x16u);
}

void getFCRFaceExpressionLeftEyeClosed_cold_1()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("NSString *getFCRFaceExpressionLeftEyeClosed(void)"), CFSTR("CIBurstFaceAnalysis.m"), 99, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void getFCRFaceExpressionRightEyeClosed_cold_1()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("NSString *getFCRFaceExpressionRightEyeClosed(void)"), CFSTR("CIBurstFaceAnalysis.m"), 105, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void getFCRFaceExpressionSmile_cold_1()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("NSString *getFCRFaceExpressionSmile(void)"), CFSTR("CIBurstFaceAnalysis.m"), 93, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void FaceCoreLibrary_cold_1(_QWORD *a1)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("void *FaceCoreLibrary(void)"), CFSTR("CIBurstFaceAnalysis.m"), 70, CFSTR("%s"), *a1);
  __break(1u);
}

void __getFaceCoreDetectorClass_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getFaceCoreDetectorClass(void)_block_invoke"), CFSTR("CIBurstFaceAnalysis.m"), 72, CFSTR("Unable to find class %s"), "FaceCoreDetector");
  __break(1u);
}

void __getFaceCoreImageClass_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getFaceCoreImageClass(void)_block_invoke"), CFSTR("CIBurstFaceAnalysis.m"), 78, CFSTR("Unable to find class %s"), "FaceCoreImage");
  __break(1u);
}

void __getFaceCoreFaceClass_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getFaceCoreFaceClass(void)_block_invoke"), CFSTR("CIBurstFaceAnalysis.m"), 75, CFSTR("Unable to find class %s"), "FaceCoreFace");
  __break(1u);
}

void OptionIsTrueOrFalse(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 138543618;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  OUTLINED_FUNCTION_3_1(&dword_1921E4000, a3, (uint64_t)a3, "Unsupported object %{public}@ for key %{public}@.", (uint8_t *)&v3);
  OUTLINED_FUNCTION_4_0();
}

void GetOutputColorSpaceFromOptions(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_9(&dword_1921E4000, a1, a3, "CIContext kCIContextOutputColorSpace must be [NSNull null], or a CGColorSpaceRef with kCGColorSpaceModelRGB or kCGColorSpaceModelMonochrome that supports output.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_10();
}

void GetWorkingColorSpaceFromOptions(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_9(&dword_1921E4000, a1, a3, "CIContext kCIContextWorkingColorSpace must be [NSNull null], or a CGColorSpaceRef with kCGColorSpaceModelRGB that supports output.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_10();
}

void CI::copyImageBlockSetOptsCallback(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_9(&dword_1921E4000, a1, a3, "failed mprotect\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_10();
}

void canCreateDataRepresentation(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, a1, a3, "%{public}s requires an image with a finite non-empty extent.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4_0();
}

{
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, a1, a3, "%{public}s unsupported colorspace.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4_0();
}

void getkCMPhotoCompressionContainerOption_Format()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("NSString *getkCMPhotoCompressionContainerOption_Format()"), CFSTR("CIContext_ImageReps.mm"), 39, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void getkCMPhotoCompressionContainerOption_ImageCountHint()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("NSString *getkCMPhotoCompressionContainerOption_ImageCountHint()"), CFSTR("CIContext_ImageReps.mm"), 42, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void getkCMPhotoCompressionContainerOption_BackingType()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("NSString *getkCMPhotoCompressionContainerOption_BackingType()"), CFSTR("CIContext_ImageReps.mm"), 45, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void soft_CMPhotoCompressionSessionOpenEmptyContainer()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("OSStatus soft_CMPhotoCompressionSessionOpenEmptyContainer(CMPhotoCompressionSessionRef, CFDictionaryRef)"), CFSTR("CIContext_ImageReps.mm"), 86, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void getkCMPhotoCompressionOption_ImageOrientation()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("NSString *getkCMPhotoCompressionOption_ImageOrientation()"), CFSTR("CIContext_ImageReps.mm"), 48, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void getkCMPhotoCompressionOption_QualityControllerType()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("NSString *getkCMPhotoCompressionOption_QualityControllerType()"), CFSTR("CIContext_ImageReps.mm"), 51, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void getkCMPhotoQualityControllerParameter_QualityValue()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("NSString *getkCMPhotoQualityControllerParameter_QualityValue()"), CFSTR("CIContext_ImageReps.mm"), 54, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void getkCMPhotoCompressionOption_QualityControllerParameters()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("NSString *getkCMPhotoCompressionOption_QualityControllerParameters()"), CFSTR("CIContext_ImageReps.mm"), 57, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void soft_CMPhotoCompressionSessionAddImage()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("OSStatus soft_CMPhotoCompressionSessionAddImage(CMPhotoCompressionSessionRef, CFDictionaryRef, CFTypeRef, CMItemIndex *)"), CFSTR("CIContext_ImageReps.mm"), 97, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void soft_CMPhotoCompressionSessionAddMetadataFromImageProperties()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("OSStatus soft_CMPhotoCompressionSessionAddMetadataFromImageProperties(CMPhotoCompressionSessionRef, CMItemIndex, CFDictionaryRef, CFDictionaryRef)"), CFSTR("CIContext_ImageReps.mm"), 108, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void soft_CMPhotoCompressionSessionCloseContainerAndCopyBacking()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("OSStatus soft_CMPhotoCompressionSessionCloseContainerAndCopyBacking(CMPhotoCompressionSessionRef, CMPhotoImageContainerBackingType *, size_t *, CFTypeRef *)"), CFSTR("CIContext_ImageReps.mm"), 119, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void CMPhotoLibrary(_QWORD *a1)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("void *CMPhotoLibrary()"), CFSTR("CIContext_ImageReps.mm"), 37, CFSTR("%s"), *a1);
  __break(1u);
}

void ___ZL20getMLMultiArrayClassv_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getMLMultiArrayClass()_block_invoke"), CFSTR("CICoreML.h"), 12, CFSTR("Unable to find class %s"), "MLMultiArray");
  __break(1u);
}

void CoreMLLibrary(_QWORD *a1)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("void *CoreMLLibrary()"), CFSTR("CICoreML.h"), 7, CFSTR("%s"), *a1);
  __break(1u);
}

void ___ZL22getMLFeatureValueClassv_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getMLFeatureValueClass()_block_invoke"), CFSTR("CICoreML.h"), 9, CFSTR("Unable to find class %s"), "MLFeatureValue");
  __break(1u);
}

void ___ZL27getMLPredictionOptionsClassv_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getMLPredictionOptionsClass()_block_invoke"), CFSTR("CICoreML.h"), 18, CFSTR("Unable to find class %s"), "MLPredictionOptions");
  __break(1u);
}

void __getAVDepthDataClass_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getAVDepthDataClass(void)_block_invoke"), CFSTR("CIDepthUtils.m"), 18, CFSTR("Unable to find class %s"), "AVDepthData");
  __break(1u);
}

void AVFoundationLibrary_cold_1(_QWORD *a1)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("void *AVFoundationLibrary(void)"), CFSTR("CIDepthUtils.m"), 13, CFSTR("%s"), *a1);
  __break(1u);
}

void __getAVCameraCalibrationDataClass_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getAVCameraCalibrationDataClass(void)_block_invoke"), CFSTR("CIDepthUtils.m"), 15, CFSTR("Unable to find class %s"), "AVCameraCalibrationData");
  __break(1u);
}

void __getAVPortraitEffectsMatteClass_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getAVPortraitEffectsMatteClass(void)_block_invoke"), CFSTR("CIDepthUtils.m"), 24, CFSTR("Unable to find class %s"), "AVPortraitEffectsMatte");
  __break(1u);
}

void __getAVSemanticSegmentationMatteClass_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getAVSemanticSegmentationMatteClass(void)_block_invoke"), CFSTR("CIDepthUtils.m"), 21, CFSTR("Unable to find class %s"), "AVSemanticSegmentationMatte");
  __break(1u);
}

void soft_ACBSConfigCreate()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("struct ACBSConfig *soft_ACBSConfigCreate()"), CFSTR("CIDetectorLowLevel.mm"), 21, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void soft_ACBSConfigFree()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("void soft_ACBSConfigFree(struct ACBSConfig *)"), CFSTR("CIDetectorLowLevel.mm"), 28, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void soft_ACBSConfigSetMaxQRModuleSamples()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("void soft_ACBSConfigSetMaxQRModuleSamples(struct ACBSConfig *, int)"), CFSTR("CIDetectorLowLevel.mm"), 35, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void soft_ACBSCreateFrameInfoBySearchingForBarcodesInCVPixelBuffer()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("CFDictionaryRef soft_ACBSCreateFrameInfoBySearchingForBarcodesInCVPixelBuffer(struct ACBSConfig *, CVPixelBufferRef, CGRect, unsigned int)"), CFSTR("CIDetectorLowLevel.mm"), 42, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void soft_ACBSConfigSetSymbologiesEnabled()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("void soft_ACBSConfigSetSymbologiesEnabled(struct ACBSConfig *, CFArrayRef)"), CFSTR("CIDetectorLowLevel.mm"), 49, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void soft_ACBSCreateSymbolDescriptorFromBasicDescriptorWithDefaultPayloadEncoding()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", CFSTR("CFDictionaryRef soft_ACBSCreateSymbolDescriptorFromBasicDescriptorWithDefaultPayloadEncoding(CFDictionaryRef, CFStringRef)"), CFSTR("CIDetectorLowLevel.mm"), 56, CFSTR("%s"), OUTLINED_FUNCTION_0_0());
  __break(1u);
}

void QuaggaLibrary(_QWORD *a1)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("void *QuaggaLibrary()"), CFSTR("CIDetectorLowLevel.mm"), 15, CFSTR("%s"), *a1);
  __break(1u);
}

void repairROIforEyePoints_cold_1(os_log_t log, float a2, float a3)
{
  int v3;
  const char *v4;
  __int16 v5;
  double v6;
  __int16 v7;
  double v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 136446722;
  v4 = "repairROIforEyePoints";
  v5 = 2048;
  v6 = a2;
  v7 = 2048;
  v8 = a3;
  _os_log_error_impl(&dword_1921E4000, log, OS_LOG_TYPE_ERROR, "%{public}s eye outset = %.3f x %.3f", (uint8_t *)&v3, 0x20u);
}

void focusStatsForRegion_cold_1(os_log_t log)
{
  int v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = 136446210;
  v2 = "focusStatsForRegion";
  _os_log_error_impl(&dword_1921E4000, log, OS_LOG_TYPE_ERROR, "%{public}s Focus Stats: Error in creating pixel buffer", (uint8_t *)&v1, 0xCu);
}

void ___ZL25getVNFaceObservationClassv_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getVNFaceObservationClass()_block_invoke"), CFSTR("CIVision.h"), 80, CFSTR("Unable to find class %s"), "VNFaceObservation");
  __break(1u);
}

void VisionLibrary(_QWORD *a1)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("void *VisionLibrary()"), CFSTR("CIVision.h"), 23, CFSTR("%s"), *a1);
  __break(1u);
}

void ___ZL42getVNTrackLegacyFaceCoreObjectRequestClassv_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getVNTrackLegacyFaceCoreObjectRequestClass()_block_invoke"), CFSTR("CIVision.h"), 51, CFSTR("Unable to find class %s"), "VNTrackLegacyFaceCoreObjectRequest");
  __break(1u);
}

void ___ZL37getVNDetectFaceRectanglesRequestClassv_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getVNDetectFaceRectanglesRequestClass()_block_invoke"), CFSTR("CIVision.h"), 48, CFSTR("Unable to find class %s"), "VNDetectFaceRectanglesRequest");
  __break(1u);
}

void ___ZL29getVNImageRequestHandlerClassv_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getVNImageRequestHandlerClass()_block_invoke"), CFSTR("CIVision.h"), 42, CFSTR("Unable to find class %s"), "VNImageRequestHandler");
  __break(1u);
}

void convertToFullFloatPixelBuffer_cold_1()
{
  __assert_rtn("createCroppedPixelBufferRf", "CIFastBilateralSolver.m", 344, "input.format == kCIFormatRf");
}

void convertToFullFloatPixelBuffer_cold_2()
{
  __assert_rtn("createCroppedPixelBufferRh", "CIFastBilateralSolver.m", 367, "input.format == kCIFormatRh");
}

void createPixelBuffer_cold_1()
{
  __assert_rtn("createPixelBuffer", "CIFastBilateralSolver.m", 317, "p != nil && pixelFormat == CVPixelBufferGetPixelFormatType(p)");
}

void CIGVDumpToFile_cold_1()
{
  __assert_rtn("CIGVDumpToFile", "CIGraphviz.m", 168, "0 && \"unreachable\"");
}

void OptionHeadroom()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_9(&dword_1921E4000, v0, v1, "kCIImageContentHeadroom option should be 0 or greater than or equal to 1.0.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_10();
}

void getContentDigestFromOptions(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, a1, a3, "%{public}s kCIImageContentDigest value is not NSData of at least 16 bytes.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4_0();
}

{
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, a1, a3, "%{public}s kCIImageContentDigest value is not a NSString of at least length 16.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4_0();
}

void VisionLibrary_cold_1(_QWORD *a1)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("void *VisionLibrary(void)"), CFSTR("CIVision.h"), 23, CFSTR("%s"), *a1);
  __break(1u);
}

void getContentDigestFromOptions()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2_0(&dword_1921E4000, v0, v1, "%{public}s %{public}@ value is not NSData of at least 16 bytes.", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_4_0();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2_0(&dword_1921E4000, v0, v1, "%{public}s %{public}@ value is not a NSString of at least length 16.", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_4_0();
}

void CIKernelReflection::reflect()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_9(&dword_1921E4000, v0, v1, "[CIKernel initWithString:] failed because no valid kernels were in the string.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  OUTLINED_FUNCTION_13_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_6_3();
  v3 = 2082;
  v4 = v0;
  OUTLINED_FUNCTION_3_1(&dword_1921E4000, v1, (uint64_t)v1, "[CIKernel initWithString:] failed because '%{public}s', the first kernel in the string, has an unsupported type for the parameter '%{public}s'.", v2);
  OUTLINED_FUNCTION_4_0();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_13_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, v0, v1, "Function '%{public}s' does not exist.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4_0();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_13_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, v0, v1, "Function '%{public}s' has an unsupported return type.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4_0();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_13_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, v0, v1, "Warp kernel function '%{public}s' cannot have coreimage:sampler arguments.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4_0();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_13_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, v0, v1, "Warp kernel function '%{public}s' does not have a coreimage:destination argument.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4_0();
}

{
  NSObject *v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_13_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_3_1(&dword_1921E4000, v0, (uint64_t)v0, "Function '%{public}s' has an unsupported type for the parameter '%{public}@'.", v1);
  OUTLINED_FUNCTION_4_0();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_13_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, v0, v1, "Function '%{public}s' has too many destination parameters.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4_0();
}

void CIKernelReflection::reflect(id *a1, NSObject *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = objc_msgSend(*a1, "functionNames");
  v5 = 138543362;
  v6 = v3;
  OUTLINED_FUNCTION_18_0(&dword_1921E4000, a2, v4, "Available function names are: %{public}@", (uint8_t *)&v5);
}

void CIKernelReflection::reflectConstants()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_13_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, v0, v1, "Could not determine required constants for '%{public}s'.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4_0();
}

void check_cikl_string(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, a2, a3, "%{public}s passed an empty or nil string.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4_0();
}

void CIKLLibraryMaker::createMetalLibraryFromFoslPool()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_9(&dword_1921E4000, v0, v1, "Library creation from converted CIKL source failed.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_10();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_9(&dword_1921E4000, v0, v1, "Converting CIKL source failed.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_10();
}

void ___ZN16CIKLLibraryMaker30createMetalLibraryFromFoslPoolEPv_block_invoke_2_cold_1(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_1921E4000, log, OS_LOG_TYPE_ERROR, "[CIKernel initWithString:] failed because no valid kernels were in the string.", buf, 2u);
}

void metaFilterForFilter_cold_1()
{
  __assert_rtn("metaFilterForFilter", "CIMetaFilter.mm", 312, "0");
}

void metaFilterForFilter_cold_2()
{
  __assert_rtn("metaFilterForFilter", "CIMetaFilter.mm", 298, "s0 && s1 && s2 && s3 && s4");
}

void metaFilterForFilter_cold_3()
{
  __assert_rtn("addKeyForToFilter", "CIMetaFilter.mm", 247, "success");
}

void setValueForObject()
{
  __assert_rtn("setValueForObject", "CIMetaFilter.mm", 39, "value == object_getIvar(object, var)");
}

void __can_use_metal_block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_9(&dword_1921E4000, v0, v1, "Metal disabled via CI_ENABLE_METAL_GPU envar.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_10();
}

void __can_use_metal_block_invoke_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_9(&dword_1921E4000, v0, v1, "No Metal renderer available.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_10();
}

void CreateComputePipelineState_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  OUTLINED_FUNCTION_13_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_1_4(&dword_1921E4000, v0, v1, "Metal compute pipeline state creation failed: %{public}@\n", v2);
  OUTLINED_FUNCTION_4_0();
}

void CreateComputePipelineState_cold_2(void *a1, NSObject *a2)
{
  uint64_t v3;
  uint8_t v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "name");
  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_1_4(&dword_1921E4000, a2, v3, "No binary archive avaialble to find PSO for function %{public}@\n", v4);
  OUTLINED_FUNCTION_2();
}

void CreateComputePipelineState_cold_3(void *a1, NSObject *a2)
{
  uint64_t v3;
  uint8_t v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "name");
  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_1_4(&dword_1921E4000, a2, v3, "Failed to find PSO for function %{public}@ in the binary archive\n", v4);
  OUTLINED_FUNCTION_2();
}

void CreateRenderPipelineState_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  OUTLINED_FUNCTION_13_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_1_4(&dword_1921E4000, v0, v1, "Metal render pipeline state creation failed: %{public}@\n", v2);
  OUTLINED_FUNCTION_4_0();
}

void CreateFunctionFromSource_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  OUTLINED_FUNCTION_13_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_1_4(&dword_1921E4000, v0, v1, "Metal library creation failed: %{public}@\n", v2);
  OUTLINED_FUNCTION_4_0();
}

void CreateFunctionFromSource_cold_2()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[14];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_15_2();
  v3 = v0;
  OUTLINED_FUNCTION_3_1(&dword_1921E4000, v1, (uint64_t)v1, "Could not get function '%{public}s' from source:\n%{public}s\n", v2);
  OUTLINED_FUNCTION_4_0();
}

void CreateFunctionFromSource_cold_3(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a2, "bundlePath");
  v6 = 136446466;
  v7 = a1;
  OUTLINED_FUNCTION_6_4();
  OUTLINED_FUNCTION_3_1(&dword_1921E4000, a3, v5, "Overriding function '%{public}s' with precompiled one in default metallib (from %{public}@).", (uint8_t *)&v6);
  OUTLINED_FUNCTION_2();
}

void CILoadBinaryArchive_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 136446466;
  v3 = "CILoadBinaryArchive";
  OUTLINED_FUNCTION_6_4();
  OUTLINED_FUNCTION_3_1(&dword_1921E4000, v0, v1, "%{public}s Failed to create device for loading binary archive from %{public}@", (uint8_t *)&v2);
  OUTLINED_FUNCTION_4_0();
}

void CILoadBinaryArchive_cold_2(uint64_t a1, id *a2, NSObject *a3)
{
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = objc_msgSend(*a2, "description");
  v6 = 136446722;
  v7 = "CILoadBinaryArchive";
  v8 = 2114;
  v9 = a1;
  v10 = 2114;
  v11 = v5;
  _os_log_error_impl(&dword_1921E4000, a3, OS_LOG_TYPE_ERROR, "%{public}s Failed loading the binary archive from %{public}@ with error: %{public}@", (uint8_t *)&v6, 0x20u);
}

void CILoadAIRArchive_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 136446466;
  v3 = "CILoadAIRArchive";
  OUTLINED_FUNCTION_6_4();
  OUTLINED_FUNCTION_3_1(&dword_1921E4000, v0, v1, "%{public}s Failed to create device for using with %{public}@", (uint8_t *)&v2);
  OUTLINED_FUNCTION_4_0();
}

void testBinaryArchive_cold_1(_QWORD *a1, uint64_t a2)
{
  NSLog(CFSTR("%@ -> Can't find %@ "), *a1, a2);
  __assert_rtn("testBinaryArchive", "CIMetalUtils.m", 1337, "mtlKernel");
}

void CreateStitchedFunctionFromDescriptor_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  OUTLINED_FUNCTION_13_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_1_4(&dword_1921E4000, v0, v1, "Metal function creation/specialization failed: %{public}@\n", v2);
  OUTLINED_FUNCTION_4_0();
}

void CreateStitchedFunctionFromDescriptor_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_1_4(&dword_1921E4000, v0, v1, "Failed finding stitched program for %{public}s function in the archives", v2);
  OUTLINED_FUNCTION_4_0();
}

void print_stitched_dag_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_1_4(&dword_1921E4000, v0, v1, "%{public}@", v2);
  OUTLINED_FUNCTION_4_0();
}

void CIAbortIfICSAndUnsuccessfulCommandBufferExecution_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_9(&dword_1921E4000, v0, v1, "Aborting ICS due to command buffer error", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_10();
}

void CIAbortIfICSAndUnsuccessfulCommandBufferExecution_cold_2(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5;
  uint8_t v6[14];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend((id)objc_msgSend(a1, "error"), "description");
  OUTLINED_FUNCTION_15_2();
  v7 = a2;
  OUTLINED_FUNCTION_3_1(&dword_1921E4000, a3, v5, "Error excuting command buffer = %{public}@ (%{public}s)", v6);
  OUTLINED_FUNCTION_2();
}

void serializeBinaryArchive_cold_1(uint64_t a1, id *a2, NSObject *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*a2, "localizedDescription");
  v6 = 138543618;
  v7 = a1;
  OUTLINED_FUNCTION_6_4();
  OUTLINED_FUNCTION_3_1(&dword_1921E4000, a3, v5, "Failed serializing binary archive to %{public}@ : %{public}@\n", (uint8_t *)&v6);
  OUTLINED_FUNCTION_2();
}

void ArchiveLibrary_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  OUTLINED_FUNCTION_13_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_1_4(&dword_1921E4000, v0, v1, "Library serialization failed : %{public}@ ", v2);
  OUTLINED_FUNCTION_4_0();
}

void ArchiveLibrary_cold_2()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  __error();
  v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_12_1(&dword_1921E4000, v1, v2, "Failed writing descriptor fot %{public}s: %d - message: %{public}s", v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_12_0();
}

void __getVNGeneratePersonSegmentationRequestClass_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getVNGeneratePersonSegmentationRequestClass(void)_block_invoke"), CFSTR("CIVision.h"), 121, CFSTR("Unable to find class %s"), "VNGeneratePersonSegmentationRequest");
  __break(1u);
}

void __getVNImageRequestHandlerClass_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getVNImageRequestHandlerClass(void)_block_invoke"), CFSTR("CIVision.h"), 42, CFSTR("Unable to find class %s"), "VNImageRequestHandler");
  __break(1u);
}

void CIPerspectiveAutoCalcDefaultImpl()
{
  __assert_rtn("CIPerspectiveAutoCalcDefaultImpl", "CIPerspectiveAutoCalc.mm", 153, "0 && \"unreachable\"");
}

void ___ZL33getVNDetectRectanglesRequestClassv_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getVNDetectRectanglesRequestClass()_block_invoke"), CFSTR("CIVision.h"), 96, CFSTR("Unable to find class %s"), "VNDetectRectanglesRequest");
  __break(1u);
}

void convexFillHorizontal(os_log_t log)
{
  int v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = 136446210;
  v2 = "convexFillHorizontal";
  _os_log_error_impl(&dword_1921E4000, log, OS_LOG_TYPE_ERROR, "%{public}s [ConvexFill] center lies outside of the buffer", (uint8_t *)&v1, 0xCu);
}

void convexFillHorizontal(unsigned __int8 *a1, int a2, os_log_t log)
{
  int v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = 136446722;
  v5 = "convexFillHorizontal";
  v6 = 1024;
  v7 = v3;
  v8 = 1024;
  v9 = a2;
  _os_log_error_impl(&dword_1921E4000, log, OS_LOG_TYPE_ERROR, "%{public}s [ConvexFill] center is below threshold (%d < %d)", (uint8_t *)&v4, 0x18u);
}

void ___ZL52getVNGenerateAttentionBasedSaliencyImageRequestClassv_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getVNGenerateAttentionBasedSaliencyImageRequestClass()_block_invoke"), CFSTR("CIVision.h"), 106, CFSTR("Unable to find class %s"), "VNGenerateAttentionBasedSaliencyImageRequest");
  __break(1u);
}

void __getVNFaceObservationClass_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getVNFaceObservationClass(void)_block_invoke"), CFSTR("CIVision.h"), 80, CFSTR("Unable to find class %s"), "VNFaceObservation");
  __break(1u);
}

void CIVNDetectFaces_cold_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend((id)OUTLINED_FUNCTION_3_6(a1), "localizedDescription");
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_4(&dword_1921E4000, v1, v2, "%{public}s Error while detecting face segmentations: %{public}@", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_2();
}

void CIVNDetectFaces_cold_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend((id)OUTLINED_FUNCTION_3_6(a1), "localizedDescription");
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_4(&dword_1921E4000, v1, v2, "%{public}s Error while detecting face pose: %{public}@", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_2();
}

void CIVNDetectFaces_cold_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend((id)OUTLINED_FUNCTION_3_6(a1), "localizedDescription");
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_4(&dword_1921E4000, v1, v2, "%{public}s Error while detecting face landmarks: %{public}@", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_2();
}

void CIVNDetectFaces_cold_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend((id)OUTLINED_FUNCTION_3_6(a1), "localizedDescription");
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_4(&dword_1921E4000, v1, v2, "%{public}s Error while detecting face attributes: %{public}@", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_2();
}

void CIVNDetectFaces_cold_5(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend((id)OUTLINED_FUNCTION_3_6(a1), "localizedDescription");
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_4(&dword_1921E4000, v1, v2, "%{public}s Error while detecting face rects: %{public}@", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_2();
}

void CIVNDetectFaces_cold_6()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("NSString *getVNImageOptionCIContext(void)"), CFSTR("CIVision.h"), 61, CFSTR("%s"), dlerror());
  __break(1u);
}

void __getVNDetectFaceRectanglesRequestClass_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getVNDetectFaceRectanglesRequestClass(void)_block_invoke"), CFSTR("CIVision.h"), 48, CFSTR("Unable to find class %s"), "VNDetectFaceRectanglesRequest");
  __break(1u);
}

void __getVNClassifyFaceAttributesRequestClass_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getVNClassifyFaceAttributesRequestClass(void)_block_invoke"), CFSTR("CIVision.h"), 112, CFSTR("Unable to find class %s"), "VNClassifyFaceAttributesRequest");
  __break(1u);
}

void __getVNDetectFaceLandmarksRequestClass_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getVNDetectFaceLandmarksRequestClass(void)_block_invoke"), CFSTR("CIVision.h"), 45, CFSTR("Unable to find class %s"), "VNDetectFaceLandmarksRequest");
  __break(1u);
}

void __getVNDetectFacePoseRequestClass_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getVNDetectFacePoseRequestClass(void)_block_invoke"), CFSTR("CIVision.h"), 115, CFSTR("Unable to find class %s"), "VNDetectFacePoseRequest");
  __break(1u);
}

void __getVNGenerateFaceSegmentsRequestClass_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getVNGenerateFaceSegmentsRequestClass(void)_block_invoke"), CFSTR("CIVision.h"), 54, CFSTR("Unable to find class %s"), "VNGenerateFaceSegmentsRequest");
  __break(1u);
}

void tuningParametersFromMetaData(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_4_3(&dword_1921E4000, a2, a3, "Failed to parse rendering parameters; unknown version %d",
    a5,
    a6,
    a7,
    a8,
    0);
  OUTLINED_FUNCTION_10();
}

void FigDepthBlurEffectRenderingParametersV1FromCFData()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_9(&dword_1921E4000, v0, v1, "Params data too small", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_10();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_9(&dword_1921E4000, v0, v1, "Size mismatch", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_10();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_9(&dword_1921E4000, v0, v1, "Incorrect parameters version", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_10();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_9(&dword_1921E4000, v0, v1, "Invalid parameters data; no start marker found", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_10();
}

void ___ZL20getCCFacePointsClassv_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getCCFacePointsClass()_block_invoke"), CFSTR("CIsDOF.mm"), 29, CFSTR("Unable to find class %s"), "CCFacePoints");
  __break(1u);
}

void CCPortraitLibrary(_QWORD *a1)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("void *CCPortraitLibrary()"), CFSTR("CIsDOF.mm"), 27, CFSTR("%s"), *a1);
  __break(1u);
}

void ___ZL25getCCMakeBlurMapArgsClassv_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getCCMakeBlurMapArgsClass()_block_invoke"), CFSTR("CIsDOF.mm"), 30, CFSTR("Unable to find class %s"), "CCMakeBlurMapArgs");
  __break(1u);
}

void ___ZL21getCCMakeBlurMapClassv_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getCCMakeBlurMapClass()_block_invoke"), CFSTR("CIsDOF.mm"), 31, CFSTR("Unable to find class %s"), "CCMakeBlurMap");
  __break(1u);
}

void ___ZL26getCCApplyBlurMapArgsClassv_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getCCApplyBlurMapArgsClass()_block_invoke"), CFSTR("CIsDOF.mm"), 32, CFSTR("Unable to find class %s"), "CCApplyBlurMapArgs");
  __break(1u);
}

void ___ZL22getCCApplyBlurMapClassv_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getCCApplyBlurMapClass()_block_invoke"), CFSTR("CIsDOF.mm"), 33, CFSTR("Unable to find class %s"), "CCApplyBlurMap");
  __break(1u);
}

void ___ZL22getCCSDOFMetadataClassv_block_invoke_cold_1()
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", CFSTR("Class getCCSDOFMetadataClass()_block_invoke"), CFSTR("CIsDOF.mm"), 34, CFSTR("Unable to find class %s"), "CCSDOFMetadata");
  __break(1u);
}

void ___ZL23prewarmSDOFFilterGraphsP9CIContext_block_invoke_cold_1(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_5_2(a1, a2);
  OUTLINED_FUNCTION_1_7(&dword_1921E4000, v2, (uint64_t)v2, "Unable to create filter from string.\n", v3);
}

void ___ZL23prewarmSDOFFilterGraphsP9CIContext_block_invoke_cold_2(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_5_2(a1, a2);
  OUTLINED_FUNCTION_1_7(&dword_1921E4000, v2, (uint64_t)v2, "Unable to create CIImage from filter for prewarming\n", v3);
}

void ___ZL23prewarmSDOFFilterGraphsP9CIContext_block_invoke_cold_3(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_5_2(a1, a2);
  OUTLINED_FUNCTION_1_7(&dword_1921E4000, v2, (uint64_t)v2, "Unable to create render destination for prewarming\n", v3);
}

void CI::SWContext::render_node(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_9(&dword_1921E4000, a1, a3, "Rendering a NULL program node", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_10();
}

{
  OUTLINED_FUNCTION_9(&dword_1921E4000, a1, a3, "Rendering to a NULL buffer", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_10();
}

{
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, a1, a3, "%{public}s: Could not find a ROI", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4_0();
}

{
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, a1, a3, "%{public}s: Bad texture from sampler", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4_0();
}

{
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, a1, a3, "%{public}s: Empty ROI", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4_0();
}

void CI::SWContext::render_node(uint64_t *a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *a2;
  v5 = 136446722;
  v6 = "void CI::SWContext::render_node(ProgramNode *, const CGRect &, const CGRect &, const Bitmap *)";
  v7 = 2048;
  v8 = v3;
  v9 = 2048;
  v10 = v4;
  _os_log_error_impl(&dword_1921E4000, log, OS_LOG_TYPE_ERROR, "%{public}s: outBuffer with %zu width and %zu height", (uint8_t *)&v5, 0x20u);
}

void CI::SWContext::render_node(int a1, int a2, os_log_t log)
{
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 136446722;
  v4 = "void CI::SWContext::render_node(ProgramNode *, const CGRect &, const CGRect &, const Bitmap *)";
  v5 = 1024;
  v6 = a1;
  v7 = 1024;
  v8 = a2;
  _os_log_error_impl(&dword_1921E4000, log, OS_LOG_TYPE_ERROR, "%{public}s: Destination refCount changed from %d to %d", (uint8_t *)&v3, 0x18u);
  OUTLINED_FUNCTION_4_0();
}

void CI::TextureManager::convert_to_sRGB(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_9(&dword_1921E4000, a1, a3, "Failed to convert intermediate to sRGB", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_10();
}

void seedFill_cold_1(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl(&dword_1921E4000, log, OS_LOG_TYPE_DEBUG, "seedFill: seed is outside bitmask\n", v1, 2u);
}

void providerGetBytesAtPositionCallback_YCbYCr_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_YCbYCr_surface", "SurfaceToCG.c", 585, "info");
}

void providerGetBytesAtPositionCallback_YCbYCr_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_YCbYCr_surface", "SurfaceToCG.c", 586, "buffer");
}

void providerGetBytesAtPositionCallback_CbYCrY_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_CbYCrY_surface", "SurfaceToCG.c", 612, "info");
}

void providerGetBytesAtPositionCallback_CbYCrY_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_CbYCrY_surface", "SurfaceToCG.c", 613, "buffer");
}

void providerGetBytesAtPositionCallback_YCbYCrFull_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_YCbYCrFull_surface", "SurfaceToCG.c", 639, "info");
}

void providerGetBytesAtPositionCallback_YCbYCrFull_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_YCbYCrFull_surface", "SurfaceToCG.c", 640, "buffer");
}

void providerGetBytesAtPositionCallback_CbYCrYFull_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_CbYCrYFull_surface", "SurfaceToCG.c", 666, "info");
}

void providerGetBytesAtPositionCallback_CbYCrYFull_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_CbYCrYFull_surface", "SurfaceToCG.c", 667, "buffer");
}

void providerGetBytesAtPositionCallback_AYCbCr8_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_AYCbCr8_surface", "SurfaceToCG.c", 693, "info");
}

void providerGetBytesAtPositionCallback_AYCbCr8_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_AYCbCr8_surface", "SurfaceToCG.c", 694, "buffer");
}

void providerGetBytesAtPositionCallback_2C08_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_2C08_surface", "SurfaceToCG.c", 718, "info");
}

void providerGetBytesAtPositionCallback_2C08_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_2C08_surface", "SurfaceToCG.c", 719, "buffer");
}

void providerGetBytesAtPositionCallback_2C16_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_2C16_surface", "SurfaceToCG.c", 742, "info");
}

void providerGetBytesAtPositionCallback_2C16_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_2C16_surface", "SurfaceToCG.c", 743, "buffer");
}

void providerGetBytesAtPositionCallback_2C0h_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_2C0h_surface", "SurfaceToCG.c", 766, "info");
}

void providerGetBytesAtPositionCallback_2C0h_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_2C0h_surface", "SurfaceToCG.c", 767, "buffer");
}

void providerGetBytesAtPositionCallback_2C0f_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_2C0f_surface", "SurfaceToCG.c", 790, "info");
}

void providerGetBytesAtPositionCallback_2C0f_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_2C0f_surface", "SurfaceToCG.c", 791, "buffer");
}

void providerGetBytesAtPositionCallback_1C08_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_1C08_surface", "SurfaceToCG.c", 816, "info");
}

void providerGetBytesAtPositionCallback_1C08_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_1C08_surface", "SurfaceToCG.c", 817, "buffer");
}

void providerGetBytesAtPositionCallback_1C16_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_1C16_surface", "SurfaceToCG.c", 923, "info");
}

void providerGetBytesAtPositionCallback_1C16_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_1C16_surface", "SurfaceToCG.c", 924, "buffer");
}

void providerGetBytesAtPositionCallback_1C0h_surface_lut_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_1C0h_surface_lut", "SurfaceToCG.c", 864, "info");
}

void providerGetBytesAtPositionCallback_1C0h_surface_lut_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_1C0h_surface_lut", "SurfaceToCG.c", 865, "buffer");
}

void providerGetBytesAtPositionCallback_1C0h_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_1C0h_surface", "SurfaceToCG.c", 840, "info");
}

void providerGetBytesAtPositionCallback_1C0h_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_1C0h_surface", "SurfaceToCG.c", 841, "buffer");
}

void providerGetBytesAtPositionCallback_1C0f_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_1C0f_surface", "SurfaceToCG.c", 947, "info");
}

void providerGetBytesAtPositionCallback_1C0f_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_1C0f_surface", "SurfaceToCG.c", 948, "buffer");
}

void providerGetBytesAtPositionCallback_w30r_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_w30r_surface", "SurfaceToCG.c", 983, "info");
}

void providerGetBytesAtPositionCallback_w30r_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_w30r_surface", "SurfaceToCG.c", 984, "buffer");
}

void providerGetBytesAtPositionCallback_w40a_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_w40a_surface", "SurfaceToCG.c", 1031, "info");
}

void providerGetBytesAtPositionCallback_w40a_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_w40a_surface", "SurfaceToCG.c", 1032, "buffer");
}

void providerGetBytesAtPositionCallback_l10r_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_l10r_surface", "SurfaceToCG.c", 1007, "info");
}

void providerGetBytesAtPositionCallback_l10r_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_l10r_surface", "SurfaceToCG.c", 1008, "buffer");
}

void providerGetBytesAtPositionCallback_A008_surface_cold_1()
{
  __assert_rtn("providerGetBytesAtPositionCallback_A008_surface", "SurfaceToCG.c", 1059, "info");
}

void providerGetBytesAtPositionCallback_A008_surface_cold_2()
{
  __assert_rtn("providerGetBytesAtPositionCallback_A008_surface", "SurfaceToCG.c", 1060, "buffer");
}

void providerGetBytePointerCallback_cold_1()
{
  __assert_rtn("providerGetBytePointerCallback", "SurfaceToCG.c", 1085, "info");
}

void providerReleaseBytePointerCallback_cold_1()
{
  __assert_rtn("providerReleaseBytePointerCallback", "SurfaceToCG.c", 1097, "info");
}

void wrapEAGLContextTexImageIOSurface_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 134217984;
  v3 = a1;
  _os_log_error_impl(&dword_1921E4000, a2, OS_LOG_TYPE_ERROR, "Could not set current EAGL context to %p.", (uint8_t *)&v2, 0xCu);
}

void CI::Bitmap::Bitmap(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_1921E4000, log, OS_LOG_TYPE_ERROR, "Failed to create CI::Bitmap because IOSurface is multi-planar", v1, 2u);
}

void ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_13_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, v0, v1, "Unable to get macro state for the GLContext: %{public}p.\n", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4_0();
}

void CI::GLTextureManager::release_texture(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, a2, a3, "Unable to get macro state for the GLContext: %{public}p.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_4_0();
}

void CI::GLTextureManager::upload_texture()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, v0, v1, "Unable to get macro state for the GLContext: %{public}p.\n", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4_0();
}

void ___ZN2CI9GLContext16render_root_nodeEPNS_8TileTaskERKNS_9parentROIEU13block_pointerFvvES7__block_invoke_39_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_4(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, v0, v1, "Unable to get macro state for the GLContext: %{public}p.\n", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4_0();
}

void CI::MetalTextureManager::create_intermediate(uint64_t a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)(buf + 4) = a1;
  _os_log_error_impl(&dword_1921E4000, log, OS_LOG_TYPE_ERROR, "Rendering with %{public}s requires compression!\n", buf, 0xCu);
}

void CI::Context::recursive_render()
{
  qword_1ECF86DA0 = (uint64_t)"Core Image cannot allocate IOSurface with unspecified format.";
  abort();
}

void CI::Context::recursive_render(double *a1, double *a2)
{
  const __CFString *v2;

  v2 = CFStringCreateWithFormat(0, 0, CFSTR("Core Image cannot allocate surface of size %zu x %zu"), (unint64_t)*a1, (unint64_t)*a2);
  qword_1ECF86DA0 = (uint64_t)CFStringGetCStringPtr(v2, 0x600u);
  abort();
}

void CI::format_swizzle_for_input(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  CI::name_for_format(a1);
  OUTLINED_FUNCTION_1_2(&dword_1921E4000, v1, v2, "need a swizzler so that %{public}s can be read.\n", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_8();
}

void CI::format_swizzle_for_input()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_4_5();
  OUTLINED_FUNCTION_1_8();
  OUTLINED_FUNCTION_1_3(&dword_1921E4000, v0, v1, "CoreImage needs a %{public}s swizzler so that %{public}s can be read as %{public}s.\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_8();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_4_5();
  OUTLINED_FUNCTION_1_8();
  OUTLINED_FUNCTION_1_3(&dword_1921E4000, v0, v1, "CoreImage needs a %{public}s swizzler so that %{public}s can be read as %{public}s.\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_8();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_4_5();
  OUTLINED_FUNCTION_1_8();
  OUTLINED_FUNCTION_1_3(&dword_1921E4000, v0, v1, "CoreImage needs a %{public}s swizzler so that %{public}s can be read as %{public}s.\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_8();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_4_5();
  OUTLINED_FUNCTION_1_8();
  OUTLINED_FUNCTION_1_3(&dword_1921E4000, v0, v1, "CoreImage needs a %{public}s swizzler so that %{public}s can be read as %{public}s.\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_8();
}

void CI::format_swizzle_for_output(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  CI::name_for_format(a1);
  OUTLINED_FUNCTION_1_2(&dword_1921E4000, v1, v2, "CoreImage needs a swizzler so that %{public}s can be written.\n", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_8();
}

void CI::format_swizzle_for_output()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_4_5();
  OUTLINED_FUNCTION_1_8();
  OUTLINED_FUNCTION_1_3(&dword_1921E4000, v0, v1, "CoreImage needs a %{public}s swizzler so that %{public}s can be written as %{public}s.\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_8();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_4_5();
  OUTLINED_FUNCTION_1_8();
  OUTLINED_FUNCTION_1_3(&dword_1921E4000, v0, v1, "CoreImage needs a %{public}s swizzler so that %{public}s can be written as %{public}s.\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_8();
}

void CI::ColorMatchImage::render_graph_core(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, a2, a3, "Could not support destination colorspace: %{public}s", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4_0();
}

{
  OUTLINED_FUNCTION_3_0(&dword_1921E4000, a2, a3, "Could not support source colorspace: %{public}s", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4_0();
}

void CI::match_color(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 136446466;
  v4 = a1;
  v5 = 2082;
  v6 = a2;
  _os_log_error_impl(&dword_1921E4000, log, OS_LOG_TYPE_ERROR, "Matching a color failed: from %{public}s to %{public}s", (uint8_t *)&v3, 0x16u);
  OUTLINED_FUNCTION_4_0();
}

void CI::ColorKernelImage::render_graph_core(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2);
  v6 = 136446466;
  v7 = v4;
  v8 = 2082;
  v9 = v5;
  _os_log_error_impl(&dword_1921E4000, a3, OS_LOG_TYPE_ERROR, "Cannot render image (with Metal kernel '%{public}s') using an %{public}s context.", (uint8_t *)&v6, 0x16u);
}

void CI::ProcessorImage::render_graph_core(int *a1, NSObject *a2)
{
  const char *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = CI::name_for_format(*a1);
  v4 = 136446210;
  v5 = v3;
  _os_log_error_impl(&dword_1921E4000, a2, OS_LOG_TYPE_ERROR, "Could not convert from processors output format (%{public}s) to a format supported by the context.", (uint8_t *)&v4, 0xCu);
}

void CI::ProcessorImage::render_graph_core(uint8_t *a1, int *a2, const char **a3, NSObject *a4)
{
  const char *v7;

  v7 = CI::name_for_format(*a2);
  *(_DWORD *)a1 = 136446210;
  *a3 = v7;
  _os_log_error_impl(&dword_1921E4000, a4, OS_LOG_TYPE_ERROR, "Could not convert from a format supported by the context to the processors input format (%{public}s).", a1, 0xCu);
}

void CI::ProviderImage::render_graph_core(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  CI::name_for_format(a1);
  OUTLINED_FUNCTION_1_2(&dword_1921E4000, v1, v2, "Render failed because a pixel format %{public}s is not supported.\n", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_2();
}

void CI::SurfaceImage::render_graph_core(int *a1, NSObject *a2)
{
  const char *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = CI::name_for_format(*a1);
  v4 = 136446210;
  v5 = v3;
  _os_log_error_impl(&dword_1921E4000, a2, OS_LOG_TYPE_ERROR, "Render failed because a pixel format %{public}s is not supported.\n", (uint8_t *)&v4, 0xCu);
}

void CI::TextureImage::render_graph_core(uint64_t a1, uint64_t a2, NSObject *a3)
{
  const char *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1))
    v5 = "GL";
  else
    v5 = "Metal";
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2);
  v7 = 136446466;
  v8 = v5;
  v9 = 2082;
  v10 = v6;
  _os_log_error_impl(&dword_1921E4000, a3, OS_LOG_TYPE_ERROR, "Cannot render image (with an input %{public}s texture) using a %{public}s context.\n", (uint8_t *)&v7, 0x16u);
}

void CI::TextureImage::render_graph_core(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_1921E4000, log, OS_LOG_TYPE_ERROR, "Input Metal texture was created with a device that does not match the current context device.\n", v1, 2u);
}

void ___ZL37addSpecializedFunctionToBinaryArchiveP21MTLFunctionDescriptorPU21objcproto10MTLLibrary11objc_object_block_invoke_cold_1(id *a1, NSObject *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = objc_msgSend(*a1, "localizedDescription");
  v4 = 138543362;
  v5 = v3;
  _os_log_error_impl(&dword_1921E4000, a2, OS_LOG_TYPE_ERROR, "Failed addFunctionWithDescriptor for binary archive: %{public}@\n", (uint8_t *)&v4, 0xCu);
}

void CI::KernelArchive::KernelArchive(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  void *v6;

  v5 = *a1;
  if (v5)
  {
    *(_QWORD *)(a3 + 40) = v5;
    operator delete(v5);
  }
  v6 = *a2;
  if (*a2)
  {
    *(_QWORD *)(a3 + 16) = v6;
    operator delete(v6);
  }
}

void CI::LegacyDAGDescriptor::~LegacyDAGDescriptor(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void CI::StitchableFunctionDAGDescriptor::~StitchableFunctionDAGDescriptor(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void CI::Kernel::builtin(int a1, NSObject *a2)
{
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_1921E4000, a2, OS_LOG_TYPE_ERROR, "don't know how to create builtin kernel for type %d", (uint8_t *)v2, 8u);
}

void memstream_write_cold_1()
{
  __assert_rtn("memstream_write", "memstream.c", 114, "ms->contents[ms->size] == 0");
}

void memstream_write_cold_2()
{
  __assert_rtn("memstream_write", "memstream.c", 113, "ms->size < ms->capacity");
}

void memstream_seek_cold_1()
{
  __assert_rtn("memstream_seek", "memstream.c", 164, "ms->size < ms->capacity && ms->contents[ms->size] == 0");
}

void memstream_close_cold_1()
{
  __assert_rtn("memstream_close", "memstream.c", 183, "ms->size < ms->capacity");
}

void CI::ioSurfaceFromCGImage()
{
  os_log_t v0;
  uint8_t v1[16];

  OUTLINED_FUNCTION_5_1();
  _os_log_fault_impl(&dword_1921E4000, v0, OS_LOG_TYPE_FAULT, "Failed to allocate IOSurface for CGNode", v1, 2u);
  OUTLINED_FUNCTION_10();
}

void CI::fillBlock()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_9(&dword_1921E4000, v0, v1, "Destination surface is nil.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_10();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_9(&dword_1921E4000, v0, v1, "Source image provider is nil.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_10();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_9(&dword_1921E4000, v0, v1, "Source provider block set is nil.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_10();
}

void ___ZN2CIL9fillBlockEP15CGImageProviderNS_11PixelFormatES2_P11__IOSurface_block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_9(&dword_1921E4000, v0, v1, "Failed to access image block data.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_10();
}

void CI::GeneralKernelNode::roi_of_child(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
  v3 = 136446210;
  v4 = v2;
  _os_log_error_impl(&dword_1921E4000, a2, OS_LOG_TYPE_ERROR, "Error general kernel %{public}s no longer has its ROI callback.", (uint8_t *)&v3, 0xCu);
}

void CI::WarpKernelNode::roi_of_child(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
  v3 = 136446210;
  v4 = v2;
  _os_log_error_impl(&dword_1921E4000, a2, OS_LOG_TYPE_ERROR, "Error warp kernel %{public}s no longer has its ROI callback.", (uint8_t *)&v3, 0xCu);
}

void CI::PremultiplyNode::convert_to_kernel_node(int *a1, NSObject *a2)
{
  int v2;
  _DWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl(&dword_1921E4000, a2, OS_LOG_TYPE_ERROR, "Invalid premultiply power %d.", (uint8_t *)v3, 8u);
}

void CI::ConvertNode::render(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 134217984;
  v3 = a1;
  _os_log_debug_impl(&dword_1921E4000, a2, OS_LOG_TYPE_DEBUG, "Failed to render - cannot access data from CGImage %p", (uint8_t *)&v2, 0xCu);
}

void CI::SRGBNode::convert_to_kernel_node(int *a1, NSObject *a2)
{
  int v2;
  _DWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl(&dword_1921E4000, a2, OS_LOG_TYPE_ERROR, "Invalid srgb direction %d.", (uint8_t *)v3, 8u);
}

void ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_8_cold_1(os_log_t log)
{
  int v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = 136446210;
  v2 = "render_block_invoke";
  _os_log_error_impl(&dword_1921E4000, log, OS_LOG_TYPE_ERROR, "%{public}s could not access pixelbuffer.", (uint8_t *)&v1, 0xCu);
}

void ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_8_cold_1(os_log_t log)
{
  int v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = 136446210;
  v2 = "render_block_invoke";
  _os_log_error_impl(&dword_1921E4000, log, OS_LOG_TYPE_ERROR, "%{public}s could not access surface.", (uint8_t *)&v1, 0xCu);
}

void CI::tile_node_graph(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 134217984;
  v3 = a1;
  _os_log_error_impl(&dword_1921E4000, a2, OS_LOG_TYPE_ERROR, "Failed to render %llu pixels", (uint8_t *)&v2, 0xCu);
}

void CI::tile_node_graph(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 134218240;
  v4 = a1 - a2;
  v5 = 2048;
  v6 = a1;
  _os_log_error_impl(&dword_1921E4000, log, OS_LOG_TYPE_ERROR, "Failed to render %llu of %llu pixels", (uint8_t *)&v3, 0x16u);
}

void CI::SurfaceCacheEntry::SurfaceCacheEntry(unint64_t a1, NSObject *a2)
{
  uint64_t v2;
  unint64_t v3;
  double v4;
  double v5;
  unint64_t v6;
  const char *v7;
  const char *v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  const char *v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  const char *v20;
  const char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  unint64_t v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  unint64_t v43;
  __int16 v44;
  const char *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = CI::gCacheList;
  if (CI::gCacheList)
    v2 = *(_QWORD *)(CI::gCacheList + 16);
  v3 = atomic_load(&CI::gCacheSize);
  if (v3 <= 0x80000000)
  {
    if (v3 <= 0x200000)
    {
      if (v3 < 0x801)
        goto LABEL_10;
      v4 = (double)v3;
      v5 = 0.0009765625;
    }
    else
    {
      v4 = (double)v3;
      v5 = 0.000000953674316;
    }
  }
  else
  {
    v4 = (double)v3;
    v5 = 9.31322575e-10;
  }
  v3 = llround(v4 * v5);
LABEL_10:
  v6 = atomic_load(&CI::gCacheSize);
  v7 = "B";
  if (v6 <= 0x80000000)
  {
    if (v6 <= 0x200000)
    {
      if (v6 <= 0x800)
        v8 = "B";
      else
        v8 = "KB";
    }
    else
    {
      v8 = "MB";
    }
  }
  else
  {
    v8 = "GB";
  }
  v9 = llround((double)a1 * 9.31322575e-10);
  v10 = llround((double)a1 * 0.000000953674316);
  v11 = "MB";
  v12 = llround((double)a1 * 0.0009765625);
  if (a1 > 0x800)
  {
    v13 = "KB";
  }
  else
  {
    v12 = a1;
    v13 = "B";
  }
  if (a1 <= 0x200000)
  {
    v10 = v12;
    v11 = v13;
  }
  if (a1 <= 0x80000000)
    v14 = v10;
  else
    v14 = v9;
  if (a1 <= 0x80000000)
    v15 = v11;
  else
    v15 = "GB";
  v16 = llround((double)(unint64_t)CI::gCacheSizePeak * 9.31322575e-10);
  v17 = llround((double)(unint64_t)CI::gCacheSizePeak * 0.000000953674316);
  v18 = "MB";
  v19 = llround((double)(unint64_t)CI::gCacheSizePeak * 0.0009765625);
  if ((unint64_t)CI::gCacheSizePeak > 0x800)
  {
    v20 = "KB";
  }
  else
  {
    v19 = CI::gCacheSizePeak;
    v20 = "B";
  }
  if ((unint64_t)CI::gCacheSizePeak <= 0x200000)
  {
    v17 = v19;
    v18 = v20;
  }
  if ((unint64_t)CI::gCacheSizePeak > 0x80000000)
  {
    v21 = "GB";
  }
  else
  {
    v16 = v17;
    v21 = v18;
  }
  v22 = llround((double)(unint64_t)CI::gCacheNonVolatileSizePeak * 9.31322575e-10);
  v23 = llround((double)(unint64_t)CI::gCacheNonVolatileSizePeak * 0.000000953674316);
  v24 = llround((double)(unint64_t)CI::gCacheNonVolatileSizePeak * 0.0009765625);
  if ((unint64_t)CI::gCacheNonVolatileSizePeak > 0x800)
    v7 = "KB";
  else
    v24 = CI::gCacheNonVolatileSizePeak;
  if ((unint64_t)CI::gCacheNonVolatileSizePeak <= 0x200000)
    v25 = v24;
  else
    v25 = v23;
  if ((unint64_t)CI::gCacheNonVolatileSizePeak > 0x200000)
    v7 = "MB";
  if ((unint64_t)CI::gCacheNonVolatileSizePeak > 0x80000000)
  {
    v25 = v22;
    v7 = "GB";
  }
  v26 = 134220290;
  v27 = v2;
  v28 = 2048;
  v29 = v3;
  v30 = 2080;
  v31 = v8;
  v32 = 2048;
  v33 = v14;
  v34 = 2080;
  v35 = v15;
  v36 = 2048;
  v37 = CI::gCacheCountPeak;
  v38 = 2048;
  v39 = v16;
  v40 = 2080;
  v41 = v21;
  v42 = 2048;
  v43 = v25;
  v44 = 2080;
  v45 = v7;
  _os_log_fault_impl(&dword_1921E4000, a2, OS_LOG_TYPE_FAULT, "Cache Stats: count=%ld size=%ld%s non-volatile=%ld%s peakCount=%ld peakSize=%ld%s peakNVSize=%ld%s", (uint8_t *)&v26, 0x66u);
}

void CI::RenderTask::completionTime(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl(&dword_1921E4000, log, OS_LOG_TYPE_DEBUG, "Bad timestamp in RenderTask::completionTime()", v1, 2u);
}

void CI::Vector::Vector()
{
  __assert_rtn("Vector", "vector.cpp", 148, "values != NULL");
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D15428]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1E0C97CA8](allocator, context);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D78](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x1E0C97DB8](theArray);
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x1E0C97DF0](alloc, str, attributes);
}

CFIndex CFAttributedStringGetLength(CFAttributedStringRef aStr)
{
  return MEMORY[0x1E0C97E48](aStr);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1E0C98150]();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1E0C98180](bundle, key);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1E0C98350](cf);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x1E0C983B0](allocator, theData);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983C0](allocator, capacity, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1E0C98720](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98858](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1E0C989D0](number);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A60](key, applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFShow(CFTypeRef obj)
{
  MEMORY[0x1E0C98DF8](obj);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x1E0C99020](alloc, formatOptions, format, arguments);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99068](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

double CFStringGetDoubleValue(CFStringRef str)
{
  double result;

  MEMORY[0x1E0C990D0](str);
  return result;
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1E0C990F0](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99118](length, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1E0C99190](theString, suffix);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C993C8](allocator, buffer, bufLen, isDirectory);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BA90](retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAB0](retstr, t);
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return MEMORY[0x1E0C9BAB8](t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD0](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAE0](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF0](retstr, t, angle);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF8](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BB00](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

CGBitmapInfo CGBitmapContextGetBitmapInfo(CGContextRef context)
{
  return MEMORY[0x1E0C9BB48](context);
}

size_t CGBitmapContextGetBitsPerComponent(CGContextRef context)
{
  return MEMORY[0x1E0C9BB50](context);
}

CGColorSpaceRef CGBitmapContextGetColorSpace(CGContextRef context)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BB68](context);
}

size_t CGBitmapContextGetHeight(CGContextRef context)
{
  return MEMORY[0x1E0C9BB78](context);
}

size_t CGBitmapContextGetWidth(CGContextRef context)
{
  return MEMORY[0x1E0C9BB80](context);
}

uint64_t CGColorConversionInfoIterateColorSpaceFunctionsWithCallbacks()
{
  return MEMORY[0x1E0C9BC60]();
}

uint64_t CGColorConversionInfoIterateColorSpaceFunctionsWithCallbacksAndOptions()
{
  return MEMORY[0x1E0C9BC68]();
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

CGColorRef CGColorCreateSRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1E0C9BCB8](red, green, blue, alpha);
}

CGColorRef CGColorCreateWithPattern(CGColorSpaceRef space, CGPatternRef pattern, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BCC0](space, pattern, components);
}

BOOL CGColorEqualToColor(CGColorRef color1, CGColorRef color2)
{
  return MEMORY[0x1E0C9BCD8](color1, color2);
}

uint64_t CGColorFunctionGetOutputRange()
{
  return MEMORY[0x1E0C9BCE8]();
}

uint64_t CGColorFunctionGetProperties()
{
  return MEMORY[0x1E0C9BCF0]();
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  CGFloat result;

  MEMORY[0x1E0C9BCF8](color);
  return result;
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BD00](color);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return (const CGFloat *)MEMORY[0x1E0C9BD08](color);
}

size_t CGColorGetNumberOfComponents(CGColorRef color)
{
  return MEMORY[0x1E0C9BD20](color);
}

CFTypeID CGColorGetTypeID(void)
{
  return MEMORY[0x1E0C9BD38]();
}

uint64_t CGColorMatrixGetMatrix()
{
  return MEMORY[0x1E0C9BD40]();
}

uint64_t CGColorMatrixGetTypeID()
{
  return MEMORY[0x1E0C9BD48]();
}

uint64_t CGColorNxMTransformGetTransform()
{
  return MEMORY[0x1E0C9BD50]();
}

uint64_t CGColorNxMTransformGetTypeID()
{
  return MEMORY[0x1E0C9BD58]();
}

void CGColorRelease(CGColorRef color)
{
  MEMORY[0x1E0C9BD60](color);
}

CGColorRef CGColorRetain(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x1E0C9BD68](color);
}

uint64_t CGColorSpaceContainsFlexGTCInfo()
{
  return MEMORY[0x1E0C9BD70]();
}

CFDataRef CGColorSpaceCopyICCData(CGColorSpaceRef space)
{
  return (CFDataRef)MEMORY[0x1E0C9BD98](space);
}

uint64_t CGColorSpaceCopyICCProfileDescription()
{
  return MEMORY[0x1E0C9BDB0]();
}

CFPropertyListRef CGColorSpaceCopyPropertyList(CGColorSpaceRef space)
{
  return (CFPropertyListRef)MEMORY[0x1E0C9BDC0](space);
}

CGColorSpaceRef CGColorSpaceCreateCalibratedGray(const CGFloat *whitePoint, const CGFloat *blackPoint, CGFloat gamma)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDC8](whitePoint, blackPoint, gamma);
}

CGColorSpaceRef CGColorSpaceCreateCalibratedRGB(const CGFloat *whitePoint, const CGFloat *blackPoint, const CGFloat *gamma, const CGFloat *matrix)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDD0](whitePoint, blackPoint, gamma, matrix);
}

CGColorSpaceRef CGColorSpaceCreateDeviceCMYK(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDE0]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDE8]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDF0]();
}

CGColorSpaceRef CGColorSpaceCreateExtendedLinearized(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE00](space);
}

CGColorSpaceRef CGColorSpaceCreateICCBased(size_t nComponents, const CGFloat *range, CGDataProviderRef profile, CGColorSpaceRef alternate)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE10](nComponents, range, profile, alternate);
}

CGColorSpaceRef CGColorSpaceCreateLab(const CGFloat *whitePoint, const CGFloat *blackPoint, const CGFloat *range)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE20](whitePoint, blackPoint, range);
}

CGColorSpaceRef CGColorSpaceCreatePattern(CGColorSpaceRef baseSpace)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE30](baseSpace);
}

CGColorSpaceRef CGColorSpaceCreateWithICCData(CFTypeRef data)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE40](data);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

CGColorSpaceRef CGColorSpaceCreateWithPlatformColorSpace(const void *ref)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE58](ref);
}

CGColorSpaceRef CGColorSpaceCreateWithPropertyList(CFPropertyListRef plist)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE60](plist);
}

uint64_t CGColorSpaceEqualToColorSpace()
{
  return MEMORY[0x1E0C9BE68]();
}

CGColorSpaceRef CGColorSpaceGetBaseColorSpace(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE80](space);
}

uint64_t CGColorSpaceGetCalibratedGrayData()
{
  return MEMORY[0x1E0C9BE90]();
}

uint64_t CGColorSpaceGetCalibratedRGBData()
{
  return MEMORY[0x1E0C9BE98]();
}

uint64_t CGColorSpaceGetLabData()
{
  return MEMORY[0x1E0C9BEB8]();
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x1E0C9BEC8](space);
}

CFStringRef CGColorSpaceGetName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x1E0C9BED0](space);
}

size_t CGColorSpaceGetNumberOfComponents(CGColorSpaceRef space)
{
  return MEMORY[0x1E0C9BED8](space);
}

uint64_t CGColorSpaceGetType()
{
  return MEMORY[0x1E0C9BEF0]();
}

CFTypeID CGColorSpaceGetTypeID(void)
{
  return MEMORY[0x1E0C9BEF8]();
}

BOOL CGColorSpaceIsHDR(CGColorSpaceRef a1)
{
  return MEMORY[0x1E0C9BF00](a1);
}

BOOL CGColorSpaceIsHLGBased(CGColorSpaceRef s)
{
  return MEMORY[0x1E0C9BF08](s);
}

BOOL CGColorSpaceIsPQBased(CGColorSpaceRef s)
{
  return MEMORY[0x1E0C9BF18](s);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

CGColorSpaceRef CGColorSpaceRetain(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BF38](space);
}

BOOL CGColorSpaceSupportsOutput(CGColorSpaceRef space)
{
  return MEMORY[0x1E0C9BF40](space);
}

BOOL CGColorSpaceUsesExtendedRange(CGColorSpaceRef space)
{
  return MEMORY[0x1E0C9BF48](space);
}

BOOL CGColorSpaceUsesITUR_2100TF(CGColorSpaceRef a1)
{
  return MEMORY[0x1E0C9BF50](a1);
}

uint64_t CGColorTRCGetFunction()
{
  return MEMORY[0x1E0C9BF58]();
}

uint64_t CGColorTRCGetGammaID()
{
  return MEMORY[0x1E0C9BF60]();
}

uint64_t CGColorTRCGetTypeID()
{
  return MEMORY[0x1E0C9BF68]();
}

uint64_t CGColorTRCPureGammaOriginal()
{
  return MEMORY[0x1E0C9BF70]();
}

uint64_t CGColorTransformConvertColor()
{
  return MEMORY[0x1E0C9BF78]();
}

uint64_t CGColorTransformConvertColorComponents()
{
  return MEMORY[0x1E0C9BF80]();
}

uint64_t CGColorTransformCreate()
{
  return MEMORY[0x1E0C9BF90]();
}

uint64_t CGColorTransformRelease()
{
  return MEMORY[0x1E0C9BFA0]();
}

void CGContextAddCurveToPoint(CGContextRef c, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9BFC0](c, cp1x, cp1y, cp2x, cp2y, x, y);
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9BFD0](c, x, y);
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
  MEMORY[0x1E0C9BFD8](c, path);
}

void CGContextBeginPath(CGContextRef c)
{
  MEMORY[0x1E0C9C000](c);
}

void CGContextClosePath(CGContextRef c)
{
  MEMORY[0x1E0C9C048](c);
}

uint64_t CGContextCopyDeviceColorSpace()
{
  return MEMORY[0x1E0C9C088]();
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x1E0C9C170](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

uint64_t CGContextDrawImageFromRect()
{
  return MEMORY[0x1E0C9C178]();
}

void CGContextDrawLayerAtPoint(CGContextRef context, CGPoint point, CGLayerRef layer)
{
  MEMORY[0x1E0C9C188](context, layer, (__n128)point, *(__n128 *)&point.y);
}

void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)
{
  MEMORY[0x1E0C9C1B8](c, *(_QWORD *)&mode);
}

void CGContextFillPath(CGContextRef c)
{
  MEMORY[0x1E0C9C218](c);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C220](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextFlush(CGContextRef c)
{
  MEMORY[0x1E0C9C230](c);
}

uint64_t CGContextGetProperty()
{
  return MEMORY[0x1E0C9C2D8]();
}

uint64_t CGContextGetType()
{
  return MEMORY[0x1E0C9C318]();
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9C330](c, x, y);
}

void CGContextRelease(CGContextRef c)
{
  MEMORY[0x1E0C9C340](c);
}

CGContextRef CGContextRetain(CGContextRef c)
{
  return (CGContextRef)MEMORY[0x1E0C9C378](c);
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
  MEMORY[0x1E0C9C390](c, sx, sy);
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
  MEMORY[0x1E0C9C3B8](c, alpha);
}

void CGContextSetFillColor(CGContextRef c, const CGFloat *components)
{
  MEMORY[0x1E0C9C3F8](c, components);
}

void CGContextSetFillColorSpace(CGContextRef c, CGColorSpaceRef space)
{
  MEMORY[0x1E0C9C400](c, space);
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C408](c, color);
}

void CGContextSetGrayFillColor(CGContextRef c, CGFloat gray, CGFloat alpha)
{
  MEMORY[0x1E0C9C448](c, gray, alpha);
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
  MEMORY[0x1E0C9C458](c, *(_QWORD *)&quality);
}

void CGContextSetLineDash(CGContextRef c, CGFloat phase, const CGFloat *lengths, size_t count)
{
  MEMORY[0x1E0C9C470](c, lengths, count, phase);
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
  MEMORY[0x1E0C9C480](c, width);
}

void CGContextSetPatternPhase(CGContextRef c, CGSize phase)
{
  MEMORY[0x1E0C9C498](c, (__n128)phase, *(__n128 *)&phase.height);
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  MEMORY[0x1E0C9C4A0](c, red, green, blue, alpha);
}

void CGContextSetShouldSmoothFonts(CGContextRef c, BOOL shouldSmoothFonts)
{
  MEMORY[0x1E0C9C4E0](c, shouldSmoothFonts);
}

void CGContextSetStrokeColor(CGContextRef c, const CGFloat *components)
{
  MEMORY[0x1E0C9C4F8](c, components);
}

void CGContextSetStrokeColorSpace(CGContextRef c, CGColorSpaceRef space)
{
  MEMORY[0x1E0C9C500](c, space);
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C508](c, color);
}

void CGContextStrokePath(CGContextRef c)
{
  MEMORY[0x1E0C9C570](c);
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C578](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
  MEMORY[0x1E0C9C588](c, tx, ty);
}

CGDataConsumerRef CGDataConsumerCreateWithCFData(CFMutableDataRef data)
{
  return (CGDataConsumerRef)MEMORY[0x1E0C9C5B0](data);
}

CGDataConsumerRef CGDataConsumerCreateWithURL(CFURLRef url)
{
  return (CGDataConsumerRef)MEMORY[0x1E0C9C5B8](url);
}

void CGDataConsumerRelease(CGDataConsumerRef consumer)
{
  MEMORY[0x1E0C9C5D0](consumer);
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x1E0C9C5D8](provider);
}

CGDataProviderRef CGDataProviderCreateDirect(void *info, off_t size, const CGDataProviderDirectCallbacks *callbacks)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C5E0](info, size, callbacks);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C5F0](data);
}

uint64_t CGDataProviderCreateWithCopyOfData()
{
  return MEMORY[0x1E0C9C5F8]();
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C600](info, data, size, releaseData);
}

CGDataProviderRef CGDataProviderCreateWithFilename(const char *filename)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C608](filename);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
  MEMORY[0x1E0C9C638](provider);
}

uint64_t CGDataProviderReleaseBytePtr()
{
  return MEMORY[0x1E0C9C640]();
}

CGDataProviderRef CGDataProviderRetain(CGDataProviderRef provider)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C648](provider);
}

uint64_t CGDataProviderRetainBytePtr()
{
  return MEMORY[0x1E0C9C650]();
}

uint64_t CGIOSurfaceContextGetColorSpace()
{
  return MEMORY[0x1E0C9CAF0]();
}

uint64_t CGImageBlockCreate()
{
  return MEMORY[0x1E0C9CB00]();
}

uint64_t CGImageBlockGetBytesPerRow()
{
  return MEMORY[0x1E0C9CB08]();
}

uint64_t CGImageBlockGetData()
{
  return MEMORY[0x1E0C9CB10]();
}

uint64_t CGImageBlockGetRect()
{
  return MEMORY[0x1E0C9CB18]();
}

uint64_t CGImageBlockSetCreate()
{
  return MEMORY[0x1E0C9CB28]();
}

uint64_t CGImageBlockSetGetCount()
{
  return MEMORY[0x1E0C9CB40]();
}

uint64_t CGImageBlockSetGetImageBlock()
{
  return MEMORY[0x1E0C9CB48]();
}

uint64_t CGImageBlockSetGetRect()
{
  return MEMORY[0x1E0C9CB60]();
}

uint64_t CGImageBlockSetRelease()
{
  return MEMORY[0x1E0C9CB68]();
}

uint64_t CGImageBlockSetRetain()
{
  return MEMORY[0x1E0C9CB70]();
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1E0C9CB80](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(_QWORD *)&bitmapInfo, provider);
}

CGImageRef CGImageCreateCopyWithColorSpace(CGImageRef image, CGColorSpaceRef space)
{
  return (CGImageRef)MEMORY[0x1E0C9CB98](image, space);
}

uint64_t CGImageCreateFromIOSurface()
{
  return MEMORY[0x1E0CBC2D8]();
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x1E0C9CBA8](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

uint64_t CGImageCreateWithImageProvider()
{
  return MEMORY[0x1E0C9CBB0]();
}

CGImageRef CGImageCreateWithPNGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1E0C9CBD0](source, decode, shouldInterpolate, *(_QWORD *)&intent);
}

void CGImageDestinationAddAuxiliaryDataInfo(CGImageDestinationRef idst, CFStringRef auxiliaryImageDataType, CFDictionaryRef auxiliaryDataInfoDictionary)
{
  MEMORY[0x1E0CBC2F8](idst, auxiliaryImageDataType, auxiliaryDataInfoDictionary);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x1E0CBC308](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC338](data, type, count, options);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC348](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1E0CBC358](idst);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x1E0C9CBE8](image);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x1E0C9CBF0](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x1E0C9CBF8](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x1E0C9CC00](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1E0C9CC08](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9CC20](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9CC38](image);
}

const CGFloat *__cdecl CGImageGetDecode(CGImageRef image)
{
  return (const CGFloat *)MEMORY[0x1E0C9CC40](image);
}

uint64_t CGImageGetHeadroomInfo()
{
  return MEMORY[0x1E0C9CC58]();
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

uint64_t CGImageGetIdentifier()
{
  return MEMORY[0x1E0C9CC68]();
}

uint64_t CGImageGetImageProvider()
{
  return MEMORY[0x1E0C9CC70]();
}

uint64_t CGImageGetMask()
{
  return MEMORY[0x1E0C9CC78]();
}

uint64_t CGImageGetMaskingColors()
{
  return MEMORY[0x1E0C9CC80]();
}

CGImagePixelFormatInfo CGImageGetPixelFormatInfo(CGImageRef image)
{
  return MEMORY[0x1E0C9CC90](image);
}

uint64_t CGImageGetProperty()
{
  return MEMORY[0x1E0C9CC98]();
}

CGColorRenderingIntent CGImageGetRenderingIntent(CGImageRef image)
{
  return MEMORY[0x1E0C9CCA0](image);
}

BOOL CGImageGetShouldInterpolate(CGImageRef image)
{
  return MEMORY[0x1E0C9CCA8](image);
}

CFTypeID CGImageGetTypeID(void)
{
  return MEMORY[0x1E0C9CCC0]();
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

CGImageMetadataTagRef CGImageMetadataCopyTagWithPath(CGImageMetadataRef metadata, CGImageMetadataTagRef parent, CFStringRef path)
{
  return (CGImageMetadataTagRef)MEMORY[0x1E0CBC390](metadata, parent, path);
}

uint64_t CGImageMetadataCreateFromData()
{
  return MEMORY[0x1E0CBC3A0]();
}

uint64_t CGImageMetadataCreateFromMetadataProperties()
{
  return MEMORY[0x1E0CBC3A8]();
}

CGImageMetadataRef CGImageMetadataCreateFromXMPData(CFDataRef data)
{
  return (CGImageMetadataRef)MEMORY[0x1E0CBC3B0](data);
}

uint64_t CGImageMetadataCreateMetadataProperties()
{
  return MEMORY[0x1E0CBC3B8]();
}

CGMutableImageMetadataRef CGImageMetadataCreateMutable(void)
{
  return (CGMutableImageMetadataRef)MEMORY[0x1E0CBC3C0]();
}

CGMutableImageMetadataRef CGImageMetadataCreateMutableCopy(CGImageMetadataRef metadata)
{
  return (CGMutableImageMetadataRef)MEMORY[0x1E0CBC3C8](metadata);
}

uint64_t CGImageMetadataCreateSerializedData()
{
  return MEMORY[0x1E0CBC3D0]();
}

CFDataRef CGImageMetadataCreateXMPData(CGImageMetadataRef metadata, CFDictionaryRef options)
{
  return (CFDataRef)MEMORY[0x1E0CBC3D8](metadata, options);
}

void CGImageMetadataEnumerateTagsUsingBlock(CGImageMetadataRef metadata, CFStringRef rootPath, CFDictionaryRef options, CGImageMetadataTagBlock block)
{
  MEMORY[0x1E0CBC3E0](metadata, rootPath, options, block);
}

CFTypeID CGImageMetadataGetTypeID(void)
{
  return MEMORY[0x1E0CBC3E8]();
}

uint64_t CGImageMetadataPropertyCreate()
{
  return MEMORY[0x1E0CBC3F0]();
}

uint64_t CGImageMetadataPropertyGetValue()
{
  return MEMORY[0x1E0CBC3F8]();
}

uint64_t CGImageMetadataPropertySetValue()
{
  return MEMORY[0x1E0CBC400]();
}

BOOL CGImageMetadataRegisterNamespaceForPrefix(CGMutableImageMetadataRef metadata, CFStringRef xmlns, CFStringRef prefix, CFErrorRef *err)
{
  return MEMORY[0x1E0CBC408](metadata, xmlns, prefix, err);
}

BOOL CGImageMetadataSetTagWithPath(CGMutableImageMetadataRef metadata, CGImageMetadataTagRef parent, CFStringRef path, CGImageMetadataTagRef tag)
{
  return MEMORY[0x1E0CBC418](metadata, parent, path, tag);
}

BOOL CGImageMetadataSetValueWithPath(CGMutableImageMetadataRef metadata, CGImageMetadataTagRef parent, CFStringRef path, CFTypeRef value)
{
  return MEMORY[0x1E0CBC428](metadata, parent, path, value);
}

CFStringRef CGImageMetadataTagCopyName(CGImageMetadataTagRef tag)
{
  return (CFStringRef)MEMORY[0x1E0CBC430](tag);
}

CFTypeRef CGImageMetadataTagCopyValue(CGImageMetadataTagRef tag)
{
  return (CFTypeRef)MEMORY[0x1E0CBC448](tag);
}

CGImageMetadataTagRef CGImageMetadataTagCreate(CFStringRef xmlns, CFStringRef prefix, CFStringRef name, CGImageMetadataType type, CFTypeRef value)
{
  return (CGImageMetadataTagRef)MEMORY[0x1E0CBC450](xmlns, prefix, name, *(_QWORD *)&type, value);
}

CGImageMetadataType CGImageMetadataTagGetType(CGImageMetadataTagRef tag)
{
  return MEMORY[0x1E0CBC458](tag);
}

uint64_t CGImageMetadataValueCreate()
{
  return MEMORY[0x1E0CBC468]();
}

uint64_t CGImageMetadataValueGetNamespaceURI()
{
  return MEMORY[0x1E0CBC470]();
}

uint64_t CGImageMetadataValueGetValue()
{
  return MEMORY[0x1E0CBC478]();
}

uint64_t CGImageMetadataValueSetNamespaceURI()
{
  return MEMORY[0x1E0CBC480]();
}

uint64_t CGImageMetadataValueSetSuggestedNamespacePrefix()
{
  return MEMORY[0x1E0CBC488]();
}

uint64_t CGImageProviderCopyIOSurface()
{
  return MEMORY[0x1E0C9CD10]();
}

uint64_t CGImageProviderCopyImageBlockSetWithOptions()
{
  return MEMORY[0x1E0C9CD20]();
}

uint64_t CGImageProviderCreate()
{
  return MEMORY[0x1E0C9CD30]();
}

uint64_t CGImageProviderGetAlphaInfo()
{
  return MEMORY[0x1E0C9CD38]();
}

uint64_t CGImageProviderGetBitmapInfo()
{
  return MEMORY[0x1E0C9CD40]();
}

uint64_t CGImageProviderGetColorSpace()
{
  return MEMORY[0x1E0C9CD50]();
}

uint64_t CGImageProviderGetComponentType()
{
  return MEMORY[0x1E0C9CD58]();
}

uint64_t CGImageProviderGetPixelSize()
{
  return MEMORY[0x1E0C9CD70]();
}

uint64_t CGImageProviderGetProperty()
{
  return MEMORY[0x1E0C9CD78]();
}

uint64_t CGImageProviderGetSize()
{
  return MEMORY[0x1E0C9CD80]();
}

uint64_t CGImageProviderRelease()
{
  return MEMORY[0x1E0C9CD88]();
}

uint64_t CGImageProviderRetain()
{
  return MEMORY[0x1E0C9CD90]();
}

uint64_t CGImageProviderSetProperty()
{
  return MEMORY[0x1E0C9CD98]();
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1E0C9CDA8](image);
}

uint64_t CGImageSetHeadroom()
{
  return MEMORY[0x1E0C9CDB8]();
}

uint64_t CGImageSetProperty()
{
  return MEMORY[0x1E0C9CDC0]();
}

CFDictionaryRef CGImageSourceCopyAuxiliaryDataInfoAtIndex(CGImageSourceRef isrc, size_t index, CFStringRef auxiliaryImageDataType)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBC500](isrc, index, auxiliaryImageDataType);
}

uint64_t CGImageSourceCopyAuxiliaryDataInfoAtIndexWithOptions()
{
  return MEMORY[0x1E0CBC508]();
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBC530](isrc, index, options);
}

CFArrayRef CGImageSourceCopyTypeIdentifiers(void)
{
  return (CFArrayRef)MEMORY[0x1E0CBC550]();
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC568](isrc, index, options);
}

CGImageRef CGImageSourceCreateThumbnailAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC588](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC590](data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC5C0](url, options);
}

CFStringRef CGImageSourceGetType(CGImageSourceRef isrc)
{
  return (CFStringRef)MEMORY[0x1E0CBC618](isrc);
}

uint64_t CGImageSourceGetTypeWithExtension()
{
  return MEMORY[0x1E0CBC630]();
}

CGLayerRef CGLayerCreateWithContext(CGContextRef context, CGSize size, CFDictionaryRef auxiliaryInfo)
{
  return (CGLayerRef)MEMORY[0x1E0C9CE30](context, auxiliaryInfo, (__n128)size, *(__n128 *)&size.height);
}

CGContextRef CGLayerGetContext(CGLayerRef layer)
{
  return (CGContextRef)MEMORY[0x1E0C9CE38](layer);
}

CGSize CGLayerGetSize(CGLayerRef layer)
{
  double v1;
  double v2;
  CGSize result;

  MEMORY[0x1E0C9CE40](layer);
  result.height = v2;
  result.width = v1;
  return result;
}

uint64_t CGMetalContextGetColorSpace()
{
  return MEMORY[0x1E0C9CE48]();
}

void CGPDFContextAddDestinationAtPoint(CGContextRef context, CFStringRef name, CGPoint point)
{
  MEMORY[0x1E0C9CEB8](context, name, (__n128)point, *(__n128 *)&point.y);
}

void CGPDFContextBeginPage(CGContextRef context, CFDictionaryRef pageInfo)
{
  MEMORY[0x1E0C9CEC0](context, pageInfo);
}

void CGPDFContextClose(CGContextRef context)
{
  MEMORY[0x1E0C9CEC8](context);
}

CGContextRef CGPDFContextCreate(CGDataConsumerRef consumer, const CGRect *mediaBox, CFDictionaryRef auxiliaryInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9CED0](consumer, mediaBox, auxiliaryInfo);
}

void CGPDFContextEndPage(CGContextRef context)
{
  MEMORY[0x1E0C9CEE0](context);
}

void CGPDFContextSetDestinationForRect(CGContextRef context, CFStringRef name, CGRect rect)
{
  MEMORY[0x1E0C9CEE8](context, name, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2A8](path, m, x, y);
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
  MEMORY[0x1E0C9D310](path);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D388]();
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3C8](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPathRef CGPathCreateWithRoundedRect(CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3D0](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, cornerWidth, cornerHeight);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D490](path, m, x, y);
}

void CGPathRelease(CGPathRef path)
{
  MEMORY[0x1E0C9D498](path);
}

CGPatternRef CGPatternCreate(void *info, CGRect bounds, CGAffineTransform *matrix, CGFloat xStep, CGFloat yStep, CGPatternTiling tiling, BOOL isColored, const CGPatternCallbacks *callbacks)
{
  return (CGPatternRef)MEMORY[0x1E0C9D4A8](info, matrix, *(_QWORD *)&tiling, isColored, callbacks, (__n128)bounds.origin, *(__n128 *)&bounds.origin.y, (__n128)bounds.size, *(__n128 *)&bounds.size.height, xStep, yStep);
}

void CGPatternRelease(CGPatternRef pattern)
{
  MEMORY[0x1E0C9D510](pattern);
}

BOOL CGPointMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGPoint *point)
{
  return MEMORY[0x1E0C9D530](dict, point);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1E0C9D550]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D558]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9D560]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5B0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D5E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D5F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D5F8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D600]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return MEMORY[0x1E0C9D610]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1E0C9D618]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x1E0C9D620](dict, rect);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D630]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectStandardize(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D638]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D640]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

uint64_t CGSNewRegionWithRect()
{
  return MEMORY[0x1E0C9D740]();
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x1E0C9F310](time);
  return result;
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x1E0C9F320](retstr, dictionaryRepresentation);
}

CTFontRef CTFontCreateUIFontForLanguage(CTFontUIFontType uiType, CGFloat size, CFStringRef language)
{
  return (CTFontRef)MEMORY[0x1E0CA7A68](*(_QWORD *)&uiType, language, size);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1E0CA7A88](name, matrix, size);
}

void CTFrameDraw(CTFrameRef frame, CGContextRef context)
{
  MEMORY[0x1E0CA7DA0](frame, context);
}

CTFrameRef CTFramesetterCreateFrame(CTFramesetterRef framesetter, CFRange stringRange, CGPathRef path, CFDictionaryRef frameAttributes)
{
  return (CTFrameRef)MEMORY[0x1E0CA7DD8](framesetter, stringRange.location, stringRange.length, path, frameAttributes);
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTFramesetterRef)MEMORY[0x1E0CA7DE0](attrString);
}

CGSize CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef framesetter, CFRange stringRange, CFDictionaryRef frameAttributes, CGSize constraints, CFRange *fitRange)
{
  double v5;
  double v6;
  CGSize result;

  MEMORY[0x1E0CA7DF8](framesetter, stringRange.location, stringRange.length, frameAttributes, fitRange, (__n128)constraints, *(__n128 *)&constraints.height);
  result.height = v6;
  result.width = v5;
  return result;
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x1E0CA7E88](attrString);
}

CGRect CTLineGetBoundsWithOptions(CTLineRef line, CTLineBoundsOptions options)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0CA7EC0](line, options);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CTParagraphStyleRef CTParagraphStyleCreate(const CTParagraphStyleSetting *settings, size_t settingCount)
{
  return (CTParagraphStyleRef)MEMORY[0x1E0CA7F60](settings, settingCount);
}

CFTypeRef CVBufferGetAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x1E0CA8910](buffer, key, attachmentMode);
}

CFDictionaryRef CVBufferGetAttachments(CVBufferRef buffer, CVAttachmentMode attachmentMode)
{
  return (CFDictionaryRef)MEMORY[0x1E0CA8918](buffer, *(_QWORD *)&attachmentMode);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
  MEMORY[0x1E0CA8950](buffer, key, value, *(_QWORD *)&attachmentMode);
}

void CVBufferSetAttachments(CVBufferRef buffer, CFDictionaryRef theAttachments, CVAttachmentMode attachmentMode)
{
  MEMORY[0x1E0CA8958](buffer, theAttachments, *(_QWORD *)&attachmentMode);
}

uint64_t CVCreateColorSpaceFromIOSurfaceBulkAttachments()
{
  return MEMORY[0x1E0CA8970]();
}

CGColorSpaceRef CVImageBufferCreateColorSpaceFromAttachments(CFDictionaryRef attachments)
{
  return (CGColorSpaceRef)MEMORY[0x1E0CA89D0](attachments);
}

CGSize CVImageBufferGetEncodedSize(CVImageBufferRef imageBuffer)
{
  double v1;
  double v2;
  CGSize result;

  MEMORY[0x1E0CA89F0](imageBuffer);
  result.height = v2;
  result.width = v1;
  return result;
}

Boolean CVImageBufferIsFlipped(CVImageBufferRef imageBuffer)
{
  return MEMORY[0x1E0CA89F8](imageBuffer);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x1E0CA8A50](image);
}

CFTypeID CVMetalTextureGetTypeID(void)
{
  return MEMORY[0x1E0CA8A58]();
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8A98](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator, IOSurfaceRef surface, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8AC0](allocator, surface, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1E0CA8AE0](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1E0CA8AE8](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8AF8](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B00](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B20](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B28](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x1E0CA8B30](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B38](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B40](pixelBuffer);
}

CFTypeID CVPixelBufferGetTypeID(void)
{
  return MEMORY[0x1E0CA8B48]();
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B50](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B58](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1E0CA8B70](pixelBuffer, lockFlags);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x1E0CA8BF0](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1E0CA8C00](pixelBuffer, unlockFlags);
}

uint64_t ColorSyncMakeProfile()
{
  return MEMORY[0x1E0C95450]();
}

CFDataRef ColorSyncProfileCopyHeader(ColorSyncProfileRef prof)
{
  return (CFDataRef)MEMORY[0x1E0C95460](prof);
}

ColorSyncMutableProfileRef ColorSyncProfileCreateMutableCopy(ColorSyncProfileRef prof)
{
  return (ColorSyncMutableProfileRef)MEMORY[0x1E0C95480](prof);
}

void ColorSyncProfileSetHeader(ColorSyncMutableProfileRef prof, CFDataRef header)
{
  MEMORY[0x1E0C954B0](prof, header);
}

void ColorSyncProfileSetTag(ColorSyncMutableProfileRef prof, CFStringRef signature, CFDataRef data)
{
  MEMORY[0x1E0C954B8](prof, signature, data);
}

uint64_t FigDispatchQueueCreateWithPriority()
{
  return MEMORY[0x1E0CA05C0]();
}

uint64_t GetMetadataPropertyMatchingSchemaAndPropertyName()
{
  return MEMORY[0x1E0CBC688]();
}

CFTypeRef IOSurfaceCopyValue(IOSurfaceRef buffer, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1E0CBBAE8](buffer, key);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBAF0](properties);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB38](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1E0CBBB40](buffer);
}

void *__cdecl IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1E0CBBB68](buffer, planeIndex);
}

uint64_t IOSurfaceGetBulkAttachments()
{
  return MEMORY[0x1E0CBBB70]();
}

size_t IOSurfaceGetBytesPerElement(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB80](buffer);
}

size_t IOSurfaceGetBytesPerElementOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBB88](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB90](buffer);
}

size_t IOSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBBA0](buffer, planeIndex);
}

uint64_t IOSurfaceGetCompressionTypeOfPlane()
{
  return MEMORY[0x1E0CBBBD8]();
}

size_t IOSurfaceGetElementHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBBF8](buffer, planeIndex);
}

size_t IOSurfaceGetElementWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBC08](buffer, planeIndex);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC28](buffer);
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBC38](buffer, planeIndex);
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC48](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC68](buffer);
}

size_t IOSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC70](buffer);
}

size_t IOSurfaceGetPropertyMaximum(CFStringRef property)
{
  return MEMORY[0x1E0CBBC88](property);
}

uint32_t IOSurfaceGetSeed(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBCA8](buffer);
}

uint64_t IOSurfaceGetSizeOfPlane()
{
  return MEMORY[0x1E0CBBCB0]();
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBCE0](buffer);
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBCF0](buffer, planeIndex);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBD28](buffer, *(_QWORD *)&options, seed);
}

uint64_t IOSurfaceLockPlane()
{
  return MEMORY[0x1E0CBBD30]();
}

uint64_t IOSurfaceSetBulkAttachments2()
{
  return MEMORY[0x1E0CBBDF8]();
}

kern_return_t IOSurfaceSetPurgeable(IOSurfaceRef buffer, uint32_t newState, uint32_t *oldState)
{
  return MEMORY[0x1E0CBBE30](buffer, *(_QWORD *)&newState, oldState);
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
  MEMORY[0x1E0CBBE40](buffer, key, value);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBE88](buffer, *(_QWORD *)&options, seed);
}

uint64_t IOSurfaceUnlockPlane()
{
  return MEMORY[0x1E0CBBE90]();
}

BOOL MPSSupportsMTLDevice(id device)
{
  return MEMORY[0x1E0CC6C88](device);
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1E0CC6980]();
}

uint64_t MTLPixelFormatGetInfoForDevice()
{
  return MEMORY[0x1E0CC69C8]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

const char *__cdecl NSGetSizeAndAlignment(const char *typePtr, NSUInteger *sizep, NSUInteger *alignp)
{
  return (const char *)MEMORY[0x1E0C99758](typePtr, sizep, alignp);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1E0CB3178](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x1E0CECD18](allocator, pixelTransferSessionOut);
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
  MEMORY[0x1E0CECD28](session);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x1E0CECD38](session, sourceBuffer, destinationBuffer);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFMZEnabled()
{
  return MEMORY[0x1E0C9A260]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1E0DE41D8](this, __s);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4408](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1E0DE4490](this, __pos, __n1, __s, __n2);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1E0DE44C8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1E0DE4698]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1E0DE46A0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4718]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1E0DE4A78](__str, __idx, *(_QWORD *)&__base);
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return MEMORY[0x1E0DE4AE0]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1E0DE4B38]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D60](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D70](retstr, __val);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E2EB66C8();
}

void operator delete(void *__p)
{
  off_1E2EB66D0(__p);
}

uint64_t operator delete()
{
  return off_1E2EB66D8();
}

uint64_t operator new[]()
{
  return off_1E2EB66E0();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E2EB66E8(__sz);
}

uint64_t operator new()
{
  return off_1E2EB66F0();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

int __fpclassifyd(double a1)
{
  return MEMORY[0x1E0C80B00](a1);
}

simd_float3x3 __invert_f3(simd_float3x3 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  simd_float3x3 result;

  MEMORY[0x1E0C80B30]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2]);
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

uint64_t __memset_chk()
{
  return MEMORY[0x1E0C80B78]();
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x1E0C80BD0](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

simd_float4 _simd_exp2_f4(simd_float4 x)
{
  simd_float4 result;

  MEMORY[0x1E0C811C8]((__n128)x);
  return result;
}

simd_float4 _simd_exp_f4(simd_float4 x)
{
  simd_float4 result;

  MEMORY[0x1E0C811D0]((__n128)x);
  return result;
}

simd_float4 _simd_log2_f4(simd_float4 x)
{
  simd_float4 result;

  MEMORY[0x1E0C811E0]((__n128)x);
  return result;
}

simd_float4 _simd_log_f4(simd_float4 x)
{
  simd_float4 result;

  MEMORY[0x1E0C811E8]((__n128)x);
  return result;
}

simd_float4 _simd_pow_f4(simd_float4 x, simd_float4 y)
{
  simd_float4 result;

  MEMORY[0x1E0C811F8]((__n128)x, (__n128)y);
  return result;
}

simd_float4 _simd_sin_f4(simd_float4 x)
{
  simd_float4 result;

  MEMORY[0x1E0C81200]((__n128)x);
  return result;
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1E0C813D0](a1, *(_QWORD *)&a2);
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

long double asin(long double __x)
{
  long double result;

  MEMORY[0x1E0C81598](__x);
  return result;
}

long double atan(long double __x)
{
  long double result;

  MEMORY[0x1E0C81618](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C81628](a1, a2);
  return result;
}

int atexit(void (*a1)(void))
{
  return MEMORY[0x1E0C81648](a1);
}

int atexit_b(void *a1)
{
  return MEMORY[0x1E0C81650](a1);
}

double atof(const char *a1)
{
  double result;

  MEMORY[0x1E0C81658](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1E0C816B8](a1, *(_QWORD *)&a2);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

long double cbrt(long double __x)
{
  long double result;

  MEMORY[0x1E0C81850](__x);
  return result;
}

BOOL class_addIvar(Class cls, const char *name, size_t size, uint8_t alignment, const char *types)
{
  return MEMORY[0x1E0DE7A48](cls, name, size, alignment, types);
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1E0DE7A50](cls, name, imp, types);
}

Ivar *__cdecl class_copyIvarList(Class cls, unsigned int *outCount)
{
  return (Ivar *)MEMORY[0x1E0DE7A70](cls, outCount);
}

Method *__cdecl class_copyMethodList(Class cls, unsigned int *outCount)
{
  return (Method *)MEMORY[0x1E0DE7A78](cls, outCount);
}

objc_property_t *__cdecl class_copyPropertyList(Class cls, unsigned int *outCount)
{
  return (objc_property_t *)MEMORY[0x1E0DE7A80](cls, outCount);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1E0DE7AA8](cls, name);
}

Ivar class_getInstanceVariable(Class cls, const char *name)
{
  return (Ivar)MEMORY[0x1E0DE7AB8](cls, name);
}

IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return (IMP)MEMORY[0x1E0DE7AF0](cls, name, imp, types);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B40](__x);
  return result;
}

float cosf(float a1)
{
  float result;

  MEMORY[0x1E0C82B48](a1);
  return result;
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C48](queue, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C68](flags, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority, block);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CB0](buffer, size, queue, destructor);
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82CF8]();
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1E0C82D08](key);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1E0C82E58](queue);
}

void *__cdecl dispatch_queue_get_specific(dispatch_queue_t queue, const void *key)
{
  return (void *)MEMORY[0x1E0C82E68](queue, key);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  MEMORY[0x1E0C82E80](queue, key, context, destructor);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1E0C83028](a1, a2);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t dyld_get_active_platform()
{
  return MEMORY[0x1E0C830A0]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

long double erf(long double __x)
{
  long double result;

  MEMORY[0x1E0C831F0](__x);
  return result;
}

long double erfc(long double __x)
{
  long double result;

  MEMORY[0x1E0C831F8](__x);
  return result;
}

float erff(float a1)
{
  float result;

  MEMORY[0x1E0C83200](a1);
  return result;
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x1E0C83290](a1);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int freelocale(locale_t a1)
{
  return MEMORY[0x1E0C834D8](a1);
}

long double frexp(long double __x, int *__e)
{
  long double result;

  MEMORY[0x1E0C834E8](__e, __x);
  return result;
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1E0C83530](a1, a2, *(_QWORD *)&a3);
}

FILE *__cdecl funopen(const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  return (FILE *)MEMORY[0x1E0C835C8](a1, a2, a3, a4, a5);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

int getpagesize(void)
{
  return MEMORY[0x1E0C83740]();
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

char *__cdecl getsectdatafromFramework(const char *FrameworkName, const char *segname, const char *sectname, unint64_t *size)
{
  return (char *)MEMORY[0x1E0C837D0](FrameworkName, segname, sectname, size);
}

void glGetIntegerv(GLenum pname, GLint *params)
{
  MEMORY[0x1E0CD0B68](*(_QWORD *)&pname, params);
}

void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  MEMORY[0x1E0CD0C50](*(_QWORD *)&target, *(_QWORD *)&level, *(_QWORD *)&internalformat, *(_QWORD *)&width, *(_QWORD *)&height, *(_QWORD *)&border, *(_QWORD *)&format, *(_QWORD *)&type);
}

long double hypot(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C838E8](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C838F0](a1, a2);
  return result;
}

const char *__cdecl ivar_getName(Ivar v)
{
  return (const char *)MEMORY[0x1E0DE7B28](v);
}

const char *__cdecl ivar_getTypeEncoding(Ivar v)
{
  return (const char *)MEMORY[0x1E0DE7B38](v);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

long double ldexp(long double __x, int __e)
{
  long double result;

  MEMORY[0x1E0C83B40](*(_QWORD *)&__e, __x);
  return result;
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

float log10f(float a1)
{
  float result;

  MEMORY[0x1E0C83BC8](a1);
  return result;
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BE8](__x);
  return result;
}

float log2f(float a1)
{
  float result;

  MEMORY[0x1E0C83BF0](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x1E0C83C00](a1);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

void memset_pattern4(void *__b, const void *__pattern4, size_t __len)
{
  MEMORY[0x1E0C840C0](__b, __pattern4, __len);
}

void memset_pattern8(void *__b, const void *__pattern8, size_t __len)
{
  MEMORY[0x1E0C840C8](__b, __pattern8, __len);
}

void method_exchangeImplementations(Method m1, Method m2)
{
  MEMORY[0x1E0DE7B50](m1, m2);
}

IMP method_getImplementation(Method m)
{
  return (IMP)MEMORY[0x1E0DE7B68](m);
}

SEL method_getName(Method m)
{
  return (SEL)MEMORY[0x1E0DE7B70](m);
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return (const char *)MEMORY[0x1E0DE7B88](m);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int mprotect(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1E0C841F0](a1, a2, *(_QWORD *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

locale_t newlocale(int a1, const char *a2, locale_t a3)
{
  return (locale_t)MEMORY[0x1E0C843A0](*(_QWORD *)&a1, a2, a3);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)
{
  return (Class)MEMORY[0x1E0DE7BC0](superclass, name, extraBytes);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x1E0DE7C30](dest, src, size, atomic, hasStrong);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

const char *__cdecl object_getClassName(id a1)
{
  return (const char *)MEMORY[0x1E0DE8000](a1);
}

Ivar object_getInstanceVariable(id obj, const char *name, void **outValue)
{
  return (Ivar)MEMORY[0x1E0DE8010](obj, name, outValue);
}

id object_getIvar(id a1, Ivar a2)
{
  return (id)MEMORY[0x1E0DE8018](a1, a2);
}

Ivar object_setInstanceVariable(id obj, const char *name, void *value)
{
  return (Ivar)MEMORY[0x1E0DE8038](obj, name, value);
}

void object_setIvar(id obj, Ivar ivar, id value)
{
  MEMORY[0x1E0DE8048](obj, ivar, value);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1E0C84930](log, ptr);
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1E0C849F0]();
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

uint64_t proc_pidoriginatorinfo()
{
  return MEMORY[0x1E0C84C48]();
}

objc_property_attribute_t *__cdecl property_copyAttributeList(objc_property_t property, unsigned int *outCount)
{
  return (objc_property_attribute_t *)MEMORY[0x1E0DE8058](property, outCount);
}

const char *__cdecl property_getName(objc_property_t property)
{
  return (const char *)MEMORY[0x1E0DE8070](property);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int putchar(int a1)
{
  return MEMORY[0x1E0C84F50](*(_QWORD *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1E0C84F80]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84F88](__base, __nel, __width, __compar);
}

uint64_t random(void)
{
  return MEMORY[0x1E0C84FC0]();
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1E0DE80C8](sel);
}

SEL sel_getUid(const char *str)
{
  return (SEL)MEMORY[0x1E0DE80D0](str);
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

float sinf(float a1)
{
  float result;

  MEMORY[0x1E0C85420](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

void srandom(unsigned int a1)
{
  MEMORY[0x1E0C85488](*(_QWORD *)&a1);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C855E8](__s, *(_QWORD *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1E0C85610](__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x1E0C85618](a1, a2);
  return result;
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x1E0C857D0](*(_QWORD *)&a1, a2);
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x1E0C857E8](__x);
  return result;
}

long double tanh(long double __x)
{
  long double result;

  MEMORY[0x1E0C857F8](__x);
  return result;
}

locale_t uselocale(locale_t a1)
{
  return (locale_t)MEMORY[0x1E0C859D8](a1);
}

void uuid_generate(uuid_t out)
{
  MEMORY[0x1E0C85A18](out);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A40](uu, out);
}

void vDSP_dotpr(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C0D0](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_vabs(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C358](__A, __IA, __C, __IC, __N);
}

void vDSP_vflt32(const int *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C5B8](__A, __IA, __C, __IC, __N);
}

void vDSP_vsbsm(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x1E0C8C848](__A, __IA, __B, __IB, __C, __D, __ID, __N);
}

void vDSP_vsmsa(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x1E0C8C898](__A, __IA, __B, __C, __D, __ID, __N);
}

void vDSP_vsub(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C940](__B, __IB, __A, __IA, __C, __IC, __N);
}

vImage_Error vImageBufferFill_ARGBFFFF(const vImage_Buffer *dest, const Pixel_FFFF color, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CBE0](dest, color, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_16Fto16U(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD28](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_16Uto16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD48](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar16FtoPlanar8(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CF20](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar16FtoPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CF28](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar16UtoARGB16U(const vImage_Buffer *aSrc, const vImage_Buffer *rSrc, const vImage_Buffer *gSrc, const vImage_Buffer *bSrc, const vImage_Buffer *argbDest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CF38](aSrc, rSrc, gSrc, bSrc, argbDest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar8toPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CF88](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_Planar8toPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, Pixel_F maxFloat, Pixel_F minFloat, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CF90](src, dest, *(_QWORD *)&flags, maxFloat, minFloat);
}

vImage_Error vImageConvert_PlanarFtoPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CFC0](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_PlanarFtoPlanar8(const vImage_Buffer *src, const vImage_Buffer *dest, Pixel_F maxFloat, Pixel_F minFloat, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CFC8](src, dest, *(_QWORD *)&flags, maxFloat, minFloat);
}

vImage_Error vImageConvert_RGB16UtoRGBA16U(const vImage_Buffer *rgbSrc, const vImage_Buffer *aSrc, Pixel_16U alpha, const vImage_Buffer *rgbaDest, BOOL premultiply, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CFF0](rgbSrc, aSrc, alpha, rgbaDest, premultiply, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_RGB888toRGBA8888(const vImage_Buffer *a1, const vImage_Buffer *a2, Pixel_8 a3, const vImage_Buffer *a4, BOOL a5, vImage_Flags a6)
{
  return MEMORY[0x1E0C8D048](a1, a2, a3, a4, a5, *(_QWORD *)&a6);
}

vImage_Error vImageConvert_RGBFFFtoRGBAFFFF(const vImage_Buffer *a1, const vImage_Buffer *a2, Pixel_F a3, const vImage_Buffer *a4, BOOL a5, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D090](a1, a2, a4, a5, *(_QWORD *)&flags, a3);
}

vImage_Error vImageExtractChannel_ARGB16U(const vImage_Buffer *src, const vImage_Buffer *dest, uint64_t channelIndex, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D280](src, dest, channelIndex, *(_QWORD *)&flags);
}

vImage_Error vImageExtractChannel_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, uint64_t channelIndex, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D290](src, dest, channelIndex, *(_QWORD *)&flags);
}

vImage_Error vImageHistogramCalculation_ARGB8888(const vImage_Buffer *src, vImagePixelCount *histogram[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8D2F0](src, histogram, *(_QWORD *)&flags);
}

vImage_Error vImageHistogramCalculation_ARGBFFFF(const vImage_Buffer *src, vImagePixelCount *histogram[4], unsigned int histogram_entries, Pixel_F minVal, Pixel_F maxVal, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D2F8](src, histogram, *(_QWORD *)&histogram_entries, *(_QWORD *)&flags, minVal, maxVal);
}

vImage_Error vImageOverwriteChannelsWithPixel_ARGB16U(const Pixel_ARGB_16U the_pixel, const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t copyMask, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D498](the_pixel, src, dest, copyMask, *(_QWORD *)&flags);
}

vImage_Error vImageOverwriteChannels_ARGBFFFF(const vImage_Buffer *newSrc, const vImage_Buffer *origSrc, const vImage_Buffer *dest, uint8_t copyMask, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D4F0](newSrc, origSrc, dest, copyMask, *(_QWORD *)&flags);
}

vImage_Error vImagePermuteChannels_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8D520](src, dest, permuteMap, *(_QWORD *)&flags);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85A68](a1, a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

