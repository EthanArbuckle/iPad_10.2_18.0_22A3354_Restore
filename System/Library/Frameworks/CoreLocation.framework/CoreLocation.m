_QWORD *sub_18F5B4C28(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24) = a3;
      return CFRetain(*(CFTypeRef *)(*(_QWORD *)(result[4] + 8) + 24));
    }
  }
  return result;
}

_QWORD *sub_18F5B5290(uint64_t a1, int a2)
{
  pthread_mutex_t *v4;
  int v6;
  pthread_mutex_t *v7;
  __int16 v8;
  _QWORD v9[2];

  sub_18F5C9250(v9);
  v6 = a2;
  sub_18F5C941C((uint64_t)v9, "kCLConnectionMessageActivityTypeKey", &v6);
  v4 = *(pthread_mutex_t **)(a1 + 240);
  v7 = v4;
  pthread_mutex_lock(v4);
  v8 = 257;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18F5C7BB4(a1, "kCLConnectionMessageActivityType", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_18F5C6360(v9);
}

void sub_18F5B5328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_18F5B55C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5B5750(_QWORD *a1, int a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  _BOOL4 v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const __CFString *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  NSObject *v37;
  char *v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  NSObject *v42;
  CFTypeRef v44[3];
  __int16 v45;
  int v46;
  int v47;
  uint8_t buf[4];
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v6 = (pthread_mutex_t *)a1[30];
  v44[2] = v6;
  pthread_mutex_lock(v6);
  v45 = 257;
  v44[0] = 0;
  if (a1[45])
    v7 = 1;
  else
    v7 = a1[46] != 0;
  if (((dyld_program_sdk_at_least() ^ 1 | v7) & 1) != 0)
    goto LABEL_33;
  if (a2 == 3)
  {
    if (dyld_program_sdk_at_least())
    {
      v28 = (void *)objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v25, v26, v27);
      if (objc_msgSend_objectForInfoDictionaryKey_(v28, v29, (uint64_t)CFSTR("NSLocationAlwaysAndWhenInUseUsageDescription"), v30))
      {
        v34 = (void *)objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v31, v32, v33);
        if (objc_msgSend_objectForInfoDictionaryKey_(v34, v35, (uint64_t)CFSTR("NSLocationWhenInUseUsageDescription"), v36))
        {
          goto LABEL_33;
        }
      }
      v24 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v31, (uint64_t)CFSTR("This app has attempted to access privacy-sensitive data without a usage description. The app's Info.plist must contain both “%@” and “%@” keys with string values explaining to the user how the app uses this data"), v33, CFSTR("NSLocationAlwaysAndWhenInUseUsageDescription"), CFSTR("NSLocationWhenInUseUsageDescription"));
      goto LABEL_27;
    }
    v39 = (void *)objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v25, v26, v27);
    v12 = CFSTR("NSLocationAlwaysUsageDescription");
    if (objc_msgSend_objectForInfoDictionaryKey_(v39, v40, (uint64_t)CFSTR("NSLocationAlwaysUsageDescription"), v41))
      goto LABEL_33;
    goto LABEL_25;
  }
  if (a2 == 4)
  {
    v11 = (void *)objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v8, v9, v10);
    v12 = CFSTR("NSLocationWhenInUseUsageDescription");
    if (objc_msgSend_objectForInfoDictionaryKey_(v11, v13, (uint64_t)CFSTR("NSLocationWhenInUseUsageDescription"), v14))
      goto LABEL_33;
    sub_18F5C70F0(a3, "kCLConnectionMessagePurposeIdentifierKey", v44, 0xFFFFFFFFLL);
    if (v44[0])
    {
      v18 = (void *)objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v15, v16, v17);
      v21 = (void *)objc_msgSend_objectForInfoDictionaryKey_(v18, v19, (uint64_t)CFSTR("NSLocationAuthorizationPurposeDescriptionDictionary"), v20);
      if (v21 && objc_msgSend_objectForKey_(v21, v22, (uint64_t)v44[0], v23))
        goto LABEL_33;
      v24 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v22, (uint64_t)CFSTR("This app has attempted to access privacy-sensitive data without a usage description. The app's Info.plist must contain an “%@” key with a dictionary containing usage descriptions, and purposeKey “%@” must be present in it explaining to the user how the app uses this data"), v23, CFSTR("NSLocationAuthorizationPurposeDescriptionDictionary"), v44[0]);
      goto LABEL_27;
    }
LABEL_25:
    v24 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v15, (uint64_t)CFSTR("This app has attempted to access privacy-sensitive data without a usage description. The app's Info.plist must contain an “%@” key with a string value explaining to the user how the app uses this data"), v17, v12);
LABEL_27:
    if (!v24)
      goto LABEL_33;
    NSLog(CFSTR("%@"), v24);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v42 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v49 = a2;
      _os_log_impl(&dword_18F5B3000, v42, OS_LOG_TYPE_DEFAULT, "Missing UsageDescription key for requested authorization: %{public}d", buf, 8u);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_33;
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v46 = 67240192;
    v47 = a2;
    v38 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLClientRequestAuthorization(CLClientRef, CLClientAuthorizationStatus, CLNameValuePair &)", "CoreLocation: %s\n", v38);
LABEL_37:
    if (v38 != (char *)buf)
      free(v38);
    goto LABEL_33;
  }
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v37 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v49 = a2;
    _os_log_impl(&dword_18F5B3000, v37, OS_LOG_TYPE_FAULT, "Invalid requested authorization: %{public}d", buf, 8u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v46 = 67240192;
    v47 = a2;
    v38 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "void CLClientRequestAuthorization(CLClientRef, CLClientAuthorizationStatus, CLNameValuePair &)", "CoreLocation: %s\n", v38);
    goto LABEL_37;
  }
LABEL_33:
  *(_DWORD *)buf = a2;
  sub_18F5C941C(a3, "kCLConnectionMessageStatusKey", buf);
  sub_18F5C7BB4((uint64_t)a1, "kCLConnectionMessageRequestAuthorization", a3);
  return pthread_mutex_unlock(v6);
}

void sub_18F5B5C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F5B5FF8(uint64_t a1)
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, *(const void **)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_18F5B61C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *CLClientMarkAsHavingReceivedLocation(uint64_t a1)
{
  pthread_mutex_t *v2;
  _QWORD v4[2];

  sub_18F5C9250(v4);
  v2 = *(pthread_mutex_t **)(a1 + 240);
  pthread_mutex_lock(v2);
  sub_18F5C7BB4(a1, "kCLConnectionMessageMarkAsHavingReceivedLocation", (uint64_t)v4);
  pthread_mutex_unlock(v2);
  return sub_18F5C6360(v4);
}

void sub_18F5B66EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_18F5B67C4()
{
  uint64_t v0;
  int v1;
  NSObject *v2;
  unsigned __int16 v3;
  uint64_t v4;
  unsigned __int16 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  char *v17;
  uint8_t buf[4];
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8F758 != -1)
    dispatch_once(&qword_1ECD8F758, &unk_1E2990510);
  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  v0 = 0;
  v1 = dword_1ECD8F748;
  switch(dword_1ECD8F748)
  {
    case 0:
    case 259:
      if (qword_1EE1720C8 != -1)
        dispatch_once(&qword_1EE1720C8, &unk_1E2991F10);
      v13 = qword_1EE1720D0;
      if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67174657;
        LODWORD(v19) = v1;
        _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_ERROR, "Unsupported HW type %{private}d; file a radar to CoreMotion Factory | 1.0",
          buf,
          8u);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_11;
      bzero(buf, 0x65CuLL);
      if (qword_1EE1720C8 != -1)
        goto LABEL_85;
      goto LABEL_83;
    case 2:
    case 3:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 37:
    case 38:
    case 40:
    case 41:
    case 43:
    case 52:
    case 81:
    case 83:
    case 85:
    case 87:
      if (qword_1EE1720C8 != -1)
        dispatch_once(&qword_1EE1720C8, &unk_1E2991F10);
      v2 = qword_1EE1720D0;
      if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v19) = v1;
        _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_FAULT, "Old hardware,%d is not supported", buf, 8u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE1720C8 != -1)
LABEL_85:
          dispatch_once(&qword_1EE1720C8, &unk_1E2991F10);
LABEL_83:
        v17 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "CLPlatformInfo::MotionCapabilities CLPlatformInfo::queryMotionCaps()", "CoreLocation: %s\n", v17);
        if (v17 != (char *)buf)
          free(v17);
      }
LABEL_11:
      v0 = 0;
      break;
    case 24:
    case 25:
    case 27:
    case 28:
      v8 = 2940500222;
      goto LABEL_54;
    case 26:
      v14 = 2806282494;
      goto LABEL_70;
    case 29:
      v12 = 24577;
      goto LABEL_65;
    case 30:
    case 31:
    case 32:
      v12 = 30721;
LABEL_65:
      v0 = v12 | 0x21400000u;
      break;
    case 33:
    case 209:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 238:
    case 239:
      v3 = 762;
      goto LABEL_17;
    case 34:
    case 154:
    case 155:
    case 156:
    case 157:
    case 188:
    case 189:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 210:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 240:
    case 241:
      v3 = 6906;
LABEL_17:
      v0 = v3 | 0x31460000u;
      break;
    case 35:
    case 36:
    case 64:
    case 65:
      v9 = 30922;
      goto LABEL_30;
    case 39:
    case 42:
      v0 = 0x28011654E00ELL;
      break;
    case 44:
      v9 = 24826;
LABEL_30:
      v0 = v9 | 0x21440000u;
      break;
    case 45:
      v0 = 558135546;
      break;
    case 46:
    case 62:
    case 161:
      v5 = 24826;
      goto LABEL_50;
    case 47:
    case 63:
      v5 = 30970;
      goto LABEL_50;
    case 48:
    case 186:
      v0 = 826598138;
      break;
    case 49:
    case 134:
    case 135:
    case 136:
    case 137:
    case 187:
    case 190:
    case 202:
      v5 = -1286;
      goto LABEL_50;
    case 50:
    case 51:
      v6 = 0x28015654E00ELL;
      goto LABEL_71;
    case 54:
    case 55:
      v8 = 3211147518;
LABEL_54:
      v10 = v8 & 0xFFFF0000FFFFFFFFLL | 0x2900000000;
      goto LABEL_55;
    case 56:
    case 57:
    case 58:
    case 59:
      v10 = 0x8029BF4638FELL;
LABEL_55:
      v0 = v10 & 0xFFFFFFFFFFFFLL | 0x101000000000000;
      break;
    case 60:
    case 61:
    case 196:
      v0 = 0x200000000;
      break;
    case 66:
    case 67:
    case 74:
    case 75:
      v6 = 0x24355E54E00ELL;
      goto LABEL_71;
    case 68:
    case 69:
    case 71:
    case 72:
      v11 = 0x1218029BF461AFELL;
      goto LABEL_62;
    case 70:
    case 73:
      v7 = 0xC029BF4618FELL;
      goto LABEL_57;
    case 76:
    case 146:
    case 147:
      v5 = -7942;
LABEL_50:
      v0 = v5 | 0x31440000u;
      break;
    case 77:
    case 145:
      v11 = 826604282;
      goto LABEL_62;
    case 78:
    case 79:
    case 80:
    case 142:
      v7 = 0x8029BF461AFELL;
LABEL_57:
      v0 = v7 & 0xFFFFFFFFFFFFLL | 0x121000000000000;
      break;
    case 82:
    case 84:
      v6 = 0x27B55E54E00ELL;
      goto LABEL_71;
    case 86:
    case 88:
      v0 = 0x124B55E54E00ELL;
      break;
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
      v6 = 0x24B55E54E01ELL;
      goto LABEL_71;
    case 95:
    case 96:
    case 97:
    case 98:
      v0 = 0x30924B55E54E01ELL;
      break;
    case 99:
    case 100:
    case 101:
    case 102:
      v0 = 0x70934B55E54E01ELL;
      break;
    case 103:
    case 104:
    case 105:
    case 106:
      v0 = 0x70934B55E55001ELL;
      break;
    case 107:
    case 108:
    case 109:
    case 110:
      v4 = 0x24B55E54E01ELL;
      goto LABEL_14;
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 258:
      v4 = 0x34B55E55001ELL;
LABEL_14:
      v0 = v4 & 0xFFFFFFFFFFFFLL | 0x70B000000000000;
      break;
    case 138:
    case 139:
    case 140:
    case 141:
    case 143:
    case 217:
      v0 = 0x1258029BF461AFELL;
      break;
    case 144:
    case 237:
      v11 = 826678010;
LABEL_62:
      v0 = v11 - 512;
      break;
    case 148:
      v0 = 0x9B746204ELL;
      break;
    case 149:
      v14 = 373686414;
LABEL_70:
      v6 = v14 & 0xFFFF0000FFFFFFFFLL | 0x900000000;
      goto LABEL_71;
    case 150:
    case 151:
    case 152:
    case 153:
      v6 = 0x20355E54E00ELL;
LABEL_71:
      v0 = v6 & 0xFFFFFFFFFFFFLL | 0x1000000000000;
      break;
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 176:
    case 177:
      v0 = 0x13D8029BF461AFELL;
      break;
    case 175:
    case 218:
    case 219:
    case 220:
    case 221:
      v0 = 0x13B8029BF461AFELL;
      break;
    case 178:
    case 179:
    case 180:
    case 181:
      v0 = 0x13B8029BF461BFELL;
      break;
    case 182:
    case 183:
    case 184:
    case 222:
    case 223:
      v0 = 0x13B8029BF461FFELL;
      break;
    case 191:
    case 192:
    case 193:
    case 194:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
      v0 = 277217290;
      break;
    default:
      break;
  }
  if (qword_1ECD8E738 != -1)
    dispatch_once(&qword_1ECD8E738, &unk_1E2991F50);
  v15 = qword_1ECD8E730;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E730, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v19 = "OverrideMotionCapEclipseService";
    _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_INFO, "motion default ignored,'%{public}s'.", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E738 != -1)
      dispatch_once(&qword_1ECD8E738, &unk_1E2991F50);
    v16 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "CLMotionDefaultsWrite<BOOL>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = BOOL]", "CoreLocation: %s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
  }
  qword_1ECD8F7F8 = v0;
}

void sub_18F5B6EE0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  _DWORD v15[2];
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend_delegate(*(void **)(a1 + 32), a2, a3, a4);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v8 = (void *)objc_msgSend_delegate(*(void **)(a1 + 32), v5, v6, v7);
    v12 = objc_msgSend_locationManagerRoutine(*(void **)(a1 + 32), v9, v10, v11);
    objc_msgSend_locationManager_didUpdateLocations_(v8, v13, v12, *(_QWORD *)(a1 + 40));
  }
  else
  {
    if (qword_1EE172078 != -1)
      dispatch_once(&qword_1EE172078, &unk_1E2990170);
    v14 = qword_1EE172080;
    if (os_log_type_enabled((os_log_t)qword_1EE172080, OS_LOG_TYPE_DEBUG))
    {
      v15[0] = 68289026;
      v15[1] = 0;
      v16 = 2082;
      v17 = "";
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#location #routine sendLocations to RT, not respondsToSelector @selector(locationManager:didUpdateLocations:)\"}", (uint8_t *)v15, 0x12u);
    }
  }
}

void sub_18F5B70CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F5B7270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5B7288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t PrecisionPermission_forBundleID_orBundlePath;
  os_activity_scope_state_s v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = _os_activity_create(&dword_18F5B3000, "CL: CLInternalGetPrecisionPermission", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v15.opaque[0] = 0;
  v15.opaque[1] = 0;
  os_activity_scope_enter(v6, &v15);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v7 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalGetPrecisionPermission\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v11 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v8, v9, v10);
  PrecisionPermission_forBundleID_orBundlePath = objc_msgSend_getPrecisionPermission_forBundleID_orBundlePath_(v11, v12, a3, a1, a2);
  os_activity_scope_leave(&v15);
  return PrecisionPermission_forBundleID_orBundlePath;
}

void sub_18F5B73E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5B73F4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;
  const void *v7;
  const void *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v2 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v24 = 2050;
    v25 = (const char *)a1;
    _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"client about to be destroyed\", \"client\":\"%{public}p\"}", buf, 0x1Cu);
  }
  if (!*(_BYTE *)(a1 + 225))
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v14 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2082;
      v25 = "assert";
      v26 = 2081;
      v27 = "client->fInvalidated";
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLClient needs to be invalidated first before destroying.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    }
    v15 = qword_1ECD8E750;
    if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
    {
      *(_DWORD *)buf = 68289539;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2082;
      v25 = "assert";
      v26 = 2081;
      v27 = "client->fInvalidated";
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLClient needs to be invalidated first before destroying.", "{\"msg%{public}.0s\":\"CLClient needs to be invalidated first before destroying.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    }
    v16 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2082;
      v25 = "assert";
      v26 = 2081;
      v27 = "client->fInvalidated";
      _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLClient needs to be invalidated first before destroying.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
LABEL_46:
    abort_report_np();
    __break(1u);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 160));

  *(_QWORD *)(a1 + 232) = 0;
  v3 = *(void **)(a1 + 384);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 384) = 0;
  }
  v4 = *(const void **)(a1 + 360);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 360) = 0;
  }
  v5 = *(const void **)(a1 + 368);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 368) = 0;
  }
  v6 = *(NSObject **)(a1 + 312);
  if (v6)
  {
    dispatch_release(v6);
    *(_QWORD *)(a1 + 312) = 0;
  }
  if (*(_QWORD *)(a1 + 264))
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v17 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2082;
      v25 = "assert";
      v26 = 2081;
      v27 = "!client->fContext.info";
      _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"client->fContext should be NULL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    }
    v18 = qword_1ECD8E750;
    if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
    {
      *(_DWORD *)buf = 68289539;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2082;
      v25 = "assert";
      v26 = 2081;
      v27 = "!client->fContext.info";
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "client->fContext should be NULL", "{\"msg%{public}.0s\":\"client->fContext should be NULL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    }
    v19 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      v24 = 2082;
      v25 = "assert";
      v26 = 2081;
      v27 = "!client->fContext.info";
      _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"client->fContext should be NULL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_46;
  }
  v7 = *(const void **)(a1 + 344);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 344) = 0;
  }
  v8 = *(const void **)(a1 + 352);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 352) = 0;
  }
  v9 = *(uint64_t **)(a1 + 328);
  if (v9)
  {
    if (v9[2])
    {
      v11 = *v9;
      v10 = (uint64_t *)v9[1];
      v12 = *v10;
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(*v9 + 8);
      **(_QWORD **)(v11 + 8) = v12;
      v9[2] = 0;
      if (v10 != v9)
      {
        do
        {
          v13 = (uint64_t *)v10[1];
          operator delete(v10);
          v10 = v13;
        }
        while (v13 != v9);
      }
    }
    MEMORY[0x194002D30](v9, 0x1020C4062D53EE8);
  }
}

void sub_18F5B7BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5B8184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5B86C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  void *v11;

  objc_sync_exit(v11);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5B889C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5B8B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5B8CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5B8F18(uint64_t result)
{
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = *(void **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 16);
  if (v1 == *(void **)(result + 40))
  {
    v2 = result;

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 16) = 0;
    v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v4 = *(void **)(v2 + 48);
    v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v19, (uint64_t)v23, 16);
    if (v6)
    {
      v10 = v6;
      v11 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v20 != v11)
            objc_enumerationMutation(v4);
          v13 = objc_msgSend_placemarkWithGEOMapItem_(CLPlacemark, v7, *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * i), v9);
          if (v13)
            objc_msgSend_addObject_(v3, v7, v13, v9);
        }
        v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v7, (uint64_t)&v19, (uint64_t)v23, 16);
      }
      while (v10);
    }
    v17 = objc_msgSend_count(v3, v7, v8, v9);
    v18 = *(void **)(v2 + 32);
    if (v17)
      return objc_msgSend__notifyResult_(v18, v14, (uint64_t)v3, v16);
    else
      return objc_msgSend__notifyNoResult(v18, v14, v15, v16);
  }
  return result;
}

void sub_18F5B9114(int a1, NSObject **cf)
{
  NSObject *v3;
  _QWORD block[5];

  CFRetain(cf);
  v3 = cf[39];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F5BC418;
  block[3] = &unk_1E29910D0;
  block[4] = cf;
  dispatch_async(v3, block);
}

void sub_18F5B917C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  v2 = sub_18F5B91EC();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(NSObject **)(v3 + 312);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18F5BADA4;
  v5[3] = &unk_1E2990D90;
  v5[4] = v3;
  v6 = v2;
  dispatch_async(v4, v5);
}

uint64_t sub_18F5B91EC()
{
  Class v0;
  const char *v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;

  v0 = NSClassFromString(CFSTR("UIApplication"));
  v3 = (void *)objc_msgSend_performSelector_(v0, v1, (uint64_t)sel_sharedApplication, v2);
  if (v3)
    return objc_msgSend_performSelector_(v3, v4, (uint64_t)sel_applicationState, v5);
  else
    return 3;
}

void sub_18F5B9990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5B99A8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v3 = MEMORY[0x194002B2C]();
    result = MEMORY[0x194002D30](v3, 0xB0C40BC2CC919);
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_18F5B99E8()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;
  int v3;

  v0 = (const __CFBoolean *)MGCopyAnswer();
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1))
      v3 = 4;
    else
      v3 = sub_18F5C0B48();
    dword_1ECD8F748 = v3;
    CFRelease(v1);
  }
  else
  {
    dword_1ECD8F748 = sub_18F5C0B48();
  }
}

long double sub_18F5B9A68(double a1, double a2, double a3, double a4)
{
  double v4;
  long double result;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  long double v14;
  long double v15;
  long double v16;
  double v17;
  double v18;
  __double2 v19;
  __double2 v20;
  unsigned int v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v38;
  double v39;
  double v40;
  BOOL v41;
  double v42;
  double v43;
  double v44;

  v4 = a3;
  result = 0.0;
  if (a3 > 90.0 || a1 < -90.0 || a1 > 90.0 || a3 < -90.0)
    return result;
  v7 = a4 + 360.0;
  if (a4 >= 0.0)
    v7 = a4;
  v8 = a2 + 360.0;
  if (a2 >= 0.0)
    v8 = a2;
  v9 = v8 - v7;
  if (v9 <= 180.0)
  {
    if (v9 < -180.0)
      v9 = v9 + 360.0;
  }
  else
  {
    v9 = v9 + -360.0;
  }
  if (fabs(a1 + v4) >= 0.0001)
  {
    v42 = a2;
    v43 = a4;
LABEL_18:
    v11 = v9;
    goto LABEL_19;
  }
  v10 = fabs(a1);
  if (v10 < 0.0001 && 180.0 - fabs(v9) < 0.0001)
    return 20037508.3;
  v41 = fabs(v10 + -90.0) < 0.0001;
  if (v41)
    v11 = 0.0;
  else
    v11 = v9;
  v42 = a2;
  v43 = a4;
  if (!v41 && 180.0 - fabs(v9) >= 0.0001)
    goto LABEL_18;
  if (a1 <= v4)
    v4 = v4 + -0.0001;
  else
    a1 = a1 + -0.0001;
LABEL_19:
  v12 = v11 * 0.0174532925;
  v44 = a1;
  v13 = tan(a1 * 0.0174532925);
  v14 = tan(v4 * 0.0174532925);
  v15 = v13 * 0.996647189;
  v16 = v14 * 0.996647189;
  v17 = atan(v15);
  v18 = atan(v16);
  v19 = __sincos_stret(v17);
  v20 = __sincos_stret(v18);
  v21 = 0;
  v22 = v19.__cosval * v20.__cosval;
  v23 = v12;
  while (1)
  {
    v24 = __sincos_stret(v23);
    v25 = sqrt((-(v19.__sinval * v20.__cosval) * v24.__cosval + v19.__cosval * v20.__sinval)* (-(v19.__sinval * v20.__cosval) * v24.__cosval + v19.__cosval * v20.__sinval)+ v20.__cosval * v24.__sinval * (v20.__cosval * v24.__sinval));
    if (v25 < 2.22044605e-15)
      break;
    v26 = v22 * v24.__cosval + v19.__sinval * v20.__sinval;
    v27 = fabs(v26);
    if (fabs(v25) > 1.0 || v27 > 1.0)
      break;
    v29 = atan2(v25, v26);
    v30 = v22 * v24.__sinval / v25;
    if (v30 > 1.0)
      break;
    v31 = 1.0 - v30 * v30;
    if (fabs(v31) >= 2.22044605e-15)
    {
      v33 = v26 - (v19.__sinval + v19.__sinval) * v20.__sinval / v31;
      v32 = v31 * 0.000209550667 * ((v31 * -3.0 + 4.0) * 0.00335281066 + 4.0);
    }
    else
    {
      v32 = 0.0;
      v33 = -1.0;
    }
    v34 = v30 * ((1.0 - v32) * 0.00335281066);
    v35 = v33 * v33 * 2.0 + -1.0;
    v36 = v12 + v34 * (v29 + v25 * v32 * (v33 + v26 * v32 * v35));
    if (vabdd_f64(v36, v23) > 0.000000001)
    {
      v23 = v36;
      if (v21++ < 0x31)
        continue;
    }
    v38 = v31 * 2.72331606e11 / 4.04083e13;
    v39 = v38 * 0.0000610351562 * (v38 * (v38 * (v38 * -175.0 + 320.0) + -768.0) + 4096.0) + 1.0;
    v40 = v38 * 0.0009765625 * (v38 * (v38 * (v38 * -47.0 + 74.0) + -128.0) + 256.0);
    return v39
         * 6356752.31
         * (v29 - v25 * v40 * (v33 + v40 * 0.25 * ((v33 * v33 * 4.0 + -3.0) * (v40 / 6.0 * v33 * 3.0) + v26 * v35)));
  }
  return sub_18F71A8DC(v44, v42, v4, v43);
}

void sub_18F5B9EAC()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *global_queue;

  v0 = operator new();
  sub_18F5BB51C((char *)v0);
  *(_QWORD *)v0 = &off_1E298F7A8;
  *(_DWORD *)(v0 + 152) = 0;
  *(_WORD *)(v0 + 156) = 0;
  *(_OWORD *)(v0 + 160) = xmmword_18F7753E0;
  *(_DWORD *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  *(_QWORD *)(v0 + 192) = 0;
  *(_QWORD *)(v0 + 200) = *MEMORY[0x1E0C80C10];
  *(_QWORD *)(v0 + 216) = 0;
  *(_QWORD *)(v0 + 224) = 0;
  MEMORY[0x194002BEC](v0 + 104, ".log");
  v1 = dispatch_queue_create("com.apple.locationd.log.compression", 0);
  *(_QWORD *)(v0 + 208) = v1;
  global_queue = dispatch_get_global_queue(-32768, 0);
  dispatch_set_target_queue(v1, global_queue);
  qword_1ECD8F9D8 = v0;
}

void sub_18F5B9F70(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  sub_18F5D6004(v3);
  sub_18F75B758(v1);
  MEMORY[0x194002D30](v1, 0x10B3C4059D1D8F6);
  _Unwind_Resume(a1);
}

void sub_18F5BA138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5BA160(uint64_t a1, const void *a2, const void *a3)
{
  _BYTE *v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  char v13;
  _QWORD v14[2];

  v6 = *(_BYTE **)(a1 + 384);
  if (v6)
  {
    v7 = *v6;
    if (*v6)
    {
      v8 = 0;
      v9 = 0;
      v10 = v6 + 1;
      do
      {
        v9 ^= v7 << (v8 & 0x18);
        v11 = *v10++;
        v7 = v11;
        v8 += 8;
      }
      while (v11);
    }
  }
  entr_act_modify();
  sub_18F5C9250(v14);
  v13 = 1;
  sub_18F5C8F74((uint64_t)v14, "kCLConnectionMessageSubscribeKey", &v13);
  if (a2)
    sub_18F5C96E8((uint64_t)v14, "kCLConnectionMessageSLCDistanceKey", a2);
  if (a3)
    sub_18F5C941C((uint64_t)v14, "kCLConnectionMessageSLCPowerBudgetKey", a3);
  sub_18F5C7BB4(a1, "kCLConnectionMessageSignificantLocationChange", (uint64_t)v14);
  return sub_18F5C6360(v14);
}

void sub_18F5BA258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_18F5BA5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5BAA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5BABF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5BAC0C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  NSLog(CFSTR("WARNING Supported CoreLocation API call rate exceeded, behavior undefined."));
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v2 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v6 = 68289282;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = v3;
    _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Supported CoreLocation API call rate exceeded, behavior undefined.\", \"count\":%{public}lu}", (uint8_t *)&v6, 0x1Cu);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  }
  v4 = qword_1ECD8E750;
  if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = 68289282;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = v5;
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Supported CoreLocation API call rate exceeded, behavior undefined.", "{\"msg%{public}.0s\":\"Supported CoreLocation API call rate exceeded, behavior undefined.\", \"count\":%{public}lu}", (uint8_t *)&v6, 0x1Cu);
  }
}

uint64_t sub_18F5BADA4(uint64_t a1)
{
  pthread_mutex_t *v2;
  _BYTE *v3;

  v2 = *(pthread_mutex_t **)(*(_QWORD *)(a1 + 32) + 240);
  pthread_mutex_lock(v2);
  v3 = *(_BYTE **)(a1 + 32);
  if (!*(_DWORD *)(a1 + 40))
    v3[18] = 1;
  CFRelease(v3);
  return pthread_mutex_unlock(v2);
}

void sub_18F5BAE08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F5BAE1C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  CLConnectionMessage *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const __CFDictionary *Dictionary;
  CFTypeID v10;
  unint64_t *v11;
  unint64_t v12;
  pthread_mutex_t *v13;
  _QWORD v14[2];
  CFTypeRef v15;
  CFRange v16;

  v13 = (pthread_mutex_t *)a1[5];
  pthread_mutex_lock(v13);
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    v4 = a1[6];
    if (!_CFIsDeallocating())
    {
      CFRetain((CFTypeRef)v4);
      v5 = *(CLConnectionMessage **)a2;
      v6 = *(std::__shared_weak_count **)(a2 + 8);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      if (*(_BYTE *)(v4 + 24))
      {
        v15 = 0;
        Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(v5);
        sub_18F5C639C(v14, Dictionary);
        sub_18F5C70F0((uint64_t)v14, "kCLConnectionMessageHeadingDataKey", &v15, 0xFFFFFFFFLL);
        if (v15)
        {
          v10 = CFGetTypeID(v15);
          if (v10 == CFDataGetTypeID())
          {
            v16.location = 0;
            v16.length = 88;
            CFDataGetBytes((CFDataRef)v15, v16, (UInt8 *)(v4 + 56));
            if (*(_BYTE *)(v4 + 25))
            {
              if (*(double *)(v4 + 96) < 0.0)
              {
                *(_BYTE *)(v4 + 25) = 0;
                sub_18F5C6578(v4, 13, 0);
                *(_QWORD *)(v4 + 144) = *(_QWORD *)(v4 + 104);
              }
            }
            else if (*(_DWORD *)(v4 + 136) >= *(_DWORD *)(v4 + 152)
                   || *(double *)(v4 + 104) - *(double *)(v4 + 144) > 15.0 && *(double *)(v4 + 96) >= 0.0)
            {
              *(_BYTE *)(v4 + 25) = 1;
              CLClientShowHeadingCalibration(v4, 0);
            }
            sub_18F5C6578(v4, 12, 0);
          }
        }
        sub_18F5C6360(v14);
      }
      if (v6)
      {
        v11 = (unint64_t *)&v6->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      CFRelease((CFTypeRef)v4);
    }
  }
  pthread_mutex_unlock(v13);
}

void sub_18F5BB008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_18F5D6004((uint64_t)&a9);
  sub_18F5CE240((uint64_t)&a11);
  _Unwind_Resume(a1);
}

char *sub_18F5BB51C(char *a1)
{
  __CFNotificationCenter *LocalCenter;

  *(_QWORD *)a1 = off_1E298F7D8;
  *((_WORD *)a1 + 4) = 0;
  *(_QWORD *)(a1 + 12) = 0xFFFFFFFF00000000;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  sub_18F5BB62C((uint64_t)(a1 + 40), "CLLogBase", 1, 0);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, a1, (CFNotificationCallback)sub_18F75B748, CFSTR("com.apple.locationd.DumpDiagnostics"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  return a1;
}

void sub_18F5BB5C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18F5D6004(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5BB62C(uint64_t a1, const char *a2, int a3, char a4)
{
  uint64_t v8;
  char *v9;
  int v10;
  pthread_mutexattr_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E298E3D0;
  v8 = operator new();
  *(_QWORD *)(a1 + 8) = v8;
  *(_DWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_BYTE *)(v8 + 88) = a4;
  *(_QWORD *)(v8 + 96) = 0;
  if (a2)
    v9 = strdup(a2);
  else
    v9 = 0;
  *(_QWORD *)(v8 + 104) = v9;
  *(_QWORD *)(v8 + 64) = 0;
  if ((byte_1ECD8F9C0 & 1) == 0)
  {
    mach_timebase_info((mach_timebase_info_t)&dword_1ECD8F9B8);
    qword_1ECD8F9C8 = 1000000000 * (unint64_t)*(unsigned int *)algn_1ECD8F9BC / dword_1ECD8F9B8;
    qword_1ECD8F9D0 = qword_1ECD8F9C8;
    byte_1ECD8F9C0 = 1;
  }
  pthread_mutexattr_init(&v12);
  if (a3)
    v10 = 2;
  else
    v10 = 0;
  pthread_mutexattr_settype(&v12, v10);
  pthread_mutex_init(*(pthread_mutex_t **)(a1 + 8), &v12);
  pthread_mutexattr_destroy(&v12);
  return a1;
}

void sub_18F5BB770(_QWORD *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  char *v19;

  v2 = (_QWORD *)operator new();
  v3 = (char *)a1[7];
  v4 = a1[5];
  v18 = a1[6];
  v19 = v3;
  *v2 = v4;
  v5 = operator new();
  sub_18F5D5990(__p, "com.apple.locationd.registration");
  MEMORY[0x194002B20](v5, __p, *v2);
  if (v17 < 0)
    operator delete(__p[0]);
  v2[1] = v5;
  dispatch_retain((dispatch_object_t)*v2);
  CLConnectionClient::start((CLConnectionClient *)v2[1]);
  sub_18F5F3D54(&v19, &v18, &v14);
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  CLConnectionClient::sendMessage();
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)(a1[4] + 8) = v2;
}

void sub_18F5BB8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  sub_18F5D6004((uint64_t)&a10);
  sub_18F5D6004((uint64_t)&a12);
  MEMORY[0x194002D30](v19, 0xA0C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5BC418(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  pthread_mutex_t *v3;
  _BYTE *v4;
  char *v5;
  uint8_t buf[8];
  pthread_mutex_t *v7;
  __int16 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*(_QWORD *)(result + 32) + 225))
  {
    v1 = result;
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v2 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_INFO, "received client did become active notification", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLClientHandleDidBecomeActiveNotification(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
    v3 = *(pthread_mutex_t **)(*(_QWORD *)(v1 + 32) + 240);
    v7 = v3;
    pthread_mutex_lock(v3);
    v8 = 257;
    v4 = *(_BYTE **)(v1 + 32);
    v4[18] = 1;
    if (v4[24])
    {
      if (!v4[25])
      {
        sub_18F5C6578((uint64_t)v4, 13, 0);
        v4 = *(_BYTE **)(v1 + 32);
      }
    }
    CFRelease(v4);
    return pthread_mutex_unlock(v3);
  }
  return result;
}

void sub_18F5BC60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F5BC7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5BC964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5BCB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void CLClientGetDistanceHighPrecision(_OWORD *a1, _OWORD *a2)
{
  unsigned __int8 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD v14[8];
  _OWORD v15[2];
  _OWORD v16[8];
  _OWORD v17[2];

  v2 = atomic_load((unsigned __int8 *)&qword_1ECD8F988);
  if ((v2 & 1) == 0)
  {
    v12 = a2;
    v13 = a1;
    v11 = __cxa_guard_acquire(&qword_1ECD8F988);
    a2 = v12;
    a1 = v13;
    if (v11)
    {
      qword_1ECD8F9A0 = 0;
      unk_1ECD8F9A8 = 0;
      xmmword_1ECD8F990 = xmmword_18F771F40;
      qword_1ECD8F9B0 = 0x3FF0000000000000;
      __cxa_guard_release(&qword_1ECD8F988);
      a2 = v12;
      a1 = v13;
    }
  }
  v3 = a1[7];
  v16[6] = a1[6];
  v16[7] = v3;
  v17[0] = a1[8];
  *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)((char *)a1 + 140);
  v4 = a1[3];
  v16[2] = a1[2];
  v16[3] = v4;
  v5 = a1[5];
  v16[4] = a1[4];
  v16[5] = v5;
  v6 = a1[1];
  v16[0] = *a1;
  v16[1] = v6;
  v7 = a2[7];
  v14[6] = a2[6];
  v14[7] = v7;
  v15[0] = a2[8];
  *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)((char *)a2 + 140);
  v8 = a2[3];
  v14[2] = a2[2];
  v14[3] = v8;
  v9 = a2[5];
  v14[4] = a2[4];
  v14[5] = v9;
  v10 = a2[1];
  v14[0] = *a2;
  v14[1] = v10;
  sub_18F5BCC88((double *)&xmmword_1ECD8F990, (uint64_t)v16, (uint64_t)v14);
}

void sub_18F5BCC88(double *a1, uint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint8_t buf[4];
  unint64_t v18;
  __int16 v19;
  double v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = *(double *)(a2 + 36);
  v7 = *(double *)(a3 + 36);
  if (v6 <= 0.0 || v7 <= 0.0)
  {
    if (v6 <= 0.0)
    {
      v9 = 0.0;
      if (v7 <= 0.0)
        goto LABEL_26;
      v8 = *(double *)(a3 + 28);
    }
    else
    {
      v8 = *(double *)(a2 + 28);
    }
  }
  else
  {
    v8 = (*(double *)(a2 + 28) + *(double *)(a3 + 28)) * 0.5;
  }
  v9 = -450.0;
  if (v8 >= -450.0)
  {
    v9 = 1000000.0;
    if (v8 <= 1000000.0)
    {
      v9 = v8;
      goto LABEL_26;
    }
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990BB0);
    v11 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v18 = 0x412E848000000000;
      v19 = 2048;
      v20 = v8;
      _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_DEFAULT, "#Warning refAlt > %.1lf,refAlt,%.1lf,using the max", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 == -1)
        goto LABEL_23;
      goto LABEL_29;
    }
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990BB0);
    v10 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v18 = 0xC07C200000000000;
      v19 = 2048;
      v20 = v8;
      _os_log_impl(&dword_18F5B3000, v10, OS_LOG_TYPE_DEFAULT, "#Warning refAlt < %.1lf,refAlt,%.1lf,using the min", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 == -1)
      {
LABEL_23:
        v12 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "double CLDistanceCalc::calculateDistance(const CLDaemonLocation &, const CLDaemonLocation &)", "CoreLocation: %s\n", v12);
        if (v12 != (char *)buf)
          free(v12);
        goto LABEL_26;
      }
LABEL_29:
      dispatch_once(&qword_1ECD8E728, &unk_1E2990BB0);
      goto LABEL_23;
    }
  }
LABEL_26:
  v13 = *(double *)(a2 + 4);
  v14 = *(double *)(a2 + 12);
  v15 = *(double *)(a3 + 4);
  v16 = *(double *)(a3 + 12);
  if (sub_18F5BD1CC(v13, v14, v15, v16))
    sub_18F5B9A68(v13, v14, v15, v16);
  else
    sub_18F5BD064(a1, v13, v14, v15, v16, v9);
}

long double sub_18F5BD064(double *a1, double a2, double a3, double a4, double a5, double a6)
{
  double v13;
  double v14;
  double v15;

  v14 = 0.0;
  v15 = 0.0;
  if (sub_18F5BD1CC(a2, a3, a4, a5) || !sub_18F5BD37C(a1, &v15, &v14, &v13, a2, a3, a6, a4, a5, a6))
    return sub_18F5B9A68(a2, a3, a4, a5);
  else
    return sqrt(v14 * v14 + v15 * v15);
}

long double sub_18F5BD12C(double a1, double a2, double a3, double a4)
{
  double v9;
  double v10;
  double v11;

  if (sub_18F5BD1CC(a1, a2, a3, a4))
    return sub_18F5B9A68(a1, a2, a3, a4);
  v10 = 0.0;
  v11 = 0.0;
  sub_18F5BD250(&v11, &v10, &v9, a1, a2, 0.0, a3, a4, 0.0);
  return sqrt(v10 * v10 + v11 * v11);
}

BOOL sub_18F5BD1CC(double a1, double a2, double a3, double a4)
{
  double v4;
  unsigned int v5;
  int v6;

  if (a2 < 0.0)
    a2 = a2 + 360.0;
  if (a4 < 0.0)
    a4 = a4 + 360.0;
  v4 = a4 - a2;
  if (v4 <= 180.0)
  {
    if (v4 < -180.0)
      v4 = v4 + 360.0;
  }
  else
  {
    v4 = v4 + -360.0;
  }
  v5 = (int)v4;
  if ((int)v4 < 0)
    v5 = -v5;
  v6 = (int)a3 - (int)a1;
  if (v6 < 0)
    v6 = (int)a1 - (int)a3;
  return v6 > 2 || v5 > 2;
}

double sub_18F5BD250(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __double2 v19;
  double v20;
  double result;

  v14 = 360.0;
  if (a5 < 0.0)
    a5 = a5 + 360.0;
  if (a8 < 0.0)
    a8 = a8 + 360.0;
  v15 = a8 - a5;
  if (v15 > 180.0)
  {
    v14 = -360.0;
LABEL_8:
    v15 = v15 + v14;
    goto LABEL_9;
  }
  if (v15 < -180.0)
    goto LABEL_8;
LABEL_9:
  v16 = (a7 - a4) * 0.0174532925;
  v17 = (a6 + a9) * 0.5;
  v18 = v15 * 0.0174532925;
  v19 = __sincos_stret((a4 + a7) * 0.0174532925 * 0.5);
  v20 = sqrt(v19.__sinval * -0.00669437999 * v19.__sinval + 1.0);
  *a1 = v16 * (v17 + 6335439.33 / (v20 * (v20 * v20)));
  *a2 = v19.__cosval * (v17 + 6378137.0 / v20) * v18;
  result = a9 - a6;
  *a3 = a9 - a6;
  return result;
}

BOOL sub_18F5BD37C(double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10;
  double v21;
  double v22;
  __double2 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;

  v10 = vabdd_f64(a5, a8);
  if (v10 <= 2.0)
  {
    v21 = a1[3];
    if (v21 == 0.0 || vabdd_f64(a5, v21) > 0.005)
    {
      v22 = (a5 + a8) * 0.5;
      a1[2] = v22 * 0.0174532925;
      a1[3] = v22;
      v23 = __sincos_stret(v22 * 0.0174532925);
      v24 = v23.__sinval * -0.00669437999 * v23.__sinval + 1.0;
      v25 = sqrt(v24);
      *a1 = 6335439.33 / (v24 * v25);
      a1[1] = 6378137.0 / v25;
      a1[4] = v23.__cosval;
    }
    v26 = 360.0;
    v27 = a6 + 360.0;
    if (a6 >= 0.0)
      v27 = a6;
    v28 = a9 + 360.0;
    if (a9 >= 0.0)
      v28 = a9;
    v29 = v28 - v27;
    if (v29 <= 180.0)
    {
      if (v29 >= -180.0)
      {
LABEL_13:
        *a2 = (a8 - a5) * 0.0174532925 * (*a1 + a7);
        *a3 = v29 * 0.0174532925 * ((a1[1] + a7) * a1[4]);
        *a4 = a10 - a7;
        return v10 <= 2.0;
      }
    }
    else
    {
      v26 = -360.0;
    }
    v29 = v29 + v26;
    goto LABEL_13;
  }
  return v10 <= 2.0;
}

void sub_18F5BD6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void *sub_18F5BD6F8(_QWORD *a1)
{
  pthread_mutex_t *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  pthread_mutex_t *v9;
  uint64_t v10;
  void **v11;
  void **v12;
  id v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  uint64_t i;
  const char *v18;
  id v19;
  id v20;
  const char *v21;
  uint64_t v22;
  void **j;
  const char *v24;
  id v25;
  id v26;
  const char *v27;
  uint64_t v28;
  id v30;
  void ***v31;
  const __CFDictionary *v32;
  void **v33;
  void **v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[2];
  uint64_t v39;
  pthread_mutex_t *v40;
  uint64_t v41;

  if (!a1)
    return 0;
  v2 = (pthread_mutex_t *)a1[30];
  v40 = v2;
  pthread_mutex_lock(v2);
  LOWORD(v41) = 257;
  v4 = (const void *)a1[45];
  v3 = (const void *)a1[46];
  if (v4)
    CFRetain(v4);
  if (v3)
    CFRetain(v3);
  pthread_mutex_unlock(v2);
  v7 = (const __CFDictionary *)sub_18F5BE024((uint64_t)v4, (const char *)v3, v5, v6);
  if (v7)
  {
    v8 = v7;
    sub_18F5C639C(v38, v7);
    sub_18F5C9250(v37);
    sub_18F5C9250(v36);
    sub_18F5BDBA4((uint64_t)v38, "kCLConnectionMessageBeaconRegionKey", v37);
    sub_18F5BDBA4((uint64_t)v38, "kCLConnectionMessageCircularRegionKey", v36);
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    sub_18F5BDA20((uint64_t)v37, &v39);
    sub_18F5BDA20((uint64_t)v36, (uint64_t *)&v33);
    v10 = v39;
    v9 = v40;
    v12 = v33;
    v11 = v34;
    v13 = objc_alloc(MEMORY[0x1E0C99DE8]);
    v16 = (void *)objc_msgSend_initWithCapacity_(v13, v14, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - v10) >> 3) - 0x5555555555555555 * (v11 - v12), v15);
    for (i = v39; (pthread_mutex_t *)i != v40; i += 24)
    {
      sub_18F5C9250(&v31);
      v30 = 0;
      v18 = (const char *)i;
      if (*(char *)(i + 23) < 0)
        v18 = *(const char **)i;
      sub_18F5BDBA4((uint64_t)v37, v18, &v31);
      CLClientPopulateRegionFromInfo(&v30, v32);
      v19 = v30;
      v20 = v30;
      if (v19)
        objc_msgSend_addObject_(v16, v21, (uint64_t)v19, v22);

      sub_18F5C6360(&v31);
    }
    for (j = v33; j != v34; j += 3)
    {
      sub_18F5C9250(&v31);
      v30 = 0;
      v24 = (const char *)j;
      if (*((char *)j + 23) < 0)
        v24 = (const char *)*j;
      sub_18F5BDBA4((uint64_t)v36, v24, &v31);
      CLClientPopulateRegionFromInfo(&v30, v32);
      v25 = v30;
      v26 = v30;
      if (v25)
        objc_msgSend_addObject_(v16, v27, (uint64_t)v25, v28);

      sub_18F5C6360(&v31);
    }
    v31 = &v33;
    sub_18F5D605C((void ***)&v31);
    v33 = (void **)&v39;
    sub_18F5D605C(&v33);
    sub_18F5C6360(v36);
    sub_18F5C6360(v37);
    sub_18F5C6360(v38);
    CFRelease(v8);
    if (v4)
      goto LABEL_22;
  }
  else
  {
    v16 = 0;
    if (v4)
LABEL_22:
      CFRelease(v4);
  }
  if (v3)
    CFRelease(v3);
  return v16;
}

void sub_18F5BD990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_18F5C6360((uint64_t *)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5BDA20(uint64_t a1, uint64_t *a2)
{
  CFIndex Count;
  const void **v5;
  const void **v6;
  const __CFString **v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v13;

  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 8));
  v5 = (const void **)operator new[]();
  v6 = (const void **)operator new[]();
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 8), v5, v6);
  sub_18F5D609C(a2);
  if (Count >= 1)
  {
    v7 = (const __CFString **)v5;
    do
    {
      sub_18F661274(*v7, (uint64_t)__p);
      v8 = a2[1];
      if (v8 >= a2[2])
      {
        v10 = sub_18F5F66B0(a2, (__int128 *)__p);
      }
      else
      {
        if (SHIBYTE(v13) < 0)
        {
          sub_18F5C6990((_BYTE *)a2[1], __p[0], (unint64_t)__p[1]);
        }
        else
        {
          v9 = *(_OWORD *)__p;
          *(_QWORD *)(v8 + 16) = v13;
          *(_OWORD *)v8 = v9;
        }
        v10 = v8 + 24;
        a2[1] = v8 + 24;
      }
      a2[1] = v10;
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
      ++v7;
      --Count;
    }
    while (Count);
  }
  MEMORY[0x194002D18](v5, 0x60C8044C4A2DFLL);
  MEMORY[0x194002D18](v6, 0xC0C80B8AA526DLL);
  return 1;
}

void sub_18F5BDB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_18F5BDBA4(uint64_t a1, const char *a2, _QWORD *a3)
{
  CFStringRef v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F5BDC14(a1, (CFTypeID)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F5BDC14(uint64_t a1, CFTypeID a2, _QWORD *a3)
{
  const __CFDictionary *v6;
  CFTypeID v7;
  BOOL v8;
  _BOOL8 v9;
  const void *v10;
  uint64_t v11;
  NSObject *v12;
  CFTypeID v13;
  CFTypeID TypeID;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  CFTypeID v20;
  CFTypeID v21;
  char *v22;
  CFTypeRef cf;
  int v24;
  CFTypeID v25;
  __int16 v26;
  CFTypeID v27;
  uint8_t buf[4];
  CFTypeID v29;
  __int16 v30;
  CFTypeID v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, CFTypeID, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = (const __CFDictionary *)cf;
  v7 = CFGetTypeID(cf);
  v8 = v7 == CFDictionaryGetTypeID();
  v9 = v8;
  if (v8)
  {
    if (v6)
    {
      v10 = (const void *)a3[1];
      if (v10)
        CFRelease(v10);
      a3[1] = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v6);
      v11 = 106;
    }
    else
    {
      v11 = 109;
    }
    (*(void (**)(_QWORD *))(*a3 + 8 * v11))(a3);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v12 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v13 = CFGetTypeID(v6);
      TypeID = CFDictionaryGetTypeID();
      *(_DWORD *)buf = 134349312;
      v29 = v13;
      v30 = 2050;
      v31 = TypeID;
      _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v20 = CFGetTypeID(v6);
      v21 = CFDictionaryGetTypeID();
      v24 = 134349312;
      v25 = v20;
      v26 = 2050;
      v27 = v21;
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, CLNameValuePair &)", "CoreLocation: %s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v15 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v29 = v16;
      v30 = 2112;
      v31 = a2;
      _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v24 = 138412546;
      v25 = v17;
      v26 = 2112;
      v27 = a2;
      v18 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CLNameValuePair &, int) const", "CoreLocation: %s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
  }
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t sub_18F5BE024(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v6, sel_copyMonitoredRegionsForBundleIdentifier_orBundlePath_, a1, a2);
}

void sub_18F5BE1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5BE510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  void *v11;

  objc_sync_exit(v11);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

_DWORD *sub_18F5BE6C0(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = (void *)objc_opt_class();
  v8 = objc_msgSend_trackerStateSize(v4, v5, v6, v7);
  if (!v8)
    return 0;
  v9 = v8;
  v10 = malloc_type_calloc(1uLL, v8 + 200, 0x67C60616uLL);
  *v10 = 3;
  v10[1] = v9;
  __strlcpy_chk();
  v11 = (void *)objc_opt_class();
  objc_msgSend_trackerStateTypeName(v11, v12, v13, v14);
  __strlcpy_chk();
  object_getClassName(WeakRetained);
  __strlcpy_chk();
  if ((objc_msgSend_dumpState_withSize_hints_(WeakRetained, v15, (uint64_t)(v10 + 50), v9, a2) & 1) == 0)
  {
    free(v10);
    v10 = 0;
  }

  return v10;
}

id CLCopyGnssBandsInUse()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const __CFArray *v9;
  id v10;
  CFIndex Count;
  CFIndex v12;
  uint64_t v13;
  unint64_t v14;
  const __CFNumber *ValueAtIndex;
  const char *v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  __int128 v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  char *v27;
  int valuePtr;
  os_activity_scope_state_s state;
  int v31;
  int v32;
  uint8_t buf[1632];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLCopyGnssBandsInUse", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v0, &state);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyGnssBandsInUse\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v2, v3, v4);
  v9 = (const __CFArray *)objc_msgSend_copyGnssBandsInUse(v5, v6, v7, v8);
  v10 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (v9)
  {
    Count = CFArrayGetCount(v9);
    if (Count && (int)Count >= 1)
    {
      v12 = 0;
      v13 = Count;
      v14 = 0x1E0CB3000uLL;
      do
      {
        valuePtr = 0;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, v12);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        v17 = valuePtr & 0xF00;
        v18 = (v17 - 256) >> 8;
        v19 = v18 > 7;
        v20 = (1 << v18) & 0x8B;
        if (v19 || v20 == 0)
        {
          if ((valuePtr & 0xF00) != 0)
          {
            if (qword_1ECD8E758 != -1)
              dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
            v26 = qword_1ECD8E750;
            if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67240192;
              *(_DWORD *)&buf[4] = v17;
              _os_log_impl(&dword_18F5B3000, v26, OS_LOG_TYPE_ERROR, "Invalid bandUse,%{public}d", buf, 8u);
            }
            v14 = 0x1E0CB3000;
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1ECD8E758 != -1)
                dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
              v31 = 67240192;
              v32 = v17;
              v27 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "CFArrayRef CLCopyGnssBandsInUse(void)", "CoreLocation: %s\n", v27);
              if (v27 != (char *)buf)
                free(v27);
            }
          }
          goto LABEL_22;
        }
        memset(buf, 0, 32);
        *(_DWORD *)&buf[24] = valuePtr & 0xF00;
        switch(valuePtr)
        {
          case 4u:
            *(_DWORD *)buf = 4;
            v22 = xmmword_18F775850;
            break;
          case 2u:
            *(_DWORD *)buf = 2;
            v22 = xmmword_18F775840;
            break;
          case 1u:
            *(_DWORD *)buf = 1;
            v22 = xmmword_18F775860;
            break;
          default:
            memset(&buf[8], 0, 20);
            goto LABEL_21;
        }
        *(_OWORD *)&buf[8] = v22;
LABEL_21:
        v23 = objc_msgSend_valueWithBytes_objCType_(*(void **)(v14 + 2840), v16, (uint64_t)buf, (uint64_t)"{CLGnssBandInfo=iddi}");
        objc_msgSend_addObject_(v10, v24, v23, v25);
LABEL_22:
        ++v12;
      }
      while (v13 != v12);
    }
    CFRelease(v9);
  }
  os_activity_scope_leave(&state);
  return v10;
}

void sub_18F5BED8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5BEE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F5BEE9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5BF274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_activity_scope_state_s state)
{
  void *v21;

  objc_sync_exit(v21);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5BF2A4(uint64_t a1, uint64_t a2)
{
  double Current;
  unint64_t v5;
  unint64_t v6;
  pthread_mutex_t *v7;
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD block[7];
  __int16 v23;
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  Current = CFAbsoluteTimeGetCurrent();
  if (qword_1ECD8E7E8 != -1)
    dispatch_once(&qword_1ECD8E7E8, &unk_1E2990F40);
  if (!(unint64_t)((double)(unint64_t)qword_1ECD8E7E0 + Current * 100.0))
  {
    do
      v5 = __ldxr(&qword_1ECD8E7D8);
    while (__stxr(v5 | a2, &qword_1ECD8E7D8));
  }
  do
    v6 = __ldxr(&qword_1ECD8E7D0);
  while (__stxr(v6 + 1, &qword_1ECD8E7D0));
  if (v6 >= 0x5DC1)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_18F5BAC0C;
    block[3] = &unk_1E29910D0;
    block[4] = v6;
    if (qword_1ECD8E7F0 != -1)
      dispatch_once(&qword_1ECD8E7F0, block);
  }
  if (Current > *(double *)&qword_1ECD8E7F8 + 240.0)
  {
    qword_1ECD8E7F8 = *(_QWORD *)&Current;
    if (a1)
    {
      v7 = *(pthread_mutex_t **)(a1 + 240);
      block[6] = v7;
      pthread_mutex_lock(v7);
      v23 = 257;
      do
        v10 = __ldxr(&qword_1ECD8E7D0);
      while (__stxr(0, &qword_1ECD8E7D0));
      do
        v11 = __ldxr(&qword_1ECD8E7D8);
      while (__stxr(0, &qword_1ECD8E7D8));
      if (v10 >= 2)
      {
        v25[0] = CFSTR("kCLConnectionMessageTotalFunctionCallsKey");
        v26[0] = objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v8, v10, v9);
        v25[1] = CFSTR("kCLConnectionMessageFunctionBitmapKey");
        v26[1] = objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v12, v11, v13);
        v15 = (void *)objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v14, (uint64_t)v26, (uint64_t)v25, 2);
        sub_18F5C9250(v24);
        v18 = objc_msgSend_objectForKeyedSubscript_(v15, v16, (uint64_t)CFSTR("kCLConnectionMessageTotalFunctionCallsKey"), v17);
        sub_18F664688((uint64_t)v24, "kCLConnectionMessageTotalFunctionCallsKey", v18);
        v21 = objc_msgSend_objectForKeyedSubscript_(v15, v19, (uint64_t)CFSTR("kCLConnectionMessageFunctionBitmapKey"), v20);
        sub_18F664688((uint64_t)v24, "kCLConnectionMessageFunctionBitmapKey", v21);
        sub_18F5C7BB4(a1, "kCLConnectionMessageCollectMetricsForFunction", (uint64_t)v24);
        sub_18F5C6360(v24);
      }
      pthread_mutex_unlock(v7);
    }
  }
}

void sub_18F5BF51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    sub_18F5D57A8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_18F5BF77C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  const char *v38;
  uint64_t v39;
  id v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  double v45;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  NSObject *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  double v65;
  void *v66;
  const char *v67;
  void *v68;
  void *v69;
  const char *v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  char *v74;
  _QWORD v75[7];
  uint64_t v76;
  _OWORD v77[10];
  _QWORD block[5];
  int v79;
  uint64_t v80;
  uint8_t buf[4];
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend_isGeocoding(*(void **)(a1 + 32), a2, a3, a4) & 1) == 0)
  {
    v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 8);
    if (v8)
      v9 = v8;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 8) = objc_msgSend_copy(*(void **)(a1 + 56), v5, v6, v7);
    v13 = *(void **)(a1 + 40);
    if (!v13 || (objc_msgSend_coordinate(v13, v10, v11, v12), v18 < -180.0) || v18 > 180.0 || v17 > 90.0 || v17 < -90.0)
    {
      v63 = *(_QWORD *)(a1 + 32);
      v64 = *(NSObject **)(*(_QWORD *)(v63 + 8) + 24);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_18F6BF804;
      block[3] = &unk_1E2990DE0;
      block[4] = v63;
      dispatch_async(v64, block);
      return;
    }
    v19 = (void *)objc_msgSend_sharedService(MEMORY[0x1E0D27218], v14, v15, v16);
    v23 = (void *)objc_msgSend_defaultTraits(v19, v20, v21, v22);
    v27 = v23;
    if (*(_QWORD *)(a1 + 48))
    {
      objc_msgSend_clearDeviceDisplayLanguages(v23, v24, v25, v26);
      v28 = (void *)MEMORY[0x1E0C99DC8];
      v32 = objc_msgSend_localeIdentifier(*(void **)(a1 + 48), v29, v30, v31);
      v35 = objc_msgSend_canonicalLanguageIdentifierFromString_(v28, v33, v32, v34);
      if (v35)
        objc_msgSend_addDeviceDisplayLanguage_(v27, v24, v35, v26);
    }
    memset(v77, 0, 156);
    v36 = *(void **)(a1 + 40);
    if (v36)
      objc_msgSend_clientLocation(v36, v24, v25, v26);
    v37 = objc_alloc(MEMORY[0x1E0D27168]);
    v40 = (id)objc_msgSend__initWithCLClientLocation_(v37, v38, (uint64_t)v77, v39);
    v44 = v40;
    v45 = *(double *)(a1 + 64);
    if (v45 < 0.0 || v45 >= 360.0)
      v45 = -1.0;
    objc_msgSend_setHeading_(v40, v41, v42, v43, v45);
    v50 = objc_msgSend_coarseMetaData(*(void **)(a1 + 40), v47, v48, v49);
    v76 = 0;
    if (!v50)
      goto LABEL_29;
    v54 = v50;
    v55 = (void *)MEMORY[0x1E0CB3710];
    v56 = objc_opt_class();
    v58 = objc_msgSend_unarchivedObjectOfClass_fromData_error_(v55, v57, v56, v54, &v76);
    if (v76)
    {
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990870);
      v59 = qword_1ECD8E750;
      if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v82 = v76;
        _os_log_impl(&dword_18F5B3000, v59, OS_LOG_TYPE_ERROR, "Coarse MetaData cannot be decoded while reverse geocoding location, error, %@", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E2990870);
        v79 = 138412290;
        v80 = v76;
        v74 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "-[CLGeocoder reverseGeocodeLocation:preferredLocale:heading:localResultsOnly:completionHandler:]_block_invoke", "CoreLocation: %s\n", v74);
        if (v74 != (char *)buf)
          free(v74);
      }
    }
    if (v58)
    {
      objc_msgSend_setCoarseMetadata_(v44, v51, v58, v53);
    }
    else
    {
LABEL_29:
      objc_msgSend_horizontalAccuracy(*(void **)(a1 + 40), v51, v52, v53);
      if (v65 > 1000.0)
      {
        v66 = (void *)objc_msgSend_sharedService(MEMORY[0x1E0D27218], v60, v61, v62);
        v68 = (void *)objc_msgSend_ticketForReverseGeocodeLocation_placeTypeLimit_traits_(v66, v67, (uint64_t)v44, 4, v27);
        goto LABEL_32;
      }
    }
    v69 = (void *)objc_msgSend_sharedService(MEMORY[0x1E0D27218], v60, v61, v62);
    v68 = (void *)objc_msgSend__cl_ticketForReverseGeocodeLocation_traits_(v69, v70, (uint64_t)v44, (uint64_t)v27);
LABEL_32:
    v71 = v68;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 16) = v68;
    if (*(_BYTE *)(a1 + 72))
    {
      objc_msgSend__ticket_didReturnError_partialResultForLocation_(*(void **)(a1 + 32), v72, (uint64_t)v71, 0, *(_QWORD *)(a1 + 40));
    }
    else
    {
      v75[0] = MEMORY[0x1E0C809B0];
      v75[1] = 3221225472;
      v75[2] = sub_18F6BF80C;
      v75[3] = &unk_1E2991248;
      v73 = *(_QWORD *)(a1 + 40);
      v75[4] = *(_QWORD *)(a1 + 32);
      v75[5] = v71;
      v75[6] = v73;
      objc_msgSend_submitWithHandler_networkActivity_(v71, v72, (uint64_t)v75, 0);
    }
  }
}

void *sub_18F5BFBF8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;

  v5 = (void *)objc_msgSend_initWithGEOCoordinate_(a1, a2, a3, a4, *(double *)(a3 + 4), *(double *)(a3 + 12));
  v9 = v5;
  if (v5)
  {
    objc_msgSend_setTimestamp_(v5, v6, v7, v8, *(double *)(a3 + 76));
    objc_msgSend_setAltitude_(v9, v10, (int)*(double *)(a3 + 28), v11);
    objc_msgSend_setHorizontalAccuracy_(v9, v12, v13, v14, *(double *)(a3 + 20));
    objc_msgSend_setVerticalAccuracy_(v9, v15, v16, v17, *(double *)(a3 + 36));
    v20 = *(_DWORD *)(a3 + 132);
    if (v20 == 2)
      objc_msgSend_setReferenceFrame_(v9, v18, 2, v19);
    else
      objc_msgSend_setReferenceFrame_(v9, v18, v20 == 1, v19);
    if (*(double *)(a3 + 44) > -1.0)
      objc_msgSend_setSpeed_(v9, v21, v22, v23);
    v24 = *(double *)(a3 + 60);
    if (v24 < 360.0 && v24 >= 0.0)
      objc_msgSend_setCourse_(v9, v21, v22, v23);
  }
  return v9;
}

uint64_t CLCopyTechnologiesInUse()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLCopyTechnologiesInUse", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v0, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyTechnologiesInUse\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v2, v3, v4);
  v9 = objc_msgSend_copyTechnologiesInUse(v5, v6, v7, v8);
  os_activity_scope_leave(&v11);
  return v9;
}

void sub_18F5C08F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5C09D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F5C0A44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5C0B34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5C0B48()
{
  uint64_t result;
  const void *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t *v4;
  char *v5;
  uint8_t *v6;
  char *v7;
  uint8_t v8[16];
  int v9;
  char v10;
  int v11;
  uint8_t *v12;
  uint8_t buf[16];
  int v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((MGIsDeviceOfType() & 1) != 0)
    return 2;
  v14 = 1244490093;
  *(_OWORD *)buf = xmmword_18F773640;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 5;
  v9 = 1377801277;
  *(_OWORD *)v8 = xmmword_18F773654;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 5;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 19;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 20;
  v14 = 1839812531;
  *(_OWORD *)buf = xmmword_18F773668;
  if ((MGIsDeviceOfType() & 1) != 0 || (MGIsDeviceOfType() & 1) != 0)
    return 20;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 52;
  v14 = -435113336;
  *(_OWORD *)buf = xmmword_18F77367C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 53;
  v14 = -1997581659;
  *(_OWORD *)buf = xmmword_18F773690;
  if ((MGIsDeviceOfType() & 1) != 0 || (MGIsDeviceOfType() & 1) != 0)
    return 158;
  v14 = -1441055153;
  *(_OWORD *)buf = xmmword_18F7736A4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 159;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 160;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 3;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 6;
  v14 = 1602014129;
  *(_OWORD *)buf = xmmword_18F7736B8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 7;
  v14 = -810116762;
  *(_OWORD *)buf = xmmword_18F7736CC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 8;
  v14 = -1195351767;
  *(_OWORD *)buf = xmmword_18F7736E0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 9;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 10;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 11;
  v14 = 1789837692;
  *(_OWORD *)buf = xmmword_18F7736F4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 13;
  v14 = 48355600;
  *(_OWORD *)buf = xmmword_18F773708;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 14;
  v14 = -1239654590;
  *(_OWORD *)buf = xmmword_18F77371C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 15;
  v14 = -679691073;
  *(_OWORD *)buf = xmmword_18F773730;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 16;
  v14 = -1579092758;
  *(_OWORD *)buf = xmmword_18F773744;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 17;
  v14 = 1430379884;
  *(_OWORD *)buf = xmmword_18F773758;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 18;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 21;
  v14 = -798153473;
  *(_OWORD *)buf = xmmword_18F77376C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 22;
  v14 = -776721724;
  *(_OWORD *)buf = xmmword_18F773780;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 23;
  v14 = -1403227947;
  *(_OWORD *)buf = xmmword_18F773794;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 24;
  v14 = 729118884;
  *(_OWORD *)buf = xmmword_18F7737A8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 25;
  v14 = 1046806126;
  *(_OWORD *)buf = xmmword_18F7737BC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 26;
  v9 = -188760945;
  *(_OWORD *)v8 = xmmword_18F7737D0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 26;
  v14 = -489993439;
  *(_OWORD *)buf = xmmword_18F7737E4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 27;
  v14 = 886875686;
  *(_OWORD *)buf = xmmword_18F7737F8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 28;
  v14 = -1639077591;
  *(_OWORD *)buf = xmmword_18F77380C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 29;
  v14 = 338555555;
  *(_OWORD *)buf = xmmword_18F773820;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 30;
  v14 = 1032708406;
  *(_OWORD *)buf = xmmword_18F773834;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 31;
  v14 = 729903963;
  *(_OWORD *)buf = xmmword_18F773848;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 32;
  v14 = 1278131292;
  *(_OWORD *)buf = xmmword_18F77385C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 33;
  v14 = -1841712216;
  *(_OWORD *)buf = xmmword_18F773870;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 34;
  v14 = 1275676051;
  *(_OWORD *)buf = xmmword_18F773884;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 35;
  v14 = 1908474541;
  *(_OWORD *)buf = xmmword_18F773898;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 36;
  v14 = -1022451852;
  *(_OWORD *)buf = xmmword_18F7738AC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 62;
  v14 = 1729782187;
  *(_OWORD *)buf = xmmword_18F7738C0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 63;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 37;
  v14 = 368885834;
  *(_OWORD *)buf = xmmword_18F7738D4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 38;
  v14 = -414334491;
  *(_OWORD *)buf = xmmword_18F7738E8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 39;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 40;
  v14 = -526227167;
  *(_OWORD *)buf = xmmword_18F7738FC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 41;
  v14 = -1509831889;
  *(_OWORD *)buf = xmmword_18F773910;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 42;
  v14 = 1960366092;
  *(_OWORD *)buf = xmmword_18F773924;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 43;
  v14 = -2114570942;
  *(_OWORD *)buf = xmmword_18F773938;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 148;
  v14 = -1527788847;
  *(_OWORD *)buf = xmmword_18F77394C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 44;
  v14 = 1532898719;
  *(_OWORD *)buf = xmmword_18F773960;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 45;
  v14 = 996646949;
  *(_OWORD *)buf = xmmword_18F773974;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 46;
  v14 = -563086000;
  *(_OWORD *)buf = xmmword_18F773988;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 47;
  v14 = 659506830;
  *(_OWORD *)buf = xmmword_18F77399C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 48;
  v14 = 213746202;
  *(_OWORD *)buf = xmmword_18F7739B0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 49;
  v14 = 289690957;
  *(_OWORD *)buf = xmmword_18F7739C4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 50;
  v14 = 586720268;
  *(_OWORD *)buf = xmmword_18F7739D8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 51;
  v14 = -350584140;
  *(_OWORD *)buf = xmmword_18F7739EC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 54;
  v14 = 368778837;
  *(_OWORD *)buf = xmmword_18F773A00;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 55;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 56;
  v14 = -1418383976;
  *(_OWORD *)buf = xmmword_18F773A14;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 57;
  v14 = -1213485500;
  *(_OWORD *)buf = xmmword_18F773A28;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 58;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 59;
  v14 = 1425254930;
  *(_OWORD *)buf = xmmword_18F773A3C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 60;
  v14 = 1899561076;
  *(_OWORD *)buf = xmmword_18F773A50;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 61;
  v14 = -199226823;
  *(_OWORD *)buf = xmmword_18F773A64;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 64;
  v9 = 1412427398;
  *(_OWORD *)v8 = xmmword_18F773A78;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 64;
  v14 = -1283070668;
  *(_OWORD *)buf = xmmword_18F773A8C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 65;
  v9 = 160260070;
  *(_OWORD *)v8 = xmmword_18F773AA0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 65;
  v14 = 1711910369;
  *(_OWORD *)buf = xmmword_18F773AB4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 66;
  v14 = -1282800328;
  *(_OWORD *)buf = xmmword_18F773AC8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 67;
  v14 = 897736383;
  *(_OWORD *)buf = xmmword_18F773ADC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 68;
  v14 = -453987047;
  *(_OWORD *)buf = xmmword_18F773AF0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 69;
  v14 = 450980336;
  *(_OWORD *)buf = xmmword_18F773B04;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 70;
  v14 = 414393924;
  *(_OWORD *)buf = xmmword_18F773B18;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 71;
  v14 = -996295886;
  *(_OWORD *)buf = xmmword_18F773B2C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 72;
  v14 = -337121064;
  *(_OWORD *)buf = xmmword_18F773B40;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 73;
  v14 = -2092955395;
  *(_OWORD *)buf = xmmword_18F773B54;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 74;
  v14 = 674998600;
  *(_OWORD *)buf = xmmword_18F773B68;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 75;
  v14 = 317289457;
  *(_OWORD *)buf = xmmword_18F773B7C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 76;
  v14 = 401945557;
  *(_OWORD *)buf = xmmword_18F773B90;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 77;
  v14 = -232427879;
  *(_OWORD *)buf = xmmword_18F773BA4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 78;
  v14 = -427474227;
  *(_OWORD *)buf = xmmword_18F773BB8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 79;
  v9 = 1477534141;
  *(_OWORD *)v8 = xmmword_18F773BCC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 79;
  v14 = -1843102369;
  *(_OWORD *)buf = xmmword_18F773BE0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 80;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 81;
  v14 = 470738981;
  *(_OWORD *)buf = xmmword_18F773BF4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 82;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 83;
  v14 = 710807826;
  *(_OWORD *)buf = xmmword_18F773C08;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 84;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 85;
  v14 = 1860682089;
  *(_OWORD *)buf = xmmword_18F773C1C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 86;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 87;
  v14 = -2085056298;
  *(_OWORD *)buf = xmmword_18F773C30;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 88;
  v14 = 2146530832;
  *(_OWORD *)buf = xmmword_18F773C44;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 89;
  v14 = -1742178852;
  *(_OWORD *)buf = xmmword_18F773C58;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 90;
  v14 = 617174804;
  *(_OWORD *)buf = xmmword_18F773C6C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 91;
  v14 = 1330813729;
  *(_OWORD *)buf = xmmword_18F773C80;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 92;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 93;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 94;
  v14 = 152704997;
  *(_OWORD *)buf = xmmword_18F773C94;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 95;
  v14 = -338255497;
  *(_OWORD *)buf = xmmword_18F773CA8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 96;
  v14 = -1040127899;
  *(_OWORD *)buf = xmmword_18F773CBC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 97;
  v14 = 283967174;
  *(_OWORD *)buf = xmmword_18F773CD0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 98;
  v14 = 1530707451;
  *(_OWORD *)buf = xmmword_18F773CE4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 99;
  v14 = -871113647;
  *(_OWORD *)buf = xmmword_18F773CF8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 100;
  v14 = 483476120;
  *(_OWORD *)buf = xmmword_18F773D0C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 101;
  v14 = 1472775220;
  *(_OWORD *)buf = xmmword_18F773D20;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 102;
  v14 = 56502976;
  *(_OWORD *)buf = xmmword_18F773D34;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 103;
  v14 = 282158961;
  *(_OWORD *)buf = xmmword_18F773D48;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 104;
  v14 = 1282132887;
  *(_OWORD *)buf = xmmword_18F773D5C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 105;
  v14 = -961843768;
  *(_OWORD *)buf = xmmword_18F773D70;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 106;
  v14 = 1326690998;
  *(_OWORD *)buf = xmmword_18F773D84;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 107;
  v14 = -441172408;
  *(_OWORD *)buf = xmmword_18F773D98;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 108;
  v14 = -126099363;
  *(_OWORD *)buf = xmmword_18F773DAC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 109;
  v14 = 1756484512;
  *(_OWORD *)buf = xmmword_18F773DC0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 110;
  v14 = 763775061;
  *(_OWORD *)buf = xmmword_18F773DD4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 111;
  v14 = -1092155788;
  *(_OWORD *)buf = xmmword_18F773DE8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 112;
  v14 = -557458837;
  *(_OWORD *)buf = xmmword_18F773DFC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 113;
  v14 = -63049871;
  *(_OWORD *)buf = xmmword_18F773E10;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 114;
  v14 = 1730000236;
  *(_OWORD *)buf = xmmword_18F773E24;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 115;
  v14 = 406601745;
  *(_OWORD *)buf = xmmword_18F773E38;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 116;
  v14 = 1530338216;
  *(_OWORD *)buf = xmmword_18F773E4C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 117;
  v14 = -1930811061;
  *(_OWORD *)buf = xmmword_18F773E60;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 118;
  v14 = 1654218604;
  *(_OWORD *)buf = xmmword_18F773E74;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 119;
  v14 = -182498503;
  *(_OWORD *)buf = xmmword_18F773E88;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 124;
  v14 = -2030489149;
  *(_OWORD *)buf = xmmword_18F773E9C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 120;
  v14 = 841005628;
  *(_OWORD *)buf = xmmword_18F773EB0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 121;
  v14 = 223445260;
  *(_OWORD *)buf = xmmword_18F773EC4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 122;
  v14 = 1219348060;
  *(_OWORD *)buf = xmmword_18F773ED8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 123;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 125;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 126;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 127;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 128;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 129;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 130;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 131;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 132;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 133;
  v14 = 2030516999;
  *(_OWORD *)buf = xmmword_18F773EEC;
  *(_OWORD *)v8 = xmmword_18F773F00;
  v9 = -1276010597;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 134;
  v14 = -762483149;
  *(_OWORD *)buf = xmmword_18F773F14;
  *(_OWORD *)v8 = xmmword_18F773F28;
  v9 = -1926937532;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 135;
  v14 = -1902732724;
  *(_OWORD *)buf = xmmword_18F773F3C;
  *(_OWORD *)v8 = xmmword_18F773F50;
  v9 = -342357580;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 136;
  v14 = 300442574;
  *(_OWORD *)buf = xmmword_18F773F64;
  *(_OWORD *)v8 = xmmword_18F773F78;
  v9 = -1294188889;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 137;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 138;
  v14 = -61007701;
  *(_OWORD *)buf = xmmword_18F773F8C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 139;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 140;
  v14 = -235416490;
  *(_OWORD *)buf = xmmword_18F773FA0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 141;
  v14 = -820493242;
  *(_OWORD *)buf = xmmword_18F773FB4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 143;
  v14 = -1157300313;
  *(_OWORD *)buf = xmmword_18F773FC8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 144;
  v14 = -2132668294;
  *(_OWORD *)buf = xmmword_18F773FDC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 145;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 146;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 147;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 149;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 150;
  v14 = 1737149739;
  *(_OWORD *)buf = xmmword_18F773FF0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 151;
  v14 = 1577888303;
  *(_OWORD *)buf = xmmword_18F774004;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 152;
  v14 = -1918230744;
  *(_OWORD *)buf = xmmword_18F774018;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 153;
  v14 = 1126727276;
  *(_OWORD *)buf = xmmword_18F77402C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 154;
  v14 = 300130091;
  *(_OWORD *)buf = xmmword_18F774040;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 155;
  v14 = 343814884;
  *(_OWORD *)buf = xmmword_18F774054;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 156;
  v14 = -1675932945;
  *(_OWORD *)buf = xmmword_18F774068;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 157;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 161;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 162;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 166;
  v14 = -1840391155;
  *(_OWORD *)buf = xmmword_18F77407C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 167;
  v14 = -121925081;
  *(_OWORD *)buf = xmmword_18F774090;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 142;
  v14 = 1071957977;
  *(_OWORD *)buf = xmmword_18F7740A4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 168;
  v14 = 438437663;
  *(_OWORD *)buf = xmmword_18F7740B8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 169;
  v14 = 1575123478;
  *(_OWORD *)buf = xmmword_18F7740CC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 170;
  v14 = -382792827;
  *(_OWORD *)buf = xmmword_18F7740E0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 171;
  v14 = 123138233;
  *(_OWORD *)buf = xmmword_18F7740F4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 172;
  v14 = 681511593;
  *(_OWORD *)buf = xmmword_18F774108;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 173;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 174;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 175;
  v14 = 713503427;
  *(_OWORD *)buf = xmmword_18F77411C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 176;
  v14 = -1632750650;
  *(_OWORD *)buf = xmmword_18F774130;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 177;
  v14 = -1820426635;
  *(_OWORD *)buf = xmmword_18F774144;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 178;
  v14 = -937652876;
  *(_OWORD *)buf = xmmword_18F774158;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 179;
  v14 = 1874287171;
  *(_OWORD *)buf = xmmword_18F77416C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 180;
  v14 = -781324731;
  *(_OWORD *)buf = xmmword_18F774180;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 181;
  v14 = 1214880059;
  *(_OWORD *)buf = xmmword_18F774194;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 182;
  v14 = 426359977;
  *(_OWORD *)buf = xmmword_18F7741A8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 183;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 180;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 184;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 163;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 185;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 164;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 165;
  v14 = 345196535;
  *(_OWORD *)buf = xmmword_18F7741BC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 186;
  v14 = 440949464;
  *(_OWORD *)buf = xmmword_18F7741D0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 187;
  v14 = 688565114;
  *(_OWORD *)buf = xmmword_18F7741E4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 188;
  v14 = -493418906;
  *(_OWORD *)buf = xmmword_18F7741F8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 189;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 190;
  v14 = -584398440;
  *(_OWORD *)buf = xmmword_18F77420C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 195;
  v14 = -879476163;
  *(_OWORD *)buf = xmmword_18F774220;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 196;
  v14 = -695298128;
  *(_OWORD *)buf = xmmword_18F774234;
  *(_OWORD *)v8 = xmmword_18F774248;
  v9 = 804488105;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 197;
  v14 = 1614584579;
  *(_OWORD *)buf = xmmword_18F77425C;
  *(_OWORD *)v8 = xmmword_18F774270;
  v9 = 324288768;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 198;
  v14 = 460218192;
  *(_OWORD *)buf = xmmword_18F774284;
  *(_OWORD *)v8 = xmmword_18F774298;
  v9 = 2144905009;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 199;
  v14 = 127894440;
  *(_OWORD *)buf = xmmword_18F7742AC;
  *(_OWORD *)v8 = xmmword_18F7742C0;
  v9 = 1070997468;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 200;
  v14 = 372777383;
  *(_OWORD *)buf = xmmword_18F7742D4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 201;
  v14 = -858079590;
  *(_OWORD *)buf = xmmword_18F7742E8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 202;
  v14 = -212523443;
  *(_OWORD *)buf = xmmword_18F7742FC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 203;
  v14 = 646100384;
  *(_OWORD *)buf = xmmword_18F774310;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 204;
  v14 = -340360463;
  *(_OWORD *)buf = xmmword_18F774324;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 205;
  v14 = 1605231531;
  *(_OWORD *)buf = xmmword_18F774338;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 206;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 207;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 208;
  v14 = -545612308;
  *(_OWORD *)buf = xmmword_18F77434C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 209;
  v14 = 1178062702;
  *(_OWORD *)buf = xmmword_18F774360;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 210;
  v14 = 958549802;
  *(_OWORD *)buf = xmmword_18F774374;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 211;
  v14 = 1377540371;
  *(_OWORD *)buf = xmmword_18F774388;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 212;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 213;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 214;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 215;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 216;
  v14 = -1431778695;
  *(_OWORD *)buf = xmmword_18F77439C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 217;
  v14 = 533419158;
  *(_OWORD *)buf = xmmword_18F7743B0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 218;
  v14 = 1106979518;
  *(_OWORD *)buf = xmmword_18F7743C4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 219;
  v14 = -609570151;
  *(_OWORD *)buf = xmmword_18F7743D8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 220;
  v14 = -874769875;
  *(_OWORD *)buf = xmmword_18F7743EC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 221;
  v14 = 1223847566;
  *(_OWORD *)buf = xmmword_18F774400;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 222;
  v14 = 185580364;
  *(_OWORD *)buf = xmmword_18F774414;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 223;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 224;
  v14 = 1878025452;
  *(_OWORD *)buf = xmmword_18F774428;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 225;
  v14 = 1725957070;
  *(_OWORD *)buf = xmmword_18F77443C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 226;
  v14 = 538967431;
  *(_OWORD *)buf = xmmword_18F774450;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 227;
  v14 = 2060712151;
  *(_OWORD *)buf = xmmword_18F774464;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 228;
  v14 = 802516499;
  *(_OWORD *)buf = xmmword_18F774478;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 229;
  v14 = -1919324456;
  *(_OWORD *)buf = xmmword_18F77448C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 230;
  v14 = 1127969586;
  *(_OWORD *)buf = xmmword_18F7744A0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 231;
  v14 = 1292009573;
  *(_OWORD *)buf = xmmword_18F7744B4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 232;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 233;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 234;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 235;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 236;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 142;
  if (qword_1ECD8F758 != -1)
    dispatch_once(&qword_1ECD8F758, &unk_1E2990510);
  if (sub_18F670E18())
    return 1;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 237;
  v14 = -12497897;
  *(_OWORD *)buf = xmmword_18F7744C8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 238;
  v14 = -518121279;
  *(_OWORD *)buf = xmmword_18F7744DC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 239;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 240;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 241;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 258;
  v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991F10);
    v2 = qword_1EE1720D0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138477827;
      *(_QWORD *)&buf[4] = v1;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_ERROR, "unknown HW model %{private}@; file radar to CoreMotion Factory | 1.0",
        buf,
        0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE1720C8 != -1)
        dispatch_once(&qword_1EE1720C8, &unk_1E2991F10);
      *(_DWORD *)v8 = 138477827;
      *(_QWORD *)&v8[4] = v1;
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "static CLPlatformInfo::Hardware CLPlatformInfo::queryEmbeddedSystemHardware()", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
    CFRelease(v1);
    return 0;
  }
  if (qword_1EE1720C8 != -1)
    dispatch_once(&qword_1EE1720C8, &unk_1E2991F10);
  v3 = qword_1EE1720D0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_ERROR))
  {
    sub_18F661274(CFSTR("HWModelStr"), (uint64_t)buf);
    v4 = v15 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v8 = 136380675;
    *(_QWORD *)&v8[4] = v4;
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_ERROR, "unknown HW model %{private}s; file radar to CoreMotion Factory | 1.0",
      v8,
      0xCu);
    if (v15 < 0)
      operator delete(*(void **)buf);
  }
  result = sub_18F5C4AE0(115, 0);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991F10);
    sub_18F661274(CFSTR("HWModelStr"), (uint64_t)v8);
    if (v10 >= 0)
      v6 = v8;
    else
      v6 = *(uint8_t **)v8;
    v11 = 136380675;
    v12 = v6;
    v7 = (char *)_os_log_send_and_compose_impl();
    if (v10 < 0)
      operator delete(*(void **)v8);
    sub_18F5F2740("Generic", 1, 0, 0, "static CLPlatformInfo::Hardware CLPlatformInfo::queryEmbeddedSystemHardware()", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
    return 0;
  }
  return result;
}

void sub_18F5C3748(uint64_t a1)
{
  void *v2;
  pthread_mutex_t *v3;
  uint64_t v4;
  void (*v5)(_QWORD, _QWORD, uint64_t, _QWORD);
  uint64_t v6;
  void (*v7)(uint64_t);
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  void (*v12)(uint64_t);

  v2 = (void *)MEMORY[0x1940032C4]();
  v3 = *(pthread_mutex_t **)(*(_QWORD *)(a1 + 40) + 240);
  pthread_mutex_lock(v3);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(v4 + 248);
  v6 = *(_QWORD *)(v4 + 264);
  v7 = *(void (**)(uint64_t))(v4 + 280);
  v8 = *(unsigned __int8 *)(v4 + 225);
  v9 = *(uint64_t ***)(v4 + 328);
  v10 = *v9;
  v11 = **v9;
  *(_QWORD *)(v11 + 8) = (*v9)[1];
  *(_QWORD *)v10[1] = v11;
  v9[2] = (uint64_t *)((char *)v9[2] - 1);
  operator delete(v10);
  if (!v8)
  {
    if (v6)
    {
      v12 = *(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 272);
      if (v12)
        v12(v6);
    }
  }
  pthread_mutex_unlock(v3);
  if (!v8)
  {
    if (v5)
      v5(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), v6, *(_QWORD *)(a1 + 32));
    if (v6 && v7)
      v7(v6);
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
  objc_autoreleasePoolPop(v2);
}

void sub_18F5C383C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_18F5C3854(void *a1)
{
  id v2;

  v2 = a1;
  return a1;
}

uint64_t sub_18F5C3878(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v6;

  v6 = objc_msgSend_manager(a3, a2, (uint64_t)a3, a4);
  return MEMORY[0x1E0DE7D20](v6, sel_onClientEvent_supportInfo_, a2, a4);
}

void sub_18F5C46C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_18F5C4758(uint64_t a1, uint64_t a2, int a3)
{
  double v5;
  double v6;
  _BOOL4 v8;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    if (a3)
    {
      v5 = *(double *)(a1 + 88);
      v6 = *(double *)(a2 + 88);
      v8 = v5 == -1.0 && v6 == -1.0 || vabdd_f64(v5 + *(double *)(a1 + 76), v6 + *(double *)(a2 + 76)) < 2.22044605e-16;
    }
    else
    {
      v8 = *(double *)(a1 + 76) == *(double *)(a2 + 76);
    }
    if (*(double *)(a1 + 4) != *(double *)(a2 + 4)
      || *(double *)(a1 + 12) != *(double *)(a2 + 12)
      || *(double *)(a1 + 20) != *(double *)(a2 + 20)
      || *(double *)(a1 + 28) != *(double *)(a2 + 28)
      || *(double *)(a1 + 36) != *(double *)(a2 + 36)
      || *(double *)(a1 + 44) != *(double *)(a2 + 44)
      || *(double *)(a1 + 60) != *(double *)(a2 + 60))
    {
      return 0;
    }
    if (*(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      v8 = 0;
    if (!v8)
      return 0;
    if (*(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124) || *(_DWORD *)(a1 + 132) == *(_DWORD *)(a2 + 132))
      return *(_DWORD *)(a1 + 124) == *(_DWORD *)(a2 + 124);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
    v11 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v12 = *(_QWORD *)(a1 + 4);
      v13 = *(_QWORD *)(a1 + 12);
      v14 = *(_DWORD *)(a1 + 132);
      v15 = *(_QWORD *)(a2 + 4);
      v16 = *(_QWORD *)(a2 + 12);
      v17 = *(_DWORD *)(a2 + 132);
      *(_DWORD *)buf = 134219264;
      v21 = v12;
      v22 = 2048;
      v23 = v13;
      v24 = 1024;
      v25 = v14;
      v26 = 2048;
      v27 = v15;
      v28 = 2048;
      v29 = v16;
      v30 = 1024;
      v31 = v17;
      _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_FAULT, "CLCommonCompareLocationEqualityClient compared two coordinates that were identical other than their reference frames: (%lf, %lf, %d) (%lf, %lf, %d)", buf, 0x36u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "Boolean CLCommonCompareLocationEqualityClientWithTimeCheck(const CLClientLocation *, const CLClientLocation *, BOOL)", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
    if (!*(_DWORD *)(a1 + 132))
      return 1;
    return *(_DWORD *)(a2 + 132) == 0;
  }
  else
  {
    return (a1 | a2) == 0;
  }
}

uint64_t sub_18F5C4AE0(uint64_t a1, int a2)
{
  if (qword_1ECD8F9E0 != -1)
    dispatch_once(&qword_1ECD8F9E0, &unk_1E29907F0);
  if (*(_DWORD *)(qword_1ECD8F9D8 + 160) >= a2
    || *(_DWORD *)(qword_1ECD8F9D8 + 164) >= a2
    || *(_DWORD *)(qword_1ECD8F9D8 + 168) >= a2)
  {
    return 1;
  }
  else
  {
    return *(unsigned __int8 *)(qword_1ECD8F9D8 + 152);
  }
}

uint64_t CLClientCreateWithBundleIdentifierAndPathWithWebsiteOnSilo(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, unint64_t a5, uint64_t a6, void *a7)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t Instance;
  uint64_t v14;
  _QWORD *v15;
  pthread_mutex_t *v16;
  NSObject *v17;
  pthread_mutex_t *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const void *v23;
  const void *v24;
  __CFBundle *v25;
  const __CFArray *ValueForInfoDictionaryKey;
  const __CFArray *v27;
  CFTypeID v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  pthread_mutex_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v39;
  __int128 v40;
  void (*v41)(_QWORD);
  uint64_t v42;
  __CFBundle *MainBundle;
  CFStringRef Identifier;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  int v53;
  NSObject *v54;
  int v55;
  NSObject *v56;
  NSObject *v57;
  __CFNotificationCenter *LocalCenter;
  __CFNotificationCenter *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD aBlock[5];
  void *__p[2];
  char v66;
  _QWORD v67[3];
  char v68;
  os_activity_scope_state_s state;
  pthread_mutexattr_t v70;
  void (*v71)(_QWORD *);
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE block[24];
  void *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE buf[40];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  CFRange v85;

  v84 = *MEMORY[0x1E0C80C00];
  if (a4 | a5)
    v11 = a5;
  else
    v11 = qword_1EE172A68;
  if (a4 | a5)
    v12 = a4;
  else
    v12 = qword_1EE172A60;
  if (qword_1ECD8E7B8 != -1)
    dispatch_once_f(&qword_1ECD8E7B8, 0, (dispatch_function_t)sub_18F5CDA04);
  Instance = _CFRuntimeCreateInstance();
  v14 = Instance;
  if (!Instance)
    goto LABEL_13;
  bzero((void *)(Instance + 16), 0x180uLL);
  v15 = (_QWORD *)operator new();
  *v15 = v15;
  v15[1] = v15;
  v15[2] = 0;
  *(_QWORD *)(v14 + 328) = v15;
  pthread_mutexattr_init(&v70);
  pthread_mutexattr_settype(&v70, 2);
  v16 = (pthread_mutex_t *)malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
  *(_QWORD *)(v14 + 240) = v16;
  if (!v16 || pthread_mutex_init(v16, &v70))
  {
LABEL_12:
    CFRelease((CFTypeRef)v14);
    v14 = 0;
    goto LABEL_13;
  }
  pthread_mutexattr_destroy(&v70);
  *(_QWORD *)(v14 + 248) = a2;
  if (a3)
  {
    v39 = *a3;
    v40 = a3[1];
    *(_QWORD *)(v14 + 288) = *((_QWORD *)a3 + 4);
    *(_OWORD *)(v14 + 256) = v39;
    *(_OWORD *)(v14 + 272) = v40;
  }
  v41 = *(void (**)(_QWORD))(v14 + 272);
  v42 = *(_QWORD *)(v14 + 280);
  if (!v41)
  {
    if (!v42)
      goto LABEL_63;
LABEL_57:
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v45 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      v46 = *(_QWORD *)(v14 + 272);
      v47 = *(_QWORD *)(v14 + 280);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v46;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v47;
      _os_log_impl(&dword_18F5B3000, v45, OS_LOG_TYPE_FAULT, "non-matching retain (%p) and release (%p) functions in context, ignoring", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
      v61 = *(_QWORD *)(v14 + 272);
      v62 = *(_QWORD *)(v14 + 280);
      *(_DWORD *)block = 134218240;
      *(_QWORD *)&block[4] = v61;
      *(_WORD *)&block[12] = 2048;
      *(_QWORD *)&block[14] = v62;
      v63 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "CLClientRef CLClientAllocate(CFAllocatorRef, CLClientCallback, const CLClientContext *)", "CoreLocation: %s\n", v63);
      if (v63 != buf)
        free(v63);
    }
    *(_QWORD *)(v14 + 272) = 0;
    *(_QWORD *)(v14 + 280) = 0;
    goto LABEL_63;
  }
  if (!v42)
    goto LABEL_57;
  v41(*(_QWORD *)(v14 + 264));
LABEL_63:
  *(_DWORD *)(v14 + 20) = 0;
  *(_WORD *)(v14 + 24) = 256;
  *(_QWORD *)(v14 + 344) = 0;
  *(_QWORD *)(v14 + 352) = 0;
  *(_QWORD *)(v14 + 32) = 0xBFF0000000000000;
  *(_DWORD *)(v14 + 40) = 1;
  *(_QWORD *)(v14 + 48) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v14 + 96) = _Q0;
  *(_QWORD *)(v14 + 144) = 0xBFF0000000000000;
  v53 = pthread_mutex_init((pthread_mutex_t *)(v14 + 160), 0);
  if (v53)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v54 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v53;
      _os_log_impl(&dword_18F5B3000, v54, OS_LOG_TYPE_FAULT, "Failed to initilize fHeadingCalibrationDisplayMutex, error code: %{public}d", buf, 8u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
      *(_DWORD *)block = 67240192;
      *(_DWORD *)&block[4] = v53;
      v60 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "CLClientRef CLClientAllocate(CFAllocatorRef, CLClientCallback, const CLClientContext *)", "CoreLocation: %s\n", v60);
      if (v60 != buf)
        free(v60);
    }
    goto LABEL_12;
  }
  *(_BYTE *)(v14 + 224) = 0;
  if ((sub_18F5C81CC() & 2) != 0)
    v55 = 4;
  else
    v55 = 2;
  *(_DWORD *)(v14 + 152) = v55;
  *(_BYTE *)(v14 + 392) &= 0xF8u;
  if (qword_1ECD8E800 != -1)
    dispatch_once(&qword_1ECD8E800, &unk_1E2990F60);
  v56 = qword_1ECD8E808;
  snprintf(buf, 0x80uLL, "com.apple.CoreLocation.%p", (const void *)v14);
  v57 = dispatch_queue_create_with_target_V2(buf, 0, v56);
  *(_QWORD *)(v14 + 312) = v57;
  dispatch_set_context(v57, *(void **)(v14 + 240));
  dispatch_set_finalizer_f(*(dispatch_object_t *)(v14 + 312), (dispatch_function_t)sub_18F5CD9E0);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, (const void *)v14, (CFNotificationCallback)sub_18F5CE06C, CFSTR("UIApplicationWillResignActiveNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  v59 = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(v59, (const void *)v14, (CFNotificationCallback)sub_18F5B9114, CFSTR("UIApplicationDidBecomeActiveNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  *(_BYTE *)(v14 + 18) = 0;
  CFRetain((CFTypeRef)v14);
  *(_QWORD *)block = MEMORY[0x1E0C809B0];
  *(_QWORD *)&block[8] = 3221225472;
  *(_QWORD *)&block[16] = sub_18F5B917C;
  v77 = &unk_1E29910D0;
  v78 = (_QWORD *)v14;
  dispatch_async(MEMORY[0x1E0C80D38], block);
LABEL_13:
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v17 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = v14;
    _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"client allocated\", \"client\":\"%{public}p\"}", buf, 0x1Cu);
  }
  if (v14)
  {
    v18 = *(pthread_mutex_t **)(v14 + 240);
    pthread_mutex_lock(v18);
    *(_QWORD *)(v14 + 232) = a7;
    *(_QWORD *)(v14 + 360) = v12;
    *(_QWORD *)(v14 + 368) = v11;
    *(_QWORD *)(v14 + 376) = a6;
    *(_BYTE *)(v14 + 17) = (v11 | qword_1EE172A68 | qword_1EE172A60 | v12) != 0;
    if (!v11)
    {
      v11 = v12;
      if (!v12)
      {
        MainBundle = CFBundleGetMainBundle();
        v11 = (unint64_t)&stru_1E2993188;
        if (MainBundle)
        {
          Identifier = CFBundleGetIdentifier(MainBundle);
          if (Identifier)
            v11 = (unint64_t)Identifier;
        }
      }
    }
    v22 = (const char *)objc_msgSend_UTF8String((void *)v11, v19, v20, v21);
    *(_QWORD *)(v14 + 384) = strdup(v22);
    v23 = *(const void **)(v14 + 360);
    if (v23)
      CFRetain(v23);
    v24 = *(const void **)(v14 + 368);
    if (v24)
      CFRetain(v24);
    *(_BYTE *)(v14 + 16) = 0;
    v25 = CFBundleGetMainBundle();
    if (v25)
    {
      ValueForInfoDictionaryKey = (const __CFArray *)CFBundleGetValueForInfoDictionaryKey(v25, CFSTR("UIBackgroundModes"));
      v27 = ValueForInfoDictionaryKey;
      if (ValueForInfoDictionaryKey)
      {
        v28 = CFGetTypeID(ValueForInfoDictionaryKey);
        if (v28 == CFArrayGetTypeID())
        {
          v85.length = CFArrayGetCount(v27);
          v85.location = 0;
          if (CFArrayContainsValue(v27, v85, CFSTR("location")))
            *(_BYTE *)(v14 + 16) = 1;
        }
      }
    }
    v29 = _os_activity_create(&dword_18F5B3000, "CL: _CLClientCreateConnection", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v29, &state);

    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v30 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "activity";
      *(_WORD *)&buf[28] = 2050;
      *(_QWORD *)&buf[30] = v14;
      _os_log_impl(&dword_18F5B3000, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"_CLClientCreateConnection\", \"event\":%{public, location:escape_only}s, \"client\":\"%{public}p\"}", buf, 0x26u);
    }
    if (!*(_QWORD *)(v14 + 320))
    {
      v67[0] = 0;
      v67[1] = v67;
      v67[2] = 0x2020000000;
      v68 = 1;
      v31 = operator new();
      sub_18F5D5990(__p, "com.apple.locationd.registration");
      MEMORY[0x194002B20](v31, __p, *(_QWORD *)(v14 + 312));
      *(_QWORD *)(v14 + 320) = v31;
      if (v66 < 0)
        operator delete(__p[0]);
      v32 = *(_QWORD *)(v14 + 240);
      v33 = MEMORY[0x1E0C809B0];
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_18F5C5764;
      *(_QWORD *)&buf[24] = &unk_1E2990F88;
      v82 = v32;
      v83 = v14;
      *(_QWORD *)&buf[32] = v67;
      CLConnectionClient::setDefaultMessageHandler();
      sub_18F5D5990(&v70, "kCLConnectionMessageHeading");
      *(_QWORD *)block = v33;
      *(_QWORD *)&block[8] = 3221225472;
      *(_QWORD *)&block[16] = sub_18F5BAE1C;
      v77 = &unk_1E2990F88;
      v79 = v32;
      v80 = v14;
      v78 = v67;
      CLConnectionClient::setHandlerForMessage();
      if (SHIBYTE(v71) < 0)
        operator delete((void *)v70.__sig);
      v70.__sig = v33;
      *(_QWORD *)v70.__opaque = 3221225472;
      v71 = sub_18F5D57B8;
      v72 = &unk_1E2990FB0;
      v74 = v14;
      v75 = v32;
      v73 = v67;
      CLConnectionClient::setInterruptionHandler();
      aBlock[0] = v33;
      aBlock[1] = 3221225472;
      aBlock[2] = sub_18F5D5980;
      aBlock[3] = &unk_1E2990FD8;
      aBlock[4] = v67;
      *(_QWORD *)(v14 + 336) = _Block_copy(aBlock);
      CLConnectionClient::start(*(CLConnectionClient **)(v14 + 320));
      _Block_object_dispose(v67, 8);
    }
    os_activity_scope_leave(&state);
    v34 = *(pthread_mutex_t **)(v14 + 240);
    *(_QWORD *)&buf[8] = v34;
    pthread_mutex_lock(v34);
    *(_WORD *)&buf[16] = 257;
    sub_18F5C9250(block);
    v35 = *(_QWORD *)(v14 + 360);
    if (v35)
      sub_18F5CB790((uint64_t)block, "kCLConnectionMessageBundleIdentifierKey", v35);
    v36 = *(_QWORD *)(v14 + 368);
    if (v36)
      sub_18F5CB790((uint64_t)block, "kCLConnectionMessageBundlePathKey", v36);
    v37 = *(_QWORD *)(v14 + 376);
    if (v37)
      sub_18F5CB790((uint64_t)block, "kCLConnectionMessageSubidentityKey", v37);
    LOBYTE(v70.__sig) = dyld_program_sdk_at_least();
    sub_18F5C8F74((uint64_t)block, "kCLConnectionMessageClientSDKAtLeast2014Key", &v70);
    LOBYTE(v70.__sig) = dyld_program_sdk_at_least();
    sub_18F5C8F74((uint64_t)block, "kCLConnectionMessageClientSDKAtLeast2017Key", &v70);
    LOBYTE(v70.__sig) = dyld_program_sdk_at_least();
    sub_18F5C8F74((uint64_t)block, "kCLConnectionMessageClientSDKAtLeast2019Key", &v70);
    sub_18F5C7BB4(v14, "LocationManager/kCLConnectionMessageRegistration", (uint64_t)block);
    sub_18F5C6360(block);
    pthread_mutex_unlock(v34);
    pthread_mutex_unlock(v18);
  }
  return v14;
}

void sub_18F5C5678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  sub_18F5CE240((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_18F5C5764(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  CLConnectionMessage *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  NSSet *v15;
  const __CFDictionary *DictionaryOfClasses;
  uint64_t v17;
  const char *v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  NSObject *v25;
  __int128 *p_dst;
  void *v27;
  uint64_t v28;
  int v29;
  _QWORD *v33;
  int v34;
  _QWORD *v35;
  int v36;
  char *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 *v40;
  char *v41;
  pthread_mutex_t *v42;
  __int128 __dst;
  uint64_t v44;
  _QWORD v45[2];
  int v46;
  __int128 *v47;
  uint8_t buf[16];
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v42 = (pthread_mutex_t *)a1[5];
  pthread_mutex_lock(v42);
  if (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
    goto LABEL_3;
  v4 = (const void *)a1[6];
  if (_CFIsDeallocating())
    goto LABEL_3;
  CFRetain(v4);
  v6 = *(CLConnectionMessage **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (void *)MEMORY[0x1E0C99E60];
  v10 = objc_opt_class();
  v11 = objc_opt_class();
  v12 = objc_opt_class();
  v15 = (NSSet *)objc_msgSend_setWithObjects_(v9, v13, v10, v14, v11, v12, 0, v6, v5);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(v6, v15);
  sub_18F5C639C(v45, DictionaryOfClasses);
  v17 = 0;
  v18 = "LocationManager/kCLConnectionMessageRegistration";
  do
  {
    v19 = (char *)CLConnectionMessage::name(v6);
    v20 = strlen(v18);
    if (v19[23] < 0)
    {
      if (v20 != *((_QWORD *)v19 + 1))
        goto LABEL_15;
      if (v20 == -1)
        sub_18F5D5AC8();
      v19 = *(char **)v19;
LABEL_14:
      if (memcmp(v19, v18, v20))
        goto LABEL_15;
      v23 = CLConnectionMessage::name(v6);
      if (*(char *)(v23 + 23) < 0)
      {
        sub_18F5C6990(buf, *(void **)v23, *(_QWORD *)(v23 + 8));
      }
      else
      {
        v24 = *(_OWORD *)v23;
        v49 = *(_QWORD *)(v23 + 16);
        *(_OWORD *)buf = v24;
      }
      v28 = CLConnectionMessage::name(v6);
      v29 = *(char *)(v28 + 23);
      if (v29 < 0)
      {
        if (*(_QWORD *)(v28 + 8) != 28)
          goto LABEL_46;
        v28 = *(_QWORD *)v28;
      }
      else if (v29 != 28)
      {
        goto LABEL_46;
      }
      if (*(_QWORD *)v28 == 0x656E6E6F434C436BLL
        && *(_QWORD *)(v28 + 8) == 0x73654D6E6F697463
        && *(_QWORD *)(v28 + 16) == 0x61636F4C65676173
        && *(_DWORD *)(v28 + 24) == 1852795252)
      {
        goto LABEL_58;
      }
LABEL_46:
      v33 = (_QWORD *)CLConnectionMessage::name(v6);
      v34 = *((char *)v33 + 23);
      if (v34 < 0)
      {
        if (v33[1] != 39)
          goto LABEL_52;
        v33 = (_QWORD *)*v33;
      }
      else if (v34 != 39)
      {
        goto LABEL_52;
      }
      if (!memcmp(v33, "kCLConnectionMessageCompensatedLocation", 0x27uLL))
      {
LABEL_58:
        v37 = (char *)CLConnectionMessage::name(v6);
        sub_18F5C6A1C((uint64_t)v45, "kCLClientEventKey", v37);
        goto LABEL_59;
      }
LABEL_52:
      v35 = (_QWORD *)CLConnectionMessage::name(v6);
      v36 = *((char *)v35 + 23);
      if (v36 < 0)
      {
        if (v35[1] != 45)
          goto LABEL_59;
        v35 = (_QWORD *)*v35;
      }
      else if (v36 != 45)
      {
        goto LABEL_59;
      }
      if (!memcmp(v35, "kCLConnectionMessageSignificantLocationChange", 0x2DuLL))
        goto LABEL_58;
LABEL_59:
      sub_18F5C6578((uint64_t)v4, dword_18F771D30[v17], v45[1]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        goto LABEL_62;
      v27 = *(void **)buf;
      goto LABEL_61;
    }
    if (v20 == v19[23])
      goto LABEL_14;
LABEL_15:
    v18 = off_1E2990FF8[++v17];
  }
  while (v17 != 26);
  v21 = CLConnectionMessage::name(v6);
  if (*(char *)(v21 + 23) < 0)
  {
    sub_18F5C6990(&__dst, *(void **)v21, *(_QWORD *)(v21 + 8));
  }
  else
  {
    v22 = *(_OWORD *)v21;
    v44 = *(_QWORD *)(v21 + 16);
    __dst = v22;
  }
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v25 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
  {
    p_dst = &__dst;
    if (v44 < 0)
      p_dst = (__int128 *)__dst;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = p_dst;
    _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_FAULT, "Got unhandled message %s from daemon", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v40 = &__dst;
    if (v44 < 0)
      v40 = (__int128 *)__dst;
    v46 = 136315138;
    v47 = v40;
    v41 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "void _CLClientHandleMessage(CLClientRef, std::shared_ptr<CLConnectionMessage>)", "CoreLocation: %s\n", v41);
    if (v41 != (char *)buf)
      free(v41);
  }
  if (SHIBYTE(v44) < 0)
  {
    v27 = (void *)__dst;
LABEL_61:
    operator delete(v27);
  }
LABEL_62:
  sub_18F5C6360(v45);
  if (v5)
  {
    v38 = (unint64_t *)&v5->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  CFRelease(v4);
LABEL_3:
  pthread_mutex_unlock(v42);
}

void sub_18F5C5CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a22 < 0)
    operator delete(__p);
  sub_18F5C6360(&a24);
  sub_18F5D6004((uint64_t)&a12);
  sub_18F5CE240((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t CLClientGetLocation(uint64_t a1, const __CFDictionary *a2, _OWORD *a3)
{
  pthread_mutex_t *v6;
  int v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  BOOL v15;
  _BYTE v16[32];
  __int128 v17;
  _BYTE v18[32];
  __int128 v19;
  _BYTE v20[32];
  _OWORD v21[2];
  _QWORD v22[4];
  __int16 v23;

  v6 = *(pthread_mutex_t **)(a1 + 240);
  v22[3] = v6;
  pthread_mutex_lock(v6);
  v23 = 257;
  if (a3)
  {
    sub_18F5C639C(v22, a2);
    *(_OWORD *)v20 = xmmword_18F7733D0;
    *(_OWORD *)&v20[16] = unk_18F7733E0;
    memset(v21, 0, 28);
    v17 = xmmword_18F773390;
    *(_OWORD *)v18 = unk_18F7733A0;
    *(_OWORD *)&v18[16] = xmmword_18F7733B0;
    v19 = unk_18F7733C0;
    *(_OWORD *)v16 = xmmword_18F773370;
    *(_OWORD *)&v16[16] = unk_18F773380;
    v15 = 0;
    sub_18F5C6FDC(v16, (uint64_t)v22);
    if (*(_DWORD *)(a1 + 20) == 3)
    {
      v7 = sub_18F5C7D34((uint64_t)v22, "IsFitnessMatch", &v15);
      v8 = v15 ? 0 : v7;
      if (v8 == 1 && (*(double *)&v20[4] != 0.0 || *(double *)&v20[12] != 0.0 || *(double *)&v20[20] != -1.0))
      {
        *(_OWORD *)&v16[4] = *(_OWORD *)&v20[4];
        DWORD1(v21[0]) = DWORD2(v21[0]);
        *(_QWORD *)&v18[12] = *(_QWORD *)&v20[20];
      }
    }
    if (*(double *)&v16[20] >= 0.0)
    {
      v10 = *(_OWORD *)&v20[16];
      a3[6] = *(_OWORD *)v20;
      a3[7] = v10;
      a3[8] = v21[0];
      *(_OWORD *)((char *)a3 + 140) = *(_OWORD *)((char *)v21 + 12);
      v11 = *(_OWORD *)v18;
      a3[2] = v17;
      a3[3] = v11;
      v12 = v19;
      a3[4] = *(_OWORD *)&v18[16];
      a3[5] = v12;
      v13 = *(_OWORD *)&v16[16];
      v9 = 1;
      *a3 = *(_OWORD *)v16;
      a3[1] = v13;
    }
    else
    {
      v9 = 0;
    }
    sub_18F5C6360(v22);
  }
  else
  {
    v9 = 0;
  }
  pthread_mutex_unlock(v6);
  return v9;
}

void sub_18F5C5EC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18F5CE240(v1 - 72);
  _Unwind_Resume(a1);
}

void *copyLocationsFromLocationMessagePayload(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  _OWORD *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  const char *v34;
  uint64_t v35;
  char *v36;
  CLLocation *v37;
  const char *v38;
  CLLocation *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  void *v57;
  char *v59;
  char *v60;
  _OWORD v61[8];
  _BYTE v62[28];
  uint8_t buf[1640];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend_objectForKey_(a1, a2, (uint64_t)CFSTR("LocationCount"), a4);
  v9 = objc_msgSend_integerValue(v5, v6, v7, v8);
  v12 = (void *)objc_msgSend_objectForKey_(a1, v10, (uint64_t)CFSTR("Locations"), v11);
  v15 = (void *)objc_msgSend_objectForKey_(a1, v13, (uint64_t)CFSTR("LocationsPrivate"), v14);
  v18 = objc_msgSend_objectForKey_(a1, v16, (uint64_t)CFSTR("CoarseMetaData"), v17);
  if (v12)
  {
    v22 = v18;
    if (objc_msgSend_length(v12, v19, v20, v21) == 156 * v9
      && (!v15 || objc_msgSend_length(v15, v23, v24, v25) == 560 * v9))
    {
      if (v22)
      {
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E2992FA8);
        v26 = qword_1ECD8E750;
        if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v26, OS_LOG_TYPE_DEBUG, "Encoded coarse meta data found", buf, 2u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECD8E758 != -1)
            dispatch_once(&qword_1ECD8E758, &unk_1E2992FA8);
          LOWORD(v61[0]) = 0;
          v59 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "NSArray * _Nonnull copyLocationsFromLocationMessagePayload(NSDictionary * _Nonnull)", "CoreLocation: %s\n", v59);
          if (v59 != (char *)buf)
            free(v59);
        }
        if (v9 > 1)
        {
          if (qword_1ECD8E758 != -1)
            dispatch_once(&qword_1ECD8E758, &unk_1E2992FA8);
          v27 = qword_1ECD8E750;
          if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v27, OS_LOG_TYPE_FAULT, "CLLocationManager should not get multile locations with coarseMetaData", buf, 2u);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1ECD8E758 != -1)
              dispatch_once(&qword_1ECD8E758, &unk_1E2992FA8);
            LOWORD(v61[0]) = 0;
            v60 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "NSArray * _Nonnull copyLocationsFromLocationMessagePayload(NSDictionary * _Nonnull)", "CoreLocation: %s\n", v60);
            if (v60 != (char *)buf)
              free(v60);
          }
        }
      }
      v28 = (_OWORD *)objc_msgSend_bytes(v12, v23, v24, v25);
      v32 = objc_msgSend_bytes(v15, v29, v30, v31);
      v33 = objc_alloc(MEMORY[0x1E0C99DE8]);
      v12 = (void *)objc_msgSend_initWithCapacity_(v33, v34, v9, v35);
      if (v9 >= 1)
      {
        v36 = (char *)v32;
        do
        {
          v37 = [CLLocation alloc];
          v39 = v37;
          v40 = v28[1];
          if (v32)
          {
            v61[0] = *v28;
            v61[1] = v40;
            v41 = v28[2];
            v42 = v28[3];
            v43 = v28[5];
            v61[4] = v28[4];
            v61[5] = v43;
            v61[2] = v41;
            v61[3] = v42;
            v44 = v28[6];
            v45 = v28[7];
            v46 = v28[8];
            *(_OWORD *)&v62[12] = *(_OWORD *)((char *)v28 + 140);
            v61[7] = v45;
            *(_OWORD *)v62 = v46;
            v61[6] = v44;
            memcpy(buf, v36, 0x230uLL);
            v48 = objc_msgSend_initWithClientLocation_clientLocationPrivate_coarseMetaData_(v39, v47, (uint64_t)v61, (uint64_t)buf, v22);
          }
          else
          {
            *(_OWORD *)buf = *v28;
            *(_OWORD *)&buf[16] = v40;
            v51 = v28[2];
            v52 = v28[3];
            v53 = v28[5];
            *(_OWORD *)&buf[64] = v28[4];
            *(_OWORD *)&buf[80] = v53;
            *(_OWORD *)&buf[32] = v51;
            *(_OWORD *)&buf[48] = v52;
            v54 = v28[6];
            v55 = v28[7];
            v56 = v28[8];
            *(_OWORD *)&buf[140] = *(_OWORD *)((char *)v28 + 140);
            *(_OWORD *)&buf[112] = v55;
            *(_OWORD *)&buf[128] = v56;
            *(_OWORD *)&buf[96] = v54;
            v48 = objc_msgSend_initWithClientLocation_coarseMetaData_(v37, v38, (uint64_t)buf, v22);
          }
          v57 = (void *)v48;
          objc_msgSend_addObject_(v12, v49, v48, v50);

          v36 += 560;
          v28 = (_OWORD *)((char *)v28 + 156);
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      return 0;
    }
  }
  return v12;
}

_QWORD *sub_18F5C6360(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E298ED18;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *sub_18F5C639C(_QWORD *a1, CFDictionaryRef theDict)
{
  const __CFAllocator *v3;
  CFMutableDictionaryRef MutableCopy;
  NSObject *v5;
  char *v7;
  uint8_t buf[1640];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *a1 = &off_1E298ED18;
  a1[1] = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(v3, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  a1[1] = MutableCopy;
  if (!MutableCopy)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v5 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_FAULT, "could not create new mutable dictionary", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v7 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "CLNameValuePair::CLNameValuePair(CFDictionaryRef)", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
  }
  return a1;
}

uint64_t sub_18F5C6578(uint64_t a1, int a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  char *v15;
  double *v16;
  double **v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  char *v23;
  _QWORD v24[6];
  int v25;
  pthread_mutex_t *v26;
  __int16 v27;
  int v28;
  int v29;
  uint8_t buf[4];
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = *(pthread_mutex_t **)(a1 + 240);
  v26 = v6;
  pthread_mutex_lock(v6);
  v27 = 257;
  if (!*(_BYTE *)(a1 + 225))
  {
    v7 = *(_QWORD **)(a1 + 328);
    v8 = v7[2];
    if (v8)
      v9 = *(double *)(*v7 + 16);
    else
      v9 = 0.0;
    v10 = mach_continuous_time();
    if (v8)
      v11 = v10 - (unint64_t)v9 > 0x37E11D600;
    else
      v11 = 0;
    if (!v11)
    {
      v12 = *(_QWORD *)(a1 + 328);
LABEL_25:
      v16 = (double *)operator new(0x18uLL);
      v16[2] = (double)v10;
      *(_QWORD *)v16 = v12;
      v17 = *(double ***)(v12 + 8);
      *((_QWORD *)v16 + 1) = v17;
      *v17 = v16;
      v18 = *(_QWORD *)(v12 + 16) + 1;
      *(_QWORD *)(v12 + 8) = v16;
      *(_QWORD *)(v12 + 16) = v18;
      CFRetain((CFTypeRef)a1);
      v19 = *(void **)(a1 + 232);
      v24[0] = MEMORY[0x1E0C809B0];
      v24[1] = 3221225472;
      v24[2] = sub_18F5C3748;
      v24[3] = &unk_1E2990E08;
      v25 = a2;
      v24[4] = a3;
      v24[5] = a1;
      objc_msgSend_async_(v19, v20, (uint64_t)v24, v21);
      return pthread_mutex_unlock(v6);
    }
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v13 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_DEFAULT, "Location callback block not executed in a timely manner!", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
      LOWORD(v28) = 0;
      v23 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLClientInvokeCallback(CLClientRef, CLClientEvent, id)", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
    v12 = *(_QWORD *)(a1 + 328);
    if (*(_QWORD *)(v12 + 16) < 0xBuLL)
      goto LABEL_25;
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v14 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67174657;
      v31 = a2;
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_FAULT, "Discarding message for event %{private}d because of too many unprocessed messages", buf, 8u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
      v28 = 67174657;
      v29 = a2;
      v15 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void CLClientInvokeCallback(CLClientRef, CLClientEvent, id)", "CoreLocation: %s\n", v15);
      if (v15 != (char *)buf)
        free(v15);
    }
  }
  return pthread_mutex_unlock(v6);
}

void sub_18F5C6960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_18F5C6990(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_18F5D5A40();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

BOOL sub_18F5C6A1C(uint64_t a1, const char *a2, char *a3)
{
  const __CFString *v5;
  char *v6;
  _BOOL8 v7;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  if (a3[23] >= 0)
    v6 = a3;
  else
    v6 = *(char **)a3;
  v7 = sub_18F5C6A90(a1, v5, v6);
  if (v5)
    CFRelease(v5);
  return v7;
}

BOOL sub_18F5C6A90(uint64_t a1, const __CFString *a2, char *cStr)
{
  CFStringRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const char *)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

uint64_t sub_18F5C6D00(CFMutableDictionaryRef *a1, const void *a2, const void *a3)
{
  CFDictionarySetValue(a1[1], a2, a3);
  return (*((uint64_t (**)(CFMutableDictionaryRef *))*a1 + 106))(a1);
}

uint64_t CLClientGetAuthorizationStatusAndCorrectiveCompensation(CFDictionaryRef theDict, _DWORD *a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t v7;
  __int16 v9;
  int v10;
  _QWORD v11[2];

  sub_18F5C639C(v11, theDict);
  v10 = 0;
  v9 = 0;
  if (sub_18F5C71C0((uint64_t)v11, "kCLConnectionMessageStatusKey", &v10)
    && sub_18F5C7D34((uint64_t)v11, "kCLConnectionMessageCompensationKey", (BOOL *)&v9)
    && sub_18F5C7D34((uint64_t)v11, "kCLConnectionMessageAuthorizedForWidgetUpdatesKey", (BOOL *)&v9 + 1))
  {
    *a2 = v10;
    *a3 = v9;
    *a4 = HIBYTE(v9);
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  sub_18F5C6360(v11);
  return v7;
}

void sub_18F5C6FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5C6FDC(_OWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  int v6;
  const UInt8 *BytePtr;
  const UInt8 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  CFDataRef theData;

  a1[6] = xmmword_18F7733D0;
  a1[7] = unk_18F7733E0;
  a1[8] = xmmword_18F7733F0;
  *(_OWORD *)((char *)a1 + 140) = *(__int128 *)((char *)&xmmword_18F7733F0 + 12);
  a1[2] = xmmword_18F773390;
  a1[3] = unk_18F7733A0;
  a1[4] = xmmword_18F7733B0;
  a1[5] = unk_18F7733C0;
  *a1 = xmmword_18F773370;
  a1[1] = unk_18F773380;
  theData = 0;
  v16 = 0;
  v4 = sub_18F5C70F0(a2, "Locations", (CFTypeRef *)&theData, 0xFFFFFFFFLL);
  result = 0;
  if (v4)
  {
    v6 = sub_18F5C71C0(a2, "LocationCount", &v16);
    result = 0;
    if (v6)
    {
      if (v16 >= 1)
      {
        BytePtr = CFDataGetBytePtr(theData);
        v8 = &BytePtr[156 * v16];
        v9 = *(_OWORD *)(v8 - 140);
        *a1 = *(_OWORD *)(v8 - 156);
        a1[1] = v9;
        v10 = *(_OWORD *)(v8 - 108);
        v11 = *(_OWORD *)(v8 - 76);
        v12 = *(_OWORD *)(v8 - 124);
        a1[4] = *(_OWORD *)(v8 - 92);
        a1[5] = v11;
        a1[2] = v12;
        a1[3] = v10;
        v13 = *(_OWORD *)(v8 - 44);
        v14 = *(_OWORD *)(v8 - 28);
        v15 = *(_OWORD *)(v8 - 60);
        *(_OWORD *)((char *)a1 + 140) = *((_OWORD *)v8 - 1);
        a1[7] = v13;
        a1[8] = v14;
        a1[6] = v15;
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_18F5C70F0(uint64_t a1, const char *a2, CFTypeRef *a3, uint64_t a4)
{
  CFStringRef v7;
  uint64_t v8;

  v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  *a3 = 0;
  v8 = (*(uint64_t (**)(uint64_t, CFStringRef, CFTypeRef *, uint64_t))(*(_QWORD *)a1 + 904))(a1, v7, a3, a4);
  if ((_DWORD)v8 && *a3)
    CFAutorelease(*a3);
  if (v7)
    CFRelease(v7);
  return v8;
}

uint64_t sub_18F5C717C(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;

  *a3 = 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 904))(a1);
  if ((_DWORD)v4 && *a3)
    CFAutorelease(*a3);
  return v4;
}

uint64_t sub_18F5C71C0(uint64_t a1, const char *a2, _DWORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F5C7230(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F5C7230(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  CFTypeRef cf;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_18F5C79B4(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v7 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v18 = v8;
      v19 = 2112;
      v20 = a2;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v13 = 138412546;
      v14 = v10;
      v15 = 2112;
      v16 = a2;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, int &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_18F5C7468(uint64_t a1, const __CFString *a2, uint64_t *a3, int a4)
{
  uint64_t result;
  CFTypeID v8;
  CFIndex v9;
  const void *ValueAtIndex;
  NSObject *v11;
  CFTypeID v12;
  _BYTE *v13;
  CFTypeID v14;
  void **v15;
  char *v16;
  NSObject *v17;
  int v18;
  _BYTE *v19;
  CFIndex Count;
  _BYTE *v21;
  int v22;
  void **v23;
  CFIndex v24;
  void **v25;
  void *v26[2];
  char v27;
  CFTypeRef cf;
  _BYTE __p[18];
  __int16 v30;
  CFIndex v31;
  uint8_t buf[4];
  _BYTE v33[14];
  __int16 v34;
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  cf = 0;
  result = (*(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a1 + 912))(a1, a2, &cf);
  if ((_DWORD)result)
  {
    *a3 = 0;
    v8 = CFGetTypeID(cf);
    if (v8 == CFArrayGetTypeID())
    {
      v9 = a4 & ~(a4 >> 31);
      if (CFArrayGetCount((CFArrayRef)cf) > v9)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v9);
LABEL_34:
        *a3 = (uint64_t)ValueAtIndex;
        CFRetain(ValueAtIndex);
        CFRelease(cf);
        return 1;
      }
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v17 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
      {
        sub_18F661274(a2, (uint64_t)__p);
        v18 = SBYTE3(v31);
        v19 = *(_BYTE **)__p;
        Count = CFArrayGetCount((CFArrayRef)cf);
        v21 = __p;
        *(_DWORD *)buf = 136446722;
        if (v18 < 0)
          v21 = v19;
        *(_QWORD *)v33 = v21;
        *(_WORD *)&v33[8] = 1026;
        *(_DWORD *)&v33[10] = v9;
        v34 = 2050;
        v35 = (_BYTE *)Count;
        _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_FAULT, "specified index is out of range for key %{public}s (%{public}d of %{public}ld)", buf, 0x1Cu);
        if (SBYTE3(v31) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_31;
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)v26);
      v22 = v27;
      v23 = (void **)v26[0];
      v24 = CFArrayGetCount((CFArrayRef)cf);
      v25 = v26;
      *(_DWORD *)__p = 136446722;
      if (v22 < 0)
        v25 = v23;
      *(_QWORD *)&__p[4] = v25;
      *(_WORD *)&__p[12] = 1026;
      *(_DWORD *)&__p[14] = v9;
      v30 = 2050;
      v31 = v24;
      v16 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0)
        operator delete(v26[0]);
    }
    else
    {
      if (a4 < 1)
      {
        ValueAtIndex = cf;
        goto LABEL_34;
      }
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v11 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
      {
        v12 = CFGetTypeID(cf);
        sub_18F661274(a2, (uint64_t)__p);
        v13 = (v31 & 0x80000000) == 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 67240706;
        *(_DWORD *)v33 = a4;
        *(_WORD *)&v33[4] = 2050;
        *(_QWORD *)&v33[6] = v12;
        v34 = 2082;
        v35 = v13;
        _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_FAULT, "specified index %{public}d not applicable to type %{public}lu for key %{public}s", buf, 0x1Cu);
        if (SBYTE3(v31) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_31;
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v14 = CFGetTypeID(cf);
      sub_18F661274(a2, (uint64_t)v26);
      if (v27 >= 0)
        v15 = v26;
      else
        v15 = (void **)v26[0];
      *(_DWORD *)__p = 67240706;
      *(_DWORD *)&__p[4] = a4;
      *(_WORD *)&__p[8] = 2050;
      *(_QWORD *)&__p[10] = v14;
      v30 = 2082;
      v31 = (CFIndex)v15;
      v16 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0)
        operator delete(v26[0]);
    }
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::copyInternal(CFStringRef, CFTypeRef &, int) const", "CoreLocation: %s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
LABEL_31:
    CFRelease(cf);
    result = *a3;
    if (*a3)
    {
      CFRelease((CFTypeRef)result);
      return 0;
    }
  }
  return result;
}

void sub_18F5C793C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_18F5C7974(uint64_t a1, const void *a2, _QWORD *a3)
{
  const void *Value;
  const void *v5;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), a2);
  v5 = Value;
  *a3 = Value;
  if (Value)
    CFRetain(Value);
  return v5 != 0;
}

uint64_t sub_18F5C79B4(const void *a1, _DWORD *a2)
{
  CFTypeID v4;
  NSObject *v5;
  int v6;
  uint64_t result;
  char *v8;
  CFTypeID v9;
  CFTypeID TypeID;
  uint8_t buf[1640];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    buf[0] = 0;
    v9 = CFGetTypeID(a1);
    TypeID = CFBooleanGetTypeID();
    result = 0;
    if (v9 != TypeID)
      return result;
    result = sub_18F5C7FDC(a1, (BOOL *)buf);
    if (!(_DWORD)result)
      return result;
    *a2 = buf[0];
    return 1;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, a2))
    return 1;
  if (qword_1ECD8E728 != -1)
    dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
  v5 = off_1ECD8E720;
  if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  v6 = sub_18F5C4AE0(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, int &)", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
    return 0;
  }
  return result;
}

void sub_18F5C7BB4(uint64_t a1, char *a2, uint64_t a3)
{
  pthread_mutex_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  pthread_mutex_t *v18;
  __int16 v19;
  char *v20;

  v20 = a2;
  v5 = *(pthread_mutex_t **)(a1 + 240);
  v18 = v5;
  pthread_mutex_lock(v5);
  v19 = 257;
  if (*(_BYTE *)(a1 + 225))
  {
LABEL_2:
    pthread_mutex_unlock(v5);
    return;
  }
  v14 = *(_QWORD *)(a3 + 8);
  sub_18F5D5B50(&v20, &v14, &v15);
  if (*(_QWORD *)(a1 + 320))
  {
    v13 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v13)
    {
      v8 = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (HIBYTE(v19))
  {
    if (!(_BYTE)v19)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
      return;
    }
    v5 = v18;
    goto LABEL_2;
  }
}

void sub_18F5C7D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  sub_18F5D6004((uint64_t)&a9);
  sub_18F5D6004((uint64_t)&a12);
  sub_18F5CE240((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5C7D34(uint64_t a1, const char *a2, BOOL *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F5C7DA4(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F5C7DA4(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  CFTypeRef cf;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_18F5C7FDC(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v7 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v18 = v8;
      v19 = 2112;
      v20 = a2;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v13 = 138412546;
      v14 = v10;
      v15 = 2112;
      v16 = a2;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, BOOL &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_18F5C7FDC(const void *a1, BOOL *a2)
{
  CFTypeID v4;

  v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID() && v4 != CFNumberGetTypeID())
    return 0;
  *a2 = CFBooleanGetValue((CFBooleanRef)a1) != 0;
  return 1;
}

_QWORD *CLClientStartHeadingUpdates(uint64_t a1, int a2, double a3)
{
  double v6;
  char v8;
  _QWORD v9[2];

  if ((*(_BYTE *)(a1 + 392) & 2) != 0)
  {
    entr_act_modify();
  }
  else
  {
    entr_act_begin();
    *(_BYTE *)(a1 + 392) |= 2u;
  }
  entr_act_set();
  v6 = -1.0;
  if (a3 > 0.0)
    v6 = a3;
  *(double *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 40) = a2;
  if ((a2 - 1) <= 3)
    *(_QWORD *)(a1 + 48) = qword_18F771DE8[a2 - 1];
  if (!*(_BYTE *)(a1 + 24))
  {
    *(_WORD *)(a1 + 24) = 257;
    *(_QWORD *)(a1 + 144) = 0xBFF0000000000000;
  }
  sub_18F5C9250(v9);
  v8 = 1;
  sub_18F5C8F74((uint64_t)v9, "kCLConnectionMessageSubscribeKey", &v8);
  sub_18F5C96E8((uint64_t)v9, "kCLConnectionMessageHeadingFilterKey", (const void *)(a1 + 32));
  sub_18F5C7BB4(a1, "kCLConnectionMessageHeading", (uint64_t)v9);
  return sub_18F5C6360(v9);
}

void sub_18F5C8188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLClientIsHeadingAvailable()
{
  char v0;
  uint64_t v1;

  v0 = sub_18F5C81CC();
  v1 = v0 & 1;
  if ((v0 & 1) != 0)
    sub_18F5CC0B8();
  return v1;
}

uint64_t sub_18F5C81CC()
{
  uint64_t result;
  int v1;
  BOOL v2;
  unsigned int v3;
  NSObject *v4;
  int v5;
  char *v6;
  NSObject *v7;
  int v8;
  uint8_t buf[4];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  result = 0;
  v1 = dword_1ECD8F748;
  switch(dword_1ECD8F748)
  {
    case 0:
    case 259:
      if (qword_1EE1720C8 != -1)
        dispatch_once(&qword_1EE1720C8, &unk_1E2991F10);
      v7 = qword_1EE1720D0;
      if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v10 = v1;
        _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_ERROR, "Unsupported HW type %d; file a radar to CoreMotion Factory | 1.0",
          buf,
          8u);
      }
      v8 = sub_18F5C4AE0(115, 0);
      result = 0;
      if (v8)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE1720C8 != -1)
          goto LABEL_36;
        goto LABEL_15;
      }
      break;
    case 2:
    case 3:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 37:
    case 38:
    case 40:
    case 41:
    case 43:
    case 52:
    case 81:
    case 83:
    case 85:
    case 87:
      if (qword_1EE1720C8 != -1)
        dispatch_once(&qword_1EE1720C8, &unk_1E2991F10);
      v4 = qword_1EE1720D0;
      if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        v10 = v1;
        _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_FAULT, "Old hardware,%d is not supported", buf, 8u);
      }
      v5 = sub_18F5C4AE0(115, 0);
      result = 0;
      if (v5)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE1720C8 != -1)
LABEL_36:
          dispatch_once(&qword_1EE1720C8, &unk_1E2991F10);
LABEL_15:
        v6 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "static CLPlatformInfo::MotionProviders CLPlatformInfo::motionProviders()", "CoreLocation: %s\n", v6);
        if (v6 != (char *)buf)
          free(v6);
        result = 0;
      }
      break;
    case 6:
    case 60:
    case 61:
    case 196:
      result = 4;
      break;
    case 24:
    case 25:
    case 27:
    case 28:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 78:
    case 79:
    case 80:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 168:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 176:
    case 177:
    case 217:
      result = 31;
      break;
    case 26:
      result = 15;
      break;
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 62:
    case 63:
    case 64:
    case 65:
    case 76:
    case 77:
    case 134:
    case 135:
    case 136:
    case 137:
    case 144:
    case 145:
    case 146:
    case 147:
    case 154:
    case 155:
    case 156:
    case 157:
    case 161:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
      result = 23;
      break;
    case 39:
    case 42:
    case 148:
    case 149:
    case 191:
    case 192:
    case 193:
    case 194:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
      result = 6;
      break;
    case 50:
    case 51:
    case 66:
    case 67:
    case 74:
    case 75:
    case 82:
    case 84:
    case 86:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 150:
    case 151:
    case 152:
    case 153:
      if (qword_1ECD8F7E8 != -1)
        dispatch_once(&qword_1ECD8F7E8, &unk_1E2991ED0);
      v2 = byte_1ECD8F747 == 0;
      v3 = 22;
      goto LABEL_21;
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 258:
      if (qword_1ECD8F7E8 != -1)
        dispatch_once(&qword_1ECD8F7E8, &unk_1E2991ED0);
      v2 = byte_1ECD8F747 == 0;
      v3 = 54;
LABEL_21:
      if (v2)
        result = v3;
      else
        result = v3 + 1;
      break;
    case 169:
    case 175:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
      result = 63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t CLClientInvalidate(uint64_t a1)
{
  pthread_mutex_t *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  _QWORD v8[7];
  __int16 v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(pthread_mutex_t **)(a1 + 240);
  v8[6] = v2;
  pthread_mutex_lock(v2);
  v9 = 257;
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v3 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2050;
    v15 = a1;
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"invalidating client\", \"client\":\"%{public}p\"}", buf, 0x1Cu);
  }
  CLClientShowHeadingCalibration(a1, 0);
  CFRetain((CFTypeRef)a1);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_18F5B5FF8;
  v8[3] = &unk_1E29910D0;
  v8[4] = a1;
  dispatch_async(MEMORY[0x1E0C80D38], v8);
  v4 = *(_QWORD *)(a1 + 336);
  if (v4)
  {
    (*(void (**)(void))(v4 + 16))();
    _Block_release(*(const void **)(a1 + 336));
    *(_QWORD *)(a1 + 336) = 0;
  }
  if (*(_QWORD *)(a1 + 320))
  {
    v5 = MEMORY[0x194002B2C]();
    MEMORY[0x194002D30](v5, 0xB0C40BC2CC919);
    *(_QWORD *)(a1 + 320) = 0;
  }
  if (*(_QWORD *)(a1 + 264))
  {
    v6 = *(void (**)(void))(a1 + 280);
    if (v6)
      v6();
  }
  bzero((void *)(a1 + 256), 0x28uLL);
  *(_BYTE *)(a1 + 225) = 1;
  return pthread_mutex_unlock(v2);
}

void sub_18F5C874C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_18F5D57A8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t CLClientShowHeadingCalibration(uint64_t a1, int a2)
{
  pthread_mutex_t *v4;
  NSObject *v5;
  _BOOL4 v6;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  NSObject *v10;
  char *v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  _BOOL4 v18;
  __int16 v19;
  _BOOL4 v20;
  __int16 v21;
  _BOOL4 v22;
  __int16 v23;
  _BOOL4 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (pthread_mutex_t *)(a1 + 160);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 160));
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v5 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_INFO))
  {
    v6 = *(_BYTE *)(a1 + 25) != 0;
    v7 = *(unsigned __int8 *)(a1 + 24);
    v8 = *(_BYTE *)(a1 + 18) != 0;
    *(_DWORD *)buf = 68290050;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 1026;
    v18 = a2 != 0;
    v19 = 1026;
    v20 = v6;
    v21 = 1026;
    v22 = v8;
    v23 = 1026;
    v24 = v7 != 0;
    _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLClientShowHeadingCalibration\", \"showHeadingCal\":%{public}hhd, \"isHeadingCalibrated\":%{public}hhd, \"isApplicationActive\":%{public}hhd, \"isUpdatingHeading\":%{public}hhd}", buf, 0x2Au);
  }
  if ((sub_18F5CB6F4() & 0x10) != 0)
    goto LABEL_17;
  if (!a2)
    goto LABEL_9;
  if (!*(_BYTE *)(a1 + 18))
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v10 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v10, OS_LOG_TYPE_INFO, "Application inactive, will not show heading calibration", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
      v12 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "Boolean CLClientShowHeadingCalibration(CLClientRef, Boolean)", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
LABEL_17:
    v9 = 0;
    goto LABEL_18;
  }
  if (*(_BYTE *)(a1 + 25) || !*(_BYTE *)(a1 + 24))
  {
LABEL_9:
    if (*(_BYTE *)(a1 + 224))
    {
      sub_18F66ACD8();
      *(_BYTE *)(a1 + 224) = 0;
    }
    goto LABEL_11;
  }
  if (*(_BYTE *)(a1 + 224))
  {
LABEL_11:
    v9 = 1;
    goto LABEL_18;
  }
  v9 = 1;
  if (sub_18F66AA00())
    *(_BYTE *)(a1 + 224) = 1;
LABEL_18:
  pthread_mutex_unlock(v4);
  return v9;
}

void sub_18F5C8A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CLClientIsLocationServicesEnabled()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  char *v9;
  unsigned __int8 v10;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  _BYTE v13[14];
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLClientIsLocationServicesEnabled", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v0, &state);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(_QWORD *)&v13[6] = "";
    v14 = 2082;
    v15 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLClientIsLocationServicesEnabled\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (pthread_main_np() == 1 && sub_18F5CC08C())
  {
    if (qword_1ECD8E7C8 != -1)
      dispatch_once(&qword_1ECD8E7C8, &unk_1E2990130);
    v5 = qword_1ECD8E7C0;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E7C0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v13 = "__delegate_identifier__:Performance Diagnostics__:::____message__:";
    }
  }
  v10 = 0;
  if (!sub_18F5CDA34((uint64_t)&v10, v2, v3, v4))
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v6 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEFAULT, "#Warning CLInternalGetLocationServicesEnabled failed: could not reach daemon", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "Boolean CLClientIsLocationServicesEnabled(CLClientRef)", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v7 = v10;
  os_activity_scope_leave(&state);
  return v7;
}

void sub_18F5C8D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t CLClientStartLocationUpdatesWithDynamicAccuracyReductionAndAlteredAccessoryLocations_0(uint64_t a1, int a2, int a3, int a4, double a5)
{
  pthread_mutex_t *v9;
  int v11;
  _QWORD v12[4];
  __int16 v13;
  double v14;

  v14 = a5;
  v9 = *(pthread_mutex_t **)(a1 + 240);
  v12[3] = v9;
  pthread_mutex_lock(v9);
  v13 = 257;
  if ((*(_BYTE *)(a1 + 392) & 1) != 0)
  {
    entr_act_modify();
  }
  else
  {
    entr_act_begin();
    *(_BYTE *)(a1 + 392) |= 1u;
  }
  entr_act_set();
  entr_act_set();
  sub_18F5C9250(v12);
  LOBYTE(v11) = 1;
  sub_18F5C8F74((uint64_t)v12, "kCLConnectionMessageSubscribeKey", &v11);
  v11 = a2;
  sub_18F5C941C((uint64_t)v12, "kCLConnectionMessageDesiredAccuracyKey", &v11);
  sub_18F5C96E8((uint64_t)v12, "kCLConnectionMessageDistanceFilterKey", &v14);
  LOBYTE(v11) = a3 != 0;
  sub_18F5C8F74((uint64_t)v12, "kCLConnectionMessageDynamicAccuracyReductionKey", &v11);
  LOBYTE(v11) = a4 != 0;
  sub_18F5C8F74((uint64_t)v12, "kCLConnectionMessageAlteredAccessoryLocationsKey", &v11);
  sub_18F5C7BB4(a1, "kCLConnectionMessageLocation", (uint64_t)v12);
  sub_18F5C6360(v12);
  return pthread_mutex_unlock(v9);
}

void sub_18F5C8F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5C6360((uint64_t *)va);
  sub_18F5CE240((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_18F5C8F74(uint64_t a1, const char *a2, _BYTE *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F5C8FDC(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F5C8FDC(uint64_t a1, const __CFString *a2, _BYTE *a3)
{
  CFTypeRef *v5;
  CFTypeRef v6;
  NSObject *v7;
  void **v8;
  _BYTE *v10;
  char *v11;
  _BYTE buf[12];
  char v13;
  int v14;
  _BYTE *v15;
  void *__p[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (!*a3)
    v5 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  v6 = *v5;
  CFRetain(*v5);
  if (v6)
  {
    (*(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)a1 + 896))(a1, a2, v6);
    CFRelease(v6);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v7 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v8 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v13 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v14 = 136446210;
      v15 = v10;
      v11 = (char *)_os_log_send_and_compose_impl();
      if (v13 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const BOOL &)", "CoreLocation: %s\n", v11);
      if (v11 != (char *)__p)
        free(v11);
    }
  }
  return v6 != 0;
}

_QWORD *sub_18F5C9250(_QWORD *a1)
{
  CFMutableDictionaryRef Mutable;
  NSObject *v3;
  char *v5;
  uint8_t buf[1640];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *a1 = &off_1E298ED18;
  a1[1] = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  a1[1] = Mutable;
  if (!Mutable)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v3 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_FAULT, "could not create new mutable dictionary", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "CLNameValuePair::CLNameValuePair()", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
  return a1;
}

BOOL sub_18F5C941C(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F5C9484(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F5C9484(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const int &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F5C96E8(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F5C9750(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F5C9750(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const double &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

void sub_18F5C9F6C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t CLClientGetHeading(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  _QWORD v15[4];
  __int16 v16;

  v4 = *(pthread_mutex_t **)(a1 + 240);
  v15[3] = v4;
  pthread_mutex_lock(v4);
  v16 = 257;
  sub_18F5C9250(v15);
  if (a2)
  {
    v5 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a2 + 16) = v5;
    v6 = *(_OWORD *)(a1 + 88);
    v7 = *(_OWORD *)(a1 + 104);
    v8 = *(_OWORD *)(a1 + 120);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 136);
    *(_OWORD *)(a2 + 48) = v7;
    *(_OWORD *)(a2 + 64) = v8;
    *(_OWORD *)(a2 + 32) = v6;
    if (*(int *)(a1 + 40) < 1)
      goto LABEL_14;
    v9 = *(double *)(a1 + 48);
    v10 = *(double *)(a2 + 24) + v9;
    v11 = 360.0;
    if (v10 >= 360.0)
    {
      v10 = v10 + -360.0;
    }
    else if (v10 < 0.0)
    {
      v10 = v10 + 360.0;
    }
    *(double *)(a2 + 24) = v10;
    v12 = *(double *)(a2 + 32);
    if (v12 < 0.0)
      goto LABEL_14;
    v13 = v9 + v12;
    if (v13 >= 360.0)
    {
      v11 = -360.0;
    }
    else if (v13 >= 0.0)
    {
      goto LABEL_13;
    }
    v13 = v13 + v11;
LABEL_13:
    *(double *)(a2 + 32) = v13;
LABEL_14:
    a2 = 1;
  }
  sub_18F5C6360(v15);
  pthread_mutex_unlock(v4);
  return a2;
}

void sub_18F5CA09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5CAAF4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  objc_msgSend_setDistanceFilter_(a2, (const char *)a2, a3, a4, -1.0);
  objc_msgSend_setDesiredAccuracy_(a2, v5, v6, v7, -1.0);
  objc_msgSend_setHeadingFilter_(a2, v8, v9, v10, 1.0);
  objc_msgSend_setAllowsLocationPrompts_(a2, v11, 1, v12);
  objc_msgSend_setAllowsMapCorrection_(a2, v13, 1, v14);
  v15 = dyld_program_sdk_at_least() ^ 1;
  return MEMORY[0x1E0DE7D20](a2, sel_setCourtesyPromptNeeded_, v15, v16);
}

void sub_18F5CB520(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t CLClientRetrieveLocationWithDynamicAccuracyReductionAndAlteredAccessoryLocations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  double v8;
  BOOL v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  _BOOL4 v20;
  __int16 v21;
  _BOOL4 v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v14 = a4;
  if (a1)
  {
    v6 = *(const char **)(a1 + 368);
    a1 = *(_QWORD *)(a1 + 360);
  }
  else
  {
    v6 = 0;
  }
  v7 = sub_18F6E2E30(a1, v6, a2, 0);
  v8 = *(double *)(a4 + 4);
  v9 = v8 != 0.0;
  v10 = *(double *)(a4 + 12);
  if (v10 == 0.0)
    v9 = 0;
  if (*(double *)(a4 + 20) >= 0.0 && !v9)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v11 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a4 + 20);
      *(_DWORD *)buf = 68290307;
      v17 = 2082;
      v16 = 0;
      v18 = "";
      v19 = 1026;
      v20 = v8 != 0.0;
      v21 = 1026;
      v22 = v10 != 0.0;
      v23 = 2050;
      v24 = v12;
      v25 = 1040;
      v26 = 8;
      v27 = 2097;
      v28 = &v14;
      _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#NullIsland Received a latitude or longitude from getLocationForBundleID that was exactly zero\", \"latIsNonzero\":%{public}hhd, \"lonIsNonzero\":%{public}hhd, \"hAcc\":\"%{public}f\", \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x38u);
    }
  }
  return v7;
}

uint64_t sub_18F5CB6F4()
{
  if (qword_1ECD8F7F0 != -1)
    dispatch_once(&qword_1ECD8F7F0, &unk_1E2991EF0);
  return qword_1ECD8F7F8;
}

_QWORD *CLClientRequestAuthorization(_QWORD *a1, int a2)
{
  _QWORD v5[2];

  sub_18F5C9250(v5);
  sub_18F5B5750(a1, a2, (uint64_t)v5);
  return sub_18F5C6360(v5);
}

void sub_18F5CB77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5C6360(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5CB790(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 896))(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return 1;
}

void sub_18F5CBB3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5CC064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5CC08C()
{
  NSClassFromString(CFSTR("UIApplication"));
  return objc_opt_respondsToSelector() & 1;
}

uint64_t sub_18F5CC0B8()
{
  if (qword_1ECD8F758 != -1)
    dispatch_once(&qword_1ECD8F758, &unk_1E2990510);
  return qword_1ECD8F750;
}

uint64_t sub_18F5CC0F8()
{
  uint64_t result;

  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  result = 1;
  switch(dword_1ECD8F748)
  {
    case 8:
    case 9:
    case 11:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 32:
    case 36:
    case 44:
    case 45:
    case 47:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 63:
    case 65:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 77:
    case 78:
    case 79:
    case 80:
      return result;
    case 10:
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 29:
    case 31:
    case 33:
    case 34:
    case 35:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 46:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 60:
    case 61:
    case 62:
    case 64:
    case 66:
    case 67:
    case 74:
    case 75:
    case 76:
      goto LABEL_8;
    default:
      if (((dword_1ECD8F748 - 139) > 0x2D
         || ((1 << (dword_1ECD8F748 + 117)) & 0x3FFFE000001DLL) == 0)
        && (dword_1ECD8F748 - 217) >= 7)
      {
LABEL_8:
        result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_18F5CC198(_QWORD *a1)
{
  pthread_mutex_t *v2;
  const char *v3;
  uint64_t v4;
  char v5;
  pthread_mutex_t *v7;
  __int16 v8;
  uint64_t v9;

  v2 = (pthread_mutex_t *)a1[30];
  v7 = v2;
  pthread_mutex_lock(v2);
  v8 = 257;
  if (a1[46])
    v5 = objc_msgSend_containsObject_(&unk_1E29B5B50, v3, a1[46], v4);
  else
    v5 = objc_msgSend_containsObject_(&unk_1E29B5B50, v3, a1[45], v4);
  if ((v5 & 1) != 0 || !sub_18F5CC08C())
  {
    v9 = 0;
    vproc_swap_integer();
  }
  return pthread_mutex_unlock(v2);
}

void sub_18F5CC2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5CC314(uint64_t a1, int a2)
{
  pthread_mutex_t *v4;
  int v6;
  pthread_mutex_t *v7;
  __int16 v8;
  _QWORD v9[2];

  sub_18F5C9250(v9);
  v6 = a2;
  sub_18F5C941C((uint64_t)v9, "kCLConnectionMessagePausesLocationUpdatesAutomaticallyKey", &v6);
  v4 = *(pthread_mutex_t **)(a1 + 240);
  v7 = v4;
  pthread_mutex_lock(v4);
  v8 = 257;
  sub_18F5C7BB4(a1, "kCLConnectionMessagePausesLocationUpdatesAutomatically", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_18F5C6360(v9);
}

void sub_18F5CC3A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_18F5CC944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  void *v17;

  os_activity_scope_leave(&state);
  objc_sync_exit(v17);
  _Unwind_Resume(a1);
}

void sub_18F5CCB88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5CCD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t AuthorizationStatus_forBundleID_orBundlePath;
  os_activity_scope_state_s v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = _os_activity_create(&dword_18F5B3000, "CL: CLInternalGetAuthorizationStatus", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v15.opaque[0] = 0;
  v15.opaque[1] = 0;
  os_activity_scope_enter(v6, &v15);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v7 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalGetAuthorizationStatus\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v11 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v8, v9, v10);
  AuthorizationStatus_forBundleID_orBundlePath = objc_msgSend_getAuthorizationStatus_forBundleID_orBundlePath_(v11, v12, a3, a1, a2);
  os_activity_scope_leave(&v15);
  return AuthorizationStatus_forBundleID_orBundlePath;
}

void sub_18F5CCE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5CCF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F5CCF30()
{
  JUMPOUT(0x194002B50);
}

uint64_t sub_18F5CCF7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_18F5CCF88(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(_DWORD **)(result + 40) = a3;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

uint64_t sub_18F5CCFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_resumeLocationUpdates, a3, a4);
}

uint64_t sub_18F5CCFCC(uint64_t a1)
{
  return sub_18F5B99A8(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

long double CLLocationCoordinate2DGetDistanceFrom(double *a1, double *a2)
{
  return sub_18F5BD12C(*a1, a1[1], *a2, a2[1]);
}

_QWORD *sub_18F5CD084(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24) = a3;
      return CFRetain(*(CFTypeRef *)(*(_QWORD *)(result[4] + 8) + 24));
    }
  }
  return result;
}

_QWORD *sub_18F5CD0AC(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24) = a3;
      return CFRetain(*(CFTypeRef *)(*(_QWORD *)(result[4] + 8) + 24));
    }
  }
  return result;
}

uint64_t sub_18F5CD0D4(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

BOOL CLLocationCoordinate2DIsValid(CLLocationCoordinate2D coord)
{
  BOOL v1;

  v1 = coord.latitude <= 90.0;
  if (coord.latitude < -90.0)
    v1 = 0;
  if (coord.longitude > 180.0)
    v1 = 0;
  return coord.longitude >= -180.0 && v1;
}

_QWORD *sub_18F5CD1B8()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E298ECF8;
  qword_1ECD8F750 = (uint64_t)result;
  return result;
}

uint64_t sub_18F5CD1F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t result;

  v4 = (void *)objc_msgSend_processInfo(MEMORY[0x1E0CB3898], a2, a3, a4);
  v8 = (void *)objc_msgSend_processName(v4, v5, v6, v7);
  result = objc_msgSend_compare_(v8, v9, (uint64_t)CFSTR("locationd"), v10);
  byte_1ECD8F746 = result == 0;
  return result;
}

os_log_t sub_18F5CD230()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECD8E720 = result;
  return result;
}

os_log_t sub_18F5CD25C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECD8E720 = result;
  return result;
}

os_log_t sub_18F5CD288()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECD8E720 = result;
  return result;
}

os_log_t sub_18F5CD2B4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECD8E720 = result;
  return result;
}

os_log_t sub_18F5CD2E0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECD8E720 = result;
  return result;
}

os_log_t sub_18F5CD30C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECD8E720 = result;
  return result;
}

os_log_t sub_18F5CD338()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECD8E720 = result;
  return result;
}

os_log_t sub_18F5CD364()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECD8E720 = result;
  return result;
}

os_log_t sub_18F5CD390()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  qword_1ECD8E730 = (uint64_t)result;
  return result;
}

void sub_18F5CD3BC()
{
  if (sub_18F5CD960())
  {
    qword_1ECD8E808 = (uint64_t)dispatch_workloop_create_inactive("ClientsCohortWorkLoop");
    dispatch_set_qos_class_fallback();
    dispatch_activate((dispatch_object_t)qword_1ECD8E808);
  }
}

os_log_t sub_18F5CD408()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1ECD8E740 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD434()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1ECD8E740 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD460()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1ECD8E740 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD48C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1ECD8E740 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD4B8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD4E4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD510()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD53C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD568()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD594()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD5C0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD5EC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD618()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD644()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD670()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD69C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD6C8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD6F4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD720()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F5CD74C()
{
  os_log_t result;

  result = os_log_create("com.apple.runtime-issues", "CoreLocation");
  qword_1ECD8E7C0 = (uint64_t)result;
  return result;
}

void sub_18F5CD778(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F5CD784(uint64_t a1)
{
  sub_18F64F950((uint64_t *)(a1 + 48));
}

void sub_18F5CD78C(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F5CD798(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F5CD7A4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F5CD7B0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F5CD7BC(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F5CD7C8(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F5CD7D4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F5CD7E0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t sub_18F5CD7F0(uint64_t *a1, uint64_t a2)
{
  a1[6] = (uint64_t)(a1 + 6);
  a1[7] = (uint64_t)(a1 + 6);
  a1[8] = 0;
  return sub_18F650044((uint64_t)(a1 + 6), a1 + 6, (_QWORD *)(a2 + 48));
}

void sub_18F5CD80C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_18F5CD81C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_18F5CD82C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_18F5CD83C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_18F5CD84C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_18F5CD85C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_18F5CD86C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

_BYTE **sub_18F5CD87C(_BYTE **result, void *a2, char a3)
{
  _BYTE **v3;

  v3 = result;
  if (a2)
  {
    result = a2;
    *(_QWORD *)(*((_QWORD *)v3[5] + 1) + 40) = result;
  }
  else
  {
    *result[6] = a3;
    *(_BYTE *)(*((_QWORD *)result[4] + 1) + 24) = 1;
  }
  return result;
}

uint64_t sub_18F5CD8C8(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(_BYTE **)(result + 40) = a3 == 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

CLLocationInternalClient *sub_18F5CD8F4()
{
  CLLocationInternalClient *result;

  result = objc_alloc_init(CLLocationInternalClient);
  qword_1ECD8F8A8 = (uint64_t)result;
  return result;
}

uint64_t sub_18F5CD918()
{
  const char *v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;

  qword_1ECD8F8E0 = (uint64_t)objc_alloc_init(MEMORY[0x1E0CB3578]);
  objc_msgSend_setDateStyle_((void *)qword_1ECD8F8E0, v0, 1, v1);
  objc_msgSend_setTimeStyle_((void *)qword_1ECD8F8E0, v2, 4, v3);
  return MEMORY[0x1E0DE7D20](qword_1ECD8F8E0, sel_setFormatterBehavior_, 1040, v4);
}

uint64_t sub_18F5CD960()
{
  if (qword_1ECD8F7E0 != -1)
    dispatch_once(&qword_1ECD8F7E0, &unk_1E2991EB0);
  return byte_1ECD8F746;
}

uint64_t sub_18F5CD9A0()
{
  if (qword_1ECD8F7C0 != -1)
    dispatch_once(&qword_1ECD8F7C0, &unk_1E2991E70);
  return byte_1ECD8F742;
}

void sub_18F5CD9E0(pthread_mutex_t *a1)
{
  pthread_mutex_destroy(a1);
  free(a1);
}

uint64_t sub_18F5CDA04()
{
  uint64_t result;

  qword_1ECD8E7B0 = 0;
  result = _CFRuntimeRegisterClass();
  qword_1ECD8E7B0 = result;
  return result;
}

uint64_t sub_18F5CDA34(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v5, sel_getLocationServicesEnabled_, a1, v6);
}

double sub_18F5CDA60(_OWORD *a1, uint64_t a2, double a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double v12;
  double v13;
  double result;

  v5 = a1[1];
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v5;
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[5];
  *(_OWORD *)(a2 + 64) = a1[4];
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 48) = v7;
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[8];
  *(_OWORD *)(a2 + 140) = *(_OWORD *)((char *)a1 + 140);
  *(_OWORD *)(a2 + 112) = v10;
  *(_OWORD *)(a2 + 128) = v11;
  *(_OWORD *)(a2 + 96) = v9;
  v12 = *(double *)(a2 + 44);
  if (v12 > 0.0 && a3 != 0.0)
  {
    v13 = *(double *)(a2 + 60);
    if (v13 >= 0.0)
      sub_18F5F5470((double *)(a2 + 4), (double *)(a2 + 12), *(double *)(a2 + 4), *(double *)(a2 + 12), a3, v12, v13);
  }
  result = *(double *)(a2 + 76) + a3;
  *(double *)(a2 + 76) = result;
  return result;
}

void sub_18F5CDC3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5CDE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5CDED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFStringRef sub_18F5CDF98(CFStringRef theString)
{
  CFStringRef result;

  if (qword_1EE172A60)
  {
    CFRelease((CFTypeRef)qword_1EE172A60);
    qword_1EE172A60 = 0;
  }
  result = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString);
  qword_1EE172A60 = (uint64_t)result;
  return result;
}

CFStringRef sub_18F5CDFE0(CFStringRef theString)
{
  CFStringRef result;

  if (qword_1EE172A68)
  {
    CFRelease((CFTypeRef)qword_1EE172A68);
    qword_1EE172A68 = 0;
  }
  result = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString);
  qword_1EE172A68 = (uint64_t)result;
  return result;
}

uint64_t CLClientGetTypeID()
{
  if (qword_1ECD8E7B8 != -1)
    dispatch_once_f(&qword_1ECD8E7B8, 0, (dispatch_function_t)sub_18F5CDA04);
  return qword_1ECD8E7B0;
}

void sub_18F5CE06C(uint64_t a1, _QWORD *a2)
{
  NSObject *v3;
  NSObject *v4;
  char *v5;
  _QWORD block[5];
  __int16 v7;
  uint8_t buf[1640];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v3 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_INFO, "received client will resign active notification", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v7 = 0;
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLClientHandleWillResignActiveNotification(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  CFRetain(a2);
  v4 = a2[39];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F5CE5DC;
  block[3] = &unk_1E29910D0;
  block[4] = a2;
  dispatch_async(v4, block);
}

uint64_t sub_18F5CE240(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 17))
  {
    if (*(_BYTE *)(a1 + 16))
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    else
      (*(void (**)(void))(**(_QWORD **)a1 + 24))();
    *(_BYTE *)(a1 + 17) = 0;
  }
  return a1;
}

uint64_t CLClientCreateWithBundleIdentifierAndPath(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, unint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  const char *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  os_activity_scope_state_s v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  unint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v10 = _os_activity_create(&dword_18F5B3000, "CL: CLClientCreateWithBundleIdentifierAndPath", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v10, &v18);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v11 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289794;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    v23 = 2082;
    v24 = "activity";
    v25 = 2114;
    v26 = a4;
    v27 = 2114;
    v28 = a5;
    _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLClientCreateWithBundleIdentifierAndPath\", \"event\":%{public, location:escape_only}s, \"effectiveBundleIdentifier\":%{public, location:escape_only}@, \"effectiveBundlePath\":%{public, location:escape_only}@}", buf, 0x30u);
  }
  v12 = objc_alloc(MEMORY[0x1E0D44538]);
  v15 = (id)objc_msgSend_initWithCurrentRunLoopAndIdentifier_(v12, v13, (uint64_t)CFSTR("CLClient-runloop"), v14);
  v16 = CLClientCreateWithBundleIdentifierAndPathWithWebsiteOnSilo(a1, a2, a3, a4, a5, 0, v15);
  os_activity_scope_leave(&v18);
  return v16;
}

void sub_18F5CE42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLClientCreateWithBundleIdentifierAndPathOnSilo(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, unint64_t a5, void *a6)
{
  return CLClientCreateWithBundleIdentifierAndPathWithWebsiteOnSilo(a1, a2, a3, a4, a5, 0, a6);
}

void sub_18F5CE450(uint64_t a1)
{
  _QWORD handler[5];

  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = sub_18F5CE4B4;
  handler[3] = &unk_1E2990DB8;
  handler[4] = *(_QWORD *)(a1 + 32);
  xpc_set_event_stream_handler("com.apple.locationd-events", MEMORY[0x1E0C80D38], handler);
}

void sub_18F5CE4B4(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v2 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_msgSend_UTF8String(*(void **)(a1 + 32), v3, v4, v5);
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2082;
    v11 = v6;
    _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client woken up by Core Location\", \"name\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x1Cu);
  }
}

CFStringRef sub_18F5CE59C(CFStringRef result)
{
  CFStringRef v1;
  const __CFAllocator *v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetAllocator(result);
    return CFStringCreateWithFormat(v2, 0, CFSTR("<CLClient %p [%p]>"), v1, v2);
  }
  return result;
}

uint64_t sub_18F5CE5DC(uint64_t a1)
{
  pthread_mutex_t *v2;
  _BYTE *v3;

  v2 = *(pthread_mutex_t **)(*(_QWORD *)(a1 + 32) + 240);
  pthread_mutex_lock(v2);
  v3 = *(_BYTE **)(a1 + 32);
  v3[18] = 0;
  CFRelease(v3);
  return pthread_mutex_unlock(v2);
}

void sub_18F5CE634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5CE648(uint64_t a1, const __CFString *a2)
{
  pthread_mutex_t *v4;
  CFStringRef Copy;
  const void *v6;
  _QWORD v8[2];
  __int16 v9;

  v4 = *(pthread_mutex_t **)(a1 + 240);
  v8[1] = v4;
  pthread_mutex_lock(v4);
  v9 = 257;
  Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  v6 = *(const void **)(a1 + 344);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 344) = 0;
  }
  *(_QWORD *)(a1 + 344) = Copy;
  pthread_mutex_unlock(v4);
  sub_18F5C9250(v8);
  sub_18F5CB790((uint64_t)v8, "kCLConnectionMessagePurposeKey", (uint64_t)a2);
  sub_18F5C7BB4(a1, "kCLConnectionMessagePurpose", (uint64_t)v8);
  return sub_18F5C6360(v8);
}

void sub_18F5CE704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

CFTypeRef sub_18F5CE728(_QWORD *a1)
{
  CFTypeRef v1;
  const __CFString *v4;
  __CFBundle *MainBundle;
  CFTypeRef ValueForInfoDictionaryKey;
  CFTypeID v7;

  v1 = (CFTypeRef)a1[44];
  if (!v1)
  {
    if (a1[45])
      return (CFTypeRef)a1[43];
    v4 = (const __CFString *)a1[46];
    if (v4)
    {
      v1 = sub_18F5F5D44(v4, CFSTR("NSLocationUsageDescription"));
      if (!v1)
        return (CFTypeRef)a1[43];
    }
    else
    {
      MainBundle = CFBundleGetMainBundle();
      if (!MainBundle)
        return (CFTypeRef)a1[43];
      ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(MainBundle, CFSTR("NSLocationUsageDescription"));
      if (!ValueForInfoDictionaryKey)
        return (CFTypeRef)a1[43];
      v1 = ValueForInfoDictionaryKey;
      CFRetain(ValueForInfoDictionaryKey);
    }
    v7 = CFGetTypeID(v1);
    if (v7 == CFStringGetTypeID())
    {
      a1[44] = v1;
      return v1;
    }
    CFRelease(v1);
    return (CFTypeRef)a1[43];
  }
  return v1;
}

void sub_18F5CE7D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  _QWORD v12[6];

  v8 = (void *)objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v9, (uint64_t)a2, (uint64_t)CFSTR("kCLConnectionMessageHandoffTagKey"));
  objc_msgSend_setObject_forKeyedSubscript_(v8, v10, a3, (uint64_t)CFSTR("kCLConnectionMessageUUIDKey"));
  v11 = *(_QWORD *)(a1 + 232);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_18F5CE89C;
  v12[3] = &unk_1E2990E80;
  v12[4] = v11;
  v12[5] = a4;
  sub_18F5D5CC0(a1, "kCLConnectionMessageChangeFencesStateMatchingHandoffTags", (uint64_t)v8, 0, (uint64_t)v12);
}

uint64_t sub_18F5CE89C(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  CLConnectionMessage *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  NSSet *v11;
  void *DictionaryOfClasses;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[6];
  _QWORD v22[5];

  v4 = result;
  v5 = *(CLConnectionMessage **)a2;
  v6 = *(_QWORD *)(result + 40);
  if (*(_QWORD *)a2)
  {
    if (v6)
    {
      v7 = (void *)MEMORY[0x1E0C99E60];
      v8 = objc_opt_class();
      v11 = (NSSet *)objc_msgSend_setWithObject_(v7, v9, v8, v10);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v5, v11);
      v15 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, (uint64_t)CFSTR("kCLConnectionMessageErrorKey"), v14);
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = sub_18F5CE9D8;
      v21[3] = &unk_1E2990E58;
      v16 = *(void **)(v4 + 32);
      v17 = *(_QWORD *)(v4 + 40);
      v21[4] = v15;
      v21[5] = v17;
      return objc_msgSend_async_(v16, v18, (uint64_t)v21, v19);
    }
  }
  else if (v6)
  {
    v20 = *(void **)(result + 32);
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = sub_18F5CE990;
    v22[3] = &unk_1E2990E30;
    v22[4] = v6;
    return objc_msgSend_async_(v20, a2, (uint64_t)v22, a4);
  }
  return result;
}

uint64_t sub_18F5CE990(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, *MEMORY[0x1E0CB28A8], 4097, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
}

uint64_t sub_18F5CE9D8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

_QWORD *sub_18F5CE9E8(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD v7[2];

  sub_18F5C9250(v7);
  sub_18F664688((uint64_t)v7, "kCLConnectionMessagePurposeIdentifierKey", a2);
  sub_18F5B5750(a1, a3, (uint64_t)v7);
  return sub_18F5C6360(v7);
}

void sub_18F5CEA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5C6360(&a9);
  _Unwind_Resume(a1);
}

void CLClientRequestTemporaryPrecise(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  _QWORD v12[6];

  v8 = (void *)objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v9, a3, (uint64_t)CFSTR("kCLConnectionMessagePurposeIdentifierKey"));
  objc_msgSend_setObject_forKeyedSubscript_(v8, v10, (uint64_t)a2, (uint64_t)CFSTR("kCLConnectionMessagePurposeKey"));
  v11 = *(_QWORD *)(a1 + 232);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_18F5CEB28;
  v12[3] = &unk_1E2990E80;
  v12[4] = v11;
  v12[5] = a4;
  sub_18F5D5CC0(a1, "kCLConnectionMessageRequestTemporaryPrecise", (uint64_t)v8, 0, (uint64_t)v12);
}

uint64_t sub_18F5CEB28(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  CLConnectionMessage *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  NSSet *v11;
  void *DictionaryOfClasses;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[6];
  _QWORD v22[5];

  v4 = result;
  v5 = *(CLConnectionMessage **)a2;
  v6 = *(_QWORD *)(result + 40);
  if (*(_QWORD *)a2)
  {
    if (v6)
    {
      v7 = (void *)MEMORY[0x1E0C99E60];
      v8 = objc_opt_class();
      v11 = (NSSet *)objc_msgSend_setWithObject_(v7, v9, v8, v10);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v5, v11);
      v15 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, (uint64_t)CFSTR("kCLConnectionMessageErrorKey"), v14);
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = sub_18F5CEC64;
      v21[3] = &unk_1E2990E58;
      v16 = *(void **)(v4 + 32);
      v17 = *(_QWORD *)(v4 + 40);
      v21[4] = v15;
      v21[5] = v17;
      return objc_msgSend_async_(v16, v18, (uint64_t)v21, v19);
    }
  }
  else if (v6)
  {
    v20 = *(void **)(result + 32);
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = sub_18F5CEC1C;
    v22[3] = &unk_1E2990E30;
    v22[4] = v6;
    return objc_msgSend_async_(v20, a2, (uint64_t)v22, a4);
  }
  return result;
}

uint64_t sub_18F5CEC1C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, *MEMORY[0x1E0CB28A8], 4097, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
}

uint64_t sub_18F5CEC64(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_18F5CEC74(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  _QWORD v9[6];

  v6 = (void *)objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v7, MEMORY[0x1E0C9AAB0], (uint64_t)CFSTR("kCLConnectionMessageSubscribeKey"));
  v8 = *(_QWORD *)(a1 + 232);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_18F5CED18;
  v9[3] = &unk_1E2990E80;
  v9[4] = v8;
  v9[5] = a2;
  sub_18F5D5CC0(a1, "kCLConnectionMessageLocationPush", (uint64_t)v6, 0, (uint64_t)v9);
}

uint64_t sub_18F5CED18(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  CLConnectionMessage *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  NSSet *v12;
  void *DictionaryOfClasses;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[7];
  _QWORD v26[5];

  v4 = result;
  v5 = *(CLConnectionMessage **)a2;
  v6 = *(_QWORD *)(result + 40);
  if (*(_QWORD *)a2)
  {
    if (v6)
    {
      v7 = (void *)MEMORY[0x1E0C99E60];
      v8 = objc_opt_class();
      v9 = objc_opt_class();
      v12 = (NSSet *)objc_msgSend_setWithObjects_(v7, v10, v8, v11, v9, 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v5, v12);
      v16 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v14, (uint64_t)CFSTR("kCLConnectionMessageErrorKey"), v15);
      v19 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v17, (uint64_t)CFSTR("kCLConnectionMessagePushTokenKey"), v18);
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = sub_18F5CEE88;
      v25[3] = &unk_1E2990EA8;
      v20 = *(void **)(v4 + 32);
      v21 = *(_QWORD *)(v4 + 40);
      v25[5] = v16;
      v25[6] = v21;
      v25[4] = v19;
      return objc_msgSend_async_(v20, v22, (uint64_t)v25, v23);
    }
  }
  else if (v6)
  {
    v24 = *(void **)(result + 32);
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = sub_18F5CEE3C;
    v26[3] = &unk_1E2990E30;
    v26[4] = v6;
    return objc_msgSend_async_(v24, a2, (uint64_t)v26, a4);
  }
  return result;
}

uint64_t sub_18F5CEE3C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, *MEMORY[0x1E0CB28A8], 4097, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F5CEE88(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

_QWORD *sub_18F5CEE9C(uint64_t a1)
{
  char v3;
  _QWORD v4[2];

  sub_18F5C9250(v4);
  v3 = 0;
  sub_18F5C8F74((uint64_t)v4, "kCLConnectionMessageSubscribeKey", &v3);
  sub_18F5C7BB4(a1, "kCLConnectionMessageLocationPush", (uint64_t)v4);
  return sub_18F5C6360(v4);
}

void sub_18F5CEF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLClientSetCallback(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;

  v4 = *(pthread_mutex_t **)(a1 + 240);
  pthread_mutex_lock(v4);
  *(_QWORD *)(a1 + 248) = a2;
  return pthread_mutex_unlock(v4);
}

uint64_t CLClientIsMasquerading(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17);
}

BOOL CLClientIsValid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 320) != 0;
}

uint64_t CLClientIsLocationServicesAvailable()
{
  return 1;
}

uint64_t CLClientIsAuthorizationPromptMapDisplayEnabled()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  char *v8;
  unsigned __int8 v9;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLClientIsAuthorizationPromptMapDisplayEnabled", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v0, &state);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLClientIsAuthorizationPromptMapDisplayEnabled\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v9 = 0;
  if (!sub_18F6E1748((uint64_t)&v9, v2, v3, v4))
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v5 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEFAULT, "#Warning CLInternalGetAuthorizationPromptMapDisplayEnabled failed: could not reach daemon", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "Boolean CLClientIsAuthorizationPromptMapDisplayEnabled()", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  v6 = v9;
  os_activity_scope_leave(&state);
  return v6;
}

void sub_18F5CF1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5CF1FC(uint64_t a1, unsigned int a2)
{
  int v2;

  if (a2 > 3)
    return 0;
  v2 = dword_18F771E10[a2];
  sub_18F5CC0B8();
  return (sub_18F6718D4() >> v2) & 1;
}

uint64_t sub_18F5CF240()
{
  uint64_t result;

  result = CLClientIsLocationServicesEnabled();
  if ((_DWORD)result)
  {
    sub_18F5CC0B8();
    return (sub_18F6718D4() >> 8) & 1;
  }
  return result;
}

uint64_t CLClientShutdownDaemon()
{
  NSObject *v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  uint8_t buf[4];
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v0 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136446210;
    v8 = "CLClientShutdownDaemon";
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_FAULT, "CLClient is deprecated. Will be obsolete soon. (%{public}s)", buf, 0xCu);
  }
  v1 = sub_18F5C4AE0(115, 0);
  if ((_DWORD)v1)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v6 = (char *)_os_log_send_and_compose_impl();
    v1 = sub_18F5F2740("Generic", 1, 0, 0, "Boolean CLClientShutdownDaemon(CLClientRef)", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  return sub_18F6E1EF4(v1, v2, v3, v4);
}

uint64_t CLClientLog(uint64_t a1, const char *a2)
{
  return CLClientLogDump(a1, a2);
}

uint64_t CLClientLogDump(uint64_t a1, const char *a2)
{
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  CFStringRef v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  uint8_t buf[4];
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v3 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136446210;
    v15 = "CLClientLogDump";
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_FAULT, "CLClient is deprecated. Will be obsolete soon. (%{public}s)", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v13 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "Boolean CLClientLogDump(CLClientRef, const char *, Boolean)", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
  if (!a2)
    return sub_18F6E1F2C(0, v4, v5, v6);
  v7 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v11 = sub_18F6E1F2C((uint64_t)v7, v8, v9, v10);
  if (v7)
    CFRelease(v7);
  return v11;
}

CLConnectionMessage *CLClientGetClientDictionary(uint64_t a1)
{
  pthread_mutex_t *v2;
  CLConnectionMessage *DictionaryOfClasses;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  NSSet *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  pthread_mutex_t *v24;
  __int128 v25;
  char v26;

  v2 = *(pthread_mutex_t **)(a1 + 240);
  v24 = v2;
  pthread_mutex_lock(v2);
  if (*(_BYTE *)(a1 + 225))
  {
    DictionaryOfClasses = 0;
    goto LABEL_3;
  }
  v5 = (std::__shared_weak_count *)operator new(0x70uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FE10;
  sub_18F5D5990(&v25, "kCLConnectionMessageCurrentClientDictionary");
  MEMORY[0x194002B44](&v5[1], &v25, 0);
  if (v26 < 0)
    operator delete((void *)v25);
  v23 = v5;
  v25 = 0uLL;
  if (!*(_QWORD *)(a1 + 320))
  {
    DictionaryOfClasses = 0;
    goto LABEL_19;
  }
  v21 = v5 + 1;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  CLConnectionClient::sendMessageSync();
  v25 = v22;
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    DictionaryOfClasses = (CLConnectionMessage *)v25;
    if (!(_QWORD)v25)
      goto LABEL_19;
  }
  else
  {
    DictionaryOfClasses = (CLConnectionMessage *)v22;
    if (!(_QWORD)v22)
      goto LABEL_19;
  }
  v10 = (void *)MEMORY[0x1E0C99E60];
  v11 = objc_opt_class();
  v12 = objc_opt_class();
  v15 = (NSSet *)objc_msgSend_setWithObjects_(v10, v13, v11, v14, v12, 0, v21);
  DictionaryOfClasses = (CLConnectionMessage *)CLConnectionMessage::getDictionaryOfClasses(DictionaryOfClasses, v15);
LABEL_19:
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v2 = v24;
LABEL_3:
  pthread_mutex_unlock(v2);
  return DictionaryOfClasses;
}

void sub_18F5CF858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004(v3 - 64);
  sub_18F5D6004((uint64_t)va1);
  sub_18F5CE240((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t CLClientRetrievePrecisionPermission(uint64_t a1, uint64_t a2)
{
  if (a2)
    return sub_18F5B7288(*(_QWORD *)(a1 + 360), *(_QWORD *)(a1 + 368), a2);
  else
    return 0;
}

uint64_t CLClientRetrieveAuthorizationStatus(uint64_t a1, uint64_t a2)
{
  if (a2)
    return sub_18F5CCD00(*(_QWORD *)(a1 + 360), *(_QWORD *)(a1 + 368), a2);
  else
    return 0;
}

uint64_t CLClientRetrieveIncidentalUseMode(uint64_t a1, uint64_t a2)
{
  return sub_18F6E1A78(*(_QWORD *)(a1 + 360), *(_QWORD *)(a1 + 368), a2);
}

uint64_t CLClientRetrieveAuthorizationStatusForIdentity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
    return 0;
  if (!(a1 | a2))
  {
    a1 = qword_1EE172A60;
    a2 = qword_1EE172A68;
  }
  return sub_18F5CCD00(a1, a2, a3);
}

uint64_t CLClientStartLocationUpdates(uint64_t a1, int a2, double a3)
{
  return CLClientStartLocationUpdatesWithDynamicAccuracyReductionAndAlteredAccessoryLocations_0(a1, a2, 0, 0, a3);
}

uint64_t CLClientStopLocationUpdates_0(uint64_t a1)
{
  pthread_mutex_t *v2;
  char v4;
  _QWORD v5[4];
  __int16 v6;

  v2 = *(pthread_mutex_t **)(a1 + 240);
  v5[3] = v2;
  pthread_mutex_lock(v2);
  v6 = 257;
  if ((*(_BYTE *)(a1 + 392) & 1) != 0)
  {
    entr_act_end();
    *(_BYTE *)(a1 + 392) &= ~1u;
  }
  sub_18F5C9250(v5);
  v4 = 0;
  sub_18F5C8F74((uint64_t)v5, "kCLConnectionMessageSubscribeKey", &v4);
  sub_18F5C7BB4(a1, "kCLConnectionMessageLocation", (uint64_t)v5);
  sub_18F5C6360(v5);
  return pthread_mutex_unlock(v2);
}

void sub_18F5CF9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5CFA30(uint64_t a1, int a2)
{
  int v5;
  _QWORD v6[2];

  sub_18F5C9250(v6);
  v5 = a2;
  sub_18F5C941C((uint64_t)v6, "kCLConnectionMessageEnabledKey", &v5);
  sub_18F5C7BB4(a1, "kCLConnectionMessageIsActuallyAWatchKitExtension", (uint64_t)v6);
  return sub_18F5C6360(v6);
}

void sub_18F5CFA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *CLClientSetProxyForRemoteClient(uint64_t a1, int a2)
{
  int v5;
  _QWORD v6[2];

  sub_18F5C9250(v6);
  v5 = a2;
  sub_18F5C941C((uint64_t)v6, "kCLConnectionMessageEnabledKey", &v5);
  sub_18F5C7BB4(a1, "kCLConnectionMessageProxyForRemoteClient", (uint64_t)v6);
  return sub_18F5C6360(v6);
}

void sub_18F5CFB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *CLClientStopHeadingUpdates(uint64_t a1)
{
  char v8;
  _QWORD v9[2];

  if ((*(_BYTE *)(a1 + 392) & 2) != 0)
  {
    entr_act_end();
    *(_BYTE *)(a1 + 392) &= ~2u;
  }
  if (!*(_BYTE *)(a1 + 24))
    CLClientShowHeadingCalibration(a1, 0);
  *(_BYTE *)(a1 + 24) = 0;
  sub_18F5C9250(v9);
  v8 = 0;
  sub_18F5C8F74((uint64_t)v9, "kCLConnectionMessageSubscribeKey", &v8);
  sub_18F5C7BB4(a1, "kCLConnectionMessageHeading", (uint64_t)v9);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 96) = _Q0;
  return sub_18F5C6360(v9);
}

void sub_18F5CFBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CLClientRetrieveLocation(uint64_t a1, uint64_t a2)
{
  return CLClientRetrieveLocationWithDynamicAccuracyReductionAndAlteredAccessoryLocations(a1, 0, 0, a2);
}

_QWORD *sub_18F5CFC08(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  char v9;
  _QWORD v10[2];

  v2 = *(_BYTE **)(a1 + 384);
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      v4 = 0;
      v5 = 0;
      v6 = v2 + 1;
      do
      {
        v5 ^= v3 << (v4 & 0x18);
        v7 = *v6++;
        v3 = v7;
        v4 += 8;
      }
      while (v7);
    }
  }
  entr_act_modify();
  sub_18F5C9250(v10);
  v9 = 0;
  sub_18F5C8F74((uint64_t)v10, "kCLConnectionMessageSubscribeKey", &v9);
  sub_18F5C7BB4(a1, "kCLConnectionMessageSignificantLocationChange", (uint64_t)v10);
  return sub_18F5C6360(v10);
}

void sub_18F5CFCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5CFCD4(uint64_t a1, int a2)
{
  _QWORD v4[2];
  int v5;

  v5 = a2;
  sub_18F5C9250(v4);
  sub_18F5C941C((uint64_t)v4, "kCLConnectionMessagePlaceInferenceFidelityPolicyKey", &v5);
  sub_18F5C7BB4(a1, "kCLConnectionMessagePlaceInference", (uint64_t)v4);
  return sub_18F5C6360(v4);
}

void sub_18F5CFD38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5CFD4C(uint64_t a1)
{
  char v3;
  _QWORD v4[2];

  sub_18F5C9250(v4);
  v3 = 0;
  sub_18F5C8F74((uint64_t)v4, "kCLConnectionMessagePlaceInferenceStopKey", &v3);
  sub_18F5C7BB4(a1, "kCLConnectionMessagePlaceInferenceStop", (uint64_t)v4);
  return sub_18F5C6360(v4);
}

void sub_18F5CFDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5CFDC8(uint64_t a1, const void *a2)
{
  _BYTE *v4;
  int v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  char v11;
  _QWORD v12[2];

  v4 = *(_BYTE **)(a1 + 384);
  if (v4)
  {
    v5 = *v4;
    if (*v4)
    {
      v6 = 0;
      v7 = 0;
      v8 = v4 + 1;
      do
      {
        v7 ^= v5 << (v6 & 0x18);
        v9 = *v8++;
        v5 = v9;
        v6 += 8;
      }
      while (v9);
    }
  }
  entr_act_modify();
  sub_18F5C9250(v12);
  v11 = 1;
  sub_18F5C8F74((uint64_t)v12, "kCLConnectionMessageSubscribeKey", &v11);
  if (a2)
    sub_18F5C941C((uint64_t)v12, "kCLConnectionMessageSignificantLocationVisitTypeKey", a2);
  sub_18F5C7BB4(a1, "kCLConnectionMessageSignificantLocationVisit", (uint64_t)v12);
  return sub_18F5C6360(v12);
}

void sub_18F5CFE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5CFEB4(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  char v9;
  _QWORD v10[2];

  v2 = *(_BYTE **)(a1 + 384);
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      v4 = 0;
      v5 = 0;
      v6 = v2 + 1;
      do
      {
        v5 ^= v3 << (v4 & 0x18);
        v7 = *v6++;
        v3 = v7;
        v4 += 8;
      }
      while (v7);
    }
  }
  entr_act_modify();
  sub_18F5C9250(v10);
  v9 = 0;
  sub_18F5C8F74((uint64_t)v10, "kCLConnectionMessageSubscribeKey", &v9);
  sub_18F5C7BB4(a1, "kCLConnectionMessageSignificantLocationVisit", (uint64_t)v10);
  return sub_18F5C6360(v10);
}

void sub_18F5CFF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5CFF80(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  _QWORD v9[2];

  v2 = *(_BYTE **)(a1 + 384);
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      v4 = 0;
      v5 = 0;
      v6 = v2 + 1;
      do
      {
        v5 ^= v3 << (v4 & 0x18);
        v7 = *v6++;
        v3 = v7;
        v4 += 8;
      }
      while (v7);
    }
  }
  entr_act_modify();
  sub_18F5C9250(v9);
  sub_18F5C7BB4(a1, "kCLConnectionMessageSignificantLocationVisitState", (uint64_t)v9);
  return sub_18F5C6360(v9);
}

void sub_18F5D001C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5C6360(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5D0030(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  int v36;
  int v37;
  unsigned __int8 *v38;
  int v39;
  char v40;
  _QWORD v41[2];

  if (!a2)
    return 0;
  v6 = objc_msgSend_type(a2, (const char *)a2, a3, a4);
  result = sub_18F5CF1FC(v6, v6);
  if ((_DWORD)result)
  {
    sub_18F5C9250(v41);
    sub_18F5D01B0((uint64_t)v41, a2, v8, v9);
    v40 = 1;
    sub_18F5C8F74((uint64_t)v41, "kCLConnectionMessageSubscribeKey", &v40);
    v13 = *(_BYTE **)(a1 + 384);
    if (v13 && (v14 = *v13, *v13))
    {
      v15 = 0;
      v16 = 0;
      v17 = v13 + 1;
      do
      {
        v16 ^= v14 << (v15 & 0x18);
        v18 = *v17++;
        v14 = v18;
        v15 += 8;
      }
      while (v18);
    }
    else
    {
      v16 = 0;
    }
    v19 = (void *)objc_msgSend_identifier(a2, v10, v11, v12);
    v23 = (_BYTE *)objc_msgSend_UTF8String(v19, v20, v21, v22);
    if (v23)
    {
      v27 = *v23;
      if (*v23)
      {
        v28 = 0;
        v29 = v23 + 1;
        do
        {
          v16 ^= v27 << (v28 & 0x18);
          v30 = *v29++;
          v27 = v30;
          v28 += 8;
        }
        while (v30);
      }
    }
    v31 = (void *)objc_msgSend_onBehalfOfBundleId(a2, v24, v25, v26);
    v35 = (_BYTE *)objc_msgSend_UTF8String(v31, v32, v33, v34);
    if (v35)
    {
      v36 = *v35;
      if (*v35)
      {
        v37 = 0;
        v38 = v35 + 1;
        do
        {
          v16 ^= v36 << (v37 & 0x18);
          v39 = *v38++;
          v36 = v39;
          v37 += 8;
        }
        while (v39);
      }
    }
    entr_act_modify();
    sub_18F5C7BB4(a1, "kCLConnectionMessageRegionMonitoring", (uint64_t)v41);
    sub_18F5C6360(v41);
    return 1;
  }
  return result;
}

void sub_18F5D0198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_18F5D01B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  NSObject *v97;
  NSObject *v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint8_t buf[8];
  _QWORD v123[3];

  v123[2] = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend_identifier(a2, (const char *)a2, a3, a4);
  sub_18F5CB790(a1, "kCLConnectionMessageNameKey", v6);
  if (objc_msgSend_onBehalfOfBundleId(a2, v7, v8, v9))
  {
    v13 = objc_msgSend_onBehalfOfBundleId(a2, v10, v11, v12);
    sub_18F5CB790(a1, "kCLConnectionMessageOnBehalfOfKey", v13);
  }
  buf[0] = objc_msgSend_notifyOnEntry(a2, v10, v11, v12);
  sub_18F5C8F74(a1, "kCLConnectionMessageNotifyOnEntryKey", buf);
  buf[0] = objc_msgSend_notifyOnExit(a2, v14, v15, v16);
  sub_18F5C8F74(a1, "kCLConnectionMessageNotifyOnExitKey", buf);
  buf[0] = objc_msgSend_conservativeEntry(a2, v17, v18, v19);
  sub_18F5C8F74(a1, "kCLConnectionMessageConservativeEntry", buf);
  buf[0] = objc_msgSend_emergency(a2, v20, v21, v22);
  sub_18F5C8F74(a1, "kCLConnectionMessageEmergencyKey", buf);
  v26 = (void *)objc_msgSend_deviceId(a2, v23, v24, v25);
  v30 = (void *)objc_msgSend_UUIDString(v26, v27, v28, v29);
  if (v30)
    v34 = (char *)objc_msgSend_UTF8String(v30, v31, v32, v33);
  else
    v34 = "";
  sub_18F665528(a1, "kCLConnectionMessageDeviceIDKey", v34);
  if (objc_msgSend_handoffTag(a2, v35, v36, v37))
  {
    v41 = (void *)objc_msgSend_handoffTag(a2, v38, v39, v40);
    v45 = (char *)objc_msgSend_UTF8String(v41, v42, v43, v44);
  }
  else
  {
    v45 = "";
  }
  sub_18F665528(a1, "kCLConnectionMessageHandoffTagKey", v45);
  *(_DWORD *)buf = objc_msgSend_type(a2, v46, v47, v48);
  sub_18F5C941C(a1, "kCLConnectionMessageRegionTypeKey", buf);
  switch(objc_msgSend_type(a2, v49, v50, v51))
  {
    case 0u:
      *(_DWORD *)buf = objc_msgSend_definitionMask(a2, v52, v53, v54);
      sub_18F5C941C(a1, "kCLConnectionMessageRegionDefinitionKey", buf);
      v83 = (void *)objc_msgSend_UUID(a2, v80, v81, v82);
      v87 = objc_msgSend_UUIDString(v83, v84, v85, v86);
      if (v87)
        sub_18F5CB790(a1, "kCLConnectionMessageProximityUUIDKey", v87);
      else
        sub_18F665528(a1, "kCLConnectionMessageProximityUUIDKey", "");
      v99 = (void *)objc_msgSend_major(a2, v88, v89, v90);
      *(_WORD *)buf = objc_msgSend_unsignedShortValue(v99, v100, v101, v102);
      sub_18F664714(a1, "kCLConnectionMessageMajorKey", (unsigned __int16 *)buf);
      v106 = (void *)objc_msgSend_minor(a2, v103, v104, v105);
      *(_WORD *)buf = objc_msgSend_unsignedShortValue(v106, v107, v108, v109);
      sub_18F664714(a1, "kCLConnectionMessageMinorKey", (unsigned __int16 *)buf);
      buf[0] = objc_msgSend_notifyEntryStateOnDisplay(a2, v110, v111, v112);
      v79 = "kCLConnectionMessageNotifyEntryStateOnDisplayKey";
      goto LABEL_24;
    case 1u:
    case 3u:
      objc_msgSend_center(a2, v52, v53, v54);
      *(_QWORD *)buf = v55;
      v123[0] = v56;
      sub_18F5C96E8(a1, "kCLConnectionMessageLatitudeKey", buf);
      objc_msgSend_center(a2, v57, v58, v59);
      *(_QWORD *)buf = v60;
      v123[0] = v61;
      sub_18F5C96E8(a1, "kCLConnectionMessageLongitudeKey", v123);
      objc_msgSend_radius(a2, v62, v63, v64);
      *(_QWORD *)buf = v65;
      sub_18F5C96E8(a1, "kCLConnectionMessageRadiusKey", buf);
      objc_msgSend_desiredAccuracy(a2, v66, v67, v68);
      *(_QWORD *)buf = v69;
      sub_18F5C96E8(a1, "kCLConnectionMessageDesiredAccuracyKey", buf);
      *(_DWORD *)buf = objc_msgSend_referenceFrame(a2, v70, v71, v72);
      sub_18F5C941C(a1, "kCLConnectionMessageReferenceFrameKey", buf);
      buf[0] = objc_msgSend_allowMonitoringWhileNearby(a2, v73, v74, v75);
      sub_18F5C8F74(a1, "kCLConnectionMessageMonitoringNearby", buf);
      buf[0] = objc_msgSend_isLowPower(a2, v76, v77, v78);
      v79 = "kCLConnectionMessageLowPowerFenceKey";
      goto LABEL_24;
    case 2u:
      v91 = (void *)objc_msgSend_vertices(a2, v52, v53, v54);
      v121 = objc_msgSend_count(v91, v92, v93, v94);
      v120 = 0;
      v96 = objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(MEMORY[0x1E0CB36F8], v95, (uint64_t)v91, 1, &v120);
      if (v120)
      {
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
        v97 = qword_1ECD8E750;
        if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          LOWORD(v123[0]) = 2082;
          *(_QWORD *)((char *)v123 + 2) = "";
          _os_log_impl(&dword_18F5B3000, v97, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Unable to encode vertices for polygonal region\"}", buf, 0x12u);
          if (qword_1ECD8E758 != -1)
            dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
        }
        v98 = qword_1ECD8E750;
        if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          LOWORD(v123[0]) = 2082;
          *(_QWORD *)((char *)v123 + 2) = "";
          _os_signpost_emit_with_name_impl(&dword_18F5B3000, v98, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to encode vertices for polygonal region", "{\"msg%{public}.0s\":\"Unable to encode vertices for polygonal region\"}", buf, 0x12u);
        }
      }
      else
      {
        v113 = v96;
        sub_18F5C941C(a1, "kCLConnectionMessagePolygonalVerticesCountKey", &v121);
        sub_18F664688(a1, "kCLConnectionMessagePolygonalVerticesKey", v113);
        *(_DWORD *)buf = objc_msgSend_referenceFrame(a2, v114, v115, v116);
        sub_18F5C941C(a1, "kCLConnectionMessageReferenceFrameKey", buf);
        buf[0] = objc_msgSend_allowMonitoringWhileNearby(a2, v117, v118, v119);
        v79 = "kCLConnectionMessageMonitoringNearby";
LABEL_24:
        sub_18F5C8F74(a1, v79, buf);
      }
      return;
    default:
      return;
  }
}

uint64_t sub_18F5D06EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  int v36;
  int v37;
  unsigned __int8 *v38;
  int v39;
  char v40;
  _QWORD v41[2];

  if (!a2)
    return 0;
  v6 = objc_msgSend_type(a2, (const char *)a2, a3, a4);
  result = sub_18F5CF1FC(v6, v6);
  if ((_DWORD)result)
  {
    sub_18F5C9250(v41);
    sub_18F5D01B0((uint64_t)v41, a2, v8, v9);
    v40 = 0;
    sub_18F5C8F74((uint64_t)v41, "kCLConnectionMessageSubscribeKey", &v40);
    v13 = *(_BYTE **)(a1 + 384);
    if (v13 && (v14 = *v13, *v13))
    {
      v15 = 0;
      v16 = 0;
      v17 = v13 + 1;
      do
      {
        v16 ^= v14 << (v15 & 0x18);
        v18 = *v17++;
        v14 = v18;
        v15 += 8;
      }
      while (v18);
    }
    else
    {
      v16 = 0;
    }
    v19 = (void *)objc_msgSend_identifier(a2, v10, v11, v12);
    v23 = (_BYTE *)objc_msgSend_UTF8String(v19, v20, v21, v22);
    if (v23)
    {
      v27 = *v23;
      if (*v23)
      {
        v28 = 0;
        v29 = v23 + 1;
        do
        {
          v16 ^= v27 << (v28 & 0x18);
          v30 = *v29++;
          v27 = v30;
          v28 += 8;
        }
        while (v30);
      }
    }
    v31 = (void *)objc_msgSend_onBehalfOfBundleId(a2, v24, v25, v26);
    v35 = (_BYTE *)objc_msgSend_UTF8String(v31, v32, v33, v34);
    if (v35)
    {
      v36 = *v35;
      if (*v35)
      {
        v37 = 0;
        v38 = v35 + 1;
        do
        {
          v16 ^= v36 << (v37 & 0x18);
          v39 = *v38++;
          v36 = v39;
          v37 += 8;
        }
        while (v39);
      }
    }
    entr_act_modify();
    sub_18F5C7BB4(a1, "kCLConnectionMessageRegionMonitoring", (uint64_t)v41);
    sub_18F5C6360(v41);
    return 1;
  }
  return result;
}

void sub_18F5D0850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_18F5D0868(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[6];
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v13[0] = CFSTR("kCLConnectionMessageSubscribeKey");
  v14[0] = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, (uint64_t)a2, a4);
  v13[1] = CFSTR("kCLConnectionMessageTranscriptShouldPromptKey");
  v14[1] = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v7, a3, v8);
  v10 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v9, (uint64_t)v14, (uint64_t)v13, 2);
  if (a4)
  {
    v11 = *(_QWORD *)(a1 + 232);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = sub_18F5D0970;
    v12[3] = &unk_1E2990ED0;
    v12[4] = v11;
    v12[5] = a4;
    sub_18F5D5CC0(a1, "kCLConnectionMessageTranscriptSession", v10, 1, (uint64_t)v12);
  }
}

uint64_t sub_18F5D0970(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  _QWORD v6[5];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_18F5D09C8;
  v6[3] = &unk_1E2990E30;
  v4 = *(void **)(a1 + 32);
  v6[4] = *(_QWORD *)(a1 + 40);
  return objc_msgSend_async_(v4, a2, (uint64_t)v6, a4);
}

uint64_t sub_18F5D09C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_18F5D09D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[6];
  _QWORD v24[4];
  _QWORD v25[5];

  v25[4] = *MEMORY[0x1E0C80C00];
  v24[0] = CFSTR("kCLConnectionMessageTranscriptFetchRadiusKey");
  v25[0] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], a2, a3, a4);
  v24[1] = CFSTR("kCLConnectionMessageTranscriptFetchSampleCountKey");
  v25[1] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v12, (uint64_t)a2, v13);
  v24[2] = CFSTR("kCLConnectionMessageTranscriptFetchCenterLatitudeKey");
  v25[2] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v14, v15, v16, a6);
  v24[3] = CFSTR("kCLConnectionMessageTranscriptFetchCenterLongitudeKey");
  v25[3] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v17, v18, v19, a7);
  v21 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v20, (uint64_t)v25, (uint64_t)v24, 4);
  v22 = *(_QWORD *)(a1 + 232);
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = sub_18F5D0B1C;
  v23[3] = &unk_1E2990E80;
  v23[4] = v22;
  v23[5] = a3;
  sub_18F5D5CC0(a1, "kCLConnectionMessageTranscriptFetch", v21, 0, (uint64_t)v23);
}

uint64_t sub_18F5D0B1C(uint64_t result, CLConnectionMessage **a2)
{
  uint64_t v2;
  CLConnectionMessage *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  NSSet *v10;
  void *DictionaryOfClasses;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  _QWORD v27[7];
  _QWORD v28[5];
  __int16 v29;
  uint8_t buf[1640];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(result + 40))
  {
    v2 = result;
    v3 = *a2;
    if (*a2)
    {
      v4 = (void *)MEMORY[0x1E0C99E60];
      v5 = objc_opt_class();
      v6 = objc_opt_class();
      v7 = objc_opt_class();
      v10 = (NSSet *)objc_msgSend_setWithObjects_(v4, v8, v5, v9, v6, v7, 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v3, v10);
      v14 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v12, (uint64_t)CFSTR("kCLConnectionMessageTranscriptFetchLocationsKey"), v13);
      v17 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v15, (uint64_t)CFSTR("kCLConnectionMessageTranscriptError"), v16);
      v27[0] = MEMORY[0x1E0C809B0];
      v27[1] = 3221225472;
      v27[2] = sub_18F5D0E00;
      v27[3] = &unk_1E2990EA8;
      v18 = *(void **)(v2 + 32);
      v19 = *(_QWORD *)(v2 + 40);
      v27[5] = v17;
      v27[6] = v19;
      v27[4] = v14;
      return objc_msgSend_async_(v18, v20, (uint64_t)v27, v21);
    }
    else
    {
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
      v22 = qword_1ECD8E750;
      if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_DEBUG, "#transcriptSession reply for fetchTranscriptLocation is nil", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
        v29 = 0;
        v26 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "void CLClientFetchTranscriptLocations(CLClientRef, double, int, CLLocationCoordinate2D, void (^)(NSArray *, NSError *))_block_invoke", "CoreLocation: %s\n", v26);
        if (v26 != (char *)buf)
          free(v26);
      }
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = 3221225472;
      v28[2] = sub_18F5D0DB4;
      v28[3] = &unk_1E2990E30;
      v25 = *(void **)(v2 + 32);
      v28[4] = *(_QWORD *)(v2 + 40);
      return objc_msgSend_async_(v25, v23, (uint64_t)v28, v24);
    }
  }
  return result;
}

uint64_t sub_18F5D0DB4(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, *MEMORY[0x1E0CB28A8], 4097, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F5D0E00(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_18F5D0E14(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];
  _QWORD v11[2];
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  v11[0] = CFSTR("kCLConnectionMessageTranscriptFetchSampleCountKey");
  v11[1] = CFSTR("kCLConnectionMessagePurposeIdentifierKey");
  v12[0] = objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], a2, a3, a4);
  v12[1] = a2;
  v8 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v7, (uint64_t)v12, (uint64_t)v11, 2);
  v9 = *(_QWORD *)(a1 + 232);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_18F5D0F04;
  v10[3] = &unk_1E2990ED0;
  v10[4] = v9;
  v10[5] = a4;
  sub_18F5D5CC0(a1, "kCLConnectionMessageRequestHistoricalLocations", v8, 0, (uint64_t)v10);
}

uint64_t sub_18F5D0F04(uint64_t a1, CLConnectionMessage **a2)
{
  CLConnectionMessage *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  NSSet *v10;
  void *DictionaryOfClasses;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  char *v27;
  _QWORD v28[7];
  _QWORD v29[5];
  __int16 v30;
  uint8_t buf[1640];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (*a2)
  {
    v4 = (void *)MEMORY[0x1E0C99E60];
    v5 = objc_opt_class();
    v6 = objc_opt_class();
    v7 = objc_opt_class();
    v10 = (NSSet *)objc_msgSend_setWithObjects_(v4, v8, v5, v9, v6, v7, 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v3, v10);
    v14 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v12, (uint64_t)CFSTR("kCLConnectionMessageTranscriptFetchLocationsKey"), v13);
    v17 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v15, (uint64_t)CFSTR("kCLConnectionMessageTranscriptError"), v16);
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = sub_18F5D11E0;
    v28[3] = &unk_1E2990EA8;
    v18 = *(void **)(a1 + 32);
    v19 = *(_QWORD *)(a1 + 40);
    v28[5] = v17;
    v28[6] = v19;
    v28[4] = v14;
    return objc_msgSend_async_(v18, v20, (uint64_t)v28, v21);
  }
  else
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v23 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v23, OS_LOG_TYPE_DEBUG, "#historicalLocations reply for fetchTranscriptLocation is nil", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
      v30 = 0;
      v27 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLClientRequestHistoricalLocations(CLClientRef, NSString *, NSInteger, void (^)(NSArray *, NSError *))_block_invoke", "CoreLocation: %s\n", v27);
      if (v27 != (char *)buf)
        free(v27);
    }
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = sub_18F5D1194;
    v29[3] = &unk_1E2990E30;
    v26 = *(void **)(a1 + 32);
    v29[4] = *(_QWORD *)(a1 + 40);
    return objc_msgSend_async_(v26, v24, (uint64_t)v29, v25);
  }
}

uint64_t sub_18F5D1194(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, *MEMORY[0x1E0CB28A8], 4097, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F5D11E0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_18F5D11F4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v7[6];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = _os_activity_create(&dword_18F5B3000, "CL: CLClientWillPromptForTranscriptSession", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v4, &state);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v5 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = "activity";
    _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLClientWillPromptForTranscriptSession\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v6 = *(_QWORD *)(a1 + 232);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_18F5D1388;
  v7[3] = &unk_1E2990E80;
  v7[4] = v6;
  v7[5] = a2;
  sub_18F5D5CC0(a1, "kCLConnectionMessageWillPromptForTranscriptSession", 0, 0, (uint64_t)v7);
  os_activity_scope_leave(&state);
}

void sub_18F5D1370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5D1388(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  CLConnectionMessage *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  NSSet *v11;
  void *DictionaryOfClasses;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[6];
  char v28;
  _QWORD v29[5];

  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    v5 = result;
    v6 = *(CLConnectionMessage **)a2;
    if (*(_QWORD *)a2)
    {
      v7 = (void *)MEMORY[0x1E0C99E60];
      v8 = objc_opt_class();
      v11 = (NSSet *)objc_msgSend_setWithObjects_(v7, v9, v8, v10, 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v6, v11);
      v15 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, (uint64_t)CFSTR("kCLConnectionMessageWillPromptForTranscriptSessionKey"), v14);
      LOBYTE(v7) = objc_msgSend_BOOLValue(v15, v16, v17, v18);
      v21 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v19, (uint64_t)CFSTR("kCLConnectionMessageTranscriptError"), v20);
      v27[0] = MEMORY[0x1E0C809B0];
      v27[1] = 3221225472;
      v27[2] = sub_18F5D14E8;
      v27[3] = &unk_1E2990EF8;
      v22 = *(void **)(v5 + 32);
      v23 = *(_QWORD *)(v5 + 40);
      v28 = (char)v7;
      v27[4] = v21;
      v27[5] = v23;
      return objc_msgSend_async_(v22, v24, (uint64_t)v27, v25);
    }
    else
    {
      v26 = *(void **)(result + 32);
      v29[0] = MEMORY[0x1E0C809B0];
      v29[1] = 3221225472;
      v29[2] = sub_18F5D149C;
      v29[3] = &unk_1E2990E30;
      v29[4] = v4;
      return objc_msgSend_async_(v26, a2, (uint64_t)v29, a4);
    }
  }
  return result;
}

uint64_t sub_18F5D149C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, *MEMORY[0x1E0CB28A8], 4097, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F5D14E8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

void sub_18F5D14FC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v7[6];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = _os_activity_create(&dword_18F5B3000, "CL: CLClientIsConsideredInRemoteArea", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v4, &state);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v5 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = "activity";
    _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLClientIsConsideredInRemoteArea\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v6 = *(_QWORD *)(a1 + 232);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_18F5D1690;
  v7[3] = &unk_1E2990E80;
  v7[4] = v6;
  v7[5] = a2;
  sub_18F5D5CC0(a1, "kCLConnectionMessageIsConsideredInRemoteArea", 0, 0, (uint64_t)v7);
  os_activity_scope_leave(&state);
}

void sub_18F5D1678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5D1690(uint64_t result, CLConnectionMessage **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *Dictionary;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];

  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    v5 = result;
    if (*a2)
    {
      Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
      v9 = (void *)objc_msgSend_objectForKeyedSubscript_(Dictionary, v7, (uint64_t)CFSTR("kCLConnectionMessageIsConsideredInRemoteAreaKey"), v8);
      v13 = objc_msgSend_BOOLValue(v9, v10, v11, v12);
      v16 = objc_msgSend_objectForKeyedSubscript_(Dictionary, v14, (uint64_t)CFSTR("kCLConnectionMessageTranscriptError"), v15);
      v21 = MEMORY[0x1E0C809B0];
      v22 = 3221225472;
      v23 = sub_18F5D17C4;
      v24 = &unk_1E2990EF8;
      v17 = *(void **)(v5 + 32);
      v18 = *(_QWORD *)(v5 + 40);
      LOBYTE(v27) = v13;
      return objc_msgSend_async_(v17, v19, (uint64_t)&v21, v20, MEMORY[0x1E0C809B0], 3221225472, sub_18F5D17C4, &unk_1E2990EF8, v16, v18, v27, v28[0], v28[1], v28[2], v28[3], v28[4]);
    }
    else
    {
      return objc_msgSend_async_(*(void **)(result + 32), (const char *)a2, (uint64_t)v28, a4, v21, v22, v23, v24, v25, v26, v27, MEMORY[0x1E0C809B0], 3221225472, sub_18F5D1778, &unk_1E2990E30, v4);
    }
  }
  return result;
}

uint64_t sub_18F5D1778(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, *MEMORY[0x1E0CB28A8], 4097, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F5D17C4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

uint64_t sub_18F5D17D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  int v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  uint64_t result;
  NSObject *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint8_t buf[1640];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v6 = objc_msgSend_type(a2, (const char *)a2, a3, a4);
  if (sub_18F5CF1FC(v6, v6))
  {
    sub_18F5C9250(buf);
    sub_18F5D01B0((uint64_t)buf, a2, v7, v8);
    v12 = *(_BYTE **)(a1 + 384);
    if (v12 && (v13 = *v12, *v12))
    {
      v14 = 0;
      v15 = 0;
      v16 = v12 + 1;
      do
      {
        v15 ^= v13 << (v14 & 0x18);
        v17 = *v16++;
        v13 = v17;
        v14 += 8;
      }
      while (v17);
    }
    else
    {
      v15 = 0;
    }
    v18 = (void *)objc_msgSend_identifier(a2, v9, v10, v11);
    v22 = (_BYTE *)objc_msgSend_UTF8String(v18, v19, v20, v21);
    if (v22)
    {
      v26 = *v22;
      if (*v22)
      {
        v27 = 0;
        v28 = v22 + 1;
        do
        {
          v15 ^= v26 << (v27 & 0x18);
          v29 = *v28++;
          v26 = v29;
          v27 += 8;
        }
        while (v29);
      }
    }
    v30 = (void *)objc_msgSend_onBehalfOfBundleId(a2, v23, v24, v25);
    v34 = (_BYTE *)objc_msgSend_UTF8String(v30, v31, v32, v33);
    if (v34)
    {
      v35 = *v34;
      if (*v34)
      {
        v36 = 0;
        v37 = v34 + 1;
        do
        {
          v15 ^= v35 << (v36 & 0x18);
          v38 = *v37++;
          v35 = v38;
          v36 += 8;
        }
        while (v38);
      }
    }
    entr_act_modify();
    sub_18F5C7BB4(a1, "kCLConnectionMessageRegionState", (uint64_t)buf);
    sub_18F5C6360(buf);
    return 1;
  }
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v40 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67174657;
    *(_DWORD *)&buf[4] = objc_msgSend_type(a2, v41, v42, v43);
    _os_log_impl(&dword_18F5B3000, v40, OS_LOG_TYPE_FAULT, "Fence: CLClientRequestRegionState, unsupported fence type, %{private}d", buf, 8u);
  }
  result = sub_18F5C4AE0(115, 0);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    objc_msgSend_type(a2, v44, v45, v46);
    v47 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "Boolean CLClientRequestRegionState(CLClientRef, CLRegion *)", "CoreLocation: %s\n", v47);
    if (v47 != (char *)buf)
      free(v47);
    return 0;
  }
  return result;
}

void sub_18F5D1AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

BOOL CLClientPopulateRegionFromInfo(id *a1, const __CFDictionary *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  CLBeaconRegion *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  const char *v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  _CLSignificantRegion *v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  int v53;
  void *v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  CLBeaconRegion *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  NSObject *v70;
  char *v71;
  const char *v72;
  uint64_t v73;
  CLBeaconRegion *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  NSObject *v83;
  const char *v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  CLBeaconRegion *v92;
  uint64_t v93;
  const char *v94;
  const char *v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  NSObject *v103;
  const char *v104;
  uint64_t v105;
  _CLPolygonalRegion *v106;
  uint64_t v107;
  const char *v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  id v114;
  id v115;
  char *v117;
  int v118;
  uint64_t v119;
  CFTypeRef v120;
  int v121;
  BOOL v122;
  unsigned int v123;
  __int16 v124;
  __int16 v125;
  int v126;
  void *__p[2];
  uint64_t v128;
  void *v129[2];
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134[2];
  uint64_t v135;
  _QWORD v136[2];
  double v137;
  __int16 v138;
  uint64_t v139;
  uint8_t buf[8];
  _BYTE v141[1620];
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  sub_18F5C639C(v136, a2);
  v134[0] = 0;
  v134[1] = 0;
  v135 = 0;
  sub_18F662744((uint64_t)v136, "kCLConnectionMessageNameKey", (uint64_t)v134);
  v131 = 0;
  v132 = 0;
  v133 = 0;
  sub_18F662744((uint64_t)v136, "kCLConnectionMessageOnBehalfOfKey", (uint64_t)&v131);
  if (SHIBYTE(v133) < 0)
  {
    if (v132)
    {
      v5 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v3, (uint64_t)v131, v4);
      goto LABEL_6;
    }
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  if (!HIBYTE(v133))
    goto LABEL_7;
  v5 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v3, (uint64_t)&v131, v4);
LABEL_6:
  v6 = v5;
LABEL_8:
  v129[0] = 0;
  v129[1] = 0;
  v130 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v128 = 0;
  sub_18F662744((uint64_t)v136, "kCLConnectionMessageDeviceIDKey", (uint64_t)v129);
  v9 = objc_alloc(MEMORY[0x1E0CB3A28]);
  if (v130 >= 0)
    v10 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)v129, v8);
  else
    v10 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)v129[0], v8);
  v13 = (id)objc_msgSend_initWithUUIDString_(v9, v11, v10, v12);
  sub_18F662744((uint64_t)v136, "kCLConnectionMessageHandoffTagKey", (uint64_t)__p);
  if (v128 >= 0)
    v16 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v14, (uint64_t)__p, v15);
  else
    v16 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v14, (uint64_t)__p[0], v15);
  v17 = v16;
  v126 = 0;
  sub_18F5C71C0((uint64_t)v136, "kCLConnectionMessageRegionTypeKey", &v126);
  v125 = 0;
  sub_18F5C7D34((uint64_t)v136, "kCLConnectionMessageNotifyOnEntryKey", (BOOL *)&v125 + 1);
  sub_18F5C7D34((uint64_t)v136, "kCLConnectionMessageNotifyOnExitKey", (BOOL *)&v125);
  v124 = 0;
  sub_18F5C7D34((uint64_t)v136, "kCLConnectionMessageConservativeEntry", (BOOL *)&v124 + 1);
  sub_18F5C7D34((uint64_t)v136, "kCLConnectionMessageEmergencyKey", (BOOL *)&v124);
  switch(v126)
  {
    case 0:
      LOBYTE(v123) = 0;
      sub_18F5C7D34((uint64_t)v136, "kCLConnectionMessageNotifyEntryStateOnDisplayKey", (BOOL *)&v123);
      *(_QWORD *)buf = 0;
      *(_QWORD *)v141 = 0;
      *(_QWORD *)&v141[8] = 0;
      LOWORD(v120) = 0;
      LOWORD(v119) = 0;
      LODWORD(v137) = 0;
      sub_18F662744((uint64_t)v136, "kCLConnectionMessageProximityUUIDKey", (uint64_t)buf);
      sub_18F661358((uint64_t)v136, "kCLConnectionMessageMajorKey", &v120);
      sub_18F661358((uint64_t)v136, "kCLConnectionMessageMinorKey", &v119);
      sub_18F5C71C0((uint64_t)v136, "kCLConnectionMessageRegionDefinitionKey", &v137);
      if ((~LODWORD(v137) & 7) == 0)
      {
        v20 = objc_alloc(MEMORY[0x1E0CB3A28]);
        if (v141[15] >= 0)
          v21 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v18, (uint64_t)buf, v19);
        else
          v21 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v18, *(uint64_t *)buf, v19);
        v24 = (void *)objc_msgSend_initWithUUIDString_(v20, v22, v21, v23);
        v27 = [CLBeaconRegion alloc];
        v28 = (unsigned __int16)v120;
        v29 = (unsigned __int16)v119;
        if (v135 >= 0)
          v30 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v25, (uint64_t)v134, v26);
        else
          v30 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v25, (uint64_t)v134[0], v26);
        v32 = (void *)objc_msgSend_initWithUUID_major_minor_identifier_(v27, v31, (uint64_t)v24, v28, v29, v30);
LABEL_77:
        v78 = v32;
        objc_msgSend_setOnBehalfOfBundleId_(v32, v33, v6, v34);
        goto LABEL_78;
      }
      if ((~LODWORD(v137) & 3) == 0)
      {
        v59 = objc_alloc(MEMORY[0x1E0CB3A28]);
        if (v141[15] >= 0)
          v60 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v57, (uint64_t)buf, v58);
        else
          v60 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v57, *(uint64_t *)buf, v58);
        v24 = (void *)objc_msgSend_initWithUUIDString_(v59, v61, v60, v62);
        v65 = [CLBeaconRegion alloc];
        v66 = (unsigned __int16)v120;
        if (v135 >= 0)
          v67 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v63, (uint64_t)v134, v64);
        else
          v67 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v63, (uint64_t)v134[0], v64);
        v32 = (void *)objc_msgSend_initWithUUID_major_identifier_(v65, v68, (uint64_t)v24, v66, v67);
        goto LABEL_77;
      }
      if ((LOBYTE(v137) & 1) != 0)
      {
        v86 = objc_alloc(MEMORY[0x1E0CB3A28]);
        if (v141[15] >= 0)
          v87 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v84, (uint64_t)buf, v85);
        else
          v87 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v84, *(uint64_t *)buf, v85);
        v24 = (void *)objc_msgSend_initWithUUIDString_(v86, v88, v87, v89);
        v92 = [CLBeaconRegion alloc];
        if (v135 >= 0)
          v93 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v90, (uint64_t)v134, v91);
        else
          v93 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v90, (uint64_t)v134[0], v91);
        v32 = (void *)objc_msgSend_initWithUUID_identifier_(v92, v94, (uint64_t)v24, v93);
        goto LABEL_77;
      }
      v74 = [CLBeaconRegion alloc];
      if (v135 >= 0)
        v75 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v72, (uint64_t)v134, v73);
      else
        v75 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v72, (uint64_t)v134[0], v73);
      v78 = (void *)objc_msgSend_initWithIdentifier_(v74, v76, v75, v77);
      v24 = 0;
      objc_msgSend_setOnBehalfOfBundleId_(v78, v79, v6, v80);
LABEL_78:
      objc_msgSend_setNotifyEntryStateOnDisplay_(v78, v81, v123, v82);
      objc_msgSend_setNotifyOnEntry_(v78, v95, HIBYTE(v125), v96);
      objc_msgSend_setNotifyOnExit_(v78, v97, v125, v98);
      objc_msgSend_setConservativeEntry_(v78, v99, HIBYTE(v124), v100);
      objc_msgSend_setEmergency_(v78, v101, v124, v102);
      *a1 = v78;

      if ((v141[15] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      goto LABEL_89;
    case 1:
      LODWORD(v120) = 0;
      sub_18F5C71C0((uint64_t)v136, "kCLConnectionMessageReferenceFrameKey", &v120);
      sub_18F5C7D34((uint64_t)v136, "kCLConnectionMessageMonitoringNearby", (BOOL *)&v119);
      LOBYTE(v123) = 0;
      sub_18F5C7D34((uint64_t)v136, "kCLConnectionMessageLowPowerFenceKey", (BOOL *)&v123);
      v137 = 0.0;
      sub_18F66249C((uint64_t)v136, "kCLConnectionMessageLatitudeKey", buf);
      sub_18F66249C((uint64_t)v136, "kCLConnectionMessageLongitudeKey", v141);
      sub_18F66249C((uint64_t)v136, "kCLConnectionMessageRadiusKey", &v137);
      v48 = [CLCircularRegion alloc];
      v49 = *(_QWORD *)buf;
      v50 = *(double *)v141;
      v51 = v137;
      v52 = v120;
      v53 = v123;
      v54 = (void *)MEMORY[0x1E0CB3940];
      if (v135 >= 0)
        goto LABEL_35;
      goto LABEL_34;
    case 2:
      v123 = 0;
      v122 = 0;
      v121 = 0;
      v120 = 0;
      sub_18F5C71C0((uint64_t)v136, "kCLConnectionMessagePolygonalVerticesCountKey", &v121);
      sub_18F664380((uint64_t)v136, CFSTR("kCLConnectionMessagePolygonalVerticesKey"), &v120);
      sub_18F5C71C0((uint64_t)v136, "kCLConnectionMessageReferenceFrameKey", &v123);
      sub_18F5C7D34((uint64_t)v136, "kCLConnectionMessageMonitoringNearby", &v122);
      v35 = (uint64_t)v120;
      v119 = 0;
      v36 = (void *)MEMORY[0x1E0CB3710];
      v37 = objc_opt_class();
      v39 = (void *)objc_msgSend_unarchivedArrayOfObjectsOfClass_fromData_error_(v36, v38, v37, v35, &v119);
      v43 = objc_msgSend_count(v39, v40, v41, v42);
      if (v119)
      {
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
        v44 = qword_1ECD8E750;
        if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v141 = 2082;
          *(_QWORD *)&v141[2] = "";
          *(_WORD *)&v141[10] = 2114;
          *(_QWORD *)&v141[12] = v119;
          _os_log_impl(&dword_18F5B3000, v44, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to get vertices from encoded data\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
          if (qword_1ECD8E758 != -1)
            dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
        }
        v45 = qword_1ECD8E750;
        if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v141 = 2082;
          *(_QWORD *)&v141[2] = "";
          *(_WORD *)&v141[10] = 2114;
          *(_QWORD *)&v141[12] = v119;
          _os_signpost_emit_with_name_impl(&dword_18F5B3000, v45, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to get vertices from encoded data", "{\"msg%{public}.0s\":\"Unable to get vertices from encoded data\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        goto LABEL_89;
      }
      v69 = v43;
      if (v121 == (_DWORD)v43)
      {
        if ((v121 - 102) > 0xFFFFFF9D)
        {
          if (qword_1ECD8E758 != -1)
            dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
          v103 = qword_1ECD8E750;
          if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67174657;
            *(_DWORD *)&buf[4] = v121;
            _os_log_impl(&dword_18F5B3000, v103, OS_LOG_TYPE_DEBUG, "Copied %{private}d vertices", buf, 8u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1ECD8E758 != -1)
              dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
            LODWORD(v137) = 67174657;
            HIDWORD(v137) = v121;
            v117 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "Boolean CLClientPopulateRegionFromInfo(CLRegion **, CFDictionaryRef)", "CoreLocation: %s\n", v117);
            if (v117 != (char *)buf)
              free(v117);
          }
          v106 = [_CLPolygonalRegion alloc];
          if (v135 >= 0)
            v107 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v104, (uint64_t)v134, v105);
          else
            v107 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v104, (uint64_t)v134[0], v105);
          v109 = (void *)objc_msgSend_initWithVertices_identifier_(v106, v108, (uint64_t)v39, v107);
          objc_msgSend_setReferenceFrame_(v109, v110, v123, v111);
          objc_msgSend_setEmergency_(v109, v112, v124, v113);
          *a1 = v109;
        }
        else
        {
          if (qword_1ECD8E758 != -1)
            dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
          v70 = qword_1ECD8E750;
          if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)&buf[4] = v121;
            _os_log_impl(&dword_18F5B3000, v70, OS_LOG_TYPE_FAULT, "Number of vertices received invalid, %{public}d, internal", buf, 8u);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1ECD8E758 != -1)
              dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
            LODWORD(v137) = 67240192;
            HIDWORD(v137) = v121;
            v71 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "Boolean CLClientPopulateRegionFromInfo(CLRegion **, CFDictionaryRef)", "CoreLocation: %s\n", v71);
LABEL_68:
            if (v71 != (char *)buf)
              free(v71);
          }
        }
      }
      else
      {
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
        v83 = qword_1ECD8E750;
        if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)&buf[4] = v121;
          *(_WORD *)v141 = 2050;
          *(_QWORD *)&v141[2] = v69;
          _os_log_impl(&dword_18F5B3000, v83, OS_LOG_TYPE_FAULT, "Number of vertices received doesn't match stored, %{public}d, %{public}lu", buf, 0x12u);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECD8E758 != -1)
            dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
          LODWORD(v137) = 67240448;
          HIDWORD(v137) = v121;
          v138 = 2050;
          v139 = v69;
          v71 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "Boolean CLClientPopulateRegionFromInfo(CLRegion **, CFDictionaryRef)", "CoreLocation: %s\n", v71);
          goto LABEL_68;
        }
      }
LABEL_89:
      v114 = *a1;
      v115 = *a1;
      if (SHIBYTE(v128) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v130) < 0)
        operator delete(v129[0]);
      if (SHIBYTE(v133) < 0)
        operator delete(v131);
      if (SHIBYTE(v135) < 0)
        operator delete(v134[0]);
      sub_18F5C6360(v136);
      return v115 != 0;
    case 3:
      LODWORD(v120) = 0;
      sub_18F5C71C0((uint64_t)v136, "kCLConnectionMessageReferenceFrameKey", &v120);
      sub_18F5C7D34((uint64_t)v136, "kCLConnectionMessageMonitoringNearby", (BOOL *)&v119);
      LOBYTE(v123) = 0;
      sub_18F5C7D34((uint64_t)v136, "kCLConnectionMessageLowPowerFenceKey", (BOOL *)&v123);
      v137 = 0.0;
      sub_18F66249C((uint64_t)v136, "kCLConnectionMessageLatitudeKey", buf);
      sub_18F66249C((uint64_t)v136, "kCLConnectionMessageLongitudeKey", v141);
      sub_18F66249C((uint64_t)v136, "kCLConnectionMessageRadiusKey", &v137);
      v48 = [_CLSignificantRegion alloc];
      v49 = *(_QWORD *)buf;
      v50 = *(double *)v141;
      v51 = v137;
      v52 = v120;
      v53 = v123;
      v54 = (void *)MEMORY[0x1E0CB3940];
      if (v135 < 0)
LABEL_34:
        v55 = objc_msgSend_stringWithUTF8String_(v54, v46, (uint64_t)v134[0], v47);
      else
LABEL_35:
        v55 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v46, (uint64_t)v134, v47);
      BYTE1(v118) = HIBYTE(v124);
      BYTE2(v118) = v124;
      LOBYTE(v118) = v125;
      *a1 = (id)objc_msgSend_initWithCenter_radius_referenceFrame_allowMonitoringWhenNearby_lowPower_identifier_onBehalfOfBundleId_notifyOnEntry_notifyOnExit_conservativeEntry_emergency_deviceId_handoffTag_(v48, v56, v52, 0, v53 != 0, v55, v6, HIBYTE(v125), *(double *)&v49, v50, v51, v118, v13, v17);
      goto LABEL_89;
    default:
      goto LABEL_89;
  }
}

void sub_18F5D28F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  sub_18F5C6360(&a41);
  _Unwind_Resume(a1);
}

uint64_t CLClientGetGroundAltitudeAtLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v5;

  if (a1)
  {
    v5 = *(const char **)(a1 + 368);
    a1 = *(_QWORD *)(a1 + 360);
  }
  else
  {
    v5 = 0;
  }
  return sub_18F6E3020(a1, v5, a2, a3);
}

uint64_t CLClientGetError(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v5 = (void *)objc_msgSend_objectForKey_(a1, (const char *)a2, (uint64_t)CFSTR("kCLConnectionMessageErrorKey"), a4);
  v9 = objc_msgSend_intValue(v5, v6, v7, v8);
  *(_DWORD *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)a2 = v9;
  return 1;
}

uint64_t sub_18F5D2A30(CFDictionaryRef theDict, id *a2, _DWORD *a3)
{
  uint64_t v6;
  _QWORD v8[2];

  sub_18F5C639C(v8, theDict);
  if (CLClientPopulateRegionFromInfo(a2, theDict))
    v6 = sub_18F5C71C0((uint64_t)v8, "kCLConnectionMessageEventKey", a3);
  else
    v6 = 0;
  sub_18F5C6360(v8);
  return v6;
}

void sub_18F5D2AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5C6360(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5D2AC4(CFDictionaryRef theDict, id *a2, _DWORD *a3)
{
  uint64_t v6;
  _QWORD v8[2];

  sub_18F5C639C(v8, theDict);
  v6 = 0;
  if (a2 && a3)
  {
    if (CLClientPopulateRegionFromInfo(a2, theDict))
      v6 = sub_18F5C71C0((uint64_t)v8, "kCLConnectionMessageStatusKey", a3);
    else
      v6 = 0;
  }
  sub_18F5C6360(v8);
  return v6;
}

void sub_18F5D2B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5C6360(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5D2B64(CFDictionaryRef theDict, id *a2, _DWORD *a3)
{
  uint64_t v6;
  _QWORD v8[2];

  sub_18F5C639C(v8, theDict);
  v6 = 0;
  if (a2 && a3)
  {
    if (CLClientPopulateRegionFromInfo(a2, theDict))
      v6 = sub_18F5C71C0((uint64_t)v8, "kCLConnectionMessageErrorKey", a3);
    else
      v6 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  sub_18F5C6360(v8);
  return v6;
}

void sub_18F5D2BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5C6360(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_18F5D2C08(CFDictionaryRef theDict, id *a2, _BYTE *a3, id *a4)
{
  _BOOL8 v8;
  _QWORD v10[2];
  _QWORD v11[2];

  sub_18F5C639C(v11, theDict);
  v8 = 0;
  if (a2 && a3 && a4)
  {
    *a3 = 1;
    v8 = CLClientPopulateRegionFromInfo(a2, theDict);
    sub_18F5C9250(v10);
    if (sub_18F5BDBA4((uint64_t)v11, "kCLConnectionMessageAlternateRegionKey", v10))
    {
      if (v8)
        v8 = CLClientPopulateRegionFromInfo(a4, (const __CFDictionary *)v10[1]);
    }
    else
    {
      *a3 = 0;
    }
    sub_18F5C6360(v10);
  }
  sub_18F5C6360(v11);
  return v8;
}

void sub_18F5D2CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_18F5D2CFC(CFDictionaryRef theDict, void *a2)
{
  _QWORD v4[2];

  sub_18F5C639C(v4, theDict);
  if (a2)
    a2 = (void *)sub_18F66249C((uint64_t)v4, "kCLConnectionMessageRegionWatchdogSinceLast", a2);
  sub_18F5C6360(v4);
  return a2;
}

void sub_18F5D2D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5C6360(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5D2D6C(uint64_t a1, void *a2, int a3)
{
  pthread_mutex_t *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  int v68;
  int v69;
  _QWORD v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _QWORD v75[4];
  __int16 v76;
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v6 = *(pthread_mutex_t **)(a1 + 240);
  v75[3] = v6;
  pthread_mutex_lock(v6);
  v76 = 257;
  sub_18F5C9250(v75);
  sub_18F5CC0B8();
  if ((sub_18F6718D4() & 0x400000) == 0)
  {
    v10 = 0;
    goto LABEL_23;
  }
  if (objc_msgSend_count(a2, v7, v8, v9))
  {
    if ((*(_BYTE *)(a1 + 392) & 4) != 0)
    {
      objc_msgSend_count(a2, v11, v12, v13);
      entr_act_modify();
      goto LABEL_10;
    }
    objc_msgSend_count(a2, v11, v12, v13);
    entr_act_begin();
    v14 = *(_BYTE *)(a1 + 392) | 4;
    goto LABEL_8;
  }
  if ((*(_BYTE *)(a1 + 392) & 4) != 0)
  {
    entr_act_end();
    v14 = *(_BYTE *)(a1 + 392) & 0xFB;
LABEL_8:
    *(_BYTE *)(a1 + 392) = v14;
  }
LABEL_10:
  v68 = a3;
  v67 = a1;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v11, (uint64_t)&v71, (uint64_t)v77, 16);
  if (v18)
  {
    v19 = *(_QWORD *)v72;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v72 != v19)
          objc_enumerationMutation(a2);
        v21 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * i);
        if (!objc_msgSend_onBehalfOfBundleId(v21, v15, v16, v17))
        {
          sub_18F5C9250(v70);
          v25 = objc_msgSend_identifier(v21, v22, v23, v24);
          sub_18F664688((uint64_t)v70, "kCLConnectionMessageIdentifierKey", v25);
          v69 = objc_msgSend_definitionMask(v21, v26, v27, v28);
          sub_18F5C941C((uint64_t)v70, "kCLConnectionMessageRegionDefinitionKey", &v69);
          v32 = (void *)objc_msgSend_UUID(v21, v29, v30, v31);
          v36 = objc_msgSend_UUIDString(v32, v33, v34, v35);
          if (v36)
            sub_18F5CB790((uint64_t)v70, "kCLConnectionMessageProximityUUIDKey", v36);
          else
            sub_18F665528((uint64_t)v70, "kCLConnectionMessageProximityUUIDKey", "");
          v40 = (void *)objc_msgSend_major(v21, v37, v38, v39);
          LOWORD(v69) = objc_msgSend_unsignedShortValue(v40, v41, v42, v43);
          sub_18F664714((uint64_t)v70, "kCLConnectionMessageMajorKey", (unsigned __int16 *)&v69);
          v47 = (void *)objc_msgSend_minor(v21, v44, v45, v46);
          LOWORD(v69) = objc_msgSend_unsignedShortValue(v47, v48, v49, v50);
          sub_18F664714((uint64_t)v70, "kCLConnectionMessageMinorKey", (unsigned __int16 *)&v69);
          LOBYTE(v69) = objc_msgSend_notifyOnEntry(v21, v51, v52, v53);
          sub_18F5C8F74((uint64_t)v75, "kCLConnectionMessageNotifyOnEntryKey", &v69);
          LOBYTE(v69) = objc_msgSend_notifyOnExit(v21, v54, v55, v56);
          sub_18F5C8F74((uint64_t)v75, "kCLConnectionMessageNotifyOnExitKey", &v69);
          LOBYTE(v69) = objc_msgSend_notifyEntryStateOnDisplay(v21, v57, v58, v59);
          sub_18F5C8F74((uint64_t)v75, "kCLConnectionMessageNotifyEntryStateOnDisplayKey", &v69);
          LOBYTE(v69) = objc_msgSend_conservativeEntry(v21, v60, v61, v62);
          sub_18F5C8F74((uint64_t)v75, "kCLConnectionMessageConservativeEntry", &v69);
          LOBYTE(v69) = objc_msgSend_emergency(v21, v63, v64, v65);
          sub_18F5C8F74((uint64_t)v75, "kCLConnectionMessageEmergencyKey", &v69);
          sub_18F66738C((uint64_t)v75, "kCLConnectionMessageRegionsKey", (uint64_t)v70);
          sub_18F5C6360(v70);
        }
      }
      v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v15, (uint64_t)&v71, (uint64_t)v77, 16);
    }
    while (v18);
  }
  LODWORD(v70[0]) = v68;
  sub_18F5C941C((uint64_t)v75, "kCLConnectionMessageSubscribeKey", v70);
  v10 = 1;
  sub_18F5C7BB4(v67, "kCLConnectionMessageRanging", (uint64_t)v75);
LABEL_23:
  sub_18F5C6360(v75);
  pthread_mutex_unlock(v6);
  return v10;
}

void sub_18F5D3120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_18F5C6360(&a24);
  sub_18F5CE240((uint64_t)&a26);
  _Unwind_Resume(a1);
}

BOOL sub_18F5D319C(CFDictionaryRef theDict, id *a2, CFTypeRef *a3)
{
  CFStringRef v6;
  id v7;
  _BOOL8 v8;
  CFDictionaryRef v10[2];

  sub_18F5C639C(v10, theDict);
  *a3 = 0;
  if (!a2)
    goto LABEL_8;
  if (CLClientPopulateRegionFromInfo(a2, theDict))
  {
    v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], "kCLConnectionMessageBeaconsKey", 0x8000100u);
    *a3 = CFDictionaryGetValue(v10[1], v6);
    CFRelease(v6);
    if (*a3)
      CFRetain(*a3);
    v7 = *a2;
  }
  if (*a2)
    v8 = *a3 != 0;
  else
LABEL_8:
    v8 = 0;
  sub_18F5C6360(v10);
  return v8;
}

void sub_18F5D326C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5C6360(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5D3284(CFDictionaryRef theDict, id *a2, _DWORD *a3)
{
  uint64_t v6;
  _QWORD v8[2];

  sub_18F5C639C(v8, theDict);
  v6 = 0;
  if (a2 && a3)
  {
    if (CLClientPopulateRegionFromInfo(a2, theDict))
      v6 = sub_18F5C71C0((uint64_t)v8, "kCLConnectionMessageErrorKey", a3);
    else
      v6 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  sub_18F5C6360(v8);
  return v6;
}

void sub_18F5D3314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5C6360(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLClientGetAuthorizationStatus(const __CFDictionary *a1, _DWORD *a2)
{
  uint64_t AuthorizationStatusAndCorrectiveCompensation;
  NSObject *v3;
  char v5;
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = 1;
  AuthorizationStatusAndCorrectiveCompensation = CLClientGetAuthorizationStatusAndCorrectiveCompensation(a1, a2, &v5, &v6);
  if ((_DWORD)AuthorizationStatusAndCorrectiveCompensation && v5)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v3 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client is subject to corrective compensation, but hasn't been updated to find out about it yet\"}", buf, 0x12u);
    }
  }
  return AuthorizationStatusAndCorrectiveCompensation;
}

_QWORD *CLClientSetMatchInfoEnabled(uint64_t a1, int a2)
{
  pthread_mutex_t *v4;
  int v6;
  pthread_mutex_t *v7;
  __int16 v8;
  _QWORD v9[2];

  sub_18F5C9250(v9);
  v6 = a2;
  sub_18F5C941C((uint64_t)v9, "kCLConnectionMessageEnabledKey", &v6);
  v4 = *(pthread_mutex_t **)(a1 + 240);
  v7 = v4;
  pthread_mutex_lock(v4);
  v8 = 257;
  sub_18F5C7BB4(a1, "kCLConnectionMessageMatchInfoEnabled", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_18F5C6360(v9);
}

void sub_18F5D34B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5D34D8(uint64_t a1, int a2)
{
  pthread_mutex_t *v4;
  int v6;
  pthread_mutex_t *v7;
  __int16 v8;
  _QWORD v9[2];

  sub_18F5C9250(v9);
  v6 = a2;
  sub_18F5C941C((uint64_t)v9, "kCLConnectionMessageEnabledKey", &v6);
  v4 = *(pthread_mutex_t **)(a1 + 240);
  v7 = v4;
  pthread_mutex_lock(v4);
  v8 = 257;
  sub_18F5C7BB4(a1, "kCLConnectionMessageGroundAltitudeEnabled", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_18F5C6360(v9);
}

void sub_18F5D3564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5D358C(uint64_t a1, int a2)
{
  pthread_mutex_t *v4;
  int v6;
  pthread_mutex_t *v7;
  __int16 v8;
  _QWORD v9[2];

  sub_18F5C9250(v9);
  v6 = a2;
  sub_18F5C941C((uint64_t)v9, "kCLConnectionMessageEnabledKey", &v6);
  v4 = *(pthread_mutex_t **)(a1 + 240);
  v7 = v4;
  pthread_mutex_lock(v4);
  v8 = 257;
  sub_18F5C7BB4(a1, "kCLConnectionMessageFusionInfoEnabled", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_18F5C6360(v9);
}

void sub_18F5D3618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5D3640(uint64_t a1, int a2)
{
  pthread_mutex_t *v4;
  int v6;
  pthread_mutex_t *v7;
  __int16 v8;
  _QWORD v9[2];

  sub_18F5C9250(v9);
  v6 = a2;
  sub_18F5C941C((uint64_t)v9, "kCLConnectionMessageEnabledKey", &v6);
  v4 = *(pthread_mutex_t **)(a1 + 240);
  v7 = v4;
  pthread_mutex_lock(v4);
  v8 = 257;
  sub_18F5C7BB4(a1, "kCLConnectionMessageTrackRunInfoEnabled", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_18F5C6360(v9);
}

void sub_18F5D36CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5D36F4(uint64_t a1, int a2)
{
  pthread_mutex_t *v4;
  int v6;
  pthread_mutex_t *v7;
  __int16 v8;
  _QWORD v9[2];

  sub_18F5C9250(v9);
  v6 = a2;
  sub_18F5C941C((uint64_t)v9, "kCLConnectionMessageEnabledKey", &v6);
  v4 = *(pthread_mutex_t **)(a1 + 240);
  v7 = v4;
  pthread_mutex_lock(v4);
  v8 = 257;
  sub_18F5C7BB4(a1, "kCLConnectionMessageAllowsLocationPrompts", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_18F5C6360(v9);
}

void sub_18F5D3780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *CLClientSetShowLocationPrompt(uint64_t a1, int a2)
{
  pthread_mutex_t *v4;
  int v6;
  pthread_mutex_t *v7;
  __int16 v8;
  _QWORD v9[2];

  sub_18F5C9250(v9);
  v6 = a2;
  sub_18F5C941C((uint64_t)v9, "kCLConnectionMessageEnabledKey", &v6);
  v4 = *(pthread_mutex_t **)(a1 + 240);
  v7 = v4;
  pthread_mutex_lock(v4);
  v8 = 257;
  sub_18F5C7BB4(a1, "kCLConnectionMessageShowLocationPrompt", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_18F5C6360(v9);
}

void sub_18F5D3834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void CLClientSetAutomaticPromptingEnabled()
{
  NSObject *v0;
  char *v1;
  uint8_t buf[1640];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v0 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_INFO, "kCLConnectionMessageAutomaticPromptingEnabled is not supported", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v1 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLClientSetAutomaticPromptingEnabled(CLClientRef, Boolean)", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

_QWORD *CLClientUpdateARSessionState(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  _QWORD v6[2];

  sub_18F5C9250(v6);
  sub_18F664688((uint64_t)v6, "kCLConnectionMessageARSessionState", a2);
  v4 = *(pthread_mutex_t **)(a1 + 240);
  pthread_mutex_lock(v4);
  sub_18F5C7BB4(a1, "kCLConnectionMessageARSessionState", (uint64_t)v6);
  pthread_mutex_unlock(v4);
  return sub_18F5C6360(v6);
}

void sub_18F5D3A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *CLClientUpdateVIOEstimation(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  _QWORD v6[2];

  sub_18F5C9250(v6);
  sub_18F664688((uint64_t)v6, "kCLConnectionMessageVIOEstimation", a2);
  v4 = *(pthread_mutex_t **)(a1 + 240);
  pthread_mutex_lock(v4);
  sub_18F5C7BB4(a1, "kCLConnectionMessageVIOEstimation", (uint64_t)v6);
  pthread_mutex_unlock(v4);
  return sub_18F5C6360(v6);
}

void sub_18F5D3B18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *CLClientUpdateVLLocalizationResult(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  _QWORD v6[2];

  sub_18F5C9250(v6);
  sub_18F664688((uint64_t)v6, "kCLConnectionMessageVLLocalizationResult", a2);
  v4 = *(pthread_mutex_t **)(a1 + 240);
  pthread_mutex_lock(v4);
  sub_18F5C7BB4(a1, "kCLConnectionMessageVLLocalizationResult", (uint64_t)v6);
  pthread_mutex_unlock(v4);
  return sub_18F5C6360(v6);
}

void sub_18F5D3BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5D3BF0(CFDictionaryRef theDict, _BYTE *a2, _BYTE *a3)
{
  uint64_t v5;
  NSObject *v6;
  char *v7;
  NSObject *v8;
  __int16 v10;
  __int16 v11;
  _QWORD v12[2];
  uint8_t buf[1640];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  sub_18F5C639C(v12, theDict);
  if (!a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v8 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_FAULT, "Invalid call to CLClientGetAutopauseState", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_18;
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v11 = 0;
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "Boolean CLClientGetAutopauseState(CFDictionaryRef, Boolean *, Boolean *)", "CoreLocation: %s\n", v7);
    goto LABEL_23;
  }
  v10 = 0;
  if (!sub_18F5C7D34((uint64_t)v12, "kCLConnectionMessageAutopauseStatusKey", (BOOL *)&v10 + 1)
    || !sub_18F5C7D34((uint64_t)v12, "kCLConnectionMessageAutopauseOverrideKey", (BOOL *)&v10))
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v6 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "malformed message: kCLConnectionMessageAutopauseStatus", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_18;
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
    v11 = 0;
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "Boolean CLClientGetAutopauseState(CFDictionaryRef, Boolean *, Boolean *)", "CoreLocation: %s\n", v7);
LABEL_23:
    if (v7 != (char *)buf)
      free(v7);
LABEL_18:
    v5 = 0;
    goto LABEL_19;
  }
  *a2 = HIBYTE(v10);
  *a3 = v10;
  v5 = 1;
LABEL_19:
  sub_18F5C6360(v12);
  return v5;
}

void sub_18F5D3F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5D3F38(uint64_t a1, int a2)
{
  pthread_mutex_t *v4;
  int v6;
  pthread_mutex_t *v7;
  __int16 v8;
  _QWORD v9[2];

  sub_18F5C9250(v9);
  v6 = a2;
  sub_18F5C941C((uint64_t)v9, "kCLConnectionMessageAllowsBackgroundLocationUpdatesKey", &v6);
  v4 = *(pthread_mutex_t **)(a1 + 240);
  v7 = v4;
  pthread_mutex_lock(v4);
  v8 = 257;
  sub_18F5C7BB4(a1, "kCLConnectionMessageAllowsBackgroundLocationUpdates", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_18F5C6360(v9);
}

void sub_18F5D3FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5D3FEC(uint64_t a1, int a2)
{
  pthread_mutex_t *v4;
  int v6;
  pthread_mutex_t *v7;
  __int16 v8;
  _QWORD v9[2];

  sub_18F5C9250(v9);
  v6 = a2;
  sub_18F5C941C((uint64_t)v9, "kCLConnectionMessageShowsBackgroundLocationIndicatorKey", &v6);
  v4 = *(pthread_mutex_t **)(a1 + 240);
  v7 = v4;
  pthread_mutex_lock(v4);
  v8 = 257;
  sub_18F5C7BB4(a1, "kCLConnectionMessageShowsBackgroundLocationIndicator", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_18F5C6360(v9);
}

void sub_18F5D4078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5D40A0(uint64_t a1, double a2, double a3)
{
  pthread_mutex_t *v4;
  char v6[8];
  pthread_mutex_t *v7;
  __int16 v8;
  _QWORD v9[2];
  double v10;
  double v11;

  v11 = a2;
  v10 = a3;
  entr_act_set();
  entr_act_set();
  sub_18F5C9250(v9);
  v6[0] = 1;
  sub_18F5C8F74((uint64_t)v9, "kCLConnectionMessageBatchAllowedKey", v6);
  sub_18F5C96E8((uint64_t)v9, "kCLConnectionMessageBatchDistanceKey", &v11);
  sub_18F5C96E8((uint64_t)v9, "kCLConnectionMessageBatchTimeoutKey", &v10);
  v4 = *(pthread_mutex_t **)(a1 + 240);
  v7 = v4;
  pthread_mutex_lock(v4);
  v8 = 257;
  sub_18F5C7BB4(a1, "kCLConnectionMessageBatch", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_18F5C6360(v9);
}

void sub_18F5D41B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5D41E4(uint64_t a1)
{
  pthread_mutex_t *v2;
  _BYTE v4[8];
  pthread_mutex_t *v5;
  __int16 v6;
  _QWORD v7[2];

  entr_act_set();
  entr_act_set();
  sub_18F5C9250(v7);
  v4[0] = 0;
  sub_18F5C8F74((uint64_t)v7, "kCLConnectionMessageBatchAllowedKey", v4);
  v2 = *(pthread_mutex_t **)(a1 + 240);
  v5 = v2;
  pthread_mutex_lock(v2);
  v6 = 257;
  sub_18F5C7BB4(a1, "kCLConnectionMessageBatch", (uint64_t)v7);
  pthread_mutex_unlock(v2);
  return sub_18F5C6360(v7);
}

void sub_18F5D429C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5D42C4(uint64_t a1, const __CFDictionary *a2, BOOL *a3, _DWORD *a4)
{
  uint64_t v7;
  _QWORD v9[2];

  entr_act_set();
  entr_act_set();
  sub_18F5C639C(v9, a2);
  v7 = 0;
  if (a3 && a4)
  {
    sub_18F5C71C0((uint64_t)v9, "kCLConnectionMessageErrorKey", a4);
    a4[1] = 0;
    a4[2] = 0;
    *a3 = *a4 == -1;
    v7 = 1;
  }
  sub_18F5C6360(v9);
  return v7;
}

void sub_18F5D4380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5C6360(&a9);
  _Unwind_Resume(a1);
}

_QWORD *CLClientSetAllowsMapCorrection(uint64_t a1, int a2)
{
  pthread_mutex_t *v4;
  int v6;
  pthread_mutex_t *v7;
  __int16 v8;
  _QWORD v9[2];

  sub_18F5C9250(v9);
  v6 = a2;
  sub_18F5C941C((uint64_t)v9, "kCLConnectionMessageAllowsMapCorrectionKey", &v6);
  v4 = *(pthread_mutex_t **)(a1 + 240);
  v7 = v4;
  pthread_mutex_lock(v4);
  v8 = 257;
  sub_18F5C7BB4(a1, "kCLConnectionMessageAllowsMapCorrection", (uint64_t)v9);
  pthread_mutex_unlock(v4);
  return sub_18F5C6360(v9);
}

void sub_18F5D4420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5CE240((uint64_t)va);
  sub_18F5C6360((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5D4448(uint64_t a1)
{
  pthread_mutex_t *v2;
  _QWORD v4[4];
  __int16 v5;

  v2 = *(pthread_mutex_t **)(a1 + 240);
  v4[3] = v2;
  pthread_mutex_lock(v2);
  v5 = 257;
  sub_18F5C9250(v4);
  sub_18F5C7BB4(a1, "kCLConnectionMessageRegisterAsLocationClient", (uint64_t)v4);
  sub_18F5C6360(v4);
  return pthread_mutex_unlock(v2);
}

void sub_18F5D44B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18F5C6360((uint64_t *)va);
  sub_18F5CE240((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5D44DC(CFDictionaryRef theDict, UInt8 *a2)
{
  CFTypeID v3;
  uint64_t v4;
  CFTypeRef v6[2];
  CFTypeRef cf;
  CFRange v8;

  cf = 0;
  sub_18F5C639C(v6, theDict);
  sub_18F5C70F0((uint64_t)v6, "kCLConnectionMessageVehicleSpeedKey", &cf, 0xFFFFFFFFLL);
  if (cf && (v3 = CFGetTypeID(cf), v3 == CFDataGetTypeID()))
  {
    v8.location = 0;
    v8.length = 32;
    CFDataGetBytes((CFDataRef)cf, v8, a2);
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  sub_18F5C6360(v6);
  return v4;
}

void sub_18F5D4570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5D4584(CFDictionaryRef theDict, UInt8 *a2)
{
  CFTypeID v3;
  uint64_t v4;
  CFTypeRef v6[2];
  CFTypeRef cf;
  CFRange v8;

  cf = 0;
  sub_18F5C639C(v6, theDict);
  sub_18F5C70F0((uint64_t)v6, "kCLConnectionMessageVehicleHeadingKey", &cf, 0xFFFFFFFFLL);
  if (cf && (v3 = CFGetTypeID(cf), v3 == CFDataGetTypeID()))
  {
    v8.location = 0;
    v8.length = 16;
    CFDataGetBytes((CFDataRef)cf, v8, a2);
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  sub_18F5C6360(v6);
  return v4;
}

void sub_18F5D4618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *CLClientStartVehicleSpeedUpdates(uint64_t a1)
{
  char v3;
  _QWORD v4[2];

  sub_18F5C9250(v4);
  v3 = 1;
  sub_18F5C8F74((uint64_t)v4, "kCLConnectionMessageSubscribeKey", &v3);
  sub_18F5C7BB4(a1, "kCLConnectionMessageVehicleSpeed", (uint64_t)v4);
  return sub_18F5C6360(v4);
}

void sub_18F5D4694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *CLClientStopVehicleSpeedUpdates(uint64_t a1)
{
  char v3;
  _QWORD v4[2];

  sub_18F5C9250(v4);
  v3 = 0;
  sub_18F5C8F74((uint64_t)v4, "kCLConnectionMessageSubscribeKey", &v3);
  sub_18F5C7BB4(a1, "kCLConnectionMessageVehicleSpeed", (uint64_t)v4);
  return sub_18F5C6360(v4);
}

void sub_18F5D4710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *CLClientStartVehicleHeadingUpdates(uint64_t a1)
{
  char v3;
  _QWORD v4[2];

  sub_18F5C9250(v4);
  v3 = 1;
  sub_18F5C8F74((uint64_t)v4, "kCLConnectionMessageSubscribeKey", &v3);
  sub_18F5C7BB4(a1, "kCLConnectionMessageVehicleHeading", (uint64_t)v4);
  return sub_18F5C6360(v4);
}

void sub_18F5D4790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *CLClientStopVehicleHeadingUpdates(uint64_t a1)
{
  char v3;
  _QWORD v4[2];

  sub_18F5C9250(v4);
  v3 = 0;
  sub_18F5C8F74((uint64_t)v4, "kCLConnectionMessageSubscribeKey", &v3);
  sub_18F5C7BB4(a1, "kCLConnectionMessageVehicleHeading", (uint64_t)v4);
  return sub_18F5C6360(v4);
}

void sub_18F5D480C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5C6360((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5D4824(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  CLConnectionMessage *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  NSSet *v11;
  void *DictionaryOfClasses;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[6];
  _QWORD v22[5];

  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    v5 = result;
    v6 = *(CLConnectionMessage **)a2;
    if (*(_QWORD *)a2)
    {
      v7 = (void *)MEMORY[0x1E0C99E60];
      v8 = objc_opt_class();
      v11 = (NSSet *)objc_msgSend_setWithObjects_(v7, v9, v8, v10, 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v6, v11);
      v15 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, (uint64_t)CFSTR("kCLConnectionMessageErrorKey"), v14);
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = sub_18F5D4964;
      v21[3] = &unk_1E2990F20;
      v16 = *(void **)(v5 + 32);
      v17 = *(_QWORD *)(v5 + 40);
      v21[4] = v15;
      v21[5] = v17;
      return objc_msgSend_async_(v16, v18, (uint64_t)v21, v19);
    }
    else
    {
      v20 = *(void **)(result + 32);
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = sub_18F5D4918;
      v22[3] = &unk_1E2990E30;
      v22[4] = v4;
      return objc_msgSend_async_(v20, a2, (uint64_t)v22, a4);
    }
  }
  return result;
}

uint64_t sub_18F5D4918(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, *MEMORY[0x1E0CB28A8], 4097, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F5D4964(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18F5D4980(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  _QWORD v12[6];

  v8 = (void *)objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v9, (uint64_t)a2, (uint64_t)CFSTR("kCLConnectionMessageMicroLocationTruthLabelKey"));
  objc_msgSend_setObject_forKeyedSubscript_(v8, v10, a3, (uint64_t)CFSTR("kCLConnectionMessageMicroLocationRecordingTriggerUuidKey"));
  v11 = *(_QWORD *)(a1 + 232);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_18F5D4A44;
  v12[3] = &unk_1E2990E80;
  v12[4] = v11;
  v12[5] = a4;
  sub_18F5D5CC0(a1, "kCLConnectionMessageMicroLocationDonateTruthLabelEvent", (uint64_t)v8, 0, (uint64_t)v12);
}

uint64_t sub_18F5D4A44(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  CLConnectionMessage *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  NSSet *v11;
  void *DictionaryOfClasses;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[6];
  _QWORD v22[5];

  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    v5 = result;
    v6 = *(CLConnectionMessage **)a2;
    if (*(_QWORD *)a2)
    {
      v7 = (void *)MEMORY[0x1E0C99E60];
      v8 = objc_opt_class();
      v11 = (NSSet *)objc_msgSend_setWithObjects_(v7, v9, v8, v10, 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v6, v11);
      v15 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, (uint64_t)CFSTR("kCLConnectionMessageErrorKey"), v14);
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = sub_18F5D4B80;
      v21[3] = &unk_1E2990E58;
      v16 = *(void **)(v5 + 32);
      v17 = *(_QWORD *)(v5 + 40);
      v21[4] = v15;
      v21[5] = v17;
      return objc_msgSend_async_(v16, v18, (uint64_t)v21, v19);
    }
    else
    {
      v20 = *(void **)(result + 32);
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = sub_18F5D4B38;
      v22[3] = &unk_1E2990E30;
      v22[4] = v4;
      return objc_msgSend_async_(v20, a2, (uint64_t)v22, a4);
    }
  }
  return result;
}

uint64_t sub_18F5D4B38(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, *MEMORY[0x1E0CB28A8], 4097, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
}

uint64_t sub_18F5D4B80(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_18F5D4B90(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  _QWORD v15[6];

  v10 = (void *)objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4);
  objc_msgSend_setObject_forKeyedSubscript_(v10, v11, (uint64_t)a2, (uint64_t)CFSTR("kCLConnectionMessageMicroLocationTruthLabelKey"));
  objc_msgSend_setObject_forKeyedSubscript_(v10, v12, a3, (uint64_t)CFSTR("kCLConnectionMessageMicroLocationTruthLabelStartDateKey"));
  objc_msgSend_setObject_forKeyedSubscript_(v10, v13, a4, (uint64_t)CFSTR("kCLConnectionMessageMicroLocationTruthLabelEndDateKey"));
  v14 = *(_QWORD *)(a1 + 232);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_18F5D4C6C;
  v15[3] = &unk_1E2990E80;
  v15[4] = v14;
  v15[5] = a5;
  sub_18F5D5CC0(a1, "kCLConnectionMessageMicroLocationDonateTruthLabelBetweenDatesEvent", (uint64_t)v10, 0, (uint64_t)v15);
}

uint64_t sub_18F5D4C6C(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  CLConnectionMessage *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  NSSet *v11;
  void *DictionaryOfClasses;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[6];
  _QWORD v22[5];

  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    v5 = result;
    v6 = *(CLConnectionMessage **)a2;
    if (*(_QWORD *)a2)
    {
      v7 = (void *)MEMORY[0x1E0C99E60];
      v8 = objc_opt_class();
      v11 = (NSSet *)objc_msgSend_setWithObjects_(v7, v9, v8, v10, 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v6, v11);
      v15 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, (uint64_t)CFSTR("kCLConnectionMessageErrorKey"), v14);
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = sub_18F5D4DA8;
      v21[3] = &unk_1E2990E58;
      v16 = *(void **)(v5 + 32);
      v17 = *(_QWORD *)(v5 + 40);
      v21[4] = v15;
      v21[5] = v17;
      return objc_msgSend_async_(v16, v18, (uint64_t)v21, v19);
    }
    else
    {
      v20 = *(void **)(result + 32);
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = sub_18F5D4D60;
      v22[3] = &unk_1E2990E30;
      v22[4] = v4;
      return objc_msgSend_async_(v20, a2, (uint64_t)v22, a4);
    }
  }
  return result;
}

uint64_t sub_18F5D4D60(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, *MEMORY[0x1E0CB28A8], 4097, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
}

uint64_t sub_18F5D4DA8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_18F5D4DB8(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  CLConnectionMessage *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  NSSet *v12;
  void *DictionaryOfClasses;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[7];
  _QWORD v26[5];

  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    v5 = result;
    v6 = *(CLConnectionMessage **)a2;
    if (*(_QWORD *)a2)
    {
      v7 = (void *)MEMORY[0x1E0C99E60];
      v8 = objc_opt_class();
      v9 = objc_opt_class();
      v12 = (NSSet *)objc_msgSend_setWithObjects_(v7, v10, v8, v11, v9, 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v6, v12);
      v16 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v14, (uint64_t)CFSTR("kCLConnectionMessageErrorKey"), v15);
      v19 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v17, (uint64_t)CFSTR("kCLConnectionMessageMicroLocationExportDatabaseTablesInfoKey"), v18);
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = sub_18F5D4F24;
      v25[3] = &unk_1E2990EA8;
      v20 = *(void **)(v5 + 32);
      v21 = *(_QWORD *)(v5 + 40);
      v25[5] = v19;
      v25[6] = v21;
      v25[4] = v16;
      return objc_msgSend_async_(v20, v22, (uint64_t)v25, v23);
    }
    else
    {
      v24 = *(void **)(result + 32);
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = sub_18F5D4ED8;
      v26[3] = &unk_1E2990E30;
      v26[4] = v4;
      return objc_msgSend_async_(v24, a2, (uint64_t)v26, a4);
    }
  }
  return result;
}

uint64_t sub_18F5D4ED8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, *MEMORY[0x1E0CB28A8], 4097, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v2 + 16))(v2, v3, 0);
}

uint64_t sub_18F5D4F24(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_18F5D4F38(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  CLConnectionMessage *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  NSSet *v12;
  void *DictionaryOfClasses;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[7];
  _QWORD v26[5];

  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    v5 = result;
    v6 = *(CLConnectionMessage **)a2;
    if (*(_QWORD *)a2)
    {
      v7 = (void *)MEMORY[0x1E0C99E60];
      v8 = objc_opt_class();
      v9 = objc_opt_class();
      v12 = (NSSet *)objc_msgSend_setWithObjects_(v7, v10, v8, v11, v9, 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v6, v12);
      v16 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v14, (uint64_t)CFSTR("kCLConnectionMessageErrorKey"), v15);
      v19 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v17, (uint64_t)CFSTR("kCLConnectionMessageMicroLocationExportDataForMigrationInfoKey"), v18);
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = sub_18F5D50A4;
      v25[3] = &unk_1E2990EA8;
      v20 = *(void **)(v5 + 32);
      v21 = *(_QWORD *)(v5 + 40);
      v25[5] = v19;
      v25[6] = v21;
      v25[4] = v16;
      return objc_msgSend_async_(v20, v22, (uint64_t)v25, v23);
    }
    else
    {
      v24 = *(void **)(result + 32);
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = sub_18F5D5058;
      v26[3] = &unk_1E2990E30;
      v26[4] = v4;
      return objc_msgSend_async_(v24, a2, (uint64_t)v26, a4);
    }
  }
  return result;
}

uint64_t sub_18F5D5058(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, *MEMORY[0x1E0CB28A8], 4097, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v2 + 16))(v2, v3, 0);
}

uint64_t sub_18F5D50A4(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_18F5D50B8(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  CLConnectionMessage *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  NSSet *v12;
  void *DictionaryOfClasses;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[7];
  _QWORD v26[5];

  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    v5 = result;
    v6 = *(CLConnectionMessage **)a2;
    if (*(_QWORD *)a2)
    {
      v7 = (void *)MEMORY[0x1E0C99E60];
      v8 = objc_opt_class();
      v9 = objc_opt_class();
      v12 = (NSSet *)objc_msgSend_setWithObjects_(v7, v10, v8, v11, v9, 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v6, v12);
      v16 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v14, (uint64_t)CFSTR("kCLConnectionMessageErrorKey"), v15);
      v19 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v17, (uint64_t)CFSTR("kCLConnectionMessageMicroLocationRequestStaticSourcesStatisticsInfoKey"), v18);
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = sub_18F5D5224;
      v25[3] = &unk_1E2990EA8;
      v20 = *(void **)(v5 + 32);
      v21 = *(_QWORD *)(v5 + 40);
      v25[5] = v19;
      v25[6] = v21;
      v25[4] = v16;
      return objc_msgSend_async_(v20, v22, (uint64_t)v25, v23);
    }
    else
    {
      v24 = *(void **)(result + 32);
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = sub_18F5D51D8;
      v26[3] = &unk_1E2990E30;
      v26[4] = v4;
      return objc_msgSend_async_(v24, a2, (uint64_t)v26, a4);
    }
  }
  return result;
}

uint64_t sub_18F5D51D8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, *MEMORY[0x1E0CB28A8], 4097, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v2 + 16))(v2, v3, 0);
}

uint64_t sub_18F5D5224(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_18F5D5238(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  CLConnectionMessage *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  NSSet *v11;
  void *DictionaryOfClasses;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[6];
  _QWORD v22[5];

  v4 = *(_QWORD *)(result + 40);
  if (v4)
  {
    v5 = result;
    v6 = *(CLConnectionMessage **)a2;
    if (*(_QWORD *)a2)
    {
      v7 = (void *)MEMORY[0x1E0C99E60];
      v8 = objc_opt_class();
      v11 = (NSSet *)objc_msgSend_setWithObjects_(v7, v9, v8, v10, 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v6, v11);
      v15 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, (uint64_t)CFSTR("kCLConnectionMessageErrorKey"), v14);
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = sub_18F5D5378;
      v21[3] = &unk_1E2990F20;
      v16 = *(void **)(v5 + 32);
      v17 = *(_QWORD *)(v5 + 40);
      v21[4] = v15;
      v21[5] = v17;
      return objc_msgSend_async_(v16, v18, (uint64_t)v21, v19);
    }
    else
    {
      v20 = *(void **)(result + 32);
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = sub_18F5D532C;
      v22[3] = &unk_1E2990E30;
      v22[4] = v4;
      return objc_msgSend_async_(v20, a2, (uint64_t)v22, a4);
    }
  }
  return result;
}

uint64_t sub_18F5D532C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, *MEMORY[0x1E0CB28A8], 4097, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F5D5378(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

_QWORD *sub_18F5D5394(uint64_t a1)
{
  _QWORD v3[2];

  sub_18F5C9250(v3);
  sub_18F5C7BB4(a1, "kCLConnectionMessagePurgeMicroLocationSemiSupervisedData", (uint64_t)v3);
  return sub_18F5C6360(v3);
}

void sub_18F5D53E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5C6360(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5D53F4(uint64_t a1)
{
  _QWORD v3[2];

  sub_18F5C9250(v3);
  sub_18F5C7BB4(a1, "kCLConnectionMessagePurgeMicroLocationData", (uint64_t)v3);
  return sub_18F5C6360(v3);
}

void sub_18F5D5440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5C6360(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5D5454(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[6];
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v8 = CFSTR("kCLConnectionMessageFetchEstimatedLocationDateKey");
  v9[0] = a2;
  v5 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v9, (uint64_t)&v8, 1);
  v6 = *(_QWORD *)(a1 + 232);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_18F5D551C;
  v7[3] = &unk_1E2990ED0;
  v7[4] = v6;
  v7[5] = a3;
  sub_18F5D5CC0(a1, "kCLConnectionMessageFetchEstimatedLocationAtDate", v5, 0, (uint64_t)v7);
}

uint64_t sub_18F5D551C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CLConnectionMessage *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  NSSet *v11;
  void *DictionaryOfClasses;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  void *v24;
  _QWORD v25[7];
  _QWORD v26[5];

  v5 = *(CLConnectionMessage **)a2;
  if (*(_QWORD *)a2)
  {
    v6 = (void *)MEMORY[0x1E0C99E60];
    v7 = objc_opt_class();
    v8 = objc_opt_class();
    v11 = (NSSet *)objc_msgSend_setWithObjects_(v6, v9, v7, v10, v8, 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v5, v11);
    v15 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, (uint64_t)CFSTR("kCLConnectionMessageErrorKey"), v14);
    v18 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v16, (uint64_t)CFSTR("kCLConnectionMessageFetchEstimatedLocationLocationKey"), v17);
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = sub_18F5D5680;
    v25[3] = &unk_1E2990EA8;
    v19 = *(void **)(a1 + 32);
    v20 = *(_QWORD *)(a1 + 40);
    v25[5] = v15;
    v25[6] = v20;
    v25[4] = v18;
    return objc_msgSend_async_(v19, v21, (uint64_t)v25, v22);
  }
  else
  {
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = sub_18F5D5634;
    v26[3] = &unk_1E2990E30;
    v24 = *(void **)(a1 + 32);
    v26[4] = *(_QWORD *)(a1 + 40);
    return objc_msgSend_async_(v24, a2, (uint64_t)v26, a4);
  }
}

uint64_t sub_18F5D5634(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, *MEMORY[0x1E0CB28A8], 4097, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F5D5680(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_18F5D5694(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_18F5D56A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  _BYTE *v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  int v19;

  v6 = *(_BYTE **)(a1 + 384);
  if (v6 && (v7 = *v6, *v6))
  {
    v8 = 0;
    v9 = 0;
    v10 = v6 + 1;
    do
    {
      v9 ^= v7 << (v8 & 0x18);
      v11 = *v10++;
      v7 = v11;
      v8 += 8;
    }
    while (v11);
    if (!a5)
      goto LABEL_11;
  }
  else
  {
    v9 = 0;
    if (!a5)
      goto LABEL_11;
  }
  v12 = *a5;
  if (*a5)
  {
    v13 = 0;
    v14 = a5 + 1;
    do
    {
      v9 ^= v12 << (v13 & 0x18);
      v15 = *v14++;
      v12 = v15;
      v13 += 8;
    }
    while (v15);
  }
LABEL_11:
  if (a6)
  {
    v16 = *a6;
    if (*a6)
    {
      v17 = 0;
      v18 = a6 + 1;
      do
      {
        v9 ^= v16 << (v17 & 0x18);
        v19 = *v18++;
        v16 = v19;
        v17 += 8;
      }
      while (v19);
    }
  }
  return entr_act_modify();
}

uint64_t sub_18F5D5750(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = (void *)objc_msgSend_processInfo(MEMORY[0x1E0CB3898], a2, a3, a4);
  result = objc_msgSend_processIdentifier(v4, v5, v6, v7);
  qword_1ECD8E7E0 = (int)result;
  return result;
}

os_log_t sub_18F5D577C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

void sub_18F5D57A8(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_18F5D57B8(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  pthread_mutex_t *v5;
  const void *v6;
  os_activity_scope_state_s v7;
  uint8_t buf[4];
  int v9;
  _BYTE v10[10];
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = _os_activity_create(&dword_18F5B3000, "CL: CLClientInterruptionHandler", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v2, &v7);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA90);
  v3 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[5];
    *(_DWORD *)buf = 68289538;
    v9 = 0;
    *(_WORD *)v10 = 2082;
    *(_QWORD *)&v10[2] = "";
    v11 = 2082;
    v12 = "activity";
    v13 = 2050;
    v14 = v4;
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLClientInterruptionHandler\", \"event\":%{public, location:escape_only}s, \"client\":\"%{public}p\"}", buf, 0x26u);
  }
  v5 = (pthread_mutex_t *)a1[6];
  *(_QWORD *)v10 = v5;
  pthread_mutex_lock(v5);
  *(_WORD *)&v10[8] = 257;
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    v6 = (const void *)a1[5];
    if (!_CFIsDeallocating())
    {
      CFRetain(v6);
      sub_18F5C6578((uint64_t)v6, 32, 0);
      CFRelease(v6);
    }
  }
  pthread_mutex_unlock(v5);
  os_activity_scope_leave(&v7);
}

void sub_18F5D5948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_18F5D57A8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F5D5980(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 0;
  return result;
}

_QWORD *sub_18F5D5990(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_18F5D5A40();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_18F5D5A40()
{
  sub_18F5D5A54("basic_string");
}

void sub_18F5D5A54(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_18F5D5AA4(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E298D088, MEMORY[0x1E0DE42D0]);
}

void sub_18F5D5A90(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_18F5D5AA4(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void sub_18F5D5AC8()
{
  sub_18F5D5ADC("basic_string");
}

void sub_18F5D5ADC(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_18F5D5B2C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E298D090, MEMORY[0x1E0DE42E0]);
}

void sub_18F5D5B18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_18F5D5B2C(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

_QWORD *sub_18F5D5B50@<X0>(char **a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F5D5BB0(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F5D5B9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5D5BB0(_QWORD *a1, char **a2, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E298FE10;
  sub_18F5D5C50((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_18F5D5BFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F5D5C10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FE10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18F5D5C20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FE10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194002D30);
}

void sub_18F5D5C50(uint64_t a1, uint64_t a2, char **a3, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F5D5990(__p, *a3);
  MEMORY[0x194002B44](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F5D5CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F5D5CC0(uint64_t a1, char *a2, uint64_t a3, int a4, uint64_t a5)
{
  pthread_mutex_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  pthread_mutex_t *v30;
  __int16 v31;
  uint64_t v32;
  char *v33;

  v32 = a3;
  v33 = a2;
  v8 = *(pthread_mutex_t **)(a1 + 240);
  v30 = v8;
  pthread_mutex_lock(v8);
  v31 = 257;
  if (*(_BYTE *)(a1 + 225))
  {
LABEL_2:
    pthread_mutex_unlock(v8);
    return;
  }
  sub_18F5D5ED4(&v33, &v32, &v27);
  if (!*(_QWORD *)(a1 + 320))
  {
    v21 = 0;
    v22 = 0;
    (*(void (**)(uint64_t, uint64_t *))(a5 + 16))(a5, &v21);
    v11 = v22;
    if (!v22)
      goto LABEL_25;
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    goto LABEL_23;
  }
  if (a4)
  {
    v25 = v27;
    v26 = v28;
    if (v28)
    {
      v9 = (unint64_t *)&v28->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    CLConnectionClient::sendMessageWithCompletion();
    v11 = v26;
    if (v26)
    {
      v12 = (unint64_t *)&v26->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_23;
    }
  }
  else
  {
    v23 = v27;
    v24 = v28;
    if (v28)
    {
      v15 = (unint64_t *)&v28->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    CLConnectionClient::sendMessage();
    v11 = v24;
    if (v24)
    {
      v17 = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(v17);
      while (__stlxr(v13 - 1, v17));
LABEL_23:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
LABEL_25:
  v18 = v28;
  if (v28)
  {
    v19 = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (HIBYTE(v31))
  {
    if (!(_BYTE)v31)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
      return;
    }
    v8 = v30;
    goto LABEL_2;
  }
}

void sub_18F5D5E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  sub_18F5CE240((uint64_t)va2);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5D5ED4@<X0>(char **a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F5D5F34(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F5D5F20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5D5F34(_QWORD *a1, char **a2, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E298FE10;
  sub_18F5D5F94((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_18F5D5F80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F5D5F94(uint64_t a1, uint64_t a2, char **a3, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F5D5990(__p, *a3);
  MEMORY[0x194002B44](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F5D5FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F5D6004(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_18F5D605C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_18F5D609C((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_18F5D609C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void sub_18F5D64A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5D6710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5D6910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5D692C(uint64_t a1)
{
  void *v2;
  CLMonitor *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;

  v2 = (void *)MEMORY[0x1940032C4]();
  v3 = [CLMonitor alloc];
  v7 = objc_msgSend_name(*(void **)(a1 + 32), v4, v5, v6);
  v11 = objc_msgSend_path(*(void **)(a1 + 32), v8, v9, v10);
  v12 = *(_QWORD **)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = v12[1];
  v18 = objc_msgSend_manager(v12, v15, v16, v17);
  v22 = objc_msgSend_eventHandler(*(void **)(a1 + 32), v19, v20, v21);
  v24 = (void *)objc_msgSend_initWithLedgerName_path_onSilo_authIdentity_locationManager_handler_(v3, v23, v7, v11, v14, v13, v18, v22);
  v28 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), v25, v26, v27);
  objc_msgSend_addIdentifiableClient_(v28, v29, (uint64_t)v24, v30);
  objc_msgSend_setIdentityToken_(*(void **)(a1 + 32), v31, 0, v32);
  objc_msgSend_setStorageToken_(*(void **)(a1 + 32), v33, 0, v34);
  if (objc_msgSend_vendingHandler(*(void **)(a1 + 32), v35, v36, v37))
  {
    v41 = objc_msgSend_vendingHandler(*(void **)(a1 + 32), v38, v39, v40);
    (*(void (**)(uint64_t, void *))(v41 + 16))(v41, v24);
  }

  v42 = *(id *)(a1 + 32);
  objc_autoreleasePoolPop(v2);
}

void sub_18F5D6A70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5D6AF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5D6CCC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5D6E70(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F5D7C4C;
  block[3] = &unk_1E2990DE0;
  block[4] = a2;
  dispatch_async(v2, block);
}

uint64_t sub_18F5D708C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  _DWORD v17[2];
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend_delegate(*(void **)(a1 + 32), a2, a3, a4);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v8 = objc_msgSend_delegate(*(void **)(a1 + 32), v5, v6, v7);
    v12 = objc_msgSend_locationManagerRoutine(*(void **)(a1 + 32), v9, v10, v11);
    return MEMORY[0x1E0DE7D20](v8, sel_locationManager_didUpdateLocations_completion_, v12, *(_QWORD *)(a1 + 40));
  }
  else
  {
    if (qword_1EE172078 != -1)
      dispatch_once(&qword_1EE172078, &unk_1E2990170);
    v13 = qword_1EE172080;
    if (os_log_type_enabled((os_log_t)qword_1EE172080, OS_LOG_TYPE_DEBUG))
    {
      v17[0] = 68289026;
      v17[1] = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#location #routine sendLocations to RT, not respondsToSelector @selector(locationManager:didUpdateLocations:completion:)\"}", (uint8_t *)v17, 0x12u);
    }
    objc_msgSend_didUpdateLocations_(*(void **)(a1 + 32), v14, *(_QWORD *)(a1 + 40), v15);
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_18F5D72F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_msgSend_inertialDelegate(*(void **)(a1 + 32), a2, a3, a4);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v8 = objc_msgSend_inertialDelegate(*(void **)(a1 + 32), v5, v6, v7);
    v12 = objc_msgSend_locationManagerRoutine(*(void **)(a1 + 32), v9, v10, v11);
    MEMORY[0x1E0DE7D20](v8, sel_inertialDataManager_didUpdateInertialData_, v12, *(_QWORD *)(a1 + 40));
  }
  else
  {
    if (qword_1EE172078 != -1)
      dispatch_once(&qword_1EE172078, &unk_1E2990170);
    v13 = qword_1EE172080;
    if (os_log_type_enabled((os_log_t)qword_1EE172080, OS_LOG_TYPE_DEBUG))
    {
      v14[0] = 68289026;
      v14[1] = 0;
      v15 = 2082;
      v16 = "";
      _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#location #routine sendInertial to RT, not respondsToSelector @selector(inertialDataManager:didUpdateInertialData:)\"}", (uint8_t *)v14, 0x12u);
    }
  }
}

void sub_18F5D773C(uint64_t a1)
{
  NSLog(CFSTR("Connection Interrupted, serviceName, %@"), *(_QWORD *)(a1 + 32));
}

void sub_18F5D7768(uint64_t a1)
{
  NSLog(CFSTR("Connection Invalidated, serviceName %@"), *(_QWORD *)(a1 + 32));
}

uint64_t sub_18F5D79A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v27;
  const char *v28;

  objc_msgSend_delegate(*(void **)(a1 + 32), a2, a3, a4);
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    v27 = (void *)objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v5, v6, v7);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v27, v28, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CLLocationManagerRoutine.m"), 243, CFSTR("delegate must respond to selector locationManager:didUpdateLocations:"));
  }
  v8 = (void *)objc_msgSend_locationManagerRoutineProxy(*(void **)(a1 + 32), v5, v6, v7);
  objc_msgSend_setUpdating_(v8, v9, 1, v10);
  v14 = (void *)objc_msgSend_locationManagerRoutineProxy(*(void **)(a1 + 32), v11, v12, v13);
  v18 = (void *)objc_msgSend_connection(v14, v15, v16, v17);
  v22 = (void *)objc_msgSend_remoteObjectProxy(v18, v19, v20, v21);
  return objc_msgSend_startUpdatingLocation(v22, v23, v24, v25);
}

uint64_t sub_18F5D7A8C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = (void *)objc_msgSend_locationManagerRoutineProxy(*(void **)(a1 + 32), a2, a3, a4);
  objc_msgSend_setUpdating_(v5, v6, 0, v7);
  v11 = (void *)objc_msgSend_locationManagerRoutineProxy(*(void **)(a1 + 32), v8, v9, v10);
  v15 = (void *)objc_msgSend_connection(v11, v12, v13, v14);
  v19 = (void *)objc_msgSend_remoteObjectProxy(v15, v16, v17, v18);
  return objc_msgSend_stopUpdatingLocation(v19, v20, v21, v22);
}

uint64_t sub_18F5D7B30(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;

  v5 = (void *)objc_msgSend_locationManagerRoutineProxy(*(void **)(a1 + 32), a2, a3, a4);
  return objc_msgSend_setDelegate_(v5, v6, *(_QWORD *)(a1 + 40), v7);
}

uint64_t sub_18F5D7BD4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = objc_msgSend_locationManagerRoutineProxy(*(void **)(a1 + 32), a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v5, sel_setInertialDelegate_, *(_QWORD *)(a1 + 40), v6);
}

os_log_t sub_18F5D7C20()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Routine");
  qword_1EE172080 = (uint64_t)result;
  return result;
}

uint64_t sub_18F5D7C4C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_createConnection(*(void **)(a1 + 32), a2, a3, a4);
}

uint64_t sub_18F5D7C54(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;
  CLEmergencyEnablementAssertion *v8;
  const char *v9;
  _QWORD v10[4];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  result = 0;
  if (a1)
  {
    if (a2)
    {
      v10[0] = CFSTR("kCLConnectionMessageBundleIdentifierKey");
      v10[1] = CFSTR("kCLConnectionMessageBundlePathKey");
      v11[0] = a1;
      v11[1] = a2;
      v11[2] = a3;
      v10[2] = CFSTR("kCLConnectionMessagePurposeKey");
      v10[3] = CFSTR("kCLConnectionMessageOverrideDeauthorizationKey");
      v11[3] = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, a4, a4);
      v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v6, (uint64_t)v11, (uint64_t)v10, 4);
      v8 = [CLEmergencyEnablementAssertion alloc];
      return objc_msgSend_initWithRegistrationMessageName_messageDictionary_(v8, v9, (uint64_t)"EmergencyEnablementAssertion/kCLConnectionMessage", v7);
    }
  }
  return result;
}

id sub_18F5D9B58(uint64_t a1)
{
  return objc_loadWeak((id *)(a1 + 32));
}

void sub_18F5D9C10(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("kCLErrorDomain"), 10, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v3, 0, v4);

}

dispatch_queue_t sub_18F5DB2E4()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.corelocation.shared", 0);
  qword_1EE172CB0 = (uint64_t)result;
  return result;
}

void sub_18F5DB390(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5DB6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DB8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DBA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DBC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5DBDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DBF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DC0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DC59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DC724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DC8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DCA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DCB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DCE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5DCFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DD128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DD2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DD420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DD5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DD754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DD8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DDA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DDC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DDDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DDF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5DDF60(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSString *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  NSString *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  objc_sync_enter(v2);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    entr_act_modify();
    v3 = *(_QWORD *)(a1 + 40);
    v4 = NSStringFromSelector(sel_locationManagerDidResumeLocationUpdates_);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2991328);
    v5 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v10[0] = 68289794;
      v10[1] = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2050;
      v14 = v8;
      v15 = 2050;
      v16 = v3;
      v17 = 2114;
      v18 = v4;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLLocationManager invoking #delegate\", \"self\":\"%{public}p\", \"delegate\":\"%{public}p\", \"selector\":%{public, location:escape_only}@}", (uint8_t *)v10, 0x30u);
    }
    objc_msgSend_locationManagerDidResumeLocationUpdates_(*(void **)(a1 + 40), v6, *(_QWORD *)(a1 + 32), v7);
  }
  else
  {
    entr_act_modify();
  }
  return objc_sync_exit(v2);
}

void sub_18F5DE0E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5DE2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DE6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  void *v19;

  objc_sync_exit(v19);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5DE728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_onLocationRequestTimeout, a3, a4);
}

void sub_18F5DEAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  objc_sync_exit(v13);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5DEC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DEE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DEFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DF168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DF2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DF64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5DF938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  objc_sync_exit(v13);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5DFC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  objc_sync_exit(v13);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5DFDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5DFF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E010C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E02AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E07D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5E0810(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  NSString *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  _DWORD v15[2];
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  NSString *v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = (void *)a1[4];
  objc_sync_enter(v2);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v3 = a1[5];
    v4 = NSStringFromSelector(sel_locationManager_monitoringDidFailForRegion_withError_);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2991328);
    v5 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      v7 = a1[4];
      v8 = a1[6];
      v15[0] = 68290051;
      v15[1] = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2050;
      v19 = v7;
      v20 = 2050;
      v21 = v3;
      v22 = 2114;
      v23 = v4;
      v24 = 2113;
      v25 = v8;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLLocationManager invoking #delegate\", \"self\":\"%{public}p\", \"delegate\":\"%{public}p\", \"selector\":%{public, location:escape_only}@, \"region\":%{private, location:escape_only}@}", (uint8_t *)v15, 0x3Au);
    }
    v10 = a1[4];
    v9 = (void *)a1[5];
    v11 = a1[6];
    v12 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v6, (uint64_t)CFSTR("kCLErrorDomain"), 5, 0);
    objc_msgSend_locationManager_monitoringDidFailForRegion_withError_(v9, v13, v10, v11, v12);
  }
  return objc_sync_exit(v2);
}

void sub_18F5E09A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5E0C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E0F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E10E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E16F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5E172C(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  NSString *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  _DWORD v15[2];
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  NSString *v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = (void *)a1[4];
  objc_sync_enter(v2);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v3 = a1[5];
    v4 = NSStringFromSelector(sel_locationManager_rangingBeaconsDidFailForRegion_withError_);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2991328);
    v5 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      v7 = a1[4];
      v8 = a1[6];
      v15[0] = 68290051;
      v15[1] = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2050;
      v19 = v7;
      v20 = 2050;
      v21 = v3;
      v22 = 2114;
      v23 = v4;
      v24 = 2113;
      v25 = v8;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLLocationManager invoking #delegate\", \"self\":\"%{public}p\", \"delegate\":\"%{public}p\", \"selector\":%{public, location:escape_only}@, \"region\":%{private, location:escape_only}@}", (uint8_t *)v15, 0x3Au);
    }
    v10 = a1[4];
    v9 = (void *)a1[5];
    v11 = a1[6];
    v12 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v6, (uint64_t)CFSTR("kCLErrorDomain"), 17, 0);
    objc_msgSend_locationManager_rangingBeaconsDidFailForRegion_withError_(v9, v13, v10, v11, v12);
  }
  return objc_sync_exit(v2);
}

void sub_18F5E18C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5E1E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  void *v9;

  objc_sync_exit(v9);
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E218C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5E21D0(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  NSString *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  NSString *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  objc_sync_enter(v2);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v4 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v3, (uint64_t)CFSTR("kCLErrorDomain"), 17, 0);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = NSStringFromSelector(sel_locationManager_didFailRangingBeaconsForConstraint_error_);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2991328);
    v7 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_QWORD *)(a1 + 48);
      v12[0] = 68290051;
      v12[1] = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2050;
      v16 = v9;
      v17 = 2050;
      v18 = v5;
      v19 = 2114;
      v20 = v6;
      v21 = 2113;
      v22 = v10;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLLocationManager invoking #delegate\", \"self\":\"%{public}p\", \"delegate\":\"%{public}p\", \"selector\":%{public, location:escape_only}@, \"constraint\":%{private, location:escape_only}@}", (uint8_t *)v12, 0x3Au);
    }
    objc_msgSend_locationManager_didFailRangingBeaconsForConstraint_error_(*(void **)(a1 + 40), v8, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), v4);
  }
  return objc_sync_exit(v2);
}

void sub_18F5E235C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5E263C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5E2800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E29B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E2CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E2F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5E2F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t result;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 || !a3)
  {
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2991368);
    v6 = qword_1EE1720C0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
    {
      v9 = 68289283;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2113;
      v14 = a2;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LocationManager, Could not export MicroLocation database tables\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_1EE1720B8 != -1)
        dispatch_once(&qword_1EE1720B8, &unk_1E2991368);
    }
    v7 = qword_1EE1720C0;
    if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
    {
      v9 = 68289283;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2113;
      v14 = a2;
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LocationManager, Could not export MicroLocation database tables", "{\"msg%{public}.0s\":\"LocationManager, Could not export MicroLocation database tables\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a3);
  return result;
}

void sub_18F5E338C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5E33B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t result;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 || !a3)
  {
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2991368);
    v6 = qword_1EE1720C0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
    {
      v9 = 68289283;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2113;
      v14 = a2;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LocationManager, Could not export MicroLocation database tables for migration\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_1EE1720B8 != -1)
        dispatch_once(&qword_1EE1720B8, &unk_1E2991368);
    }
    v7 = qword_1EE1720C0;
    if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
    {
      v9 = 68289283;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2113;
      v14 = a2;
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LocationManager, Could not export MicroLocation database tables for migration", "{\"msg%{public}.0s\":\"LocationManager, Could not export MicroLocation database tables for migration\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a3);
  return result;
}

void sub_18F5E37CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5E37F4(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  NSObject *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  uint64_t v31;
  void *v32;
  _CLMicroLocationClusterIdAndClusterData *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  double v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  _CLMicroLocationSourceIdAndSourceData *v54;
  const char *v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  _CLMicroLocationSourcesStatisticsResult *v59;
  const char *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[128];
  _BYTE v78[128];
  uint64_t buf;
  __int16 v80;
  const char *v81;
  __int16 v82;
  const char *v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  if (a2 || !a3)
  {
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2991368);
    v6 = qword_1EE1720C0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289283;
      v80 = 2082;
      v81 = "";
      v82 = 2113;
      v83 = a2;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocationManager, couldn't export per anchor per cluster measured value statistics\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
    }
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v63 = a1;
    v7 = (void *)MEMORY[0x1E0C99DE8];
    v8 = objc_msgSend_count(a3, a2, (uint64_t)a3, a4);
    v65 = (void *)objc_msgSend_arrayWithCapacity_(v7, v9, v8, v10);
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(a3, v11, (uint64_t)&v73, (uint64_t)v78, 16);
    if (v66)
    {
      v64 = *(_QWORD *)v74;
      do
      {
        for (i = 0; i != v66; ++i)
        {
          if (*(_QWORD *)v74 != v64)
            objc_enumerationMutation(a3);
          v68 = *(_QWORD *)(*((_QWORD *)&v73 + 1) + 8 * i);
          v15 = (void *)objc_msgSend_objectForKeyedSubscript_(a3, v12, v68, v13);
          v16 = (void *)MEMORY[0x1E0C99DE8];
          v20 = objc_msgSend_count(v15, v17, v18, v19);
          v23 = (void *)objc_msgSend_arrayWithCapacity_(v16, v21, v20, v22);
          v69 = 0u;
          v70 = 0u;
          v71 = 0u;
          v72 = 0u;
          v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v24, (uint64_t)&v69, (uint64_t)v77, 16);
          if (v25)
          {
            v28 = v25;
            v29 = *(_QWORD *)v70;
            do
            {
              for (j = 0; j != v28; ++j)
              {
                if (*(_QWORD *)v70 != v29)
                  objc_enumerationMutation(v15);
                v31 = *(_QWORD *)(*((_QWORD *)&v69 + 1) + 8 * j);
                v32 = (void *)objc_msgSend_objectForKeyedSubscript_(v15, v26, v31, v27);
                v33 = [_CLMicroLocationClusterIdAndClusterData alloc];
                v36 = (void *)objc_msgSend_objectAtIndexedSubscript_(v32, v34, 0, v35);
                objc_msgSend_doubleValue(v36, v37, v38, v39);
                v41 = v40;
                v44 = (void *)objc_msgSend_objectAtIndexedSubscript_(v32, v42, 1, v43);
                objc_msgSend_doubleValue(v44, v45, v46, v47);
                v51 = (void *)objc_msgSend_initWithClusterIdentifier_meanBleRssi_meanUwbRange_(v33, v48, v31, v49, v41, v50);
                objc_msgSend_addObject_(v23, v52, (uint64_t)v51, v53);

              }
              v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v26, (uint64_t)&v69, (uint64_t)v77, 16);
            }
            while (v28);
          }
          v54 = [_CLMicroLocationSourceIdAndSourceData alloc];
          v56 = (void *)objc_msgSend_initWithSourceIdsIdentifier_sourceData_(v54, v55, v68, (uint64_t)v23);
          objc_msgSend_addObject_(v65, v57, (uint64_t)v56, v58);

        }
        v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(a3, v12, (uint64_t)&v73, (uint64_t)v78, 16);
      }
      while (v66);
    }
    v59 = [_CLMicroLocationSourcesStatisticsResult alloc];
    v62 = (id)objc_msgSend_initWithSourcesData_(v59, v60, (uint64_t)v65, v61);
    (*(void (**)(void))(*(_QWORD *)(v63 + 32) + 16))();
  }
}

void sub_18F5E3D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E418C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5E4650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5E4B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5E4D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E5064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E5208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E53AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E5550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E5724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E58E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E5A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E5C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E5F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E616C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E62F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E6488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E6600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E6778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E6920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E6A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E6CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, id location)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5E6ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E7308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  void *v9;

  objc_sync_exit(v9);
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5E7878(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5E7C0C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _CLPlaceInference *v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v4 = a3;
  v31 = *MEMORY[0x1E0C80C00];
  v7 = objc_msgSend_count(a2, (const char *)a2, a3, a4);
  if (!v4 && !v7)
    v4 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v8, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 6, 0);
  if (v4)
    return objc_msgSend_callPlaceInferenceHandlerWithResult_error_(*(void **)(a1 + 40), v8, 0, v4);
  v12 = (void *)objc_msgSend_array(MEMORY[0x1E0C99DE8], v8, v9, v10);
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v13, (uint64_t)&v26, (uint64_t)v30, 16);
  if (v14)
  {
    v16 = v14;
    v17 = *(_QWORD *)v27;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v27 != v17)
          objc_enumerationMutation(a2);
        v19 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * v18);
        v20 = [_CLPlaceInference alloc];
        v22 = (void *)objc_msgSend_initWithUserType_placeType_placemark_referenceLocation_confidence_preferredName_loiIdentifier_(v20, v21, 0, 2, v19, *(_QWORD *)(a1 + 48), 0, 0, 0.4);
        objc_msgSend_addObject_(v12, v23, (uint64_t)v22, v24);

        ++v18;
      }
      while (v16 != v18);
      v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v25, (uint64_t)&v26, (uint64_t)v30, 16);
    }
    while (v16);
  }
  return objc_msgSend_callPlaceInferenceHandlerWithResult_error_(*(void **)(a1 + 40), v15, (uint64_t)v12, 0);
}

void sub_18F5E8238(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5E96A4()
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 3;
  else
    return 4;
}

void sub_18F5EA14C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5EA168(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  char v14;
  id v15;
  id v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  CLBeacon *v57;
  const char *v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  id v65;
  uint8_t buf[4];
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_count(a2, (const char *)a2, a3, a4) == 8)
  {
    v8 = (void *)objc_msgSend_objectAtIndex_(a2, v6, 0, v7);
    v14 = objc_msgSend_intValue(v8, v9, v10, v11);
    v15 = 0;
    if ((v14 & 1) != 0)
    {
      v16 = objc_alloc(MEMORY[0x1E0CB3A28]);
      v19 = objc_msgSend_objectAtIndex_(a2, v17, 1, v18);
      v15 = (id)objc_msgSend_initWithUUIDString_(v16, v20, v19, v21);
    }
    if ((v14 & 2) != 0)
    {
      v22 = objc_msgSend_objectAtIndex_(a2, v12, 2, v13);
      if ((v14 & 4) != 0)
        goto LABEL_6;
    }
    else
    {
      v22 = 0;
      if ((v14 & 4) != 0)
      {
LABEL_6:
        v23 = objc_msgSend_objectAtIndex_(a2, v12, 3, v13);
LABEL_15:
        v28 = (void *)objc_msgSend_objectAtIndex_(a2, v12, 4, v13);
        v34 = objc_msgSend_integerValue(v28, v29, v30, v31) - 1;
        if (v34 < 3)
          v35 = v34 + 1;
        else
          v35 = 0;
        v36 = (void *)objc_msgSend_objectAtIndex_(a2, v32, 5, v33);
        objc_msgSend_doubleValue(v36, v37, v38, v39);
        v41 = v40;
        v44 = (void *)objc_msgSend_objectAtIndex_(a2, v42, 6, v43);
        v48 = objc_msgSend_shortValue(v44, v45, v46, v47);
        v51 = (void *)objc_msgSend_objectAtIndex_(a2, v49, 7, v50);
        objc_msgSend_doubleValue(v51, v52, v53, v54);
        v56 = v55;
        v57 = [CLBeacon alloc];
        v65 = (id)objc_msgSend_initWithUUID_major_minor_proximity_accuracy_rssi_timestamp_(v57, v58, (uint64_t)v15, v22, v23, v35, v48, v41, v56);
        objc_msgSend_addObject_(*(void **)(a1 + 32), v59, (uint64_t)v65, v60);

        return;
      }
    }
    v23 = 0;
    goto LABEL_15;
  }
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E2991328);
  v24 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v67 = objc_msgSend_count(a2, v25, v26, v27);
    _os_log_impl(&dword_18F5B3000, v24, OS_LOG_TYPE_DEFAULT, "Client beacon is invalid (count,%lu).", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2991328);
    objc_msgSend_count(a2, v61, v62, v63);
    v64 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLLocationManager onClientEventRanging:]_block_invoke", "CoreLocation: %s\n", v64);
    if (v64 != (char *)buf)
      free(v64);
  }
}

void sub_18F5EB548(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5EB6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5EB8B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5EC008(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5EC308(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5EC5F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5EC960(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5ECBE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F5ED424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5ED5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5ED80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5ED9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5EDBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5EE0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5EE238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5EE3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5EE550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5EE700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5EE88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5EEA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5EEE80(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  char *v5;
  uint8_t buf[4];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E2991328);
  v4 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 138412290;
    v7 = a2;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_FAULT, "#diagnosticManager failed to get remoteObjectProxy with error %@", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2991328);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "+[CLLocationManager dumpDiagnosticFilesWithHandler:]_block_invoke", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }

}

void sub_18F5EF034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2991328);
    v5 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412290;
      v8 = a3;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_FAULT, "#diagnosticManager error copying files: %@", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2991328);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "+[CLLocationManager dumpDiagnosticFilesWithHandler:]_block_invoke", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_18F5EF3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5EF964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  objc_sync_exit(v13);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5EFC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  objc_sync_exit(v13);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5EFF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  objc_sync_exit(v13);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5F01E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  objc_sync_exit(v13);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5F0378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5F0504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5F0684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5F0810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5F09EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5F0B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5F0CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5F0E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5F1004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5F1198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5F132C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5F14CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F5F1790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  objc_sync_exit(v13);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5F1A44(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F5F1A60(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_18F5F1D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5F1FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, id location)
{
  void *v20;

  objc_sync_exit(v20);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5F2038(uint64_t a1)
{
  _QWORD *result;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  uint8_t buf[1640];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = objc_loadWeak((id *)(a1 + 48));
  if (result)
  {
    v3 = result;
    objc_sync_enter(result);

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 248) = objc_msgSend_copy(*(void **)(a1 + 40), v4, v5, v6);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 256) = *(_QWORD *)(a1 + 56);
    objc_sync_exit(v3);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2991328);
    v7 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "Start continuous PlaceInferences", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2991328);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "-[CLLocationManager(_CLPlaceInferenceExtensions) _fetchContinuousPlaceInferencesWithFidelityPolicy:handler:]_block_invoke", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    return sub_18F5CFCD4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_DWORD *)(a1 + 56));
  }
  return result;
}

void sub_18F5F221C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18F5F24F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F5F26EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

os_log_t sub_18F5F2714()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "Microlocation");
  qword_1EE1720C0 = (uint64_t)result;
  return result;
}

uint64_t sub_18F5F2740(const char *a1, int a2, int a3, signed int a4, const char *a5, char *a6, ...)
{
  va_list va;

  va_start(va, a6);
  if (qword_1ECD8F9E0 != -1)
    dispatch_once(&qword_1ECD8F9E0, &unk_1E29907F0);
  if (a3)
    return sub_18F6B6C4C(qword_1ECD8F9D8, a1, a2, a4, a5, a6, va);
  else
    return sub_18F6B62F8(qword_1ECD8F9D8, a1, a2, a4, a5, a6, va);
}

void sub_18F5F27E8(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E2990D30);
  v3 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0)
      v5 = v4;
    else
      v5 = *(_QWORD *)v4;
    *(_DWORD *)buf = 136315138;
    v8 = v5;
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,client,#warning,unexpected message,%s", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D30);
    CLConnectionMessage::name(*a2);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "CLGNSSStateQueryAssertionResponseInternal::CLGNSSStateQueryAssertionResponseInternal(dispatch_queue_t, const char *, NSDictionary *, CLGNSSStateQueryAssertionResponseCallback)_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

void sub_18F5F29C4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  NSObject *v9;
  char *v10;
  uint64_t v11;
  uint64_t Dictionary;
  char *v13;
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E2990D30);
  v4 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
  {
    v5 = CLConnectionMessage::name(*a2);
    if (*(char *)(v5 + 23) >= 0)
      v6 = v5;
    else
      v6 = *(_QWORD *)v5;
    *(_DWORD *)buf = 136315138;
    v15 = v6;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "#CLGNSSStateQueryAssertion,client,message,%s", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D30);
    CLConnectionMessage::name(*a2);
    v13 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "CLGNSSStateQueryAssertionResponseInternal::CLGNSSStateQueryAssertionResponseInternal(dispatch_queue_t, const char *, NSDictionary *, CLGNSSStateQueryAssertionResponseCallback)_block_invoke", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
  if (*(_QWORD *)(v3 + 8))
  {
    v7 = (_QWORD *)CLConnectionMessage::name(*a2);
    v8 = *((char *)v7 + 23);
    if (v8 < 0)
    {
      if (v7[1] != 53)
        return;
      v7 = (_QWORD *)*v7;
    }
    else if (v8 != 53)
    {
      return;
    }
    if (!memcmp(v7, "kCLConnectionMessageCLGNSSStateQueryAssertionResponse", 0x35uLL))
    {
      v11 = *(_QWORD *)(v3 + 8);
      Dictionary = CLConnectionMessage::getDictionary(*a2);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v11 + 16))(v11, Dictionary, 0);
    }
  }
  else
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D30);
    v9 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,#warning,client,noRegisteredCallback", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990D30);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "CLGNSSStateQueryAssertionResponseInternal::CLGNSSStateQueryAssertionResponseInternal(dispatch_queue_t, const char *, NSDictionary *, CLGNSSStateQueryAssertionResponseCallback)_block_invoke", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
}

uint64_t sub_18F5F2D44(uint64_t a1)
{
  const void *v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    _Block_release(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
  if (*(_QWORD *)a1)
  {
    dispatch_release(*(dispatch_object_t *)a1);
    *(_QWORD *)a1 = 0;
  }
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v4 = MEMORY[0x194002B2C]();
    result = MEMORY[0x194002D30](v4, 0xB0C40BC2CC919);
  }
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

void sub_18F5F3180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  sub_18F5D6004((uint64_t)&a14);
  sub_18F5D6004((uint64_t)&a24);
  MEMORY[0x194002D30](v33, 0xA0C40114AFA65);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F5F3280(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  char *v4;
  uint8_t buf[1640];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D30);
    v3 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,client,~CLGNSSStateQueryAssertionResponseInternal", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990D30);
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "CLGNSSStateQueryAssertionResponseInternal::~CLGNSSStateQueryAssertionResponseInternal()", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
    sub_18F5F2D44(v2);
    JUMPOUT(0x194002D30);
  }
  return result;
}

void sub_18F5F3464(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_18F5D57A8(a1);
}

uint64_t sub_18F5F3470(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  CLGNSSStateQueryAssertionResponse *v8;
  const char *v9;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD v18[3];
  _QWORD v19[3];
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D30);
    v11 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,client,reason missing\"}", buf, 0x12u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990D30);
    }
    v12 = qword_1ECD8E750;
    if (!os_signpost_enabled((os_log_t)qword_1ECD8E750))
      return 0;
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v13 = "#CLGNSSStateQueryAssertion,client,reason missing";
    v14 = "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,client,reason missing\"}";
    goto LABEL_35;
  }
  if (!a1 || !a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D30);
    v15 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,client,bundleID or bundlePath needed\"}", buf, 0x12u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990D30);
    }
    v12 = qword_1ECD8E750;
    if (!os_signpost_enabled((os_log_t)qword_1ECD8E750))
      return 0;
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v13 = "#CLGNSSStateQueryAssertion,client,bundleID or bundlePath needed";
    v14 = "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,client,bundleID or bundlePath needed\"}";
    goto LABEL_35;
  }
  if (!a4)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D30);
    v16 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,client,nil callback queue\"}", buf, 0x12u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990D30);
    }
    v12 = qword_1ECD8E750;
    if (!os_signpost_enabled((os_log_t)qword_1ECD8E750))
      return 0;
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v13 = "#CLGNSSStateQueryAssertion,client,nil callback queue";
    v14 = "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,client,nil callback queue\"}";
    goto LABEL_35;
  }
  if (a5)
  {
    v18[0] = CFSTR("kCLConnectionMessageBundleIdentifierKey");
    v18[1] = CFSTR("kCLConnectionMessageBundlePathKey");
    v19[0] = a1;
    v19[1] = a2;
    v18[2] = CFSTR("kCLConnectionMessagePurposeKey");
    v19[2] = a3;
    v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v19, (uint64_t)v18, 3);
    v8 = [CLGNSSStateQueryAssertionResponse alloc];
    return objc_msgSend_initWithRegistrationMessageName_messagePayload_callbackQueue_completionHandler_(v8, v9, (uint64_t)"kCLConnectionMessageBBGnssStatusQuery", v7, a4, a5);
  }
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E2990D30);
  v17 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,client,nil callback block\"}", buf, 0x12u);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D30);
  }
  v12 = qword_1ECD8E750;
  if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
  {
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v13 = "#CLGNSSStateQueryAssertion,client,nil callback block";
    v14 = "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,client,nil callback block\"}";
LABEL_35:
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v13, v14, buf, 0x12u);
  }
  return 0;
}

os_log_t sub_18F5F3D28()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F5F3D54@<X0>(char **a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F5F3DB4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F5F3DA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F5F3DB4(_QWORD *a1, char **a2, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E298FE10;
  sub_18F5F3E14((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_18F5F3E00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F5F3E14(uint64_t a1, uint64_t a2, char **a3, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F5D5990(__p, *a3);
  MEMORY[0x194002B44](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F5F3E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F5F3E84(long double a1, long double a2)
{
  fmod(a1, 360.0);
  fmod(a2, 360.0);
}

uint64_t sub_18F5F3F10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x194002CE8](a1 + 128);
  return a1;
}

uint64_t sub_18F5F3F98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_18F5F409C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x194002CE8](v1);
  _Unwind_Resume(a1);
}

double sub_18F5F40C4(double *a1, double *a2, double a3)
{
  double v6;
  long double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  __double2 v12;
  int v13;
  double result;

  v6 = *a1;
  v7 = sin(*a1 * 0.0174532925);
  v8 = sqrt(v7 * -0.00669437999 * v7 + 1.0);
  v9 = (int)(6335439.33 / (v8 * (v8 * v8)) * 0.0174532925);
  v10 = a3;
  if (v9 >= 1)
    v10 = a3 / (double)v9;
  v11 = v10 * floor(v6 / v10);
  *a1 = v11;
  v12 = __sincos_stret(v11 * 0.0174532925);
  v13 = (int)(v12.__cosval * 0.0174532925 * (6378137.0 / sqrt(v12.__sinval * -0.00669437999 * v12.__sinval + 1.0)));
  if (v13 >= 1)
    a3 = a3 / (double)v13;
  result = a3 * floor(*a2 / a3);
  *a2 = result;
  return result;
}

uint64_t sub_18F5F41BC(const char *a1)
{
  passwd *v2;
  uid_t pw_uid;
  gid_t pw_gid;

  v2 = getpwnam("mobile");
  if (v2)
  {
    pw_uid = v2->pw_uid;
    pw_gid = v2->pw_gid;
  }
  else
  {
    pw_uid = 501;
    pw_gid = 501;
  }
  return lchown(a1, pw_uid, pw_gid);
}

uint64_t sub_18F5F41FC(_BYTE *a1, uid_t a2, gid_t a3)
{
  int v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t result;
  stat v10;
  char v11[1024];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  bzero(v11, 0x400uLL);
  v6 = *a1;
  if (!*a1)
    return 1;
  v7 = 0;
  v8 = a1 + 1;
  while (1)
  {
    v11[v7] = v6;
    if (v6 != 47 || !stat(v11, &v10))
      goto LABEL_7;
    if (mkdir(v11, 0x1FFu))
      return 0;
    lchown(v11, a2, a3);
    lchmod(v11, 0x1C0u);
LABEL_7:
    result = 1;
    if (v7 <= 0x3FD)
    {
      v6 = v8[v7++];
      if (v6)
        continue;
    }
    return result;
  }
}

uint64_t sub_18F5F42F4(const char *a1, const char *a2)
{
  void *v4;
  FILE *v5;
  FILE *v6;
  FILE *v7;
  FILE *v8;
  size_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  char *v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  char *v19;
  char *v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = malloc_type_malloc(0x400uLL, 0x93D02233uLL);
  if (!v4)
    goto LABEL_30;
  v5 = fopen(a1, "rb");
  if (!v5)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
    v12 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v13 = *__error();
      *(_DWORD *)buf = 136446466;
      v22 = a1;
      v23 = 1026;
      v24 = v13;
      _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_FAULT, "cannot open source file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    v11 = 0;
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_38;
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
    __error();
    v14 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
LABEL_30:
    v11 = 0;
    goto LABEL_38;
  }
  v6 = v5;
  v7 = fopen(a2, "wb");
  if (!v7)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
    v15 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v16 = *__error();
      *(_DWORD *)buf = 136446466;
      v22 = a2;
      v23 = 1026;
      v24 = v16;
      _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_FAULT, "cannot open target file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
      __error();
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
    fclose(v6);
    goto LABEL_30;
  }
  v8 = v7;
  while (1)
  {
    if (feof(v6))
    {
      v11 = 1;
      goto LABEL_37;
    }
    v9 = fread(v4, 1uLL, 0x400uLL, v6);
    if (v9 == -1)
      break;
    if (v9 != fwrite(v4, 1uLL, v9, v8))
    {
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
      v10 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        v22 = a2;
        _os_log_impl(&dword_18F5B3000, v10, OS_LOG_TYPE_FAULT, "error writing target file: %{public}s", buf, 0xCu);
      }
      v11 = 0;
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E728 == -1)
          goto LABEL_44;
LABEL_47:
        dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
LABEL_44:
        v20 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "CoreLocation: %s\n", v20);
        if (v20 != (char *)buf)
          free(v20);
        v11 = 0;
        goto LABEL_37;
      }
      goto LABEL_37;
    }
  }
  if (qword_1ECD8E728 != -1)
    dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
  v17 = off_1ECD8E720;
  if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136446210;
    v22 = a1;
    _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_FAULT, "error reading source file: %{public}s", buf, 0xCu);
  }
  v11 = 0;
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      goto LABEL_47;
    goto LABEL_44;
  }
LABEL_37:
  fclose(v6);
  fclose(v8);
LABEL_38:
  free(v4);
  return v11;
}

uint64_t sub_18F5F4958(const char *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t PathComponent;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  FILE *v20;
  FILE *v21;
  BZFILE *v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  size_t v26;
  NSObject *v27;
  int v28;
  int v29;
  char *v30;
  NSObject *v31;
  int v32;
  NSObject *v34;
  char *v35;
  NSObject *v36;
  int v37;
  char *v38;
  char *v39;
  id v40[2];
  int bzerror;
  int v42;
  const char *v43;
  __int16 v44;
  int v45;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x1E0CB3940];
  v7 = (void *)objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], a2, (uint64_t)a2, a4);
  PathComponent = objc_msgSend_lastPathComponent(v7, v8, v9, v10);
  v14 = (void *)objc_msgSend_stringWithFormat_(v6, v12, (uint64_t)CFSTR("compress:%@"), v13, PathComponent);
  v18 = objc_msgSend_UTF8String(v14, v15, v16, v17);
  sub_18F5F6290((uint64_t *)v40, v18, 0);
  bzerror = 0;
  v19 = malloc_type_malloc(0x400uLL, 0x72AACFCCuLL);
  if (!v19)
  {
LABEL_38:
    v24 = 0;
    goto LABEL_39;
  }
  v20 = fopen(a1, "rb");
  if (!v20)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
    v27 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v28 = *__error();
      *(_DWORD *)buf = 136446466;
      v47 = a1;
      v48 = 1026;
      v49 = v28;
      _os_log_impl(&dword_18F5B3000, v27, OS_LOG_TYPE_FAULT, "cannot open source file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
      v29 = *__error();
      v42 = 136446466;
      v43 = a1;
      v44 = 1026;
      v45 = v29;
      v30 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n", v30);
      if (v30 != (char *)buf)
        free(v30);
    }
    goto LABEL_38;
  }
  v21 = fopen(a2, "wb");
  if (!v21)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
    v31 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v32 = *__error();
      *(_DWORD *)buf = 136446466;
      v47 = a1;
      v48 = 1026;
      v49 = v32;
      _os_log_impl(&dword_18F5B3000, v31, OS_LOG_TYPE_FAULT, "cannot open target file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
      v37 = *__error();
      v42 = 136446466;
      v43 = a1;
      v44 = 1026;
      v45 = v37;
      v38 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n", v38);
      if (v38 != (char *)buf)
        free(v38);
    }
    fclose(v20);
    goto LABEL_38;
  }
  v22 = BZ2_bzWriteOpen(&bzerror, v21, 1, 0, 0);
  if (bzerror)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
    v23 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446466;
      v47 = a2;
      v48 = 1026;
      v49 = bzerror;
      _os_log_impl(&dword_18F5B3000, v23, OS_LOG_TYPE_FAULT, "cannot open compression stream: %{public}s, bzerror %{public}d", buf, 0x12u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
LABEL_67:
        dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
LABEL_56:
      v42 = 136446466;
      v43 = a2;
      v44 = 1026;
      v45 = bzerror;
      v35 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n", v35);
LABEL_57:
      if (v35 != (char *)buf)
        free(v35);
    }
  }
  else
  {
    while (1)
    {
      if (feof(v20))
      {
        v24 = 1;
        goto LABEL_11;
      }
      v26 = fread(v19, 1uLL, 0x400uLL, v20);
      if (v26 == -1)
        break;
      BZ2_bzWrite(&bzerror, v22, v19, v26);
      if (bzerror)
      {
        if (qword_1ECD8E728 != -1)
          dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
        v36 = off_1ECD8E720;
        if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136446466;
          v47 = a2;
          v48 = 1026;
          v49 = bzerror;
          _os_log_impl(&dword_18F5B3000, v36, OS_LOG_TYPE_FAULT, "error writing target file: %{public}s, bzerror: %{public}d", buf, 0x12u);
        }
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_10;
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E728 != -1)
          goto LABEL_67;
        goto LABEL_56;
      }
    }
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
    v34 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v47 = a1;
      _os_log_impl(&dword_18F5B3000, v34, OS_LOG_TYPE_FAULT, "error reading source file: %{public}s", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
      v42 = 136446210;
      v43 = a1;
      v35 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n", v35);
      goto LABEL_57;
    }
  }
LABEL_10:
  v24 = 0;
LABEL_11:
  fclose(v20);
  if (v22)
  {
    BZ2_bzWriteClose(&bzerror, v22, 0, 0, 0);
    if (bzerror)
    {
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
      v25 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446466;
        v47 = a2;
        v48 = 1026;
        v49 = bzerror;
        _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_FAULT, "error closing target file: %{public}s, bzerror: %{public}d", buf, 0x12u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E728 != -1)
          dispatch_once(&qword_1ECD8E728, &unk_1E298D9D0);
        v42 = 136446466;
        v43 = a2;
        v44 = 1026;
        v45 = bzerror;
        v39 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n", v39);
        if (v39 != (char *)buf)
          free(v39);
      }
    }
  }
  fclose(v21);
LABEL_39:
  free(v19);
  sub_18F5F64B8(v40);
  return v24;
}

void sub_18F5F5354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_18F5F64B8((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5F5374(char *a1, int a2, double a3)
{
  uint64_t result;

  if (a3 < 0.0)
    return snprintf(a1, a2, "%.1f", a3);
  switch((int)((a3 + 22.5) / 45.0))
  {
    case 0:
    case 8:
      result = snprintf(a1, a2, "N");
      break;
    case 1:
      result = snprintf(a1, a2, "NE");
      break;
    case 2:
      result = snprintf(a1, a2, "E");
      break;
    case 3:
      result = snprintf(a1, a2, "SE");
      break;
    case 4:
      result = snprintf(a1, a2, "S");
      break;
    case 5:
      result = snprintf(a1, a2, "SW");
      break;
    case 6:
      result = snprintf(a1, a2, "W");
      break;
    case 7:
      result = snprintf(a1, a2, "NW");
      break;
    default:
      return snprintf(a1, a2, "%.1f", a3);
  }
  return result;
}

void sub_18F5F5470(double *a1, double *a2, double a3, double a4, double a5, double a6, double a7)
{
  double *v8;
  double v11;
  unsigned __int8 v12;
  int v13;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v20;

  v8 = a1;
  v11 = a5;
  v12 = atomic_load((unsigned __int8 *)&qword_1EE172AA8);
  if ((v12 & 1) == 0)
  {
    v17 = a2;
    v18 = a7;
    v15 = a6;
    v16 = a4;
    v20 = a3;
    v13 = __cxa_guard_acquire(&qword_1EE172AA8);
    v11 = a5;
    a3 = v20;
    a6 = v15;
    a4 = v16;
    a7 = v18;
    v8 = a1;
    a2 = v17;
    if (v13)
    {
      qword_1EE172A90 = 0;
      unk_1EE172A98 = 0;
      xmmword_1EE172A80 = xmmword_18F771F40;
      qword_1EE172AA0 = 0x3FF0000000000000;
      __cxa_guard_release(&qword_1EE172AA8);
      v11 = a5;
      a3 = v20;
      a6 = v15;
      a4 = v16;
      a7 = v18;
      v8 = a1;
      a2 = v17;
    }
  }
  sub_18F71AD50((double *)&xmmword_1EE172A80, v8, a2, a3, a4, 0.0, v11, a6, a7);
}

double sub_18F5F553C(double *a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v8;
  double v9;
  double v10;
  __double2 v11;
  __double2 v12;
  __double2 v13;
  long double v14;
  long double v15;
  long double v16;
  double result;

  v8 = a4 * 0.0174532925;
  v9 = a5 * 0.0174532925;
  v10 = a6 / 6378137.0;
  v11 = __sincos_stret(a3 * 0.0174532925);
  v12 = __sincos_stret(v10);
  v13 = __sincos_stret(v9);
  v14 = asin(v13.__cosval * (v11.__cosval * v12.__sinval) + v11.__sinval * v12.__cosval);
  v15 = sin(v14);
  v16 = atan2(v11.__cosval * (v13.__sinval * v12.__sinval), v12.__cosval - v11.__sinval * v15);
  *a1 = v14 / 0.0174532925;
  result = (v8 + v16) / 0.0174532925;
  *a2 = result;
  return result;
}

void sub_18F5F5608(double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7)
{
  double v14;
  double v15;
  double v16;
  double v17;

  if (a1 && a2 && a3)
  {
    if (a4)
    {
      v16 = 0.0;
      sub_18F5F553C(&v16, &v17, a5, a6, 0.0, a7);
      v14 = vabdd_f64(v16, a5);
      sub_18F5F553C(&v17, &v16, a5, a6, 90.0, a7);
      v15 = vabdd_f64(v16, a6);
      *a1 = a5 - v14;
      *a3 = v14 + a5;
      *a2 = a6 - v15;
      *a4 = v15 + a6;
    }
  }
}

uint64_t sub_18F5F56D4(const __CFString *a1, const __CFString *a2, Boolean *a3)
{
  Boolean *v5;
  const void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AppBooleanValue;
  void *v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const __CFAllocator *v26;
  const __CFArray *v27;
  const __CFString *v28;
  CFPropertyListRef v29;
  const void *v30;
  CFTypeID v31;
  void *v33[2];
  char v34;
  char v35;
  void *__p[2];
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  if (a3)
    v5 = a3;
  else
    v5 = (Boolean *)&v35;
  *v5 = 0;
  v6 = (const void *)CFCopyUserName();
  if (CFEqual(v6, CFSTR("mobile")))
  {
    AppBooleanValue = CFPreferencesGetAppBooleanValue(a1, a2, v5);
    if (!*v5)
    {
      v11 = (void *)MEMORY[0x1E0CB3940];
      v12 = (char *)objc_msgSend_UTF8String(CFSTR("mobile"), v7, v8, v9);
      sub_18F5D5990(v33, v12);
      sub_18F687DDC((uint64_t)v33, __p);
      if (v37 >= 0)
        v15 = objc_msgSend_stringWithUTF8String_(v11, v13, (uint64_t)__p, v14);
      else
        v15 = objc_msgSend_stringWithUTF8String_(v11, v13, (uint64_t)__p[0], v14);
      v18 = (void *)v15;
      v19 = objc_msgSend_componentsJoinedByString_(&unk_1E29B5B80, v16, (uint64_t)CFSTR("/"), v17);
      v22 = (void *)objc_msgSend_stringByAppendingPathComponent_(v18, v20, v19, v21);
      v25 = (void *)objc_msgSend_stringByAppendingString_(v22, v23, (uint64_t)CFSTR("/"), v24);
      if (v37 < 0)
        operator delete(__p[0]);
      if (v34 < 0)
        operator delete(v33[0]);
      __p[0] = v25;
      __p[1] = (void *)a2;
      v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v27 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)__p, 2, MEMORY[0x1E0C9B378]);
      if (v27)
      {
        v28 = CFStringCreateByCombiningStrings(v26, v27, &stru_1E2993188);
        if (v28)
        {
          AppBooleanValue = CFPreferencesGetAppBooleanValue(a1, v28, v5);
          CFRelease(v28);
        }
        CFRelease(v27);
      }
    }
  }
  else
  {
    v29 = CFPreferencesCopyValue(a1, a2, CFSTR("mobile"), (CFStringRef)*MEMORY[0x1E0C9B230]);
    if (v29)
    {
      v30 = v29;
      v31 = CFGetTypeID(v29);
      if (v31 == CFBooleanGetTypeID())
      {
        *v5 = 1;
        AppBooleanValue = CFEqual(v30, (CFTypeRef)*MEMORY[0x1E0C9AE50]);
      }
      else if (v31 == CFNumberGetTypeID() && !CFNumberIsFloatType((CFNumberRef)v30))
      {
        *v5 = 1;
        LODWORD(__p[0]) = 0;
        CFNumberGetValue((CFNumberRef)v30, kCFNumberIntType, __p);
        AppBooleanValue = LODWORD(__p[0]) != 0;
      }
      else
      {
        AppBooleanValue = 0;
      }
      CFRelease(v30);
    }
    else
    {
      return 0;
    }
  }
  return AppBooleanValue;
}

void sub_18F5F5948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F5F5984(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;

  if ((unint64_t)objc_msgSend_lengthOfBytesUsingEncoding_(a1, a2, 4, a4) < 0x41)
  {
    if (objc_msgSend_hasPrefix_(a1, v5, (uint64_t)CFSTR("_"), v6))
    {
      NSLog(CFSTR("Monitor name cannot begin with _"));
    }
    else
    {
      v9 = (void *)objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3780], v7, (uint64_t)CFSTR("_"), v8);
      v13 = objc_msgSend_alphanumericCharacterSet(MEMORY[0x1E0CB3500], v10, v11, v12);
      objc_msgSend_formUnionWithCharacterSet_(v9, v14, v13, v15);
      v19 = objc_msgSend_invertedSet(v9, v16, v17, v18);
      if (objc_msgSend_rangeOfCharacterFromSet_(a1, v20, v19, v21) == 0x7FFFFFFFFFFFFFFFLL)
        return 1;
      NSLog(CFSTR("Monitor Name contains non-alphanumeric character"));
    }
  }
  else
  {
    NSLog(CFSTR("Constraint Monitor name is too long; more than %d characters"), 64);
  }
  return 0;
}

void sub_18F5F5A54(FILE *a1)
{
  uint32_t v2;
  uint64_t v3;
  uint32_t v4;
  const char *image_name;
  size_t v6;
  int v7;
  const mach_header *image_header;
  const mach_header *v9;
  const mach_header *v10;
  uint32_t ncmds;
  const mach_header *v12;
  int32_t *p_cputype;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int v19;
  const mach_header **v20;
  uint64_t i;
  char *v22;
  __int128 v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t j;
  const char *v28;
  unint64_t *v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = _dyld_image_count();
  v3 = v2;
  v29 = (unint64_t *)malloc_type_calloc(v2, 0x38uLL, 0x105004076241286uLL);
  if (v2 && v29)
  {
    v4 = 0;
    do
    {
      image_name = _dyld_get_image_name(v4);
      v6 = (size_t)&image_name[strlen(image_name) + 1];
      do
      {
        v7 = *(unsigned __int8 *)(v6 - 2);
        --v6;
      }
      while (v7 != 47);
      image_header = _dyld_get_image_header(v4);
      v9 = image_header;
      v10 = *(const mach_header **)&image_header->cputype;
      ncmds = image_header->ncmds;
      if (ncmds)
      {
        v12 = 0;
        p_cputype = &image_header[1].cputype;
        do
        {
          if (*p_cputype == 1)
          {
            if (!strncmp((const char *)p_cputype + 8, "__TEXT", 6uLL))
              v12 = (const mach_header *)((char *)v12 + p_cputype[7]);
          }
          else if (*p_cputype == 27)
          {
            v30[0] = *(_OWORD *)(p_cputype + 2);
          }
          p_cputype = (int32_t *)((char *)p_cputype + p_cputype[1]);
          --ncmds;
        }
        while (ncmds);
      }
      else
      {
        v12 = 0;
      }
      v14 = 0;
      v15 = v29;
      while (1)
      {
        v17 = *v15;
        v15 += 7;
        v16 = v17;
        if (v17 >= (unint64_t)v9 || v16 == 0)
          break;
        if (v3 == ++v14)
        {
          v14 = v3;
          v19 = v3;
          goto LABEL_24;
        }
      }
      v19 = v14;
LABEL_24:
      v20 = (const mach_header **)&v29[7 * v14];
      memmove(v20 + 7, v20, 56 * (v3 + ~v19));
      *v20 = v9;
      v20[1] = v12;
      *((_OWORD *)v20 + 1) = v30[0];
      v20[4] = (const mach_header *)image_name;
      v20[5] = (const mach_header *)v6;
      v20[6] = v10;
      ++v4;
    }
    while (v4 != (_DWORD)v3);
  }
  fwrite("Binary Images:\n", 0xFuLL, 1uLL, a1);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v22 = (char *)&v29[7 * i];
      v23 = *((_OWORD *)v22 + 1);
      v30[0] = *(_OWORD *)v22;
      v30[1] = v23;
      v31 = *((_OWORD *)v22 + 2);
      v32 = *((_QWORD *)v22 + 6);
      v24 = "other";
      if ((_DWORD)v32 != 16777228)
      {
        v25 = "unknown";
        if (HIDWORD(v32) == 9)
          v25 = "armv7";
        v24 = "armv6";
        if (HIDWORD(v32) != 6)
          v24 = v25;
      }
      v28 = v24;
      if (i)
        v26 = 32;
      else
        v26 = 43;
      fprintf(a1, "%16p - %lld %c%s %s <", *(const void **)&v30[0], (_QWORD)((v30[0] + __PAIR128__(-1, 0)) >> 64), v26, *((const char **)&v31 + 1), v28);
      for (j = 16; j != 32; ++j)
        fprintf(a1, "%02X", *((unsigned __int8 *)v30 + j));
      fprintf(a1, "> %s\n", (const char *)v31);
    }
  }
  free(v29);
}

CFTypeRef sub_18F5F5D44(CFStringRef filePath, const __CFString *a2)
{
  CFURLRef v3;
  CFURLRef v4;
  __CFBundle *Unique;
  __CFBundle *v6;
  CFTypeRef ValueForInfoDictionaryKey;
  CFTypeRef v8;

  if (!filePath)
    return 0;
  v3 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], filePath, kCFURLPOSIXPathStyle, 1u);
  if (!v3)
    return 0;
  v4 = v3;
  Unique = (__CFBundle *)_CFBundleCreateUnique();
  if (Unique)
  {
    v6 = Unique;
    ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(Unique, a2);
    v8 = ValueForInfoDictionaryKey;
    if (ValueForInfoDictionaryKey)
      CFRetain(ValueForInfoDictionaryKey);
    CFRelease(v6);
  }
  else
  {
    v8 = 0;
  }
  CFRelease(v4);
  return v8;
}

BOOL sub_18F5F5DE4(__CFString *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (sub_18F5F5E48(a1, a2, a3, a4))
    return 1;
  if (qword_1EE172AB8 != -1)
    dispatch_once(&qword_1EE172AB8, &unk_1E2990B70);
  return sub_18F7070A8(qword_1EE172AB0, a1);
}

BOOL sub_18F5F5E48(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t i;
  __int128 v10;
  _QWORD v11[3];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  v5 = atomic_load((unsigned __int8 *)&qword_1EE172AD8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1EE172AD8))
  {
    sub_18F5D5990(&v10, "/System/Library/LocationBundles/LocationPromptUI.bundle");
    sub_18F5D5990(v11, "/System/Library/LocationBundles/LocationFenceSync.bundle");
    sub_18F5D5990(v12, "/System/Library/LocationBundles/PLAMonitor.bundle");
    sub_18F5F6074((uint64_t)&qword_1EE172AC0, &v10, 3uLL);
    for (i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v12[i + 2]) < 0)
        operator delete((void *)v12[i]);
    }
    __cxa_atexit((void (*)(void *))sub_18F5F6110, &qword_1EE172AC0, &dword_18F5B3000);
    __cxa_guard_release(&qword_1EE172AD8);
  }
  v6 = (unsigned __int8 *)qword_1EE172AC0;
  v7 = (unsigned __int8 *)qword_1EE172AC8;
  *(_QWORD *)&v10 = objc_msgSend_UTF8String(a1, a2, a3, a4);
  return sub_18F5F6BE4(v6, v7, (const char **)&v10) != (unsigned __int8 *)qword_1EE172AC8;
}

void sub_18F5F5FAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 71) < 0)
      operator delete(*(void **)(v1 + v3 + 48));
    v3 -= 24;
    if (v3 == -72)
    {
      __cxa_guard_abort(&qword_1EE172AD8);
      _Unwind_Resume(a1);
    }
  }
}

BOOL sub_18F5F6020(const __CFString *a1)
{
  if (qword_1EE172AB8 != -1)
    dispatch_once(&qword_1EE172AB8, &unk_1E2990B70);
  return sub_18F70722C(qword_1EE172AB0, a1);
}

uint64_t sub_18F5F6074(uint64_t a1, __int128 *a2, unint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    sub_18F5F6A60((_QWORD *)a1, a3);
    *(_QWORD *)(a1 + 8) = sub_18F5F6AB0(v4, a2, (__int128 *)((char *)a2 + 24 * a3), *(char **)(a1 + 8));
  }
  return a1;
}

void sub_18F5F60F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_18F5D605C(&a9);
  _Unwind_Resume(a1);
}

void **sub_18F5F6110(void **a1)
{
  void **v3;

  v3 = a1;
  sub_18F5D605C(&v3);
  return a1;
}

BOOL sub_18F5F6144(const __CFString *a1)
{
  if (qword_1EE172AB8 != -1)
    dispatch_once(&qword_1EE172AB8, &unk_1E2990B70);
  return sub_18F7072E0(qword_1EE172AB0, a1);
}

BOOL sub_18F5F6198(const __CFString *a1)
{
  if (qword_1EE172AB8 != -1)
    dispatch_once(&qword_1EE172AB8, &unk_1E2990B70);
  return sub_18F707394(qword_1EE172AB0, a1);
}

uint64_t sub_18F5F61EC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (void *)objc_msgSend_objectForInfoDictionaryKey_(a1, a2, (uint64_t)CFSTR("NSWidgetWantsLocation"), a4);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return objc_msgSend_BOOLValue(v4, v5, v6, v7);
  else
    return 0;
}

BOOL sub_18F5F6244()
{
  __CFBundle *MainBundle;
  __CFBundle *v1;

  MainBundle = CFBundleGetMainBundle();
  if (MainBundle)
  {
    v1 = MainBundle;
    MainBundle = (__CFBundle *)CFBundleGetValueForInfoDictionaryKey(MainBundle, CFSTR("NSLocationWhenInUseUsageDescription"));
    if (!MainBundle)
      MainBundle = (__CFBundle *)CFBundleGetValueForInfoDictionaryKey(v1, CFSTR("NSLocationAlwaysAndWhenInUseUsageDescription"));
  }
  return MainBundle != 0;
}

uint64_t *sub_18F5F6290(uint64_t *a1, uint64_t a2, int a3)
{
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  char *v11;
  uint8_t buf[4];
  uint64_t *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *a1 = os_transaction_create();
  a1[1] = 0;
  if (!a3)
  {
    a1[1] = (uint64_t)(id)objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, a2, v7);
    if (qword_1EE172188 != -1)
      dispatch_once(&qword_1EE172188, &unk_1E298D950);
    v8 = qword_1EE172190;
    if (os_log_type_enabled((os_log_t)qword_1EE172190, OS_LOG_TYPE_DEFAULT))
    {
      v9 = a1[1];
      *(_DWORD *)buf = 134349314;
      v13 = a1;
      v14 = 2114;
      v15 = v9;
      _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_DEFAULT, "os_transaction created: (%{public}p) %{public}@", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172188 != -1)
        dispatch_once(&qword_1EE172188, &unk_1E298D950);
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "CLAutoOSTransaction::CLAutoOSTransaction(const char *, LoggingPolicy)", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  return a1;
}

os_log_t sub_18F5F648C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Utility", "QA");
  qword_1EE172190 = (uint64_t)result;
  return result;
}

id *sub_18F5F64B8(id *a1)
{
  NSObject *v2;
  id v3;
  char *v5;
  uint8_t buf[4];
  id *v7;
  __int16 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1[1])
  {
    if (qword_1EE172188 != -1)
      dispatch_once(&qword_1EE172188, &unk_1E298D950);
    v2 = qword_1EE172190;
    if (os_log_type_enabled((os_log_t)qword_1EE172190, OS_LOG_TYPE_DEFAULT))
    {
      v3 = a1[1];
      *(_DWORD *)buf = 134349314;
      v7 = a1;
      v8 = 2114;
      v9 = v3;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "os_transaction releasing: (%{public}p) %{public}@", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172188 != -1)
        dispatch_once(&qword_1EE172188, &unk_1E298D950);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "CLAutoOSTransaction::~CLAutoOSTransaction()", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }

    a1[1] = 0;
  }

  *a1 = 0;
  return a1;
}

void sub_18F5F66A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_18F5D57A8(a1);
}

uint64_t sub_18F5F66B0(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_18F5F6844();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_18F5F6858(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_18F5C6990(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v16 = v11 + 24;
  sub_18F5F67D0(a1, v15);
  v13 = a1[1];
  sub_18F5F69D8((uint64_t)v15);
  return v13;
}

void sub_18F5F67BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5F69D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5F67D0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_18F5F68C4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_18F5F6844()
{
  sub_18F5D5A54("vector");
}

void *sub_18F5F6858(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_18F5F689C();
  return operator new(24 * a2);
}

void sub_18F5F689C()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t sub_18F5F68C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_18F5F6960((uint64_t)v12);
  return a6;
}

uint64_t sub_18F5F6960(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_18F5F6994(a1);
  return a1;
}

void sub_18F5F6994(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

uint64_t sub_18F5F69D8(uint64_t a1)
{
  sub_18F5F6A0C(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_18F5F6A0C(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

char *sub_18F5F6A60(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_18F5F6844();
  result = (char *)sub_18F5F6858((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

char *sub_18F5F6AB0(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_18F5C6990(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_18F5F6B6C((uint64_t)v9);
  return v4;
}

void sub_18F5F6B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5F6B6C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F5F6B6C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_18F5F6BA0(a1);
  return a1;
}

void sub_18F5F6BA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

unsigned __int8 *sub_18F5F6BE4(unsigned __int8 *a1, unsigned __int8 *a2, const char **a3)
{
  unsigned __int8 *v3;
  const char *v5;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *a3;
    v6 = strlen(*a3);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            sub_18F5D5AC8();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, v5, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

BOOL sub_18F5F6C94(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *i;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  double v13;
  BOOL v14;
  BOOL v15;
  NSObject *v16;
  uint64_t v17;
  char *v19;
  uint8_t buf[4];
  uint64_t v21;
  uint64_t v22;

  v2 = 0;
  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1[1];
  v4 = (int)(-858993459 * ((unint64_t)(a1[2] - v3) >> 3) - 1);
  for (i = (double *)(v3 + 72); ; i += 5)
  {
    v6 = v2;
    if ((v4 & ~(v4 >> 63)) == v2)
      break;
    v8 = *(i - 6);
    v7 = *(i - 5);
    v10 = *(i - 3);
    v9 = *(i - 2);
    if (vabdd_f64(v8, v10) >= 0.0000001 || vabdd_f64(v7, v9) >= 0.0000001)
    {
      v11 = vabdd_f64(v8, *(i - 1)) < 0.0000001;
      if (vabdd_f64(v7, *i) >= 0.0000001)
        v11 = 0;
    }
    else
    {
      v11 = 1;
    }
    v13 = *(i - 8);
    v12 = *(i - 7);
    if (vabdd_f64(v13, v10) >= 0.0000001 || vabdd_f64(v12, v9) >= 0.0000001)
    {
      v14 = vabdd_f64(v13, *(i - 1)) < 0.0000001;
      if (vabdd_f64(v12, *i) >= 0.0000001)
        v14 = 0;
    }
    else
    {
      v14 = 1;
    }
    v15 = v11 || v14;
    v2 = v6 + 1;
    if (!v15)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29901F0);
      v16 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v17 = a1[4];
        *(_DWORD *)buf = 134217984;
        v21 = v17;
        _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_DEBUG, "CLMM,%.3lf,RouteHints received without proper connections", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29901F0);
        v19 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLMapsRouteHintData::isConnectivityGood() const", "CoreLocation: %s\n", v19);
        if (v19 != (char *)buf)
          free(v19);
      }
      return v6 >= v4;
    }
  }
  return v6 >= v4;
}

uint64_t sub_18F5F6F28(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  _BOOL4 v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  _BOOL4 v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  char *v52;
  BOOL v53;
  uint64_t v54;
  char *v56;
  NSObject *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  void *__p;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  __int16 v69;
  unint64_t v70;
  __int16 v71;
  unint64_t v72;
  uint8_t buf[4];
  uint64_t v74;
  __int16 v75;
  unint64_t v76;
  __int16 v77;
  unint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v65 = 0;
  v66 = 0;
  v2 = a1[1];
  v1 = a1[2];
  if ((int)(-858993459 * ((unint64_t)(v1 - v2) >> 3)) < 2)
  {
    v52 = 0;
LABEL_50:
    v53 = v2 == v1;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v63 = (char *)(a1 + 1);
    while (1)
    {
      v6 = (__int128 *)(v2 + 40 * v5);
      if (__p == v4)
      {
        if (v4 >= v66)
        {
          v9 = 0x999999999999999ALL * ((v66 - v4) >> 3);
          if (v9 <= 1)
            v9 = 1;
          if (0xCCCCCCCCCCCCCCCDLL * ((v66 - v4) >> 3) >= 0x333333333333333)
            v10 = 0x666666666666666;
          else
            v10 = v9;
          v12 = sub_18F5F7878((uint64_t)&v66, v10);
          v13 = (char *)__p;
          v14 = v65;
          v15 = *v6;
          v16 = v6[1];
          v12[4] = *((_QWORD *)v6 + 4);
          *(_OWORD *)v12 = v15;
          *((_OWORD *)v12 + 1) = v16;
          if (v14 == v13)
          {
            v20 = v12;
          }
          else
          {
            v17 = v12;
            do
            {
              v18 = *(_OWORD *)(v14 - 40);
              v19 = *(_OWORD *)(v14 - 24);
              v20 = v17 - 5;
              *(v17 - 1) = *((_QWORD *)v14 - 1);
              *(_OWORD *)(v17 - 3) = v19;
              *(_OWORD *)(v17 - 5) = v18;
              v14 -= 40;
              v17 -= 5;
            }
            while (v14 != v13);
          }
          v4 = (char *)(v12 + 5);
          __p = v20;
          v65 = (char *)(v12 + 5);
          v66 = (char *)&v12[5 * v11];
          if (v13)
            operator delete(v13);
        }
        else
        {
          v7 = *v6;
          v8 = v6[1];
          *((_QWORD *)v4 + 4) = *((_QWORD *)v6 + 4);
          *(_OWORD *)v4 = v7;
          *((_OWORD *)v4 + 1) = v8;
          v4 += 40;
        }
        v65 = v4;
      }
      v21 = v5 + 1;
      v22 = v2 + 40 * v5;
      v23 = v2 + 40 * (v5 + 1);
      v25 = *(double *)(v22 + 24);
      v24 = *(double *)(v22 + 32);
      v27 = *(double *)(v23 + 8);
      v26 = *(double *)(v23 + 16);
      if (vabdd_f64(v25, v27) >= 0.0000001 || vabdd_f64(v24, v26) >= 0.0000001)
      {
        v29 = v2 + 40 * v21;
        v30 = *(double *)(v29 + 32);
        v28 = vabdd_f64(v25, *(double *)(v29 + 24)) < 0.0000001;
        if (vabdd_f64(v24, v30) >= 0.0000001)
          v28 = 0;
      }
      else
      {
        v28 = 1;
      }
      v31 = v2 + 40 * v5;
      v33 = *(double *)(v31 + 8);
      v32 = *(double *)(v31 + 16);
      if (vabdd_f64(v33, v27) >= 0.0000001 || vabdd_f64(v32, v26) >= 0.0000001)
      {
        v34 = v2 + 40 * v21;
        v35 = *(double *)(v34 + 32);
        v36 = vabdd_f64(v33, *(double *)(v34 + 24)) < 0.0000001;
        if (vabdd_f64(v32, v35) >= 0.0000001)
          v36 = 0;
        if (!v28 && !v36)
          break;
      }
      v37 = (__int128 *)((char *)v6 + 40);
      if (v4 >= v66)
      {
        v40 = (char *)__p;
        v41 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)__p) >> 3);
        v42 = v41 + 1;
        if (v41 + 1 > 0x666666666666666)
          sub_18F5F7864();
        if (0x999999999999999ALL * ((v66 - (_BYTE *)__p) >> 3) > v42)
          v42 = 0x999999999999999ALL * ((v66 - (_BYTE *)__p) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v66 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
          v43 = 0x666666666666666;
        else
          v43 = v42;
        if (v43)
        {
          v44 = (char *)sub_18F5F7878((uint64_t)&v66, v43);
          v40 = (char *)__p;
          v4 = v65;
        }
        else
        {
          v44 = 0;
        }
        v45 = &v44[40 * v41];
        v46 = *v37;
        v47 = v37[1];
        *((_QWORD *)v45 + 4) = *((_QWORD *)v37 + 4);
        *(_OWORD *)v45 = v46;
        *((_OWORD *)v45 + 1) = v47;
        if (v4 == v40)
        {
          v51 = &v44[40 * v41];
        }
        else
        {
          v48 = &v44[40 * v41];
          do
          {
            v49 = *(_OWORD *)(v4 - 40);
            v50 = *(_OWORD *)(v4 - 24);
            v51 = v48 - 40;
            *((_QWORD *)v48 - 1) = *((_QWORD *)v4 - 1);
            *(_OWORD *)(v48 - 24) = v50;
            *(_OWORD *)(v48 - 40) = v49;
            v4 -= 40;
            v48 -= 40;
          }
          while (v4 != v40);
        }
        v4 = v45 + 40;
        __p = v51;
        v65 = v45 + 40;
        v66 = &v44[40 * v43];
        if (v40)
          operator delete(v40);
      }
      else
      {
        v38 = *v37;
        v39 = *(__int128 *)((char *)v6 + 56);
        *((_QWORD *)v4 + 4) = *((_QWORD *)v6 + 9);
        *(_OWORD *)v4 = v38;
        *((_OWORD *)v4 + 1) = v39;
        v4 += 40;
      }
      v65 = v4;
      v2 = a1[1];
      v1 = a1[2];
      v5 = v21;
      if (v21 >= (int)(-858993459 * ((unint64_t)(v1 - v2) >> 3) - 1))
      {
        v52 = (char *)__p;
        goto LABEL_50;
      }
    }
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29901F0);
    v56 = v63;
    v57 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v58 = a1[4];
      v59 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - a1[1]) >> 3);
      *(_DWORD *)buf = 134218496;
      v74 = v58;
      v75 = 2048;
      v76 = v59;
      v77 = 2048;
      v78 = 0xCCCCCCCCCCCCCCCDLL * ((v65 - (_BYTE *)__p) >> 3);
      _os_log_impl(&dword_18F5B3000, v57, OS_LOG_TYPE_DEBUG, "CLMM,%.3lf,RouteHints received without proper connections,changing segments from %lu,to,%lu", buf, 0x20u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29901F0);
      v60 = a1[4];
      v61 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - a1[1]) >> 3);
      v67 = 134218496;
      v68 = v60;
      v69 = 2048;
      v70 = v61;
      v71 = 2048;
      v72 = 0xCCCCCCCCCCCCCCCDLL * ((v65 - (_BYTE *)__p) >> 3);
      v62 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLMapsRouteHintData::getConnectedRouteSegments() const", "CoreLocation: %s\n", v62);
      if (v62 != (char *)buf)
        free(v62);
      v56 = v63;
    }
    if (v56 != (char *)&__p)
      sub_18F5F78BC(v56, (char *)__p, (uint64_t)v65, 0xCCCCCCCCCCCCCCCDLL * ((v65 - (_BYTE *)__p) >> 3));
    v52 = (char *)__p;
    v53 = v65 == __p;
  }
  v54 = !v53;
  if (v52)
  {
    v65 = v52;
    operator delete(v52);
  }
  return v54;
}

void sub_18F5F74C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

os_log_t sub_18F5F74F0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

_QWORD *sub_18F5F751C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x194002C40](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_18F5F7680(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x194002C4C](v13);
  return a1;
}

void sub_18F5F7624(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x194002C4C](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x18F5F7604);
}

void sub_18F5F766C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_18F5F7680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      sub_18F5F77BC(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_18F5F77A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18F5F77BC(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_18F5D5A40();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_18F5F7864()
{
  sub_18F5D5A54("vector");
}

void *sub_18F5F7878(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    sub_18F5F689C();
  return operator new(40 * a2);
}

char *sub_18F5F78BC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x666666666666666)
      sub_18F5F7864();
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v11;
    result = sub_18F5F79F4(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *sub_18F5F79F4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    sub_18F5F7864();
  result = (char *)sub_18F5F7878((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void sub_18F5F8360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location)
{
  id *v32;
  id *v33;

  objc_destroyWeak(v33);
  objc_destroyWeak(v32);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void *sub_18F5F83A0(uint64_t a1)
{
  void *result;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  result = objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    v5 = result;
    objc_msgSend_notifyHelperInvalidation(result, v2, v3, v4);
    result = (void *)objc_msgSend_fConnection(v5, v6, v7, v8);
    if (result)
    {
      if (qword_1EE1720A0 != -1)
        dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
      v9 = qword_1EE172098;
      if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v20 = "-[CLEEDRequestHelper initWithDelegate:andQueue:]_block_invoke";
        v21 = 2114;
        v22 = objc_msgSend_fConnection(v5, v10, v11, v12);
        _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_DEFAULT, "#EED2FWK,%{public}s, Connection[%{public}@] to EEDHelperService invalidated", buf, 0x16u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE1720A0 != -1)
          dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
        objc_msgSend_fConnection(v5, v15, v16, v17);
        v18 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "-[CLEEDRequestHelper initWithDelegate:andQueue:]_block_invoke", "CoreLocation: %s\n", v18);
        if (v18 != (char *)buf)
          free(v18);
      }
      return (void *)objc_msgSend_setFConnection_(v5, v13, 0, v14);
    }
  }
  return result;
}

uint64_t sub_18F5F85A8(uint64_t a1)
{
  id Weak;
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  uint8_t buf[4];
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  Weak = objc_loadWeak((id *)(a1 + 32));
  if (qword_1EE1720A0 != -1)
    dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
  v2 = qword_1EE172098;
  if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    v9 = "-[CLEEDRequestHelper initWithDelegate:andQueue:]_block_invoke_2";
    _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_ERROR, "#EED2FWK,%{public}s, Connection to EEDHelperService interrupted", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720A0 != -1)
      dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "-[CLEEDRequestHelper initWithDelegate:andQueue:]_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  return objc_msgSend_handleInterruption(Weak, v3, v4, v5);
}

uint64_t sub_18F5F876C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;

  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_msgSend_fConnection(v5, a2, a3, a4);
  v10 = objc_msgSend_processIdentifier(v6, v7, v8, v9);
  return objc_msgSend_handleRemoteProxyError_forProcessIdentifier_(v5, v11, (uint64_t)a2, v10);
}

uint64_t sub_18F5F8D54(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;

  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_msgSend_fConnection(v5, a2, a3, a4);
  v10 = objc_msgSend_processIdentifier(v6, v7, v8, v9);
  return objc_msgSend_handleRemoteProxyError_forProcessIdentifier_(v5, v11, (uint64_t)a2, v10);
}

uint64_t sub_18F5F98CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_msgSend_fConnection(v6, a2, a3, a4);
  v11 = objc_msgSend_processIdentifier(v7, v8, v9, v10);
  objc_msgSend_handleRemoteProxyError_forProcessIdentifier_(v6, v12, (uint64_t)a2, v11);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_18F5F9924(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  char *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = objc_msgSend_fClientQueue(*(void **)(a1 + 32), a2, a3, a4);
  dispatch_assert_queue_V2(v7);
  if (qword_1EE1720A0 != -1)
    dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
  v8 = qword_1EE172098;
  if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446722;
    v12 = "-[CLEEDRequestHelper fetchAllPendingRequestsWithCompletion:]_block_invoke_2";
    v13 = 2114;
    v14 = a2;
    v15 = 2114;
    v16 = a3;
    _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, CompletionBlock, Array:%{public}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720A0 != -1)
      dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
    v10 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLEEDRequestHelper fetchAllPendingRequestsWithCompletion:]_block_invoke", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_18F5F9DF0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_msgSend_fConnection(v6, a2, a3, a4);
  v11 = objc_msgSend_processIdentifier(v7, v8, v9, v10);
  objc_msgSend_handleRemoteProxyError_forProcessIdentifier_(v6, v12, (uint64_t)a2, v11);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_18F5F9E48(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  char *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = objc_msgSend_fClientQueue(*(void **)(a1 + 32), a2, a3, a4);
  dispatch_assert_queue_V2(v7);
  if (qword_1EE1720A0 != -1)
    dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
  v8 = qword_1EE172098;
  if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446723;
    v12 = "-[CLEEDRequestHelper fetchCurrentMediaUploadRequestWithCompletion:]_block_invoke_2";
    v13 = 2113;
    v14 = a2;
    v15 = 2114;
    v16 = a3;
    _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, CompletionBlock, request:%{private}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720A0 != -1)
      dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
    v10 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLEEDRequestHelper fetchCurrentMediaUploadRequestWithCompletion:]_block_invoke", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_18F5FA31C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_msgSend_fConnection(v6, a2, a3, a4);
  v11 = objc_msgSend_processIdentifier(v7, v8, v9, v10);
  objc_msgSend_handleRemoteProxyError_forProcessIdentifier_(v6, v12, (uint64_t)a2, v11);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_18F5FA374(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  char *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = objc_msgSend_fClientQueue(*(void **)(a1 + 32), a2, a3, a4);
  dispatch_assert_queue_V2(v7);
  if (qword_1EE1720A0 != -1)
    dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
  v8 = qword_1EE172098;
  if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446722;
    v12 = "-[CLEEDRequestHelper fetchCurrentStreamingRequestWithCompletion:]_block_invoke_2";
    v13 = 2114;
    v14 = a2;
    v15 = 2114;
    v16 = a3;
    _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, CompletionBlock, request:%{public}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720A0 != -1)
      dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
    v10 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLEEDRequestHelper fetchCurrentStreamingRequestWithCompletion:]_block_invoke", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_18F5FA840(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_msgSend_fConnection(v6, a2, a3, a4);
  v11 = objc_msgSend_processIdentifier(v7, v8, v9, v10);
  objc_msgSend_handleRemoteProxyError_forProcessIdentifier_(v6, v12, (uint64_t)a2, v11);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_18F5FA898(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  char *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = objc_msgSend_fClientQueue(*(void **)(a1 + 32), a2, a3, a4);
  dispatch_assert_queue_V2(v7);
  if (qword_1EE1720A0 != -1)
    dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
  v8 = qword_1EE172098;
  if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446722;
    v12 = "-[CLEEDRequestHelper fetchMitigationsWithCompletion:]_block_invoke_2";
    v13 = 2114;
    v14 = a2;
    v15 = 2114;
    v16 = a3;
    _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, CompletionBlock, mitigation:%{public}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720A0 != -1)
      dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
    v10 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLEEDRequestHelper fetchMitigationsWithCompletion:]_block_invoke", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_18F5FAD98(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_msgSend_fConnection(v6, a2, a3, a4);
  v11 = objc_msgSend_processIdentifier(v7, v8, v9, v10);
  objc_msgSend_handleRemoteProxyError_forProcessIdentifier_(v6, v12, (uint64_t)a2, v11);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_18F5FADEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  NSObject *v7;
  char *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend_fClientQueue(*(void **)(a1 + 32), a2, a3, a4);
  dispatch_assert_queue_V2(v6);
  if (qword_1EE1720A0 != -1)
    dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
  v7 = qword_1EE172098;
  if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    v11 = "-[CLEEDRequestHelper mediaUploadList:forRequestID:completion:]_block_invoke_2";
    v12 = 2114;
    v13 = a2;
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, CompletionBlock, error:%{public}@", buf, 0x16u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720A0 != -1)
      dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLEEDRequestHelper mediaUploadList:forRequestID:completion:]_block_invoke", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_18F5FB2AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_msgSend_fConnection(v6, a2, a3, a4);
  v11 = objc_msgSend_processIdentifier(v7, v8, v9, v10);
  objc_msgSend_handleRemoteProxyError_forProcessIdentifier_(v6, v12, (uint64_t)a2, v11);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_18F5FB300(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  NSObject *v7;
  char *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend_fClientQueue(*(void **)(a1 + 32), a2, a3, a4);
  dispatch_assert_queue_V2(v6);
  if (qword_1EE1720A0 != -1)
    dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
  v7 = qword_1EE172098;
  if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    v11 = "-[CLEEDRequestHelper streamingSessionEndedForRequestID:completion:]_block_invoke_2";
    v12 = 2114;
    v13 = a2;
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, CompletionBlock, error:%{public}@", buf, 0x16u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720A0 != -1)
      dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLEEDRequestHelper streamingSessionEndedForRequestID:completion:]_block_invoke", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_18F5FB7F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_msgSend_fConnection(v6, a2, a3, a4);
  v11 = objc_msgSend_processIdentifier(v7, v8, v9, v10);
  objc_msgSend_handleRemoteProxyError_forProcessIdentifier_(v6, v12, (uint64_t)a2, v11);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_18F5FB84C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  char *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = objc_msgSend_fClientQueue(*(void **)(a1 + 32), a2, a3, a4);
  dispatch_assert_queue_V2(v7);
  if (qword_1EE1720A0 != -1)
    dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
  v8 = qword_1EE172098;
  if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446722;
    v12 = "-[CLEEDRequestHelper handleResponse:forRequest:completion:]_block_invoke_2";
    v13 = 2114;
    v14 = a2;
    v15 = 2114;
    v16 = a3;
    _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_DEBUG, "#EED2FWK,%{public}s, CompletionBlock, updatedRequest:%{public}@, error:%{public}@", buf, 0x20u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720A0 != -1)
      dispatch_once(&qword_1EE1720A0, &unk_1E2990210);
    v10 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLEEDRequestHelper handleResponse:forRequest:completion:]_block_invoke", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

os_log_t sub_18F60CDA4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "Emergency");
  qword_1EE172098 = (uint64_t)result;
  return result;
}

os_log_t sub_18F60D248()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

void sub_18F60D580(uint64_t *a1, uint64_t *a2, double a3)
{
  NSObject *v6;
  uint64_t *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  uint8_t buf[4];
  uint64_t *v75;
  __int16 v76;
  double v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  double v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  double v145;
  __int16 v146;
  double v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  __int16 v152;
  uint64_t v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  int v157;
  __int16 v158;
  int v159;
  __int16 v160;
  uint64_t v161;
  __int16 v162;
  int v163;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  int v167;
  __int16 v168;
  int v169;
  __int16 v170;
  _QWORD *v171;
  __int16 v172;
  int v173;
  __int16 v174;
  int v175;
  __int16 v176;
  int v177;
  __int16 v178;
  uint64_t v179;
  __int16 v180;
  int v181;
  __int16 v182;
  int v183;
  __int16 v184;
  int v185;
  __int16 v186;
  int v187;
  __int16 v188;
  int v189;
  __int16 v190;
  int v191;
  __int16 v192;
  int v193;
  __int16 v194;
  int v195;
  __int16 v196;
  int v197;
  __int16 v198;
  int v199;
  __int16 v200;
  uint64_t v201;
  __int16 v202;
  uint64_t v203;
  __int16 v204;
  int v205;
  __int16 v206;
  int v207;
  __int16 v208;
  double v209;
  __int16 v210;
  uint64_t v211;
  uint64_t v212;

  v212 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990250);
  v6 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v7 = a2;
    if (*((char *)a2 + 23) < 0)
      v7 = (uint64_t *)*a2;
    v8 = *(double *)a1;
    v9 = a1[1];
    v10 = a1[2];
    v11 = a1[3];
    v12 = a1[7];
    v13 = a1[8];
    v15 = a1[9];
    v14 = a1[10];
    v16 = a1[11];
    v17 = *((double *)a1 + 12) * 3.6;
    v19 = a1[23];
    v18 = a1[24];
    v20 = a1[25];
    v21 = a1[26];
    v62 = a1[27];
    v23 = a1[19];
    v22 = a1[20];
    v24 = a1[21];
    v25 = a1[37];
    v58 = a1[36];
    v26 = a1[41];
    v27 = a1[42];
    v28 = a1[38];
    v29 = a1[39];
    v54 = a1[40];
    v55 = a1[46];
    v56 = a1[47];
    v57 = a1[48];
    v59 = a1[49];
    v60 = a1[4];
    v61 = a1[5];
    v30 = *((float *)a1 + 44);
    v31 = *((float *)a1 + 45);
    v63 = a1[29];
    v64 = a1[30];
    v65 = a1[31];
    v66 = a1[32];
    v73 = *((unsigned __int8 *)a1 + 264);
    v72 = *((unsigned __int8 *)a1 + 265);
    v71 = a1[34];
    v70 = *((_DWORD *)a1 + 70);
    v32 = a1[13];
    v69 = a1[14];
    v68 = *((_DWORD *)a1 + 30);
    v67 = *((_DWORD *)a1 + 31);
    v33 = a1 + 16;
    if (*((char *)a1 + 151) < 0)
      v33 = (_QWORD *)*v33;
    v75 = v7;
    v77 = v8;
    v79 = v9;
    v81 = v10;
    v83 = v11;
    v89 = v12;
    v91 = v13;
    v93 = v14;
    v95 = v15;
    v97 = v16;
    v99 = v32;
    v101 = v18;
    v105 = v19;
    v107 = v20;
    v109 = v21;
    v113 = v23;
    v34 = *((_DWORD *)a1 + 56);
    v115 = v22;
    v35 = *((_DWORD *)a1 + 86);
    v117 = v24;
    v36 = *((unsigned __int8 *)a1 + 228);
    v121 = v25;
    v37 = a1[44];
    v123 = v28;
    v38 = *((unsigned __int8 *)a1 + 229);
    v125 = v26;
    v39 = *((unsigned __int8 *)a1 + 350);
    v85 = 0;
    v40 = *((unsigned __int8 *)a1 + 351);
    v111 = v62;
    v41 = *((unsigned __int8 *)a1 + 360);
    v119 = v58;
    v42 = *((unsigned __int8 *)a1 + 349);
    v127 = v27;
    v43 = *((unsigned __int8 *)a1 + 361);
    v129 = v29;
    v44 = *((unsigned __int8 *)a1 + 362);
    v131 = v54;
    v45 = *((unsigned __int8 *)a1 + 348);
    v133 = v55;
    v46 = *((_DWORD *)a1 + 100);
    v135 = v56;
    v47 = *((_DWORD *)a1 + 101);
    v137 = v57;
    v48 = a1[51];
    v139 = v59;
    v49 = a1[6];
    v141 = v60;
    v50 = *((_DWORD *)a1 + 104);
    v143 = v61;
    v51 = *((_DWORD *)a1 + 105);
    v149 = v63;
    v52 = a1[53];
    *(_DWORD *)buf = 136463619;
    v151 = v64;
    v76 = 2050;
    v78 = 2050;
    v80 = 2050;
    v82 = 2050;
    v153 = v65;
    v84 = 1026;
    v86 = 1026;
    v87 = 0;
    v155 = v66;
    v88 = 2049;
    v90 = 2049;
    v92 = 2050;
    v94 = 2050;
    v96 = 2050;
    v98 = 2050;
    v100 = 2050;
    v102 = 2050;
    v103 = v17;
    v104 = 2050;
    v106 = 2050;
    v108 = 2050;
    v110 = 2050;
    v112 = 2049;
    v114 = 2049;
    v116 = 2050;
    v118 = 2049;
    v120 = 2049;
    v122 = 2050;
    v124 = 2049;
    v126 = 2049;
    v128 = 2049;
    v130 = 2049;
    v132 = 2049;
    v134 = 2049;
    v136 = 2049;
    v138 = 2049;
    v140 = 2049;
    v142 = 2049;
    v144 = 2050;
    v145 = v30;
    v146 = 2050;
    v147 = v31;
    v148 = 2050;
    v150 = 2050;
    v152 = 2050;
    v154 = 2050;
    v156 = 1026;
    v157 = v73;
    v158 = 1026;
    v159 = v72;
    v160 = 2050;
    v161 = v71;
    v162 = 1026;
    v163 = v70;
    v164 = 2049;
    v165 = v69;
    v166 = 1026;
    v167 = v68;
    v168 = 1026;
    v169 = v67;
    v170 = 2081;
    v171 = v33;
    v172 = 1026;
    v173 = v34;
    v174 = 1026;
    v175 = v35;
    v176 = 1026;
    v177 = v36;
    v178 = 2050;
    v179 = v37;
    v180 = 1026;
    v181 = v38;
    v182 = 1026;
    v183 = v39;
    v184 = 1026;
    v185 = v40;
    v186 = 1026;
    v187 = v41;
    v188 = 1026;
    v189 = v42;
    v190 = 1026;
    v191 = v43;
    v192 = 1026;
    v193 = v44;
    v194 = 1026;
    v195 = v45;
    v196 = 1026;
    v197 = v46;
    v198 = 1026;
    v199 = v47;
    v200 = 2050;
    v201 = v48;
    v202 = 2050;
    v203 = v49;
    v204 = 1026;
    v205 = v50;
    v206 = 1026;
    v207 = v51;
    v208 = 2050;
    v209 = a3;
    v210 = 2050;
    v211 = v52;
    _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEBUG, "CLMM,%{public}s,trip,%{public}lld,T,%{public}.1lf,machT,%{public}.2lf,contT,%{public}.2lf,gpsTMs,%{public}d,%{public}d,LL,%{private}.7lf,%{private}.7lf,hunc,%{public}.1lf,alt,%{public}.1lf,vunc,%{public}.1lf,crse,%{public}.1lf,crseUnc,%{public}.1lf,spdKph,%{public}.3lf,spdUncMps,%{public}.1lf,a95,%{public}.1lf,b95,%{public}.1lf,theta,%{public}.1lf,snapLL,%{private}.7lf,%{private}.7lf,snapCrse,%{public}.1lf,fSnapLL,%{private}.7lf,%{private}.7lf,fSnapCrse,%{public}.1lf,pSnapLL,%{private}.7lf,%{private}.7lf,rwSnapLL,%{private}.7lf,%{private}.7lf,rwSnapOfstLL,%{private}.7lf,%{private}.7lf,rwFSnapOfstLL,%{private}.7lf,%{private}.7lf,rwLL,%{private}.7lf,%{private}.7lf,score,%{public}.1lf,ratio,%{public}.1lf,varFac,%{public}.7g,deltaAz,%{public}.3lf,alngTrk,%{public}.3lf,acrsTrk,%{public}.3lf,usable,%{public}d,ambiguous,%{public}d,proj,%{public}.3lf,type,%{public}d,rseg,%{private}lld,frc,%{public}d,fow,%{public}d,road,\"%{private}s\",activity,%{public}d,actConf,%{public}d,static,%{public}d,staticSetAt,%{public}.1lf,mount,%{public}d,fitness,%{public}d,shifted,%{public}d,propagated,%{public}d,rail,%{public}d,bridge,%{public}d,tunnel,%{public}d,favGPS,%{public}d,gnssCont,%{public}d,locationType,%{public}d,lifespan,%{public}.1lf,rawCourse,%{public}.1lf,sigEnv,%{public}d,sigEnvFid,%{public}d,latency,%{public}.1lf,rw,%{public}.2lf", buf, 0x25Cu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990250);
    v53 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLMapCrumb::debugOutput(const std::string, double)", "CoreLocation: %s\n", v53);
    if (v53 != (char *)buf)
      free(v53);
  }
}

std::string *sub_18F60DF24@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string v9;
  void *__p[2];
  int64_t v11;
  char __str[256];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  snprintf(__str, 0x100uLL, "trip,%lld", *(_QWORD *)a1);
  MEMORY[0x194002BEC](a2, __str);
  snprintf(__str, 0x100uLL, ",T,%.1lf", *(double *)(a1 + 8));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",machT,%.2lf", *(double *)(a1 + 16));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",contT,%.2lf", *(double *)(a1 + 24));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",gpsTMs,%d,%d", 0, 0);
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",LL,%.7lf,%.7lf", *(double *)(a1 + 56), *(double *)(a1 + 64));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",hunc,%.1lf", *(double *)(a1 + 80));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",alt,%.1lf", *(double *)(a1 + 72));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",vunc,%.1lf", *(double *)(a1 + 88));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",crse,%.1lf", *(double *)(a1 + 104));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",crseUnc,%.1lf", *(double *)(a1 + 192));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",spdKph,%.3lf", *(double *)(a1 + 96) * 3.6);
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",spdUncMps,%.1lf", *(double *)(a1 + 184));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",a95,%.1lf", *(double *)(a1 + 200));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",b95,%.1lf", *(double *)(a1 + 208));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",theta,%.1lf", *(double *)(a1 + 216));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",snapLL,%.7lf,%.7lf", *(double *)(a1 + 152), *(double *)(a1 + 160));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",snapCrse,%.1lf", *(double *)(a1 + 168));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",fSnapLL,%.7lf,%.7lf", *(double *)(a1 + 288), *(double *)(a1 + 296));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",fSnapCrse,%.1lf", *(double *)(a1 + 304));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",pSnapLL,%.7lf,%.7lf", *(double *)(a1 + 328), *(double *)(a1 + 336));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rwSnapLL,%.7lf,%.7lf", *(double *)(a1 + 312), *(double *)(a1 + 320));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rwSnapOfstLL,%.7lf,%.7lf", *(double *)(a1 + 368), *(double *)(a1 + 376));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rwFSnapOfstLL,%.7lf,%.7lf", *(double *)(a1 + 384), *(double *)(a1 + 392));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rwLL,%.7lf,%.7lf", *(double *)(a1 + 32), *(double *)(a1 + 40));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",score,%.1lf", *(float *)(a1 + 176));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",ratio,%.1lf", *(float *)(a1 + 180));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",varFac,%.7g", *(double *)(a1 + 232));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",deltaAz,%.3lf", *(double *)(a1 + 240));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",alngTrk,%.3lf", *(double *)(a1 + 248));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",acrsTrk,%.3lf", *(double *)(a1 + 256));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",usable,%d", *(unsigned __int8 *)(a1 + 264));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",ambiguous,%d", *(unsigned __int8 *)(a1 + 265));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",proj,%.3lf", *(double *)(a1 + 272));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",type,%d", *(_DWORD *)(a1 + 280));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rseg,%lld", *(_QWORD *)(a1 + 112));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",frc,%d", *(_DWORD *)(a1 + 120));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",fow,%d", *(_DWORD *)(a1 + 124));
  std::string::append(a2, __str);
  std::operator+<char>();
  v4 = std::string::append(&v9, "\"");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v11 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v11 >= 0)
    v7 = HIBYTE(v11);
  else
    v7 = (std::string::size_type)__p[1];
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  snprintf(__str, 0x100uLL, ",activity,%d", *(_DWORD *)(a1 + 224));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",actConf,%d", *(_DWORD *)(a1 + 344));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",static,%d", *(unsigned __int8 *)(a1 + 228));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",staticSetAt,%.1lf", *(double *)(a1 + 352));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",mount,%d", *(unsigned __int8 *)(a1 + 229));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",fitness,%d", *(unsigned __int8 *)(a1 + 350));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",shifted,%d", *(unsigned __int8 *)(a1 + 351));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",propagated,%d", *(unsigned __int8 *)(a1 + 360));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rail,%d", *(unsigned __int8 *)(a1 + 349));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",bridge,%d", *(unsigned __int8 *)(a1 + 361));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",tunnel,%d", *(unsigned __int8 *)(a1 + 362));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",favGPS,%d", *(unsigned __int8 *)(a1 + 348));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",gnssCont,%d", *(_DWORD *)(a1 + 400));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",locationType,%d", *(_DWORD *)(a1 + 404));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",lifespan,%.1lf", *(double *)(a1 + 408));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rawCourse,%.1lf", *(double *)(a1 + 48));
  std::string::append(a2, __str);
  snprintf(__str, 0x100uLL, ",rw,%.2lf", *(double *)(a1 + 424));
  return std::string::append(a2, __str);
}

void sub_18F60E8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (*(char *)(v23 + 23) < 0)
    operator delete(*(void **)v23);
  _Unwind_Resume(exception_object);
}

BOOL sub_18F60E900(uint64_t a1, double *a2, uint64_t *a3, double *a4, double *a5, double a6, double a7)
{
  double v14;
  double v15;
  NSObject *v16;
  uint64_t v17;
  _BOOL8 v18;
  NSObject *v20;
  uint64_t v21;
  uint64_t *v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  char *v28;
  uint64_t v29;
  char *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t *v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  uint8_t buf[4];
  uint64_t v48;
  __int16 v49;
  uint64_t *v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v14 = *(double *)(a1 + 56);
  v15 = *(double *)(a1 + 64);
  if (fabs(v14) < 0.00003 && fabs(v15) < 0.00003
    || fabs(*(double *)(a1 + 32)) < 0.00003 && fabs(*(double *)(a1 + 40)) < 0.00003)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990250);
    v16 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v48 = v17;
      _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_ERROR, "CLMM, %{public}.1lf, null island", buf, 0xCu);
    }
    v18 = 0;
    if (!sub_18F5C4AE0(115, 0))
      return v18;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990250);
    v29 = *(_QWORD *)(a1 + 8);
    v35 = 134349056;
    v36 = v29;
    v30 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLMapCrumb::computeSnapCoordinatesFromRawGPSCoordinates(CLDistanceCalc &, const std::string, double, double, double &, double &) const", "CoreLocation: %s\n", v30);
    if (v30 != (char *)buf)
      free(v30);
    return 0;
  }
  v33 = 0.0;
  v34 = 0.0;
  v32 = 0.0;
  if (!sub_18F5BD37C(a2, &v33, &v34, &v32, v14, v15, *(double *)(a1 + 72), a6, a7, *(double *)(a1 + 72)))
    return 0;
  v18 = sub_18F71AAC4(a2, a4, a5, &v31, *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 72), v33, v34, v32);
  if (v18)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990250);
    v20 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v21 = *(_QWORD *)(a1 + 8);
      v22 = a3;
      if (*((char *)a3 + 23) < 0)
        v22 = (uint64_t *)*a3;
      v23 = *a4;
      v24 = *a5;
      *(_DWORD *)buf = 134350339;
      v48 = v21;
      v49 = 2080;
      v50 = v22;
      v51 = 2049;
      v52 = a6;
      v53 = 2049;
      v54 = a7;
      v55 = 2049;
      v56 = v23;
      v57 = 2049;
      v58 = v24;
      _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_DEBUG, "CLMM, %{public}.1lf, New Snap Coordinates,%s,inSnapLat,%{private}.8lf,inSnapLon,%{private}.8lf,outSnapLat,%{private}.8lf,outSnapLon,%{private}.8lf", buf, 0x3Eu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990250);
      v25 = *(_QWORD *)(a1 + 8);
      if (*((char *)a3 + 23) < 0)
        a3 = (uint64_t *)*a3;
      v26 = *a4;
      v27 = *a5;
      v35 = 134350339;
      v36 = v25;
      v37 = 2080;
      v38 = a3;
      v39 = 2049;
      v40 = a6;
      v41 = 2049;
      v42 = a7;
      v43 = 2049;
      v44 = v26;
      v45 = 2049;
      v46 = v27;
      v28 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLMapCrumb::computeSnapCoordinatesFromRawGPSCoordinates(CLDistanceCalc &, const std::string, double, double, double &, double &) const", "CoreLocation: %s\n", v28);
      if (v28 != (char *)buf)
        free(v28);
    }
  }
  return v18;
}

os_log_t sub_18F60ED6C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

unint64_t sub_18F60ED98(void *a1, char *a2, unint64_t *a3, uint64_t a4, double a5, double a6)
{
  unint64_t v11;
  unint64_t i;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  unint64_t j;
  unint64_t result;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;

  v11 = *(_QWORD *)a2;
  for (i = objc_msgSend_count(a1, a2, (uint64_t)a3, a4); v11 < i; i = objc_msgSend_count(a1, v13, v14, v15))
  {
    v16 = (void *)objc_msgSend_objectAtIndexedSubscript_(a1, v13, v11, v15);
    v20 = (void *)objc_msgSend_cfAbsTimestamp(v16, v17, v18, v19);
    objc_msgSend_timeIntervalSinceReferenceDate(v20, v21, v22, v23);
    if (v24 >= a5)
    {
      *(_QWORD *)a2 = v11;
      break;
    }
    ++v11;
  }
  for (j = *(_QWORD *)a2; ; ++j)
  {
    result = objc_msgSend_count(a1, v13, v14, v15);
    if (j >= result)
      break;
    v29 = (void *)objc_msgSend_objectAtIndexedSubscript_(a1, v27, j, v28);
    v33 = (void *)objc_msgSend_cfAbsTimestamp(v29, v30, v31, v32);
    result = objc_msgSend_timeIntervalSinceReferenceDate(v33, v34, v35, v36);
    if (v37 >= a6)
    {
      *a3 = j;
      return result;
    }
  }
  return result;
}

unint64_t sub_18F60EE4C(void *a1, char *a2, unint64_t *a3, uint64_t a4, double a5, double a6)
{
  unint64_t v11;
  unint64_t i;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  unint64_t j;
  unint64_t result;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;

  v11 = *(_QWORD *)a2;
  for (i = objc_msgSend_count(a1, a2, (uint64_t)a3, a4); v11 < i; i = objc_msgSend_count(a1, v13, v14, v15))
  {
    v16 = (void *)objc_msgSend_objectAtIndexedSubscript_(a1, v13, v11, v15);
    v20 = (void *)objc_msgSend_timestamp(v16, v17, v18, v19);
    objc_msgSend_timeIntervalSinceReferenceDate(v20, v21, v22, v23);
    if (v24 >= a5)
    {
      *(_QWORD *)a2 = v11;
      break;
    }
    ++v11;
  }
  for (j = *(_QWORD *)a2; ; ++j)
  {
    result = objc_msgSend_count(a1, v13, v14, v15);
    if (j >= result)
      break;
    v29 = (void *)objc_msgSend_objectAtIndexedSubscript_(a1, v27, j, v28);
    v33 = (void *)objc_msgSend_timestamp(v29, v30, v31, v32);
    result = objc_msgSend_timeIntervalSinceReferenceDate(v33, v34, v35, v36);
    if (v37 >= a6)
    {
      *a3 = j;
      return result;
    }
  }
  return result;
}

uint64_t sub_18F60EF00(uint64_t a1, void *a2)
{
  id v4;
  const char *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t result;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v6 = (id)objc_msgSend_initWithArray_copyItems_(v4, v5, a1, 1);
  objc_msgSend_setArray_(a2, v7, (uint64_t)v6, v8);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v9, (uint64_t)&v16, (uint64_t)v20, 16);
  if (result)
  {
    v13 = result;
    v14 = *(_QWORD *)v17;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v17 != v14)
          objc_enumerationMutation(a2);
        objc_msgSend_setLocationReconstructionType_(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v15++), v11, 1, v12);
      }
      while (v13 != v15);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v11, (uint64_t)&v16, (uint64_t)v20, 16);
      v13 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_18F60F010(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  char *v8;
  NSObject *v9;
  char *v10;
  uint8_t buf[4];
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 2)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2991648);
    v7 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a2;
      v13 = 2048;
      v14 = 2;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 77,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2991648);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "T &CMMatrix<double, 2>::operator()(size_t, size_t) [T = double, M = 2, N = 2]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  if (a3 >= 2)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2991648);
    v9 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a3;
      v13 = 2048;
      v14 = 2;
      _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 78,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2991648);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "T &CMMatrix<double, 2>::operator()(size_t, size_t) [T = double, M = 2, N = 2]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return a1 + 8 * (a2 + 2 * a3);
}

void sub_18F60F368(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  uint64_t i;
  float v17;
  float v18;
  float v19;
  float v20;
  int v21;

  v2 = *a1;
  v3 = a1[1];
  if (sqrtf((float)(v2 * v2) + (float)(v3 * v3)) != 0.0)
  {
    v4 = *a2;
    v5 = a2[1];
    if (sqrtf((float)(v4 * v4) + (float)(v5 * v5)) != 0.0)
    {
      v6 = 0;
      v19 = *a1;
      v20 = v3;
      v7 = 0.0;
      v21 = 0;
      do
      {
        v7 = v7 + (float)(*(float *)((char *)&v19 + v6) * *(float *)((char *)&v19 + v6));
        v6 += 4;
      }
      while (v6 != 12);
      v8 = 0.0;
      if (sqrtf(v7) <= 0.00000011921)
      {
        v12 = 0.0;
      }
      else
      {
        v9 = 0;
        v10 = 0.0;
        do
        {
          v10 = v10 + (float)(*(float *)((char *)&v19 + v9) * *(float *)((char *)&v19 + v9));
          v9 += 4;
        }
        while (v9 != 12);
        v11 = sqrtf(v10);
        v2 = v2 / v11;
        v3 = v3 / v11;
        v12 = 0.0 / v11;
      }
      v13 = 0;
      v19 = v4;
      v20 = v5;
      v21 = 0;
      do
      {
        v8 = v8 + (float)(*(float *)((char *)&v19 + v13) * *(float *)((char *)&v19 + v13));
        v13 += 4;
      }
      while (v13 != 12);
      v14 = sqrtf(v8);
      v15 = 0.0;
      if (v14 > 0.00000011921)
      {
        for (i = 0; i != 12; i += 4)
          v15 = v15 + (float)(*(float *)((char *)&v19 + i) * *(float *)((char *)&v19 + i));
        v17 = sqrtf(v15);
        v4 = v4 / v17;
        v5 = v5 / v17;
        v15 = 0.0 / v17;
      }
      v18 = (float)((float)(v12 * v15) + (float)(v3 * v5)) + (float)(v2 * v4);
      if (v18 > -1.0 && v18 < 1.0)
        acos(v18);
    }
  }
}

BOOL sub_18F60F50C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  double v10;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  double v54;
  double v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  uint8_t buf[4];
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v58 = 0;
  v59 = 0;
  v57 = xmmword_18F771F40;
  v60 = 0x3FF0000000000000;
  v55 = 0.0;
  v56 = 0;
  objc_msgSend_latitude(a2, (const char *)a2, a3, a4);
  v11 = v10;
  objc_msgSend_longitude(a2, v12, v13, v14);
  v19 = sub_18F5BD37C((double *)&v57, (double *)&v56, &v55, &v54, a5, a6, 0.0, v11, v15, 0.0);
  if (v19)
  {
    v20 = (void *)objc_msgSend_timestamp(a2, v16, v17, v18);
    objc_msgSend_timeIntervalSinceReferenceDate(v20, v21, v22, v23);
    v24 = v56;
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v24;
    *(double *)(a1 + 16) = -v55;
    objc_msgSend_horizontalAccuracy(a2, v26, v27, v28);
    *(_QWORD *)(a1 + 24) = v29;
    *(_DWORD *)(a1 + 32) = objc_msgSend_signalEnvironmentType(a2, v30, v31, v32);
  }
  else
  {
    if (qword_1EE1720F8 != -1)
      dispatch_once(&qword_1EE1720F8, &unk_1E2990270);
    v33 = qword_1EE172100;
    if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_latitude(a2, v34, v35, v36);
      v38 = v37;
      objc_msgSend_longitude(a2, v39, v40, v41);
      *(_DWORD *)buf = 134218752;
      v70 = v38;
      v71 = 2048;
      v72 = v42;
      v73 = 2048;
      v74 = a5;
      v75 = 2048;
      v76 = a6;
      _os_log_impl(&dword_18F5B3000, v33, OS_LOG_TYPE_ERROR, "[CLTrajectorySmootherUtilities] Conversion from lat/lon to NWU failed. location sample, latitude, %.1f, longitude, %.1f, selected origin, latitude, %.1f, longitude, %.1f.", buf, 0x2Au);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE1720F8 != -1)
        dispatch_once(&qword_1EE1720F8, &unk_1E2990270);
      objc_msgSend_latitude(a2, v44, v45, v46);
      v48 = v47;
      objc_msgSend_longitude(a2, v49, v50, v51);
      v61 = 134218752;
      v62 = v48;
      v63 = 2048;
      v64 = v52;
      v65 = 2048;
      v66 = a5;
      v67 = 2048;
      v68 = a6;
      v53 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLPTSUtility::LocationInNWU::convertLatitudeLongitudeToNWU(CLTripSegmentLocation * _Nonnull, const double, const double)", "CoreLocation: %s\n", v53);
      if (v53 != (char *)buf)
        free(v53);
    }
  }
  return v19;
}

void *sub_18F60F7E4(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  CLTripSegmentLocation *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  double v22;
  double v23;
  double v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v26 = 0;
  v27 = 0;
  v25 = xmmword_18F771F40;
  v28 = 0x3FF0000000000000;
  v23 = 0.0;
  v24 = 0.0;
  sub_18F71AAC4((double *)&v25, &v24, &v23, &v22, a6, a7, 0.0, a4, -a5, 0.0);
  v10 = [CLTripSegmentLocation alloc];
  v14 = objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(MEMORY[0x1E0C99D68], v11, v12, v13, a2);
  v16 = (void *)objc_msgSend_initWithTime_latitude_longitude_horizontalAccuracy_course_courseAccuracy_speed_speedAccuracy_altitude_altitudeAccuracy_locType_(v10, v15, v14, 1, v24, v23, a3, -1.0, -1.0, -1.0, -1.0, -1.0, 0xBFF0000000000000);
  objc_msgSend_setSignalEnvironmentType_(v16, v17, a1, v18);
  objc_msgSend_setLocationReconstructionType_(v16, v19, 2, v20);
  return v16;
}

void sub_18F60F8DC(void *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void **a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  double v67;
  double v68;
  uint64_t *v69;
  uint64_t *v70;
  int64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  double v86;
  _BOOL4 v87;
  uint64_t *v88;
  _QWORD *v89;
  uint64_t v90;
  double v91;
  _BOOL4 v92;
  uint64_t *v93;
  int64_t v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  double v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  double v110;
  _BOOL4 v111;
  uint64_t v112;
  double v113;
  double v114;
  int64_t v116;
  unint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t *v120;
  uint64_t v121;
  int64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  _BOOL4 v138;
  double v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  _BOOL4 v144;
  double v145;
  void *v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  double v157;
  _BOOL4 v158;
  char *v159;
  void *v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  BOOL v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  char *v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  void *v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  char *v182;
  char *v183;
  char *v184;
  size_t v185;
  void **v186;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  void *__p;
  char *v192;
  char *v193;
  void *v194[2];
  char *v195;

  v194[0] = 0;
  v194[1] = 0;
  v195 = 0;
  v11 = objc_msgSend_count(a1, a2, a3, a4);
  if (v11 <= 1)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  v14 = v11;
  v15 = 0;
  __p = 0;
  v192 = 0;
  v193 = 0;
  v188 = 0;
  v189 = 0;
  v190 = 0;
  do
  {
    v16 = (void *)objc_msgSend_objectAtIndex_(a1, (const char *)v12, v15, v13);
    if (objc_msgSend_locType(v16, v17, v18, v19) == 1)
    {
      v21 = v192;
      if (v192 >= v193)
      {
        v25 = (char *)__p;
        v26 = (v192 - (_BYTE *)__p) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          goto LABEL_184;
        v28 = v193 - (_BYTE *)__p;
        if ((v193 - (_BYTE *)__p) >> 2 > v27)
          v27 = v28 >> 2;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v27;
        if (v12)
        {
          v29 = (char *)sub_18F610B1C((uint64_t)&v193, v12);
          v25 = (char *)__p;
          v21 = v192;
        }
        else
        {
          v29 = 0;
        }
        v35 = (uint64_t *)&v29[8 * v26];
        *v35 = v15;
        v22 = (char *)(v35 + 1);
        while (v21 != v25)
        {
          v36 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v35 = v36;
        }
        __p = v35;
        v192 = v22;
        v193 = &v29[8 * v12];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_QWORD *)v192 = v15;
        v22 = v21 + 8;
      }
      v192 = v22;
    }
    else if (objc_msgSend_locType(v16, (const char *)v12, v20, v13) == 4)
    {
      v23 = v189;
      if (v189 >= v190)
      {
        v30 = v188;
        v31 = v189 - v188;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61)
LABEL_184:
          sub_18F5F7864();
        v33 = (char *)v190 - (char *)v188;
        if (((char *)v190 - (char *)v188) >> 2 > v32)
          v32 = v33 >> 2;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v32;
        if (v12)
        {
          v34 = (char *)sub_18F610B1C((uint64_t)&v190, v12);
          v30 = v188;
          v23 = v189;
        }
        else
        {
          v34 = 0;
        }
        v37 = (uint64_t *)&v34[8 * v31];
        *v37 = v15;
        v24 = v37 + 1;
        while (v23 != v30)
        {
          v38 = *--v23;
          *--v37 = v38;
        }
        v188 = v37;
        v190 = (uint64_t *)&v34[8 * v12];
        if (v30)
          operator delete(v30);
      }
      else
      {
        *v189 = v15;
        v24 = v189 + 1;
      }
      v189 = v24;
    }
    ++v15;
  }
  while (v15 != v14);
  v39 = v192;
  if ((unint64_t)(v192 - (_BYTE *)__p) < 0x10)
  {
    *(_OWORD *)a5 = *(_OWORD *)v194;
LABEL_176:
    a5[2] = v195;
    a5 = v194;
    goto LABEL_177;
  }
  v40 = (v192 - (_BYTE *)__p) >> 3;
  v41 = v40 - 1;
  if (v40 != 1)
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v186 = (void **)&v195;
    while (1)
    {
      v45 = *((_QWORD *)__p + v42++);
      v46 = *((_QWORD *)__p + v42);
      v47 = (void *)objc_msgSend_objectAtIndex_(a1, (const char *)v12, v45, v13, v186);
      v50 = (void *)objc_msgSend_objectAtIndex_(a1, v48, v46, v49);
      objc_msgSend_horizontalAccuracy(v47, v51, v52, v53);
      ++v43;
      if (v55 >= 0.0)
      {
        objc_msgSend_horizontalAccuracy(v47, (const char *)v12, v54, v13);
        if (v56 <= 5.5)
          break;
      }
      v57 = (void *)objc_msgSend_timestamp(v50, (const char *)v12, v54, v13);
      v61 = objc_msgSend_timestamp(v47, v58, v59, v60);
      objc_msgSend_timeIntervalSinceDate_(v57, v62, v61, v63);
      if (fabs(v65) <= 20.0)
      {
        if (v43 < (unint64_t)a2)
          goto LABEL_132;
        if (v194[0] == v194[1])
        {
          v87 = 1;
        }
        else
        {
          v75 = (void *)objc_msgSend_objectAtIndex_(a1, (const char *)v12, *((_QWORD *)v194[1] - 1), v13);
          v79 = (void *)objc_msgSend_timestamp(v47, v76, v77, v78);
          v83 = objc_msgSend_timestamp(v75, v80, v81, v82);
          objc_msgSend_timeIntervalSinceDate_(v79, v84, v83, v85);
          v87 = fabs(v86) > 2.5;
        }
        objc_msgSend_horizontalAccuracy(v47, (const char *)v12, v64, v13);
        if (v113 < 0.0)
          goto LABEL_132;
        objc_msgSend_horizontalAccuracy(v47, (const char *)v12, v112, v13);
        if (v114 > a6 || !v87)
          goto LABEL_132;
        v88 = (uint64_t *)v194[1];
        if (v194[1] >= v195)
        {
          v93 = (uint64_t *)v194[0];
          v116 = ((char *)v194[1] - (char *)v194[0]) >> 3;
          v117 = v116 + 1;
          if ((unint64_t)(v116 + 1) >> 61)
            sub_18F5F7864();
          v118 = v195 - (char *)v194[0];
          if ((v195 - (char *)v194[0]) >> 2 > v117)
            v117 = v118 >> 2;
          if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v117;
          if (v12)
          {
            v97 = (char *)sub_18F610B1C((uint64_t)v186, v12);
            v93 = (uint64_t *)v194[0];
            v88 = (uint64_t *)v194[1];
          }
          else
          {
            v97 = 0;
          }
          v120 = (uint64_t *)&v97[8 * v116];
          *v120 = v45;
          v119 = v120 + 1;
          while (v88 != v93)
          {
            v128 = *--v88;
            *--v120 = v128;
          }
LABEL_128:
          v194[0] = v120;
          v194[1] = v119;
          v195 = &v97[8 * v12];
          if (v93)
            operator delete(v93);
          v44 = 1;
          goto LABEL_131;
        }
        goto LABEL_64;
      }
      if ((v44 & 1) != 0)
      {
        objc_msgSend_horizontalAccuracy(v47, (const char *)v12, v64, v13);
        if (v67 >= 0.0)
        {
          objc_msgSend_horizontalAccuracy(v47, (const char *)v12, v66, v13);
          if (v68 <= a6)
          {
            v69 = (uint64_t *)v194[1];
            if (v194[1] < v195)
              goto LABEL_98;
            v70 = (uint64_t *)v194[0];
            v71 = ((char *)v194[1] - (char *)v194[0]) >> 3;
            v72 = v71 + 1;
            if ((unint64_t)(v71 + 1) >> 61)
              sub_18F5F7864();
            v73 = v195 - (char *)v194[0];
            if ((v195 - (char *)v194[0]) >> 2 > v72)
              v72 = v73 >> 2;
            if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
              v12 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v12 = v72;
            if (v12)
            {
              v74 = (char *)sub_18F610B1C((uint64_t)v186, v12);
              v70 = (uint64_t *)v194[0];
              v69 = (uint64_t *)v194[1];
            }
            else
            {
              v74 = 0;
            }
            v125 = (uint64_t *)&v74[8 * v71];
            *v125 = v45;
            v119 = v125 + 1;
            while (v69 != v70)
            {
              v127 = *--v69;
              *--v125 = v127;
            }
            goto LABEL_121;
          }
        }
      }
      else
      {
        objc_msgSend_horizontalAccuracy(v47, (const char *)v12, v64, v13);
        if (v91 >= 0.0)
        {
          objc_msgSend_horizontalAccuracy(v47, (const char *)v12, v90, v13);
          v92 = v98 <= a7;
        }
        else
        {
          v92 = 0;
        }
        if (v194[0] == v194[1])
        {
          v111 = 1;
        }
        else
        {
          v99 = (void *)objc_msgSend_objectAtIndex_(a1, (const char *)v12, *((_QWORD *)v194[1] - 1), v13);
          v103 = (void *)objc_msgSend_timestamp(v47, v100, v101, v102);
          v107 = objc_msgSend_timestamp(v99, v104, v105, v106);
          objc_msgSend_timeIntervalSinceDate_(v103, v108, v107, v109);
          v111 = v110 > 60.0;
        }
        if (v43 >= (unint64_t)a2)
          v111 = 1;
        if (v92 && v111)
        {
          v69 = (uint64_t *)v194[1];
          if (v194[1] < v195)
          {
LABEL_98:
            v44 = 0;
            v43 = 0;
            *v69 = v45;
            v89 = v69 + 1;
LABEL_99:
            v119 = v89;
LABEL_131:
            v194[1] = v119;
            goto LABEL_132;
          }
          v70 = (uint64_t *)v194[0];
          v122 = ((char *)v194[1] - (char *)v194[0]) >> 3;
          v123 = v122 + 1;
          if ((unint64_t)(v122 + 1) >> 61)
            sub_18F5F7864();
          v124 = v195 - (char *)v194[0];
          if ((v195 - (char *)v194[0]) >> 2 > v123)
            v123 = v124 >> 2;
          if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v123;
          if (v12)
          {
            v74 = (char *)sub_18F610B1C((uint64_t)v186, v12);
            v70 = (uint64_t *)v194[0];
            v69 = (uint64_t *)v194[1];
          }
          else
          {
            v74 = 0;
          }
          v125 = (uint64_t *)&v74[8 * v122];
          *v125 = v45;
          v119 = v125 + 1;
          while (v69 != v70)
          {
            v126 = *--v69;
            *--v125 = v126;
          }
LABEL_121:
          v194[0] = v125;
          v194[1] = v119;
          v195 = &v74[8 * v12];
          if (v70)
            operator delete(v70);
          v44 = 0;
          v43 = 0;
          goto LABEL_131;
        }
      }
      v44 = 0;
      v43 = 0;
LABEL_132:
      if (v42 == v41)
      {
        v39 = v192;
        goto LABEL_135;
      }
    }
    v88 = (uint64_t *)v194[1];
    if (v194[1] >= v195)
    {
      v93 = (uint64_t *)v194[0];
      v94 = ((char *)v194[1] - (char *)v194[0]) >> 3;
      v95 = v94 + 1;
      if ((unint64_t)(v94 + 1) >> 61)
        sub_18F5F7864();
      v96 = v195 - (char *)v194[0];
      if ((v195 - (char *)v194[0]) >> 2 > v95)
        v95 = v96 >> 2;
      if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v95;
      if (v12)
      {
        v97 = (char *)sub_18F610B1C((uint64_t)v186, v12);
        v93 = (uint64_t *)v194[0];
        v88 = (uint64_t *)v194[1];
      }
      else
      {
        v97 = 0;
      }
      v120 = (uint64_t *)&v97[8 * v94];
      *v120 = v45;
      v119 = v120 + 1;
      while (v88 != v93)
      {
        v121 = *--v88;
        *--v120 = v121;
      }
      goto LABEL_128;
    }
LABEL_64:
    *v88 = v45;
    v89 = v88 + 1;
    v44 = 1;
    goto LABEL_99;
  }
  v43 = 0;
LABEL_135:
  v129 = *((_QWORD *)v39 - 1);
  v130 = (void *)objc_msgSend_objectAtIndex_(a1, (const char *)v12, v129, v13);
  objc_msgSend_horizontalAccuracy(v130, v131, v132, v133);
  if (v137 >= 0.0)
  {
    objc_msgSend_horizontalAccuracy(v130, v134, v135, v136);
    v138 = v139 <= a7;
  }
  else
  {
    v138 = 0;
  }
  objc_msgSend_horizontalAccuracy(v130, v134, v135, v136);
  if (v143 >= 0.0)
  {
    objc_msgSend_horizontalAccuracy(v130, v140, v141, v142);
    v144 = v145 <= 5.5;
  }
  else
  {
    v144 = 0;
  }
  if (v194[0] == v194[1])
  {
    v158 = 1;
    if (v144)
      goto LABEL_143;
LABEL_145:
    v159 = (char *)v194[1];
    if (!v138 || v43 < (unint64_t)a2 || !v158)
      goto LABEL_164;
    goto LABEL_148;
  }
  v146 = (void *)objc_msgSend_objectAtIndex_(a1, v140, *((_QWORD *)v194[1] - 1), v142);
  v150 = (void *)objc_msgSend_timestamp(v130, v147, v148, v149);
  v154 = objc_msgSend_timestamp(v146, v151, v152, v153);
  objc_msgSend_timeIntervalSinceDate_(v150, v155, v154, v156);
  v158 = fabs(v157) > 2.5;
  if (!v144)
    goto LABEL_145;
LABEL_143:
  v159 = (char *)v194[1];
LABEL_148:
  if (v159 >= v195)
  {
    v161 = (char *)v194[0];
    v162 = (v159 - (char *)v194[0]) >> 3;
    v163 = v162 + 1;
    if ((unint64_t)(v162 + 1) >> 61)
      sub_18F5F7864();
    v164 = v195 - (char *)v194[0];
    if ((v195 - (char *)v194[0]) >> 2 > v163)
      v163 = v164 >> 2;
    v165 = (unint64_t)v164 >= 0x7FFFFFFFFFFFFFF8;
    v166 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v165)
      v166 = v163;
    if (v166)
    {
      v166 = (unint64_t)sub_18F610B1C((uint64_t)&v195, v166);
      v168 = v167;
      v161 = (char *)v194[0];
      v159 = (char *)v194[1];
    }
    else
    {
      v168 = 0;
    }
    v169 = (uint64_t *)(v166 + 8 * v162);
    v170 = (char *)(v166 + 8 * v168);
    *v169 = v129;
    v160 = v169 + 1;
    while (v159 != v161)
    {
      v171 = *((_QWORD *)v159 - 1);
      v159 -= 8;
      *--v169 = v171;
    }
    v194[0] = v169;
    v194[1] = v160;
    v195 = v170;
    if (v161)
      operator delete(v161);
  }
  else
  {
    *(_QWORD *)v159 = v129;
    v160 = v159 + 8;
  }
  v194[1] = v160;
  v159 = (char *)v160;
LABEL_164:
  if (v159 == v194[0])
  {
    *a5 = v159;
    a5[1] = v159;
    goto LABEL_176;
  }
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  v174 = v194[0];
  if (v194[1] != v194[0])
  {
    v175 = 0;
    v176 = 0;
    while (1)
    {
      v177 = (void *)objc_msgSend_objectAtIndex_(a1, v172, v174[v176], v173);
      objc_msgSend_horizontalAccuracy(v177, v178, v179, v180);
      if (v181 <= 35.0)
        break;
      ++v176;
      v174 = v194[0];
      v175 -= 8;
      if (v176 >= ((char *)v194[1] - (char *)v194[0]) >> 3)
        goto LABEL_177;
    }
    v183 = (char *)v194[0];
    v182 = (char *)v194[1];
    if (v176)
    {
      v184 = (char *)v194[0] - v175;
      v185 = (char *)v194[1] - (char *)v194[0] + v175;
      if (v184 != v194[1])
        memmove(v194[0], (char *)v194[0] + 8 * v176, v185);
      v182 = &v183[v185];
      v194[1] = &v183[v185];
      v183 = (char *)v194[0];
    }
    *a5 = v183;
    a5[1] = v182;
    goto LABEL_176;
  }
LABEL_177:
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (v188)
    operator delete(v188);
  if (__p)
  {
    v192 = (char *)__p;
    operator delete(__p);
  }
  if (v194[0])
  {
    v194[1] = v194[0];
    operator delete(v194[0]);
  }
}

void sub_18F61026C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F61030C(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  double v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  void *v51;
  double v52;
  void **i;
  void *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  double v81;
  double v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  double v97;
  double v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  double v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  float v122;
  float v123;
  uint64_t v125;
  float v126[2];
  float32x2_t v127;
  unint64_t v128;
  unint64_t v129;
  float64x2_t v130[2];
  int v131;
  float64x2_t v132[2];
  int v133;
  void *v134;
  char *v135;
  char *v136;
  void *__p;
  unint64_t *v138;
  unint64_t *v139;

  v4 = (void *)a2;
  v6 = 0;
  __p = 0;
  v138 = 0;
  v139 = 0;
  while (v6 < objc_msgSend_count(a1, (const char *)a2, a3, a4))
  {
    v9 = (void *)objc_msgSend_objectAtIndex_(a1, v7, v6, v8);
    if (objc_msgSend_locType(v9, v10, v11, v12) == 1)
    {
      v13 = v138;
      if (v138 >= v139)
      {
        v15 = (unint64_t *)__p;
        v16 = ((char *)v138 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          sub_18F5F7864();
        v18 = (char *)v139 - (_BYTE *)__p;
        if (((char *)v139 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          a2 = 0x1FFFFFFFFFFFFFFFLL;
        else
          a2 = v17;
        if (a2)
        {
          v19 = (char *)sub_18F610B1C((uint64_t)&v139, a2);
          v15 = (unint64_t *)__p;
          v13 = v138;
        }
        else
        {
          v19 = 0;
        }
        v20 = (unint64_t *)&v19[8 * v16];
        *v20 = v6;
        v14 = v20 + 1;
        while (v13 != v15)
        {
          v21 = *--v13;
          *--v20 = v21;
        }
        __p = v20;
        v138 = v14;
        v139 = (unint64_t *)&v19[8 * a2];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v138 = v6;
        v14 = v13 + 1;
      }
      v138 = v14;
    }
    ++v6;
  }
  v22 = (void *)objc_msgSend_objectAtIndex_(a1, v7, *(_QWORD *)__p, v8);
  v26 = objc_msgSend_timestamp(v22, v23, v24, v25);
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v30 = __p;
  if (v138 == __p)
  {
    v49 = 0;
    v41 = 0;
  }
  else
  {
    v31 = v26;
    v32 = 0;
    do
    {
      v33 = (void *)objc_msgSend_objectAtIndex_(a1, (const char *)v27, v30[v32], v29);
      v37 = (void *)objc_msgSend_timestamp(v33, v34, v35, v36);
      objc_msgSend_timeIntervalSinceDate_(v37, v38, v31, v39);
      v41 = v135;
      if (v40 < 0.0 || v40 > 180.0)
        break;
      if (v135 >= v136)
      {
        v42 = (v135 - (_BYTE *)v134) >> 3;
        if ((unint64_t)(v42 + 1) >> 61)
          sub_18F5F7864();
        v43 = (v136 - (_BYTE *)v134) >> 2;
        if (v43 <= v42 + 1)
          v43 = v42 + 1;
        if ((unint64_t)(v136 - (_BYTE *)v134) >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v43;
        if (v27)
          v44 = (char *)sub_18F610B1C((uint64_t)&v136, v27);
        else
          v44 = 0;
        v45 = &v44[8 * v42];
        *(_QWORD *)v45 = v33;
        v41 = v45 + 8;
        v47 = (char *)v134;
        v46 = v135;
        if (v135 != v134)
        {
          do
          {
            v48 = *((_QWORD *)v46 - 1);
            v46 -= 8;
            *((_QWORD *)v45 - 1) = v48;
            v45 -= 8;
          }
          while (v46 != v47);
          v46 = (char *)v134;
        }
        v134 = v45;
        v135 = v41;
        v136 = &v44[8 * v27];
        if (v46)
          operator delete(v46);
      }
      else
      {
        *(_QWORD *)v135 = v33;
        v41 += 8;
      }
      v135 = v41;
      ++v32;
      v30 = __p;
    }
    while (v32 < ((char *)v138 - (_BYTE *)__p) >> 3);
    v49 = v134;
  }
  v50 = 0;
  if ((unint64_t)(v41 - v49) >= 0x10)
  {
    v51 = 0;
    v52 = 10.5;
    do
    {
      for (i = (void **)v134; i != (void **)v135; ++i)
      {
        v54 = *i;
        objc_msgSend_horizontalAccuracy(*i, (const char *)v27, v28, v29);
        if (v55 > 0.0)
        {
          objc_msgSend_horizontalAccuracy(v54, (const char *)v27, v28, v29);
          if (v56 < v52)
          {
            if (v51)
            {
              objc_msgSend_distanceFromLocation_(v51, (const char *)v27, (uint64_t)v54, v29);
              v58 = v57;
              objc_msgSend_horizontalAccuracy(v51, v59, v60, v61);
              v63 = v62;
              objc_msgSend_horizontalAccuracy(v54, v64, v65, v66);
              if (v58 > v63 + v67)
                goto LABEL_57;
            }
            else
            {
              v51 = v54;
            }
          }
        }
      }
      v54 = 0;
LABEL_57:
      v52 = v52 + 1.0;
    }
    while (v52 < 60.0 && v54 == 0);
    if (v54 && v51)
    {
      v69 = (void *)objc_msgSend_timestamp(v51, (const char *)v27, v28, v29);
      v73 = objc_msgSend_timestamp(v54, v70, v71, v72);
      v76 = objc_msgSend_compare_(v69, v74, v73, v75);
      if (v76 == 1)
        v80 = v54;
      else
        v80 = v51;
      if (v76 != 1)
        v51 = v54;
      objc_msgSend_latitude(v80, v77, v78, v79);
      v82 = v81;
      objc_msgSend_longitude(v80, v83, v84, v85);
      v87 = v86;
      v133 = 0;
      memset(v132, 0, sizeof(v132));
      sub_18F60F50C((uint64_t)v132, v80, v88, v89, v82, v86);
      v131 = 0;
      memset(v130, 0, sizeof(v130));
      sub_18F60F50C((uint64_t)v130, v51, v90, v91, v82, v87);
      v128 = 0;
      v129 = 0;
      sub_18F60ED98(v4, (char *)&v129, &v128, v92, v132[0].f64[0], v130[0].f64[0]);
      v96 = v128;
      v95 = v129;
      v50 = 0;
      v97 = 0.0;
      v98 = 0.0;
      while (v95 <= v96)
      {
        v99 = (void *)objc_msgSend_objectAtIndexedSubscript_(v4, v93, v95, v94);
        v103 = (void *)objc_msgSend_deltaPosition_m(v99, v100, v101, v102);
        if ((objc_msgSend_isValid(v103, v104, v105, v106) & 1) != 0)
        {
          v108 = (void *)objc_msgSend_deltaPosition_m(v99, v93, v107, v94);
          objc_msgSend_X(v108, v109, v110, v111);
          v113 = v112;
          v117 = (void *)objc_msgSend_deltaPosition_m(v99, v114, v115, v116);
          objc_msgSend_Y(v117, v118, v119, v120);
          v97 = v97 + v113;
          v98 = v98 + v121;
        }
        ++v95;
      }
      v127 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)((char *)v130 + 8), *(float64x2_t *)((char *)v132 + 8)));
      v122 = v97;
      v123 = v98;
      v126[0] = v122;
      v126[1] = v123;
      if (sqrtf(vaddv_f32(vmul_f32(v127, v127))) != 0.0)
      {
        sub_18F60F368((float *)&v127, v126);
        v50 = v125;
      }
    }
  }
  if (v134)
  {
    v135 = (char *)v134;
    operator delete(v134);
  }
  if (__p)
  {
    v138 = (unint64_t *)__p;
    operator delete(__p);
  }
  return v50;
}

void sub_18F6107D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void *sub_18F610848(uint64_t **a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  if (*a1 == a1[1])
    return 0;
  v7 = (void *)objc_msgSend_indexSet(MEMORY[0x1E0CB3788], a2, a3, a4);
  v9 = *a1;
  v8 = a1[1];
  while (v9 != v8)
  {
    v10 = *v9++;
    objc_msgSend_addIndex_(v7, v5, v10, v6);
  }
  return v7;
}

double sub_18F6108AC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  uint64_t i;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  __int128 v35;

  v5 = objc_msgSend_count(a1, a2, a3, a4, 0x41582AF3D4F25D95, 0x415854A640000000, 0, 0, 0x3FF0000000000000);
  v8 = 0.0;
  if (v5 >= 2)
  {
    v9 = v5;
    for (i = 1; i != v9; ++i)
    {
      v11 = (void *)objc_msgSend_objectAtIndexedSubscript_(a1, v6, i, v7);
      v14 = (void *)objc_msgSend_objectAtIndexedSubscript_(a1, v12, i - 1, v13);
      objc_msgSend_latitude(v11, v15, v16, v17);
      v19 = v18;
      objc_msgSend_longitude(v11, v20, v21, v22);
      v24 = v23;
      objc_msgSend_latitude(v14, v25, v26, v27);
      v29 = v28;
      objc_msgSend_longitude(v14, v30, v31, v32);
      v8 = v8 + sub_18F5BD064((double *)&v35, v19, v24, v29, v33, 0.0);
    }
  }
  return v8;
}

double sub_18F61099C(void *a1, const char *a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t i;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v3 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, a2, (uint64_t)&v49, (uint64_t)v53, 16);
  if (!v3)
    return 0.0;
  v7 = v3;
  v8 = *(_QWORD *)v50;
  v9 = 0.0;
  do
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v50 != v8)
        objc_enumerationMutation(a1);
      v11 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * i);
      v12 = (void *)objc_msgSend_deltaPosition_m(v11, v4, v5, v6);
      if (objc_msgSend_isValid(v12, v13, v14, v15))
      {
        v16 = (void *)objc_msgSend_deltaPosition_m(v11, v4, v5, v6);
        objc_msgSend_X(v16, v17, v18, v19);
        v21 = v20;
        v25 = (void *)objc_msgSend_deltaPosition_m(v11, v22, v23, v24);
        objc_msgSend_X(v25, v26, v27, v28);
        v30 = v21 * v29;
        v34 = (void *)objc_msgSend_deltaPosition_m(v11, v31, v32, v33);
        objc_msgSend_Y(v34, v35, v36, v37);
        v39 = v38;
        v43 = (void *)objc_msgSend_deltaPosition_m(v11, v40, v41, v42);
        objc_msgSend_Y(v43, v44, v45, v46);
        v9 = v9 + sqrt(v30 + v39 * v47);
      }
    }
    v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v4, (uint64_t)&v49, (uint64_t)v53, 16);
  }
  while (v7);
  return v9;
}

os_log_t sub_18F610AF0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "PedTrajectorySmoothing");
  qword_1EE172100 = (uint64_t)result;
  return result;
}

void *sub_18F610B1C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_18F5F689C();
  return operator new(8 * a2);
}

void sub_18F610BF4(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F611DC0;
  block[3] = &unk_1E2990DE0;
  block[4] = a2;
  dispatch_async(v2, block);
}

uint64_t sub_18F610D24(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;

  objc_msgSend_delegate(*(void **)(a1 + 32), a2, a3, a4);
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    v9 = objc_msgSend_delegate(*(void **)(a1 + 32), v6, v7, v8);
    v13 = objc_msgSend_locationManagerSmoother(*(void **)(a1 + 32), v10, v11, v12);
    v14 = *(_QWORD *)(a1 + 40);
    objc_msgSend_intValue(*(void **)(a1 + 48), v15, v16, v17);
    return MEMORY[0x1E0DE7D20](v9, sel_locationManager_didSmoothLocations_ofType_, v13, v14);
  }
  return result;
}

void sub_18F610F3C(uint64_t a1)
{
  NSLog(CFSTR("Connection Interrupted, serviceName, %@"), *(_QWORD *)(a1 + 32));
}

void sub_18F610F68(uint64_t a1)
{
  NSLog(CFSTR("Connection Invalidated, serviceName %@"), *(_QWORD *)(a1 + 32));
}

uint64_t sub_18F6110BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], a2, 1, a4);
  v9 = (void *)objc_msgSend_locationManagerSmootherProxy(*(void **)(a1 + 32), v6, v7, v8);
  v13 = (void *)objc_msgSend_connection(v9, v10, v11, v12);
  v17 = objc_msgSend_remoteObjectProxy(v13, v14, v15, v16);
  return MEMORY[0x1E0DE7D20](v17, sel_smoothLocations_useType_, *(_QWORD *)(a1 + 40), v5);
}

uint64_t sub_18F611BFC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = objc_msgSend_array(MEMORY[0x1E0C99D20], a2, a3, a4);
  v7 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v6, (uint64_t)CFSTR("CLSmootherErrorDomain"), 1, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v4, v5, v7);
}

uint64_t sub_18F611C54(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_msgSend_array(MEMORY[0x1E0C99D20], a2, a3, a4);
  v7 = (void *)MEMORY[0x1E0CB35C8];
  v13 = *MEMORY[0x1E0CB3388];
  v14[0] = a2;
  v9 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v8, (uint64_t)v14, (uint64_t)&v13, 1);
  v11 = objc_msgSend_errorWithDomain_code_userInfo_(v7, v10, (uint64_t)CFSTR("CLSmootherErrorDomain"), 4, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v5, v6, v11);
}

uint64_t sub_18F611D84(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;

  v5 = (void *)objc_msgSend_locationManagerSmootherProxy(*(void **)(a1 + 32), a2, a3, a4);
  return objc_msgSend_setDelegate_(v5, v6, *(_QWORD *)(a1 + 40), v7);
}

uint64_t sub_18F611DC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_createConnection(*(void **)(a1 + 32), a2, a3, a4);
}

os_log_t sub_18F611DC8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "RouteSmoother");
  qword_1EE172150 = (uint64_t)result;
  return result;
}

os_log_t sub_18F611DF4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

uint64_t sub_18F611E20(uint64_t a1, float a2, float a3, float a4, float a5)
{
  NSObject *v10;
  NSObject *v11;
  char *v12;
  float v13;
  float v14;
  __float2 v15;
  int v16;
  __float2 v17;
  float v18;
  float v19;
  uint64_t result;
  uint8_t buf[4];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (sub_18F6123CC(0, (int *)&unk_1EE172688, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0))
  {
    if (qword_1EE1720E8 != -1)
      dispatch_once(&qword_1EE1720E8, &unk_1E29902B0);
    v10 = qword_1EE1720F0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720F0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v10, OS_LOG_TYPE_DEBUG, "WMM initialization encountered an error", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 0xFFFFFFFFLL;
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720E8 == -1)
    {
LABEL_16:
      v12 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "int declinationCalc(const float, const float, const float, const float, GeomagneticData *)", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
      return 0xFFFFFFFFLL;
    }
LABEL_25:
    dispatch_once(&qword_1EE1720E8, &unk_1E29902B0);
    goto LABEL_16;
  }
  *(float *)dword_1ECD8E810 = a2;
  *(float *)algn_1ECD8E814 = a3;
  *(float *)&dword_1ECD8E818 = a4 / 1000.0;
  dword_1ECD8E81C = LODWORD(a5);
  if (sub_18F6123CC(1, 0, (float *)&qword_1ECD8E820, (float *)&qword_1ECD8E820 + 1, (float *)&dword_1ECD8E828, (float *)algn_1ECD8E82C, a4 / 1000.0, a2, a3, a5))
  {
    if (qword_1EE1720E8 != -1)
      dispatch_once(&qword_1EE1720E8, &unk_1E29902B0);
    v11 = qword_1EE1720F0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720F0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_DEBUG, "WMM evaluation encountered an error", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 0xFFFFFFFFLL;
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720E8 == -1)
      goto LABEL_16;
    goto LABEL_25;
  }
  qword_1ECD8E830 = qword_1ECD8E820;
  dword_1ECD8E838 = dword_1ECD8E828;
  *(float *)&dword_1ECD8E81C = *(float *)&dword_1ECD8E81C + 1.0;
  sub_18F6123CC(1, 0, (float *)&qword_1ECD8E820, (float *)&qword_1ECD8E820 + 1, (float *)&dword_1ECD8E828, (float *)algn_1ECD8E82C, *(float *)&dword_1ECD8E818, *(float *)dword_1ECD8E810, *(float *)algn_1ECD8E814, *(float *)&dword_1ECD8E81C);
  v13 = *(float *)&dword_1ECD8E838;
  v14 = *(float *)&qword_1ECD8E830;
  v15 = __sincosf_stret(*(float *)&qword_1ECD8E830 * 0.017453);
  v16 = HIDWORD(qword_1ECD8E830);
  v17 = __sincosf_stret(*((float *)&qword_1ECD8E830 + 1) * 0.017453);
  if ((float)(v13 * v17.__cosval) < 100.0)
  {
    v14 = log(-1.0);
    *(float *)&qword_1ECD8E830 = v14;
  }
  if (90.0 - fabsf(*(float *)dword_1ECD8E810) <= 0.001)
  {
    v14 = log(-1.0);
    *(float *)&qword_1ECD8E830 = v14;
    v19 = v14;
    v18 = v14;
  }
  else
  {
    v18 = v13 * (float)(v15.__cosval * v17.__cosval);
    v19 = v13 * (float)(v15.__sinval * v17.__cosval);
  }
  result = 0;
  *(float *)a1 = v18 / 1000.0;
  *(float *)(a1 + 4) = v19 / 1000.0;
  *(float *)(a1 + 8) = (float)(v13 * v17.__sinval) / 1000.0;
  *(float *)(a1 + 12) = v13 / 1000.0;
  *(float *)(a1 + 16) = (float)(v13 * v17.__cosval) / 1000.0;
  *(float *)(a1 + 20) = v14;
  *(_DWORD *)(a1 + 24) = v16;
  return result;
}

uint64_t sub_18F6123CC(int a1, int *a2, float *a3, float *a4, float *a5, float *a6, float a7, float a8, float a9, float a10)
{
  float v18;
  float v19;
  NSObject *v20;
  FILE *v22;
  FILE *v23;
  uint64_t v24;
  int v25;
  int v26;
  int *v27;
  int *v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  float *v34;
  uint64_t v35;
  int v36;
  int *v37;
  int *v38;
  int v39;
  float v40;
  uint64_t v41;
  float v42;
  int v43;
  int v44;
  int v45;
  int *v46;
  float v47;
  int *v48;
  int *v49;
  __float2 v50;
  float sinval;
  float cosval;
  _BOOL4 v53;
  __float2 v54;
  float v55;
  float v56;
  int v57;
  int v58;
  float v59;
  float v60;
  int v61;
  int v62;
  NSObject *v63;
  int *v64;
  char *v65;
  int *v66;
  NSObject *v67;
  uint64_t v68;
  float *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  int v81;
  uint64_t v82;
  float v83;
  int v84;
  unsigned int v85;
  unint64_t v86;
  float v87;
  uint64_t v88;
  int *v89;
  float v90;
  float v91;
  float v92;
  int64_t v93;
  uint64_t v94;
  float v95;
  int *v96;
  int *v97;
  float v98;
  int64_t v99;
  int *v100;
  int *v101;
  unint64_t v102;
  int *v103;
  float *v104;
  float *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  float v110;
  float v111;
  float v112;
  int *v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  uint64_t v122;
  float v123;
  float v124;
  float v125;
  int v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  uint64_t result;
  NSObject *v134;
  char *v135;
  float *v136;
  float *v137;
  uint64_t v138;
  unint64_t v139;
  uint8_t buf[4];
  double v141;
  __int16 v142;
  double v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  if (a1 == 1)
  {
    v18 = a10 - *(float *)&dword_1ECD8E860;
    v19 = *(float *)&dword_1ECD8E874;
    if (*(float *)&dword_1ECD8E874 < 0.0 && v18 < 0.0)
    {
      if (qword_1EE1720E8 != -1)
        dispatch_once(&qword_1EE1720E8, &unk_1E29902B0);
      v20 = qword_1EE1720F0;
      if (os_log_type_enabled((os_log_t)qword_1EE1720F0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134349312;
        v141 = a10;
        v142 = 2050;
        v143 = *(float *)&dword_1ECD8E860;
        _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_INFO, "supplied date (%{public}f) outside valid range (epoch=%{public}f)", buf, 0x16u);
      }
      if (!sub_18F5C4AE0(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1EE1720E8 == -1)
      {
LABEL_124:
        v135 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "int E0000(int, int *, float, float, float, float, float *, float *, float *, float *)", "CoreLocation: %s\n", v135);
        if (v135 != (char *)buf)
          free(v135);
        return 1;
      }
LABEL_126:
      dispatch_once(&qword_1EE1720E8, &unk_1E29902B0);
      goto LABEL_124;
    }
    v50 = __sincosf_stret(a9 * 0.017453);
    sinval = v50.__sinval;
    cosval = v50.__cosval;
    dword_1ECD8E8A4 = LODWORD(v50.__sinval);
    dword_1ECD8E8D8 = LODWORD(v50.__cosval);
    v53 = *(float *)&dword_1ECD8E87C != a8 || *(float *)&dword_1ECD8E878 != a7;
    if (v53)
    {
      v54 = __sincosf_stret(a8 * 0.017453);
      v55 = sqrtf(*(float *)&dword_1ECD8E84C - (float)(*(float *)&dword_1ECD8E854 * (float)(v54.__sinval * v54.__sinval)));
      v56 = (float)(*(float *)&dword_1ECD8E84C + (float)(v55 * a7)) / (float)(flt_1ECD8E850 + (float)(v55 * a7));
      *(float *)&v57 = v54.__sinval
                     / sqrtf((float)(v54.__sinval * v54.__sinval)+ (float)((float)(v56 * v56) * (float)(v54.__cosval * v54.__cosval)));
      *(float *)&v58 = sqrt(1.0 - (float)(*(float *)&v57 * *(float *)&v57));
      dword_1ECD8E884 = v57;
      dword_1ECD8E888 = v58;
      v59 = (float)(a7 * a7)
          + (float)(v55 * a7) * 2.0
          + (float)((float)(flt_1ECD8E858 - (float)(*(float *)&dword_1ECD8E85C * (float)(v54.__sinval * v54.__sinval)))
                  / (float)(v55 * v55));
      v60 = sqrtf((float)((float)(v54.__sinval * v54.__sinval) * flt_1ECD8E850)+ (float)(*(float *)&dword_1ECD8E84C * (float)(v54.__cosval * v54.__cosval)));
      dword_1ECD8E88C = sqrtf(v59);
      *(float *)&dword_1ECD8E890 = (float)(v60 + a7) / *(float *)&dword_1ECD8E88C;
      *(float *)&dword_1ECD8E894 = (float)(v54.__sinval * (float)(v54.__cosval * *(float *)&dword_1ECD8E854))
                                 / (float)(v60 * *(float *)&dword_1ECD8E88C);
    }
    v61 = dword_1ECD8E83C;
    if (*(float *)&dword_1ECD8E880 != a9)
    {
      if (dword_1ECD8E83C >= 2)
      {
        v62 = dword_1ECD8E83C + 1;
        v68 = dword_1ECD8E83C - 1;
        v69 = (float *)&dword_1ECD8E8DC;
        v70 = v50.__sinval;
        do
        {
          v71 = *(float *)&dword_1ECD8E8D8;
          v72 = (float)(sinval * *(float *)&dword_1ECD8E8D8) + (float)(v70 * cosval);
          *(v69 - 13) = v72;
          v70 = *(float *)&dword_1ECD8E8A4;
          cosval = (float)(v71 * cosval) - (float)(*(float *)&dword_1ECD8E8A4 * sinval);
          *v69++ = cosval;
          sinval = v72;
          --v68;
        }
        while (v68);
      }
      else
      {
        v62 = 2;
      }
      dword_1ECD8E844 = v62;
    }
    v73 = *(float *)&dword_1ECD8E888;
    if (v61 >= 1)
    {
      v136 = a4;
      v137 = a6;
      v74 = 0;
      v75 = 0;
      v76 = *(float *)&dword_1ECD8E848 / *(float *)&dword_1ECD8E88C;
      v77 = v76 * v76;
      v78 = *(float *)&dword_1ECD8E884;
      v79 = -*(float *)&dword_1ECD8E888;
      v80 = *(float *)&dword_1ECD8E8D4;
      v81 = dword_1ECD8E970[0];
      v82 = (v61 + 1);
      v83 = *(float *)&dword_1ECD8E8A0;
      v84 = 3;
      v85 = -1;
      v86 = 1;
      v87 = 0.0;
      v88 = 0x4BCu;
      v89 = dword_1ECD8E810;
      v90 = 0.0;
      v91 = 0.0;
      v92 = 0.0;
      v138 = v82;
      while (1)
      {
        v93 = 0;
        v94 = 4 * v85 + 2516;
        v95 = -(float)(v76 * v77);
        v77 = v76 * v77;
        v139 = v86 + 1;
        v96 = &dword_1ECD8E810[v86];
        v97 = v96 + 798;
        v98 = *((float *)v96 + 62);
        v99 = v86 - 2;
        v100 = v96 + 796;
        v101 = v96 + 797;
        v102 = v86 - 1;
        v103 = &dword_1ECD8E810[13 * v86];
        v104 = (float *)&v103[v86 + 615];
        v105 = (float *)&v103[v86 + 629];
        v106 = -13;
        v107 = v88;
        v108 = v75;
        v109 = v84;
        do
        {
          if (v53)
          {
            if (v74 + 1 == v93)
            {
              *(float *)&v97[13 * (_DWORD)v86] = v73 * *(float *)&v101[13 * (int)v86 - 13];
              *v105 = (float)(v78 * *(float *)&v101[13 * v86 - 13]) + (float)(v73 * *v104);
            }
            else
            {
              if (v86 == 1 && !v93)
              {
                *(float *)&dword_1ECD8F48C = v78 * *(float *)&dword_1ECD8F488;
                *(float *)&dword_1ECD8F1E8 = (float)(*(float *)&dword_1ECD8F488 * v79)
                                           + (float)(v78 * *(float *)&dword_1ECD8E810[v102 + 629]);
                if (v19 == a10)
                {
LABEL_74:
                  v112 = v77 * *(float *)((char *)&dword_1ECD8E810[799] + v108);
LABEL_75:
                  v118 = *(float *)&dword_1ECD8E810[v86 + 460];
                  v116 = v80 * v118;
                  v117 = v83 * v118;
                  goto LABEL_76;
                }
LABEL_66:
                v110 = *(float *)((char *)&dword_1ECD8E810[123] + v108)
                     + (float)(v18 * *(float *)((char *)&dword_1ECD8E810[292] + v108));
                *(float *)((char *)&dword_1ECD8E810[461] + v108) = v110;
                if (!v93)
                  goto LABEL_74;
                v111 = *(float *)&v89[v93 + 134] + (float)(v18 * *(float *)((char *)dword_1ECD8E810 + v107));
                *(float *)((char *)&dword_1ECD8E810[169] + v107) = v111;
                v112 = v77 * *(float *)&v97[v106 + 13];
                goto LABEL_70;
              }
              if (v86 >= 2)
              {
                if (v93 <= v99)
                {
                  v123 = *(float *)((char *)dword_1ECD8E810 + v94);
                  v122 = (v106 + 13);
                }
                else
                {
                  v122 = (v106 + 13);
                  v100[v122] = 0;
                  *(int *)((char *)dword_1ECD8E810 + v94) = 0;
                  v123 = 0.0;
                }
                v124 = *(float *)&v101[v122];
                v125 = *(float *)((char *)&unk_1EE172CC0 + v108 + 4);
                *(float *)&v97[v122] = (float)(v78 * v124) - (float)(v125 * *(float *)&v100[v122]);
                *(float *)((char *)&dword_1ECD8E810[630] + v108) = (float)((float)(v124 * v79)
                                                                         + (float)(v78
                                                                                 * *(float *)((char *)&dword_1ECD8E810[629]
                                                                                            + v108)))
                                                                 - (float)(v125 * v123);
              }
            }
          }
          if (v19 != a10)
            goto LABEL_66;
          v112 = v77 * *(float *)&v97[v106 + 13];
          if (!v93)
            goto LABEL_75;
          v110 = *(float *)((char *)&dword_1ECD8E810[461] + v108);
          v111 = *(float *)((char *)&dword_1ECD8E810[169] + v107);
LABEL_70:
          v113 = &dword_1ECD8E810[v93];
          v114 = *((float *)v113 + 49);
          v115 = *((float *)v113 + 36);
          v116 = (float)(v111 * v115) + (float)(v110 * v114);
          v117 = (float)(v110 * v115) - (float)(v111 * v114);
LABEL_76:
          v119 = *(float *)((char *)&dword_1ECD8E810[630] + v108);
          v120 = v117 * *(float *)&dword_1ECD8E810[v93 + 75];
          if (v73 == 0.0 && v93 == 1)
          {
            if (v86 == 1)
            {
              dword_1ECD8E974 = v81;
              v121 = *(float *)&v81;
            }
            else
            {
              v121 = (float)(v78 * *(float *)&dword_1ECD8E970[v102])
                   - (float)(*((float *)&unk_1EE172CC0 + v86 + 13) * *(float *)&dword_1ECD8E970[v99]);
              *(float *)&dword_1ECD8E970[v86] = v121;
            }
            v92 = v92 + (float)(v120 * (float)(v77 * v121));
          }
          v87 = v87 + (float)((float)(v116 * v95) * v119);
          v90 = v90 + (float)(v120 * v112);
          ++v93;
          --v109;
          v108 += 52;
          v91 = v91 + (float)((float)(v98 * v116) * v112);
          v107 += 4;
          v106 += 13;
          v94 += 52;
        }
        while (v109 > 1);
        ++v84;
        v75 += 4;
        v88 += 52;
        v89 += 13;
        ++v85;
        v126 = v138;
        ++v74;
        ++v86;
        if (v139 == v138)
        {
          dword_1ECD8E844 = v93;
          a6 = v137;
          a4 = v136;
          goto LABEL_92;
        }
      }
    }
    v126 = 1;
    v91 = 0.0;
    v87 = 0.0;
    v92 = 0.0;
    v90 = 0.0;
LABEL_92:
    dword_1ECD8E840 = v126;
    if (v73 == 0.0)
      v127 = v92;
    else
      v127 = v90 / v73;
    v128 = (float)-(float)(v91 * *(float *)&dword_1ECD8E894) - (float)(v87 * *(float *)&dword_1ECD8E890);
    v129 = (float)(v87 * *(float *)&dword_1ECD8E894) - (float)(v91 * *(float *)&dword_1ECD8E890);
    v130 = sqrtf((float)(v127 * v127) + (float)(v128 * v128));
    *a5 = sqrtf((float)(v129 * v129) + (float)(v130 * v130));
    *a3 = atan2f(v127, v128) / 0.017453;
    *a4 = atan2f(v129, v130) / 0.017453;
    *a6 = -999.0;
    if (fabsf(a8) >= 55.0)
    {
      v131 = -999.0;
      if (a9 >= 0.0 && a8 > 0.0)
      {
        v131 = *a3 - a9;
        *a6 = v131;
      }
      v132 = fabsf(a9);
      if (a8 > 0.0 && a9 < 0.0)
      {
        v131 = v132 + *a3;
        *a6 = v131;
      }
      if (a9 >= 0.0 && a8 < 0.0)
      {
        v131 = *a3 + a9;
        *a6 = v131;
      }
      if (a8 < 0.0 && a9 < 0.0)
      {
        v131 = *a3 - v132;
        *a6 = v131;
      }
      if (v131 > 180.0)
      {
        v131 = v131 + -360.0;
LABEL_111:
        if (v131 < -180.0)
          v131 = v131 + 360.0;
        *a6 = v131;
        goto LABEL_114;
      }
      if (v131 < -180.0)
        goto LABEL_111;
    }
LABEL_114:
    result = 0;
    dword_1ECD8E874 = LODWORD(a10);
    dword_1ECD8E878 = LODWORD(a7);
    dword_1ECD8E87C = LODWORD(a8);
    dword_1ECD8E880 = LODWORD(a9);
    return result;
  }
  v22 = fopen((const char *)&xmmword_1EE172AE0, "r");
  if (!v22)
  {
    if (qword_1EE1720E8 != -1)
      dispatch_once(&qword_1EE1720E8, &unk_1E29902B0);
    v63 = qword_1EE1720F0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720F0, OS_LOG_TYPE_INFO))
    {
      v64 = __error();
      v65 = strerror(*v64);
      *(_DWORD *)buf = 136315394;
      v141 = COERCE_DOUBLE(&xmmword_1EE172AE0);
      v142 = 2082;
      v143 = *(double *)&v65;
      _os_log_impl(&dword_18F5B3000, v63, OS_LOG_TYPE_INFO, "could not open geomagnetic data file %s (%{public}s)", buf, 0x16u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720E8 != -1)
      dispatch_once(&qword_1EE1720E8, &unk_1E29902B0);
    v66 = __error();
    strerror(*v66);
    goto LABEL_124;
  }
  v23 = v22;
  dword_1ECD8E83C = *a2;
  dword_1ECD8E8A0 = 0;
  dword_1ECD8E970[0] = 1065353216;
  dword_1ECD8F488 = 1065353216;
  dword_1ECD8E8D4 = 1065353216;
  dword_1ECD8F1E4 = 0;
  *(_QWORD *)&dword_1ECD8E848 = 0x4C1B2F2F45C7199ALL;
  *(_QWORD *)&flt_1ECD8E850 = 0x4884FA004C1A253BLL;
  *(_QWORD *)&flt_1ECD8E858 = 0x55A0AD8058BC2457;
  dword_1ECD8E9F8 = 0;
  dword_1ECD8EC9C = 0;
  if (!fgets(byte_1ECD8E9A4, 80, v22))
  {
    fclose(v23);
    if (qword_1EE1720E8 != -1)
      dispatch_once(&qword_1EE1720E8, &unk_1E29902B0);
    v67 = qword_1EE1720F0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720F0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v67, OS_LOG_TYPE_INFO, "geomagnetic data file appears to be empty", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720E8 == -1)
      goto LABEL_124;
    goto LABEL_126;
  }
  sscanf(byte_1ECD8E9A4, "%f", &dword_1ECD8E860);
  if (fgets(byte_1ECD8E9A4, 80, v23))
  {
    v24 = 0;
    do
    {
      do
      {
        if (!*((_BYTE *)&dword_1ECD8E810[101] + v24))
          break;
        *((_BYTE *)&dword_1ECD8E898 + v24) = *((_BYTE *)&dword_1ECD8E810[101] + v24);
        ++v24;
        *((_BYTE *)&dword_1ECD8E898 + v24) = 0;
      }
      while (v24 != 4);
      if (!(dword_1ECD8E898 ^ 0x39393939 | byte_1ECD8E89C))
        break;
      sscanf(byte_1ECD8E9A4, "%d%d%f%f%f%f", &dword_1ECD8E840, &dword_1ECD8E844, &dword_1ECD8E864, &dword_1ECD8E868, &dword_1ECD8E86C, &dword_1ECD8E870);
      v25 = dword_1ECD8E844;
      if (dword_1ECD8E844 > 0xC || (v26 = dword_1ECD8E840, dword_1ECD8E840 > 12) || dword_1ECD8E840 < 0)
      {
        fclose(v23);
        if (qword_1EE1720E8 != -1)
          dispatch_once(&qword_1EE1720E8, &unk_1E29902B0);
        v134 = qword_1EE1720F0;
        if (os_log_type_enabled((os_log_t)qword_1EE1720F0, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v134, OS_LOG_TYPE_INFO, "geomagnetic data file appears to have invalid dimensions", buf, 2u);
        }
        if (!sub_18F5C4AE0(115, 2))
          return 1;
        bzero(buf, 0x65CuLL);
        if (qword_1EE1720E8 != -1)
          goto LABEL_126;
        goto LABEL_124;
      }
      if (dword_1ECD8E844 <= dword_1ECD8E840)
      {
        v27 = &dword_1ECD8E810[13 * dword_1ECD8E844 + dword_1ECD8E840];
        v27[122] = dword_1ECD8E864;
        v27[291] = dword_1ECD8E86C;
        if (v25)
        {
          v28 = &dword_1ECD8E810[13 * v26 + v25 - 1];
          v28[122] = dword_1ECD8E868;
          v28[291] = dword_1ECD8E870;
        }
      }
      v29 = fgets(byte_1ECD8E9A4, 80, v23);
      v24 = 0;
    }
    while (v29);
  }
  dword_1ECD8F488 = 1065353216;
  if (dword_1ECD8E83C < 1)
  {
    LODWORD(v31) = 1;
  }
  else
  {
    v30 = 0;
    v31 = dword_1ECD8E83C + 1;
    v32 = 1;
    v33 = dword_1ECD8E810;
    v34 = (float *)&unk_1EE172CC4;
    do
    {
      v35 = 0;
      v36 = 0;
      v37 = &dword_1ECD8E810[v32];
      v38 = v37 + 798;
      v39 = 2 * v32 - 1;
      v40 = (float)(int)v32;
      *((float *)v37 + 798) = (float)(*((float *)v37 + 797) * (float)v39) / (float)(int)v32;
      v41 = v32 + 1;
      v42 = (float)(v39 * (2 * v32 - 3));
      v43 = 2;
      v44 = v30;
      do
      {
        v34[v35] = (float)((v30 + v36) * v44) / v42;
        if (v35)
        {
          *(float *)&v45 = sqrtf((float)(v43 * (v44 + 2)) / (float)(v30 + v36 + 1)) * *(float *)&v38[(int)v35 - 13];
          v38[(int)v35] = v45;
          v46 = &dword_1ECD8E810[13 * v32 + (v36 - 1)];
          *((float *)v46 + 122) = *(float *)&v45 * *((float *)v46 + 122);
          *((float *)v46 + 291) = *(float *)&v45 * *((float *)v46 + 291);
          v43 = 1;
        }
        v47 = *(float *)&v38[v35];
        v48 = &v33[v35];
        *((float *)v48 + 123) = v47 * *((float *)v48 + 123);
        *((float *)v48 + 292) = v47 * *((float *)v48 + 292);
        ++v36;
        --v44;
        v35 += 13;
      }
      while (v44 + 3 > 1);
      v49 = &dword_1ECD8E810[v32];
      ++v30;
      *((float *)v49 + 62) = (float)(int)v41;
      *((float *)v49 + 75) = v40;
      ++v33;
      ++v34;
      v32 = v41;
    }
    while (v41 != v31);
    dword_1ECD8E844 = v36;
  }
  dword_1ECD8E840 = v31;
  dword_1EE172CF8 = 0;
  *(_QWORD *)&dword_1ECD8E87C = 0xC47A0000C47A0000;
  *(_QWORD *)&dword_1ECD8E874 = 0xC47A0000C47A0000;
  fclose(v23);
  return 0;
}

os_log_t sub_18F6132F4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE1720F0 = (uint64_t)result;
  return result;
}

void sub_18F613D0C(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E2990D50);
  v3 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0)
      v5 = v4;
    else
      v5 = *(_QWORD *)v4;
    *(_DWORD *)buf = 136315138;
    v8 = v5;
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEFAULT, "#clgda,client,#warning,unexpected message,%s", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D50);
    CLConnectionMessage::name(*a2);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "CLGnssDisablementAssertionInternal::CLGnssDisablementAssertionInternal(dispatch_queue_t, const char *, NSDictionary *, CLGnssDisablementAssertionCallback)_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

void sub_18F613EE8(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  NSObject *v9;
  char *v10;
  uint64_t v11;
  uint64_t Dictionary;
  char *v13;
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E2990D50);
  v4 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
  {
    v5 = CLConnectionMessage::name(*a2);
    if (*(char *)(v5 + 23) >= 0)
      v6 = v5;
    else
      v6 = *(_QWORD *)v5;
    *(_DWORD *)buf = 136315138;
    v15 = v6;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "#clgda,client,message,%s", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D50);
    CLConnectionMessage::name(*a2);
    v13 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "CLGnssDisablementAssertionInternal::CLGnssDisablementAssertionInternal(dispatch_queue_t, const char *, NSDictionary *, CLGnssDisablementAssertionCallback)_block_invoke", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
  if (*(_QWORD *)(v3 + 8))
  {
    v7 = (_QWORD *)CLConnectionMessage::name(*a2);
    v8 = *((char *)v7 + 23);
    if (v8 < 0)
    {
      if (v7[1] != 44)
        return;
      v7 = (_QWORD *)*v7;
    }
    else if (v8 != 44)
    {
      return;
    }
    if (!memcmp(v7, "kCLConnectionMessageGnssDisablementAssertRsp", 0x2CuLL) && !*(_BYTE *)(v3 + 24))
    {
      v11 = *(_QWORD *)(v3 + 8);
      Dictionary = CLConnectionMessage::getDictionary(*a2);
      (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v11, Dictionary);
      *(_BYTE *)(v3 + 24) = 1;
    }
  }
  else
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D50);
    v9 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_DEFAULT, "#clgda,#warning,client,noRegisteredCallback", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990D50);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "CLGnssDisablementAssertionInternal::CLGnssDisablementAssertionInternal(dispatch_queue_t, const char *, NSDictionary *, CLGnssDisablementAssertionCallback)_block_invoke", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
}

void sub_18F614654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  sub_18F5D6004((uint64_t)&a14);
  sub_18F5D6004((uint64_t)&a24);
  MEMORY[0x194002D30](v33, 0x10A0C401FC6A22ALL);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F614754(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  char *v4;
  uint8_t buf[1640];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D50);
    v3 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEFAULT, "#clgda,client,~CLGnssDisablementAssertionInternal()", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990D50);
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "CLGnssDisablementAssertionInternal::~CLGnssDisablementAssertionInternal()", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
    sub_18F5F2D44(v2);
    JUMPOUT(0x194002D30);
  }
  return result;
}

void sub_18F614938(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_18F5D57A8(a1);
}

uint64_t sub_18F614944(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  CLGnssDisablementAssertion *v8;
  const char *v9;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD v18[3];
  _QWORD v19[3];
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D50);
    v11 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#clgda,client,reason missing\"}", buf, 0x12u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990D50);
    }
    v12 = qword_1ECD8E750;
    if (!os_signpost_enabled((os_log_t)qword_1ECD8E750))
      return 0;
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v13 = "#clgda,client,reason missing";
    v14 = "{\"msg%{public}.0s\":\"#clgda,client,reason missing\"}";
    goto LABEL_35;
  }
  if (!a1 || !a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D50);
    v15 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#clgda,client,bundleID or bundlePath needed\"}", buf, 0x12u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990D50);
    }
    v12 = qword_1ECD8E750;
    if (!os_signpost_enabled((os_log_t)qword_1ECD8E750))
      return 0;
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v13 = "#clgda,client,bundleID or bundlePath needed";
    v14 = "{\"msg%{public}.0s\":\"#clgda,client,bundleID or bundlePath needed\"}";
    goto LABEL_35;
  }
  if (!a4)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D50);
    v16 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#clgda,client,nil callback queue\"}", buf, 0x12u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990D50);
    }
    v12 = qword_1ECD8E750;
    if (!os_signpost_enabled((os_log_t)qword_1ECD8E750))
      return 0;
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v13 = "#clgda,client,nil callback queue";
    v14 = "{\"msg%{public}.0s\":\"#clgda,client,nil callback queue\"}";
    goto LABEL_35;
  }
  if (a5)
  {
    v18[0] = CFSTR("kCLConnectionMessageBundleIdentifierKey");
    v18[1] = CFSTR("kCLConnectionMessageBundlePathKey");
    v19[0] = a1;
    v19[1] = a2;
    v18[2] = CFSTR("kCLConnectionMessagePurposeKey");
    v19[2] = a3;
    v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v19, (uint64_t)v18, 3);
    v8 = [CLGnssDisablementAssertion alloc];
    return objc_msgSend_initWithRegistrationMessageName_messagePayload_callbackQueue_completionHandler_(v8, v9, (uint64_t)"kCLConnectionMessageGnssDisablementAssertReq", v7, a4, a5);
  }
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E2990D50);
  v17 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#clgda,client,nil callback block\"}", buf, 0x12u);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D50);
  }
  v12 = qword_1ECD8E750;
  if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
  {
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v13 = "#clgda,client,nil callback block";
    v14 = "{\"msg%{public}.0s\":\"#clgda,client,nil callback block\"}";
LABEL_35:
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v13, v14, buf, 0x12u);
  }
  return 0;
}

os_log_t sub_18F6151FC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

void sub_18F615688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F616478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F616490(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_manageConnection(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_18F616744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F61675C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_manager(*(void **)(a1 + 32), a2, a3, a4))
  {
    objc_msgSend_manageConnection(*(void **)(a1 + 32), v5, v6, v7);
  }
  else
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990310);
    v8 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v12 = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2050;
      v17 = v9;
      _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#locationUpdater -[CLLocationUpdater resume] called on an invalidated instance.\", \"self\":\"%{public}p\"}", (uint8_t *)&v12, 0x1Cu);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990310);
    }
    v10 = qword_1ECD8E750;
    if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = 68289282;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2050;
      v17 = v11;
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#locationUpdater -[CLLocationUpdater resume] called on an invalidated instance.", "{\"msg%{public}.0s\":\"#locationUpdater -[CLLocationUpdater resume] called on an invalidated instance.\", \"self\":\"%{public}p\"}", (uint8_t *)&v12, 0x1Cu);
    }
  }
}

void sub_18F616AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F616ACC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  objc_msgSend_setIdentityToken_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
  objc_msgSend_setStorageToken_(*(void **)(a1 + 32), v5, 0, v6);
  return objc_msgSend_manageConnection(*(void **)(a1 + 32), v7, v8, v9);
}

void sub_18F616D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F616D34(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_cleanup(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_18F616EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F616F18(uint64_t a1)
{
  NSObject *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  std::__shared_weak_count *v11;
  uint8_t buf[8];
  std::__shared_weak_count *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990310);
    v2 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEBUG, "#locationUpdater destroying connection (dealloc)", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990310);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "-[CLLocationUpdater dealloc]_block_invoke", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
    sub_18F619E48("kCLConnectionMessageDestroyUponDisconnection", buf);
    v11 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    CLConnection::sendMessage();
    if (v11)
    {
      v5 = (unint64_t *)&v11->__shared_owners_;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    CLConnection::deferredDelete(*(CLConnection **)(a1 + 32));
    v7 = v13;
    if (v13)
    {
      v8 = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_18F617168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F617314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F6179EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  id *v29;

  sub_18F5D6004((uint64_t)&a15);
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18F617AB4(uint64_t a1, uint64_t *a2)
{
  id Weak;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  Weak = objc_loadWeak((id *)(a1 + 40));
  if (Weak)
  {
    v5 = Weak;
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990310);
    v6 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void *)objc_msgSend_identityToken(*(void **)(a1 + 32), v7, v8, v9);
      *(_DWORD *)buf = 68289538;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2082;
      v36 = objc_msgSend_UTF8String(v10, v11, v12, v13);
      v37 = 2050;
      v38 = v5;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#locationUpdater Default handler received message\", \"identityToken\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x26u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990310);
    }
    v14 = qword_1ECD8E750;
    if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
    {
      v18 = (void *)objc_msgSend_identityToken(*(void **)(a1 + 32), v15, v16, v17);
      v22 = objc_msgSend_UTF8String(v18, v19, v20, v21);
      *(_DWORD *)buf = 68289538;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2082;
      v36 = v22;
      v37 = 2050;
      v38 = v5;
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#locationUpdater Default handler received message", "{\"msg%{public}.0s\":\"#locationUpdater Default handler received message\", \"identityToken\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x26u);
    }
    v23 = (std::__shared_weak_count *)a2[1];
    v29 = *a2;
    v30 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    objc_msgSend_handleMessage_(v5, v15, (uint64_t)&v29, v17);
    v26 = v30;
    if (v30)
    {
      v27 = (unint64_t *)&v30->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
}

void sub_18F617CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18F618184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F618408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F61876C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F618BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F618FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F619A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, os_activity_scope_state_s state)
{
  sub_18F5D6004((uint64_t)&a9);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

os_log_t sub_18F619CC0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F619CEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E298F6F8;
  sub_18F619D7C((uint64_t)a1);
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_18F619D58(_QWORD *a1)
{
  sub_18F619CEC(a1);
  JUMPOUT(0x194002D30);
}

void sub_18F619D7C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E298FF28;
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v2;
  *((_DWORD *)v2 + 6) = 31337;
  *(_QWORD *)(a1 + 8) = v2 + 3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_18F619E00(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FF28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18F619E10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FF28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194002D30);
}

_QWORD *sub_18F619E48@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_18F619EA0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18F619E8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F619EA0(_QWORD *a1, char *__s)
{
  char v4;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E298FE10;
  sub_18F619EFC((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_18F619EE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F619EFC(int a1, uint64_t a2, char *__s)
{
  void *__p[2];
  char v5;

  sub_18F5D5990(__p, __s);
  MEMORY[0x194002B38](a2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18F619F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F61A578(double a1, double a2)
{
  if (a2 > 134.82 || a2 < 73.48 || a1 < 18.15 || a1 > 53.6)
    return 0;
  if (a1 <= 42.3 && a2 >= 107.1 && a2 <= 119.3
    || a1 <= 42.3 && a2 >= 119.3 && a1 >= 25.3 && a2 <= 123.45
    || a1 >= 42.3 && a2 <= 129.2 && a1 <= 49.34 && a2 >= 119.93
    || a2 <= 107.1 && a2 >= 98.76 && a1 >= 23.39 && a1 <= 41.58
    || a1 <= 42.6 && a2 <= 98.76 && a1 >= 28.39 && a2 >= 85.19
    || a2 <= 90.66 && a2 >= 80.81 && a1 >= 42.6 && a1 <= 45.2
    || a2 <= 101.54 && a2 >= 99.4 && a1 >= 22.06 && a1 <= 23.39
    || a2 <= 119.93 && a1 >= 42.3 && a1 <= 44.74 && a2 >= 111.924
    || a2 <= 119.93 && a2 >= 116.55 && a1 >= 44.74 && a1 <= 46.35
    || a2 <= 133.09 && a2 >= 129.2 && a1 >= 45.23 && a1 <= 47.66
    || a2 <= 125.95 && a2 >= 120.78 && a1 >= 49.34 && a1 <= 52.86
    || a2 >= 123.45 && a1 >= 41.38 && a1 <= 42.4 && a2 <= 126.51
    || a2 <= 85.19 && a2 >= 79.24 && a1 >= 31.07 && a1 <= 41.73
    || a2 <= 85.19 && a1 <= 42.6 && a1 >= 41.73 && a2 >= 80.28
    || a2 >= 123.45 && a1 >= 40.9 && a1 <= 41.38 && a2 <= 125.97
    || a2 >= 123.45 && a1 >= 40.47 && a1 <= 40.9 && a2 <= 125.0
    || a2 <= 120.15 && a2 >= 119.2 && a1 >= 24.78 && a1 <= 25.4)
  {
    return 1;
  }
  if ((a2 > 108.15 || a2 < 97.511 || a1 < 21.14 || a1 > 28.39)
    && (a2 > 97.511 || a2 < 78.33 || a1 < 27.29 || a1 > 32.7)
    && (a1 > 41.73 || a1 < 32.7 || a2 > 79.24)
    && (a2 < 79.24 || a1 < 41.73 || a1 > 49.16 || a2 > 96.06)
    && (a1 < 41.38 || a2 > 115.52 || a1 > 45.45 || a2 < 96.06)
    && (a1 < 39.6 || a2 < 115.52)
    && (a2 < 119.3 || a1 < 21.7 || a1 > 25.3 || a2 > 122.5))
  {
    return 0;
  }
  else
  {
    return 2;
  }
}

void sub_18F61AD00(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_18F61AD68(uint64_t a1, uint64_t *a2)
{
  id Weak;
  const char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  Weak = objc_loadWeak((id *)(a1 + 32));
  v6 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  objc_msgSend_handleMessage_(Weak, v4, (uint64_t)&v12, v5);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18F61ADF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F61AE08(uint64_t a1)
{
  id Weak;
  const char *v2;
  uint64_t v3;
  uint64_t v4;

  Weak = objc_loadWeak((id *)(a1 + 32));
  return objc_msgSend_handleInterruption(Weak, v2, v3, v4);
}

os_log_t sub_18F61BB9C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "Proximity");
  qword_1EE172120 = (uint64_t)result;
  return result;
}

uint64_t sub_18F61BBC8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x194002B2C]();
    JUMPOUT(0x194002D30);
  }
  return result;
}

float sub_18F61C26C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  id v19;
  const char *v20;
  uint64_t v21;
  id v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;

  v4 = objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(MEMORY[0x1E0C99D68], a2, a3, a4);
  v8 = (void *)objc_msgSend_currentCalendar(MEMORY[0x1E0C99D48], v5, v6, v7);
  v10 = (void *)objc_msgSend_components_fromDate_(v8, v9, 252, v4);
  v14 = (id)objc_msgSend_copy(v10, v11, v12, v13);
  objc_msgSend_setDay_(v14, v15, 1, v16);
  objc_msgSend_setMonth_(v14, v17, 1, v18);
  v19 = objc_alloc(MEMORY[0x1E0C99D48]);
  v22 = (id)objc_msgSend_initWithCalendarIdentifier_(v19, v20, *MEMORY[0x1E0C996C8], v21);
  v25 = objc_msgSend_dateFromComponents_(v22, v23, (uint64_t)v14, v24);
  v27 = (void *)objc_msgSend_components_fromDate_toDate_options_(v22, v26, 16, v25, v4, 0);
  v31 = (double)objc_msgSend_year(v10, v28, v29, v30);
  v35 = fabs((double)(objc_msgSend_day(v27, v32, v33, v34) + 1));
  return v35 / dbl_18F7722E0[(objc_msgSend_year(v10, v36, v37, v38) & 3) == 0] + v31;
}

void sub_18F61CABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18F61CAE8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  char *v4;
  uint8_t buf[4];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172088 != -1)
    dispatch_once(&qword_1EE172088, &unk_1E2991810);
  v2 = qword_1EE1720A8;
  if (os_log_type_enabled((os_log_t)qword_1EE1720A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v6 = v3;
    _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "Interrupted, serviceName %@", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172088 != -1)
      dispatch_once(&qword_1EE172088, &unk_1E2991810);
    v4 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLLocationManagerGathering getConnection]_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
}

uint64_t sub_18F61CC98(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  id Weak;
  NSObject *v7;
  char *v9;
  char *v10;
  uint8_t buf[4];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172088 != -1)
    dispatch_once(&qword_1EE172088, &unk_1E2991810);
  v2 = qword_1EE1720A8;
  if (os_log_type_enabled((os_log_t)qword_1EE1720A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v12 = v3;
    _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "Invalidated - releasing, serviceName %@", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172088 != -1)
      dispatch_once(&qword_1EE172088, &unk_1E2991810);
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLLocationManagerGathering getConnection]_block_invoke", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  Weak = objc_loadWeak((id *)(a1 + 40));
  if (!Weak)
  {
    if (qword_1EE172088 != -1)
      dispatch_once(&qword_1EE172088, &unk_1E2991810);
    v7 = qword_1EE1720A8;
    if (os_log_type_enabled((os_log_t)qword_1EE1720A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "CLLocationManagerGathering object went away", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172088 != -1)
        dispatch_once(&qword_1EE172088, &unk_1E2991810);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "-[CLLocationManagerGathering getConnection]_block_invoke", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return objc_msgSend_setConnection_(Weak, v4, 0, v5);
}

void sub_18F61CFA8(uint64_t a1, void *a2)
{
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint8_t buf[4];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172088 != -1)
    dispatch_once(&qword_1EE172088, &unk_1E2991810);
  v3 = qword_1EE1720A8;
  if (os_log_type_enabled((os_log_t)qword_1EE1720A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v12 = objc_msgSend_localizedDescription(a2, v4, v5, v6);
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_ERROR, "getRemoteObjectProxy error %@", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172088 != -1)
      dispatch_once(&qword_1EE172088, &unk_1E2991810);
    objc_msgSend_localizedDescription(a2, v7, v8, v9);
    v10 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "-[CLLocationManagerGathering getRemoteObjectProxy]_block_invoke", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
}

uint64_t sub_18F61D384(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *RemoteObjectProxy;
  const char *v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;
  const char *v11;
  _QWORD v12[5];
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  RemoteObjectProxy = (void *)objc_msgSend_getRemoteObjectProxy(*(void **)(a1 + 32), a2, a3, a4);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = sub_18F61D4A0;
    v12[3] = &unk_1E29917A0;
    v12[4] = *(_QWORD *)(a1 + 40);
    return objc_msgSend_fetchAdvertisementsWithCompletion_(RemoteObjectProxy, v6, (uint64_t)v12, v7);
  }
  else
  {
    v9 = (void *)MEMORY[0x1E0CB35C8];
    v13 = *MEMORY[0x1E0CB2D50];
    v14[0] = CFSTR("fetchAdvertisementsWithHandler unavailable");
    v10 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v6, (uint64_t)v14, (uint64_t)&v13, 1);
    objc_msgSend_errorWithDomain_code_userInfo_(v9, v11, (uint64_t)CFSTR("kCLErrorDomain"), 2, v10);
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

uint64_t sub_18F61D4A0(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (qword_1EE172088 != -1)
      dispatch_once(&qword_1EE172088, &unk_1E2991810);
    v5 = qword_1EE1720A8;
    if (os_log_type_enabled((os_log_t)qword_1EE1720A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v15 = objc_msgSend_localizedDescription(a3, v6, v7, v8);
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_ERROR, "fetchAdvertisementsWithCompletion error: %@", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172088 != -1)
        dispatch_once(&qword_1EE172088, &unk_1E2991810);
      objc_msgSend_localizedDescription(a3, v10, v11, v12);
      v13 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "-[CLLocationManagerGathering fetchAdvertisementsWithHandler:]_block_invoke", "CoreLocation: %s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_18F61D8A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *RemoteObjectProxy;
  const char *v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;
  const char *v11;
  _QWORD v12[5];
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  RemoteObjectProxy = (void *)objc_msgSend_getRemoteObjectProxy(*(void **)(a1 + 32), a2, a3, a4);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = sub_18F61D9C8;
    v12[3] = &unk_1E29917C8;
    v12[4] = *(_QWORD *)(a1 + 40);
    return objc_msgSend_fetchAdvertisementsDetailedWithCompletion_(RemoteObjectProxy, v6, (uint64_t)v12, v7);
  }
  else
  {
    v9 = (void *)MEMORY[0x1E0CB35C8];
    v13 = *MEMORY[0x1E0CB2D50];
    v14[0] = CFSTR("fetchAdvertisementsDetailedWithHandler unavailable");
    v10 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v6, (uint64_t)v14, (uint64_t)&v13, 1);
    objc_msgSend_errorWithDomain_code_userInfo_(v9, v11, (uint64_t)CFSTR("kCLErrorDomain"), 2, v10);
    return (*(uint64_t (**)(double))(*(_QWORD *)(a1 + 40) + 16))(0.0);
  }
}

uint64_t sub_18F61D9C8(uint64_t a1, double a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint8_t buf[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    if (qword_1EE172088 != -1)
      dispatch_once(&qword_1EE172088, &unk_1E2991810);
    v8 = qword_1EE1720A8;
    if (os_log_type_enabled((os_log_t)qword_1EE1720A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v18 = objc_msgSend_localizedDescription(a5, v9, v10, v11);
      _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_ERROR, "fetchAdvertisementsWithCompletion error: %@", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172088 != -1)
        dispatch_once(&qword_1EE172088, &unk_1E2991810);
      objc_msgSend_localizedDescription(a5, v13, v14, v15);
      v16 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "-[CLLocationManagerGathering fetchAdvertisementsDetailedWithHandler:]_block_invoke", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
  }
  return (*(uint64_t (**)(double))(*(_QWORD *)(a1 + 32) + 16))(a2);
}

uint64_t sub_18F61DDEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t RemoteObjectProxy;
  NSObject *v6;
  const char *v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  uint64_t v13;
  const __CFString *v14;
  uint8_t buf[1640];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  RemoteObjectProxy = objc_msgSend_getRemoteObjectProxy(*(void **)(a1 + 32), a2, a3, a4);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16))
    return MEMORY[0x1E0DE7D20](RemoteObjectProxy, sel_configure_withCompletion_, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
  if (qword_1EE172088 != -1)
    dispatch_once(&qword_1EE172088, &unk_1E2991810);
  v6 = qword_1EE1720A8;
  if (os_log_type_enabled((os_log_t)qword_1EE1720A8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_ERROR, "configure:withCompletionHandler: connection invalid", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172088 != -1)
      dispatch_once(&qword_1EE172088, &unk_1E2991810);
    v11 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "-[CLLocationManagerGathering configure:withCompletionHandler:]_block_invoke", "CoreLocation: %s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  v8 = (void *)MEMORY[0x1E0CB35C8];
  v13 = *MEMORY[0x1E0CB2D50];
  v14 = CFSTR("configure:withCompletion unavailable");
  v9 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v7, (uint64_t)&v14, (uint64_t)&v13, 1);
  objc_msgSend_errorWithDomain_code_userInfo_(v8, v10, (uint64_t)CFSTR("kCLErrorDomain"), 2, v9);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

os_log_t sub_18F61E03C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "Gathering");
  qword_1EE1720A8 = (uint64_t)result;
  return result;
}

uint64_t sub_18F61E900(uint64_t a1, const char *a2)
{
  const char *v2;
  uint64_t v4;
  void **v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  const char *v9;
  dispatch_queue_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;

  v2 = a2;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v4 = sub_18F5BB62C(a1, a2, 1, 1);
  *(_OWORD *)(v4 + 88) = 0u;
  v5 = (void **)(v4 + 88);
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_OWORD *)(v4 + 16) = xmmword_18F771F40;
  *(_OWORD *)(v4 + 48) = xmmword_18F772300;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0xBFF0000000000000;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_DWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0x3FE0000000000000;
  *(_WORD *)(v4 + 168) = 0;
  *(_OWORD *)(v4 + 176) = xmmword_18F772310;
  *(_WORD *)(v4 + 192) = 1;
  *(_OWORD *)(v4 + 200) = xmmword_18F772320;
  *(_WORD *)(v4 + 216) = 1;
  *(_DWORD *)(v4 + 220) = 0;
  *(_BYTE *)(v4 + 224) = 0;
  std::string::operator=((std::string *)(v4 + 128), (const std::string *)v2);
  v6 = *(_OWORD *)(v2 + 56);
  v7 = *(_OWORD *)(v2 + 72);
  v8 = *((_QWORD *)v2 + 11);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(v2 + 40);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 216) = v8;
  *(_OWORD *)(a1 + 200) = v7;
  *(_OWORD *)(a1 + 184) = v6;
  if (!*(_BYTE *)(a1 + 169))
  {
    if (v2[23] >= 0)
      v9 = v2;
    else
      v9 = *(const char **)v2;
    v10 = dispatch_queue_create(v9, 0);
    *(_QWORD *)(a1 + 96) = v10;
    sub_18F68F618((uint64_t)v10, v11, v12, v13);
    v14 = objc_alloc(MEMORY[0x1E0D27198]);
    v17 = (void *)objc_msgSend_initWithQueue_(v14, v15, *(_QWORD *)(a1 + 96), v16);
    *v5 = v17;
    objc_msgSend_setAllowNetworkTileLoad_(v17, v18, *((unsigned __int8 *)v2 + 64), v19);
    objc_msgSend_setFlipNegativeTravelDirectionRoads_(*v5, v20, 1, v21);
    objc_msgSend_setAllowStaleData_(*v5, v22, 1, v23);
    objc_msgSend_setVisitDoubleTravelDirectionRoadsTwice_(*v5, v24, *((_DWORD *)v2 + 6) == 1, v25);
    objc_msgSend_setAllowOfflineData_(*v5, v26, 1, v27);
    objc_msgSend_setPreferStaleData_(*v5, v28, *((unsigned __int8 *)v2 + 65), v29);
  }
  return a1;
}

void sub_18F61EA90(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 151) < 0)
    operator delete(*v2);
  sub_18F66AD0C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F61EAB4(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  char *v3;
  uint8_t buf[1640];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(result + 104))
  {
    v1 = result;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v2 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "CLTSP,Creating maps geocaching OS transaction", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v3 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLGeoMapGeometry::takeOSTransaction()", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf)
        free(v3);
    }
    result = os_transaction_create();
    *(_QWORD *)(v1 + 104) = result;
  }
  return result;
}

void sub_18F61EC64(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  uint8_t buf[1640];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 104))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v2 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "CLTSP,Releasing maps geocaching OS transaction", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v3 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLGeoMapGeometry::releaseOSTransaction()", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf)
        free(v3);
    }

    *(_QWORD *)(a1 + 104) = 0;
  }
}

void sub_18F61EE08(uint64_t a1, __int128 *a2, unsigned int a3, __int128 **a4)
{
  BOOL v4;
  _BYTE *v7;
  _BYTE *v8;
  __int128 *v9;
  __int128 *i;
  char **v11;

  if (*(_BYTE *)(a1 + 168))
    v4 = a2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v7 = sub_18F61EEBC((uint64_t **)(a1 + 288), a2, 1);
    if (v7)
    {
      v8 = v7;
      if (v7[a3])
        sub_18F61F000(v7, a3);
      v9 = *a4;
      for (i = a4[1]; v9 != i; ++v9)
      {
        if (a3)
        {
          v8[1] = 1;
          v11 = (char **)(v8 + 8);
        }
        else
        {
          *v8 = 1;
          v11 = (char **)(v8 + 32);
        }
        sub_18F623AB8(v11, v9);
      }
    }
  }
}

_OWORD *sub_18F61EEBC(uint64_t **a1, __int128 *a2, int a3)
{
  _OWORD *v6;
  __int128 *v8[3];
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  _OWORD v12[3];
  unint64_t v13;
  void **v14;

  if (sub_18F62A584((uint64_t)a1, (unint64_t *)a2))
  {
    v8[0] = a2;
    return sub_18F62A5E4(a1, (unint64_t *)a2, (uint64_t)&unk_18F772428, v8) + 3;
  }
  else if (a3)
  {
    v11 = 0;
    memset(v12, 0, sizeof(v12));
    v13 = 0xBFF0000000000000;
    sub_18F62A9E4((uint64_t)v8, a2, (uint64_t)&v11);
    sub_18F62A8E4(a1, (unint64_t *)v8, (uint64_t)v8);
    v14 = (void **)&v10;
    sub_18F62AB98(&v14);
    v14 = (void **)&v9;
    sub_18F62AB98(&v14);
    v8[0] = a2;
    v6 = sub_18F62A5E4(a1, (unint64_t *)a2, (uint64_t)&unk_18F772428, v8) + 3;
    v8[0] = (_OWORD *)((char *)&v12[1] + 8);
    sub_18F62AB98((void ***)v8);
    v8[0] = v12;
    sub_18F62AB98((void ***)v8);
  }
  else
  {
    return 0;
  }
  return v6;
}

void sub_18F61EFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_18F62A53C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F61F000(_BYTE *a1, int a2)
{
  if (a2)
  {
    sub_18F62AC08((uint64_t)a1, (uint64_t)(a1 + 8));
    a1[1] = 0;
  }
  else
  {
    sub_18F62AC08((uint64_t)a1, (uint64_t)(a1 + 32));
    *a1 = 0;
  }
}

uint64_t sub_18F61F044(uint64_t a1, __int128 *a2, unsigned int a3, _QWORD *a4)
{
  BOOL v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD v32[5];

  if (*(_BYTE *)(a1 + 168))
    v4 = a2 == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  result = (uint64_t)sub_18F61EEBC((uint64_t **)(a1 + 288), a2, 0);
  if (!result)
    return result;
  v8 = result;
  if (!*(_BYTE *)(result + a3))
    return 0;
  v9 = result + 8;
  v10 = 32;
  if (a3)
    v10 = 8;
  else
    v9 = result + 32;
  v11 = *(uint64_t **)(result + v10);
  v12 = *(uint64_t **)(v9 + 8);
  if ((char *)v12 - (char *)v11 >= 1)
  {
    v13 = (_QWORD *)a4[1];
    v14 = ((char *)v12 - (char *)v11) >> 4;
    v15 = a4[2];
    if (v14 <= (v15 - (uint64_t)v13) >> 4)
    {
      if (v14 <= 0)
      {
        v26 = &v11[2 * v14];
        sub_18F62C380((uint64_t)a4, a4[1], a4[1], (char *)&v13[2 * v14]);
        for (; v11 != v26; v13 += 2)
        {
          sub_18F623A40(v13, v11);
          v11 += 2;
        }
      }
      else
      {
        if (v11 == v12)
        {
          v22 = (uint64_t *)a4[1];
        }
        else
        {
          v21 = *(uint64_t **)(result + v10);
          v22 = (uint64_t *)a4[1];
          do
          {
            *v22 = *v21;
            v23 = v21[1];
            v22[1] = v23;
            if (v23)
            {
              v24 = (unint64_t *)(v23 + 8);
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
            }
            v21 += 2;
            v22 += 2;
          }
          while (v21 != v12);
        }
        a4[1] = v22;
      }
    }
    else
    {
      v16 = ((uint64_t)v13 - *a4) >> 4;
      if ((unint64_t)(v16 + v14) >> 60)
        sub_18F5F7864();
      v17 = v15 - *a4;
      v18 = v17 >> 3;
      if (v17 >> 3 <= (unint64_t)(v16 + v14))
        v18 = v16 + v14;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v19 = 0xFFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      v32[4] = a4 + 2;
      if (v19)
        v20 = (char *)sub_18F62AB64((uint64_t)(a4 + 2), v19);
      else
        v20 = 0;
      v27 = (uint64_t *)&v20[16 * v16];
      v32[0] = v20;
      v32[1] = v27;
      v32[3] = &v20[16 * v19];
      v28 = &v27[2 * v14];
      do
      {
        *v27 = *v11;
        v29 = v11[1];
        v27[1] = v29;
        if (v29)
        {
          v30 = (unint64_t *)(v29 + 8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v27 += 2;
        v11 += 2;
      }
      while (v27 != v28);
      v32[2] = v28;
      sub_18F62C3FC(a4, v32, v13);
      sub_18F62C334((uint64_t)v32);
    }
  }
  *(CFAbsoluteTime *)(v8 + 56) = CFAbsoluteTimeGetCurrent();
  return 1;
}

void sub_18F61F278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F62C334((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F61F28C(uint64_t a1, double a2, double a3, double a4)
{
  int v7;
  uint64_t *v8;
  double v9;
  BOOL v10;
  double v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  double v15;
  double v16;
  uint64_t *v18;
  _OWORD *v19;
  int v20;
  _QWORD *v21;
  int v22;
  char *v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  BOOL v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  unint64_t *v48;
  unint64_t *v49;
  _OWORD *v50;
  uint64_t *v51;
  int v52;
  NSObject *v53;
  char *v54;
  uint64_t *v55;
  _QWORD *v56[2];
  int v57;
  double v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  _BYTE buf[12];
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)(a1 + 16);
  v8 = (uint64_t *)v56;
  v56[0] = 0;
  v56[1] = 0;
  v55 = (uint64_t *)v56;
  v9 = *(double *)(a1 + 24);
  v10 = v9 < 0.0;
  v11 = vabdd_f64(a2, v9);
  v12 = !v10 && v11 <= a3;
  if (v12 && v7 < 501)
    goto LABEL_70;
  v14 = (uint64_t *)(a1 + 8);
  v13 = *(uint64_t **)a1;
  if (*(_QWORD *)a1 == a1 + 8)
    goto LABEL_60;
  do
  {
    v15 = *((double *)v13 + 13);
    v16 = vabdd_f64(a2, v15);
    if (v15 < 0.0 || v16 > a4)
    {
      sub_18F62AC08((uint64_t)(v13 + 6), (uint64_t)(v13 + 7));
      sub_18F62AC08((uint64_t)(v13 + 6), (uint64_t)(v13 + 10));
      v18 = sub_18F62ACCC((uint64_t **)a1, (uint64_t)v13);
      goto LABEL_11;
    }
    if (v7 < 501)
      goto LABEL_38;
    v19 = v13 + 4;
    v20 = (int)fabs((double)(int)(a2 - v15));
    v57 = v20;
    v21 = v56[0];
    if (!v56[0])
    {
LABEL_20:
      v23 = (char *)operator new(0x10uLL);
      *(_OWORD *)v23 = *v19;
      *(_QWORD *)buf = &v57;
      v24 = sub_18F62B118(&v55, &v57, (uint64_t)&unk_18F772428, (_DWORD **)buf);
      sub_18F62B1DC((char *)v24 + 40, v23, (uint64_t)(v23 + 16), 1uLL);
      operator delete(v23);
      goto LABEL_38;
    }
    while (1)
    {
      v22 = *((_DWORD *)v21 + 8);
      if (v22 <= v20)
        break;
LABEL_19:
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_20;
    }
    if (v22 < v20)
    {
      ++v21;
      goto LABEL_19;
    }
    *(_QWORD *)buf = &v57;
    v25 = sub_18F62B118(&v55, &v57, (uint64_t)&unk_18F772428, (_DWORD **)buf);
    v26 = v25;
    v27 = v25[6];
    v30 = v25[7];
    v28 = (uint64_t)(v25 + 7);
    v29 = v30;
    if (v27 >= v30)
    {
      v32 = v26[5];
      v33 = ((char *)v27 - (char *)v32) >> 4;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 60)
        sub_18F5F7864();
      v35 = (char *)v29 - (char *)v32;
      if (v35 >> 3 > v34)
        v34 = v35 >> 3;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
        v36 = 0xFFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      if (v36)
        v37 = (char *)sub_18F62AB64(v28, v36);
      else
        v37 = 0;
      v38 = &v37[16 * v33];
      *(_OWORD *)v38 = *v19;
      v40 = v26[5];
      v39 = v26[6];
      v41 = (uint64_t *)v38;
      if (v39 != v40)
      {
        do
        {
          *((_OWORD *)v41 - 1) = *((_OWORD *)v39 - 1);
          v41 -= 2;
          v39 -= 2;
        }
        while (v39 != v40);
        v39 = v26[5];
      }
      v31 = (uint64_t *)(v38 + 16);
      v26[5] = v41;
      v26[6] = (uint64_t *)(v38 + 16);
      v26[7] = (uint64_t *)&v37[16 * v36];
      if (v39)
        operator delete(v39);
    }
    else
    {
      *(_OWORD *)v27 = *v19;
      v31 = v27 + 2;
    }
    v26[6] = v31;
LABEL_38:
    v42 = (uint64_t *)v13[1];
    if (v42)
    {
      do
      {
        v18 = v42;
        v42 = (uint64_t *)*v42;
      }
      while (v42);
    }
    else
    {
      do
      {
        v18 = (uint64_t *)v13[2];
        v43 = *v18 == (_QWORD)v13;
        v13 = v18;
      }
      while (!v43);
    }
LABEL_11:
    v13 = v18;
  }
  while (v18 != v14);
  if (v56 != (_QWORD **)v55)
  {
    do
    {
      if (*(_QWORD *)(a1 + 16) < 0x1F5uLL)
        break;
      v44 = (uint64_t *)*v8;
      v45 = (uint64_t *)*v8;
      v46 = v8;
      if (*v8)
      {
        do
        {
          v47 = v45;
          v45 = (uint64_t *)v45[1];
        }
        while (v45);
      }
      else
      {
        do
        {
          v47 = (uint64_t *)v46[2];
          v43 = *v47 == (_QWORD)v46;
          v46 = v47;
        }
        while (v43);
      }
      v48 = (unint64_t *)v47[5];
      v49 = (unint64_t *)v47[6];
      if (v48 != v49)
      {
        do
        {
          if (sub_18F62A584(a1, v48))
          {
            *(_QWORD *)buf = v48;
            v50 = sub_18F62A5E4((uint64_t **)a1, v48, (uint64_t)&unk_18F772428, (__int128 **)buf);
            sub_18F62AC08((uint64_t)(v50 + 3), (uint64_t)v50 + 56);
            sub_18F62AC08((uint64_t)(v50 + 3), (uint64_t)(v50 + 5));
            sub_18F62B2E4((uint64_t **)a1, v48);
            if (*(_QWORD *)(a1 + 16) < 0x1F5uLL)
              break;
          }
          v48 += 2;
        }
        while (v48 != v49);
        v44 = (uint64_t *)*v8;
      }
      if (v44)
      {
        do
        {
          v51 = v44;
          v44 = (uint64_t *)v44[1];
        }
        while (v44);
      }
      else
      {
        do
        {
          v51 = (uint64_t *)v8[2];
          v43 = *v51 == (_QWORD)v8;
          v8 = v51;
        }
        while (v43);
      }
      v8 = v51;
    }
    while (v51 != v55);
  }
LABEL_60:
  v52 = *(_DWORD *)(a1 + 16);
  *(double *)(a1 + 24) = a2;
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990370);
  v53 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349568;
    *(double *)&buf[4] = a2;
    v64 = 1026;
    v65 = v7;
    v66 = 1026;
    v67 = v52;
    _os_log_impl(&dword_18F5B3000, v53, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,ClearStoredStaleConnections,szBefore,%{public}d,szAfter,%{public}d", buf, 0x18u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v57 = 134349568;
    v58 = a2;
    v59 = 1026;
    v60 = v7;
    v61 = 1026;
    v62 = v52;
    v54 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLGeoMapFeatureAccessGeometryCommon::CLGeoRoadConnectionsMap::clearStoredStaleConnections(const CFAbsoluteTime, const double, const double)", "CoreLocation: %s\n", v54);
    if (v54 != buf)
      free(v54);
  }
LABEL_70:
  sub_18F62B39C((uint64_t)&v55, v56[0]);
}

void sub_18F61F7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_18F62B39C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

uint64_t sub_18F61F834(uint64_t a1, char a2, int a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  double *v16;
  double *v17;
  NSObject *v18;
  int v19;
  int v20;
  double v21;
  int v22;
  int v23;
  _BOOL4 v24;
  NSObject *v25;
  char *v26;
  NSObject *v27;
  char *v28;
  NSObject *v29;
  int v30;
  uint64_t v31;
  double v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  CLLocationCoordinate2D v38;
  uint64_t v39;
  _BOOL8 v40;
  const char *v41;
  uint64_t v42;
  double v43;
  const char *v44;
  void *v45;
  int v46;
  intptr_t v47;
  NSObject *v48;
  NSObject *v49;
  uint64_t v50;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  char *v57;
  char *v58;
  char *v59;
  _QWORD v60[7];
  _QWORD v61[3];
  int v62;
  _QWORD v63[2];
  uint64_t v64;
  __n128 (*v65)(__n128 *, __n128 *);
  void (*v66)(uint64_t);
  const char *v67;
  _QWORD v68[3];
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  void (*v73)(uint64_t);
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  _BYTE v77[24];
  double v78;
  __int128 v79;
  uint64_t *v80;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  char v87;
  char v88;
  _BYTE buf[24];
  double v90;
  __int128 v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  char v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  ++*(_DWORD *)(a1 + 112);
  if ((a2 & 1) == 0
    && !sub_18F6204D4((double *)(a1 + 56), (double *)(a1 + 16), *(unsigned __int8 *)(a1 + 217), a6, a7, a8))
  {
    goto LABEL_61;
  }
  if (a3)
  {
    if (sub_18F62059C(a5, a8, a6, a7))
    {
      if ((a3 & 1) != 0)
        goto LABEL_17;
      goto LABEL_12;
    }
LABEL_28:
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v27 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349825;
      *(double *)&buf[4] = a5;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = a6;
      *(_WORD *)&buf[22] = 2049;
      v90 = a7;
      LOWORD(v91) = 2050;
      *(double *)((char *)&v91 + 2) = a8;
      _os_log_impl(&dword_18F5B3000, v27, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Roads,%{public}.1lf,cacheRoadData,invalid input,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf", buf, 0x2Au);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      *(_DWORD *)v77 = 134349825;
      *(double *)&v77[4] = a5;
      *(_WORD *)&v77[12] = 2049;
      *(double *)&v77[14] = a6;
      *(_WORD *)&v77[22] = 2049;
      v78 = a7;
      LOWORD(v79) = 2050;
      *(double *)((char *)&v79 + 2) = a8;
      v28 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::bufferMapData(const CFAbsoluteTime, const double, const double, const double, const BOOL, const BOOL, const BOOL)", "CoreLocation: %s\n", v28);
      if (v28 != buf)
        free(v28);
    }
    goto LABEL_62;
  }
  *(double *)buf = a8;
  v16 = (double *)buf;
  if (*(double *)(a1 + 184) < a8)
    v16 = (double *)(a1 + 184);
  v17 = (double *)(a1 + 176);
  if (*(double *)(a1 + 176) <= a8)
    v17 = v16;
  a8 = *v17;
  if (!sub_18F62059C(a5, *v17, a6, a7))
    goto LABEL_28;
LABEL_12:
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990370);
  v18 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v20 = *(_DWORD *)(a1 + 112);
    v19 = *(_DWORD *)(a1 + 116);
    v21 = *(double *)(a1 + 320);
    v22 = *(unsigned __int8 *)(a1 + 224);
    v23 = *(unsigned __int8 *)(a1 + 192);
    *(_DWORD *)buf = 134351105;
    *(double *)&buf[4] = a5;
    *(_WORD *)&buf[12] = 2049;
    *(double *)&buf[14] = a6;
    *(_WORD *)&buf[22] = 2049;
    v90 = a7;
    LOWORD(v91) = 2050;
    *(double *)((char *)&v91 + 2) = a8;
    WORD5(v91) = 1026;
    HIDWORD(v91) = v19;
    LOWORD(v92) = 1026;
    *(_DWORD *)((char *)&v92 + 2) = v20;
    HIWORD(v92) = 2050;
    v93 = v21;
    LOWORD(v94) = 1026;
    *(_DWORD *)((char *)&v94 + 2) = v22;
    HIWORD(v94) = 1026;
    LODWORD(v95) = v23;
    _os_log_impl(&dword_18F5B3000, v18, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Roads,%{public}.1lf,buffering map data,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,mapsAPICalls,%{public}d,bufferCalls,%{public}d,connectionUsed,%{public}lu,queryInProgress,%{public}d,network,%{public}d", buf, 0x4Cu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v53 = *(_DWORD *)(a1 + 112);
    v52 = *(_DWORD *)(a1 + 116);
    v54 = *(_QWORD *)(a1 + 320);
    v55 = *(unsigned __int8 *)(a1 + 224);
    v56 = *(unsigned __int8 *)(a1 + 192);
    *(_DWORD *)v77 = 134351105;
    *(double *)&v77[4] = a5;
    *(_WORD *)&v77[12] = 2049;
    *(double *)&v77[14] = a6;
    *(_WORD *)&v77[22] = 2049;
    v78 = a7;
    LOWORD(v79) = 2050;
    *(double *)((char *)&v79 + 2) = a8;
    WORD5(v79) = 1026;
    HIDWORD(v79) = v52;
    LOWORD(v80) = 1026;
    *(_DWORD *)((char *)&v80 + 2) = v53;
    HIWORD(v80) = 2050;
    v81 = v54;
    LOWORD(v82) = 1026;
    *(_DWORD *)((char *)&v82 + 2) = v55;
    HIWORD(v82) = 1026;
    LODWORD(v83) = v56;
    v57 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::bufferMapData(const CFAbsoluteTime, const double, const double, const double, const BOOL, const BOOL, const BOOL)", "CoreLocation: %s\n", v57);
    if (v57 != buf)
      free(v57);
  }
LABEL_17:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*(_BYTE *)(a1 + 169))
  {
    v24 = *(_BYTE *)(a1 + 224) == 0;
    if (*(_BYTE *)(a1 + 224))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v25 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_INFO, "CLMM,CLTSP,road data query already in progress using XPC", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990370);
        *(_WORD *)v77 = 0;
        v26 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)", "CoreLocation: %s\n", v26);
        if (v26 != buf)
          free(v26);
      }
    }
    else
    {
      v30 = *(unsigned __int8 *)(a1 + 192);
      v63[0] = a1;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      LOWORD(v64) = 256;
      v31 = mach_continuous_time();
      v32 = sub_18F6BDF00(v31);
      v33 = (void *)MEMORY[0x1940032C4]();
      *(_QWORD *)v77 = 0;
      *(_QWORD *)&v77[8] = v77;
      *(_QWORD *)&v77[16] = 0x2020000000;
      LOBYTE(v78) = 0;
      *(_BYTE *)(a1 + 224) = 1;
      v37 = (void *)objc_msgSend_sharedInstance(CLMapsXPCServiceManager, v34, v35, v36);
      v38 = CLLocationCoordinate2DMake(a6, a7);
      v39 = *(unsigned __int8 *)(a1 + 216);
      v40 = (*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) == 2;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_18F625E3C;
      v90 = COERCE_DOUBLE(&unk_1E2991910);
      v92 = a5;
      v93 = a8;
      v94 = a6;
      v95 = a7;
      *(_QWORD *)&v91 = v77;
      *((_QWORD *)&v91 + 1) = a1;
      v97 = v30;
      v96 = v32;
      objc_msgSend_collectMapDataOfType_aroundCoordinate_inRadius_allowNetwork_isPedestrianOrCycling_clearTiles_callSynchronously_WithReply_(v37, v41, 0, v30 != 0, v40, a4, v39, buf, v38.latitude, v38.longitude, a8);
      _Block_object_dispose(v77, 8);
      objc_autoreleasePoolPop(v33);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    }
    goto LABEL_60;
  }
  if (!*(_QWORD *)(a1 + 88))
  {
LABEL_44:
    v24 = 0;
    goto LABEL_60;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v29 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v29, OS_LOG_TYPE_INFO, "CLMM,CLTSP,road data query already in progress using maps API", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      *(_WORD *)v77 = 0;
      v58 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)", "CoreLocation: %s\n", v58);
      if (v58 != buf)
        free(v58);
    }
    goto LABEL_44;
  }
  v75 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v76 = 256;
  v42 = mach_continuous_time();
  v43 = sub_18F6BDF00(v42);
  v45 = (void *)MEMORY[0x1940032C4]();
  v69 = 0;
  v70 = &v69;
  v71 = 0x3052000000;
  v72 = sub_18F5CD7E0;
  v73 = sub_18F5CD778;
  v74 = 0;
  v46 = *(unsigned __int8 *)(a1 + 216);
  if (*(_BYTE *)(a1 + 216))
    v70[5] = (uint64_t)dispatch_semaphore_create(0);
  v63[0] = 0;
  v63[1] = v63;
  v64 = 0x4812000000;
  v65 = sub_18F624F54;
  v66 = sub_18F624F78;
  v67 = "";
  memset(v68, 0, sizeof(v68));
  v61[0] = 0;
  v61[1] = v61;
  v61[2] = 0x2020000000;
  v62 = 0;
  v60[0] = MEMORY[0x1E0C809B0];
  v60[1] = 3221225472;
  v60[2] = sub_18F624FA0;
  v60[3] = &unk_1E29918C0;
  v60[5] = v63;
  v60[6] = a1;
  v60[4] = v61;
  *(_QWORD *)v77 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v77[8] = 3221225472;
  *(_QWORD *)&v77[16] = sub_18F625880;
  v78 = COERCE_DOUBLE(&unk_1E29918E8);
  v82 = a5;
  v83 = a8;
  v84 = a6;
  v85 = a7;
  v86 = v43;
  v87 = a4;
  *(_QWORD *)&v79 = v61;
  *((_QWORD *)&v79 + 1) = v63;
  v88 = v46;
  v80 = &v69;
  v81 = a1;
  ++*(_DWORD *)(a1 + 116);
  *(_BYTE *)(a1 + 224) = 1;
  objc_msgSend_findRoadsNear_radius_handler_completionHandler_(*(void **)(a1 + 88), v44, (uint64_t)v60, (uint64_t)v77, a6, a7, a8);
  if (!v46)
    goto LABEL_58;
  v47 = dispatch_semaphore_wait((dispatch_semaphore_t)v70[5], 0xFFFFFFFFFFFFFFFFLL);
  v48 = v70[5];
  if (v48)
    dispatch_release(v48);
  if (v47)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v49 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v49, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Roads,queryForRoadsWithinDistance,semaphore timed out", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v59 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)", "CoreLocation: %s\n", v59);
      if (v59 != buf)
        free(v59);
    }
    v24 = 0;
  }
  else
  {
LABEL_58:
    v24 = 1;
  }
  _Block_object_dispose(v61, 8);
  _Block_object_dispose(v63, 8);
  *(_QWORD *)buf = v68;
  sub_18F62AB98((void ***)buf);
  _Block_object_dispose(&v69, 8);
  objc_autoreleasePoolPop(v45);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
LABEL_60:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (!v24)
  {
LABEL_62:
    v50 = 0;
    goto LABEL_63;
  }
LABEL_61:
  v50 = 1;
LABEL_63:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v50;
}

void sub_18F620414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  sub_18F62AB98(&a61);
  _Block_object_dispose(&a38, 8);
  sub_18F5CE240((uint64_t)&a44);
  sub_18F5CE240((uint64_t)&a14);
  sub_18F5CE240((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL sub_18F6204D4(double *a1, double *a2, int a3, double a4, double a5, double a6)
{
  double v12;
  double v13;
  double v14;
  double v15;
  double v17;

  v12 = a1[1];
  v13 = a1[2];
  if (!sub_18F62059C(*a1, a1[3], v12, v13))
    return 1;
  v14 = sub_18F5BD064(a2, a4, a5, v12, v13, 0.0);
  v15 = a1[3];
  if (a3)
    return v14 >= v15 * 0.5;
  v17 = v15 * 0.9;
  return v14 > v17 && v14 + a6 >= v17;
}

BOOL sub_18F62059C(double a1, double a2, double a3, double a4)
{
  _BOOL8 result;
  _BOOL4 v5;

  result = 0;
  if (a1 > 0.0 && a2 > 0.0)
  {
    if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (fabs(a3) >= 0.00003 || fabs(a4) >= 0.00003))
    {
      v5 = a3 <= 90.0;
      if (a3 < -90.0)
        v5 = 0;
      if (a4 > 180.0)
        v5 = 0;
      return a4 >= -180.0 && v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_18F620640(uint64_t a1, uint64_t a2, int a3, double a4, double a5, double a6)
{
  double Current;
  uint64_t v13;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*(_BYTE *)(a1 + 216)
    && (Current = CFAbsoluteTimeGetCurrent(), (sub_18F61F834(a1, 0, 0, 0, Current, a4, a5, a6) & 1) == 0))
  {
    v13 = 0;
  }
  else
  {
    sub_18F620730(a1, (_QWORD *)(a1 + 240), a2, a3, a4, a5, a6);
    v13 = 1;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v13;
}

void sub_18F62071C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F620730(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, double a5, double a6, double a7)
{
  uint64_t v13;
  NSObject *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  _OWORD *v18;
  _QWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t i;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  BOOL v29;
  _BOOL4 v30;
  _QWORD *j;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  _BOOL4 v35;
  _BOOL4 v36;
  double v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  double v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  uint64_t k;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t n;
  char *v54;
  uint64_t m;
  char *v56;
  __int128 *v57;
  __int128 *v58;
  __int128 *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  double v63;
  double v64;
  __int128 *v65;
  __int128 *v66;
  __int128 *v67;
  __int128 *v68;
  __int128 *v69;
  uint64_t v70;
  double *v71;
  double *v72;
  double v74;
  BOOL v76;
  __int128 *v77;
  __int128 *v78;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t **v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  pthread_mutex_t *v88;
  __int16 v89;
  _BYTE v90[12];
  __int16 v91;
  uint64_t v92;
  _BYTE buf[24];
  double v94;
  uint64_t v95;

  v13 = a1;
  v95 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*(_BYTE *)(v13 + 224))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v14 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,map data requested while map data buffering was in progress", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      LOWORD(v87) = 0;
      v15 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::findRoadsNear(const double, const double, const double, const std::map<CLMapRoadKey, CLMapRoadPtr> &, std::vector<CLMapRoadPtr> &, const BOOL)", "CoreLocation: %s\n", v15);
      if (v15 != buf)
        free(v15);
    }
    goto LABEL_66;
  }
  v87 = v13;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  v89 = 256;
  v16 = *(uint64_t **)(v13 + 328);
  v17 = *(uint64_t **)(v13 + 336);
  if (v16 == v17)
    goto LABEL_65;
  v85 = 0;
  v86 = 0;
  v84 = &v85;
  do
  {
    v18 = (_OWORD *)*v16;
    *(_OWORD *)buf = *(_OWORD *)*v16;
    buf[16] = 1;
    v19 = sub_18F62A678((uint64_t)&v84, v90, (unint64_t *)buf);
    if (!*v19)
    {
      v20 = operator new(0x38uLL);
      v20[2] = *(_OWORD *)buf;
      *((_BYTE *)v20 + 48) = buf[16];
      v21 = *(_QWORD *)v90;
      *(_QWORD *)v20 = 0;
      *((_QWORD *)v20 + 1) = 0;
      *((_QWORD *)v20 + 2) = v21;
      *v19 = v20;
      if (*v84)
      {
        v84 = (uint64_t **)*v84;
        v20 = (_OWORD *)*v19;
      }
      sub_18F62A74C(v85, (uint64_t *)v20);
      ++v86;
    }
    v22 = *(_QWORD **)(v13 + 248);
    v23 = *(_QWORD *)v18;
    for (i = *((_QWORD *)v18 + 1); v22; v22 = (_QWORD *)*v22)
    {
      v25 = v22[4];
      v26 = v22[5];
      v27 = v26 > i;
      if (v25 != v23)
        v27 = v25 > v23;
      if (!v27)
      {
        v28 = v26 < i;
        v29 = v25 == v23;
        v30 = v25 < v23;
        if (v29)
          v30 = v28;
        if (!v30)
          goto LABEL_51;
        ++v22;
      }
    }
    for (j = *(_QWORD **)(v13 + 272); j; j = (_QWORD *)*j)
    {
      v32 = j[4];
      v33 = j[5];
      v34 = v33 > i;
      if (v32 != v23)
        v34 = v32 > v23;
      if (!v34)
      {
        v35 = v33 < i;
        v29 = v32 == v23;
        v36 = v32 < v23;
        if (v29)
          v36 = v35;
        if (!v36)
          goto LABEL_51;
        ++j;
      }
    }
    if (sub_18F7059E4(*v16))
    {
      *(_OWORD *)buf = *v18;
      *(_QWORD *)&buf[16] = *v16;
      v37 = *((double *)v16 + 1);
      v94 = v37;
      if (v37 != 0.0)
      {
        v38 = (unint64_t *)(*(_QWORD *)&v37 + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      sub_18F62C778((uint64_t *)(v13 + 240), *(unint64_t *)buf, *(unint64_t *)&buf[8], (uint64_t)buf);
      v40 = *(std::__shared_weak_count **)&v94;
      if (v94 != 0.0)
      {
        v41 = (unint64_t *)(*(_QWORD *)&v94 + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        goto LABEL_49;
      }
    }
    else
    {
      *(_OWORD *)buf = *v18;
      *(_QWORD *)&buf[16] = *v16;
      v43 = *((double *)v16 + 1);
      v94 = v43;
      if (v43 != 0.0)
      {
        v44 = (unint64_t *)(*(_QWORD *)&v43 + 8);
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      sub_18F62C778((uint64_t *)(v13 + 264), *(unint64_t *)buf, *(unint64_t *)&buf[8], (uint64_t)buf);
      v40 = *(std::__shared_weak_count **)&v94;
      if (v94 != 0.0)
      {
        v46 = (unint64_t *)(*(_QWORD *)&v94 + 8);
        do
          v42 = __ldaxr(v46);
        while (__stlxr(v42 - 1, v46));
LABEL_49:
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
LABEL_51:
    v16 += 2;
  }
  while (v16 != v17);
  v48 = *(_QWORD *)(v13 + 328);
  for (k = *(_QWORD *)(v13 + 336); k != v48; k = sub_18F5D6004(k - 16))
    ;
  *(_QWORD *)(v13 + 336) = v48;
  sub_18F624E68(v13 + 240, (uint64_t)&v84);
  sub_18F624E68(v13 + 264, (uint64_t)&v84);
  if (!*(_BYTE *)(v13 + 216))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v49 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v50 = *(_QWORD *)(v13 + 256);
      v51 = *(_QWORD *)(v13 + 280);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v50;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v51;
      _os_log_impl(&dword_18F5B3000, v49, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Roads,newly buffered data ingested,roads,%{public}lu,zeroLengthRoads,%{public}lu", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v80 = *(_QWORD *)(v13 + 256);
      v81 = *(_QWORD *)(v13 + 280);
      *(_DWORD *)v90 = 134349312;
      *(_QWORD *)&v90[4] = v80;
      v91 = 2050;
      v92 = v81;
      v82 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLGeoMapFeatureRoadGeometryBuffer::updateRoadDataObjectsWithNewlyBufferedData()", "CoreLocation: %s\n", v82);
      if (v82 != buf)
        free(v82);
    }
  }
  sub_18F62C738((uint64_t)&v84, v85);
  if (HIBYTE(v89))
  {
    if ((_BYTE)v89)
    {
      pthread_mutex_unlock(v88);
      goto LABEL_66;
    }
    v13 = v87;
LABEL_65:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  }
LABEL_66:
  if (!a4)
  {
    v56 = *(char **)a3;
    for (m = *(_QWORD *)(a3 + 8); (char *)m != v56; m = sub_18F5D6004(m - 16))
      ;
    *(_QWORD *)(a3 + 8) = v56;
    v59 = (__int128 *)*a2;
    v57 = (__int128 *)(a2 + 1);
    v58 = v59;
    if (v59 == v57)
      goto LABEL_116;
    while (1)
    {
      v60 = *((_QWORD *)v58 + 6);
      if (v60)
      {
        if (*(_QWORD *)(v60 + 144) - *(_QWORD *)(v60 + 136) >= 0x11uLL)
        {
          v61 = 0;
          v62 = 0;
          while (1)
          {
            GEOClosestCoordinateOnLineSegmentFromCoordinate();
            GEOCalculateDistance();
            if (v63 <= a7)
              break;
            ++v62;
            v61 += 16;
            if (v62 >= ((uint64_t)(*(_QWORD *)(v60 + 144) - *(_QWORD *)(v60 + 136)) >> 4) - 1)
              goto LABEL_82;
          }
LABEL_81:
          sub_18F623AB8((char **)a3, v58 + 3);
          goto LABEL_82;
        }
        GEOCalculateDistance();
        if (v64 <= a7)
          goto LABEL_81;
      }
LABEL_82:
      v65 = (__int128 *)*((_QWORD *)v58 + 1);
      if (v65)
      {
        do
        {
          v66 = v65;
          v65 = *(__int128 **)v65;
        }
        while (v65);
      }
      else
      {
        do
        {
          v66 = (__int128 *)*((_QWORD *)v58 + 2);
          v29 = *(_QWORD *)v66 == (_QWORD)v58;
          v58 = v66;
        }
        while (!v29);
      }
      v58 = v66;
      if (v66 == v57)
        goto LABEL_116;
    }
  }
  v52 = mach_continuous_time();
  sub_18F6BDF00(v52);
  sub_18F62B450((double *)buf, a5, a6, a7);
  v54 = *(char **)a3;
  for (n = *(_QWORD *)(a3 + 8); (char *)n != v54; n = sub_18F5D6004(n - 16))
    ;
  *(_QWORD *)(a3 + 8) = v54;
  v69 = (__int128 *)*a2;
  v67 = (__int128 *)(a2 + 1);
  v68 = v69;
  if (v69 == v67)
    goto LABEL_116;
  while (2)
  {
    v70 = *((_QWORD *)v68 + 6);
    if (!v70)
      goto LABEL_110;
    v71 = *(double **)(v70 + 136);
    v72 = *(double **)(v70 + 144);
    if (v71 == v72)
      goto LABEL_110;
    while (2)
    {
      if (*(double *)buf > *v71 || *(double *)&buf[16] < *v71)
        goto LABEL_107;
      v74 = v71[1];
      if (v94 > *(double *)&buf[8])
      {
        if (v94 >= v74 && *(double *)&buf[8] <= v74)
          break;
        goto LABEL_107;
      }
      if (v94 >= *(double *)&buf[8] || (v94 <= v74 ? (v76 = *(double *)&buf[8] < v74) : (v76 = 1), !v76))
      {
LABEL_107:
        v71 += 2;
        if (v71 == v72)
          goto LABEL_110;
        continue;
      }
      break;
    }
    sub_18F623AB8((char **)a3, v68 + 3);
LABEL_110:
    v77 = (__int128 *)*((_QWORD *)v68 + 1);
    if (v77)
    {
      do
      {
        v78 = v77;
        v77 = *(__int128 **)v77;
      }
      while (v77);
    }
    else
    {
      do
      {
        v78 = (__int128 *)*((_QWORD *)v68 + 2);
        v29 = *(_QWORD *)v78 == (_QWORD)v68;
        v68 = v78;
      }
      while (!v29);
    }
    v68 = v78;
    if (v78 != v67)
      continue;
    break;
  }
LABEL_116:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return 1;
}

void sub_18F620F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  _QWORD *v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD *);
  v13 = va_arg(va2, _QWORD);
  sub_18F62C738((uint64_t)va1, v12);
  sub_18F5CE240((uint64_t)va2);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_18F621014(uint64_t a1, uint64_t *a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t *v18;
  uint64_t *v19;
  double v20;
  uint64_t v21;
  _BOOL4 v22;
  _BOOL8 v23;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  char **v30;

  v28 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v29 = 256;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  if (sub_18F6211AC(a1, a3, &v25, 0, a4, a5, a6, a7, a8, a9))
  {
    v18 = (uint64_t *)v25;
    v19 = (uint64_t *)v26;
    if (v25 == v26)
    {
      v22 = *a2 != 0;
      v20 = -1.0;
    }
    else
    {
      v20 = -1.0;
      do
      {
        if (v20 < 0.0 || *v18 && *(double *)(*v18 + 56) > v20)
        {
          sub_18F623A40(a2, v18);
          v20 = *(double *)(*v18 + 56);
        }
        v18 += 2;
      }
      while (v18 != v19);
      v21 = *a2;
      v22 = *a2 != 0;
      if (*a2 && v20 > 0.0)
      {
        v22 = 1;
        *(_BYTE *)(v21 + 64) = 1;
        *(_QWORD *)(v21 + 112) = 0x3FF0000000000000;
      }
    }
    v23 = v20 >= 0.0 && v22;
  }
  else
  {
    v23 = 0;
  }
  v30 = &v25;
  sub_18F62AB98((void ***)&v30);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v23;
}

void sub_18F62118C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_18F62AB98((void ***)va1);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_18F6211AC(uint64_t a1, int a2, char **a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v18;
  double v19;
  NSObject *v20;
  char *v21;
  unint64_t **v22;
  unint64_t **v23;
  unint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  double v44;
  unint64_t *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  _BOOL4 v52;
  BOOL v53;
  _BOOL4 v54;
  double v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  uint64_t *v60;
  uint64_t *v61;
  double v62;
  unint64_t *v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  _BOOL4 v70;
  _BOOL4 v71;
  int v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  double v78;
  double v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  _BYTE *v87;
  _QWORD *v88;
  unint64_t *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  __int128 *v96;
  __int128 *v97;
  unint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  __int128 v109;
  int64x2_t v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  _BYTE *v115;
  _QWORD *v116;
  NSObject *v117;
  _BOOL8 v118;
  double v120;
  NSObject *v121;
  double v122;
  __n128 v123;
  double v124;
  double v125;
  uint64_t v126;
  _BOOL4 v127;
  BOOL v128;
  uint64_t *v129;
  uint64_t v130;
  double *v131;
  unint64_t v132;
  double v133;
  double v134;
  double v135;
  uint64_t v136;
  double v137;
  double v138;
  uint64_t v139;
  double v140;
  double v141;
  double v142;
  double v143;
  uint64_t v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  _BOOL4 v155;
  double v156;
  double v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  double v163;
  uint64_t v164;
  double *v165;
  double v166;
  double v167;
  double v168;
  double *v169;
  double v170;
  double v171;
  NSObject *v172;
  char *v173;
  NSObject *v174;
  NSObject *v175;
  double v176;
  unint64_t *v177;
  unint64_t v178;
  _BOOL4 v179;
  double v180;
  char v181;
  double v182;
  double v183;
  double v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  char *v189;
  char *v190;
  double v191;
  double v192;
  double v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  double *v209;
  double *v210;
  double v211;
  int v212;
  uint64_t v213;
  double v214;
  NSObject *v215;
  char *v216;
  uint64_t v217;
  double v218;
  double *v219;
  double v220;
  double v221;
  double v222;
  long double v223;
  long double v224;
  uint64_t v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  long double v231;
  long double v232;
  double v233;
  double *v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  NSObject *v240;
  char *v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t *v250;
  char *v251;
  char **v252;
  NSObject *v253;
  NSObject *v254;
  NSObject *v255;
  NSObject *v256;
  int v257;
  NSObject *v258;
  char *v259;
  char *v260;
  char *v261;
  long double v262;
  double v263;
  long double v264;
  double v265;
  double v266;
  double v267;
  BOOL v268;
  char **v269;
  uint64_t v270;
  uint64_t v271;
  double v272;
  double v273;
  _BOOL4 v274;
  uint64_t *v275;
  double v276;
  double v277;
  int64x2_t v280;
  unint64_t v281;
  unint64_t **v282;
  unint64_t **v283;
  uint64_t v284;
  double v285;
  double v286;
  double v287;
  uint64_t v288;
  pthread_mutex_t *v289;
  __int16 v290;
  char *v291;
  char *v292;
  uint64_t v293;
  __int128 *v294;
  std::__shared_weak_count *v295;
  unint64_t v296;
  __int128 v297;
  __int128 __y;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  int v302;
  _BYTE v303[24];
  double v304;
  uint64_t v305;
  char v306;
  __int128 v307;
  _BYTE v308[23];
  _BYTE buf[48];
  __int128 v310;
  int v311;
  uint64_t v312;

  v312 = *MEMORY[0x1E0C80C00];
  v288 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v290 = 256;
  v18 = *(double *)(a1 + 200);
  if (*(double *)(a1 + 208) >= v18 + a9 * 4.0)
    v19 = v18 + a9 * 4.0;
  else
    v19 = *(double *)(a1 + 208);
  v286 = a7;
  v287 = a6;
  v285 = a9;
  v276 = a6;
  v277 = a7;
  if (sub_18F67F3B8((void **)(a1 + 232), a2, &v287, &v286, &v285, 5, a6, a7, a9) == 1)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v20 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349569;
      *(double *)&buf[4] = a5;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = v287;
      *(_WORD *)&buf[22] = 2049;
      *(double *)&buf[24] = v286;
      _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,getSnapCandidates,location shifting failed,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      *(_DWORD *)v303 = 134349569;
      *(double *)&v303[4] = a5;
      *(_WORD *)&v303[12] = 2049;
      *(double *)&v303[14] = v287;
      *(_WORD *)&v303[22] = 2049;
      v304 = v286;
      v21 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::getSnapCandidates(const double, const double, const double, const double, const double, const double, const CLClientLocationReferenceFrame, std::vector<CLGeoMapSnapDataPtr> &, const BOOL)", "CoreLocation: %s\n", v21);
      if (v21 != buf)
        free(v21);
    }
    goto LABEL_165;
  }
  v282 = 0;
  v283 = 0;
  v284 = 0;
  if ((sub_18F620640(a1, (uint64_t)&v282, a4, v287, v286, v19) & 1) == 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v117 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349569;
      *(double *)&buf[4] = a5;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = v287;
      *(_WORD *)&buf[22] = 2049;
      *(double *)&buf[24] = v286;
      _os_log_impl(&dword_18F5B3000, v117, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,getSnapCandidates,findRoadsNear failed,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_164;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_415;
    goto LABEL_429;
  }
  v22 = v282;
  v23 = v283;
  if (v282 == v283)
  {
    v120 = *(double *)(a1 + 208);
    if (v19 == v120)
    {
      v269 = a3;
      v280 = 0uLL;
      v281 = 0;
      *(_QWORD *)&v303[8] = 0;
      *(_QWORD *)&v303[16] = 0;
      *(_QWORD *)v303 = &v303[8];
LABEL_181:
      v116 = 0;
      *((_QWORD *)&__y + 1) = 0;
      *(_QWORD *)&v299 = 0;
      *(_QWORD *)&__y = (char *)&__y + 8;
      goto LABEL_182;
    }
    if ((sub_18F620640(a1, (uint64_t)&v282, a4, v287, v286, v120) & 1) != 0)
    {
      v22 = v282;
      v23 = v283;
      if (v282 != v283)
        goto LABEL_16;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v121 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134349569;
        *(double *)&buf[4] = a5;
        *(_WORD *)&buf[12] = 2049;
        *(double *)&buf[14] = v287;
        *(_WORD *)&buf[22] = 2049;
        *(double *)&buf[24] = v286;
        _os_log_impl(&dword_18F5B3000, v121, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,roads not available close to this point,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
      }
      if (!sub_18F5C4AE0(115, 2))
      {
LABEL_164:
        *(_QWORD *)buf = &v282;
        sub_18F62AB98((void ***)buf);
LABEL_165:
        v118 = 0;
LABEL_166:
        if ((_BYTE)v290)
          pthread_mutex_unlock(v289);
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v288 + 24))(v288);
        return v118;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
      {
LABEL_415:
        *(_DWORD *)v303 = 134349569;
        *(double *)&v303[4] = a5;
        *(_WORD *)&v303[12] = 2049;
        *(double *)&v303[14] = v287;
        *(_WORD *)&v303[22] = 2049;
        v304 = v286;
        v259 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::getSnapCandidates(const double, const double, const double, const double, const double, const double, const CLClientLocationReferenceFrame, std::vector<CLGeoMapSnapDataPtr> &, const BOOL)", "CoreLocation: %s\n", v259);
        if (v259 != buf)
          free(v259);
        goto LABEL_164;
      }
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v258 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349569;
        *(double *)&buf[4] = a5;
        *(_WORD *)&buf[12] = 2049;
        *(double *)&buf[14] = v287;
        *(_WORD *)&buf[22] = 2049;
        *(double *)&buf[24] = v286;
        _os_log_impl(&dword_18F5B3000, v258, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,getSnapCandidates,findRoadsNear failed,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_164;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_415;
    }
LABEL_429:
    dispatch_once(&qword_1EE172158, &unk_1E2990370);
    goto LABEL_415;
  }
LABEL_16:
  v269 = a3;
  v280 = 0uLL;
  v281 = 0;
  *(_QWORD *)&v303[8] = 0;
  *(_QWORD *)&v303[16] = 0;
  *(_QWORD *)v303 = &v303[8];
  if (v22 == v23)
    goto LABEL_181;
  do
  {
    v24 = *v22;
    v25 = (std::__shared_weak_count *)v22[1];
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(p_shared_owners);
      while (__stxr(v27 + 1, p_shared_owners));
      *(_QWORD *)buf = v24;
      *(_QWORD *)&buf[8] = v25;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
      memset(&buf[16], 0, 32);
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    else
    {
      *(_QWORD *)buf = *v22;
      memset(&buf[8], 0, 40);
    }
    v30 = sub_18F62C864((uint64_t **)v303, **v22, (*v22)[1], *v22);
    sub_18F623A40(v30 + 6, (uint64_t *)buf);
    sub_18F623A40(v30 + 8, (uint64_t *)&buf[16]);
    sub_18F623A40(v30 + 10, (uint64_t *)&buf[32]);
    v31 = *(std::__shared_weak_count **)&buf[40];
    if (*(_QWORD *)&buf[40])
    {
      v32 = (unint64_t *)(*(_QWORD *)&buf[40] + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = *(std::__shared_weak_count **)&buf[24];
    if (*(_QWORD *)&buf[24])
    {
      v35 = (unint64_t *)(*(_QWORD *)&buf[24] + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v38 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v22 += 2;
  }
  while (v22 != v23);
  v40 = *(_QWORD **)v303;
  if (*(_BYTE **)v303 == &v303[8])
    goto LABEL_181;
  do
  {
    memset(buf, 0, 24);
    v41 = v40 + 6;
    sub_18F624378(a1, v40 + 6, (char **)buf, 1);
    v294 = 0;
    v295 = 0;
    v42 = *(uint64_t **)buf;
    v43 = *(uint64_t **)&buf[8];
    if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
      goto LABEL_69;
    v44 = 360.0;
    do
    {
      v45 = (unint64_t *)*v42;
      if (!*v42)
        goto LABEL_66;
      v46 = *(_QWORD **)&v303[8];
      if (!*(_QWORD *)&v303[8])
        goto LABEL_66;
      v47 = *v45;
      v48 = v45[1];
      while (1)
      {
        v49 = v46[4];
        v50 = v46[5];
        v51 = v50 > v48;
        if (v49 != v47)
          v51 = v49 > v47;
        if (v51)
          goto LABEL_56;
        v52 = v50 < v48;
        v53 = v49 == v47;
        v54 = v49 < v47;
        if (v53)
          v54 = v52;
        if (!v54)
          break;
        ++v46;
LABEL_56:
        v46 = (_QWORD *)*v46;
        if (!v46)
          goto LABEL_66;
      }
      v55 = sub_18F704B68(*v41, 0);
      v56 = (*(_QWORD *)(*v42 + 144) - *(_QWORD *)(*v42 + 136)) >> 4;
      v57 = -1.0;
      if ((int)v56 >= 2)
        v57 = sub_18F704B68(*v42, (int)v56 - 2);
      v58 = fmod(v55 - v57, 360.0);
      if (v58 < 0.0)
        v58 = v58 + 360.0;
      if (v58 > 180.0)
        v58 = v58 + -360.0;
      v59 = fabs(v58);
      if (v59 < v44)
      {
        sub_18F623A40(&v294, v42);
        v44 = v59;
      }
LABEL_66:
      v42 += 2;
    }
    while (v42 != v43);
    if (v44 < 30.0)
      sub_18F623A40(v40 + 8, (uint64_t *)&v294);
LABEL_69:
    v291 = 0;
    v292 = 0;
    __y = 0uLL;
    *(_QWORD *)&v299 = 0;
    sub_18F623BF8(a1, v40 + 6, (char **)&__y, 1);
    v60 = (uint64_t *)*((_QWORD *)&__y + 1);
    v61 = (uint64_t *)__y;
    if ((_QWORD)__y == *((_QWORD *)&__y + 1))
      goto LABEL_98;
    v62 = 360.0;
    while (2)
    {
      v63 = (unint64_t *)*v61;
      if (!*v61)
        goto LABEL_95;
      v64 = *(_QWORD **)&v303[8];
      if (!*(_QWORD *)&v303[8])
        goto LABEL_95;
      v65 = *v63;
      v66 = v63[1];
      while (2)
      {
        v67 = v64[4];
        v68 = v64[5];
        v69 = v68 > v66;
        if (v67 != v65)
          v69 = v67 > v65;
        if (v69)
        {
LABEL_81:
          v64 = (_QWORD *)*v64;
          if (!v64)
            goto LABEL_95;
          continue;
        }
        break;
      }
      v70 = v68 < v66;
      v53 = v67 == v65;
      v71 = v67 < v65;
      if (v53)
        v71 = v70;
      if (v71)
      {
        ++v64;
        goto LABEL_81;
      }
      v72 = sub_18F705728(*v41, v61);
      v73 = *v61;
      if (v72)
      {
        v74 = sub_18F704B68(v73, 0);
        v75 = (*(_QWORD *)(*v41 + 144) - *(_QWORD *)(*v41 + 136)) >> 4;
        v76 = -1.0;
        if ((int)v75 >= 2)
          v76 = sub_18F704B68(*v41, (int)v75 - 2);
      }
      else
      {
        v77 = (*(_QWORD *)(v73 + 144) - *(_QWORD *)(v73 + 136)) >> 4;
        v74 = -1.0;
        if ((int)v77 >= 2)
          v74 = sub_18F704B68(v73, (int)v77 - 2);
        v76 = sub_18F704B68(*v41, 0);
      }
      v78 = fmod(v74 - v76, 360.0);
      if (v78 < 0.0)
        v78 = v78 + 360.0;
      if (v78 > 180.0)
        v78 = v78 + -360.0;
      v79 = fabs(v78);
      if (v79 < v62)
      {
        sub_18F623A40(&v291, v61);
        v62 = v79;
      }
LABEL_95:
      v61 += 2;
      if (v61 != v60)
        continue;
      break;
    }
    if (v62 < 30.0)
      sub_18F623A40(v40 + 10, (uint64_t *)&v291);
LABEL_98:
    *(_QWORD *)&v297 = &__y;
    sub_18F62AB98((void ***)&v297);
    v80 = (std::__shared_weak_count *)v292;
    if (v292)
    {
      v81 = (unint64_t *)(v292 + 8);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v83 = v295;
    if (v295)
    {
      v84 = (unint64_t *)&v295->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    *(_QWORD *)&__y = buf;
    sub_18F62AB98((void ***)&__y);
    v86 = (_QWORD *)v40[1];
    if (v86)
    {
      do
      {
        v87 = v86;
        v86 = (_QWORD *)*v86;
      }
      while (v86);
    }
    else
    {
      do
      {
        v87 = (_BYTE *)v40[2];
        v53 = *(_QWORD *)v87 == (_QWORD)v40;
        v40 = v87;
      }
      while (!v53);
    }
    v40 = v87;
  }
  while (v87 != &v303[8]);
  v88 = *(_QWORD **)v303;
  *((_QWORD *)&__y + 1) = 0;
  *(_QWORD *)&v299 = 0;
  *(_QWORD *)&__y = (char *)&__y + 8;
  if (*(_BYTE **)v303 == &v303[8])
  {
    v116 = 0;
  }
  else
  {
    do
    {
      v89 = (unint64_t *)v88[6];
      v90 = (std::__shared_weak_count *)v88[7];
      *(_QWORD *)&v297 = v89;
      *((_QWORD *)&v297 + 1) = v90;
      v91 = v89;
      if (v90)
      {
        v92 = (unint64_t *)&v90->__shared_owners_;
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
        v91 = (unint64_t *)v88[6];
      }
      if (v91 && !sub_18F62A584((uint64_t)&__y, v89))
      {
        v294 = 0;
        v295 = 0;
        v296 = 0;
        sub_18F626A98((uint64_t)(v88 + 6), (uint64_t **)v303, (uint64_t *)&v294);
        v94 = v295;
        if ((unint64_t)v295 >= v296)
        {
          v95 = (std::__shared_weak_count *)sub_18F62C964((uint64_t *)&v294, v88 + 6);
        }
        else
        {
          sub_18F62BBE0(v295, v88 + 6);
          v95 = v94 + 2;
        }
        v295 = v95;
        sub_18F62704C((uint64_t)(v88 + 6), (uint64_t **)v303, (uint64_t *)&v294);
        v291 = 0;
        v292 = 0;
        v293 = 0;
        v96 = v294;
        v97 = (__int128 *)v295;
        while (v96 != v97)
        {
          v98 = *(unint64_t **)v96;
          if (*(_QWORD *)v96)
          {
            *(_QWORD *)buf = *(_QWORD *)v96;
            *((_BYTE *)sub_18F62CB48((uint64_t **)&__y, v98, (uint64_t)&unk_18F772428, (_OWORD **)buf) + 48) = 1;
            sub_18F623AB8(&v291, v96);
          }
          v96 += 3;
        }
        v99 = v280.i64[1];
        if (v280.i64[1] >= v281)
        {
          v101 = 0xAAAAAAAAAAAAAAABLL * ((v280.i64[1] - v280.i64[0]) >> 3);
          v102 = v101 + 1;
          if (v101 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_18F5F7864();
          if (0x5555555555555556 * ((uint64_t)(v281 - v280.i64[0]) >> 3) > v102)
            v102 = 0x5555555555555556 * ((uint64_t)(v281 - v280.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v281 - v280.i64[0]) >> 3) >= 0x555555555555555)
            v103 = 0xAAAAAAAAAAAAAAALL;
          else
            v103 = v102;
          *(_QWORD *)&buf[32] = &v281;
          if (v103)
          {
            if (v103 > 0xAAAAAAAAAAAAAAALL)
              sub_18F5F689C();
            v104 = (char *)operator new(24 * v103);
          }
          else
          {
            v104 = 0;
          }
          v105 = &v104[8 * ((v280.i64[1] - v280.i64[0]) >> 3)];
          *(_QWORD *)buf = v104;
          *(_QWORD *)&buf[8] = v105;
          *(_QWORD *)&buf[16] = v105;
          *(_QWORD *)&buf[24] = &v104[24 * v103];
          *((_QWORD *)v105 + 1) = 0;
          *((_QWORD *)v105 + 2) = 0;
          *(_QWORD *)v105 = 0;
          sub_18F62AA84(&v104[24 * v101], v291, v292, (v292 - v291) >> 4);
          v106 = *(_QWORD *)&buf[8];
          v100 = *(_QWORD *)&buf[16] + 24;
          *(_QWORD *)&buf[16] += 24;
          v107 = (_QWORD *)v280.i64[1];
          v108 = (_QWORD *)v280.i64[0];
          if (v280.i64[1] == v280.i64[0])
          {
            v110 = vdupq_n_s64(v280.u64[1]);
          }
          else
          {
            do
            {
              *(_QWORD *)(v106 - 24) = 0;
              *(_QWORD *)(v106 - 16) = 0;
              v106 -= 24;
              *(_QWORD *)(v106 + 16) = 0;
              v109 = *(_OWORD *)(v107 - 3);
              v107 -= 3;
              *(_OWORD *)v106 = v109;
              *(_QWORD *)(v106 + 16) = v107[2];
              *v107 = 0;
              v107[1] = 0;
              v107[2] = 0;
            }
            while (v107 != v108);
            v110 = v280;
            v100 = *(_QWORD *)&buf[16];
          }
          v280.i64[0] = v106;
          v280.i64[1] = v100;
          *(int64x2_t *)&buf[8] = v110;
          v111 = v281;
          v281 = *(_QWORD *)&buf[24];
          *(_QWORD *)&buf[24] = v111;
          *(_QWORD *)buf = v110.i64[0];
          sub_18F62CBD0((uint64_t)buf);
          v90 = (std::__shared_weak_count *)*((_QWORD *)&v297 + 1);
        }
        else
        {
          *(_QWORD *)v280.i64[1] = 0;
          *(_QWORD *)(v99 + 8) = 0;
          *(_QWORD *)(v99 + 16) = 0;
          sub_18F62AA84((char *)v99, v291, v292, (v292 - v291) >> 4);
          v100 = v99 + 24;
        }
        v280.i64[1] = v100;
        *(_QWORD *)buf = &v291;
        sub_18F62AB98((void ***)buf);
        *(_QWORD *)buf = &v294;
        sub_18F62CAB8((void ***)buf);
      }
      if (v90)
      {
        v112 = (unint64_t *)&v90->__shared_owners_;
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v114 = (_QWORD *)v88[1];
      if (v114)
      {
        do
        {
          v115 = v114;
          v114 = (_QWORD *)*v114;
        }
        while (v114);
      }
      else
      {
        do
        {
          v115 = (_BYTE *)v88[2];
          v53 = *(_QWORD *)v115 == (_QWORD)v88;
          v88 = v115;
        }
        while (!v53);
      }
      v88 = v115;
    }
    while (v115 != &v303[8]);
    v116 = (_QWORD *)*((_QWORD *)&__y + 1);
  }
LABEL_182:
  sub_18F62C738((uint64_t)&__y, v116);
  sub_18F62CA64(*(_QWORD **)&v303[8]);
  memset(&buf[7], 0, 32);
  *(_QWORD *)&v303[16] = 0;
  v305 = 0;
  v306 = 0;
  v307 = *(_OWORD *)buf;
  *(_OWORD *)v308 = *(_OWORD *)&buf[16];
  *(_QWORD *)&v308[15] = 0;
  *(double *)v303 = v285 * v285 * 0.5;
  *(double *)&v303[8] = *(double *)v303;
  v122 = a10 * a10;
  if (a10 <= 0.0)
    v122 = -1.0;
  v304 = v122;
  sub_18F6E4730((uint64_t)v303);
  v125 = v286;
  v124 = v287;
  v294 = 0;
  v295 = 0;
  v296 = 0;
  v270 = v280.i64[1];
  v126 = v280.i64[0];
  if (v280.i64[0] == v280.i64[1])
    goto LABEL_378;
  v123.n128_f64[0] = a8;
  v127 = a8 >= 0.0;
  if (a10 <= 0.0)
    v127 = 0;
  v274 = v127;
  v128 = a10 < 0.0 || a8 < 0.0;
  v268 = v128;
  v272 = v286;
  v273 = v287;
  while (2)
  {
    v291 = 0;
    v292 = 0;
    v293 = 0;
    v129 = *(uint64_t **)v126;
    v271 = v126;
    v275 = *(uint64_t **)(v126 + 8);
    if (*(uint64_t **)v126 == v275)
    {
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)buf = 0;
      goto LABEL_356;
    }
LABEL_192:
    v130 = *v129;
    if (!*v129)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v253 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = a5;
        _os_log_impl(&dword_18F5B3000, v253, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,road is nullptr", buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_403;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_423;
      goto LABEL_428;
    }
    v131 = *(double **)(v130 + 136);
    v132 = *(_QWORD *)(v130 + 144) - (_QWORD)v131;
    if ((int)(v132 >> 4) <= 1)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v254 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v254, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990370);
        LOWORD(__y) = 0;
        v260 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "CoreLocation: %s\n", v260);
        if (v260 != buf)
          free(v260);
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v255 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = a5;
        _os_log_impl(&dword_18F5B3000, v255, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,findClosestPointOnRoad returned false", buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_403;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_423;
      goto LABEL_428;
    }
    v133 = *v131;
    v134 = v131[1];
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    v135 = 0.0;
    sub_18F5BD37C((double *)(a1 + 16), (double *)buf, (double *)&buf[8], (double *)&__y, v124, v125, 0.0, v133, v134, 0.0);
    v136 = 0;
    v137 = *(double *)buf;
    v138 = *(double *)&buf[8];
    v139 = (v132 >> 4) - 1;
    v140 = -1.0;
    v141 = 0.0;
    do
    {
      v142 = v137;
      v143 = v138;
      v144 = *(_QWORD *)(v130 + 136) + v136;
      v145 = *(double *)(v144 + 16);
      v146 = *(double *)(v144 + 24);
      __y = 0uLL;
      sub_18F5BD37C((double *)(a1 + 16), (double *)&__y, (double *)&__y + 1, (double *)&v297, v124, v125, 0.0, v145, v146, 0.0);
      v138 = *((double *)&__y + 1);
      v137 = *(double *)&__y;
      v147 = (v142 - *(double *)&__y) * (v142 - *(double *)&__y)
           + (v143 - *((double *)&__y + 1)) * (v143 - *((double *)&__y + 1));
      v148 = 0.0;
      v149 = 0.0 - v142;
      if (v147 < 0.001)
      {
        v150 = v149 * v149;
        v151 = 0.0 - v143;
LABEL_197:
        v152 = v150 + v151 * v151;
        goto LABEL_202;
      }
      v148 = ((0.0 - v143) * (*((double *)&__y + 1) - v143) + v149 * (*(double *)&__y - v142)) / v147;
      if (v148 >= 0.0)
      {
        if (v148 <= 1.0)
        {
          v150 = (0.0 - (v142 + (*(double *)&__y - v142) * v148)) * (0.0 - (v142 + (*(double *)&__y - v142) * v148));
          v151 = 0.0 - (v143 + (*((double *)&__y + 1) - v143) * v148);
          goto LABEL_197;
        }
        v152 = (0.0 - *(double *)&__y) * (0.0 - *(double *)&__y)
             + (0.0 - *((double *)&__y + 1)) * (0.0 - *((double *)&__y + 1));
        v148 = 1.0;
      }
      else
      {
        v152 = v149 * v149 + (0.0 - v143) * (0.0 - v143);
        v148 = 0.0;
      }
LABEL_202:
      v153 = sqrt(v147);
      v154 = sqrt(v152);
      v155 = v140 < 0.0;
      if (v154 < v140)
        v155 = 1;
      v156 = v141 + v153 * v148;
      if (v155)
      {
        v140 = v154;
        v135 = v156;
      }
      v141 = v141 + v153;
      v136 += 16;
      --v139;
    }
    while (v139);
    if (v141 >= 0.001)
      v157 = v135 / v141;
    else
      v157 = 0.0;
    v158 = *v129;
    v159 = (std::__shared_weak_count *)v129[1];
    if (v159)
    {
      v160 = (unint64_t *)&v159->__shared_owners_;
      do
        v161 = __ldxr(v160);
      while (__stxr(v161 + 1, v160));
    }
    if (!v158)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v172 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v172, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
      }
      v163 = 0.0;
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_242;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      LOWORD(__y) = 0;
      v173 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v173);
      goto LABEL_353;
    }
    v162 = (*(_QWORD *)(v158 + 144) - *(_QWORD *)(v158 + 136)) >> 4;
    if ((int)v162 <= 0)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v174 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v174, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", buf, 2u);
      }
      v163 = 0.0;
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_242;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      LOWORD(__y) = 0;
      v173 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v173);
      goto LABEL_353;
    }
    v163 = 0.0;
    if ((_DWORD)v162 == 1)
      goto LABEL_243;
    sub_18F7047B4(v158);
    v164 = (uint64_t)(*(_QWORD *)(v158 + 168) - *(_QWORD *)(v158 + 160)) >> 3;
    if (v164 != (_DWORD)v162 - 1)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v175 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v175, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_242;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      LOWORD(__y) = 0;
      v173 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v173);
      v125 = v272;
      v124 = v273;
LABEL_353:
      if (v173 != buf)
        free(v173);
LABEL_242:
      LOBYTE(v162) = 0;
LABEL_243:
      v166 = 0.0;
      v176 = 0.0;
      goto LABEL_244;
    }
    sub_18F7047B4(v158);
    if (v157 < 0.000001)
    {
      v165 = *(double **)(v158 + 136);
      v163 = *v165;
      v166 = v165[1];
      v167 = v165[2];
      v168 = v165[3];
      *(_QWORD *)buf = 0;
      *(_QWORD *)&__y = 0;
      v169 = (double *)(a1 + 16);
      v170 = v163;
      v171 = v166;
      goto LABEL_315;
    }
    if (v157 >= 0.999999)
    {
      v217 = *(_QWORD *)(v158 + 136) + 16 * v164;
      v163 = *(double *)v217;
      v166 = *(double *)(v217 + 8);
      v170 = *(double *)(v217 - 16);
      v171 = *(double *)(v217 - 8);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&__y = 0;
      v169 = (double *)(a1 + 16);
      v167 = v163;
      v168 = v166;
LABEL_315:
      sub_18F5BD37C(v169, (double *)buf, (double *)&__y, (double *)&v297, v170, v171, 0.0, v167, v168, 0.0);
      v218 = atan2(*(long double *)&__y, *(long double *)buf);
      if (v218 < 0.0)
        v218 = v218 + 6.28318531;
      v176 = v218 * 57.2957795;
LABEL_318:
      LOBYTE(v162) = 1;
      goto LABEL_244;
    }
    v209 = *(double **)(v158 + 160);
    v210 = *(double **)(v158 + 168);
    if (v209 == v210)
    {
LABEL_303:
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v215 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v215, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990370);
        LOWORD(__y) = 0;
        v216 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v216);
        if (v216 != buf)
          free(v216);
        LOBYTE(v162) = 0;
        v166 = 0.0;
        v176 = 0.0;
        v163 = 0.0;
        goto LABEL_313;
      }
      goto LABEL_242;
    }
    v211 = 0.0;
    v212 = 2;
    v213 = 24;
    while (1)
    {
      v214 = *v209 / *(double *)(v158 + 40);
      if (vabdd_f64(v157, v211 + v214) < 0.000001)
        break;
      if (v211 + v214 > v157)
      {
        v234 = (double *)(*(_QWORD *)(v158 + 136) + v213);
        v235 = *(v234 - 2);
        v236 = *v234;
        v237 = v235 + 360.0;
        if (v235 >= 0.0)
          v237 = *(v234 - 2);
        v238 = v236 + 360.0;
        if (v236 >= 0.0)
          v238 = *v234;
        v239 = v238 - v237;
        v265 = *v234;
        if (v239 <= 180.0)
        {
          if (v239 < -180.0)
            v239 = v239 + 360.0;
        }
        else
        {
          v239 = v239 + -360.0;
        }
        v242 = (v157 - v211) / v214;
        v263 = *(v234 - 3);
        v243 = *(v234 - 1);
        v244 = fmod(v235 + v239 * v242, 360.0);
        if (v244 <= -180.0)
        {
          v267 = v244 + 360.0;
          v245 = v265;
        }
        else
        {
          v267 = v244;
          v245 = v265;
          if (v244 > 180.0)
            v267 = v244 + -360.0;
        }
        v163 = v263 + (v243 - v263) * v242;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&__y = 0;
        sub_18F5BD37C((double *)(a1 + 16), (double *)buf, (double *)&__y, (double *)&v297, v263, v235, 0.0, v243, v245, 0.0);
        v246 = atan2(*(long double *)&__y, *(long double *)buf);
        if (v246 < 0.0)
          v246 = v246 + 6.28318531;
        v176 = v246 * 57.2957795;
        LOBYTE(v162) = 1;
        v166 = v267;
        v124 = v273;
        goto LABEL_244;
      }
      ++v209;
      v213 += 16;
      ++v212;
      v211 = v211 + v214;
      if (v209 == v210)
        goto LABEL_303;
    }
    if (v212 < (int)v162)
    {
      v219 = (double *)(*(_QWORD *)(v158 + 136) + v213);
      v163 = *(v219 - 1);
      v220 = *v219;
      v221 = *(v219 - 3);
      v222 = *(v219 - 2);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&__y = 0;
      v266 = v220;
      sub_18F5BD37C((double *)(a1 + 16), (double *)buf, (double *)&__y, (double *)&v297, v221, v222, 0.0, v163, v220, 0.0);
      v223 = *(double *)&__y;
      v224 = *(double *)buf;
      v225 = *(_QWORD *)(v158 + 136) + v213;
      v226 = *(double *)(v225 + 8);
      v227 = *(double *)(v225 + 16);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&__y = 0;
      sub_18F5BD37C((double *)(a1 + 16), (double *)buf, (double *)&__y, (double *)&v297, v163, v220, 0.0, v226, v227, 0.0);
      v262 = *(double *)&__y;
      v264 = *(double *)buf;
      v228 = atan2(v223, v224);
      if (v228 < 0.0)
        v228 = v228 + 6.28318531;
      v229 = v228 * 57.2957795;
      v230 = atan2(v262, v264);
      if (v230 < 0.0)
        v230 = v230 + 6.28318531;
      v231 = v230 * 57.2957795;
      v232 = v229;
      v166 = v266;
      sub_18F5F3E84(v232, v231);
      v176 = v233;
      goto LABEL_318;
    }
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v240 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v240, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", buf, 2u);
    }
    v163 = 0.0;
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_242;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    LOWORD(__y) = 0;
    v241 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v241);
    if (v241 != buf)
      free(v241);
    LOBYTE(v162) = 0;
    v166 = 0.0;
    v176 = 0.0;
LABEL_313:
    v125 = v272;
    v124 = v273;
LABEL_244:
    if (v159)
    {
      v177 = (unint64_t *)&v159->__shared_owners_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
      }
    }
    if ((v162 & 1) != 0)
    {
      memset(buf, 0, 24);
      *(_QWORD *)&buf[24] = 0x3FF0000000000000;
      *(_OWORD *)&buf[32] = 0u;
      v310 = 0u;
      v311 = 0;
      sub_18F5BD37C((double *)(a1 + 16), (double *)&buf[40], (double *)&buf[32], (double *)&v310, v163, v166, 0.0, v287, v286, 0.0);
      v179 = v176 >= 0.0 && v274;
      if (v179)
      {
        v180 = fmod(a8 - v176, 360.0);
        if (v180 < 0.0)
          v180 = v180 + 360.0;
        if (v180 > 180.0)
          v180 = v180 + -360.0;
        *((_QWORD *)&v310 + 1) = fabs(v180);
      }
      sub_18F6E4CD8((uint64_t)v303, (uint64_t)buf);
      v181 = !v179;
      if ((*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) != 2)
        v181 = 1;
      if ((v181 & 1) != 0)
      {
        v185 = 1;
      }
      else
      {
        __y = 0uLL;
        *(_QWORD *)&v299 = 0;
        *((_QWORD *)&v299 + 1) = 0x3FF0000000000000;
        v302 = 0;
        v182 = v176;
        v183 = fmod(v176 + 180.0, 360.0);
        if (v183 >= 0.0)
          v176 = v183;
        else
          v176 = v183 + 360.0;
        v300 = *(_OWORD *)&buf[32];
        *(_QWORD *)&v301 = v310;
        v184 = fmod(a8 - v176, 360.0);
        if (v184 < 0.0)
          v184 = v184 + 360.0;
        if (v184 > 180.0)
          v184 = v184 + -360.0;
        *((_QWORD *)&v301 + 1) = fabs(v184);
        sub_18F6E4CD8((uint64_t)v303, (uint64_t)&__y);
        if (*(double *)&__y <= *(double *)buf)
        {
          v185 = 1;
          v176 = v182;
        }
        else
        {
          v185 = 0;
          *(_OWORD *)&buf[32] = v300;
          v310 = v301;
          v311 = v302;
          *(_OWORD *)buf = __y;
          *(_OWORD *)&buf[16] = v299;
        }
        v125 = v272;
        v124 = v273;
      }
      v186 = *(_QWORD *)buf;
      v187 = *v129;
      v188 = (std::__shared_weak_count *)v129[1];
      v189 = (char *)operator new(0xC0uLL);
      v190 = v189;
      v191 = v176;
      v192 = v163;
      v193 = v157;
      *((_QWORD *)v189 + 1) = 0;
      *((_QWORD *)v189 + 2) = 0;
      *(_QWORD *)v189 = &off_1E298DE80;
      if (v188)
      {
        v194 = (unint64_t *)&v188->__shared_owners_;
        do
          v195 = __ldxr(v194);
        while (__stxr(v195 + 1, v194));
      }
      v196 = *(_QWORD *)&buf[40];
      v197 = *(_QWORD *)&buf[32];
      v198 = *((_QWORD *)&v310 + 1);
      *((_QWORD *)v189 + 3) = 0;
      *((_QWORD *)v189 + 4) = 0;
      *((_WORD *)v189 + 44) = 256;
      *((_QWORD *)v189 + 13) = 0;
      *((_QWORD *)v189 + 14) = 0;
      *((_QWORD *)v189 + 12) = 0;
      v189[120] = 0;
      *((_OWORD *)v189 + 8) = xmmword_18F772330;
      *((_DWORD *)v189 + 36) = 0;
      *(_OWORD *)(v189 + 152) = 0u;
      *(_OWORD *)(v189 + 168) = 0u;
      *((_DWORD *)v189 + 46) = 0;
      *(_QWORD *)&__y = v187;
      *((_QWORD *)&__y + 1) = v188;
      if (v188)
      {
        v199 = (unint64_t *)&v188->__shared_owners_;
        do
          v200 = __ldxr(v199);
        while (__stxr(v200 + 1, v199));
      }
      *((double *)v189 + 5) = a5;
      *((double *)v189 + 6) = v192;
      *((double *)v189 + 7) = v166;
      *((double *)v189 + 8) = v191;
      *((double *)v189 + 9) = v193;
      *((_QWORD *)v189 + 10) = v186;
      sub_18F623A40((_QWORD *)v189 + 3, (uint64_t *)&__y);
      v190[88] = 1;
      v190[89] = v185;
      *((_QWORD *)v190 + 12) = v196;
      *((_QWORD *)v190 + 13) = v197;
      *((_QWORD *)v190 + 14) = v198;
      *((double *)v190 + 19) = v276;
      *((double *)v190 + 20) = v277;
      *((double *)v190 + 21) = a8;
      v201 = (std::__shared_weak_count *)*((_QWORD *)&__y + 1);
      if (*((_QWORD *)&__y + 1))
      {
        v202 = (unint64_t *)(*((_QWORD *)&__y + 1) + 8);
        do
          v203 = __ldaxr(v202);
        while (__stlxr(v203 - 1, v202));
        if (!v203)
        {
          ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
          std::__shared_weak_count::__release_weak(v201);
        }
      }
      if (v188)
      {
        v204 = (unint64_t *)&v188->__shared_owners_;
        do
          v205 = __ldaxr(v204);
        while (__stlxr(v205 - 1, v204));
        if (!v205)
        {
          ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
          std::__shared_weak_count::__release_weak(v188);
        }
      }
      *(_QWORD *)&v297 = v190 + 24;
      *((_QWORD *)&v297 + 1) = v190;
      sub_18F623AB8(&v291, &v297);
      v206 = (std::__shared_weak_count *)*((_QWORD *)&v297 + 1);
      if (*((_QWORD *)&v297 + 1))
      {
        v207 = (unint64_t *)(*((_QWORD *)&v297 + 1) + 8);
        do
          v208 = __ldaxr(v207);
        while (__stlxr(v208 - 1, v207));
        if (!v208)
        {
          ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
          std::__shared_weak_count::__release_weak(v206);
        }
      }
      v129 += 2;
      if (v129 == v275)
      {
        v250 = (uint64_t *)v291;
        v251 = v292;
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)buf = 0;
        if (v291 != v292)
        {
          v123.n128_u64[0] = -1.0;
          do
          {
            if (*v250 && (v123.n128_f64[0] < 0.0 || *(double *)(*v250 + 56) > v123.n128_f64[0]))
            {
              sub_18F623A40(buf, v250);
              v123.n128_u64[0] = *(_QWORD *)(*v250 + 56);
            }
            v250 += 2;
          }
          while (v250 != (uint64_t *)v251);
          if (v123.n128_f64[0] >= 0.0 && *(_QWORD *)buf && **(_QWORD **)buf)
          {
            v252 = v269;
            if (!v268)
            {
              if (*(double *)(*(_QWORD *)buf + 88) >= 135.0)
                v252 = (char **)&v294;
              else
                v252 = v269;
            }
            sub_18F623AB8(v252, (__int128 *)buf);
          }
        }
LABEL_356:
        v247 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v248 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v249 = __ldaxr(v248);
          while (__stlxr(v249 - 1, v248));
          if (!v249)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v247->__on_zero_shared)(v247, v123);
            std::__shared_weak_count::__release_weak(v247);
          }
        }
        *(_QWORD *)buf = &v291;
        sub_18F62AB98((void ***)buf);
        v126 = v271 + 24;
        if (v271 + 24 == v270)
        {
LABEL_378:
          v118 = *v269 != v269[1];
          goto LABEL_404;
        }
        continue;
      }
      goto LABEL_192;
    }
    break;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990370);
  v256 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    *(double *)&buf[4] = a5;
    _os_log_impl(&dword_18F5B3000, v256, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,interpolateOnRoad,interpolateProjections returned false", buf, 0xCu);
  }
  if (!sub_18F5C4AE0(115, 0))
    goto LABEL_403;
  bzero(buf, 0x65CuLL);
  if (qword_1EE172158 != -1)
LABEL_428:
    dispatch_once(&qword_1EE172158, &unk_1E2990370);
LABEL_423:
  LODWORD(__y) = 134349056;
  *(double *)((char *)&__y + 4) = a5;
  v261 = (char *)_os_log_send_and_compose_impl();
  sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::getSnapCandidates(const double, const double, const double, const double, const double, const double, const CLClientLocationReferenceFrame, std::vector<CLGeoMapSnapDataPtr> &, const BOOL)", "CoreLocation: %s\n", v261);
  if (v261 != buf)
    free(v261);
LABEL_403:
  *(_QWORD *)buf = &v291;
  sub_18F62AB98((void ***)buf);
  v118 = 0;
LABEL_404:
  *(_QWORD *)buf = &v294;
  sub_18F62AB98((void ***)buf);
  *(_QWORD *)buf = &v280;
  sub_18F62C498((void ***)buf);
  v257 = HIBYTE(v290);
  *(_QWORD *)buf = &v282;
  sub_18F62AB98((void ***)buf);
  if (v257)
    goto LABEL_166;
  return v118;
}

void sub_18F623894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void **a63)
{
  a63 = (void **)&a34;
  sub_18F62AB98(&a63);
  sub_18F5CE240((uint64_t)&a40);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F623A40(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t sub_18F623AB8(char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_18F5F7864();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)sub_18F62AB64(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = sub_18F62C334((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

uint64_t sub_18F623BF8(uint64_t a1, uint64_t *a2, char **a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  double Current;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  int v25;
  char *v26;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  int v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  __int128 *v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char *i;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char *j;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  int v70;
  _QWORD v71[2];
  void *__p;
  char *v73;
  char *v74;
  void **v75;
  void **v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD v81[2];
  uint64_t v82;
  pthread_mutex_t *v83;
  __int16 v84;

  v7 = a1;
  v82 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v84 = 256;
  if (!*a2)
  {
    v14 = 0;
    goto LABEL_116;
  }
  if (!sub_18F61F044(v7, (__int128 *)*a2, 0, a3))
  {
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    if (*(_BYTE *)(v7 + 216)
      && ((Current = CFAbsoluteTimeGetCurrent(), v16 = *(_QWORD *)(*a2 + 144), v16 == *(_QWORD *)(*a2 + 136))
        ? (v17 = 0.0, v18 = 0.0)
        : (v17 = *(double *)(v16 - 16), v18 = *(double *)(v16 - 8)),
          (sub_18F61F834(v7, 0, 1, 0, Current, v17, v18, *(double *)(v7 + 160)) & 1) == 0))
    {
      v14 = 0;
    }
    else
    {
      v19 = *(_QWORD *)(*a2 + 144);
      if (v19 == *(_QWORD *)(*a2 + 136))
      {
        v20 = 0.0;
        v21 = 0.0;
      }
      else
      {
        v20 = *(double *)(v19 - 16);
        v21 = *(double *)(v19 - 8);
      }
      sub_18F620730(v7, (_QWORD *)(v7 + 264), (uint64_t)&v78, 1, v20, v21, *(double *)(v7 + 160));
      v22 = *(_QWORD *)(*a2 + 144);
      if (v22 == *(_QWORD *)(*a2 + 136))
      {
        v23 = 0.0;
        v24 = 0.0;
      }
      else
      {
        v23 = *(double *)(v22 - 16);
        v24 = *(double *)(v22 - 8);
      }
      sub_18F620730(v7, (_QWORD *)(v7 + 240), (uint64_t)&v75, 1, v23, v24, *(double *)(v7 + 160));
      __p = 0;
      v73 = 0;
      v74 = 0;
      v25 = *(_DWORD *)(*a2 + 112);
      v26 = (char *)operator new(4uLL);
      v70 = a4;
      *(_DWORD *)v26 = v25;
      v73 = v26 + 4;
      v74 = v26 + 4;
      v27 = v78;
      v28 = v79;
      for (__p = v26; v27 != v28; v27 += 2)
      {
        if (sub_18F705728(*a2, v27))
        {
          v29 = *(_DWORD *)(*v27 + 112);
          v30 = v73;
          if (v73 >= v74)
          {
            v32 = (char *)__p;
            v33 = (v73 - (_BYTE *)__p) >> 2;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 62)
              sub_18F5F7864();
            v35 = v74 - (_BYTE *)__p;
            if ((v74 - (_BYTE *)__p) >> 1 > v34)
              v34 = v35 >> 1;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
              v36 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              v37 = (char *)sub_18F62C554((uint64_t)&v74, v36);
              v32 = (char *)__p;
              v30 = v73;
            }
            else
            {
              v37 = 0;
            }
            v38 = &v37[4 * v33];
            *(_DWORD *)v38 = v29;
            v31 = v38 + 4;
            while (v30 != v32)
            {
              v39 = *((_DWORD *)v30 - 1);
              v30 -= 4;
              *((_DWORD *)v38 - 1) = v39;
              v38 -= 4;
            }
            __p = v38;
            v73 = v31;
            v74 = &v37[4 * v36];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *(_DWORD *)v73 = v29;
            v31 = v30 + 4;
          }
          v73 = v31;
        }
        if ((*(_DWORD *)(v7 + 152) & 0xFFFFFFFE) == 2 && sub_18F7057F0(*a2, v27))
        {
          v40 = *(_DWORD *)(*v27 + 108);
          v41 = v73;
          if (v73 >= v74)
          {
            v43 = (char *)__p;
            v44 = (v73 - (_BYTE *)__p) >> 2;
            v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 62)
              sub_18F5F7864();
            v46 = v74 - (_BYTE *)__p;
            if ((v74 - (_BYTE *)__p) >> 1 > v45)
              v45 = v46 >> 1;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
              v47 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v47 = v45;
            if (v47)
            {
              v48 = (char *)sub_18F62C554((uint64_t)&v74, v47);
              v43 = (char *)__p;
              v41 = v73;
            }
            else
            {
              v48 = 0;
            }
            v49 = &v48[4 * v44];
            *(_DWORD *)v49 = v40;
            v42 = v49 + 4;
            while (v41 != v43)
            {
              v50 = *((_DWORD *)v41 - 1);
              v41 -= 4;
              *((_DWORD *)v49 - 1) = v50;
              v49 -= 4;
            }
            __p = v49;
            v73 = v42;
            v74 = &v48[4 * v47];
            if (v43)
              operator delete(v43);
          }
          else
          {
            *(_DWORD *)v73 = v40;
            v42 = v41 + 4;
          }
          v73 = v42;
        }
      }
      v51 = (__int128 *)v75;
      v52 = (__int128 *)v76;
      if (v75 != v76)
      {
        while (1)
        {
          v53 = *(_QWORD *)v51;
          if (!*(_QWORD *)v51)
            goto LABEL_91;
          v54 = *a2;
          if (*(_QWORD *)v53 == *(_QWORD *)*a2 && *(_QWORD *)(v53 + 8) == *(_QWORD *)(v54 + 8))
            goto LABEL_91;
          v55 = *(unsigned __int8 *)(v53 + 17);
          if (*(_BYTE *)(v54 + 17))
            break;
          if (!v55)
            goto LABEL_73;
LABEL_91:
          if (++v51 == v52)
            goto LABEL_99;
        }
        if (!v55)
          goto LABEL_91;
LABEL_73:
        if (sub_18F705728(v54, (uint64_t *)v51))
        {
          v56 = *a2;
          v57 = *(_QWORD *)v51;
          if (vabdd_f64(*(double *)(*a2 + 128), *(double *)(*(_QWORD *)v51 + 120)) < 1.0)
          {
            if (*(_BYTE *)(v56 + 117)
              || (~*(_DWORD *)(v56 + 112) & 0x7FFFFFFF) == 0
              || *(_BYTE *)(v57 + 116)
              || (v58 = *(_DWORD *)(v57 + 108), (~v58 & 0x7FFFFFFF) == 0))
            {
LABEL_90:
              sub_18F623AB8(a3, v51);
              goto LABEL_91;
            }
            for (i = (char *)__p; i != v73; i += 4)
            {
              if (*(_DWORD *)i == v58)
                goto LABEL_90;
            }
          }
        }
        if ((*(_DWORD *)(v7 + 152) & 0xFFFFFFFE) != 2)
          goto LABEL_91;
        if (!sub_18F7057F0(*a2, (uint64_t *)v51))
          goto LABEL_91;
        v60 = *a2;
        v61 = *(_QWORD *)v51;
        if (vabdd_f64(*(double *)(*a2 + 128), *(double *)(*(_QWORD *)v51 + 128)) >= 1.0)
          goto LABEL_91;
        if (!*(_BYTE *)(v60 + 117) && (~*(_DWORD *)(v60 + 112) & 0x7FFFFFFF) != 0 && !*(_BYTE *)(v61 + 117))
        {
          v62 = *(_DWORD *)(v61 + 112);
          if ((~v62 & 0x7FFFFFFF) != 0)
          {
            for (j = (char *)__p; j != v73; j += 4)
            {
              if (*(_DWORD *)j == v62)
                goto LABEL_90;
            }
            goto LABEL_91;
          }
        }
        goto LABEL_90;
      }
LABEL_99:
      sub_18F61EE08(v7, (__int128 *)*a2, 0, (__int128 **)a3);
      if (v70)
      {
        v64 = (std::__shared_weak_count *)a2[1];
        v71[0] = *a2;
        v71[1] = v64;
        if (v64)
        {
          p_shared_owners = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldxr(p_shared_owners);
          while (__stxr(v66 + 1, p_shared_owners));
        }
        sub_18F6242C0((uint64_t)v71, (uint64_t)a3);
        if (v64)
        {
          v67 = (unint64_t *)&v64->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
      }
      if (__p)
      {
        v73 = (char *)__p;
        operator delete(__p);
      }
      v14 = 1;
    }
    __p = &v75;
    sub_18F62AB98((void ***)&__p);
    v75 = (void **)&v78;
    sub_18F62AB98(&v75);
    goto LABEL_112;
  }
  if (a4)
  {
    v8 = *a2;
    v9 = (std::__shared_weak_count *)a2[1];
    v81[0] = v8;
    v81[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    sub_18F6242C0((uint64_t)v81, (uint64_t)a3);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  ++*(_QWORD *)(v7 + 320);
  v14 = 1;
LABEL_112:
  if (HIBYTE(v84))
  {
    if ((_BYTE)v84)
    {
      pthread_mutex_unlock(v83);
      return v14;
    }
    v7 = v82;
LABEL_116:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  }
  return v14;
}

void sub_18F624224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char **__p, char **a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  __p = &a15;
  sub_18F62AB98((void ***)&__p);
  a15 = &a18;
  sub_18F62AB98((void ***)&a15);
  sub_18F5CE240((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6242C0(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(uint64_t **)a2;
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    v4 = (uint64_t *)result;
    for (i = -(uint64_t)v2; ; i -= 16)
    {
      result = sub_18F7055CC(*v2, v4);
      if ((_DWORD)result)
        break;
      v2 += 2;
      if (v2 == *(uint64_t **)(a2 + 8))
        return result;
    }
    v6 = -i;
    result = 16 - i;
    v7 = *(_QWORD *)(a2 + 8);
    if (result != v7)
    {
      do
      {
        v8 = v6 + 16;
        sub_18F62B3EC(v6, (__int128 *)(v6 + 16));
        v9 = v6 + 32;
        v6 += 16;
      }
      while (v9 != v7);
      result = *(_QWORD *)(a2 + 8);
      v6 = v8;
    }
    while (result != v6)
      result = sub_18F5D6004(result - 16);
    *(_QWORD *)(a2 + 8) = v6;
  }
  return result;
}

uint64_t sub_18F624378(uint64_t a1, uint64_t *a2, char **a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  double Current;
  double *v16;
  double v17;
  double v18;
  double *v19;
  double v20;
  double v21;
  double *v22;
  double v23;
  double v24;
  int v25;
  char *v26;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  int v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  __int128 *v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char *i;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char *j;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  int v70;
  _QWORD v71[2];
  void *__p;
  char *v73;
  char *v74;
  void **v75;
  void **v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD v81[2];
  uint64_t v82;
  pthread_mutex_t *v83;
  __int16 v84;

  v7 = a1;
  v82 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v84 = 256;
  if (!*a2)
  {
    v14 = 0;
    goto LABEL_116;
  }
  if (!sub_18F61F044(v7, (__int128 *)*a2, 1u, a3))
  {
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    if (*(_BYTE *)(v7 + 216)
      && ((Current = CFAbsoluteTimeGetCurrent(), v16 = *(double **)(*a2 + 136), *(double **)(*a2 + 144) == v16)
        ? (v17 = 0.0, v18 = 0.0)
        : (v17 = *v16, v18 = v16[1]),
          (sub_18F61F834(v7, 0, 1, 0, Current, v17, v18, *(double *)(v7 + 160)) & 1) == 0))
    {
      v14 = 0;
    }
    else
    {
      v19 = *(double **)(*a2 + 136);
      if (*(double **)(*a2 + 144) == v19)
      {
        v20 = 0.0;
        v21 = 0.0;
      }
      else
      {
        v20 = *v19;
        v21 = v19[1];
      }
      sub_18F620730(v7, (_QWORD *)(v7 + 264), (uint64_t)&v78, 1, v20, v21, *(double *)(v7 + 160));
      v22 = *(double **)(*a2 + 136);
      if (*(double **)(*a2 + 144) == v22)
      {
        v23 = 0.0;
        v24 = 0.0;
      }
      else
      {
        v23 = *v22;
        v24 = v22[1];
      }
      sub_18F620730(v7, (_QWORD *)(v7 + 240), (uint64_t)&v75, 1, v23, v24, *(double *)(v7 + 160));
      __p = 0;
      v73 = 0;
      v74 = 0;
      v25 = *(_DWORD *)(*a2 + 108);
      v26 = (char *)operator new(4uLL);
      v70 = a4;
      *(_DWORD *)v26 = v25;
      v73 = v26 + 4;
      v74 = v26 + 4;
      v27 = v78;
      v28 = v79;
      for (__p = v26; v27 != v28; v27 += 2)
      {
        if (sub_18F7056C4(*a2, v27))
        {
          v29 = *(_DWORD *)(*v27 + 108);
          v30 = v73;
          if (v73 >= v74)
          {
            v32 = (char *)__p;
            v33 = (v73 - (_BYTE *)__p) >> 2;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 62)
              sub_18F5F7864();
            v35 = v74 - (_BYTE *)__p;
            if ((v74 - (_BYTE *)__p) >> 1 > v34)
              v34 = v35 >> 1;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
              v36 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              v37 = (char *)sub_18F62C554((uint64_t)&v74, v36);
              v32 = (char *)__p;
              v30 = v73;
            }
            else
            {
              v37 = 0;
            }
            v38 = &v37[4 * v33];
            *(_DWORD *)v38 = v29;
            v31 = v38 + 4;
            while (v30 != v32)
            {
              v39 = *((_DWORD *)v30 - 1);
              v30 -= 4;
              *((_DWORD *)v38 - 1) = v39;
              v38 -= 4;
            }
            __p = v38;
            v73 = v31;
            v74 = &v37[4 * v36];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *(_DWORD *)v73 = v29;
            v31 = v30 + 4;
          }
          v73 = v31;
        }
        if ((*(_DWORD *)(v7 + 152) & 0xFFFFFFFE) == 2 && sub_18F70578C(*a2, v27))
        {
          v40 = *(_DWORD *)(*v27 + 112);
          v41 = v73;
          if (v73 >= v74)
          {
            v43 = (char *)__p;
            v44 = (v73 - (_BYTE *)__p) >> 2;
            v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 62)
              sub_18F5F7864();
            v46 = v74 - (_BYTE *)__p;
            if ((v74 - (_BYTE *)__p) >> 1 > v45)
              v45 = v46 >> 1;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
              v47 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v47 = v45;
            if (v47)
            {
              v48 = (char *)sub_18F62C554((uint64_t)&v74, v47);
              v43 = (char *)__p;
              v41 = v73;
            }
            else
            {
              v48 = 0;
            }
            v49 = &v48[4 * v44];
            *(_DWORD *)v49 = v40;
            v42 = v49 + 4;
            while (v41 != v43)
            {
              v50 = *((_DWORD *)v41 - 1);
              v41 -= 4;
              *((_DWORD *)v49 - 1) = v50;
              v49 -= 4;
            }
            __p = v49;
            v73 = v42;
            v74 = &v48[4 * v47];
            if (v43)
              operator delete(v43);
          }
          else
          {
            *(_DWORD *)v73 = v40;
            v42 = v41 + 4;
          }
          v73 = v42;
        }
      }
      v51 = (__int128 *)v75;
      v52 = (__int128 *)v76;
      if (v75 != v76)
      {
        while (1)
        {
          v53 = *(_QWORD *)v51;
          if (!*(_QWORD *)v51)
            goto LABEL_91;
          v54 = *a2;
          if (*(_QWORD *)v53 == *(_QWORD *)*a2 && *(_QWORD *)(v53 + 8) == *(_QWORD *)(v54 + 8))
            goto LABEL_91;
          v55 = *(unsigned __int8 *)(v53 + 17);
          if (*(_BYTE *)(v54 + 17))
            break;
          if (!v55)
            goto LABEL_73;
LABEL_91:
          if (++v51 == v52)
            goto LABEL_99;
        }
        if (!v55)
          goto LABEL_91;
LABEL_73:
        if (sub_18F7056C4(v54, (uint64_t *)v51))
        {
          v56 = *a2;
          v57 = *(_QWORD *)v51;
          if (vabdd_f64(*(double *)(*a2 + 120), *(double *)(*(_QWORD *)v51 + 128)) < 1.0)
          {
            if (*(_BYTE *)(v56 + 116)
              || (~*(_DWORD *)(v56 + 108) & 0x7FFFFFFF) == 0
              || *(_BYTE *)(v57 + 117)
              || (v58 = *(_DWORD *)(v57 + 112), (~v58 & 0x7FFFFFFF) == 0))
            {
LABEL_90:
              sub_18F623AB8(a3, v51);
              goto LABEL_91;
            }
            for (i = (char *)__p; i != v73; i += 4)
            {
              if (*(_DWORD *)i == v58)
                goto LABEL_90;
            }
          }
        }
        if ((*(_DWORD *)(v7 + 152) & 0xFFFFFFFE) != 2)
          goto LABEL_91;
        if (!sub_18F70578C(*a2, (uint64_t *)v51))
          goto LABEL_91;
        v60 = *a2;
        v61 = *(_QWORD *)v51;
        if (vabdd_f64(*(double *)(*a2 + 120), *(double *)(*(_QWORD *)v51 + 120)) >= 1.0)
          goto LABEL_91;
        if (!*(_BYTE *)(v60 + 116) && (~*(_DWORD *)(v60 + 108) & 0x7FFFFFFF) != 0 && !*(_BYTE *)(v61 + 116))
        {
          v62 = *(_DWORD *)(v61 + 108);
          if ((~v62 & 0x7FFFFFFF) != 0)
          {
            for (j = (char *)__p; j != v73; j += 4)
            {
              if (*(_DWORD *)j == v62)
                goto LABEL_90;
            }
            goto LABEL_91;
          }
        }
        goto LABEL_90;
      }
LABEL_99:
      sub_18F61EE08(v7, (__int128 *)*a2, 1u, (__int128 **)a3);
      if (v70)
      {
        v64 = (std::__shared_weak_count *)a2[1];
        v71[0] = *a2;
        v71[1] = v64;
        if (v64)
        {
          p_shared_owners = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldxr(p_shared_owners);
          while (__stxr(v66 + 1, p_shared_owners));
        }
        sub_18F6242C0((uint64_t)v71, (uint64_t)a3);
        if (v64)
        {
          v67 = (unint64_t *)&v64->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
      }
      if (__p)
      {
        v73 = (char *)__p;
        operator delete(__p);
      }
      v14 = 1;
    }
    __p = &v75;
    sub_18F62AB98((void ***)&__p);
    v75 = (void **)&v78;
    sub_18F62AB98(&v75);
    goto LABEL_112;
  }
  if (a4)
  {
    v8 = *a2;
    v9 = (std::__shared_weak_count *)a2[1];
    v81[0] = v8;
    v81[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    sub_18F6242C0((uint64_t)v81, (uint64_t)a3);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  ++*(_QWORD *)(v7 + 320);
  v14 = 1;
LABEL_112:
  if (HIBYTE(v84))
  {
    if ((_BYTE)v84)
    {
      pthread_mutex_unlock(v83);
      return v14;
    }
    v7 = v82;
LABEL_116:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  }
  return v14;
}

void sub_18F6249A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char **__p, char **a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  __p = &a15;
  sub_18F62AB98((void ***)&__p);
  a15 = &a18;
  sub_18F62AB98((void ***)&a15);
  sub_18F5CE240((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_18F624A40(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5, double a6)
{
  uint64_t i;
  char *v13;
  uint64_t j;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t n;
  uint64_t v24;
  uint64_t m;
  uint64_t k;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v32;
  __int128 v33;
  uint64_t v34;
  pthread_mutex_t *v35;
  __int16 v36;
  void **v37[2];
  uint8_t buf[8];
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v34 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v36 = 256;
  v13 = *(char **)a3;
  for (i = *(_QWORD *)(a3 + 8); (char *)i != v13; i = sub_18F5D6004(i - 16))
    ;
  *(_QWORD *)(a3 + 8) = v13;
  v15 = *(_QWORD *)a4;
  for (j = *(_QWORD *)(a4 + 8); j != v15; j = sub_18F5D6004(j - 16))
    ;
  *(_QWORD *)(a4 + 8) = v15;
  if (!*a2)
  {
    v20 = 0;
    goto LABEL_50;
  }
  v16 = a2[1];
  *(_QWORD *)&v33 = *a2;
  *((_QWORD *)&v33 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = 150;
  do
  {
    v20 = 0;
    if (!(_QWORD)v33 || a6 <= 0.0)
      goto LABEL_42;
    *(_QWORD *)buf = 0;
    v39 = 0;
    v40 = 0;
    if (a5)
    {
      if ((sub_18F623BF8(a1, (uint64_t *)&v33, (char **)buf, 1) & 1) == 0)
      {
        v27 = *(char **)a3;
        for (k = *(_QWORD *)(a3 + 8); (char *)k != v27; k = sub_18F5D6004(k - 16))
          ;
LABEL_40:
        v20 = 0;
        *(_QWORD *)(a3 + 8) = v27;
        goto LABEL_41;
      }
    }
    else if ((sub_18F624378(a1, (uint64_t *)&v33, (char **)buf, 1) & 1) == 0)
    {
      v27 = *(char **)a3;
      for (m = *(_QWORD *)(a3 + 8); (char *)m != v27; m = sub_18F5D6004(m - 16))
        ;
      goto LABEL_40;
    }
    sub_18F623AB8((char **)a3, &v33);
    if ((unint64_t)v39 - *(_QWORD *)buf >= 0x11)
    {
      if (buf != (uint8_t *)a4)
        sub_18F62C588(a4, *(uint64_t **)buf, v39, ((uint64_t)v39 - *(_QWORD *)buf) >> 4);
      goto LABEL_34;
    }
    if (*(uint64_t **)buf == v39)
    {
      v24 = *(_QWORD *)a4;
      for (n = *(_QWORD *)(a4 + 8); n != v24; n = sub_18F5D6004(n - 16))
        ;
      *(_QWORD *)(a4 + 8) = v24;
LABEL_34:
      v20 = 1;
LABEL_41:
      v37[0] = (void **)buf;
      sub_18F62AB98(v37);
      goto LABEL_42;
    }
    sub_18F623A40(&v33, *(uint64_t **)buf);
    v21 = v33;
    sub_18F7047B4(v33);
    a6 = a6 - *(double *)(v21 + 40);
    v37[0] = (void **)buf;
    sub_18F62AB98(v37);
    --v19;
  }
  while (v19);
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990370);
  v22 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,findAllRoadsUntilTheMultiIntersectionFromThisRoad,exceeded maximum tolerable road search count. Discovered roads may be limited", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    LOWORD(v37[0]) = 0;
    v32 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::findAllRoadsUntilTheMultiIntersectionFromThisRoad(const CLMapRoadPtr, std::vector<CLMapRoadPtr> &, std::vector<CLMapRoadPtr> &, const BOOL, double)", "CoreLocation: %s\n", v32);
    if (v32 != (char *)buf)
      free(v32);
  }
  v20 = 0;
LABEL_42:
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (HIBYTE(v36))
  {
    if ((_BYTE)v36)
    {
      pthread_mutex_unlock(v35);
      return v20;
    }
LABEL_50:
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
  }
  return v20;
}

void sub_18F624E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5CE240((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F624E68(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t *v11;

  v3 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 != a1 + 8)
  {
    do
    {
      v6 = sub_18F62A584(a2, v2 + 4);
      v7 = (_QWORD *)v2[1];
      if (v6)
      {
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v2[2];
            v9 = *v8 == (_QWORD)v2;
            v2 = v8;
          }
          while (!v9);
        }
      }
      else
      {
        v10 = v2;
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v10[2];
            v9 = *v8 == (_QWORD)v10;
            v10 = v8;
          }
          while (!v9);
        }
        if (*(_QWORD **)a1 == v2)
          *(_QWORD *)a1 = v8;
        v11 = *(uint64_t **)(a1 + 8);
        --*(_QWORD *)(a1 + 16);
        sub_18F62AD94(v11, v2);
        sub_18F5D6004((uint64_t)(v2 + 6));
        operator delete(v2);
      }
      v2 = v8;
    }
    while (v8 != v3);
  }
}

__n128 sub_18F624F54(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_18F624F78(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  sub_18F62AB98(&v1);
}

void sub_18F624FA0(_QWORD *a1, void *a2)
{
  uint64_t v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  int isRoadPedestrianNavigable;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  int isRail;
  int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const char *v28;
  uint64_t v29;
  int v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;

  if (a2)
  {
    v3 = a1[6];
    v4 = a2;
    if (v4)
    {
      v8 = v4;
      v9 = *(_DWORD *)(v3 + 152);
      if (v9 == 1)
      {
        if ((objc_msgSend_isDrivable(v4, v5, v6, v7) & 1) != 0)
          goto LABEL_15;
        v9 = *(_DWORD *)(v3 + 152);
      }
      if (v9 == 2)
      {
        isRoadPedestrianNavigable = objc_msgSend_isRoadPedestrianNavigable(v8, v5, v6, v7);
        v14 = objc_msgSend_walkableSide(v8, v11, v12, v13);
        isRail = objc_msgSend_isRail(v8, v15, v16, v17);
        if ((((v14 - 1) > 2) & ~isRoadPedestrianNavigable) == 0 && !isRail)
          goto LABEL_15;
        v9 = *(_DWORD *)(v3 + 152);
      }
      if (v9 != 3
        || ((v19 = objc_msgSend_isRoadPedestrianNavigable(v8, v5, v6, v7),
             v23 = objc_msgSend_walkableSide(v8, v20, v21, v22),
             v27 = objc_msgSend_isRail(v8, v24, v25, v26),
             (((v23 - 1) > 2) & ~v19) != 0)
         || v27)
        && ((v30 = objc_msgSend_bikeableSide(v8, v28, v29, v7), (objc_msgSend_isRail(v8, v31, v32, v33) & 1) != 0)
         || (v30 - 4) < 0xFFFFFFFD))
      {
LABEL_25:

        return;
      }
LABEL_15:
      v34.n128_f64[0] = sub_18F62516C(v8, 0, v7, (std::string **)&v39);
      *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += 208;
      if ((_QWORD)v39)
      {
        if (*(_DWORD *)(v3 + 152) != 1)
        {
          v35 = *(_DWORD *)(v39 + 104);
          if (v35 >= 1)
            *(double *)(v39 + 96) = (double)v35 * 3.7;
        }
        sub_18F623AB8((char **)(*(_QWORD *)(a1[5] + 8) + 48), &v39);
      }
      v36 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v36->__on_zero_shared)(v36, v34);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      goto LABEL_25;
    }
  }
}

void sub_18F625158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_18F62516C@<D0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, std::string **a4@<X8>)
{
  char v5;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  std::string *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::string *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  NSObject *v48;
  std::string *v49;
  std::string *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  std::string *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  std::string *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  std::string *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  std::string *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  std::string *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  std::string *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  char isRoadPedestrianNavigable;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  char isRail;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  std::string *v91;
  std::string *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  std::string *v112;
  std::string *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  void *started;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  std::string *v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  std::string *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  std::string *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  std::string *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  double *v157;
  double v158;
  int IsMPH;
  std::string *v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  double v168;
  std::string *v169;
  std::string *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  std::string *v182;
  uint64_t v183;
  std::string *v184;
  float64x2_t *v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  std::string *v189;
  std::string *v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  std::string buf[68];
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v48 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_18F5B3000, v48, OS_LOG_TYPE_ERROR, "CLMM,GEOMapFeatureRoad is null", (uint8_t *)buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_23;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v21 = (std::string *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "CLMapRoadPtr CLGeoMapFeatureAccessGeometryCommon::makeRoadFromGEOMapFeatureRoad(CLDistanceCalc &, GEOMapFeatureRoad * _Nonnull, BOOL)", "CoreLocation: %s\n", (const char *)v21);
    if (v21 == buf)
      goto LABEL_23;
LABEL_52:
    free(v21);
LABEL_23:
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  v5 = a2;
  if ((_DWORD)a2 && (unint64_t)objc_msgSend_coordinateCount(a1, (const char *)a1, a2, a3) <= 1)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v7 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 134283777;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = objc_msgSend_roadID(a1, v8, v9, v10);
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = objc_msgSend_coordinateCount(a1, v11, v12, v13);
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEBUG, "#Warning CLMM, GEOMapFeatureRoad id,%{private}lld,has less than two coordinate,%{public}ld", (uint8_t *)buf, 0x16u);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_23;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    objc_msgSend_roadID(a1, v15, v16, v17);
    objc_msgSend_coordinateCount(a1, v18, v19, v20);
    v21 = (std::string *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "CLMapRoadPtr CLGeoMapFeatureAccessGeometryCommon::makeRoadFromGEOMapFeatureRoad(CLDistanceCalc &, GEOMapFeatureRoad * _Nonnull, BOOL)", "CoreLocation: %s\n", (const char *)v21);
    if (v21 == buf)
      goto LABEL_23;
    goto LABEL_52;
  }
  sub_18F6269D4(a4);
  if (objc_msgSend_internalRoadName(a1, v22, v23, v24))
  {
    v28 = *a4;
    v29 = (void *)objc_msgSend_internalRoadName(a1, v25, v26, v27);
    v33 = (char *)objc_msgSend_UTF8String(v29, v30, v31, v32);
    sub_18F5D5990(buf, v33);
    std::string::operator=(v28 + 2, buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  v34 = *a4;
  v35 = objc_msgSend_roadID(a1, v25, v26, v27);
  v39 = sub_18F62B52C(a1, v36, v37, v38);
  v34->__r_.__value_.__r.__words[0] = v35;
  v34->__r_.__value_.__l.__size_ = v39;
  v40 = *a4;
  v47 = (objc_msgSend_isRail(a1, v41, v42, v43) & 1) != 0
     || objc_msgSend_travelDirection(a1, v44, v45, v46) == 0;
  v40->__r_.__value_.__s.__data_[16] = !v47;
  v49 = *a4;
  v49->__r_.__value_.__s.__data_[17] = objc_msgSend_isRail(a1, v44, v45, v46);
  v50 = *a4;
  v50->__r_.__value_.__s.__data_[18] = objc_msgSend_isTunnel(a1, v51, v52, v53);
  v54 = *a4;
  v54->__r_.__value_.__s.__data_[19] = objc_msgSend_isBridge(a1, v55, v56, v57);
  v58 = *a4;
  HIDWORD(v58->__r_.__value_.__r.__words[2]) = objc_msgSend_roadClass(a1, v59, v60, v61);
  v62 = *a4;
  LODWORD(v62[1].__r_.__value_.__l.__data_) = objc_msgSend_formOfWay(a1, v63, v64, v65);
  v66 = *a4;
  LODWORD(v66[3].__r_.__value_.__l.__data_) = objc_msgSend_travelDirection(a1, v67, v68, v69);
  v70 = *a4;
  HIDWORD(v70[3].__r_.__value_.__r.__words[0]) = objc_msgSend_rampType(a1, v71, v72, v73);
  v74 = *a4;
  isRoadPedestrianNavigable = objc_msgSend_isRoadPedestrianNavigable(a1, v75, v76, v77);
  v82 = objc_msgSend_walkableSide(a1, v79, v80, v81);
  isRail = objc_msgSend_isRail(a1, v83, v84, v85);
  if ((v82 - 1) < 3)
    v90 = 1;
  else
    v90 = isRoadPedestrianNavigable;
  v74[3].__r_.__value_.__s.__data_[8] = v90 & (isRail ^ 1);
  v91 = *a4;
  v91[3].__r_.__value_.__s.__data_[9] = objc_msgSend_isDrivable(a1, v87, v88, v89);
  v92 = *a4;
  LODWORD(v91) = objc_msgSend_isRoadPedestrianNavigable(a1, v93, v94, v95);
  v99 = objc_msgSend_walkableSide(a1, v96, v97, v98);
  v103 = objc_msgSend_isRail(a1, v100, v101, v102);
  if ((((v99 - 1) > 2) & ~(_DWORD)v91) != 0 || ((v103 ^ 1) & 1) == 0)
  {
    v108 = objc_msgSend_bikeableSide(a1, v104, v105, v106);
    v107 = objc_msgSend_isRail(a1, v109, v110, v111) ^ 1;
    if ((v108 - 1) >= 3)
      LOBYTE(v107) = 0;
  }
  else
  {
    LOBYTE(v107) = 1;
  }
  v92[3].__r_.__value_.__s.__data_[10] = v107;
  v112 = *a4;
  HIDWORD(v112[3].__r_.__value_.__r.__words[1]) = objc_msgSend_walkableSide(a1, v104, v105, v106);
  v113 = *a4;
  started = (void *)objc_msgSend_startJunction(a1, v114, v115, v116);
  HIDWORD(v113[4].__r_.__value_.__r.__words[1]) = objc_msgSend_junctionIndex(started, v118, v119, v120);
  v121 = *a4;
  v125 = (void *)objc_msgSend_endJunction(a1, v122, v123, v124);
  LODWORD(v121[4].__r_.__value_.__r.__words[2]) = objc_msgSend_junctionIndex(v125, v126, v127, v128);
  v129 = *a4;
  v133 = (void *)objc_msgSend_startJunction(a1, v130, v131, v132);
  v129[4].__r_.__value_.__s.__data_[20] = objc_msgSend_isOnTileBorder(v133, v134, v135, v136);
  v137 = *a4;
  v141 = (void *)objc_msgSend_endJunction(a1, v138, v139, v140);
  v137[4].__r_.__value_.__s.__data_[21] = objc_msgSend_isOnTileBorder(v141, v142, v143, v144);
  v145 = *a4;
  v149 = objc_msgSend_roadClass(a1, v146, v147, v148);
  v153 = objc_msgSend_travelDirection(a1, v150, v151, v152);
  if (v149 > 7)
  {
    v158 = dbl_18F772340[v153 == 0];
  }
  else
  {
    v157 = (double *)&unk_18F7724F0;
    if (!v153)
      v157 = (double *)&unk_18F772530;
    v158 = v157[v149];
  }
  *(double *)&v145[4].__r_.__value_.__l.__data_ = v158;
  IsMPH = objc_msgSend_speedLimitIsMPH(a1, v154, v155, v156);
  v160 = *a4;
  v164 = objc_msgSend_speedLimit(a1, v161, v162, v163);
  v168 = 0.277778;
  if (IsMPH)
    v168 = 0.44704;
  *(double *)&v160[1].__r_.__value_.__l.__size_ = v168 * (double)(unint64_t)v164;
  v169 = *a4;
  LODWORD(v169[4].__r_.__value_.__r.__words[1]) = objc_msgSend_laneCount(a1, v165, v166, v167);
  v170 = *a4;
  v174 = 0;
  v175 = 0;
  LODWORD(v170[3].__r_.__value_.__r.__words[2]) = objc_msgSend_bikeableSide(a1, v171, v172, v173);
  while (objc_msgSend_coordinateCount(a1, v176, v177, v178) > v175)
  {
    v182 = *a4;
    v183 = objc_msgSend_coordinates(a1, v179, v180, v181);
    sub_18F70466C(v182, (float64x2_t *)(v183 + v174), 1);
    ++v175;
    v174 += 16;
  }
  if ((v5 & 1) == 0 && objc_msgSend_coordinateCount(a1, v179, v180, v181) == 1)
  {
    v184 = *a4;
    v185 = (float64x2_t *)objc_msgSend_coordinates(a1, v179, v180, v181);
    sub_18F70466C(v184, v185, 0);
  }
  if (objc_msgSend_coordinateCount(a1, v179, v180, v181))
  {
    v189 = *a4;
    v189[5].__r_.__value_.__r.__words[0] = *(_QWORD *)(objc_msgSend_coordinates3d(a1, v186, v187, v188) + 16);
    v190 = *a4;
    v194 = objc_msgSend_coordinates3d(a1, v191, v192, v193);
    result = *(double *)(v194 + 24 * objc_msgSend_coordinateCount(a1, v195, v196, v197) - 8);
    *(double *)&v190[5].__r_.__value_.__l.__size_ = result;
  }
  return result;
}

void sub_18F625840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  sub_18F5D6004(v20);
  _Unwind_Resume(a1);
}

intptr_t sub_18F625880(uint64_t a1, void *a2)
{
  int32x2_t *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  NSObject *v22;
  int v23;
  int v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int32x2_t v30;
  __int32 v31;
  __int32 v32;
  __int32 v33;
  __int32 v34;
  uint64_t v35;
  intptr_t result;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint8_t buf[4];
  _BYTE v50[10];
  _BYTE v51[10];
  _BYTE v52[10];
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  _BOOL4 v58;
  __int16 v59;
  __int32 v60;
  __int16 v61;
  int32x2_t v62;
  __int16 v63;
  __int32 v64;
  __int16 v65;
  __int32 v66;
  __int16 v67;
  __int32 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v4 = *(int32x2_t **)(a1 + 56);
  if (a2)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v5 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349571;
      *(_QWORD *)v50 = objc_msgSend_code(a2, v6, v7, v8);
      *(_WORD *)&v50[8] = 2114;
      *(_QWORD *)v51 = objc_msgSend_domain(a2, v9, v10, v11);
      *(_WORD *)&v51[8] = 2113;
      *(_QWORD *)v52 = objc_msgSend_localizedDescription(a2, v12, v13, v14);
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEFAULT, "CLMM,CLTSP,Roads,Warning,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      objc_msgSend_code(a2, v37, v38, v39);
      objc_msgSend_domain(a2, v40, v41, v42);
      objc_msgSend_localizedDescription(a2, v43, v44, v45);
      v46 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)_block_invoke", "CoreLocation: %s\n", v46);
      if (v46 != (char *)buf)
        free(v46);
    }
    v4[15] = vadd_s32(v4[15], (int32x2_t)0x100000001);
  }
  else
  {
    v19 = *(double *)(a1 + 64);
    v18 = *(double *)(a1 + 72);
    v20 = *(double *)(a1 + 80);
    v21 = *(double *)(a1 + 88);
    if (sub_18F62059C(v19, v18, v20, v21))
    {
      *(double *)&v4[7] = v19;
      *(double *)&v4[8] = v20;
      *(double *)&v4[9] = v21;
      *(double *)&v4[10] = v18;
    }
    v4[15].i32[1] = 0;
  }
  if (*(double *)(a1 + 72) > 0.5)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v22 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v23 = v4[35].i32[0] + v4[32].i32[0];
      v24 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v25 = 0.0;
      if (*(double *)(a1 + 96) >= 0.0)
      {
        v26 = mach_continuous_time();
        v25 = vabdd_f64(sub_18F6BDF00(v26), *(double *)(a1 + 96)) * 1000.0;
      }
      v28 = *(_QWORD *)(a1 + 80);
      v27 = *(_QWORD *)(a1 + 88);
      v29 = *(_QWORD *)(a1 + 72);
      v30 = v4[40];
      v32 = v4[14].i32[0];
      v31 = v4[14].i32[1];
      v33 = v4[15].i32[0];
      v34 = v4[15].i32[1];
      *(_DWORD *)buf = 67243009;
      *(_DWORD *)v50 = v23;
      *(_WORD *)&v50[4] = 1026;
      *(_DWORD *)&v50[6] = v24;
      *(_WORD *)v51 = 2050;
      *(double *)&v51[2] = v25;
      *(_WORD *)v52 = 2049;
      *(_QWORD *)&v52[2] = v28;
      v53 = 2049;
      v54 = v27;
      v55 = 2050;
      v56 = v29;
      v57 = 1026;
      v58 = a2 != 0;
      v59 = 1026;
      v60 = v31;
      v61 = 2050;
      v62 = v30;
      v63 = 1026;
      v64 = v32;
      v65 = 1026;
      v66 = v33;
      v67 = 1026;
      v68 = v34;
      _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Roads,bufferDataUsingMapsAPI,roadCount,%{public}d,sizeOfRoad,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,connectionBufferUsedCount,%{public}lu,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d", buf, 0x5Eu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      if (*(double *)(a1 + 96) >= 0.0)
      {
        v47 = mach_continuous_time();
        sub_18F6BDF00(v47);
      }
      v48 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)_block_invoke", "CoreLocation: %s\n", v48);
      if (v48 != (char *)buf)
        free(v48);
    }
  }
  if (*(_BYTE *)(a1 + 104))
    objc_msgSend_clearRoadTiles(*(void **)&v4[11], v15, v16, v17);
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  result = (intptr_t)&v4[41];
  if (&v4[41] != (int32x2_t *)(v35 + 48))
    result = sub_18F62C588(result, *(uint64_t **)(v35 + 48), *(uint64_t **)(v35 + 56), (uint64_t)(*(_QWORD *)(v35 + 56) - *(_QWORD *)(v35 + 48)) >> 4);
  v4[28].i8[0] = 0;
  if (*(_BYTE *)(a1 + 105))
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  return result;
}

void sub_18F625E3C(double *a1, void *a2)
{
  double *v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  double *v19;
  NSObject *v20;
  char *v21;
  NSObject *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  NSObject *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  char *v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  char *v81;
  double *v82;
  int v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  _QWORD **v92;
  _QWORD *v93[2];
  unint64_t v94;
  _BYTE v95[24];
  _BYTE v96[10];
  _BYTE v97[10];
  __int16 v98;
  _BYTE v99[10];
  _BYTE v100[6];
  int v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;
  __int16 v108;
  int v109;
  __int16 v110;
  int v111;
  _BYTE v112[128];
  int v113;
  unint64_t v114;
  _BYTE buf[14];
  _BYTE v116[10];
  _BYTE v117[10];
  _BYTE v118[10];
  __int16 v119;
  _BYTE v120[10];
  _BYTE v121[6];
  int v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  uint64_t v133;

  v3 = a1;
  v133 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 5);
  ++*(_DWORD *)(v4 + 116);
  v93[0] = 0;
  v93[1] = 0;
  v91 = 0;
  v92 = v93;
  v89 = 0;
  v90 = 0;
  if (a2)
  {
    v6 = a1[6];
    v5 = a1[7];
    v7 = a1[8];
    v8 = a1[9];
    if (sub_18F62059C(v6, v5, v7, v8))
    {
      *(double *)(v4 + 56) = v6;
      *(double *)(v4 + 64) = v7;
      *(double *)(v4 + 72) = v8;
      *(double *)(v4 + 80) = v5;
    }
    *(_DWORD *)(v4 + 124) = 0;
    v85 = 0u;
    v86 = 0u;
    v87 = 0u;
    v88 = 0u;
    v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v9, (uint64_t)&v85, (uint64_t)v112, 16);
    v82 = v3;
    v84 = v4;
    if (!v10)
    {
      v83 = 0;
      goto LABEL_58;
    }
    v83 = 0;
    v11 = (const char *)(v4 + 16);
    v12 = *(_QWORD *)v86;
    while (1)
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v86 != v12)
          objc_enumerationMutation(a2);
        v14 = *(void **)(*((_QWORD *)&v85 + 1) + 8 * v13);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v16 = (char *)operator new(0xE8uLL);
          *((_QWORD *)v16 + 1) = 0;
          *((_QWORD *)v16 + 2) = 0;
          *(_QWORD *)v16 = &off_1E298FEB8;
          *(_OWORD *)(v16 + 40) = 0u;
          *(_OWORD *)(v16 + 56) = 0u;
          *(_OWORD *)(v16 + 72) = 0u;
          *(_OWORD *)(v16 + 88) = 0u;
          *(_OWORD *)(v16 + 120) = 0u;
          *((_QWORD *)v16 + 17) = 0;
          *(_OWORD *)(v16 + 104) = 0u;
          *(_OWORD *)(v16 + 24) = 0u;
          *(_QWORD *)(v16 + 44) = -1;
          *((_QWORD *)v16 + 8) = 0xBFF0000000000000;
          *((_QWORD *)v16 + 9) = 0;
          *((_QWORD *)v16 + 10) = 0;
          *((_QWORD *)v16 + 11) = 0;
          *((_QWORD *)v16 + 12) = -1;
          *((_QWORD *)v16 + 16) = -1;
          *((_DWORD *)v16 + 34) = -1;
          *((_QWORD *)v16 + 28) = 0;
          *((_OWORD *)v16 + 12) = 0u;
          *((_OWORD *)v16 + 13) = 0u;
          *((_OWORD *)v16 + 10) = 0u;
          *((_OWORD *)v16 + 11) = 0u;
          *((_OWORD *)v16 + 9) = 0u;
          *(_QWORD *)v95 = v16 + 24;
          *(_QWORD *)&v95[8] = v16;
          if ((sub_18F705A50((uint64_t *)v16 + 3, v11, v14, 0) & 1) == 0)
            goto LABEL_37;
          v17 = *(unint64_t **)v95;
          v18 = **(_QWORD **)v95;
          v94 = **(_QWORD **)v95;
          v19 = *(double **)(*(_QWORD *)v95 + 136);
          if ((int)((*(_QWORD *)(*(_QWORD *)v95 + 144) - (_QWORD)v19) >> 4) > 1)
          {
            if (!sub_18F62BA74(v19, v19 + 2, *(unsigned __int8 *)(*(_QWORD *)v95 + 17), *(unsigned __int8 *)(*(_QWORD *)v95 + 19), *(unsigned __int8 *)(*(_QWORD *)v95 + 18), &v94))
            {
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990370);
              v22 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134283521;
                *(_QWORD *)&buf[4] = v94;
                _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_ERROR, "CLMM,GeoMapDataID,unable to make CLRoadID from CLMapRoadPtr,%{private}lld", buf, 0xCu);
              }
              if (sub_18F5C4AE0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990370);
                v113 = 134283521;
                v114 = v94;
                v21 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 0, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const CLMapRoadPtr &)", "CoreLocation: %s\n", v21);
LABEL_47:
                if (v21 != buf)
                  free(v21);
              }
            }
          }
          else
          {
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990370);
            v20 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134283521;
              *(_QWORD *)&buf[4] = v18;
              _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_DEBUG, "CLMM,GeoMapDataID,less than two coordinates,roadID,%{private}lld", buf, 0xCu);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990370);
              v113 = 134283521;
              v114 = v18;
              v21 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const CLMapRoadPtr &)", "CoreLocation: %s\n", v21);
              goto LABEL_47;
            }
          }
          v23 = v94;
          *v17 = v18;
          v17[1] = v23;
          v24 = *(_DWORD *)(v84 + 152);
          if (v24 == 3)
          {
            v25 = *(_QWORD *)v95;
            if (!*(_BYTE *)(*(_QWORD *)v95 + 82))
              goto LABEL_37;
          }
          else
          {
            if (v24 != 2)
            {
              if (v24 != 1 || !*(_BYTE *)(*(_QWORD *)v95 + 81))
              {
LABEL_37:
                v27 = *(std::__shared_weak_count **)&v95[8];
                if (*(_QWORD *)&v95[8])
                {
                  v28 = (unint64_t *)(*(_QWORD *)&v95[8] + 8);
                  do
                    v29 = __ldaxr(v28);
                  while (__stlxr(v29 - 1, v28));
                  if (!v29)
                  {
                    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                    std::__shared_weak_count::__release_weak(v27);
                  }
                }
                goto LABEL_42;
              }
LABEL_36:
              sub_18F623AB8(&v89, (__int128 *)v95);
              v83 += 208;
              goto LABEL_37;
            }
            v25 = *(_QWORD *)v95;
            if (!*(_BYTE *)(*(_QWORD *)v95 + 80))
              goto LABEL_37;
          }
          v26 = *(_DWORD *)(v25 + 104);
          if (v26 >= 1)
            *(double *)(v25 + 96) = (double)v26 * 3.7;
          goto LABEL_36;
        }
LABEL_42:
        ++v13;
      }
      while (v13 != v10);
      v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v15, (uint64_t)&v85, (uint64_t)v112, 16);
      v10 = v30;
      if (!v30)
      {
LABEL_58:
        v4 = v84;
        if ((char **)(v84 + 328) != &v89)
          sub_18F62C588(v84 + 328, (uint64_t *)v89, v90, ((char *)v90 - v89) >> 4);
        v3 = v82;
        v40 = v83;
        goto LABEL_62;
      }
    }
  }
  *(int32x2_t *)(v4 + 120) = vadd_s32(*(int32x2_t *)(v4 + 120), (int32x2_t)0x100000001);
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 24) = 1;
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990370);
  v31 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    v33 = *((_QWORD *)v3 + 8);
    v32 = *((_QWORD *)v3 + 9);
    v34 = *((_QWORD *)v3 + 7);
    v36 = *(_DWORD *)(v4 + 112);
    v35 = *(_DWORD *)(v4 + 116);
    v37 = *(_DWORD *)(v4 + 120);
    v38 = *(_DWORD *)(v4 + 124);
    v39 = *((unsigned __int8 *)v3 + 88);
    *(_DWORD *)buf = 134285313;
    *(_QWORD *)&buf[4] = v33;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)v116 = v32;
    *(_WORD *)&v116[8] = 2050;
    *(_QWORD *)v117 = v34;
    *(_WORD *)&v117[8] = 1026;
    *(_DWORD *)v118 = v35;
    *(_WORD *)&v118[4] = 1026;
    *(_DWORD *)&v118[6] = v36;
    v119 = 1026;
    *(_DWORD *)v120 = v37;
    *(_WORD *)&v120[4] = 1026;
    *(_DWORD *)&v120[6] = v38;
    *(_WORD *)v121 = 1026;
    *(_DWORD *)&v121[2] = v39;
    _os_log_impl(&dword_18F5B3000, v31, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Roads,queryForRoadsWithinDistance returned,xpcError,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,apiCalls,%{public}d,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d", buf, 0x3Eu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v62 = *((_QWORD *)v3 + 8);
    v61 = *((_QWORD *)v3 + 9);
    v63 = *((_QWORD *)v3 + 7);
    v65 = *(_DWORD *)(v4 + 112);
    v64 = *(_DWORD *)(v4 + 116);
    v66 = *(_DWORD *)(v4 + 120);
    v67 = *(_DWORD *)(v4 + 124);
    v68 = *((unsigned __int8 *)v3 + 88);
    *(_DWORD *)v95 = 134285313;
    *(_QWORD *)&v95[4] = v62;
    *(_WORD *)&v95[12] = 2049;
    *(_QWORD *)&v95[14] = v61;
    *(_WORD *)&v95[22] = 2050;
    *(_QWORD *)v96 = v63;
    *(_WORD *)&v96[8] = 1026;
    *(_DWORD *)v97 = v64;
    *(_WORD *)&v97[4] = 1026;
    *(_DWORD *)&v97[6] = v65;
    v98 = 1026;
    *(_DWORD *)v99 = v66;
    *(_WORD *)&v99[4] = 1026;
    *(_DWORD *)&v99[6] = v67;
    *(_WORD *)v100 = 1026;
    *(_DWORD *)&v100[2] = v68;
    v69 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "CoreLocation: %s\n", v69);
    if (v69 != buf)
      free(v69);
  }
  v40 = 0;
LABEL_62:
  *(_BYTE *)(v4 + 224) = 0;
  if (v3[7] > *(double *)(v4 + 160))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v41 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      if (a2)
        v45 = objc_msgSend_count(a2, v42, v43, v44);
      else
        v45 = 0;
      v46 = 0.0;
      if (v3[10] >= 0.0)
      {
        v47 = mach_continuous_time();
        v46 = vabdd_f64(sub_18F6BDF00(v47), v3[10]) * 1000.0;
      }
      v49 = *((_QWORD *)v3 + 8);
      v48 = *((_QWORD *)v3 + 9);
      v50 = *((_QWORD *)v3 + 7);
      v51 = *(_QWORD *)(v4 + 320);
      v53 = *(_DWORD *)(v4 + 112);
      v52 = *(_DWORD *)(v4 + 116);
      v54 = *(_DWORD *)(v4 + 120);
      v55 = *(_DWORD *)(v4 + 124);
      v56 = *((unsigned __int8 *)v3 + 88);
      *(_DWORD *)buf = 67243265;
      *(_DWORD *)&buf[4] = v45;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v40;
      *(_WORD *)v116 = 2050;
      *(double *)&v116[2] = v46;
      *(_WORD *)v117 = 2049;
      *(_QWORD *)&v117[2] = v49;
      *(_WORD *)v118 = 2049;
      *(_QWORD *)&v118[2] = v48;
      v119 = 2050;
      *(_QWORD *)v120 = v50;
      *(_WORD *)&v120[8] = 1026;
      *(_DWORD *)v121 = a2 == 0;
      *(_WORD *)&v121[4] = 1026;
      v122 = v52;
      v123 = 2050;
      v124 = v51;
      v125 = 1026;
      v126 = v53;
      v127 = 1026;
      v128 = v54;
      v129 = 1026;
      v130 = v55;
      v131 = 1026;
      v132 = v56;
      _os_log_impl(&dword_18F5B3000, v41, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Roads,MapHelperService,roadCount,%{public}d,sizeOfRoad,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,connectionBufferUsedCount,%{public}lu,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d", buf, 0x64u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      if (a2)
        v60 = objc_msgSend_count(a2, v57, v58, v59);
      else
        v60 = 0;
      v70 = 0.0;
      if (v3[10] >= 0.0)
      {
        v71 = mach_continuous_time();
        v70 = vabdd_f64(sub_18F6BDF00(v71), v3[10]) * 1000.0;
      }
      v73 = *((_QWORD *)v3 + 8);
      v72 = *((_QWORD *)v3 + 9);
      v74 = *((_QWORD *)v3 + 7);
      v75 = *(_QWORD *)(v4 + 320);
      v77 = *(_DWORD *)(v4 + 112);
      v76 = *(_DWORD *)(v4 + 116);
      v78 = *(_DWORD *)(v4 + 120);
      v79 = *(_DWORD *)(v4 + 124);
      v80 = *((unsigned __int8 *)v3 + 88);
      *(_DWORD *)v95 = 67243265;
      *(_DWORD *)&v95[4] = v60;
      *(_WORD *)&v95[8] = 1026;
      *(_DWORD *)&v95[10] = v40;
      *(_WORD *)&v95[14] = 2050;
      *(double *)&v95[16] = v70;
      *(_WORD *)v96 = 2049;
      *(_QWORD *)&v96[2] = v73;
      *(_WORD *)v97 = 2049;
      *(_QWORD *)&v97[2] = v72;
      v98 = 2050;
      *(_QWORD *)v99 = v74;
      *(_WORD *)&v99[8] = 1026;
      *(_DWORD *)v100 = a2 == 0;
      *(_WORD *)&v100[4] = 1026;
      v101 = v76;
      v102 = 2050;
      v103 = v75;
      v104 = 1026;
      v105 = v77;
      v106 = 1026;
      v107 = v78;
      v108 = 1026;
      v109 = v79;
      v110 = 1026;
      v111 = v80;
      v81 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "CoreLocation: %s\n", v81);
      if (v81 != buf)
        free(v81);
    }
  }
  *(_QWORD *)buf = &v89;
  sub_18F62AB98((void ***)buf);
  sub_18F62C738((uint64_t)&v92, v93[0]);
}

void sub_18F62697C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,_QWORD *a30,uint64_t a31,uint64_t a32,void **a33)
{
  a33 = (void **)&a26;
  sub_18F62AB98(&a33);
  sub_18F62C738((uint64_t)&a29, a30);
  _Unwind_Resume(a1);
}

char *sub_18F6269D4@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0xE8uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E298FEB8;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *((_QWORD *)v2 + 17) = 0;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)(v2 + 44) = -1;
  *((_QWORD *)v2 + 8) = 0xBFF0000000000000;
  *((_QWORD *)v2 + 9) = 0;
  *((_QWORD *)v2 + 10) = 0;
  *((_QWORD *)v2 + 11) = 0;
  *((_QWORD *)v2 + 12) = -1;
  *((_QWORD *)v2 + 16) = -1;
  *((_DWORD *)v2 + 34) = -1;
  *((_QWORD *)v2 + 28) = 0;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t sub_18F626A68(uint64_t a1)
{
  sub_18F5D6004(a1 + 32);
  sub_18F5D6004(a1 + 16);
  return sub_18F5D6004(a1);
}

void sub_18F626A98(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  unint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t **v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t **v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t **v65;
  _OWORD *v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t *v78;
  std::__shared_weak_count *v79;
  uint64_t *v80;
  std::__shared_weak_count *v81;
  uint64_t *v82;
  std::__shared_weak_count *v83;
  __int128 v84;
  __int128 v85;
  uint64_t *v86;
  _QWORD v87[5];

  v3 = *(unint64_t **)(a1 + 16);
  if (!v3)
    return;
  v6 = *a3;
  v7 = *v3;
  v8 = a3[1] - *a3;
  if (!v8)
  {
LABEL_8:
    v10 = sub_18F62C864(a2, v7, v3[1], v3);
    v11 = v10[6];
    v12 = v10[7];
    v78 = v11;
    v79 = (std::__shared_weak_count *)v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 1);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = v10[9];
    v80 = v10[8];
    v81 = (std::__shared_weak_count *)v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 1);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = v10[11];
    v82 = v10[10];
    v83 = (std::__shared_weak_count *)v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 1);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = (uint64_t **)*a3;
    v22 = a3[1];
    v23 = a3[2];
    if (v22 < v23)
    {
      if (v21 == (uint64_t **)v22)
      {
        *v21 = v11;
        v33 = v79;
        v21[1] = (uint64_t *)v79;
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldxr(p_shared_owners);
          while (__stxr(v35 + 1, p_shared_owners));
        }
        v21[2] = v80;
        v36 = v81;
        v21[3] = (uint64_t *)v81;
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        v21[4] = v82;
        v39 = v83;
        v21[5] = (uint64_t *)v83;
        if (v39)
        {
          v40 = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        a3[1] = (uint64_t)(v21 + 6);
      }
      else
      {
        v24 = v21 + 6;
        v25 = v22 - 48;
        if (v22 < 0x30)
        {
          v27 = (uint64_t **)a3[1];
        }
        else
        {
          v26 = v22 - 48;
          v27 = (uint64_t **)a3[1];
          do
          {
            *(_OWORD *)v27 = *(_OWORD *)v26;
            *(_QWORD *)v26 = 0;
            *(_QWORD *)(v26 + 8) = 0;
            *((_OWORD *)v27 + 1) = *(_OWORD *)(v26 + 16);
            *(_QWORD *)(v26 + 16) = 0;
            *(_QWORD *)(v26 + 24) = 0;
            *((_OWORD *)v27 + 2) = *(_OWORD *)(v26 + 32);
            *(_QWORD *)(v26 + 32) = 0;
            *(_QWORD *)(v26 + 40) = 0;
            v27 += 6;
            v26 += 48;
          }
          while (v26 < v22);
        }
        a3[1] = (uint64_t)v27;
        if ((_QWORD *)v22 != v24)
        {
          v48 = 0;
          v49 = -16 * ((uint64_t)(v22 - (_QWORD)v24) >> 4);
          do
          {
            sub_18F62B3EC(v22 + v48 - 48, (__int128 *)(v25 + v48 - 48));
            sub_18F62B3EC(v22 + v48 - 32, (__int128 *)(v25 + v48 - 32));
            sub_18F62B3EC(v22 + v48 - 16, (__int128 *)(v25 + v48 - 16));
            v48 -= 48;
          }
          while (v49 != v48);
          v27 = (uint64_t **)a3[1];
        }
        v51 = v21 <= &v78 && v27 > &v78;
        v52 = (uint64_t *)&(&v78)[6 * v51];
        sub_18F623A40(v21, v52);
        sub_18F623A40(v21 + 2, v52 + 2);
        sub_18F623A40(v21 + 4, v52 + 4);
      }
LABEL_74:
      sub_18F626A98(&v78, a2, a3);
      v69 = v83;
      if (v83)
      {
        v70 = (unint64_t *)&v83->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = v81;
      if (v81)
      {
        v73 = (unint64_t *)&v81->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v75 = v79;
      if (v79)
      {
        v76 = (unint64_t *)&v79->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      return;
    }
    v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v21) >> 4) + 1;
    if (v28 > 0x555555555555555)
      sub_18F5F7864();
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (_QWORD)v21) >> 4);
    if (2 * v29 > v28)
      v28 = 2 * v29;
    if (v29 >= 0x2AAAAAAAAAAAAAALL)
      v30 = 0x555555555555555;
    else
      v30 = v28;
    v86 = a3 + 2;
    if (v30)
    {
      v31 = sub_18F62BC44(v30);
      *(_QWORD *)&v84 = v31;
      *((_QWORD *)&v84 + 1) = v31;
      *(_QWORD *)&v85 = v31;
      *((_QWORD *)&v85 + 1) = &v31[6 * v32];
      if (v32)
      {
LABEL_61:
        *v31 = v78;
        v55 = v79;
        v31[1] = v79;
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
        }
        v31[2] = v80;
        v58 = v81;
        v31[3] = v81;
        if (v58)
        {
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        v31[4] = v82;
        v61 = v83;
        v31[5] = v83;
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
        *(_QWORD *)&v85 = v85 + 48;
        v64 = sub_18F62BC88((uint64_t)v21, (uint64_t)v21, *a3, *a3, *((uint64_t *)&v84 + 1), *((uint64_t *)&v84 + 1));
        *((_QWORD *)&v84 + 1) = v64;
        v65 = (uint64_t **)a3[1];
        v66 = (_OWORD *)v85;
        if (v65 != v21)
        {
          do
          {
            *v66 = *(_OWORD *)v21;
            *v21 = 0;
            v21[1] = 0;
            v66[1] = *((_OWORD *)v21 + 1);
            v21[2] = 0;
            v21[3] = 0;
            v66[2] = *((_OWORD *)v21 + 2);
            v21[4] = 0;
            v21[5] = 0;
            v66 += 3;
            v21 += 6;
          }
          while (v21 != v65);
          v64 = *((_QWORD *)&v84 + 1);
          v21 = (uint64_t **)a3[1];
        }
        v67 = *a3;
        *a3 = v64;
        a3[1] = (uint64_t)v66;
        v68 = a3[2];
        a3[2] = *((_QWORD *)&v85 + 1);
        *(_QWORD *)&v85 = v21;
        *((_QWORD *)&v85 + 1) = v68;
        *(_QWORD *)&v84 = v67;
        *((_QWORD *)&v84 + 1) = v67;
        sub_18F62BCCC((uint64_t)&v84);
        goto LABEL_74;
      }
    }
    else
    {
      v84 = 0u;
      v85 = 0u;
    }
    v87[4] = a3 + 2;
    v42 = sub_18F62BC44(1uLL);
    v44 = *((_QWORD *)&v84 + 1);
    if ((_QWORD)v85 == *((_QWORD *)&v84 + 1))
    {
      v47 = *((_QWORD *)&v84 + 1);
      v45 = v42;
    }
    else
    {
      v45 = (_OWORD *)((char *)v42 + v85 - *((_QWORD *)&v84 + 1));
      v46 = v42;
      do
      {
        *v46 = *(_OWORD *)v44;
        *(_QWORD *)v44 = 0;
        *(_QWORD *)(v44 + 8) = 0;
        v46[1] = *(_OWORD *)(v44 + 16);
        *(_QWORD *)(v44 + 16) = 0;
        *(_QWORD *)(v44 + 24) = 0;
        v46[2] = *(_OWORD *)(v44 + 32);
        *(_QWORD *)(v44 + 32) = 0;
        *(_QWORD *)(v44 + 40) = 0;
        v46 += 3;
        v44 += 48;
      }
      while (v46 != v45);
      v47 = *((_QWORD *)&v84 + 1);
      v44 = v85;
    }
    v53 = v84;
    v54 = *((_QWORD *)&v85 + 1);
    *(_QWORD *)&v84 = v42;
    *((_QWORD *)&v84 + 1) = v42;
    v87[0] = v53;
    v87[1] = v47;
    *(_QWORD *)&v85 = v45;
    *((_QWORD *)&v85 + 1) = &v42[3 * v43];
    v87[2] = v44;
    v87[3] = v54;
    sub_18F62BCCC((uint64_t)v87);
    v31 = (_QWORD *)v85;
    goto LABEL_61;
  }
  v9 = v8 / 48;
  if (v9 <= 1)
    v9 = 1;
  while (**(_QWORD **)v6 != v7 || *(_QWORD *)(*(_QWORD *)v6 + 8) != v3[1])
  {
    v6 += 48;
    if (!--v9)
      goto LABEL_8;
  }
}

void sub_18F627024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_18F62BCCC((uint64_t)&a15);
  sub_18F626A68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18F62704C(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  unint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t **v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  std::__shared_weak_count *v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;

  v3 = *(unint64_t **)(a1 + 32);
  if (v3)
  {
    v6 = *a3;
    v7 = *v3;
    v8 = a3[1] - *a3;
    if (v8)
    {
      v9 = v8 / 48;
      if (v9 <= 1)
        v9 = 1;
      while (**(_QWORD **)v6 != v7 || *(_QWORD *)(*(_QWORD *)v6 + 8) != v3[1])
      {
        v6 += 48;
        if (!--v9)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      v10 = sub_18F62C864(a2, v7, v3[1], v3);
      v12 = v10[6];
      v11 = v10[7];
      v39 = v12;
      v40 = (std::__shared_weak_count *)v11;
      if (v11)
      {
        v13 = (unint64_t *)(v11 + 1);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v16 = v10[8];
      v15 = v10[9];
      v41 = v16;
      v42 = (std::__shared_weak_count *)v15;
      if (v15)
      {
        v17 = (unint64_t *)(v15 + 1);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = v10[10];
      v20 = (std::__shared_weak_count *)v10[11];
      v43 = v19;
      v44 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      v23 = (uint64_t **)a3[1];
      if ((unint64_t)v23 >= a3[2])
      {
        v30 = sub_18F62C964(a3, &v39);
      }
      else
      {
        *v23 = v12;
        v23[1] = v11;
        if (v11)
        {
          v24 = (unint64_t *)(v11 + 1);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v23[2] = v16;
        v23[3] = v15;
        if (v15)
        {
          v26 = (unint64_t *)(v15 + 1);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        v23[4] = v19;
        v23[5] = (uint64_t *)v20;
        if (v20)
        {
          v28 = (unint64_t *)&v20->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = v23 + 6;
      }
      a3[1] = (uint64_t)v30;
      sub_18F62704C(&v39, a2, a3);
      if (v20)
      {
        v31 = (unint64_t *)&v20->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v33 = v42;
      if (v42)
      {
        v34 = (unint64_t *)&v42->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = v40;
      if (v40)
      {
        v37 = (unint64_t *)&v40->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
    }
  }
}

void sub_18F627278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F626A68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F62728C(uint64_t a1, uint64_t ***a2, uint64_t **a3, double a4)
{
  uint64_t **v8;
  uint64_t **v9;
  double v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t v13;
  double v14;
  uint64_t *v15;
  double v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t **v19;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    v10 = -1.0;
    do
    {
      if (*v8)
      {
        v11 = *a3;
        v12 = a4 < 0.0 || v11 == 0;
        if (!v12
          && v10 >= 0.0
          && (v13 = *v11) != 0
          && (*(_BYTE *)(v13 + 17) || !*(_DWORD *)(v13 + 72))
          && sub_18F7055CC(**v8, v11))
        {
          v14 = fmod(*((double *)*v8 + 5) - a4, 360.0);
          if (v14 < 0.0)
            v14 = v14 + 360.0;
          if (v14 > 180.0)
            v14 = v14 + -360.0;
          if (fabs(v14) >= 90.0)
            goto LABEL_22;
        }
        else if (v10 >= 0.0 && *((double *)*v8 + 7) <= v10)
        {
          goto LABEL_22;
        }
        sub_18F623A40(a3, (uint64_t *)v8);
        v10 = *((double *)*v8 + 7);
      }
LABEL_22:
      v8 += 2;
    }
    while (v8 != v9);
  }
  v15 = *a3;
  if (*a3 && (v16 = *((double *)v15 + 7), v16 > 0.0))
  {
    v17 = 1;
    *((_BYTE *)v15 + 64) = 1;
    v18 = *a2;
    v19 = a2[1];
    if (*a2 != v19)
    {
      do
      {
        if (*v18)
          *((double *)*v18 + 14) = *((double *)*v18 + 7) / v16;
        v18 += 2;
      }
      while (v18 != v19);
      v17 = 1;
    }
  }
  else
  {
    v17 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v17;
}

void sub_18F627450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F627464(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  char *v5;
  uint64_t v6;
  char *v8;
  char *v9;
  uint64_t v10;
  char **v11;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_18F623BF8(a1, a2, &v8, a4);
  v5 = v8;
  if (v8 == v9)
  {
LABEL_5:
    v6 = 0;
  }
  else
  {
    while (**(_QWORD **)v5 != **(_QWORD **)a3 || *(_QWORD *)(*(_QWORD *)v5 + 8) != *(_QWORD *)(*(_QWORD *)a3 + 8))
    {
      v5 += 16;
      if (v5 == v9)
        goto LABEL_5;
    }
    v6 = 1;
  }
  v11 = &v8;
  sub_18F62AB98((void ***)&v11);
  return v6;
}

void sub_18F6274FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_18F62AB98((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F627514(uint64_t a1, char a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  double *v14;
  double *v15;
  double v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  _BOOL4 v21;
  NSObject *v22;
  char *v23;
  NSObject *v24;
  char *v25;
  NSObject *v26;
  int v27;
  uint64_t v28;
  double v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _BOOL8 v35;
  const char *v36;
  CLLocationCoordinate2D v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  const char *v43;
  void *v44;
  int v45;
  intptr_t v46;
  NSObject *v47;
  NSObject *v48;
  uint64_t v49;
  int v51;
  int v52;
  int v53;
  char *v54;
  char *v55;
  char *v56;
  _QWORD v57[6];
  _QWORD v58[3];
  int v59;
  _QWORD v60[2];
  uint64_t v61;
  __n128 (*v62)(__n128 *, __n128 *);
  void (*v63)(uint64_t);
  const char *v64;
  _QWORD v65[3];
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  void (*v70)(uint64_t);
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  _BYTE v74[24];
  double v75;
  __int128 v76;
  uint64_t *v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  char v84;
  char v85;
  _BYTE buf[24];
  double v87;
  __int128 v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  ++*(_DWORD *)(a1 + 112);
  if ((a2 & 1) == 0
    && !sub_18F6204D4((double *)(a1 + 56), (double *)(a1 + 16), *(unsigned __int8 *)(a1 + 217), a5, a6, a7))
  {
    goto LABEL_63;
  }
  *(double *)buf = a7;
  v14 = (double *)buf;
  if (*(double *)(a1 + 184) < a7)
    v14 = (double *)(a1 + 184);
  v15 = (double *)(a1 + 176);
  if (*(double *)(a1 + 176) <= a7)
    v15 = v14;
  v16 = *v15;
  if (!sub_18F62059C(a4, *v15, a5, a6))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v24 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349825;
      *(double *)&buf[4] = a4;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = a5;
      *(_WORD *)&buf[22] = 2049;
      v87 = a6;
      LOWORD(v88) = 2050;
      *(double *)((char *)&v88 + 2) = v16;
      _os_log_impl(&dword_18F5B3000, v24, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Buildings,%{public}.1lf,cacheRoadData,invalid input,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf", buf, 0x2Au);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      *(_DWORD *)v74 = 134349825;
      *(double *)&v74[4] = a4;
      *(_WORD *)&v74[12] = 2049;
      *(double *)&v74[14] = a5;
      *(_WORD *)&v74[22] = 2049;
      v75 = a6;
      LOWORD(v76) = 2050;
      *(double *)((char *)&v76 + 2) = v16;
      v25 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::bufferMapData(const CFAbsoluteTime, const double, const double, const double, const BOOL, const BOOL)", "CoreLocation: %s\n", v25);
      if (v25 != buf)
        free(v25);
    }
    goto LABEL_64;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990370);
  v17 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(_DWORD *)(a1 + 112);
    v18 = *(_DWORD *)(a1 + 116);
    v20 = *(unsigned __int8 *)(a1 + 224);
    *(_DWORD *)buf = 134350593;
    *(double *)&buf[4] = a4;
    *(_WORD *)&buf[12] = 2049;
    *(double *)&buf[14] = a5;
    *(_WORD *)&buf[22] = 2049;
    v87 = a6;
    LOWORD(v88) = 2050;
    *(double *)((char *)&v88 + 2) = v16;
    WORD5(v88) = 1026;
    HIDWORD(v88) = v18;
    LOWORD(v89) = 1026;
    *(_DWORD *)((char *)&v89 + 2) = v19;
    HIWORD(v89) = 1026;
    LODWORD(v90) = v20;
    _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Buildings,%{public}.1lf,buffering map data,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,mapsAPICalls,%{public}d,bufferCalls,%{public}d,queryInProgress,%{public}d", buf, 0x3Cu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v52 = *(_DWORD *)(a1 + 112);
    v51 = *(_DWORD *)(a1 + 116);
    v53 = *(unsigned __int8 *)(a1 + 224);
    *(_DWORD *)v74 = 134350593;
    *(double *)&v74[4] = a4;
    *(_WORD *)&v74[12] = 2049;
    *(double *)&v74[14] = a5;
    *(_WORD *)&v74[22] = 2049;
    v75 = a6;
    LOWORD(v76) = 2050;
    *(double *)((char *)&v76 + 2) = v16;
    WORD5(v76) = 1026;
    HIDWORD(v76) = v51;
    LOWORD(v77) = 1026;
    *(_DWORD *)((char *)&v77 + 2) = v52;
    HIWORD(v77) = 1026;
    LODWORD(v78) = v53;
    v54 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::bufferMapData(const CFAbsoluteTime, const double, const double, const double, const BOOL, const BOOL)", "CoreLocation: %s\n", v54);
    if (v54 != buf)
      free(v54);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (!*(_BYTE *)(a1 + 169))
  {
    if (!*(_QWORD *)(a1 + 88))
    {
      v21 = 0;
      goto LABEL_62;
    }
    v72 = a1;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v73 = 256;
    if (*(_QWORD *)(a1 + 88))
    {
      if (!*(_BYTE *)(a1 + 224))
      {
        v41 = mach_continuous_time();
        v42 = sub_18F6BDF00(v41);
        v44 = (void *)MEMORY[0x1940032C4]();
        v66 = 0;
        v67 = &v66;
        v68 = 0x3052000000;
        v69 = sub_18F5CD7E0;
        v70 = sub_18F5CD778;
        v71 = 0;
        v45 = *(unsigned __int8 *)(a1 + 216);
        if (*(_BYTE *)(a1 + 216))
          v67[5] = (uint64_t)dispatch_semaphore_create(0);
        v60[0] = 0;
        v60[1] = v60;
        v61 = 0x4812000000;
        v62 = sub_18F628924;
        v63 = sub_18F628948;
        v64 = "";
        memset(v65, 0, sizeof(v65));
        v58[0] = 0;
        v58[1] = v58;
        v58[2] = 0x2020000000;
        v59 = 0;
        v57[0] = MEMORY[0x1E0C809B0];
        v57[1] = 3221225472;
        v57[2] = sub_18F628970;
        v57[3] = &unk_1E2991938;
        v57[4] = v60;
        v57[5] = v58;
        *(_QWORD *)v74 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v74[8] = 3221225472;
        *(_QWORD *)&v74[16] = sub_18F628C58;
        v75 = COERCE_DOUBLE(&unk_1E29918E8);
        v79 = a4;
        v80 = v16;
        v81 = a5;
        v82 = a6;
        *(_QWORD *)&v76 = v60;
        *((_QWORD *)&v76 + 1) = v58;
        v83 = v42;
        v84 = v45;
        v85 = a3;
        v77 = &v66;
        v78 = a1;
        ++*(_DWORD *)(a1 + 116);
        *(_BYTE *)(a1 + 224) = 1;
        objc_msgSend_findBuildingsNear_radius_tileSetStyle_handler_completionHandler_(*(void **)(a1 + 88), v43, *(_DWORD *)(a1 + 220) == 1, (uint64_t)v57, v74, a5, a6, v16);
        if (!v45)
          goto LABEL_59;
        v46 = dispatch_semaphore_wait((dispatch_semaphore_t)v67[5], 0xFFFFFFFFFFFFFFFFLL);
        v47 = v67[5];
        if (v47)
          dispatch_release(v47);
        if (v46)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990370);
          v48 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v48, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Buildings,queryForBuildingsWithinDistance,semaphore timed out", buf, 2u);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990370);
            v56 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)", "CoreLocation: %s\n", v56);
            if (v56 != buf)
              free(v56);
          }
          v21 = 0;
        }
        else
        {
LABEL_59:
          v21 = 1;
        }
        _Block_object_dispose(v58, 8);
        _Block_object_dispose(v60, 8);
        *(_QWORD *)buf = v65;
        sub_18F62AB98((void ***)buf);
        _Block_object_dispose(&v66, 8);
        objc_autoreleasePoolPop(v44);
        goto LABEL_61;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v26 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v26, OS_LOG_TYPE_INFO, "CLMM,CLTSP,building data query already in progress using maps API", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990370);
        *(_WORD *)v74 = 0;
        v55 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)", "CoreLocation: %s\n", v55);
        if (v55 != buf)
          free(v55);
      }
    }
    v21 = 0;
LABEL_61:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    goto LABEL_62;
  }
  v21 = *(_BYTE *)(a1 + 224) == 0;
  if (*(_BYTE *)(a1 + 224))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v22 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_INFO, "CLMM,CLTSP,building data query already in progress using XPC", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      *(_WORD *)v74 = 0;
      v23 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)", "CoreLocation: %s\n", v23);
      if (v23 != buf)
        free(v23);
    }
  }
  else
  {
    v27 = *(unsigned __int8 *)(a1 + 192);
    v60[0] = a1;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    LOWORD(v61) = 256;
    v28 = mach_continuous_time();
    v29 = sub_18F6BDF00(v28);
    v30 = (void *)MEMORY[0x1940032C4]();
    ++*(_DWORD *)(a1 + 116);
    *(_QWORD *)v74 = 0;
    *(_QWORD *)&v74[8] = v74;
    *(_QWORD *)&v74[16] = 0x2020000000;
    LOBYTE(v75) = 0;
    *(_BYTE *)(a1 + 224) = 1;
    v34 = (void *)objc_msgSend_sharedInstance(CLMapsXPCServiceManager, v31, v32, v33);
    v35 = v27 != 0;
    v37 = CLLocationCoordinate2DMake(a5, a6);
    v38 = *(_DWORD *)(a1 + 152);
    if (*(_DWORD *)(a1 + 220) == 1)
      v39 = 2;
    else
      v39 = 1;
    v40 = *(unsigned __int8 *)(a1 + 216);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_18F6291FC;
    v87 = COERCE_DOUBLE(&unk_1E2991960);
    v89 = a4;
    v90 = v16;
    v91 = a5;
    v92 = a6;
    *(_QWORD *)&v88 = v74;
    *((_QWORD *)&v88 + 1) = a1;
    v93 = v29;
    objc_msgSend_collectMapDataOfType_aroundCoordinate_inRadius_allowNetwork_isPedestrianOrCycling_clearTiles_callSynchronously_WithReply_(v34, v36, v39, v35, (v38 & 0xFFFFFFFE) == 2, a3, v40, buf, v37.latitude, v37.longitude, v16);
    _Block_object_dispose(v74, 8);
    objc_autoreleasePoolPop(v30);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
LABEL_62:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (!v21)
  {
LABEL_64:
    v49 = 0;
    goto LABEL_65;
  }
LABEL_63:
  v49 = 1;
LABEL_65:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v49;
}

void sub_18F6280A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  sub_18F62AB98(&a61);
  _Block_object_dispose(&a38, 8);
  sub_18F5CE240((uint64_t)&a44);
  sub_18F5CE240((uint64_t)&a14);
  sub_18F5CE240((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_18F62816C(char **a1, __int128 *a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;

  v4 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    v10 = (v4 - *a1) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      sub_18F5F7864();
    v12 = v5 - (_QWORD)*a1;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v14 = (char *)sub_18F62C1A0(v13);
    v16 = &v14[16 * v10];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = *a1;
    v21 = a1[1];
    if (v21 == *a1)
    {
      v9 = v16 + 16;
      *a1 = v16;
      a1[1] = v16 + 16;
      a1[2] = &v14[16 * v15];
    }
    else
    {
      v22 = &v14[16 * v10];
      do
      {
        v23 = *((_OWORD *)v21 - 1);
        v21 -= 16;
        *((_OWORD *)v22 - 1) = v23;
        v22 -= 16;
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
      }
      while (v21 != v20);
      v21 = *a1;
      v24 = (uint64_t)a1[1];
      v9 = v16 + 16;
      *a1 = v22;
      a1[1] = v16 + 16;
      a1[2] = &v14[16 * v15];
      while ((char *)v24 != v21)
      {
        v24 -= 16;
        sub_18F5D6004(v24);
      }
    }
    if (v21)
      operator delete(v21);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v4 = *(_QWORD *)a2;
    *((_QWORD *)v4 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v4 + 16;
  }
  a1[1] = v9;
}

uint64_t sub_18F6282A0(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  double Current;
  uint64_t i;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double *v25;
  double v27;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char *j;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  double *v54;
  void **v55;
  double *v56;
  _BYTE *v57;
  uint64_t v58;
  double v59;
  uint64_t *v60;
  char *v61;
  double *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  double *v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *__p[2];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  __int16 v97;
  double v98[2];

  v9 = a1;
  v96 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v97 = 256;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v10 = mach_continuous_time();
  sub_18F6BDF00(v10);
  sub_18F62B450((double *)__p, a3, a4, a5);
  if (*(_BYTE *)(v9 + 216))
  {
    Current = CFAbsoluteTimeGetCurrent();
    if (!sub_18F627514(v9, 0, 0, Current, a3, a4, a5))
    {
      v84 = 0;
      goto LABEL_109;
    }
  }
  v13 = v93;
  for (i = (uint64_t)v94; (char *)i != v13; i = sub_18F5D6004(i - 16))
    ;
  v94 = v13;
  v14 = *(uint64_t **)(v9 + 232);
  v15 = *(uint64_t **)(v9 + 240);
  v86 = v9;
  if (v14 == v15)
    goto LABEL_62;
  do
  {
    v16 = *v14;
    if (!*v14)
      goto LABEL_58;
    v17 = *(_QWORD *)(v16 + 16);
    v18 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(v16 + 24) - v17) >> 3);
    if ((int)v18 < 1)
      goto LABEL_58;
    v19 = 0;
    while (1)
    {
      if (v17)
      {
        if (v18 > v19)
        {
          v20 = *(double **)(v17 + 72 * v19 + 48);
          v21 = *(_QWORD *)(v17 + 72 * v19 + 56) - (_QWORD)v20;
          if ((int)((unint64_t)v21 >> 4) >= 1)
            break;
        }
      }
LABEL_33:
      if (++v19 == 954437177 * ((*(_QWORD *)(v16 + 24) - v17) >> 3))
        goto LABEL_58;
    }
    v22 = 0;
    v23 = v21 >> 4;
    v24 = ((unint64_t)v21 >> 4);
    while (1)
    {
      if (v23 <= v22)
        v25 = 0;
      else
        v25 = v20;
      if (*(double *)__p > *v25 || *(double *)&v90 < *v25)
        goto LABEL_32;
      v27 = v25[1];
      if (*((double *)&v90 + 1) <= *(double *)&__p[1])
        break;
      if (*((double *)&v90 + 1) >= v27 && *(double *)&__p[1] <= v27)
        goto LABEL_35;
LABEL_32:
      ++v22;
      v20 += 2;
      if (v24 == v22)
        goto LABEL_33;
    }
    if (*((double *)&v90 + 1) >= *(double *)&__p[1])
      goto LABEL_32;
    if (*((double *)&v90 + 1) <= v27 && *(double *)&__p[1] >= v27)
      goto LABEL_32;
LABEL_35:
    if (v13 >= v95)
    {
      v33 = (v13 - v93) >> 4;
      if ((unint64_t)(v33 + 1) >> 60)
        sub_18F5F7864();
      v34 = (v95 - v93) >> 3;
      if (v34 <= v33 + 1)
        v34 = v33 + 1;
      if ((unint64_t)(v95 - v93) >= 0x7FFFFFFFFFFFFFF0)
        v35 = 0xFFFFFFFFFFFFFFFLL;
      else
        v35 = v34;
      v36 = (char *)sub_18F62C1A0(v35);
      v38 = &v36[16 * v33];
      v39 = *(_OWORD *)v14;
      *(_OWORD *)v38 = *(_OWORD *)v14;
      if (*((_QWORD *)&v39 + 1))
      {
        v40 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      v42 = v93;
      v43 = v94;
      if (v94 == v93)
      {
        v13 = v38 + 16;
        v93 = v38;
        v94 = v38 + 16;
        v95 = &v36[16 * v37];
        if (!v43)
          goto LABEL_57;
      }
      else
      {
        v44 = v38;
        do
        {
          v45 = *((_OWORD *)v43 - 1);
          v43 -= 16;
          *((_OWORD *)v44 - 1) = v45;
          v44 -= 16;
          *(_QWORD *)v43 = 0;
          *((_QWORD *)v43 + 1) = 0;
        }
        while (v43 != v42);
        v43 = v93;
        v46 = (uint64_t)v94;
        v93 = v44;
        v94 = v38 + 16;
        v47 = v38 + 16;
        v95 = &v36[16 * v37];
        while ((char *)v46 != v43)
        {
          v46 -= 16;
          sub_18F5D6004(v46);
        }
        v13 = v47;
        if (!v43)
          goto LABEL_57;
      }
      operator delete(v43);
      goto LABEL_57;
    }
    *(_QWORD *)v13 = v16;
    v30 = v14[1];
    *((_QWORD *)v13 + 1) = v30;
    if (v30)
    {
      v31 = (unint64_t *)(v30 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v13 += 16;
LABEL_57:
    v94 = v13;
LABEL_58:
    v14 += 2;
  }
  while (v14 != v15);
LABEL_62:
  for (j = v93; j != v13; j += 16)
  {
    v49 = *(_QWORD *)j;
    v50 = *(_QWORD *)(*(_QWORD *)j + 16);
    v51 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(*(_QWORD *)j + 24) - v50) >> 3);
    if ((int)v51 >= 1)
    {
      v52 = 0;
      do
      {
        if (v51 > v52 && v50)
        {
          v91 = 0u;
          v92 = 0u;
          *(_OWORD *)__p = 0u;
          v90 = 0u;
          v53 = v50 + 72 * v52;
          v56 = *(double **)(v53 + 48);
          v55 = (void **)(v53 + 48);
          v54 = v56;
          __p[0] = *(v55 - 2);
          v57 = v55[1];
          v58 = v57 - (_BYTE *)v56;
          v59 = 0.0;
          if ((int)((unint64_t)(v57 - (_BYTE *)v56) >> 4) < 1)
          {
            v77 = 0.0;
            v78 = 0.0;
            v79 = 0.0;
          }
          else
          {
            v60 = a2;
            v61 = j;
            v62 = 0;
            v63 = 0;
            do
            {
              if (v54 && v58 >> 4 > v63)
              {
                v98[0] = 0.0;
                v87 = 0;
                v88 = 0;
                sub_18F5BD37C((double *)(v86 + 16), (double *)&v88, (double *)&v87, v98, a3, a4, 0.0, v54[2 * v63], v54[2 * v63 + 1], 0.0);
                v65 = v87;
                v64 = v88;
                if ((unint64_t)v62 >= *((_QWORD *)&v90 + 1))
                {
                  v66 = ((char *)v62 - (char *)__p[1]) >> 4;
                  if ((unint64_t)(v66 + 1) >> 60)
                    sub_18F5F7864();
                  v67 = (uint64_t)(*((_QWORD *)&v90 + 1) - (unint64_t)__p[1]) >> 3;
                  if (v67 <= v66 + 1)
                    v67 = v66 + 1;
                  if (*((_QWORD *)&v90 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF0)
                    v68 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v68 = v67;
                  v70 = (char *)sub_18F62AB64((uint64_t)&v90 + 8, v68);
                  v71 = &v70[16 * v66];
                  *(_QWORD *)v71 = v65;
                  *((_QWORD *)v71 + 1) = v64;
                  v72 = __p[1];
                  v73 = (_QWORD *)v90;
                  v74 = v71;
                  while (v73 != v72)
                  {
                    v75 = *(v73 - 2);
                    v73 -= 2;
                    *((_QWORD *)v74 - 2) = v75;
                    v74 -= 16;
                    *((_QWORD *)v74 + 1) = v73[1];
                  }
                  v62 = (double *)(v71 + 16);
                  __p[1] = v74;
                  *(_QWORD *)&v90 = v71 + 16;
                  *((_QWORD *)&v90 + 1) = &v70[16 * v69];
                  if (v72)
                    operator delete(v72);
                }
                else
                {
                  *(_QWORD *)v62 = v87;
                  *((_QWORD *)v62 + 1) = v64;
                  v62 += 2;
                }
                *(_QWORD *)&v90 = v62;
                v57 = v55[1];
                v54 = (double *)*v55;
              }
              ++v63;
              v58 = v57 - (_BYTE *)v54;
            }
            while ((uint64_t)v63 < (int)((unint64_t)(v57 - (_BYTE *)v54) >> 4));
            v76 = (double *)__p[1];
            v77 = 0.0;
            v78 = 0.0;
            v79 = 0.0;
            j = v61;
            a2 = v60;
            if (__p[1] != v62)
            {
              v59 = *(double *)__p[1];
              v77 = *((double *)__p[1] + 1);
              v78 = *(double *)__p[1];
              v79 = v77;
              do
              {
                v80 = *v76;
                v81 = v76[1];
                v76 += 2;
                if (v80 < v59)
                  v59 = v80;
                if (v81 < v77)
                  v77 = v81;
                if (v78 < v80)
                  v78 = v80;
                if (v79 < v81)
                  v79 = v81;
              }
              while (v76 != v62);
            }
          }
          *(double *)&v91 = v59;
          *((double *)&v91 + 1) = v77;
          *(double *)&v92 = v78;
          *((double *)&v92 + 1) = v79;
          v82 = a2[1];
          if (v82 >= a2[2])
          {
            v83 = sub_18F62CC2C(a2, (uint64_t)__p);
          }
          else
          {
            *(void **)v82 = __p[0];
            *(_QWORD *)(v82 + 16) = 0;
            *(_QWORD *)(v82 + 24) = 0;
            *(_QWORD *)(v82 + 8) = 0;
            sub_18F62CD7C((char *)(v82 + 8), (_QWORD *)__p[1], (_QWORD *)v90, (uint64_t)(v90 - (unint64_t)__p[1]) >> 4);
            *(_OWORD *)(v82 + 32) = v91;
            *(_OWORD *)(v82 + 48) = v92;
            v83 = v82 + 64;
            a2[1] = v82 + 64;
          }
          a2[1] = v83;
          if (__p[1])
          {
            *(void **)&v90 = __p[1];
            operator delete(__p[1]);
          }
          v49 = *(_QWORD *)j;
        }
        ++v52;
        v50 = *(_QWORD *)(v49 + 16);
        v51 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(v49 + 24) - v50) >> 3);
      }
      while ((uint64_t)v52 < (int)v51);
    }
  }
  v84 = 1;
  v9 = v86;
LABEL_109:
  __p[0] = &v93;
  sub_18F62AB98((void ***)__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  return v84;
}

void sub_18F6288D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  *(_QWORD *)(v26 - 144) = &a23;
  sub_18F62AB98((void ***)(v26 - 144));
  sub_18F5CE240((uint64_t)&a26);
  _Unwind_Resume(a1);
}

__n128 sub_18F628924(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_18F628948(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  sub_18F62AB98(&v1);
}

void sub_18F628970(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  void *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  void *__p[2];
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[128];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = a2;
    if (v3)
    {
      v4 = v3;
      v5 = (std::__shared_weak_count *)operator new(0x40uLL);
      v5->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      v5[1].__vftable = 0;
      v5->__shared_weak_owners_ = 0;
      v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298DE48;
      v5[1].__shared_owners_ = 0;
      v5[1].__shared_weak_owners_ = 0;
      LODWORD(v5[1].__shared_owners_) = -1;
      v5[2].__vftable = 0;
      v5[2].__shared_owners_ = 0;
      *(_QWORD *)&v73 = v5 + 1;
      *((_QWORD *)&v73 + 1) = v5;
      v5[1].__vftable = (std::__shared_weak_count_vtbl *)objc_msgSend_buildingID(v4, v7, v8, v9);
      LODWORD(v5[1].__shared_owners_) = objc_msgSend_tileSetStyle(v4, v10, v11, v12);
      BYTE4(v5[1].__shared_owners_) = 0;
      BYTE4(v5[1].__shared_owners_) = objc_msgSend_hasTerrainElevation(v4, v13, v14, v15);
      v19 = (void *)objc_msgSend_sections(v4, v16, v17, v18);
      v23 = objc_msgSend_count(v19, v20, v21, v22);
      sub_18F62BD34(&v5[1].__shared_weak_owners_, v23);
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v27 = (void *)objc_msgSend_sections(v4, v24, v25, v26);
      v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v79, (uint64_t)v83, 16);
      v71 = v4;
      v72 = a1;
      if (v32)
      {
        v33 = *(_QWORD *)v80;
        do
        {
          for (i = 0; i != v32; ++i)
          {
            if (*(_QWORD *)v80 != v33)
              objc_enumerationMutation(v27);
            v35 = *(void **)(*((_QWORD *)&v79 + 1) + 8 * i);
            v78 = 0;
            v76 = 0u;
            *(_OWORD *)__p = 0u;
            v74 = 0u;
            v75 = 0u;
            objc_msgSend_maxBaseHeight(v35, v29, v30, v31, v71);
            *(_QWORD *)&v74 = v36;
            objc_msgSend_minBaseHeight(v35, v37, v38, v39);
            *((_QWORD *)&v74 + 1) = v40;
            objc_msgSend_terrainElevation(v35, v41, v42, v43);
            *((_QWORD *)&v75 + 1) = v44;
            objc_msgSend_topHeight(v35, v45, v46, v47);
            *(_QWORD *)&v75 = v48;
            objc_msgSend_height(v35, v49, v50, v51);
            *(_QWORD *)&v76 = v52;
            objc_msgSend_baseHeight(v35, v53, v54, v55);
            v59 = 0;
            v60 = 0;
            *((_QWORD *)&v76 + 1) = v61;
            while (objc_msgSend_coordinateCount(v35, v56, v57, v58) > v60)
            {
              v65 = *(double *)(objc_msgSend_coordinates(v35, v62, v63, v64) + v59);
              v69 = objc_msgSend_coordinates(v35, v66, v67, v68);
              sub_18F62BDE0(&v74, v65, *(double *)(v69 + v59 + 8));
              ++v60;
              v59 += 16;
            }
            sub_18F62BEC8(&v5[1].__vftable, &v74);
            if (__p[0])
              operator delete(__p[0]);
          }
          v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v29, (uint64_t)&v79, (uint64_t)v83, 16);
        }
        while (v32);
      }
      sub_18F62816C((char **)(*(_QWORD *)(*(_QWORD *)(v72 + 32) + 8) + 48), &v73);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v72 + 40) + 8) + 24) += 40;

      do
        v70 = __ldaxr(p_shared_owners);
      while (__stlxr(v70 - 1, p_shared_owners));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_18F628C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  sub_18F5D6004((uint64_t)&a11);
  _Unwind_Resume(a1);
}

char *sub_18F628C58(uint64_t a1, void *a2)
{
  int32x2_t *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *result;
  uint64_t v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint8_t buf[4];
  uint64_t v49;
  __int16 v50;
  _BYTE v51[24];
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  _BOOL4 v57;
  __int16 v58;
  __int32 v59;
  __int16 v60;
  int v61;
  __int16 v62;
  __int32 v63;
  __int16 v64;
  __int32 v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v4 = *(int32x2_t **)(a1 + 56);
  v4[28].i8[0] = 0;
  if (a2)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v5 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349571;
      v49 = objc_msgSend_code(a2, v6, v7, v8);
      v50 = 2114;
      *(_QWORD *)v51 = objc_msgSend_domain(a2, v9, v10, v11);
      *(_WORD *)&v51[8] = 2113;
      *(_QWORD *)&v51[10] = objc_msgSend_localizedDescription(a2, v12, v13, v14);
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEFAULT, "CLMM,CLTSP,Buildings,Warning,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      objc_msgSend_code(a2, v38, v39, v40);
      objc_msgSend_domain(a2, v41, v42, v43);
      objc_msgSend_localizedDescription(a2, v44, v45, v46);
      v47 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)_block_invoke", "CoreLocation: %s\n", v47);
      if (v47 != (char *)buf)
        free(v47);
    }
    v4[15] = vadd_s32(v4[15], (int32x2_t)0x100000001);
  }
  else
  {
    v16 = *(double *)(a1 + 64);
    v15 = *(double *)(a1 + 72);
    v17 = *(double *)(a1 + 80);
    v18 = *(double *)(a1 + 88);
    if (sub_18F62059C(v16, v15, v17, v18))
    {
      *(double *)&v4[7] = v16;
      *(double *)&v4[8] = v17;
      *(double *)&v4[9] = v18;
      *(double *)&v4[10] = v15;
    }
    v4[15].i32[1] = 0;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990370);
  v19 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v20 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48)) >> 4;
    v21 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v22 = 0.0;
    if (*(double *)(a1 + 96) >= 0.0)
    {
      v23 = mach_continuous_time();
      v22 = vabdd_f64(sub_18F6BDF00(v23), *(double *)(a1 + 96)) * 1000.0;
    }
    v25 = *(_QWORD *)(a1 + 80);
    v24 = *(_QWORD *)(a1 + 88);
    v26 = *(_QWORD *)(a1 + 72);
    v27 = *(unsigned __int8 *)(a1 + 104);
    v28 = v4[14].i32[1];
    v29 = v4[15].i32[0];
    v30 = v4[15].i32[1];
    *(_DWORD *)buf = 134351617;
    v49 = v20;
    v50 = 1026;
    *(_DWORD *)v51 = v21;
    *(_WORD *)&v51[4] = 2050;
    *(double *)&v51[6] = v22;
    *(_WORD *)&v51[14] = 2049;
    *(_QWORD *)&v51[16] = v25;
    v52 = 2049;
    v53 = v24;
    v54 = 2050;
    v55 = v26;
    v56 = 1026;
    v57 = a2 != 0;
    v58 = 1026;
    v59 = v28;
    v60 = 1026;
    v61 = v27;
    v62 = 1026;
    v63 = v29;
    v64 = 1026;
    v65 = v30;
    _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Buildings,bufferDataUsingMapsAPI,bldgCount,%{public}lu,sizeOfBuildings,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,bufferSynchronously,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d", buf, 0x58u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    if (*(double *)(a1 + 96) >= 0.0)
    {
      v36 = mach_continuous_time();
      sub_18F6BDF00(v36);
    }
    v37 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)_block_invoke", "CoreLocation: %s\n", v37);
    if (v37 != (char *)buf)
      free(v37);
  }
  if (*(_BYTE *)(a1 + 105))
    objc_msgSend_clearBuildingTiles(*(void **)&v4[11], v31, v32, v33);
  v34 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  result = (char *)&v4[29];
  if (&v4[29] != (int32x2_t *)(v34 + 48))
    result = sub_18F62D124((uint64_t)result, *(uint64_t **)(v34 + 48), *(uint64_t **)(v34 + 56), (uint64_t)(*(_QWORD *)(v34 + 56) - *(_QWORD *)(v34 + 48)) >> 4);
  if (*(_BYTE *)(a1 + 104))
    return (char *)dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  return result;
}

void sub_18F6291FC(uint64_t a1, void *a2)
{
  void *v2;
  int32x2_t *v3;
  __objc2_class *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  double v123;
  const char *v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  char *v134;
  NSObject *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  char *v144;
  NSObject *v145;
  NSObject *v146;
  NSObject *v147;
  char *v148;
  int v149;
  unint64_t v150;
  uint64_t *v151;
  int64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  unint64_t v158;
  char *v159;
  uint64_t *v160;
  uint64_t *v161;
  __int128 v162;
  uint64_t *v163;
  unint64_t *v164;
  unint64_t v165;
  NSObject *v166;
  char *v167;
  uint64_t v168;
  NSObject *v169;
  NSObject *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  char *v175;
  char *v176;
  _QWORD *v177;
  double v178;
  uint64_t v179;
  double v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  __int32 v185;
  __int32 v186;
  __int32 v187;
  int v188;
  int v189;
  int32x2_t *v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  char *v195;
  char *v196;
  char *v197;
  _QWORD *v198;
  double v199;
  uint64_t v200;
  double v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  __int32 v206;
  __int32 v207;
  __int32 v208;
  int v209;
  char *v210;
  int32x2_t *v212;
  void *v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  _QWORD *v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  char *v222;
  char *v223;
  unint64_t v224;
  __int16 v225;
  __int128 v226;
  __int128 v227;
  _BYTE v228[40];
  __int16 v229;
  int v230;
  __int16 v231;
  __int32 v232;
  __int16 v233;
  __int32 v234;
  __int16 v235;
  int v236;
  uint8_t v237[128];
  uint8_t buf[8];
  __int16 v239;
  int v240;
  __int16 v241;
  int v242;
  __int16 v243;
  double v244;
  __int16 v245;
  uint64_t v246;
  __int16 v247;
  uint64_t v248;
  __int16 v249;
  uint64_t v250;
  __int16 v251;
  _BOOL4 v252;
  __int16 v253;
  __int32 v254;
  __int16 v255;
  int v256;
  __int16 v257;
  __int32 v258;
  __int16 v259;
  __int32 v260;
  __int16 v261;
  int v262;
  uint64_t v263;

  v2 = a2;
  v263 = *MEMORY[0x1E0C80C00];
  v3 = *(int32x2_t **)(a1 + 40);
  v3[28].i8[0] = 0;
  v222 = 0;
  v223 = 0;
  v224 = 0;
  v4 = &OBJC_METACLASS___CLHeadingInternal;
  v212 = v3;
  if (!a2)
  {
    v3[15] = vadd_s32(v3[15], (int32x2_t)0x100000001);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v169 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v169, OS_LOG_TYPE_ERROR, "CLTSP,Buildings,xpcQueryForBuildingData returned error", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      LOWORD(v226) = 0;
      v195 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "CoreLocation: %s\n", v195);
      if (v195 != (char *)buf)
        free(v195);
    }
    goto LABEL_135;
  }
  v6 = *(double *)(a1 + 48);
  v5 = *(double *)(a1 + 56);
  v7 = *(double *)(a1 + 64);
  v8 = *(double *)(a1 + 72);
  if (sub_18F62059C(v6, v5, v7, v8))
  {
    *(double *)&v3[7] = v6;
    *(double *)&v3[8] = v7;
    *(double *)&v3[9] = v8;
    *(double *)&v3[10] = v5;
  }
  v3[15].i32[1] = 0;
  v218 = 0u;
  v219 = 0u;
  v220 = 0u;
  v221 = 0u;
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v9, (uint64_t)&v218, (uint64_t)v237, 16);
  if (!v10)
  {
LABEL_135:
    v11 = 0;
    goto LABEL_136;
  }
  v11 = 0;
  v216 = *(_QWORD *)v219;
  v213 = v2;
  do
  {
    v12 = 0;
    v214 = v10;
    do
    {
      if (*(_QWORD *)v219 != v216)
        objc_enumerationMutation(v2);
      v13 = *(void **)(*((_QWORD *)&v218 + 1) + 8 * v12);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v16 = (std::__shared_weak_count *)operator new(0x40uLL);
        v16->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        v16->__shared_weak_owners_ = 0;
        v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298DE48;
        v16[1].__vftable = 0;
        v16[1].__shared_weak_owners_ = 0;
        v16[1].__shared_owners_ = 0;
        LODWORD(v16[1].__shared_owners_) = -1;
        v16[2].__vftable = 0;
        v16[2].__shared_owners_ = 0;
        v217 = &v16[1].__vftable;
        v215 = v11;
        if (v13)
        {
          if (objc_msgSend_valueForKey_(v13, v14, (uint64_t)CFSTR("buildingID"), v15))
          {
            v20 = (void *)objc_msgSend_valueForKey_(v13, v18, (uint64_t)CFSTR("buildingID"), v19);
            *v217 = objc_msgSend_longLongValue(v20, v21, v22, v23);
          }
          if (objc_msgSend_valueForKey_(v13, v18, (uint64_t)CFSTR("tileSetStyle"), v19))
          {
            v26 = (void *)objc_msgSend_valueForKey_(v13, v24, (uint64_t)CFSTR("tileSetStyle"), v25);
            LODWORD(v16[1].__shared_owners_) = objc_msgSend_intValue(v26, v27, v28, v29);
          }
          if (objc_msgSend_valueForKey_(v13, v24, (uint64_t)CFSTR("hasTerrainElevation"), v25))
          {
            v32 = (void *)objc_msgSend_valueForKey_(v13, v30, (uint64_t)CFSTR("hasTerrainElevation"), v31);
            BYTE4(v16[1].__shared_owners_) = objc_msgSend_BOOLValue(v32, v33, v34, v35);
          }
          if (objc_msgSend_valueForKey_(v13, v30, (uint64_t)CFSTR("sections"), v31)
            && (v38 = (void *)objc_msgSend_valueForKey_(v13, v36, (uint64_t)CFSTR("sections"), v37)) != 0)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v42 = objc_msgSend_count(v38, v39, v40, v41);
              sub_18F62BD34(&v16[1].__shared_weak_owners_, v42);
              if (objc_msgSend_count(v38, v43, v44, v45))
              {
                v48 = 0;
                while (1)
                {
                  v49 = (void *)objc_msgSend_objectAtIndexedSubscript_(v38, v46, v48, v47);
                  v52 = v49;
                  if (!v49)
                    break;
                  memset(v228, 0, sizeof(v228));
                  v226 = 0u;
                  v227 = 0u;
                  if (objc_msgSend_valueForKey_(v49, v50, (uint64_t)CFSTR("maxBaseHeight"), v51))
                  {
                    v55 = (void *)objc_msgSend_valueForKey_(v52, v53, (uint64_t)CFSTR("maxBaseHeight"), v54);
                    objc_msgSend_doubleValue(v55, v56, v57, v58);
                    *(_QWORD *)&v226 = v59;
                  }
                  if (objc_msgSend_valueForKey_(v52, v53, (uint64_t)CFSTR("minBaseHeight"), v54))
                  {
                    v62 = (void *)objc_msgSend_valueForKey_(v52, v60, (uint64_t)CFSTR("minBaseHeight"), v61);
                    objc_msgSend_doubleValue(v62, v63, v64, v65);
                    *((_QWORD *)&v226 + 1) = v66;
                  }
                  if (objc_msgSend_valueForKey_(v52, v60, (uint64_t)CFSTR("topHeight"), v61))
                  {
                    v69 = (void *)objc_msgSend_valueForKey_(v52, v67, (uint64_t)CFSTR("topHeight"), v68);
                    objc_msgSend_doubleValue(v69, v70, v71, v72);
                    *(_QWORD *)&v227 = v73;
                  }
                  if (objc_msgSend_valueForKey_(v52, v67, (uint64_t)CFSTR("terrainElevation"), v68))
                  {
                    v76 = (void *)objc_msgSend_valueForKey_(v52, v74, (uint64_t)CFSTR("terrainElevation"), v75);
                    objc_msgSend_doubleValue(v76, v77, v78, v79);
                    *((_QWORD *)&v227 + 1) = v80;
                  }
                  if (objc_msgSend_valueForKey_(v52, v74, (uint64_t)CFSTR("height"), v75))
                  {
                    v83 = (void *)objc_msgSend_valueForKey_(v52, v81, (uint64_t)CFSTR("height"), v82);
                    objc_msgSend_doubleValue(v83, v84, v85, v86);
                    *(_QWORD *)v228 = v87;
                  }
                  if (objc_msgSend_valueForKey_(v52, v81, (uint64_t)CFSTR("baseHeight"), v82))
                  {
                    v90 = (void *)objc_msgSend_valueForKey_(v52, v88, (uint64_t)CFSTR("baseHeight"), v89);
                    objc_msgSend_doubleValue(v90, v91, v92, v93);
                    *(_QWORD *)&v228[8] = v94;
                  }
                  if (objc_msgSend_valueForKey_(v52, v88, (uint64_t)CFSTR("coordinateCount"), v89))
                  {
                    v97 = (void *)objc_msgSend_valueForKey_(v52, v95, (uint64_t)CFSTR("coordinateCount"), v96);
                    v103 = objc_msgSend_intValue(v97, v98, v99, v100);
                    if (v103 >= 1)
                    {
                      v104 = 0;
                      v105 = 1;
                      while (1)
                      {
                        v106 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v101, (uint64_t)CFSTR("%@%i"), v102, CFSTR("coord"), v104);
                        if (objc_msgSend_valueForKey_(v52, v107, v106, v108))
                        {
                          v109 = (void *)objc_msgSend_valueForKey_(v52, v101, v106, v102);
                          v112 = (void *)objc_msgSend_componentsSeparatedByString_(v109, v110, (uint64_t)CFSTR(","), v111);
                          if (objc_msgSend_count(v112, v113, v114, v115) != 2)
                          {
                            if (qword_1EE172158 != -1)
                              dispatch_once(&qword_1EE172158, &unk_1E2990370);
                            v133 = off_1EE172160;
                            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
                            {
                              *(_WORD *)buf = 0;
                              _os_log_impl(&dword_18F5B3000, v133, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionary,coordinate column counts is not 2", buf, 2u);
                            }
                            if (sub_18F5C4AE0(115, 0))
                            {
                              bzero(buf, 0x65CuLL);
                              if (qword_1EE172158 != -1)
                                dispatch_once(&qword_1EE172158, &unk_1E2990370);
                              v225 = 0;
                              v134 = (char *)_os_log_send_and_compose_impl();
                              sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLMapBuilding::fillFromMapHelperNSDictionary(NSDictionary * _Nonnull)", "CoreLocation: %s\n", v134);
                              if (v134 != (char *)buf)
                                free(v134);
                            }
                            goto LABEL_45;
                          }
                          v118 = (void *)objc_msgSend_objectAtIndexedSubscript_(v112, v116, 0, v117);
                          objc_msgSend_doubleValue(v118, v119, v120, v121);
                          v123 = v122;
                          v126 = (void *)objc_msgSend_objectAtIndexedSubscript_(v112, v124, 1, v125);
                          objc_msgSend_doubleValue(v126, v127, v128, v129);
                          sub_18F62BDE0(&v226, v123, v130);
                        }
                        v104 = (v104 + 1);
                        v105 = (int)v104 < v103;
                        if (v103 == (_DWORD)v104)
                          goto LABEL_44;
                      }
                    }
                  }
                  v105 = 0;
LABEL_44:
                  sub_18F62BEC8(v217, &v226);
LABEL_45:
                  if (*(_QWORD *)&v228[16])
                    operator delete(*(void **)&v228[16]);
                  if (!v105 && objc_msgSend_count(v38, v46, v131, v132) > (unint64_t)++v48)
                    continue;
                  goto LABEL_87;
                }
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990370);
                v166 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_18F5B3000, v166, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionary,sectionDict is nil", buf, 2u);
                }
                if (sub_18F5C4AE0(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172158 == -1)
                    goto LABEL_124;
LABEL_126:
                  dispatch_once(&qword_1EE172158, &unk_1E2990370);
LABEL_124:
                  LOWORD(v226) = 0;
                  v167 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLMapBuilding::fillFromMapHelperNSDictionary(NSDictionary * _Nonnull)", "CoreLocation: %s\n", v167);
                  if (v167 != (char *)buf)
                    free(v167);
                }
              }
            }
            else
            {
              if (v4[8].vtable != (void *)-1)
                dispatch_once(&qword_1EE172158, &unk_1E2990370);
              v147 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18F5B3000, v147, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionary,sections is not an array", buf, 2u);
              }
              if (sub_18F5C4AE0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 != -1)
                  goto LABEL_126;
                goto LABEL_124;
              }
            }
          }
          else
          {
            if (v4[8].vtable != (void *)-1)
              dispatch_once(&qword_1EE172158, &unk_1E2990370);
            v145 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F5B3000, v145, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionary,sections is nil", buf, 2u);
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                goto LABEL_126;
              goto LABEL_124;
            }
          }
        }
        else
        {
          if (v4[8].vtable != (void *)-1)
            dispatch_once(&qword_1EE172158, &unk_1E2990370);
          v146 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v146, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,makeBuildingFromMapHelperNSDictionary,dictionary is null", buf, 2u);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              goto LABEL_126;
            goto LABEL_124;
          }
        }
LABEL_87:
        v148 = v223;
        if ((unint64_t)v223 >= v224)
        {
          v152 = (v223 - v222) >> 4;
          v153 = v152 + 1;
          v2 = v213;
          if ((unint64_t)(v152 + 1) >> 60)
            sub_18F5F7864();
          v154 = v224 - (_QWORD)v222;
          if ((uint64_t)(v224 - (_QWORD)v222) >> 3 > v153)
            v153 = v154 >> 3;
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF0)
            v155 = 0xFFFFFFFFFFFFFFFLL;
          else
            v155 = v153;
          v156 = (char *)sub_18F62C1A0(v155);
          v4 = &OBJC_METACLASS___CLHeadingInternal;
          v157 = &v156[16 * v152];
          *(_QWORD *)v157 = v217;
          *((_QWORD *)v157 + 1) = v16;
          do
            v158 = __ldxr(p_shared_owners);
          while (__stxr(v158 + 1, p_shared_owners));
          v159 = v222;
          v160 = (uint64_t *)v223;
          v149 = v215;
          if (v223 == v222)
          {
            v151 = (uint64_t *)(v157 + 16);
            v222 = &v156[16 * v152];
            v223 = v157 + 16;
            v224 = (unint64_t)&v156[16 * (_QWORD)v46];
            v10 = v214;
          }
          else
          {
            v161 = (uint64_t *)&v156[16 * v152];
            v10 = v214;
            do
            {
              v162 = *((_OWORD *)v160 - 1);
              v160 -= 2;
              *((_OWORD *)v161 - 1) = v162;
              v161 -= 2;
              *v160 = 0;
              v160[1] = 0;
            }
            while (v160 != (uint64_t *)v159);
            v160 = (uint64_t *)v222;
            v163 = (uint64_t *)v223;
            v151 = (uint64_t *)(v157 + 16);
            v222 = (char *)v161;
            v223 = v157 + 16;
            v224 = (unint64_t)&v156[16 * (_QWORD)v46];
            while (v163 != v160)
            {
              v163 -= 2;
              sub_18F5D6004((uint64_t)v163);
            }
          }
          if (v160)
            operator delete(v160);
        }
        else
        {
          *(_QWORD *)v223 = v217;
          *((_QWORD *)v148 + 1) = v16;
          v2 = v213;
          v149 = v215;
          do
            v150 = __ldxr(p_shared_owners);
          while (__stxr(v150 + 1, p_shared_owners));
          v151 = (uint64_t *)(v148 + 16);
          v4 = &OBJC_METACLASS___CLHeadingInternal;
          v10 = v214;
        }
        v223 = (char *)v151;
        if (v16)
        {
          v164 = (unint64_t *)&v16->__shared_owners_;
          do
            v165 = __ldaxr(v164);
          while (__stlxr(v165 - 1, v164));
          if (!v165)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v11 = v149 + 40;
        goto LABEL_114;
      }
      if (v4[8].vtable != (void *)-1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v135 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        v139 = objc_msgSend_count(v2, v136, v137, v138);
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v139;
        _os_log_impl(&dword_18F5B3000, v135, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Buildings,conversion to building failed,%{public}d", buf, 8u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v4[8].vtable != (void *)-1)
          dispatch_once(&qword_1EE172158, &unk_1E2990370);
        v143 = objc_msgSend_count(v2, v140, v141, v142);
        LODWORD(v226) = 67240192;
        DWORD1(v226) = v143;
        v144 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "CoreLocation: %s\n", v144);
        if (v144 != (char *)buf)
          free(v144);
      }
LABEL_114:
      ++v12;
    }
    while (v12 != v10);
    v168 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v46, (uint64_t)&v218, (uint64_t)v237, 16);
    v10 = v168;
  }
  while (v168);
LABEL_136:
  if (v4[8].vtable != (void *)-1)
    dispatch_once(&qword_1EE172158, &unk_1E2990370);
  v170 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    if (v2)
      v174 = objc_msgSend_count(v2, v171, v172, v173);
    else
      v174 = 0;
    v176 = v222;
    v175 = v223;
    v177 = (_QWORD *)a1;
    v178 = 0.0;
    if (*(double *)(a1 + 80) >= 0.0)
    {
      v179 = mach_continuous_time();
      v180 = sub_18F6BDF00(v179);
      v177 = (_QWORD *)a1;
      v178 = vabdd_f64(v180, *(double *)(a1 + 80)) * 1000.0;
    }
    v182 = v177[8];
    v181 = v177[9];
    v183 = v177[7];
    v184 = v212[27].u8[0];
    v185 = v212[14].i32[1];
    v186 = v212[15].i32[0];
    v187 = v212[15].i32[1];
    v188 = v212[24].u8[0];
    *(_DWORD *)buf = 67243265;
    *(_DWORD *)&buf[4] = v174;
    v239 = 1026;
    v240 = v11;
    v241 = 1026;
    v242 = (unint64_t)(v175 - v176) >> 4;
    v243 = 2050;
    v244 = v178;
    v245 = 2049;
    v246 = v182;
    v247 = 2049;
    v248 = v181;
    v249 = 2050;
    v250 = v183;
    v251 = 1026;
    v252 = v2 == 0;
    v253 = 1026;
    v254 = v185;
    v255 = 1026;
    v256 = v184;
    v257 = 1026;
    v258 = v186;
    v259 = 1026;
    v260 = v187;
    v261 = 1026;
    v262 = v188;
    _os_log_impl(&dword_18F5B3000, v170, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Buildings,MapHelperService,bldgCount,%{public}d,sizeOfBuildings,%{public}d,convertedBuildings,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,bufferSynchronously,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d", buf, 0x60u);
  }
  v189 = sub_18F5C4AE0(115, 2);
  v190 = v212;
  if (v189)
  {
    bzero(buf, 0x65CuLL);
    if (v4[8].vtable != (void *)-1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    if (v2)
      v194 = objc_msgSend_count(v2, v191, v192, v193);
    else
      v194 = 0;
    v197 = v222;
    v196 = v223;
    v198 = (_QWORD *)a1;
    v199 = 0.0;
    if (*(double *)(a1 + 80) >= 0.0)
    {
      v200 = mach_continuous_time();
      v201 = sub_18F6BDF00(v200);
      v198 = (_QWORD *)a1;
      v199 = vabdd_f64(v201, *(double *)(a1 + 80)) * 1000.0;
    }
    v203 = v198[8];
    v202 = v198[9];
    v204 = v198[7];
    v205 = v212[27].u8[0];
    v206 = v212[14].i32[1];
    v207 = v212[15].i32[0];
    v208 = v212[15].i32[1];
    v209 = v212[24].u8[0];
    LODWORD(v226) = 67243265;
    DWORD1(v226) = v194;
    WORD4(v226) = 1026;
    *(_DWORD *)((char *)&v226 + 10) = v11;
    HIWORD(v226) = 1026;
    LODWORD(v227) = (unint64_t)(v196 - v197) >> 4;
    WORD2(v227) = 2050;
    *(double *)((char *)&v227 + 6) = v199;
    HIWORD(v227) = 2049;
    *(_QWORD *)v228 = v203;
    *(_WORD *)&v228[8] = 2049;
    *(_QWORD *)&v228[10] = v202;
    *(_WORD *)&v228[18] = 2050;
    *(_QWORD *)&v228[20] = v204;
    *(_WORD *)&v228[28] = 1026;
    *(_DWORD *)&v228[30] = v2 == 0;
    *(_WORD *)&v228[34] = 1026;
    *(_DWORD *)&v228[36] = v206;
    v229 = 1026;
    v230 = v205;
    v231 = 1026;
    v232 = v207;
    v233 = 1026;
    v234 = v208;
    v235 = 1026;
    v236 = v209;
    v210 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "CoreLocation: %s\n", v210);
    if (v210 != (char *)buf)
      free(v210);
    v190 = v212;
  }
  if (&v190[29] != (int32x2_t *)&v222)
    sub_18F62D124((uint64_t)&v190[29], (uint64_t *)v222, (uint64_t *)v223, (v223 - v222) >> 4);
  *(_QWORD *)buf = &v222;
  sub_18F62AB98((void ***)buf);
}

void sub_18F62A440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p)
{
  a37 = &a32;
  sub_18F62AB98((void ***)&a37);
  _Unwind_Resume(a1);
}

os_log_t sub_18F62A4C8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

uint64_t sub_18F62A4F4(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 48);
  sub_18F62AB98(&v3);
  v3 = (void **)(a1 + 24);
  sub_18F62AB98(&v3);
  return a1;
}

uint64_t sub_18F62A53C(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 32);
  sub_18F62AB98(&v3);
  v3 = (void **)(a1 + 8);
  sub_18F62AB98(&v3);
  return a1;
}

uint64_t sub_18F62A584(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  _BOOL4 v9;
  _BOOL4 v10;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = *a2;
    v4 = a2[1];
    result = 1;
    do
    {
      v6 = v2[4];
      v7 = v2[5];
      v8 = v4 < v7;
      if (v3 != v6)
        v8 = v3 < v6;
      if (!v8)
      {
        v9 = v7 < v4;
        if (v3 == v6)
          v10 = v9;
        else
          v10 = v6 < v3;
        if (!v10)
          return result;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

_OWORD *sub_18F62A5E4(uint64_t **a1, unint64_t *a2, uint64_t a3, __int128 **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;

  v6 = (void **)sub_18F62A678((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x70uLL);
    v9 = **a4;
    v7[4] = 0u;
    v7[5] = 0u;
    v7[2] = v9;
    v7[3] = 0u;
    *((_QWORD *)v7 + 12) = 0;
    *((_QWORD *)v7 + 13) = 0xBFF0000000000000;
    sub_18F62A6F8(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sub_18F62A678(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = v4[4];
        v10 = v8[5];
        v11 = v7 < v10;
        if (v6 != v9)
          v11 = v6 < v9;
        if (!v11)
          break;
        v4 = (_QWORD *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_15;
      }
      v12 = v10 < v7;
      if (v6 == v9)
        v13 = v12;
      else
        v13 = v9 < v6;
      if (!v13)
        break;
      result = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

uint64_t *sub_18F62A6F8(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_18F62A74C(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_18F62A74C(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *sub_18F62A8E4(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)sub_18F62A678((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    sub_18F62A960((uint64_t)a1, a3, (uint64_t)&v7);
    sub_18F62A6F8(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

double sub_18F62A960@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *v6;
  double result;

  v5 = a1 + 8;
  v6 = operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v6[2] = *(_OWORD *)a2;
  *((_WORD *)v6 + 24) = *(_WORD *)(a2 + 16);
  *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v6 + 9) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v6[5] = *(_OWORD *)(a2 + 48);
  *((_QWORD *)v6 + 12) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  result = *(double *)(a2 + 72);
  *((double *)v6 + 13) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_18F62A9E4(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(_OWORD *)a1 = *a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_18F62AA84((char *)(a1 + 24), *(_QWORD **)(a3 + 8), *(_QWORD **)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 4);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_18F62AA84((char *)(a1 + 48), *(_QWORD **)(a3 + 32), *(_QWORD **)(a3 + 40), (uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 4);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 56);
  return a1;
}

void sub_18F62AA6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F62AB98((void ***)va);
  _Unwind_Resume(a1);
}

char *sub_18F62AA84(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = sub_18F62AB24(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_18F62AB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_18F62AB98(&a9);
  _Unwind_Resume(a1);
}

char *sub_18F62AB24(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_18F5F7864();
  result = (char *)sub_18F62AB64((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_18F62AB64(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_18F5F689C();
  return operator new(16 * a2);
}

void sub_18F62AB98(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_18F5D6004(v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18F62AC08(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v4;
  _QWORD v5[3];
  void **v6;

  v4 = *(void **)a2;
  for (i = *(_QWORD *)(a2 + 8); (void *)i != v4; i = sub_18F5D6004(i - 16))
    ;
  *(_QWORD *)(a2 + 8) = v4;
  sub_18F62AC70((void **)a2);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  memset(v5, 0, sizeof(v5));
  v6 = (void **)v5;
  sub_18F62AB98(&v6);
}

void sub_18F62AC70(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = sub_18F5D6004(v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *sub_18F62ACCC(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  void **v5;

  v3 = sub_18F62AD24(a1, (uint64_t *)a2);
  v5 = (void **)(a2 + 80);
  sub_18F62AB98(&v5);
  v5 = (void **)(a2 + 56);
  sub_18F62AB98(&v5);
  operator delete((void *)a2);
  return v3;
}

uint64_t *sub_18F62AD24(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_18F62AD94(v6, a2);
  return v3;
}

uint64_t *sub_18F62AD94(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t **sub_18F62B118(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    sub_18F62A6F8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

char *sub_18F62B1DC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      sub_18F5F7864();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_18F62AB24(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t sub_18F62B2E4(uint64_t **a1, unint64_t *a2)
{
  uint64_t **v3;

  v3 = (uint64_t **)sub_18F62B328((uint64_t)a1, a2);
  if (a1 + 1 == v3)
    return 0;
  sub_18F62ACCC(a1, (uint64_t)v3);
  return 1;
}

_QWORD *sub_18F62B328(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _BOOL4 v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = a2[1];
  v7 = v2;
  do
  {
    v8 = v3[4];
    v10 = v8 == v5;
    v9 = v8 < v5;
    if (v10)
      v9 = v3[5] < v6;
    v10 = !v9;
    if (v9)
      v11 = v3 + 1;
    else
      v11 = v3;
    if (v10)
      v7 = v3;
    v3 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v7 == v2)
    return v2;
  v12 = v7[4];
  v13 = v6 < v7[5];
  v10 = v5 == v12;
  v14 = v5 < v12;
  if (v10)
    v14 = v13;
  if (v14)
    return v2;
  return v7;
}

void sub_18F62B39C(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_18F62B39C(a1, *a2);
    sub_18F62B39C(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t sub_18F62B3EC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

double *sub_18F62B450(double *a1, double a2, double a3, double a4)
{
  double *v5;
  long double *v6;
  double v7;
  double v8;

  v5 = a1 + 1;
  v6 = a1 + 3;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  sub_18F5F5608(a1, a1 + 1, a1 + 2, a1 + 3, a2, a3, a4);
  v7 = fmod(a1[1], 360.0);
  if (v7 <= -180.0)
  {
    v7 = v7 + 360.0;
  }
  else if (v7 > 180.0)
  {
    v7 = v7 + -360.0;
  }
  *v5 = v7;
  v8 = fmod(*v6, 360.0);
  if (v8 <= -180.0)
  {
    v8 = v8 + 360.0;
  }
  else if (v8 > 180.0)
  {
    v8 = v8 + -360.0;
  }
  a1[3] = v8;
  return a1;
}

unint64_t sub_18F62B52C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int isRail;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  int isBridge;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  int isTunnel;
  NSObject *v41;
  char *v43;
  char *v44;
  double v45[3];
  uint64_t v46;
  int v47;
  unint64_t v48;
  __int128 v49;
  uint8_t buf[4];
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = objc_msgSend_roadID(a1, a2, a3, a4);
    v46 = v5;
    if ((unint64_t)objc_msgSend_coordinateCount(a1, v6, v7, v8) > 1)
    {
      v49 = *(_OWORD *)objc_msgSend_coordinates(a1, v9, v10, v11);
      *(_OWORD *)v45 = *(_OWORD *)(objc_msgSend_coordinates(a1, v21, v22, v23) + 16);
      if ((unint64_t)objc_msgSend_coordinateCount(a1, v24, v25, v26) >= 2)
      {
        v30 = 1;
        v31 = 16;
        do
        {
          *(_OWORD *)v45 = *(_OWORD *)(objc_msgSend_coordinates(a1, v27, v28, v29) + v31);
          if (vabdd_f64(*(double *)&v49, v45[0]) >= 0.0000001)
            break;
          if (vabdd_f64(*((double *)&v49 + 1), v45[1]) >= 0.0000001)
            break;
          ++v30;
          v31 += 16;
        }
        while (objc_msgSend_coordinateCount(a1, v27, v28, v29) > v30);
      }
      isRail = objc_msgSend_isRail(a1, v27, v28, v29);
      isBridge = objc_msgSend_isBridge(a1, v33, v34, v35);
      isTunnel = objc_msgSend_isTunnel(a1, v37, v38, v39);
      if (!sub_18F62BA74((double *)&v49, v45, isRail, isBridge, isTunnel, (unint64_t *)&v46))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990370);
        v41 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134283521;
          v51 = v46;
          _os_log_impl(&dword_18F5B3000, v41, OS_LOG_TYPE_ERROR, "CLMM,GeoMapDataID,unable to make CLRoadID from GeoMapFeatureAccess,%{private}lld", buf, 0xCu);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990370);
          v47 = 134283521;
          v48 = v46;
          v44 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const GEOMapFeatureRoad * _Nonnull)", "CoreLocation: %s\n", v44);
          if (v44 != (char *)buf)
            free(v44);
        }
      }
      return v46;
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      v12 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134283521;
        v51 = objc_msgSend_roadID(a1, v13, v14, v15);
        _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_DEBUG, "CLMM,GeoMapDataID,less than two coordinates,roadID,%{private}lld", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990370);
        LODWORD(v49) = 134283521;
        *(_QWORD *)((char *)&v49 + 4) = objc_msgSend_roadID(a1, v16, v17, v18);
        v19 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const GEOMapFeatureRoad * _Nonnull)", "CoreLocation: %s\n", v19);
        if (v19 != (char *)buf)
          free(v19);
      }
    }
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990370);
    v20 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_ERROR, "CLMM,GeoMapDataID,null feature", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990370);
      LOWORD(v49) = 0;
      v43 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const GEOMapFeatureRoad * _Nonnull)", "CoreLocation: %s\n", v43);
      if (v43 != (char *)buf)
        free(v43);
    }
    return 0;
  }
  return v5;
}

BOOL sub_18F62BA74(double *a1, double *a2, int a3, int a4, int a5, unint64_t *a6)
{
  uint64_t v6;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;

  v6 = 0;
  if (a1 && a2)
  {
    v8 = 0.2;
    if (a5)
      v8 = 0.35;
    if (a4)
      v8 = 0.3;
    if (a3)
      v8 = 0.25;
    v9 = a1[1];
    v10 = a2[1];
    v11 = v9 + 360.0;
    if (v9 >= 0.0)
      v11 = a1[1];
    if (v10 < 0.0)
      v10 = v10 + 360.0;
    v12 = v10 - v11;
    if (v12 <= 180.0)
    {
      if (v12 < -180.0)
        v12 = v12 + 360.0;
    }
    else
    {
      v12 = v12 + -360.0;
    }
    v13 = *a1 + (*a2 - *a1) * v8;
    v14 = fmod(v9 + v12 * v8, 360.0);
    if (v14 <= -180.0)
    {
      v14 = v14 + 360.0;
    }
    else if (v14 > 180.0)
    {
      v14 = v14 + -360.0;
    }
    if (fabs(v13) >= 0.00003 || fabs(v14) >= 0.00003)
    {
      v15 = (unint64_t)((v14 + 180.0) * 10000000.0) | ((unint64_t)((v13 + 90.0) * 10000000.0) << 32);
      *a6 = v15;
    }
    else
    {
      v15 = *a6;
    }
    return v15 != 0;
  }
  return v6;
}

_QWORD *sub_18F62BBE0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[3];
  result[2] = a2[2];
  result[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[5];
  result[4] = a2[4];
  result[5] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

void *sub_18F62BC44(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    sub_18F5F689C();
  return operator new(48 * a1);
}

uint64_t sub_18F62BC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  _OWORD *v7;
  __int128 v8;

  result = a6;
  if (a2 != a4)
  {
    v7 = (_OWORD *)(a6 - 16);
    do
    {
      v8 = *(_OWORD *)(a2 - 48);
      a2 -= 48;
      *(v7 - 2) = v8;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(v7 - 1) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *v7 = *(_OWORD *)(a2 + 32);
      v7 -= 3;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      result -= 48;
    }
    while (a2 != a4);
  }
  return result;
}

uint64_t sub_18F62BCCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    sub_18F5D6004(i - 16);
    sub_18F5D6004(i - 32);
    sub_18F5D6004(i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_18F62BD34(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0x8E38E38E38E38E39 * ((result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL)
      sub_18F5F7864();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = sub_18F62C0F8(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 72 * v4;
    sub_18F62C054(v2, v5);
    return (uint64_t *)sub_18F62C140((uint64_t)v5);
  }
  return result;
}

void sub_18F62BDE0(_QWORD *a1, double a2, double a3)
{
  unint64_t v6;
  double *v7;
  double *v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  double *v16;
  unint64_t v17;

  v7 = (double *)a1[7];
  v6 = a1[8];
  if ((unint64_t)v7 >= v6)
  {
    v9 = (double *)a1[6];
    v10 = ((char *)v7 - (char *)v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      sub_18F5F7864();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v11;
    if (v14)
    {
      v14 = (unint64_t)sub_18F62C1A0(v14);
      v9 = (double *)a1[6];
      v7 = (double *)a1[7];
    }
    else
    {
      v15 = 0;
    }
    v16 = (double *)(v14 + 16 * v10);
    v17 = v14 + 16 * v15;
    *v16 = a2;
    v16[1] = a3;
    v8 = v16 + 2;
    if (v7 != v9)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v7 - 1);
        v16 -= 2;
        v7 -= 2;
      }
      while (v7 != v9);
      v9 = (double *)a1[6];
    }
    a1[6] = v16;
    a1[7] = v8;
    a1[8] = v17;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v7 = a2;
    v7[1] = a3;
    v8 = v7 + 2;
  }
  a1[7] = v8;
}

uint64_t sub_18F62BEC8(_QWORD *a1, __int128 *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t result;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[2];
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = a1 + 4;
  v5 = a1[4];
  v6 = a1[3];
  if (v6 >= v5)
  {
    v11 = a1 + 2;
    v12 = a1[2];
    v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v12) >> 3);
    if (v13 + 1 > 0x38E38E38E38E38ELL)
      sub_18F5F7864();
    v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - v12) >> 3);
    v15 = 2 * v14;
    if (2 * v14 <= v13 + 1)
      v15 = v13 + 1;
    if (v14 >= 0x1C71C71C71C71C7)
      v16 = 0x38E38E38E38E38ELL;
    else
      v16 = v15;
    v24 = v4;
    if (v16)
      v16 = (unint64_t)sub_18F62C0F8(v16);
    else
      v17 = 0;
    v18 = v16 + 72 * v13;
    v21[0] = v16;
    v21[1] = v18;
    v22 = v18;
    v23 = v16 + 72 * v17;
    v19 = *a2;
    v20 = a2[2];
    *(_OWORD *)(v18 + 16) = a2[1];
    *(_OWORD *)(v18 + 32) = v20;
    *(_OWORD *)v18 = v19;
    *(_QWORD *)(v18 + 56) = 0;
    *(_QWORD *)(v18 + 64) = 0;
    *(_QWORD *)(v18 + 48) = 0;
    sub_18F62C1D4((_QWORD *)(v18 + 48), *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 4);
    v22 += 72;
    sub_18F62C054(v11, v21);
    v10 = a1[3];
    result = sub_18F62C140((uint64_t)v21);
  }
  else
  {
    v7 = *a2;
    v8 = a2[2];
    *(_OWORD *)(v6 + 16) = a2[1];
    *(_OWORD *)(v6 + 32) = v8;
    *(_OWORD *)v6 = v7;
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 64) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    result = (uint64_t)sub_18F62C1D4((_QWORD *)(v6 + 48), *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 4);
    v10 = v6 + 72;
    a1[3] = v6 + 72;
  }
  a1[3] = v10;
  return result;
}

void sub_18F62C034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F62C140((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F62C054(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 72;
      v6 = *(_OWORD *)(v3 - 72);
      v7 = *(_OWORD *)(v3 - 56);
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_OWORD *)(v4 - 56) = v7;
      *(_OWORD *)(v4 - 72) = v6;
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v4 -= 72;
      v3 -= 72;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *sub_18F62C0F8(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL)
    sub_18F5F689C();
  return operator new(72 * a1);
}

uint64_t sub_18F62C140(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 72;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 72;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *sub_18F62C1A0(unint64_t a1)
{
  if (a1 >> 60)
    sub_18F5F689C();
  return operator new(16 * a1);
}

_QWORD *sub_18F62C1D4(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 60)
      sub_18F5F7864();
    result = sub_18F62C1A0(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[2 * v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_18F62C24C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_18F62C268(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FEB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18F62C278(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FEB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194002D30);
}

void sub_18F62C2A8(uint64_t a1)
{
  char v1;

  sub_18F62C2D0((uint64_t)&v1, a1 + 24);
}

void sub_18F62C2D0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = *(void **)(a2 + 184);
  if (v3)
  {
    *(_QWORD *)(a2 + 192) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 160);
  if (v4)
  {
    *(_QWORD *)(a2 + 168) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a2 + 136);
  if (v5)
  {
    *(_QWORD *)(a2 + 144) = v5;
    operator delete(v5);
  }
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
}

uint64_t sub_18F62C334(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    sub_18F5D6004(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_18F62C380(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(char **)(result + 8);
  v5 = (char *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v6 += 16;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v7 = (uint64_t)(v4 - 16);
    v8 = 16 * ((v4 - a4) >> 4);
    v9 = a2 - 16;
    do
    {
      result = sub_18F62B3EC(v7, (__int128 *)(v9 + v8));
      v7 -= 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_18F62C3FC(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void sub_18F62C498(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_18F62AB98(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18F62C508(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298DE80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18F62C518(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298DE80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194002D30);
}

uint64_t sub_18F62C548(uint64_t a1)
{
  return sub_18F5D6004(a1 + 24);
}

void *sub_18F62C554(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_18F5F689C();
  return operator new(4 * a2);
}

uint64_t sub_18F62C588(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    sub_18F62AC70((void **)a1);
    if (a4 >> 60)
      sub_18F5F7864();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)sub_18F62AB24((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      v19 = 16 * v17;
      do
      {
        result = (uint64_t)sub_18F623A40(v8, v6);
        v6 += 2;
        v8 += 2;
        v19 -= 16;
      }
      while (v19);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v20 = v18[1];
        *v13 = *v18;
        v13[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_25;
  }
  if (a2 == a3)
  {
    v23 = v8;
  }
  else
  {
    v23 = v8;
    do
    {
      sub_18F623A40(v8, v6);
      v6 += 2;
      v8 += 2;
      v23 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v23)
    result = sub_18F5D6004(result - 16);
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

void sub_18F62C738(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_18F62C738(a1, *a2);
    sub_18F62C738(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *sub_18F62C778(uint64_t *result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  BOOL v13;
  _BOOL4 v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;

  v5 = result;
  v7 = (uint64_t **)(result + 1);
  v6 = (uint64_t *)result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = v6[4];
        v10 = v8[5];
        v11 = (unint64_t)v10 > a3;
        if (v9 != a2)
          v11 = v9 > a2;
        if (!v11)
          break;
        v6 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_13;
      }
      v12 = (unint64_t)v10 < a3;
      v13 = v9 == a2;
      v14 = v9 < a2;
      if (v13)
        v14 = v12;
      if (!v14)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v7 = v8 + 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(result + 1);
LABEL_13:
    v15 = operator new(0x40uLL);
    v16 = *(_OWORD *)(a4 + 16);
    v15[2] = *(_OWORD *)a4;
    v15[3] = v16;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v8;
    *v7 = (uint64_t *)v15;
    v17 = *(_QWORD *)*v5;
    if (v17)
    {
      *v5 = v17;
      v18 = *v7;
    }
    else
    {
      v18 = (uint64_t *)v15;
    }
    result = sub_18F62A74C((uint64_t *)v5[1], v18);
    ++v5[2];
  }
  return result;
}

uint64_t **sub_18F62C864(uint64_t **a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  BOOL v13;
  _BOOL4 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = v6[4];
        v10 = v8[5];
        v11 = (unint64_t)v10 > a3;
        if (v9 != a2)
          v11 = v9 > a2;
        if (!v11)
          break;
        v6 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_13;
      }
      v12 = (unint64_t)v10 < a3;
      v13 = v9 == a2;
      v14 = v9 < a2;
      if (v13)
        v14 = v12;
      if (!v14)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v7 = v8 + 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_13:
    v15 = (uint64_t *)v8;
    v8 = (uint64_t **)operator new(0x60uLL);
    *((_OWORD *)v8 + 2) = *a4;
    *((_OWORD *)v8 + 3) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    *((_OWORD *)v8 + 5) = 0u;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v15;
    *v7 = (uint64_t *)v8;
    v16 = (uint64_t *)**a1;
    v17 = (uint64_t *)v8;
    if (v16)
    {
      *a1 = v16;
      v17 = *v7;
    }
    sub_18F62A74C(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

_QWORD *sub_18F62C964(uint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    sub_18F5F7864();
  v6 = a1 + 2;
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v7 = 0x555555555555555;
  else
    v7 = v3;
  v18 = v6;
  if (v7)
    v7 = (unint64_t)sub_18F62BC44(v7);
  else
    v8 = 0;
  v9 = (_QWORD *)(v7 + 48 * v2);
  v10 = v7 + 48 * v8;
  sub_18F62BBE0(v9, a2);
  v11 = sub_18F62BC88(a1[1], a1[1], *a1, *a1, (uint64_t)v9, (uint64_t)v9);
  v12 = *(_OWORD *)a1;
  *a1 = v11;
  a1[1] = (uint64_t)(v9 + 6);
  v16 = v12;
  v13 = a1[2];
  a1[2] = v10;
  v17 = v13;
  v15 = v12;
  sub_18F62BCCC((uint64_t)&v15);
  return v9 + 6;
}

void sub_18F62CA64(_QWORD *a1)
{
  if (a1)
  {
    sub_18F62CA64(*a1);
    sub_18F62CA64(a1[1]);
    sub_18F5D6004((uint64_t)(a1 + 10));
    sub_18F5D6004((uint64_t)(a1 + 8));
    sub_18F5D6004((uint64_t)(a1 + 6));
    operator delete(a1);
  }
}

void sub_18F62CAB8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        sub_18F5D6004((uint64_t)(v4 - 16));
        sub_18F5D6004((uint64_t)(v4 - 32));
        sub_18F5D6004((uint64_t)(v4 - 48));
        v4 -= 48;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_OWORD *sub_18F62CB48(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (void **)sub_18F62A678((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_BYTE *)v7 + 48) = 0;
    sub_18F62A6F8(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t sub_18F62CBD0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    sub_18F62AB98(&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_18F62CC2C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    sub_18F5F7864();
  v6 = a1[2] - *a1;
  if (v6 >> 5 > v4)
    v4 = v6 >> 5;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0)
    v7 = 0x3FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_18F62CE70((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[64 * v3];
  v14 = &v8[64 * v7];
  sub_18F62CD18((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  v13 = v12 + 64;
  sub_18F62CDFC(a1, &v11);
  v9 = a1[1];
  sub_18F62CFE4((uint64_t)&v11);
  return v9;
}

void sub_18F62CD04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F62CFE4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_18F62CD18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  sub_18F62CD7C((char *)(a2 + 8), *(_QWORD **)(a3 + 8), *(_QWORD **)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 4);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  result = *(double *)(a3 + 56);
  *(double *)(a2 + 56) = result;
  return result;
}

char *sub_18F62CD7C(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;

  if (a4)
  {
    v6 = result;
    result = sub_18F62AB24(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v7[1] = a2[1];
      v7 += 2;
      a2 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_18F62CDE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F62CDFC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_18F62CEA4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_18F62CE70(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    sub_18F5F689C();
  return operator new(a2 << 6);
}

uint64_t sub_18F62CEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 64;
      sub_18F62CD18(a1, v7 - 64, v9);
      v7 = *((_QWORD *)&v16 + 1) - 64;
      *((_QWORD *)&v16 + 1) -= 64;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_18F62CF6C((uint64_t)v13);
  return v11;
}

void sub_18F62CF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F62CF6C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F62CF6C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_18F62CFA0(a1);
  return a1;
}

void sub_18F62CFA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(_QWORD *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 64;
  }
}

uint64_t sub_18F62CFE4(uint64_t a1)
{
  sub_18F62D018(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_18F62D018(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 64;
    v5 = *(void **)(v2 - 56);
    if (v5)
    {
      *(_QWORD *)(v2 - 48) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
}

void sub_18F62D070(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298DE48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18F62D080(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298DE48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194002D30);
}

void sub_18F62D0B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(void **)(a1 + 40);
    if (v3 != v1)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 72;
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v1;
    operator delete(v4);
  }
}

char *sub_18F62D124(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *result;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (a4 <= (v8 - *(_QWORD *)a1) >> 4)
  {
    result = *(char **)(a1 + 8);
    v19 = (result - v9) >> 4;
    if (v19 >= a4)
    {
      if (a2 == a3)
      {
        v27 = v9;
      }
      else
      {
        v27 = v9;
        do
        {
          v28 = *v6;
          v29 = v6[1];
          v6 += 2;
          sub_18F62D304(v9, v28, v29);
          v9 += 16;
          v27 += 16;
        }
        while (v6 != a3);
        result = *(char **)(a1 + 8);
      }
      while (result != v27)
        result = (char *)sub_18F5D6004((uint64_t)(result - 16));
      *(_QWORD *)(a1 + 8) = v27;
    }
    else
    {
      v20 = &a2[2 * v19];
      if (result != v9)
      {
        do
        {
          v21 = *v6;
          v22 = v6[1];
          v6 += 2;
          result = (char *)sub_18F62D304(v9, v21, v22);
          v9 += 16;
        }
        while (v6 != v20);
        v9 = *(char **)(a1 + 8);
      }
      v23 = v9;
      if (v20 != a3)
      {
        v23 = v9;
        do
        {
          v24 = v20[1];
          *v23 = *v20;
          v23[1] = v24;
          if (v24)
          {
            v25 = (unint64_t *)(v24 + 8);
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
          }
          v20 += 2;
          v23 += 2;
        }
        while (v20 != a3);
      }
      *(_QWORD *)(a1 + 8) = v23;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = v9;
      if ((char *)v10 != v9)
      {
        do
          v10 = sub_18F5D6004(v10 - 16);
        while ((char *)v10 != v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 >> 60)
      goto LABEL_40;
    v12 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v12 = a4;
    v13 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v12;
    if (v13 >> 60)
LABEL_40:
      sub_18F5F7864();
    result = (char *)sub_18F62C1A0(v13);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[16 * v15];
    while (v6 != a3)
    {
      v16 = v6[1];
      *(_QWORD *)result = *v6;
      *((_QWORD *)result + 1) = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v6 += 2;
      result += 16;
    }
    *(_QWORD *)(a1 + 8) = result;
  }
  return result;
}

_QWORD *sub_18F62D304(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_18F62D378(uint64_t a1, _DWORD *a2, double *a3)
{
  if (*a2 == 4)
  {
    ++*(_DWORD *)(a1 + 44);
  }
  else if (*a2 == 1)
  {
    ++*(_DWORD *)(a1 + 40);
    sub_18F62D3B0(a1, a3);
  }
}

double sub_18F62D3B0(uint64_t a1, double *a2)
{
  double v4;
  double v5;
  unint64_t v6;
  double *v7;
  double *v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  double *v15;
  char *v16;
  uint64_t v17;
  double result;

  v4 = *(double *)(a1 + 32);
  if (v4 > 0.0)
  {
    v5 = *a2 - v4;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(double **)(a1 + 8);
    if ((unint64_t)v7 >= v6)
    {
      v9 = *(double **)a1;
      v10 = ((uint64_t)v7 - *(_QWORD *)a1) >> 3;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        sub_18F5F7864();
      v12 = v6 - (_QWORD)v9;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        v14 = (char *)sub_18F610B1C(a1 + 16, v13);
        v9 = *(double **)a1;
        v7 = *(double **)(a1 + 8);
      }
      else
      {
        v14 = 0;
      }
      v15 = (double *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v5;
      v8 = v15 + 1;
      while (v7 != v9)
      {
        v17 = *((_QWORD *)v7-- - 1);
        *((_QWORD *)v15-- - 1) = v17;
      }
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v16;
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v7 = v5;
      v8 = v7 + 1;
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  result = *a2;
  *(double *)(a1 + 32) = *a2;
  return result;
}

uint64_t sub_18F62D4B0(double **a1)
{
  double *v1;
  double *v2;
  double v3;
  double v5;
  double *v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v2 = *a1;
  v1 = a1[1];
  if ((int)((unint64_t)((char *)v1 - (char *)*a1) >> 3) >= 1)
  {
    v3 = *v2;
    if (v2 != v1 && v2 + 1 != v1)
    {
      v5 = *v2;
      v6 = v2 + 1;
      do
      {
        v7 = *v6++;
        v8 = v7;
        if (v7 < v5)
          v5 = v8;
      }
      while (v6 != v1);
      v9 = v2 + 1;
      do
      {
        v10 = *v9++;
        v11 = v10;
        if (v3 < v10)
          v3 = v11;
      }
      while (v9 != v1);
    }
    v12 = 0.0;
    while (v2 != v1)
    {
      v13 = *v2++;
      v12 = v12 + v13;
    }
  }
  return AnalyticsSendEventLazy();
}

uint64_t sub_18F62D6B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  NSObject *v36;
  char *v38;
  uint8_t buf[4];
  uint64_t v40;
  _QWORD v41[11];
  _QWORD v42[12];

  v42[11] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  v41[0] = CFSTR("tspiiPercentageOfValidInputData");
  v42[0] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], a2, a3, a4, *(double *)(a1 + 40));
  v41[1] = CFSTR("tspiiPercentageOfInputGpsData");
  v42[1] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v6, v7, v8, *(double *)(a1 + 48));
  v41[2] = CFSTR("tspiiPercentageOfInputWifiData");
  v42[2] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v9, v10, v11, *(double *)(a1 + 56));
  v41[3] = CFSTR("tspiiPercentageOfValidInertialData");
  v42[3] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v12, v13, v14, *(double *)(a1 + 64));
  v41[4] = CFSTR("tspiiMeanDurationOfGapsInInertialData");
  v42[4] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v15, v16, v17, *(double *)(a1 + 72));
  v41[5] = CFSTR("tspiiNumberOfGapsInInertialData");
  v42[5] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v18, *(unsigned int *)(v5 + 56), v19);
  v41[6] = CFSTR("tspiiNumberOfVdrAttempts");
  v42[6] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v20, *(unsigned int *)(v5 + 60), v21);
  v41[7] = CFSTR("tspiiPercentageOfFailedVdrAttempts");
  v42[7] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v22, v23, v24, *(double *)(a1 + 80));
  v41[8] = CFSTR("tspiiMinPeriodBetweenGpsFixes");
  v42[8] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v25, v26, v27, *(double *)(a1 + 88));
  v41[9] = CFSTR("tspiiMaxPeriodBetweenGpsFixes");
  v42[9] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v28, v29, v30, *(double *)(a1 + 96));
  v41[10] = CFSTR("tspiiMeanPeriodBetweenGpsFixes");
  v42[10] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v31, v32, v33, *(double *)(a1 + 104));
  v35 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v34, (uint64_t)v42, (uint64_t)v41, 11);
  if (qword_1EE172168 != -1)
    dispatch_once(&qword_1EE172168, &unk_1E2990390);
  v36 = qword_1EE172170;
  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v40 = v35;
    _os_log_impl(&dword_18F5B3000, v36, OS_LOG_TYPE_DEBUG, "CLTSP,II,sendTripSegmentInertialIntegratorAnalytics: \n%{private}@", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990390);
    v38 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentInertialIntegratorCAStats::sendTripSegmentInertialIntegratorAnalytics(const int &, const int &)_block_invoke", "CoreLocation: %s\n", v38);
    if (v38 != (char *)buf)
      free(v38);
  }
  return v35;
}

os_log_t sub_18F62D9B4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1EE172170 = (uint64_t)result;
  return result;
}

void sub_18F62D9E0(void **a1, unint64_t a2, void **a3, uint64_t a4)
{
  void **v5;
  void **v6;
  int v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  __double2 v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  __double2 v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  __double2 v41;
  __double2 v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  unint64_t v48;
  double *v49;
  double *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  double *v55;
  double *v56;
  double *v57;
  double *v58;
  __int128 v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  double v64;

  if (a1 != (void **)a2)
  {
    v5 = (void **)a2;
    v6 = a1;
    v7 = 0;
    v8 = (uint64_t)(a3 + 2);
    v64 = 0.0;
    v60 = 0x3F91DF46A2529D39;
    v9 = 0.0;
    v63 = 0.0;
    do
    {
      objc_msgSend_latitude(*v6, (const char *)a2, (uint64_t)a3, a4, v60);
      v11 = v10;
      objc_msgSend_longitude(*v6, v12, v13, v14);
      v16 = v15;
      objc_msgSend_altitude(*v6, v17, v18, v19);
      v21 = v20;
      v22 = __sincos_stret(v11 * 0.0174532925);
      v26 = __sincos_stret(v16 * 0.0174532925);
      v27 = 6378137.0 / sqrt(v22.__sinval * -0.00669437999 * v22.__sinval + 1.0);
      v28 = v22.__cosval * (v21 + v27);
      v29 = v26.__sinval * v28;
      v30 = v21 + v27 * 0.99330562;
      v31 = v22.__sinval * v30;
      v32 = v63;
      if (!v7)
      {
        v32 = v22.__sinval * v30;
        v9 = v26.__sinval * v28;
      }
      v61 = v26.__cosval * v28;
      v62 = v9;
      v33 = v64;
      if (!v7)
        v33 = v26.__cosval * v28;
      objc_msgSend_latitude(*v6, v23, v24, v25);
      v35 = v34;
      objc_msgSend_longitude(*v6, v36, v37, v38);
      v40 = v39;
      v41 = __sincos_stret(v35 * 0.0174532925);
      v42 = __sincos_stret(v40 * 0.0174532925);
      v63 = v32;
      v64 = v33;
      v43 = v61 - v33;
      v9 = v62;
      v44 = v31 - v32;
      v45 = v42.__cosval * (v29 - v62) - v42.__sinval * v43;
      v46 = -(v41.__sinval * v42.__sinval) * (v29 - v62)
          + -(v41.__sinval * v42.__cosval) * v43
          + v41.__cosval * (v31 - v32);
      v47 = v41.__cosval * v42.__sinval * (v29 - v62) + v41.__cosval * v42.__cosval * v43 + v41.__sinval * v44;
      v49 = (double *)a3[1];
      v48 = (unint64_t)a3[2];
      if ((unint64_t)v49 >= v48)
      {
        v51 = 0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (_BYTE *)*a3) >> 3);
        v52 = v51 + 1;
        if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18F5F7864();
        v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (_QWORD)*a3) >> 3);
        if (2 * v53 > v52)
          v52 = 2 * v53;
        if (v53 >= 0x555555555555555)
          a2 = 0xAAAAAAAAAAAAAAALL;
        else
          a2 = v52;
        if (a2)
          v54 = (char *)sub_18F5F6858(v8, a2);
        else
          v54 = 0;
        v55 = (double *)&v54[24 * v51];
        *v55 = v45;
        v55[1] = v46;
        v55[2] = v47;
        v57 = (double *)*a3;
        v56 = (double *)a3[1];
        v58 = v55;
        if (v56 != *a3)
        {
          do
          {
            v59 = *(_OWORD *)(v56 - 3);
            *(v58 - 1) = *(v56 - 1);
            *(_OWORD *)(v58 - 3) = v59;
            v58 -= 3;
            v56 -= 3;
          }
          while (v56 != v57);
          v56 = (double *)*a3;
        }
        v50 = v55 + 3;
        *a3 = v58;
        a3[1] = v55 + 3;
        a3[2] = &v54[24 * a2];
        if (v56)
          operator delete(v56);
      }
      else
      {
        *v49 = v45;
        v49[1] = v46;
        v50 = v49 + 3;
        v49[2] = v47;
      }
      ++v7;
      a3[1] = v50;
      ++v6;
    }
    while (v6 != v5);
  }
}

void sub_18F62DCB0(uint64_t *a1, void *a2, void **a3, uint64_t a4)
{
  double v7;
  double v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  __double2 v20;
  double v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __double2 v26;
  unint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  __double2 v46;
  __double2 v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  long double v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  NSObject *v64;
  char *v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  long double v70[2];
  uint8_t buf[8];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    *(_QWORD *)buf = 0;
    v69 = 0;
    v70[0] = 0.0;
    objc_msgSend_latitude(a2, (const char *)a2, (uint64_t)a3, a4);
    v8 = v7;
    objc_msgSend_longitude(a2, v9, v10, v11);
    v13 = v12;
    objc_msgSend_altitude(a2, v14, v15, v16);
    v18 = *a1;
    if (a1[1] != *a1)
    {
      v19 = v17;
      v20 = __sincos_stret(v8 * 0.0174532925);
      v21 = 6378137.0 / sqrt(v20.__sinval * -0.00669437999 * v20.__sinval + 1.0);
      v22 = v20.__sinval * (v19 + v21 * 0.99330562);
      v26 = __sincos_stret(v13 * 0.0174532925);
      v27 = 0;
      v28 = v20.__cosval * (v19 + v21);
      v29 = v26.__sinval * v28;
      v30 = v26.__cosval * v28;
      v31 = 0.0;
      v32 = 0.0;
      v68 = 0.0;
      do
      {
        v33 = v68;
        if (v27)
        {
          v34 = v32;
        }
        else
        {
          v33 = v30;
          v34 = v29;
        }
        if (v27)
          v35 = v31;
        else
          v35 = v22;
        v36 = (double *)(v18 + 24 * v27);
        v37 = v36[1];
        v66 = *v36;
        v67 = v34;
        v38 = v36[2];
        objc_msgSend_latitude(a2, (const char *)v23, v24, v25);
        v40 = v39;
        objc_msgSend_longitude(a2, v41, v42, v43);
        v45 = v44;
        v46 = __sincos_stret(v40 * 0.0174532925);
        v31 = v35;
        v32 = v67;
        v47 = __sincos_stret(v45 * 0.0174532925);
        v68 = v33;
        v29 = v67 + v37 * -(v46.__sinval * v47.__sinval) + v47.__cosval * v66 + v46.__cosval * v47.__sinval * v38;
        v22 = v31 + v38 * v46.__sinval + v46.__cosval * v37;
        v48 = v33 + v37 * -(v46.__sinval * v47.__cosval) - v47.__sinval * v66 + v46.__cosval * v47.__cosval * v38;
        sub_18F6E65B4((double *)buf, v70, (double *)&v69, v48, v29, v22);
        v49 = *(_QWORD *)buf;
        v50 = v69;
        v51 = v70[0];
        v53 = a3[1];
        v52 = (unint64_t)a3[2];
        if ((unint64_t)v53 >= v52)
        {
          v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)v53 - (_BYTE *)*a3) >> 3);
          v56 = v55 + 1;
          if (v55 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_18F5F7864();
          v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - (_QWORD)*a3) >> 3);
          if (2 * v57 > v56)
            v56 = 2 * v57;
          if (v57 >= 0x555555555555555)
            v23 = 0xAAAAAAAAAAAAAAALL;
          else
            v23 = v56;
          if (v23)
            v58 = (char *)sub_18F5F6858((uint64_t)(a3 + 2), v23);
          else
            v58 = 0;
          v59 = &v58[24 * v55];
          *(_QWORD *)v59 = v49;
          *((long double *)v59 + 1) = v51;
          *((_QWORD *)v59 + 2) = v50;
          v61 = (char *)*a3;
          v60 = (char *)a3[1];
          v62 = v59;
          if (v60 != *a3)
          {
            do
            {
              v63 = *(_OWORD *)(v60 - 24);
              *((_QWORD *)v62 - 1) = *((_QWORD *)v60 - 1);
              *(_OWORD *)(v62 - 24) = v63;
              v62 -= 24;
              v60 -= 24;
            }
            while (v60 != v61);
            v60 = (char *)*a3;
          }
          v54 = v59 + 24;
          *a3 = v62;
          a3[1] = v59 + 24;
          a3[2] = &v58[24 * v23];
          if (v60)
            operator delete(v60);
        }
        else
        {
          *v53 = *(_QWORD *)buf;
          *((long double *)v53 + 1) = v51;
          v54 = v53 + 3;
          v53[2] = v50;
        }
        v30 = v48;
        a3[1] = v54;
        ++v27;
        v18 = *a1;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v27);
    }
  }
  else
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v64 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v64, OS_LOG_TYPE_ERROR, "CLTSP,II,convertENUtoLLA,detected null input", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
      LOWORD(v70[0]) = 0;
      v65 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void convertENUtoLLA(const std::vector<std::array<double, 3>> &, const CLTripSegmentLocation *, std::vector<std::array<double, 3>> &)", "CoreLocation: %s\n", v65);
      if (v65 != (char *)buf)
        free(v65);
    }
  }
}

void sub_18F62E118(void *a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  NSObject *v67;
  uint8_t buf[4];
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v2 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
    {
      v6 = (void *)objc_msgSend_timestamp(a1, v3, v4, v5);
      objc_msgSend_timeIntervalSinceReferenceDate(v6, v7, v8, v9);
      v11 = v10;
      objc_msgSend_dataPeriod_s(a1, v12, v13, v14);
      v16 = v15;
      objc_msgSend_deltaCourse_rad(a1, v17, v18, v19);
      v21 = v20;
      objc_msgSend_deltaSpeed_mps(a1, v22, v23, v24);
      v26 = v25;
      objc_msgSend_deltaCourseVar_rad2(a1, v27, v28, v29);
      v31 = v30;
      objc_msgSend_deltaSpeedVar_mps2(a1, v32, v33, v34);
      v36 = v35;
      objc_msgSend_deltaCourseSpeedCovar_radmps(a1, v37, v38, v39);
      *(_DWORD *)buf = 134350593;
      v69 = v11;
      v70 = 2050;
      v71 = v16;
      v72 = 2049;
      v73 = v21;
      v74 = 2049;
      v75 = v26;
      v76 = 2050;
      v77 = v31;
      v78 = 2050;
      v79 = v36;
      v80 = 2050;
      v81 = v40;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEBUG, "CLTSP,II,inertialData,time,%{public}.3lf,dataPeriod,%{public}.7lf,deltaCourse,%{private}.6lf,deltaSpeed,%{private}.6lf,deltaCourseVar,%{public}.8lf,deltaSpeedVar,%{public}.8lf,deltaCourseSpeedCovar,%{public}.8lf", buf, 0x48u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v44 = (void *)objc_msgSend_timestamp(a1, v41, v42, v43);
    objc_msgSend_timeIntervalSinceReferenceDate(v44, v45, v46, v47);
    objc_msgSend_dataPeriod_s(a1, v48, v49, v50);
    objc_msgSend_deltaCourse_rad(a1, v51, v52, v53);
    objc_msgSend_deltaSpeed_mps(a1, v54, v55, v56);
    objc_msgSend_deltaCourseVar_rad2(a1, v57, v58, v59);
    objc_msgSend_deltaSpeedVar_mps2(a1, v60, v61, v62);
    objc_msgSend_deltaCourseSpeedCovar_radmps(a1, v63, v64, v65);
    v66 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void printInertialDataDebugLog(CLTripSegmentInertialData *)", "CoreLocation: %s\n", v66);
    if (v66 == (char *)buf)
      return;
LABEL_20:
    free(v66);
    return;
  }
  if (qword_1EE172168 != -1)
    dispatch_once(&qword_1EE172168, &unk_1E29903B0);
  v67 = qword_1EE172170;
  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v67, OS_LOG_TYPE_ERROR, "CLTSP,II,printInertialDataDebugLog,detected null inertialData", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v66 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "void printInertialDataDebugLog(CLTripSegmentInertialData *)", "CoreLocation: %s\n", v66);
    if (v66 != (char *)buf)
      goto LABEL_20;
  }
}

void sub_18F62E518(void *a1, const char *a2, void *a3, uint64_t a4)
{
  int v6;
  double v8;
  double v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint8_t *v121;
  NSObject *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  double v128;
  uint8_t buf[4];
  uint64_t v130;
  __int16 v131;
  _BYTE v132[10];
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  __int16 v145;
  uint64_t v146;
  __int16 v147;
  uint64_t v148;
  __int16 v149;
  double v150;
  __int16 v151;
  uint64_t v152;
  __int16 v153;
  int v154;
  __int16 v155;
  uint64_t v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v6 = (int)a2;
    objc_msgSend_speedAccuracy(a3, a2, (uint64_t)a3, a4);
    v9 = v8;
    if (objc_msgSend_isLoiLocationType(a3, v10, v11, v12))
    {
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
      v13 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
      {
        objc_msgSend_speedAccuracy(a3, v14, v15, v16);
        *(_DWORD *)buf = 134349312;
        v130 = v17;
        v131 = 2050;
        *(_QWORD *)v132 = 0xBFF0000000000000;
        _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_DEBUG, "CLTSP,II,printLocationDebugLog,location is LOI or reconstructed from LOI,sunc,%{public}.7lf,invalidated to,%{public}.1lf", buf, 0x16u);
      }
      v9 = -1.0;
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
        objc_msgSend_speedAccuracy(a3, v123, v124, v125);
        v126 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "void printLocationDebugLog(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, CLTripSegmentLocation *, const std::string)", "CoreLocation: %s\n", v126);
        if (v126 != (char *)buf)
          free(v126);
      }
    }
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v18 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
    {
      v128 = v9;
      v22 = a4;
      if (*(char *)(a4 + 23) < 0)
        v22 = *(_QWORD *)a4;
      v23 = (void *)objc_msgSend_timestamp(a3, v19, v20, v21);
      objc_msgSend_timeIntervalSinceReferenceDate(v23, v24, v25, v26);
      v127 = v27;
      objc_msgSend_latitude(a3, v28, v29, v30);
      v32 = v31;
      objc_msgSend_longitude(a3, v33, v34, v35);
      v37 = v36;
      objc_msgSend_altitude(a3, v38, v39, v40);
      v42 = v41;
      objc_msgSend_speed(a3, v43, v44, v45);
      v47 = v46;
      objc_msgSend_course(a3, v48, v49, v50);
      v52 = v51;
      objc_msgSend_horizontalAccuracy(a3, v53, v54, v55);
      v57 = v56;
      objc_msgSend_altitudeAccuracy(a3, v58, v59, v60);
      v62 = v61;
      objc_msgSend_courseAccuracy(a3, v63, v64, v65);
      v67 = v66;
      v71 = objc_msgSend_locType(a3, v68, v69, v70);
      v75 = (void *)objc_msgSend_UUIDString(a1, v72, v73, v74);
      v79 = objc_msgSend_UTF8String(v75, v76, v77, v78);
      *(_DWORD *)buf = 136449795;
      v130 = v22;
      v131 = 1026;
      *(_DWORD *)v132 = 1;
      *(_WORD *)&v132[4] = 1026;
      *(_DWORD *)&v132[6] = v6;
      v133 = 2050;
      v134 = v127;
      v135 = 2049;
      v136 = v32;
      v137 = 2049;
      v138 = v37;
      v139 = 2050;
      v140 = v42;
      v141 = 2050;
      v142 = v47;
      v143 = 2050;
      v144 = v52;
      v145 = 2050;
      v146 = v57;
      v147 = 2050;
      v148 = v62;
      v149 = 2050;
      v150 = v128;
      v151 = 2050;
      v152 = v67;
      v153 = 1026;
      v154 = v71;
      v155 = 2082;
      v156 = v79;
      _os_log_impl(&dword_18F5B3000, v18, OS_LOG_TYPE_DEBUG, "CLTSP,II,locType,%{public}s,mode,%{public}d,final,%{public}d,time,%{public}.3lf,LL,%{private}.7lf,%{private}.7lf,altitude,%{public}.2lf,speed,%{public}.2lf,course,%{public}.2lf,hunc,%{public}.2lf,vunc,%{public}.2lf,sunc,%{public}.7lf,cunc,%{public}.7lf,type,%{public}d,id,%{public}s", buf, 0x8Cu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
      v83 = (void *)objc_msgSend_timestamp(a3, v80, v81, v82);
      objc_msgSend_timeIntervalSinceReferenceDate(v83, v84, v85, v86);
      objc_msgSend_latitude(a3, v87, v88, v89);
      objc_msgSend_longitude(a3, v90, v91, v92);
      objc_msgSend_altitude(a3, v93, v94, v95);
      objc_msgSend_speed(a3, v96, v97, v98);
      objc_msgSend_course(a3, v99, v100, v101);
      objc_msgSend_horizontalAccuracy(a3, v102, v103, v104);
      objc_msgSend_altitudeAccuracy(a3, v105, v106, v107);
      objc_msgSend_courseAccuracy(a3, v108, v109, v110);
      objc_msgSend_locType(a3, v111, v112, v113);
      v117 = (void *)objc_msgSend_UUIDString(a1, v114, v115, v116);
      objc_msgSend_UTF8String(v117, v118, v119, v120);
      v121 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void printLocationDebugLog(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, CLTripSegmentLocation *, const std::string)", "CoreLocation: %s\n");
LABEL_27:
      if (v121 != buf)
        free(v121);
    }
  }
  else
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v122 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v122, OS_LOG_TYPE_ERROR, "CLTSP,II,printLocationDebugLog,detected null locationData", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
      v121 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void printLocationDebugLog(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, CLTripSegmentLocation *, const std::string)", "CoreLocation: %s\n");
      goto LABEL_27;
    }
  }
}

void sub_18F62EC08(double a1, double a2)
{
  double v2;

  if (a2 == 0.0)
  {
    exp(a1);
    return;
  }
  if (fabs(a1) == INFINITY)
  {
    if (a1 >= 0.0)
    {
      if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        return;
    }
    else if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      a2 = 1.0;
    }
  }
  v2 = a2;
  exp(a1);
  __sincos_stret(v2);
}

BOOL sub_18F62ECD0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _BOOL8 result;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  _BOOL4 v20;
  NSObject *v21;
  int v22;
  char *v23;
  uint8_t buf[1640];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    objc_msgSend_speed(a1, a2, a3, a4);
    result = 0;
    if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v8 >= 0.0)
    {
      objc_msgSend_course(a1, v5, v6, v7);
      result = 0;
      if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v13 >= 0.0)
      {
        objc_msgSend_speedAccuracy(a1, v10, v11, v12);
        result = 0;
        if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v17 > 0.0 && v17 < 20.0)
        {
          objc_msgSend_courseAccuracy(a1, v14, v15, v16);
          v20 = v18 > 0.0 && (*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          return v18 < 180.0 && v20;
        }
      }
    }
  }
  else
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v21 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v21, OS_LOG_TYPE_ERROR, "CLTSP,II,isLocationSpeedAndCourseValid,detected null location", buf, 2u);
    }
    v22 = sub_18F5C4AE0(115, 0);
    result = 0;
    if (v22)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
      v23 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL isLocationSpeedAndCourseValid(CLTripSegmentLocation *)", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
      return 0;
    }
  }
  return result;
}

void sub_18F62EF1C(void *a1, const char *a2, unsigned int *a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  uint8_t buf[1640];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    objc_msgSend_setLocationReconstructionType_(a1, a2, a4, a4);
    objc_msgSend_setStartLocationType_(a1, v7, *(unsigned int *)a2, v8);
    objc_msgSend_setStopLocationType_(a1, v9, *a3, v10);
  }
  else
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v11 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_ERROR, "CLTSP,II,handleLocationType,detected null location", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
      v12 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void handleLocationType(CLTripSegmentLocation *, const CLLocationType &, const CLLocationType &, const ReconstructedLocationType &)", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
}

void sub_18F62F0F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint8_t buf[1640];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    objc_msgSend_speed(a1, (const char *)a2, a3, a4);
    if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v9 < 0.0)
    {
      v11 = *(double *)a2;
    }
    else
    {
      objc_msgSend_speed(a1, v6, v7, v8);
      v11 = v10;
    }
    objc_msgSend_course(a1, v6, v7, v8);
    if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v16 < 0.0)
    {
      v18 = *(double *)(a2 + 16);
    }
    else
    {
      objc_msgSend_course(a1, v13, v14, v15);
      v18 = v17;
    }
    objc_msgSend_speedAccuracy(a1, v13, v14, v15);
    if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v22 <= 0.0 || v22 >= 20.0)
    {
      v24 = *(double *)(a2 + 8);
    }
    else
    {
      objc_msgSend_speedAccuracy(a1, v19, v20, v21);
      v24 = v23;
    }
    objc_msgSend_courseAccuracy(a1, v19, v20, v21);
    if ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v28 <= 0.0 || v28 >= 180.0)
    {
      objc_msgSend_updateCourse_andCourseAccuracy_(a1, v25, v26, v27, v18, *(double *)(a2 + 24));
    }
    else
    {
      objc_msgSend_courseAccuracy(a1, v25, v26, v27);
      objc_msgSend_updateCourse_andCourseAccuracy_(a1, v29, v30, v31, v18, v32);
    }
    objc_msgSend_updateSpeed_andSpeedAccuracy_(a1, v33, v34, v35, v11, v24);
  }
  else
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v12 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_ERROR, "CLTSP,II,updateSpeedAndCourse,detected null location", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
      v36 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void updateSpeedAndCourse(CLTripSegmentLocation *, const CLInertialIntegratorLastEstimatedParameters &)", "CoreLocation: %s\n", v36);
      if (v36 != (char *)buf)
        free(v36);
    }
  }
}

void sub_18F62F3DC(void *a1, const char *a2, void *a3, void *a4, uint64_t a5)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  void *__p[2];
  char v24;
  __int16 v25;
  uint8_t buf[1640];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (sub_18F62ECD0(a4, a2, (uint64_t)a3, (uint64_t)a4))
    {
      objc_msgSend_setLocationReconstructionType_(a4, v10, 1, v12);
    }
    else
    {
      sub_18F62F0F8(a4, a5, v11, v12);
      objc_msgSend_setLocationReconstructionType_(a4, v17, 2, v18);
    }
    objc_msgSend_setStartLocationType_(a4, v13, 0, v14);
    objc_msgSend_setStopLocationType_(a4, v19, 0, v20);
    objc_msgSend_addObject_(a3, v21, (uint64_t)a4, v22);
    sub_18F5D5990(__p, "reconstructed");
    sub_18F62E518(a1, a2, a4, (uint64_t)__p);
    if (v24 < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v15 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_ERROR, "CLTSP,II,addLocation,detected null reconstructedLocations", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
      v25 = 0;
      v16 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void addLocation(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, CLTripSegmentLocation *, const CLInertialIntegratorLastEstimatedParameters &)", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
  }
}

void sub_18F62F604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_18F62F628(_BYTE *a1, void *a2, unsigned int a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  double v102;
  double v103;
  unint64_t v104;
  const char *v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  double v121;
  double v122;
  const char *v123;
  uint64_t v124;
  void *v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  void *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  int isGPSLocationType;
  int v140;
  void *v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  void *v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  void *v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  double v160;
  double v161;
  const char *v162;
  uint64_t v163;
  void *v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  double v168;
  void *v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  double v174;
  const char *v175;
  uint64_t v176;
  void *v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  void *v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  double v186;
  double v187;
  const char *v188;
  uint64_t v189;
  void *v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  double v194;
  NSObject *v195;
  const char *v196;
  uint64_t v197;
  void *v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  const char *v210;
  uint64_t v211;
  void *v212;
  const char *v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  const char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  const char *v223;
  uint64_t v224;
  NSObject *v225;
  NSObject *v226;
  NSObject *v227;
  char *v228;
  NSObject *v229;
  _BOOL8 v230;
  uint64_t v232;
  const char *v233;
  uint64_t v234;
  uint64_t v235;
  const char *v236;
  uint64_t v237;
  const char *v238;
  uint64_t v239;
  uint64_t v240;
  const char *v241;
  uint64_t v242;
  uint64_t v243;
  const char *v244;
  uint64_t v245;
  unint64_t v246;
  BOOL v247;
  int v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  const char *v258;
  uint64_t v259;
  void *v260;
  const char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  const char *v265;
  uint64_t v266;
  double v267;
  double v268;
  const char *v269;
  uint64_t v270;
  void *v271;
  const char *v272;
  uint64_t v273;
  uint64_t v274;
  const char *v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  char *v279;
  double v280;
  double v281;
  double *v282;
  uint64_t v283;
  unint64_t v284;
  double v285;
  void *v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  _DWORD *v291;
  char *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  char *v296;
  char *v297;
  int v298;
  unint64_t i;
  int *v300;
  uint64_t v301;
  int v302;
  void *v303;
  const char *v304;
  uint64_t v305;
  uint64_t v306;
  void *v307;
  const char *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  NSObject *v313;
  char *v314;
  uint64_t v315;
  const char *v316;
  uint64_t v317;
  uint64_t v318;
  const char *v319;
  uint64_t v320;
  char *v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  char *v325;
  double *v326;
  uint64_t v327;
  void *v328;
  const char *v329;
  uint64_t v330;
  uint64_t v331;
  double v332;
  void *v334;
  const char *v335;
  uint64_t v336;
  uint64_t v337;
  void *v338;
  const char *v339;
  uint64_t v340;
  uint64_t v341;
  double v342;
  void *v343;
  const char *v344;
  uint64_t v345;
  uint64_t v346;
  double v347;
  void *v348;
  const char *v349;
  uint64_t v350;
  void *v351;
  const char *v352;
  uint64_t v353;
  uint64_t v354;
  double v355;
  double v356;
  const char *v357;
  uint64_t v358;
  void *v359;
  const char *v360;
  uint64_t v361;
  uint64_t v362;
  const char *v363;
  uint64_t v364;
  uint64_t v365;
  double v366;
  uint64_t v367;
  const char *v368;
  uint64_t v369;
  uint64_t v370;
  const char *v371;
  uint64_t v372;
  uint64_t v373;
  const char *v374;
  const char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  const char *v379;
  uint64_t v380;
  uint64_t v381;
  const char *v382;
  uint64_t v383;
  const char *v384;
  NSObject *v385;
  NSObject *v386;
  const char *v387;
  char *v388;
  NSObject *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  void *v395;
  double v396;
  uint64_t v397;
  double v398;
  const char *v399;
  uint64_t v400;
  uint64_t v401;
  double v402;
  NSObject *v403;
  const char *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  const char *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  const char *v414;
  uint64_t v415;
  uint64_t v416;
  void *v417;
  const char *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  const char *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  BOOL v426;
  void *v427;
  unint64_t v428;
  uint64_t v429;
  void *v430;
  int v431;
  uint64_t v432;
  const char *v433;
  uint64_t v434;
  uint64_t v435;
  NSObject *v436;
  unsigned int v437;
  const char *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v442;
  const char *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  const char *v447;
  uint64_t v448;
  uint64_t v449;
  const char *v450;
  uint64_t v451;
  uint64_t v452;
  double v453;
  double v454;
  BOOL v455;
  NSObject *v456;
  char *v457;
  NSObject *v458;
  const char *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  const char *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  const char *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  const char *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  const char *v478;
  uint64_t v479;
  uint64_t v480;
  double v481;
  NSObject *v482;
  const char *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  const char *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  const char *v493;
  uint64_t v494;
  uint64_t v495;
  void *v496;
  const char *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  const char *v501;
  uint64_t v502;
  uint64_t v503;
  const char *v504;
  uint64_t v505;
  uint64_t v506;
  double v507;
  const char *v508;
  uint64_t v509;
  uint64_t v510;
  double v511;
  const char *v512;
  uint64_t v513;
  uint64_t v514;
  double v515;
  const char *v516;
  uint64_t v517;
  uint64_t v518;
  void *v519;
  const char *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  const char *v524;
  uint64_t v525;
  uint64_t v526;
  void *v527;
  const char *v528;
  uint64_t v529;
  uint64_t v530;
  double v531;
  double v532;
  const char *v533;
  uint64_t v534;
  uint64_t v535;
  void *v536;
  const char *v537;
  uint64_t v538;
  uint64_t v539;
  double v540;
  const char *v541;
  uint64_t v542;
  uint64_t v543;
  void *v544;
  const char *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  const char *v549;
  uint64_t v550;
  const char *v551;
  uint64_t v552;
  double v553;
  double v554;
  const char *v555;
  uint64_t v556;
  uint64_t v557;
  double v558;
  double v559;
  const char *v560;
  uint64_t v561;
  uint64_t v562;
  double v563;
  double v564;
  const char *v565;
  uint64_t v566;
  uint64_t v567;
  double v568;
  double v569;
  const char *v570;
  uint64_t v571;
  uint64_t v572;
  const char *v573;
  uint64_t v574;
  uint64_t v575;
  double v576;
  double v577;
  double v578;
  long double v579;
  double v580;
  const char *v581;
  uint64_t v582;
  uint64_t v583;
  const char *v584;
  uint64_t v585;
  uint64_t v586;
  char v587;
  char v588;
  void **v589;
  uint64_t v590;
  double v591;
  double v592;
  double v593;
  const char *v594;
  uint64_t v595;
  uint64_t v596;
  void *v597;
  const char *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  const char *v602;
  uint64_t v603;
  double v604;
  double v605;
  const char *v606;
  uint64_t v607;
  uint64_t v608;
  double v609;
  double v610;
  const char *v611;
  uint64_t v612;
  uint64_t v613;
  double v614;
  double v615;
  const char *v616;
  uint64_t v617;
  uint64_t v618;
  double v619;
  double v620;
  const char *v621;
  uint64_t v622;
  uint64_t v623;
  double v624;
  double v625;
  long double v626;
  long double v627;
  double v628;
  double v629;
  long double v630;
  double v631;
  double v632;
  NSObject *v633;
  const char *v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  const char *v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  NSObject *v642;
  const char *v643;
  uint64_t v644;
  uint64_t v645;
  int v646;
  const char *v647;
  uint64_t v648;
  uint64_t v649;
  int v650;
  NSObject *v651;
  const char *v652;
  uint64_t v653;
  uint64_t v654;
  void *v655;
  const char *v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  const char *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  const char *v665;
  uint64_t v666;
  uint64_t v667;
  void *v668;
  const char *v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  const char *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  NSObject *v678;
  const char *v679;
  uint64_t v680;
  uint64_t v681;
  void *v682;
  const char *v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  const char *v687;
  uint64_t v688;
  uint64_t v689;
  void *v690;
  const char *v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  char *v695;
  NSObject *v696;
  long double v697;
  double v698;
  NSObject *v699;
  double v700;
  const char *v701;
  uint64_t v702;
  uint64_t v703;
  id v704;
  const char *v705;
  uint64_t v706;
  unint64_t v707;
  int v708;
  void *v709;
  const char *v710;
  uint64_t v711;
  uint64_t v712;
  void *v713;
  const char *v714;
  uint64_t v715;
  uint64_t v716;
  const char *v717;
  uint64_t v718;
  uint64_t v719;
  double v720;
  void *v721;
  const char *v722;
  uint64_t v723;
  uint64_t v724;
  void *v725;
  const char *v726;
  uint64_t v727;
  uint64_t v728;
  double v729;
  double v730;
  const char *v731;
  uint64_t v732;
  void *v733;
  const char *v734;
  uint64_t v735;
  uint64_t v736;
  void *v737;
  const char *v738;
  uint64_t v739;
  uint64_t v740;
  double v741;
  double v742;
  double v743;
  NSObject *v744;
  double v745;
  int v746;
  CLTripSegmentInertialData *v747;
  const char *v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  const char *v752;
  uint64_t v753;
  id v754;
  const char *v755;
  uint64_t v756;
  void *v757;
  const char *v758;
  uint64_t v759;
  void *v760;
  const char *v761;
  uint64_t v762;
  uint64_t v763;
  double v764;
  void *v765;
  const char *v766;
  uint64_t v767;
  uint64_t v768;
  double v769;
  uint64_t v770;
  const char *v771;
  uint64_t v772;
  char *v773;
  NSObject *v774;
  const char *v775;
  uint64_t v776;
  uint64_t v777;
  char *v778;
  NSObject *v779;
  const char *v780;
  uint64_t v781;
  uint64_t v782;
  int v783;
  const char *v784;
  uint64_t v785;
  uint64_t v786;
  NSObject *v787;
  const char *v788;
  uint64_t v789;
  uint64_t v790;
  int v791;
  void *v792;
  const char *v793;
  uint64_t v794;
  uint64_t v795;
  double v796;
  uint64_t v797;
  double v798;
  uint64_t v799;
  double v800;
  double v801;
  NSObject *v802;
  void *v803;
  const char *v804;
  uint64_t v805;
  uint64_t v806;
  void *v807;
  const char *v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  const char *v812;
  uint64_t v813;
  double v814;
  double v815;
  const char *v816;
  uint64_t v817;
  void *v818;
  const char *v819;
  uint64_t v820;
  uint64_t v821;
  const char *v822;
  uint64_t v823;
  uint64_t v824;
  id v825;
  double v826;
  void *v827;
  const char *v828;
  uint64_t v829;
  uint64_t v830;
  void *v831;
  const char *v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  const char *v836;
  uint64_t v837;
  double v838;
  double v839;
  const char *v840;
  uint64_t v841;
  void *v842;
  const char *v843;
  uint64_t v844;
  uint64_t v845;
  double v846;
  double v847;
  const char *v848;
  uint64_t v849;
  uint64_t v850;
  void *v851;
  const char *v852;
  uint64_t v853;
  uint64_t v854;
  double v855;
  double v856;
  const char *v857;
  uint64_t v858;
  uint64_t v859;
  const char *v860;
  uint64_t v861;
  uint64_t v862;
  double v863;
  double v864;
  double v865;
  NSObject *v866;
  NSObject *v867;
  const char *v868;
  uint64_t v869;
  uint64_t v870;
  double v871;
  double v872;
  const char *v873;
  uint64_t v874;
  uint64_t v875;
  double v876;
  double v877;
  double v878;
  const char *v879;
  uint64_t v880;
  uint64_t v881;
  double v882;
  double v883;
  double v884;
  _QWORD *v885;
  double *v886;
  double v887;
  double v888;
  double v889;
  __double2 v890;
  uint64_t v891;
  CLTripSegmentLocation *v892;
  const char *v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  double v897;
  double v898;
  const char *v899;
  uint64_t v900;
  uint64_t v901;
  double v902;
  double v903;
  double v904;
  const char *v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  const char *v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  const char *v914;
  const char *v915;
  uint64_t v916;
  uint64_t v917;
  void *v918;
  const char *v919;
  uint64_t v920;
  uint64_t v921;
  void *Object;
  const char *v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  const char *v927;
  uint64_t v928;
  const char *v929;
  uint64_t v930;
  uint64_t v931;
  double v932;
  id v933;
  void *v934;
  const char *v935;
  uint64_t v936;
  uint64_t v937;
  void *v938;
  const char *v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  const char *v943;
  uint64_t v944;
  double v945;
  double v946;
  const char *v947;
  uint64_t v948;
  uint64_t v949;
  void *v950;
  const char *v951;
  uint64_t v952;
  uint64_t v953;
  double v954;
  double v955;
  const char *v956;
  uint64_t v957;
  uint64_t v958;
  const char *v959;
  uint64_t v960;
  uint64_t v961;
  double v962;
  double v963;
  double v964;
  NSObject *v965;
  const char *v966;
  uint64_t v967;
  uint64_t v968;
  double v969;
  double v970;
  double v971;
  const char *v972;
  uint64_t v973;
  uint64_t v974;
  double v975;
  double v976;
  double v977;
  const char *v978;
  uint64_t v979;
  uint64_t v980;
  double v981;
  double v982;
  double v983;
  double v984;
  double v985;
  _QWORD *v986;
  double *v987;
  double v988;
  __double2 v989;
  uint64_t v990;
  CLTripSegmentLocation *v991;
  const char *v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  double v996;
  double v997;
  const char *v998;
  uint64_t v999;
  uint64_t v1000;
  double v1001;
  double v1002;
  double v1003;
  const char *v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  const char *v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  const char *v1013;
  void *v1014;
  const char *v1015;
  uint64_t v1016;
  uint64_t v1017;
  double v1018;
  const char *v1019;
  uint64_t v1020;
  uint64_t v1021;
  void *v1022;
  const char *v1023;
  uint64_t v1024;
  uint64_t v1025;
  const char *v1026;
  uint64_t v1027;
  uint64_t v1028;
  void *v1029;
  const char *v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  const char *v1034;
  uint64_t v1035;
  const char *v1036;
  uint64_t v1037;
  uint64_t v1038;
  double v1039;
  const char *v1040;
  uint64_t v1041;
  void *v1042;
  const char *v1043;
  uint64_t v1044;
  uint64_t v1045;
  void *v1046;
  const char *v1047;
  uint64_t v1048;
  uint64_t v1049;
  unint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  double v1053;
  double v1054;
  char *v1055;
  double *v1056;
  NSObject *v1057;
  char *v1058;
  char *v1059;
  uint64_t v1060;
  unint64_t v1061;
  uint64_t v1062;
  char *v1063;
  double *v1064;
  uint64_t v1065;
  const char *v1066;
  uint64_t v1067;
  unint64_t v1068;
  void *v1069;
  const char *v1070;
  uint64_t v1071;
  uint64_t v1072;
  void *v1073;
  const char *v1074;
  uint64_t v1075;
  void *v1076;
  const char *v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  const char *v1081;
  uint64_t v1082;
  unint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  char *v1088;
  _QWORD *v1089;
  char *v1090;
  uint64_t v1091;
  unint64_t v1092;
  uint64_t v1093;
  char *v1094;
  char *v1095;
  uint64_t v1096;
  _QWORD *v1097;
  uint64_t v1098;
  double v1099;
  double v1100;
  const char *v1101;
  uint64_t v1102;
  uint64_t v1103;
  double v1104;
  double v1105;
  const char *v1106;
  uint64_t v1107;
  uint64_t v1108;
  double v1109;
  double v1110;
  const char *v1111;
  uint64_t v1112;
  uint64_t v1113;
  unint64_t v1114;
  const char *v1115;
  uint64_t v1116;
  uint64_t v1117;
  const char *v1118;
  uint64_t v1119;
  uint64_t v1120;
  const char *v1121;
  uint64_t v1122;
  uint64_t v1123;
  unint64_t v1124;
  double v1125;
  void *v1126;
  const char *v1127;
  uint64_t v1128;
  uint64_t v1129;
  double v1130;
  const char *v1131;
  uint64_t v1132;
  uint64_t v1133;
  NSObject *v1134;
  BOOL v1135;
  unsigned int v1136;
  double v1137;
  double v1138;
  double v1139;
  double *v1140;
  double v1141;
  double v1142;
  NSObject *v1143;
  char *v1144;
  uint64_t v1145;
  const char *v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  const char *v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  const char *v1154;
  uint64_t v1155;
  uint64_t v1156;
  const char *v1157;
  uint64_t v1158;
  uint64_t v1159;
  const char *v1160;
  uint64_t v1161;
  unint64_t v1162;
  double v1163;
  void *v1164;
  const char *v1165;
  uint64_t v1166;
  uint64_t v1167;
  double v1168;
  const char *v1169;
  uint64_t v1170;
  uint64_t v1171;
  double *v1172;
  float64x2_t *v1173;
  double *v1174;
  uint64_t v1175;
  double *v1176;
  double v1177;
  double v1178;
  double v1179;
  double v1180;
  char *v1181;
  uint64_t v1182;
  double v1183;
  double v1184;
  double *v1185;
  float64x2_t v1186;
  long double v1187;
  long double v1188;
  double v1189;
  double v1190;
  double v1191;
  double *v1192;
  double *v1193;
  double *v1194;
  uint64_t v1195;
  unint64_t v1196;
  uint64_t v1197;
  unint64_t v1198;
  char *v1199;
  double *v1200;
  uint64_t v1201;
  double v1202;
  double v1203;
  double v1204;
  NSObject *v1205;
  char *v1206;
  const char *v1207;
  uint64_t v1208;
  uint64_t v1209;
  double v1210;
  double v1211;
  unint64_t v1212;
  const char *v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  const char *v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  const char *v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  const char *v1225;
  uint64_t v1226;
  uint64_t v1227;
  const char *v1228;
  uint64_t v1229;
  uint64_t v1230;
  unint64_t v1231;
  double v1232;
  double v1233;
  void *v1234;
  const char *v1235;
  uint64_t v1236;
  uint64_t v1237;
  double v1238;
  const char *v1239;
  uint64_t v1240;
  uint64_t v1241;
  _BYTE *v1242;
  double *v1243;
  _BYTE *v1244;
  void *v1245;
  double v1246;
  double *v1247;
  double v1248;
  double v1249;
  NSObject *v1250;
  unint64_t v1251;
  const char *v1252;
  uint64_t v1253;
  uint64_t v1254;
  const char *v1255;
  uint64_t v1256;
  uint64_t v1257;
  double v1258;
  double v1259;
  double v1260;
  NSObject *v1261;
  const char *v1262;
  uint64_t v1263;
  uint64_t v1264;
  char *v1265;
  unint64_t v1266;
  void *v1267;
  const char *v1268;
  uint64_t v1269;
  uint64_t v1270;
  double v1271;
  double v1272;
  const char *v1273;
  uint64_t v1274;
  uint64_t v1275;
  unint64_t v1276;
  const char *v1277;
  uint64_t v1278;
  uint64_t v1279;
  const char *v1280;
  uint64_t v1281;
  uint64_t v1282;
  double v1283;
  const char *v1284;
  uint64_t v1285;
  uint64_t v1286;
  double v1287;
  char *v1288;
  unint64_t v1289;
  unint64_t v1290;
  double *v1291;
  double *v1292;
  NSObject *v1293;
  double *v1294;
  double *v1295;
  double v1296;
  double v1298;
  double *v1299;
  double *v1300;
  double *v1301;
  double v1302;
  double v1303;
  _BOOL4 v1304;
  double *v1305;
  double *v1306;
  double *v1307;
  double v1309;
  double *v1310;
  double v1311;
  double v1312;
  double v1313;
  _BOOL4 v1314;
  const char *v1315;
  uint64_t v1316;
  uint64_t v1317;
  double v1318;
  double v1319;
  int v1320;
  int64_t v1321;
  NSObject *v1322;
  uint64_t v1323;
  int v1324;
  double v1325;
  double v1326;
  unint64_t v1327;
  const char *v1328;
  uint64_t v1329;
  uint64_t v1330;
  const char *v1331;
  uint64_t v1332;
  uint64_t v1333;
  unint64_t v1334;
  double v1335;
  void *v1336;
  const char *v1337;
  uint64_t v1338;
  uint64_t v1339;
  double v1340;
  const char *v1341;
  uint64_t v1342;
  uint64_t v1343;
  double v1344;
  NSObject *v1345;
  unint64_t v1346;
  const char *v1347;
  uint64_t v1348;
  uint64_t v1349;
  const char *v1350;
  uint64_t v1351;
  uint64_t v1352;
  double v1353;
  double v1354;
  double v1355;
  NSObject *v1356;
  uint64_t v1357;
  char *v1358;
  const char *v1359;
  unint64_t v1360;
  void *v1361;
  const char *v1362;
  uint64_t v1363;
  uint64_t v1364;
  double v1365;
  double v1366;
  const char *v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  char *v1371;
  unint64_t v1372;
  double v1373;
  double v1374;
  double v1375;
  __double2 v1376;
  unint64_t v1377;
  unint64_t v1378;
  unint64_t v1379;
  char *v1380;
  double *v1381;
  double *v1382;
  double *v1383;
  double *v1384;
  __int128 v1385;
  char *v1386;
  uint64_t v1387;
  unint64_t v1388;
  double *v1389;
  double v1390;
  double v1391;
  double v1392;
  const char *v1393;
  uint64_t v1394;
  uint64_t v1395;
  double v1396;
  double v1397;
  double v1398;
  int isLoiLocationType;
  const char *v1400;
  uint64_t v1401;
  double v1402;
  double v1405;
  double v1406;
  double v1409;
  void *v1410;
  const char *v1411;
  uint64_t v1412;
  uint64_t v1413;
  void *v1414;
  const char *v1415;
  uint64_t v1416;
  uint64_t v1417;
  double v1418;
  double v1419;
  CLTripSegmentLocation *v1420;
  const char *v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  const char *v1425;
  uint64_t v1426;
  uint64_t v1427;
  double v1428;
  double v1429;
  const char *v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  const char *v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  const char *v1439;
  id v1440;
  const char *v1441;
  uint64_t v1442;
  uint64_t v1443;
  const char *v1444;
  uint64_t v1445;
  uint64_t v1446;
  const char *v1447;
  uint64_t v1448;
  double v1449;
  const char *v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  const char *v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  NSObject *v1459;
  uint64_t v1460;
  NSObject *v1461;
  int v1462;
  char *v1463;
  NSObject *v1464;
  const char *v1465;
  uint64_t v1466;
  uint64_t v1467;
  const char *v1468;
  uint64_t v1469;
  uint64_t v1470;
  const char *v1471;
  uint64_t v1472;
  const char *v1473;
  uint64_t v1474;
  const char *v1475;
  uint64_t v1476;
  const char *v1477;
  uint64_t v1478;
  const char *v1479;
  uint64_t v1480;
  uint64_t v1481;
  unint64_t j;
  const char *v1483;
  uint64_t v1484;
  void *v1485;
  const char *v1486;
  uint64_t v1487;
  uint64_t v1488;
  void *v1489;
  const char *v1490;
  uint64_t v1491;
  uint64_t v1492;
  double v1493;
  double v1494;
  CLTripSegmentLocation *v1495;
  const char *v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  const char *v1500;
  uint64_t v1501;
  uint64_t v1502;
  double v1503;
  const char *v1504;
  uint64_t v1505;
  uint64_t v1506;
  double v1507;
  double v1508;
  const char *v1509;
  uint64_t v1510;
  uint64_t v1511;
  double v1512;
  double v1513;
  const char *v1514;
  uint64_t v1515;
  uint64_t v1516;
  double v1517;
  double v1518;
  const char *v1519;
  uint64_t v1520;
  uint64_t v1521;
  double v1522;
  double v1523;
  const char *v1524;
  uint64_t v1525;
  uint64_t v1526;
  double v1527;
  double v1528;
  const char *v1529;
  uint64_t v1530;
  uint64_t v1531;
  double v1532;
  double v1533;
  const char *v1534;
  uint64_t v1535;
  uint64_t v1536;
  double v1537;
  double v1538;
  const char *v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  const char *v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  const char *v1548;
  id v1549;
  const char *v1550;
  uint64_t v1551;
  uint64_t v1552;
  const char *v1553;
  uint64_t v1554;
  uint64_t v1555;
  const char *v1556;
  uint64_t v1557;
  const char *v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  const char *v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  const char *v1568;
  uint64_t v1569;
  uint64_t v1570;
  void *v1571;
  const char *v1572;
  uint64_t v1573;
  uint64_t v1574;
  double v1575;
  double v1576;
  uint64_t v1577;
  char *v1578;
  const char *v1579;
  uint64_t v1580;
  uint64_t v1581;
  const char *v1582;
  uint64_t v1583;
  uint64_t v1584;
  int v1585;
  char *v1586;
  const char *v1587;
  uint64_t v1588;
  uint64_t v1589;
  int v1590;
  char *v1591;
  char *v1592;
  uint64_t v1593;
  char *v1594;
  char *v1595;
  char *v1596;
  char *v1597;
  const char *v1598;
  uint64_t v1599;
  uint64_t v1600;
  char *v1601;
  char *v1602;
  char *v1603;
  char *v1604;
  char *v1605;
  char *v1606;
  const char *v1607;
  uint64_t v1608;
  char *v1609;
  uint64_t v1610;
  const char *v1611;
  uint64_t v1612;
  uint64_t v1613;
  void *v1614;
  const char *v1615;
  uint64_t v1616;
  uint64_t v1617;
  const char *v1618;
  uint64_t v1619;
  uint64_t v1620;
  unint64_t v1621;
  void *v1622;
  const char *v1623;
  uint64_t v1624;
  uint64_t v1625;
  void *v1626;
  const char *v1627;
  uint64_t v1628;
  void *v1629;
  const char *v1630;
  uint64_t v1631;
  uint64_t v1632;
  const char *v1633;
  uint64_t v1634;
  uint64_t v1635;
  const char *v1636;
  uint64_t v1637;
  uint64_t v1638;
  void *v1639;
  const char *v1640;
  uint64_t v1641;
  uint64_t v1642;
  const char *v1643;
  uint64_t v1644;
  uint64_t v1645;
  void *v1646;
  const char *v1647;
  uint64_t v1648;
  uint64_t v1649;
  void *v1650;
  const char *v1651;
  uint64_t v1652;
  uint64_t v1653;
  const char *v1654;
  uint64_t v1655;
  uint64_t v1656;
  const char *v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  const char *v1661;
  uint64_t v1662;
  void *v1663;
  const char *v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  void *v1668;
  const char *v1669;
  uint64_t v1670;
  void *v1671;
  const char *v1672;
  uint64_t v1673;
  uint64_t v1674;
  const char *v1675;
  uint64_t v1676;
  uint64_t v1677;
  const char *v1678;
  uint64_t v1679;
  void *v1680;
  const char *v1681;
  uint64_t v1682;
  uint64_t v1683;
  NSObject *v1684;
  char *v1685;
  NSObject *v1686;
  NSObject *v1687;
  const char *v1688;
  uint64_t v1689;
  uint64_t v1690;
  char *v1691;
  const char *v1692;
  uint64_t v1693;
  void *v1694;
  const char *v1695;
  uint64_t v1696;
  uint64_t v1697;
  void *v1698;
  const char *v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  const char *v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  const char *v1708;
  uint64_t v1709;
  void *v1710;
  const char *v1711;
  uint64_t v1712;
  uint64_t v1713;
  void *v1714;
  const char *v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  char *v1719;
  char *v1720;
  const char *v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  const char *v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  const char *v1731;
  uint64_t v1732;
  uint64_t v1733;
  void *v1734;
  const char *v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  char *v1739;
  void *v1741;
  double v1742;
  void *v1743;
  void *v1744;
  int v1745;
  double v1746;
  double v1747;
  double v1748;
  double v1749;
  uint64_t v1751;
  double v1754;
  void *v1755;
  double v1756;
  long double v1757;
  double v1758;
  double v1759;
  double v1760;
  long double v1761;
  double v1762;
  double v1763;
  int v1765;
  int v1766;
  uint64_t v1768;
  id obj;
  void *v1770[2];
  char v1771;
  void *v1772[2];
  char v1773;
  uint64_t v1774;
  void *v1775;
  _BYTE *v1776;
  uint64_t v1777;
  void *v1778[4];
  void *v1779[2];
  char v1780;
  void *v1781[2];
  char v1782;
  void *v1783;
  char *v1784;
  void *v1785[4];
  void *v1786[2];
  char v1787;
  void *v1788;
  double *v1789;
  double *v1790;
  void *v1791;
  double *v1792;
  void *v1793;
  float64x2_t *v1794;
  void *v1795[3];
  _QWORD v1796[2];
  char v1797;
  void *v1798[2];
  char v1799;
  void *v1800[2];
  char v1801;
  void *v1802[2];
  char v1803;
  void *v1804[2];
  char v1805;
  __int128 v1806;
  __int128 v1807;
  __int128 v1808;
  __int128 v1809;
  __int128 v1810;
  __int128 v1811;
  unint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  int v1816;
  __int128 v1817;
  __int128 v1818;
  double v1819;
  double v1820;
  char v1821;
  int v1822;
  __int128 __p;
  _QWORD v1824[6];
  __int128 v1825;
  __int128 v1826;
  _BYTE v1827[128];
  _BYTE v1828[22];
  __int16 v1829;
  uint64_t v1830;
  _BYTE v1831[32];
  __int16 v1832;
  double v1833;
  __int16 v1834;
  double v1835;
  _BYTE buf[32];
  __int16 v1837;
  double v1838;
  __int16 v1839;
  double v1840;
  uint64_t v1841;

  v1841 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v225 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v225, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructTripSegment,null tripSegmentID", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 == -1)
      goto LABEL_67;
    goto LABEL_984;
  }
  if (!a5)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v226 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v226, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructTripSegment,null tripSegmentLocations", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 == -1)
      goto LABEL_67;
    goto LABEL_984;
  }
  if (!a6)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v227 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v227, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructTripSegment,null inertialData", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 == -1)
      goto LABEL_67;
LABEL_984:
    dispatch_once(&qword_1EE172168, &unk_1E29903B0);
LABEL_67:
    *(_WORD *)v1831 = 0;
    v228 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v228);
    goto LABEL_951;
  }
  v7 = a4;
  if (a4 != 1)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v229 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v229, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructTripSegment,unsupported mode of transportation,%{public}d", buf, 8u);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    *(_DWORD *)v1831 = 67240192;
    *(_DWORD *)&v1831[4] = v7;
    v228 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v228);
LABEL_951:
    if (v228 != buf)
      free(v228);
    return 0;
  }
  v1822 = 0;
  v1817 = 0u;
  v1818 = 0u;
  v1819 = 0.0;
  v1820 = 200.0;
  v1821 = 0;
  v1810 = 0u;
  v1811 = 0u;
  v1812 = 0xBFF0000000000000;
  v1813 = 0;
  v1815 = 0;
  v1814 = 0;
  v1816 = 0;
  obj = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (obj)
  {
    if (objc_msgSend_count(a5, v8, v9, v10))
    {
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
      v11 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
      {
        v14 = (void *)objc_msgSend_objectAtIndexedSubscript_(a5, v12, 0, v13);
        v18 = (void *)objc_msgSend_timestamp(v14, v15, v16, v17);
        objc_msgSend_timeIntervalSinceReferenceDate(v18, v19, v20, v21);
        v23 = v22;
        v27 = objc_msgSend_count(a5, v24, v25, v26);
        v30 = (void *)objc_msgSend_objectAtIndexedSubscript_(a5, v28, v27 - 1, v29);
        v34 = (void *)objc_msgSend_timestamp(v30, v31, v32, v33);
        objc_msgSend_timeIntervalSinceReferenceDate(v34, v35, v36, v37);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v23;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v38;
        _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_DEBUG, "CLTSP,II,checkForSpeedIntegrity,first location timestamp,%{public}.3lf,last location timestamp,%{public}.3lf", buf, 0x16u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
        v1694 = (void *)objc_msgSend_objectAtIndexedSubscript_(a5, v1692, 0, v1693);
        v1698 = (void *)objc_msgSend_timestamp(v1694, v1695, v1696, v1697);
        objc_msgSend_timeIntervalSinceReferenceDate(v1698, v1699, v1700, v1701);
        v1703 = v1702;
        v1707 = objc_msgSend_count(a5, v1704, v1705, v1706);
        v1710 = (void *)objc_msgSend_objectAtIndexedSubscript_(a5, v1708, v1707 - 1, v1709);
        v1714 = (void *)objc_msgSend_timestamp(v1710, v1711, v1712, v1713);
        objc_msgSend_timeIntervalSinceReferenceDate(v1714, v1715, v1716, v1717);
        *(_DWORD *)v1831 = 134349312;
        *(_QWORD *)&v1831[4] = v1703;
        *(_WORD *)&v1831[12] = 2050;
        *(_QWORD *)&v1831[14] = v1718;
        v1719 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "void checkForSpeedIntegrity(NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v1719);
        if (v1719 != buf)
          free(v1719);
      }
      v39 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v40 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      if (objc_msgSend_count(a5, v41, v42, v43) != 1)
      {
        v47 = 0;
        do
        {
          v48 = v47 + 1;
          v49 = (void *)objc_msgSend_objectAtIndexedSubscript_(a5, v44, v47 + 1, v46);
          v53 = (void *)objc_msgSend_timestamp(v49, v50, v51, v52);
          v56 = (void *)objc_msgSend_objectAtIndexedSubscript_(a5, v54, v47, v55);
          v60 = objc_msgSend_timestamp(v56, v57, v58, v59);
          objc_msgSend_timeIntervalSinceDate_(v53, v61, v60, v62);
          if (fabs(v66) > 0.001)
          {
            v67 = objc_msgSend_objectAtIndexedSubscript_(a5, v63, v47, v65);
            objc_msgSend_addObject_(v39, v68, v67, v69);
          }
          ++v47;
        }
        while (objc_msgSend_count(a5, v63, v64, v65) - 1 > v48);
      }
      v70 = objc_msgSend_count(a5, v44, v45, v46);
      v73 = objc_msgSend_objectAtIndexedSubscript_(a5, v71, v70 - 1, v72);
      objc_msgSend_addObject_(v39, v74, v73, v75);
      v78 = objc_msgSend_objectAtIndexedSubscript_(v39, v76, 0, v77);
      objc_msgSend_addObject_(v40, v79, v78, v80);
      if ((unint64_t)(objc_msgSend_count(v39, v81, v82, v83) - 3) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v87 = 1;
        do
        {
          v88 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v84, v87, v86);
          v92 = (void *)objc_msgSend_timestamp(v88, v89, v90, v91);
          v95 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v93, v87 - 1, v94);
          v99 = objc_msgSend_timestamp(v95, v96, v97, v98);
          objc_msgSend_timeIntervalSinceDate_(v92, v100, v99, v101);
          v103 = v102;
          v104 = v87 + 1;
          v107 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v105, (v87 + 1), v106);
          v111 = (void *)objc_msgSend_timestamp(v107, v108, v109, v110);
          v114 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v112, v87, v113);
          v118 = objc_msgSend_timestamp(v114, v115, v116, v117);
          objc_msgSend_timeIntervalSinceDate_(v111, v119, v118, v120);
          v122 = v121;
          v125 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v123, v87 - 1, v124);
          if (!objc_msgSend_isGPSLocationType(v125, v126, v127, v128))
            goto LABEL_44;
          v131 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v129, v87, v130);
          if (!objc_msgSend_isGPSLocationType(v131, v132, v133, v134))
            goto LABEL_44;
          v135 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v129, (v87 + 1), v130);
          isGPSLocationType = objc_msgSend_isGPSLocationType(v135, v136, v137, v138);
          v140 = v103 <= 2.0 ? isGPSLocationType : 0;
          if (v140 != 1)
            goto LABEL_44;
          if (v122 > 2.0)
            goto LABEL_44;
          v141 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v129, v87 - 1, v130);
          objc_msgSend_speedAccuracy(v141, v142, v143, v144);
          if ((*(_QWORD *)&v145 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            goto LABEL_44;
          if (v145 < 0.0)
            goto LABEL_44;
          v146 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v129, v87, v130);
          objc_msgSend_speedAccuracy(v146, v147, v148, v149);
          if ((*(_QWORD *)&v150 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            goto LABEL_44;
          if (v150 < 0.0)
            goto LABEL_44;
          v151 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v129, (v87 + 1), v130);
          objc_msgSend_speedAccuracy(v151, v152, v153, v154);
          if ((*(_QWORD *)&v155 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            goto LABEL_44;
          if (v155 < 0.0)
            goto LABEL_44;
          v156 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v129, v87, v130);
          objc_msgSend_speed(v156, v157, v158, v159);
          v161 = v160;
          v164 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v162, v87 - 1, v163);
          objc_msgSend_speed(v164, v165, v166, v167);
          if (vabdd_f64(v161, v168) < 6.0)
            goto LABEL_44;
          v169 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v129, (v87 + 1), v130);
          objc_msgSend_speed(v169, v170, v171, v172);
          v174 = v173;
          v177 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v175, v87, v176);
          objc_msgSend_speed(v177, v178, v179, v180);
          if (vabdd_f64(v174, v181) < 6.0)
            goto LABEL_44;
          v182 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v129, (v87 + 1), v130);
          objc_msgSend_speed(v182, v183, v184, v185);
          v187 = v186;
          v190 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v188, v87 - 1, v189);
          objc_msgSend_speed(v190, v191, v192, v193);
          if (vabdd_f64(v187, v194) * 0.5 < 6.0)
          {
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E29903B0);
            v195 = qword_1EE172170;
            if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
            {
              v198 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v196, v87, v197);
              v202 = (void *)objc_msgSend_timestamp(v198, v199, v200, v201);
              objc_msgSend_timeIntervalSinceReferenceDate(v202, v203, v204, v205);
              *(_DWORD *)buf = 134349056;
              *(_QWORD *)&buf[4] = v206;
              _os_log_impl(&dword_18F5B3000, v195, OS_LOG_TYPE_ERROR, "CLTSP,II,checkForSpeedIntegrity,skipped GPS location point at timestamp,%{public}.3lf", buf, 0xCu);
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E29903B0);
              v212 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v210, v87, v211);
              v216 = (void *)objc_msgSend_timestamp(v212, v213, v214, v215);
              objc_msgSend_timeIntervalSinceReferenceDate(v216, v217, v218, v219);
              *(_DWORD *)v1831 = 134349056;
              *(_QWORD *)&v1831[4] = v220;
              v221 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "void checkForSpeedIntegrity(NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v221);
              if (v221 != buf)
                free(v221);
            }
          }
          else
          {
LABEL_44:
            v222 = objc_msgSend_objectAtIndexedSubscript_(v39, v129, v87, v130);
            objc_msgSend_addObject_(v40, v223, v222, v224);
          }
          ++v87;
        }
        while (objc_msgSend_count(v39, v207, v208, v209) - 1 > v104);
      }
      v232 = objc_msgSend_count(v39, v84, v85, v86);
      v235 = objc_msgSend_objectAtIndexedSubscript_(v39, v233, v232 - 1, v234);
      objc_msgSend_addObject_(v40, v236, v235, v237);
      if (objc_msgSend_count(v40, v238, v239, v240))
      {
        if (v39 && v40)
        {
          objc_msgSend_removeAllObjects(v39, v241, v242, v243);
          objc_msgSend_addObjectsFromArray_(v39, v244, (uint64_t)v40, v245);
        }
        objc_msgSend_removeAllObjects(v40, v241, v242, v243);
      }
      v246 = 0;
      memset(v1831, 0, 24);
      if (v39)
        v247 = v40 == 0;
      else
        v247 = 1;
      v248 = !v247;
      v1765 = v248;
      __p = 0uLL;
      v1824[0] = 0;
      do
      {
        while (1)
        {
          v249 = v246;
          if (objc_msgSend_count(v39, v241, v242, v243) - 1 <= v246)
            break;
          ++v246;
          v253 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, (const char *)v250, v249 + 1, v252);
          v257 = (void *)objc_msgSend_timestamp(v253, v254, v255, v256);
          v260 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v258, v249, v259);
          v264 = objc_msgSend_timestamp(v260, v261, v262, v263);
          objc_msgSend_timeIntervalSinceDate_(v257, v265, v264, v266);
          v268 = v267;
          v271 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v269, v249 + 1, v270);
          v274 = objc_msgSend_objectAtIndexedSubscript_(v39, v272, v249, v273);
          objc_msgSend_distanceFromLocation_(v271, v275, v274, v276);
          v279 = *(char **)&v1831[8];
          v281 = v280 / v268;
          if (*(_QWORD *)&v1831[8] >= *(_QWORD *)&v1831[16])
          {
            v321 = *(char **)v1831;
            v322 = (uint64_t)(*(_QWORD *)&v1831[8] - *(_QWORD *)v1831) >> 3;
            v323 = v322 + 1;
            if ((unint64_t)(v322 + 1) >> 61)
              sub_18F5F7864();
            v324 = *(_QWORD *)&v1831[16] - *(_QWORD *)v1831;
            if ((uint64_t)(*(_QWORD *)&v1831[16] - *(_QWORD *)v1831) >> 2 > v323)
              v323 = v324 >> 2;
            if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFF8)
              v277 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v277 = v323;
            if (v277)
            {
              v325 = (char *)sub_18F610B1C((uint64_t)&v1831[16], v277);
              v279 = *(char **)&v1831[8];
              v321 = *(char **)v1831;
            }
            else
            {
              v325 = 0;
            }
            v326 = (double *)&v325[8 * v322];
            *v326 = v281;
            v282 = v326 + 1;
            while (v279 != v321)
            {
              v327 = *((_QWORD *)v279 - 1);
              v279 -= 8;
              *((_QWORD *)v326-- - 1) = v327;
            }
            *(_QWORD *)v1831 = v326;
            *(_QWORD *)&v1831[8] = v282;
            *(_QWORD *)&v1831[16] = &v325[8 * v277];
            if (v321)
              operator delete(v321);
          }
          else
          {
            **(double **)&v1831[8] = v281;
            v282 = (double *)(v279 + 8);
          }
          *(_QWORD *)&v1831[8] = v282;
          v328 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, (const char *)v277, v249, v278);
          objc_msgSend_speed(v328, v329, v330, v331);
          if (v332 < 0.0 && v268 <= 2.0)
          {
            v334 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v241, v249 + 1, v243);
            if (objc_msgSend_isGPSLocationType(v334, v335, v336, v337))
            {
              v338 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v241, v249 + 1, v243);
              objc_msgSend_speed(v338, v339, v340, v341);
              if ((*(_QWORD *)&v342 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v342 >= 0.0)
              {
                v343 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v241, v249 + 1, v243);
                objc_msgSend_speedAccuracy(v343, v344, v345, v346);
                if ((*(_QWORD *)&v347 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v347 > 0.0 && v347 < 20.0)
                {
                  v348 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v241, v249, v243);
                  v351 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v349, v246, v350);
                  objc_msgSend_speed(v351, v352, v353, v354);
                  v356 = v355;
                  v359 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, v357, v246, v358);
                  objc_msgSend_speedAccuracy(v359, v360, v361, v362);
                  objc_msgSend_updateSpeed_andSpeedAccuracy_(v348, v363, v364, v365, v356, v366);
                }
              }
            }
          }
        }
        v283 = *(_QWORD *)v1831;
        if (*(_QWORD *)&v1831[8] - *(_QWORD *)v1831 >= 9uLL)
        {
          v284 = 0;
          do
          {
            v285 = *(double *)(v283 + 8 * v284++);
            if (vabdd_f64(*(double *)(v283 + 8 * v284), v285) >= 6.0)
            {
              v286 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, (const char *)v250, v284, v252);
              if ((objc_msgSend_isGPSLocationType(v286, v287, v288, v289) & 1) == 0)
              {
                v290 = (char *)*((_QWORD *)&__p + 1);
                if (*((_QWORD *)&__p + 1) >= v1824[0])
                {
                  v292 = (char *)__p;
                  v293 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
                  v294 = v293 + 1;
                  if ((unint64_t)(v293 + 1) >> 62)
                    sub_18F5F7864();
                  v295 = v1824[0] - __p;
                  if ((uint64_t)(v1824[0] - __p) >> 1 > v294)
                    v294 = v295 >> 1;
                  if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFFCLL)
                    v250 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v250 = v294;
                  if (v250)
                  {
                    v296 = (char *)sub_18F62C554((uint64_t)v1824, v250);
                    v290 = (char *)*((_QWORD *)&__p + 1);
                    v292 = (char *)__p;
                  }
                  else
                  {
                    v296 = 0;
                  }
                  v297 = &v296[4 * v293];
                  *(_DWORD *)v297 = v284;
                  v291 = v297 + 4;
                  while (v290 != v292)
                  {
                    v298 = *((_DWORD *)v290 - 1);
                    v290 -= 4;
                    *((_DWORD *)v297 - 1) = v298;
                    v297 -= 4;
                  }
                  *(_QWORD *)&__p = v297;
                  *((_QWORD *)&__p + 1) = v291;
                  v1824[0] = &v296[4 * v250];
                  if (v292)
                    operator delete(v292);
                }
                else
                {
                  **((_DWORD **)&__p + 1) = v284;
                  v291 = v290 + 4;
                }
                *((_QWORD *)&__p + 1) = v291;
              }
            }
            v283 = *(_QWORD *)v1831;
          }
          while (((uint64_t)(*(_QWORD *)&v1831[8] - *(_QWORD *)v1831) >> 3) - 1 > v284);
          for (i = 0; objc_msgSend_count(v39, (const char *)v250, v251, v252) > i; ++i)
          {
            v300 = (int *)__p;
            if ((_QWORD)__p == *((_QWORD *)&__p + 1))
              goto LABEL_129;
            v301 = 0;
            do
            {
              v302 = *v300++;
              if (i == v302)
                ++v301;
            }
            while (v300 != *((int **)&__p + 1));
            if (!v301)
            {
LABEL_129:
              v315 = objc_msgSend_objectAtIndexedSubscript_(v39, (const char *)v250, i, v252);
              objc_msgSend_addObject_(v40, v316, v315, v317);
            }
            else
            {
              v303 = (void *)objc_msgSend_objectAtIndexedSubscript_(v39, (const char *)v250, i, v252);
              v307 = (void *)objc_msgSend_timestamp(v303, v304, v305, v306);
              objc_msgSend_timeIntervalSinceReferenceDate(v307, v308, v309, v310);
              v312 = v311;
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E29903B0);
              v313 = qword_1EE172170;
              if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134349056;
                *(_QWORD *)&buf[4] = v312;
                _os_log_impl(&dword_18F5B3000, v313, OS_LOG_TYPE_DEBUG, "CLTSP,II,checkForSpeedIntegrity,skipped location point at timestamp,%{public}.3lf", buf, 0xCu);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                *(_DWORD *)v1828 = 134349056;
                *(_QWORD *)&v1828[4] = v312;
                v314 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "void checkForSpeedIntegrity(NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v314);
                if (v314 != buf)
                  free(v314);
              }
            }
          }
        }
        v318 = *((_QWORD *)&__p + 1);
        if (objc_msgSend_count(v40, (const char *)v250, v251, v252))
        {
          if (v1765)
          {
            objc_msgSend_removeAllObjects(v39, v241, v242, v243);
            objc_msgSend_addObjectsFromArray_(v39, v319, (uint64_t)v40, v320);
          }
          objc_msgSend_removeAllObjects(v40, v241, v242, v243);
        }
        v246 = 0;
        *(_QWORD *)&v1831[8] = *(_QWORD *)v1831;
        *((_QWORD *)&__p + 1) = __p;
      }
      while ((_QWORD)__p != v318);
      v367 = objc_msgSend_count(v39, v241, v242, v243);
      if (v367 && v39)
      {
        objc_msgSend_removeAllObjects(obj, v368, v369, v370);
        objc_msgSend_addObjectsFromArray_(obj, v371, (uint64_t)v39, v372);
      }
      v373 = objc_msgSend_objectAtIndexedSubscript_(a5, v368, 0, v370);
      objc_msgSend_insertObject_atIndex_(obj, v374, v373, 0);
      v378 = objc_msgSend_count(a5, v375, v376, v377);
      v381 = objc_msgSend_objectAtIndexedSubscript_(a5, v379, v378 - 1, v380);
      objc_msgSend_addObject_(obj, v382, v381, v383);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (*(_QWORD *)v1831)
      {
        *(_QWORD *)&v1831[8] = *(_QWORD *)v1831;
        operator delete(*(void **)v1831);
      }
    }
    else
    {
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
      v389 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v389, OS_LOG_TYPE_ERROR, "CLTSP,II,checkForSpeedIntegrity,empty inputLocations", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
        *(_WORD *)v1831 = 0;
        v1739 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "void checkForSpeedIntegrity(NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v1739);
        if (v1739 != buf)
          free(v1739);
      }
    }
    __p = 0u;
    memset(v1824, 0, sizeof(v1824));
    v392 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v384, (uint64_t)&__p, (uint64_t)v1831, 16);
    if (v392)
    {
      v393 = *(_QWORD *)v1824[0];
LABEL_189:
      v394 = 0;
      while (1)
      {
        if (*(_QWORD *)v1824[0] != v393)
          objc_enumerationMutation(obj);
        v395 = *(void **)(*((_QWORD *)&__p + 1) + 8 * v394);
        objc_msgSend_altitudeAccuracy(v395, v387, v390, v391);
        if (v396 > 0.0)
        {
          objc_msgSend_altitudeAccuracy(v395, v387, v390, v391);
          if ((v397 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
            break;
        }
        if (v392 == ++v394)
        {
          v392 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v387, (uint64_t)&__p, (uint64_t)v1831, 16);
          if (v392)
            goto LABEL_189;
          goto LABEL_202;
        }
      }
      objc_msgSend_altitude(v395, v387, v390, v391);
      v1819 = v398;
      objc_msgSend_altitudeAccuracy(v395, v399, v400, v401);
      v1820 = v402;
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
      v403 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
      {
        objc_msgSend_altitude(v395, v404, v405, v406);
        v408 = v407;
        objc_msgSend_altitudeAccuracy(v395, v409, v410, v411);
        v413 = v412;
        v417 = (void *)objc_msgSend_timestamp(v395, v414, v415, v416);
        objc_msgSend_timeIntervalSinceReferenceDate(v417, v418, v419, v420);
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)&buf[4] = v408;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v413;
        *(_WORD *)&buf[22] = 2050;
        *(_QWORD *)&buf[24] = v421;
        _os_log_impl(&dword_18F5B3000, v403, OS_LOG_TYPE_DEBUG, "CLTSP,II,checkForAltitudeIntegrity,quick search,first valid altitude,%{public}.2lf,and altitude accuracy,%{public}.2lf,at time,%{public}.3lf", buf, 0x20u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
        objc_msgSend_altitude(v395, v1721, v1722, v1723);
        v1725 = v1724;
        objc_msgSend_altitudeAccuracy(v395, v1726, v1727, v1728);
        v1730 = v1729;
        v1734 = (void *)objc_msgSend_timestamp(v395, v1731, v1732, v1733);
        objc_msgSend_timeIntervalSinceReferenceDate(v1734, v1735, v1736, v1737);
        *(_DWORD *)v1828 = 134349568;
        *(_QWORD *)&v1828[4] = v1725;
        *(_WORD *)&v1828[12] = 2050;
        *(_QWORD *)&v1828[14] = v1730;
        v1829 = 2050;
        v1830 = v1738;
        v388 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "void lookForValidAltitude(NSArray<CLTripSegmentLocation *> * _Nonnull, CLInertialIntegratorLastEstimatedParameters &)", "CoreLocation: %s\n", v388);
        goto LABEL_968;
      }
    }
  }
  else
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v385 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v385, OS_LOG_TYPE_ERROR, "CLTSP,II,checkForSpeedIntegrity,null outputLocations", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
      *(_WORD *)v1831 = 0;
      v1720 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void checkForSpeedIntegrity(NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v1720);
      if (v1720 != buf)
        free(v1720);
    }
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v386 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v386, OS_LOG_TYPE_ERROR, "CLTSP,II,checkForAltitudeIntegrity,null tripLocations", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
      *(_WORD *)v1828 = 0;
      v388 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void lookForValidAltitude(NSArray<CLTripSegmentLocation *> * _Nonnull, CLInertialIntegratorLastEstimatedParameters &)", "CoreLocation: %s\n", v388);
LABEL_968:
      if (v388 != buf)
        free(v388);
    }
  }
LABEL_202:
  v1806 = 0u;
  v1807 = 0u;
  v1808 = 0u;
  v1809 = 0u;
  v425 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v387, (uint64_t)&v1806, (uint64_t)v1827, 16);
  if (!v425)
    goto LABEL_913;
  v426 = 0;
  v1766 = 0;
  v427 = 0;
  v1768 = *(_QWORD *)v1807;
  v1745 = -1;
  v428 = 0x1E0C99000uLL;
  do
  {
    v429 = 0;
    v1751 = v425;
    do
    {
      if (*(_QWORD *)v1807 != v1768)
        objc_enumerationMutation(obj);
      v430 = *(void **)(*((_QWORD *)&v1806 + 1) + 8 * v429);
      v431 = v1822;
      v432 = ++v1822;
      if (objc_msgSend_count(obj, v422, v423, v424) == v432)
      {
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
        v436 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = v432;
          _os_log_impl(&dword_18F5B3000, v436, OS_LOG_TYPE_DEBUG, "CLTSP,II,reconstructTripSegment,reading the last breadcrumb of the current batch with total count,%{public}d", buf, 8u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E29903B0);
          *(_DWORD *)v1831 = 67240192;
          *(_DWORD *)&v1831[4] = v432;
          v1463 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v1463);
          if (v1463 != buf)
            free(v1463);
        }
        v1766 = 1;
      }
      if (v430)
      {
        v437 = objc_msgSend_locType(v430, v433, v434, v435);
        if (v437 > 0xD || ((1 << v437) & 0x2E1A) == 0)
        {
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E29903B0);
          v642 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
          {
            v646 = objc_msgSend_locType(v430, v643, v644, v645);
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)&buf[4] = v646;
            _os_log_impl(&dword_18F5B3000, v642, OS_LOG_TYPE_DEBUG, "CLTSP,II,reconstructTripSegment,#warning,unsupported location type skipped,%{public}d", buf, 8u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E29903B0);
            v650 = objc_msgSend_locType(v430, v647, v648, v649);
            *(_DWORD *)v1831 = 67240192;
            *(_DWORD *)&v1831[4] = v650;
            v457 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v457);
            goto LABEL_318;
          }
        }
        else
        {
          objc_msgSend_latitude(v430, v438, v439, v440);
          *(_QWORD *)buf = v442;
          objc_msgSend_longitude(v430, v443, v444, v445);
          *(_QWORD *)v1831 = v446;
          if (sub_18F636714((double *)buf, (double *)v1831))
          {
            objc_msgSend_horizontalAccuracy(v430, v447, v448, v449);
            if (v453 <= 0.0)
            {
              v455 = v431 == 0;
            }
            else
            {
              objc_msgSend_horizontalAccuracy(v430, v450, v451, v452);
              v455 = v454 <= 100.0 || v431 == 0;
            }
            v477 = v455;
            if (((v477 | v1766) & 1) != 0 || (objc_msgSend_isGPSLocationType(v430, v450, v451, v452) & 1) != 0)
            {
              objc_msgSend_altitudeAccuracy(v430, v450, v451, v452);
              if (v481 >= 0.0)
              {
                objc_msgSend_altitude(v430, v478, v479, v480);
                v1819 = v507;
                objc_msgSend_altitudeAccuracy(v430, v508, v509, v510);
                v1820 = v511;
              }
              else
              {
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                v482 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                {
                  objc_msgSend_altitude(v430, v483, v484, v485);
                  v487 = v486;
                  objc_msgSend_altitudeAccuracy(v430, v488, v489, v490);
                  v492 = v491;
                  v496 = (void *)objc_msgSend_timestamp(v430, v493, v494, v495);
                  objc_msgSend_timeIntervalSinceReferenceDate(v496, v497, v498, v499);
                  *(_DWORD *)buf = 134350080;
                  *(_QWORD *)&buf[4] = v487;
                  *(_WORD *)&buf[12] = 2050;
                  *(_QWORD *)&buf[14] = v492;
                  *(_WORD *)&buf[22] = 2050;
                  *(_QWORD *)&buf[24] = v500;
                  v1837 = 2050;
                  v1838 = v1819;
                  v1839 = 2050;
                  v1840 = v1820;
                  _os_log_impl(&dword_18F5B3000, v482, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructTripSegment,detected a location with altitude,%{public}.2lf,and unknown altitude accuracy,%{public}.2lf,time,%{public}.3lf,replaced with lastEstimatedAltitude,%{public}.2lf,and lastEstimatedAltitudeAccuracy,%{public}.2lf", buf, 0x34u);
                }
                if (sub_18F5C4AE0(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                  objc_msgSend_altitude(v430, v1558, v1559, v1560);
                  v1562 = v1561;
                  objc_msgSend_altitudeAccuracy(v430, v1563, v1564, v1565);
                  v1567 = v1566;
                  v1571 = (void *)objc_msgSend_timestamp(v430, v1568, v1569, v1570);
                  objc_msgSend_timeIntervalSinceReferenceDate(v1571, v1572, v1573, v1574);
                  v1575 = v1819;
                  v1576 = v1820;
                  *(_DWORD *)v1831 = 134350080;
                  *(_QWORD *)&v1831[4] = v1562;
                  *(_WORD *)&v1831[12] = 2050;
                  *(_QWORD *)&v1831[14] = v1567;
                  *(_WORD *)&v1831[22] = 2050;
                  *(_QWORD *)&v1831[24] = v1577;
                  v1832 = 2050;
                  v1833 = v1819;
                  v1834 = 2050;
                  v1835 = v1820;
                  v1578 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v1578);
                  if (v1578 != buf)
                    free(v1578);
                  objc_msgSend_updateAltitude_andAltitudeAccuracy_(v430, v1579, v1580, v1581, v1575, v1576);
                }
                else
                {
                  objc_msgSend_updateAltitude_andAltitudeAccuracy_(v430, v501, v502, v503, v1819, v1820);
                }
              }
              objc_msgSend_altitude(v430, v504, v505, v506);
              if (fabs(v515) == INFINITY || v515 <= -430.5 || v515 >= 8848.86)
              {
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                v633 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                {
                  objc_msgSend_altitude(v430, v634, v635, v636);
                  *(_DWORD *)buf = 134283521;
                  *(_QWORD *)&buf[4] = v637;
                  _os_log_impl(&dword_18F5B3000, v633, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructTripSegment,location with invalid altitude skipped,alt,%{private}.2lf", buf, 0xCu);
                }
                if (sub_18F5C4AE0(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                  objc_msgSend_altitude(v430, v638, v639, v640);
                  *(_DWORD *)v1831 = 134283521;
                  *(_QWORD *)&v1831[4] = v641;
                  v457 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v457);
                  goto LABEL_318;
                }
              }
              else
              {
                LODWORD(v1814) = v1814 + 1;
                *(_DWORD *)v1831 = objc_msgSend_locType(v430, v512, v513, v514);
                v519 = (void *)objc_msgSend_timestamp(v430, v516, v517, v518);
                objc_msgSend_timeIntervalSinceReferenceDate(v519, v520, v521, v522);
                *(_QWORD *)buf = v523;
                sub_18F62D378((uint64_t)&v1810, v1831, (double *)buf);
                if (!v427)
                {
                  sub_18F5D5990(v1804, "input");
                  sub_18F62E518(a2, (const char *)a3, v430, (uint64_t)v1804);
                  if (v1805 < 0)
                    operator delete(v1804[0]);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                  v678 = qword_1EE172170;
                  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
                  {
                    v682 = (void *)objc_msgSend_timestamp(v430, v679, v680, v681);
                    objc_msgSend_timeIntervalSinceReferenceDate(v682, v683, v684, v685);
                    *(_DWORD *)buf = 134349056;
                    *(_QWORD *)&buf[4] = v686;
                    _os_log_impl(&dword_18F5B3000, v678, OS_LOG_TYPE_INFO, "CLTSP,II,reconstructTripSegment,previous location set,time,%{public}.3lf", buf, 0xCu);
                  }
                  if (sub_18F5C4AE0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172168 != -1)
                      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                    v690 = (void *)objc_msgSend_timestamp(v430, v687, v688, v689);
                    objc_msgSend_timeIntervalSinceReferenceDate(v690, v691, v692, v693);
                    *(_DWORD *)v1831 = 134349056;
                    *(_QWORD *)&v1831[4] = v694;
                    v695 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v695);
                    if (v695 != buf)
                      free(v695);
                  }
                  goto LABEL_800;
                }
                v527 = (void *)objc_msgSend_timestamp(v427, v524, v525, v526);
                objc_msgSend_timeIntervalSinceReferenceDate(v527, v528, v529, v530);
                v532 = v531;
                v536 = (void *)objc_msgSend_timestamp(v430, v533, v534, v535);
                objc_msgSend_timeIntervalSinceReferenceDate(v536, v537, v538, v539);
                v1758 = v540;
                v544 = (void *)objc_msgSend_timestamp(v430, v541, v542, v543);
                v548 = objc_msgSend_timestamp(v427, v545, v546, v547);
                objc_msgSend_timeIntervalSinceDate_(v544, v549, v548, v550);
                if (fabs(v553) <= 0.001)
                {
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                  v696 = qword_1EE172170;
                  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 134349056;
                    *(double *)&buf[4] = v532;
                    _os_log_impl(&dword_18F5B3000, v696, OS_LOG_TYPE_DEBUG, "CLTSP,II,reconstructTripSegment,location with duplicated timestamp skipped,timestamp,%{public}.3lf", buf, 0xCu);
                  }
                  if (sub_18F5C4AE0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172168 != -1)
                      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                    *(_DWORD *)v1831 = 134349056;
                    *(double *)&v1831[4] = v532;
                    v457 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v457);
                    goto LABEL_318;
                  }
                }
                else
                {
                  v1756 = v553;
                  v1748 = v532;
                  objc_msgSend_distanceFromLocation_(v430, v551, (uint64_t)v427, v552);
                  v1754 = v554;
                  objc_msgSend_horizontalAccuracy(v427, v555, v556, v557);
                  v559 = v558;
                  objc_msgSend_horizontalAccuracy(v427, v560, v561, v562);
                  v564 = v563;
                  objc_msgSend_horizontalAccuracy(v430, v565, v566, v567);
                  v569 = v568;
                  objc_msgSend_horizontalAccuracy(v430, v570, v571, v572);
                  v577 = sqrt(v569 * v576 + v559 * v564);
                  *((double *)&v1817 + 1) = v577 / v1756;
                  v578 = 180.0;
                  if (v1754 >= v577 + v577)
                  {
                    v579 = atan(v577 / v1754);
                    v580 = fmod(v579 * 57.2957795, 360.0);
                    v578 = v580 + 360.0;
                    if (v580 >= 0.0)
                      v578 = v580;
                  }
                  *((double *)&v1818 + 1) = v578;
                  if ((objc_msgSend_isLoiLocationType(v427, v573, v574, v575) & 1) != 0
                    || ((objc_msgSend_isLoiLocationType(v430, v581, v582, v583) | v1766) & 1) != 0
                    || ((v587 = objc_msgSend_isGPSLocationType(v430, v584, v585, v586), v1754 / v1756 <= 53.6)
                      ? (v588 = 1)
                      : (v588 = v587),
                        (v588 & 1) != 0))
                  {
                    if (v1821 == 0 || !v426)
                    {
                      v589 = (void **)operator new(0x10uLL);
                      *v589 = v427;
                      v589[1] = v430;
                      memset(buf, 0, 24);
                      sub_18F62D9E0(v589, (unint64_t)(v589 + 2), (void **)buf, v590);
                      v591 = *(double *)(*(_QWORD *)buf + 32);
                      v1746 = *(double *)(*(_QWORD *)buf + 24);
                      v593 = **(double **)buf;
                      v592 = *(double *)(*(_QWORD *)buf + 8);
                      v597 = (void *)objc_msgSend_timestamp(v430, v594, v595, v596);
                      v601 = objc_msgSend_timestamp(v427, v598, v599, v600);
                      objc_msgSend_timeIntervalSinceDate_(v597, v602, v601, v603);
                      v605 = v604;
                      objc_msgSend_horizontalAccuracy(v427, v606, v607, v608);
                      v610 = v609;
                      objc_msgSend_horizontalAccuracy(v427, v611, v612, v613);
                      v615 = v614;
                      objc_msgSend_horizontalAccuracy(v430, v616, v617, v618);
                      v620 = v619;
                      objc_msgSend_horizontalAccuracy(v430, v621, v622, v623);
                      v625 = v624;
                      if (*(_QWORD *)buf)
                      {
                        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
                        operator delete(*(void **)buf);
                      }
                      v626 = v1746 - v593;
                      v627 = v591 - v592;
                      v628 = sqrt(v627 * v627 + v626 * v626);
                      v629 = sqrt(v620 * v625 + v610 * v615);
                      operator delete(v589);
                      *(double *)&v1817 = v628 / v605;
                      v630 = atan2(v627, v626);
                      v631 = fmod(v630 * -57.2957795 + 90.0, 360.0);
                      if (v631 < 0.0)
                        v631 = v631 + 360.0;
                      *(double *)&v1818 = v631;
                      *((double *)&v1817 + 1) = v629 / v605;
                      if (v628 >= v629 + v629)
                      {
                        v697 = atan(v629 / v628);
                        v698 = fmod(v697 * 57.2957795, 360.0);
                        if (v698 >= 0.0)
                          v632 = v698;
                        else
                          v632 = v698 + 360.0;
                      }
                      else
                      {
                        v632 = 180.0;
                      }
                      *((double *)&v1818 + 1) = v632;
                      if (qword_1EE172168 != -1)
                        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                      v699 = qword_1EE172170;
                      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 134349568;
                        *(double *)&buf[4] = v632;
                        *(_WORD *)&buf[12] = 2050;
                        *(double *)&buf[14] = v628;
                        *(_WORD *)&buf[22] = 2050;
                        *(double *)&buf[24] = v629;
                        _os_log_impl(&dword_18F5B3000, v699, OS_LOG_TYPE_DEBUG, "CLTSP,II,UpdateLastEstimatedParameters,lastEstimatedCourseAccuracy,%{public}.2lf,distance,%{public}.2lf,distanceAccuracy,%{public}.2lf", buf, 0x20u);
                      }
                      if (sub_18F5C4AE0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1EE172168 != -1)
                          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                        *(_DWORD *)v1831 = 134349568;
                        *(double *)&v1831[4] = v632;
                        *(_WORD *)&v1831[12] = 2050;
                        *(double *)&v1831[14] = v628;
                        *(_WORD *)&v1831[22] = 2050;
                        *(double *)&v1831[24] = v629;
                        v1592 = (char *)_os_log_send_and_compose_impl();
                        sub_18F5F2740("Generic", 1, 0, 2, "void UpdateLastEstimatedParameters(CLTripSegmentLocation *, CLTripSegmentLocation *, CLInertialIntegratorLastEstimatedParameters &)", "CoreLocation: %s\n", v1592);
                        if (v1592 != buf)
                          free(v1592);
                      }
                    }
                    v700 = v1756;
                    v704 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                    if (v704)
                    {
                      if (objc_msgSend_count(a6, v701, v702, v703) <= (unint64_t)(v1745 + 1))
                      {
                        v708 = v1745;
                      }
                      else
                      {
                        v707 = v1745 + 1;
                        v708 = v1745;
                        do
                        {
                          v709 = (void *)objc_msgSend_objectAtIndexedSubscript_(a6, v705, v707, v706);
                          v713 = (void *)objc_msgSend_timestamp(v709, v710, v711, v712);
                          objc_msgSend_timeIntervalSinceReferenceDate(v713, v714, v715, v716);
                          if (v720 > v1758)
                            break;
                          if (v720 >= v1748)
                          {
                            if (v708 > v1745)
                            {
                              v721 = (void *)objc_msgSend_objectAtIndexedSubscript_(a6, v717, v708, v719);
                              v725 = (void *)objc_msgSend_timestamp(v721, v722, v723, v724);
                              objc_msgSend_timeIntervalSinceReferenceDate(v725, v726, v727, v728);
                              v730 = v729;
                              v733 = (void *)objc_msgSend_objectAtIndexedSubscript_(a6, v731, v707, v732);
                              v737 = (void *)objc_msgSend_timestamp(v733, v734, v735, v736);
                              objc_msgSend_timeIntervalSinceReferenceDate(v737, v738, v739, v740);
                              v742 = v741;
                              v743 = v741 - v730;
                              if (v741 - v730 >= 2.0)
                              {
                                LODWORD(v1815) = v1815 + 1;
                                *((double *)&v1811 + 1) = v743 + *((double *)&v1811 + 1);
                                if (qword_1EE172168 != -1)
                                  dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                                v744 = qword_1EE172170;
                                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
                                {
                                  *(_DWORD *)buf = 134349312;
                                  *(double *)&buf[4] = v730;
                                  *(_WORD *)&buf[12] = 2050;
                                  *(double *)&buf[14] = v742;
                                  _os_log_impl(&dword_18F5B3000, v744, OS_LOG_TYPE_INFO, "CLTSP,II,inertialData,detected a gap in data,startTime,%{public}.3lf,endTime,%{public}.3lf", buf, 0x16u);
                                }
                                if (sub_18F5C4AE0(115, 2))
                                {
                                  bzero(buf, 0x65CuLL);
                                  if (qword_1EE172168 != -1)
                                    dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                                  *(_DWORD *)v1831 = 134349312;
                                  *(double *)&v1831[4] = v730;
                                  *(_WORD *)&v1831[12] = 2050;
                                  *(double *)&v1831[14] = v742;
                                  v773 = (char *)_os_log_send_and_compose_impl();
                                  sub_18F5F2740("Generic", 1, 0, 2, "void getInertialDataForGivenPeriod(NSArray<CLTripSegmentInertialData *> * _Nonnull, const CFAbsoluteTime &, const CFAbsoluteTime &, NSMutableArray<CLTripSegmentInertialData *> *, int &, CLTripSegmentInertialIntegratorCAStats &)", "CoreLocation: %s\n", v773);
                                  if (v773 != buf)
                                    free(v773);
                                }
                                if (v743 > 1.0)
                                {
                                  v745 = 1.0;
                                  v746 = 2;
                                  do
                                  {
                                    v747 = [CLTripSegmentInertialData alloc];
                                    v751 = objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(*(void **)(v428 + 3432), v748, v749, v750, v730 + v745);
                                    v754 = (id)objc_msgSend_initWithTime_dataPeriodSec_deltaCourseRad_deltaSpeedMps_deltaCourseVarRad2_deltaSpeedVarMps2_deltaCourseSpeedCovarRadMps_(v747, v752, v751, v753, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                                    sub_18F62E118(v754);
                                    objc_msgSend_addObject_(v704, v755, (uint64_t)v754, v756);
                                    v745 = (double)v746++;
                                  }
                                  while (v743 > v745);
                                }
                              }
                            }
                            v757 = (void *)objc_msgSend_objectAtIndexedSubscript_(a6, v717, v707, v719);
                            sub_18F62E118(v757);
                            v760 = (void *)objc_msgSend_objectAtIndexedSubscript_(a6, v758, v707, v759);
                            objc_msgSend_deltaCourseVar_rad2(v760, v761, v762, v763);
                            if (v764 <= 1.0)
                            {
                              v765 = (void *)objc_msgSend_objectAtIndexedSubscript_(a6, v717, v707, v719);
                              objc_msgSend_deltaSpeedVar_mps2(v765, v766, v767, v768);
                              if (v769 <= 2.0)
                              {
                                v770 = objc_msgSend_objectAtIndexedSubscript_(a6, v717, v707, v719);
                                objc_msgSend_addObject_(v704, v771, v770, v772);
                                ++HIDWORD(v1814);
                              }
                            }
                          }
                          v708 = v707++;
                        }
                        while (objc_msgSend_count(a6, v717, v718, v719) > v707);
                      }
                      if (qword_1EE172168 != -1)
                        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                      v779 = qword_1EE172170;
                      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                      {
                        v783 = objc_msgSend_count(v704, v780, v781, v782);
                        *(_DWORD *)buf = 67240704;
                        *(_DWORD *)&buf[4] = v783;
                        *(_WORD *)&buf[8] = 2050;
                        *(double *)&buf[10] = v1748;
                        *(_WORD *)&buf[18] = 2050;
                        *(double *)&buf[20] = v1758;
                        _os_log_impl(&dword_18F5B3000, v779, OS_LOG_TYPE_DEBUG, "CLTSP,II,inertialData,count,%{public}d,startTime,%{public}.3lf,endTime,%{public}.3lf", buf, 0x1Cu);
                      }
                      if (sub_18F5C4AE0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1EE172168 != -1)
                          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                        v1590 = objc_msgSend_count(v704, v1587, v1588, v1589);
                        *(_DWORD *)v1831 = 67240704;
                        *(_DWORD *)&v1831[4] = v1590;
                        *(_WORD *)&v1831[8] = 2050;
                        *(double *)&v1831[10] = v1748;
                        *(_WORD *)&v1831[18] = 2050;
                        *(double *)&v1831[20] = v1758;
                        v1591 = (char *)_os_log_send_and_compose_impl();
                        sub_18F5F2740("Generic", 1, 0, 2, "void getInertialDataForGivenPeriod(NSArray<CLTripSegmentInertialData *> * _Nonnull, const CFAbsoluteTime &, const CFAbsoluteTime &, NSMutableArray<CLTripSegmentInertialData *> *, int &, CLTripSegmentInertialIntegratorCAStats &)", "CoreLocation: %s\n", v1591);
                        if (v1591 != buf)
                          free(v1591);
                      }
                      v1745 = v708;
                    }
                    else
                    {
                      if (qword_1EE172168 != -1)
                        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                      v774 = qword_1EE172170;
                      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl(&dword_18F5B3000, v774, OS_LOG_TYPE_ERROR, "CLTSP,II,getInertialDataForGivenPeriod,detected null inertialDataArray", buf, 2u);
                      }
                      if (sub_18F5C4AE0(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1EE172168 != -1)
                          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                        *(_WORD *)v1831 = 0;
                        v778 = (char *)_os_log_send_and_compose_impl();
                        sub_18F5F2740("Generic", 1, 0, 0, "void getInertialDataForGivenPeriod(NSArray<CLTripSegmentInertialData *> * _Nonnull, const CFAbsoluteTime &, const CFAbsoluteTime &, NSMutableArray<CLTripSegmentInertialData *> *, int &, CLTripSegmentInertialIntegratorCAStats &)", "CoreLocation: %s\n", v778);
                        if (v778 != buf)
                          free(v778);
                      }
                    }
                    if (v1756 <= 1.0 || (unint64_t)objc_msgSend_count(v704, v775, v776, v777) <= 2)
                    {
                      if (qword_1EE172168 != -1)
                        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                      v787 = qword_1EE172170;
                      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
                      {
                        v791 = objc_msgSend_count(v704, v788, v789, v790);
                        *(_DWORD *)buf = 134349568;
                        *(double *)&buf[4] = v1748;
                        *(_WORD *)&buf[12] = 2050;
                        *(double *)&buf[14] = v1758;
                        *(_WORD *)&buf[22] = 1026;
                        *(_DWORD *)&buf[24] = v791;
                        _os_log_impl(&dword_18F5B3000, v787, OS_LOG_TYPE_INFO, "CLTSP,II,reconstructTripSegment,location data skipped due to short interval between breadcrumbs,startTime,%{public}.3lf,endTime,%{public}.3lf,or low inertial data count,%{public}d", buf, 0x1Cu);
                      }
                      if (sub_18F5C4AE0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1EE172168 != -1)
                          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                        v1585 = objc_msgSend_count(v704, v1582, v1583, v1584);
                        *(_DWORD *)v1831 = 134349568;
                        *(double *)&v1831[4] = v1748;
                        *(_WORD *)&v1831[12] = 2050;
                        *(double *)&v1831[14] = v1758;
                        *(_WORD *)&v1831[22] = 1026;
                        *(_DWORD *)&v1831[24] = v1585;
                        v1586 = (char *)_os_log_send_and_compose_impl();
                        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v1586);
                        if (v1586 != buf)
                          free(v1586);
                      }
                      sub_18F62F3DC(a2, (const char *)a3, a7, v427, (uint64_t)&v1817);
                      sub_18F5D5990(v1802, "input");
                      sub_18F62E518(a2, (const char *)a3, v430, (uint64_t)v1802);
                      if (v1803 < 0)
                      {
                        v792 = v1802[0];
                        goto LABEL_377;
                      }
                      goto LABEL_800;
                    }
                    objc_msgSend_speed(v427, v784, v785, v786);
                    v1744 = v427;
                    if (v796 >= 0.0)
                    {
                      objc_msgSend_speed(v427, v793, v794, v795);
                      if (v798 <= 0.2)
                      {
                        objc_msgSend_speed(v430, v793, v797, v795);
                        if (v800 >= 0.0)
                        {
                          objc_msgSend_speed(v430, v793, v799, v795);
                          if (v801 <= 0.2)
                          {
                            if (qword_1EE172168 != -1)
                              dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                            v802 = qword_1EE172170;
                            if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
                            {
                              *(_WORD *)buf = 0;
                              _os_log_impl(&dword_18F5B3000, v802, OS_LOG_TYPE_INFO, "CLTSP,II,reconstructTripSegment,two consecutive breadcrumbs are assumed stationary", buf, 2u);
                            }
                            if (sub_18F5C4AE0(115, 2))
                            {
                              bzero(buf, 0x65CuLL);
                              if (qword_1EE172168 != -1)
                                dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                              *(_WORD *)v1831 = 0;
                              v1604 = (char *)_os_log_send_and_compose_impl();
                              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v1604);
                              if (v1604 != buf)
                                free(v1604);
                              v425 = v1751;
                              v428 = 0x1E0C99000;
                              v700 = v1756;
                            }
                            if (v1754 / v700 <= 0.2)
                            {
                              if (qword_1EE172168 != -1)
                                dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                              v1464 = qword_1EE172170;
                              if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
                              {
                                *(_WORD *)buf = 0;
                                _os_log_impl(&dword_18F5B3000, v1464, OS_LOG_TYPE_INFO, "CLTSP,II,reconstructTripSegment,clamp location points as device location has not changed between the two breadcrumbs", buf, 2u);
                              }
                              if (sub_18F5C4AE0(115, 2))
                              {
                                bzero(buf, 0x65CuLL);
                                if (qword_1EE172168 != -1)
                                  dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                                *(_WORD *)v1831 = 0;
                                v1609 = (char *)_os_log_send_and_compose_impl();
                                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v1609);
                                if (v1609 != buf)
                                  free(v1609);
                                v425 = v1751;
                                v428 = 0x1E0C99000;
                              }
                              if (sub_18F62ECD0(v427, v1465, v1466, v1467))
                              {
                                objc_msgSend_setLocationReconstructionType_(v427, v1468, 1, v1470);
                              }
                              else
                              {
                                sub_18F62F0F8(v427, (uint64_t)&v1817, v1469, v1470);
                                objc_msgSend_setLocationReconstructionType_(v427, v1475, 2, v1476);
                              }
                              objc_msgSend_setStartLocationType_(v427, v1471, 0, v1472);
                              objc_msgSend_setStopLocationType_(v427, v1473, 0, v1474);
                              objc_msgSend_addObject_(a7, v1477, (uint64_t)v427, v1478);
                              sub_18F5D5990(v1800, "reconstructed");
                              sub_18F62E518(a2, (const char *)a3, v427, (uint64_t)v1800);
                              if (v1801 < 0)
                                operator delete(v1800[0]);
                              for (j = 0; objc_msgSend_count(v704, v1479, v1480, v1481) > j; ++j)
                              {
                                v1485 = (void *)objc_msgSend_objectAtIndexedSubscript_(v704, v1483, j, v1484);
                                v1489 = (void *)objc_msgSend_timestamp(v1485, v1486, v1487, v1488);
                                objc_msgSend_timeIntervalSinceReferenceDate(v1489, v1490, v1491, v1492);
                                v1494 = v1493;
                                v1495 = [CLTripSegmentLocation alloc];
                                v1499 = objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(MEMORY[0x1E0C99D68], v1496, v1497, v1498, v1494);
                                objc_msgSend_latitude(v427, v1500, v1501, v1502);
                                v1763 = v1503;
                                objc_msgSend_longitude(v427, v1504, v1505, v1506);
                                v1508 = v1507;
                                objc_msgSend_horizontalAccuracy(v427, v1509, v1510, v1511);
                                v1513 = v1512;
                                objc_msgSend_course(v427, v1514, v1515, v1516);
                                v1518 = v1517;
                                objc_msgSend_courseAccuracy(v427, v1519, v1520, v1521);
                                v1523 = v1522;
                                objc_msgSend_speed(v427, v1524, v1525, v1526);
                                v1528 = v1527;
                                objc_msgSend_speedAccuracy(v427, v1529, v1530, v1531);
                                v1533 = v1532;
                                objc_msgSend_altitude(v427, v1534, v1535, v1536);
                                v1538 = v1537;
                                objc_msgSend_altitudeAccuracy(v427, v1539, v1540, v1541);
                                v1543 = v1542;
                                v1547 = objc_msgSend_locType(v427, v1544, v1545, v1546);
                                v1549 = (id)objc_msgSend_initWithTime_latitude_longitude_horizontalAccuracy_course_courseAccuracy_speed_speedAccuracy_altitude_altitudeAccuracy_locType_(v1495, v1548, v1499, v1547, v1763, v1508, v1513, v1518, v1523, v1528, v1533, v1538, v1543);
                                *(_DWORD *)buf = objc_msgSend_locType(v427, v1550, v1551, v1552);
                                *(_DWORD *)v1831 = objc_msgSend_locType(v430, v1553, v1554, v1555);
                                sub_18F62EF1C(v1549, buf, (unsigned int *)v1831, 2);
                                objc_msgSend_addObject_(a7, v1556, (uint64_t)v1549, v1557);
                                sub_18F5D5990(v1798, "reconstructed");
                                sub_18F62E518(a2, (const char *)a3, v1549, (uint64_t)v1798);
                                v428 = 0x1E0C99000;
                                if (v1799 < 0)
                                  operator delete(v1798[0]);
                              }
                              sub_18F5D5990(v1796, "input");
                              sub_18F62E518(a2, (const char *)a3, v430, (uint64_t)v1796);
                              if (v1797 < 0)
                              {
                                v792 = (void *)v1796[0];
LABEL_377:
                                operator delete(v792);
                              }
LABEL_800:
                              v427 = v430;
                              goto LABEL_801;
                            }
                          }
                        }
                      }
                    }
                    v803 = (void *)objc_msgSend_objectAtIndexedSubscript_(v704, v793, 0, v795);
                    v807 = (void *)objc_msgSend_timestamp(v803, v804, v805, v806);
                    v811 = objc_msgSend_timestamp(v427, v808, v809, v810);
                    objc_msgSend_timeIntervalSinceDate_(v807, v812, v811, v813);
                    v815 = v814;
                    v818 = (void *)objc_msgSend_objectAtIndexedSubscript_(v704, v816, 0, v817);
                    objc_msgSend_dataPeriod_s(v818, v819, v820, v821);
                    v825 = v427;
                    if (v815 > v826)
                    {
                      if (v704)
                      {
                        v827 = (void *)objc_msgSend_objectAtIndexedSubscript_(v704, v822, 0, v824);
                        v831 = (void *)objc_msgSend_timestamp(v827, v828, v829, v830);
                        v835 = objc_msgSend_timestamp(v427, v832, v833, v834);
                        objc_msgSend_timeIntervalSinceDate_(v831, v836, v835, v837);
                        v839 = v838;
                        v842 = (void *)objc_msgSend_objectAtIndexedSubscript_(v704, v840, 0, v841);
                        objc_msgSend_dataPeriod_s(v842, v843, v844, v845);
                        v847 = v846;
                        v851 = (void *)objc_msgSend_timestamp(v427, v848, v849, v850);
                        objc_msgSend_timeIntervalSinceReferenceDate(v851, v852, v853, v854);
                        v856 = v855;
                        objc_msgSend_speed(v427, v857, v858, v859);
                        if ((*(_QWORD *)&v863 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v863 < 0.0)
                        {
                          v865 = *(double *)&v1817;
                        }
                        else
                        {
                          objc_msgSend_speed(v427, v860, v861, v862);
                          v865 = v864;
                        }
                        objc_msgSend_course(v427, v860, v861, v862);
                        if ((*(_QWORD *)&v871 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v871 < 0.0)
                        {
                          v1759 = *(double *)&v1818;
                        }
                        else
                        {
                          objc_msgSend_course(v427, v868, v869, v870);
                          v1759 = v872;
                        }
                        objc_msgSend_speedAccuracy(v427, v868, v869, v870);
                        if ((*(_QWORD *)&v876 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                          || v876 <= 0.0
                          || v876 >= 20.0)
                        {
                          v878 = *((double *)&v1817 + 1);
                        }
                        else
                        {
                          objc_msgSend_speedAccuracy(v427, v873, v874, v875);
                          v878 = v877;
                        }
                        objc_msgSend_courseAccuracy(v427, v873, v874, v875);
                        if ((*(_QWORD *)&v882 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                          || v882 <= 0.0
                          || v882 >= 180.0)
                        {
                          v884 = *((double *)&v1818 + 1);
                        }
                        else
                        {
                          objc_msgSend_courseAccuracy(v427, v879, v880, v881);
                          v884 = v883;
                        }
                        v885 = operator new(0x18uLL);
                        *v885 = 0;
                        v885[1] = 0;
                        v885[2] = 0;
                        v886 = (double *)operator new(0x30uLL);
                        v887 = v839 - v847;
                        v888 = v865;
                        v889 = (v839 - v847) * v865;
                        v890 = __sincos_stret((v1759 + -90.0) * -0.0174532925);
                        v886[3] = v889 * v890.__cosval;
                        v886[4] = v889 * v890.__sinval;
                        v886[5] = 0.0;
                        v886[1] = 0.0;
                        v886[2] = 0.0;
                        *v886 = 0.0;
                        *(_QWORD *)buf = v886;
                        *(_QWORD *)&buf[16] = v886 + 6;
                        operator delete(v885);
                        *(_QWORD *)&buf[8] = v886 + 6;
                        memset(v1831, 0, 24);
                        sub_18F62DCB0((uint64_t *)buf, v427, (void **)v1831, v891);
                        v892 = [CLTripSegmentLocation alloc];
                        v896 = objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(*(void **)(v428 + 3432), v893, v894, v895, v887 + v856);
                        v897 = *(double *)(*(_QWORD *)v1831 + 24);
                        v898 = *(double *)(*(_QWORD *)v1831 + 32);
                        objc_msgSend_horizontalAccuracy(v427, v899, v900, v901);
                        v903 = v902;
                        v904 = *(double *)(*(_QWORD *)v1831 + 40);
                        objc_msgSend_altitudeAccuracy(v427, v905, v906, v907);
                        v909 = v908;
                        v913 = objc_msgSend_locType(v427, v910, v911, v912);
                        v825 = (id)objc_msgSend_initWithTime_latitude_longitude_horizontalAccuracy_course_courseAccuracy_speed_speedAccuracy_altitude_altitudeAccuracy_locType_(v892, v914, v896, v913, v897, v898, v903, v1759, v884, v888, v878, v904, v909);
                        if (*(_QWORD *)v1831)
                        {
                          *(_QWORD *)&v1831[8] = *(_QWORD *)v1831;
                          operator delete(*(void **)v1831);
                        }
                        if (*(_QWORD *)buf)
                          operator delete(*(void **)buf);
                      }
                      else
                      {
                        if (qword_1EE172168 != -1)
                          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                        v867 = qword_1EE172170;
                        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl(&dword_18F5B3000, v867, OS_LOG_TYPE_ERROR, "CLTSP,II,alignP0WithInertialDataArrayStartPoint,detected null inertialDataArray", buf, 2u);
                        }
                        if (sub_18F5C4AE0(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1EE172168 != -1)
                            dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                          *(_WORD *)v1831 = 0;
                          v1596 = (char *)_os_log_send_and_compose_impl();
                          sub_18F5F2740("Generic", 1, 0, 0, "CLTripSegmentLocation *alignP0WithInertialDataArrayStartPoint(NSMutableArray<CLTripSegmentInertialData *> *, CLTripSegmentLocation *, const CLInertialIntegratorLastEstimatedParameters &)", "CoreLocation: %s\n", v1596);
                          if (v1596 != buf)
                            free(v1596);
                          v825 = 0;
                          v428 = 0x1E0C99000;
                        }
                        else
                        {
                          v825 = 0;
                        }
                      }
                    }
                    if (!sub_18F62ECD0(v825, v822, v823, v824))
                      sub_18F62F0F8(v825, (uint64_t)&v1817, v916, v917);
                    v918 = (void *)objc_msgSend_timestamp(v430, v915, v916, v917);
                    Object = (void *)objc_msgSend_lastObject(v704, v919, v920, v921);
                    v926 = objc_msgSend_timestamp(Object, v923, v924, v925);
                    objc_msgSend_timeIntervalSinceDate_(v918, v927, v926, v928);
                    v933 = v430;
                    v1755 = v825;
                    if (fabs(v932) <= 0.001)
                    {
LABEL_460:
                      v1014 = (void *)objc_msgSend_timestamp(v825, v929, v930, v931);
                    }
                    else
                    {
                      if (v704)
                      {
                        v934 = (void *)objc_msgSend_timestamp(v430, v929, v930, v931);
                        v938 = (void *)objc_msgSend_lastObject(v704, v935, v936, v937);
                        v942 = objc_msgSend_timestamp(v938, v939, v940, v941);
                        objc_msgSend_timeIntervalSinceDate_(v934, v943, v942, v944);
                        v946 = v945;
                        v950 = (void *)objc_msgSend_timestamp(v430, v947, v948, v949);
                        objc_msgSend_timeIntervalSinceReferenceDate(v950, v951, v952, v953);
                        v955 = v954;
                        objc_msgSend_speed(v430, v956, v957, v958);
                        if ((*(_QWORD *)&v962 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v962 < 0.0)
                        {
                          v964 = *(double *)&v1817;
                        }
                        else
                        {
                          objc_msgSend_speed(v430, v959, v960, v961);
                          v964 = v963;
                        }
                        objc_msgSend_course(v430, v959, v960, v961);
                        if ((*(_QWORD *)&v969 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v969 < 0.0)
                        {
                          v971 = *(double *)&v1818;
                        }
                        else
                        {
                          objc_msgSend_course(v430, v966, v967, v968);
                          v971 = v970;
                        }
                        objc_msgSend_speedAccuracy(v430, v966, v967, v968);
                        if ((*(_QWORD *)&v975 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                          || v975 <= 0.0
                          || v975 >= 20.0)
                        {
                          v977 = *((double *)&v1817 + 1);
                        }
                        else
                        {
                          objc_msgSend_speedAccuracy(v430, v972, v973, v974);
                          v977 = v976;
                        }
                        objc_msgSend_courseAccuracy(v430, v972, v973, v974);
                        if ((*(_QWORD *)&v981 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                          || v981 <= 0.0
                          || v981 >= 180.0)
                        {
                          v983 = *((double *)&v1818 + 1);
                        }
                        else
                        {
                          objc_msgSend_courseAccuracy(v430, v978, v979, v980);
                          v983 = v982;
                        }
                        v984 = fmod(v971 + 180.0, 360.0);
                        if (v984 >= 0.0)
                          v985 = v984;
                        else
                          v985 = v984 + 360.0;
                        v986 = operator new(0x18uLL);
                        *v986 = 0;
                        v986[1] = 0;
                        v986[2] = 0;
                        v987 = (double *)operator new(0x30uLL);
                        v1760 = v977;
                        v988 = v964;
                        v989 = __sincos_stret((v985 + -90.0) * -0.0174532925);
                        v987[3] = v946 * v964 * v989.__cosval;
                        v987[4] = v946 * v964 * v989.__sinval;
                        v987[5] = 0.0;
                        v987[1] = 0.0;
                        v987[2] = 0.0;
                        *v987 = 0.0;
                        *(_QWORD *)buf = v987;
                        *(_QWORD *)&buf[16] = v987 + 6;
                        operator delete(v986);
                        *(_QWORD *)&buf[8] = v987 + 6;
                        memset(v1831, 0, 24);
                        sub_18F62DCB0((uint64_t *)buf, v430, (void **)v1831, v990);
                        v991 = [CLTripSegmentLocation alloc];
                        v995 = objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(*(void **)(v428 + 3432), v992, v993, v994, v955 - v946);
                        v996 = *(double *)(*(_QWORD *)v1831 + 24);
                        v997 = *(double *)(*(_QWORD *)v1831 + 32);
                        objc_msgSend_horizontalAccuracy(v430, v998, v999, v1000);
                        v1002 = v1001;
                        v1003 = *(double *)(*(_QWORD *)v1831 + 40);
                        objc_msgSend_altitudeAccuracy(v430, v1004, v1005, v1006);
                        v1008 = v1007;
                        v1012 = objc_msgSend_locType(v430, v1009, v1010, v1011);
                        v933 = (id)objc_msgSend_initWithTime_latitude_longitude_horizontalAccuracy_course_courseAccuracy_speed_speedAccuracy_altitude_altitudeAccuracy_locType_(v991, v1013, v995, v1012, v996, v997, v1002, v985, v983, v988, v1760, v1003, v1008);
                        if (*(_QWORD *)v1831)
                        {
                          *(_QWORD *)&v1831[8] = *(_QWORD *)v1831;
                          operator delete(*(void **)v1831);
                        }
                        operator delete(v987);
                        goto LABEL_460;
                      }
                      if (qword_1EE172168 != -1)
                        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                      v965 = qword_1EE172170;
                      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl(&dword_18F5B3000, v965, OS_LOG_TYPE_ERROR, "CLTSP,II,alignP1WithInertialDataArrayEndPoint,detected null inertialDataArray", buf, 2u);
                      }
                      if (!sub_18F5C4AE0(115, 0))
                      {
                        v933 = 0;
                        goto LABEL_460;
                      }
                      bzero(buf, 0x65CuLL);
                      if (qword_1EE172168 != -1)
                        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                      *(_WORD *)v1831 = 0;
                      v1597 = (char *)_os_log_send_and_compose_impl();
                      sub_18F5F2740("Generic", 1, 0, 0, "CLTripSegmentLocation *alignP1WithInertialDataArrayEndPoint(NSMutableArray<CLTripSegmentInertialData *> *, CLTripSegmentLocation *, const CLInertialIntegratorLastEstimatedParameters &)", "CoreLocation: %s\n", v1597);
                      if (v1597 != buf)
                        free(v1597);
                      v933 = 0;
                      v1014 = (void *)objc_msgSend_timestamp(v825, v1598, v1599, v1600);
                    }
                    objc_msgSend_timeIntervalSinceReferenceDate(v1014, v1015, v1016, v1017);
                    v1742 = v1018;
                    v1022 = (void *)objc_msgSend_timestamp(v933, v1019, v1020, v1021);
                    objc_msgSend_timeIntervalSinceReferenceDate(v1022, v1023, v1024, v1025);
                    v1029 = (void *)objc_msgSend_timestamp(v933, v1026, v1027, v1028);
                    v1033 = objc_msgSend_timestamp(v825, v1030, v1031, v1032);
                    objc_msgSend_timeIntervalSinceDate_(v1029, v1034, v1033, v1035);
                    v1749 = v1039;
                    memset(v1831, 0, 24);
                    v1741 = v933;
                    if (v704)
                    {
                      if (objc_msgSend_count(v704, v1036, v1037, v1038))
                      {
                        v1042 = (void *)objc_msgSend_objectAtIndexedSubscript_(v704, v1040, 0, v1041);
                        v1046 = (void *)objc_msgSend_timestamp(v1042, v1043, v1044, v1045);
                        objc_msgSend_timeIntervalSinceReferenceDate(v1046, v1047, v1048, v1049);
                        v1054 = v1053 - v1742;
                        v1055 = *(char **)&v1831[8];
                        if (*(_QWORD *)&v1831[8] >= *(_QWORD *)&v1831[16])
                        {
                          v1059 = *(char **)v1831;
                          v1060 = (uint64_t)(*(_QWORD *)&v1831[8] - *(_QWORD *)v1831) >> 3;
                          v1061 = v1060 + 1;
                          if ((unint64_t)(v1060 + 1) >> 61)
LABEL_982:
                            sub_18F5F7864();
                          v1062 = *(_QWORD *)&v1831[16] - *(_QWORD *)v1831;
                          if ((uint64_t)(*(_QWORD *)&v1831[16] - *(_QWORD *)v1831) >> 2 > v1061)
                            v1061 = v1062 >> 2;
                          if ((unint64_t)v1062 >= 0x7FFFFFFFFFFFFFF8)
                            v1050 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v1050 = v1061;
                          if (v1050)
                          {
                            v1063 = (char *)sub_18F610B1C((uint64_t)&v1831[16], v1050);
                            v1055 = *(char **)&v1831[8];
                            v1059 = *(char **)v1831;
                          }
                          else
                          {
                            v1063 = 0;
                          }
                          v1064 = (double *)&v1063[8 * v1060];
                          *v1064 = v1054;
                          v1056 = v1064 + 1;
                          while (v1055 != v1059)
                          {
                            v1065 = *((_QWORD *)v1055 - 1);
                            v1055 -= 8;
                            *((_QWORD *)v1064-- - 1) = v1065;
                          }
                          *(_QWORD *)v1831 = v1064;
                          *(_QWORD *)&v1831[8] = v1056;
                          *(_QWORD *)&v1831[16] = &v1063[8 * v1050];
                          if (v1059)
                            operator delete(v1059);
                        }
                        else
                        {
                          **(double **)&v1831[8] = v1054;
                          v1056 = (double *)(v1055 + 8);
                        }
                        *(_QWORD *)&v1831[8] = v1056;
                        if ((unint64_t)objc_msgSend_count(v704, (const char *)v1050, v1051, v1052) >= 2)
                        {
                          v1068 = 1;
                          do
                          {
                            v1069 = (void *)objc_msgSend_objectAtIndexedSubscript_(v704, v1066, v1068, v1067);
                            v1073 = (void *)objc_msgSend_timestamp(v1069, v1070, v1071, v1072);
                            v1076 = (void *)objc_msgSend_objectAtIndexedSubscript_(v704, v1074, v1068 - 1, v1075);
                            v1080 = objc_msgSend_timestamp(v1076, v1077, v1078, v1079);
                            objc_msgSend_timeIntervalSinceDate_(v1073, v1081, v1080, v1082);
                            v1087 = v1086;
                            v1088 = *(char **)&v1831[8];
                            if (*(_QWORD *)&v1831[8] >= *(_QWORD *)&v1831[16])
                            {
                              v1090 = *(char **)v1831;
                              v1091 = (uint64_t)(*(_QWORD *)&v1831[8] - *(_QWORD *)v1831) >> 3;
                              v1092 = v1091 + 1;
                              if ((unint64_t)(v1091 + 1) >> 61)
                                goto LABEL_982;
                              v1093 = *(_QWORD *)&v1831[16] - *(_QWORD *)v1831;
                              if ((uint64_t)(*(_QWORD *)&v1831[16] - *(_QWORD *)v1831) >> 2 > v1092)
                                v1092 = v1093 >> 2;
                              if ((unint64_t)v1093 >= 0x7FFFFFFFFFFFFFF8)
                                v1083 = 0x1FFFFFFFFFFFFFFFLL;
                              else
                                v1083 = v1092;
                              if (v1083)
                              {
                                v1094 = (char *)sub_18F610B1C((uint64_t)&v1831[16], v1083);
                                v1088 = *(char **)&v1831[8];
                                v1090 = *(char **)v1831;
                              }
                              else
                              {
                                v1094 = 0;
                              }
                              v1095 = &v1094[8 * v1091];
                              *(_QWORD *)v1095 = v1087;
                              v1089 = v1095 + 8;
                              while (v1088 != v1090)
                              {
                                v1096 = *((_QWORD *)v1088 - 1);
                                v1088 -= 8;
                                *((_QWORD *)v1095 - 1) = v1096;
                                v1095 -= 8;
                              }
                              *(_QWORD *)v1831 = v1095;
                              *(_QWORD *)&v1831[8] = v1089;
                              *(_QWORD *)&v1831[16] = &v1094[8 * v1083];
                              if (v1090)
                                operator delete(v1090);
                            }
                            else
                            {
                              **(_QWORD **)&v1831[8] = v1086;
                              v1089 = v1088 + 8;
                            }
                            *(_QWORD *)&v1831[8] = v1089;
                            ++v1068;
                          }
                          while (objc_msgSend_count(v704, (const char *)v1083, v1084, v1085) > v1068);
                        }
                      }
                    }
                    else
                    {
                      if (qword_1EE172168 != -1)
                        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                      v1057 = qword_1EE172170;
                      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl(&dword_18F5B3000, v1057, OS_LOG_TYPE_ERROR, "CLTSP,II,getInertialDataTimeDiff,detected null inertialDataArray", buf, 2u);
                      }
                      if (sub_18F5C4AE0(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1EE172168 != -1)
                          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                        LOWORD(__p) = 0;
                        v1058 = (char *)_os_log_send_and_compose_impl();
                        sub_18F5F2740("Generic", 1, 0, 0, "void getInertialDataTimeDiff(NSMutableArray<CLTripSegmentInertialData *> *, const CFAbsoluteTime &, std::vector<NSTimeInterval> &)", "CoreLocation: %s\n", v1058);
                        if (v1058 != buf)
                          free(v1058);
                      }
                    }
                    v1097 = operator new(0x10uLL);
                    *v1097 = v825;
                    v1097[1] = v933;
                    __p = 0uLL;
                    v1824[0] = 0;
                    v1743 = v1097;
                    sub_18F62D9E0((void **)v1097, (unint64_t)(v1097 + 2), (void **)&__p, v1098);
                    v1099 = *(double *)__p;
                    v1100 = *(double *)(__p + 8);
                    v1757 = *(double *)(__p + 32);
                    v1761 = *(double *)(__p + 24);
                    objc_msgSend_speed(v825, v1101, v1102, v1103);
                    v1105 = v1104;
                    objc_msgSend_course(v825, v1106, v1107, v1108);
                    v1110 = v1109;
                    v1747 = atan2(v1757 - v1100, v1761 - v1099);
                    v1114 = (int)(objc_msgSend_count(v704, v1111, v1112, v1113) + 1);
                    sub_18F6367D8(v1828, v1114);
                    sub_18F6367D8(v1795, v1114);
                    sub_18F63688C(&v1793, v1114);
                    sub_18F63688C(&v1791, v1114);
                    v1789 = 0;
                    v1788 = 0;
                    v1790 = 0;
                    if (v704)
                    {
                      if (objc_msgSend_count(v704, v1115, v1116, v1117))
                        **(_QWORD **)v1828 = 0;
                      if (objc_msgSend_count(v704, v1118, v1119, v1120))
                      {
                        v1124 = 0;
                        v1125 = 0.0;
                        do
                        {
                          v1126 = (void *)objc_msgSend_objectAtIndexedSubscript_(v704, v1121, v1124, v1123);
                          objc_msgSend_deltaCourse_rad(v1126, v1127, v1128, v1129);
                          v1125 = v1125 - v1130 * *(double *)(*(_QWORD *)v1831 + 8 * v1124);
                          *(double *)(*(_QWORD *)v1828 + 8 * v1124++ + 8) = v1125;
                        }
                        while (objc_msgSend_count(v704, v1131, v1132, v1133) > v1124);
                      }
                    }
                    else
                    {
                      if (qword_1EE172168 != -1)
                        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                      v1134 = qword_1EE172170;
                      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl(&dword_18F5B3000, v1134, OS_LOG_TYPE_ERROR, "CLTSP,II,accumulateDeltaPhaseAngles,detected null inertialDataArray", buf, 2u);
                      }
                      if (sub_18F5C4AE0(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1EE172168 != -1)
                          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                        LOWORD(v1826) = 0;
                        v1595 = (char *)_os_log_send_and_compose_impl();
                        sub_18F5F2740("Generic", 1, 0, 0, "void accumulateDeltaPhaseAngles(NSMutableArray<CLTripSegmentInertialData *> *, const std::vector<NSTimeInterval> &, std::vector<double> &)", "CoreLocation: %s\n", v1595);
                        if (v1595 != buf)
                          free(v1595);
                      }
                    }
                    v1135 = 0;
                    v1136 = 0;
                    v1137 = (v1110 + -90.0) * -0.0174532925;
                    v1138 = 0.0;
                    while (1)
                    {
                      if (v704)
                      {
                        if (*(_QWORD *)v1831 == *(_QWORD *)&v1831[8])
                        {
                          v1142 = 0.0;
                        }
                        else
                        {
                          v1139 = 0.0;
                          v1140 = *(double **)v1831;
                          do
                          {
                            v1141 = *v1140++;
                            v1139 = v1139 + v1141;
                          }
                          while (v1140 != *(double **)&v1831[8]);
                          v1142 = v1139
                                / (double)(unint64_t)((uint64_t)(*(_QWORD *)&v1831[8] - *(_QWORD *)v1831) >> 3);
                        }
                        v1145 = objc_msgSend_count(v704, v1121, v1122, v1123);
                        v1149 = objc_msgSend_count(v704, v1146, v1147, v1148);
                        v1153 = objc_msgSend_count(v704, v1150, v1151, v1152);
                        if (objc_msgSend_count(v704, v1154, v1155, v1156))
                          *(_QWORD *)v1795[0] = 0;
                        if (objc_msgSend_count(v704, v1157, v1158, v1159))
                        {
                          v1162 = 0;
                          v1163 = 0.0;
                          do
                          {
                            v1164 = (void *)objc_msgSend_objectAtIndexedSubscript_(v704, v1160, v1162, v1161);
                            objc_msgSend_deltaSpeed_mps(v1164, v1165, v1166, v1167);
                            v1163 = v1163 + v1168 * *(double *)(*(_QWORD *)v1831 + 8 * v1162);
                            *((double *)v1795[0] + v1162 + 1) = v1163
                                                              + v1105 * v1142
                                                              + -v1138
                                                              / ((double)((unint64_t)(v1145 + v1145 * v1149) >> 1)
                                                               / (double)(unint64_t)v1153)
                                                              * (double)((int)v1162 + 1)
                                                              * v1142;
                            ++v1162;
                          }
                          while (objc_msgSend_count(v704, v1169, v1170, v1171) > v1162);
                        }
                      }
                      else
                      {
                        if (qword_1EE172168 != -1)
                          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                        v1143 = qword_1EE172170;
                        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl(&dword_18F5B3000, v1143, OS_LOG_TYPE_ERROR, "CLTSP,II,accumulateDeltaDistance,detected null inertialDataArray", buf, 2u);
                        }
                        if (sub_18F5C4AE0(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1EE172168 != -1)
                            dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                          LOWORD(v1826) = 0;
                          v1144 = (char *)_os_log_send_and_compose_impl();
                          sub_18F5F2740("Generic", 1, 0, 0, "void accumulateDeltaDistance(const double &, NSMutableArray<CLTripSegmentInertialData *> *, const std::vector<NSTimeInterval> &, const double &, std::vector<double> &)", "CoreLocation: %s\n", v1144);
                          if (v1144 != buf)
                            free(v1144);
                        }
                      }
                      v1172 = *(double **)v1828;
                      v1173 = (float64x2_t *)v1793;
                      if (*(_QWORD *)&v1828[8] != *(_QWORD *)v1828)
                      {
                        v1174 = (double *)v1795[0];
                        if ((unint64_t)((uint64_t)(*(_QWORD *)&v1828[8] - *(_QWORD *)v1828) >> 3) <= 1)
                          v1175 = 1;
                        else
                          v1175 = (uint64_t)(*(_QWORD *)&v1828[8] - *(_QWORD *)v1828) >> 3;
                        v1176 = (double *)((char *)v1793 + 8);
                        do
                        {
                          v1177 = *v1172++;
                          sub_18F62EC08(v1177 * 0.0, v1177);
                          v1178 = *v1174++;
                          *(v1176 - 1) = v1179 * v1178;
                          *v1176 = v1180 * v1178;
                          v1176 += 2;
                          --v1175;
                        }
                        while (v1175);
                      }
                      v425 = v1751;
                      if (v1794 != v1173)
                      {
                        v1181 = (char *)v1791;
                        if ((unint64_t)(v1794 - v1173) <= 1)
                          v1182 = 1;
                        else
                          v1182 = v1794 - v1173;
                        sub_18F62EC08(v1137 * 0.0, v1137);
                        v1185 = (double *)(v1181 + 8);
                        v1186 = 0uLL;
                        do
                        {
                          v1186 = vaddq_f64(v1186, *v1173);
                          *(v1185 - 1) = v1183 * v1186.f64[0] - vmuld_lane_f64(v1184, v1186, 1);
                          *v1185 = vmuld_lane_f64(v1183, v1186, 1) + v1184 * v1186.f64[0];
                          v1185 += 2;
                          ++v1173;
                          --v1182;
                        }
                        while (v1182);
                      }
                      v1187 = *(v1792 - 2);
                      v1188 = *(v1792 - 1);
                      v1189 = atan2(v1188, v1187);
                      v1190 = hypot(v1761 - v1187, v1757 - v1188);
                      v1191 = v1190;
                      v1192 = v1789;
                      if (v1789 >= v1790)
                      {
                        v1194 = (double *)v1788;
                        v1195 = ((char *)v1789 - (_BYTE *)v1788) >> 3;
                        v1196 = v1195 + 1;
                        if ((unint64_t)(v1195 + 1) >> 61)
                          sub_18F5F7864();
                        v1197 = (char *)v1790 - (_BYTE *)v1788;
                        if (((char *)v1790 - (_BYTE *)v1788) >> 2 > v1196)
                          v1196 = v1197 >> 2;
                        if ((unint64_t)v1197 >= 0x7FFFFFFFFFFFFFF8)
                          v1198 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v1198 = v1196;
                        if (v1198)
                        {
                          v1199 = (char *)sub_18F610B1C((uint64_t)&v1790, v1198);
                          v1192 = v1789;
                          v1194 = (double *)v1788;
                        }
                        else
                        {
                          v1199 = 0;
                        }
                        v1200 = (double *)&v1199[8 * v1195];
                        *v1200 = v1191;
                        v1193 = v1200 + 1;
                        while (v1192 != v1194)
                        {
                          v1201 = *((_QWORD *)v1192-- - 1);
                          *((_QWORD *)v1200-- - 1) = v1201;
                        }
                        v1788 = v1200;
                        v1789 = v1193;
                        v1790 = (double *)&v1199[8 * v1198];
                        if (v1194)
                          operator delete(v1194);
                      }
                      else
                      {
                        *v1789 = v1190;
                        v1193 = v1192 + 1;
                      }
                      v1789 = v1193;
                      if (v1191 < 2.0)
                        break;
                      v1202 = v1191 / v1749;
                      v1203 = hypot(v1761, v1757);
                      if (v1203 <= hypot(v1187, v1188))
                        v1204 = v1202;
                      else
                        v1204 = -v1202;
                      v1138 = v1138 + v1204;
                      v1137 = v1137 + (v1747 - v1189) * 0.75;
                      v1135 = v1136++ > 0x63;
                      if (v1136 == 101)
                      {
                        v1135 = 1;
                        goto LABEL_583;
                      }
                    }
                    if (qword_1EE172168 != -1)
                      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                    v1205 = qword_1EE172170;
                    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 134349056;
                      *(double *)&buf[4] = v1191;
                      _os_log_impl(&dword_18F5B3000, v1205, OS_LOG_TYPE_DEBUG, "CLTSP,II,reconstructTripSegment,distance error,%{public}.2lf", buf, 0xCu);
                    }
                    if (sub_18F5C4AE0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1EE172168 != -1)
                        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                      LODWORD(v1826) = 134349056;
                      *(double *)((char *)&v1826 + 4) = v1191;
                      v1206 = (char *)_os_log_send_and_compose_impl();
                      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v1206);
                      if (v1206 != buf)
                        free(v1206);
                    }
LABEL_583:
                    ++HIDWORD(v1815);
                    if (v1135 || v1105 < 0.0 || v1105 > 53.6)
                    {
                      v1242 = v1788;
                      if (v1788 == v1789)
                      {
                        v1244 = v1788;
                        v428 = 0x1E0C99000;
                        v1245 = v1744;
                      }
                      else
                      {
                        v1243 = (double *)((char *)v1788 + 8);
                        v1244 = v1788;
                        v428 = 0x1E0C99000;
                        v1245 = v1744;
                        if ((char *)v1788 + 8 != (char *)v1789)
                        {
                          v1246 = *(double *)v1788;
                          v1244 = v1788;
                          v1247 = (double *)((char *)v1788 + 8);
                          do
                          {
                            v1248 = *v1247++;
                            v1249 = v1248;
                            if (v1248 < v1246)
                            {
                              v1246 = v1249;
                              v1244 = v1243;
                            }
                            v1243 = v1247;
                          }
                          while (v1247 != v1789);
                        }
                      }
                      if (qword_1EE172168 != -1)
                        dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                      v1321 = v1244 - v1242;
                      v1322 = qword_1EE172170;
                      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                      {
                        v1323 = *(_QWORD *)((char *)v1788 + (v1321 << 29 >> 29));
                        *(_DWORD *)buf = 134349056;
                        *(_QWORD *)&buf[4] = v1323;
                        _os_log_impl(&dword_18F5B3000, v1322, OS_LOG_TYPE_DEBUG, "CLTSP,II,reconstructTripSegment,could not find the minimum distance within accepted range,distance calculated,%{public}.2lf", buf, 0xCu);
                      }
                      if (sub_18F5C4AE0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1EE172168 != -1)
                          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                        v1593 = *(_QWORD *)((char *)v1788 + (v1321 << 29 >> 29));
                        LODWORD(v1826) = 134349056;
                        *(_QWORD *)((char *)&v1826 + 4) = v1593;
                        v1594 = (char *)_os_log_send_and_compose_impl();
                        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v1594);
                        if (v1594 != buf)
                          free(v1594);
                      }
                      sub_18F62F3DC(a2, (const char *)a3, a7, v1245, (uint64_t)&v1817);
                      sub_18F5D5990(v1786, "input");
                      sub_18F62E518(a2, (const char *)a3, v430, (uint64_t)v1786);
                      if (v1787 < 0)
                        operator delete(v1786[0]);
                      v1324 = 0;
                    }
                    else
                    {
                      v1210 = fmod(v1137 * -57.2957795 + 90.0, 360.0);
                      if (v1210 >= 0.0)
                        v1211 = v1210;
                      else
                        v1211 = v1210 + 360.0;
                      ++v1816;
                      v1212 = objc_msgSend_count(v704, v1207, v1208, v1209);
                      sub_18F6367D8(&v1826, v1212);
                      if (v704)
                      {
                        v428 = 0x1E0C99000;
                        v1216 = objc_msgSend_count(v704, v1213, v1214, v1215);
                        v1220 = objc_msgSend_count(v704, v1217, v1218, v1219);
                        v1224 = objc_msgSend_count(v704, v1221, v1222, v1223);
                        if (objc_msgSend_count(v704, v1225, v1226, v1227))
                        {
                          v1231 = 0;
                          v1232 = -v1138
                                / ((double)((unint64_t)(v1216 + v1216 * v1220) >> 1)
                                 / (double)(unint64_t)v1224);
                          v1233 = 0.0;
                          do
                          {
                            v1234 = (void *)objc_msgSend_objectAtIndexedSubscript_(v704, v1228, v1231, v1230);
                            objc_msgSend_deltaSpeed_mps(v1234, v1235, v1236, v1237);
                            v1233 = v1233 + v1238;
                            *(double *)(v1826 + 8 * v1231) = v1105 + v1233 + v1232 * (double)((int)v1231 + 1);
                            ++v1231;
                          }
                          while (objc_msgSend_count(v704, v1239, v1240, v1241) > v1231);
                        }
                      }
                      else
                      {
                        if (qword_1EE172168 != -1)
                          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                        v428 = 0x1E0C99000uLL;
                        v1250 = qword_1EE172170;
                        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl(&dword_18F5B3000, v1250, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructSpeed,detected null inertialDataArray", buf, 2u);
                        }
                        if (sub_18F5C4AE0(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1EE172168 != -1)
                            dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                          LOWORD(v1785[0]) = 0;
                          v1601 = (char *)_os_log_send_and_compose_impl();
                          sub_18F5F2740("Generic", 1, 0, 0, "void reconstructSpeed(const double &, NSMutableArray<CLTripSegmentInertialData *> *, const std::vector<NSTimeInterval> &, const double &, std::vector<double> &)", "CoreLocation: %s\n", v1601);
                          if (v1601 != buf)
                            free(v1601);
                          v425 = v1751;
                        }
                      }
                      v1251 = objc_msgSend_count(v704, v1228, v1229, v1230);
                      sub_18F6367D8(v1785, v1251);
                      objc_msgSend_speedAccuracy(v1755, v1252, v1253, v1254);
                      if ((*(_QWORD *)&v1258 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                        || v1258 <= 0.0
                        || v1258 >= 20.0)
                      {
                        v1260 = *((double *)&v1817 + 1);
                        if (v704)
                          goto LABEL_621;
LABEL_610:
                        if (qword_1EE172168 != -1)
                          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                        v1261 = qword_1EE172170;
                        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl(&dword_18F5B3000, v1261, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructSpeedAccuracy,detected null inertialDataArray", buf, 2u);
                        }
                        if (sub_18F5C4AE0(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1EE172168 != -1)
                            dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                          LOWORD(v1783) = 0;
                          v1265 = (char *)_os_log_send_and_compose_impl();
                          sub_18F5F2740("Generic", 1, 0, 0, "void reconstructSpeedAccuracy(NSMutableArray<CLTripSegmentInertialData *> *, const double &, std::vector<double> &)", "CoreLocation: %s\n", v1265);
                          if (v1265 != buf)
                            free(v1265);
                          v425 = v1751;
                          v428 = 0x1E0C99000;
                        }
                      }
                      else
                      {
                        objc_msgSend_speedAccuracy(v1755, v1255, v1256, v1257);
                        v1260 = v1259;
                        if (!v704)
                          goto LABEL_610;
LABEL_621:
                        if (objc_msgSend_count(v704, v1255, v1256, v1257))
                        {
                          v1266 = 0;
                          do
                          {
                            v1267 = (void *)objc_msgSend_objectAtIndexedSubscript_(v704, v1262, v1266, v1264);
                            objc_msgSend_deltaSpeedVar_mps2(v1267, v1268, v1269, v1270);
                            v1272 = sqrt(v1271);
                            v1260 = sqrt(v1272 * v1272 + v1260 * v1260);
                            *((double *)v1785[0] + v1266++) = v1260;
                          }
                          while (objc_msgSend_count(v704, v1273, v1274, v1275) > v1266);
                        }
                      }
                      v1276 = objc_msgSend_count(v704, v1262, v1263, v1264);
                      sub_18F6367D8(&v1783, v1276);
                      if (!sub_18F62ECD0(v1744, v1277, v1278, v1279))
                        sub_18F62F0F8(v1744, (uint64_t)&v1817, v1281, v1282);
                      if (*((_QWORD *)&v1826 + 1) == (_QWORD)v1826)
                      {
                        if (qword_1EE172168 != -1)
                          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                        v1293 = qword_1EE172170;
                        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl(&dword_18F5B3000, v1293, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructAcceleration,speedVector is empty", buf, 2u);
                        }
                        if (sub_18F5C4AE0(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1EE172168 != -1)
                            dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                          LOWORD(v1825) = 0;
                          v1602 = (char *)_os_log_send_and_compose_impl();
                          sub_18F5F2740("Generic", 1, 0, 0, "void reconstructAcceleration(CLTripSegmentLocation *, const std::vector<double> &, std::vector<double> &)", "CoreLocation: %s\n", v1602);
                          if (v1602 != buf)
                            free(v1602);
                          v425 = v1751;
                          v428 = 0x1E0C99000;
                        }
                      }
                      else
                      {
                        v1283 = *(double *)v1826;
                        objc_msgSend_speed(v1744, v1280, v1281, v1282);
                        v1288 = (char *)v1783;
                        *(double *)v1783 = vabdd_f64(v1283, v1287);
                        if (*((_QWORD *)&v1826 + 1) - (_QWORD)v1826 >= 9uLL)
                        {
                          v1289 = (uint64_t)(*((_QWORD *)&v1826 + 1) - v1826) >> 3;
                          if (v1289 <= 2)
                            v1289 = 2;
                          v1290 = v1289 - 1;
                          v1291 = (double *)(v1288 + 8);
                          v1292 = (double *)(v1826 + 8);
                          do
                          {
                            *v1291++ = vabdd_f64(*v1292, *(v1292 - 1));
                            ++v1292;
                            --v1290;
                          }
                          while (v1290);
                        }
                      }
                      v1294 = (double *)v1826;
                      v1295 = (double *)(v1826 + 8);
                      v1296 = *(double *)v1826;
                      if ((_QWORD)v1826 == *((_QWORD *)&v1826 + 1) || v1295 == *((double **)&v1826 + 1))
                      {
                        if (v1296 < 0.0)
                          goto LABEL_649;
                      }
                      else
                      {
                        v1298 = *(double *)v1826;
                        v1299 = (double *)(v1826 + 8);
                        v1300 = (double *)v1826;
                        v1301 = (double *)(v1826 + 8);
                        do
                        {
                          v1302 = *v1301++;
                          v1303 = v1302;
                          if (v1302 < v1298)
                          {
                            v1298 = v1303;
                            v1300 = v1299;
                          }
                          v1299 = v1301;
                        }
                        while (v1301 != *((double **)&v1826 + 1));
                        if (*v1300 < 0.0)
                        {
LABEL_649:
                          v1304 = 1;
                          goto LABEL_655;
                        }
                        do
                        {
                          v1305 = v1295 + 1;
                          if (v1296 < *v1295)
                          {
                            v1296 = *v1295;
                            v1294 = v1295;
                          }
                          ++v1295;
                        }
                        while (v1305 != *((double **)&v1826 + 1));
                        v1296 = *v1294;
                      }
                      v1304 = v1296 >= 53.6;
LABEL_655:
                      v1306 = (double *)v1783;
                      v1307 = (double *)((char *)v1783 + 8);
                      if (v1783 != v1784 && v1307 != (double *)v1784)
                      {
                        v1309 = *(double *)v1783;
                        v1310 = (double *)((char *)v1783 + 8);
                        do
                        {
                          v1311 = *v1310++;
                          v1312 = v1311;
                          if (v1309 < v1311)
                          {
                            v1309 = v1312;
                            v1306 = v1307;
                          }
                          v1307 = v1310;
                        }
                        while (v1310 != (double *)v1784);
                      }
                      v1313 = *v1306;
                      v1314 = *v1306 >= 6.0;
                      objc_msgSend_speed(v1755, v1284, v1285, v1286);
                      if (v1318 >= 0.0)
                      {
                        objc_msgSend_speed(v1741, v1315, v1316, v1317);
                        if (v1319 >= 0.0)
                        {
                          objc_msgSend_speed(v1755, v1315, v1316, v1317);
                          if (vabdd_f64(v1325, *(double *)v1826) >= 6.0
                            || (objc_msgSend_speed(v1741, v1315, v1316, v1317),
                                vabdd_f64(v1326, *(double *)(*((_QWORD *)&v1826 + 1) - 8)) >= 6.0))
                          {
                            v1314 = 1;
                            goto LABEL_682;
                          }
                        }
                      }
                      v1320 = v1313 >= 6.0 || v1304;
                      if (v1320 == 1)
                      {
LABEL_682:
                        if ((objc_msgSend_isLoiLocationType(v1744, v1315, v1316, v1317) & 1) != 0
                          || (objc_msgSend_isLoiLocationType(v430, v1315, v1316, v1317) & 1) != 0)
                        {
                          goto LABEL_684;
                        }
                        if (v1304)
                        {
                          if (qword_1EE172168 != -1)
                            dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                          v1459 = qword_1EE172170;
                          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)buf = 134349056;
                            *(double *)&buf[4] = v1742;
                            _os_log_impl(&dword_18F5B3000, v1459, OS_LOG_TYPE_DEBUG, "CLTSP,II,reconstructTripSegment,detected invalid speed,skip breadcrumb at time,%{public}.3lf", buf, 0xCu);
                          }
                          if (sub_18F5C4AE0(115, 2))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_1EE172168 != -1)
                              dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                            LODWORD(v1825) = 134349056;
                            *(double *)((char *)&v1825 + 4) = v1742;
                            v1605 = (char *)_os_log_send_and_compose_impl();
                            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v1605);
                            if (v1605 != buf)
                              free(v1605);
                            v425 = v1751;
                            v428 = 0x1E0C99000;
                          }
                        }
                        v1460 = (uint64_t)v1744;
                        if (!v1314)
                          goto LABEL_815;
                        if (qword_1EE172168 != -1)
                          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                        v1461 = qword_1EE172170;
                        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 134349056;
                          *(double *)&buf[4] = v1742;
                          _os_log_impl(&dword_18F5B3000, v1461, OS_LOG_TYPE_DEBUG, "CLTSP,II,reconstructTripSegment,detected invalid acceleration,skip breadcrumb at time,%{public}.3lf", buf, 0xCu);
                        }
                        v1462 = sub_18F5C4AE0(115, 2);
                        v1460 = (uint64_t)v1744;
                        if (v1462)
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1EE172168 != -1)
                            dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                          LODWORD(v1825) = 134349056;
                          *(double *)((char *)&v1825 + 4) = v1742;
                          v1606 = (char *)_os_log_send_and_compose_impl();
                          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v1606);
                          if (v1606 != buf)
                            free(v1606);
                          v425 = v1751;
                          v428 = 0x1E0C99000;
                          objc_msgSend_addObject_(a7, v1607, (uint64_t)v1744, v1608);
                        }
                        else
                        {
LABEL_815:
                          objc_msgSend_addObject_(a7, v1315, v1460, v1317);
                        }
                        sub_18F5D5990(v1781, "reconstructed");
                        sub_18F62E518(a2, (const char *)a3, v1744, (uint64_t)v1781);
                        if (v1782 < 0)
                          operator delete(v1781[0]);
                        sub_18F5D5990(v1779, "input");
                        sub_18F62E518(a2, (const char *)a3, v430, (uint64_t)v1779);
                        if (v1780 < 0)
                          operator delete(v1779[0]);
                        v1324 = 0;
                      }
                      else
                      {
LABEL_684:
                        v1327 = objc_msgSend_count(v704, v1315, v1316, v1317);
                        sub_18F6367D8(&v1825, v1327);
                        if (v704)
                        {
                          if (objc_msgSend_count(v704, v1328, v1329, v1330))
                          {
                            v1334 = 0;
                            v1335 = 0.0;
                            do
                            {
                              v1336 = (void *)objc_msgSend_objectAtIndexedSubscript_(v704, v1331, v1334, v1333);
                              objc_msgSend_deltaCourse_rad(v1336, v1337, v1338, v1339);
                              v1335 = v1335 + v1340 * 57.2957795 * *(double *)(*(_QWORD *)v1831 + 8 * v1334);
                              v1344 = fmod(v1211 + v1335, 360.0);
                              if (v1344 < 0.0)
                                v1344 = v1344 + 360.0;
                              *(double *)(v1825 + 8 * v1334++) = v1344;
                            }
                            while (objc_msgSend_count(v704, v1341, v1342, v1343) > v1334);
                          }
                        }
                        else
                        {
                          if (qword_1EE172168 != -1)
                            dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                          v1345 = qword_1EE172170;
                          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                          {
                            *(_WORD *)buf = 0;
                            _os_log_impl(&dword_18F5B3000, v1345, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructCourse,detected null inertialDataArray", buf, 2u);
                          }
                          if (sub_18F5C4AE0(115, 0))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_1EE172168 != -1)
                              dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                            LOWORD(v1778[0]) = 0;
                            v1603 = (char *)_os_log_send_and_compose_impl();
                            sub_18F5F2740("Generic", 1, 0, 0, "void reconstructCourse(NSMutableArray<CLTripSegmentInertialData *> *, const std::vector<NSTimeInterval> &, const double &, std::vector<double> &)", "CoreLocation: %s\n", v1603);
                            if (v1603 != buf)
                              free(v1603);
                            v425 = v1751;
                            v428 = 0x1E0C99000;
                          }
                        }
                        v1346 = objc_msgSend_count(v704, v1331, v1332, v1333);
                        sub_18F6367D8(v1778, v1346);
                        objc_msgSend_courseAccuracy(v1755, v1347, v1348, v1349);
                        if ((*(_QWORD *)&v1353 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                          || v1353 <= 0.0
                          || v1353 >= 180.0)
                        {
                          v1355 = *((double *)&v1818 + 1);
                          if (v704)
                            goto LABEL_711;
LABEL_700:
                          if (qword_1EE172168 != -1)
                            dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                          v1356 = qword_1EE172170;
                          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                          {
                            *(_WORD *)buf = 0;
                            _os_log_impl(&dword_18F5B3000, v1356, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructCourseAccuracy,detected null inertialDataArray", buf, 2u);
                          }
                          if (sub_18F5C4AE0(115, 0))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_1EE172168 != -1)
                              dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                            LOWORD(v1775) = 0;
                            v1358 = (char *)_os_log_send_and_compose_impl();
                            sub_18F5F2740("Generic", 1, 0, 0, "void reconstructCourseAccuracy(NSMutableArray<CLTripSegmentInertialData *> *, const double &, std::vector<double> &)", "CoreLocation: %s\n", v1358);
                            if (v1358 != buf)
                              free(v1358);
                            v425 = v1751;
                            v428 = 0x1E0C99000;
                          }
                        }
                        else
                        {
                          objc_msgSend_courseAccuracy(v1755, v1350, v1351, v1352);
                          v1355 = v1354;
                          if (!v704)
                            goto LABEL_700;
LABEL_711:
                          if (objc_msgSend_count(v704, v1350, v1351, v1352))
                          {
                            v1360 = 0;
                            do
                            {
                              v1361 = (void *)objc_msgSend_objectAtIndexedSubscript_(v704, v1359, v1360, v1357);
                              objc_msgSend_deltaCourseVar_rad2(v1361, v1362, v1363, v1364);
                              v1366 = sqrt(v1365);
                              v1355 = sqrt(v1366 * 57.2957795 * (v1366 * 57.2957795) + v1355 * v1355);
                              *((double *)v1778[0] + v1360++) = v1355;
                            }
                            while (objc_msgSend_count(v704, v1367, v1368, v1369) > v1360);
                          }
                        }
                        memset(buf, 0, 24);
                        v1370 = v1826;
                        if (*((_QWORD *)&v1826 + 1) != (_QWORD)v1826)
                        {
                          v1371 = 0;
                          v1372 = 0;
                          v1373 = 0.0;
                          v1374 = 0.0;
                          do
                          {
                            v1375 = *(double *)(*(_QWORD *)v1831 + 8 * v1372) * *(double *)(v1370 + 8 * v1372);
                            v1376 = __sincos_stret(*(double *)(v1825 + 8 * v1372) * 0.0174532925);
                            v1374 = v1374 + v1375 * v1376.__sinval;
                            v1373 = v1373 + v1375 * v1376.__cosval;
                            if ((unint64_t)v1371 >= *(_QWORD *)&buf[16])
                            {
                              v1377 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v1371[-*(_QWORD *)buf] >> 3);
                              v1378 = v1377 + 1;
                              if (v1377 + 1 > 0xAAAAAAAAAAAAAAALL)
                                sub_18F5F7864();
                              if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) > v1378)
                                v1378 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3);
                              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) >= 0x555555555555555)
                                v1379 = 0xAAAAAAAAAAAAAAALL;
                              else
                                v1379 = v1378;
                              if (v1379)
                                v1380 = (char *)sub_18F5F6858((uint64_t)&buf[16], v1379);
                              else
                                v1380 = 0;
                              v1381 = (double *)&v1380[24 * v1377];
                              *v1381 = v1374;
                              v1381[1] = v1373;
                              v1381[2] = 0.0;
                              v1382 = *(double **)&buf[8];
                              v1383 = *(double **)buf;
                              v1384 = v1381;
                              if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
                              {
                                do
                                {
                                  v1385 = *(_OWORD *)(v1382 - 3);
                                  *(v1384 - 1) = *(v1382 - 1);
                                  *(_OWORD *)(v1384 - 3) = v1385;
                                  v1384 -= 3;
                                  v1382 -= 3;
                                }
                                while (v1382 != v1383);
                                v1382 = *(double **)buf;
                              }
                              v1371 = (char *)(v1381 + 3);
                              *(_QWORD *)buf = v1384;
                              *(_QWORD *)&buf[8] = v1381 + 3;
                              *(_QWORD *)&buf[16] = &v1380[24 * v1379];
                              if (v1382)
                                operator delete(v1382);
                            }
                            else
                            {
                              *(double *)v1371 = v1374;
                              *((double *)v1371 + 1) = v1373;
                              *((_QWORD *)v1371 + 2) = 0;
                              v1371 += 24;
                            }
                            *(_QWORD *)&buf[8] = v1371;
                            ++v1372;
                            v1370 = v1826;
                          }
                          while (v1372 < (uint64_t)(*((_QWORD *)&v1826 + 1) - v1826) >> 3);
                        }
                        v1775 = 0;
                        v1776 = 0;
                        v1777 = 0;
                        sub_18F62DCB0((uint64_t *)buf, v1755, &v1775, v1357);
                        sub_18F62F3DC(a2, (const char *)a3, a7, v1744, (uint64_t)&v1817);
                        v1386 = (char *)v1775;
                        if (v1776 != v1775)
                        {
                          v1387 = 0;
                          v1388 = 0;
                          do
                          {
                            v1389 = (double *)&v1386[v1387];
                            v1390 = *v1389;
                            v1391 = v1389[1];
                            v1392 = v1389[2];
                            v1762 = *(double *)(v1826 + 8 * v1388);
                            v1396 = fmod(*(long double *)(v1825 + 8 * v1388), 360.0);
                            if (v1396 >= 0.0)
                              v1397 = v1396;
                            else
                              v1397 = v1396 + 360.0;
                            v1398 = *((double *)v1785[0] + v1388);
                            isLoiLocationType = objc_msgSend_isLoiLocationType(v430, v1393, v1394, v1395);
                            v1402 = 20.0;
                            if (v1398 < 20.0
                              && v1398 > 0.0
                              && (*(_QWORD *)&v1398 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                            {
                              v1402 = v1398;
                            }
                            if (isLoiLocationType)
                              v1405 = -1.0;
                            else
                              v1405 = v1402;
                            v1406 = *((double *)v1778[0] + v1388);
                            if (v1406 < 180.0
                              && v1406 > 0.0
                              && (*((_QWORD *)v1778[0] + v1388) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                            {
                              v1409 = *((double *)v1778[0] + v1388);
                            }
                            else
                            {
                              v1409 = 180.0;
                            }
                            v1410 = (void *)objc_msgSend_objectAtIndexedSubscript_(v704, v1400, v1388, v1401);
                            v1414 = (void *)objc_msgSend_timestamp(v1410, v1411, v1412, v1413);
                            objc_msgSend_timeIntervalSinceReferenceDate(v1414, v1415, v1416, v1417);
                            v1419 = v1418;
                            v1420 = [CLTripSegmentLocation alloc];
                            v1424 = objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(*(void **)(v428 + 3432), v1421, v1422, v1423, v1419);
                            objc_msgSend_horizontalAccuracy(v1755, v1425, v1426, v1427);
                            v1429 = v1428;
                            objc_msgSend_altitudeAccuracy(v1755, v1430, v1431, v1432);
                            v1434 = v1433;
                            v1438 = objc_msgSend_locType(v1755, v1435, v1436, v1437);
                            v1440 = (id)objc_msgSend_initWithTime_latitude_longitude_horizontalAccuracy_course_courseAccuracy_speed_speedAccuracy_altitude_altitudeAccuracy_locType_(v1420, v1439, v1424, v1438, v1390, v1391, v1429, v1397, v1409, v1762, v1405, v1392, v1434);
                            HIDWORD(v1774) = objc_msgSend_locType(v1744, v1441, v1442, v1443);
                            LODWORD(v1774) = objc_msgSend_locType(v430, v1444, v1445, v1446);
                            sub_18F62EF1C(v1440, (const char *)&v1774 + 4, (unsigned int *)&v1774, 2);
                            objc_msgSend_addObject_(a7, v1447, (uint64_t)v1440, v1448);
                            sub_18F5D5990(v1772, "reconstructed");
                            sub_18F62E518(a2, (const char *)a3, v1440, (uint64_t)v1772);
                            if (v1773 < 0)
                              operator delete(v1772[0]);
                            *(double *)&v1817 = v1762;
                            v1449 = fmod(v1397, 360.0);
                            if (v1449 < 0.0)
                              v1449 = v1449 + 360.0;
                            *(double *)&v1818 = v1449;
                            *((double *)&v1817 + 1) = v1405;
                            *((double *)&v1818 + 1) = v1409;
                            v1821 = 1;
                            ++v1388;
                            v1386 = (char *)v1775;
                            v1387 += 24;
                          }
                          while (0xAAAAAAAAAAAAAAABLL * ((v1776 - (_BYTE *)v1775) >> 3) > v1388);
                        }
                        sub_18F5D5990(v1770, "input");
                        sub_18F62E518(a2, (const char *)a3, v430, (uint64_t)v1770);
                        if (v1771 < 0)
                          operator delete(v1770[0]);
                        if (sub_18F62ECD0(v430, v1450, v1451, v1452))
                        {
                          v1774 = 0;
                          sub_18F62EF1C(v430, (const char *)&v1774 + 4, (unsigned int *)&v1774, 1);
                        }
                        else
                        {
                          sub_18F62F0F8(v430, (uint64_t)&v1817, v1453, v1454);
                          v1774 = 0;
                          sub_18F62EF1C(v430, (const char *)&v1774 + 4, (unsigned int *)&v1774, 2);
                        }
                        v1458 = v1822;
                        if (objc_msgSend_count(obj, v1455, v1456, v1457) == v1458)
                          sub_18F62F3DC(a2, (const char *)a3, a7, v430, (uint64_t)&v1817);
                        if (v1775)
                        {
                          v1776 = v1775;
                          operator delete(v1775);
                        }
                        if (*(_QWORD *)buf)
                        {
                          *(_QWORD *)&buf[8] = *(_QWORD *)buf;
                          operator delete(*(void **)buf);
                        }
                        if (v1778[0])
                        {
                          v1778[1] = v1778[0];
                          operator delete(v1778[0]);
                        }
                        if ((_QWORD)v1825)
                        {
                          *((_QWORD *)&v1825 + 1) = v1825;
                          operator delete((void *)v1825);
                        }
                        v1324 = 1;
                      }
                      if (v1783)
                      {
                        v1784 = (char *)v1783;
                        operator delete(v1783);
                      }
                      if (v1785[0])
                      {
                        v1785[1] = v1785[0];
                        operator delete(v1785[0]);
                      }
                      if ((_QWORD)v1826)
                      {
                        *((_QWORD *)&v1826 + 1) = v1826;
                        operator delete((void *)v1826);
                      }
                    }
                    if (v1788)
                    {
                      v1789 = (double *)v1788;
                      operator delete(v1788);
                    }
                    if (v1791)
                    {
                      v1792 = (double *)v1791;
                      operator delete(v1791);
                    }
                    if (v1793)
                    {
                      v1794 = (float64x2_t *)v1793;
                      operator delete(v1793);
                    }
                    if (v1795[0])
                    {
                      v1795[1] = v1795[0];
                      operator delete(v1795[0]);
                    }
                    if (*(_QWORD *)v1828)
                    {
                      *(_QWORD *)&v1828[8] = *(_QWORD *)v1828;
                      operator delete(*(void **)v1828);
                    }
                    if ((_QWORD)__p)
                    {
                      *((_QWORD *)&__p + 1) = __p;
                      operator delete((void *)__p);
                    }
                    operator delete(v1743);
                    if (*(_QWORD *)v1831)
                    {
                      *(_QWORD *)&v1831[8] = *(_QWORD *)v1831;
                      operator delete(*(void **)v1831);
                    }
                    v426 = v1324 != 0;
                    goto LABEL_800;
                  }
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                  v866 = qword_1EE172170;
                  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 134349056;
                    *(double *)&buf[4] = v1758;
                    _os_log_impl(&dword_18F5B3000, v866, OS_LOG_TYPE_INFO, "CLTSP,II,reconstructTripSegment,possible erroneous location with large speed jump skipped,timestamp,%{public}.3lf", buf, 0xCu);
                  }
                  if (sub_18F5C4AE0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172168 != -1)
                      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                    *(_DWORD *)v1831 = 134349056;
                    *(double *)&v1831[4] = v1758;
                    v457 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v457);
LABEL_318:
                    if (v457 != buf)
                      free(v457);
                  }
                }
              }
            }
            else
            {
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E29903B0);
              v651 = qword_1EE172170;
              if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
              {
                v655 = (void *)objc_msgSend_timestamp(v430, v652, v653, v654);
                objc_msgSend_timeIntervalSinceReferenceDate(v655, v656, v657, v658);
                v660 = v659;
                objc_msgSend_horizontalAccuracy(v430, v661, v662, v663);
                *(_DWORD *)buf = 134349568;
                *(_QWORD *)&buf[4] = v660;
                *(_WORD *)&buf[12] = 2050;
                *(_QWORD *)&buf[14] = v664;
                *(_WORD *)&buf[22] = 2050;
                *(_QWORD *)&buf[24] = 0x4059000000000000;
                _os_log_impl(&dword_18F5B3000, v651, OS_LOG_TYPE_DEBUG, "CLTSP,II,reconstructTripSegment,location with invalid or large horizontal uncertainty skipped,time,%{public}.3lf,hunc,%{public}.2lf,threshold,%{public}.2lf", buf, 0x20u);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E29903B0);
                v668 = (void *)objc_msgSend_timestamp(v430, v665, v666, v667);
                objc_msgSend_timeIntervalSinceReferenceDate(v668, v669, v670, v671);
                v673 = v672;
                objc_msgSend_horizontalAccuracy(v430, v674, v675, v676);
                *(_DWORD *)v1831 = 134349568;
                *(_QWORD *)&v1831[4] = v673;
                *(_WORD *)&v1831[12] = 2050;
                *(_QWORD *)&v1831[14] = v677;
                *(_WORD *)&v1831[22] = 2050;
                *(_QWORD *)&v1831[24] = 0x4059000000000000;
                v457 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v457);
                goto LABEL_318;
              }
            }
          }
          else
          {
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E29903B0);
            v458 = qword_1EE172170;
            if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
            {
              objc_msgSend_latitude(v430, v459, v460, v461);
              v463 = v462;
              objc_msgSend_longitude(v430, v464, v465, v466);
              *(_DWORD *)buf = 134283777;
              *(_QWORD *)&buf[4] = v463;
              *(_WORD *)&buf[12] = 2049;
              *(_QWORD *)&buf[14] = v467;
              _os_log_impl(&dword_18F5B3000, v458, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructTripSegment,location with invalid coordinates skipped,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E29903B0);
              objc_msgSend_latitude(v430, v468, v469, v470);
              v472 = v471;
              objc_msgSend_longitude(v430, v473, v474, v475);
              *(_DWORD *)v1831 = 134283777;
              *(_QWORD *)&v1831[4] = v472;
              *(_WORD *)&v1831[12] = 2049;
              *(_QWORD *)&v1831[14] = v476;
              v457 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v457);
              goto LABEL_318;
            }
          }
        }
      }
      else
      {
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E29903B0);
        v456 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v456, OS_LOG_TYPE_ERROR, "CLTSP,II,reconstructTripSegment,null location object skipped", buf, 2u);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E29903B0);
          *(_WORD *)v1831 = 0;
          v457 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v457);
          goto LABEL_318;
        }
      }
LABEL_801:
      ++v429;
    }
    while (v429 != v425);
    v1610 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v422, (uint64_t)&v1806, (uint64_t)v1827, 16);
    v425 = v1610;
  }
  while (v1610);
LABEL_913:
  if (!a7)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    v1684 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v1684, OS_LOG_TYPE_ERROR, "CLTSP,II,invalidateLoiSpeedAccuracy,null reconstructedLocations", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_938;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    *(_WORD *)v1831 = 0;
    v1685 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "void invalidateLoiSpeedAccuracy(NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v1685);
LABEL_977:
    if (v1685 != buf)
      free(v1685);
    goto LABEL_938;
  }
  if (objc_msgSend_count(a7, v422, v423, v424))
  {
    v1614 = (void *)objc_msgSend_firstObject(a7, v1611, v1612, v1613);
    if (objc_msgSend_isLoiLocationType(v1614, v1615, v1616, v1617)
      && objc_msgSend_count(a7, v1618, v1619, v1620))
    {
      v1621 = 0;
      do
      {
        v1622 = (void *)objc_msgSend_objectAtIndexedSubscript_(a7, v1618, v1621, v1620);
        if (!objc_msgSend_isLoiLocationType(v1622, v1623, v1624, v1625))
          break;
        v1626 = (void *)objc_msgSend_objectAtIndexedSubscript_(a7, v1618, v1621, v1620);
        v1629 = (void *)objc_msgSend_objectAtIndexedSubscript_(a7, v1627, v1621, v1628);
        objc_msgSend_speed(v1629, v1630, v1631, v1632);
        objc_msgSend_updateSpeed_andSpeedAccuracy_(v1626, v1633, v1634, v1635);
        ++v1621;
      }
      while (v1621 < objc_msgSend_count(a7, v1636, v1637, v1638));
    }
    v1639 = (void *)objc_msgSend_lastObject(a7, v1618, v1619, v1620);
    if (objc_msgSend_isLoiLocationType(v1639, v1640, v1641, v1642))
    {
      v1646 = (void *)objc_msgSend_lastObject(a7, v1643, v1644, v1645);
      v1650 = (void *)objc_msgSend_lastObject(a7, v1647, v1648, v1649);
      objc_msgSend_speed(v1650, v1651, v1652, v1653);
      objc_msgSend_updateSpeed_andSpeedAccuracy_(v1646, v1654, v1655, v1656);
      v1660 = objc_msgSend_count(a7, v1657, v1658, v1659);
      v1663 = (void *)objc_msgSend_objectAtIndexedSubscript_(a7, v1661, v1660 - 2, v1662);
      if ((objc_msgSend_isOriginalLocationType(v1663, v1664, v1665, v1666) & 1) == 0)
      {
        v1667 = v1660 - 3;
        do
        {
          v1668 = (void *)objc_msgSend_objectAtIndexedSubscript_(a7, v1643, v1667 + 1, v1645);
          v1671 = (void *)objc_msgSend_objectAtIndexedSubscript_(a7, v1669, v1667 + 1, v1670);
          objc_msgSend_speed(v1671, v1672, v1673, v1674);
          objc_msgSend_updateSpeed_andSpeedAccuracy_(v1668, v1675, v1676, v1677);
          v1680 = (void *)objc_msgSend_objectAtIndexedSubscript_(a7, v1678, v1667--, v1679);
        }
        while (!objc_msgSend_isOriginalLocationType(v1680, v1681, v1682, v1683));
      }
    }
    goto LABEL_938;
  }
  if (qword_1EE172168 != -1)
    dispatch_once(&qword_1EE172168, &unk_1E29903B0);
  v1686 = qword_1EE172170;
  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v1686, OS_LOG_TYPE_DEBUG, "CLTSP,II,invalidateLoiSpeedAccuracy,empty reconstructedLocations", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    *(_WORD *)v1831 = 0;
    v1685 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void invalidateLoiSpeedAccuracy(NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v1685);
    goto LABEL_977;
  }
LABEL_938:
  if (*a1 && (int)v1814 >= 2)
  {
    *(_DWORD *)buf = objc_msgSend_count(a6, v1643, v1644, v1645);
    sub_18F62D4B0((double **)&v1810);
  }
  if (qword_1EE172168 != -1)
    dispatch_once(&qword_1EE172168, &unk_1E29903B0);
  v1687 = qword_1EE172170;
  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v1687, OS_LOG_TYPE_INFO, "CLTSP,II,reconstructTripSegment,inertial integrator completed", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E29903B0);
    *(_WORD *)v1831 = 0;
    v1691 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentInertialIntegrator::reconstructTripSegment(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull) const", "CoreLocation: %s\n", v1691);
    if (v1691 != buf)
      free(v1691);
  }
  v230 = objc_msgSend_count(a7, v1688, v1689, v1690) != 0;
  if ((_QWORD)v1810)
  {
    *((_QWORD *)&v1810 + 1) = v1810;
    operator delete((void *)v1810);
  }
  return v230;
}

void sub_18F636288(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x350];
  if (STACK[0x350])
  {
    STACK[0x358] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

BOOL sub_18F636714(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  _BOOL4 v7;

  v2 = *a1;
  v3 = fabs(*a1);
  if (v3 == INFINITY)
    return 0;
  v4 = *a2;
  v5 = fabs(*a2);
  if (v5 == INFINITY || v3 < 0.00003 && v5 < 0.00003)
    return 0;
  v7 = v2 <= 90.0;
  if (v2 < -90.0)
    v7 = 0;
  if (v4 > 180.0)
    v7 = 0;
  return v4 >= -180.0 && v7;
}

os_log_t sub_18F6367AC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1EE172170 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F6367D8(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_18F63684C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_18F636830(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_18F63684C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_18F5F7864();
  result = (char *)sub_18F610B1C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_QWORD *sub_18F63688C(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60)
      sub_18F5F7864();
    v4 = 16 * a2;
    v5 = (char *)operator new(16 * a2);
    *a1 = v5;
    a1[2] = &v5[16 * a2];
    bzero(v5, 16 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_18F636900(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_18F637324(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_18F63738C(uint64_t a1, uint64_t *a2)
{
  id Weak;
  const char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  Weak = objc_loadWeak((id *)(a1 + 32));
  v6 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  objc_msgSend_handleMessage_(Weak, v4, (uint64_t)&v12, v5);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18F637418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F63742C(uint64_t a1)
{
  id Weak;
  const char *v2;
  uint64_t v3;
  uint64_t v4;

  Weak = objc_loadWeak((id *)(a1 + 32));
  return objc_msgSend_handleInterruption(Weak, v2, v3, v4);
}

void sub_18F639DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void sub_18F63A258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F63A494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_18F5D6004((uint64_t)&a11);
  sub_18F5D6004((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_18F63BB80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F63BD40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F63BF00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F63DC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F63DF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F63E33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F63E63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F63E960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F63EC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F63EF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F63F260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F63F560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F63F860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F63FB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F63FE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F640160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F640460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F640760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F640A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F640D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F641060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F641360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

os_log_t sub_18F6413D8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "Proximity");
  qword_1EE172120 = (uint64_t)result;
  return result;
}

uint64_t sub_18F641404(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  char *v5;
  uint8_t buf[4];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720C8 != -1)
    dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
  v2 = qword_1EE1720D0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24);
    *(_DWORD *)buf = 138477827;
    v7 = v3;
    _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "#clreg,completionCallback,%{private}@,nil,nil", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRegulatoryConfigInternal::fetchRAEConfig(CLLocation *, CLRegulatoryConfigCallback)_block_invoke", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_18F6415D4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  double v5;
  double v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  double v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  const char *v39;
  uint64_t v40;

  objc_msgSend_coordinate(a1, a2, a3, a4);
  v6 = v5;
  objc_msgSend_coordinate(a1, v7, v8, v9);
  v11 = v10;
  v12 = objc_alloc(MEMORY[0x1E0D27168]);
  v19 = (id)objc_msgSend_initWithGEOCoordinate_(v12, v13, v14, v15, v6, v11);
  if (v19)
  {
    objc_msgSend_altitude(a1, v16, v17, v18);
    objc_msgSend_setAltitude_(v19, v21, (int)v20, v22);
    objc_msgSend_horizontalAccuracy(a1, v23, v24, v25);
    objc_msgSend_setHorizontalAccuracy_(v19, v26, v27, v28);
    objc_msgSend_verticalAccuracy(a1, v29, v30, v31);
    objc_msgSend_setVerticalAccuracy_(v19, v32, v33, v34);
    v38 = objc_msgSend_referenceFrame(a1, v35, v36, v37);
    if (v38 == 1)
      objc_msgSend_setReferenceFrame_(v19, v39, 1, v40);
    else
      objc_msgSend_setReferenceFrame_(v19, v39, 2 * (v38 == 2), v40);
  }
  return v19;
}

void sub_18F64168C(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  void *__p[2];
  unsigned __int8 v41;
  int v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (a2 && (v6 = (void *)a3, objc_msgSend_length(a2, (const char *)a2, a3, a4)))
  {
    v11 = (char *)objc_msgSend_UTF8String(a2, v8, v9, v10);
    sub_18F5D5990(__p, v11);
    v12 = v41;
    if ((v41 & 0x80u) != 0)
      v12 = (unint64_t)__p[1];
    if (v12)
    {
      v13 = sub_18F647888(a1, (unsigned __int8 *)__p);
      if (v13)
      {
        v14 = v13;
        if (qword_1EE1720C8 != -1)
          dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
        v15 = qword_1EE1720D0;
        if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEFAULT))
        {
          v19 = *((_QWORD *)v14 + 5);
          v20 = (void *)objc_msgSend_allObjects(v6, v16, v17, v18);
          v23 = objc_msgSend_componentsJoinedByString_(v20, v21, (uint64_t)CFSTR(","), v22);
          *(_DWORD *)buf = 138478083;
          v47 = v19;
          v48 = 2113;
          v49 = v23;
          _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_DEFAULT, "#clreg,completionCallback,%{private}@,%{private}@,nil", buf, 0x16u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE1720C8 != -1)
            dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
          v32 = *((_QWORD *)v14 + 5);
          v33 = (void *)objc_msgSend_allObjects(v6, v29, v30, v31);
          v36 = objc_msgSend_componentsJoinedByString_(v33, v34, (uint64_t)CFSTR(","), v35);
          v42 = 138478083;
          v43 = v32;
          v44 = 2113;
          v45 = v36;
          v37 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::sendIsoConfig(NSString *, CLRegulatoryIsoList, CLRegulatoryConfigCallback)", "CoreLocation: %s\n", v37);
          if (v37 != (char *)buf)
            free(v37);
        }
        v24 = v14 + 40;
      }
      else
      {
        if (qword_1EE1720C8 != -1)
          dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
        v27 = qword_1EE1720D0;
        if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v27, OS_LOG_TYPE_DEFAULT, "#clreg,completionCallback,default,nil,nil", buf, 2u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE1720C8 != -1)
            dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
          LOWORD(v42) = 0;
          v39 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::sendIsoConfig(NSString *, CLRegulatoryIsoList, CLRegulatoryConfigCallback)", "CoreLocation: %s\n", v39);
          if (v39 != (char *)buf)
            free(v39);
        }
        v6 = 0;
        v24 = a1 + 9;
      }
      (*(void (**)(uint64_t, _QWORD, void *, _QWORD))(a4 + 16))(a4, *v24, v6, 0);
    }
    else
    {
      if (qword_1EE1720C8 != -1)
        dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
      v26 = qword_1EE1720D0;
      if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v26, OS_LOG_TYPE_DEFAULT, "#clreg,completionCallback,default,nil,nil", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE1720C8 != -1)
          dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
        LOWORD(v42) = 0;
        v38 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::sendIsoConfig(NSString *, CLRegulatoryIsoList, CLRegulatoryConfigCallback)", "CoreLocation: %s\n", v38);
        if (v38 != (char *)buf)
          free(v38);
      }
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a4 + 16))(a4, a1[9], 0, 0);
    }
    if ((char)v41 < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    v25 = qword_1EE1720D0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_DEFAULT, "#clreg,completionCallback,default,nil,nil", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE1720C8 != -1)
        dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
      LOWORD(__p[0]) = 0;
      v28 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::sendIsoConfig(NSString *, CLRegulatoryIsoList, CLRegulatoryConfigCallback)", "CoreLocation: %s\n", v28);
      if (v28 != (char *)buf)
        free(v28);
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a4 + 16))(a4, a1[9], 0, 0);
  }
}

void sub_18F641CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F641D18(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD v39[5];
  int v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720C8 != -1)
    dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
  v6 = qword_1EE1720D0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend_coordinate(a2, v7, v8, v9);
    v11 = v10;
    objc_msgSend_coordinate(a2, v12, v13, v14);
    v16 = v15;
    objc_msgSend_horizontalAccuracy(a2, v17, v18, v19);
    *(_DWORD *)buf = 134284033;
    v47 = v11;
    v48 = 2049;
    v49 = v16;
    v50 = 2049;
    v51 = v20;
    _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEFAULT, "#clreg,#map,query,lla,%{private}.6f,lon,%{private}.6f,accuracy,%{private}.2f", buf, 0x20u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    objc_msgSend_coordinate(a2, v24, v25, v26);
    v28 = v27;
    objc_msgSend_coordinate(a2, v29, v30, v31);
    v33 = v32;
    objc_msgSend_horizontalAccuracy(a2, v34, v35, v36);
    v40 = 134284033;
    v41 = v28;
    v42 = 2049;
    v43 = v33;
    v44 = 2049;
    v45 = v37;
    v38 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::runMapsQuery(GEOLocation *, MapsResultCallback)", "CoreLocation: %s\n", v38);
    if (v38 != (char *)buf)
      free(v38);
  }
  v22 = *(_QWORD *)(a1 + 64);
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3221225472;
  v39[2] = sub_18F641F8C;
  v39[3] = &unk_1E2991AC8;
  v39[4] = a3;
  return objc_msgSend_fetchPossibleTerritoriesForLocation_responseQueue_responseBlock_(MEMORY[0x1E0D270D0], v21, (uint64_t)a2, v22, v39);
}

uint64_t sub_18F641F8C(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t (*v6)(void);
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  NSObject *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  NSObject *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  NSObject *v113;
  char *v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  int v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  uint8_t v126[128];
  uint8_t buf[4];
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    v5 = qword_1EE1720D0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v128 = a3;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEFAULT, "#clreg,#map,response,#warning,error,%@", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_7;
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    v122 = 138412290;
    v123 = a3;
    goto LABEL_90;
  }
  if (!a2)
  {
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    v113 = qword_1EE1720D0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v113, OS_LOG_TYPE_DEFAULT, "#clreg,#map,response,#warning,results,Nil", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_7;
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    LOWORD(v122) = 0;
LABEL_90:
    v114 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::runMapsQuery(GEOLocation *, MapsResultCallback)_block_invoke", "CoreLocation: %s\n", v114);
    if (v114 != (char *)buf)
      free(v114);
    goto LABEL_7;
  }
  v116 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v118 = 0u;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v9, (uint64_t)&v118, (uint64_t)v126, 16);
  if (!v10)
    goto LABEL_7;
  v14 = v10;
  v115 = a1;
  v117 = 0;
  v15 = 0;
  v16 = *(_QWORD *)v119;
  do
  {
    v17 = 0;
    do
    {
      if (*(_QWORD *)v119 != v16)
        objc_enumerationMutation(a2);
      v18 = *(void **)(*((_QWORD *)&v118 + 1) + 8 * v17);
      if (v18
        && ((objc_msgSend_isDisputed(*(void **)(*((_QWORD *)&v118 + 1) + 8 * v17), v11, v12, v13) & 1) != 0
         || objc_msgSend_iso3166CountryCode(v18, v19, v20, v21)
         && (v25 = (void *)objc_msgSend_iso3166CountryCode(v18, v22, v23, v24), objc_msgSend_length(v25, v26, v27, v28)))
        && (!objc_msgSend_isDisputed(v18, v19, v20, v21)
         || objc_msgSend_disputedTerritoryName(v18, v29, v30, v31)
         && (v35 = (void *)objc_msgSend_disputedTerritoryName(v18, v32, v33, v34),
             objc_msgSend_length(v35, v36, v37, v38))))
      {
        if (objc_msgSend_isDisputed(v18, v29, v30, v31))
        {
          if (objc_msgSend_interestedPartyIso3166CountryCodes(v18, v39, v40, v41))
          {
            v45 = (void *)objc_msgSend_interestedPartyIso3166CountryCodes(v18, v42, v43, v44);
            if (objc_msgSend_count(v45, v46, v47, v48))
            {
              v49 = objc_msgSend_interestedPartyIso3166CountryCodes(v18, v42, v43, v44);
              objc_msgSend_setByAddingObjectsFromArray_(v116, v50, v49, v51);
            }
          }
          if (v15)
          {
            if (qword_1EE1720C8 != -1)
              dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
            v52 = qword_1EE1720D0;
            if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEBUG))
            {
              v56 = objc_msgSend_UTF8String(v15, v53, v54, v55);
              v60 = (void *)objc_msgSend_interestedPartyIso3166CountryCodes(v18, v57, v58, v59);
              v63 = objc_msgSend_componentsJoinedByString_(v60, v61, (uint64_t)CFSTR(","), v62);
              *(_DWORD *)buf = 136380931;
              v128 = v56;
              v129 = 2112;
              v130 = v63;
              _os_log_impl(&dword_18F5B3000, v52, OS_LOG_TYPE_DEBUG, "#clreg,#map,response,disputed,next,%{private}s,interested,%@", buf, 0x16u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE1720C8 != -1)
                goto LABEL_72;
              goto LABEL_33;
            }
          }
          else
          {
            v15 = (void *)objc_msgSend_disputedTerritoryName(v18, v42, v43, v44);
            if (qword_1EE1720C8 != -1)
              dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
            v88 = qword_1EE1720D0;
            if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEBUG))
            {
              v92 = objc_msgSend_UTF8String(v15, v89, v90, v91);
              v96 = (void *)objc_msgSend_interestedPartyIso3166CountryCodes(v18, v93, v94, v95);
              v99 = objc_msgSend_componentsJoinedByString_(v96, v97, (uint64_t)CFSTR(","), v98);
              *(_DWORD *)buf = 136380931;
              v128 = v92;
              v129 = 2112;
              v130 = v99;
              _os_log_impl(&dword_18F5B3000, v88, OS_LOG_TYPE_DEBUG, "#clreg,#map,response,disputed,first,%{private}s,interested,%@", buf, 0x16u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE1720C8 == -1)
                goto LABEL_33;
LABEL_72:
              dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
LABEL_33:
              v67 = objc_msgSend_UTF8String(v15, v64, v65, v66);
              v71 = (void *)objc_msgSend_interestedPartyIso3166CountryCodes(v18, v68, v69, v70);
              v74 = objc_msgSend_componentsJoinedByString_(v71, v72, (uint64_t)CFSTR(","), v73);
              v122 = 136380931;
              v123 = v67;
              v124 = 2112;
              v125 = v74;
LABEL_66:
              v106 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::runMapsQuery(GEOLocation *, MapsResultCallback)_block_invoke", "CoreLocation: %s\n", v106);
              if (v106 != (char *)buf)
                free(v106);
            }
          }
        }
        else
        {
          v78 = objc_msgSend_iso3166CountryCode(v18, v39, v40, v41);
          if (v117)
          {
            objc_msgSend_addObject_(v116, v76, v78, v77);
            if (qword_1EE1720C8 != -1)
              dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
            v79 = qword_1EE1720D0;
            if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEBUG))
            {
              v83 = objc_msgSend_iso3166CountryCode(v18, v80, v81, v82);
              *(_DWORD *)buf = 138477827;
              v128 = v83;
              _os_log_impl(&dword_18F5B3000, v79, OS_LOG_TYPE_DEBUG, "#clreg,#map,response,nonDisputed,next,%{private}@", buf, 0xCu);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE1720C8 != -1)
                dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
              v87 = objc_msgSend_iso3166CountryCode(v18, v84, v85, v86);
              v122 = 138477827;
              v123 = v87;
              goto LABEL_66;
            }
          }
          else
          {
            v100 = v15;
            if (qword_1EE1720C8 != -1)
              dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
            v101 = qword_1EE1720D0;
            if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEBUG))
            {
              v105 = objc_msgSend_iso3166CountryCode(v18, v102, v103, v104);
              *(_DWORD *)buf = 138477827;
              v128 = v105;
              _os_log_impl(&dword_18F5B3000, v101, OS_LOG_TYPE_DEBUG, "#clreg,#map,response,nonDisputed,first,%{private}@", buf, 0xCu);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE1720C8 != -1)
                dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
              v110 = objc_msgSend_iso3166CountryCode(v18, v107, v108, v109);
              v122 = 138477827;
              v123 = v110;
              v111 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::runMapsQuery(GEOLocation *, MapsResultCallback)_block_invoke", "CoreLocation: %s\n", v111);
              if (v111 != (char *)buf)
                free(v111);
            }
            v117 = v78;
            v15 = v100;
          }
        }
      }
      else
      {
        if (qword_1EE1720C8 != -1)
          dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
        v75 = qword_1EE1720D0;
        if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v75, OS_LOG_TYPE_DEBUG, "#clreg,#map,response,#warning,invalidResultEntry,ignoring", buf, 2u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE1720C8 != -1)
            dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
          LOWORD(v122) = 0;
          goto LABEL_66;
        }
      }
      ++v17;
    }
    while (v14 != v17);
    v112 = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v11, (uint64_t)&v118, (uint64_t)v126, 16);
    v14 = v112;
  }
  while (v112);
  if (v15)
  {
    v6 = *(uint64_t (**)(void))(*(_QWORD *)(v115 + 32) + 16);
    return v6();
  }
  a1 = v115;
  if (v117)
  {
    v6 = *(uint64_t (**)(void))(*(_QWORD *)(v115 + 32) + 16);
    return v6();
  }
LABEL_7:
  v6 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  return v6();
}

void sub_18F642A44(uint64_t a1)
{
  sub_18F64168C(*(_QWORD **)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 32));
}

void sub_18F642A58(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  char *v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(a1 + 40);
  if (qword_1EE1720C8 != -1)
    dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
  v7 = qword_1EE1720D0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEBUG))
  {
    v11 = (void *)objc_msgSend_allObjects(a3, v8, v9, v10);
    *(_DWORD *)buf = 138478083;
    v22 = a2;
    v23 = 2113;
    v24 = objc_msgSend_componentsJoinedByString_(v11, v12, (uint64_t)CFSTR(","), v13);
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEBUG, "#clreg,cbLocation,iso,%{private}@,neighbors,%{private}@", buf, 0x16u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    v17 = (void *)objc_msgSend_allObjects(a3, v14, v15, v16);
    objc_msgSend_componentsJoinedByString_(v17, v18, (uint64_t)CFSTR(","), v19);
    v20 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::fetchIsoOrDefaultConfig(CLLocation *, CLRegulatoryConfigCallback)_block_invoke", "CoreLocation: %s\n", v20);
    if (v20 != (char *)buf)
      free(v20);
  }
  sub_18F64168C(v6, a2, (uint64_t)a3, *(_QWORD *)(a1 + 32));
}

void sub_18F642C6C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  char *v40;
  _QWORD v41[7];
  int v42;
  void *v43;
  __int16 v44;
  uint64_t v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 48);
  if (qword_1EE1720C8 != -1)
    dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
  v7 = qword_1EE1720D0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEBUG))
  {
    v11 = (void *)objc_msgSend_allObjects(a3, v8, v9, v10);
    *(_DWORD *)buf = 138478083;
    v47 = a2;
    v48 = 2113;
    v49 = objc_msgSend_componentsJoinedByString_(v11, v12, (uint64_t)CFSTR(","), v13);
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEBUG, "#clreg,cbExtendedLocation,iso,%{private}@,neighbors,%{private}@", buf, 0x16u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    v37 = (void *)objc_msgSend_allObjects(a3, v34, v35, v36);
    v42 = 138478083;
    v43 = a2;
    v44 = 2113;
    v45 = objc_msgSend_componentsJoinedByString_(v37, v38, (uint64_t)CFSTR(","), v39);
    v40 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::fetchIsoOrDefaultConfig(CLLocation *, CLRegulatoryConfigCallback)_block_invoke", "CoreLocation: %s\n", v40);
    if (v40 != (char *)buf)
      free(v40);
  }
  if (a2 && objc_msgSend_length(a2, v14, v15, v16))
  {
    if (a3 && objc_msgSend_count(a3, v17, v18, v19))
    {
      objc_msgSend_addObject_(a3, v20, (uint64_t)a2, v21);
      v25 = (id)objc_msgSend_copy(a3, v22, v23, v24);
      objc_msgSend_setHorizontalAccuracy_(*(void **)(a1 + 32), v26, v27, v28, (double)*(int *)(a1 + 56));
      v41[0] = MEMORY[0x1E0C809B0];
      v41[1] = 3221225472;
      v41[2] = sub_18F642F24;
      v41[3] = &unk_1E2991B18;
      v29 = *(void **)(a1 + 32);
      v30 = *(_QWORD *)(a1 + 40);
      v41[4] = v25;
      v41[5] = v30;
      v41[6] = v6;
      sub_18F641D18(v6, v29, (uint64_t)v41);
      return;
    }
    v31 = *(_QWORD *)(a1 + 40);
    v32 = (_QWORD *)v6;
    v33 = a2;
  }
  else
  {
    v31 = *(_QWORD *)(a1 + 40);
    v32 = (_QWORD *)v6;
    v33 = 0;
  }
  sub_18F64168C(v32, v33, 0, v31);
}

void sub_18F642F24(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  char *v41;
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(a1 + 48);
  if (qword_1EE1720C8 != -1)
    dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
  v7 = qword_1EE1720D0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEBUG))
  {
    v11 = (void *)objc_msgSend_allObjects(a3, v8, v9, v10);
    v14 = objc_msgSend_componentsJoinedByString_(v11, v12, (uint64_t)CFSTR(","), v13);
    v18 = (void *)objc_msgSend_allObjects(*(void **)(a1 + 32), v15, v16, v17);
    *(_DWORD *)buf = 138478339;
    v43 = a2;
    v44 = 2113;
    v45 = v14;
    v46 = 2113;
    v47 = objc_msgSend_componentsJoinedByString_(v18, v19, (uint64_t)CFSTR(","), v20);
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEBUG, "#clreg,cbWrapper,isoActual,%{private}@,neighborsWithinLocation,%{private}@,extendedNeighbors,%{private}@", buf, 0x20u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    v32 = (void *)objc_msgSend_allObjects(a3, v29, v30, v31);
    objc_msgSend_componentsJoinedByString_(v32, v33, (uint64_t)CFSTR(","), v34);
    v38 = (void *)objc_msgSend_allObjects(*(void **)(a1 + 32), v35, v36, v37);
    objc_msgSend_componentsJoinedByString_(v38, v39, (uint64_t)CFSTR(","), v40);
    v41 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::fetchIsoOrDefaultConfig(CLLocation *, CLRegulatoryConfigCallback)_block_invoke", "CoreLocation: %s\n", v41);
    if (v41 != (char *)buf)
      free(v41);
  }
  v24 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v25 = *(void **)(a1 + 32);
  if (v25 && objc_msgSend_count(v25, v21, v22, v23))
    objc_msgSend_unionSet_(v24, v21, *(_QWORD *)(a1 + 32), v23);
  if (a3 && objc_msgSend_count(a3, v21, v22, v23))
    objc_msgSend_unionSet_(v24, v21, (uint64_t)a3, v23);
  if (v24)
  {
    v26 = objc_msgSend_count(v24, v21, v22, v23);
    if (a2)
    {
      if (v26)
        objc_msgSend_removeObject_(v24, v27, (uint64_t)a2, v28);
    }
  }
  sub_18F64168C(v6, a2, (uint64_t)v24, *(_QWORD *)(a1 + 40));

}

void sub_18F6431F4(uint64_t a1)
{
  sub_18F64168C(*(_QWORD **)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 32));
}

void sub_18F643208(uint64_t a1)
{
  sub_18F64168C(*(_QWORD **)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_18F64321C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_18F643238(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id v4;
  const char *v5;
  char *v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720C8 != -1)
    dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
  v2 = qword_1EE1720D0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138477827;
    v9 = v3;
    _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "#clreg,completionCallback,%{private}@,nil,nil", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::sendRaeInfoAsync(NSDictionary *, CLRegulatoryInfoCallback)_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend_setObject_forKey_(v4, v5, (uint64_t)CFSTR("kCLRegRegionTypeRae"), (uint64_t)CFSTR("kCLRegRegionTypeKey"));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18F643424(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  const __CFString *v21;
  char *v22;
  _QWORD v23[2];
  void (*v24)(uint64_t *, void *, uint64_t);
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  __int16 v31;
  uint64_t v32;
  _BYTE buf[22];
  unsigned __int8 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720C8 != -1)
    dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
  v8 = qword_1EE1720D0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138478083;
    *(_QWORD *)&buf[4] = a2;
    *(_WORD *)&buf[12] = 2113;
    *(_QWORD *)&buf[14] = a3;
    _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_DEBUG, "sendIsoInfoSync,region,%{private}@,neighbors,%{private}@", buf, 0x16u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    v29 = 138478083;
    v30 = a2;
    v31 = 2113;
    v32 = a3;
    v22 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::sendIsoInfoSync(CLRegulatoryRegion, CLRegulatoryRegionMutableList, CLRegulatoryInfoCallback)", "CoreLocation: %s\n", v22);
    if (v22 != buf)
      free(v22);
  }
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v24 = sub_18F643748;
  v25 = &unk_1E2991B68;
  v26 = a2;
  v27 = a3;
  v28 = a4;
  if (a2
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && objc_msgSend_objectForKey_(a2, v9, (uint64_t)CFSTR("kCLRegNameKey"), v10))
  {
    v13 = (void *)objc_msgSend_objectForKey_(a2, v11, (uint64_t)CFSTR("kCLRegNameKey"), v12);
    v17 = (char *)objc_msgSend_UTF8String(v13, v14, v15, v16);
    sub_18F5D5990(buf, v17);
    v18 = v34;
    if ((v34 & 0x80u) != 0)
      v18 = *(_QWORD *)&buf[8];
    if (v18)
    {
      v19 = sub_18F647888(a1, buf);
      v20 = a1 + 9;
      if (v19)
      {
        v20 = (uint64_t *)(v19 + 40);
        v21 = CFSTR("kCLRegRegionTypeGeo");
      }
      else
      {
        v21 = CFSTR("kCLRegRegionTypeDefault");
      }
      v24(v23, (void *)v21, *v20);
    }
    else
    {
      v24(v23, CFSTR("kCLRegRegionTypeDefault"), a1[9]);
    }
    if ((char)v34 < 0)
      operator delete(*(void **)buf);
  }
  else
  {
    v24(v23, CFSTR("kCLRegRegionTypeDefault"), a1[9]);
  }
}

void sub_18F643720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F643748(uint64_t *a1, void *a2, uint64_t a3)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  NSObject *v17;
  char *v18;
  uint8_t buf[1640];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  if (a2 && (v10 = v6, objc_msgSend_length(a2, v7, v8, v9)))
  {
    objc_msgSend_setObject_forKey_(v10, v11, (uint64_t)a2, (uint64_t)CFSTR("kCLRegRegionTypeKey"));
    if (a1[4])
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if (objc_msgSend_objectForKey_((void *)a1[4], v12, (uint64_t)CFSTR("kCLRegNameKey"), v14))
          objc_msgSend_setObject_forKey_(v10, v12, a1[4], (uint64_t)CFSTR("kCLRegGeoRegionMatchedKey"));
      }
    }
    v15 = (void *)a1[5];
    if (v15)
    {
      if (objc_msgSend_count(v15, v12, v13, v14))
        objc_msgSend_setObject_forKey_(v10, v16, a1[5], (uint64_t)CFSTR("kCLRegNeighborsKey"));
    }
    (*(void (**)(uint64_t, uint64_t, void *, _QWORD))(a1[6] + 16))(a1[6], a3, v10, 0);
  }
  else
  {
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    v17 = qword_1EE1720D0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_ERROR, "#clreg,invalidRegionType", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE1720C8 != -1)
        dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
      v18 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void CLRegulatoryConfigInternal::sendIsoInfoSync(CLRegulatoryRegion, CLRegulatoryRegionMutableList, CLRegulatoryInfoCallback)_block_invoke", "CoreLocation: %s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
  }
}

uint64_t sub_18F6439CC(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD v39[6];
  int v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720C8 != -1)
    dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
  v6 = qword_1EE1720D0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend_coordinate(a2, v7, v8, v9);
    v11 = v10;
    objc_msgSend_coordinate(a2, v12, v13, v14);
    v16 = v15;
    objc_msgSend_horizontalAccuracy(a2, v17, v18, v19);
    *(_DWORD *)buf = 134284033;
    v47 = v11;
    v48 = 2049;
    v49 = v16;
    v50 = 2049;
    v51 = v20;
    _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEFAULT, "#clreg,#map,query,lla,%{private}.6f,lon,%{private}.6f,accuracy,%{private}.2f", buf, 0x20u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    objc_msgSend_coordinate(a2, v24, v25, v26);
    v28 = v27;
    objc_msgSend_coordinate(a2, v29, v30, v31);
    v33 = v32;
    objc_msgSend_horizontalAccuracy(a2, v34, v35, v36);
    v40 = 134284033;
    v41 = v28;
    v42 = 2049;
    v43 = v33;
    v44 = 2049;
    v45 = v37;
    v38 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::runMapInfoQuery(GEOLocation *, MapsInfoReply)", "CoreLocation: %s\n", v38);
    if (v38 != (char *)buf)
      free(v38);
  }
  v22 = *(_QWORD *)(a1 + 64);
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3221225472;
  v39[2] = sub_18F643C40;
  v39[3] = &unk_1E2991B90;
  v39[4] = a2;
  v39[5] = a3;
  return objc_msgSend_fetchPossibleTerritoriesForLocation_responseQueue_responseBlock_(MEMORY[0x1E0D270D0], v21, (uint64_t)a2, v22, v39);
}

uint64_t sub_18F643C40(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t (*v6)(void);
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  __objc2_class *v30;
  uint64_t v31;
  uint64_t v32;
  char isDisputed;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  const char *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  const char *v76;
  char *v77;
  uint64_t v78;
  NSObject *v79;
  char *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[128];
  int v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  void *v109;
  uint8_t buf[4];
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  void *v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    v5 = qword_1EE1720D0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v111 = a3;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEFAULT, "#clreg,#map,response,#warning,error,%@", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_7;
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    v102 = 138412290;
    v103 = a3;
    goto LABEL_59;
  }
  if (!a2)
  {
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    v79 = qword_1EE1720D0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v79, OS_LOG_TYPE_DEFAULT, "#clreg,#map,response,#warning,results,Nil", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_7;
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    LOWORD(v102) = 0;
LABEL_59:
    v80 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::runMapInfoQuery(GEOLocation *, MapsInfoReply)_block_invoke", "CoreLocation: %s\n", v80);
    if (v80 != (char *)buf)
      free(v80);
    goto LABEL_7;
  }
  if (qword_1EE1720C8 != -1)
    dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
  v9 = qword_1EE1720D0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend_coordinate(*(void **)(a1 + 32), v10, v11, v12);
    v14 = v13;
    objc_msgSend_coordinate(*(void **)(a1 + 32), v15, v16, v17);
    v19 = v18;
    objc_msgSend_horizontalAccuracy(*(void **)(a1 + 32), v20, v21, v22);
    *(_DWORD *)buf = 134284291;
    v111 = v14;
    v112 = 2049;
    v113 = v19;
    v114 = 2049;
    v115 = v23;
    v116 = 2113;
    v117 = a2;
    _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_DEBUG, "#clreg,#map,response,lla,%{private}.6f,lon,%{private}.6f,accuracy,%{private}.2f,results,%{private}@", buf, 0x2Au);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    objc_msgSend_coordinate(*(void **)(a1 + 32), v81, v82, v83);
    v85 = v84;
    objc_msgSend_coordinate(*(void **)(a1 + 32), v86, v87, v88);
    v90 = v89;
    objc_msgSend_horizontalAccuracy(*(void **)(a1 + 32), v91, v92, v93);
    v102 = 134284291;
    v103 = v85;
    v104 = 2049;
    v105 = v90;
    v106 = 2049;
    v107 = v94;
    v108 = 2113;
    v109 = a2;
    v95 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::runMapInfoQuery(GEOLocation *, MapsInfoReply)_block_invoke", "CoreLocation: %s\n", v95);
    if (v95 != (char *)buf)
      free(v95);
  }
  v24 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v25, (uint64_t)&v97, (uint64_t)v101, 16);
  v30 = &OBJC_METACLASS___CLHeadingInternal;
  if (!v26)
    goto LABEL_7;
  v31 = v26;
  v96 = a1;
  v32 = 0;
  isDisputed = 0;
  v34 = *(_QWORD *)v98;
  do
  {
    v35 = 0;
    do
    {
      if (*(_QWORD *)v98 != v34)
        objc_enumerationMutation(a2);
      v36 = *(void **)(*((_QWORD *)&v97 + 1) + 8 * v35);
      if (v36
        && ((objc_msgSend_isDisputed(*(void **)(*((_QWORD *)&v97 + 1) + 8 * v35), v27, v28, v29) & 1) != 0
         || objc_msgSend_iso3166CountryCode(v36, v37, v38, v39)
         && (v43 = (void *)objc_msgSend_iso3166CountryCode(v36, v40, v41, v42), objc_msgSend_length(v43, v44, v45, v46)))
        && (!objc_msgSend_isDisputed(v36, v37, v38, v39)
         || objc_msgSend_disputedTerritoryName(v36, v47, v48, v49)
         && (v53 = (void *)objc_msgSend_disputedTerritoryName(v36, v50, v51, v52),
             objc_msgSend_length(v53, v54, v55, v56))))
      {
        v57 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        objc_msgSend_setObject_forKey_(v57, v58, (uint64_t)v36, (uint64_t)CFSTR("kCLGEOTerritoryInfoKey"));
        if (objc_msgSend_isDisputed(v36, v59, v60, v61))
        {
          v65 = (void *)MEMORY[0x1E0CB3940];
          v66 = objc_msgSend_uniqueIdentifier(v36, v62, v63, v64);
          v69 = objc_msgSend_stringWithFormat_(v65, v67, (uint64_t)CFSTR("%llX"), v68, v66);
          objc_msgSend_setObject_forKey_(v57, v70, v69, (uint64_t)CFSTR("kCLRegNameKey"));
          if (!((v32 == 0) | isDisputed & 1))
          {
            objc_msgSend_addObject_(v24, v71, v32, v73);
            isDisputed = 1;
            v32 = (uint64_t)v57;
          }
          v30 = &OBJC_METACLASS___CLHeadingInternal;
          if (v32)
          {
LABEL_31:
            objc_msgSend_addObject_(v24, v71, (uint64_t)v57, v73);
            goto LABEL_37;
          }
        }
        else
        {
          v75 = objc_msgSend_iso3166CountryCode(v36, v62, v63, v64);
          objc_msgSend_setObject_forKey_(v57, v76, v75, (uint64_t)CFSTR("kCLRegNameKey"));
          if (v32)
            goto LABEL_31;
        }
        isDisputed = objc_msgSend_isDisputed(v36, v71, v72, v73);
        v32 = (uint64_t)v57;
      }
      else
      {
        if (v30[5].isa != (__objc2_class *)-1)
          dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
        v74 = qword_1EE1720D0;
        if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v74, OS_LOG_TYPE_DEBUG, "#clreg,#map,response,#warning,invalidResultEntry,ignoring", buf, 2u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v30[5].isa != (__objc2_class *)-1)
            dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
          LOWORD(v102) = 0;
          v77 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "void CLRegulatoryConfigInternal::runMapInfoQuery(GEOLocation *, MapsInfoReply)_block_invoke", "CoreLocation: %s\n", v77);
          if (v77 != (char *)buf)
            free(v77);
        }
      }
LABEL_37:
      ++v35;
    }
    while (v31 != v35);
    v78 = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v27, (uint64_t)&v97, (uint64_t)v101, 16);
    v31 = v78;
  }
  while (v78);
  a1 = v96;
  if (v32)
  {
    v6 = *(uint64_t (**)(void))(*(_QWORD *)(v96 + 40) + 16);
    return v6();
  }
LABEL_7:
  v6 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  return v6();
}

void sub_18F6443E4(void *a1, void *a2, void *a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  NSObject *v19;
  char *v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a2
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && (v8 = objc_msgSend_objectForKey_(a2, v6, (uint64_t)CFSTR("kCLRegNameKey"), v7), a3)
    && v8
    && objc_msgSend_length(a3, v9, v10, v11))
  {
    v14 = objc_msgSend_objectForKey_(a2, v12, (uint64_t)CFSTR("kCLRegNameKey"), v13);
    if ((objc_msgSend_isEqual_(a3, v15, v14, v16) & 1) == 0)
      objc_msgSend_addObject_(a1, v17, (uint64_t)a2, v18);
  }
  else
  {
    if (qword_1EE1720C8 != -1)
      dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
    v19 = qword_1EE1720D0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138478083;
      v22 = a2;
      v23 = 2113;
      v24 = a3;
      _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_ERROR, "Invalid neighbor or excludeRegionName,%{private}@,%{private}@", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE1720C8 != -1)
        dispatch_once(&qword_1EE1720C8, &unk_1E2991C28);
      v20 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void CLRegulatoryConfigInternal::appendNeighbor(CLRegulatoryRegionMutableList, CLRegulatoryRegion, NSString *)", "CoreLocation: %s\n", v20);
      if (v20 != (char *)buf)
        free(v20);
    }
  }
}

uint64_t sub_18F644648(void *a1, void *a2, void *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, (const char *)a2, (uint64_t)&v11, (uint64_t)v15, 16);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)v12;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(a2);
        sub_18F6443E4(a1, *(void **)(*((_QWORD *)&v11 + 1) + 8 * v9++), a3);
      }
      while (v7 != v9);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v10, (uint64_t)&v11, (uint64_t)v15, 16);
      v7 = result;
    }
    while (result);
  }
  return result;
}

void sub_18F644740(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  _QWORD v19[8];

  v6 = *(_QWORD **)(a1 + 48);
  if (a2
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && (v9 = objc_msgSend_objectForKey_(a2, v7, (uint64_t)CFSTR("kCLRegNameKey"), v8), a3)
    && v9
    && objc_msgSend_count(a3, v10, v11, v12))
  {
    objc_msgSend_setHorizontalAccuracy_(*(void **)(a1 + 32), v13, v14, v15, (double)*(int *)(a1 + 56));
    v16 = a2;
    v17 = a3;
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = sub_18F64483C;
    v19[3] = &unk_1E2991BB8;
    v19[4] = a2;
    v19[5] = a3;
    v18 = *(void **)(a1 + 32);
    v19[6] = *(_QWORD *)(a1 + 40);
    v19[7] = v6;
    sub_18F6439CC((uint64_t)v6, v18, (uint64_t)v19);
  }
  else
  {
    sub_18F643424(v6, a2, (uint64_t)a3, *(_QWORD *)(a1 + 40));
  }
}

void sub_18F64483C(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;

  v5 = *(_QWORD **)(a1 + 56);
  if (!a2
    || (v6 = a2, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
    || !objc_msgSend_objectForKey_(v6, v7, (uint64_t)CFSTR("kCLRegNameKey"), v8))
  {
    v6 = *(void **)(a1 + 32);
  }
  v9 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v12 = (void *)objc_msgSend_objectForKey_(v6, v10, (uint64_t)CFSTR("kCLRegNameKey"), v11);
  sub_18F6443E4(v9, *(void **)(a1 + 32), v12);
  sub_18F644648(v9, *(void **)(a1 + 40), v12);
  sub_18F644648(v9, a3, v12);
  sub_18F643424(v5, v6, (uint64_t)v9, *(_QWORD *)(a1 + 48));

}

void sub_18F644924(uint64_t a1, void *a2, uint64_t a3)
{
  sub_18F643424(*(_QWORD **)(a1 + 40), a2, a3, *(_QWORD *)(a1 + 32));
}

void sub_18F644A04(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;
  uint64_t v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  v5 = sub_18F647334(v1);
  MEMORY[0x194002D30](v5, 0x10A0C400EC8F4ABLL);
  _Unwind_Resume(a1);
}

void sub_18F645448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

os_log_t sub_18F6472DC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F647308()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Utility", "Utility");
  qword_1EE1720D0 = (uint64_t)result;
  return result;
}

uint64_t sub_18F647334(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

unint64_t sub_18F647398(uint64_t a1)
{
  int v1;
  unint64_t v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v1 = *(char *)(a1 + 23);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = v1 < 0;
  if (v1 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (!v3)
    v2 = *(unsigned __int8 *)(a1 + 23);
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      v34 = 0x9DDFEA08EB382D69;
      v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      v50 = v46 + v48;
      v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      v53 = v44 + v46 + v47 + v2;
      v54 = v53 + v43;
      v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v47 + v2 + v43 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      v57 = v45 + v48 + v56;
      v58 = __ROR8__(v57, 44);
      v59 = v57 + v49;
      v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      v62 = *v4;
      v61 = v4 + 4;
      v63 = v62 - 0x4B6D499041670D8DLL * v43;
      v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v65 = *(v61 - 3);
        v66 = v63 + v54 + v50 + v65;
        v67 = v61[2];
        v68 = v61[3];
        v69 = v61[1];
        v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        v70 = v52 + v59;
        v71 = *(v61 - 2);
        v72 = *(v61 - 1);
        v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        v74 = v73 + v59 + v72;
        v75 = v73 + v65 + v71;
        v54 = v75 + v72;
        v76 = __ROR8__(v75, 44) + v73;
        v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        v55 = v76 + __ROR8__(v74 + v77, 21);
        v78 = v63 + v60 + *v61;
        v59 = v69 + v67 + v78 + v68;
        v60 = __ROR8__(v69 + v67 + v78, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        v52 = v77;
        v64 += 64;
      }
      while (v64);
      v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      v9 = (char *)v4 + v2;
      v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      v12 = v4[1];
      v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      v16 = v4 + 2;
      v14 = v4[2];
      v15 = v16[1];
      v17 = __ROR8__(v13 + v15, 52);
      v18 = __ROR8__(v13, 37);
      v19 = v13 + v12;
      v20 = __ROR8__(v19, 7);
      v21 = v19 + v14;
      v22 = v20 + v18;
      v23 = *((_QWORD *)v9 - 4) + v14;
      v24 = v11 + v15;
      v25 = __ROR8__(v24 + v23, 52);
      v26 = v22 + v17;
      v27 = __ROR8__(v23, 37);
      v28 = *((_QWORD *)v9 - 3) + v23;
      v29 = __ROR8__(v28, 7);
      v30 = v26 + __ROR8__(v21, 31);
      v31 = v28 + v10;
      v32 = v31 + v24;
      v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      v34 = 0x9AE16A3B2F90404FLL;
      v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      v36 = v4[1];
      v37 = 0xB492B66FBE98F273 * *v4;
      v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      v41 = 0x9DDFEA08EB382D69 * ((v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)) ^ v40);
      v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      v5 = *v4;
      v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      v82 = *(_DWORD *)v4;
      v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL sub_18F6477E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

unsigned __int8 *sub_18F647888(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = sub_18F647398((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (sub_18F6477E8(i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

uint64_t *sub_18F647980(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    v3 = *(_QWORD *)(v2 + 40);
    v4 = *(_QWORD *)(v2 + 48);
    while (v3 != v4)
    {

      v3 += 32;
    }
    for (i = v2 + 16; ; *(id *)(i + 40))
    {
      i = *(_QWORD *)i;
      if (!i)
        break;
    }
    dispatch_release(*(dispatch_object_t *)(v2 + 64));
    v6 = *(void **)(v2 + 40);
    if (v6)
    {
      *(_QWORD *)(v2 + 48) = v6;
      operator delete(v6);
    }
    sub_18F647334(v2);
    JUMPOUT(0x194002D30);
  }
  return result;
}

void sub_18F647A34(_QWORD *a1)
{
  NSObject *v1;
  char *v2;
  void *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a1[325])
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v1 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_INFO, "CLMM,Vehicle,Maps API already initialized", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual void CLGeoMapFeatureAccessGeometry::initializeMapsAPI()", "CoreLocation: %s\n", v2);
    if (v2 == (char *)buf)
      return;
LABEL_32:
    free(v2);
    return;
  }
  v3 = a1;
  a1[326] = dispatch_queue_create("cl_geo_access_map_feature_geometry_queue", 0);
  v4 = objc_alloc(MEMORY[0x1E0D27198]);
  v7 = (void *)objc_msgSend_initWithQueue_(v4, v5, *((_QWORD *)v3 + 326), v6);
  *((_QWORD *)v3 + 325) = v7;
  if (v7)
  {
    objc_msgSend_setAllowNetworkTileLoad_(v7, v8, 1, v9);
    objc_msgSend_setFlipNegativeTravelDirectionRoads_(*((void **)v3 + 325), v10, 1, v11);
    objc_msgSend_setVisitDoubleTravelDirectionRoadsTwice_(*((void **)v3 + 325), v12, 1, v13);
    objc_msgSend_setAllowStaleData_(*((void **)v3 + 325), v14, 1, v15);
    objc_msgSend_setAllowOfflineData_(*((void **)v3 + 325), v16, 1, v17);
    v18 = (const char *)&OBJC_METACLASS___CLHeadingInternal;
    if (qword_1EE172158 == -1)
      goto LABEL_13;
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v24 = off_1EE172160;
    v18 = "assert";
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v33 = 0;
      v34 = 2082;
      v35 = "";
      v36 = 2082;
      v37 = "assert";
      v38 = 2081;
      v39 = "fGEOMapFeatureAccess != nullptr";
      _os_log_impl(&dword_18F5B3000, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
    }
    v25 = off_1EE172160;
    if (os_signpost_enabled((os_log_t)off_1EE172160))
    {
      *(_DWORD *)buf = 68289539;
      v33 = 0;
      v34 = 2082;
      v35 = "";
      v36 = 2082;
      v37 = "assert";
      v38 = 2081;
      v39 = "fGEOMapFeatureAccess != nullptr";
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed,fGEOMapFeatureAccess==nil", "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
    }
    v3 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v33 = 0;
      v34 = 2082;
      v35 = "";
      v36 = 2082;
      v37 = "assert";
      v38 = 2081;
      v39 = "fGEOMapFeatureAccess != nullptr";
      _os_log_impl(&dword_18F5B3000, (os_log_t)v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    v30 = 46;
    v31 = "initializeMapsAPI";
    v29 = "/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Daemon/Positioning/MapMatching/CLGeoMapFeatureAccessGeometry.mm";
    abort_report_np();
  }
  dispatch_once(&qword_1EE172158, &unk_1E2990410);
LABEL_13:
  v19 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEFAULT))
  {
    v23 = objc_msgSend_allowStaleData(*((void **)v3 + 325), v20, v21, v22);
    *(_DWORD *)buf = 67240192;
    v33 = v23;
    _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_DEFAULT, "CLMM,Vehicle,using maps API,stale data,%{public}d", buf, 8u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (*((_QWORD *)v18 + 43) != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    objc_msgSend_allowStaleData(*((void **)v3 + 325), v26, v27, v28, v29, v30, v31);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual void CLGeoMapFeatureAccessGeometry::initializeMapsAPI()", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      goto LABEL_32;
  }
}

id sub_18F647F84(uint64_t a1, _QWORD *a2)
{
  id v3;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  const char *v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __objc2_class *v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  double v59;
  double v60;
  double v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  NSObject *v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _QWORD v91[5];
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  _BYTE v101[128];
  _BYTE v102[24];
  _BYTE *v103;
  int v104;
  uint64_t v105;
  int *v106;
  uint8_t buf[4];
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v12 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v108 = v13;
      _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v83 = *(_QWORD *)(a1 + 8);
    v104 = 134349056;
    v105 = v83;
    v82 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const", "CoreLocation: %s\n", v82);
    goto LABEL_78;
  }
  if (*(_BYTE *)(a1 + 33))
    return 0;
  v3 = a2;
  if (!*(_QWORD *)(a1 + 2600) || *a2 == 0)
    return 0;
  v8 = (void *)MEMORY[0x1940032C4]();
  v93 = 0;
  v94 = 0;
  v9 = *(uint64_t **)(*(_QWORD *)v3 + 136);
  if (*(uint64_t **)(*(_QWORD *)v3 + 144) == v9)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v10 = *v9;
    v11 = v9[1];
  }
  v93 = v10;
  v94 = v11;
  v15 = (void *)objc_msgSend_array(MEMORY[0x1E0C99DE8], v5, v6, v7);
  v91[0] = MEMORY[0x1E0C809B0];
  v91[1] = 3221225472;
  v91[2] = sub_18F648974;
  v91[3] = &unk_1E2991C50;
  v91[4] = v15;
  v92 = v91;
  v16 = operator new(0x20uLL);
  *v16 = &off_1E298FD20;
  v16[1] = a1;
  v17 = v16 + 1;
  v16[2] = &v93;
  v16[3] = &v92;
  v106 = (int *)v16;
  ++*(_DWORD *)(a1 + 36);
  v18 = (char *)operator new(0x20uLL);
  *(_QWORD *)v18 = &off_1E298FD20;
  *(_OWORD *)(v18 + 8) = *(_OWORD *)v17;
  *((_QWORD *)v18 + 3) = v17[2];
  v103 = v18;
  v20 = sub_18F6489D4((uint64_t)v102);
  v21 = v103;
  if (v103 == v102)
  {
    v22 = 4;
    v21 = v102;
  }
  else
  {
    if (!v103)
      goto LABEL_22;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_22:
  if (v20)
  {
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v19, (uint64_t)&v87, (uint64_t)v101, 16);
    if (v26)
    {
      v86 = v8;
      v27 = &OBJC_METACLASS___CLHeadingInternal;
      v28 = *(_QWORD *)v88;
      while (2)
      {
        for (i = 0; i != v26; ++i)
        {
          if (*(_QWORD *)v88 != v28)
            objc_enumerationMutation(v15);
          v30 = *(void **)(*((_QWORD *)&v87 + 1) + 8 * i);
          if (objc_msgSend_roadID(v30, v23, v24, v25) == **(_QWORD **)v3)
          {
            if ((unint64_t)objc_msgSend_coordinateCount(v30, v23, v24, v25) > 1)
            {
              v57 = objc_msgSend_coordinateCount(v30, v31, v32, v33);
              v58 = *(double **)(*(_QWORD *)v3 + 136);
              if (*(double **)(*(_QWORD *)v3 + 144) == v58)
              {
                v60 = 0.0;
                v59 = 0.0;
              }
              else
              {
                v60 = *v58;
                v59 = v58[1];
              }
              v61 = *(double *)objc_msgSend_coordinates(v30, v54, v55, v56);
              v65 = objc_msgSend_coordinates(v30, v62, v63, v64);
              if (vabdd_f64(v60, v61) < 0.00000001 && vabdd_f64(v59, *(double *)(v65 + 8)) < 0.00000001)
              {
                v66 = *(_QWORD *)(*(_QWORD *)v3 + 144);
                if (v66 == *(_QWORD *)(*(_QWORD *)v3 + 136))
                {
                  v68 = 0.0;
                  v67 = 0.0;
                }
                else
                {
                  v68 = *(double *)(v66 - 16);
                  v67 = *(double *)(v66 - 8);
                }
                v69 = *(double *)(objc_msgSend_coordinates(v30, v23, v24, v25) + 16 * (v57 - 1));
                v73 = objc_msgSend_coordinates(v30, v70, v71, v72);
                if (vabdd_f64(v68, v69) < 0.00000001
                  && vabdd_f64(v67, *(double *)(v73 + 16 * (v57 - 1) + 8)) < 0.00000001)
                {
                  v3 = v30;
                  v74 = 0;
                  goto LABEL_59;
                }
              }
            }
            else
            {
              if (v27[8].vtable != (void *)-1)
                dispatch_once(&qword_1EE172158, &unk_1E2990410);
              v34 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                v38 = *(_QWORD *)(a1 + 8);
                v39 = objc_msgSend_roadID(v30, v35, v36, v37);
                v43 = objc_msgSend_coordinateCount(v30, v40, v41, v42);
                *(_DWORD *)buf = 134349569;
                v108 = v38;
                v109 = 2049;
                v110 = v39;
                v111 = 2050;
                v112 = v43;
                _os_log_impl(&dword_18F5B3000, v34, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject, GEOMapFeatureRoad id,%{private}lld,has less than two coordinate,%{public}ld", buf, 0x20u);
                v27 = &OBJC_METACLASS___CLHeadingInternal;
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (v27[8].vtable != (void *)-1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990410);
                v47 = *(_QWORD *)(a1 + 8);
                v48 = objc_msgSend_roadID(v30, v44, v45, v46);
                v52 = objc_msgSend_coordinateCount(v30, v49, v50, v51);
                v95 = 134349569;
                v96 = v47;
                v97 = 2049;
                v98 = v48;
                v99 = 2050;
                v100 = v52;
                v53 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const", "CoreLocation: %s\n", v53);
                v27 = &OBJC_METACLASS___CLHeadingInternal;
                if (v53 != (char *)buf)
                  free(v53);
              }
            }
          }
        }
        v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v23, (uint64_t)&v87, (uint64_t)v101, 16);
        if (v26)
          continue;
        break;
      }
      v74 = 1;
LABEL_59:
      v8 = v86;
    }
    else
    {
      v74 = 1;
    }
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v75 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v76 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v108 = v76;
      _os_log_impl(&dword_18F5B3000, v75, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,query failed (getGeoMapFeatureRoadObject)", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v84 = *(_QWORD *)(a1 + 8);
      v95 = 134349056;
      v96 = v84;
      v85 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const", "CoreLocation: %s\n", v85);
      if (v85 != (char *)buf)
        free(v85);
      v74 = 0;
      v3 = 0;
    }
    else
    {
      v74 = 0;
      v3 = 0;
    }
  }
  v77 = v106;
  if (v106 == &v104)
  {
    v78 = 4;
    v77 = &v104;
  }
  else
  {
    if (!v106)
      goto LABEL_66;
    v78 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v77 + 8 * v78))();
LABEL_66:
  objc_autoreleasePoolPop(v8);
  if (!v74)
    return v3;
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990410);
  v79 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    v80 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 134349056;
    v108 = v80;
    _os_log_impl(&dword_18F5B3000, v79, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject Unable to find roads", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v81 = *(_QWORD *)(a1 + 8);
    v104 = 134349056;
    v105 = v81;
    v82 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const", "CoreLocation: %s\n", v82);
LABEL_78:
    if (v82 != (char *)buf)
      free(v82);
  }
  return 0;
}

void sub_18F6488D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char *a58)
{
  char *v59;
  uint64_t v60;

  v59 = a58;
  if (a58 == &a55)
  {
    v60 = 4;
    v59 = &a55;
  }
  else
  {
    if (!a58)
      goto LABEL_6;
    v60 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v59 + 8 * v60))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F648974(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  uint64_t v12;

  if ((objc_msgSend_isRail(a2, (const char *)a2, a3, a4) & 1) != 0)
    return objc_msgSend_addObject_(*(void **)(a1 + 32), v6, (uint64_t)a2, v8);
  result = objc_msgSend_travelDirection(a2, v6, v7, v8);
  if ((_DWORD)result != 6)
  {
    result = objc_msgSend_travelDirection(a2, v10, v11, v12);
    if ((_DWORD)result != 255)
      return objc_msgSend_addObject_(*(void **)(a1 + 32), v6, (uint64_t)a2, v8);
  }
  return result;
}

BOOL sub_18F6489D4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  dispatch_time_t v5;
  intptr_t v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  _BOOL8 v13;
  uint64_t v15;
  char *v16;
  char *v17;
  _QWORD v18[7];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  dispatch_group_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t v34;
  uint8_t buf[1640];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = &v29;
  v31 = 0x2020000000;
  v32 = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x3052000000;
  v26 = sub_18F64F26C;
  v27 = sub_18F64F27C;
  v28 = 0;
  v28 = dispatch_group_create();
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_18F64F288;
  v18[3] = &unk_1E2991CF0;
  v18[4] = &v29;
  v18[5] = &v23;
  v18[6] = &v19;
  dispatch_group_enter((dispatch_group_t)v24[5]);
  *(_QWORD *)buf = v18;
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    sub_18F64F8F4();
  v3 = (void *)(*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v2 + 48))(v2, buf);
  v4 = v24[5];
  v5 = dispatch_time(0, 100000000);
  v6 = dispatch_group_wait(v4, v5);
  v20[3] = v6;
  if (v6)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v7 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v8 = v20[3];
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEBUG, "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v15 = v20[3];
      v33 = 134349056;
      v34 = v15;
      v16 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
    objc_msgSend_cancel(v3, v9, v10, v11);
  }
  else if (v24[5])
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v12 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      LOWORD(v33) = 0;
      v17 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "CoreLocation: %s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }

    v24[5] = 0;
  }
  if (v20[3])
    v13 = 0;
  else
    v13 = *((_BYTE *)v30 + 24) == 0;
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v29, 8);
  return v13;
}

void sub_18F648E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F648E70(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v4;
  void *v7;
  double v8;
  unsigned int v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  _OWORD *v26;
  char *v27;
  __int128 v28;
  const char *v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  const char *v40;
  __n128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  NSObject *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  double *v50;
  uint64_t v56;
  double *v57;
  unint64_t v58;
  __int128 v59;
  double v60;
  double v61;
  double v62;
  uint64_t v63;
  double v64;
  double v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  _BOOL4 v82;
  double v83;
  NSObject *v84;
  NSObject *v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  char *v89;
  double v90;
  unsigned __int8 v91;
  float v92;
  float v93;
  int v94;
  NSObject *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  __int128 v116;
  uint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _QWORD v124[5];
  char *v125;
  char *v126;
  uint64_t v127;
  __int128 v128;
  double v129;
  double v130;
  _BYTE v131[32];
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _BYTE v144[64];
  __int16 v145;
  uint64_t v146;
  int v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _BYTE v151[80];
  uint64_t v152;
  unint64_t v153;
  __n128 v154;
  float v155;
  __int16 v156;
  float v157;
  __int128 v158;
  unint64_t v159;
  _BYTE v160[128];
  _BYTE v161[24];
  _BYTE *v162;
  __int128 v163;
  _BYTE buf[1628];
  uint64_t v165;

  v4 = a1;
  v165 = *MEMORY[0x1E0C80C00];
  v129 = a4;
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v21 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v22 = *(_QWORD *)(v4 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v22;
      _os_log_impl(&dword_18F5B3000, v21, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v106 = *(_QWORD *)(v4 + 8);
      *(_DWORD *)v131 = 134349056;
      *(_QWORD *)&v131[4] = v106;
      v107 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v107);
      if (v107 != buf)
        free(v107);
    }
    return 0;
  }
  v7 = (void *)MEMORY[0x1940032C4]();
  v128 = *(_OWORD *)(a3 + 56);
  v8 = round(a4);
  v9 = (v8 + v8);
  if (v9 >= 0x1F4)
    v10 = 500;
  else
    v10 = v9;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  sub_18F64A2C0(&v125, v10);
  v118 = v4;
  if (!*(_BYTE *)(v4 + 33))
  {
    v24 = (void *)objc_msgSend_array(MEMORY[0x1E0C99DE8], v11, v12, v13);
    v124[0] = MEMORY[0x1E0C809B0];
    v124[1] = 3221225472;
    v124[2] = sub_18F64A364;
    v124[3] = &unk_1E2991C50;
    v124[4] = v24;
    *(_QWORD *)&v163 = v124;
    v25 = operator new(0x28uLL);
    *v25 = &off_1E298FCC8;
    v25[1] = v4;
    v26 = v25 + 1;
    v25[2] = &v128;
    v25[3] = &v129;
    v25[4] = &v163;
    *(_QWORD *)&v131[24] = v25;
    ++*(_DWORD *)(v4 + 36);
    v27 = (char *)operator new(0x28uLL);
    *(_QWORD *)v27 = &off_1E298FCC8;
    v28 = v26[1];
    *(_OWORD *)(v27 + 8) = *v26;
    *(_OWORD *)(v27 + 24) = v28;
    v162 = v27;
    v30 = sub_18F6489D4((uint64_t)v161);
    v31 = v162;
    if (v162 == v161)
    {
      v32 = 4;
      v31 = v161;
    }
    else
    {
      if (!v162)
        goto LABEL_42;
      v32 = 5;
    }
    (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_42:
    if (v30)
    {
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v29, (uint64_t)&v120, (uint64_t)v160, 16);
      if (v37)
      {
        v38 = *(_QWORD *)v121;
        do
        {
          for (i = 0; i != v37; ++i)
          {
            if (*(_QWORD *)v121 != v38)
              objc_enumerationMutation(v24);
            v41.n128_f64[0] = sub_18F62516C(*(void **)(*((_QWORD *)&v120 + 1) + 8 * i), 1, v36, (std::string **)buf);
            if (*(_QWORD *)buf)
              sub_18F623AB8(&v125, (__int128 *)buf);
            v42 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v43 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v42->__on_zero_shared)(v42, v41);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
          }
          v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v40, (uint64_t)&v120, (uint64_t)v160, 16, v41.n128_f64[0]);
        }
        while (v37);
      }
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v45 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        v46 = *(_QWORD *)(v4 + 8);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v46;
        _os_log_impl(&dword_18F5B3000, v45, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,query failed (roadsWithinDistance)", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990410);
        v111 = *(_QWORD *)(v4 + 8);
        v154.n128_u32[0] = 134349056;
        *(unint64_t *)((char *)v154.n128_u64 + 4) = v111;
        v112 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v112);
        if (v112 != buf)
          free(v112);
      }
    }
    v47 = *(_QWORD **)&v131[24];
    if (*(_BYTE **)&v131[24] == v131)
    {
      v48 = 4;
      v47 = v131;
    }
    else
    {
      if (!*(_QWORD *)&v131[24])
        goto LABEL_68;
      v48 = 5;
    }
    (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_68:
    if (!v30)
      goto LABEL_138;
LABEL_69:
    v49 = (uint64_t *)v125;
    v23 = 1;
    v117 = (uint64_t *)v126;
    if (v125 == v126)
      goto LABEL_139;
    v50 = (double *)(v4 + 56);
    __asm { FMOV            V0.2D, #-1.0 }
    v116 = _Q0;
    while (1)
    {
      if (!*v49)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990410);
        v103 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          v104 = *(_QWORD *)(v4 + 8);
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v104;
          _os_log_impl(&dword_18F5B3000, v103, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr", buf, 0xCu);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990410);
          v113 = *(_QWORD *)(v118 + 8);
          *(_DWORD *)v131 = 134349056;
          *(_QWORD *)&v131[4] = v113;
          v114 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v114);
          if (v114 != buf)
            free(v114);
        }
        sub_18F64F950(a2);
        goto LABEL_138;
      }
      if (!sub_18F7059E4(*v49))
        goto LABEL_121;
      v154 = 0uLL;
      v155 = 0.0;
      v156 = 1;
      v157 = 0.0;
      v159 = 0;
      v158 = 0uLL;
      *(_QWORD *)v131 = 0;
      *(_QWORD *)&v131[8] = 0;
      *(_OWORD *)&v131[16] = v116;
      v132 = 0;
      v133 = 0;
      v134 = 0xBFF0000000000000;
      v146 = 0;
      v147 = 0;
      memset(&v144[32], 0, 32);
      v145 = 0;
      v148 = 0u;
      v149 = 0u;
      v150 = 0u;
      memset(v151, 0, 27);
      memset(&v151[32], 0, 48);
      v143 = 0u;
      memset(v144, 0, 30);
      v141 = 0u;
      v142 = 0u;
      v139 = 0u;
      v140 = 0u;
      v137 = 0u;
      v138 = 0u;
      v135 = 0u;
      v136 = 0u;
      v153 = 0xBFF0000000000000;
      v152 = 0;
      v56 = *v49;
      v57 = *(double **)(*v49 + 136);
      v58 = *(_QWORD *)(*v49 + 144) - (_QWORD)v57;
      v119 = 0xBFF0000000000000;
      if ((int)(v58 >> 4) <= 1)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990410);
        v84 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v84, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990410);
          LOWORD(v163) = 0;
          v100 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "CoreLocation: %s\n", v100);
          if (v100 != buf)
            free(v100);
        }
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990410);
        v85 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          v86 = *(_QWORD *)(v118 + 8);
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v86;
          _os_log_impl(&dword_18F5B3000, v85, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,findClosestPointOnRoad returned false", buf, 0xCu);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990410);
          v88 = *(_QWORD *)(v118 + 8);
          LODWORD(v163) = 134349056;
          *(_QWORD *)((char *)&v163 + 4) = v88;
          v89 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v89);
          if (v89 != buf)
            free(v89);
        }
        goto LABEL_112;
      }
      v59 = v128;
      v60 = *v57;
      v61 = v57[1];
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)buf = 0;
      v62 = 0.0;
      sub_18F5BD37C(v50, (double *)buf, (double *)&buf[8], (double *)&v163, *(double *)&v128, *((double *)&v128 + 1), 0.0, v60, v61, 0.0);
      v63 = 0;
      v64 = *(double *)buf;
      v65 = *(double *)&buf[8];
      v66 = (v58 >> 4) - 1;
      v67 = -1.0;
      v68 = 0.0;
      do
      {
        v69 = v64;
        v70 = v65;
        v71 = *(_QWORD *)(v56 + 136) + v63;
        v72 = *(double *)(v71 + 16);
        v73 = *(double *)(v71 + 24);
        v163 = 0uLL;
        sub_18F5BD37C(v50, (double *)&v163, (double *)&v163 + 1, &v130, *(double *)&v59, *((double *)&v59 + 1), 0.0, v72, v73, 0.0);
        v65 = *((double *)&v163 + 1);
        v64 = *(double *)&v163;
        v74 = (v69 - *(double *)&v163) * (v69 - *(double *)&v163)
            + (v70 - *((double *)&v163 + 1)) * (v70 - *((double *)&v163 + 1));
        v75 = 0.0;
        v76 = 0.0 - v69;
        if (v74 < 0.001)
        {
          v77 = v76 * v76;
          v78 = 0.0 - v70;
LABEL_77:
          v79 = v77 + v78 * v78;
          goto LABEL_82;
        }
        v75 = ((0.0 - v70) * (*((double *)&v163 + 1) - v70) + v76 * (*(double *)&v163 - v69)) / v74;
        if (v75 >= 0.0)
        {
          if (v75 <= 1.0)
          {
            v77 = (0.0 - (v69 + (*(double *)&v163 - v69) * v75)) * (0.0 - (v69 + (*(double *)&v163 - v69) * v75));
            v78 = 0.0 - (v70 + (*((double *)&v163 + 1) - v70) * v75);
            goto LABEL_77;
          }
          v79 = (0.0 - *(double *)&v163) * (0.0 - *(double *)&v163)
              + (0.0 - *((double *)&v163 + 1)) * (0.0 - *((double *)&v163 + 1));
          v75 = 1.0;
        }
        else
        {
          v79 = v76 * v76 + (0.0 - v70) * (0.0 - v70);
          v75 = 0.0;
        }
LABEL_82:
        v80 = sqrt(v74);
        v81 = sqrt(v79);
        v82 = v67 < 0.0;
        if (v81 < v67)
          v82 = 1;
        v83 = v68 + v80 * v75;
        if (v82)
        {
          v67 = v81;
          v62 = v83;
        }
        v68 = v68 + v80;
        v63 += 16;
        --v66;
      }
      while (v66);
      v90 = v62 / v68;
      if (v68 < 0.001)
        v90 = 0.0;
      v119 = *(_QWORD *)&v90;
      v91 = *(_DWORD *)(*v49 + 72) != 2;
      if ((sub_18F6F0B68(v118, (uint64_t)v131, v49, v91, (double *)&v119, 1) & 1) != 0)
      {
        sub_18F623A40(&v154, v49);
        v92 = v67;
        v155 = v92;
        v158 = v141;
        v93 = *(double *)&v142;
        v157 = v93;
        v159 = v119;
        v156 = v91;
        v87 = sub_18F64A3C4((__n128 **)a2, &v154);
        v94 = 1;
        goto LABEL_113;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v95 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        v96 = *(_QWORD *)(v118 + 8);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v96;
        _os_log_impl(&dword_18F5B3000, v95, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,interpolateOnRoad returned false", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990410);
        v101 = *(_QWORD *)(v118 + 8);
        LODWORD(v163) = 134349056;
        *(_QWORD *)((char *)&v163 + 4) = v101;
        v102 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v102);
        if (v102 != buf)
          free(v102);
        v94 = 0;
      }
      else
      {
LABEL_112:
        v94 = 0;
      }
LABEL_113:
      if (SHIBYTE(v140) < 0)
        operator delete(*((void **)&v139 + 1));
      v97 = (std::__shared_weak_count *)v154.n128_u64[1];
      if (v154.n128_u64[1])
      {
        v98 = (unint64_t *)(v154.n128_u64[1] + 8);
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v97->__on_zero_shared)(v97, v87);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v4 = v118;
      if (!v94)
      {
        v23 = 0;
        goto LABEL_139;
      }
LABEL_121:
      v49 += 2;
      if (v49 == v117)
      {
        v23 = 1;
        goto LABEL_139;
      }
    }
  }
  if (!*(_QWORD *)(v4 + 16))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v33 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v34 = *(_QWORD *)(v4 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v34;
      _os_log_impl(&dword_18F5B3000, v33, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,roadsWithinDistance,fRoadGeometryBuffer is unexpectedly nullptr", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_138;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v35 = *(_QWORD *)(v4 + 8);
    *(_DWORD *)v131 = 134349056;
    *(_QWORD *)&v131[4] = v35;
    v20 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v20);
    goto LABEL_38;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990410);
  v14 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(_QWORD *)(v4 + 8);
    v16 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 336) - *(_QWORD *)(*(_QWORD *)(v4 + 16) + 328)) >> 4;
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v16;
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,RoadBuffer,findRoadsNear fRoadBuffer.size,%{public}lu", buf, 0x16u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v108 = *(_QWORD *)(v4 + 8);
    v109 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 336) - *(_QWORD *)(*(_QWORD *)(v4 + 16) + 328)) >> 4;
    *(_DWORD *)v131 = 134349312;
    *(_QWORD *)&v131[4] = v108;
    *(_WORD *)&v131[12] = 2050;
    *(_QWORD *)&v131[14] = v109;
    v110 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v110);
    if (v110 != buf)
      free(v110);
  }
  if ((sub_18F620640(*(_QWORD *)(v4 + 16), (uint64_t)&v125, 1, *(double *)(a3 + 56), *(double *)(a3 + 64), v129) & 1) != 0)
    goto LABEL_69;
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990410);
  v17 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v18 = *(_QWORD *)(v4 + 8);
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v18;
    _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Warning,RoadBuffer,findRoadsNear returned false", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v19 = *(_QWORD *)(v4 + 8);
    *(_DWORD *)v131 = 134349056;
    *(_QWORD *)&v131[4] = v19;
    v20 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v20);
LABEL_38:
    if (v20 != buf)
      free(v20);
  }
LABEL_138:
  v23 = 0;
LABEL_139:
  *(_QWORD *)buf = &v125;
  sub_18F62AB98((void ***)buf);
  objc_autoreleasePoolPop(v7);
  return v23;
}

void sub_18F64A1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  a45 = (uint64_t)&a38;
  sub_18F62AB98((void ***)&a45);
  _Unwind_Resume(a1);
}

uint64_t sub_18F64A2C0(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)sub_18F62AB64(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 16;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[16 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return sub_18F62C334((uint64_t)&v14);
  }
  return result;
}

uint64_t sub_18F64A364(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  uint64_t v12;

  if ((objc_msgSend_isRail(a2, (const char *)a2, a3, a4) & 1) != 0)
    return objc_msgSend_addObject_(*(void **)(a1 + 32), v6, (uint64_t)a2, v8);
  result = objc_msgSend_travelDirection(a2, v6, v7, v8);
  if ((_DWORD)result != 6)
  {
    result = objc_msgSend_travelDirection(a2, v10, v11, v12);
    if ((_DWORD)result != 255)
      return objc_msgSend_addObject_(*(void **)(a1 + 32), v6, (uint64_t)a2, v8);
  }
  return result;
}

__n128 sub_18F64A3C4(__n128 **a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 result;
  __n128 v9;
  unint64_t v10;

  v4 = (__n128 *)operator new(0x48uLL);
  v5 = a2->n128_u64[1];
  v4[1].n128_u64[0] = a2->n128_u64[0];
  v4[1].n128_u64[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = a2[1];
  v9 = a2[2];
  v4[2] = result;
  v4[3] = v9;
  v4[4].n128_u64[0] = a2[3].n128_u64[0];
  v10 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(_QWORD *)(v10 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_18F64A438(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  char *v5;
  uint8_t buf[4];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v2 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v3 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v7 = v3;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsConnected(CLMapGeometry::ConnectedQueryResultList &, const CLMapRoadPtr &, BOOL, double, double, BOOL) const", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
  return 0;
}

uint64_t sub_18F64A5F4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5, uint64_t *a6, int a7, double *a8, double a9, double a10)
{
  uint64_t v12;
  int v14;
  double v17;
  uint64_t v19;
  double v20;
  NSObject *v21;
  unint64_t v22;
  NSObject *v23;
  unint64_t v24;
  _BOOL8 v25;
  double v26;
  uint64_t v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t *v33;
  uint64_t *v34;
  __n128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *j;
  __n128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  unint64_t v49;
  uint64_t v50;
  __n128 *v51;
  _QWORD *v52;
  BOOL v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *i;
  __n128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  NSObject *v62;
  unint64_t v63;
  NSObject *v64;
  unint64_t v65;
  _QWORD *v66;
  BOOL v67;
  _QWORD *v68;
  uint64_t v69;
  NSObject *v70;
  unint64_t v71;
  NSObject *v72;
  unint64_t v73;
  uint64_t v75;
  __n128 *v76;
  uint64_t v77;
  __n128 *v78;
  uint64_t v79;
  __n128 *v80;
  _QWORD v82[5];
  _QWORD *v83;
  _QWORD v84[5];
  _QWORD *v85;
  _QWORD v86[9];
  uint64_t v87;
  __n128 **v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t *, uint64_t);
  void (*v91)(uint64_t);
  uint64_t v92;
  uint64_t v93[3];
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  char v97;
  double v98;
  char v99;
  _BYTE v100[24];
  _BYTE *v101;
  _BYTE v102[24];
  _BYTE *v103;
  _BYTE v104[12];
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t *, uint64_t);
  void (*v110)(uint64_t);
  uint64_t v111;
  uint64_t v112[4];
  __n128 buf;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v99 = a7;
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v21 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v22 = *(_QWORD *)(a1 + 8);
      buf.n128_u32[0] = 134349056;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v22;
      _os_log_impl(&dword_18F5B3000, v21, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(&buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_134;
LABEL_145:
    dispatch_once(&qword_1EE172158, &unk_1E2990410);
LABEL_134:
    v75 = *(_QWORD *)(a1 + 8);
    LODWORD(v107) = 134349056;
    *(_QWORD *)((char *)&v107 + 4) = v75;
    v76 = (__n128 *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "CoreLocation: %s\n", (const char *)v76);
    if (v76 != &buf)
      free(v76);
    return 0;
  }
  v12 = *a6;
  if (*a6)
  {
    v14 = a7;
    v17 = a9;
    if ((a5 & 1) == 0)
    {
      v14 = a7 ^ 1;
      v99 = a7 ^ 1;
    }
    v19 = *(_QWORD *)v12;
    if (v14)
    {
      v20 = 1.0 - a9;
      sub_18F7047B4(v12);
      v17 = *(double *)(v12 + 40);
    }
    else
    {
      sub_18F7047B4(v12);
      v20 = *(double *)(v12 + 40);
    }
    *a8 = v17 * v20;
    if (v17 * v20 > a10)
    {
      *a8 = -1.0;
      return 1;
    }
    v26 = 1.0;
    if (!v14)
      v26 = 0.0;
    v98 = v26;
    v27 = sub_18F6F0B68(a1, a2, a6, v14, &v98, 1);
    if (!((unint64_t)a3 | (unint64_t)a4))
      return 1;
    v94 = 0;
    v95 = &v94;
    v96 = 0x2020000000;
    v97 = 0;
    *(_QWORD *)&v107 = 0;
    *((_QWORD *)&v107 + 1) = &v107;
    v108 = 0x4812000000;
    v109 = sub_18F5CD7F0;
    v110 = sub_18F5CD784;
    v111 = 0;
    v112[0] = (uint64_t)v112;
    v112[1] = (uint64_t)v112;
    v112[2] = 0;
    v87 = 0;
    v88 = (__n128 **)&v87;
    v89 = 0x4812000000;
    v90 = sub_18F5CD7F0;
    v91 = sub_18F5CD784;
    v92 = 0;
    v93[0] = (uint64_t)v93;
    v93[1] = (uint64_t)v93;
    v93[2] = 0;
    v28 = (void *)MEMORY[0x1940032C4](v27);
    v86[0] = MEMORY[0x1E0C809B0];
    v86[1] = 3221225472;
    v86[2] = sub_18F64B8A4;
    v86[3] = &unk_1E2991C78;
    v86[7] = a1;
    v86[8] = v19;
    v86[4] = &v94;
    v86[5] = &v107;
    v86[6] = &v87;
    v84[0] = MEMORY[0x1E0C809B0];
    v84[1] = 3221225472;
    v84[2] = sub_18F64BDCC;
    v84[3] = &unk_1E2991CA0;
    v84[4] = v86;
    v85 = v84;
    v82[0] = MEMORY[0x1E0C809B0];
    v82[1] = 3221225472;
    v82[2] = sub_18F64BDDC;
    v82[3] = &unk_1E2991CA0;
    v82[4] = v86;
    v83 = v82;
    v29 = a4;
    if (!a3)
    {
LABEL_61:
      if (!v29)
      {
LABEL_90:
        v25 = *((_BYTE *)v95 + 24) == 0;
LABEL_131:
        objc_autoreleasePoolPop(v28);
        _Block_object_dispose(&v87, 8);
        sub_18F64F950(v93);
        _Block_object_dispose(&v107, 8);
        sub_18F64F950(v112);
        _Block_object_dispose(&v94, 8);
        return v25;
      }
      if (*(_BYTE *)(a1 + 33))
      {
        v105 = 0uLL;
        v106 = 0;
        sub_18F64A2C0((char **)&v105, 3uLL);
        v47 = *(_QWORD *)(a1 + 16);
        if (v47)
        {
          if (v99)
          {
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990410);
            v48 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
            {
              v49 = *(_QWORD *)(a1 + 8);
              buf.n128_u32[0] = 134349056;
              *(unint64_t *)((char *)buf.n128_u64 + 4) = v49;
              _os_log_impl(&dword_18F5B3000, v48, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,RoadsAtIntersection incoming data requested from end of the road", (uint8_t *)&buf, 0xCu);
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990410);
              v50 = *(_QWORD *)(a1 + 8);
              *(_DWORD *)v104 = 134349056;
              *(_QWORD *)&v104[4] = v50;
              v51 = (__n128 *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "CoreLocation: %s\n", (const char *)v51);
              if (v51 != &buf)
                free(v51);
              v29 = a4;
            }
          }
          else
          {
            sub_18F624378(v47, a6, (char **)&v105, 1);
          }
          v56 = (uint64_t *)*((_QWORD *)&v105 + 1);
          for (i = (uint64_t *)v105; i != v56; i += 2)
          {
            buf = 0uLL;
            v114 = 1;
            v115 = 0;
            v116 = 0;
            sub_18F623A40(&buf, i);
            v114 = 1;
            v115 = 0;
            v116 = 0;
            v58 = sub_18F64BD58((__n128 **)(*((_QWORD *)&v107 + 1) + 48), &buf);
            v59 = (std::__shared_weak_count *)buf.n128_u64[1];
            if (buf.n128_u64[1])
            {
              v60 = (unint64_t *)(buf.n128_u64[1] + 8);
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v59->__on_zero_shared)(v59, v58);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
          }
        }
        buf.n128_u64[0] = (unint64_t)&v105;
        sub_18F62AB98((void ***)&buf);
        goto LABEL_88;
      }
      *(_QWORD *)v104 = 0;
      *(_QWORD *)v104 = sub_18F647F84(a1, a6);
      if (!*(_QWORD *)v104)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990410);
        v62 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          v63 = *(_QWORD *)(a1 + 8);
          buf.n128_u32[0] = 134349056;
          *(unint64_t *)((char *)buf.n128_u64 + 4) = v63;
          _os_log_impl(&dword_18F5B3000, v62, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil", (uint8_t *)&buf, 0xCu);
        }
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_130;
        bzero(&buf, 0x65CuLL);
        if (qword_1EE172158 == -1)
          goto LABEL_142;
        goto LABEL_146;
      }
      ++*(_DWORD *)(a1 + 36);
      v101 = 0;
      v52 = operator new(0x28uLL);
      *v52 = &off_1E298FC70;
      v52[1] = &v99;
      v52[2] = a1;
      v52[3] = v104;
      v52[4] = &v85;
      v101 = v52;
      v53 = sub_18F6489D4((uint64_t)v100);
      v54 = v101;
      if (v101 == v100)
      {
        v55 = 4;
        v54 = v100;
      }
      else
      {
        if (!v101)
          goto LABEL_100;
        v55 = 5;
      }
      (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_100:

      *(_QWORD *)v104 = 0;
      if (v53)
      {
LABEL_88:
        if ((uint64_t *)(*((_QWORD *)&v107 + 1) + 48) != v29)
          sub_18F64FCD8(v29, *(_QWORD *)(*((_QWORD *)&v107 + 1) + 56), *((_QWORD *)&v107 + 1) + 48);
        goto LABEL_90;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v64 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        v65 = *(_QWORD *)(a1 + 8);
        buf.n128_u32[0] = 134349056;
        *(unint64_t *)((char *)buf.n128_u64 + 4) = v65;
        _os_log_impl(&dword_18F5B3000, v64, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,incoming roads query failed (roadsAtIntersection)", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 0))
      {
LABEL_130:
        v25 = 0;
        goto LABEL_131;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
      {
LABEL_142:
        v79 = *(_QWORD *)(a1 + 8);
        LODWORD(v105) = 134349056;
        *(_QWORD *)((char *)&v105 + 4) = v79;
        v80 = (__n128 *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "CoreLocation: %s\n", (const char *)v80);
        if (v80 != &buf)
          free(v80);
        goto LABEL_130;
      }
LABEL_146:
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
      goto LABEL_142;
    }
    if (*(_BYTE *)(a1 + 33))
    {
      v105 = 0uLL;
      v106 = 0;
      sub_18F64A2C0((char **)&v105, 3uLL);
      v30 = *(_QWORD *)(a1 + 16);
      if (v30)
      {
        if (v99)
        {
          sub_18F623BF8(v30, a6, (char **)&v105, 1);
        }
        else
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990410);
          v39 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
          {
            v40 = *(_QWORD *)(a1 + 8);
            buf.n128_u32[0] = 134349056;
            *(unint64_t *)((char *)buf.n128_u64 + 4) = v40;
            _os_log_impl(&dword_18F5B3000, v39, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,RoadsAtIntersection outgoing data requested from start of the road", (uint8_t *)&buf, 0xCu);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990410);
            v77 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)v104 = 134349056;
            *(_QWORD *)&v104[4] = v77;
            v78 = (__n128 *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "CoreLocation: %s\n", (const char *)v78);
            if (v78 != &buf)
              free(v78);
          }
        }
        v41 = (uint64_t *)*((_QWORD *)&v105 + 1);
        for (j = (uint64_t *)v105; j != v41; j += 2)
        {
          buf = 0uLL;
          v114 = 1;
          v115 = 0;
          v116 = 0;
          sub_18F623A40(&buf, j);
          v114 = 1;
          v115 = 0;
          v116 = 0;
          v43 = sub_18F64BD58(v88 + 6, &buf);
          v44 = (std::__shared_weak_count *)buf.n128_u64[1];
          if (buf.n128_u64[1])
          {
            v45 = (unint64_t *)(buf.n128_u64[1] + 8);
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v44->__on_zero_shared)(v44, v43);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
        }
      }
      buf.n128_u64[0] = (unint64_t)&v105;
      sub_18F62AB98((void ***)&buf);
      v29 = a4;
      goto LABEL_59;
    }
    v31 = sub_18F61EEBC((uint64_t **)(a1 + 2616), (__int128 *)*a6, 0);
    if (v99 && (v32 = v31) != 0)
    {
      v34 = (uint64_t *)*((_QWORD *)v31 + 4);
      v33 = (uint64_t *)*((_QWORD *)v31 + 5);
      if (v34 != v33)
      {
        while (*v34)
        {
          if (*(_QWORD *)*v34 != v19)
          {
            buf = 0uLL;
            v114 = 1;
            v115 = 0;
            v116 = 0;
            sub_18F623A40(&buf, v34);
            v114 = 1;
            v115 = 0;
            v116 = 0;
            v35 = sub_18F64BD58(v88 + 6, &buf);
            v36 = (std::__shared_weak_count *)buf.n128_u64[1];
            if (buf.n128_u64[1])
            {
              v37 = (unint64_t *)(buf.n128_u64[1] + 8);
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v36->__on_zero_shared)(v36, v35);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
          }
          v34 += 2;
          if (v34 == v33)
            goto LABEL_109;
        }
        sub_18F64F950((uint64_t *)v88 + 6);
      }
LABEL_109:
      v29 = a4;
      if (v88[8])
      {
        *((_QWORD *)v32 + 7) = *(_QWORD *)(a1 + 8);
LABEL_59:
        if (v88 + 6 != (__n128 **)a3)
          sub_18F64FCD8(a3, (uint64_t)v88[7], (uint64_t)(v88 + 6));
        goto LABEL_61;
      }
    }
    else if (v88[8])
    {
      goto LABEL_59;
    }
    *(_QWORD *)v104 = 0;
    *(_QWORD *)v104 = sub_18F647F84(a1, a6);
    if (!*(_QWORD *)v104)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v70 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        v71 = *(_QWORD *)(a1 + 8);
        buf.n128_u32[0] = 134349056;
        *(unint64_t *)((char *)buf.n128_u64 + 4) = v71;
        _os_log_impl(&dword_18F5B3000, v70, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_130;
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_142;
      goto LABEL_146;
    }
    ++*(_DWORD *)(a1 + 36);
    v103 = 0;
    v66 = operator new(0x28uLL);
    *v66 = &off_1E298FC18;
    v66[1] = &v99;
    v66[2] = a1;
    v66[3] = v104;
    v66[4] = &v83;
    v103 = v66;
    v67 = sub_18F6489D4((uint64_t)v102);
    v68 = v103;
    if (v103 == v102)
    {
      v69 = 4;
      v68 = v102;
    }
    else
    {
      if (!v103)
        goto LABEL_124;
      v69 = 5;
    }
    (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_124:

    *(_QWORD *)v104 = 0;
    if (!v67)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v72 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        v73 = *(_QWORD *)(a1 + 8);
        buf.n128_u32[0] = 134349056;
        *(unint64_t *)((char *)buf.n128_u64 + 4) = v73;
        _os_log_impl(&dword_18F5B3000, v72, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,outgoing roads query failed (roadsAtIntersection)", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_130;
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_142;
      goto LABEL_146;
    }
    goto LABEL_59;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990410);
  v23 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    v24 = *(_QWORD *)(a1 + 8);
    buf.n128_u32[0] = 134349056;
    *(unint64_t *)((char *)buf.n128_u64 + 4) = v24;
    _os_log_impl(&dword_18F5B3000, v23, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,input road is nullptr", (uint8_t *)&buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_134;
    goto LABEL_145;
  }
  return 0;
}

void sub_18F64B788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a36, 8);
  sub_18F64F950(a13);
  _Block_object_dispose(&a65, 8);
  sub_18F64F950(a12);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void sub_18F64B8A4(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  __n128 v16;
  __n128 v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __n128 v29;
  char v30;
  uint64_t v31;
  char v32;
  uint8_t buf[16];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a1[7];
  if (a2)
  {
    v6 = a3;
    if (objc_msgSend_roadID(a2, (const char *)a2, a3, a4) != a1[8]
      && ((objc_msgSend_isRail(a2, v8, v9, v10) & 1) != 0
       || !objc_msgSend_travelDirection(a2, v11, v12, v13)
       || objc_msgSend_travelDirection(a2, v14, v15, v13) == 1))
    {
      v30 = 1;
      v31 = 0;
      v32 = 0;
      sub_18F62516C(a2, 1, v13, (std::string **)buf);
      v16 = *(__n128 *)buf;
      memset(buf, 0, sizeof(buf));
      v29 = v16;
      if (v16.n128_u64[0])
      {
        if (sub_18F7059E4(v29.n128_i64[0]))
        {
          v30 = 1;
          v31 = 0;
          v32 = 0;
          if (v6)
            v18 = a1[5];
          else
            v18 = a1[6];
          v17 = sub_18F64BD58((__n128 **)(*(_QWORD *)(v18 + 8) + 48), &v29);
        }
      }
      else
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990410);
        v21 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          v22 = *(_QWORD *)(v5 + 8);
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v22;
          _os_log_impl(&dword_18F5B3000, v21, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr", buf, 0xCu);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990410);
          v28 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const_block_invoke", "CoreLocation: %s\n", v28);
          if (v28 != (char *)buf)
            free(v28);
        }
        *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
      }
      v23 = (std::__shared_weak_count *)v29.n128_u64[1];
      if (v29.n128_u64[1])
      {
        v24 = (unint64_t *)(v29.n128_u64[1] + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v23->__on_zero_shared)(v23, v17);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v19 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v20 = *(_QWORD *)(v5 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v20;
      _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,GEOMapFeatureRoad is null", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v26 = *(_QWORD *)(v5 + 8);
      v29.n128_u32[0] = 134349056;
      *(unint64_t *)((char *)v29.n128_u64 + 4) = v26;
      v27 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const_block_invoke", "CoreLocation: %s\n", v27);
      if (v27 != (char *)buf)
        free(v27);
    }
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }
}

void sub_18F64BD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_18F64BD58(__n128 **a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 result;
  unint64_t v9;

  v4 = (__n128 *)operator new(0x38uLL);
  v5 = a2->n128_u64[1];
  v4[1].n128_u64[0] = a2->n128_u64[0];
  v4[1].n128_u64[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = a2[1];
  v4[2] = result;
  v4[3].n128_u8[0] = a2[2].n128_u8[0];
  v9 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(_QWORD *)(v9 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_18F64BDCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_18F64BDDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_18F64BDEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double Current;
  NSObject *v5;
  uint64_t v6;
  char *v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = v2 + 288;
      Current = CFAbsoluteTimeGetCurrent();
      sub_18F61F28C(v3, Current, 0.5, 0.5);
    }
    sub_18F61F28C(a1 + 2616, *(double *)(a1 + 8), 60.0, 60.0);
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v5 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v9 = v6;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v7 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual void CLGeoMapFeatureAccessGeometry::clearStoredStaleConnections()", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
  }
}

__n128 sub_18F64C008(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_18F64C02C(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  sub_18F62AB98(&v1);
}

void sub_18F64C054(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t v13;
  __n128 v14;
  int64x2_t *v15;
  _QWORD *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  __int128 v36;
  int64x2_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t *v42;
  unint64_t v43;
  __int128 v44;
  std::string *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  int64x2_t *v50;

  if ((objc_msgSend_isRail(a2, (const char *)a2, a3, a4) & 1) != 0
    || !objc_msgSend_travelDirection(a2, v6, v7, v8)
    || objc_msgSend_travelDirection(a2, v6, v7, v8) == 1)
  {
    v9 = *(_QWORD *)(a1 + 48);
    if (v9 != objc_msgSend_roadID(a2, v6, v7, v8)
      || (v13 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(*(float64x2_t *)objc_msgSend_coordinates(a2, v10, v11, v12), *(float64x2_t *)*(_QWORD *)(a1 + 56)))), (vand_s8((int8x8_t)v13, (int8x8_t)vdup_lane_s32(v13, 1)).u32[0] & 1) == 0))
    {
      v14.n128_f64[0] = sub_18F62516C(a2, 1, v12, &v45);
      if (v45 && sub_18F7059E4((uint64_t)v45))
      {
        LOBYTE(v47) = 1;
        sub_18F65008C(&v44, (uint64_t)v45, v46, (char *)&v47);
        v15 = *(int64x2_t **)(*(_QWORD *)(a1 + 32) + 8);
        v16 = (_QWORD *)v15[3].i64[1];
        v17 = v15[4].u64[0];
        if ((unint64_t)v16 >= v17)
        {
          v22 = v15[3].i64[0];
          v23 = ((uint64_t)v16 - v22) >> 4;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 60)
            sub_18F5F7864();
          v25 = v17 - v22;
          if (v25 >> 3 > v24)
            v24 = v25 >> 3;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
            v26 = 0xFFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          v50 = v15 + 4;
          v27 = (char *)sub_18F62C1A0(v26);
          v29 = &v27[16 * v23];
          v30 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
          *(_OWORD *)v29 = v44;
          v18 = v30;
          if (v30)
          {
            p_shared_owners = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldxr(p_shared_owners);
            while (__stxr(v32 + 1, p_shared_owners));
          }
          v34 = (_QWORD *)v15[3].i64[0];
          v33 = (_QWORD *)v15[3].i64[1];
          if (v33 == v34)
          {
            v37 = vdupq_n_s64((unint64_t)v33);
            v35 = v29;
          }
          else
          {
            v35 = v29;
            do
            {
              v36 = *((_OWORD *)v33 - 1);
              v33 -= 2;
              *((_OWORD *)v35 - 1) = v36;
              v35 -= 16;
              *v33 = 0;
              v33[1] = 0;
            }
            while (v33 != v34);
            v37 = v15[3];
          }
          v21 = v29 + 16;
          v15[3].i64[0] = (uint64_t)v35;
          v15[3].i64[1] = (uint64_t)(v29 + 16);
          v48 = v37;
          v38 = v15[4].i64[0];
          v15[4].i64[0] = (uint64_t)&v27[16 * v28];
          v49 = v38;
          v47 = v37.i64[0];
          sub_18F62C334((uint64_t)&v47);
        }
        else
        {
          *v16 = v44;
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
          v16[1] = *((_QWORD *)&v44 + 1);
          if (v18)
          {
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
          }
          v21 = v16 + 2;
        }
        v15[3].i64[1] = (uint64_t)v21;
        if (v18)
        {
          v39 = (unint64_t *)&v18->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
      v41 = v46;
      if (v46)
      {
        v42 = &v46->__shared_owners_;
        do
          v43 = __ldaxr((unint64_t *)v42);
        while (__stlxr(v43 - 1, (unint64_t *)v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v41->__on_zero_shared)(v41, v14);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
    }
  }
}

void sub_18F64C2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_18F5D6004((uint64_t)&a9);
  sub_18F5D6004((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_18F64C2F4(double *a1, uint64_t *a2, double *a3, double *a4, double a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  NSObject *v19;
  int v20;
  uint64_t result;
  uint8_t *v22;
  NSObject *v23;
  NSObject *v24;
  double *v25;
  double *v26;
  double v27;
  int v28;
  uint64_t v29;
  double v30;
  NSObject *v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  NSObject *v56;
  int v57;
  double v58;
  double v59;
  double __y[2];
  uint8_t buf[8];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  *a3 = 0.0;
  a3[1] = 0.0;
  *a4 = 0.0;
  v5 = (_QWORD *)*a2;
  if (*a2)
  {
    v6 = (v5[18] - v5[17]) >> 4;
    if ((int)v6 <= 0)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v23 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v23, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", buf, 2u);
      }
      result = sub_18F5C4AE0(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      LOWORD(__y[0]) = 0;
    }
    else
    {
      if ((_DWORD)v6 == 1)
        return 1;
      sub_18F7047B4(*a2);
      v12 = (uint64_t)(v5[21] - v5[20]) >> 3;
      if (v12 == (_DWORD)v6 - 1)
      {
        v13 = *a2;
        sub_18F7047B4(v13);
        if (a5 < 0.000001)
        {
          *(_OWORD *)a3 = *(_OWORD *)*(_QWORD *)(v13 + 136);
          v14 = *a3;
          v15 = a3[1];
          v16 = *(_QWORD *)(v13 + 136);
          v17 = *(double *)(v16 + 16);
          v18 = *(double *)(v16 + 24);
LABEL_51:
          *(_QWORD *)buf = 0;
          __y[0] = 0.0;
          sub_18F5BD37C(a1, (double *)buf, __y, &v59, v14, v15, 0.0, v17, v18, 0.0);
          v33 = atan2(__y[0], *(long double *)buf);
          if (v33 < 0.0)
            v33 = v33 + 6.28318531;
          v34 = v33 * 57.2957795;
LABEL_54:
          *a4 = v34;
          return 1;
        }
        if (a5 >= 0.999999)
        {
          *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(v13 + 136) + 16 * v12);
          v32 = *(_QWORD *)(v13 + 136) + 16 * v12;
          v14 = *(double *)(v32 - 16);
          v15 = *(double *)(v32 - 8);
          v17 = *a3;
          v18 = a3[1];
          goto LABEL_51;
        }
        v25 = (double *)v5[20];
        v26 = (double *)v5[21];
        if (v25 != v26)
        {
          v27 = 0.0;
          v28 = 2;
          v29 = 24;
          while (1)
          {
            v30 = *v25 / *(double *)(v13 + 40);
            if (vabdd_f64(a5, v27 + v30) < 0.000001)
              break;
            if (v27 + v30 > a5)
            {
              v48 = (a5 - v27) / v30;
              v49 = *(_QWORD *)(v13 + 136);
              v50 = v49 + v29;
              v51 = *(double *)(v49 + v29 - 16);
              v52 = *(double *)(v49 + v29);
              *a3 = *(double *)(v49 + v29 - 24) + (*(double *)(v49 + v29 - 8) - *(double *)(v49 + v29 - 24)) * v48;
              v53 = v51 + 360.0;
              if (v51 >= 0.0)
                v53 = v51;
              v54 = v52 + 360.0;
              if (v52 >= 0.0)
                v54 = v52;
              v55 = v54 - v53;
              if (v55 <= 180.0)
              {
                if (v55 < -180.0)
                  v55 = v55 + 360.0;
              }
              else
              {
                v55 = v55 + -360.0;
              }
              v58 = fmod(v51 + v55 * v48, 360.0);
              if (v58 <= -180.0)
              {
                v58 = v58 + 360.0;
              }
              else if (v58 > 180.0)
              {
                v58 = v58 + -360.0;
              }
              a3[1] = v58;
              v14 = *(double *)(v50 - 24);
              v15 = *(double *)(v49 + v29 - 16);
              v17 = *(double *)(v50 - 8);
              v18 = *(double *)(v49 + v29);
              goto LABEL_51;
            }
            ++v25;
            v29 += 16;
            ++v28;
            v27 = v27 + v30;
            if (v25 == v26)
              goto LABEL_42;
          }
          if (v28 < (int)v6)
          {
            *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(v13 + 136) + v29 - 8);
            v35 = *(_QWORD *)(v13 + 136) + v29;
            v36 = *(double *)(v35 - 24);
            v37 = *(double *)(v35 - 16);
            v38 = *a3;
            v39 = a3[1];
            *(_QWORD *)buf = 0;
            __y[0] = 0.0;
            sub_18F5BD37C(a1, (double *)buf, __y, &v59, v36, v37, 0.0, v38, v39, 0.0);
            v40 = atan2(__y[0], *(long double *)buf);
            if (v40 < 0.0)
              v40 = v40 + 6.28318531;
            v41 = v40 * 57.2957795;
            v42 = *a3;
            v43 = a3[1];
            v44 = *(_QWORD *)(v13 + 136) + v29;
            v45 = *(double *)(v44 + 8);
            v46 = *(double *)(v44 + 16);
            *(_QWORD *)buf = 0;
            __y[0] = 0.0;
            sub_18F5BD37C(a1, (double *)buf, __y, &v59, v42, v43, 0.0, v45, v46, 0.0);
            v47 = atan2(__y[0], *(long double *)buf);
            if (v47 < 0.0)
              v47 = v47 + 6.28318531;
            sub_18F5F3E84(v41, v47 * 57.2957795);
            goto LABEL_54;
          }
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990410);
          v56 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v56, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", buf, 2u);
          }
          v57 = sub_18F5C4AE0(115, 0);
          result = 0;
          if (v57)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990410);
            LOWORD(__y[0]) = 0;
LABEL_15:
            v22 = (uint8_t *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n");
LABEL_33:
            if (v22 != buf)
              free(v22);
            return 0;
          }
          return result;
        }
LABEL_42:
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990410);
        v31 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v31, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", buf, 2u);
        }
        result = sub_18F5C4AE0(115, 2);
        if (!(_DWORD)result)
          return result;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990410);
        LOWORD(__y[0]) = 0;
      }
      else
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990410);
        v24 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v24, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", buf, 2u);
        }
        result = sub_18F5C4AE0(115, 2);
        if (!(_DWORD)result)
          return result;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990410);
        LOWORD(__y[0]) = 0;
      }
    }
    v22 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n");
    goto LABEL_33;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990410);
  v19 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
  }
  v20 = sub_18F5C4AE0(115, 0);
  result = 0;
  if (v20)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    LOWORD(__y[0]) = 0;
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_18F64CB54(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 2496);
  v2 = (v1 + 1) % 0x270uLL;
  v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(_QWORD *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)v1 << 15) & 0xEFC60000 ^ v1 ^ ((((_DWORD)v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

uint64_t sub_18F64CBF4(uint64_t a1, uint64_t **a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t *v6;
  double v7;
  unsigned int v8;
  double v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  __int128 *v14;
  uint64_t v15;
  int v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  int64x2_t *v30;
  unint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t j;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  __int128 v46;
  int64x2_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t i;
  uint64_t v52;
  int64x2_t *v53;
  _QWORD *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  char *v73;
  __int128 v74;
  int64x2_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD **v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  char v94;
  char v95;
  unint64_t *v96;
  unint64_t v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  double v102;
  NSObject *v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  BOOL v109;
  _QWORD *v110;
  uint64_t v111;
  unsigned int v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  NSObject *v117;
  uint64_t v118;
  _BYTE *v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t k;
  __int128 *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  char **v128;
  unint64_t *v129;
  unint64_t v130;
  NSObject *v131;
  uint64_t v132;
  NSObject *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  NSObject *v141;
  uint64_t v142;
  char v143;
  NSObject *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  NSObject *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  char *v152;
  NSObject *v153;
  uint64_t v154;
  NSObject *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  NSObject *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  __n128 (*v168)(__n128 *, __n128 *);
  _OWORD *v169;
  uint64_t v170;
  uint64_t **v171;
  double *v173;
  char v174;
  void *v176;
  unsigned int v177;
  uint64_t v178[2];
  _QWORD v179[8];
  double v180;
  __int128 v181;
  unsigned __int8 v182;
  _BYTE v183[24];
  _BYTE *v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  _BYTE v188[24];
  __n128 (*v189)(__n128 *, __n128 *);
  void (*v190)(uint64_t);
  const char *v191;
  uint8_t v192[32];
  _BYTE buf[24];
  uint64_t v194;
  uint64_t i64;
  uint64_t v196;

  v4 = a1;
  v196 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v141 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v142 = *(_QWORD *)(v4 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v142;
      _os_log_impl(&dword_18F5B3000, v141, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v164 = *(_QWORD *)(v4 + 8);
      *(_DWORD *)v188 = 134349056;
      *(_QWORD *)&v188[4] = v164;
      v165 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRoad(struct CLMapGeometry::DistanceQueryResult &, double, const CLMapGeometry::RoadInfoList &) const", "CoreLocation: %s\n", v165);
      if (v165 != buf)
        free(v165);
    }
    v143 = 0;
    return v143 & 1;
  }
  v6 = (uint64_t *)a2;
  v7 = 1050.0;
  if (a4 <= 1050.0)
  {
    v7 = a4;
    if (a4 < -1050.0)
      v7 = -1050.0;
  }
  v8 = 0;
  v9 = *((double *)a2 + 6);
  v170 = a1 + 96;
  v171 = (uint64_t **)(a1 + 2616);
  v173 = (double *)(a1 + 56);
  while (v8 != 45)
  {
    v182 = 0;
    v10 = (void *)MEMORY[0x1940032C4]();
    v11 = *v6;
    if (!*v6)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v148 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        v149 = *(_QWORD *)(v4 + 8);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v149;
        _os_log_impl(&dword_18F5B3000, v148, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,input road is nullptr", buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_257;
      v150 = v10;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        goto LABEL_272;
      goto LABEL_237;
    }
    v12 = *(_QWORD *)v11;
    sub_18F7047B4(*v6);
    v13 = *(double *)(v11 + 40);
    if (v13 <= 0.0)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v153 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        v154 = *(_QWORD *)(v4 + 8);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v154;
        _os_log_impl(&dword_18F5B3000, v153, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,road length is 0.0", buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_257;
      v150 = v10;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_237;
LABEL_272:
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
LABEL_237:
      v151 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)v188 = 134349056;
      *(_QWORD *)&v188[4] = v151;
      v152 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v152);
LABEL_267:
      if (v152 != buf)
        free(v152);
      v10 = v150;
LABEL_257:
      objc_autoreleasePoolPop(v10);
      goto LABEL_258;
    }
    v14 = (__int128 *)*v6;
    v15 = *(_QWORD *)(*v6 + 136);
    if ((int)((unint64_t)(*(_QWORD *)(*v6 + 144) - v15) >> 4) <= 1)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v155 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v156 = *(_QWORD *)(v4 + 8);
        v157 = *(_QWORD *)*v6;
        v158 = (int)((uint64_t)(*(_QWORD *)(*v6 + 144) - *(_QWORD *)(*v6 + 136)) >> 4);
        *(_DWORD *)buf = 134349569;
        *(_QWORD *)&buf[4] = v156;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v157;
        *(_WORD *)&buf[22] = 2050;
        v194 = v158;
        _os_log_impl(&dword_18F5B3000, v155, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", buf, 0x20u);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_257;
      v150 = v10;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_266;
      goto LABEL_274;
    }
    if (!v15)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v159 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v160 = *(_QWORD *)(v4 + 8);
        v161 = *(_QWORD *)*v6;
        v162 = (int)((uint64_t)(*(_QWORD *)(*v6 + 144) - *(_QWORD *)(*v6 + 136)) >> 4);
        *(_DWORD *)buf = 134349569;
        *(_QWORD *)&buf[4] = v160;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v161;
        *(_WORD *)&buf[22] = 2050;
        v194 = v162;
        _os_log_impl(&dword_18F5B3000, v159, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,startCoordinate is null,%{public}ld", buf, 0x20u);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_257;
      v150 = v10;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
      {
LABEL_266:
        v166 = *(_QWORD *)(a1 + 8);
        v167 = **a2;
        v168 = (__n128 (*)(__n128 *, __n128 *))(int)(((*a2)[18] - (*a2)[17]) >> 4);
        *(_DWORD *)v188 = 134349569;
        *(_QWORD *)&v188[4] = v166;
        *(_WORD *)&v188[12] = 2049;
        *(_QWORD *)&v188[14] = v167;
        *(_WORD *)&v188[22] = 2050;
        v189 = v168;
        v152 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v152);
        goto LABEL_267;
      }
LABEL_274:
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
      goto LABEL_266;
    }
    if (v7 >= 0.0)
    {
      v16 = v182;
    }
    else
    {
      v16 = 1;
      v182 = 1;
    }
    v17 = fabs(v7);
    v18 = 1.0 - v9;
    if (v16)
      v18 = v9;
    v19 = v13 * v18;
    v176 = v10;
    v177 = v8;
    if (v13 * v18 <= v17)
    {
      if (v16)
        v9 = 0.0;
      else
        v9 = 1.0;
    }
    else
    {
      v9 = v9 + v7 / v13;
    }
    v181 = *v14;
    *(_QWORD *)v188 = 0;
    *(_QWORD *)&v188[8] = v188;
    *(_QWORD *)&v188[16] = 0x4812000000;
    v189 = sub_18F64C008;
    v190 = sub_18F64C02C;
    v191 = "";
    memset(v192, 0, 24);
    if (v19 <= v17)
    {
      if (*(_BYTE *)(v4 + 33))
      {
        v186 = 0uLL;
        v187 = 0;
        sub_18F64A2C0((char **)&v186, 3uLL);
        v20 = *(_QWORD *)(v4 + 16);
        if (v20)
        {
          if (v182)
            sub_18F624378(v20, (uint64_t *)a2, (char **)&v186, 1);
          else
            sub_18F623BF8(v20, (uint64_t *)a2, (char **)&v186, 1);
          v52 = *((_QWORD *)&v186 + 1);
          for (i = v186; i != v52; i += 16)
          {
            buf[0] = 1;
            sub_18F65008C(&v185, *(_QWORD *)i, *(std::__shared_weak_count **)(i + 8), buf);
            v53 = *(int64x2_t **)&v188[8];
            v54 = *(_QWORD **)(*(_QWORD *)&v188[8] + 56);
            v55 = *(_QWORD *)(*(_QWORD *)&v188[8] + 64);
            if ((unint64_t)v54 >= v55)
            {
              v60 = *(_QWORD *)(*(_QWORD *)&v188[8] + 48);
              v61 = ((uint64_t)v54 - v60) >> 4;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 60)
                sub_18F5F7864();
              v63 = v55 - v60;
              if (v63 >> 3 > v62)
                v62 = v63 >> 3;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
                v64 = 0xFFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              i64 = *(_QWORD *)&v188[8] + 64;
              v65 = (char *)sub_18F62C1A0(v64);
              v67 = &v65[16 * v61];
              v68 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
              *(_OWORD *)v67 = v185;
              v56 = v68;
              if (v68)
              {
                p_shared_owners = (unint64_t *)&v68->__shared_owners_;
                do
                  v70 = __ldxr(p_shared_owners);
                while (__stxr(v70 + 1, p_shared_owners));
              }
              v72 = (_QWORD *)v53[3].i64[0];
              v71 = (_QWORD *)v53[3].i64[1];
              if (v71 == v72)
              {
                v75 = vdupq_n_s64((unint64_t)v71);
                v73 = &v65[16 * v61];
              }
              else
              {
                v73 = &v65[16 * v61];
                do
                {
                  v74 = *((_OWORD *)v71 - 1);
                  v71 -= 2;
                  *((_OWORD *)v73 - 1) = v74;
                  v73 -= 16;
                  *v71 = 0;
                  v71[1] = 0;
                }
                while (v71 != v72);
                v75 = v53[3];
              }
              v59 = v67 + 16;
              v53[3].i64[0] = (uint64_t)v73;
              v53[3].i64[1] = (uint64_t)(v67 + 16);
              *(int64x2_t *)&buf[8] = v75;
              v76 = v53[4].i64[0];
              v53[4].i64[0] = (uint64_t)&v65[16 * v66];
              v194 = v76;
              *(_QWORD *)buf = v75.i64[0];
              sub_18F62C334((uint64_t)buf);
            }
            else
            {
              *v54 = v185;
              v56 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
              v54[1] = *((_QWORD *)&v185 + 1);
              if (v56)
              {
                v57 = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldxr(v57);
                while (__stxr(v58 + 1, v57));
              }
              v59 = v54 + 2;
            }
            v53[3].i64[1] = (uint64_t)v59;
            if (v56)
            {
              v77 = (unint64_t *)&v56->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
          }
        }
        *(_QWORD *)buf = &v186;
        sub_18F62AB98((void ***)buf);
        goto LABEL_91;
      }
      v21 = sub_18F61EEBC(v171, &v181, 0);
      if (v21)
      {
        v22 = (_OWORD *)((char *)v21 + 8);
        v23 = 8;
        if (!v182)
        {
          v23 = 32;
          v22 = v21 + 2;
        }
        v169 = v21;
        v24 = *(uint64_t **)((char *)v21 + v23);
        v25 = (uint64_t *)*((_QWORD *)v22 + 1);
        while (v24 != v25)
        {
          v27 = *v24;
          v26 = (std::__shared_weak_count *)v24[1];
          *(_QWORD *)&v186 = *v24;
          *((_QWORD *)&v186 + 1) = v26;
          if (v26)
          {
            v28 = (unint64_t *)&v26->__shared_owners_;
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
          v30 = *(int64x2_t **)&v188[8];
          if (v27)
          {
            LOBYTE(v180) = 1;
            sub_18F65008C(&v185, v27, v26, (char *)&v180);
            v31 = v30[4].u64[0];
            v32 = (_OWORD *)v30[3].i64[1];
            if ((unint64_t)v32 >= v31)
            {
              v35 = v30[3].i64[0];
              v36 = ((uint64_t)v32 - v35) >> 4;
              if ((unint64_t)(v36 + 1) >> 60)
                sub_18F5F7864();
              v37 = v31 - v35;
              v38 = v37 >> 3;
              if (v37 >> 3 <= (unint64_t)(v36 + 1))
                v38 = v36 + 1;
              v39 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v38;
              i64 = (uint64_t)v30[4].i64;
              v40 = (char *)sub_18F62C1A0(v39);
              v42 = &v40[16 * v36];
              *(_OWORD *)v42 = v185;
              v44 = (_QWORD *)v30[3].i64[0];
              v43 = (_QWORD *)v30[3].i64[1];
              if (v43 == v44)
              {
                v47 = vdupq_n_s64((unint64_t)v43);
                v45 = &v40[16 * v36];
              }
              else
              {
                v45 = &v40[16 * v36];
                do
                {
                  v46 = *((_OWORD *)v43 - 1);
                  v43 -= 2;
                  *((_OWORD *)v45 - 1) = v46;
                  v45 -= 16;
                  *v43 = 0;
                  v43[1] = 0;
                }
                while (v43 != v44);
                v47 = v30[3];
              }
              v33 = v42 + 16;
              v30[3].i64[0] = (uint64_t)v45;
              v30[3].i64[1] = (uint64_t)(v42 + 16);
              *(int64x2_t *)&buf[8] = v47;
              v48 = v30[4].i64[0];
              v30[4].i64[0] = (uint64_t)&v40[16 * v41];
              v194 = v48;
              *(_QWORD *)buf = v47.i64[0];
              sub_18F62C334((uint64_t)buf);
            }
            else
            {
              *v32 = v185;
              v33 = v32 + 1;
            }
          }
          else
          {
            v33 = *(_OWORD **)(*(_QWORD *)&v188[8] + 48);
            for (j = *(_QWORD *)(*(_QWORD *)&v188[8] + 56); (_OWORD *)j != v33; j = sub_18F5D6004(j - 16))
              ;
          }
          v30[3].i64[1] = (uint64_t)v33;
          if (v26)
          {
            v49 = (unint64_t *)&v26->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          if (!v27)
            break;
          v24 += 2;
        }
        v4 = a1;
        if (*(_QWORD *)(*(_QWORD *)&v188[8] + 48) != *(_QWORD *)(*(_QWORD *)&v188[8] + 56))
        {
          *((_QWORD *)v169 + 7) = *(_QWORD *)(a1 + 8);
          goto LABEL_91;
        }
LABEL_139:
        *(_QWORD *)&v185 = 0;
        v6 = (uint64_t *)a2;
        v90 = v176;
        *(_QWORD *)&v185 = sub_18F647F84(v4, a2);
        if (!(_QWORD)v185)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990410);
          v117 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
          {
            v118 = *(_QWORD *)(v4 + 8);
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)&buf[4] = v118;
            _os_log_impl(&dword_18F5B3000, v117, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil", buf, 0xCu);
          }
          if (!sub_18F5C4AE0(115, 0))
            goto LABEL_196;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
            goto LABEL_212;
          goto LABEL_215;
        }
        v179[0] = MEMORY[0x1E0C809B0];
        v179[1] = 3221225472;
        v179[2] = sub_18F64C054;
        v179[3] = &unk_1E2991CC8;
        v179[6] = v12;
        v179[7] = v15;
        v179[4] = v188;
        v179[5] = v4;
        v180 = COERCE_DOUBLE(v179);
        ++*(_DWORD *)(v4 + 36);
        v184 = 0;
        v108 = operator new(0x28uLL);
        *v108 = &off_1E298FBC0;
        v108[1] = &v182;
        v108[2] = v4;
        v108[3] = &v185;
        v108[4] = &v180;
        v184 = v108;
        v109 = sub_18F6489D4((uint64_t)v183);
        v110 = v184;
        if (v184 == v183)
        {
          v110 = v183;
          v111 = 4;
LABEL_168:
          (*(void (**)(void))(*v110 + 8 * v111))();
        }
        else if (v184)
        {
          v111 = 5;
          goto LABEL_168;
        }

        *(_QWORD *)&v185 = 0;
        if (!v109)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990410);
          v131 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
          {
            v132 = *(_QWORD *)(v4 + 8);
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)&buf[4] = v132;
            _os_log_impl(&dword_18F5B3000, v131, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,query failed (moveOnRoad)", buf, 0xCu);
          }
          if (!sub_18F5C4AE0(115, 0))
            goto LABEL_196;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
          {
LABEL_212:
            v139 = *(_QWORD *)(a1 + 8);
            LODWORD(v186) = 134349056;
            *(_QWORD *)((char *)&v186 + 4) = v139;
            v140 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v140);
            if (v140 != buf)
              free(v140);
            v4 = a1;
            v6 = (uint64_t *)a2;
LABEL_196:
            v105 = 0;
            v174 = 0;
            goto LABEL_136;
          }
LABEL_215:
          dispatch_once(&qword_1EE172158, &unk_1E2990410);
          goto LABEL_212;
        }
        v106 = *(_QWORD *)(*(_QWORD *)&v188[8] + 48);
        v107 = *(_QWORD *)(*(_QWORD *)&v188[8] + 56);
      }
      else
      {
        v106 = *(_QWORD *)(*(_QWORD *)&v188[8] + 48);
        v107 = *(_QWORD *)(*(_QWORD *)&v188[8] + 56);
        if (v106 == v107)
          goto LABEL_139;
      }
      if (v106 != v107)
      {
        v119 = sub_18F61EEBC(v171, &v181, 1);
        v120 = v119;
        if (v119)
        {
          sub_18F61F000(v119, v182);
          *((_QWORD *)v120 + 7) = *(_QWORD *)(v4 + 8);
          v121 = *(_QWORD *)(*(_QWORD *)&v188[8] + 48);
          for (k = *(_QWORD *)(*(_QWORD *)&v188[8] + 56); v121 != k; v121 += 16)
          {
            v123 = *(__int128 **)v121;
            v124 = *(std::__shared_weak_count **)(v121 + 8);
            *(_QWORD *)buf = *(_QWORD *)v121;
            *(_QWORD *)&buf[8] = v124;
            if (v124)
            {
              v125 = (unint64_t *)&v124->__shared_owners_;
              do
                v126 = __ldxr(v125);
              while (__stxr(v126 + 1, v125));
            }
            v127 = *(_QWORD *)v123;
            if (*(_QWORD *)v123)
            {
              if (v182)
              {
                v120[1] = 1;
                v128 = (char **)(v120 + 8);
              }
              else
              {
                *v120 = 1;
                v128 = (char **)(v120 + 32);
              }
              sub_18F623AB8(v128, v123);
            }
            else
            {
              sub_18F61F000(v120, v182 != 0);
              *((_QWORD *)v120 + 7) = 0xBFF0000000000000;
            }
            if (v124)
            {
              v129 = (unint64_t *)&v124->__shared_owners_;
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v124);
              }
            }
            v4 = a1;
            if (!v127)
              break;
          }
        }
        else
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990410);
          v133 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
          {
            v134 = *(_QWORD *)(v4 + 8);
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)&buf[4] = v134;
            _os_log_impl(&dword_18F5B3000, v133, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,RoadConnectionsEntry could not be created", buf, 0xCu);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990410);
            v135 = *(_QWORD *)(a1 + 8);
            LODWORD(v186) = 134349056;
            *(_QWORD *)((char *)&v186 + 4) = v135;
            v136 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v136);
            if (v136 != buf)
              free(v136);
            v4 = a1;
          }
        }
      }
    }
LABEL_91:
    if (!v182
      || (v79 = *(_QWORD *)(*(_QWORD *)&v188[8] + 48), v80 = *(_QWORD *)(*(_QWORD *)&v188[8] + 56), v79 == v80))
    {
      v82 = 0xFFFFFFFFLL;
    }
    else
    {
      v81 = 0;
      v82 = 0xFFFFFFFFLL;
      do
      {
        v83 = *(_QWORD ***)v79;
        v84 = *(std::__shared_weak_count **)(v79 + 8);
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
        v87 = a3;
        while (1)
        {
          v87 = *(_QWORD *)(v87 + 8);
          if (v87 == a3)
            break;
          if (*(_QWORD *)(v87 + 16) == **v83)
          {
            v82 = v81;
            break;
          }
        }
        if (v84)
        {
          v88 = (unint64_t *)&v84->__shared_owners_;
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        if ((v82 & 0x80000000) == 0)
          break;
        ++v81;
        v79 += 16;
      }
      while (v79 != v80);
    }
    if (v19 <= v17 && v177 <= 0x2B)
    {
      v99 = *(_QWORD *)(*(_QWORD *)&v188[8] + 48);
      v100 = *(_QWORD *)(*(_QWORD *)&v188[8] + 56);
      if (v99 != v100)
      {
        v101 = v182;
        if (v82 != 0xFFFFFFFF || !v182)
        {
          v102 = -v19;
          if (v182)
            v102 = v19;
          v7 = v7 + v102;
          v6 = (uint64_t *)a2;
          v90 = v176;
          if ((v82 & 0x80000000) != 0)
          {
            v112 = sub_18F64CB54(v170);
            v99 = *(_QWORD *)(*(_QWORD *)&v188[8] + 48);
            v82 = v112 % (unint64_t)((*(_QWORD *)(*(_QWORD *)&v188[8] + 56) - v99) >> 4);
            v101 = v182;
          }
          else if (v82 >= (v100 - v99) >> 4)
          {
LABEL_149:
            v105 = 1;
            goto LABEL_136;
          }
          if (v101)
            v9 = 1.0;
          else
            v9 = 0.0;
          sub_18F623A40(a2, *(uint64_t **)(v99 + 16 * v82));
          if (!*a2)
          {
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990410);
            v113 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
            {
              v114 = *(_QWORD *)(v4 + 8);
              *(_DWORD *)buf = 134349056;
              *(_QWORD *)&buf[4] = v114;
              _os_log_impl(&dword_18F5B3000, v113, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr", buf, 0xCu);
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990410);
              v115 = *(_QWORD *)(a1 + 8);
              LODWORD(v186) = 134349056;
              *(_QWORD *)((char *)&v186 + 4) = v115;
              v116 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v116);
              if (v116 != buf)
                free(v116);
              v105 = 0;
              v174 = 0;
              v4 = a1;
              v6 = (uint64_t *)a2;
              goto LABEL_136;
            }
            goto LABEL_196;
          }
          *((_BYTE *)a2 + 20) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v188[8] + 48) + 16 * v82) + 16);
          goto LABEL_149;
        }
      }
    }
    v186 = 0uLL;
    v180 = -1.0;
    v6 = (uint64_t *)a2;
    v90 = v176;
    v91 = (std::__shared_weak_count *)a2[1];
    v178[0] = (uint64_t)*a2;
    v178[1] = (uint64_t)v91;
    if (v91)
    {
      v92 = (unint64_t *)&v91->__shared_owners_;
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 1, v92));
    }
    v94 = sub_18F64C2F4(v173, v178, (double *)&v186, &v180, v9);
    v95 = v94;
    if (!v91)
      goto LABEL_118;
    v96 = (unint64_t *)&v91->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
      if ((v95 & 1) == 0)
      {
LABEL_130:
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990410);
        v103 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          v104 = *(_QWORD *)(v4 + 8);
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v104;
          _os_log_impl(&dword_18F5B3000, v103, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,moveOnRoadInternal,interpolateProjections returned false", buf, 0xCu);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990410);
          v137 = *(_QWORD *)(v4 + 8);
          LODWORD(v185) = 134349056;
          *(_QWORD *)((char *)&v185 + 4) = v137;
          v138 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v138);
          if (v138 != buf)
            free(v138);
        }
        goto LABEL_135;
      }
    }
    else
    {
LABEL_118:
      if ((v94 & 1) == 0)
        goto LABEL_130;
    }
    *((double *)a2 + 6) = v9;
    *((_OWORD *)a2 + 2) = v186;
    v98 = v180;
    *((float *)a2 + 6) = v98;
LABEL_135:
    v174 = v95;
    v105 = 0;
LABEL_136:
    _Block_object_dispose(v188, 8);
    *(_QWORD *)buf = v192;
    sub_18F62AB98((void ***)buf);
    objc_autoreleasePoolPop(v90);
    v8 = v177 + 1;
    if ((v105 & 1) == 0)
      goto LABEL_259;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990410);
  v144 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    v145 = *(_QWORD *)(v4 + 8);
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = v145;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v7;
    _os_log_impl(&dword_18F5B3000, v144, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,moveOnRoad failed,distanceRemaining,%{public}.1lf", buf, 0x16u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v146 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)v188 = 134349312;
    *(_QWORD *)&v188[4] = v146;
    *(_WORD *)&v188[12] = 2050;
    *(double *)&v188[14] = v7;
    v147 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v147);
    if (v147 != buf)
      free(v147);
  }
LABEL_258:
  v174 = 0;
LABEL_259:
  v143 = v174;
  return v143 & 1;
}

void sub_18F64E5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a49, 8);
  a45 = a22;
  sub_18F62AB98(&a45);
  _Unwind_Resume(a1);
}

uint64_t sub_18F64E6D4(uint64_t a1, uint64_t *a2, uint64_t *a3, int *a4, double a5, double a6)
{
  uint64_t v8;
  double v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  std::__shared_weak_count *v34;
  double v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  float v40;
  double v41;
  float v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  int v48;
  __n128 v49;
  float v50;
  NSObject *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60[2];
  _BYTE v61[12];
  __int16 v62;
  _BYTE v63[18];
  _BYTE buf[1632];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v24 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v25 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v25;
      _os_log_impl(&dword_18F5B3000, v24, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    result = sub_18F5C4AE0(115, 0);
    if (!(_DWORD)result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      goto LABEL_86;
    goto LABEL_33;
  }
  v8 = *a2;
  if (!*a2)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v26 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v27 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v27;
      _os_log_impl(&dword_18F5B3000, v26, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,input road is nullptr", buf, 0xCu);
    }
    result = sub_18F5C4AE0(115, 0);
    if (!(_DWORD)result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      goto LABEL_86;
LABEL_33:
    v30 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)v61 = 134349056;
    *(_QWORD *)&v61[4] = v30;
    v23 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v23);
LABEL_34:
    if (v23 != buf)
      free(v23);
    return 0;
  }
  sub_18F7047B4(*a2);
  v13 = *(double *)(v8 + 40);
  if (v13 <= 0.0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v28 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v29 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v29;
      _os_log_impl(&dword_18F5B3000, v28, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,road length is 0.0", buf, 0xCu);
    }
    result = sub_18F5C4AE0(115, 0);
    if (!(_DWORD)result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_33;
LABEL_86:
    dispatch_once(&qword_1EE172158, &unk_1E2990410);
    goto LABEL_33;
  }
  v14 = *a2;
  if ((int)((*(_QWORD *)(*a2 + 144) - *(_QWORD *)(*a2 + 136)) >> 4) <= 1)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v15 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(a1 + 8);
      v17 = *(_QWORD *)*a2;
      v18 = (int)((uint64_t)(*(_QWORD *)(*a2 + 144) - *(_QWORD *)(*a2 + 136)) >> 4);
      *(_DWORD *)buf = 134349569;
      *(_QWORD *)&buf[4] = v16;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v17;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = v18;
      _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", buf, 0x20u);
    }
    result = sub_18F5C4AE0(115, 0);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v20 = *(_QWORD *)(a1 + 8);
      v21 = *(_QWORD *)*a2;
      v22 = (int)((uint64_t)(*(_QWORD *)(*a2 + 144) - *(_QWORD *)(*a2 + 136)) >> 4);
      *(_DWORD *)v61 = 134349569;
      *(_QWORD *)&v61[4] = v20;
      v62 = 2049;
      *(_QWORD *)v63 = v21;
      *(_WORD *)&v63[8] = 2050;
      *(_QWORD *)&v63[10] = v22;
      v23 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v23);
      goto LABEL_34;
    }
    return result;
  }
  v31 = 1.0 - a5;
  if (!*((_BYTE *)a2 + 20))
    v31 = a5;
  v32 = v13 * v31;
  if (v13 * v31 > fabs(a6))
  {
    v33 = a6 / v13;
    if (!*((_BYTE *)a2 + 20))
      v33 = -v33;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v34 = (std::__shared_weak_count *)a2[1];
    v35 = v33 + a5;
    v60[0] = v14;
    v60[1] = (uint64_t)v34;
    *(_QWORD *)v61 = 0xBFF0000000000000;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v37 = __ldxr(p_shared_owners);
      while (__stxr(v37 + 1, p_shared_owners));
    }
    sub_18F64C2F4((double *)(a1 + 56), v60, (double *)buf, (double *)v61, v33 + a5);
    if (v34)
    {
      v38 = (unint64_t *)&v34->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    *((double *)a2 + 6) = v35;
    *((_OWORD *)a2 + 2) = *(_OWORD *)buf;
    v40 = *(double *)v61;
    *((float *)a2 + 6) = v40;
    if (!*((_BYTE *)a2 + 20))
    {
      v41 = fmod((float)(v40 + 180.0), 360.0);
      if (v41 < 0.0)
        v41 = v41 + 360.0;
      v42 = v41;
      *((float *)a2 + 6) = v42;
    }
    return 1;
  }
  v43 = *a4;
  v44 = v43 + 1;
  *a4 = v43 + 1;
  if ((int)v43 > 9 || a3[2] <= v44)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v51 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v52 = *(_QWORD *)(a1 + 8);
      v53 = *a4;
      v54 = a3[2];
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v52;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v53;
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v54;
      _os_log_impl(&dword_18F5B3000, v51, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,no more route roads available to cover the distance travelled,index,%{public}d,size,%{public}lu", buf, 0x1Cu);
    }
    result = sub_18F5C4AE0(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v55 = *(_QWORD *)(a1 + 8);
      v56 = *a4;
      v57 = a3[2];
      *(_DWORD *)v61 = 134349568;
      *(_QWORD *)&v61[4] = v55;
      v62 = 1026;
      *(_DWORD *)v63 = v56;
      *(_WORD *)&v63[4] = 2050;
      *(_QWORD *)&v63[6] = v57;
      v23 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v23);
      goto LABEL_34;
    }
    return result;
  }
  v45 = (uint64_t *)a3[1];
  if ((int)v43 <= -2)
  {
    do
      v45 = (uint64_t *)*v45;
    while (!__CFADD__(v44++, 1));
  }
  else if ((_DWORD)v43 != -1)
  {
    v46 = v43 + 2;
    do
    {
      v45 = (uint64_t *)v45[1];
      --v46;
    }
    while (v46 > 1);
  }
  if (v45 != a3)
  {
    v48 = *((unsigned __int8 *)v45 + 36);
    sub_18F623A40(a2, v45 + 2);
    *((_BYTE *)a2 + 20) = *((_BYTE *)v45 + 36);
    v49.n128_u64[0] = 0;
    if (!v48)
    {
      v49.n128_f64[0] = fmod((float)(*((float *)a2 + 6) + 180.0), 360.0);
      if (v49.n128_f64[0] < 0.0)
        v49.n128_f64[0] = v49.n128_f64[0] + 360.0;
      v50 = v49.n128_f64[0];
      *((float *)a2 + 6) = v50;
      v49.n128_u64[0] = 1.0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *, __n128, double))(*(_QWORD *)a1 + 56))(a1, a2, a3, a4, v49, a6 - v32);
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990410);
  v58 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    v59 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v59;
    _os_log_impl(&dword_18F5B3000, v58, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,unexpectedly reached to the end of routeRoadList", buf, 0xCu);
  }
  result = sub_18F5C4AE0(115, 0);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_33;
    goto LABEL_86;
  }
  return result;
}

void sub_18F64F1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F64F204(uint64_t a1)
{
  sub_18F6EFDC4(a1);
  JUMPOUT(0x194002D30);
}

uint64_t sub_18F64F228()
{
  return 1;
}

uint64_t sub_18F64F230()
{
  return 0;
}

uint64_t sub_18F64F238()
{
  return 0;
}

os_log_t sub_18F64F240()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

void sub_18F64F26C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_18F64F27C(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F64F288(_QWORD *a1, void *a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v4 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349571;
      v33 = objc_msgSend_code(a2, v5, v6, v7);
      v34 = 2114;
      v35 = objc_msgSend_domain(a2, v8, v9, v10);
      v36 = 2113;
      v37 = objc_msgSend_localizedDescription(a2, v11, v12, v13);
      _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEFAULT, "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      objc_msgSend_code(a2, v19, v20, v21);
      objc_msgSend_domain(a2, v22, v23, v24);
      objc_msgSend_localizedDescription(a2, v25, v26, v27);
      v28 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v28);
      if (v28 != (char *)buf)
        free(v28);
    }
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990410);
    v14 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
      v16 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
      *(_DWORD *)buf = 134349312;
      v33 = v15;
      v34 = 1026;
      LODWORD(v35) = v16;
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_DEBUG, "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d", buf, 0x12u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v29 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
    dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1[5] + 8) + 40));
  }
  if (*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v17 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup when time-out has happened", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990410);
        v30 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v30);
        if (v30 != (char *)buf)
          free(v30);
      }

      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = 0;
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990410);
      v18 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v18, OS_LOG_TYPE_ERROR, "CLMM,dispatchGroup is unexpectedly nil", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990410);
        v31 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v31);
        if (v31 != (char *)buf)
          free(v31);
      }
    }
  }
}

void sub_18F64F8F4()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_1E298FD78;
  __cxa_throw(exception, (struct type_info *)&unk_1E298E228, (void (*)(void *))std::exception::~exception);
}

void sub_18F64F92C(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x194002D30);
}

void sub_18F64F950(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_18F5D6004((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_18F64F9C4()
{
  JUMPOUT(0x194002D30);
}

__n128 sub_18F64F9D8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E298FD20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_18F64FA18(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E298FD20;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_18F64FA40(uint64_t a1, const char *a2)
{
  return objc_msgSend_findRoadsNear_radius_handler_completionHandler_(*(void **)(*(_QWORD *)(a1 + 8) + 2600), a2, **(_QWORD **)(a1 + 24), *(_QWORD *)a2, **(double **)(a1 + 16), *(double *)(*(_QWORD *)(a1 + 16) + 8), 10.0);
}

uint64_t sub_18F64FA64(uint64_t a1, uint64_t a2)
{
  if (sub_18F64FAAC(a2, (uint64_t)&unk_1E298E3B0))
    return a1 + 8;
  else
    return 0;
}

void *sub_18F64FAA0()
{
  return &unk_1E298E3B0;
}

BOOL sub_18F64FAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void sub_18F64FAFC()
{
  JUMPOUT(0x194002D30);
}

__n128 sub_18F64FB10(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E298FCC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_18F64FB50(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E298FCC8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_18F64FB78(uint64_t a1, const char *a2)
{
  return objc_msgSend_findRoadsNear_radius_handler_completionHandler_(*(void **)(*(_QWORD *)(a1 + 8) + 2600), a2, **(_QWORD **)(a1 + 32), *(_QWORD *)a2, **(double **)(a1 + 16), *(double *)(*(_QWORD *)(a1 + 16) + 8), **(double **)(a1 + 24));
}

uint64_t sub_18F64FB9C(uint64_t a1, uint64_t a2)
{
  if (sub_18F64FAAC(a2, (uint64_t)&unk_1E298E3A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_18F64FBD8()
{
  return &unk_1E298E3A0;
}

void sub_18F64FBE8()
{
  JUMPOUT(0x194002D30);
}

__n128 sub_18F64FBFC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E298FC18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_18F64FC3C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E298FC18;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_18F64FC64(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = **(unsigned __int8 **)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 2600);
  v4 = **(_QWORD **)(a1 + 24);
  v5 = **(_QWORD **)(a1 + 32);
  if (v2)
    return MEMORY[0x1E0DE7D20](v3, sel_findRoadsFromNextIntersectionOf_handler_completionHandler_, v4, v5);
  else
    return MEMORY[0x1E0DE7D20](v3, sel_findRoadsFromPreviousIntersectionOf_handler_completionHandler_, v4, v5);
}

uint64_t sub_18F64FC90(uint64_t a1, uint64_t a2)
{
  if (sub_18F64FAAC(a2, (uint64_t)&unk_1E298E380))
    return a1 + 8;
  else
    return 0;
}

void *sub_18F64FCCC()
{
  return &unk_1E298E380;
}

uint64_t *sub_18F64FCD8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v6;
  __int128 v7;

  v4 = a2;
  v6 = (uint64_t *)a1[1];
  if (a2 != a3 && v6 != a1)
  {
    do
    {
      sub_18F623A40(v6 + 2, (uint64_t *)(v4 + 16));
      v7 = *(_OWORD *)(v4 + 32);
      *((_BYTE *)v6 + 48) = *(_BYTE *)(v4 + 48);
      *((_OWORD *)v6 + 2) = v7;
      v4 = *(_QWORD *)(v4 + 8);
      v6 = (uint64_t *)v6[1];
    }
    while (v4 != a3 && v6 != a1);
  }
  if (v6 == a1)
    return sub_18F64FD78((uint64_t)a1, a1, v4, a3);
  else
    return sub_18F64FED4((uint64_t)a1, v6, a1);
}

uint64_t *sub_18F64FD78(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;

  if (a3 != a4)
  {
    v8 = operator new(0x38uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    v10 = *(_QWORD *)(a3 + 24);
    v8[2] = *(_QWORD *)(a3 + 16);
    v8[3] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *(_OWORD *)(a3 + 32);
    *((_BYTE *)v8 + 48) = *(_BYTE *)(a3 + 48);
    *((_OWORD *)v8 + 2) = v13;
    v14 = *(_QWORD *)(a3 + 8);
    v15 = 1;
    if (v14 != a4)
    {
      v16 = v8;
      do
      {
        v8 = operator new(0x38uLL);
        *v8 = v16;
        v8[1] = 0;
        v17 = *(_QWORD *)(v14 + 24);
        v8[2] = *(_QWORD *)(v14 + 16);
        v8[3] = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = *(_OWORD *)(v14 + 32);
        *((_BYTE *)v8 + 48) = *(_BYTE *)(v14 + 48);
        *((_OWORD *)v8 + 2) = v20;
        v16[1] = v8;
        ++v15;
        v14 = *(_QWORD *)(v14 + 8);
        v16 = v8;
      }
      while (v14 != a4);
    }
    v21 = *a2;
    *(_QWORD *)(v21 + 8) = v9;
    *v9 = v21;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v15;
    return v9;
  }
  return a2;
}

void sub_18F64FE98(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    sub_18F5D6004((uint64_t)(v1 + 2));
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_18F64FEC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_18F64FED4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (a2 != a3)
  {
    v4 = a2;
    v6 = *a3;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    do
    {
      v8 = (_QWORD *)v4[1];
      --*(_QWORD *)(a1 + 16);
      sub_18F5D6004((uint64_t)(v4 + 2));
      operator delete(v4);
      v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

void sub_18F64FF54()
{
  JUMPOUT(0x194002D30);
}

__n128 sub_18F64FF68(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E298FC70;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_18F64FFA8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E298FC70;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_18F64FFD0(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = **(unsigned __int8 **)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 2600);
  v4 = **(_QWORD **)(a1 + 24);
  v5 = **(_QWORD **)(a1 + 32);
  if (v2)
    return MEMORY[0x1E0DE7D20](v3, sel_findRoadsToNextIntersectionOf_handler_completionHandler_, v4, v5);
  else
    return MEMORY[0x1E0DE7D20](v3, sel_findRoadsToPreviousIntersectionOf_handler_completionHandler_, v4, v5);
}

uint64_t sub_18F64FFFC(uint64_t a1, uint64_t a2)
{
  if (sub_18F64FAAC(a2, (uint64_t)&unk_1E298E390))
    return a1 + 8;
  else
    return 0;
}

void *sub_18F650038()
{
  return &unk_1E298E390;
}

uint64_t sub_18F650044(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3[2];
  if (v3)
  {
    v5 = *a3;
    v4 = (uint64_t *)a3[1];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = v4;
    *v4 = v7;
    *a2 = v5;
    *(_QWORD *)(v5 + 8) = a2;
    *(_QWORD *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

void sub_18F65008C(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, char *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  v8 = operator new(0x30uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E298FEF0;
  v10 = (char *)(v8 + 3);
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = *a4;
    v8[3] = a2;
    v8[4] = a3;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *((_BYTE *)v8 + 40) = v13;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    v16 = *a4;
    v8[3] = a2;
    v8[4] = 0;
    *((_BYTE *)v8 + 40) = v16;
  }
  *a1 = v10;
  a1[1] = v9;
}

void sub_18F650158(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FEF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18F650168(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FEF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194002D30);
}

uint64_t sub_18F650198(uint64_t a1)
{
  return sub_18F5D6004(a1 + 24);
}

void sub_18F6501A8()
{
  JUMPOUT(0x194002D30);
}

__n128 sub_18F6501BC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E298FBC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_18F6501FC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E298FBC0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_18F650224(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = **(unsigned __int8 **)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 2600);
  v4 = **(_QWORD **)(a1 + 24);
  v5 = **(_QWORD **)(a1 + 32);
  if (v2)
    return MEMORY[0x1E0DE7D20](v3, sel_findRoadsToPreviousIntersectionOf_handler_completionHandler_, v4, v5);
  else
    return MEMORY[0x1E0DE7D20](v3, sel_findRoadsFromNextIntersectionOf_handler_completionHandler_, v4, v5);
}

uint64_t sub_18F650250(uint64_t a1, uint64_t a2)
{
  if (sub_18F64FAAC(a2, (uint64_t)&unk_1E298E370))
    return a1 + 8;
  else
    return 0;
}

void *sub_18F65028C()
{
  return &unk_1E298E370;
}

_QWORD *sub_18F650298(_QWORD *a1, _QWORD *a2, __int128 *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v10[0] = *a2;
  v10[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_18F6EAD54((uint64_t)a1, v10, a3);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *a1 = &off_1E298F558;
  return a1;
}

void sub_18F65032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18F650344(uint64_t a1)
{
  sub_18F6EAE0C(a1);
  JUMPOUT(0x194002D30);
}

uint64_t sub_18F650368(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  double v10;
  uint64_t *v11;
  double v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  ++*(_DWORD *)(a1 + 100);
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v19 = v5;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v5 + 48))(v5, a2, 450.0);
  v16 = (uint64_t)&v16;
  v17 = &v16;
  v18 = 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _QWORD, double))(*(_QWORD *)v5 + 64))(v5, &v16, a2, 0, 30.0);
  if ((v8 & 1) != 0)
  {
    v9 = v17;
    v10 = *(double *)(a2 + 104);
    if (v17 == &v16)
      goto LABEL_18;
    v11 = &v16;
    do
    {
      if (v10 == -1.0)
        goto LABEL_12;
      v12 = vabdd_f64(v10, *((float *)v9 + 10));
      if (v12 > 180.0)
        v12 = 360.0 - v12;
      if (v12 <= 15.0)
      {
LABEL_12:
        if (v11 == &v16 || *((float *)v9 + 8) < *((float *)v11 + 8))
          v11 = v9;
      }
      v9 = (uint64_t *)v9[1];
    }
    while (v9 != &v16);
    if (v11 == &v16)
    {
LABEL_18:
      *(_OWORD *)(a2 + 152) = *(_OWORD *)(a2 + 56);
      *(double *)(a2 + 168) = v10;
      ++*(_DWORD *)(a1 + 104);
    }
    else
    {
      sub_18F6F03A8(a2, v11 + 2);
      *(_DWORD *)(a2 + 176) = *((_DWORD *)v11 + 8);
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    ++*(_DWORD *)(a1 + 108);
  }
  sub_18F64F950(&v16);
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v8;
}

void sub_18F650538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F64F950((uint64_t *)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F650560()
{
  return 0;
}

__n128 sub_18F650578(__n128 *a1, uint64_t a2)
{
  __n128 result;

  a1[3].n128_u64[0] = *(_QWORD *)a2;
  if (&a1[3] != (__n128 *)a2)
    sub_18F5F78BC(&a1[3].n128_i8[8], *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  result = *(__n128 *)(a2 + 32);
  a1[5] = result;
  return result;
}

BOOL sub_18F6505D4(uint64_t a1, double a2)
{
  double v2;
  double v3;

  v2 = *(double *)(a1 + 88);
  v3 = vabdd_f64(a2, v2);
  return v2 >= 0.0 && v3 <= 6.0 && *(_DWORD *)(a1 + 48) == 1;
}

double sub_18F650604(uint64_t a1, uint64_t a2)
{
  double result;

  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 108);
  result = *(double *)(a1 + 100);
  *(double *)(a2 + 40) = result;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 100) = 0;
  return result;
}

uint64_t sub_18F650620(uint64_t result, char a2)
{
  *(_BYTE *)(result + 96) = a2;
  return result;
}

uint64_t sub_18F650628()
{
  return 0;
}

uint64_t sub_18F650630()
{
  return 0;
}

uint64_t sub_18F650638()
{
  return 0;
}

uint64_t sub_18F650640()
{
  return 0;
}

void sub_18F650650(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_18F650658()
{
  return 1;
}

uint64_t sub_18F650660(void **a1, unint64_t a2, void **a3, uint64_t a4)
{
  void **v5;
  void **v6;
  int v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  double v20;
  double v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  __double2 v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  __double2 v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  __double2 v46;
  __double2 v47;
  double v48;
  double v49;
  double v50;
  double v51;
  unint64_t v52;
  double *v53;
  double *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  double *v59;
  double *v60;
  double *v61;
  double *v62;
  __int128 v63;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  double v69;

  if (a1 == (void **)a2)
    return 1;
  v5 = (void **)a2;
  v6 = a1;
  v7 = 0;
  v8 = (uint64_t)(a3 + 2);
  v65 = 0x3F91DF46A2529D39;
  v68 = 0.0;
  v69 = 0.0;
  v9 = 0.0;
  do
  {
    objc_msgSend_latitude_deg(*v6, (const char *)a2, (uint64_t)a3, a4, v65);
    v11 = v10;
    objc_msgSend_longitude_deg(*v6, v12, v13, v14);
    v19 = sub_18F650950(v11, v15);
    if (!v19)
      break;
    objc_msgSend_latitude_deg(*v6, v16, v17, v18);
    v21 = v20;
    objc_msgSend_longitude_deg(*v6, v22, v23, v24);
    v26 = v25;
    v27 = __sincos_stret(v21 * 0.0174532925);
    v31 = __sincos_stret(v26 * 0.0174532925);
    v32 = 6378137.0 / sqrt(v27.__sinval * -0.00669437999 * v27.__sinval + 1.0);
    v33 = v27.__cosval * (v32 + 0.0);
    v34 = v31.__cosval * v33;
    v35 = v32 * 0.99330562 + 0.0;
    v36 = v27.__sinval * v35;
    v37 = v68;
    if (!v7)
    {
      v37 = v31.__sinval * v33;
      v9 = v27.__sinval * v35;
    }
    v66 = v31.__sinval * v33;
    v67 = v9;
    v38 = v69;
    if (!v7)
      v38 = v31.__cosval * v33;
    objc_msgSend_latitude_deg(*v6, v28, v29, v30);
    v40 = v39;
    objc_msgSend_longitude_deg(*v6, v41, v42, v43);
    v45 = v44;
    v46 = __sincos_stret(v40 * 0.0174532925);
    v47 = __sincos_stret(v45 * 0.0174532925);
    v68 = v37;
    v69 = v38;
    v48 = v34 - v38;
    v9 = v67;
    v49 = v47.__cosval * (v66 - v37) - v47.__sinval * v48;
    v50 = -(v46.__sinval * v47.__sinval) * (v66 - v37)
        + -(v46.__sinval * v47.__cosval) * v48
        + v46.__cosval * (v36 - v67);
    v51 = v46.__cosval * v47.__sinval * (v66 - v37) + v46.__cosval * v47.__cosval * v48 + v46.__sinval * (v36 - v67);
    v53 = (double *)a3[1];
    v52 = (unint64_t)a3[2];
    if ((unint64_t)v53 >= v52)
    {
      v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)v53 - (_BYTE *)*a3) >> 3);
      v56 = v55 + 1;
      if (v55 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_18F5F7864();
      v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - (_QWORD)*a3) >> 3);
      if (2 * v57 > v56)
        v56 = 2 * v57;
      if (v57 >= 0x555555555555555)
        a2 = 0xAAAAAAAAAAAAAAALL;
      else
        a2 = v56;
      if (a2)
        v58 = (char *)sub_18F5F6858(v8, a2);
      else
        v58 = 0;
      v59 = (double *)&v58[24 * v55];
      *v59 = v49;
      v59[1] = v50;
      v59[2] = v51;
      v61 = (double *)*a3;
      v60 = (double *)a3[1];
      v62 = v59;
      if (v60 != *a3)
      {
        do
        {
          v63 = *(_OWORD *)(v60 - 3);
          *(v62 - 1) = *(v60 - 1);
          *(_OWORD *)(v62 - 3) = v63;
          v62 -= 3;
          v60 -= 3;
        }
        while (v60 != v61);
        v60 = (double *)*a3;
      }
      v54 = v59 + 3;
      *a3 = v62;
      a3[1] = v59 + 3;
      a3[2] = &v58[24 * a2];
      if (v60)
        operator delete(v60);
    }
    else
    {
      *v53 = v49;
      v53[1] = v50;
      v54 = v53 + 3;
      v53[2] = v51;
    }
    ++v7;
    a3[1] = v54;
    ++v6;
  }
  while (v6 != v5);
  return v19;
}

BOOL sub_18F650950(double a1, double a2)
{
  double v2;
  double v3;
  _BOOL4 v5;

  v2 = fabs(a1);
  if (v2 == INFINITY)
    return 0;
  v3 = fabs(a2);
  if (v3 == INFINITY || v2 < 0.00003 && v3 < 0.00003)
    return 0;
  v5 = a1 <= 90.0;
  if (a1 < -90.0)
    v5 = 0;
  if (a2 > 180.0)
    v5 = 0;
  return a2 >= -180.0 && v5;
}

_QWORD *sub_18F6509E0(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_18F5F7864();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = sub_18F65FE24(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    sub_18F65FDB4(v2, v5);
    return (_QWORD *)sub_18F65FE68((uint64_t)v5);
  }
  return result;
}

uint64_t sub_18F650A80(uint64_t a1, double a2, double a3)
{
  int v3;
  int v5;
  uint64_t result;
  double v7;
  double v8;
  float64x2_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;

  v3 = *(_DWORD *)(a1 + 32);
  if (v3 < 1)
    return 0xFFFFFFFFLL;
  v5 = *(_DWORD *)(a1 + 36);
  if (v5 < 1 || fabs(a2) < 0.00003 && fabs(a3) < 0.00003)
    return 0xFFFFFFFFLL;
  result = 0xFFFFFFFFLL;
  if (a3 >= -180.0 && a2 <= 90.0 && a2 >= -90.0 && a3 <= 180.0)
  {
    v7 = *(double *)(a1 + 8);
    v8 = (v7 - *(double *)a1) / (double)v3;
    v9 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(*(float64x2_t *)(a1 + 16)), (int8x16_t)vaddq_f64(*(float64x2_t *)(a1 + 16), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), *(int8x16_t *)(a1 + 16));
    v10 = vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v9, 1), v9).f64[0];
    if (v10 <= 180.0)
    {
      if (v10 >= -180.0)
      {
LABEL_15:
        if (fabs(v8) > 0.0000001)
        {
          v12 = fabs(v10) / (double)v5;
          if (fabs(v12) > 0.0000001)
          {
            if (a3 < 0.0)
              a3 = a3 + 360.0;
            v13 = a3 - v9.f64[0];
            if (v13 <= 180.0)
            {
              if (v13 < -180.0)
                v13 = v13 + 360.0;
            }
            else
            {
              v13 = v13 + -360.0;
            }
            v14 = (int)(floor(fabs(v13) / v12) + floor((v7 - a2) / v8) * (double)v5);
            if (v5 * v3 <= v14 || v14 <= -1)
              return 0xFFFFFFFFLL;
            else
              return v14;
          }
        }
        return result;
      }
      v11 = 360.0;
    }
    else
    {
      v11 = -360.0;
    }
    v10 = v10 + v11;
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_18F650C04(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)a1 = xmmword_18F771F40;
  *(_QWORD *)(a1 + 32) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 470) = 0u;
  *(_DWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 524) = -1;
  *(_QWORD *)(a1 + 532) = -1;
  *(_DWORD *)(a1 + 540) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 544) = _Q0;
  *(_OWORD *)(a1 + 560) = _Q0;
  *(_QWORD *)(a1 + 576) = 0x4044000000000000;
  *(_QWORD *)(a1 + 48) = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  return a1;
}

void sub_18F650CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 96);
  sub_18F65FEFC(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_18F650D00(uint64_t a1)
{
  void **v3;

  sub_18F650D50(a1);
  sub_18F650F80(a1);

  v3 = (void **)(a1 + 96);
  sub_18F65FEFC(&v3);
  return a1;
}

void sub_18F650D50(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int isHealthDataSubmissionAllowed;
  NSObject *v10;
  char *v11;
  uint8_t buf[4];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 481) && *(_DWORD *)(a1 + 508))
  {
    if (objc_opt_class())
    {
      v5 = (void *)objc_msgSend_sharedConnection(MEMORY[0x1E0D47228], v2, v3, v4);
      isHealthDataSubmissionAllowed = objc_msgSend_isHealthDataSubmissionAllowed(v5, v6, v7, v8);
    }
    else
    {
      isHealthDataSubmissionAllowed = 0;
    }
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v10 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v13 = isHealthDataSubmissionAllowed;
      _os_log_impl(&dword_18F5B3000, v10, OS_LOG_TYPE_DEFAULT, "CLRR,hasIHAPermission,isPermissionGranted,%{public}d", buf, 8u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::hasIHAPermission() const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
    if (isHealthDataSubmissionAllowed)
    {
      AnalyticsSendEventLazy();
      *(_BYTE *)(a1 + 481) = 1;
    }
  }
}

void sub_18F650F80(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  NSObject *v68;
  char *v69;
  char *v70;
  uint8_t buf[4];
  _BYTE v72[10];
  _BYTE v73[10];
  _BYTE v74[10];
  _BYTE v75[10];
  _BYTE v76[10];
  int v77;
  __int16 v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 48))
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v2 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_DWORD *)(a1 + 88);
      v4 = *(_DWORD *)(a1 + 92);
      v5 = *(_QWORD *)(a1 + 56);
      v6 = *(_QWORD *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 72);
      v8 = *(_QWORD *)(a1 + 80);
      *(_DWORD *)buf = 67241473;
      *(_DWORD *)v72 = v3;
      *(_WORD *)&v72[4] = 1026;
      *(_DWORD *)&v72[6] = v4;
      *(_WORD *)v73 = 2049;
      *(_QWORD *)&v73[2] = v5;
      *(_WORD *)v74 = 2049;
      *(_QWORD *)&v74[2] = v6;
      *(_WORD *)v75 = 2049;
      *(_QWORD *)&v75[2] = v7;
      *(_WORD *)v76 = 2049;
      *(_QWORD *)&v76[2] = v8;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "CLRR,printRoutePointArray,boxRows,%{public}d,boxColumns,%{public}d,boxMinLat,%{private}.7lf,boxMaxLat,%{private}.7lf,boxMinLon,%{private}.7lf,boxMaxLon,%{private}.7lf", buf, 0x36u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v69 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLRacingRoute::printRoutePointArray() const", "CoreLocation: %s\n", v69);
      if (v69 != (char *)buf)
        free(v69);
    }
    if (objc_msgSend_count(*(void **)(a1 + 48), v9, v10, v11))
    {
      v14 = 0;
      do
      {
        v15 = (void *)objc_msgSend_objectAtIndex_(*(void **)(a1 + 48), v12, v14, v13);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v16 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend_timestamp_s(v15, v17, v18, v19);
          v21 = v20;
          objc_msgSend_latitude_deg(v15, v22, v23, v24);
          v26 = v25;
          objc_msgSend_longitude_deg(v15, v27, v28, v29);
          v31 = v30;
          objc_msgSend_altitude_m(v15, v32, v33, v34);
          v36 = v35;
          objc_msgSend_odometer_m(v15, v37, v38, v39);
          v41 = v40;
          v45 = objc_msgSend_signalEnvironmentType(v15, v42, v43, v44);
          *(_DWORD *)buf = 134350593;
          *(_QWORD *)v72 = v21;
          *(_WORD *)&v72[8] = 2049;
          *(_QWORD *)v73 = v26;
          *(_WORD *)&v73[8] = 2049;
          *(_QWORD *)v74 = v31;
          *(_WORD *)&v74[8] = 2049;
          *(_QWORD *)v75 = v36;
          *(_WORD *)&v75[8] = 2050;
          *(_QWORD *)v76 = v41;
          *(_WORD *)&v76[8] = 1026;
          v77 = v45;
          v78 = 1026;
          v79 = v14;
          _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_DEFAULT, "CLRR,printRoutePointArray,time,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,alt,%{private}.2lf,odom,%{public}.2lf,signalEnv,%{public}d,pointCount,%{public}d", buf, 0x40u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          objc_msgSend_timestamp_s(v15, v49, v50, v51);
          objc_msgSend_latitude_deg(v15, v52, v53, v54);
          objc_msgSend_longitude_deg(v15, v55, v56, v57);
          objc_msgSend_altitude_m(v15, v58, v59, v60);
          objc_msgSend_odometer_m(v15, v61, v62, v63);
          objc_msgSend_signalEnvironmentType(v15, v64, v65, v66);
          v67 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "void CLRacingRoute::printRoutePointArray() const", "CoreLocation: %s\n", v67);
          if (v67 != (char *)buf)
            free(v67);
        }
        ++v14;
      }
      while (objc_msgSend_count(*(void **)(a1 + 48), v46, v47, v48) > v14);
    }
  }
  else
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v68 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v68, OS_LOG_TYPE_ERROR, "CLRR,printRoutePointArray,fRoutePoints is a null pointer", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v70 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void CLRacingRoute::printRoutePointArray() const", "CoreLocation: %s\n", v70);
      if (v70 != (char *)buf)
        free(v70);
    }
  }
}

uint64_t sub_18F651574(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  NSObject *v28;
  char *v30;
  uint8_t buf[4];
  uint64_t v32;
  _QWORD v33[8];
  _QWORD v34[9];

  v34[8] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v33[0] = CFSTR("raceRoutePercentageOfMatchedPoints");
  v5 = *(_DWORD *)(v4 + 508);
  if (v5)
    v6 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], a2, a3, a4, (double)*(int *)(v4 + 500) * 100.0 / (double)v5);
  else
    v6 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], a2, a3, a4, 0.0);
  v34[0] = v6;
  v33[1] = CFSTR("raceRouteTimeTraveledOnRoute");
  v34[1] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v7, v8, v9, *(double *)(v4 + 336));
  v33[2] = CFSTR("raceRouteTimeTraveledOffRoute");
  v34[2] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v10, v11, v12, *(double *)(v4 + 344));
  v33[3] = CFSTR("raceRouteDistanceTraveledOnRoute");
  v34[3] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v13, v14, v15, *(double *)(v4 + 352));
  v33[4] = CFSTR("raceRouteDistanceTraveledOffRoute");
  v34[4] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v16, v17, v18, *(double *)(v4 + 360));
  v33[5] = CFSTR("raceRouteOnRouteAveragePace");
  v34[5] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v19, v20, v21, *(double *)(v4 + 368));
  v33[6] = CFSTR("signalEnvironmentType");
  v34[6] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v22, *(unsigned int *)(v4 + 40), v23);
  v33[7] = CFSTR("workoutActivityType");
  v34[7] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v24, *(unsigned int *)(v4 + 44), v25);
  v27 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v26, (uint64_t)v34, (uint64_t)v33, 8);
  if (qword_1EE172138 != -1)
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
  v28 = qword_1EE172140;
  if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v32 = v27;
    _os_log_impl(&dword_18F5B3000, v28, OS_LOG_TYPE_DEBUG, "CLRR,sendRacingRouteAnalytics: \n%{private}@", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v30 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLRacingRoute::sendRacingRouteAnalytics()_block_invoke", "CoreLocation: %s\n", v30);
    if (v30 != (char *)buf)
      free(v30);
  }
  return v27;
}

uint64_t sub_18F651848(uint64_t a1, void *a2, void *a3, _DWORD *a4, uint64_t a5)
{
  double v10;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t result;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  NSObject *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  NSObject *v124;
  int v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint8_t buf[4];
  uint64_t v184;
  __int16 v185;
  uint64_t v186;
  __int16 v187;
  uint64_t v188;
  __int16 v189;
  uint64_t v190;
  uint64_t v191;

  v191 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v124 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v124, OS_LOG_TYPE_ERROR, "CLRR,updateScoreboard,null data point", buf, 2u);
    }
    v125 = sub_18F5C4AE0(115, 0);
    result = 0;
    if (!v125)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v123 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::updateScoreboard(CLRoutePoint *, CLRoutePoint *, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v123);
    if (v123 != (char *)buf)
      goto LABEL_17;
    return 0;
  }
  objc_msgSend_latitude_deg(a2, (const char *)a2, (uint64_t)a3, (uint64_t)a4);
  v11 = v10;
  objc_msgSend_longitude_deg(a2, v12, v13, v14);
  if (!sub_18F650950(v11, v15)
    || (objc_msgSend_latitude_deg(a3, v16, v17, v18),
        v20 = v19,
        objc_msgSend_longitude_deg(a3, v21, v22, v23),
        !sub_18F650950(v20, v24)))
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v90 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_latitude_deg(a2, v91, v92, v93);
      v95 = v94;
      objc_msgSend_longitude_deg(a2, v96, v97, v98);
      v100 = v99;
      objc_msgSend_latitude_deg(a3, v101, v102, v103);
      v105 = v104;
      objc_msgSend_longitude_deg(a3, v106, v107, v108);
      *(_DWORD *)buf = 134284289;
      v184 = v95;
      v185 = 2049;
      v186 = v100;
      v187 = 2049;
      v188 = v105;
      v189 = 2049;
      v190 = v109;
      _os_log_impl(&dword_18F5B3000, v90, OS_LOG_TYPE_ERROR, "CLRR,updateScoreboard,invalid data point,%{private}.7lf,%{private}.7lf,%{private}.7lf,%{private}.7lf", buf, 0x2Au);
    }
    v110 = sub_18F5C4AE0(115, 0);
    result = 0;
    if (!v110)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    objc_msgSend_latitude_deg(a2, v111, v112, v113);
    objc_msgSend_longitude_deg(a2, v114, v115, v116);
    objc_msgSend_latitude_deg(a3, v117, v118, v119);
    objc_msgSend_longitude_deg(a3, v120, v121, v122);
    v123 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::updateScoreboard(CLRoutePoint *, CLRoutePoint *, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v123);
    if (v123 != (char *)buf)
LABEL_17:
      free(v123);
    return 0;
  }
  if (!*a4)
  {
    objc_msgSend_latitude_deg(a2, v25, v26, v27);
    *(_QWORD *)(a1 + 120) = v126;
    objc_msgSend_longitude_deg(a2, v127, v128, v129);
    *(_QWORD *)(a1 + 128) = v130;
    objc_msgSend_altitude_m(a2, v131, v132, v133);
    *(_QWORD *)(a1 + 136) = v134;
    objc_msgSend_timestamp_s(a2, v135, v136, v137);
    *(_QWORD *)(a1 + 152) = v138;
    objc_msgSend_odometer_m(a2, v139, v140, v141);
    *(_QWORD *)(a1 + 144) = v142;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_QWORD *)(a1 + 192) = 0;
    objc_msgSend_odometer_m(a3, v143, v144, v145);
    *(_QWORD *)(a1 + 200) = v146;
    objc_msgSend_latitude_deg(a3, v147, v148, v149);
    *(_QWORD *)(a1 + 208) = v150;
    objc_msgSend_longitude_deg(a3, v151, v152, v153);
    *(_QWORD *)(a1 + 216) = v154;
    objc_msgSend_altitude_m(a3, v155, v156, v157);
    *(_QWORD *)(a1 + 224) = v158;
    objc_msgSend_timestamp_s(a3, v159, v160, v161);
    *(_QWORD *)(a1 + 240) = v162;
    objc_msgSend_odometer_m(a3, v163, v164, v165);
    *(_QWORD *)(a1 + 232) = v166;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_QWORD *)(a1 + 280) = 0;
    objc_msgSend_odometer_m(a3, v167, v168, v169);
    *(_QWORD *)(a1 + 288) = v170;
    v171 = *(_OWORD *)(a1 + 168);
    v172 = *(_OWORD *)(a1 + 184);
    v173 = *(_QWORD *)(a1 + 200);
    *(_OWORD *)(a5 + 32) = *(_OWORD *)(a1 + 152);
    v174 = *(_OWORD *)(a1 + 136);
    v175 = *(_OWORD *)(a1 + 120);
    *(_QWORD *)(a5 + 80) = v173;
    *(_OWORD *)(a5 + 48) = v171;
    *(_OWORD *)(a5 + 64) = v172;
    *(_OWORD *)a5 = v175;
    *(_OWORD *)(a5 + 16) = v174;
    v177 = *(_OWORD *)(a1 + 256);
    v176 = *(_OWORD *)(a1 + 272);
    v178 = *(_OWORD *)(a1 + 240);
    *(_QWORD *)(a5 + 168) = *(_QWORD *)(a1 + 288);
    *(_OWORD *)(a5 + 120) = v178;
    *(_OWORD *)(a5 + 152) = v176;
    *(_OWORD *)(a5 + 136) = v177;
    v179 = *(_OWORD *)(a1 + 224);
    *(_OWORD *)(a5 + 88) = *(_OWORD *)(a1 + 208);
    *(_OWORD *)(a5 + 104) = v179;
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a1 + 344) = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 376) = *(_QWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a1 + 288);
    v180 = *(_OWORD *)(a1 + 272);
    v181 = *(_OWORD *)(a1 + 240);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a1 + 256);
    *(_OWORD *)(a1 + 448) = v180;
    v182 = *(_OWORD *)(a1 + 224);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 208);
    *(_OWORD *)(a1 + 400) = v182;
    *(_OWORD *)(a1 + 416) = v181;
    return 1;
  }
  objc_msgSend_latitude_deg(a2, v25, v26, v27);
  *(_QWORD *)a5 = v28;
  objc_msgSend_longitude_deg(a2, v29, v30, v31);
  *(_QWORD *)(a5 + 8) = v32;
  objc_msgSend_altitude_m(a2, v33, v34, v35);
  *(_QWORD *)(a5 + 16) = v36;
  objc_msgSend_timestamp_s(a2, v37, v38, v39);
  *(_QWORD *)(a5 + 32) = v40;
  objc_msgSend_odometer_m(a2, v41, v42, v43);
  *(_QWORD *)(a5 + 24) = v44;
  objc_msgSend_timestamp_s(a2, v45, v46, v47);
  *(double *)(a5 + 40) = v48 - *(double *)(a1 + 152);
  *(_QWORD *)(a5 + 48) = *(_QWORD *)(a1 + 344);
  objc_msgSend_odometer_m(a2, v49, v50, v51);
  *(double *)(a5 + 56) = v52 - *(double *)(a1 + 144);
  *(_QWORD *)(a5 + 64) = *(_QWORD *)(a1 + 360);
  objc_msgSend_latitude_deg(a3, v53, v54, v55);
  *(_QWORD *)(a5 + 88) = v56;
  objc_msgSend_longitude_deg(a3, v57, v58, v59);
  *(_QWORD *)(a5 + 96) = v60;
  objc_msgSend_altitude_m(a3, v61, v62, v63);
  *(_QWORD *)(a5 + 104) = v64;
  objc_msgSend_timestamp_s(a3, v65, v66, v67);
  *(_QWORD *)(a5 + 120) = v68;
  objc_msgSend_odometer_m(a3, v69, v70, v71);
  *(_QWORD *)(a5 + 112) = v72;
  objc_msgSend_timestamp_s(a3, v73, v74, v75);
  *(double *)(a5 + 128) = v76 - *(double *)(a1 + 240);
  *(_QWORD *)(a5 + 136) = *(_QWORD *)(a1 + 432);
  objc_msgSend_odometer_m(a3, v77, v78, v79);
  *(double *)(a5 + 144) = v80 - *(double *)(a1 + 232);
  *(_QWORD *)(a5 + 152) = *(_QWORD *)(a1 + 448);
  if (*a4 == 1)
    sub_18F651F00(a1, (double *)a5, (double *)(a5 + 88));
  result = sub_18F651F5C(a1, a5, a5 + 88);
  if ((_DWORD)result)
  {
    sub_18F652358(a1, a5, (double *)(a5 + 88));
    v82 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)a5;
    *(_OWORD *)(a1 + 312) = v82;
    v83 = *(_OWORD *)(a5 + 32);
    v84 = *(_OWORD *)(a5 + 48);
    v85 = *(_OWORD *)(a5 + 64);
    *(_QWORD *)(a1 + 376) = *(_QWORD *)(a5 + 80);
    *(_OWORD *)(a1 + 344) = v84;
    *(_OWORD *)(a1 + 360) = v85;
    *(_OWORD *)(a1 + 328) = v83;
    v87 = *(_OWORD *)(a5 + 136);
    v86 = *(_OWORD *)(a5 + 152);
    v88 = *(_OWORD *)(a5 + 120);
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a5 + 168);
    *(_OWORD *)(a1 + 432) = v87;
    *(_OWORD *)(a1 + 448) = v86;
    *(_OWORD *)(a1 + 416) = v88;
    v89 = *(_OWORD *)(a5 + 104);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a5 + 88);
    *(_OWORD *)(a1 + 400) = v89;
    return 1;
  }
  return result;
}

double sub_18F651F00(uint64_t a1, double *a2, double *a3)
{
  double result;

  if (*(_BYTE *)(a1 + 476))
  {
    a2[6] = a2[6] + a2[5] - *(double *)(a1 + 336);
    a3[6] = a3[6] + a3[5] - *(double *)(a1 + 424);
    a2[8] = a2[8] + a2[7] - *(double *)(a1 + 352);
    result = a3[8] + a3[7] - *(double *)(a1 + 440);
    a3[8] = result;
  }
  return result;
}

uint64_t sub_18F651F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  NSObject *v22;
  uint64_t v23;
  char *v25;
  char *v26;
  uint8_t buf[4];
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = vabdd_f64(*(double *)a3, *(double *)(a1 + 384)) > 0.0000001
    || vabdd_f64(*(double *)(a3 + 8), *(double *)(a1 + 392)) > 0.0000001;
  v7 = vabdd_f64(*(double *)a2, *(double *)(a1 + 296)) <= 0.0000001
    && vabdd_f64(*(double *)(a2 + 8), *(double *)(a1 + 304)) <= 0.0000001;
  if (*(_BYTE *)(a1 + 475))
    v6 = 1;
  v8 = v6 | v7;
  if (v6 || v7)
  {
    if (*(double *)(a3 + 32) < *(double *)(a1 + 416))
    {
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v9 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(_QWORD *)(a2 + 32);
        *(_DWORD *)buf = 134283521;
        v28 = v10;
        _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_DEFAULT, "CLRR,EvaluateProjectionStatus,projection went backward,timestamp,%{private}.1lf", buf, 0xCu);
      }
      v11 = a1 + 384;
      v12 = a1 + 296;
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v26 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::EvaluateProjectionStatus(RacingRouteState &, RacingRouteState &) const", "CoreLocation: %s\n", v26);
        if (v26 != (char *)buf)
          free(v26);
      }
      v13 = *(_OWORD *)(v11 + 16);
      *(_OWORD *)a3 = *(_OWORD *)v11;
      *(_OWORD *)(a3 + 16) = v13;
      v14 = *(_OWORD *)(v11 + 32);
      v15 = *(_OWORD *)(v11 + 48);
      v16 = *(_OWORD *)(v11 + 64);
      *(_QWORD *)(a3 + 80) = *(_QWORD *)(v11 + 80);
      *(_OWORD *)(a3 + 48) = v15;
      *(_OWORD *)(a3 + 64) = v16;
      *(_OWORD *)(a3 + 32) = v14;
      v17 = *(_OWORD *)(a2 + 32);
      v19 = *(_OWORD *)(v12 + 48);
      v18 = *(_OWORD *)(v12 + 64);
      v20 = *(_QWORD *)(v12 + 80);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(v12 + 32);
      v21 = *(_OWORD *)(v12 + 16);
      *(_OWORD *)a2 = *(_OWORD *)v12;
      *(_OWORD *)(a2 + 16) = v21;
      *(_QWORD *)(a2 + 80) = v20;
      *(_OWORD *)(a2 + 48) = v19;
      *(_OWORD *)(a2 + 64) = v18;
      *(_OWORD *)(a2 + 32) = v17;
    }
  }
  else
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v22 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
    {
      v23 = *(_QWORD *)(a2 + 32);
      *(_DWORD *)buf = 134283521;
      v28 = v23;
      _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_DEFAULT, "CLRR,EvaluateProjectionStatus,user moved but its projection on reference route is same as before,skip this point,timestamp,%{private}.1lf", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v25 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::EvaluateProjectionStatus(RacingRouteState &, RacingRouteState &) const", "CoreLocation: %s\n", v25);
      if (v25 != (char *)buf)
        free(v25);
    }
  }
  return v8;
}

void sub_18F652358(uint64_t a1, uint64_t a2, double *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t *v11;
  BOOL v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  char *v20;
  char *v21;
  uint8_t buf[1640];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = *(double *)(a2 + 56);
  v6 = a3[7];
  v7 = *(double *)(a2 + 40);
  v8 = a3[5];
  v9 = fabs(v5);
  v10 = v7 / v5;
  v11 = (uint64_t *)(a1 + 376);
  v12 = v9 > 0.0000001;
  v13 = 0.0;
  if (v9 <= 0.0000001)
    v14 = 0.0;
  else
    v14 = v10;
  if (v12)
    v11 = (uint64_t *)(a3 + 3);
  v15 = *v11;
  *(double *)(a2 + 72) = v14;
  *(_QWORD *)(a2 + 80) = v15;
  if (fabs(v6) <= 0.0000001)
  {
    v16 = *(double *)(a1 + 464);
  }
  else
  {
    v13 = v8 / v6;
    v16 = a3[3] - (v8 - v7) / (v8 / v6);
  }
  a3[9] = v13;
  a3[10] = v16;
  if (*(_BYTE *)(a1 + 483) && v16 > *(double *)(a1 + 544))
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v17 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_DEBUG, "CLRR,updateDistanceAndAveragePace,DistanceAlongReferenceRoute passed upper threshold", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v21 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLRacingRoute::updateDistanceAndAveragePace(RacingRouteState &, RacingRouteState &) const", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf)
        free(v21);
    }
    v18 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    if (v16 >= 0.0)
      return;
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v19 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_DEBUG, "CLRR,updateDistanceAndAveragePace,DistanceAlongReferenceRoute passed lower threshold", buf, 2u);
    }
    v18 = 0;
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v20 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLRacingRoute::updateDistanceAndAveragePace(RacingRouteState &, RacingRouteState &) const", "CoreLocation: %s\n", v20);
      if (v20 != (char *)buf)
        free(v20);
    }
  }
  *((_QWORD *)a3 + 10) = v18;
}

uint64_t sub_18F6526BC(uint64_t a1, void *a2, void *a3, void *a4, double *a5, int *a6, uint64_t a7)
{
  double v14;
  double v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  double v42;
  double v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  NSObject *v63;
  int v64;
  uint64_t result;
  NSObject *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  double v97;
  double v98;
  double v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  double v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  double v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  double v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  double v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  double v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  double v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  double v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  double v160;
  double v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  double v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  double v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  double v183;
  _OWORD *v184;
  uint64_t v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  double v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  double v205;
  __int128 *v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  double v210;
  double v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  double v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  double v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  double v223;
  const char *v224;
  uint64_t v225;
  uint64_t v226;
  double v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  NSObject *v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  NSObject *v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  const char *v249;
  uint64_t v250;
  uint64_t v251;
  const char *v252;
  uint64_t v253;
  uint64_t v254;
  const char *v255;
  uint64_t v256;
  uint64_t v257;
  const char *v258;
  uint64_t v259;
  uint64_t v260;
  const char *v261;
  uint64_t v262;
  uint64_t v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  uint8_t buf[4];
  uint64_t v269;
  __int16 v270;
  uint64_t v271;
  __int16 v272;
  uint64_t v273;
  __int16 v274;
  uint64_t v275;
  __int16 v276;
  uint64_t v277;
  __int16 v278;
  uint64_t v279;
  uint64_t v280;

  v280 = *MEMORY[0x1E0C80C00];
  if (!a3 || !a4)
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v63 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v63, OS_LOG_TYPE_ERROR, "CLRR,updateScoreboard,null input data or segment point", buf, 2u);
    }
    v64 = sub_18F5C4AE0(115, 0);
    result = 0;
    if (!v64)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 == -1)
      goto LABEL_53;
    goto LABEL_56;
  }
  objc_msgSend_latitude_deg(a2, (const char *)a2, (uint64_t)a3, (uint64_t)a4);
  v15 = v14;
  objc_msgSend_longitude_deg(a2, v16, v17, v18);
  if (!sub_18F650950(v15, v19)
    || (objc_msgSend_latitude_deg(a3, v20, v21, v22),
        v24 = v23,
        objc_msgSend_longitude_deg(a3, v25, v26, v27),
        !sub_18F650950(v24, v28))
    || (objc_msgSend_latitude_deg(a4, v29, v30, v31),
        v33 = v32,
        objc_msgSend_longitude_deg(a4, v34, v35, v36),
        !sub_18F650950(v33, v37)))
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v66 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_latitude_deg(a2, v67, v68, v69);
      v71 = v70;
      objc_msgSend_longitude_deg(a2, v72, v73, v74);
      v76 = v75;
      objc_msgSend_latitude_deg(a3, v77, v78, v79);
      v81 = v80;
      objc_msgSend_longitude_deg(a3, v82, v83, v84);
      v86 = v85;
      objc_msgSend_latitude_deg(a4, v87, v88, v89);
      v91 = v90;
      objc_msgSend_longitude_deg(a4, v92, v93, v94);
      *(_DWORD *)buf = 134284801;
      v269 = v71;
      v270 = 2049;
      v271 = v76;
      v272 = 2049;
      v273 = v81;
      v274 = 2049;
      v275 = v86;
      v276 = 2049;
      v277 = v91;
      v278 = 2049;
      v279 = v95;
      _os_log_impl(&dword_18F5B3000, v66, OS_LOG_TYPE_ERROR, "CLRR,updateScoreboard,invalid input data or segment point,%{private}.7lf,%{private}.7lf,%{private}.7lf,%{private}.7lf,%{private}.7lf,%{private}.7lf", buf, 0x3Eu);
    }
    v96 = sub_18F5C4AE0(115, 0);
    result = 0;
    if (!v96)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    objc_msgSend_latitude_deg(a2, v249, v250, v251);
    objc_msgSend_longitude_deg(a2, v252, v253, v254);
    objc_msgSend_latitude_deg(a3, v255, v256, v257);
    objc_msgSend_longitude_deg(a3, v258, v259, v260);
    objc_msgSend_latitude_deg(a4, v261, v262, v263);
    objc_msgSend_longitude_deg(a4, v264, v265, v266);
    goto LABEL_53;
  }
  v41 = *a6;
  objc_msgSend_latitude_deg(a4, v38, v39, v40);
  v43 = v42;
  objc_msgSend_latitude_deg(a3, v44, v45, v46);
  v48 = v47;
  objc_msgSend_longitude_deg(a3, v49, v50, v51);
  v53 = v52;
  objc_msgSend_longitude_deg(a4, v54, v55, v56);
  v61 = v53 + 360.0;
  if (v53 >= 0.0)
    v61 = v53;
  if (v60 < 0.0)
    v60 = v60 + 360.0;
  v62 = v60 - v61;
  if (v60 - v61 <= 180.0)
  {
    if (v62 < -180.0)
      v62 = v62 + 360.0;
  }
  else
  {
    v62 = v62 + -360.0;
  }
  v97 = v43 - v48;
  objc_msgSend_altitude_m(a4, v57, v58, v59);
  v99 = v98;
  objc_msgSend_altitude_m(a3, v100, v101, v102);
  v104 = v103;
  objc_msgSend_timestamp_s(a4, v105, v106, v107);
  v109 = v108;
  objc_msgSend_timestamp_s(a3, v110, v111, v112);
  v114 = v113;
  objc_msgSend_odometer_m(a4, v115, v116, v117);
  v119 = v118;
  objc_msgSend_odometer_m(a3, v120, v121, v122);
  v124 = v123;
  objc_msgSend_latitude_deg(a2, v125, v126, v127);
  if (v41)
  {
    *(_QWORD *)a7 = v131;
    objc_msgSend_longitude_deg(a2, v128, v129, v130);
    *(_QWORD *)(a7 + 8) = v132;
    objc_msgSend_altitude_m(a2, v133, v134, v135);
    *(_QWORD *)(a7 + 16) = v136;
    objc_msgSend_timestamp_s(a2, v137, v138, v139);
    *(_QWORD *)(a7 + 32) = v140;
    objc_msgSend_odometer_m(a2, v141, v142, v143);
    *(_QWORD *)(a7 + 24) = v144;
    objc_msgSend_timestamp_s(a2, v145, v146, v147);
    *(double *)(a7 + 40) = v148 - *(double *)(a1 + 152);
    *(_QWORD *)(a7 + 48) = *(_QWORD *)(a1 + 344);
    objc_msgSend_odometer_m(a2, v149, v150, v151);
    *(double *)(a7 + 56) = v152 - *(double *)(a1 + 144);
    *(_QWORD *)(a7 + 64) = *(_QWORD *)(a1 + 360);
    objc_msgSend_latitude_deg(a3, v153, v154, v155);
    *(double *)(a7 + 88) = v156 + *a5 * v97;
    objc_msgSend_longitude_deg(a3, v157, v158, v159);
    v161 = v160 + *a5 * v62;
    *(double *)(a7 + 96) = v161;
    if (sub_18F650950(*(double *)(a7 + 88), v161))
    {
      objc_msgSend_altitude_m(a3, v162, v163, v164);
      *(double *)(a7 + 104) = v165 + *a5 * (v99 - v104);
      objc_msgSend_timestamp_s(a3, v166, v167, v168);
      *(double *)(a7 + 120) = v169 + *a5 * (v109 - v114);
      objc_msgSend_odometer_m(a3, v170, v171, v172);
      v174 = v173 + *a5 * (v119 - v124);
      *(double *)(a7 + 112) = v174;
      *(double *)(a7 + 128) = *(double *)(a7 + 120) - *(double *)(a1 + 240);
      *(_QWORD *)(a7 + 136) = *(_QWORD *)(a1 + 432);
      *(double *)(a7 + 144) = v174 - *(double *)(a1 + 232);
      *(_QWORD *)(a7 + 152) = *(_QWORD *)(a1 + 448);
      if (*a6 == 1)
        sub_18F651F00(a1, (double *)a7, (double *)(a7 + 88));
      result = sub_18F651F5C(a1, a7, a7 + 88);
      if ((_DWORD)result)
      {
        sub_18F652358(a1, a7, (double *)(a7 + 88));
        v175 = *(_OWORD *)(a7 + 16);
        *(_OWORD *)(a1 + 296) = *(_OWORD *)a7;
        *(_OWORD *)(a1 + 312) = v175;
        v176 = *(_OWORD *)(a7 + 32);
        v177 = *(_OWORD *)(a7 + 48);
        v178 = *(_OWORD *)(a7 + 64);
        *(_QWORD *)(a1 + 376) = *(_QWORD *)(a7 + 80);
        *(_OWORD *)(a1 + 344) = v177;
        *(_OWORD *)(a1 + 360) = v178;
        *(_OWORD *)(a1 + 328) = v176;
        v180 = *(_OWORD *)(a7 + 136);
        v179 = *(_OWORD *)(a7 + 152);
        v181 = *(_OWORD *)(a7 + 120);
        *(_QWORD *)(a1 + 464) = *(_QWORD *)(a7 + 168);
        *(_OWORD *)(a1 + 432) = v180;
        *(_OWORD *)(a1 + 448) = v179;
        *(_OWORD *)(a1 + 416) = v181;
        v182 = *(_OWORD *)(a7 + 104);
        *(_OWORD *)(a1 + 384) = *(_OWORD *)(a7 + 88);
        *(_OWORD *)(a1 + 400) = v182;
        return 1;
      }
      return result;
    }
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v241 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      v242 = *(_QWORD *)(a7 + 88);
      v243 = *(_QWORD *)(a7 + 96);
      *(_DWORD *)buf = 134283777;
      v269 = v242;
      v270 = 2049;
      v271 = v243;
      _os_log_impl(&dword_18F5B3000, v241, OS_LOG_TYPE_ERROR, "CLRR,updateScoreboard,invalid referenceState,%{private}.7lf,%{private}.7lf", buf, 0x16u);
    }
    v244 = sub_18F5C4AE0(115, 0);
    result = 0;
    if (!v244)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 == -1)
    {
LABEL_53:
      v267 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::updateScoreboard(CLRoutePoint *, CLRoutePoint *, CLRoutePoint *, const double &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v267);
      if (v267 != (char *)buf)
        free(v267);
      return 0;
    }
LABEL_56:
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
    goto LABEL_53;
  }
  v183 = v119 - v124;
  *(_QWORD *)(a1 + 120) = v131;
  v184 = (_OWORD *)(a1 + 120);
  objc_msgSend_longitude_deg(a2, v128, v129, v130);
  *(_QWORD *)(a1 + 128) = v185;
  objc_msgSend_altitude_m(a2, v186, v187, v188);
  *(_QWORD *)(a1 + 136) = v189;
  objc_msgSend_timestamp_s(a2, v190, v191, v192);
  *(_QWORD *)(a1 + 152) = v193;
  objc_msgSend_odometer_m(a2, v194, v195, v196);
  *(_QWORD *)(a1 + 144) = v197;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  objc_msgSend_odometer_m(a3, v198, v199, v200);
  *(double *)(a1 + 200) = v201 + *a5 * v183;
  objc_msgSend_latitude_deg(a3, v202, v203, v204);
  *(double *)(a1 + 208) = v205 + *a5 * v97;
  v206 = (__int128 *)(a1 + 208);
  objc_msgSend_longitude_deg(a3, v207, v208, v209);
  v211 = v210 + *a5 * v62;
  *(double *)(a1 + 216) = v211;
  if (sub_18F650950(*(double *)(a1 + 208), v211))
  {
    objc_msgSend_altitude_m(a3, v212, v213, v214);
    *(double *)(a1 + 224) = v215 + *a5 * (v99 - v104);
    objc_msgSend_timestamp_s(a3, v216, v217, v218);
    *(double *)(a1 + 240) = v219 + *a5 * (v109 - v114);
    objc_msgSend_odometer_m(a3, v220, v221, v222);
    *(double *)(a1 + 232) = v223 + *a5 * v183;
    *(_QWORD *)(a1 + 280) = 0;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    objc_msgSend_odometer_m(a3, v224, v225, v226);
    *(double *)(a1 + 288) = v227 + *a5 * v183;
    v228 = *(_OWORD *)(a1 + 136);
    *(_OWORD *)a7 = *v184;
    *(_OWORD *)(a7 + 16) = v228;
    v229 = *(_OWORD *)(a1 + 152);
    v230 = *(_OWORD *)(a1 + 168);
    v231 = *(_OWORD *)(a1 + 184);
    *(_QWORD *)(a7 + 80) = *(_QWORD *)(a1 + 200);
    *(_OWORD *)(a7 + 48) = v230;
    *(_OWORD *)(a7 + 64) = v231;
    *(_OWORD *)(a7 + 32) = v229;
    v232 = *(_QWORD *)(a1 + 288);
    v234 = *(_OWORD *)(a1 + 240);
    v233 = *(_OWORD *)(a1 + 256);
    *(_OWORD *)(a7 + 152) = *(_OWORD *)(a1 + 272);
    *(_OWORD *)(a7 + 120) = v234;
    *(_QWORD *)(a7 + 168) = v232;
    *(_OWORD *)(a7 + 136) = v233;
    v235 = *v206;
    *(_OWORD *)(a7 + 104) = *(_OWORD *)(a1 + 224);
    *(_OWORD *)(a7 + 88) = v235;
    v236 = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a1 + 344) = v236;
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 376) = *(_QWORD *)(a1 + 200);
    v237 = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(a1 + 296) = *v184;
    *(_OWORD *)(a1 + 312) = v237;
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a1 + 288);
    v238 = *(_OWORD *)(a1 + 272);
    v239 = *(_OWORD *)(a1 + 240);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a1 + 256);
    *(_OWORD *)(a1 + 448) = v238;
    v240 = *(_OWORD *)(a1 + 224);
    *(_OWORD *)(a1 + 384) = *v206;
    *(_OWORD *)(a1 + 400) = v240;
    *(_OWORD *)(a1 + 416) = v239;
    return 1;
  }
  if (qword_1EE172138 != -1)
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
  v245 = qword_1EE172140;
  if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
  {
    v246 = *(_QWORD *)(a1 + 208);
    v247 = *(_QWORD *)(a1 + 216);
    *(_DWORD *)buf = 134283777;
    v269 = v246;
    v270 = 2049;
    v271 = v247;
    _os_log_impl(&dword_18F5B3000, v245, OS_LOG_TYPE_ERROR, "CLRR,updateScoreboard,invalid raceStartPointOnReferenceRoute,%{private}.7lf,%{private}.7lf", buf, 0x16u);
  }
  v248 = sub_18F5C4AE0(115, 0);
  result = 0;
  if (v248)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 == -1)
      goto LABEL_53;
    goto LABEL_56;
  }
  return result;
}

uint64_t sub_18F653140(uint64_t a1, const char *a2, void *a3, _DWORD *a4, int *a5, uint64_t a6)
{
  unint64_t v7;
  void *v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  int i;
  int v20;
  int j;
  int v22;
  int v23;
  int v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  int *v31;
  int v32;
  char *v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36;
  unint64_t v38;
  unint64_t v39;
  NSObject *v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  NSObject *v54;
  char *v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  unint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  NSObject *v65;
  char *v66;
  double v67;
  double v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  int v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  double v90;
  const char *v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  int v99;
  char *v100;
  _DWORD *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  int v108;
  double *v109;
  double *v110;
  double *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  double *v116;
  uint64_t v117;
  NSObject *v118;
  int v119;
  int v120;
  char *v121;
  NSObject *v122;
  NSObject *v123;
  NSObject *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t k;
  void *v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  const char *v140;
  uint64_t v141;
  void *v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  double v147;
  char *v148;
  _DWORD *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  int v156;
  double *v157;
  double *v158;
  double *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char *v163;
  double *v164;
  uint64_t v165;
  double *v166;
  double v167;
  double v168;
  double *v169;
  double *v170;
  double *v171;
  double v172;
  double v173;
  double v174;
  _BYTE *v175;
  double *v176;
  double v177;
  double v178;
  int v179;
  NSObject *v180;
  NSObject *v181;
  int v182;
  char *v183;
  char *v184;
  NSObject *v185;
  int v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  int v193;
  int v194;
  char *v195;
  int v196;
  char *v197;
  NSObject *v198;
  char *v199;
  int *v200;
  char *v201;
  int v202;
  char *v203;
  unint64_t v204;
  int v205;
  int v206;
  NSObject *v207;
  NSObject *v208;
  int v209;
  int v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  NSObject *v220;
  int v221;
  int v222;
  int v223;
  int v224;
  unint64_t v225;
  NSObject *v226;
  int v227;
  int v228;
  NSObject *v229;
  NSObject *v230;
  int v231;
  int v232;
  NSObject *v233;
  const char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  double v242;
  double v243;
  const char *v244;
  uint64_t v245;
  uint64_t v246;
  double v247;
  double v248;
  const char *v249;
  uint64_t v250;
  void *v251;
  const char *v252;
  uint64_t v253;
  uint64_t v254;
  double v255;
  double v256;
  const char *v257;
  uint64_t v258;
  void *v259;
  const char *v260;
  uint64_t v261;
  uint64_t v262;
  double v263;
  NSObject *v264;
  int v265;
  int v266;
  const char *v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  uint64_t v271;
  const char *v272;
  uint64_t v273;
  uint64_t v274;
  NSObject *v275;
  char *v276;
  NSObject *v277;
  NSObject *v278;
  int v279;
  double v280;
  double v281;
  uint64_t v282;
  const char *v283;
  uint64_t v284;
  void *v285;
  const char *v286;
  uint64_t v287;
  uint64_t v288;
  double v289;
  double v290;
  const char *v291;
  uint64_t v292;
  void *v293;
  const char *v294;
  uint64_t v295;
  uint64_t v296;
  double v297;
  const char *v298;
  uint64_t v299;
  uint64_t v300;
  double v301;
  NSObject *v302;
  uint64_t v303;
  const char *v304;
  uint64_t v305;
  uint64_t v306;
  double v307;
  char *v308;
  NSObject *v309;
  const char *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  const char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  NSObject *v323;
  char *v324;
  int v325;
  int v326;
  char *v327;
  char *v328;
  const char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  char *v334;
  int v335;
  int v336;
  char *v337;
  uint64_t v338;
  char *v339;
  uint64_t v340;
  unint64_t v341;
  int v342;
  char *v343;
  char v345;
  void *v346;
  int *v347;
  char *__p;
  char *v349;
  char *v350;
  void *v351;
  char *v352;
  char *v353;
  char v354;
  void *v355;
  double *v356;
  _QWORD v357[4];
  uint64_t v358;
  int v359;
  double v360;
  __int16 v361;
  int v362;
  uint8_t buf[4];
  _BYTE v364[20];
  uint64_t v365;
  uint64_t v366;

  v366 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v35 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v35, OS_LOG_TYPE_ERROR, "CLRR,processLocationPoint,input data array is null", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 == -1)
      goto LABEL_440;
    goto LABEL_475;
  }
  v7 = *a4;
  if ((v7 & 0x80000000) != 0
    || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3) <= v7)
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v34 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v34, OS_LOG_TYPE_ERROR, "CLRR,processLocationPoint,invalid matrix index", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 == -1)
    {
LABEL_440:
      LOWORD(v357[1]) = 0;
      v324 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v324);
      if (v324 != (char *)buf)
        free(v324);
      return 0;
    }
LABEL_475:
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
    goto LABEL_440;
  }
  v10 = a3;
  v12 = objc_msgSend_count(a3, a2, (uint64_t)a3, (uint64_t)a4);
  v342 = *(_DWORD *)(a1 + 524);
  v354 = 0;
  *(_BYTE *)(a1 + 482) = 0;
  v351 = 0;
  v352 = 0;
  v353 = 0;
  __p = 0;
  v349 = 0;
  v350 = 0;
  v346 = v10;
  if (*a5 >= 2)
  {
    if (*a5 == 2)
    {
      v340 = a6;
      v341 = v12;
      v343 = (char *)a2;
      v33 = (char *)operator new(4uLL);
      *(_DWORD *)v33 = *a4;
      v18 = v33 + 4;
      v349 = v33 + 4;
      v350 = v33 + 4;
      __p = v33;
      v345 = 1;
      goto LABEL_51;
    }
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v207 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v207, OS_LOG_TYPE_ERROR, "CLRR,processLocationPoint,unknown point type", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_402;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 == -1)
    {
LABEL_297:
      LOWORD(v357[1]) = 0;
      v199 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v199);
      goto LABEL_450;
    }
LABEL_476:
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
    goto LABEL_297;
  }
  v16 = *(_DWORD *)(a1 + 88);
  if (v16 < 1 || (v17 = *(_DWORD *)(a1 + 92), v17 < 1) || (*a4 & 0x80000000) != 0 || *a4 >= v17 * v16)
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v198 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v198, OS_LOG_TYPE_ERROR, "CLRR,processLocationPoint,failed to determine neighboring cells index", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_402;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 == -1)
      goto LABEL_297;
    goto LABEL_476;
  }
  v340 = a6;
  v341 = v12;
  v343 = (char *)a2;
  v18 = 0;
  for (i = -1; i != 2; ++i)
  {
    v20 = *a4 / *(_DWORD *)(a1 + 92) + i;
    if (v20 >= 0 && v20 < *(_DWORD *)(a1 + 88))
    {
      for (j = -1; j != 2; ++j)
      {
        v22 = *(_DWORD *)(a1 + 92);
        v23 = *a4 % v22 + j;
        if (v23 >= 0 && v23 < v22)
        {
          v24 = v23 + v22 * v20;
          if (v18 >= v350)
          {
            v26 = __p;
            v27 = (v18 - __p) >> 2;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 62)
              sub_18F5F7864();
            v29 = v350 - __p;
            if ((v350 - __p) >> 1 > v28)
              v28 = v29 >> 1;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
              v13 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v13 = v28;
            if (v13)
            {
              v30 = (char *)sub_18F62C554((uint64_t)&v350, v13);
              v26 = __p;
              v18 = v349;
            }
            else
            {
              v30 = 0;
            }
            v31 = (int *)&v30[4 * v27];
            *v31 = v24;
            v25 = (char *)(v31 + 1);
            while (v18 != v26)
            {
              v32 = *((_DWORD *)v18 - 1);
              v18 -= 4;
              *--v31 = v32;
            }
            __p = (char *)v31;
            v350 = &v30[4 * v13];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_DWORD *)v18 = v24;
            v25 = v18 + 4;
          }
          v349 = v25;
          v18 = v25;
        }
      }
    }
  }
  v345 = 0;
  v33 = __p;
  v10 = v346;
LABEL_51:
  v347 = (int *)(a1 + 524);
  v38 = v18 - v33;
  if (v18 != v33)
  {
    v39 = 0;
    while (1)
    {
      if (v38 >= 5)
      {
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v40 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
        {
          v41 = *(_DWORD *)&__p[4 * v39];
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)v364 = v41;
          _os_log_impl(&dword_18F5B3000, v40, OS_LOG_TYPE_DEBUG, "CLRR,processLocationPoint,processing matrix cell index,%{public}d", buf, 8u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v194 = *(_DWORD *)&__p[4 * v39];
          LODWORD(v357[1]) = 67240192;
          HIDWORD(v357[1]) = v194;
          v195 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v195);
          if (v195 != (char *)buf)
            free(v195);
        }
      }
      if ((v345 & 1) != 0)
      {
        v42 = *v347;
        v43 = *v347 + 10;
      }
      else
      {
        v44 = *(_DWORD *)&__p[4 * v39];
        v45 = *(_QWORD *)(a1 + 96);
        v46 = *(_QWORD *)(v45 + 24 * v44);
        v47 = *(_QWORD *)(v45 + 24 * v44 + 8);
        if (v47 == v46)
        {
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v118 = qword_1EE172140;
          if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
          {
            v119 = *(_DWORD *)&__p[4 * v39];
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v364 = v119;
            _os_log_impl(&dword_18F5B3000, v118, OS_LOG_TYPE_DEBUG, "CLRR,updateSearchRange,empty matrix cell at index,%d,", buf, 8u);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_261;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v120 = *(_DWORD *)&__p[4 * v39];
          LODWORD(v357[1]) = 67109120;
          HIDWORD(v357[1]) = v120;
          v121 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "void CLRacingRoute::updateSearchRange(const int &, int &, int &, BOOL &) const", "CoreLocation: %s\n", v121);
          goto LABEL_285;
        }
        v48 = 0;
        v42 = -1;
        v49 = 16;
        v43 = -1;
        while (1)
        {
          if (((v47 - v46) >> 3) - 1 <= v48)
          {
            v53 = v48;
          }
          else
          {
            v50 = v48 + 1;
            v51 = *(_DWORD *)(v46 + 8 * (v48 + 1)) - *(_DWORD *)(v46 + 8 * v48 + 4);
            v52 = v49;
            v53 = v48;
            while (v51 <= 0x3C)
            {
              v53 = v50;
              if (qword_1EE172138 != -1)
                dispatch_once(&qword_1EE172138, &unk_1E2990430);
              v54 = qword_1EE172140;
              if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18F5B3000, v54, OS_LOG_TYPE_DEFAULT, "CLRR,updateSearchRange,detected a short segment across the cell border,expanding the search range", buf, 2u);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172138 != -1)
                  dispatch_once(&qword_1EE172138, &unk_1E2990430);
                LOWORD(v357[1]) = 0;
                v55 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "void CLRacingRoute::updateSearchRange(const int &, int &, int &, BOOL &) const", "CoreLocation: %s\n", v55);
                if (v55 != (char *)buf)
                  free(v55);
              }
              v44 = *(_DWORD *)&__p[4 * v39];
              v45 = *(_QWORD *)(a1 + 96);
              v46 = *(_QWORD *)(v45 + 24 * v44);
              if (((*(_QWORD *)(v45 + 24 * v44 + 8) - v46) >> 3) - 1 <= v53)
                break;
              v50 = v53 + 1;
              v51 = *(_DWORD *)(v46 + v52) - *(_DWORD *)(v46 + 8 * v48 + 4);
              v52 += 8;
            }
          }
          v56 = *(_DWORD *)(v46 + 8 * v48);
          v57 = *(_DWORD *)(v46 + 8 * v53 + 4);
          if (v57 >= v56)
          {
            v58 = *v347;
            if (v56 > *v347)
              v58 = v56;
            if (v58 - v56 <= v57 - v56)
              break;
          }
          ++v48;
          v46 = *(_QWORD *)(v45 + 24 * v44);
          v47 = *(_QWORD *)(v45 + 24 * v44 + 8);
          v49 += 8;
          if ((v47 - v46) >> 3 <= v48)
            goto LABEL_85;
        }
        v42 = v58;
        v43 = v57;
      }
LABEL_85:
      if ((v42 & 0x80000000) == 0 && v43 >= (int)v42)
        break;
LABEL_261:
      ++v39;
      v38 = v349 - __p;
      v10 = v346;
      if (v39 >= (v349 - __p) >> 2)
        goto LABEL_298;
    }
    v59 = v42 - 3;
    if (v42 < 3)
      v59 = 0;
    if (v59 <= *v347)
      v60 = *v347;
    else
      v60 = v59;
    v64 = v43 + 3;
    if (objc_msgSend_count(v346, (const char *)v13, v14, v15) <= (unint64_t)v64)
      v64 = objc_msgSend_count(v346, v61, v62, v63) - 1;
    if (v64 < (int)v60)
    {
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v65 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)v364 = v60;
        *(_WORD *)&v364[4] = 1026;
        *(_DWORD *)&v364[6] = v64;
        _os_log_impl(&dword_18F5B3000, v65, OS_LOG_TYPE_ERROR, "CLRR,findNearestPointIndex,invalid search range index,fromIndex,%{public}d,toIndex,%{public}d", buf, 0xEu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        LODWORD(v357[1]) = 67240448;
        HIDWORD(v357[1]) = v60;
        LOWORD(v357[2]) = 1026;
        *(_DWORD *)((char *)&v357[2] + 2) = v64;
        v66 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::findNearestPointIndex(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const int &, const RacingRoutePointType &, int &)", "CoreLocation: %s\n", v66);
        goto LABEL_180;
      }
LABEL_256:
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v185 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
      {
        v186 = *(_DWORD *)&__p[4 * v39];
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)v364 = v186;
        _os_log_impl(&dword_18F5B3000, v185, OS_LOG_TYPE_DEBUG, "CLRR,processLocationPoint,no points within the accepted distance in matrix cell index,%{public}d", buf, 8u);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_261;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v196 = *(_DWORD *)&__p[4 * v39];
      LODWORD(v357[1]) = 67240192;
      HIDWORD(v357[1]) = v196;
      v121 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v121);
LABEL_285:
      if (v121 != (char *)buf)
        free(v121);
      goto LABEL_261;
    }
    objc_msgSend_latitude_deg(v343, v61, v62, v63);
    v68 = v67;
    objc_msgSend_longitude_deg(v343, v69, v70, v71);
    v73 = v72;
    if (sub_18F650950(v68, v72))
    {
      if (objc_msgSend_count(v346, v74, v75, v76) > v60)
      {
        if (objc_msgSend_count(v346, v77, v78, v79) <= (unint64_t)v64)
          v64 = objc_msgSend_count(v346, (const char *)v13, v14, v15) - 1;
        v355 = 0;
        v356 = 0;
        memset(v357, 0, sizeof(v357));
        if (*a5)
        {
          v80 = 0;
          v81 = 0;
          v82 = 0;
        }
        else
        {
          for (k = 0; k != 11; ++k)
          {
            v134 = (void *)objc_msgSend_objectAtIndex_(v346, (const char *)v13, k, v15);
            objc_msgSend_latitude_deg(v134, v135, v136, v137);
            v139 = v138;
            v142 = (void *)objc_msgSend_objectAtIndex_(v346, v140, k, v141);
            objc_msgSend_longitude_deg(v142, v143, v144, v145);
            v147 = sub_18F5BD064((double *)a1, v68, v73, v139, v146, 0.0);
            if (v147 <= *(double *)(a1 + 576))
            {
              v148 = (char *)v357[2];
              if (v357[2] >= v357[3])
              {
                v150 = (char *)v357[1];
                v151 = (uint64_t)(v357[2] - v357[1]) >> 2;
                v152 = v151 + 1;
                if ((unint64_t)(v151 + 1) >> 62)
                  sub_18F5F7864();
                v153 = v357[3] - v357[1];
                if ((uint64_t)(v357[3] - v357[1]) >> 1 > v152)
                  v152 = v153 >> 1;
                if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL)
                  v13 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v13 = v152;
                if (v13)
                {
                  v154 = (char *)sub_18F62C554((uint64_t)&v357[3], v13);
                  v150 = (char *)v357[1];
                  v148 = (char *)v357[2];
                }
                else
                {
                  v154 = 0;
                }
                v155 = &v154[4 * v151];
                *(_DWORD *)v155 = k;
                v149 = v155 + 4;
                while (v148 != v150)
                {
                  v156 = *((_DWORD *)v148 - 1);
                  v148 -= 4;
                  *((_DWORD *)v155 - 1) = v156;
                  v155 -= 4;
                }
                v357[1] = v155;
                v357[2] = v149;
                v357[3] = &v154[4 * v13];
                if (v150)
                  operator delete(v150);
              }
              else
              {
                *(_DWORD *)v357[2] = k;
                v149 = v148 + 4;
              }
              v357[2] = v149;
              v157 = v356;
              if ((unint64_t)v356 >= v357[0])
              {
                v159 = (double *)v355;
                v160 = ((char *)v356 - (_BYTE *)v355) >> 3;
                v161 = v160 + 1;
                if ((unint64_t)(v160 + 1) >> 61)
                  sub_18F5F7864();
                v162 = v357[0] - (_QWORD)v355;
                if ((uint64_t)(v357[0] - (_QWORD)v355) >> 2 > v161)
                  v161 = v162 >> 2;
                if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8)
                  v13 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v13 = v161;
                if (v13)
                {
                  v163 = (char *)sub_18F610B1C((uint64_t)v357, v13);
                  v159 = (double *)v355;
                  v157 = v356;
                }
                else
                {
                  v163 = 0;
                }
                v164 = (double *)&v163[8 * v160];
                *v164 = v147;
                v158 = v164 + 1;
                while (v157 != v159)
                {
                  v165 = *((_QWORD *)v157-- - 1);
                  *((_QWORD *)v164-- - 1) = v165;
                }
                v355 = v164;
                v356 = v158;
                v357[0] = &v163[8 * v13];
                if (v159)
                  operator delete(v159);
              }
              else
              {
                *v356 = v147;
                v158 = v157 + 1;
              }
              v356 = v158;
            }
          }
          v80 = v357[1];
          v81 = v357[2];
          v82 = v357[2] != v357[1];
          if (v357[2] != v357[1] && !*a5)
          {
            v82 = 1;
            goto LABEL_221;
          }
        }
        if ((int)v60 <= v64)
        {
          v83 = v64 + 1;
          v84 = v60;
          do
          {
            v85 = (void *)objc_msgSend_objectAtIndex_(v346, (const char *)v13, v84, v15);
            objc_msgSend_latitude_deg(v85, v86, v87, v88);
            v90 = v89;
            v93 = (void *)objc_msgSend_objectAtIndex_(v346, v91, v84, v92);
            objc_msgSend_longitude_deg(v93, v94, v95, v96);
            v98 = sub_18F5BD064((double *)a1, v68, v73, v90, v97, 0.0);
            if (v98 <= *(double *)(a1 + 576))
            {
              v99 = v84 - v60;
              v100 = (char *)v357[2];
              if (v357[2] >= v357[3])
              {
                v102 = (char *)v357[1];
                v103 = (uint64_t)(v357[2] - v357[1]) >> 2;
                v104 = v103 + 1;
                if ((unint64_t)(v103 + 1) >> 62)
                  sub_18F5F7864();
                v105 = v357[3] - v357[1];
                if ((uint64_t)(v357[3] - v357[1]) >> 1 > v104)
                  v104 = v105 >> 1;
                if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
                  v13 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v13 = v104;
                if (v13)
                {
                  v106 = (char *)sub_18F62C554((uint64_t)&v357[3], v13);
                  v102 = (char *)v357[1];
                  v100 = (char *)v357[2];
                }
                else
                {
                  v106 = 0;
                }
                v107 = &v106[4 * v103];
                *(_DWORD *)v107 = v99;
                v101 = v107 + 4;
                while (v100 != v102)
                {
                  v108 = *((_DWORD *)v100 - 1);
                  v100 -= 4;
                  *((_DWORD *)v107 - 1) = v108;
                  v107 -= 4;
                }
                v357[1] = v107;
                v357[2] = v101;
                v357[3] = &v106[4 * v13];
                if (v102)
                  operator delete(v102);
              }
              else
              {
                *(_DWORD *)v357[2] = v99;
                v101 = v100 + 4;
              }
              v357[2] = v101;
              v109 = v356;
              if ((unint64_t)v356 >= v357[0])
              {
                v111 = (double *)v355;
                v112 = ((char *)v356 - (_BYTE *)v355) >> 3;
                v113 = v112 + 1;
                if ((unint64_t)(v112 + 1) >> 61)
                  sub_18F5F7864();
                v114 = v357[0] - (_QWORD)v355;
                if ((uint64_t)(v357[0] - (_QWORD)v355) >> 2 > v113)
                  v113 = v114 >> 2;
                if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
                  v13 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v13 = v113;
                if (v13)
                {
                  v115 = (char *)sub_18F610B1C((uint64_t)v357, v13);
                  v111 = (double *)v355;
                  v109 = v356;
                }
                else
                {
                  v115 = 0;
                }
                v116 = (double *)&v115[8 * v112];
                *v116 = v98;
                v110 = v116 + 1;
                while (v109 != v111)
                {
                  v117 = *((_QWORD *)v109-- - 1);
                  *((_QWORD *)v116-- - 1) = v117;
                }
                v355 = v116;
                v356 = v110;
                v357[0] = &v115[8 * v13];
                if (v111)
                  operator delete(v111);
              }
              else
              {
                *v356 = v98;
                v110 = v109 + 1;
              }
              v356 = v110;
            }
            ++v84;
          }
          while (v83 != (_DWORD)v84);
          v80 = v357[1];
          v81 = v357[2];
        }
LABEL_221:
        if (v81 == v80)
        {
          v179 = -1;
          goto LABEL_248;
        }
        v166 = (double *)((char *)v355 + 8);
        v167 = *(double *)v355;
        if (v355 == v356 || v166 == v356)
        {
          v174 = *(double *)v355;
          v175 = v355;
        }
        else
        {
          v168 = *(double *)v355;
          v169 = (double *)((char *)v355 + 8);
          v170 = (double *)v355;
          v171 = (double *)((char *)v355 + 8);
          do
          {
            v172 = *v171++;
            v173 = v172;
            if (v172 < v168)
            {
              v168 = v173;
              v170 = v169;
            }
            v169 = v171;
          }
          while (v171 != v356);
          v174 = *v170;
          v175 = v355;
          v176 = (double *)((char *)v355 + 8);
          do
          {
            v177 = *v176++;
            v178 = v177;
            if (v177 < v167)
            {
              v167 = v178;
              v175 = v166;
            }
            v166 = v176;
          }
          while (v176 != v356);
        }
        v179 = *(_DWORD *)(v80 + ((v175 - (_BYTE *)v355) << 29 >> 30));
        if (v82)
        {
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v180 = qword_1EE172140;
          if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349312;
            *(double *)v364 = v174;
            *(_WORD *)&v364[8] = 1026;
            *(_DWORD *)&v364[10] = v179;
            _os_log_impl(&dword_18F5B3000, v180, OS_LOG_TYPE_DEBUG, "CLRR,findNearestPointIndex,start point is matched to reference head section,min distance,%{public}.2lf,index from start of reference route,%{public}d", buf, 0x12u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172138 == -1)
            {
LABEL_288:
              v359 = 134349312;
              v360 = v174;
              v361 = 1026;
              v362 = v179;
              v197 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::findNearestPointIndex(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const int &, const RacingRoutePointType &, int &)", "CoreLocation: %s\n", v197);
              if (v197 != (char *)buf)
                free(v197);
              goto LABEL_248;
            }
LABEL_290:
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
            goto LABEL_288;
          }
        }
        else
        {
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v181 = qword_1EE172140;
          if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349312;
            *(double *)v364 = v174;
            *(_WORD *)&v364[8] = 1026;
            *(_DWORD *)&v364[10] = v179;
            _os_log_impl(&dword_18F5B3000, v181, OS_LOG_TYPE_DEBUG, "CLRR,findNearestPointIndex,min distance,%{public}.2lf,index from start of search window,%{public}d", buf, 0x12u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172138 == -1)
              goto LABEL_288;
            goto LABEL_290;
          }
        }
LABEL_248:
        if (v355)
        {
          v356 = (double *)v355;
          operator delete(v355);
        }
        if (v357[1])
        {
          v357[2] = v357[1];
          operator delete((void *)v357[1]);
        }
        if (v81 != v80)
        {
          if ((v179 & 0x80000000) == 0)
          {
            v182 = v179 + v60;
            v183 = v352;
            if (v352 >= v353)
            {
              v187 = (char *)v351;
              v188 = (v352 - (_BYTE *)v351) >> 2;
              v189 = v188 + 1;
              if ((unint64_t)(v188 + 1) >> 62)
                sub_18F5F7864();
              v190 = v353 - (_BYTE *)v351;
              if ((v353 - (_BYTE *)v351) >> 1 > v189)
                v189 = v190 >> 1;
              if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFFCLL)
                v13 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v13 = v189;
              if (v13)
              {
                v191 = (char *)sub_18F62C554((uint64_t)&v353, v13);
                v187 = (char *)v351;
                v183 = v352;
              }
              else
              {
                v191 = 0;
              }
              v192 = &v191[4 * v188];
              *(_DWORD *)v192 = v182;
              v184 = v192 + 4;
              while (v183 != v187)
              {
                v193 = *((_DWORD *)v183 - 1);
                v183 -= 4;
                *((_DWORD *)v192 - 1) = v193;
                v192 -= 4;
              }
              v351 = v192;
              v352 = v184;
              v353 = &v191[4 * v13];
              if (v187)
                operator delete(v187);
            }
            else
            {
              *(_DWORD *)v352 = v182;
              v184 = v183 + 4;
            }
            v352 = v184;
          }
          goto LABEL_261;
        }
        goto LABEL_256;
      }
      if (*(_BYTE *)(a1 + 479))
      {
        *(_BYTE *)(a1 + 475) = 1;
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v123 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v123, OS_LOG_TYPE_DEFAULT, "CLRR,findNearestPointIndex,reached end of reference route", buf, 2u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_256;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        LOWORD(v357[1]) = 0;
        v66 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::findNearestPointIndex(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const int &, const RacingRoutePointType &, int &)", "CoreLocation: %s\n", v66);
      }
      else
      {
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v124 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
        {
          v128 = objc_msgSend_count(v346, v125, v126, v127);
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v364 = v60;
          *(_WORD *)&v364[4] = 2050;
          *(_QWORD *)&v364[6] = v128;
          _os_log_impl(&dword_18F5B3000, v124, OS_LOG_TYPE_ERROR, "CLRR,findNearestPointIndex,invalid search index,%{public}d,array size,%{public}lu", buf, 0x12u);
        }
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_256;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v132 = objc_msgSend_count(v346, v129, v130, v131);
        LODWORD(v357[1]) = 67240448;
        HIDWORD(v357[1]) = v60;
        LOWORD(v357[2]) = 2050;
        *(_QWORD *)((char *)&v357[2] + 2) = v132;
        v66 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::findNearestPointIndex(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const int &, const RacingRoutePointType &, int &)", "CoreLocation: %s\n", v66);
      }
    }
    else
    {
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v122 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134283777;
        *(double *)v364 = v68;
        *(_WORD *)&v364[8] = 2049;
        *(double *)&v364[10] = v73;
        _os_log_impl(&dword_18F5B3000, v122, OS_LOG_TYPE_ERROR, "CLRR,findNearestPointIndex,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_256;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      LODWORD(v357[1]) = 134283777;
      *(double *)((char *)&v357[1] + 4) = v68;
      WORD2(v357[2]) = 2049;
      *(double *)((char *)&v357[2] + 6) = v73;
      v66 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::findNearestPointIndex(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const int &, const RacingRoutePointType &, int &)", "CoreLocation: %s\n", v66);
    }
LABEL_180:
    if (v66 != (char *)buf)
      free(v66);
    goto LABEL_256;
  }
LABEL_298:
  v200 = (int *)v351;
  if (v352 == v351)
  {
    *(_BYTE *)(a1 + 484) = 1;
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v208 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v208, OS_LOG_TYPE_DEBUG, "CLRR,processLocationPoint,no matched point is found in the current or neighboring cells.Skip this point.", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_402;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 == -1)
      goto LABEL_449;
    goto LABEL_479;
  }
  v201 = (char *)v351 + 4;
  if ((char *)v351 + 4 == v352)
  {
    v204 = v341;
  }
  else
  {
    v202 = *(_DWORD *)v351;
    v203 = (char *)v351 + 4;
    v204 = v341;
    do
    {
      v206 = *(_DWORD *)v203;
      v203 += 4;
      v205 = v206;
      if (v206 < v202)
      {
        v202 = v205;
        v200 = (int *)v201;
      }
      v201 = v203;
    }
    while (v203 != v352);
  }
  v209 = *v200;
  *(_DWORD *)(a1 + 524) = v209;
  if (v209 >= *(_DWORD *)(a1 + 488))
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v220 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      v221 = *(_DWORD *)(a1 + 524);
      v222 = *(_DWORD *)(a1 + 488);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v364 = v221;
      *(_WORD *)&v364[4] = 1026;
      *(_DWORD *)&v364[6] = v222;
      _os_log_impl(&dword_18F5B3000, v220, OS_LOG_TYPE_ERROR, "CLRR,processLocationPoint,index exceeded buffer range,last matched index,%{public}d,buffer size,%{public}d", buf, 0xEu);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_402;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v223 = *(_DWORD *)(a1 + 524);
    v224 = *(_DWORD *)(a1 + 488);
    LODWORD(v357[1]) = 67240448;
    HIDWORD(v357[1]) = v223;
    LOWORD(v357[2]) = 1026;
    *(_DWORD *)((char *)&v357[2] + 2) = v224;
    v199 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v199);
    goto LABEL_450;
  }
  if ((*a5 - 1) >= 2)
  {
    if (!*a5)
    {
      v225 = *(unsigned int *)(a1 + 540);
      if ((v225 & 0x80000000) != 0 || objc_msgSend_count(v10, (const char *)v13, v14, v15) <= v225)
      {
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v230 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
        {
          v231 = *(_DWORD *)(a1 + 540);
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)v364 = v231;
          _os_log_impl(&dword_18F5B3000, v230, OS_LOG_TYPE_ERROR, "CLRR,processLocationPoint,invalid raceStartLineProximityIndex,%{public}d", buf, 8u);
        }
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_402;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v232 = *(_DWORD *)(a1 + 540);
        LODWORD(v357[1]) = 67240192;
        HIDWORD(v357[1]) = v232;
        v199 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v199);
        goto LABEL_450;
      }
      if (*(_DWORD *)(a1 + 524) > *(_DWORD *)(a1 + 540))
      {
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v226 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
        {
          v227 = *(_DWORD *)(a1 + 524);
          v228 = *(_DWORD *)(a1 + 540);
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v364 = v227;
          *(_WORD *)&v364[4] = 1026;
          *(_DWORD *)&v364[6] = v228;
          _os_log_impl(&dword_18F5B3000, v226, OS_LOG_TYPE_DEFAULT, "CLRR,processLocationPoint,user joined the race at a wrong location,lastMatchedPointIndex,%{public}d,raceStartLineProximityIndex,%{public}d", buf, 0xEu);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v335 = *(_DWORD *)(a1 + 524);
          v336 = *(_DWORD *)(a1 + 540);
          LODWORD(v357[1]) = 67240448;
          HIDWORD(v357[1]) = v335;
          LOWORD(v357[2]) = 1026;
          *(_DWORD *)((char *)&v357[2] + 2) = v336;
          v337 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v337);
          if (v337 != (char *)buf)
            free(v337);
        }
        v36 = 0;
        *v347 = v342;
        goto LABEL_403;
      }
    }
LABEL_375:
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v264 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
    {
      v265 = *a5;
      v266 = *v347;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v364 = v265;
      *(_WORD *)&v364[4] = 1026;
      *(_DWORD *)&v364[6] = v266;
      _os_log_impl(&dword_18F5B3000, v264, OS_LOG_TYPE_DEFAULT, "CLRR,processLocationPoint,pointType,%{public}d,last matched index,%{public}d", buf, 0xEu);
    }
    v270 = v346;
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v325 = *a5;
      v326 = *v347;
      LODWORD(v357[1]) = 67240448;
      HIDWORD(v357[1]) = v325;
      LOWORD(v357[2]) = 1026;
      *(_DWORD *)((char *)&v357[2] + 2) = v326;
      v327 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v327);
      if (v327 != (char *)buf)
        free(v327);
      v270 = v346;
    }
    v271 = *v347;
    if (objc_msgSend_count(v270, v267, v268, v269) - 1 == v271 && *(_BYTE *)(a1 + 479))
    {
      *(_BYTE *)(a1 + 475) = 1;
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v275 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v275, OS_LOG_TYPE_DEFAULT, "CLRR,processLocationPoint,reached end of reference route", buf, 2u);
      }
      v270 = v346;
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        LOWORD(v357[1]) = 0;
        v328 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v328);
        if (v328 != (char *)buf)
          free(v328);
        v270 = v346;
      }
    }
    v276 = v343;
    if (!*(_BYTE *)(a1 + 475)
      && *(_BYTE *)(a1 + 483)
      && *(double *)(a1 + 376) >= *(double *)(a1 + 544) - *(double *)(a1 + 576))
    {
      v279 = objc_msgSend_count(v270, v272, v273, v274);
      v280 = *(double *)v340;
      v281 = *(double *)(v340 + 8);
      v282 = v279 - 1;
      v285 = (void *)objc_msgSend_objectAtIndexedSubscript_(v270, v283, v282, v284);
      objc_msgSend_latitude_deg(v285, v286, v287, v288);
      v290 = v289;
      v293 = (void *)objc_msgSend_objectAtIndexedSubscript_(v346, v291, v282, v292);
      objc_msgSend_longitude_deg(v293, v294, v295, v296);
      v301 = sub_18F5BD064((double *)a1, v280, v281, v290, v297, 0.0);
      v270 = v346;
      if (*(double *)(a1 + 568) < 0.0 && v301 <= *(double *)(a1 + 576))
      {
        *(double *)(a1 + 568) = v301 * *(double *)(v340 + 72) + 2.0;
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v302 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
        {
          v303 = *(_QWORD *)(a1 + 568);
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)v364 = v303;
          _os_log_impl(&dword_18F5B3000, v302, OS_LOG_TYPE_DEFAULT, "CLRR,processLocationPoint,end the race in %{public}.2lf seconds if it did not happen naturally", buf, 0xCu);
        }
        v270 = v346;
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v338 = *(_QWORD *)(a1 + 568);
          LODWORD(v357[1]) = 134349056;
          *(_QWORD *)((char *)&v357[1] + 4) = v338;
          v339 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v339);
          if (v339 != (char *)buf)
            free(v339);
          v270 = v346;
        }
        *(_QWORD *)(a1 + 560) = *(_QWORD *)(v340 + 32);
      }
      if (*(double *)(a1 + 376) >= *(double *)(a1 + 544) + -2.0)
      {
        *v347 = objc_msgSend_count(v270, v298, v299, v300) - 1;
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v323 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v323, OS_LOG_TYPE_DEFAULT, "CLRR,processLocationPoint,too close to finish line,jump to the end of the reference route", buf, 2u);
        }
        v270 = v346;
        if (sub_18F5C4AE0(115, 2))
        {
          v308 = v343;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          LOWORD(v357[1]) = 0;
          v322 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v322);
          goto LABEL_436;
        }
      }
      else if (*(double *)(a1 + 560) > 0.0)
      {
        objc_msgSend_timestamp_s(v343, v298, v299, v300);
        v270 = v346;
        if (v307 - *(double *)(a1 + 560) > *(double *)(a1 + 568))
        {
          v308 = v343;
          *v347 = objc_msgSend_count(v346, v304, v305, v306) - 1;
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v309 = qword_1EE172140;
          if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend_timestamp_s(v343, v310, v311, v312);
            v313 = *(_QWORD *)(a1 + 560);
            v314 = *(_QWORD *)(a1 + 568);
            *(_DWORD *)buf = 134349568;
            *(_QWORD *)v364 = v315;
            *(_WORD *)&v364[8] = 2050;
            *(_QWORD *)&v364[10] = v313;
            *(_WORD *)&v364[18] = 2050;
            v365 = v314;
            _os_log_impl(&dword_18F5B3000, v309, OS_LOG_TYPE_DEFAULT, "CLRR,processLocationPoint,timeout,jump to the end of the reference route,current time,%{public}.2lf,registeredTimeAtThreshold,%{public}.2lf,endOfRaceTimeThreshold,%{public}.2lf", buf, 0x20u);
          }
          v270 = v346;
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172138 != -1)
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
            objc_msgSend_timestamp_s(v343, v316, v317, v318);
            v319 = *(_QWORD *)(a1 + 560);
            v320 = *(_QWORD *)(a1 + 568);
            LODWORD(v357[1]) = 134349568;
            *(_QWORD *)((char *)&v357[1] + 4) = v321;
            WORD2(v357[2]) = 2050;
            *(_QWORD *)((char *)&v357[2] + 6) = v319;
            HIWORD(v357[3]) = 2050;
            v358 = v320;
            v322 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v322);
LABEL_436:
            if (v322 != (char *)buf)
              free(v322);
            v270 = v346;
            v276 = v308;
          }
        }
      }
    }
    if ((sub_18F65639C(a1, v276, v270, v347, &v354, a5, v340) & 1) != 0)
    {
      v36 = 1;
      if (sub_18F5BD064((double *)a1, *(double *)v340, *(double *)(v340 + 8), *(double *)(v340 + 88), *(double *)(v340 + 96), 0.0) <= *(double *)(a1 + 576))goto LABEL_403;
      *(_BYTE *)(a1 + 484) = 1;
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v277 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v277, OS_LOG_TYPE_DEFAULT, "CLRR,processLocationPoint,failed to process the most recent point,the matched point is too far away", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 2))
      {
LABEL_402:
        v36 = 0;
        goto LABEL_403;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 == -1)
        goto LABEL_449;
    }
    else
    {
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v278 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v278, OS_LOG_TYPE_DEBUG, "CLRR,processLocationPoint,failed to set the most recent point", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_402;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 == -1)
        goto LABEL_449;
    }
LABEL_479:
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
LABEL_449:
    LOWORD(v357[1]) = 0;
    v199 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v199);
LABEL_450:
    if (v199 != (char *)buf)
      free(v199);
    goto LABEL_402;
  }
  v210 = (int)((double)v204 * 0.75);
  if (v210 < 0 || objc_msgSend_count(v10, (const char *)v13, v14, v15) <= (unint64_t)v210)
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v229 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v364 = v210;
      _os_log_impl(&dword_18F5B3000, v229, OS_LOG_TYPE_ERROR, "CLRR,processLocationPoint,invalid prematureRaceEndIndex,%{public}d", buf, 8u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_402;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    LODWORD(v357[1]) = 67240192;
    HIDWORD(v357[1]) = v210;
    v199 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v199);
    goto LABEL_450;
  }
  v214 = objc_msgSend_count(v10, v211, v212, v213);
  v218 = *v347;
  if (v342 > (int)((double)(unint64_t)v214 * 0.25) || v218 < v210)
  {
    if (objc_msgSend_count(v10, v215, v216, v217) - 1 == v218)
    {
      *(_BYTE *)(a1 + 477) = 0;
    }
    else if (*v347 == v342 && *(_BYTE *)(a1 + 477))
    {
      v354 = 1;
    }
    goto LABEL_375;
  }
  if (qword_1EE172138 != -1)
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
  v233 = qword_1EE172140;
  if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
  {
    v237 = objc_msgSend_count(v10, v234, v235, v236);
    v238 = *v347;
    *(_DWORD *)buf = 134349824;
    *(_QWORD *)v364 = v237;
    *(_WORD *)&v364[8] = 1026;
    *(_DWORD *)&v364[10] = v210;
    *(_WORD *)&v364[14] = 1026;
    *(_DWORD *)&v364[16] = v238;
    LOWORD(v365) = 1026;
    *(_DWORD *)((char *)&v365 + 2) = v342;
    _os_log_impl(&dword_18F5B3000, v233, OS_LOG_TYPE_DEFAULT, "CLRR,processLocationPoint,race start point already detected,most recent matched point jumped from head to tail of the reference route,skip this data point to avoid premature race ending,reference route count,%{public}lu,premature race ending index,%{public}d,last matched index,%{public}d,matched index before update,%{public}d", buf, 0x1Eu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v332 = objc_msgSend_count(v346, v329, v330, v331);
    v333 = *v347;
    LODWORD(v357[1]) = 134349824;
    *(_QWORD *)((char *)&v357[1] + 4) = v332;
    WORD2(v357[2]) = 1026;
    *(_DWORD *)((char *)&v357[2] + 6) = v210;
    WORD1(v357[3]) = 1026;
    HIDWORD(v357[3]) = v333;
    LOWORD(v358) = 1026;
    *(_DWORD *)((char *)&v358 + 2) = v342;
    v334 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::processLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v334);
    if (v334 != (char *)buf)
      free(v334);
    v10 = v346;
  }
  *v347 = v342;
  objc_msgSend_latitude_deg(v343, v239, v240, v241);
  v243 = v242;
  objc_msgSend_longitude_deg(v343, v244, v245, v246);
  v248 = v247;
  v251 = (void *)objc_msgSend_objectAtIndexedSubscript_(v10, v249, *v347, v250);
  objc_msgSend_latitude_deg(v251, v252, v253, v254);
  v256 = v255;
  v259 = (void *)objc_msgSend_objectAtIndexedSubscript_(v10, v257, *v347, v258);
  objc_msgSend_longitude_deg(v259, v260, v261, v262);
  if (sub_18F5BD064((double *)a1, v243, v248, v256, v263, 0.0) <= *(double *)(a1 + 576))
    goto LABEL_402;
  v36 = 0;
  *(_BYTE *)(a1 + 484) = 1;
LABEL_403:
  if (__p)
    operator delete(__p);
  if (v351)
  {
    v352 = (char *)v351;
    operator delete(v351);
  }
  return v36;
}

void sub_18F656294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  if (__p)
    operator delete(__p);
  if (a36)
    operator delete(a36);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F65639C(uint64_t a1, char *a2, void *a3, int *a4, _BYTE *a5, int *a6, uint64_t a7)
{
  unint64_t v9;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t result;
  char *v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  NSObject *v61;
  NSObject *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  BOOL v79;
  NSObject *v80;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  _BOOL4 v90;
  NSObject *v91;
  int v92;
  NSObject *v93;
  int v94;
  NSObject *v95;
  int v96;
  char v97;
  char v98;
  NSObject *v99;
  int v100;
  char v101;
  NSObject *v102;
  int v103;
  NSObject *v104;
  int v105;
  double v106;
  double v107;
  _BOOL4 v108;
  NSObject *v109;
  char *v110;
  NSObject *v111;
  int v112;
  NSObject *v113;
  NSObject *v114;
  int v115;
  NSObject *v116;
  int v117;
  NSObject *v118;
  int v119;
  NSObject *v120;
  int v121;
  NSObject *v122;
  int v123;
  int v124;
  NSObject *v125;
  int v126;
  int v127;
  NSObject *v128;
  int v129;
  NSObject *v130;
  int v131;
  int v132;
  NSObject *v133;
  int v134;
  int v135;
  NSObject *v136;
  int v137;
  NSObject *v138;
  int v139;
  void *v140;
  int v141;
  NSObject *v142;
  int v143;
  int v144;
  int v145;
  void *v146;
  double v147[2];
  double v148;
  double v149[2];
  void *__p[4];
  uint8_t buf[4];
  uint64_t v152;
  __int16 v153;
  int v154;
  uint64_t v155;

  v155 = *MEMORY[0x1E0C80C00];
  v9 = *a4;
  if ((v9 & 0x80000000) != 0 || objc_msgSend_count(a3, a2, (uint64_t)a3, (uint64_t)a4) <= v9)
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v22 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      v26 = objc_msgSend_count(a3, v23, v24, v25);
      v27 = *a4;
      *(_DWORD *)buf = 134349312;
      v152 = v26;
      v153 = 1026;
      v154 = v27;
      _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,index out of bounds,input array size,%{public}lu,index,%{public}d", buf, 0x12u);
    }
    result = sub_18F5C4AE0(115, 0);
    if (!(_DWORD)result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 == -1)
      goto LABEL_253;
    goto LABEL_269;
  }
  *(_BYTE *)(a1 + 477) = 0;
  if (*a6 || (v18 = *a4, objc_msgSend_count(a3, v15, v16, v17) - 1 != v18))
  {
    v28 = *a4;
    if (!*a4)
    {
      v29 = objc_msgSend_count(a3, v15, v16, v17);
      v28 = *a4;
      if (v29 >= 2)
      {
        v30 = (void *)objc_msgSend_objectAtIndex_(a3, v15, v28, v17);
        v36 = (void *)objc_msgSend_objectAtIndex_(a3, v31, *a4 + 1, v32);
        v146 = 0;
        goto LABEL_28;
      }
    }
    v37 = objc_msgSend_count(a3, v15, v16, v17);
    v41 = *a4;
    if (v37 - 1 == v28)
    {
      if ((int)v41 >= 1)
      {
        v146 = (void *)objc_msgSend_objectAtIndex_(a3, v38, (v41 - 1), v40);
        v30 = (void *)objc_msgSend_objectAtIndex_(a3, v42, *a4, v43);
        v36 = 0;
        goto LABEL_28;
      }
    }
    else if ((int)v41 >= 1 && objc_msgSend_count(a3, v38, v39, v40) > (unint64_t)(v41 + 1))
    {
      v146 = (void *)objc_msgSend_objectAtIndex_(a3, v44, *a4 - 1, v45);
      v30 = (void *)objc_msgSend_objectAtIndex_(a3, v46, *a4, v47);
      v36 = (void *)objc_msgSend_objectAtIndex_(a3, v48, *a4 + 1, v49);
LABEL_28:
      v50 = *a4;
      if ((_DWORD)v50)
      {
        if (objc_msgSend_count(a3, v33, v34, v35) - 1 == v50)
        {
          memset(__p, 0, 24);
          v51 = (void **)operator new(0x18uLL);
          *v51 = v146;
          v51[1] = v30;
          v51[2] = a2;
          if ((sub_18F650660(v51, (unint64_t)(v51 + 3), __p, v52) & 1) != 0)
          {
            v53 = *(double *)__p[0];
            v54 = *((double *)__p[0] + 1);
            v55 = *((double *)__p[0] + 3);
            v56 = *((double *)__p[0] + 4);
            v57 = *((double *)__p[0] + 6);
            v58 = *((double *)__p[0] + 7);
            if (vabdd_f64(*(double *)__p[0], v55) > 0.0000001 || vabdd_f64(v54, v56) > 0.0000001)
            {
              v59 = (v56 - v54) * (v58 - v54) + (v55 - v53) * (v57 - v53);
              if (v59 >= 0.0 && v59 <= (v56 - v54) * (v56 - v54) + (v55 - v53) * (v55 - v53))
              {
                v149[0] = 0.0;
                v101 = sub_18F658B48(v149, v53, v54, v55, v56, v57, v58);
                if ((v101 & 1) != 0)
                {
                  if ((sub_18F6526BC(a1, a2, v146, v30, v149, a6, a7) & 1) == 0)
                  {
                    if (qword_1EE172138 != -1)
                      dispatch_once(&qword_1EE172138, &unk_1E2990430);
                    v102 = qword_1EE172140;
                    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
                    {
                      v103 = *a4;
                      *(_DWORD *)buf = 67240192;
                      LODWORD(v152) = v103;
                      _os_log_impl(&dword_18F5B3000, v102, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,endOfArray,projectionOnPreviousSegment,failed to update scoreboard at index,%{public}d", buf, 8u);
                    }
                    if (!sub_18F5C4AE0(115, 2))
                      goto LABEL_94;
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172138 == -1)
                      goto LABEL_200;
LABEL_283:
                    dispatch_once(&qword_1EE172138, &unk_1E2990430);
LABEL_200:
                    v124 = *a4;
                    LODWORD(v148) = 67240192;
                    HIDWORD(v148) = v124;
                    v110 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v110);
                    goto LABEL_267;
                  }
                  goto LABEL_251;
                }
                if (qword_1EE172138 != -1)
                  dispatch_once(&qword_1EE172138, &unk_1E2990430);
                v118 = qword_1EE172140;
                if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
                {
                  v119 = *a4;
                  *(_DWORD *)buf = 67240192;
                  LODWORD(v152) = v119;
                  _os_log_impl(&dword_18F5B3000, v118, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,endOfArray,projectionOnPreviousSegment,failed to get projection ratio at index,%{public}d", buf, 8u);
                }
                if (!sub_18F5C4AE0(115, 0))
                  goto LABEL_94;
                bzero(buf, 0x65CuLL);
                if (qword_1EE172138 == -1)
                  goto LABEL_224;
LABEL_275:
                dispatch_once(&qword_1EE172138, &unk_1E2990430);
LABEL_224:
                v132 = *a4;
                LODWORD(v148) = 67240192;
                HIDWORD(v148) = v132;
                v110 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v110);
                goto LABEL_267;
              }
            }
            if (*a5)
            {
              if (qword_1EE172138 != -1)
                dispatch_once(&qword_1EE172138, &unk_1E2990430);
              v61 = qword_1EE172140;
              if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18F5B3000, v61, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,endOfArray,this matched point has already been the projected point,skip this point", buf, 2u);
              }
              if (!sub_18F5C4AE0(115, 2))
                goto LABEL_94;
              bzero(buf, 0x65CuLL);
              if (qword_1EE172138 == -1)
                goto LABEL_162;
LABEL_272:
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
LABEL_162:
              LOWORD(v149[0]) = 0;
              v110 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v110);
              goto LABEL_267;
            }
            if ((sub_18F651848(a1, a2, v30, a6, a7) & 1) == 0)
            {
              if (qword_1EE172138 != -1)
                dispatch_once(&qword_1EE172138, &unk_1E2990430);
              v114 = qword_1EE172140;
              if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
              {
                v115 = *a4;
                *(_DWORD *)buf = 67240192;
                LODWORD(v152) = v115;
                _os_log_impl(&dword_18F5B3000, v114, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,endOfArray,failed to update scoreboard at index,%{public}d", buf, 8u);
              }
              if (!sub_18F5C4AE0(115, 2))
                goto LABEL_94;
              bzero(buf, 0x65CuLL);
              if (qword_1EE172138 == -1)
                goto LABEL_231;
LABEL_282:
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
LABEL_231:
              v135 = *a4;
              LODWORD(v149[0]) = 67240192;
              HIDWORD(v149[0]) = v135;
              v110 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v110);
              goto LABEL_267;
            }
            goto LABEL_202;
          }
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v93 = qword_1EE172140;
          if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
          {
            v94 = *a4;
            *(_DWORD *)buf = 67240192;
            LODWORD(v152) = v94;
            _os_log_impl(&dword_18F5B3000, v93, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,endOfArray,failed to convert LLA to ENU at index,%{public}d", buf, 8u);
          }
          if (!sub_18F5C4AE0(115, 0))
            goto LABEL_94;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 == -1)
            goto LABEL_266;
LABEL_271:
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
LABEL_266:
          v145 = *a4;
          LODWORD(v149[0]) = 67240192;
          HIDWORD(v149[0]) = v145;
          v110 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v110);
LABEL_267:
          if (v110 != (char *)buf)
            free(v110);
LABEL_94:
          v97 = 0;
          goto LABEL_95;
        }
        memset(__p, 0, 24);
        v51 = (void **)operator new(0x20uLL);
        *v51 = v146;
        v51[1] = v30;
        v51[2] = v36;
        v51[3] = a2;
        if ((sub_18F650660(v51, (unint64_t)(v51 + 4), __p, v81) & 1) == 0)
        {
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v95 = qword_1EE172140;
          if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
          {
            v96 = *a4;
            *(_DWORD *)buf = 67240192;
            LODWORD(v152) = v96;
            _os_log_impl(&dword_18F5B3000, v95, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,failed to convert LLA to ENU at index,%{public}d", buf, 8u);
          }
          if (!sub_18F5C4AE0(115, 0))
            goto LABEL_94;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 == -1)
            goto LABEL_266;
          goto LABEL_271;
        }
        v82 = *(double *)__p[0];
        v84 = *((double *)__p[0] + 3);
        v83 = *((double *)__p[0] + 4);
        v85 = *((double *)__p[0] + 6);
        v86 = *((double *)__p[0] + 7);
        v88 = *((double *)__p[0] + 9);
        v87 = *((double *)__p[0] + 10);
        if (vabdd_f64(v84, v85) <= 0.0000001 && vabdd_f64(v83, v86) <= 0.0000001)
        {
          v90 = 0;
        }
        else
        {
          v89 = (v86 - v83) * (v87 - v83) + (v85 - v84) * (v88 - v84);
          v90 = v89 >= 0.0;
          if (v89 > (v86 - v83) * (v86 - v83) + (v85 - v84) * (v85 - v84))
            v90 = 0;
        }
        v106 = *((double *)__p[0] + 1);
        if (vabdd_f64(v82, v84) <= 0.0000001 && vabdd_f64(v106, v83) <= 0.0000001)
        {
          v108 = 0;
        }
        else
        {
          v107 = (v83 - v106) * (v87 - v106) + (v84 - v82) * (v88 - v82);
          v108 = v107 >= 0.0;
          if (v107 > (v83 - v106) * (v83 - v106) + (v84 - v82) * (v84 - v82))
            v108 = 0;
          if (v90 && v108)
          {
            v149[0] = 0.0;
            if ((sub_18F658B48(v149, v84, v83, v85, v86, v88, v87) & 1) == 0)
            {
              if (qword_1EE172138 != -1)
                dispatch_once(&qword_1EE172138, &unk_1E2990430);
              v120 = qword_1EE172140;
              if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
              {
                v121 = *a4;
                *(_DWORD *)buf = 67240192;
                LODWORD(v152) = v121;
                _os_log_impl(&dword_18F5B3000, v120, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,projectionOnBothSegments,wrt n1,failed to get projection ratio at index,%{public}d", buf, 8u);
              }
              if (!sub_18F5C4AE0(115, 0))
                goto LABEL_94;
              bzero(buf, 0x65CuLL);
              if (qword_1EE172138 == -1)
                goto LABEL_224;
              goto LABEL_275;
            }
            v148 = 0.0;
            if ((sub_18F658B48(&v148, v82, v106, v84, v83, v88, v87) & 1) == 0)
            {
              if (qword_1EE172138 != -1)
                dispatch_once(&qword_1EE172138, &unk_1E2990430);
              v125 = qword_1EE172140;
              if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
              {
                v126 = *a4;
                *(_DWORD *)buf = 67240192;
                LODWORD(v152) = v126;
                _os_log_impl(&dword_18F5B3000, v125, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,projectionOnBothSegments,wrt n0,failed to get projection ratio at index,%{public}d", buf, 8u);
              }
              if (!sub_18F5C4AE0(115, 0))
                goto LABEL_94;
              bzero(buf, 0x65CuLL);
              if (qword_1EE172138 != -1)
                dispatch_once(&qword_1EE172138, &unk_1E2990430);
              v127 = *a4;
              LODWORD(v147[0]) = 67240192;
              HIDWORD(v147[0]) = v127;
              v110 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v110);
              goto LABEL_267;
            }
            if (vabdd_f64(v149[0], 1.0 - v148) < 0.0000001)
            {
              if (*a5)
              {
                if (qword_1EE172138 != -1)
                  dispatch_once(&qword_1EE172138, &unk_1E2990430);
                v109 = qword_1EE172140;
                if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_18F5B3000, v109, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,projectionOnBothSegments,pickedNearestPoint,this matched point has already been the projected point,skip this point", buf, 2u);
                }
                if (!sub_18F5C4AE0(115, 2))
                  goto LABEL_94;
                bzero(buf, 0x65CuLL);
                if (qword_1EE172138 != -1)
                  dispatch_once(&qword_1EE172138, &unk_1E2990430);
                LOWORD(v147[0]) = 0;
                v110 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v110);
                goto LABEL_267;
              }
              if ((sub_18F651848(a1, a2, v30, a6, a7) & 1) == 0)
              {
                if (qword_1EE172138 != -1)
                  dispatch_once(&qword_1EE172138, &unk_1E2990430);
                v142 = qword_1EE172140;
                if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
                {
                  v143 = *a4;
                  *(_DWORD *)buf = 67240192;
                  LODWORD(v152) = v143;
                  _os_log_impl(&dword_18F5B3000, v142, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,projectionOnBothSegments,pickedNearestPoint,failed to update scoreboard at index,%{public}d", buf, 8u);
                }
                if (!sub_18F5C4AE0(115, 2))
                  goto LABEL_94;
                bzero(buf, 0x65CuLL);
                if (qword_1EE172138 != -1)
                  dispatch_once(&qword_1EE172138, &unk_1E2990430);
                v144 = *a4;
                LODWORD(v147[0]) = 67240192;
                HIDWORD(v147[0]) = v144;
                v110 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v110);
                goto LABEL_267;
              }
              *(_BYTE *)(a1 + 477) = 1;
              goto LABEL_251;
            }
            if (v149[0] >= 1.0 - v148)
            {
              v147[0] = v148;
              if ((sub_18F6526BC(a1, a2, v146, v30, v147, a6, a7) & 1) == 0)
              {
                if (qword_1EE172138 != -1)
                  dispatch_once(&qword_1EE172138, &unk_1E2990430);
                v138 = qword_1EE172140;
                if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
                {
                  v139 = *a4;
                  *(_DWORD *)buf = 67240192;
                  LODWORD(v152) = v139;
                  _os_log_impl(&dword_18F5B3000, v138, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,projectionOnBothSegments,pickedPreviousSegment,failed to update scoreboard at index,%{public}d", buf, 8u);
                }
                if (!sub_18F5C4AE0(115, 2))
                  goto LABEL_94;
                bzero(buf, 0x65CuLL);
                if (qword_1EE172138 == -1)
                  goto LABEL_240;
                goto LABEL_284;
              }
            }
            else
            {
              v147[0] = v149[0];
              if ((sub_18F6526BC(a1, a2, v30, v36, v147, a6, a7) & 1) == 0)
              {
                if (qword_1EE172138 != -1)
                  dispatch_once(&qword_1EE172138, &unk_1E2990430);
                v136 = qword_1EE172140;
                if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
                {
                  v137 = *a4;
                  *(_DWORD *)buf = 67240192;
                  LODWORD(v152) = v137;
                  _os_log_impl(&dword_18F5B3000, v136, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,projectionOnBothSegments,pickedNextSegment,failed to update scoreboard at index,%{public}d", buf, 8u);
                }
                if (!sub_18F5C4AE0(115, 2))
                  goto LABEL_94;
                bzero(buf, 0x65CuLL);
                if (qword_1EE172138 == -1)
                  goto LABEL_240;
LABEL_284:
                dispatch_once(&qword_1EE172138, &unk_1E2990430);
LABEL_240:
                v110 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v110);
                goto LABEL_267;
              }
            }
LABEL_251:
            v97 = 1;
LABEL_95:
            operator delete(v51);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            return (v97 & 1) != 0;
          }
        }
        if (!v90 && !v108)
        {
          if (*a5)
          {
            if (qword_1EE172138 != -1)
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
            v113 = qword_1EE172140;
            if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F5B3000, v113, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,projectionOnNearestPoint,this matched point has already been the projected point,skip this point", buf, 2u);
            }
            if (!sub_18F5C4AE0(115, 2))
              goto LABEL_94;
            bzero(buf, 0x65CuLL);
            if (qword_1EE172138 == -1)
              goto LABEL_162;
            goto LABEL_272;
          }
          if ((sub_18F651848(a1, a2, v30, a6, a7) & 1) == 0)
          {
            if (qword_1EE172138 != -1)
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
            v133 = qword_1EE172140;
            if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
            {
              v134 = *a4;
              *(_DWORD *)buf = 67240192;
              LODWORD(v152) = v134;
              _os_log_impl(&dword_18F5B3000, v133, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,projectionOnNearestPoint,failed to update scoreboard at index,%{public}d", buf, 8u);
            }
            if (!sub_18F5C4AE0(115, 2))
              goto LABEL_94;
            bzero(buf, 0x65CuLL);
            if (qword_1EE172138 == -1)
              goto LABEL_231;
            goto LABEL_282;
          }
LABEL_202:
          v97 = 1;
          *(_BYTE *)(a1 + 477) = 1;
          goto LABEL_95;
        }
        if (v90)
        {
          v149[0] = 0.0;
          if ((sub_18F658B48(v149, v84, v83, v85, v86, v88, v87) & 1) != 0)
          {
            if ((sub_18F6526BC(a1, a2, v30, v36, v149, a6, a7) & 1) == 0)
            {
              if (qword_1EE172138 != -1)
                dispatch_once(&qword_1EE172138, &unk_1E2990430);
              v111 = qword_1EE172140;
              if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
              {
                v112 = *a4;
                *(_DWORD *)buf = 67240192;
                LODWORD(v152) = v112;
                _os_log_impl(&dword_18F5B3000, v111, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,projectionOnNextSegment,failed to update scoreboard at index,%{public}d", buf, 8u);
              }
              if (!sub_18F5C4AE0(115, 2))
                goto LABEL_94;
              bzero(buf, 0x65CuLL);
              if (qword_1EE172138 == -1)
                goto LABEL_200;
              goto LABEL_283;
            }
            goto LABEL_251;
          }
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v128 = qword_1EE172140;
          if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
          {
            v129 = *a4;
            *(_DWORD *)buf = 67240192;
            LODWORD(v152) = v129;
            _os_log_impl(&dword_18F5B3000, v128, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,projectionOnNextSegment,failed to get projection ratio at index,%{public}d", buf, 8u);
          }
          if (!sub_18F5C4AE0(115, 0))
            goto LABEL_94;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 == -1)
            goto LABEL_224;
          goto LABEL_275;
        }
        v149[0] = 0.0;
        if ((sub_18F658B48(v149, v82, v106, v84, v83, v88, v87) & 1) == 0)
        {
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v130 = qword_1EE172140;
          if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
          {
            v131 = *a4;
            *(_DWORD *)buf = 67240192;
            LODWORD(v152) = v131;
            _os_log_impl(&dword_18F5B3000, v130, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,projectionOnPreviousSegment,failed to get projection ratio at index,%{public}d", buf, 8u);
          }
          if (!sub_18F5C4AE0(115, 0))
            goto LABEL_94;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 == -1)
            goto LABEL_224;
          goto LABEL_275;
        }
        if ((sub_18F6526BC(a1, a2, v146, v30, v149, a6, a7) & 1) == 0)
        {
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v122 = qword_1EE172140;
          if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
          {
            v123 = *a4;
            *(_DWORD *)buf = 67240192;
            LODWORD(v152) = v123;
            _os_log_impl(&dword_18F5B3000, v122, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,projectionOnPreviousSegment,failed to update scoreboard at index,%{public}d", buf, 8u);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_94;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 == -1)
            goto LABEL_200;
          goto LABEL_283;
        }
        goto LABEL_251;
      }
      memset(__p, 0, 24);
      v51 = (void **)operator new(0x18uLL);
      *v51 = v30;
      v51[1] = v36;
      v51[2] = a2;
      if ((sub_18F650660(v51, (unint64_t)(v51 + 3), __p, v71) & 1) == 0)
      {
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v91 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
        {
          v92 = *a4;
          *(_DWORD *)buf = 67240192;
          LODWORD(v152) = v92;
          _os_log_impl(&dword_18F5B3000, v91, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,startOfArray,failed to convert LLA to ENU at index,%{public}d", buf, 8u);
        }
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_94;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 == -1)
          goto LABEL_266;
        goto LABEL_271;
      }
      v72 = *(double *)__p[0];
      v73 = *((double *)__p[0] + 1);
      v74 = *((double *)__p[0] + 3);
      v75 = *((double *)__p[0] + 4);
      v76 = *((double *)__p[0] + 6);
      v77 = *((double *)__p[0] + 7);
      if (vabdd_f64(*(double *)__p[0], v74) <= 0.0000001 && vabdd_f64(v73, v75) <= 0.0000001
        || ((v78 = (v75 - v73) * (v77 - v73) + (v74 - v72) * (v76 - v72), v78 >= 0.0)
          ? (v79 = v78 > (v75 - v73) * (v75 - v73) + (v74 - v72) * (v74 - v72))
          : (v79 = 1),
            v79))
      {
        if (*a5)
        {
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v80 = qword_1EE172140;
          if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v80, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,startOfArray,this matched point has already been the projected point,skip this point", buf, 2u);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_94;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 == -1)
            goto LABEL_162;
          goto LABEL_272;
        }
        if ((sub_18F651848(a1, a2, v30, a6, a7) & 1) == 0)
        {
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v104 = qword_1EE172140;
          if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
          {
            v105 = *a4;
            *(_DWORD *)buf = 67240192;
            LODWORD(v152) = v105;
            _os_log_impl(&dword_18F5B3000, v104, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,startOfArray,failed to update scoreboard at index,%{public}d", buf, 8u);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_94;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 == -1)
            goto LABEL_231;
          goto LABEL_282;
        }
        goto LABEL_202;
      }
      v149[0] = 0.0;
      v98 = sub_18F658B48(v149, v72, v73, v74, v75, v76, v77);
      if ((v98 & 1) == 0)
      {
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v116 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
        {
          v117 = *a4;
          *(_DWORD *)buf = 67240192;
          LODWORD(v152) = v117;
          _os_log_impl(&dword_18F5B3000, v116, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,startOfArray,projectionOnNextSegment,failed to get projection ratio at index,%{public}d", buf, 8u);
        }
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_94;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 == -1)
          goto LABEL_224;
        goto LABEL_275;
      }
      if ((sub_18F6526BC(a1, a2, v30, v36, v149, a6, a7) & 1) == 0)
      {
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v99 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
        {
          v100 = *a4;
          *(_DWORD *)buf = 67240192;
          LODWORD(v152) = v100;
          _os_log_impl(&dword_18F5B3000, v99, OS_LOG_TYPE_DEBUG, "CLRR,setLocationPoint,startOfArray,projectionOnNextSegment,failed to update scoreboard at index,%{public}d", buf, 8u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_94;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 == -1)
          goto LABEL_200;
        goto LABEL_283;
      }
      goto LABEL_251;
    }
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v62 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      v66 = objc_msgSend_count(a3, v63, v64, v65);
      v67 = *a4;
      *(_DWORD *)buf = 134349312;
      v152 = v66;
      v153 = 1026;
      v154 = v67;
      _os_log_impl(&dword_18F5B3000, v62, OS_LOG_TYPE_ERROR, "CLRR,setLocationPoint,index out of bounds,input array size,%{public}lu,index,%{public}d", buf, 0x12u);
    }
    result = sub_18F5C4AE0(115, 0);
    if (!(_DWORD)result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 == -1)
    {
LABEL_253:
      v140 = (void *)objc_msgSend_count(a3, v68, v69, v70);
      v141 = *a4;
      LODWORD(__p[0]) = 134349312;
      *(void **)((char *)__p + 4) = v140;
      WORD2(__p[1]) = 1026;
      *(_DWORD *)((char *)&__p[1] + 6) = v141;
      v21 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v21);
LABEL_254:
      if (v21 != (char *)buf)
        free(v21);
      return 0;
    }
LABEL_269:
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
    goto LABEL_253;
  }
  if (qword_1EE172138 != -1)
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
  v19 = qword_1EE172140;
  if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_DEFAULT, "CLRR,setLocationPoint,reached end of route", buf, 2u);
  }
  result = sub_18F5C4AE0(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    LOWORD(__p[0]) = 0;
    v21 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::setLocationPoint(CLRoutePoint *, const NSArray<CLRoutePoint *> *, const int &, const BOOL &, const RacingRoutePointType &, RacingRouteScoreboard &)", "CoreLocation: %s\n", v21);
    goto LABEL_254;
  }
  return result;
}

void sub_18F658A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_18F658B48(double *a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  if (vabdd_f64(a2, a4) <= 0.0000001 && vabdd_f64(a3, a5) <= 0.0000001)
    return 0;
  if (vabdd_f64(a2, a6) <= 0.0000001)
  {
    v7 = 0.0;
    if (vabdd_f64(a3, a7) <= 0.0000001)
      goto LABEL_8;
  }
  v8 = 0;
  v9 = a4 - a2;
  v10 = a5 - a3;
  v11 = a6 - a2;
  v12 = a7 - a3;
  v13 = sqrt(v10 * v10 + v9 * v9);
  v14 = sqrt(v12 * v12 + v11 * v11);
  if (fabs(v13 * v14) > 0.0000001 && fabs(v13) > 0.0000001)
  {
    v7 = v14 * ((v10 * v12 + v9 * v11) / (v13 * v14)) / v13;
LABEL_8:
    *a1 = v7;
    return 1;
  }
  return v8;
}

uint64_t sub_18F658BF8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 484))
    ++*(_DWORD *)(a1 + 512);
  else
    ++*(_DWORD *)(a1 + 516);
  if (!*(_BYTE *)(a1 + 476) && *(_DWORD *)(a1 + 512) >= 5u)
    *(_BYTE *)(a1 + 476) = 1;
  if (!*(_BYTE *)(a1 + 485) && *(_DWORD *)(a1 + 516) >= 0xAu)
    *(_BYTE *)(a1 + 485) = 1;
  return sub_18F658C5C(a1, a2, a3, a4);
}

uint64_t sub_18F658C5C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  double v5;
  uint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;

  if (*(_DWORD *)(a1 + 512) > *(_DWORD *)(a1 + 496) << ((*(_DWORD *)(a1 + 40) - 3) < 2))
    *(_BYTE *)(a1 + 478) = 1;
  v5 = (double)*(int *)(a1 + 524);
  result = objc_msgSend_count(*(void **)(a1 + 48), a2, a3, a4);
  v10 = *(_DWORD *)(a1 + 488);
  if (v10 >= (int)result)
    v10 = result;
  if ((double)v10 * 0.75 <= v5
    || (v11 = *(int *)(a1 + 512),
        result = objc_msgSend_count(*(void **)(a1 + 48), v7, v8, v9),
        result - *(int *)(a1 + 524) <= v11))
  {
    *(_DWORD *)(a1 + 492) = 0;
    if (!*(_BYTE *)(a1 + 479))
      *(_DWORD *)(a1 + 492) = *(_DWORD *)(a1 + 524);
  }
  return result;
}

uint64_t sub_18F658D0C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;

  ++*(_DWORD *)(a1 + 500);
  v5 = *(int *)(a1 + 524);
  *(_DWORD *)(a1 + 528) = v5 + (*(_DWORD *)(a1 + 532) & ~(*(int *)(a1 + 532) >> 31));
  v6 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 48), a2, v5, a4);
  objc_msgSend_timestamp_s(v6, v7, v8, v9);
  *(_QWORD *)(a1 + 552) = v10;
  *(_BYTE *)(a1 + 476) = 0;
  *(_BYTE *)(a1 + 485) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  return sub_18F658C5C(a1, v11, v12, v13);
}

uint64_t sub_18F658D6C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  char *v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*(int *)(a1 + 492) >= 1)
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v2 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_DWORD *)(a1 + 492);
      *(_DWORD *)buf = 67240192;
      v7 = v3;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "CLRR,getNumberOfRoutePointsToAdd,required number of points,%{public}d", buf, 8u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "int CLRacingRoute::getNumberOfRoutePointsToAdd() const", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
  return *(unsigned int *)(a1 + 492);
}

uint64_t sub_18F658F2C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v14;
  int v15;
  int v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char *v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  int v26;
  const char *v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  NSObject *v39;
  id v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t i;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  double v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  double v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  double v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  double v101;
  double v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  double v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  double v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  NSObject *v120;
  int v121;
  int v122;
  char *v123;
  NSObject *v124;
  char *v125;
  NSObject *v126;
  NSObject *v127;
  NSObject *v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  NSObject *v138;
  NSObject *v139;
  double v140;
  NSObject *v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  const char *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  NSObject *v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  double v198;
  double v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  double v203;
  uint64_t v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void **v209;
  void **v210;
  unint64_t *v211;
  unint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t *v218;
  char *v219;
  char *v220;
  unint64_t v221;
  const char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  const char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  char *v251;
  NSObject *v252;
  const char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  const char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  NSObject *v262;
  int v263;
  uint64_t v264;
  void **v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  void **v269;
  uint64_t *v270;
  uint64_t *v271;
  unint64_t v272;
  _QWORD *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  void **v277;
  uint64_t *v278;
  uint64_t *v279;
  unint64_t v280;
  _QWORD *v281;
  int v282;
  char *v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  char *v295;
  char *v296;
  char *v297;
  uint64_t *v298;
  unint64_t v299;
  char *v300;
  char *v301;
  uint64_t v302;
  uint64_t *v303;
  unint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  void **v308;
  uint64_t v309;
  void **v310;
  uint64_t *v311;
  unint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t *v319;
  unint64_t v320;
  char *v321;
  char *v322;
  uint64_t v323;
  NSObject *v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  const char *v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  int v341;
  int v342;
  const char *v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  char *v347;
  int v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  const char *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  const char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t *v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  _BYTE v369[128];
  int v370;
  _BYTE v371[10];
  _BYTE v372[20];
  _BYTE v373[10];
  _BYTE v374[10];
  int v375;
  __int16 v376;
  int v377;
  _BYTE buf[44];
  _BYTE v379[10];
  int v380;
  __int16 v381;
  int v382;
  uint64_t v383;

  v383 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v12 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_ERROR, "CLRR,updateRoutePointsBuffer,input data array is null", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      LOWORD(v370) = 0;
      v274 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v274);
      if (v274 != buf)
        free(v274);
    }
    return 4;
  }
  v6 = objc_msgSend_count(a2, (const char *)a2, a3, a4);
  if (!*(_BYTE *)(a1 + 473))
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v14 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_DWORD *)(a1 + 492);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v15;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v6;
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_DEFAULT, "CLRR,updateRoutePointsBuffer,update started,number of requested points,%{public}d,number of given points,%{public}d", buf, 0xEu);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_21;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 == -1)
      goto LABEL_273;
    goto LABEL_361;
  }
  if (qword_1EE172138 != -1)
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
  v7 = qword_1EE172140;
  if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_DWORD *)(a1 + 492);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v8;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v6;
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "CLRR,updateRoutePointsBuffer,recovery mode,update started,number of requested points,%{public}d,number of given points,%{public}d", buf, 0xEu);
  }
  if (!sub_18F5C4AE0(115, 2))
    goto LABEL_21;
  bzero(buf, 0x65CuLL);
  if (qword_1EE172138 != -1)
LABEL_361:
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
LABEL_273:
  v282 = *(_DWORD *)(a1 + 492);
  v370 = 67240448;
  *(_DWORD *)v371 = v282;
  *(_WORD *)&v371[4] = 1026;
  *(_DWORD *)&v371[6] = v6;
  v283 = (char *)_os_log_send_and_compose_impl();
  sub_18F5F2740("Generic", 1, 0, 2, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v283);
  if (v283 != buf)
    free(v283);
LABEL_21:
  if (v6)
  {
    v16 = *(_DWORD *)(a1 + 492);
    if (v16 < v6)
    {
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v17 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
      {
        v18 = *(_DWORD *)(a1 + 488);
        v19 = *(_DWORD *)(a1 + 492);
        *(_DWORD *)buf = 67240704;
        *(_DWORD *)&buf[4] = v18;
        *(_WORD *)&buf[8] = 1026;
        *(_DWORD *)&buf[10] = v19;
        *(_WORD *)&buf[14] = 1026;
        *(_DWORD *)&buf[16] = v6;
        _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_ERROR, "CLRR,updateRoutePointsBuffer,buffer capacity exceeded,bufferSize,%{public}d,numberOfPointsToAdd,%{public}d,routePointsCount,%{public}d", buf, 0x14u);
      }
      if (!sub_18F5C4AE0(115, 0))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v20 = *(_DWORD *)(a1 + 488);
      v21 = *(_DWORD *)(a1 + 492);
      v370 = 67240704;
      *(_DWORD *)v371 = v20;
      *(_WORD *)&v371[4] = 1026;
      *(_DWORD *)&v371[6] = v21;
      *(_WORD *)v372 = 1026;
      *(_DWORD *)&v372[2] = v6;
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v22);
LABEL_58:
      if (v22 == buf)
        return 1;
LABEL_59:
      free(v22);
      return 1;
    }
    if (v16 > v6)
    {
      *(_BYTE *)(a1 + 479) = 1;
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v24 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v24, OS_LOG_TYPE_DEFAULT, "CLRR,updateRoutePointsBuffer,rolling buffer includes the end of the reference route", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        LOWORD(v370) = 0;
        v295 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v295);
        if (v295 != buf)
          free(v295);
      }
    }
    if (*(_BYTE *)(a1 + 472))
    {
      v25 = *(unsigned int *)(a1 + 524);
      if ((v25 & 0x80000000) == 0)
      {
        objc_msgSend_removeObjectsInRange_(*(void **)(a1 + 48), v9, 0, v25);
        v26 = *(_DWORD *)(a1 + 532);
        if (v26 == -1)
          v26 = 0;
        *(_DWORD *)(a1 + 532) = v26 + *(_DWORD *)(a1 + 524);
        *(_DWORD *)(a1 + 524) = 0;
      }
      if (objc_msgSend_count(*(void **)(a1 + 48), v9, v10, v25) + v6 > (unint64_t)*(int *)(a1 + 488))
      {
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v28 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
        {
          v32 = *(_DWORD *)(a1 + 488);
          v33 = objc_msgSend_count(*(void **)(a1 + 48), v29, v30, v31);
          *(_DWORD *)buf = 67240704;
          *(_DWORD *)&buf[4] = v32;
          *(_WORD *)&buf[8] = 1026;
          *(_DWORD *)&buf[10] = v33;
          *(_WORD *)&buf[14] = 1026;
          *(_DWORD *)&buf[16] = v6;
          _os_log_impl(&dword_18F5B3000, v28, OS_LOG_TYPE_ERROR, "CLRR,updateRoutePointsBuffer,buffer capacity exceeded,bufferSize,%{public}d,bufferedRoutePointsCount,%{public}u,routePointsCount,%{public}d", buf, 0x14u);
        }
        if (!sub_18F5C4AE0(115, 0))
          return 1;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v37 = *(_DWORD *)(a1 + 488);
        v38 = objc_msgSend_count(*(void **)(a1 + 48), v34, v35, v36);
        v370 = 67240704;
        *(_DWORD *)v371 = v37;
        *(_WORD *)&v371[4] = 1026;
        *(_DWORD *)&v371[6] = v38;
        *(_WORD *)v372 = 1026;
        *(_DWORD *)&v372[2] = v6;
        v22 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v22);
        goto LABEL_58;
      }
      v367 = 0u;
      v368 = 0u;
      v365 = 0u;
      v366 = 0u;
      v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v27, (uint64_t)&v365, (uint64_t)v369, 16);
      if (v57)
      {
        v58 = *(_QWORD *)v366;
        do
        {
          for (i = 0; i != v57; ++i)
          {
            if (*(_QWORD *)v366 != v58)
              objc_enumerationMutation(a2);
            objc_msgSend_addObject_(*(void **)(a1 + 48), v54, *(_QWORD *)(*((_QWORD *)&v365 + 1) + 8 * i), v56);
            ++*(_DWORD *)(a1 + 504);
          }
          v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v54, (uint64_t)&v365, (uint64_t)v369, 16);
        }
        while (v57);
      }
LABEL_92:
      v69 = *(void **)(a1 + 48);
      if (v69)
      {
        if (objc_msgSend_count(*(void **)(a1 + 48), v54, v55, v56))
        {
          if (!objc_msgSend_objectAtIndex_(v69, v70, 0, v71))
          {
            if (qword_1EE172138 != -1)
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
            v127 = qword_1EE172140;
            if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67240192;
              *(_DWORD *)&buf[4] = 0;
              _os_log_impl(&dword_18F5B3000, v127, OS_LOG_TYPE_ERROR, "CLRR,convertRouteDataToMatrix,input data point is null at index,%{public}d", buf, 8u);
            }
            if (!sub_18F5C4AE0(115, 0))
              goto LABEL_257;
            bzero(buf, 0x65CuLL);
            if (qword_1EE172138 != -1)
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
            v370 = 67240192;
            *(_DWORD *)v371 = 0;
            v125 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v125);
            goto LABEL_155;
          }
          v74 = (void *)objc_msgSend_objectAtIndex_(v69, v72, 0, v73);
          objc_msgSend_latitude_deg(v74, v75, v76, v77);
          v79 = v78;
          v82 = (void *)objc_msgSend_objectAtIndex_(v69, v80, 0, v81);
          objc_msgSend_longitude_deg(v82, v83, v84, v85);
          v87 = v86;
          if (!sub_18F650950(v79, v86))
          {
            if (qword_1EE172138 != -1)
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
            v128 = qword_1EE172140;
            if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134284033;
              *(double *)&buf[4] = v79;
              *(_WORD *)&buf[12] = 2049;
              *(double *)&buf[14] = v87;
              *(_WORD *)&buf[22] = 1026;
              *(_DWORD *)&buf[24] = 0;
              _os_log_impl(&dword_18F5B3000, v128, OS_LOG_TYPE_ERROR, "CLRR,convertRouteDataToMatrix,invalid coordinates,lat,%{private}.7lf,lon,%{private}.7lf,at index,%{public}d", buf, 0x1Cu);
            }
            if (!sub_18F5C4AE0(115, 0))
              goto LABEL_257;
            bzero(buf, 0x65CuLL);
            if (qword_1EE172138 != -1)
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
            v370 = 134284033;
            *(double *)v371 = v79;
            *(_WORD *)&v371[8] = 2049;
            *(double *)v372 = v87;
            *(_WORD *)&v372[8] = 1026;
            *(_DWORD *)&v372[10] = 0;
            v125 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v125);
            goto LABEL_155;
          }
          if ((unint64_t)objc_msgSend_count(v69, v88, v89, v90) >= 2)
          {
            v93 = 1;
            v94 = v79;
            v95 = v87;
            while (1)
            {
              v96 = (void *)objc_msgSend_objectAtIndex_(v69, v91, v93, v92);
              v100 = v96;
              if (!v96)
                break;
              objc_msgSend_latitude_deg(v96, v97, v98, v99);
              v102 = v101;
              objc_msgSend_longitude_deg(v100, v103, v104, v105);
              v107 = v106;
              objc_msgSend_altitude_m(v100, v108, v109, v110);
              v112 = v111;
              if (!sub_18F650950(v102, v107) || fabs(v112) == INFINITY || v112 <= -430.5 || v112 >= 8848.86)
              {
                if (qword_1EE172138 != -1)
                  dispatch_once(&qword_1EE172138, &unk_1E2990430);
                v138 = qword_1EE172140;
                if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134284289;
                  *(double *)&buf[4] = v102;
                  *(_WORD *)&buf[12] = 2049;
                  *(double *)&buf[14] = v107;
                  *(_WORD *)&buf[22] = 2049;
                  *(double *)&buf[24] = v112;
                  *(_WORD *)&buf[32] = 1026;
                  *(_DWORD *)&buf[34] = v93;
                  _os_log_impl(&dword_18F5B3000, v138, OS_LOG_TYPE_ERROR, "CLRR,convertRouteDataToMatrix,invalid reference point,lat,%{private}.7lf,lon,%{private}.7lf,alt,%{private}.2lf,at index,%{public}d", buf, 0x26u);
                }
                if (sub_18F5C4AE0(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172138 != -1)
                    dispatch_once(&qword_1EE172138, &unk_1E2990430);
                  v370 = 134284289;
                  *(double *)v371 = v102;
                  *(_WORD *)&v371[8] = 2049;
                  *(double *)v372 = v107;
                  *(_WORD *)&v372[8] = 2049;
                  *(double *)&v372[10] = v112;
                  *(_WORD *)&v372[18] = 1026;
                  *(_DWORD *)v373 = v93;
                  v125 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v125);
                  goto LABEL_155;
                }
                goto LABEL_257;
              }
              if (v102 >= v94)
              {
                if (v102 > v79)
                  v79 = v102;
              }
              else
              {
                v94 = v102;
              }
              if (v107 >= v95)
              {
                if (v107 > v87)
                  v87 = v107;
              }
              else
              {
                v95 = v107;
              }
              objc_msgSend_odometer_m(v100, v113, v114, v115);
              if (v119 >= 350.0 && !*(_BYTE *)(a1 + 474) && (*(_DWORD *)(a1 + 540) & 0x80000000) != 0)
              {
                *(_DWORD *)(a1 + 540) = v93;
                if (qword_1EE172138 != -1)
                  dispatch_once(&qword_1EE172138, &unk_1E2990430);
                v120 = qword_1EE172140;
                if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
                {
                  v121 = *(_DWORD *)(a1 + 540);
                  *(_DWORD *)buf = 67240192;
                  *(_DWORD *)&buf[4] = v121;
                  _os_log_impl(&dword_18F5B3000, v120, OS_LOG_TYPE_DEFAULT, "CLRR,convertRouteDataToMatrix,raceStartLineProximityIndex,%{public}d", buf, 8u);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172138 != -1)
                    dispatch_once(&qword_1EE172138, &unk_1E2990430);
                  v122 = *(_DWORD *)(a1 + 540);
                  v370 = 67240192;
                  *(_DWORD *)v371 = v122;
                  v123 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v123);
                  if (v123 != buf)
                    free(v123);
                }
              }
              if (objc_msgSend_count(v69, v116, v117, v118) <= (unint64_t)++v93)
                goto LABEL_158;
            }
            if (qword_1EE172138 != -1)
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
            v139 = qword_1EE172140;
            if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67240192;
              *(_DWORD *)&buf[4] = v93;
              _os_log_impl(&dword_18F5B3000, v139, OS_LOG_TYPE_ERROR, "CLRR,convertRouteDataToMatrix,input data point is null at index,%{public}d", buf, 8u);
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172138 != -1)
                dispatch_once(&qword_1EE172138, &unk_1E2990430);
              v370 = 67240192;
              *(_DWORD *)v371 = v93;
              v125 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v125);
              goto LABEL_155;
            }
            goto LABEL_257;
          }
          v95 = v87;
          v94 = v79;
LABEL_158:
          v129 = v94 + -0.0004;
          *(double *)(a1 + 56) = v94 + -0.0004;
          v130 = v79 + 0.0004;
          *(double *)(a1 + 64) = v79 + 0.0004;
          v131 = fmod(v95 + -0.0004, 360.0);
          v132 = v131;
          if (v131 <= -180.0)
          {
            v132 = v131 + 360.0;
          }
          else if (v131 > 180.0)
          {
            v132 = v131 + -360.0;
          }
          *(double *)(a1 + 72) = v132;
          v133 = fmod(v87 + 0.0004, 360.0);
          v134 = v133;
          if (v133 <= -180.0)
          {
            v134 = v133 + 360.0;
          }
          else if (v133 > 180.0)
          {
            v134 = v133 + -360.0;
          }
          *(double *)(a1 + 80) = v134;
          if (!sub_18F650950(v129, v132) || !sub_18F650950(v130, v134))
          {
LABEL_257:
            if (qword_1EE172138 != -1)
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
            v262 = qword_1EE172140;
            if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F5B3000, v262, OS_LOG_TYPE_ERROR, "CLRR,updateRoutePointsBuffer,unable to convert reference route to matrix", buf, 2u);
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172138 != -1)
                dispatch_once(&qword_1EE172138, &unk_1E2990430);
              LOWORD(v370) = 0;
              v296 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v296);
              if (v296 != buf)
                free(v296);
            }
            return 2;
          }
          *(_QWORD *)(a1 + 88) = 0x500000005;
          v135 = v132 + 360.0;
          if (v132 >= 0.0)
            v135 = v132;
          v136 = v134 + 360.0;
          if (v134 >= 0.0)
            v136 = v134;
          v137 = v136 - v135;
          if (v137 <= 180.0)
          {
            if (v137 < -180.0)
              v137 = v137 + 360.0;
          }
          else
          {
            v137 = v137 + -360.0;
          }
          v140 = fabs(v137);
          if (v130 - v129 < 0.0009)
            *(_DWORD *)(a1 + 88) = 1;
          if (v140 < 0.0009)
            *(_DWORD *)(a1 + 92) = 1;
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v141 = qword_1EE172140;
          if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
          {
            v142 = *(_DWORD *)(a1 + 88);
            v143 = *(_DWORD *)(a1 + 92);
            v144 = *(_QWORD *)(a1 + 56);
            v145 = *(_QWORD *)(a1 + 64);
            v146 = *(_QWORD *)(a1 + 72);
            v147 = *(_QWORD *)(a1 + 80);
            *(_DWORD *)buf = 67241473;
            *(_DWORD *)&buf[4] = v142;
            *(_WORD *)&buf[8] = 1026;
            *(_DWORD *)&buf[10] = v143;
            *(_WORD *)&buf[14] = 2049;
            *(_QWORD *)&buf[16] = v144;
            *(_WORD *)&buf[24] = 2049;
            *(_QWORD *)&buf[26] = v145;
            *(_WORD *)&buf[34] = 2049;
            *(_QWORD *)&buf[36] = v146;
            *(_WORD *)v379 = 2049;
            *(_QWORD *)&v379[2] = v147;
            _os_log_impl(&dword_18F5B3000, v141, OS_LOG_TYPE_DEFAULT, "CLRR,convertRouteDataToMatrix,boxRows,%{public}d,boxColumns,%{public}d,boxMinLat,%{private}.7lf,boxMaxLat,%{private}.7lf,boxMinLon,%{private}.7lf,boxMaxLon,%{private}.7lf", buf, 0x36u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172138 != -1)
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
            v348 = *(_DWORD *)(a1 + 88);
            v349 = *(_DWORD *)(a1 + 92);
            v350 = *(_QWORD *)(a1 + 56);
            v351 = *(_QWORD *)(a1 + 64);
            v352 = *(_QWORD *)(a1 + 72);
            v353 = *(_QWORD *)(a1 + 80);
            v370 = 67241473;
            *(_DWORD *)v371 = v348;
            *(_WORD *)&v371[4] = 1026;
            *(_DWORD *)&v371[6] = v349;
            *(_WORD *)v372 = 2049;
            *(_QWORD *)&v372[2] = v350;
            *(_WORD *)&v372[10] = 2049;
            *(_QWORD *)&v372[12] = v351;
            *(_WORD *)v373 = 2049;
            *(_QWORD *)&v373[2] = v352;
            *(_WORD *)v374 = 2049;
            *(_QWORD *)&v374[2] = v353;
            v354 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v354);
            if (v354 != buf)
              free(v354);
          }
          sub_18F65FD60((uint64_t *)(a1 + 96));
          v148 = *(_DWORD *)(a1 + 92) * *(_DWORD *)(a1 + 88);
          v364 = (uint64_t *)(a1 + 96);
          sub_18F6509E0((_QWORD *)(a1 + 96), *(int *)(a1 + 92) * (uint64_t)*(int *)(a1 + 88));
          if (v148 >= 1)
          {
            v152 = (_QWORD *)(a1 + 112);
            v153 = *(_QWORD **)(a1 + 104);
            do
            {
              if ((unint64_t)v153 >= *v152)
              {
                v154 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v153 - *v364) >> 3);
                v155 = v154 + 1;
                if (v154 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_18F5F7864();
                if (0x5555555555555556 * ((*v152 - *v364) >> 3) > v155)
                  v155 = 0x5555555555555556 * ((*v152 - *v364) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((*v152 - *v364) >> 3) >= 0x555555555555555)
                  v156 = 0xAAAAAAAAAAAAAAALL;
                else
                  v156 = v155;
                *(_QWORD *)&buf[32] = a1 + 112;
                if (v156)
                  v156 = (unint64_t)sub_18F65FE24(v156);
                else
                  v157 = 0;
                v158 = (_QWORD *)(v156 + 24 * v154);
                *(_QWORD *)buf = v156;
                *(_QWORD *)&buf[8] = v158;
                *(_QWORD *)&buf[16] = v158;
                *(_QWORD *)&buf[24] = v156 + 24 * v157;
                *v158 = 0;
                v158[1] = 0;
                v158[2] = 0;
                *(_QWORD *)&buf[16] += 24;
                sub_18F65FDB4(v364, buf);
                v153 = *(_QWORD **)(a1 + 104);
                sub_18F65FE68((uint64_t)buf);
              }
              else
              {
                *v153 = 0;
                v153[1] = 0;
                v153[2] = 0;
                v153 += 3;
                *(_QWORD *)(a1 + 104) = v153;
              }
              *(_QWORD *)(a1 + 104) = v153;
              --v148;
            }
            while (v148);
          }
          if (objc_msgSend_count(v69, v149, v150, v151))
          {
            v161 = 0;
            v162 = 0xFFFFFFFFLL;
            v163 = 0xFFFFFFFFLL;
            while (1)
            {
              v164 = (void *)objc_msgSend_objectAtIndex_(v69, v159, v161, v160);
              if (qword_1EE172138 != -1)
                dispatch_once(&qword_1EE172138, &unk_1E2990430);
              v165 = qword_1EE172140;
              if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
              {
                objc_msgSend_timestamp_s(v164, v166, v167, v168);
                v170 = v169;
                objc_msgSend_latitude_deg(v164, v171, v172, v173);
                v175 = v174;
                objc_msgSend_longitude_deg(v164, v176, v177, v178);
                v180 = v179;
                objc_msgSend_altitude_m(v164, v181, v182, v183);
                v185 = v184;
                objc_msgSend_odometer_m(v164, v186, v187, v188);
                v190 = v189;
                v194 = objc_msgSend_signalEnvironmentType(v164, v191, v192, v193);
                *(_DWORD *)buf = 134350593;
                *(_QWORD *)&buf[4] = v170;
                *(_WORD *)&buf[12] = 2049;
                *(_QWORD *)&buf[14] = v175;
                *(_WORD *)&buf[22] = 2049;
                *(_QWORD *)&buf[24] = v180;
                *(_WORD *)&buf[32] = 2049;
                *(_QWORD *)&buf[34] = v185;
                *(_WORD *)&buf[42] = 2050;
                *(_QWORD *)v379 = v190;
                *(_WORD *)&v379[8] = 1026;
                v380 = v194;
                v381 = 1026;
                v382 = v161;
                _os_log_impl(&dword_18F5B3000, v165, OS_LOG_TYPE_DEFAULT, "CLRR,convertRouteDataToMatrix,time,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,alt,%{private}.2lf,odom,%{public}.2lf,signalEnv,%{public}d,pointCount,%{public}d", buf, 0x40u);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172138 != -1)
                  dispatch_once(&qword_1EE172138, &unk_1E2990430);
                objc_msgSend_timestamp_s(v164, v222, v223, v224);
                v226 = v225;
                objc_msgSend_latitude_deg(v164, v227, v228, v229);
                v231 = v230;
                objc_msgSend_longitude_deg(v164, v232, v233, v234);
                v236 = v235;
                objc_msgSend_altitude_m(v164, v237, v238, v239);
                v241 = v240;
                objc_msgSend_odometer_m(v164, v242, v243, v244);
                v246 = v245;
                v250 = objc_msgSend_signalEnvironmentType(v164, v247, v248, v249);
                v370 = 134350593;
                *(_QWORD *)v371 = v226;
                *(_WORD *)&v371[8] = 2049;
                *(_QWORD *)v372 = v231;
                *(_WORD *)&v372[8] = 2049;
                *(_QWORD *)&v372[10] = v236;
                *(_WORD *)&v372[18] = 2049;
                *(_QWORD *)v373 = v241;
                *(_WORD *)&v373[8] = 2050;
                *(_QWORD *)v374 = v246;
                *(_WORD *)&v374[8] = 1026;
                v375 = v250;
                v376 = 1026;
                v377 = v161;
                v251 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v251);
                if (v251 != buf)
                  free(v251);
              }
              objc_msgSend_latitude_deg(v164, v195, v196, v197);
              v199 = v198;
              objc_msgSend_longitude_deg(v164, v200, v201, v202);
              v204 = sub_18F650A80(a1 + 56, v199, v203);
              if ((_DWORD)v204 == -1)
                break;
              v208 = v204;
              if (v161)
              {
                if (objc_msgSend_count(v69, v205, v206, v207) - 1 == v161)
                {
                  v263 = v163;
                  v264 = *v364;
                  v265 = (void **)(*v364 + 24 * (int)v163);
                  v266 = v161 << 32;
                  if ((_DWORD)v208 == (_DWORD)v163)
                  {
                    v267 = v266 | v162;
                    v268 = v264 + 24 * v263;
                    v271 = *(uint64_t **)(v268 + 8);
                    v269 = (void **)(v268 + 8);
                    v270 = v271;
                    v272 = (unint64_t)v269[1];
                    if ((unint64_t)v271 >= v272)
                    {
                      v285 = ((char *)v270 - (_BYTE *)*v265) >> 3;
                      if ((unint64_t)(v285 + 1) >> 61)
                        sub_18F5F7864();
                      v286 = v272 - (_QWORD)*v265;
                      v287 = v286 >> 2;
                      if (v286 >> 2 <= (unint64_t)(v285 + 1))
                        v287 = v285 + 1;
                      if ((unint64_t)v286 >= 0x7FFFFFFFFFFFFFF8)
                        v288 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v288 = v287;
                      if (v288)
                        v288 = (unint64_t)sub_18F65FEC8(v288);
                      else
                        v289 = 0;
                      v298 = (uint64_t *)(v288 + 8 * v285);
                      v299 = v288 + 8 * v289;
                      *v298 = v267;
                      v273 = v298 + 1;
                      v300 = (char *)*v269;
                      v301 = (char *)*v265;
                      if (*v269 != *v265)
                      {
                        do
                        {
                          v302 = *((_QWORD *)v300 - 1);
                          v300 -= 8;
                          *--v298 = v302;
                        }
                        while (v300 != v301);
                        v300 = (char *)*v265;
                      }
                      *v265 = v298;
                      *v269 = v273;
                      v269[1] = (void *)v299;
                      if (v300)
                        operator delete(v300);
                    }
                    else
                    {
                      *v270 = v267;
                      v273 = v270 + 1;
                    }
                    *v269 = v273;
                  }
                  else
                  {
                    v275 = (v266 - 0x100000000) | v162;
                    v276 = v264 + 24 * (int)v163;
                    v279 = *(uint64_t **)(v276 + 8);
                    v277 = (void **)(v276 + 8);
                    v278 = v279;
                    v280 = (unint64_t)v277[1];
                    if ((unint64_t)v279 >= v280)
                    {
                      v290 = ((char *)v278 - (_BYTE *)*v265) >> 3;
                      if ((unint64_t)(v290 + 1) >> 61)
                        sub_18F5F7864();
                      v291 = v280 - (_QWORD)*v265;
                      v292 = v291 >> 2;
                      if (v291 >> 2 <= (unint64_t)(v290 + 1))
                        v292 = v290 + 1;
                      if ((unint64_t)v291 >= 0x7FFFFFFFFFFFFFF8)
                        v293 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v293 = v292;
                      if (v293)
                        v293 = (unint64_t)sub_18F65FEC8(v293);
                      else
                        v294 = 0;
                      v303 = (uint64_t *)(v293 + 8 * v290);
                      v304 = v293 + 8 * v294;
                      *v303 = v275;
                      v281 = v303 + 1;
                      v305 = (char *)*v277;
                      v306 = (char *)*v265;
                      if (*v277 != *v265)
                      {
                        do
                        {
                          v307 = *((_QWORD *)v305 - 1);
                          v305 -= 8;
                          *--v303 = v307;
                        }
                        while (v305 != v306);
                        v305 = (char *)*v265;
                      }
                      *v265 = v303;
                      *v277 = v281;
                      v277[1] = (void *)v304;
                      if (v305)
                        operator delete(v305);
                    }
                    else
                    {
                      *v278 = v275;
                      v281 = v278 + 1;
                    }
                    *v277 = v281;
                    v308 = (void **)(*v364 + 24 * (int)v208);
                    v309 = 0x100000001 * v161;
                    v310 = v308 + 1;
                    v311 = (uint64_t *)v308[1];
                    v312 = (unint64_t)v308[2];
                    if ((unint64_t)v311 >= v312)
                    {
                      v314 = ((char *)v311 - (_BYTE *)*v308) >> 3;
                      if ((unint64_t)(v314 + 1) >> 61)
                        sub_18F5F7864();
                      v315 = v312 - (_QWORD)*v308;
                      v316 = v315 >> 2;
                      if (v315 >> 2 <= (unint64_t)(v314 + 1))
                        v316 = v314 + 1;
                      if ((unint64_t)v315 >= 0x7FFFFFFFFFFFFFF8)
                        v317 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v317 = v316;
                      if (v317)
                        v317 = (unint64_t)sub_18F65FEC8(v317);
                      else
                        v318 = 0;
                      v319 = (uint64_t *)(v317 + 8 * v314);
                      v320 = v317 + 8 * v318;
                      *v319 = v309;
                      v313 = v319 + 1;
                      v321 = (char *)*v310;
                      v322 = (char *)*v308;
                      if (*v310 != *v308)
                      {
                        do
                        {
                          v323 = *((_QWORD *)v321 - 1);
                          v321 -= 8;
                          *--v319 = v323;
                        }
                        while (v321 != v322);
                        v321 = (char *)*v308;
                      }
                      *v308 = v319;
                      *v310 = v313;
                      v308[2] = (void *)v320;
                      if (v321)
                        operator delete(v321);
                    }
                    else
                    {
                      *v311 = v309;
                      v313 = v311 + 1;
                    }
                    *v310 = v313;
                  }
                  goto LABEL_338;
                }
                if ((_DWORD)v208 == (_DWORD)v163)
                {
                  v208 = v163;
                }
                else
                {
                  v209 = (void **)(*v364 + 24 * (int)v163);
                  v210 = v209 + 1;
                  v211 = (unint64_t *)v209[1];
                  v212 = (unint64_t)v209[2];
                  if ((unint64_t)v211 >= v212)
                  {
                    v214 = ((char *)v211 - (_BYTE *)*v209) >> 3;
                    if ((unint64_t)(v214 + 1) >> 61)
                      sub_18F5F7864();
                    v215 = v212 - (_QWORD)*v209;
                    v216 = v215 >> 2;
                    if (v215 >> 2 <= (unint64_t)(v214 + 1))
                      v216 = v214 + 1;
                    if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF8)
                      v217 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v217 = v216;
                    if (v217)
                      v217 = (unint64_t)sub_18F65FEC8(v217);
                    else
                      v205 = 0;
                    v218 = (unint64_t *)(v217 + 8 * v214);
                    *v218 = ((v161 << 32) - 0x100000000) | v162;
                    v213 = v218 + 1;
                    v219 = (char *)*v210;
                    v220 = (char *)*v209;
                    if (*v210 != *v209)
                    {
                      do
                      {
                        v221 = *((_QWORD *)v219 - 1);
                        v219 -= 8;
                        *--v218 = v221;
                      }
                      while (v219 != v220);
                      v219 = (char *)*v209;
                    }
                    *v209 = v218;
                    *v210 = v213;
                    v209[2] = (void *)(v217 + 8 * (_QWORD)v205);
                    if (v219)
                      operator delete(v219);
                  }
                  else
                  {
                    *v211 = ((v161 << 32) - 0x100000000) | v162;
                    v213 = v211 + 1;
                  }
                  *v210 = v213;
                  v162 = v161;
                }
              }
              else
              {
                v162 = 0;
              }
              ++v161;
              v163 = v208;
              if (objc_msgSend_count(v69, v205, v206, v207) <= v161)
                goto LABEL_338;
            }
            if (qword_1EE172138 != -1)
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
            v252 = qword_1EE172140;
            if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
            {
              objc_msgSend_latitude_deg(v164, v253, v254, v255);
              v257 = v256;
              objc_msgSend_longitude_deg(v164, v258, v259, v260);
              *(_DWORD *)buf = 134283777;
              *(_QWORD *)&buf[4] = v257;
              *(_WORD *)&buf[12] = 2049;
              *(_QWORD *)&buf[14] = v261;
              _os_log_impl(&dword_18F5B3000, v252, OS_LOG_TYPE_ERROR, "CLRR,convertRouteDataToMatrix,invalid index for location,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
            }
            if (!sub_18F5C4AE0(115, 0))
              goto LABEL_257;
            bzero(buf, 0x65CuLL);
            if (qword_1EE172138 != -1)
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
            objc_msgSend_latitude_deg(v164, v355, v356, v357);
            v359 = v358;
            objc_msgSend_longitude_deg(v164, v360, v361, v362);
            v370 = 134283777;
            *(_QWORD *)v371 = v359;
            *(_WORD *)&v371[8] = 2049;
            *(_QWORD *)v372 = v363;
            v125 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v125);
            goto LABEL_155;
          }
LABEL_338:
          ++*(_DWORD *)(a1 + 520);
          *(_DWORD *)(a1 + 492) = 0;
          *(_WORD *)(a1 + 472) = 1;
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v324 = qword_1EE172140;
          if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
          {
            v325 = *(_DWORD *)(a1 + 520);
            v326 = *(_DWORD *)(a1 + 524);
            v327 = *(_DWORD *)(a1 + 532);
            v328 = *(_DWORD *)(a1 + 504);
            v329 = *(_DWORD *)(a1 + 492);
            v330 = *(unsigned __int8 *)(a1 + 472);
            *(_DWORD *)buf = 67241472;
            *(_DWORD *)&buf[4] = v325;
            *(_WORD *)&buf[8] = 1026;
            *(_DWORD *)&buf[10] = v326;
            *(_WORD *)&buf[14] = 1026;
            *(_DWORD *)&buf[16] = v327;
            *(_WORD *)&buf[20] = 1026;
            *(_DWORD *)&buf[22] = v328;
            *(_WORD *)&buf[26] = 1026;
            *(_DWORD *)&buf[28] = v329;
            *(_WORD *)&buf[32] = 1026;
            *(_DWORD *)&buf[34] = v330;
            _os_log_impl(&dword_18F5B3000, v324, OS_LOG_TYPE_DEFAULT, "CLRR,updateRoutePointsBuffer,update completed,rollingBufferUpdateCounter,%{public}d,lastMatchedPointIndex,%{public}d,rollingBufferStartIndexOnReferenceRoute,%{public}d,referenceRouteDataPointCounter,%{public}d,numberOfRoutePointsToAdd,%{public}d,routePointsArrayInitialized,%{public}d", buf, 0x26u);
          }
          if (!sub_18F5C4AE0(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v331 = *(_DWORD *)(a1 + 520);
          v332 = *(_DWORD *)(a1 + 524);
          v333 = *(_DWORD *)(a1 + 532);
          v334 = *(_DWORD *)(a1 + 504);
          v335 = *(_DWORD *)(a1 + 492);
          v336 = *(unsigned __int8 *)(a1 + 472);
          v370 = 67241472;
          *(_DWORD *)v371 = v331;
          *(_WORD *)&v371[4] = 1026;
          *(_DWORD *)&v371[6] = v332;
          *(_WORD *)v372 = 1026;
          *(_DWORD *)&v372[2] = v333;
          *(_WORD *)&v372[6] = 1026;
          *(_DWORD *)&v372[8] = v334;
          *(_WORD *)&v372[12] = 1026;
          *(_DWORD *)&v372[14] = v335;
          *(_WORD *)&v372[18] = 1026;
          *(_DWORD *)v373 = v336;
          v284 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v284);
LABEL_278:
          if (v284 != buf)
            free(v284);
          return 0;
        }
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v126 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v126, OS_LOG_TYPE_ERROR, "CLRR,convertRouteDataToMatrix,input data array is empty", buf, 2u);
        }
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_257;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 == -1)
        {
LABEL_131:
          LOWORD(v370) = 0;
          v125 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::convertRouteDataToMatrix(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v125);
LABEL_155:
          if (v125 != buf)
            free(v125);
          goto LABEL_257;
        }
      }
      else
      {
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v124 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v124, OS_LOG_TYPE_ERROR, "CLRR,convertRouteDataToMatrix,input data array is null", buf, 2u);
        }
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_257;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 == -1)
          goto LABEL_131;
      }
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
      goto LABEL_131;
    }
    v40 = (id)objc_msgSend_mutableCopy(a2, v9, v10, v11);
    *(_QWORD *)(a1 + 48) = v40;
    if (objc_msgSend_count(v40, v41, v42, v43) > (unint64_t)*(int *)(a1 + 492))
    {
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v47 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
      {
        v51 = *(_DWORD *)(a1 + 488);
        v52 = *(_DWORD *)(a1 + 492);
        v53 = objc_msgSend_count(*(void **)(a1 + 48), v48, v49, v50);
        *(_DWORD *)buf = 67240704;
        *(_DWORD *)&buf[4] = v51;
        *(_WORD *)&buf[8] = 1026;
        *(_DWORD *)&buf[10] = v52;
        *(_WORD *)&buf[14] = 1026;
        *(_DWORD *)&buf[16] = v53;
        _os_log_impl(&dword_18F5B3000, v47, OS_LOG_TYPE_ERROR, "CLRR,updateRoutePointsBuffer,buffer capacity exceeded,bufferSize,%{public}d,numberOfPointsToAdd,%{public}d,bufferedRoutePointsCount,%{public}u", buf, 0x14u);
      }
      if (!sub_18F5C4AE0(115, 0))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v340 = *(_DWORD *)(a1 + 488);
      v341 = *(_DWORD *)(a1 + 492);
      v342 = objc_msgSend_count(*(void **)(a1 + 48), v337, v338, v339);
      v370 = 67240704;
      *(_DWORD *)v371 = v340;
      *(_WORD *)&v371[4] = 1026;
      *(_DWORD *)&v371[6] = v341;
      *(_WORD *)v372 = 1026;
      *(_DWORD *)&v372[2] = v342;
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v22);
      if (v22 == buf)
        return 1;
      goto LABEL_59;
    }
    if ((unint64_t)objc_msgSend_count(*(void **)(a1 + 48), v44, v45, v46) > 9)
    {
      if (!*(_BYTE *)(a1 + 473))
      {
        *(_DWORD *)(a1 + 504) = objc_msgSend_count(*(void **)(a1 + 48), v60, v61, v62);
        goto LABEL_92;
      }
    }
    else if (!*(_BYTE *)(a1 + 473))
    {
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v63 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
      {
        v67 = objc_msgSend_count(*(void **)(a1 + 48), v64, v65, v66);
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)&buf[4] = 10;
        *(_WORD *)&buf[8] = 1026;
        *(_DWORD *)&buf[10] = v67;
        _os_log_impl(&dword_18F5B3000, v63, OS_LOG_TYPE_ERROR, "CLRR,updateRoutePointsBuffer,location series too short,minimumPointsToProcess,%{public}u,bufferedRoutePointsCount,%{public}u", buf, 0xEu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v346 = objc_msgSend_count(*(void **)(a1 + 48), v343, v344, v345);
        v370 = 67240448;
        *(_DWORD *)v371 = 10;
        *(_WORD *)&v371[4] = 1026;
        *(_DWORD *)&v371[6] = v346;
        v347 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v347);
        if (v347 != buf)
          free(v347);
      }
      return 5;
    }
    v68 = *(_DWORD *)(a1 + 528);
    *(_DWORD *)(a1 + 504) = v68 + objc_msgSend_count(*(void **)(a1 + 48), v60, v61, v62);
    *(_DWORD *)(a1 + 524) = 0;
    goto LABEL_92;
  }
  if (*(_DWORD *)(a1 + 504))
  {
    *(_BYTE *)(a1 + 479) = 1;
    *(_DWORD *)(a1 + 492) = 0;
    *(_BYTE *)(a1 + 473) = 0;
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v23 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v23, OS_LOG_TYPE_DEFAULT, "CLRR,updateRoutePointsBuffer,no more data available,rolling buffer includes the end of the reference route", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    LOWORD(v370) = 0;
    v284 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v284);
    goto LABEL_278;
  }
  if (qword_1EE172138 != -1)
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
  v39 = qword_1EE172140;
  if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v39, OS_LOG_TYPE_ERROR, "CLRR,updateRoutePointsBuffer,input data array is empty", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    LOWORD(v370) = 0;
    v297 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteBufferUpdateState CLRacingRoute::updateRoutePointsBuffer(NSArray<CLRoutePoint *> *)", "CoreLocation: %s\n", v297);
    if (v297 != buf)
      free(v297);
  }
  return 3;
}

uint64_t sub_18F65B858(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  uint64_t result;
  const char *v15;
  uint64_t v16;
  double v17;
  double v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  void *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  double v50;
  uint64_t v51;
  NSObject *v52;
  int v53;
  unint64_t v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  double v65;
  unint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  double v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint8_t buf[4];
  double v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(a1 + 524);
  if ((v5 & 0x80000000) != 0 || objc_msgSend_count(*(void **)(a1 + 48), a2, a3, a4) < v5)
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v11 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_DWORD *)(a1 + 524);
      *(_DWORD *)buf = 67240192;
      LODWORD(v78) = v12;
      _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_ERROR, "CLRR,getDistanceDuringOffRoutePeriod,invalid array index, %{public}d", buf, 8u);
    }
    v13 = sub_18F5C4AE0(115, 0);
    result = 0;
    if (!v13)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 == -1)
    {
LABEL_36:
      v75 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::updateDistanceDuringOffRoutePeriod(const CLRoutePoint *, RacingRouteScoreboard &) const", "CoreLocation: %s\n", v75);
      if (v75 != (char *)buf)
        free(v75);
      return 0;
    }
LABEL_42:
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
    goto LABEL_36;
  }
  objc_msgSend_timestamp_s(a2, v8, v9, v10);
  v18 = v17 - *(double *)(a1 + 328);
  if (v18 >= 0.0)
  {
    v19 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 48), v15, *(int *)(a1 + 524), v16);
    objc_msgSend_timestamp_s(v19, v20, v21, v22);
    v24 = v18 + v23;
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(a1 + 376);
    *(_QWORD *)(a3 + 168) = *(_QWORD *)(a1 + 464);
    v25 = *(void **)(a1 + 48);
    v29 = objc_msgSend_count(v25, v26, v27, v28);
    v32 = (void *)objc_msgSend_objectAtIndexedSubscript_(v25, v30, v29 - 1, v31);
    objc_msgSend_timestamp_s(v32, v33, v34, v35);
    if (v39 >= v24)
    {
      v54 = *(int *)(a1 + 524);
      if (objc_msgSend_count(*(void **)(a1 + 48), v36, v37, v38) <= v54)
        return 1;
      while (1)
      {
        v57 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 48), v55, v54, v56);
        objc_msgSend_timestamp_s(v57, v58, v59, v60);
        v64 = *(void **)(a1 + 48);
        if (v65 >= v24)
          break;
        ++v54;
        v66 = objc_msgSend_count(v64, v61, v62, v63);
        result = 1;
        if (v66 <= v54)
          return result;
      }
      v67 = (void *)objc_msgSend_objectAtIndexedSubscript_(v64, v61, v54, v63);
      objc_msgSend_odometer_m(v67, v68, v69, v70);
      *(_QWORD *)(a3 + 168) = v71;
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v72 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
      {
        v73 = *(double *)(a3 + 80);
        v74 = *(_QWORD *)(a3 + 168);
        *(_DWORD *)buf = 134283777;
        v78 = v73;
        v79 = 2049;
        v80 = v74;
        _os_log_impl(&dword_18F5B3000, v72, OS_LOG_TYPE_DEFAULT, "CLRR,getDistanceDuringOffRoutePeriod,distAlongRefRoute,%{private}.2lf,refDistAlongRefRoute,%{private}.2lf", buf, 0x16u);
      }
      if (!sub_18F5C4AE0(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 == -1)
        goto LABEL_40;
    }
    else
    {
      v40 = *(void **)(a1 + 48);
      v41 = objc_msgSend_count(v40, v36, v37, v38);
      v44 = (void *)objc_msgSend_objectAtIndexedSubscript_(v40, v42, v41 - 1, v43);
      objc_msgSend_odometer_m(v44, v45, v46, v47);
      *(_QWORD *)(a3 + 168) = v48;
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v49 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
      {
        v50 = *(double *)(a3 + 80);
        v51 = *(_QWORD *)(a3 + 168);
        *(_DWORD *)buf = 134283777;
        v78 = v50;
        v79 = 2049;
        v80 = v51;
        _os_log_impl(&dword_18F5B3000, v49, OS_LOG_TYPE_DEFAULT, "CLRR,getDistanceDuringOffRoutePeriod,distAlongRefRoute,%{private}.2lf,refDistAlongRefRoute,%{private}.2lf", buf, 0x16u);
      }
      if (!sub_18F5C4AE0(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 == -1)
      {
LABEL_40:
        v76 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::updateDistanceDuringOffRoutePeriod(const CLRoutePoint *, RacingRouteScoreboard &) const", "CoreLocation: %s\n", v76);
        if (v76 != (char *)buf)
          free(v76);
        return 1;
      }
    }
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
    goto LABEL_40;
  }
  if (qword_1EE172138 != -1)
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
  v52 = qword_1EE172140;
  if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    v78 = v18;
    _os_log_impl(&dword_18F5B3000, v52, OS_LOG_TYPE_ERROR, "CLRR,getDistanceDuringOffRoutePeriod,invalid time, %{public}.2lf", buf, 0xCu);
  }
  v53 = sub_18F5C4AE0(115, 0);
  result = 0;
  if (v53)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 == -1)
      goto LABEL_36;
    goto LABEL_42;
  }
  return result;
}

void sub_18F65BE98(uint64_t a1, double *a2, uint64_t *a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  uint64_t *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  uint8_t buf[4];
  uint64_t *v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  double v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  int v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v6 = a2[16];
  v7 = a2[5];
  v8 = a2[10];
  v9 = a2[21];
  if (qword_1EE172138 != -1)
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
  v10 = v6 - v7;
  v11 = qword_1EE172140;
  if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
  {
    v12 = a3;
    if (*((char *)a3 + 23) < 0)
      v12 = (uint64_t *)*a3;
    v13 = *a2;
    v14 = *((_QWORD *)a2 + 1);
    v15 = *((_QWORD *)a2 + 4);
    v16 = *((_QWORD *)a2 + 5);
    v17 = *((_QWORD *)a2 + 6);
    v18 = *((_QWORD *)a2 + 7);
    v19 = *((_QWORD *)a2 + 8);
    v20 = *((_QWORD *)a2 + 9);
    v21 = *((_QWORD *)a2 + 2);
    v22 = *((_QWORD *)a2 + 3);
    v23 = *((_QWORD *)a2 + 10);
    v24 = *((_QWORD *)a2 + 11);
    v25 = *((_QWORD *)a2 + 12);
    v26 = *((_QWORD *)a2 + 13);
    v27 = *((_QWORD *)a2 + 16);
    v28 = *((_QWORD *)a2 + 17);
    v29 = *((_QWORD *)a2 + 18);
    v30 = *((_QWORD *)a2 + 19);
    v32 = *((_QWORD *)a2 + 14);
    v31 = *((_QWORD *)a2 + 15);
    v34 = *((_QWORD *)a2 + 20);
    v33 = *((_QWORD *)a2 + 21);
    v36 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 136452611;
    v38 = v12;
    v39 = 2050;
    v40 = v15;
    v41 = 2049;
    v42 = v13;
    v43 = 2049;
    v44 = v14;
    v45 = 2049;
    v46 = v21;
    v47 = 2050;
    v48 = v16;
    v49 = 2050;
    v50 = v17;
    v51 = 2050;
    v52 = v18;
    v53 = 2050;
    v54 = v19;
    v55 = 2049;
    v56 = v20;
    v57 = 2050;
    v58 = v22;
    v59 = 2050;
    v60 = v23;
    v61 = 2050;
    v62 = v31;
    v63 = 2049;
    v64 = v24;
    v65 = 2049;
    v66 = v25;
    v67 = 2049;
    v68 = v26;
    v69 = 2050;
    v70 = v27;
    v71 = 2050;
    v72 = v28;
    v73 = 2050;
    v74 = v29;
    v75 = 2050;
    v76 = v30;
    v77 = 2049;
    v78 = v34;
    v79 = 2050;
    v80 = v32;
    v81 = 2050;
    v82 = v33;
    v83 = 1026;
    v84 = v36;
    v85 = 2050;
    v86 = v10;
    v87 = 2050;
    v88 = v8 - v9;
    _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_DEFAULT, "CLRR,printDebugLog,pointType,%{public}s,time,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,alt,%{private}.2lf,timeFromStart,%{public}.1lf,offRouteTime,%{public}.1lf,distFromStart,%{public}.2lf,offRouteDist,%{public}.2lf,pace,%{private}.2lf,odom,%{public}.2lf,distAlongRefRoute,%{public}.2lf,refTime,%{public}.1lf,refLat,%{private}.7lf,refLon,%{private}.7lf,refAlt,%{private}.2lf,refTimeFromStart,%{public}.1lf,refOffRouteTime,%{public}.1lf,refDistFromStart,%{public}.2lf,refOffRouteDist,%{public}.2lf,refPace,%{private}.2lf,refOdom,%{public}.2lf,refDistAlongRefRoute,%{public}.2lf,signalEnv,%{public}d,timeAhead,%{public}.2lf,distanceAhead,%{public}.2lf", buf, 0x102u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v35 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLRacingRoute::printDebugLog(const RacingRouteScoreboard &, const std::string) const", "CoreLocation: %s\n", v35);
    if (v35 != (char *)buf)
      free(v35);
  }
}

uint64_t sub_18F65C2D8(uint64_t a1, int *a2, int *a3, _DWORD *a4)
{
  int v4;
  int v8;
  NSObject *v9;
  int v10;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  NSObject *v19;
  int v20;
  char *v21;
  char *v22;
  char *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2 <= 8 && ((1 << *a2) & 0x150) != 0 || v4 == 90603)
  {
    v8 = *a3;
    if (*a3 > 9)
    {
      *(_DWORD *)(a1 + 44) = v4;
      *(_DWORD *)(a1 + 488) = v8;
      *(_DWORD *)(a1 + 496) = *a4;
      *(_DWORD *)(a1 + 492) = v8;
      *(_BYTE *)(a1 + 480) = 1;
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v13 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *(_DWORD *)(a1 + 44);
        v15 = *(_DWORD *)(a1 + 488);
        v16 = *(_DWORD *)(a1 + 492);
        v17 = *(_DWORD *)(a1 + 496);
        *(_DWORD *)buf = 67240960;
        v25 = v14;
        v26 = 1026;
        v27 = v15;
        v28 = 1026;
        v29 = v16;
        v30 = 1026;
        v31 = v17;
        _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_DEFAULT, "CLRR,configureRouteModel,configuration succeeded,workout activity type,%{public}u,route points rolling buffer size,%{public}d,number of route points to add,%{public}d,off route grace duration,%{public}d", buf, 0x1Au);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v22 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "CLRacingRouteConfigurationState CLRacingRoute::configureRouteModel(const CLMotionActivity::Type &, const int &, const int &)", "CoreLocation: %s\n", v22);
        if (v22 != (char *)buf)
          free(v22);
      }
      return 0;
    }
    else
    {
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v9 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
      {
        v10 = *a3;
        *(_DWORD *)buf = 67240192;
        v25 = v10;
        _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_ERROR, "CLRR,configureRouteModel,buffer size is too small,%{public}d", buf, 8u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v21 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteConfigurationState CLRacingRoute::configureRouteModel(const CLMotionActivity::Type &, const int &, const int &)", "CoreLocation: %s\n", v21);
        if (v21 != (char *)buf)
          free(v21);
      }
      return 2;
    }
  }
  else
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v19 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      v20 = *a2;
      *(_DWORD *)buf = 67240192;
      v25 = v20;
      _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_ERROR, "CLRR,configureRouteModel,unsupported activity type,%{public}d", buf, 8u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v23 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteConfigurationState CLRacingRoute::configureRouteModel(const CLMotionActivity::Type &, const int &, const int &)", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
    return 1;
  }
}

uint64_t sub_18F65C7E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  double v31;
  double v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  NSObject *v41;
  uint64_t v42;
  NSObject *v43;
  NSObject *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  NSObject *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  NSObject *v127;
  uint64_t v128;
  double v129;
  double v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  unsigned int v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  const char *v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  double v156;
  const char *v157;
  uint64_t v158;
  void *v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  void *v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  NSObject *v169;
  uint64_t v170;
  NSObject *v171;
  NSObject *v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  NSObject *v192;
  NSObject *v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  NSObject *v201;
  char *v202;
  void *v203;
  const char *v204;
  uint64_t v205;
  uint64_t v206;
  NSObject *v207;
  uint64_t v208;
  NSObject *v209;
  char *v210;
  char *v211;
  NSObject *v212;
  const char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  NSObject *v224;
  char *v225;
  void *v226;
  const char *v227;
  uint64_t v228;
  uint64_t v229;
  NSObject *v230;
  char *v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  const char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  int v261;
  char *v262;
  char *v263;
  uint64_t v264;
  char *v265;
  char *v266;
  char *v267;
  uint64_t v268[2];
  char v269;
  uint64_t v270[2];
  char v271;
  void *__p[2];
  char v273;
  unsigned int v274;
  int v275;
  uint64_t v276;
  __int16 v277;
  uint64_t v278;
  __int16 v279;
  uint64_t v280;
  __int16 v281;
  uint64_t v282;
  __int16 v283;
  uint64_t v284;
  __int16 v285;
  int v286;
  __int16 v287;
  int v288;
  uint8_t buf[4];
  uint64_t v290;
  __int16 v291;
  uint64_t v292;
  __int16 v293;
  uint64_t v294;
  __int16 v295;
  uint64_t v296;
  __int16 v297;
  uint64_t v298;
  __int16 v299;
  int v300;
  __int16 v301;
  int v302;
  uint64_t v303;

  v303 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 480))
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v7 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,route model has NOT been configured successfully,expire the race session", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      LOWORD(v275) = 0;
      v211 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v211);
      if (v211 != (char *)buf)
        free(v211);
    }
    *(_BYTE *)(a1 + 478) = 1;
  }
  if (*(_BYTE *)(a1 + 475))
  {
    sub_18F650D50(a1);
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v8 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,passed finish line", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      LOWORD(v275) = 0;
      v202 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v202);
      if (v202 != (char *)buf)
        free(v202);
    }
    return 3;
  }
  if (a2)
  {
    objc_msgSend_timestamp_s(a2, (const char *)a2, a3, a4);
    if (v13 < *(double *)(a1 + 328) || (objc_msgSend_odometer_m(a2, v10, v11, v12), v17 < *(double *)(a1 + 320)))
    {
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v18 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend_timestamp_s(a2, v19, v20, v21);
        v23 = v22;
        v24 = *(_QWORD *)(a1 + 328);
        objc_msgSend_odometer_m(a2, v25, v26, v27);
        v28 = *(_QWORD *)(a1 + 320);
        *(_DWORD *)buf = 134349824;
        v290 = v23;
        v291 = 2050;
        v292 = v24;
        v293 = 2050;
        v294 = v29;
        v295 = 2050;
        v296 = v28;
        _os_log_impl(&dword_18F5B3000, v18, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,invalid input data,time,%{public}.1lf,lastOnRouteTime,%{public}.1lf,odom,%{public}.2lf,lastOnRouteOdom,%{public}.2lf", buf, 0x2Au);
      }
      if (!sub_18F5C4AE0(115, 0))
        return 5;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      objc_msgSend_timestamp_s(a2, v213, v214, v215);
      v217 = v216;
      v218 = *(_QWORD *)(a1 + 328);
      objc_msgSend_odometer_m(a2, v219, v220, v221);
      v222 = *(_QWORD *)(a1 + 320);
      v275 = 134349824;
      v276 = v217;
      v277 = 2050;
      v278 = v218;
      v279 = 2050;
      v280 = v223;
      v281 = 2050;
      v282 = v222;
      v73 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v73);
      if (v73 == (char *)buf)
        return 5;
LABEL_180:
      free(v73);
      return 5;
    }
    objc_msgSend_latitude_deg(a2, v14, v15, v16);
    v32 = v31;
    objc_msgSend_longitude_deg(a2, v33, v34, v35);
    if (!sub_18F650950(v32, v36)
      || (objc_msgSend_altitude_m(a2, v37, v38, v39), fabs(v40) == INFINITY)
      || v40 <= -430.5
      || v40 >= 8848.86)
    {
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v44 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend_latitude_deg(a2, v45, v46, v47);
        v49 = v48;
        objc_msgSend_longitude_deg(a2, v50, v51, v52);
        v54 = v53;
        objc_msgSend_altitude_m(a2, v55, v56, v57);
        *(_DWORD *)buf = 134284033;
        v290 = v49;
        v291 = 2049;
        v292 = v54;
        v293 = 2049;
        v294 = v58;
        _os_log_impl(&dword_18F5B3000, v44, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,invalid input data,lat,%{private}.7lf,lon,%{private}.7lf,alt,%{private}.2lf", buf, 0x20u);
      }
      if (!sub_18F5C4AE0(115, 0))
        return 5;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      objc_msgSend_latitude_deg(a2, v59, v60, v61);
      v63 = v62;
      objc_msgSend_longitude_deg(a2, v64, v65, v66);
      v68 = v67;
      objc_msgSend_altitude_m(a2, v69, v70, v71);
      v275 = 134284033;
      v276 = v63;
      v277 = 2049;
      v278 = v68;
      v279 = 2049;
      v280 = v72;
      v73 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v73);
      goto LABEL_56;
    }
    if (*(_BYTE *)(a1 + 478))
    {
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v41 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v41, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,race session expired", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        LOWORD(v275) = 0;
        v231 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v231);
        if (v231 != (char *)buf)
          free(v231);
      }
      if (*(_BYTE *)(a1 + 474) && (sub_18F65B858(a1, (char *)a2, a3, v42) & 1) == 0)
      {
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v43 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v43, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,race session expired but failed to updateDistanceDuringOffRoutePeriod", buf, 2u);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          LOWORD(v275) = 0;
          v263 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v263);
          if (v263 != (char *)buf)
            free(v263);
        }
      }
      return 6;
    }
    ++*(_DWORD *)(a1 + 508);
    *(_BYTE *)(a1 + 484) = 0;
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v74 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend_timestamp_s(a2, v75, v76, v77);
      v79 = v78;
      objc_msgSend_latitude_deg(a2, v80, v81, v82);
      v84 = v83;
      objc_msgSend_longitude_deg(a2, v85, v86, v87);
      v89 = v88;
      objc_msgSend_altitude_m(a2, v90, v91, v92);
      v94 = v93;
      objc_msgSend_odometer_m(a2, v95, v96, v97);
      v99 = v98;
      v103 = objc_msgSend_signalEnvironmentType(a2, v100, v101, v102);
      v104 = *(_DWORD *)(a1 + 508);
      *(_DWORD *)buf = 134285057;
      v290 = v79;
      v291 = 2049;
      v292 = v84;
      v293 = 2049;
      v294 = v89;
      v295 = 2049;
      v296 = v94;
      v297 = 2049;
      v298 = v99;
      v299 = 1025;
      v300 = v103;
      v301 = 1026;
      v302 = v104;
      _os_log_impl(&dword_18F5B3000, v74, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,pointType,currentLocation,time,%{private}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,alt,%{private}.2lf,odom,%{private}.2lf,signalEnv,%{private}d,pointCount,%{public}d", buf, 0x40u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      objc_msgSend_timestamp_s(a2, v232, v233, v234);
      v236 = v235;
      objc_msgSend_latitude_deg(a2, v237, v238, v239);
      v241 = v240;
      objc_msgSend_longitude_deg(a2, v242, v243, v244);
      v246 = v245;
      objc_msgSend_altitude_m(a2, v247, v248, v249);
      v251 = v250;
      objc_msgSend_odometer_m(a2, v252, v253, v254);
      v256 = v255;
      v260 = objc_msgSend_signalEnvironmentType(a2, v257, v258, v259);
      v261 = *(_DWORD *)(a1 + 508);
      v275 = 134285057;
      v276 = v236;
      v277 = 2049;
      v278 = v241;
      v279 = 2049;
      v280 = v246;
      v281 = 2049;
      v282 = v251;
      v283 = 2049;
      v284 = v256;
      v285 = 1025;
      v286 = v260;
      v287 = 1026;
      v288 = v261;
      v262 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v262);
      if (v262 != (char *)buf)
        free(v262);
    }
    if (!*(_BYTE *)(a1 + 483) && *(_BYTE *)(a1 + 479) && objc_msgSend_count(*(void **)(a1 + 48), v105, v106, v107))
    {
      v114 = *(void **)(a1 + 48);
      v115 = objc_msgSend_count(v114, v105, v106, v107);
      v118 = (void *)objc_msgSend_objectAtIndexedSubscript_(v114, v116, v115 - 1, v117);
      objc_msgSend_odometer_m(v118, v119, v120, v121);
      *(_QWORD *)(a1 + 544) = v122;
      *(_BYTE *)(a1 + 483) = 1;
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v123 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
      {
        v124 = *(_QWORD *)(a1 + 544);
        *(_DWORD *)buf = 134283521;
        v290 = v124;
        _os_log_impl(&dword_18F5B3000, v123, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,reference route total length,%{private}.2lf", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v125 = *(_QWORD *)(a1 + 544);
        v275 = 134283521;
        v276 = v125;
        v126 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v126);
        if (v126 != (char *)buf)
          free(v126);
      }
    }
    v108 = *(_DWORD *)(a1 + 40);
    if (v108 != objc_msgSend_signalEnvironmentType(a2, v105, v106, v107))
    {
      v112 = objc_msgSend_signalEnvironmentType(a2, v109, v110, v111);
      *(_DWORD *)(a1 + 40) = 0;
      if (v112 >= 5 && v112 != 6)
      {
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v193 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
        {
          v197 = objc_msgSend_signalEnvironmentType(a2, v194, v195, v196);
          *(_DWORD *)buf = 67240192;
          LODWORD(v290) = v197;
          _os_log_impl(&dword_18F5B3000, v193, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,invalid signal environment type,%{public}d", buf, 8u);
        }
        if (!sub_18F5C4AE0(115, 0))
          return 5;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v275 = 67240192;
        LODWORD(v276) = objc_msgSend_signalEnvironmentType(a2, v198, v199, v200);
        v73 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v73);
LABEL_56:
        if (v73 == (char *)buf)
          return 5;
        goto LABEL_180;
      }
      *(_DWORD *)(a1 + 40) = v112;
      if (v112 - 1 > 5)
        v113 = 0x4044000000000000;
      else
        v113 = qword_18F773270[v112 - 1];
      *(_QWORD *)(a1 + 576) = v113;
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v127 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEBUG))
      {
        v128 = *(_QWORD *)(a1 + 576);
        *(_DWORD *)buf = 134283521;
        v290 = v128;
        _os_log_impl(&dword_18F5B3000, v127, OS_LOG_TYPE_DEBUG, "CLRR,getPerformanceResults,nearest neighbor maximum accepted distance,%{private}.2lf", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v264 = *(_QWORD *)(a1 + 576);
        v275 = 134283521;
        v276 = v264;
        v265 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v265);
        if (v265 != (char *)buf)
          free(v265);
      }
    }
    objc_msgSend_latitude_deg(a2, v109, v110, v111);
    v130 = v129;
    objc_msgSend_longitude_deg(a2, v131, v132, v133);
    if (sub_18F65E860((double *)(a1 + 56), v130, v134))
    {
      objc_msgSend_latitude_deg(a2, v135, v136, v137);
      v139 = v138;
      objc_msgSend_longitude_deg(a2, v140, v141, v142);
      v144 = sub_18F650A80(a1 + 56, v139, v143);
      v274 = v144;
      if ((v144 & 0x80000000) != 0
        || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3) <= v144)
      {
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v172 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
        {
          objc_msgSend_latitude_deg(a2, v173, v174, v175);
          v177 = v176;
          objc_msgSend_longitude_deg(a2, v178, v179, v180);
          *(_DWORD *)buf = 134283777;
          v290 = v177;
          v291 = 2049;
          v292 = v181;
          _os_log_impl(&dword_18F5B3000, v172, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,unspecified state,invalid index for location,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
        }
        if (!sub_18F5C4AE0(115, 0))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        objc_msgSend_latitude_deg(a2, v182, v183, v184);
        v186 = v185;
        objc_msgSend_longitude_deg(a2, v187, v188, v189);
        v275 = 134283777;
        v276 = v186;
        v277 = 2049;
        v278 = v190;
        v191 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v191);
        if (v191 == (char *)buf)
          return 0;
        goto LABEL_225;
      }
      v148 = *(unsigned int *)(a1 + 524);
      if ((v148 & 0x80000000) == 0 && objc_msgSend_count(*(void **)(a1 + 48), v145, v146, v147) > v148)
      {
        v151 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 48), v149, *(int *)(a1 + 524), v150);
        objc_msgSend_latitude_deg(v151, v152, v153, v154);
        v156 = v155;
        v159 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 48), v157, *(int *)(a1 + 524), v158);
        objc_msgSend_longitude_deg(v159, v160, v161, v162);
        *(_DWORD *)(a1 + 536) = sub_18F650A80(a1 + 56, v156, v163);
      }
      if (*(_BYTE *)(a1 + 474))
      {
        if (*(_BYTE *)(a1 + 476) || *(_BYTE *)(a1 + 485))
        {
          v164 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 1;
          if ((sub_18F653140(a1, (const char *)a2, v164, &v274, (int *)buf, a3) & 1) != 0)
          {
            sub_18F658D0C(a1, v165, v166, v167);
            sub_18F5D5990(v270, "rejoin");
            sub_18F65BE98(a1, (double *)a3, v270);
            if (v271 < 0)
            {
              v168 = (void *)v270[0];
LABEL_149:
              operator delete(v168);
              return 1;
            }
            return 1;
          }
          *(_OWORD *)(a3 + 144) = 0u;
          *(_OWORD *)(a3 + 160) = 0u;
          *(_OWORD *)(a3 + 112) = 0u;
          *(_OWORD *)(a3 + 128) = 0u;
          *(_OWORD *)(a3 + 80) = 0u;
          *(_OWORD *)(a3 + 96) = 0u;
          *(_OWORD *)(a3 + 48) = 0u;
          *(_OWORD *)(a3 + 64) = 0u;
          *(_OWORD *)(a3 + 16) = 0u;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)a3 = 0u;
          sub_18F658BF8(a1, v165, v166, v167);
          if (*(_BYTE *)(a1 + 476))
          {
            if (qword_1EE172138 != -1)
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
            v207 = qword_1EE172140;
            if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F5B3000, v207, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,user is off-route", buf, 2u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172138 != -1)
                dispatch_once(&qword_1EE172138, &unk_1E2990430);
              LOWORD(v275) = 0;
              v267 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v267);
              if (v267 != (char *)buf)
                free(v267);
            }
            if ((sub_18F65B858(a1, (char *)a2, a3, v208) & 1) != 0)
              return 2;
            if (qword_1EE172138 != -1)
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
            v209 = qword_1EE172140;
            if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F5B3000, v209, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,user is off-route but failed to updateDistanceDuringOffRoutePeriod", buf, 2u);
            }
            if (!sub_18F5C4AE0(115, 0))
              return 2;
            bzero(buf, 0x65CuLL);
            if (qword_1EE172138 != -1)
              dispatch_once(&qword_1EE172138, &unk_1E2990430);
            LOWORD(v275) = 0;
            v210 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v210);
LABEL_229:
            if (v210 != (char *)buf)
              free(v210);
            return 2;
          }
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v224 = qword_1EE172140;
          if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v224, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,unspecified state", buf, 2u);
          }
          if (!sub_18F5C4AE0(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 == -1)
            goto LABEL_201;
        }
        else
        {
          v226 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 2;
          if ((sub_18F653140(a1, (const char *)a2, v226, &v274, (int *)buf, a3) & 1) != 0)
          {
            sub_18F658D0C(a1, v227, v228, v229);
            sub_18F5D5990(v268, "onRoute");
            sub_18F65BE98(a1, (double *)a3, v268);
            if ((v269 & 0x80000000) == 0)
              return 1;
            v168 = (void *)v268[0];
            goto LABEL_149;
          }
          *(_OWORD *)(a3 + 144) = 0u;
          *(_OWORD *)(a3 + 160) = 0u;
          *(_OWORD *)(a3 + 112) = 0u;
          *(_OWORD *)(a3 + 128) = 0u;
          *(_OWORD *)(a3 + 80) = 0u;
          *(_OWORD *)(a3 + 96) = 0u;
          *(_OWORD *)(a3 + 48) = 0u;
          *(_OWORD *)(a3 + 64) = 0u;
          *(_OWORD *)(a3 + 16) = 0u;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)a3 = 0u;
          sub_18F658BF8(a1, v227, v228, v229);
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          v230 = qword_1EE172140;
          if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v230, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,unspecified state", buf, 2u);
          }
          if (!sub_18F5C4AE0(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 == -1)
            goto LABEL_201;
        }
      }
      else
      {
        v203 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 0;
        if ((sub_18F653140(a1, (const char *)a2, v203, &v274, (int *)buf, a3) & 1) != 0)
        {
          *(_BYTE *)(a1 + 474) = 1;
          sub_18F658D0C(a1, v204, v205, v206);
          sub_18F5D5990(__p, "start");
          sub_18F65BE98(a1, (double *)a3, (uint64_t *)__p);
          if (v273 < 0)
          {
            v168 = __p[0];
            goto LABEL_149;
          }
          return 1;
        }
        *(_OWORD *)(a3 + 144) = 0u;
        *(_OWORD *)(a3 + 160) = 0u;
        *(_OWORD *)(a3 + 112) = 0u;
        *(_OWORD *)(a3 + 128) = 0u;
        *(_OWORD *)(a3 + 80) = 0u;
        *(_OWORD *)(a3 + 96) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)(a3 + 64) = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)a3 = 0u;
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v212 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v212, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,race not started yet,unspecified state", buf, 2u);
        }
        if (!sub_18F5C4AE0(115, 2))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 == -1)
          goto LABEL_201;
      }
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
LABEL_201:
      LOWORD(v275) = 0;
      v191 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v191);
      goto LABEL_224;
    }
    *(_BYTE *)(a1 + 484) = 1;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    if (*(_BYTE *)(a1 + 474))
    {
      sub_18F658BF8(a1, v135, v136, v137);
      if (*(_BYTE *)(a1 + 476))
      {
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v169 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v169, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,current location outside of bounding box,user is off-route", buf, 2u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172138 != -1)
            dispatch_once(&qword_1EE172138, &unk_1E2990430);
          LOWORD(v275) = 0;
          v266 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v266);
          if (v266 != (char *)buf)
            free(v266);
        }
        if ((sub_18F65B858(a1, (char *)a2, a3, v170) & 1) != 0)
          return 2;
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        v171 = qword_1EE172140;
        if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v171, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,user is off-route but failed to updateDistanceDuringOffRoutePeriod", buf, 2u);
        }
        if (!sub_18F5C4AE0(115, 0))
          return 2;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172138 != -1)
          dispatch_once(&qword_1EE172138, &unk_1E2990430);
        LOWORD(v275) = 0;
        v210 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v210);
        goto LABEL_229;
      }
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v201 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v201, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,current location outside of bounding box,unspecified state", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 == -1)
        goto LABEL_223;
    }
    else
    {
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v192 = qword_1EE172140;
      if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v192, OS_LOG_TYPE_DEFAULT, "CLRR,getPerformanceResults,race not started yet,current location outside of bounding box,unspecified state", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 == -1)
        goto LABEL_223;
    }
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
LABEL_223:
    LOWORD(v275) = 0;
    v191 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v191);
LABEL_224:
    if (v191 != (char *)buf)
LABEL_225:
      free(v191);
    return 0;
  }
  if (qword_1EE172138 != -1)
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
  v30 = qword_1EE172140;
  if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v30, OS_LOG_TYPE_ERROR, "CLRR,getPerformanceResults,current data point is null", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    LOWORD(v275) = 0;
    v225 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "CLRacingRouteLocationState CLRacingRoute::getPerformanceResults(CLRoutePoint *, RacingRouteScoreboard &)", "CoreLocation: %s\n", v225);
    if (v225 != (char *)buf)
      free(v225);
  }
  return 4;
}

void sub_18F65E810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

BOOL sub_18F65E860(double *a1, double a2, double a3)
{
  _BOOL8 result;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  if (fabs(a2) < 0.00003 && fabs(a3) < 0.00003)
    return 0;
  result = 0;
  if (a3 >= -180.0 && a2 <= 90.0 && a2 >= -90.0 && a3 <= 180.0)
  {
    if (*a1 > a2 || a1[1] < a2)
      return 0;
    v5 = a1[2];
    v6 = a1[3];
    if (v5 >= 0.0 && v6 >= 0.0 || v5 <= 0.0 && v6 <= 0.0)
      return v6 >= a3 && v5 <= a3;
    v7 = 360.0;
    if (v5 < 0.0)
      v5 = v5 + 360.0;
    v8 = v6 + 360.0;
    if (v6 >= 0.0)
      v8 = a1[3];
    v9 = v8 - v5;
    if (v8 - v5 <= 180.0)
    {
      if (v9 < -180.0)
        v9 = v9 + 360.0;
    }
    else
    {
      v9 = v9 + -360.0;
    }
    v10 = a3 + 360.0;
    if (a3 >= 0.0)
      v10 = a3;
    v11 = v8 - v10;
    if (v11 <= 180.0)
    {
      if (v11 < -180.0)
        v11 = v11 + 360.0;
    }
    else
    {
      v11 = v11 + -360.0;
    }
    v12 = fabs(v9);
    v13 = fabs(v11);
    v14 = v5 - v10;
    if (v14 <= 180.0)
    {
      if (v14 >= -180.0)
        return fabs(v14) <= v12 && v13 <= v12;
    }
    else
    {
      v7 = -360.0;
    }
    v14 = v14 + v7;
    return fabs(v14) <= v12 && v13 <= v12;
  }
  return result;
}

__n128 sub_18F65E9E0(uint64_t a1)
{
  uint64_t v1;
  __n128 result;

  v1 = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;

  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  sub_18F65FD60((uint64_t *)(v1 + 96));
  *(_OWORD *)(v1 + 120) = 0u;
  v1 += 120;
  *(_DWORD *)(v1 + 400) = 0;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 384) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 350) = 0u;
  *(_DWORD *)(v1 + 420) = -1;
  *(_QWORD *)(v1 + 404) = -1;
  *(_QWORD *)(v1 + 412) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(v1 + 424) = result;
  *(__n128 *)(v1 + 440) = result;
  *(_QWORD *)(v1 + 456) = 0x4044000000000000;
  return result;
}

uint64_t sub_18F65EA94(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *started;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  const char *v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  const char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  const char *v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  const char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  const char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  const char *v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  const char *v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  const char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  const char *v266;
  uint64_t v267;
  uint64_t v268;
  void *v269;
  const char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  const char *v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  const char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  const char *v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  const char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  const char *v290;
  uint64_t v291;
  uint64_t v292;
  void *ProjectedDataPoint;
  const char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  const char *v298;
  uint64_t v299;
  uint64_t v300;
  void *v301;
  const char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  const char *v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  const char *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  const char *v314;
  uint64_t v315;
  uint64_t v316;
  void *v317;
  const char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  const char *v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  const char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  const char *v330;
  uint64_t v331;
  uint64_t v332;
  void *v333;
  const char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  const char *v338;
  uint64_t v339;
  uint64_t v340;
  void *v341;
  const char *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  const char *v346;
  uint64_t v347;
  uint64_t v348;
  void *v349;
  const char *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  const char *v354;
  uint64_t v355;
  uint64_t v356;
  void *v357;
  const char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  const char *v362;
  uint64_t v363;
  uint64_t v364;
  void *v365;
  const char *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  const char *v370;
  uint64_t v371;
  uint64_t v372;
  void *v373;
  const char *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  const char *v378;
  uint64_t v379;
  uint64_t v380;
  void *v381;
  const char *v382;
  uint64_t v383;
  uint64_t v384;
  const char *v385;
  uint64_t v386;
  uint64_t v387;
  void *v388;
  const char *v389;
  uint64_t v390;
  uint64_t v391;
  const char *v392;
  uint64_t v393;
  uint64_t v394;
  void *v395;
  const char *v396;
  uint64_t v397;
  uint64_t v398;
  const char *v399;
  uint64_t v400;
  uint64_t v401;
  void *v402;
  const char *v403;
  uint64_t v404;
  uint64_t v405;
  const char *v406;
  uint64_t v407;
  uint64_t v408;
  void *v409;
  const char *v410;
  uint64_t v411;
  uint64_t v412;
  const char *v413;
  uint64_t v414;
  uint64_t v415;
  void *v416;
  const char *v417;
  uint64_t v418;
  uint64_t v419;
  const char *v420;
  uint64_t v421;
  uint64_t v422;
  void *v423;
  const char *v424;
  uint64_t v425;
  uint64_t v426;
  const char *v427;
  uint64_t v428;
  uint64_t v429;
  void *v430;
  const char *v431;
  uint64_t v432;
  uint64_t v433;
  const char *v434;
  uint64_t v435;
  uint64_t v436;
  void *v437;
  const char *v438;
  uint64_t v439;
  uint64_t v440;
  const char *v441;
  uint64_t v442;
  uint64_t v443;
  void *v444;
  const char *v445;
  uint64_t v446;
  uint64_t v447;
  const char *v448;
  uint64_t v449;
  uint64_t v450;
  void *v451;
  const char *v452;
  uint64_t v453;
  uint64_t v454;
  const char *v455;
  uint64_t v456;
  uint64_t v457;
  void *v458;
  const char *v459;
  uint64_t v460;
  uint64_t v461;
  const char *v462;
  uint64_t v463;
  uint64_t v464;
  void *v465;
  const char *v466;
  uint64_t v467;
  uint64_t v468;
  const char *v469;
  uint64_t v470;
  uint64_t v471;
  void *v472;
  const char *v473;
  uint64_t v474;
  uint64_t v475;
  const char *v476;
  uint64_t v477;
  uint64_t v478;
  void *v479;
  const char *v480;
  uint64_t v481;
  uint64_t v482;
  const char *v483;
  uint64_t v484;
  uint64_t v485;
  void *v486;
  const char *v487;
  uint64_t v488;
  uint64_t v489;
  const char *v490;
  uint64_t v491;
  uint64_t v492;
  void *v493;
  const char *v494;
  uint64_t v495;
  uint64_t v496;
  const char *v497;
  uint64_t v498;
  uint64_t v499;
  void *v500;
  const char *v501;
  uint64_t v502;
  uint64_t v503;
  const char *v504;
  uint64_t v505;
  uint64_t v506;
  void *v507;
  const char *v508;
  uint64_t v509;
  uint64_t v510;
  const char *v511;
  uint64_t v512;
  uint64_t v513;
  void *v514;
  const char *v515;
  uint64_t v516;
  uint64_t v517;
  const char *v518;
  uint64_t v519;
  uint64_t v520;
  void *v521;
  const char *v522;
  uint64_t v523;
  uint64_t v524;
  const char *v525;
  uint64_t v526;
  uint64_t v527;
  void *v528;
  const char *v529;
  uint64_t v530;
  uint64_t v531;
  const char *v532;
  uint64_t v533;
  uint64_t v534;
  void *v535;
  const char *v536;
  uint64_t v537;
  uint64_t v538;
  const char *v539;
  uint64_t v540;
  uint64_t v541;
  void *v542;
  const char *v543;
  uint64_t v544;
  uint64_t v545;
  const char *v546;
  uint64_t v547;
  uint64_t v548;
  void *v549;
  const char *v550;
  uint64_t v551;
  uint64_t v552;
  const char *v553;
  uint64_t v554;
  uint64_t v555;
  void *v556;
  const char *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  const char *v561;
  uint64_t v562;
  uint64_t v563;
  void *v564;
  const char *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  const char *v569;
  uint64_t v570;
  uint64_t v571;
  void *v572;
  const char *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  const char *v577;
  uint64_t v578;
  uint64_t v579;
  void *v580;
  const char *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  const char *v585;
  uint64_t v586;
  uint64_t v587;
  void *v588;
  const char *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  NSObject *v593;
  int v594;
  int v595;
  int v596;
  uint64_t v597;
  uint64_t result;
  NSObject *v599;
  int v600;
  NSObject *v601;
  int v602;
  NSObject *v603;
  int v604;
  NSObject *v605;
  int v606;
  NSObject *v607;
  int v608;
  NSObject *v609;
  int v610;
  NSObject *v611;
  int v612;
  NSObject *v613;
  int v614;
  char *v615;
  char *v616;
  char *v617;
  uint8_t buf[4];
  int v619;
  __int16 v620;
  int v621;
  __int16 v622;
  int v623;
  __int16 v624;
  uint64_t v625;
  uint64_t v626;

  v626 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172138 != -1)
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
  v4 = qword_1EE172140;
  if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEFAULT, "CLRR,setRacingRouteParameters,set race parameters", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v615 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::setRacingRouteParameters(CLRacingRouteParameters *)", "CoreLocation: %s\n", v615);
    if (v615 != (char *)buf)
      free(v615);
  }
  if (!a2)
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v599 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v599, OS_LOG_TYPE_ERROR, "CLRR,setRacingRouteParameters,racingRouteParameters is null", buf, 2u);
    }
    v600 = sub_18F5C4AE0(115, 0);
    result = 0;
    if (!v600)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      goto LABEL_87;
    goto LABEL_84;
  }
  if (!objc_msgSend_routeMatrixIndexVec(a2, v5, v6, v7))
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v601 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v601, OS_LOG_TYPE_ERROR, "CLRR,setRacingRouteParameters,racingRouteParameters.routeMatrixIndexVec is null", buf, 2u);
    }
    v602 = sub_18F5C4AE0(115, 0);
    result = 0;
    if (!v602)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      goto LABEL_87;
    goto LABEL_84;
  }
  if (!objc_msgSend_racingRouteVariables(a2, v8, v9, v10))
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v603 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v603, OS_LOG_TYPE_ERROR, "CLRR,setRacingRouteParameters,racingRouteParameters.racingRouteVariables is null", buf, 2u);
    }
    v604 = sub_18F5C4AE0(115, 0);
    result = 0;
    if (!v604)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      goto LABEL_87;
    goto LABEL_84;
  }
  if (!objc_msgSend_routeBoundingBox(a2, v11, v12, v13))
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v605 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v605, OS_LOG_TYPE_ERROR, "CLRR,setRacingRouteParameters,racingRouteParameters.routeBoundingBox is null", buf, 2u);
    }
    v606 = sub_18F5C4AE0(115, 0);
    result = 0;
    if (!v606)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      goto LABEL_87;
    goto LABEL_84;
  }
  if (!objc_msgSend_startPointOnCurrentRoute(a2, v14, v15, v16))
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v607 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v607, OS_LOG_TYPE_ERROR, "CLRR,setRacingRouteParameters,racingRouteParameters.startPointOnCurrentRoute is null", buf, 2u);
    }
    v608 = sub_18F5C4AE0(115, 0);
    result = 0;
    if (!v608)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      goto LABEL_87;
    goto LABEL_84;
  }
  if (!objc_msgSend_startPointOnReferenceRoute(a2, v17, v18, v19))
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v609 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v609, OS_LOG_TYPE_ERROR, "CLRR,setRacingRouteParameters,racingRouteParameters.startPointOnReferenceRoute is null", buf, 2u);
    }
    v610 = sub_18F5C4AE0(115, 0);
    result = 0;
    if (!v610)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      goto LABEL_87;
    goto LABEL_84;
  }
  if (!objc_msgSend_lastOnRouteDataPoint(a2, v20, v21, v22))
  {
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v611 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v611, OS_LOG_TYPE_ERROR, "CLRR,setRacingRouteParameters,racingRouteParameters.lastOnRouteDataPoint is null", buf, 2u);
    }
    v612 = sub_18F5C4AE0(115, 0);
    result = 0;
    if (!v612)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 != -1)
      goto LABEL_87;
LABEL_84:
    v617 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRacingRoute::setRacingRouteParameters(CLRacingRouteParameters *)", "CoreLocation: %s\n", v617);
    if (v617 != (char *)buf)
      free(v617);
    return 0;
  }
  if (objc_msgSend_lastProjectedDataPoint(a2, v23, v24, v25))
  {
    started = (void *)objc_msgSend_startPointOnCurrentRoute(a2, v26, v27, v28);
    objc_msgSend_latitude(started, v30, v31, v32);
    *(_QWORD *)(a1 + 120) = v33;
    v37 = (void *)objc_msgSend_startPointOnCurrentRoute(a2, v34, v35, v36);
    objc_msgSend_longitude(v37, v38, v39, v40);
    *(_QWORD *)(a1 + 128) = v41;
    v45 = (void *)objc_msgSend_startPointOnCurrentRoute(a2, v42, v43, v44);
    objc_msgSend_altitude(v45, v46, v47, v48);
    *(_QWORD *)(a1 + 136) = v49;
    v53 = (void *)objc_msgSend_startPointOnCurrentRoute(a2, v50, v51, v52);
    objc_msgSend_odometer(v53, v54, v55, v56);
    *(_QWORD *)(a1 + 144) = v57;
    v61 = (void *)objc_msgSend_startPointOnCurrentRoute(a2, v58, v59, v60);
    objc_msgSend_timestamp(v61, v62, v63, v64);
    *(_QWORD *)(a1 + 152) = v65;
    v69 = (void *)objc_msgSend_startPointOnCurrentRoute(a2, v66, v67, v68);
    objc_msgSend_timeSinceStart(v69, v70, v71, v72);
    *(_QWORD *)(a1 + 160) = v73;
    v77 = (void *)objc_msgSend_startPointOnCurrentRoute(a2, v74, v75, v76);
    objc_msgSend_offRouteTime(v77, v78, v79, v80);
    *(_QWORD *)(a1 + 168) = v81;
    v85 = (void *)objc_msgSend_startPointOnCurrentRoute(a2, v82, v83, v84);
    objc_msgSend_distanceSinceStart(v85, v86, v87, v88);
    *(_QWORD *)(a1 + 176) = v89;
    v93 = (void *)objc_msgSend_startPointOnCurrentRoute(a2, v90, v91, v92);
    objc_msgSend_offRouteDistance(v93, v94, v95, v96);
    *(_QWORD *)(a1 + 184) = v97;
    v101 = (void *)objc_msgSend_startPointOnCurrentRoute(a2, v98, v99, v100);
    objc_msgSend_averagePace(v101, v102, v103, v104);
    *(_QWORD *)(a1 + 192) = v105;
    v109 = (void *)objc_msgSend_startPointOnCurrentRoute(a2, v106, v107, v108);
    objc_msgSend_distanceAlongReference(v109, v110, v111, v112);
    *(_QWORD *)(a1 + 200) = v113;
    v117 = (void *)objc_msgSend_startPointOnReferenceRoute(a2, v114, v115, v116);
    objc_msgSend_latitude(v117, v118, v119, v120);
    *(_QWORD *)(a1 + 208) = v121;
    v125 = (void *)objc_msgSend_startPointOnReferenceRoute(a2, v122, v123, v124);
    objc_msgSend_longitude(v125, v126, v127, v128);
    *(_QWORD *)(a1 + 216) = v129;
    v133 = (void *)objc_msgSend_startPointOnReferenceRoute(a2, v130, v131, v132);
    objc_msgSend_altitude(v133, v134, v135, v136);
    *(_QWORD *)(a1 + 224) = v137;
    v141 = (void *)objc_msgSend_startPointOnReferenceRoute(a2, v138, v139, v140);
    objc_msgSend_odometer(v141, v142, v143, v144);
    *(_QWORD *)(a1 + 232) = v145;
    v149 = (void *)objc_msgSend_startPointOnReferenceRoute(a2, v146, v147, v148);
    objc_msgSend_timestamp(v149, v150, v151, v152);
    *(_QWORD *)(a1 + 240) = v153;
    v157 = (void *)objc_msgSend_startPointOnReferenceRoute(a2, v154, v155, v156);
    objc_msgSend_timeSinceStart(v157, v158, v159, v160);
    *(_QWORD *)(a1 + 248) = v161;
    v165 = (void *)objc_msgSend_startPointOnReferenceRoute(a2, v162, v163, v164);
    objc_msgSend_offRouteTime(v165, v166, v167, v168);
    *(_QWORD *)(a1 + 256) = v169;
    v173 = (void *)objc_msgSend_startPointOnReferenceRoute(a2, v170, v171, v172);
    objc_msgSend_distanceSinceStart(v173, v174, v175, v176);
    *(_QWORD *)(a1 + 264) = v177;
    v181 = (void *)objc_msgSend_startPointOnReferenceRoute(a2, v178, v179, v180);
    objc_msgSend_offRouteDistance(v181, v182, v183, v184);
    *(_QWORD *)(a1 + 272) = v185;
    v189 = (void *)objc_msgSend_startPointOnReferenceRoute(a2, v186, v187, v188);
    objc_msgSend_averagePace(v189, v190, v191, v192);
    *(_QWORD *)(a1 + 280) = v193;
    v197 = (void *)objc_msgSend_startPointOnReferenceRoute(a2, v194, v195, v196);
    objc_msgSend_distanceAlongReference(v197, v198, v199, v200);
    *(_QWORD *)(a1 + 288) = v201;
    v205 = (void *)objc_msgSend_lastOnRouteDataPoint(a2, v202, v203, v204);
    objc_msgSend_latitude(v205, v206, v207, v208);
    *(_QWORD *)(a1 + 296) = v209;
    v213 = (void *)objc_msgSend_lastOnRouteDataPoint(a2, v210, v211, v212);
    objc_msgSend_longitude(v213, v214, v215, v216);
    *(_QWORD *)(a1 + 304) = v217;
    v221 = (void *)objc_msgSend_lastOnRouteDataPoint(a2, v218, v219, v220);
    objc_msgSend_altitude(v221, v222, v223, v224);
    *(_QWORD *)(a1 + 312) = v225;
    v229 = (void *)objc_msgSend_lastOnRouteDataPoint(a2, v226, v227, v228);
    objc_msgSend_odometer(v229, v230, v231, v232);
    *(_QWORD *)(a1 + 320) = v233;
    v237 = (void *)objc_msgSend_lastOnRouteDataPoint(a2, v234, v235, v236);
    objc_msgSend_timestamp(v237, v238, v239, v240);
    *(_QWORD *)(a1 + 328) = v241;
    v245 = (void *)objc_msgSend_lastOnRouteDataPoint(a2, v242, v243, v244);
    objc_msgSend_timeSinceStart(v245, v246, v247, v248);
    *(_QWORD *)(a1 + 336) = v249;
    v253 = (void *)objc_msgSend_lastOnRouteDataPoint(a2, v250, v251, v252);
    objc_msgSend_offRouteTime(v253, v254, v255, v256);
    *(_QWORD *)(a1 + 344) = v257;
    v261 = (void *)objc_msgSend_lastOnRouteDataPoint(a2, v258, v259, v260);
    objc_msgSend_distanceSinceStart(v261, v262, v263, v264);
    *(_QWORD *)(a1 + 352) = v265;
    v269 = (void *)objc_msgSend_lastOnRouteDataPoint(a2, v266, v267, v268);
    objc_msgSend_offRouteDistance(v269, v270, v271, v272);
    *(_QWORD *)(a1 + 360) = v273;
    v277 = (void *)objc_msgSend_lastOnRouteDataPoint(a2, v274, v275, v276);
    objc_msgSend_averagePace(v277, v278, v279, v280);
    *(_QWORD *)(a1 + 368) = v281;
    v285 = (void *)objc_msgSend_lastOnRouteDataPoint(a2, v282, v283, v284);
    objc_msgSend_distanceAlongReference(v285, v286, v287, v288);
    *(_QWORD *)(a1 + 376) = v289;
    ProjectedDataPoint = (void *)objc_msgSend_lastProjectedDataPoint(a2, v290, v291, v292);
    objc_msgSend_latitude(ProjectedDataPoint, v294, v295, v296);
    *(_QWORD *)(a1 + 384) = v297;
    v301 = (void *)objc_msgSend_lastProjectedDataPoint(a2, v298, v299, v300);
    objc_msgSend_longitude(v301, v302, v303, v304);
    *(_QWORD *)(a1 + 392) = v305;
    v309 = (void *)objc_msgSend_lastProjectedDataPoint(a2, v306, v307, v308);
    objc_msgSend_altitude(v309, v310, v311, v312);
    *(_QWORD *)(a1 + 400) = v313;
    v317 = (void *)objc_msgSend_lastProjectedDataPoint(a2, v314, v315, v316);
    objc_msgSend_odometer(v317, v318, v319, v320);
    *(_QWORD *)(a1 + 408) = v321;
    v325 = (void *)objc_msgSend_lastProjectedDataPoint(a2, v322, v323, v324);
    objc_msgSend_timestamp(v325, v326, v327, v328);
    *(_QWORD *)(a1 + 416) = v329;
    v333 = (void *)objc_msgSend_lastProjectedDataPoint(a2, v330, v331, v332);
    objc_msgSend_timeSinceStart(v333, v334, v335, v336);
    *(_QWORD *)(a1 + 424) = v337;
    v341 = (void *)objc_msgSend_lastProjectedDataPoint(a2, v338, v339, v340);
    objc_msgSend_offRouteTime(v341, v342, v343, v344);
    *(_QWORD *)(a1 + 432) = v345;
    v349 = (void *)objc_msgSend_lastProjectedDataPoint(a2, v346, v347, v348);
    objc_msgSend_distanceSinceStart(v349, v350, v351, v352);
    *(_QWORD *)(a1 + 440) = v353;
    v357 = (void *)objc_msgSend_lastProjectedDataPoint(a2, v354, v355, v356);
    objc_msgSend_offRouteDistance(v357, v358, v359, v360);
    *(_QWORD *)(a1 + 448) = v361;
    v365 = (void *)objc_msgSend_lastProjectedDataPoint(a2, v362, v363, v364);
    objc_msgSend_averagePace(v365, v366, v367, v368);
    *(_QWORD *)(a1 + 456) = v369;
    v373 = (void *)objc_msgSend_lastProjectedDataPoint(a2, v370, v371, v372);
    objc_msgSend_distanceAlongReference(v373, v374, v375, v376);
    *(_QWORD *)(a1 + 464) = v377;
    v381 = (void *)objc_msgSend_racingRouteVariables(a2, v378, v379, v380);
    *(_BYTE *)(a1 + 474) = objc_msgSend_raceStartPointDetected(v381, v382, v383, v384);
    v388 = (void *)objc_msgSend_racingRouteVariables(a2, v385, v386, v387);
    *(_BYTE *)(a1 + 475) = objc_msgSend_raceEndPointDetected(v388, v389, v390, v391);
    v395 = (void *)objc_msgSend_racingRouteVariables(a2, v392, v393, v394);
    *(_BYTE *)(a1 + 476) = objc_msgSend_userIsOffRoute(v395, v396, v397, v398);
    v402 = (void *)objc_msgSend_racingRouteVariables(a2, v399, v400, v401);
    *(_BYTE *)(a1 + 477) = objc_msgSend_projectedOnNearestPoint(v402, v403, v404, v405);
    v409 = (void *)objc_msgSend_racingRouteVariables(a2, v406, v407, v408);
    *(_BYTE *)(a1 + 478) = objc_msgSend_raceSessionExpired(v409, v410, v411, v412);
    v416 = (void *)objc_msgSend_racingRouteVariables(a2, v413, v414, v415);
    *(_BYTE *)(a1 + 479) = objc_msgSend_rollingBufferReachedEndOfReferenceRoute(v416, v417, v418, v419);
    v423 = (void *)objc_msgSend_racingRouteVariables(a2, v420, v421, v422);
    *(_BYTE *)(a1 + 480) = objc_msgSend_routeConfigurationSuccessful(v423, v424, v425, v426);
    v430 = (void *)objc_msgSend_racingRouteVariables(a2, v427, v428, v429);
    *(_BYTE *)(a1 + 481) = objc_msgSend_racingRouteAnalyticsSent(v430, v431, v432, v433);
    v437 = (void *)objc_msgSend_racingRouteVariables(a2, v434, v435, v436);
    *(_BYTE *)(a1 + 482) = objc_msgSend_prematureRaceEndDetected(v437, v438, v439, v440);
    v444 = (void *)objc_msgSend_racingRouteVariables(a2, v441, v442, v443);
    *(_BYTE *)(a1 + 483) = objc_msgSend_referenceRouteTotalLengthDetermined(v444, v445, v446, v447);
    v451 = (void *)objc_msgSend_racingRouteVariables(a2, v448, v449, v450);
    *(_BYTE *)(a1 + 484) = objc_msgSend_locationPointIsOutsideOfAcceptedRange(v451, v452, v453, v454);
    v458 = (void *)objc_msgSend_racingRouteVariables(a2, v455, v456, v457);
    *(_BYTE *)(a1 + 485) = objc_msgSend_locationPointNotMatched(v458, v459, v460, v461);
    v465 = (void *)objc_msgSend_racingRouteVariables(a2, v462, v463, v464);
    *(_DWORD *)(a1 + 488) = objc_msgSend_routePointsBufferSize(v465, v466, v467, v468);
    v472 = (void *)objc_msgSend_racingRouteVariables(a2, v469, v470, v471);
    *(_DWORD *)(a1 + 492) = objc_msgSend_numberOfRoutePointsToAdd(v472, v473, v474, v475);
    v479 = (void *)objc_msgSend_racingRouteVariables(a2, v476, v477, v478);
    *(_DWORD *)(a1 + 496) = objc_msgSend_offRouteGraceDuration(v479, v480, v481, v482);
    v486 = (void *)objc_msgSend_racingRouteVariables(a2, v483, v484, v485);
    *(_DWORD *)(a1 + 500) = objc_msgSend_matchedPointCounter(v486, v487, v488, v489);
    v493 = (void *)objc_msgSend_racingRouteVariables(a2, v490, v491, v492);
    *(_DWORD *)(a1 + 504) = objc_msgSend_referenceRouteDataPointCounter(v493, v494, v495, v496);
    v500 = (void *)objc_msgSend_racingRouteVariables(a2, v497, v498, v499);
    *(_DWORD *)(a1 + 508) = objc_msgSend_currentRouteDataPointCounter(v500, v501, v502, v503);
    v507 = (void *)objc_msgSend_racingRouteVariables(a2, v504, v505, v506);
    *(_DWORD *)(a1 + 512) = objc_msgSend_offRouteDataPointCounter(v507, v508, v509, v510);
    v514 = (void *)objc_msgSend_racingRouteVariables(a2, v511, v512, v513);
    *(_DWORD *)(a1 + 516) = objc_msgSend_inutileDataPointCounter(v514, v515, v516, v517);
    v521 = (void *)objc_msgSend_racingRouteVariables(a2, v518, v519, v520);
    *(_DWORD *)(a1 + 520) = objc_msgSend_rollingBufferUpdateCounter(v521, v522, v523, v524);
    v528 = (void *)objc_msgSend_racingRouteVariables(a2, v525, v526, v527);
    *(_DWORD *)(a1 + 524) = objc_msgSend_lastMatchedPointIndex(v528, v529, v530, v531);
    v535 = (void *)objc_msgSend_racingRouteVariables(a2, v532, v533, v534);
    *(_DWORD *)(a1 + 528) = objc_msgSend_lastMatchedPointIndexOnReferenceRoute(v535, v536, v537, v538);
    v542 = (void *)objc_msgSend_racingRouteVariables(a2, v539, v540, v541);
    *(_DWORD *)(a1 + 532) = objc_msgSend_rollingBufferStartIndexOnReferenceRoute(v542, v543, v544, v545);
    v549 = (void *)objc_msgSend_racingRouteVariables(a2, v546, v547, v548);
    *(_DWORD *)(a1 + 536) = objc_msgSend_matrixCellIndexForLastMatchedPoint(v549, v550, v551, v552);
    v556 = (void *)objc_msgSend_racingRouteVariables(a2, v553, v554, v555);
    objc_msgSend_referenceRouteTotalLength(v556, v557, v558, v559);
    *(_QWORD *)(a1 + 544) = v560;
    v564 = (void *)objc_msgSend_racingRouteVariables(a2, v561, v562, v563);
    objc_msgSend_timestampOfLastMatchedPointOnReferenceRoute(v564, v565, v566, v567);
    *(_QWORD *)(a1 + 552) = v568;
    v572 = (void *)objc_msgSend_racingRouteVariables(a2, v569, v570, v571);
    objc_msgSend_registeredTimeAtThresholdDistance(v572, v573, v574, v575);
    *(_QWORD *)(a1 + 560) = v576;
    v580 = (void *)objc_msgSend_racingRouteVariables(a2, v577, v578, v579);
    objc_msgSend_endOfRaceTimeThreshold(v580, v581, v582, v583);
    *(_QWORD *)(a1 + 568) = v584;
    v588 = (void *)objc_msgSend_racingRouteVariables(a2, v585, v586, v587);
    objc_msgSend_nearestNeighborMaximumAcceptedDistance(v588, v589, v590, v591);
    *(_QWORD *)(a1 + 576) = v592;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 492) = *(_DWORD *)(a1 + 488);
    *(_BYTE *)(a1 + 473) = 1;
    *(_BYTE *)(a1 + 479) = 0;
    *(_BYTE *)(a1 + 483) = 0;
    *(_QWORD *)(a1 + 544) = 0xBFF0000000000000;
    if (qword_1EE172138 != -1)
      dispatch_once(&qword_1EE172138, &unk_1E2990430);
    v593 = qword_1EE172140;
    if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_DEFAULT))
    {
      v594 = *(unsigned __int8 *)(a1 + 473);
      v595 = *(_DWORD *)(a1 + 524);
      v596 = *(_DWORD *)(a1 + 528);
      v597 = *(_QWORD *)(a1 + 552);
      *(_DWORD *)buf = 67240960;
      v619 = v594;
      v620 = 1026;
      v621 = v595;
      v622 = 1026;
      v623 = v596;
      v624 = 2050;
      v625 = v597;
      _os_log_impl(&dword_18F5B3000, v593, OS_LOG_TYPE_DEFAULT, "CLRR,setRacingRouteParameters,recoveryMode,%{public}d,lastMatchedPointIndex,%{public}d,lastMatchedPointIndexOnReferenceRoute,%{public}d,timestampOfLastMatchedPointOnReferenceRoute,%{public}.1lf", buf, 0x1Eu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172138 != -1)
        dispatch_once(&qword_1EE172138, &unk_1E2990430);
      v616 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLRacingRoute::setRacingRouteParameters(CLRacingRouteParameters *)", "CoreLocation: %s\n", v616);
      if (v616 != (char *)buf)
        free(v616);
    }
    return 1;
  }
  if (qword_1EE172138 != -1)
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
  v613 = qword_1EE172140;
  if (os_log_type_enabled((os_log_t)qword_1EE172140, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v613, OS_LOG_TYPE_ERROR, "CLRR,setRacingRouteParameters,racingRouteParameters.lastProjectedDataPoint is null", buf, 2u);
  }
  v614 = sub_18F5C4AE0(115, 0);
  result = 0;
  if (v614)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172138 == -1)
      goto LABEL_84;
LABEL_87:
    dispatch_once(&qword_1EE172138, &unk_1E2990430);
    goto LABEL_84;
  }
  return result;
}

id sub_18F65FA00(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  CLPair *v11;
  unsigned int *v12;
  const char *v13;
  id v14;
  const char *v15;
  uint64_t v16;
  CLRacingRouteState *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  CLRacingRouteState *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  CLRacingRouteState *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  CLRacingRouteState *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  CLRouteBoundingBox *v37;
  const char *v38;
  id v39;
  CLRacingRouteVariables *v40;
  const char *v41;
  id v42;
  CLRacingRouteParameters *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v74;
  int v75;
  id v76;

  v2 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v76 = (id)objc_msgSend_initWithCapacity_(v2, v3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3), v4);
  if (*(_QWORD *)(a1 + 104) != *(_QWORD *)(a1 + 96))
  {
    v5 = 0;
    do
    {
      v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      if (*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24 * v5 + 8) != *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24 * v5))
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v11 = [CLPair alloc];
          v12 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24 * v5) + v9);
          v14 = (id)objc_msgSend_initWithFirst_second_(v11, v13, *v12, v12[1]);
          objc_msgSend_addObject_(v8, v15, (uint64_t)v14, v16);
          ++v10;
          v9 += 8;
        }
        while (v10 < (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24 * v5 + 8)
                              - *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24 * v5)) >> 3);
      }
      objc_msgSend_addObject_(v76, v6, (uint64_t)v8, v7);
      ++v5;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3) > v5);
  }
  v17 = [CLRacingRouteState alloc];
  v21 = (id)objc_msgSend_initWithLatitude_longitude_altitude_odometer_timestamp_timeSinceStart_offRouteTime_distanceSinceStart_offRouteDistance_averagePace_distanceAlongReference_(v17, v18, v19, v20, *(double *)(a1 + 120), *(double *)(a1 + 128), *(double *)(a1 + 136), *(double *)(a1 + 144), *(double *)(a1 + 152), *(double *)(a1 + 160), *(double *)(a1 + 168), *(double *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200));
  v22 = [CLRacingRouteState alloc];
  v26 = (id)objc_msgSend_initWithLatitude_longitude_altitude_odometer_timestamp_timeSinceStart_offRouteTime_distanceSinceStart_offRouteDistance_averagePace_distanceAlongReference_(v22, v23, v24, v25, *(double *)(a1 + 208), *(double *)(a1 + 216), *(double *)(a1 + 224), *(double *)(a1 + 232), *(double *)(a1 + 240), *(double *)(a1 + 248), *(double *)(a1 + 256), *(double *)(a1 + 264), *(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 288));
  v27 = [CLRacingRouteState alloc];
  v31 = (id)objc_msgSend_initWithLatitude_longitude_altitude_odometer_timestamp_timeSinceStart_offRouteTime_distanceSinceStart_offRouteDistance_averagePace_distanceAlongReference_(v27, v28, v29, v30, *(double *)(a1 + 296), *(double *)(a1 + 304), *(double *)(a1 + 312), *(double *)(a1 + 320), *(double *)(a1 + 328), *(double *)(a1 + 336), *(double *)(a1 + 344), *(double *)(a1 + 352), *(_QWORD *)(a1 + 360), *(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376));
  v32 = [CLRacingRouteState alloc];
  v36 = (id)objc_msgSend_initWithLatitude_longitude_altitude_odometer_timestamp_timeSinceStart_offRouteTime_distanceSinceStart_offRouteDistance_averagePace_distanceAlongReference_(v32, v33, v34, v35, *(double *)(a1 + 384), *(double *)(a1 + 392), *(double *)(a1 + 400), *(double *)(a1 + 408), *(double *)(a1 + 416), *(double *)(a1 + 424), *(double *)(a1 + 432), *(double *)(a1 + 440), *(_QWORD *)(a1 + 448), *(_QWORD *)(a1 + 456), *(_QWORD *)(a1 + 464));
  v37 = [CLRouteBoundingBox alloc];
  v39 = (id)objc_msgSend_initWithMinLatitude_maxLatitude_minLongitude_maxLongitude_nRows_nColumns_(v37, v38, *(unsigned int *)(a1 + 88), *(unsigned int *)(a1 + 92), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80));
  v40 = [CLRacingRouteVariables alloc];
  v75 = *(_DWORD *)(a1 + 536);
  *(_DWORD *)((char *)&v74 + 2) = *(_DWORD *)(a1 + 482);
  LOWORD(v74) = *(_WORD *)(a1 + 480);
  v42 = objc_autorelease((id)objc_msgSend_initWithRaceStartPointDetected_raceEndPointDetected_userIsOffRoute_projectedOnNearestPoint_raceSessionExpired_rollingBufferReachedEndOfReferenceRoute_routeConfigurationSuccessful_racingRouteAnalyticsSent_prematureRaceEndDetected_referenceRouteTotalLengthDetermined_locationPointIsOutsideOfAcceptedRange_locationPointNotMatched_routePointsBufferSize_numberOfRoutePointsToAdd_offRouteGraceDuration_matchedPointCounter_referenceRouteDataPointCounter_currentRouteDataPointCounter_offRouteDataPointCounter_inutileDataPointCounter_rollingBufferUpdateCounter_lastMatchedPointIndex_lastMatchedPointIndexOnReferenceRoute_rollingBufferStartIndexOnReferenceRoute_matrixCellIndexForLastMatchedPoint_referenceRouteTotalLength_timestampOfLastMatchedPointOnReferenceRoute_registeredTimeAtThresholdDistance_endOfRaceTimeThreshold_nearestNeighborMaximumAcceptedDistance_(v40, v41, *(unsigned __int8 *)(a1 + 474), *(unsigned __int8 *)(a1 + 475), *(unsigned __int8 *)(a1 + 476), *(unsigned __int8 *)(a1 + 477), *(unsigned __int8 *)(a1 + 478), *(unsigned __int8 *)(a1 + 479), *(double *)(a1 + 544), *(double *)(a1 + 552), *(double *)(a1 + 560), *(double *)(a1 + 568), *(double *)(a1 + 576), v74, *(_QWORD *)(a1 + 488), *(_QWORD *)(a1 + 496), *(_QWORD *)(a1 + 504), *(_QWORD *)(a1 + 512), *(_QWORD *)(a1 + 520),
                               *(_QWORD *)(a1 + 528),
                               v75));
  v43 = [CLRacingRouteParameters alloc];
  v47 = objc_msgSend_copy(v76, v44, v45, v46);
  v51 = objc_msgSend_copy(v42, v48, v49, v50);
  v55 = objc_msgSend_copy(v21, v52, v53, v54);
  v59 = objc_msgSend_copy(v26, v56, v57, v58);
  v63 = objc_msgSend_copy(v31, v60, v61, v62);
  v67 = objc_msgSend_copy(v36, v64, v65, v66);
  v71 = objc_msgSend_copy(v39, v68, v69, v70);
  return (id)objc_msgSend_initWithRouteMatrixIndexVec_racingRouteVariables_startPointOnCurrentRoute_startPointOnReferenceRoute_lastOnRouteDataPoint_lastProjectedDataPoint_routeBoundingBox_(v43, v72, v47, v51, v55, v59, v63, v67, v71);
}

os_log_t sub_18F65FD34()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "RacingRoute");
  qword_1EE172140 = (uint64_t)result;
  return result;
}

void sub_18F65FD60(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *sub_18F65FDB4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 24) = 0;
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = v2[2];
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_18F65FE24(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    sub_18F5F689C();
  return operator new(24 * a1);
}

uint64_t sub_18F65FE68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *sub_18F65FEC8(unint64_t a1)
{
  if (a1 >> 61)
    sub_18F5F689C();
  return operator new(8 * a1);
}

void sub_18F65FEFC(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_18F65FD60((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_18F65FF40(_QWORD *a1)
{
  sub_18F5C6360(a1);
  JUMPOUT(0x194002D30);
}

const __CFString *sub_18F65FF64()
{
  return CFSTR("Memory");
}

uint64_t sub_18F65FF70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 928))(a3, a1, a2);
}

uint64_t sub_18F65FF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 896))(a3, a1, a2);
}

uint64_t sub_18F65FFA8(void *context, uint64_t a2, int a3)
{
  const __CFDictionary *v4;
  void (__cdecl *v5)(const void *, const void *, void *);

  v4 = *(const __CFDictionary **)(a2 + 8);
  if (a3)
    v5 = (void (__cdecl *)(const void *, const void *, void *))sub_18F65FF8C;
  else
    v5 = (void (__cdecl *)(const void *, const void *, void *))sub_18F65FF70;
  CFDictionaryApplyFunction(v4, v5, context);
  return (*(uint64_t (**)(void *))(*(_QWORD *)context + 848))(context);
}

BOOL sub_18F65FFF4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t isDirectory;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 result;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  NSObject *v45;
  uint64_t v46;
  NSObject *v47;
  uint32_t v48;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint8_t buf[4];
  int v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  const char *v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x1E0C99E98];
  v7 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], a2, (uint64_t)a2, a4);
  isDirectory = objc_msgSend_fileURLWithPath_isDirectory_(v6, v8, v7, 0);
  v66 = 0;
  if (objc_msgSend_instancesRespondToSelector_(MEMORY[0x1E0C99D50], v10, (uint64_t)sel_dataWithContentsOfURL_options_error_, v11))v14 = objc_msgSend_dataWithContentsOfURL_options_error_(MEMORY[0x1E0C99D50], v12, isDirectory, 0, &v66);
  else
    v14 = objc_msgSend_dataWithContentsOfURL_(MEMORY[0x1E0C99D50], v12, isDirectory, v13);
  if (!v14)
  {
    if (!v66)
      return 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 872))(a1, 0);
    v19 = (void *)objc_msgSend_domain(v66, v16, v17, v18);
    if (objc_msgSend_isEqual_(v19, v20, *MEMORY[0x1E0CB28A8], v21)
      && objc_msgSend_code(v66, v22, v23, v24) == 260)
    {
      if (qword_1ECD8E748 != -1)
        dispatch_once(&qword_1ECD8E748, &unk_1E2991D30);
      v25 = qword_1ECD8E740;
      if (os_log_type_enabled((os_log_t)qword_1ECD8E740, OS_LOG_TYPE_ERROR))
      {
        v29 = (void *)objc_msgSend_description(v66, v26, v27, v28);
        v33 = objc_msgSend_UTF8String(v29, v30, v31, v32);
        *(_DWORD *)buf = 68289538;
        v68 = 0;
        v69 = 2082;
        v70 = "";
        v71 = 2082;
        v72 = a2;
        v73 = 2082;
        v74 = v33;
        _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"file does not exist... clearing\", \"file\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_1ECD8E748 != -1)
          dispatch_once(&qword_1ECD8E748, &unk_1E2991D30);
      }
      v34 = qword_1ECD8E740;
      result = os_signpost_enabled((os_log_t)qword_1ECD8E740);
      if (!result)
        return result;
      v38 = (void *)objc_msgSend_description(v66, v35, v36, v37);
      v42 = objc_msgSend_UTF8String(v38, v39, v40, v41);
      *(_DWORD *)buf = 68289538;
      v68 = 0;
      v69 = 2082;
      v70 = "";
      v71 = 2082;
      v72 = a2;
      v73 = 2082;
      v74 = v42;
      v43 = "file does not exist... clearing";
      v44 = "{\"msg%{public}.0s\":\"file does not exist... clearing\", \"file\":%{public, location:escape_only}s, \"error"
            "\":%{public, location:escape_only}s}";
    }
    else
    {
      if (qword_1ECD8E748 != -1)
        dispatch_once(&qword_1ECD8E748, &unk_1E2991D30);
      v49 = qword_1ECD8E740;
      if (os_log_type_enabled((os_log_t)qword_1ECD8E740, OS_LOG_TYPE_ERROR))
      {
        v53 = (void *)objc_msgSend_description(v66, v50, v51, v52);
        v57 = objc_msgSend_UTF8String(v53, v54, v55, v56);
        *(_DWORD *)buf = 68289538;
        v68 = 0;
        v69 = 2082;
        v70 = "";
        v71 = 2082;
        v72 = a2;
        v73 = 2082;
        v74 = v57;
        _os_log_impl(&dword_18F5B3000, v49, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning Error reading file\", \"file\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_1ECD8E748 != -1)
          dispatch_once(&qword_1ECD8E748, &unk_1E2991D30);
      }
      v34 = qword_1ECD8E740;
      result = os_signpost_enabled((os_log_t)qword_1ECD8E740);
      if (!result)
        return result;
      v61 = (void *)objc_msgSend_description(v66, v58, v59, v60);
      v65 = objc_msgSend_UTF8String(v61, v62, v63, v64);
      *(_DWORD *)buf = 68289538;
      v68 = 0;
      v69 = 2082;
      v70 = "";
      v71 = 2082;
      v72 = a2;
      v73 = 2082;
      v74 = v65;
      v43 = "#Warning Error reading file";
      v44 = "{\"msg%{public}.0s\":\"#Warning Error reading file\", \"file\":%{public, location:escape_only}s, \"error\":%"
            "{public, location:escape_only}s}";
    }
    v47 = v34;
    v48 = 38;
    goto LABEL_32;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 784))(a1, v14) & 1) != 0)
    return 1;
  if (qword_1ECD8E748 != -1)
    dispatch_once(&qword_1ECD8E748, &unk_1E2991D30);
  v45 = qword_1ECD8E740;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E740, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 68289282;
    v68 = 0;
    v69 = 2082;
    v70 = "";
    v71 = 2082;
    v72 = a2;
    _os_log_impl(&dword_18F5B3000, v45, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not deserialize property list\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1ECD8E748 != -1)
      dispatch_once(&qword_1ECD8E748, &unk_1E2991D30);
  }
  v46 = qword_1ECD8E740;
  result = os_signpost_enabled((os_log_t)qword_1ECD8E740);
  if (result)
  {
    *(_DWORD *)buf = 68289282;
    v68 = 0;
    v69 = 2082;
    v70 = "";
    v71 = 2082;
    v72 = a2;
    v43 = "could not deserialize property list";
    v44 = "{\"msg%{public}.0s\":\"could not deserialize property list\", \"file\":%{public, location:escape_only}s}";
    v47 = v46;
    v48 = 28;
LABEL_32:
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v47, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v43, v44, buf, v48);
    return 0;
  }
  return result;
}

uint64_t sub_18F6604CC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 872))(a1);
}

uint64_t sub_18F6604D8(uint64_t a1, void *a2, int a3)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t isDirectory;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  NSObject *v35;
  char *v37;
  void *v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint8_t buf[4];
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x1940032C4]();
  v7 = (void *)MEMORY[0x1E0C99E98];
  v10 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v8, a1, v9);
  isDirectory = objc_msgSend_fileURLWithPath_isDirectory_(v7, v11, v10, 0);
  if (isDirectory)
  {
    v14 = 536870913;
    if (a3)
      v14 = 1;
    if (a3 == 1)
      v15 = 1073741825;
    else
      v15 = v14;
    v38 = 0;
    v16 = objc_msgSend_writeToURL_options_error_(a2, v13, isDirectory, v15, &v38);
    if ((v16 & 1) == 0)
    {
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v17 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_ERROR))
      {
        v21 = (void *)objc_msgSend_description(v38, v18, v19, v20);
        v25 = objc_msgSend_UTF8String(v21, v22, v23, v24);
        *(_DWORD *)buf = 136446466;
        v44 = a1;
        v45 = 2082;
        v46 = v25;
        _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_ERROR, "Could not write data to disk %{public}s, %{public}s", buf, 0x16u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E728 != -1)
          dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
        v29 = (void *)objc_msgSend_description(v38, v26, v27, v28);
        v33 = objc_msgSend_UTF8String(v29, v30, v31, v32);
        v39 = 136446466;
        v40 = a1;
        v41 = 2082;
        v42 = v33;
        v34 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLNameValuePair::writeDataToFile(const char *, CFDataRef, CLNVPDataProtection) const", "CoreLocation: %s\n", v34);
        if (v34 != (char *)buf)
          free(v34);
      }
    }
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v35 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v44 = a1;
      _os_log_impl(&dword_18F5B3000, v35, OS_LOG_TYPE_FAULT, "Could not create NSURL for file: %{public}s", buf, 0xCu);
    }
    v16 = 0;
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v39 = 136446210;
      v40 = a1;
      v37 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLNameValuePair::writeDataToFile(const char *, CFDataRef, CLNVPDataProtection) const", "CoreLocation: %s\n", v37);
      if (v37 != (char *)buf)
        free(v37);
      v16 = 0;
    }
  }
  objc_autoreleasePoolPop(v6);
  return v16;
}

uint64_t sub_18F660890(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  char *v6;
  CFTypeRef cf;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if ((*(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 768))(a1, &cf))
  {
    v3 = sub_18F6604D8(a2, (void *)cf, 2);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v4 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v11 = a2;
      _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_FAULT, "Could not serialize data for file %{public}s", buf, 0xCu);
    }
    v3 = 0;
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v8 = 136446210;
      v9 = a2;
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::saveToFile(const char *) const", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
      v3 = 0;
    }
  }
  if (cf)
    CFRelease(cf);
  return v3;
}

uint64_t sub_18F660A80(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  id v12[2];
  CFTypeRef cf;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v6 = sub_18F5F6290((uint64_t *)v12, (uint64_t)"CLNameValuePair.SaveToBinaryFile", 0);
  v7 = (void *)MEMORY[0x1940032C4](v6);
  if ((*(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 776))(a1, &cf))
  {
    v8 = sub_18F6604D8(a2, (void *)cf, a3);
  }
  else
  {
    if (qword_1ECD8E748 != -1)
      dispatch_once(&qword_1ECD8E748, &unk_1E2991D30);
    v9 = qword_1ECD8E740;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E740, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = a2;
      _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not serialize data\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1ECD8E748 != -1)
        dispatch_once(&qword_1ECD8E748, &unk_1E2991D30);
    }
    v10 = qword_1ECD8E740;
    if (os_signpost_enabled((os_log_t)qword_1ECD8E740))
    {
      *(_DWORD *)buf = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = a2;
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not serialize data", "{\"msg%{public}.0s\":\"Could not serialize data\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    v8 = 0;
  }
  if (cf)
    CFRelease(cf);
  objc_autoreleasePoolPop(v7);
  sub_18F5F64B8(v12);
  return v8;
}

void sub_18F660C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_18F660C9C(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 880))(a1, v5, a3);
  CFRelease(v5);
}

uint64_t sub_18F660CFC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 880))(a1);
}

uint64_t sub_18F660D08(CFMutableDictionaryRef *a1)
{
  CFDictionaryRemoveAllValues(a1[1]);
  return (*((uint64_t (**)(CFMutableDictionaryRef *))*a1 + 106))(a1);
}

void sub_18F660D38(uint64_t a1, const __CFString *a2, unsigned int a3)
{
  CFTypeID v6;
  NSObject *v7;
  int v8;
  _BYTE *v9;
  CFTypeID v10;
  _BYTE *v11;
  int v12;
  void **v13;
  CFTypeID v14;
  void **v15;
  char *v16;
  NSObject *v17;
  int v18;
  _BYTE *v19;
  CFIndex Count;
  _BYTE *v21;
  int v22;
  void **v23;
  CFIndex v24;
  void **v25;
  void *v26[2];
  char v27;
  CFTypeRef cf;
  _BYTE __p[12];
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  CFTypeID v33;
  uint8_t buf[4];
  _BYTE *v35;
  __int16 v36;
  unsigned int v37;
  __int16 v38;
  CFTypeID v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0x80000000) != 0)
  {
    (*(void (**)(uint64_t, const __CFString *))(*(_QWORD *)a1 + 888))(a1, a2);
    return;
  }
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a1 + 912))(a1, a2, &cf))
    return;
  v6 = CFGetTypeID(cf);
  if (v6 != CFArrayGetTypeID())
  {
    if (!a3)
    {
      (*(void (**)(uint64_t, const __CFString *))(*(_QWORD *)a1 + 888))(a1, a2);
      goto LABEL_40;
    }
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v7 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v8 = SBYTE3(v33);
      v9 = *(_BYTE **)__p;
      v10 = CFGetTypeID(cf);
      v11 = __p;
      *(_DWORD *)buf = 136446722;
      if (v8 < 0)
        v11 = v9;
      v35 = v11;
      v36 = 1026;
      v37 = a3;
      v38 = 2050;
      v39 = v10;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_FAULT, "key %{public}s does not have element %{public}d in non-array type %{public}lu", buf, 0x1Cu);
      if (SBYTE3(v33) < 0)
        operator delete(*(void **)__p);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_40;
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    sub_18F661274(a2, (uint64_t)v26);
    v12 = v27;
    v13 = (void **)v26[0];
    v14 = CFGetTypeID(cf);
    v15 = v26;
    *(_DWORD *)__p = 136446722;
    if (v12 < 0)
      v15 = v13;
    *(_QWORD *)&__p[4] = v15;
    v30 = 1026;
    v31 = a3;
    v32 = 2050;
    v33 = v14;
    v16 = (char *)_os_log_send_and_compose_impl();
    if (v27 < 0)
      operator delete(v26[0]);
LABEL_37:
    sub_18F5F2740("Generic", 1, 0, 0, "virtual void CLNameValuePair::clearInternal(const CFStringRef, int)", "CoreLocation: %s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
    goto LABEL_40;
  }
  if (CFArrayGetCount((CFArrayRef)cf) <= a3)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v17 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v18 = SBYTE3(v33);
      v19 = *(_BYTE **)__p;
      Count = CFArrayGetCount((CFArrayRef)cf);
      v21 = __p;
      *(_DWORD *)buf = 136446722;
      if (v18 < 0)
        v21 = v19;
      v35 = v21;
      v36 = 1026;
      v37 = a3;
      v38 = 2050;
      v39 = Count;
      _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_FAULT, "key %{public}s does not have element %{public}d in array of size %{public}ld", buf, 0x1Cu);
      if (SBYTE3(v33) < 0)
        operator delete(*(void **)__p);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_40;
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    sub_18F661274(a2, (uint64_t)v26);
    v22 = v27;
    v23 = (void **)v26[0];
    v24 = CFArrayGetCount((CFArrayRef)cf);
    v25 = v26;
    *(_DWORD *)__p = 136446722;
    if (v22 < 0)
      v25 = v23;
    *(_QWORD *)&__p[4] = v25;
    v30 = 1026;
    v31 = a3;
    v32 = 2050;
    v33 = v24;
    v16 = (char *)_os_log_send_and_compose_impl();
    if (v27 < 0)
      operator delete(v26[0]);
    goto LABEL_37;
  }
  CFArrayRemoveValueAtIndex((CFMutableArrayRef)cf, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1);
LABEL_40:
  CFRelease(cf);
}

void sub_18F661234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_18F661274@<W0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  _BOOL8 result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = sub_18F663878(a1, a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
  }
  return result;
}

void sub_18F6612C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F6612E0(CFMutableDictionaryRef *a1, const void *a2)
{
  CFDictionaryRemoveValue(a1[1], a2);
  return (*((uint64_t (**)(CFMutableDictionaryRef *))*a1 + 106))(a1);
}

uint64_t sub_18F661310(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], a2, (uint64_t)a2, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 920))(a1, v5);
}

uint64_t sub_18F66134C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 920))(a1);
}

uint64_t sub_18F661358(uint64_t a1, const char *a2, _WORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F6613C8(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F6613C8(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  CFTypeRef cf;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  *(_DWORD *)buf = 0;
  v6 = sub_18F5C79B4(cf, buf);
  if ((_DWORD)v6)
  {
    *a3 = *(_WORD *)buf;
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v7 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v18 = v8;
      v19 = 2112;
      v20 = a2;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v13 = 138412546;
      v14 = v10;
      v15 = 2112;
      v16 = a2;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, uint16_t &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_18F661610(uint64_t a1, const char *a2, _WORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F661680(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F661680(uint64_t a1, uint64_t a2, _WORD *a3)
{
  const __CFNumber *v6;
  CFTypeID v7;
  NSObject *v8;
  char *v9;
  uint64_t v10;
  CFTypeID v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v15;
  char *v16;
  CFTypeRef cf;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = (const __CFNumber *)cf;
  v7 = CFGetTypeID(cf);
  if (v7 == CFNumberGetTypeID())
  {
    if (!CFNumberGetValue(v6, kCFNumberSInt16Type, a3))
    {
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v8 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E728 != -1)
          dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
        LOWORD(v18) = 0;
        v9 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, short &)", "CoreLocation: %s\n", v9);
        if (v9 != (char *)buf)
          free(v9);
      }
      goto LABEL_18;
    }
  }
  else
  {
    buf[0] = 0;
    v11 = CFGetTypeID(v6);
    if (v11 != CFBooleanGetTypeID() || (sub_18F5C7FDC(v6, (BOOL *)buf) & 1) == 0)
    {
LABEL_18:
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v12 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
      {
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
        *(_DWORD *)buf = 138412546;
        v23 = v13;
        v24 = 2112;
        v25 = a2;
        _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
      }
      v10 = 0;
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E728 != -1)
          dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
        v18 = 138412546;
        v19 = v15;
        v20 = 2112;
        v21 = a2;
        v16 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, short &, int) const", "CoreLocation: %s\n", v16);
        if (v16 != (char *)buf)
          free(v16);
        v10 = 0;
      }
      goto LABEL_23;
    }
    *a3 = buf[0];
  }
  v10 = 1;
LABEL_23:
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t sub_18F661A40(uint64_t a1, const char *a2, _DWORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F661AB0(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F661AB0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  CFTypeRef cf;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  _BYTE buf[12];
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  *(_QWORD *)buf = 0;
  v6 = sub_18F663324(cf, buf);
  if ((_DWORD)v6)
  {
    *a3 = *(_DWORD *)buf;
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v7 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v8;
      v18 = 2112;
      v19 = a2;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v13 = 138412546;
      v14 = v10;
      v15 = 2112;
      v16 = a2;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, uint32_t &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != buf)
        free(v11);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_18F661CF8(uint64_t a1, const char *a2, _QWORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F661D68(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F661D68(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  CFTypeRef cf;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_18F663324(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v7 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v18 = v8;
      v19 = 2112;
      v20 = a2;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v13 = 138412546;
      v14 = v10;
      v15 = 2112;
      v16 = a2;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, int64_t &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_18F661FA0(uint64_t a1, const char *a2, _QWORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F662010(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F662010(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const __CFNumber *v6;
  CFTypeID v7;
  NSObject *v8;
  char *v9;
  uint64_t v10;
  CFTypeID v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v15;
  char *v16;
  CFTypeRef cf;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = (const __CFNumber *)cf;
  v7 = CFGetTypeID(cf);
  if (v7 == CFNumberGetTypeID())
  {
    if (!CFNumberGetValue(v6, kCFNumberLongType, a3))
    {
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v8 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E728 != -1)
          dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
        LOWORD(v18) = 0;
        v9 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, long &)", "CoreLocation: %s\n", v9);
        if (v9 != (char *)buf)
          free(v9);
      }
      goto LABEL_18;
    }
  }
  else
  {
    buf[0] = 0;
    v11 = CFGetTypeID(v6);
    if (v11 != CFBooleanGetTypeID() || (sub_18F5C7FDC(v6, (BOOL *)buf) & 1) == 0)
    {
LABEL_18:
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v12 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
      {
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
        *(_DWORD *)buf = 138412546;
        v23 = v13;
        v24 = 2112;
        v25 = a2;
        _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
      }
      v10 = 0;
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E728 != -1)
          dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
        v18 = 138412546;
        v19 = v15;
        v20 = 2112;
        v21 = a2;
        v16 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, long &, int) const", "CoreLocation: %s\n", v16);
        if (v16 != (char *)buf)
          free(v16);
        v10 = 0;
      }
      goto LABEL_23;
    }
    *a3 = buf[0];
  }
  v10 = 1;
LABEL_23:
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t sub_18F6623D0(uint64_t a1, const char *a2, float *a3)
{
  CFStringRef v5;
  uint64_t v6;
  float v7;
  double v9;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v9 = 0.0;
  v6 = sub_18F66250C(a1, (uint64_t)v5, &v9);
  if ((_DWORD)v6)
  {
    v7 = v9;
    *a3 = v7;
  }
  if (v5)
    CFRelease(v5);
  return v6;
}

float sub_18F662458(uint64_t a1, uint64_t a2, float *a3)
{
  float result;
  double v5;

  v5 = 0.0;
  if (sub_18F66250C(a1, a2, &v5))
  {
    result = v5;
    *a3 = result;
  }
  return result;
}

uint64_t sub_18F66249C(uint64_t a1, const char *a2, void *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F66250C(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F66250C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  CFTypeRef cf;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_18F663524(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v7 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v18 = v8;
      v19 = 2112;
      v20 = a2;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v13 = 138412546;
      v14 = v10;
      v15 = 2112;
      v16 = a2;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, double &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

BOOL sub_18F662744(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F6627B4(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F6627B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  CFTypeRef cf;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_18F663878((const __CFString *)cf, a3);
  if (!v6)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v7 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v18 = v8;
      v19 = 2112;
      v20 = a2;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v13 = 138412546;
      v14 = v10;
      v15 = 2112;
      v16 = a2;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, std::string &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_18F6629EC(uint64_t a1, const char *a2, CFTypeRef *a3)
{
  const __CFString *v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F662A5C(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F662A5C(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  uint64_t result;
  CFTypeID v7;
  CFTypeRef v8;
  NSObject *v9;
  _BYTE *v10;
  CFTypeID v11;
  CFTypeID TypeID;
  NSObject *v13;
  uint64_t v14;
  void **v15;
  CFTypeID v16;
  CFTypeID v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void *v21[2];
  char v22;
  CFTypeRef cf;
  _BYTE __p[12];
  __int16 v25;
  CFTypeID v26;
  __int16 v27;
  CFTypeID v28;
  uint8_t buf[4];
  _BYTE *v30;
  __int16 v31;
  CFTypeID v32;
  __int16 v33;
  CFTypeID v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  cf = 0;
  result = (*(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf);
  if ((_DWORD)result)
  {
    v7 = CFGetTypeID(cf);
    if (v7 == CFStringGetTypeID())
    {
      v8 = cf;
      *a3 = cf;
      CFAutorelease(v8);
      return 1;
    }
    else
    {
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v9 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
      {
        sub_18F661274(a2, (uint64_t)__p);
        v10 = v27 >= 0 ? __p : *(_BYTE **)__p;
        v11 = CFGetTypeID(cf);
        TypeID = CFStringGetTypeID();
        *(_DWORD *)buf = 136446722;
        v30 = v10;
        v31 = 2050;
        v32 = v11;
        v33 = 2050;
        v34 = TypeID;
        _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_FAULT, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", buf, 0x20u);
        if (SHIBYTE(v27) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E728 != -1)
          dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
        sub_18F661274(a2, (uint64_t)v21);
        if (v22 >= 0)
          v15 = v21;
        else
          v15 = (void **)v21[0];
        v16 = CFGetTypeID(cf);
        v17 = CFStringGetTypeID();
        *(_DWORD *)__p = 136446722;
        *(_QWORD *)&__p[4] = v15;
        v25 = 2050;
        v26 = v16;
        v27 = 2050;
        v28 = v17;
        v18 = (char *)_os_log_send_and_compose_impl();
        if (v22 < 0)
          operator delete(v21[0]);
        sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFStringRef &, int) const", "CoreLocation: %s\n", v18);
        if (v18 != (char *)buf)
          free(v18);
      }
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v13 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
      {
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
        *(_DWORD *)buf = 138412546;
        v30 = (_BYTE *)v14;
        v31 = 2112;
        v32 = (CFTypeID)a2;
        _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E728 != -1)
          dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
        *(_DWORD *)__p = 138412546;
        *(_QWORD *)&__p[4] = v19;
        v25 = 2112;
        v26 = (CFTypeID)a2;
        v20 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFStringRef &, int) const", "CoreLocation: %s\n", v20);
        if (v20 != (char *)buf)
          free(v20);
      }
      CFRelease(cf);
      return 0;
    }
  }
  return result;
}

void sub_18F662E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_18F662EC0(uint64_t a1, const char *a2, const UInt8 **a3, _DWORD *a4, uint64_t a5)
{
  CFStringRef v9;
  _BOOL8 v10;

  v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v10 = sub_18F662F3C(a1, (CFTypeID)v9, a3, a4, a5);
  CFRelease(v9);
  return v10;
}

BOOL sub_18F662F3C(uint64_t a1, CFTypeID a2, const UInt8 **a3, _DWORD *a4, uint64_t a5)
{
  const __CFData *v9;
  CFTypeID v10;
  BOOL v11;
  _BOOL8 v12;
  NSObject *v13;
  CFTypeID v14;
  CFTypeID TypeID;
  NSObject *v16;
  uint64_t v17;
  CFTypeID v19;
  CFTypeID v20;
  char *v21;
  uint64_t v22;
  char *v23;
  CFTypeRef cf;
  int v25;
  CFTypeID v26;
  __int16 v27;
  CFTypeID v28;
  uint8_t buf[4];
  CFTypeID v30;
  __int16 v31;
  CFTypeID v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, CFTypeID, CFTypeRef *, uint64_t))(*(_QWORD *)a1 + 904))(a1, a2, &cf, a5))return 0;
  v9 = (const __CFData *)cf;
  v10 = CFGetTypeID(cf);
  v11 = v10 == CFDataGetTypeID();
  v12 = v11;
  if (v11)
  {
    *a3 = CFDataGetBytePtr(v9);
    *a4 = CFDataGetLength(v9);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v13 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v14 = CFGetTypeID(v9);
      TypeID = CFDataGetTypeID();
      *(_DWORD *)buf = 134349312;
      v30 = v14;
      v31 = 2050;
      v32 = TypeID;
      _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v19 = CFGetTypeID(v9);
      v20 = CFDataGetTypeID();
      v25 = 134349312;
      v26 = v19;
      v27 = 2050;
      v28 = v20;
      v21 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, const char *&, unsigned int &)", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf)
        free(v21);
    }
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v16 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v30 = v17;
      v31 = 2112;
      v32 = a2;
      _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v25 = 138412546;
      v26 = v22;
      v27 = 2112;
      v28 = a2;
      v23 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, const char *&, unsigned int &, int) const", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
  }
  CFRelease(cf);
  return v12;
}

uint64_t sub_18F663324(const void *a1, _QWORD *a2)
{
  CFTypeID v4;
  NSObject *v5;
  int v6;
  uint64_t result;
  char *v8;
  CFTypeID v9;
  CFTypeID TypeID;
  uint8_t buf[1640];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    buf[0] = 0;
    v9 = CFGetTypeID(a1);
    TypeID = CFBooleanGetTypeID();
    result = 0;
    if (v9 != TypeID)
      return result;
    result = sub_18F5C7FDC(a1, (BOOL *)buf);
    if (!(_DWORD)result)
      return result;
    *a2 = buf[0];
    return 1;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, a2))
    return 1;
  if (qword_1ECD8E728 != -1)
    dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
  v5 = off_1ECD8E720;
  if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  v6 = sub_18F5C4AE0(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, int64_t &)", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
    return 0;
  }
  return result;
}

uint64_t sub_18F663524(const void *a1, void *a2)
{
  CFTypeID v4;
  uint64_t result;
  NSObject *v6;
  int v7;
  char *v8;
  NSObject *v9;
  int v10;
  uint8_t buf[4];
  CFTypeID v12;
  __int16 v13;
  CFTypeID TypeID;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349312;
      v12 = CFGetTypeID(a1);
      v13 = 2050;
      TypeID = CFNumberGetTypeID();
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    v7 = sub_18F5C4AE0(115, 0);
    result = 0;
    if (!v7)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    CFGetTypeID(a1);
    CFNumberGetTypeID();
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, double &)", "CoreLocation: %s\n", v8);
    if (v8 == (char *)buf)
      return 0;
LABEL_12:
    free(v8);
    return 0;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberFloat64Type, a2))
    return 1;
  if (qword_1ECD8E728 != -1)
    dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
  v9 = off_1ECD8E720;
  if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  v10 = sub_18F5C4AE0(115, 0);
  result = 0;
  if (v10)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, double &)", "CoreLocation: %s\n", v8);
    if (v8 == (char *)buf)
      return 0;
    goto LABEL_12;
  }
  return result;
}

BOOL sub_18F663878(const __CFString *cf, uint64_t a2)
{
  CFTypeID v4;
  const char *CStringPtr;
  _BOOL8 v6;
  CFTypeID v7;
  const char *BytePtr;
  int Length;
  xmlBuffer *v10;
  xmlBuffer *v11;
  xmlTextWriter *v12;
  xmlTextWriter *v13;
  int v14;
  const xmlChar *v15;
  int v16;
  NSObject *v17;
  size_t v18;
  _BYTE *v19;
  NSObject *v20;
  CFTypeID v21;
  char *v22;
  int CString;
  NSObject *v25;
  char *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  CFTypeID v30;
  char *v31;
  char *v32;
  char *v33;
  _BYTE bufferSize[12];
  __int16 v35;
  int v36;
  __int16 v37;
  const xmlChar *v38;
  _BYTE buf[1624];
  uint64_t v40;
  CFRange v41;

  v40 = *MEMORY[0x1E0C80C00];
  if (!cf)
    goto LABEL_19;
  v4 = CFGetTypeID(cf);
  if (v4 != CFStringGetTypeID())
  {
    v7 = CFGetTypeID(cf);
    if (v7 == CFDataGetTypeID())
    {
      BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)cf);
      Length = CFDataGetLength((CFDataRef)cf);
      if (BytePtr)
      {
        v10 = xmlBufferCreate();
        if (v10)
        {
          v11 = v10;
          v12 = xmlNewTextWriterMemory(v10, 0);
          if (!v12)
          {
            v6 = 0;
LABEL_56:
            xmlBufferFree(v11);
            return v6;
          }
          v13 = v12;
          v14 = xmlTextWriterWriteBase64(v12, BytePtr, 0, Length);
          v6 = v14 != -1;
          if (v14 == -1)
          {
LABEL_55:
            xmlFreeTextWriter(v13);
            goto LABEL_56;
          }
          xmlTextWriterFlush(v13);
          v15 = xmlBufferContent(v11);
          v16 = xmlBufferLength(v11);
          if (qword_1ECD8E728 != -1)
            dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
          v17 = off_1ECD8E720;
          if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134218498;
            *(_QWORD *)&buf[4] = v15;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v16;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v15;
            _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_DEBUG, "processed %p %d to (%s)", buf, 0x1Cu);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1ECD8E728 != -1)
              dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
            *(_DWORD *)bufferSize = 134218498;
            *(_QWORD *)&bufferSize[4] = v15;
            v35 = 1024;
            v36 = v16;
            v37 = 2080;
            v38 = v15;
            v33 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "static BOOL CLNameValuePair::encodeBase64(const void *, unsigned long, std::string &)", "CoreLocation: %s\n", v33);
            if (v33 != buf)
              free(v33);
          }
          if (v16 < 0)
            sub_18F5D5A40();
          v18 = v16;
          if (v16 >= 0x17)
          {
            v28 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v16 | 7) != 0x17)
              v28 = v16 | 7;
            v29 = v28 + 1;
            v19 = operator new(v28 + 1);
            *(_QWORD *)&buf[8] = v18;
            *(_QWORD *)&buf[16] = v29 | 0x8000000000000000;
            *(_QWORD *)buf = v19;
          }
          else
          {
            buf[23] = v16;
            v19 = buf;
            if (!v16)
              goto LABEL_52;
          }
          memmove(v19, v15, v18);
LABEL_52:
          v19[v18] = 0;
          if (*(char *)(a2 + 23) < 0)
            operator delete(*(void **)a2);
          *(_OWORD *)a2 = *(_OWORD *)buf;
          *(_QWORD *)(a2 + 16) = *(_QWORD *)&buf[16];
          goto LABEL_55;
        }
      }
      else
      {
        if (qword_1ECD8E728 != -1)
          dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
        v25 = off_1ECD8E720;
        if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = Length;
          _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_FAULT, "can't convert %{public}u data bytes", buf, 8u);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECD8E728 != -1)
            dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
          *(_DWORD *)bufferSize = 67240192;
          *(_DWORD *)&bufferSize[4] = Length;
          v26 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, std::string &)", "CoreLocation: %s\n", v26);
          if (v26 != buf)
            free(v26);
        }
      }
      return 0;
    }
LABEL_19:
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v20 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_DEFAULT))
    {
      if (cf)
        v21 = CFGetTypeID(cf);
      else
        v21 = -1;
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v21;
      _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_DEFAULT, "#Warning type IDs do not match - %{public}lu", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      if (cf)
        v30 = CFGetTypeID(cf);
      else
        v30 = -1;
      *(_DWORD *)bufferSize = 134349056;
      *(_QWORD *)&bufferSize[4] = v30;
      v31 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, std::string &)", "CoreLocation: %s\n", v31);
      if (v31 != buf)
        free(v31);
    }
    MEMORY[0x194002BEC](a2, "");
    return 0;
  }
  CStringPtr = CFStringGetCStringPtr(cf, 0x8000100u);
  if (CStringPtr)
  {
    MEMORY[0x194002BEC](a2, CStringPtr);
    return 1;
  }
  else
  {
    *(_QWORD *)bufferSize = 0;
    v41.length = CFStringGetLength(cf);
    v41.location = 0;
    CFStringGetBytes(cf, v41, 0x8000100u, 0, 0, 0, 0, (CFIndex *)bufferSize);
    ++*(_QWORD *)bufferSize;
    v22 = (char *)operator new[]();
    CString = CFStringGetCString(cf, v22, *(CFIndex *)bufferSize, 0x8000100u);
    v6 = CString != 0;
    if (CString)
    {
      MEMORY[0x194002BEC](a2, v22);
    }
    else
    {
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v27 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v27, OS_LOG_TYPE_FAULT, "could not convert to C string", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E728 != -1)
          dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
        v32 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, std::string &)", "CoreLocation: %s\n", v32);
        if (v32 != buf)
          free(v32);
      }
    }
    MEMORY[0x194002D18](v22, 0x1000C8077774924);
  }
  return v6;
}

BOOL sub_18F664098(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  CFTypeID v5;
  BOOL v6;
  _BOOL8 v7;
  NSObject *v8;
  _BYTE *v9;
  CFTypeID v10;
  CFTypeID TypeID;
  void **v13;
  CFTypeID v14;
  CFTypeID v15;
  char *v16;
  void *v17[2];
  char v18;
  CFTypeRef cf;
  _BYTE __p[12];
  __int16 v21;
  CFTypeID v22;
  __int16 v23;
  CFTypeID v24;
  uint8_t buf[4];
  _BYTE *v26;
  __int16 v27;
  CFTypeID v28;
  __int16 v29;
  CFTypeID v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a1 + 912))(a1, a2, &cf))
    return 0;
  v5 = CFGetTypeID(cf);
  v6 = v5 == CFArrayGetTypeID();
  v7 = v6;
  if (v6)
  {
    *a3 = cf;
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v8 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v9 = v23 >= 0 ? __p : *(_BYTE **)__p;
      v10 = CFGetTypeID(cf);
      TypeID = CFArrayGetTypeID();
      *(_DWORD *)buf = 136446722;
      v26 = v9;
      v27 = 2050;
      v28 = v10;
      v29 = 2050;
      v30 = TypeID;
      _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_FAULT, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", buf, 0x20u);
      if (SHIBYTE(v23) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v13 = v17;
      sub_18F661274(a2, (uint64_t)v17);
      if (v18 < 0)
        v13 = (void **)v17[0];
      v14 = CFGetTypeID(cf);
      v15 = CFArrayGetTypeID();
      *(_DWORD *)__p = 136446722;
      *(_QWORD *)&__p[4] = v13;
      v21 = 2050;
      v22 = v14;
      v23 = 2050;
      v24 = v15;
      v16 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0)
        operator delete(v17[0]);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFArrayRef &) const", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
  }
  CFAutorelease(cf);
  return v7;
}

void sub_18F664348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_18F664380(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  CFTypeID v5;
  BOOL v6;
  _BOOL8 v7;
  NSObject *v8;
  _BYTE *v9;
  CFTypeID v10;
  CFTypeID TypeID;
  void **v13;
  CFTypeID v14;
  CFTypeID v15;
  char *v16;
  void *v17[2];
  char v18;
  CFTypeRef cf;
  _BYTE __p[12];
  __int16 v21;
  CFTypeID v22;
  __int16 v23;
  CFTypeID v24;
  uint8_t buf[4];
  _BYTE *v26;
  __int16 v27;
  CFTypeID v28;
  __int16 v29;
  CFTypeID v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v5 = CFGetTypeID(cf);
  v6 = v5 == CFDataGetTypeID();
  v7 = v6;
  if (v6)
  {
    *a3 = cf;
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v8 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v9 = v23 >= 0 ? __p : *(_BYTE **)__p;
      v10 = CFGetTypeID(cf);
      TypeID = CFDataGetTypeID();
      *(_DWORD *)buf = 136446722;
      v26 = v9;
      v27 = 2050;
      v28 = v10;
      v29 = 2050;
      v30 = TypeID;
      _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_FAULT, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", buf, 0x20u);
      if (SHIBYTE(v23) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v13 = v17;
      sub_18F661274(a2, (uint64_t)v17);
      if (v18 < 0)
        v13 = (void **)v17[0];
      v14 = CFGetTypeID(cf);
      v15 = CFDataGetTypeID();
      *(_DWORD *)__p = 136446722;
      *(_QWORD *)&__p[4] = v13;
      v21 = 2050;
      v22 = v14;
      v23 = 2050;
      v24 = v15;
      v16 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0)
        operator delete(v17[0]);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFDataRef &, int) const", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
  }
  CFAutorelease(cf);
  return v7;
}

void sub_18F664630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_18F664668(uint64_t a1, const void *a2)
{
  return CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 8), a2) != 0;
}

uint64_t sub_18F664688(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 896))(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return 1;
}

uint64_t sub_18F6646F4(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
  return 1;
}

BOOL sub_18F664714(uint64_t a1, const char *a2, unsigned __int16 *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F66477C(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F66477C(uint64_t a1, const __CFString *a2, unsigned __int16 *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *valuePtr[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  LODWORD(valuePtr[0]) = *a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)valuePtr);
      v7 = v16 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(valuePtr[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const uint16_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)valuePtr)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F6649EC(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F664A54(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F664A54(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const short &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F664CB8(uint64_t a1, const char *a2, unsigned int *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F664D20(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F664D20(uint64_t a1, const __CFString *a2, unsigned int *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *valuePtr[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  valuePtr[0] = (void *)*a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)valuePtr);
      v7 = v16 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(valuePtr[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const uint32_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)valuePtr)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F664F90(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F664FF8(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F664FF8(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const int64_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F66525C(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F6652C4(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F6652C4(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const long &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F665528(uint64_t a1, const char *a2, char *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F5C6A90(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F665590(uint64_t a1, const __CFString *a2, char *a3)
{
  if (a3[23] < 0)
    a3 = *(char **)a3;
  return sub_18F5C6A90(a1, a2, a3);
}

uint64_t sub_18F6655A4(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
  return 1;
}

BOOL sub_18F6655C4(uint64_t a1, const char *a2, uint64_t a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F66562C(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F66562C(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  CFDictionaryRef Copy;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)(a3 + 8));
  if (Copy)
  {
    (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)a1 + 896))(a1, a2, Copy);
    CFRelease(Copy);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const CLNameValuePair &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return Copy != 0;
}

uint64_t sub_18F665890(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 928))(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return 1;
}

uint64_t sub_18F6658FC(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
  return 1;
}

BOOL sub_18F66591C(uint64_t a1, const char *a2, _BYTE *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F665984(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F665984(uint64_t a1, const __CFString *a2, _BYTE *a3)
{
  CFTypeRef *v5;
  CFTypeRef v6;
  NSObject *v7;
  void **v8;
  _BYTE *v10;
  char *v11;
  _BYTE buf[12];
  char v13;
  int v14;
  _BYTE *v15;
  void *__p[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (!*a3)
    v5 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  v6 = *v5;
  CFRetain(*v5);
  if (v6)
  {
    (*(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)a1 + 928))(a1, a2, v6);
    CFRelease(v6);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v7 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v8 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v13 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v14 = 136446210;
      v15 = v10;
      v11 = (char *)_os_log_send_and_compose_impl();
      if (v13 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const BOOL &)", "CoreLocation: %s\n", v11);
      if (v11 != (char *)__p)
        free(v11);
    }
  }
  return v6 != 0;
}

BOOL sub_18F665BF8(uint64_t a1, const char *a2, unsigned __int16 *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F665C60(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F665C60(uint64_t a1, const __CFString *a2, unsigned __int16 *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *valuePtr[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  LODWORD(valuePtr[0]) = *a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)valuePtr);
      v7 = v16 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(valuePtr[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const uint16_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)valuePtr)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F665ED0(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F665F38(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F665F38(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const short &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F66619C(uint64_t a1, const char *a2, unsigned int *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F666204(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F666204(uint64_t a1, const __CFString *a2, unsigned int *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *valuePtr[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  valuePtr[0] = (void *)*a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)valuePtr);
      v7 = v16 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(valuePtr[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const uint32_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)valuePtr)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F666474(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F6664DC(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F6664DC(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const int64_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F666740(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F6667A8(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F6667A8(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const int &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F666A0C(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F666A74(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F666A74(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const long &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F666CD8(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F666D40(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F666D40(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const double &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F666FA4(uint64_t a1, const char *a2, char *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F66700C(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F66700C(uint64_t a1, const __CFString *a2, char *cStr)
{
  CFStringRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const char *)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F667278(uint64_t a1, const char *a2, char *a3)
{
  const __CFString *v5;
  char *v6;
  _BOOL8 v7;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  if (a3[23] >= 0)
    v6 = a3;
  else
    v6 = *(char **)a3;
  v7 = sub_18F66700C(a1, v5, v6);
  if (v5)
    CFRelease(v5);
  return v7;
}

BOOL sub_18F6672EC(uint64_t a1, const __CFString *a2, char *a3)
{
  if (a3[23] < 0)
    a3 = *(char **)a3;
  return sub_18F66700C(a1, a2, a3);
}

uint64_t sub_18F667300(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 928))(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return 1;
}

uint64_t sub_18F66736C(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
  return 1;
}

BOOL sub_18F66738C(uint64_t a1, const char *a2, uint64_t a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F6673F4(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F6673F4(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  CFDictionaryRef Copy;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)(a3 + 8));
  if (Copy)
  {
    (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)a1 + 928))(a1, a2, Copy);
    CFRelease(Copy);
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v6 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      sub_18F661274(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const CLNameValuePair &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return Copy != 0;
}

uint64_t sub_18F667658(uint64_t a1, uint64_t a2, const void *a3)
{
  CFTypeID v6;
  void *Mutable;
  CFTypeID v8;
  CFTypeRef arg;
  CFRange v11;

  arg = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 912))(a1, a2, &arg))
  {
    CFAutorelease(arg);
    v6 = CFGetTypeID(arg);
    if (v6 == CFArrayGetTypeID())
    {
      Mutable = (void *)arg;
    }
    else
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      CFAutorelease(Mutable);
      CFArrayAppendValue((CFMutableArrayRef)Mutable, arg);
    }
    v8 = CFGetTypeID(a3);
    if (v8 == CFArrayGetTypeID())
    {
      v11.length = CFArrayGetCount((CFArrayRef)a3);
      v11.location = 0;
      CFArrayAppendArray((CFMutableArrayRef)Mutable, (CFArrayRef)a3, v11);
    }
    else
    {
      CFArrayAppendValue((CFMutableArrayRef)Mutable, a3);
    }
  }
  else
  {
    Mutable = (void *)a3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 896))(a1, a2, Mutable);
}

uint64_t sub_18F667768(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 856))(a1);
}

CFIndex sub_18F667774(uint64_t a1)
{
  return CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 8));
}

uint64_t sub_18F66778C(uint64_t a1, const char *a2)
{
  CFStringRef v3;
  uint64_t v4;

  v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v4 = (*(uint64_t (**)(uint64_t, CFStringRef))(*(_QWORD *)a1 + 864))(a1, v3);
  CFRelease(v3);
  return v4;
}

uint64_t sub_18F6677E8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1);
}

uint64_t sub_18F6677F4(uint64_t a1, uint64_t a2)
{
  CFTypeID v2;
  CFIndex Count;
  CFTypeRef cf;

  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 912))(a1, a2, &cf))
    return 0xFFFFFFFFLL;
  v2 = CFGetTypeID(cf);
  if (v2 == CFArrayGetTypeID())
    Count = CFArrayGetCount((CFArrayRef)cf);
  else
    Count = 1;
  CFRelease(cf);
  return Count;
}

BOOL sub_18F66786C(uint64_t a1)
{
  return (*(int (**)(uint64_t))(*(_QWORD *)a1 + 856))(a1) < 1;
}

BOOL sub_18F667890(uint64_t a1, const char *a2)
{
  CFStringRef v3;

  v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  LODWORD(a1) = (*(uint64_t (**)(uint64_t, CFStringRef))(*(_QWORD *)a1 + 864))(a1, v3);
  CFRelease(v3);
  return (int)a1 < 1;
}

BOOL sub_18F6678F0(uint64_t a1)
{
  return (*(int (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1) < 1;
}

BOOL sub_18F667914(uint64_t a1, CFDataRef *a2)
{
  CFDataRef Data;

  Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFPropertyListRef *)(a1 + 8), kCFPropertyListXMLFormat_v1_0, 0, 0);
  *a2 = Data;
  return Data != 0;
}

uint64_t sub_18F667960(uint64_t a1, CFTypeRef *a2)
{
  __CFWriteStream *v4;
  __CFWriteStream *v5;
  CFIndex v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  char *v10;
  CFIndex Code;
  const __CFString *Domain;
  NSObject *v13;
  uint8_t *v14;
  char *v16;
  _BYTE *v17;
  CFErrorRef error;
  _BYTE v19[12];
  __int16 v20;
  uint8_t *v21;
  char v22;
  int v23;
  CFIndex v24;
  __int16 v25;
  _BYTE *v26;
  uint8_t buf[8];
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = CFWriteStreamCreateWithAllocatedBuffers((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  error = 0;
  if (v4)
  {
    v5 = v4;
    if (!CFWriteStreamOpen(v4))
    {
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      v9 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_FAULT, "could not open write stream", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_35;
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
      *(_WORD *)v19 = 0;
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::serializeBinary(CFDataRef *) const", "CoreLocation: %s\n", v10);
      if (v10 == (char *)buf)
        goto LABEL_35;
LABEL_51:
      free(v10);
LABEL_35:
      v7 = 0;
LABEL_36:
      CFRelease(v5);
      if (error)
        CFRelease(error);
      return v7;
    }
    v6 = CFPropertyListWrite(*(CFPropertyListRef *)(a1 + 8), v5, kCFPropertyListBinaryFormat_v1_0, 0, &error);
    if (!error && v6)
    {
      *a2 = CFWriteStreamCopyProperty(v5, (CFStreamPropertyKey)*MEMORY[0x1E0C9B2A8]);
      CFWriteStreamClose(v5);
      v7 = 1;
      goto LABEL_36;
    }
    if (error)
    {
      Code = CFErrorGetCode(error);
      if (error)
      {
        Domain = CFErrorGetDomain(error);
        goto LABEL_26;
      }
    }
    else
    {
      Code = 0;
    }
    Domain = CFSTR("unknown error");
LABEL_26:
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    v13 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      sub_18F661274(Domain, (uint64_t)buf);
      v14 = v28 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v19 = 134349314;
      *(_QWORD *)&v19[4] = Code;
      v20 = 2082;
      v21 = v14;
      _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_FAULT, "could not write data, error code, %{public}ld, error domain, %{public}s", v19, 0x16u);
      if (v28 < 0)
        operator delete(*(void **)buf);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_35;
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    sub_18F661274(Domain, (uint64_t)v19);
    if (v22 >= 0)
      v17 = v19;
    else
      v17 = *(_BYTE **)v19;
    v23 = 134349314;
    v24 = Code;
    v25 = 2082;
    v26 = v17;
    v10 = (char *)_os_log_send_and_compose_impl();
    if (v22 < 0)
      operator delete(*(void **)v19);
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::serializeBinary(CFDataRef *) const", "CoreLocation: %s\n", v10);
    if (v10 == (char *)buf)
      goto LABEL_35;
    goto LABEL_51;
  }
  if (qword_1ECD8E728 != -1)
    dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
  v8 = off_1ECD8E720;
  if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_FAULT, "could not create write stream", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    *(_WORD *)v19 = 0;
    v16 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::serializeBinary(CFDataRef *) const", "CoreLocation: %s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
  }
  return 0;
}

BOOL sub_18F667EB4(_QWORD *a1, const __CFData *a2)
{
  id v4;
  CFPropertyListRef v5;
  const void *v6;
  CFIndex Code;
  const __CFString *Domain;
  NSObject *v9;
  void **v10;
  const char *v12;
  char *v13;
  CFErrorRef error;
  _BYTE buf[12];
  __int16 v16;
  const char *v17;
  char v18;
  int v19;
  CFIndex v20;
  __int16 v21;
  const char *v22;
  void *__p[2];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  error = 0;
  v5 = CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 1uLL, 0, &error);
  if (v5)
  {
    v6 = (const void *)a1[1];
    if (v6)
      CFRelease(v6);
    a1[1] = v5;
    (*(void (**)(_QWORD *))(*a1 + 848))(a1);
    goto LABEL_21;
  }
  if (!error)
  {
    Code = 0;
    goto LABEL_9;
  }
  Code = CFErrorGetCode(error);
  if (!error)
  {
LABEL_9:
    Domain = CFSTR("unknown error");
    goto LABEL_10;
  }
  Domain = CFErrorGetDomain(error);
LABEL_10:
  if (qword_1ECD8E728 != -1)
    dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
  v9 = off_1ECD8E720;
  if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
  {
    if (Domain)
    {
      sub_18F661274(Domain, (uint64_t)__p);
      if (v24 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 134349314;
      *(_QWORD *)&buf[4] = Code;
      v16 = 2082;
      v17 = (const char *)v10;
      _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_FAULT, "could not create intermediate property list - %{public}ld (%{public}s)", buf, 0x16u);
      if (v24 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 134349314;
      *(_QWORD *)&buf[4] = Code;
      v16 = 2082;
      v17 = "unknown error";
      _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_FAULT, "could not create intermediate property list - %{public}ld (%{public}s)", buf, 0x16u);
    }
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990450);
    if (Domain)
    {
      sub_18F661274(Domain, (uint64_t)buf);
      if (v18 >= 0)
        v12 = buf;
      else
        v12 = *(const char **)buf;
    }
    else
    {
      v12 = "unknown error";
    }
    v19 = 134349314;
    v20 = Code;
    v21 = 2082;
    v22 = v12;
    v13 = (char *)_os_log_send_and_compose_impl();
    if (Domain && v18 < 0)
      operator delete(*(void **)buf);
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::deserialize(const CFDataRef)", "CoreLocation: %s\n", v13);
    if (v13 != (char *)__p)
      free(v13);
  }
LABEL_21:
  if (error)
    CFRelease(error);

  return v5 != 0;
}

void sub_18F6681F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F668234(uint64_t a1)
{
  NSObject *v1;
  void **v2;
  void **v3;
  char *v4;
  void *__p[2];
  uint64_t v6;
  int v7;
  void **v8;
  uint8_t buf[4];
  void **v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  __p[0] = 0;
  __p[1] = 0;
  v6 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 800))(a1, __p);
  if (qword_1EE172198 != -1)
    dispatch_once(&qword_1EE172198, &unk_1E2991D50);
  v1 = qword_1EE1721A0;
  if (os_log_type_enabled((os_log_t)qword_1EE1721A0, OS_LOG_TYPE_DEBUG))
  {
    v2 = __p;
    if (v6 < 0)
      v2 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v10 = v2;
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172198 != -1)
      dispatch_once(&qword_1EE172198, &unk_1E2991D50);
    v3 = __p;
    if (v6 < 0)
      v3 = (void **)__p[0];
    v7 = 136315138;
    v8 = v3;
    v4 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual void CLNameValuePair::print() const", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_18F668420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F668440(uint64_t a1, std::string *a2)
{
  const __CFDictionary *v4;
  std::string context;

  v4 = *(const __CFDictionary **)(a1 + 8);
  if (!v4 || !CFDictionaryGetCount(v4))
    JUMPOUT(0x194002BECLL);
  memset(&context, 0, sizeof(context));
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 8), (CFDictionaryApplierFunction)sub_18F6684E8, &context);
  std::string::operator=(a2, &context);
  if (SHIBYTE(context.__r_.__value_.__r.__words[2]) < 0)
    operator delete(context.__r_.__value_.__l.__data_);
}

void sub_18F6684CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F6684E8(const __CFString *a1, const __CFString *a2, std::string *a3)
{
  CFTypeID v6;
  CFTypeID v7;
  int v8;
  void **v9;
  CFIndex Count;
  void **v11;
  CFTypeID v12;
  CFTypeID TypeID;
  CFTypeID v14;
  CFRange v15;
  void **v16;
  CFTypeID v17;
  void **v18;
  const char *p_context;
  CFTypeID v20;
  void **v21;
  CFTypeID v22;
  void **context;
  uint64_t v24;
  std::string *v25;
  void *__p[2];
  uint64_t v27;
  char __str[256];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = CFGetTypeID(a1);
  if (v6 == CFStringGetTypeID())
  {
    __p[0] = 0;
    __p[1] = 0;
    v27 = 0;
    sub_18F663878(a1, (uint64_t)__p);
    v7 = CFGetTypeID(a2);
    if (v7 == CFDictionaryGetTypeID())
    {
      v8 = SHIBYTE(v27);
      v9 = (void **)__p[0];
      Count = CFDictionaryGetCount((CFDictionaryRef)a2);
      v11 = __p;
      if (v8 < 0)
        v11 = v9;
      snprintf(__str, 0x100uLL, "%s = <dictionary (%ld entries)>:\n", (const char *)v11, Count);
      std::string::append(a3, __str);
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_18F6684E8, a3);
    }
    else
    {
      v14 = CFGetTypeID(a2);
      if (v14 == CFArrayGetTypeID())
      {
        v15.length = CFArrayGetCount((CFArrayRef)a2);
        v16 = __p;
        if (v27 < 0)
          v16 = (void **)__p[0];
        context = v16;
        v24 = 0;
        v25 = a3;
        v15.location = 0;
        CFArrayApplyFunction((CFArrayRef)a2, v15, (CFArrayApplierFunction)sub_18F6692E0, &context);
      }
      else
      {
        v17 = CFGetTypeID(a2);
        if (v17 == CFStringGetTypeID())
        {
          context = 0;
          v24 = 0;
          v25 = 0;
          if (sub_18F663878(a2, (uint64_t)&context))
          {
            v18 = __p;
            if (v27 < 0)
              v18 = (void **)__p[0];
            p_context = (const char *)&context;
            if (SHIBYTE(v25) < 0)
              p_context = (const char *)context;
            snprintf(__str, 0x100uLL, "%s = %s\n", (const char *)v18, p_context);
          }
          std::string::append(a3, __str);
          if (SHIBYTE(v25) < 0)
            operator delete(context);
        }
        else
        {
          v20 = CFGetTypeID(a2);
          if (v20 == CFNumberGetTypeID())
          {
            context = 0;
            if (sub_18F663524(a2, &context))
            {
              v21 = __p;
              if (v27 < 0)
                v21 = (void **)__p[0];
              snprintf(__str, 0x100uLL, "%s = %0.6f\n", (const char *)v21, *(double *)&context);
            }
            std::string::append(a3, __str);
          }
          else
          {
            v22 = CFGetTypeID(a2);
            if (v22 == CFBooleanGetTypeID())
            {
              CFBooleanGetValue((CFBooleanRef)a2);
              snprintf(__str, 0x100uLL, "%s = %d\n");
            }
            else
            {
              CFGetTypeID(a2);
              snprintf(__str, 0x100uLL, "%s = <unhandled value type %lu>\n");
            }
            std::string::append(a3, __str);
          }
        }
      }
    }
    if (SHIBYTE(v27) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v12 = CFGetTypeID(a1);
    TypeID = CFStringGetTypeID();
    snprintf(__str, 0x100uLL, "type ID does not match - %lu vs %lu\n", v12, TypeID);
    std::string::append(a3, __str);
  }
}

void sub_18F66880C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F668854(const __CFString *a1, const __CFString *a2)
{
  CFTypeID v4;
  CFTypeID v5;
  NSObject *v6;
  int v7;
  void **v8;
  CFIndex Count;
  void **v10;
  CFTypeID v11;
  CFRange v12;
  void **v13;
  CFTypeID v14;
  NSObject *v15;
  void **v16;
  void **v17;
  CFTypeID v18;
  NSObject *v19;
  void **v20;
  void **v21;
  char *v22;
  CFTypeID v23;
  NSObject *v24;
  int v25;
  void **v26;
  int Value;
  void **v28;
  int v29;
  void **v30;
  int v31;
  void **v32;
  NSObject *v33;
  int v34;
  void **v35;
  CFTypeID v36;
  void **v37;
  int v38;
  void **v39;
  void *v40;
  void **v41;
  char *v42;
  void **v43;
  void **v44;
  char *v45;
  int v46;
  void **v47;
  void *v48;
  void **v49;
  void *v50[2];
  uint64_t v51;
  _BYTE v52[12];
  __int16 v53;
  void **v54;
  void *__p[4];
  _BYTE buf[1632];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = CFGetTypeID(a1);
  if (v4 == CFStringGetTypeID())
  {
    v50[0] = 0;
    v50[1] = 0;
    v51 = 0;
    sub_18F663878(a1, (uint64_t)v50);
    v5 = CFGetTypeID(a2);
    if (v5 == CFDictionaryGetTypeID())
    {
      if (qword_1EE172198 != -1)
        dispatch_once(&qword_1EE172198, &unk_1E2991D50);
      v6 = qword_1EE1721A0;
      if (os_log_type_enabled((os_log_t)qword_1EE1721A0, OS_LOG_TYPE_DEBUG))
      {
        v7 = SHIBYTE(v51);
        v8 = (void **)v50[0];
        Count = CFDictionaryGetCount((CFDictionaryRef)a2);
        v10 = v50;
        if (v7 < 0)
          v10 = v8;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v10;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = Count;
        _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEBUG, "\t%s = <dictionary (%ld entries)>:", buf, 0x16u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172198 != -1)
          dispatch_once(&qword_1EE172198, &unk_1E2991D50);
        v38 = SHIBYTE(v51);
        v39 = (void **)v50[0];
        v40 = (void *)CFDictionaryGetCount((CFDictionaryRef)a2);
        v41 = v50;
        if (v38 < 0)
          v41 = v39;
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = v41;
        WORD2(__p[1]) = 2048;
        *(void **)((char *)&__p[1] + 6) = v40;
        v42 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "CoreLocation: %s\n", v42);
        if (v42 != buf)
          free(v42);
      }
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_18F668854, 0);
      goto LABEL_63;
    }
    v11 = CFGetTypeID(a2);
    if (v11 == CFArrayGetTypeID())
    {
      v12.length = CFArrayGetCount((CFArrayRef)a2);
      *(_OWORD *)&buf[8] = 0uLL;
      v13 = v50;
      if (v51 < 0)
        v13 = (void **)v50[0];
      *(_QWORD *)buf = v13;
      v12.location = 0;
      CFArrayApplyFunction((CFArrayRef)a2, v12, (CFArrayApplierFunction)sub_18F66926C, buf);
      goto LABEL_63;
    }
    v14 = CFGetTypeID(a2);
    if (v14 == CFStringGetTypeID())
    {
      memset(__p, 0, 24);
      if (sub_18F663878(a2, (uint64_t)__p))
      {
        if (qword_1EE172198 != -1)
          dispatch_once(&qword_1EE172198, &unk_1E2991D50);
        v15 = qword_1EE1721A0;
        if (os_log_type_enabled((os_log_t)qword_1EE1721A0, OS_LOG_TYPE_DEBUG))
        {
          v16 = v50;
          if (v51 < 0)
            v16 = (void **)v50[0];
          v17 = __p;
          if (SHIBYTE(__p[2]) < 0)
            v17 = (void **)__p[0];
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v16;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v17;
          _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_DEBUG, "\t%s = %s", buf, 0x16u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172198 != -1)
            dispatch_once(&qword_1EE172198, &unk_1E2991D50);
          v43 = v50;
          if (v51 < 0)
            v43 = (void **)v50[0];
          v44 = __p;
          if (SHIBYTE(__p[2]) < 0)
            v44 = (void **)__p[0];
          *(_DWORD *)v52 = 136315394;
          *(_QWORD *)&v52[4] = v43;
          v53 = 2080;
          v54 = v44;
          v45 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "CoreLocation: %s\n", v45);
          if (v45 != buf)
            free(v45);
        }
      }
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      goto LABEL_63;
    }
    v18 = CFGetTypeID(a2);
    if (v18 == CFNumberGetTypeID())
    {
      *(_QWORD *)v52 = 0;
      if (!sub_18F663524(a2, v52))
        goto LABEL_63;
      if (qword_1EE172198 != -1)
        dispatch_once(&qword_1EE172198, &unk_1E2991D50);
      v19 = qword_1EE1721A0;
      if (os_log_type_enabled((os_log_t)qword_1EE1721A0, OS_LOG_TYPE_DEBUG))
      {
        v20 = v50;
        if (v51 < 0)
          v20 = (void **)v50[0];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v20;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = *(_QWORD *)v52;
        _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_DEBUG, "\t%s = %0.6f", buf, 0x16u);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_63;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172198 != -1)
        dispatch_once(&qword_1EE172198, &unk_1E2991D50);
      v21 = v50;
      if (v51 < 0)
        v21 = (void **)v50[0];
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = v21;
      WORD2(__p[1]) = 2048;
      *(void **)((char *)&__p[1] + 6) = *(void **)v52;
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "CoreLocation: %s\n", v22);
      if (v22 == buf)
        goto LABEL_63;
    }
    else
    {
      v23 = CFGetTypeID(a2);
      if (v23 == CFBooleanGetTypeID())
      {
        if (qword_1EE172198 != -1)
          dispatch_once(&qword_1EE172198, &unk_1E2991D50);
        v24 = qword_1EE1721A0;
        if (os_log_type_enabled((os_log_t)qword_1EE1721A0, OS_LOG_TYPE_DEBUG))
        {
          v25 = SHIBYTE(v51);
          v26 = (void **)v50[0];
          Value = CFBooleanGetValue((CFBooleanRef)a2);
          v28 = v50;
          if (v25 < 0)
            v28 = v26;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v28;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = Value;
          _os_log_impl(&dword_18F5B3000, v24, OS_LOG_TYPE_DEBUG, "\t%s = %d", buf, 0x12u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_63;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172198 != -1)
          dispatch_once(&qword_1EE172198, &unk_1E2991D50);
        v29 = SHIBYTE(v51);
        v30 = (void **)v50[0];
        v31 = CFBooleanGetValue((CFBooleanRef)a2);
        v32 = v50;
        if (v29 < 0)
          v32 = v30;
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = v32;
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = v31;
        v22 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "CoreLocation: %s\n", v22);
      }
      else
      {
        if (qword_1EE172198 != -1)
          dispatch_once(&qword_1EE172198, &unk_1E2991D50);
        v33 = qword_1EE1721A0;
        if (os_log_type_enabled((os_log_t)qword_1EE1721A0, OS_LOG_TYPE_DEBUG))
        {
          v34 = SHIBYTE(v51);
          v35 = (void **)v50[0];
          v36 = CFGetTypeID(a2);
          v37 = v50;
          if (v34 < 0)
            v37 = v35;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v37;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v36;
          _os_log_impl(&dword_18F5B3000, v33, OS_LOG_TYPE_DEBUG, "\t%s = <unhandled value type %lu>", buf, 0x16u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_63;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172198 != -1)
          dispatch_once(&qword_1EE172198, &unk_1E2991D50);
        v46 = SHIBYTE(v51);
        v47 = (void **)v50[0];
        v48 = (void *)CFGetTypeID(a2);
        v49 = v50;
        if (v46 < 0)
          v49 = v47;
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = v49;
        WORD2(__p[1]) = 2048;
        *(void **)((char *)&__p[1] + 6) = v48;
        v22 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "CoreLocation: %s\n", v22);
      }
      if (v22 == buf)
      {
LABEL_63:
        if (SHIBYTE(v51) < 0)
          operator delete(v50[0]);
        return;
      }
    }
    free(v22);
    goto LABEL_63;
  }
}

void sub_18F669200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F66926C(uint64_t a1, uint64_t a2)
{
  CFStringRef v4;

  v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%s[%d]"), *(_QWORD *)a2, *(unsigned int *)(a2 + 8));
  sub_18F668854(v4, a1);
  ++*(_DWORD *)(a2 + 8);
  CFRelease(v4);
}

void sub_18F6692E0(uint64_t a1, uint64_t a2)
{
  CFStringRef v4;

  v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%s[%d]"), *(_QWORD *)a2, *(unsigned int *)(a2 + 8));
  sub_18F6684E8(v4, a1, *(_QWORD *)(a2 + 16));
  ++*(_DWORD *)(a2 + 8);
  CFRelease(v4);
}

os_log_t sub_18F669358()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1ECD8E740 = (uint64_t)result;
  return result;
}

os_log_t sub_18F669384()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Direct_deprecated");
  qword_1EE1721A0 = (uint64_t)result;
  return result;
}

os_log_t sub_18F66A9D4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "Position");
  qword_1EE172110 = (uint64_t)result;
  return result;
}

BOOL sub_18F66AA00()
{
  void *v0;
  _BOOL8 v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;

  v0 = (void *)MEMORY[0x1940032C4]();
  sub_18F66AA44();
  v1 = qword_1EE172BE0 != 0;
  objc_msgSend_showCalibrationAlert((void *)qword_1EE172BE0, v2, v3, v4);
  objc_autoreleasePoolPop(v0);
  return v1;
}

void sub_18F66AA44()
{
  NSObject *v0;
  NSObject *v1;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172F68)
    return;
  qword_1EE172F68 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CompassUI.framework/CompassUI", 1);
  if (qword_1EE172F68)
  {
    qword_1EE172BE0 = (uint64_t)NSClassFromString(CFSTR("CUICalibration"));
    if (!qword_1EE172BE0)
    {
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990490);
      v0 = qword_1ECD8E750;
      if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_FAULT, "Could not load CUICalibrationClass from CompassUI framework", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E758 == -1)
        {
LABEL_18:
          v2 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "void CLClientLoadCompassUIIfNecessary(void)", "CoreLocation: %s\n", v2);
          if (v2 != (char *)buf)
            free(v2);
          return;
        }
LABEL_20:
        dispatch_once(&qword_1ECD8E758, &unk_1E2990490);
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990490);
    v1 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_FAULT, "Unable to load CompassUI framework", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 == -1)
        goto LABEL_18;
      goto LABEL_20;
    }
  }
}

void sub_18F66ACD8()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;

  v0 = (void *)MEMORY[0x1940032C4]();
  sub_18F66AA44();
  objc_msgSend_dismissCalibrationAlert((void *)qword_1EE172BE0, v1, v2, v3);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_18F66AD0C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_1E298E3D0;
  pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(void **)(v5 + 104);
  if (v6)
  {
    free(v6);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(v5 + 104) = 0;
  }
  objc_msgSend_assertInside(*(void **)(v5 + 64), v2, v3, v4);

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
    MEMORY[0x194002D30](v7, 0x10B0C4016A090D5);
  return a1;
}

void sub_18F66AD90(uint64_t a1)
{
  sub_18F66AD0C(a1);
  JUMPOUT(0x194002D30);
}

pthread_t sub_18F66ADB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  pthread_t result;
  uint64_t v6;
  int v7;
  _opaque_pthread_t *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  objc_msgSend_assertInside(*(void **)(*(_QWORD *)(a1 + 8) + 64), a2, a3, a4);
  if (pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8)))
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    v12 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "error == 0";
      _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    }
    v13 = off_1ECD8E720;
    if (os_signpost_enabled((os_log_t)off_1ECD8E720))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "error == 0";
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    }
    v14 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "error == 0";
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_50;
  }
  result = pthread_self();
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(v6 + 72);
  if (v7 < 0)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    v15 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "info->fCount >= 0";
      _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    }
    v16 = off_1ECD8E720;
    if (os_signpost_enabled((os_log_t)off_1ECD8E720))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "info->fCount >= 0";
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    }
    v17 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "info->fCount >= 0";
      _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_50;
  }
  v8 = *(_opaque_pthread_t **)(v6 + 80);
  if (!v7)
  {
    if (!v8)
      goto LABEL_17;
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    v18 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "(info->fCount > 0) || (info->fOwner == __null)";
      _os_log_impl(&dword_18F5B3000, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    }
    v19 = off_1ECD8E720;
    if (os_signpost_enabled((os_log_t)off_1ECD8E720))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "(info->fCount > 0) || (info->fOwner == __null)";
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    }
    v20 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "(info->fCount > 0) || (info->fOwner == __null)";
      _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
LABEL_50:
    abort_report_np();
  }
  if (v8 != result)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    v9 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "(info->fCount == 0) || (info->fOwner == curThread)";
      _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    }
    v10 = off_1ECD8E720;
    if (os_signpost_enabled((os_log_t)off_1ECD8E720))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "(info->fCount == 0) || (info->fOwner == curThread)";
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    }
    v11 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "(info->fCount == 0) || (info->fOwner == curThread)";
      _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_50;
  }
LABEL_17:
  *(_DWORD *)(v6 + 72) = v7 + 1;
  *(_QWORD *)(v6 + 80) = result;
  return result;
}

uint64_t sub_18F66B6C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t result;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend_assertInside(*(void **)(*(_QWORD *)(a1 + 8) + 64), a2, a3, a4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(v5 + 72);
  if (v6 <= 0)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    v9 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = "assert";
      v21 = 2081;
      v22 = "info->fCount > 0";
      _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    }
    v10 = off_1ECD8E720;
    if (os_signpost_enabled((os_log_t)off_1ECD8E720))
    {
      *(_DWORD *)buf = 68289539;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = "assert";
      v21 = 2081;
      v22 = "info->fCount > 0";
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    }
    v11 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = "assert";
      v21 = 2081;
      v22 = "info->fCount > 0";
      _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
LABEL_27:
    abort_report_np();
  }
  v7 = v6 - 1;
  *(_DWORD *)(v5 + 72) = v7;
  if (!v7)
    *(_QWORD *)(v5 + 80) = 0;
  result = pthread_mutex_unlock((pthread_mutex_t *)v5);
  if ((_DWORD)result)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    v12 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = "assert";
      v21 = 2081;
      v22 = "error == 0";
      _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    }
    v13 = off_1ECD8E720;
    if (os_signpost_enabled((os_log_t)off_1ECD8E720))
    {
      *(_DWORD *)buf = 68289539;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = "assert";
      v21 = 2081;
      v22 = "error == 0";
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904B0);
    }
    v14 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = "assert";
      v21 = 2081;
      v22 = "error == 0";
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_27;
  }
  return result;
}

BOOL sub_18F66BB98(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v4;

  v4 = (int)a2;
  objc_msgSend_assertInside(*(void **)(*(_QWORD *)(a1 + 8) + 64), a2, a3, a4);
  return *(_DWORD *)(*(_QWORD *)(a1 + 8) + 72) == v4;
}

BOOL sub_18F66BBD4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  pthread_t v5;

  objc_msgSend_assertInside(*(void **)(*(_QWORD *)(a1 + 8) + 64), a2, a3, a4);
  v5 = *(pthread_t *)(*(_QWORD *)(a1 + 8) + 80);
  return v5 == pthread_self();
}

BOOL sub_18F66BC10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  pthread_t v5;

  objc_msgSend_assertInside(*(void **)(*(_QWORD *)(a1 + 8) + 64), a2, a3, a4);
  v5 = *(pthread_t *)(*(_QWORD *)(a1 + 8) + 80);
  return v5 != pthread_self();
}

uint64_t sub_18F66BC4C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_18F66BE44(uint64_t a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  objc_super v9;

  v9.receiver = *(id *)(a1 + 32);
  v9.super_class = (Class)&OBJC_METACLASS___CLMapsXPCServiceManager;
  v1 = objc_msgSendSuper2(&v9, sel_allocWithZone_, 0);
  qword_1ECD8F730 = objc_msgSend_init(v1, v2, v3, v4);
  return objc_msgSend_createConnection((void *)qword_1ECD8F730, v5, v6, v7);
}

void sub_18F66C538(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F66C550(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172168 != -1)
    dispatch_once(&qword_1EE172168, &unk_1E2991DB8);
  v4 = qword_1EE172170;
  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349571;
    v26 = objc_msgSend_code(a2, v5, v6, v7);
    v27 = 2114;
    v28 = objc_msgSend_domain(a2, v8, v9, v10);
    v29 = 2113;
    v30 = objc_msgSend_localizedDescription(a2, v11, v12, v13);
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLMapHelperService XPCService synchronous map data query returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2991DB8);
    objc_msgSend_code(a2, v15, v16, v17);
    objc_msgSend_domain(a2, v18, v19, v20);
    objc_msgSend_localizedDescription(a2, v21, v22, v23);
    v24 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "CoreLocation: %s\n", v24);
    if (v24 != (char *)buf)
      free(v24);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_18F66C788(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172168 != -1)
    dispatch_once(&qword_1EE172168, &unk_1E2991DB8);
  v4 = qword_1EE172170;
  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349571;
    v26 = objc_msgSend_code(a2, v5, v6, v7);
    v27 = 2114;
    v28 = objc_msgSend_domain(a2, v8, v9, v10);
    v29 = 2113;
    v30 = objc_msgSend_localizedDescription(a2, v11, v12, v13);
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLMapHelperService XPCService asynchronous map data query returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2991DB8);
    objc_msgSend_code(a2, v15, v16, v17);
    objc_msgSend_domain(a2, v18, v19, v20);
    objc_msgSend_localizedDescription(a2, v21, v22, v23);
    v24 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "CoreLocation: %s\n", v24);
    if (v24 != (char *)buf)
      free(v24);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_18F66C9C0(uint64_t a1, void *a2)
{
  uint64_t v4;
  double v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  _BOOL4 v23;
  __int16 v24;
  double v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = mach_continuous_time();
  v5 = (sub_18F6BDF00(v4) - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)) * 1000.0;
  if (v5 > 200.0)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2991DB8);
    v6 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
    {
      if (a2)
        v10 = objc_msgSend_count(a2, v7, v8, v9);
      else
        v10 = -1;
      v11 = *(_QWORD *)(a1 + 48);
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(a1 + 64);
      v14 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67241729;
      v21 = v10;
      v22 = 1026;
      v23 = a2 == 0;
      v24 = 2050;
      v25 = v5;
      v26 = 2049;
      v27 = v11;
      v28 = 2049;
      v29 = v12;
      v30 = 2050;
      v31 = v13;
      v32 = 1026;
      v33 = v14;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,MapHelperService,XPCService returned data,roadCount,%{public}d,error,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,syncCall,%{public}d", buf, 0x3Cu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2991DB8);
      if (a2)
        objc_msgSend_count(a2, v16, v17, v18);
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_18F66CC84(uint64_t a1, void *a2)
{
  uint64_t v4;
  double v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  _BOOL4 v23;
  __int16 v24;
  double v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = mach_continuous_time();
  v5 = (sub_18F6BDF00(v4) - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)) * 1000.0;
  if (v5 > 200.0)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2991DB8);
    v6 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
    {
      if (a2)
        v10 = objc_msgSend_count(a2, v7, v8, v9);
      else
        v10 = -1;
      v11 = *(_QWORD *)(a1 + 48);
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(a1 + 64);
      v14 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67241729;
      v21 = v10;
      v22 = 1026;
      v23 = a2 == 0;
      v24 = 2050;
      v25 = v5;
      v26 = 2049;
      v27 = v11;
      v28 = 2049;
      v29 = v12;
      v30 = 2050;
      v31 = v13;
      v32 = 1026;
      v33 = v14;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,MapHelperService,XPCService returned Basic style building data,buildingCount,%{public}d,error,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,syncCall,%{public}d", buf, 0x3Cu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2991DB8);
      if (a2)
        objc_msgSend_count(a2, v16, v17, v18);
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_18F66CF48(uint64_t a1, void *a2)
{
  uint64_t v4;
  double v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  _BOOL4 v23;
  __int16 v24;
  double v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = mach_continuous_time();
  v5 = (sub_18F6BDF00(v4) - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)) * 1000.0;
  if (v5 > 200.0)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2991DB8);
    v6 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
    {
      if (a2)
        v10 = objc_msgSend_count(a2, v7, v8, v9);
      else
        v10 = -1;
      v11 = *(_QWORD *)(a1 + 48);
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(a1 + 64);
      v14 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67241729;
      v21 = v10;
      v22 = 1026;
      v23 = a2 == 0;
      v24 = 2050;
      v25 = v5;
      v26 = 2049;
      v27 = v11;
      v28 = 2049;
      v29 = v12;
      v30 = 2050;
      v31 = v13;
      v32 = 1026;
      v33 = v14;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,MapHelperService,XPCService returned Extended style building data,buildingCount,%{public}d,error,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,syncCall,%{public}d", buf, 0x3Cu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2991DB8);
      if (a2)
        objc_msgSend_count(a2, v16, v17, v18);
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_18F66D3D8(uint64_t a1, void *a2)
{
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172168 != -1)
    dispatch_once(&qword_1EE172168, &unk_1E2991DB8);
  v3 = qword_1EE172170;
  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349571;
    v24 = objc_msgSend_code(a2, v4, v5, v6);
    v25 = 2114;
    v26 = objc_msgSend_domain(a2, v7, v8, v9);
    v27 = 2113;
    v28 = objc_msgSend_localizedDescription(a2, v10, v11, v12);
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLMapHelperService XPCService returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2991DB8);
    objc_msgSend_code(a2, v13, v14, v15);
    objc_msgSend_domain(a2, v16, v17, v18);
    objc_msgSend_localizedDescription(a2, v19, v20, v21);
    v22 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "-[CLMapsXPCServiceManager clearMemoryAndExitHelperProcessCleanly]_block_invoke", "CoreLocation: %s\n", v22);
    if (v22 != (char *)buf)
      free(v22);
  }
}

uint64_t sub_18F66D834(uint64_t a1, const char *a2)
{
  uint64_t result;

  result = objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(MEMORY[0x1E0C99E88], a2, *(_QWORD *)(a1 + 32), (uint64_t)sel_onTimerFire_, 0, 0, 300.0);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = result;
  return result;
}

void sub_18F66DD28(uint64_t a1, void *a2)
{
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172168 != -1)
    dispatch_once(&qword_1EE172168, &unk_1E2991DB8);
  v3 = qword_1EE172170;
  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349571;
    v24 = objc_msgSend_code(a2, v4, v5, v6);
    v25 = 2114;
    v26 = objc_msgSend_domain(a2, v7, v8, v9);
    v27 = 2113;
    v28 = objc_msgSend_localizedDescription(a2, v10, v11, v12);
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLMapHelperService XPCService returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2991DB8);
    objc_msgSend_code(a2, v13, v14, v15);
    objc_msgSend_domain(a2, v16, v17, v18);
    objc_msgSend_localizedDescription(a2, v19, v20, v21);
    v22 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "-[CLMapsXPCServiceManager releaseMapHelperServiceOSTransaction]_block_invoke", "CoreLocation: %s\n", v22);
    if (v22 != (char *)buf)
      free(v22);
  }
}

os_log_t sub_18F66DF5C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1EE172170 = (uint64_t)result;
  return result;
}

uint64_t sub_18F66E43C(uint64_t a1, const __CFString *a2, char a3, uint64_t a4)
{
  _QWORD *v8;
  void **v9;
  const char *v10;
  passwd *v11;
  NSObject *v12;
  __int128 *v13;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  const std::string::value_type *p_p;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  char v24;
  uint64_t v25;
  std::string *v26;
  __int128 v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  char v36;
  uint64_t v37;
  passwd *v38;
  passwd *v39;
  uid_t pw_uid;
  gid_t pw_gid;
  BOOL v42;
  __int128 *v44;
  std::string *v45;
  void *v46[2];
  uint64_t v47;
  void *__p;
  std::string::size_type v49;
  unsigned __int8 v50;
  void *v51;
  std::string::size_type v52;
  unsigned __int8 v53;
  void *__dst[2];
  uint64_t v55;
  std::string v56;
  __int128 v57;
  uint64_t v58;
  std::string v59;
  _QWORD v60[2];
  std::string buf[68];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v8 = sub_18F5C9250((_QWORD *)a1);
  *v8 = &off_1E298E930;
  *((_BYTE *)v8 + 16) = 0;
  *(_OWORD *)(v8 + 3) = 0u;
  v9 = (void **)(v8 + 3);
  *(_OWORD *)(v8 + 5) = 0u;
  *(_OWORD *)(v8 + 7) = 0u;
  v8[10] = a4;
  v8[11] = -1;
  *((_BYTE *)v8 + 96) = a3;
  sub_18F5C9250(v8 + 13);
  *(_QWORD *)(a1 + 104) = &off_1E298F808;
  sub_18F5C9250((_QWORD *)(a1 + 120));
  *(_QWORD *)(a1 + 120) = &off_1E298F808;
  *(_QWORD *)(a1 + 72) = a2;
  CFRetain(a2);
  CFRetain(*(CFTypeRef *)(a1 + 80));
  sub_18F661274(*(const __CFString **)(a1 + 80), (uint64_t)&v57);
  if (v58 >= 0)
    v10 = (const char *)&v57;
  else
    v10 = (const char *)v57;
  v11 = getpwnam(v10);
  if (v11)
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)&v11->pw_uid;
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
    v12 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v13 = &v57;
      if (v58 < 0)
        v13 = (__int128 *)v57;
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_FAULT, "could not read user %{public}s uid/gid", (uint8_t *)buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
      v44 = &v57;
      if (v58 < 0)
        v44 = (__int128 *)v57;
      LODWORD(v59.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
      v45 = (std::string *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "CLPreferences::CLPreferences(CFStringRef, BOOL, CFStringRef)", "CoreLocation: %s\n", (const char *)v45);
      if (v45 != buf)
        free(v45);
    }
  }
  if (SHIBYTE(v58) < 0)
  {
    sub_18F5C6990(__dst, (void *)v57, *((unint64_t *)&v57 + 1));
  }
  else
  {
    *(_OWORD *)__dst = v57;
    v55 = v58;
  }
  sub_18F687DDC((uint64_t)__dst, &v56);
  v14 = std::string::append(&v56, "/Library/Preferences/");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  sub_18F661274(a2, (uint64_t)&v51);
  if ((v53 & 0x80u) == 0)
    v16 = (const std::string::value_type *)&v51;
  else
    v16 = (const std::string::value_type *)v51;
  if ((v53 & 0x80u) == 0)
    v17 = v53;
  else
    v17 = v52;
  v18 = std::string::append(&v59, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  sub_18F5D5990(&__p, ".plist");
  if ((v50 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v50 & 0x80u) == 0)
    v21 = v50;
  else
    v21 = v49;
  v22 = std::string::append(buf, p_p, v21);
  v23 = v22->__r_.__value_.__r.__words[0];
  v60[0] = v22->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v60 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v9);
  v25 = v60[0];
  *(_QWORD *)(a1 + 24) = v23;
  *(_QWORD *)(a1 + 32) = v25;
  *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v60 + 7);
  *(_BYTE *)(a1 + 47) = v24;
  if ((char)v50 < 0)
    operator delete(__p);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if ((char)v53 < 0)
    operator delete(v51);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55) < 0)
    operator delete(__dst[0]);
  if (SHIBYTE(v58) < 0)
  {
    sub_18F5C6990(v46, (void *)v57, *((unint64_t *)&v57 + 1));
  }
  else
  {
    *(_OWORD *)v46 = v57;
    v47 = v58;
  }
  sub_18F687F84((uint64_t)v46, &v56);
  v26 = std::string::append(&v56, "/");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  sub_18F661274(a2, (uint64_t)&v51);
  if ((v53 & 0x80u) == 0)
    v28 = (const std::string::value_type *)&v51;
  else
    v28 = (const std::string::value_type *)v51;
  if ((v53 & 0x80u) == 0)
    v29 = v53;
  else
    v29 = v52;
  v30 = std::string::append(&v59, v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  sub_18F5D5990(&__p, ".plist");
  if ((v50 & 0x80u) == 0)
    v32 = (const std::string::value_type *)&__p;
  else
    v32 = (const std::string::value_type *)__p;
  if ((v50 & 0x80u) == 0)
    v33 = v50;
  else
    v33 = v49;
  v34 = std::string::append(buf, v32, v33);
  v35 = v34->__r_.__value_.__r.__words[0];
  v60[0] = v34->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v60 + 7) = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
  v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v37 = v60[0];
  *(_QWORD *)(a1 + 48) = v35;
  *(_QWORD *)(a1 + 56) = v37;
  *(_QWORD *)(a1 + 63) = *(_QWORD *)((char *)v60 + 7);
  *(_BYTE *)(a1 + 71) = v36;
  if ((char)v50 < 0)
    operator delete(__p);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if ((char)v53 < 0)
    operator delete(v51);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47) < 0)
    operator delete(v46[0]);
  v38 = getpwnam("root");
  v42 = 0;
  if (v38)
  {
    v39 = v38;
    pw_uid = v38->pw_uid;
    if (pw_uid == getuid())
    {
      pw_gid = v39->pw_gid;
      if (pw_gid == getgid())
        v42 = 1;
    }
  }
  *(_BYTE *)(a1 + 16) = v42;
  sub_18F66EBBC(a1);
  if (SHIBYTE(v58) < 0)
    operator delete((void *)v57);
  return a1;
}

void sub_18F66EA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  void **v66;

  if (a48 < 0)
    operator delete(__p);
  sub_18F5C6360(v65);
  sub_18F5C6360(v64);
  if (*(char *)(v63 + 71) < 0)
    operator delete(*(void **)(v63 + 48));
  if (*(char *)(v63 + 47) < 0)
    operator delete(*v66);
  sub_18F5C6360((_QWORD *)v63);
  _Unwind_Resume(a1);
}

BOOL sub_18F66EBBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  int v5;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EE172A70);
  v4 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v4 = *(const char **)v4;
  sub_18F65FFF4(a1 + 120, v4, v2, v3);
  v5 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (*(_BYTE *)(a1 + 16))
    sub_18F66ECF8((char *)a1, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EE172A70);
  return v5 != 0;
}

void sub_18F66EC40(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EE172A70);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F66EC60(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E298E930;
  CFRelease(*(CFTypeRef *)(a1 + 72));
  CFRelease(*(CFTypeRef *)(a1 + 80));
  sub_18F5C6360((_QWORD *)(a1 + 120));
  sub_18F5C6360((_QWORD *)(a1 + 104));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return sub_18F5C6360((_QWORD *)a1);
}

void sub_18F66ECD4(uint64_t a1)
{
  sub_18F66EC60(a1);
  JUMPOUT(0x194002D30);
}

void sub_18F66ECF8(char *a1, int a2)
{
  char *v2;
  void **v3;
  int v4;
  const char *v5;
  const __CFString *p_cache;
  NSObject *v7;
  void *v8;
  int v9;
  int v10;
  stat *v11;
  NSObject *v12;
  char *v13;
  gid_t v14;
  int v15;
  const char **v16;
  const char *v17;
  __CFString *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  __CFString *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *PathComponent;
  const char *v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  const char *v36;
  NSObject *v37;
  const char *v38;
  int v39;
  int *v40;
  char *v41;
  const char *v42;
  NSObject *v43;
  const char *v44;
  int v45;
  int *v46;
  char *v47;
  int v48;
  int *v49;
  char *v50;
  NSObject *v51;
  NSObject *v52;
  int v53;
  int v54;
  char *v55;
  const char *v56;
  int v57;
  int *v58;
  char *v59;
  char *v60;
  stat v61;
  int v62;
  void *v63;
  __int16 v64;
  uid_t st_uid;
  __int16 v66;
  _BYTE v67[10];
  __int16 v68;
  int v69;
  __int16 v70;
  int st_mode;
  __int16 v72;
  int v73;
  stat buf[11];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (a1[96])
    return;
  v2 = a1;
  if (a2)
  {
    v3 = (void **)(a1 + 24);
    v4 = a1[47];
    v5 = a1 + 24;
    if (v4 < 0)
      v5 = (const char *)*v3;
    if (stat(v5, &v61))
    {
      p_cache = (const __CFString *)&OBJC_METACLASS___CLAssertion.cache;
      if (qword_1ECD8E728 == -1)
        goto LABEL_8;
      goto LABEL_80;
    }
    if (v61.st_uid == *((_DWORD *)v2 + 22) && v61.st_gid == *((_DWORD *)v2 + 23) && (~v61.st_mode & 0x1B6) == 0)
      return;
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
    v12 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_DEFAULT))
    {
      v13 = v2 + 24;
      if (v2[47] < 0)
        v13 = (char *)*v3;
      v14 = *((_DWORD *)v2 + 22);
      v15 = *((_DWORD *)v2 + 23);
      buf[0].st_dev = 136316674;
      *(_QWORD *)&buf[0].st_mode = v13;
      WORD2(buf[0].st_ino) = 1024;
      *(_DWORD *)((char *)&buf[0].st_ino + 6) = v61.st_uid;
      HIWORD(buf[0].st_uid) = 1024;
      buf[0].st_gid = v14;
      LOWORD(buf[0].st_rdev) = 1024;
      *(dev_t *)((char *)&buf[0].st_rdev + 2) = v61.st_gid;
      *((_WORD *)&buf[0].st_rdev + 3) = 1024;
      LODWORD(buf[0].st_atimespec.tv_sec) = v15;
      WORD2(buf[0].st_atimespec.tv_sec) = 1024;
      *(_DWORD *)((char *)&buf[0].st_atimespec.tv_sec + 6) = v61.st_mode;
      WORD1(buf[0].st_atimespec.tv_nsec) = 1024;
      HIDWORD(buf[0].st_atimespec.tv_nsec) = 438;
      _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_DEFAULT, "#Warning %s attributes incorrect (uid %d vs %d, gid %d vs %d, mode 0x%x vs 0x%x, resetting", (uint8_t *)buf, 0x30u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
      if (v2[47] < 0)
        v3 = (void **)*v3;
      v53 = *((_DWORD *)v2 + 22);
      v54 = *((_DWORD *)v2 + 23);
      v62 = 136316674;
      v63 = v3;
      v64 = 1024;
      st_uid = v61.st_uid;
      v66 = 1024;
      *(_DWORD *)v67 = v53;
      *(_WORD *)&v67[4] = 1024;
      *(_DWORD *)&v67[6] = v61.st_gid;
      v68 = 1024;
      v69 = v54;
      v70 = 1024;
      st_mode = v61.st_mode;
      v72 = 1024;
      v73 = 438;
      v55 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLPreferences::setFileAttributes(BOOL)", "CoreLocation: %s\n", v55);
      if (v55 != (char *)buf)
        free(v55);
    }
  }
  v16 = (const char **)(v2 + 24);
  v17 = v2 + 24;
  if (v2[47] < 0)
    v17 = *v16;
  v18 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v17, 0x8000100u);
  if (v18)
  {
    v22 = v18;
    v23 = (void *)objc_msgSend_pathComponents(v18, v19, v20, v21);
    v30 = objc_msgSend_count(v23, v24, v25, v26) - 1;
    if (v30 >= 2)
    {
      PathComponent = v22;
      p_cache = CFSTR("/tmp");
      while (1)
      {
        PathComponent = (void *)objc_msgSend_stringByDeletingLastPathComponent(PathComponent, v27, v28, v29);
        if ((objc_msgSend_isEqualToString_(PathComponent, v32, (uint64_t)CFSTR("/var"), v33) & 1) == 0
          && (objc_msgSend_isEqualToString_(PathComponent, v27, (uint64_t)CFSTR("/tmp"), v29) & 1) == 0)
        {
          v34 = (const char *)objc_msgSend_fileSystemRepresentation(PathComponent, v27, v28, v29);
          if (!lstat(v34, buf) && (buf[0].st_mode & 0xF000) == 0xA000)
            break;
        }
        if (--v30 <= 1)
          goto LABEL_38;
      }
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
      v3 = &OBJC_METACLASS___CLAssertion.cache;
      v51 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
      {
        buf[0].st_dev = 68289539;
        *(_DWORD *)&buf[0].st_mode = 0;
        LOWORD(buf[0].st_ino) = 2082;
        *(__darwin_ino64_t *)((char *)&buf[0].st_ino + 2) = (__darwin_ino64_t)"";
        HIWORD(buf[0].st_uid) = 2082;
        *(_QWORD *)&buf[0].st_gid = "assert";
        *((_WORD *)&buf[0].st_rdev + 2) = 2081;
        *(_QWORD *)((char *)&buf[0].st_rdev + 6) = "!_parentDirContainsSymLink(cfSettingsFile)";
        _os_log_impl(&dword_18F5B3000, v51, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
        if (qword_1ECD8E728 != -1)
          dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
      }
      v52 = off_1ECD8E720;
      if (os_signpost_enabled((os_log_t)off_1ECD8E720))
      {
        buf[0].st_dev = 68289539;
        *(_DWORD *)&buf[0].st_mode = 0;
        LOWORD(buf[0].st_ino) = 2082;
        *(__darwin_ino64_t *)((char *)&buf[0].st_ino + 2) = (__darwin_ino64_t)"";
        HIWORD(buf[0].st_uid) = 2082;
        *(_QWORD *)&buf[0].st_gid = "assert";
        *((_WORD *)&buf[0].st_rdev + 2) = 2081;
        *(_QWORD *)((char *)&buf[0].st_rdev + 6) = "!_parentDirContainsSymLink(cfSettingsFile)";
        _os_signpost_emit_with_name_impl(&dword_18F5B3000, v52, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
        if (qword_1ECD8E728 != -1)
          dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
      }
      v2 = (char *)off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_INFO))
      {
        buf[0].st_dev = 68289539;
        *(_DWORD *)&buf[0].st_mode = 0;
        LOWORD(buf[0].st_ino) = 2082;
        *(__darwin_ino64_t *)((char *)&buf[0].st_ino + 2) = (__darwin_ino64_t)"";
        HIWORD(buf[0].st_uid) = 2082;
        *(_QWORD *)&buf[0].st_gid = "assert";
        *((_WORD *)&buf[0].st_rdev + 2) = 2081;
        *(_QWORD *)((char *)&buf[0].st_rdev + 6) = "!_parentDirContainsSymLink(cfSettingsFile)";
        _os_log_impl(&dword_18F5B3000, (os_log_t)v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
      }
      abort_report_np();
LABEL_80:
      dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
LABEL_8:
      v7 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_DEFAULT))
      {
        v8 = v3;
        if (v2[47] < 0)
          v8 = *v3;
        v9 = *__error();
        buf[0].st_dev = 136315394;
        *(_QWORD *)&buf[0].st_mode = v8;
        WORD2(buf[0].st_ino) = 1024;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v9;
        _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "#Warning could not check %s (errno %d)", (uint8_t *)buf, 0x12u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (p_cache[57].info != -1)
          dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
        if (v2[47] < 0)
          v3 = (void **)*v3;
        v10 = *__error();
        v62 = 136315394;
        v63 = v3;
        v64 = 1024;
        st_uid = v10;
        v11 = (stat *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "void CLPreferences::setFileAttributes(BOOL)", "CoreLocation: %s\n");
LABEL_67:
        if (v11 != buf)
          free(v11);
        return;
      }
      return;
    }
LABEL_38:
    CFRelease(v22);
  }
  v35 = v2 + 24;
  if (v2[47] < 0)
    v35 = *v16;
  if (!lstat(v35, &v61))
  {
    v36 = v2 + 24;
    if (v2[47] < 0)
      v36 = *v16;
    if (lchmod(v36, 0x1B6u))
    {
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
      v37 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
      {
        v38 = v2 + 24;
        if (v2[47] < 0)
          v38 = *v16;
        v39 = *__error();
        v40 = __error();
        v41 = strerror(*v40);
        buf[0].st_dev = 136446722;
        *(_QWORD *)&buf[0].st_mode = v38;
        WORD2(buf[0].st_ino) = 1026;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v39;
        HIWORD(buf[0].st_uid) = 2082;
        *(_QWORD *)&buf[0].st_gid = v41;
        _os_log_impl(&dword_18F5B3000, v37, OS_LOG_TYPE_FAULT, "could not lchmod %{public}s errno %{public}d (%{public}s)", (uint8_t *)buf, 0x1Cu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E728 != -1)
          dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
        v56 = v2 + 24;
        if (v2[47] < 0)
          v56 = *v16;
        v57 = *__error();
        v58 = __error();
        v59 = strerror(*v58);
        v62 = 136446722;
        v63 = (void *)v56;
        v64 = 1026;
        st_uid = v57;
        v66 = 2082;
        *(_QWORD *)v67 = v59;
        v60 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "void CLPreferences::setFileAttributes(BOOL)", "CoreLocation: %s\n", v60);
        if (v60 != (char *)buf)
          free(v60);
      }
    }
    v42 = v2 + 24;
    if (v2[47] < 0)
      v42 = *v16;
    if (lchown(v42, *((_DWORD *)v2 + 22), *((_DWORD *)v2 + 23)))
    {
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
      v43 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
      {
        v44 = v2 + 24;
        if (v2[47] < 0)
          v44 = *v16;
        v45 = *__error();
        v46 = __error();
        v47 = strerror(*v46);
        buf[0].st_dev = 136446722;
        *(_QWORD *)&buf[0].st_mode = v44;
        WORD2(buf[0].st_ino) = 1026;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v45;
        HIWORD(buf[0].st_uid) = 2082;
        *(_QWORD *)&buf[0].st_gid = v47;
        _os_log_impl(&dword_18F5B3000, v43, OS_LOG_TYPE_FAULT, "could not lchown %{public}s errno %{public}d (%{public}s)", (uint8_t *)buf, 0x1Cu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E728 != -1)
          dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
        if (v2[47] < 0)
          v16 = (const char **)*v16;
        v48 = *__error();
        v49 = __error();
        v50 = strerror(*v49);
        v62 = 136446722;
        v63 = v16;
        v64 = 1026;
        st_uid = v48;
        v66 = 2082;
        *(_QWORD *)v67 = v50;
        v11 = (stat *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "void CLPreferences::setFileAttributes(BOOL)", "CoreLocation: %s\n");
        goto LABEL_67;
      }
    }
  }
}

uint64_t sub_18F66F7F0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

const __CFArray *sub_18F66F7F8(CFStringRef *a1)
{
  const __CFString *v2;
  const __CFArray *result;
  const __CFArray *v4;

  v2 = (const __CFString *)*MEMORY[0x1E0C9B250];
  result = CFPreferencesCopyKeyList(a1[9], a1[10], (CFStringRef)*MEMORY[0x1E0C9B250]);
  if (result)
  {
    v4 = result;
    CFPreferencesSetMultiple(0, result, a1[9], a1[10], v2);
    CFRelease(v4);
    return (const __CFArray *)((uint64_t (*)(CFStringRef *))(*a1)[26].data)(a1);
  }
  return result;
}

uint64_t sub_18F66F878(CFStringRef *a1, CFStringRef key)
{
  CFPreferencesSetValue(key, 0, a1[9], a1[10], (CFStringRef)*MEMORY[0x1E0C9B250]);
  return ((uint64_t (*)(CFStringRef *))(*a1)[26].data)(a1);
}

CFIndex sub_18F66F8BC(uint64_t a1)
{
  const __CFArray *v1;
  const __CFArray *v2;
  CFIndex Count;

  v1 = CFPreferencesCopyKeyList(*(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E0C9B250]);
  if (!v1)
    return 0;
  v2 = v1;
  Count = CFArrayGetCount(v1);
  CFRelease(v2);
  return Count;
}

CFIndex sub_18F66F910(uint64_t a1, CFStringRef key)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFTypeID v4;
  CFIndex Count;

  v2 = (const __CFArray *)CFPreferencesCopyValue(key, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E0C9B250]);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = CFGetTypeID(v2);
  if (v4 == CFArrayGetTypeID())
    Count = CFArrayGetCount(v3);
  else
    Count = 1;
  CFRelease(v3);
  return Count;
}

uint64_t sub_18F66F988()
{
  NSObject *v0;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E728 != -1)
    dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
  v0 = off_1ECD8E720;
  if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLPreferences::serialize(CFDataRef *) const", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
  return 0;
}

uint64_t sub_18F66FB10()
{
  NSObject *v0;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E728 != -1)
    dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
  v0 = off_1ECD8E720;
  if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLPreferences::serializeBinary(CFDataRef *) const", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
  return 0;
}

uint64_t sub_18F66FC98()
{
  NSObject *v0;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E728 != -1)
    dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
  v0 = off_1ECD8E720;
  if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLPreferences::deserialize(const CFDataRef)", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
  return 0;
}

void sub_18F66FE20(const __CFString *a1, uint64_t a2)
{
  CFTypeRef cf;

  cf = 0;
  if ((*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a2 + 912))(a2, a1, &cf))
  {
    sub_18F668854(a1, (const __CFString *)cf);
    CFRelease(cf);
  }
}

void sub_18F66FE7C(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  char *v7;
  uint8_t buf[1640];
  uint64_t v9;
  CFRange v10;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172198 != -1)
    dispatch_once(&qword_1EE172198, &unk_1E2991DD8);
  if (os_log_type_enabled((os_log_t)qword_1EE1721A0, OS_LOG_TYPE_DEBUG))
  {
    if ((*(int (**)(uint64_t))(*(_QWORD *)(a1 + 120) + 856))(a1 + 120) >= 1)
      sub_18F668234(a1 + 120);
    v2 = CFPreferencesCopyKeyList(*(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E0C9B250]);
    v3 = v2;
    if (v2 && CFArrayGetCount(v2))
    {
      v10.length = CFArrayGetCount(v3);
      v10.location = 0;
      CFArrayApplyFunction(v3, v10, (CFArrayApplierFunction)sub_18F66FE20, (void *)a1);
      CFRelease(v3);
      v5 = *(_QWORD *)(a1 + 104);
      v4 = a1 + 104;
      if ((*(int (**)(uint64_t))(v5 + 856))(v4) >= 1)
        sub_18F668234(v4);
    }
    else
    {
      if (qword_1EE172198 != -1)
        dispatch_once(&qword_1EE172198, &unk_1E2991DD8);
      v6 = qword_1EE1721A0;
      if (os_log_type_enabled((os_log_t)qword_1EE1721A0, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEBUG, "\t<empty>", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172198 != -1)
          dispatch_once(&qword_1EE172198, &unk_1E2991DD8);
        v7 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual void CLPreferences::print() const", "CoreLocation: %s\n", v7);
        if (v7 != (char *)buf)
          free(v7);
      }
      if (v3)
        CFRelease(v3);
    }
  }
}

void sub_18F670110()
{
  NSObject *v0;
  char *v1;
  uint8_t buf[1640];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E728 != -1)
    dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
  v0 = off_1ECD8E720;
  if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
    v1 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual void CLPreferences::merge(const CLPreferences &, BOOL)", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

uint64_t sub_18F670294()
{
  NSObject *v0;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E728 != -1)
    dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
  v0 = off_1ECD8E720;
  if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLPreferences::loadFromFile(const char *)", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
  return 0;
}

uint64_t sub_18F67041C()
{
  NSObject *v0;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E728 != -1)
    dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
  v0 = off_1ECD8E720;
  if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLPreferences::saveToFile(const char *) const", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
  return 0;
}

uint64_t sub_18F6705A4()
{
  NSObject *v0;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E728 != -1)
    dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
  v0 = off_1ECD8E720;
  if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLPreferences::saveToBinaryFile(const char *) const", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
  return 0;
}

void sub_18F67072C(uint64_t a1, CFStringRef key, CFPropertyListRef value)
{
  NSObject *v5;
  _BYTE *v6;
  int v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  int v12;
  void **v13;
  void **v14;
  void **v15;
  char *v16;
  void *v17[2];
  char v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  _BYTE v23[12];
  __int16 v24;
  void **v25;
  __int16 v26;
  void **v27;
  uint8_t buf[4];
  _BYTE *v29;
  __int16 v30;
  void **v31;
  __int16 v32;
  void **v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
    v5 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      v6 = v23;
      sub_18F661274(key, (uint64_t)v23);
      if (v26 < 0)
        v6 = *(_BYTE **)v23;
      sub_18F661274(*(const __CFString **)(a1 + 72), (uint64_t)v21);
      v7 = v22;
      v8 = (void **)v21[0];
      sub_18F661274(*(const __CFString **)(a1 + 80), (uint64_t)__p);
      v9 = v21;
      if (v7 < 0)
        v9 = v8;
      if (v20 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 136446722;
      v29 = v6;
      v30 = 2082;
      v31 = v9;
      v32 = 2082;
      v33 = v10;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_FAULT, "Attempt to set key %{public}s for read-only preferences %{public}s/%{public}s!", buf, 0x20u);
      if (v20 < 0)
        operator delete(__p[0]);
      if (v22 < 0)
        operator delete(v21[0]);
      if (SHIBYTE(v26) < 0)
        operator delete(*(void **)v23);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
      sub_18F661274(key, (uint64_t)v21);
      if (v22 >= 0)
        v11 = v21;
      else
        v11 = (void **)v21[0];
      sub_18F661274(*(const __CFString **)(a1 + 72), (uint64_t)__p);
      v12 = v20;
      v13 = (void **)__p[0];
      sub_18F661274(*(const __CFString **)(a1 + 80), (uint64_t)v17);
      v14 = __p;
      if (v12 < 0)
        v14 = v13;
      if (v18 >= 0)
        v15 = v17;
      else
        v15 = (void **)v17[0];
      *(_DWORD *)v23 = 136446722;
      *(_QWORD *)&v23[4] = v11;
      v24 = 2082;
      v25 = v14;
      v26 = 2082;
      v27 = v15;
      v16 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0)
        operator delete(v17[0]);
      if (v20 < 0)
        operator delete(__p[0]);
      if (v22 < 0)
        operator delete(v21[0]);
      sub_18F5F2740("Generic", 1, 0, 0, "virtual void CLPreferences::setInternal(const CFStringRef, const CFTypeRef)", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
  }
  else
  {
    CFPreferencesSetValue(key, value, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E0C9B250]);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1);
  }
}

void sub_18F670AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

BOOL sub_18F670B08(uint64_t a1, const __CFString *a2, _QWORD *a3)
{
  CFPropertyListRef v6;

  if (sub_18F5C7974(a1 + 120, a2, a3))
    return 1;
  v6 = CFPreferencesCopyValue(a2, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E0C9B250]);
  *a3 = v6;
  return v6 || sub_18F5C7974(a1 + 104, a2, a3);
}

void sub_18F670B84()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E728 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
    }
    v1 = off_1ECD8E720;
    if (os_signpost_enabled((os_log_t)off_1ECD8E720))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
    }
    v2 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1ECD8E728, &unk_1E29904F0);
  }
}

const __CFString *sub_18F670DA4()
{
  return CFSTR("OtherPref");
}

void sub_18F670DB0(_QWORD *a1)
{
  sub_18F5C6360(a1);
  JUMPOUT(0x194002D30);
}

os_log_t sub_18F670DD4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Direct_deprecated");
  qword_1EE1721A0 = (uint64_t)result;
  return result;
}

void sub_18F670E04()
{
  JUMPOUT(0x194002D30);
}

BOOL sub_18F670E18()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;
  _BOOL8 v3;

  v0 = (const __CFBoolean *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  v3 = v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) != 0;
  CFRelease(v1);
  return v3;
}

void sub_18F670E88(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1ECD8F768);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ECD8F768))
  {
    unk_1ECD8F810 = 0;
    xmmword_1ECD8F800 = 0uLL;
    __cxa_atexit(MEMORY[0x1E0DE44D0], &xmmword_1ECD8F800, &dword_18F5B3000);
    __cxa_guard_release(&qword_1ECD8F768);
  }
  if (qword_1ECD8F770 != -1)
    dispatch_once(&qword_1ECD8F770, &unk_1E298D9F0);
  if (byte_1ECD8F817 < 0)
  {
    sub_18F5C6990((_BYTE *)a1, (void *)xmmword_1ECD8F800, *((unint64_t *)&xmmword_1ECD8F800 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1ECD8F800;
    *(_QWORD *)(a1 + 16) = unk_1ECD8F810;
  }
}

_QWORD *sub_18F670F5C()
{
  const __CFDictionary *v0;
  std::string *v1;
  __int128 v2;
  const std::string::value_type *p_p;
  std::string::size_type v4;
  std::string *v5;
  std::string::size_type v6;
  char v7;
  std::string v9;
  std::string v10;
  void *__p;
  std::string::size_type v12;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  const void *v16[2];
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v0 = (const __CFDictionary *)_CFCopyServerVersionDictionary();
  if (!v0)
  {
    v0 = (const __CFDictionary *)_CFCopySystemVersionDictionary();
    if (!v0)
      JUMPOUT(0x194002BECLL);
  }
  sub_18F5C639C(v18, v0);
  CFRelease(v0);
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  __p = 0;
  v12 = 0;
  v13 = 0;
  if (!sub_18F6627B4((uint64_t)v18, *MEMORY[0x1E0C9AB98], (uint64_t)v14))
    MEMORY[0x194002BEC](v14, "<name>");
  if (!sub_18F6627B4((uint64_t)v18, *MEMORY[0x1E0C9ABB0], (uint64_t)v16))
    MEMORY[0x194002BEC](v16, "<version>");
  if (!sub_18F6627B4((uint64_t)v18, *MEMORY[0x1E0C9AB90], (uint64_t)&__p))
    MEMORY[0x194002BEC](&__p, "<build>");
  sub_18F671250((const void **)v14, v16, (uint64_t)&v9);
  v1 = std::string::append(&v9, "/");
  v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v10.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  if (v13 >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (v13 >= 0)
    v4 = HIBYTE(v13);
  else
    v4 = v12;
  v5 = std::string::append(&v10, p_p, v4);
  v6 = v5->__r_.__value_.__r.__words[0];
  v19[0] = v5->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
  v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (byte_1ECD8F817 < 0)
    operator delete((void *)xmmword_1ECD8F800);
  *(_QWORD *)&xmmword_1ECD8F800 = v6;
  *((_QWORD *)&xmmword_1ECD8F800 + 1) = v19[0];
  *(_QWORD *)((char *)&xmmword_1ECD8F800 + 15) = *(_QWORD *)((char *)v19 + 7);
  byte_1ECD8F817 = v7;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v17) < 0)
    operator delete((void *)v16[0]);
  return sub_18F5C6360(v18);
}

void sub_18F6711C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v34 - 73) < 0)
    operator delete(*(void **)(v34 - 96));
  sub_18F5C6360((_QWORD *)(v34 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_18F671250@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = sub_18F673A90(a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void sub_18F671318(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  int v5;
  _QWORD block[5];

  v3 = atomic_load((unsigned __int8 *)&qword_1ECD8F778);
  if ((v3 & 1) == 0)
  {
    v4 = a1;
    v5 = __cxa_guard_acquire(&qword_1ECD8F778);
    a1 = v4;
    if (v5)
    {
      unk_1ECD8F828 = 0;
      xmmword_1ECD8F818 = 0uLL;
      __cxa_atexit(MEMORY[0x1E0DE44D0], &xmmword_1ECD8F818, &dword_18F5B3000);
      __cxa_guard_release(&qword_1ECD8F778);
      a1 = v4;
    }
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F671440;
  block[3] = &unk_1E29910D0;
  block[4] = a1;
  if (qword_1ECD8F780 != -1)
    dispatch_once(&qword_1ECD8F780, block);
  if (byte_1ECD8F82F < 0)
  {
    sub_18F5C6990((_BYTE *)a2, (void *)xmmword_1ECD8F818, *((unint64_t *)&xmmword_1ECD8F818 + 1));
  }
  else
  {
    *(_OWORD *)a2 = xmmword_1ECD8F818;
    *(_QWORD *)(a2 + 16) = unk_1ECD8F828;
  }
}

double sub_18F671440()
{
  char *v0;
  double result;
  __int128 v2;
  uint64_t v3;
  size_t v4;
  _BYTE v5[128];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = 128;
  if (sysctlbyname("hw.model", v5, &v4, 0, 0))
    v0 = "";
  else
    v0 = v5;
  sub_18F5D5990(&v2, v0);
  if (byte_1ECD8F82F < 0)
    operator delete((void *)xmmword_1ECD8F818);
  result = *(double *)&v2;
  xmmword_1ECD8F818 = v2;
  unk_1ECD8F828 = v3;
  return result;
}

void sub_18F671500(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1ECD8F788);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ECD8F788))
  {
    unk_1ECD8F840 = 0;
    xmmword_1ECD8F830 = 0uLL;
    __cxa_atexit(MEMORY[0x1E0DE44D0], &xmmword_1ECD8F830, &dword_18F5B3000);
    __cxa_guard_release(&qword_1ECD8F788);
  }
  if (qword_1ECD8F790 != -1)
    dispatch_once(&qword_1ECD8F790, &unk_1E2991E10);
  if (byte_1ECD8F847 < 0)
  {
    sub_18F5C6990((_BYTE *)a1, (void *)xmmword_1ECD8F830, *((unint64_t *)&xmmword_1ECD8F830 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1ECD8F830;
    *(_QWORD *)(a1 + 16) = unk_1ECD8F840;
  }
}

void sub_18F6715D4()
{
  std::string *p_p;
  const __CFAllocator *v1;
  CFStringRef v2;
  CFTypeID v3;
  const __CFURL *v4;
  const __CFString *v5;
  __CFBundle *v6;
  __CFBundle *v7;
  const __CFString *ValueForInfoDictionaryKey;
  const __CFString *v9;
  CFTypeID v10;
  std::string __p;

  sub_18F6885C4(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)p_p, 0x8000100u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v2)
  {
    v3 = CFGetTypeID(v2);
    if (v3 == CFStringGetTypeID())
    {
      v4 = CFURLCreateWithFileSystemPath(v1, v2, kCFURLPOSIXPathStyle, 0);
      if (v4)
      {
        v5 = (const __CFString *)v4;
        v6 = CFBundleCreate(v1, v4);
        if (v6)
        {
          v7 = v6;
          ValueForInfoDictionaryKey = (const __CFString *)CFBundleGetValueForInfoDictionaryKey(v6, (CFStringRef)*MEMORY[0x1E0C9AE90]);
          if (ValueForInfoDictionaryKey)
          {
            v9 = ValueForInfoDictionaryKey;
            v10 = CFGetTypeID(ValueForInfoDictionaryKey);
            if (v10 == CFStringGetTypeID())
            {
              sub_18F661274(v9, (uint64_t)&__p);
              if (byte_1ECD8F830[23] < 0)
                operator delete(*(void **)byte_1ECD8F830);
              *(std::string *)byte_1ECD8F830 = __p;
            }
          }
          CFRelease(v2);
          v2 = v5;
        }
        else
        {
          v7 = (__CFBundle *)v5;
        }
        CFRelease(v2);
        v2 = (CFStringRef)v7;
      }
    }
    CFRelease(v2);
  }
}

void sub_18F67172C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F671748(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1ECD8F798);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ECD8F798))
  {
    unk_1ECD8F858 = 0;
    xmmword_1ECD8F848 = 0uLL;
    __cxa_atexit(MEMORY[0x1E0DE44D0], &xmmword_1ECD8F848, &dword_18F5B3000);
    __cxa_guard_release(&qword_1ECD8F798);
  }
  if (qword_1ECD8F7A0 != -1)
    dispatch_once(&qword_1ECD8F7A0, &unk_1E2991E30);
  if (byte_1ECD8F85F < 0)
  {
    sub_18F5C6990((_BYTE *)a1, (void *)xmmword_1ECD8F848, *((unint64_t *)&xmmword_1ECD8F848 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1ECD8F848;
    *(_QWORD *)(a1 + 16) = unk_1ECD8F858;
  }
}

uint64_t sub_18F67181C()
{
  mach_port_t v0;
  const __CFDictionary *v1;
  uint64_t result;
  io_object_t v3;
  const __CFString *CFProperty;
  const __CFString *v5;
  __int128 v6;
  uint64_t v7;

  v0 = *MEMORY[0x1E0CBBAA8];
  v1 = IOServiceMatching("IOPlatformExpertDevice");
  result = IOServiceGetMatchingService(v0, v1);
  if ((_DWORD)result)
  {
    v3 = result;
    CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(result, CFSTR("IOPlatformSerialNumber"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (CFProperty)
    {
      v5 = CFProperty;
      sub_18F661274(CFProperty, (uint64_t)&v6);
      if (byte_1ECD8F85F < 0)
        operator delete((void *)xmmword_1ECD8F848);
      xmmword_1ECD8F848 = v6;
      unk_1ECD8F858 = v7;
      CFRelease(v5);
    }
    return IOObjectRelease(v3);
  }
  return result;
}

uint64_t sub_18F6718D4()
{
  if (qword_1ECD8F7A8 != -1)
    dispatch_once(&qword_1ECD8F7A8, &unk_1E2991E50);
  return dword_1ECD8F74C;
}

void sub_18F671914()
{
  int v0;
  NSObject *v1;
  int v2;
  char *v3;
  uint8_t buf[4];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  v0 = 7381266;
  switch(dword_1ECD8F748)
  {
    case 1:
    case 191:
    case 192:
    case 193:
    case 194:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
      v0 = 33562886;
      break;
    case 2:
    case 5:
    case 19:
    case 20:
    case 52:
    case 53:
    case 60:
    case 61:
    case 158:
    case 159:
    case 160:
    case 162:
    case 163:
    case 164:
    case 165:
    case 185:
    case 195:
    case 196:
      v0 = 532482;
      break;
    case 3:
    case 43:
    case 148:
      break;
    case 4:
      v0 = 8454;
      break;
    case 6:
    case 166:
    case 167:
      goto LABEL_37;
    case 7:
    case 10:
    case 13:
    case 14:
    case 29:
    case 31:
    case 33:
    case 35:
    case 44:
    case 46:
    case 48:
    case 62:
    case 64:
    case 76:
    case 134:
    case 136:
    case 144:
    case 146:
    case 154:
    case 156:
    case 186:
    case 188:
    case 197:
    case 199:
    case 201:
    case 203:
    case 205:
    case 207:
    case 209:
    case 211:
    case 212:
    case 213:
    case 215:
    case 224:
    case 225:
    case 227:
    case 229:
    case 231:
    case 233:
    case 235:
    case 237:
    case 240:
      v0 = 7905558;
      break;
    case 8:
    case 11:
    case 12:
    case 15:
    case 16:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 54:
    case 55:
    case 56:
      v0 = 8236319;
      break;
    case 9:
    case 17:
    case 18:
      v0 = 16624927;
      break;
    case 21:
      v0 = 4202498;
      break;
    case 30:
    case 32:
    case 34:
    case 36:
    case 45:
    case 47:
    case 49:
    case 63:
    case 65:
    case 77:
    case 135:
    case 137:
    case 145:
    case 155:
    case 157:
    case 187:
    case 189:
    case 190:
    case 202:
    case 204:
    case 206:
    case 208:
    case 210:
    case 214:
    case 216:
    case 238:
    case 239:
    case 241:
      v0 = 16624923;
      break;
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
      v0 = 37789954;
      break;
    case 50:
    case 51:
    case 74:
    case 75:
    case 81:
    case 82:
    case 83:
    case 84:
    case 89:
    case 90:
    case 95:
    case 96:
      v0 = 37789962;
      break;
    case 57:
    case 58:
    case 59:
      v0 = 8234271;
      break;
    case 66:
    case 67:
    case 85:
    case 86:
    case 87:
    case 88:
    case 91:
    case 92:
    case 93:
    case 94:
    case 97:
    case 98:
      v0 = 38120715;
      break;
    case 68:
    case 69:
    case 70:
    case 78:
    case 79:
    case 80:
    case 139:
    case 141:
    case 142:
    case 143:
      v0 = 41788703;
      break;
    case 71:
    case 72:
    case 73:
      v0 = 41790751;
      break;
    case 99:
    case 100:
    case 103:
    case 104:
    case 107:
    case 108:
    case 111:
    case 112:
    case 116:
    case 117:
    case 120:
    case 121:
    case 126:
    case 127:
    case 130:
    case 131:
      v0 = 38314250;
      break;
    case 101:
    case 102:
    case 105:
    case 106:
    case 109:
    case 110:
    case 113:
    case 114:
    case 115:
    case 118:
    case 119:
    case 122:
    case 123:
    case 124:
    case 125:
    case 128:
    case 129:
    case 132:
    case 133:
    case 258:
      v0 = 38645003;
      break;
    case 149:
      v0 = 4235530;
      break;
    case 150:
    case 151:
    case 152:
    case 153:
      v0 = 41226;
      break;
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
      v0 = 108899615;
      break;
    case 198:
    case 200:
    case 226:
    case 228:
    case 230:
    case 232:
    case 234:
    case 236:
      v0 = 83733787;
      break;
    default:
      if (qword_1EE1720C8 != -1)
        dispatch_once(&qword_1EE1720C8, &unk_1E2991F10);
      v1 = qword_1EE1720D0;
      if (os_log_type_enabled((os_log_t)qword_1EE1720D0, OS_LOG_TYPE_FAULT))
      {
        if (qword_1ECD8F760 != -1)
          dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
        *(_DWORD *)buf = 67174657;
        v5 = dword_1ECD8F748;
        _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_FAULT, "unknown hardware type %{private}d", buf, 8u);
      }
      v2 = sub_18F5C4AE0(115, 0);
      v0 = 0;
      if (v2)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE1720C8 != -1)
          dispatch_once(&qword_1EE1720C8, &unk_1E2991F10);
        if (qword_1ECD8F760 != -1)
          dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
        v3 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "CLPlatformInfo::Provider CLPlatformInfo::getProviders()_block_invoke", "CoreLocation: %s\n", v3);
        if (v3 != (char *)buf)
          free(v3);
LABEL_37:
        v0 = 0;
      }
      break;
  }
  dword_1ECD8F74C = v0;
}

BOOL sub_18F672078()
{
  return sub_18F67216C() || sub_18F672204() || sub_18F672278();
}

uint64_t sub_18F6720A4()
{
  if (qword_1ECD8F758 != -1)
    dispatch_once(&qword_1ECD8F758, &unk_1E2990510);
  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  return ((dword_1ECD8F748 - 174) < 0x3F) & (0x5000000000000403uLL >> (dword_1ECD8F748
                                                                                                 + 82));
}

uint64_t sub_18F672128()
{
  if ((sub_18F67230C() & 1) != 0
    || (sub_18F6723DC() & 1) != 0
    || sub_18F672078()
    || sub_18F672464() && !sub_18F672278())
  {
    return 1;
  }
  else
  {
    return sub_18F6720A4();
  }
}

BOOL sub_18F67216C()
{
  _BOOL8 result;

  if (qword_1ECD8F758 != -1)
    dispatch_once(&qword_1ECD8F758, &unk_1E2990510);
  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  result = 1;
  if ((dword_1ECD8F748 - 82) > 0x14 || ((1 << (dword_1ECD8F748 - 82)) & 0x1FFFD5) == 0)
    return (dword_1ECD8F748 - 150) < 4;
  return result;
}

BOOL sub_18F672204()
{
  if (qword_1ECD8F758 != -1)
    dispatch_once(&qword_1ECD8F758, &unk_1E2990510);
  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  return (dword_1ECD8F748 - 103) < 4;
}

BOOL sub_18F672278()
{
  _BOOL8 result;

  if (qword_1ECD8F758 != -1)
    dispatch_once(&qword_1ECD8F758, &unk_1E2990510);
  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  result = 1;
  if ((dword_1ECD8F748 - 107) >= 0x1B && (dword_1ECD8F748 - 178) >= 6)
    return dword_1ECD8F748 == 258;
  return result;
}

uint64_t sub_18F67230C()
{
  uint64_t result;

  if (qword_1ECD8F758 != -1)
    dispatch_once(&qword_1ECD8F758, &unk_1E2990510);
  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  result = 1;
  if (dword_1ECD8F748 > 134)
  {
    if (((dword_1ECD8F748 - 135) > 0xA || ((1 << (dword_1ECD8F748 + 121)) & 0x405) == 0)
      && dword_1ECD8F748 != 202
      && dword_1ECD8F748 != 204)
    {
      return 0;
    }
  }
  else if ((dword_1ECD8F748 - 34) > 0x2E
         || ((1 << (dword_1ECD8F748 - 34)) & 0x700000008001) == 0)
  {
    return 0;
  }
  return result;
}

uint64_t sub_18F6723DC()
{
  if (qword_1ECD8F758 != -1)
    dispatch_once(&qword_1ECD8F758, &unk_1E2990510);
  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  return ((dword_1ECD8F748 - 139) < 0x34) & (0x900000005001DuLL >> (dword_1ECD8F748
                                                                                              + 117));
}

uint64_t sub_18F672464()
{
  if ((sub_18F6724A8() & 1) != 0
    || (sub_18F672530() & 1) != 0
    || (sub_18F6725B8() & 1) != 0
    || sub_18F672640()
    || (sub_18F6726B0() & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_18F67273C();
  }
}

uint64_t sub_18F6724A8()
{
  if (qword_1ECD8F758 != -1)
    dispatch_once(&qword_1ECD8F758, &unk_1E2990510);
  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  return ((dword_1ECD8F748 - 168) < 0x21) & (0x14000000FuLL >> (dword_1ECD8F748
                                                                                          + 88));
}

uint64_t sub_18F672530()
{
  if (qword_1ECD8F758 != -1)
    dispatch_once(&qword_1ECD8F758, &unk_1E2990510);
  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  return ((dword_1ECD8F748 - 172) < 0x27) & (0x4400020033uLL >> (dword_1ECD8F748
                                                                                           + 84));
}

uint64_t sub_18F6725B8()
{
  if (qword_1ECD8F758 != -1)
    dispatch_once(&qword_1ECD8F758, &unk_1E2990510);
  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  return ((dword_1ECD8F748 - 178) < 0x33) & (0x5030000000003uLL >> (dword_1ECD8F748
                                                                                              + 78));
}

BOOL sub_18F672640()
{
  if (qword_1ECD8F758 != -1)
    dispatch_once(&qword_1ECD8F758, &unk_1E2990510);
  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  return dword_1ECD8F748 == 217;
}

uint64_t sub_18F6726B0()
{
  if (qword_1ECD8F758 != -1)
    dispatch_once(&qword_1ECD8F758, &unk_1E2990510);
  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  return ((dword_1ECD8F748 - 180) < 0x3E) & (0x2C14031410000003uLL >> (dword_1ECD8F748
                                                                                                 + 76));
}

uint64_t sub_18F67273C()
{
  if (qword_1ECD8F758 != -1)
    dispatch_once(&qword_1ECD8F758, &unk_1E2990510);
  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  return ((dword_1ECD8F748 - 182) < 0x2A) & (0x30000000003uLL >> (dword_1ECD8F748
                                                                                            + 74));
}

void sub_18F6727C0()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (v0)
  {
    v1 = v0;
    if (CFEqual(v0, CFSTR("iPhone")))
      byte_1ECD8F742 = 1;
    CFRelease(v1);
  }
}

uint64_t sub_18F672940()
{
  uint64_t result;

  result = sub_18F672128();
  if ((_DWORD)result)
  {
    if ((sub_18F67230C() & 1) != 0
      || (sub_18F6723DC() & 1) != 0
      || sub_18F672078() && !sub_18F67216C() && !sub_18F672204())
    {
      if (qword_1ECD8F7C0 != -1)
        dispatch_once(&qword_1ECD8F7C0, &unk_1E2991E70);
      if ((byte_1ECD8F742 & 1) != 0)
        return 1;
    }
    if (sub_18F672464() && !sub_18F672278())
      return 1;
    else
      return sub_18F6720A4();
  }
  return result;
}

uint64_t sub_18F6729D4()
{
  uint64_t result;

  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  result = 1;
  switch(dword_1ECD8F748)
  {
    case 8:
    case 9:
    case 11:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 32:
    case 34:
    case 36:
    case 45:
    case 47:
    case 49:
    case 50:
    case 51:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 63:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 139:
    case 141:
    case 142:
    case 143:
    case 145:
    case 154:
    case 155:
    case 156:
    case 157:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 197:
    case 198:
    case 199:
    case 200:
    case 202:
    case 204:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 214:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 238:
    case 239:
    case 241:
    case 258:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_18F672E30()
{
  if (qword_1ECD8F7D0 != -1)
    dispatch_once(&qword_1ECD8F7D0, &unk_1E2991E90);
  return byte_1ECD8F744;
}

void sub_18F672E70()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;

  v0 = (const __CFBoolean *)MGCopyAnswer();
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) == 1)
      byte_1ECD8F744 = 1;
    CFRelease(v1);
  }
}

uint64_t sub_18F672EE0()
{
  if (qword_1ECD8F760 != -1)
    dispatch_once(&qword_1ECD8F760, &unk_1E298D970);
  switch(dword_1ECD8F748)
  {
    case 7:
    case 8:
    case 9:
    case 10:
    case 23:
    case 26:
    case 27:
    case 43:
      return -56;
    case 11:
    case 12:
    case 19:
    case 20:
    case 21:
    case 28:
    case 29:
    case 30:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 44:
    case 45:
      return -59;
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 24:
      return -57;
    case 22:
      return -58;
    case 25:
    case 46:
    case 47:
      return -54;
    case 31:
      return -53;
    default:
      if ((dword_1ECD8F748 - 62) >= 2)
      {
        if (dword_1ECD8F748 == 148)
          return -56;
        else
          return -59;
      }
      else
      {
        return -51;
      }
  }
}

void sub_18F673444(uint64_t a1, const char *a2)
{
  void *v2;
  io_service_t MatchingService;
  NSObject *v4;
  char *v5;
  uint8_t buf[1640];
  const __CFString *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v7 = CFSTR("IOPropertyMatch");
  v8[0] = &unk_1E29B5C90;
  v2 = (void *)objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v8, (uint64_t)&v7, 1);
  MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E0CBBAA8], (CFDictionaryRef)v2);
  if (MatchingService)
  {
    byte_1ECD8F747 = 1;
    IOObjectRelease(MatchingService);
  }
  else
  {
    if (qword_1EE1720D8 != -1)
      dispatch_once(&qword_1EE1720D8, &unk_1E2991F30);
    v4 = qword_1EE1720E0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEFAULT, "Compass service missing", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE1720D8 != -1)
        dispatch_once(&qword_1EE1720D8, &unk_1E2991F30);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "static BOOL CLPlatformInfo::supportsCompass()_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
}

os_log_t sub_18F673A38()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Utility", "Utility");
  qword_1EE1720D0 = (uint64_t)result;
  return result;
}

os_log_t sub_18F673A64()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Sensors");
  qword_1EE1720E0 = (uint64_t)result;
  return result;
}

uint64_t sub_18F673A90(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_18F5D5A40();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t sub_18F673B14(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v14;
  int v15;
  int v17;
  char *v18;
  _QWORD v19[2];
  int v20;
  int v21;
  uint8_t buf[4];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a2[1];
  v19[0] = *a2;
  v19[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_18F650298((_QWORD *)a1, v19, a3);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)a1 = &off_1E298F498;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 136) = _Q1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_WORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 467) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 334) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 544) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_BYTE *)(a1 + 568) = 1;
  *(_QWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_BYTE *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 608) = xmmword_18F771F40;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 640) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 652) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 680) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = _Q1;
  *(_WORD *)(a1 + 752) = 256;
  *(_DWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 768) = 0;
  *(_WORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 780) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_BYTE *)(a1 + 816) = 0;
  *(_WORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_BYTE *)(a1 + 600) = sub_18F672078();
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990530);
  v14 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(unsigned __int8 *)(a1 + 600);
    *(_DWORD *)buf = 67240192;
    v23 = v15;
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_DEBUG, "CLMM,skipRMSECheckForScalingEntryThresholds,%{public}d", buf, 8u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990530);
    v17 = *(unsigned __int8 *)(a1 + 600);
    v20 = 67240192;
    v21 = v17;
    v18 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "CLScoredMapMatcher::CLScoredMapMatcher(CLMapGeometryPtr, const std::string &)", "CoreLocation: %s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  return a1;
}

void sub_18F673E34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_18F5D6004(v2);
  if (*(char *)(v1 + 271) < 0)
    operator delete(*(void **)(v1 + 248));
  sub_18F6EAE0C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F673E74(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E298F498;
  sub_18F5D6004(a1 + 552);
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  return sub_18F6EAE0C(a1);
}

void sub_18F673EBC(uint64_t a1)
{
  sub_18F673E74(a1);
  JUMPOUT(0x194002D30);
}

void sub_18F673EE0(uint64_t a1)
{
  __int128 v7;
  _BYTE v8[88];
  __int128 v9;
  _QWORD v10[35];

  *(_BYTE *)(a1 + 568) = 1;
  *(_DWORD *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 652) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v7 = _Q0;
  *(_QWORD *)v8 = 0xBFF0000000000000;
  v10[15] = 0;
  LODWORD(v10[16]) = 0;
  memset(&v10[10], 0, 34);
  memset(&v10[17], 0, 75);
  memset(&v10[27], 0, 56);
  memset(&v8[8], 0, 80);
  memset(v10, 0, 78);
  v9 = 0u;
  v10[34] = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 152) = 0uLL;
  *(_OWORD *)(a1 + 136) = _Q0;
  *(_OWORD *)(a1 + 120) = 0uLL;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v8[64];
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v8[48];
  *(_OWORD *)(a1 + 200) = *(_OWORD *)&v8[32];
  *(_OWORD *)(a1 + 184) = *(_OWORD *)&v8[16];
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)&v8[80]);
  memcpy((void *)(a1 + 272), v10, 0x118uLL);
  *(_QWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 736) = v7;
  *(_WORD *)(a1 + 752) = 256;
  *(_DWORD *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 652) = 0;
  *(_WORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 780) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  *(_BYTE *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_BYTE *)(a1 + 840) = 0;
  if (SHIBYTE(v9) < 0)
    operator delete(*(void **)&v8[80]);
}

void sub_18F674048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F674064(uint64_t a1, uint64_t *a2)
{
  double v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 840))
  {
    *a2 = 0x4066800000000000;
    return 1;
  }
  if (*(_BYTE *)(a1 + 776))
  {
    if (!*(_BYTE *)(a1 + 808) || (v5 = *(double *)(a1 + 792), v5 > 15.0) && v5 > *(double *)(a1 + 800) * 0.5)
    {
      *a2 = 0x4066800000000000;
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990530);
        v6 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v7 = *(unsigned __int8 *)(a1 + 776);
          v8 = *(_QWORD *)(a1 + 792);
          v9 = *(_QWORD *)(a1 + 800);
          v10 = *a2;
          *(_DWORD *)buf = 67240960;
          v13 = v7;
          v14 = 2050;
          v15 = v8;
          v16 = 2050;
          v17 = v9;
          v18 = 2050;
          v19 = v10;
          _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEBUG, "CLMM,holdCourseEngaged,%{public}d,fabsCourseDiffWithPriorSnap,%{public}.1lf,rawCourseUnc,%{public}.1lf,newCourseUnc,%{public}.1f", buf, 0x26u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990530);
          v11 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::shouldOverrideCourseUnc(double &)", "CoreLocation: %s\n", v11);
          if (v11 != (char *)buf)
            free(v11);
        }
      }
      return 1;
    }
  }
  return 0;
}

void sub_18F6742D0(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  BOOL v19;
  double v20;
  float v21;
  float v22;
  float v23;
  double v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  BOOL v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  int v55;
  double v56;
  double v57;
  double v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  double v65;
  int v66;
  double v67;
  _BOOL4 v69;
  int v70;
  int v71;
  double v72;
  NSObject *v73;
  double v74;
  int v75;
  int v76;
  double v77;
  NSObject *v78;
  double v79;
  char v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  int v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  int v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  double v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  double v115;
  _BYTE v116[32];
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  double v120;
  __int16 v121;
  int v122;
  __int16 v123;
  double v124;
  _BYTE buf[32];
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  double v129;
  __int16 v130;
  int v131;
  __int16 v132;
  double v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)(a2 + 8);
  v5 = *(double *)(a1 + 128);
  v6 = (double *)(a1 + 608);
  v8 = sub_18F5BD064((double *)(a1 + 608), *(double *)(a1 + 176), *(double *)(a1 + 184), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 72));
  *(_BYTE *)(a1 + 840) = 0;
  v9 = *(double *)(a2 + 192);
  if (v9 > 179.0)
    *(_BYTE *)(a1 + 840) = 1;
  v10 = *(double *)(a2 + 104);
  if (v9 > 0.0 || v10 < 0.0)
  {
    v12 = *(double *)(a2 + 192);
  }
  else
  {
    v11 = *(double *)(a2 + 96);
    if (v11 >= 0.0)
    {
      v12 = 1.0;
      if (v11 <= 15.0)
      {
        v12 = 4.0;
        if (v11 <= 10.0)
        {
          v12 = 10.0;
          if (v11 <= 8.0)
          {
            v12 = 15.0;
            if (v11 <= 5.0)
            {
              if (v11 <= 3.0)
              {
                v12 = 25.0;
                if (v11 <= 2.5)
                  v12 = dbl_18F771F50[v11 > 1.0];
              }
              else
              {
                v12 = 19.9;
              }
            }
          }
        }
      }
    }
    else
    {
      v12 = 180.0;
    }
    *(double *)(a2 + 192) = v12;
  }
  v13 = vabdd_f64(v4, v5);
  if (v10 < 0.0 && v12 > 0.0 && *(double *)(a2 + 96) < 0.001 && v13 < 2.2)
  {
    v14 = *(double *)(a1 + 224);
    if (v14 >= 0.0)
    {
      v15 = *(double *)(a1 + 312);
      if (v15 > 0.0 && v15 < 90.0)
      {
        *(double *)(a2 + 104) = v14;
        v10 = v14;
      }
    }
  }
  if (v10 >= 0.0 && v9 > 179.0)
  {
    if (*(_BYTE *)(a1 + 652))
    {
      v10 = *(double *)(a1 + 424);
      *(double *)(a2 + 104) = v10;
      v12 = 29.9;
    }
    else if (v13 >= 2.2
           || (v10 = *(double *)(a1 + 224), v10 < 0.0)
           || (v94 = *(double *)(a1 + 312), v94 <= 0.0)
           || v94 >= 90.0)
    {
      *(_QWORD *)(a2 + 104) = 0xBFF0000000000000;
      v12 = -1.0;
      v10 = -1.0;
    }
    else
    {
      *(double *)(a2 + 104) = v10;
      if (v94 >= 29.9)
        v12 = v94;
      else
        v12 = 29.9;
    }
    *(double *)(a2 + 192) = v12;
    *(double *)(a1 + 848) = v10;
    *(double *)(a1 + 856) = v12;
  }
  v16 = *(double *)(a2 + 96);
  v17 = 12.0;
  if (v12 < 12.0 && (v12 > 0.0 ? (_NF = v16 < 2.0) : (_NF = 0), _NF)
    || ((v17 = 6.5, v12 > 0.0) ? (v19 = v12 < 6.5) : (v19 = 0), v19))
  {
    *(double *)(a2 + 192) = v17;
    v12 = v17;
  }
  v20 = v4 - v5;
  if (v10 >= 0.0 && v12 > 0.0 && v12 < 30.0)
  {
    v36 = *(double *)(a1 + 224);
    if (v36 >= 0.0 && v20 != 0.0)
    {
      v37 = fmod(v10 - v36, 360.0);
      if (v37 < 0.0)
        v37 = v37 + 360.0;
      if (v37 > 180.0)
        v37 = v37 + -360.0;
      if (fabs(v37 / v20) > 45.0)
      {
        *(_QWORD *)(a2 + 192) = 0x403E000000000000;
        v12 = 30.0;
      }
    }
  }
  v21 = v8;
  if (!*(_BYTE *)(a1 + 776))
  {
    if (*(_BYTE *)(a1 + 384))
    {
      if (v20 != 0.0 && v13 < 1.4 && v10 >= 0.0 && v16 < 5.0 && v21 < 5.0)
      {
        v39 = *(double *)(a1 + 224);
        if (v39 >= 0.0)
        {
          v40 = *(double *)(a1 + 312);
          if (v40 > 0.0 && v40 <= 29.9)
          {
            v41 = fmod(v10 - v39, 360.0);
            if (v41 < 0.0)
              v41 = v41 + 360.0;
            if (v41 > 180.0)
              v41 = v41 + -360.0;
            v42 = fabs(v41 / v20);
            if (v42 > 135.0)
            {
              if (*(_BYTE *)(a1 + 96))
              {
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990530);
                v43 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                {
                  v44 = *(_QWORD *)(a2 + 8);
                  v45 = *(_QWORD *)(a1 + 224);
                  v47 = *(_QWORD *)(a2 + 96);
                  v46 = *(_QWORD *)(a2 + 104);
                  *(_DWORD *)buf = 134350080;
                  *(_QWORD *)&buf[4] = v44;
                  *(_WORD *)&buf[12] = 2050;
                  *(_QWORD *)&buf[14] = v46;
                  *(_WORD *)&buf[22] = 2050;
                  *(_QWORD *)&buf[24] = v45;
                  v126 = 2050;
                  v127 = v47;
                  v128 = 2050;
                  v129 = v42;
                  _os_log_impl(&dword_18F5B3000, v43, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,high course rate,course,%{public}.1lf,priorCourse,%{public}.1lf,speed,%{public}.1lf,fabsCourseRate,%{public}.1lf", buf, 0x34u);
                }
                v7 = sub_18F5C4AE0(115, 2);
                if ((_DWORD)v7)
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990530);
                  v110 = *(_QWORD *)(a2 + 8);
                  v111 = *(_QWORD *)(a1 + 224);
                  v113 = *(_QWORD *)(a2 + 96);
                  v112 = *(_QWORD *)(a2 + 104);
                  *(_DWORD *)v116 = 134350080;
                  *(_QWORD *)&v116[4] = v110;
                  *(_WORD *)&v116[12] = 2050;
                  *(_QWORD *)&v116[14] = v112;
                  *(_WORD *)&v116[22] = 2050;
                  *(_QWORD *)&v116[24] = v111;
                  v117 = 2050;
                  v118 = v113;
                  v119 = 2050;
                  v120 = v42;
                  v114 = (char *)_os_log_send_and_compose_impl();
                  v7 = sub_18F5F2740("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "CoreLocation: %s\n", v114);
                  if (v114 != buf)
                    free(v114);
                }
              }
              v10 = *(double *)(a1 + 224);
              *(double *)(a2 + 104) = v10;
              v12 = *(double *)(a1 + 312);
              *(double *)(a2 + 192) = v12;
              *(double *)(a1 + 848) = v10;
              *(double *)(a1 + 856) = v12;
            }
          }
        }
      }
    }
  }
  if (v10 < 0.0)
    goto LABEL_47;
  v38 = *(double *)(a2 + 96);
  if (v12 <= 0.0 || v12 >= 20.0 || v38 <= 5.0)
  {
    v48 = *(double *)(a1 + 736);
    if (v48 >= 0.0)
    {
      v49 = fmod(v10 - v48, 360.0);
      if (v49 < 0.0)
        v49 = v49 + 360.0;
      if (v49 > 180.0)
        v49 = v49 + -360.0;
      if (fabs(v49) < 30.0 && v38 < 5.0)
      {
        v90 = *(double *)(a1 + 744);
        if (v90 < v12)
          *(double *)(a2 + 192) = v90;
      }
      else
      {
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)(a1 + 736) = _Q0;
      }
    }
  }
  else
  {
    *(double *)(a1 + 736) = v10;
    *(double *)(a1 + 744) = v12;
  }
  v91 = *(double *)(a1 + 224);
  if (v91 < 0.0 || vabdd_f64(*(double *)(a2 + 8), *(double *)(a1 + 128)) >= 2.2)
  {
LABEL_47:
    *(_BYTE *)(a1 + 752) = 0;
    goto LABEL_48;
  }
  v92 = fmod(v10 - v91, 360.0);
  if (v92 < 0.0)
    v92 = v92 + 360.0;
  if (v92 > 180.0)
    v92 = v92 + -360.0;
  v93 = fabs(v92);
  if (*(_BYTE *)(a1 + 752))
  {
    if (v93 >= 8.0)
      goto LABEL_48;
    goto LABEL_47;
  }
  if (v93 > 14.0)
    *(_BYTE *)(a1 + 752) = 1;
LABEL_48:
  if (!*(_BYTE *)(a1 + 652) || v13 > 4.9)
  {
    *(_WORD *)(a1 + 776) = 0;
    *(_DWORD *)(a1 + 780) = 0;
    *(_BYTE *)(a1 + 784) = 0;
    *(_QWORD *)(a1 + 800) = 0;
    *(_QWORD *)(a1 + 792) = 0;
    *(_BYTE *)(a1 + 808) = 0;
    return;
  }
  v22 = sub_18F675740(v7, *(_DWORD *)(a1 + 780), *(unsigned __int8 *)(a1 + 777));
  if (v22 >= 11.1000001)
    v23 = v22;
  else
    v23 = 11.1;
  *(_QWORD *)buf = 0;
  *(_QWORD *)v116 = 0;
  sub_18F5BD37C(v6, (double *)v116, (double *)buf, &v115, *(double *)(a1 + 408), *(double *)(a1 + 416), *(double *)(a2 + 72), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 72));
  v24 = *(double *)(a1 + 424);
  v25 = *(double *)v116 * *(double *)v116 + *(double *)buf * *(double *)buf;
  v26 = sqrtf(v25);
  v27 = *(double *)buf;
  v28 = *(double *)v116;
  v29 = atan2f(v27, v28);
  v30 = v24 * -0.0174532925;
  v31 = sinf(v29 + v30) * v26;
  v32 = fabsf(v31);
  v33 = (float)(v23 * 0.5) + 7.5;
  if (*(_BYTE *)(a1 + 777) && v32 < v33)
    goto LABEL_110;
  v34 = *(_DWORD *)(a1 + 760);
  if (v34 == 1)
  {
    v35 = v31 <= (float)-v33;
    v33 = 7.5;
  }
  else
  {
    if (v34 != 2)
      goto LABEL_109;
    v35 = v31 <= -7.5;
  }
  if (!v35 && v31 < v33)
    goto LABEL_110;
LABEL_109:
  if (v32 < (float)((float)(v23 * 0.5) * 0.5))
  {
LABEL_110:
    v55 = 1;
    goto LABEL_111;
  }
  v55 = 0;
LABEL_111:
  v56 = *(double *)(a2 + 104);
  v57 = 0.0;
  if (v56 >= 0.0)
  {
    v58 = fmod(v56 - v24, 360.0);
    if (v58 < 0.0)
      v58 = v58 + 360.0;
    if (v58 > 180.0)
      v58 = v58 + -360.0;
    v57 = fabs(v58);
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990530);
    v59 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v60 = *(_QWORD *)(a2 + 192);
      v61 = *(_QWORD *)(a1 + 424);
      v63 = *(_QWORD *)(a2 + 96);
      v62 = *(_QWORD *)(a2 + 104);
      *(_DWORD *)buf = 134350592;
      *(_QWORD *)&buf[4] = v62;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v60;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = v61;
      v126 = 2050;
      v127 = v63;
      v128 = 2050;
      v129 = v31;
      v130 = 1026;
      v131 = v55;
      v132 = 2050;
      v133 = v23;
      _os_log_impl(&dword_18F5B3000, v59, OS_LOG_TYPE_DEBUG, "CLMM,course,%{public}.1lf,courseUnc,%{public}.1lf,lastSnapCourse,%{public}.1lf,speed,%{public}.1lf,acrossTrack,%{public}.1f,onRoad,%{public}d,widthUsed,%{public}.1lf", buf, 0x44u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990530);
      v95 = *(_QWORD *)(a2 + 192);
      v96 = *(_QWORD *)(a1 + 424);
      v98 = *(_QWORD *)(a2 + 96);
      v97 = *(_QWORD *)(a2 + 104);
      *(_DWORD *)v116 = 134350592;
      *(_QWORD *)&v116[4] = v97;
      *(_WORD *)&v116[12] = 2050;
      *(_QWORD *)&v116[14] = v95;
      *(_WORD *)&v116[22] = 2050;
      *(_QWORD *)&v116[24] = v96;
      v117 = 2050;
      v118 = v98;
      v119 = 2050;
      v120 = v31;
      v121 = 1026;
      v122 = v55;
      v123 = 2050;
      v124 = v23;
      v99 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "CoreLocation: %s\n", v99);
      if (v99 != buf)
        free(v99);
    }
  }
  if (*(_BYTE *)(a2 + 228))
  {
    v64 = 1;
  }
  else
  {
    v65 = *(double *)(a2 + 96);
    v64 = v65 >= 0.0 && v65 < 0.35;
  }
  v66 = sub_18F672940();
  v67 = *(double *)(a2 + 96);
  if (v66 && *(double *)(a2 + 184) > 0.0 && v67 >= 0.0 && v64 && v67 < 0.002)
  {
    v69 = v13 >= 1.1 || *(_BYTE *)(a2 + 228) != 0;
    v64 = v21 <= 0.7 || v69;
  }
  if (v13 >= 3.0)
    v70 = (v57 > 135.0) & ~v64;
  else
    v70 = 0;
  if (v57 > 30.0)
    v71 = v55;
  else
    v71 = 0;
  if (v71 != 1
    || (v70 & 1) != 0
    || *(_BYTE *)(a2 + 229)
    || *(_BYTE *)(a1 + 816)
    || (v72 = *(double *)(a1 + 824) - *(double *)(a1 + 832), v72 < 0.0)
    || v72 >= 30.0)
  {
    if (*(_BYTE *)(a1 + 776))
    {
      if (v67 > 3.0 || ((v55 | v64) ^ 1 | v70) == 1)
      {
        *(_WORD *)(a1 + 776) = 0;
        *(_DWORD *)(a1 + 780) = 0;
        *(_BYTE *)(a1 + 784) = 0;
        *(_QWORD *)(a1 + 800) = 0;
        *(_QWORD *)(a1 + 792) = 0;
        v75 = 1;
        *(_BYTE *)(a1 + 808) = 0;
        goto LABEL_170;
      }
    }
    else
    {
      v75 = 1;
      if (!v55 || v67 >= 1.5 && v21 >= 1.5)
      {
LABEL_170:
        if (*(double *)(a2 + 192) >= 30.0)
          v76 = v64;
        else
          v76 = 0;
        if (v76 == 1)
        {
          *(_BYTE *)(a1 + 776) = 1;
        }
        else
        {
          if (!*(_BYTE *)(a2 + 228))
            v75 = 0;
          if (v75 == 1)
          {
            v77 = *(double *)(a2 + 96);
            if (v77 < 0.0 || v77 < 0.35)
            {
              if (*(_BYTE *)(a1 + 384))
              {
                if (v13 < 2.2 && v57 > 30.0)
                {
                  *(_BYTE *)(a1 + 776) = 1;
                  if (*(_BYTE *)(a1 + 96))
                  {
                    if (qword_1EE172158 != -1)
                      dispatch_once(&qword_1EE172158, &unk_1E2990530);
                    v78 = off_1EE172160;
                    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 134349056;
                      *(double *)&buf[4] = v57;
                      _os_log_impl(&dword_18F5B3000, v78, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse,engaged,large course diff when static,fabsCourseDiffWithPriorSnap,%{public}.1lf", buf, 0xCu);
                    }
                    if (sub_18F5C4AE0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1EE172158 != -1)
                        dispatch_once(&qword_1EE172158, &unk_1E2990530);
                      *(_DWORD *)v116 = 134349056;
                      *(double *)&v116[4] = v57;
                      v108 = (char *)_os_log_send_and_compose_impl();
                      sub_18F5F2740("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "CoreLocation: %s\n", v108);
                      if (v108 != buf)
                        free(v108);
                    }
                  }
                }
              }
            }
          }
        }
        if (sub_18F672940())
        {
          if (!*(_BYTE *)(a1 + 776) && v13 < 1.1 && *(double *)(a2 + 184) > 0.0)
          {
            v79 = *(double *)(a2 + 96);
            if (v79 >= 0.0 && v79 < 5.0 && v21 < 5.0)
            {
              v80 = *(double *)(a2 + 104) < 0.0 ? 1 : v70;
              if ((v80 & 1) == 0 && v57 >= 135.0)
              {
                if (*(_BYTE *)(a1 + 96))
                {
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990530);
                  v81 = off_1EE172160;
                  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 134349056;
                    *(double *)&buf[4] = v57;
                    _os_log_impl(&dword_18F5B3000, v81, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse,engaged,large course diff at slow speed within one second,fabsCourseDiffWithPriorSnap,%{public}.1lf", buf, 0xCu);
                  }
                  if (sub_18F5C4AE0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172158 != -1)
                      dispatch_once(&qword_1EE172158, &unk_1E2990530);
                    *(_DWORD *)v116 = 134349056;
                    *(double *)&v116[4] = v57;
                    v109 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "CoreLocation: %s\n", v109);
                    if (v109 != buf)
                      free(v109);
                  }
                }
                v82 = *(_QWORD *)(a1 + 224);
                *(_QWORD *)(a2 + 104) = v82;
                v83 = *(_QWORD *)(a1 + 312);
                *(_QWORD *)(a2 + 192) = v83;
                *(_QWORD *)(a1 + 848) = v82;
                *(_QWORD *)(a1 + 856) = v83;
              }
            }
          }
        }
        goto LABEL_208;
      }
      *(_BYTE *)(a1 + 776) = 1;
    }
    v75 = 0;
    goto LABEL_170;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990530);
    v73 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v74 = *(double *)(a1 + 824) - *(double *)(a1 + 832);
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v74;
      _os_log_impl(&dword_18F5B3000, v73, OS_LOG_TYPE_DEBUG, "CLMM,detected course swing after a recent dismount,intervalSinceDismount,%{public}.1lf", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990530);
      v106 = *(double *)(a1 + 824) - *(double *)(a1 + 832);
      *(_DWORD *)v116 = 134349056;
      *(double *)&v116[4] = v106;
      v107 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "CoreLocation: %s\n", v107);
      if (v107 != buf)
        free(v107);
    }
  }
  *(_BYTE *)(a1 + 776) = 1;
LABEL_208:
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990530);
    v84 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v85 = *(unsigned __int8 *)(a1 + 776);
      v86 = *(_QWORD *)(a2 + 96);
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = v85;
      *(_WORD *)&buf[8] = 2050;
      *(_QWORD *)&buf[10] = v86;
      *(_WORD *)&buf[18] = 2050;
      *(double *)&buf[20] = v21;
      _os_log_impl(&dword_18F5B3000, v84, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse,engaged,%{public}d,speed,%{public}.1lf,distance,%{public}.1lf", buf, 0x1Cu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990530);
      v100 = *(unsigned __int8 *)(a1 + 776);
      v101 = *(_QWORD *)(a2 + 96);
      *(_DWORD *)v116 = 67240704;
      *(_DWORD *)&v116[4] = v100;
      *(_WORD *)&v116[8] = 2050;
      *(_QWORD *)&v116[10] = v101;
      *(_WORD *)&v116[18] = 2050;
      *(double *)&v116[20] = v21;
      v102 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "CoreLocation: %s\n", v102);
      if (v102 != buf)
        free(v102);
    }
  }
  if (*(_BYTE *)(a1 + 776))
  {
    *(_BYTE *)(a1 + 808) = *(double *)(a2 + 104) >= 0.0;
    *(double *)(a1 + 792) = v57;
    *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 424);
    *(_QWORD *)(a2 + 192) = 0x403DE66666666666;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990530);
      v87 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v88 = *(_QWORD *)(a2 + 104);
        v89 = *(_QWORD *)(a2 + 192);
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)&buf[4] = v88;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v89;
        *(_WORD *)&buf[22] = 2050;
        *(double *)&buf[24] = v57;
        _os_log_impl(&dword_18F5B3000, v87, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse,using prior snap,course,%{public}.1lf,courseUnc,%{public}.1lf,fabsCourseDiff,%{public}.1lf", buf, 0x20u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990530);
        v103 = *(_QWORD *)(a2 + 104);
        v104 = *(_QWORD *)(a2 + 192);
        *(_DWORD *)v116 = 134349568;
        *(_QWORD *)&v116[4] = v103;
        *(_WORD *)&v116[12] = 2050;
        *(_QWORD *)&v116[14] = v104;
        *(_WORD *)&v116[22] = 2050;
        *(double *)&v116[24] = v57;
        v105 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "CoreLocation: %s\n", v105);
        if (v105 != buf)
          free(v105);
      }
    }
  }
}

float sub_18F675740(uint64_t a1, unsigned int a2, int a3)
{
  float result;
  float *v4;

  result = 1.0;
  if ((a2 & 0xFFFFFFFE) != 8)
  {
    result = 7.4;
    if (a3)
      result = 5.55;
    if (a2 <= 7)
    {
      v4 = (float *)&unk_18F7745F8;
      if (a3)
        v4 = (float *)&unk_18F7745D8;
      return v4[a2];
    }
  }
  return result;
}

uint64_t sub_18F675790(uint64_t a1, uint64_t a2, int a3)
{
  double v6;
  double v7;
  int v8;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  int v14;
  double v15;
  double v16;
  double v17;
  int v20;
  char v21;
  double v22;
  double v23;
  double v24;
  double v25;
  NSObject *v26;
  int v27;
  _OWORD *v28;
  double v29;
  double v30;
  double v31;
  double v33;
  int v34;
  double v35;
  NSObject *v36;
  char v37;
  char *v38;
  NSObject *v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  double v47;
  double v48;
  double v49;
  double v50;
  NSObject *v51;
  int v52;
  NSObject *v53;
  uint64_t v54;
  double v55;
  NSObject *v56;
  int v57;
  double v58;
  _BOOL4 v59;
  NSObject *v60;
  double v61;
  NSObject *v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  NSObject *v71;
  int v72;
  NSObject *v73;
  int v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint8_t buf[4];
  _BYTE v85[18];
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  int v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v6 = fabs(*(double *)(a2 + 240));
  v7 = *(double *)(a1 + 360);
  v8 = (int)*(double *)(a2 + 232);
  if (v6 >= 25.0 && a3 == 0)
  {
    v10 = 0;
    v11 = 0;
    v12 = 1;
    switch(v8)
    {
      case 0:
      case 1:
      case 2:
LABEL_9:
        v10 = 0;
        v11 = -1;
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
        break;
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      case 11:
      case 12:
LABEL_10:
        v12 = 2;
        goto LABEL_12;
      case 13:
      case 14:
      case 15:
      case 16:
LABEL_7:
        v12 = 3;
        goto LABEL_12;
      case 17:
      case 18:
      case 19:
      case 20:
LABEL_8:
        v12 = 4;
        goto LABEL_12;
      default:
LABEL_11:
        v12 = 10;
LABEL_12:
        v10 = 1;
        v11 = v12;
        break;
    }
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 1;
    switch(v8)
    {
      case 0:
      case 1:
      case 2:
        goto LABEL_9;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        break;
      case 13:
        goto LABEL_12;
      case 14:
        goto LABEL_10;
      case 15:
      case 16:
        goto LABEL_7;
      case 17:
      case 18:
      case 19:
      case 20:
        goto LABEL_8;
      default:
        goto LABEL_11;
    }
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990530);
    v13 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_DWORD *)(a1 + 648);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v85 = v14;
      *(_WORD *)&v85[4] = 1026;
      *(_DWORD *)&v85[6] = v14 + v11;
      _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_DEBUG, "CLMM,varFactorCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0xEu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990530);
      v75 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v75);
      if (v75 != (char *)buf)
        free(v75);
    }
  }
  *(_DWORD *)(a1 + 648) = (*(_DWORD *)(a1 + 648) + v11) & ~((*(_DWORD *)(a1 + 648) + v11) >> 31);
  v15 = *(double *)(a2 + 192);
  v16 = *(double *)(a2 + 104);
  if (v15 <= 0.0 || v16 < 0.0)
  {
    if (v16 >= 0.0)
    {
      v21 = 0;
      LOBYTE(v20) = 1;
    }
    else
    {
      LOBYTE(v20) = 0;
      v21 = 0;
    }
    goto LABEL_41;
  }
  if (v15 >= 180.0)
  {
    LOBYTE(v20) = 0;
LABEL_40:
    v21 = 1;
    goto LABEL_41;
  }
  v17 = *(double *)(a2 + 96);
  if (v17 <= 0.0 && *(_BYTE *)(a2 + 228) != 0)
  {
LABEL_39:
    LOBYTE(v20) = 1;
    goto LABEL_40;
  }
  if (a3)
  {
    if (v6 <= 67.5)
      goto LABEL_39;
    if (v17 > 8.33333333 || v15 < 20.0)
      v20 = 6;
    else
      v20 = 4;
    goto LABEL_183;
  }
  if (v15 >= 20.0 && v17 <= 8.33333333)
    goto LABEL_123;
  if (v6 <= 67.5)
  {
    if (v6 > 45.0)
    {
LABEL_179:
      v20 = 6;
      goto LABEL_183;
    }
    if (v6 > 30.0)
    {
LABEL_182:
      v20 = 2;
      goto LABEL_183;
    }
    if (v6 > 20.0)
    {
      v20 = 1;
      goto LABEL_183;
    }
LABEL_123:
    if (v6 <= 67.5)
    {
      if (v6 <= 45.0)
      {
        v20 = 1;
        v21 = 1;
        if (v6 <= 30.0)
          goto LABEL_41;
        goto LABEL_183;
      }
      goto LABEL_182;
    }
    goto LABEL_179;
  }
  v20 = 18;
LABEL_183:
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990530);
    v73 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v74 = *(_DWORD *)(a1 + 648);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v85 = v74;
      *(_WORD *)&v85[4] = 1026;
      *(_DWORD *)&v85[6] = v74 + v20;
      _os_log_impl(&dword_18F5B3000, v73, OS_LOG_TYPE_DEBUG, "CLMM,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0xEu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990530);
      v79 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v79);
      if (v79 != (char *)buf)
        free(v79);
    }
  }
  *(_DWORD *)(a1 + 648) += v20;
  LOBYTE(v20) = 1;
  v21 = 1;
  v10 = 1;
LABEL_41:
  v22 = *(double *)(a2 + 80);
  v23 = *(double *)(a2 + 200);
  if (v23 > 0.0)
  {
    v24 = *(double *)(a2 + 208);
    if (v24 > 0.0)
      v22 = sqrt(v24 / 2.45 * (v24 / 2.45) + v23 / 2.45 * (v23 / 2.45));
  }
  if (v22 >= 10.0)
    v25 = v22;
  else
    v25 = 10.0;
  if (!v10 && v25 < 50.0)
  {
    if (fabs(*(double *)(a2 + 256)) <= 75.0 && fabs(*(double *)(a2 + 248)) <= 150.0)
    {
      v10 = 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990530);
        v26 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v27 = *(_DWORD *)(a1 + 648);
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v85 = v27;
          *(_WORD *)&v85[4] = 1026;
          *(_DWORD *)&v85[6] = v27 + 1;
          _os_log_impl(&dword_18F5B3000, v26, OS_LOG_TYPE_DEBUG, "CLMM,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0xEu);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990530);
          v77 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v77);
          if (v77 != (char *)buf)
            free(v77);
        }
      }
      ++*(_DWORD *)(a1 + 648);
      v10 = 1;
    }
  }
  v28 = (_OWORD *)(a1 + 120);
  v29 = *(double *)(a1 + 128);
  v30 = *(double *)(a2 + 8) - v29;
  if (v29 == 0.0)
    v30 = 0.0;
  if (v30 >= 0.0)
    v31 = v30;
  else
    v31 = 0.0;
  if (v31 <= 4.9)
  {
    if (v31 <= 75.0)
      goto LABEL_69;
  }
  else if (v31 <= 75.0 && *(_BYTE *)(a2 + 228) != 0)
  {
LABEL_69:
    v33 = 10000.0;
    if (*(_BYTE *)(a1 + 384) && *(_BYTE *)(a1 + 481))
    {
      if (*(_BYTE *)(a2 + 361))
        v34 = a3;
      else
        v34 = 1;
      if (v34)
        v33 = 10000.0;
      else
        v33 = 40000.0;
    }
    v35 = *(double *)(a2 + 256) * *(double *)(a2 + 256) + *(double *)(a2 + 248) * *(double *)(a2 + 248);
    if (v35 > v33)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990530);
        v36 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)v85 = sqrt(v33);
          *(_WORD *)&v85[8] = 1026;
          *(_DWORD *)&v85[10] = a3;
          _os_log_impl(&dword_18F5B3000, v36, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,distance > %{public}.0lfm,Intersection,%{public}d", buf, 0x12u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990530);
          v78 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v78);
          if (v78 != (char *)buf)
            free(v78);
        }
      }
      v37 = 0;
      v38 = (char *)(a1 + 652);
      *(_BYTE *)(a1 + 652) = 0;
      goto LABEL_167;
    }
    v47 = fabs(v7);
    v38 = (char *)(a1 + 652);
    if (*(_BYTE *)(a1 + 652))
    {
      v48 = *(double *)(a2 + 232);
      if (!*(_BYTE *)(a1 + 384))
        goto LABEL_109;
      if (v48 > 13.0)
      {
        v49 = *(double *)(a1 + 216);
        v50 = v49 <= 0.0 ? *(double *)(a2 + 96) : (v49 + *(double *)(a2 + 96)) * 0.5;
        if (sub_18F5BD064((double *)(a1 + 608), *(double *)(a1 + 272), *(double *)(a1 + 280), *(double *)(a2 + 152), *(double *)(a2 + 160), *(double *)(a2 + 72))- v31 * v50 > 100.0)
        {
          if (*(_BYTE *)(a1 + 96))
          {
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990530);
            v51 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              v52 = *(_DWORD *)(a1 + 648);
              *(_DWORD *)buf = 67240448;
              *(_DWORD *)v85 = v52;
              *(_WORD *)&v85[4] = 2050;
              *(double *)&v85[6] = (double)v52 + 18.0;
              _os_log_impl(&dword_18F5B3000, v51, OS_LOG_TYPE_DEBUG, "CLMM,jumpDistanceCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}.0f", buf, 0x12u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990530);
              v81 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v81);
              if (v81 != (char *)buf)
                free(v81);
            }
          }
          *(_DWORD *)(a1 + 648) += 18;
          v10 = 1;
        }
      }
      if (*v38)
      {
        v48 = *(double *)(a2 + 232);
LABEL_109:
        if (v48 <= 70.0)
        {
          if (*(int *)(a1 + 648) < 18)
          {
            if (!*(_BYTE *)(a2 + 265) || (v61 = v22 * 3.5, fabs(*(double *)(a2 + 256)) <= v61))
            {
              if (!v10 && v48 < 6.5)
              {
                *(_DWORD *)(a1 + 648) = 0;
                if (*(_BYTE *)(a1 + 96))
                {
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990530);
                  v71 = off_1EE172160;
                  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                  {
                    v72 = *(_DWORD *)(a1 + 648);
                    *(_DWORD *)buf = 67240192;
                    *(_DWORD *)v85 = v72;
                    _os_log_impl(&dword_18F5B3000, v71, OS_LOG_TYPE_DEBUG, "CLMM,reseting offRoadCount,%{public}d", buf, 8u);
                  }
                  if (sub_18F5C4AE0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172158 != -1)
                      dispatch_once(&qword_1EE172158, &unk_1E2990530);
                    v82 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v82);
                    if (v82 != (char *)buf)
                      free(v82);
                  }
                }
                LOBYTE(v10) = 0;
              }
              goto LABEL_160;
            }
            if (!*(_BYTE *)(a1 + 96))
              goto LABEL_159;
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990530);
            v62 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              v63 = *(_QWORD *)(a2 + 256);
              *(_DWORD *)buf = 134349312;
              *(_QWORD *)v85 = v63;
              *(_WORD *)&v85[8] = 2050;
              *(double *)&v85[10] = v61;
              _os_log_impl(&dword_18F5B3000, v62, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,isAmbiguous,1,acrossTrack,%{public}.1lf,acrossTrackThreshold,%{public}.1lf", buf, 0x16u);
            }
            if (!sub_18F5C4AE0(115, 2))
            {
LABEL_159:
              *v38 = 0;
LABEL_160:
              if (*(_BYTE *)(a1 + 841))
              {
                v37 = *v38;
                if (*v38 && !*(_BYTE *)(a2 + 265) && fabs(*(double *)(a2 + 256)) <= 10.0)
                  v37 = 1;
                else
                  *(_BYTE *)(a1 + 841) = 0;
              }
              else
              {
                *(_BYTE *)(a1 + 841) = sub_18F676E18(a1, a2, v20, v21, v10, v35, 400.0, 0.5, v25, v6, v47);
                v37 = *(_BYTE *)(a1 + 652);
              }
LABEL_167:
              v64 = *(_OWORD *)a2;
              v65 = *(_OWORD *)(a2 + 16);
              v66 = *(_OWORD *)(a2 + 48);
              *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 32);
              *(_OWORD *)(a1 + 168) = v66;
              *v28 = v64;
              *(_OWORD *)(a1 + 136) = v65;
              v67 = *(_OWORD *)(a2 + 64);
              v68 = *(_OWORD *)(a2 + 80);
              v69 = *(_OWORD *)(a2 + 112);
              *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 96);
              *(_OWORD *)(a1 + 232) = v69;
              *(_OWORD *)(a1 + 184) = v67;
              *(_OWORD *)(a1 + 200) = v68;
              std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 128));
              memcpy((void *)(a1 + 272), (const void *)(a2 + 152), 0x118uLL);
              *(_BYTE *)(a1 + 384) = v37;
              return *v38;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 == -1)
            {
LABEL_225:
              v83 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v83);
              if (v83 != (char *)buf)
                free(v83);
              goto LABEL_159;
            }
          }
          else
          {
            if (!*(_BYTE *)(a1 + 96))
              goto LABEL_159;
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990530);
            v56 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              v57 = *(_DWORD *)(a1 + 648);
              *(_DWORD *)buf = 67240448;
              *(_DWORD *)v85 = v57;
              *(_WORD *)&v85[4] = 2050;
              *(_QWORD *)&v85[6] = 0x4032000000000000;
              _os_log_impl(&dword_18F5B3000, v56, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,offRoadCount,%{public}d,threshold,%{public}.0f", buf, 0x12u);
            }
            if (!sub_18F5C4AE0(115, 2))
              goto LABEL_159;
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 == -1)
              goto LABEL_225;
          }
        }
        else
        {
          if (!*(_BYTE *)(a1 + 96))
            goto LABEL_159;
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990530);
          v53 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            v54 = *(_QWORD *)(a2 + 232);
            *(_DWORD *)buf = 134349312;
            *(_QWORD *)v85 = v54;
            *(_WORD *)&v85[8] = 2050;
            *(_QWORD *)&v85[10] = 0x4051800000000000;
            _os_log_impl(&dword_18F5B3000, v53, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,varFactor,%{public}.1lf,threshold,%{public}.1lf", buf, 0x16u);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_159;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
            goto LABEL_225;
        }
        dispatch_once(&qword_1EE172158, &unk_1E2990530);
        goto LABEL_225;
      }
    }
    if (*(_BYTE *)(a2 + 348))
    {
      v55 = 7.5;
      if (v22 <= 7.5)
        goto LABEL_140;
    }
    else
    {
      v55 = 35.0;
      v58 = 1225.0;
      if (v25 >= 30.0 || *(_BYTE *)(a1 + 600))
      {
LABEL_141:
        v59 = sub_18F676E18(a1, a2, v20, v21, v10, v35, v58, v55, v25, v6, v47);
        *(_BYTE *)(a1 + 652) = v59;
        if (v59)
        {
          if (*(_BYTE *)(a1 + 96))
          {
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990530);
            v60 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F5B3000, v60, OS_LOG_TYPE_DEBUG, "CLMM,startSnapping", buf, 2u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990530);
              v80 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v80);
              if (v80 != (char *)buf)
                free(v80);
            }
          }
          *(_DWORD *)(a1 + 648) = 0;
        }
        goto LABEL_160;
      }
      if (v22 <= 7.5)
      {
        v55 = 13.5;
        goto LABEL_140;
      }
    }
    v55 = 20.0;
LABEL_140:
    v58 = 400.0;
    goto LABEL_141;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990530);
    v39 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v40 = *(unsigned __int8 *)(a2 + 228);
      *(_DWORD *)buf = 134349824;
      *(double *)v85 = v31;
      *(_WORD *)&v85[8] = 2050;
      *(_QWORD *)&v85[10] = 0x401399999999999ALL;
      v86 = 2050;
      v87 = 0x4052C00000000000;
      v88 = 1026;
      v89 = v40;
      _os_log_impl(&dword_18F5B3000, v39, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,timeout,dT,%{public}.1lf,threshold1,%{public}.1lf,threshold2,%{public}.1lf,static,%{public}d", buf, 0x26u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990530);
      v76 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "CoreLocation: %s\n", v76);
      if (v76 != (char *)buf)
        free(v76);
    }
  }
  v38 = (char *)(a1 + 652);
  *(_BYTE *)(a1 + 652) = 0;
  v41 = *(_OWORD *)a2;
  v42 = *(_OWORD *)(a2 + 16);
  v43 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 168) = v43;
  *v28 = v41;
  *(_OWORD *)(a1 + 136) = v42;
  v44 = *(_OWORD *)(a2 + 64);
  v45 = *(_OWORD *)(a2 + 80);
  v46 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 232) = v46;
  *(_OWORD *)(a1 + 184) = v44;
  *(_OWORD *)(a1 + 200) = v45;
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 128));
  memcpy((void *)(a1 + 272), (const void *)(a2 + 152), 0x118uLL);
  *(_BYTE *)(a1 + 384) = 0;
  return *v38;
}

BOOL sub_18F676E18(uint64_t a1, uint64_t a2, char a3, char a4, unsigned __int8 a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  _BOOL8 result;
  double v14;
  double v15;
  float v16;
  float v17;

  if (a5 | *(unsigned __int8 *)(a2 + 265))
    return 0;
  if (*(_BYTE *)(a1 + 385) || a6 >= a7)
    return 0;
  result = 0;
  if (fabs(*(double *)(a2 + 256)) < a8 && a9 < 101.0)
  {
    v14 = *(double *)(a2 + 232);
    if (v14 < 3.0)
    {
      result = 0;
      v15 = *(double *)(a1 + 352);
      if (v15 >= 3.0)
        return result;
      if (*(double *)(a2 + 96) <= 1.67)
        return result;
      result = 0;
      if (*(double *)(a1 + 216) <= 1.67)
        return result;
      if (*(double *)(a2 + 104) < 0.0)
        return result;
      result = 0;
      if (*(double *)(a1 + 224) < 0.0 || a10 >= 30.0 || a11 >= 30.0)
        return result;
      if (!a3 || !a4 || *(double *)(a2 + 192) >= 20.0)
      {
        v16 = *(float *)(a2 + 180);
        v17 = 3.0;
LABEL_23:
        if (v16 > v17)
          return 1;
        result = 0;
        if (v14 < 1.0 && v15 < 1.0)
          return v16 > 1.1 || v16 == 0.0;
        return result;
      }
      if (a10 < 40.0)
      {
        v16 = *(float *)(a2 + 180);
        v17 = 2.5;
        goto LABEL_23;
      }
    }
    return 0;
  }
  return result;
}

void sub_18F676F68(uint64_t a1, uint64_t a2, uint64_t *a3, double *a4, double *a5, double *a6, double *a7, uint64_t a8, char a9)
{
  double *v16;
  double *v17;
  uint64_t v18;
  NSObject *v19;
  double v20;
  float v21;
  double v22;
  double v23;
  double v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  __float2 v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  double v38;
  double v39;
  double v40;
  int v41;
  float v42;
  float v43;
  float v44;
  __float2 v45;
  double v46;
  char *v47;
  uint8_t buf[1632];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 16) = 0;
  v16 = (double *)(a8 + 40);
  v17 = (double *)(a8 + 32);
  v18 = sub_18F5BD37C((double *)(a1 + 608), (double *)(a8 + 40), (double *)(a8 + 32), (double *)(a8 + 48), *((double *)a3 + 4), *((double *)a3 + 5), a4[9], a4[7], a4[8], a4[9]);
  if (!*a3)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990530);
    v19 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_DEFAULT, "#Warning CLMM, NULL road", buf, 2u);
    }
    v18 = sub_18F5C4AE0(115, 2);
    if ((_DWORD)v18)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990530);
      v47 = (char *)_os_log_send_and_compose_impl();
      v18 = sub_18F5F2740("Generic", 1, 0, 2, "void CLScoredMapMatcher::calculateScoreAndVarFactor(CLMapDataUtil::CovarInvDet &, const struct CLMapGeometry::DistanceQueryResult &, const CLMapCrumb &, double &, double &, double &, CLMapDataUtil::MapMatcherScore &, BOOL)", "CoreLocation: %s\n", v47);
      if (v47 != (char *)buf)
        free(v47);
    }
  }
  v20 = *(double *)a3;
  v21 = *((float *)a3 + 6);
  v22 = *v16;
  v23 = *v17;
  if (*v16 == 0.0 && v23 == 0.0)
  {
    *a5 = 0.0;
    v24 = 0.0;
    goto LABEL_32;
  }
  if ((a9 & 1) != 0)
    v25 = 80.0;
  else
    v25 = sub_18F675740(v18, *(_DWORD *)(*(_QWORD *)&v20 + 20), *(unsigned __int8 *)(*(_QWORD *)&v20 + 16));
  v26 = v22 * v22 + v23 * v23;
  v27 = sqrtf(v26);
  v28 = v23;
  v29 = v22;
  v30 = atan2f(v28, v29);
  v31 = v21 * 0.0174532925;
  v32 = __sincosf_stret(v30 - v31);
  v33 = v27 * v32.__cosval;
  v34 = v27 * v32.__sinval;
  if (*(_BYTE *)(a1 + 753))
  {
    v35 = v25 * 0.5;
    v36 = fabsf(v34);
    if (*(_BYTE *)(*(_QWORD *)&v20 + 16))
    {
      if (v36 < v35)
        goto LABEL_16;
      v42 = -v35;
      if (v34 < 0.0)
        v42 = v25 * 0.5;
      goto LABEL_29;
    }
    v39 = *(double *)(a1 + 768);
    v40 = a4[1];
    if (v39 == 0.0 || vabdd_f64(v40, v39) > 120.0)
    {
      v41 = sub_18F697BA0(a4[7], a4[8]);
      *(_DWORD *)(a1 + 760) = v41;
      *(double *)(a1 + 768) = v40;
      if (v41)
        goto LABEL_23;
    }
    else
    {
      v41 = *(_DWORD *)(a1 + 760);
      if (v41)
      {
LABEL_23:
        if (v41 != 2 || v34 <= 0.0)
        {
          if (v34 >= 0.0)
            goto LABEL_30;
          if (v36 >= v35)
          {
            *a7 = v35;
            v34 = v35 + v34;
            goto LABEL_30;
          }
          v38 = v36;
          goto LABEL_19;
        }
        if (v34 >= v35)
        {
          *a7 = (float)-v35;
          v34 = v34 - v35;
          goto LABEL_30;
        }
        v37 = -v36;
LABEL_18:
        v38 = v37;
LABEL_19:
        *a7 = v38;
        v34 = 0.0;
LABEL_30:
        v43 = sqrtf((float)(v33 * v33) + (float)(v34 * v34));
        v44 = atan2f(v34, v33);
        v45 = __sincosf_stret(v44 + v31);
        *v16 = (float)(v43 * v45.__cosval);
        *v17 = (float)(v43 * v45.__sinval);
        goto LABEL_31;
      }
    }
    v42 = v25 * 0.25;
    if (v36 < (float)(v25 * 0.25))
    {
LABEL_16:
      v37 = -v36;
      if (v34 < 0.0)
        v37 = v36;
      goto LABEL_18;
    }
    if (v34 >= 0.0)
      v42 = -v42;
LABEL_29:
    *a7 = v42;
    v34 = v34 + v42;
    goto LABEL_30;
  }
LABEL_31:
  *a5 = v33;
  v24 = v34;
LABEL_32:
  *a6 = v24;
  if (*(_BYTE *)(a2 + 40))
  {
    v46 = fmod(a4[13] - v21, 360.0);
    if (v46 < 0.0)
      v46 = v46 + 360.0;
    if (v46 > 180.0)
      v46 = v46 + -360.0;
    *(double *)(a8 + 56) = fabs(v46);
  }
  sub_18F6E4CD8(a2, a8);
}

uint64_t sub_18F6773E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  uint64_t v9;
  double v10;
  __n128 v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  int v19;
  char v20;
  int v21;
  double v22;
  double v23;
  double v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  char v29;
  int v30;
  double v31;
  BOOL v32;
  int v33;
  int v34;
  double v35;
  BOOL v36;
  char v37;
  BOOL v38;
  double v39;
  double v40;
  float v41;
  float v42;
  char v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  double v68[2];

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v57 = v4;
  v58 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *(unsigned __int8 *)(a2 + 229);
  v9 = *(_QWORD *)(a2 + 8);
  if (*(unsigned __int8 *)(a1 + 816) != v8 || *(double *)(a1 + 832) == 0.0)
  {
    *(_QWORD *)(a1 + 832) = v9;
    *(_BYTE *)(a1 + 816) = v8;
  }
  *(_QWORD *)(a1 + 824) = v9;
  ++*(_DWORD *)(a1 + 100);
  (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v4 + 48))(v4, a2, 450.0);
  v54 = (uint64_t)&v54;
  v55 = &v54;
  v56 = 0;
  v50 = (_QWORD *)(a1 + 552);
  if (*(_QWORD *)(a1 + 552))
  {
    v10 = *(double *)(a2 + 8) - *(double *)(a1 + 592);
    if (v10 <= 5.0
      && ((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, _QWORD, uint64_t, double, double))(*(_QWORD *)v4 + 72))(v4, &v54, v50, *(unsigned __int8 *)(a1 + 568), 1, *(double *)(a1 + 576), v10 * ((*(double *)(a2 + 96) + *(double *)(a1 + 584)) * 0.5)) & 1) == 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      v16 = 0;
      ++*(_DWORD *)(a1 + 108);
      goto LABEL_81;
    }
  }
  sub_18F6742D0(a1, a2);
  v49 = a1 + 656;
  sub_18F6E4484(a1 + 656, a2, *(unsigned __int8 *)(a1 + 752));
  v11.n128_u64[0] = *(_QWORD *)(a2 + 80);
  v12 = *(double *)(a2 + 200);
  if (v12 > 0.0)
  {
    v13 = *(double *)(a2 + 208);
    if (v13 > 0.0)
      v11.n128_f64[0] = sqrt(v13 / 2.45 * (v13 / 2.45) + v12 / 2.45 * (v12 / 2.45));
  }
  v14 = v11.n128_f64[0] * 4.0;
  v11.n128_u64[0] = 0x4052C00000000000;
  if (v14 >= 75.0)
  {
    v11.n128_f64[0] = v14;
    if (v14 > 249.9999)
      v11.n128_u64[0] = 0x406F3FFF2E48E8A7;
  }
  v51 = (uint64_t)&v51;
  v52 = &v51;
  v53 = 0;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, __n128))(*(_QWORD *)v4 + 64))(v4, &v51, a2, 1, v11);
  v16 = v15;
  if ((v15 & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    ++*(_DWORD *)(a1 + 108);
    goto LABEL_80;
  }
  v48 = a2;
  v17 = v52;
  if (v52 == &v51)
  {
LABEL_79:
    *(_OWORD *)(v48 + 152) = *(_OWORD *)(v48 + 56);
    *(_QWORD *)(v48 + 168) = *(_QWORD *)(v48 + 104);
    sub_18F677990(v50);
    ++*(_DWORD *)(a1 + 104);
    goto LABEL_80;
  }
  v47 = v15;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0.0;
  v23 = 0.0;
  v24 = 0.0;
  v25 = &v51;
  do
  {
    if (*(_BYTE *)(v17[2] + 17))
      goto LABEL_65;
    v59 = 0.0;
    v60 = 0;
    v61 = 0;
    v62 = 0x3FF0000000000000;
    v63 = 0u;
    v64 = 0u;
    v65 = 0;
    sub_18F676F68(a1, v49, v17 + 2, (double *)v48, v68, (double *)&v67, (double *)&v66, (uint64_t)&v59, 0);
    v26 = (_QWORD *)*v50;
    if (!*v50)
    {
      v30 = 1;
      v31 = v59;
      goto LABEL_34;
    }
    v27 = *(_QWORD *)v17[2];
    if (*v26 == v27)
      goto LABEL_31;
    v28 = v55;
    if (v55 == &v54)
      goto LABEL_29;
    v29 = 0;
    do
    {
      if (v28[2] == v27 && *((unsigned __int8 *)v28 + 24) == *((unsigned __int8 *)v17 + 36))
        v29 = 1;
      v28 = (uint64_t *)v28[1];
    }
    while (v28 != &v54);
    if ((v29 & 1) != 0)
    {
LABEL_31:
      v30 = 1;
      v31 = v59;
      if (!*((_BYTE *)v17 + 37))
LABEL_32:
        v31 = v31 / 10.0;
    }
    else
    {
LABEL_29:
      v30 = 0;
      v31 = v59 / 500.0;
      if (!*((_BYTE *)v17 + 37))
        goto LABEL_32;
    }
LABEL_34:
    v22 = v22 + v59;
    if (*((_BYTE *)v17 + 37))
      v32 = 1;
    else
      v32 = v26 == 0;
    v33 = v32;
    if (v31 > v23)
      v34 = v30;
    else
      v34 = v21;
    if (v31 > v23)
      v35 = v31;
    else
      v35 = v23;
    if (v31 <= v23)
      v33 = v19;
    if (*((_BYTE *)v17 + 37))
      v36 = 1;
    else
      v36 = v26 == 0;
    v37 = v36;
    v38 = v31 <= v24;
    if (v31 <= v24)
      v21 = v34;
    else
      v25 = v17;
    if (v31 > v24)
      v23 = v24;
    else
      v23 = v35;
    if (v31 > v24)
    {
      v24 = v31;
      v20 = v30;
    }
    if (v38)
      v19 = v33;
    else
      v18 = v37;
LABEL_65:
    v17 = (uint64_t *)v17[1];
  }
  while (v17 != &v51);
  v16 = v47;
  if (v25 == &v51)
    goto LABEL_79;
  sub_18F6F03A8(v48, v25 + 2);
  v39 = v24 * 500.0;
  if ((v20 & 1) != 0)
    v39 = v24;
  v40 = v23 * 500.0;
  if ((v21 & 1) != 0)
    v40 = v23;
  if ((v18 & 1) == 0)
    v39 = v39 * 10.0;
  if ((v19 & 1) == 0)
    v40 = v40 * 10.0;
  v41 = v39 / v22;
  v42 = v39 / v40;
  *(float *)(v48 + 176) = v41;
  *(float *)(v48 + 180) = v42;
  sub_18F623A40(v50, v25 + 2);
  *(_BYTE *)(a1 + 568) = *((_BYTE *)v25 + 36);
  *(_QWORD *)(a1 + 576) = v25[8];
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(v48 + 96);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(v48 + 8);
  v67 = 0;
  v68[0] = 0.0;
  v66 = 0;
  v59 = 0.0;
  v60 = 0;
  v61 = 0;
  v62 = 0x3FF0000000000000;
  v63 = 0u;
  v64 = 0u;
  v65 = 0;
  sub_18F676F68(a1, v49, v25 + 2, (double *)v48, v68, (double *)&v67, (double *)&v66, (uint64_t)&v59, 0);
  *(_OWORD *)(v48 + 288) = *(_OWORD *)(v48 + 152);
  *(_QWORD *)(v48 + 304) = *(_QWORD *)(v48 + 168);
  v43 = sub_18F675790(a1, v48, 0);
  *(_BYTE *)(v48 + 264) = v43;
  if ((v43 & 1) == 0)
    ++*(_DWORD *)(a1 + 104);
  v5 = v58;
LABEL_80:
  sub_18F64F950(&v51);
LABEL_81:
  sub_18F677A18(&v54);
  if (v5)
  {
    v44 = (unint64_t *)&v5->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v16;
}

void sub_18F677948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  sub_18F64F950((uint64_t *)va);
  sub_18F677A18((uint64_t *)va1);
  sub_18F5D6004((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_18F677990(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

os_log_t sub_18F6779EC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

void sub_18F677A18(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_18F5D6004((uint64_t)(v3 + 4));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_18F677A88()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  CFTypeRef arg;

  v0 = operator new();
  sub_18F6BD47C((char *)v0, CFSTR("com.apple.locationd"), 0);
  *(_QWORD *)v0 = &off_1E298F0D0;
  *(_QWORD *)(v0 + 136) = 0;
  *(_QWORD *)(v0 + 144) = 0;
  qword_1EE172BF0 = v0;
  arg = 0;
  if (sub_18F5C7468(v0, CFSTR("KnownClients"), (uint64_t *)&arg, -1))
  {
    if (arg)
      CFAutorelease(arg);
    (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)qword_1EE172BF0 + 880))(qword_1EE172BF0, CFSTR("KnownClients"), 0xFFFFFFFFLL);
  }
  v1 = qword_1EE172BF0;
  v2 = (_QWORD *)operator new();
  *v2 = &off_1E298FF98;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = v1;
  v3 = *(std::__shared_weak_count **)(v1 + 144);
  *(_QWORD *)(v1 + 136) = v1;
  *(_QWORD *)(v1 + 144) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_18F677BA4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_18F677BB0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_18F677BE4(_QWORD *a1@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  if (qword_1EE172BE8 != -1)
    dispatch_once_f(&qword_1EE172BE8, 0, (dispatch_function_t)sub_18F677A88);
  v2 = *(_QWORD *)(qword_1EE172BF0 + 144);
  *a1 = *(_QWORD *)(qword_1EE172BF0 + 136);
  a1[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

_QWORD *sub_18F677C54(_QWORD *a1)
{
  *a1 = &off_1E298F0D0;
  sub_18F5D6004((uint64_t)(a1 + 17));
  return sub_18F66EC60((uint64_t)a1);
}

void sub_18F677C84(_QWORD *a1)
{
  *a1 = &off_1E298F0D0;
  sub_18F5D6004((uint64_t)(a1 + 17));
  sub_18F66EC60((uint64_t)a1);
  JUMPOUT(0x194002D30);
}

void sub_18F677CCC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194002D30);
}

uint64_t sub_18F677CF4(uint64_t a1, uint64_t a2)
{
  if (sub_18F64FAAC(a2, (uint64_t)&unk_1E298E128))
    return a1 + 24;
  else
    return 0;
}

void sub_18F678480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F678500(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  objc_msgSend_setIdentityToken_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
  objc_msgSend_setStorageToken_(*(void **)(a1 + 32), v5, 0, v6);
  return objc_msgSend_manageConnection(*(void **)(a1 + 32), v7, v8, v9);
}

void sub_18F678738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F678750(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_cleanup(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_18F678918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F678934(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 40))
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990550);
    v2 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v15 = 2082;
      *(_QWORD *)&v15[2] = "";
      v16 = 2050;
      v17 = v3;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#serviceSession destroying connection (dealloc)\", \"self\":\"%{public}p\"}", buf, 0x1Cu);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990550);
    }
    v4 = qword_1ECD8E750;
    if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
    {
      v5 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v15 = 2082;
      *(_QWORD *)&v15[2] = "";
      v16 = 2050;
      v17 = v5;
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#serviceSession destroying connection (dealloc)", "{\"msg%{public}.0s\":\"#serviceSession destroying connection (dealloc)\", \"self\":\"%{public}p\"}", buf, 0x1Cu);
    }
    sub_18F619E48("kCLConnectionMessageDestroyUponDisconnection", buf);
    v13 = *(std::__shared_weak_count **)v15;
    if (*(_QWORD *)v15)
    {
      v6 = (unint64_t *)(*(_QWORD *)v15 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    CLConnection::sendMessage();
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    CLConnection::deferredDelete(*(CLConnection **)(a1 + 40));
    v10 = *(std::__shared_weak_count **)v15;
    if (*(_QWORD *)v15)
    {
      v11 = (unint64_t *)(*(_QWORD *)v15 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_18F678B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F678D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F67912C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  id *v27;

  sub_18F5D6004((uint64_t)&a12);
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18F6791B8(uint64_t a1, uint64_t *a2)
{
  id Weak;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  Weak = objc_loadWeak((id *)(a1 + 40));
  if (Weak)
  {
    v5 = Weak;
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990550);
    v6 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void *)objc_msgSend_identityToken(*(void **)(a1 + 32), v7, v8, v9);
      *(_DWORD *)buf = 68289538;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2082;
      v36 = objc_msgSend_UTF8String(v10, v11, v12, v13);
      v37 = 2050;
      v38 = v5;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#serviceSession Default handler received message\", \"identityToken\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x26u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990550);
    }
    v14 = qword_1ECD8E750;
    if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
    {
      v18 = (void *)objc_msgSend_identityToken(*(void **)(a1 + 32), v15, v16, v17);
      v22 = objc_msgSend_UTF8String(v18, v19, v20, v21);
      *(_DWORD *)buf = 68289538;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2082;
      v36 = v22;
      v37 = 2050;
      v38 = v5;
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#serviceSession Default handler received message", "{\"msg%{public}.0s\":\"#serviceSession Default handler received message\", \"identityToken\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x26u);
    }
    v23 = (std::__shared_weak_count *)a2[1];
    v29 = *a2;
    v30 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    objc_msgSend_handleMessage_(v5, v15, (uint64_t)&v29, v17);
    v26 = v30;
    if (v30)
    {
      v27 = (unint64_t *)&v30->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
}

void sub_18F6793E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18F6797E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F679A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  sub_18F5D6004((uint64_t)&a9);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

os_log_t sub_18F679BB4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F679BE0@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F679C40(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F679C2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F679C40(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E298FE10;
  sub_18F679CA0((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F679C8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F679CA0(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F5D5990(__p, __s);
  MEMORY[0x194002B44](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F679CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F67A748()
{
  const char *v0;
  uint64_t v1;

  qword_1ECD8F860 = (uint64_t)objc_alloc_init(MEMORY[0x1E0CB3578]);
  return objc_msgSend_setDateFormat_((void *)qword_1ECD8F860, v0, (uint64_t)CFSTR("yyyy,MM,dd,HH,mm,ss.SSS"), v1);
}

os_log_t sub_18F67ACA4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "Gathering");
  qword_1EE1720A8 = (uint64_t)result;
  return result;
}

os_log_t sub_18F67E30C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "Emergency");
  qword_1EE172098 = (uint64_t)result;
  return result;
}

uint64_t sub_18F67E910(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  NSObject *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v76;
  uint8_t buf[1640];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0xBFF0000000000000;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(_OWORD *)(a1 + 56) = xmmword_18F772330;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 87) = 0;
  if (objc_msgSend_timestamp(a2, (const char *)a2, a3, a4))
  {
    v14 = (void *)objc_msgSend_timestamp(a2, v11, v12, v13);
    objc_msgSend_timeIntervalSinceReferenceDate(v14, v15, v16, v17);
    v22 = v21;
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29905B0);
    v23 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v23, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLGeoMapLocation,loc timestamp is unexpectedly nil,setting fiOSTime to -1.0", buf, 2u);
    }
    v22 = -1.0;
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29905B0);
      v76 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "CLGeoMapLocation::CLGeoMapLocation(const CLTripSegmentLocation * _Nonnull)", "CoreLocation: %s\n", v76);
      if (v76 != (char *)buf)
        free(v76);
    }
  }
  *(double *)a1 = v22;
  objc_msgSend_latitude(a2, v18, v19, v20);
  *(_QWORD *)(a1 + 8) = v24;
  objc_msgSend_longitude(a2, v25, v26, v27);
  *(_QWORD *)(a1 + 16) = v28;
  objc_msgSend_course(a2, v29, v30, v31);
  *(_QWORD *)(a1 + 32) = v32;
  objc_msgSend_courseAccuracy(a2, v33, v34, v35);
  *(_QWORD *)(a1 + 40) = v36;
  objc_msgSend_speed(a2, v37, v38, v39);
  *(_QWORD *)(a1 + 48) = v40;
  objc_msgSend_speedAccuracy(a2, v41, v42, v43);
  *(_QWORD *)(a1 + 56) = v44;
  objc_msgSend_altitude(a2, v45, v46, v47);
  *(_QWORD *)(a1 + 64) = v48;
  objc_msgSend_altitudeAccuracy(a2, v49, v50, v51);
  *(_QWORD *)(a1 + 72) = v52;
  objc_msgSend_horizontalAccuracy(a2, v53, v54, v55);
  *(_QWORD *)(a1 + 24) = v56;
  *(_DWORD *)(a1 + 88) = objc_msgSend_locType(a2, v57, v58, v59);
  *(_DWORD *)(a1 + 96) = objc_msgSend_referenceFrame(a2, v60, v61, v62);
  *(_BYTE *)(a1 + 92) = objc_msgSend_isOriginalLocationType(a2, v63, v64, v65);
  *(_BYTE *)(a1 + 93) = objc_msgSend_isInertialIntegrated(a2, v66, v67, v68);
  *(_BYTE *)(a1 + 94) = objc_msgSend_isLinearInterpolated(a2, v69, v70, v71);
  *(_DWORD *)(a1 + 100) = objc_msgSend_signalEnvironmentType(a2, v72, v73, v74);
  return a1;
}

BOOL sub_18F67EBBC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 40);
  while (v6 != v7)
    v6 = sub_18F5D6004(v6 - 16);
  *(_QWORD *)(a1 + 48) = v7;
  if (objc_msgSend_count(a2, (const char *)a2, a3, a4))
  {
    v10 = 0;
    do
    {
      if (v10)
        v11 = objc_msgSend_objectAtIndexedSubscript_(a2, v8, v10 - 1, v9);
      else
        v11 = 0;
      v12 = (void *)objc_msgSend_objectAtIndexedSubscript_(a2, v8, v10, v9);
      sub_18F67EC6C(a1, v11, v12);
      ++v10;
    }
    while (objc_msgSend_count(a2, v13, v14, v15) > v10);
  }
  return *(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 48);
}

BOOL sub_18F67EC6C(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v13;
  void *v14;

  v14 = a3;
  if (a3)
  {
    sub_18F67F298(&v14, &v13);
    if (a2)
    {
      objc_msgSend_distanceFromLocation_(v14, v6, a2, v7);
      *(_QWORD *)(v13 + 80) = v8;
    }
    sub_18F623AB8((char **)(a1 + 40), &v13);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return a3 != 0;
}

void sub_18F67ED1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_18F67ED30(uint64_t a1, uint64_t a2, int a3, int a4, double a5, double a6)
{
  __int128 *v7;
  __int128 *i;
  double *v13;
  double v14;

  v7 = *(__int128 **)(a1 + 40);
  for (i = *(__int128 **)(a1 + 48); v7 != i; ++v7)
  {
    v13 = *(double **)v7;
    if (*(_QWORD *)v7)
    {
      v14 = *v13;
      if (*v13 > a6)
        return *(_QWORD *)a2 != *(_QWORD *)(a2 + 8);
      if (v14 > a5 || a3 != 0)
      {
        if (v14 >= a6 && a4 == 0)
          return *(_QWORD *)a2 != *(_QWORD *)(a2 + 8);
        if (v14 >= a5 && v14 <= a6)
          sub_18F623AB8((char **)a2, v7);
      }
    }
  }
  return *(_QWORD *)a2 != *(_QWORD *)(a2 + 8);
}

void sub_18F67EDDC(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  char *v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  int v60;
  __int16 v61;
  uint64_t *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29905B0);
  v4 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 120);
    v6 = *(_QWORD *)(a1 + 128);
    v7 = *(_QWORD *)(a1 + 136);
    v8 = *(_QWORD *)(a1 + 144);
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 104);
    v13 = *(_QWORD *)(a1 + 112);
    v15 = *(_QWORD *)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    v17 = *(unsigned __int8 *)(a1 + 64);
    v18 = *(unsigned __int8 *)(a1 + 65);
    v19 = *(_QWORD *)(a1 + 72);
    v20 = *(_QWORD *)(a1 + 80);
    v21 = *(_QWORD *)(a1 + 88);
    v22 = *(unsigned __int8 *)(a1 + 96);
    if (*((char *)a2 + 23) >= 0)
      v23 = a2;
    else
      v23 = (uint64_t *)*a2;
    *(_DWORD *)buf = 134353667;
    v26 = v9;
    v27 = 1026;
    v28 = v5;
    v29 = 2049;
    v30 = v6;
    v31 = 2049;
    v32 = v7;
    v33 = 2050;
    v34 = v8;
    v35 = 2050;
    v36 = v14;
    v37 = 2049;
    v38 = v10;
    v39 = 2049;
    v40 = v11;
    v41 = 2050;
    v42 = v12;
    v43 = 2050;
    v44 = v13;
    v45 = 2050;
    v46 = v15;
    v47 = 2050;
    v48 = v16;
    v49 = 1026;
    v50 = v17;
    v51 = 1026;
    v52 = v18;
    v53 = 2050;
    v54 = v19;
    v55 = 2050;
    v56 = v20;
    v57 = 2050;
    v58 = v21;
    v59 = 1026;
    v60 = v22;
    v61 = 2082;
    v62 = v23;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,%{public}.1lf,type,%{public}d,rawLL,%{private}.8lf,%{private}.8lf,rawCourse,%{public}.3lf,speed,%{public}.3lf,snapLL,%{private}.8lf,%{private}.8lf,snapCourse,%{public}.3lf,ratio,%{public}.6lf,projection,%{public}.6lf,score,%{public}.12lf,valid,%{public}d,forward,%{public}d,deltaN,%{public}.3lf,deltaE,%{public}.3lf,deltaCourse,%{public}.3lf,original,%{public}d,str,%{public}s", buf, 0xB0u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29905B0);
    v24 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLGeoMapSnapData::outputDebugLog(const std::string &) const", "CoreLocation: %s\n", v24);
    if (v24 != (char *)buf)
      free(v24);
  }
}

id sub_18F67F160(uint64_t a1, int a2)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  CLTripSegmentLocation *v9;
  const char *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;

  v4 = objc_alloc(MEMORY[0x1E0C99D68]);
  v8 = (id)objc_msgSend_initWithTimeIntervalSinceReferenceDate_(v4, v5, v6, v7, *(double *)(a1 + 16));
  v9 = [CLTripSegmentLocation alloc];
  v11 = (id)objc_msgSend_initWithTime_latitude_longitude_horizontalAccuracy_course_courseAccuracy_speed_speedAccuracy_altitude_altitudeAccuracy_locType_(v9, v10, (uint64_t)v8, *(unsigned int *)(a1 + 120), *(double *)(a1 + 24), *(double *)(a1 + 32), -1.0, *(double *)(a1 + 40), -1.0, *(double *)(a1 + 104), -1.0, -1.0, 0xBFF0000000000000);
  objc_msgSend_setSignalEnvironmentType_(v11, v12, *(unsigned int *)(a1 + 160), v13);
  if (*(_QWORD *)a1)
  {
    objc_msgSend_setMapsRoadClass_(v11, v14, *(unsigned int *)(*(_QWORD *)a1 + 20), v16);
    objc_msgSend_setMapsFormOfWay_(v11, v17, *(unsigned int *)(*(_QWORD *)a1 + 24), v18);
  }
  objc_msgSend_setRawLatitude_(v11, v14, v15, v16, *(double *)(a1 + 128));
  objc_msgSend_setRawLongitude_(v11, v19, v20, v21, *(double *)(a1 + 136));
  if (a2)
  {
    objc_msgSend_setCourseAccuracy_(v11, v22, v23, v24, *(double *)(a1 + 144));
    objc_msgSend_setSpeedAccuracy_(v11, v25, v26, v27, *(double *)(a1 + 112));
    objc_msgSend_setAltitude_(v11, v28, v29, v30, *(double *)(a1 + 48));
    objc_msgSend_setAltitudeAccuracy_(v11, v31, v32, v33, *(double *)(a1 + 56));
  }
  return v11;
}

os_log_t sub_18F67F26C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

_QWORD *sub_18F67F298@<X0>(void **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;

  v4 = operator new(0x80uLL);
  result = sub_18F67F2F0(v4, a1, v5, v6);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18F67F2DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F67F2F0(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E298FDD8;
  sub_18F67E910((uint64_t)(a1 + 3), *a2, a3, a4);
  return a1;
}

void sub_18F67F328(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F67F33C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FDD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18F67F34C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FDD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194002D30);
}

id *sub_18F67F384(id *a1)
{
  if (*a1)
  {

    *a1 = 0;
  }
  return a1;
}

uint64_t sub_18F67F3B8(void **a1, int a2, double *a3, double *a4, double *a5, int a6, double a7, double a8, double a9)
{
  uint64_t result;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  double v22;
  double v23;
  double v24;
  double v25;

  *a3 = a7;
  *a4 = a8;
  *a5 = a9;
  if (a2 == 2)
    return 2;
  result = sub_18F61A578(a7, a8);
  if ((_DWORD)result)
  {
    result = objc_msgSend_isLocationShiftRequiredForCoordinate_(MEMORY[0x1E0D27178], v18, v19, v20, a7, a8);
    if ((_DWORD)result)
    {
      v24 = a7;
      v25 = a8;
      v23 = a9;
      if (!*a1)
        *a1 = objc_alloc_init(MEMORY[0x1E0D27178]);
      if (a6 >= 1)
      {
        while (!objc_msgSend_shiftCoordinate_accuracy_shiftedCoordinate_shiftedAccuracy_(*a1, v21, (uint64_t)&v24, (uint64_t)&v23, a7, a8, a9))
        {
          if (!--a6)
            return 1;
        }
        v22 = v25;
        *a3 = v24;
        *a4 = v22;
        *a5 = v23;
        return 2;
      }
      return 1;
    }
  }
  return result;
}

BOOL sub_18F67F4C0(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  _BOOL8 result;
  double v15;
  double v16;
  double v17;
  double v18;

  v17 = 0.0;
  v18 = 0.0;
  v16 = 0.0;
  result = sub_18F5BD37C(a1, &v17, &v18, &v16, a6, a7, 0.0, a8, a9, 0.0);
  if (result)
    return sub_18F71AAC4(a1, a2, a3, &v15, a4, a5, 0.0, v17, v18, v16);
  return result;
}

uint64_t sub_18F67F568(unsigned __int8 *a1, char *a2, void *a3, void *a4)
{
  void *v4;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  double v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  const char *v66;
  uint64_t v67;
  __double2 v68;
  double v69;
  double v70;
  unint64_t j;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  int isValid;
  uint64_t v81;
  double v82;
  double v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  double v97;
  double v98;
  char *v99;
  uint64_t v100;
  int v101;
  double v102;
  unint64_t v103;
  unint64_t v104;
  __int128 v105;
  unint64_t v106;
  NSObject *v107;
  double v108;
  unint64_t v109;
  double v110;
  char v111;
  char v112;
  double v113;
  double v114;
  double *v115;
  _QWORD *v116;
  unint64_t i;
  unint64_t v118;
  char v119;
  double v120;
  char v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double *v126;
  unint64_t v127;
  double v128;
  char v129;
  char v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double *v136;
  unint64_t v137;
  char v138;
  char v139;
  double v140;
  double v141;
  double *v142;
  double v143;
  double v144;
  double *v145;
  double v146;
  __double2 v147;
  unsigned int v148;
  unsigned int v149;
  const char *v150;
  uint64_t v151;
  double v152;
  double v153;
  __double2 v154;
  double v155;
  double v156;
  __double2 v157;
  float cosval;
  float sinval;
  __double2 v160;
  unsigned int v161;
  unsigned int v162;
  double v163;
  double v164;
  float v165;
  double v166;
  double v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  void *v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  double v191;
  double v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  long double v200;
  double v201;
  double v202;
  double v203;
  uint64_t v204;
  void *v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  double v211;
  double v212;
  __double2 v213;
  double v214;
  int v215;
  NSObject *v216;
  unint64_t v217;
  unint64_t v218;
  __int128 v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  __int128 v228;
  char *v229;
  NSObject *v230;
  NSObject *v231;
  char *v232;
  NSObject *v233;
  char *v234;
  int v235;
  NSObject *v236;
  unint64_t v237;
  unint64_t v238;
  __int128 v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  __int128 v263;
  __int128 v264;
  NSObject *v265;
  double v266;
  char *v267;
  char *v268;
  char *v269;
  NSObject *v270;
  NSObject *v271;
  const char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  const char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  NSObject *v282;
  double v283;
  double *v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  unint64_t v294;
  uint64_t v295;
  char v296;
  char v297;
  double v298;
  void *v299;
  const char *v300;
  uint64_t v301;
  const char *v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  NSObject *v306;
  const char *v307;
  uint64_t v308;
  NSObject *v309;
  unint64_t v310;
  void *v311;
  const char *v312;
  uint64_t v313;
  uint64_t v314;
  void *v315;
  const char *v316;
  uint64_t v317;
  uint64_t v318;
  const char *v319;
  uint64_t v320;
  uint64_t v321;
  double v322;
  void *v323;
  const char *v324;
  uint64_t v325;
  uint64_t v326;
  double v327;
  double v328;
  unint64_t v329;
  const char *v330;
  uint64_t v331;
  uint64_t v332;
  const char *v333;
  uint64_t v334;
  void *v335;
  const char *v336;
  uint64_t v337;
  uint64_t v338;
  void *v339;
  const char *v340;
  uint64_t v341;
  uint64_t v342;
  const char *v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  double v347;
  double v348;
  void *v349;
  const char *v350;
  uint64_t v351;
  uint64_t v352;
  double v353;
  const char *v354;
  uint64_t v355;
  uint64_t v356;
  void *v357;
  const char *v358;
  uint64_t v359;
  uint64_t v360;
  double v361;
  double v362;
  double v363;
  uint64_t v364;
  __double2 v365;
  const char *v366;
  uint64_t v367;
  uint64_t v368;
  void *v369;
  const char *v370;
  uint64_t v371;
  uint64_t v372;
  double v373;
  double v374;
  const char *v375;
  uint64_t v376;
  uint64_t v377;
  void *v378;
  const char *v379;
  uint64_t v380;
  uint64_t v381;
  double v382;
  double v383;
  double v384;
  unint64_t v385;
  double v386;
  char v387;
  char v388;
  uint64_t v389;
  uint64_t v390;
  double v391;
  void *v392;
  const char *v393;
  uint64_t v394;
  uint64_t v395;
  double v396;
  double v397;
  const char *v398;
  uint64_t v399;
  uint64_t v400;
  void *v401;
  const char *v402;
  uint64_t v403;
  uint64_t v404;
  double v405;
  double v406;
  double v407;
  double v408;
  CLTripSegmentLocation *v409;
  const char *v410;
  uint64_t v411;
  uint64_t v412;
  const char *v413;
  uint64_t v414;
  double v415;
  void *v416;
  const char *v417;
  uint64_t v418;
  const char *v419;
  uint64_t v420;
  NSObject *v421;
  const char *v422;
  uint64_t v423;
  uint64_t v424;
  char *v425;
  NSObject *v426;
  NSObject *v427;
  double v428;
  double v429;
  double v430;
  double v431;
  NSObject *v432;
  NSObject *v433;
  NSObject *v434;
  NSObject *v435;
  uint64_t v436;
  __int128 v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t *v441;
  double v442;
  char v443;
  uint64_t v444;
  uint64_t v445;
  char v446;
  double v447;
  double *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  double v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  double *v456;
  double v457;
  double v458;
  double v459;
  double v460;
  double v461;
  double v462;
  double v463;
  double v464;
  double v465;
  double v466;
  double v467;
  double v468;
  double v469;
  double v470;
  double v471;
  double *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  double v482;
  double v483;
  double v484;
  double v485;
  double v486;
  double v487;
  double v488;
  unint64_t v489;
  uint64_t v490;
  double v491;
  double v492;
  uint64_t v493;
  double v494;
  double v495;
  double v496;
  char v497;
  char v498;
  double v499;
  double v500;
  double v501;
  NSObject *v502;
  double v503;
  double v504;
  char *v505;
  double v506;
  double v507;
  void *v508;
  const char *v509;
  uint64_t v510;
  uint64_t v511;
  void *Object;
  const char *v513;
  uint64_t v514;
  uint64_t v515;
  double v516;
  double v517;
  const char *v518;
  uint64_t v519;
  uint64_t v520;
  double v521;
  double v522;
  const char *v523;
  uint64_t v524;
  uint64_t v525;
  double v526;
  double v527;
  const char *v528;
  uint64_t v529;
  uint64_t v530;
  double v531;
  double v532;
  const char *v533;
  uint64_t v534;
  uint64_t v535;
  const char *v536;
  uint64_t v537;
  uint64_t v538;
  const char *v539;
  uint64_t v540;
  uint64_t v541;
  double v542;
  BOOL v543;
  double v544;
  const char *v545;
  uint64_t v546;
  NSObject *v547;
  NSObject *v548;
  NSObject *v549;
  NSObject *v551;
  NSObject *v552;
  NSObject *v553;
  char *v554;
  char *v555;
  char *v556;
  char *v557;
  char *v558;
  char *v559;
  char *v560;
  uint64_t v561;
  _OWORD *v562;
  double v563;
  double v564;
  double v565;
  double v566;
  uint64_t v568;
  double v569;
  double v570;
  _QWORD *v571;
  double *v572;
  char *v573;
  double v574;
  uint64_t *v575;
  void *v576;
  uint64_t v577[4];
  int v578;
  _QWORD v579[4];
  unint64_t v580[4];
  uint64_t v581[4];
  double v582;
  double v583;
  uint64_t v584;
  uint64_t v585;
  __int128 v586;
  double v587;
  double v588;
  __int128 v589[2];
  _BYTE v590[10];
  __int16 v591;
  double v592;
  __int128 v593;
  double v594;
  double v595;
  __int128 v596;
  double v597;
  double v598;
  _BYTE __p[32];
  _BYTE v600[10];
  __int16 v601;
  double v602;
  _OWORD v603[2];
  uint64_t v604;

  v4 = a3;
  v604 = *MEMORY[0x1E0C80C00];
  v7 = objc_msgSend_count(a3, a2, (uint64_t)a3, (uint64_t)a4);
  v573 = a2;
  v11 = objc_msgSend_count(a2, v8, v9, v10);
  v14 = 0;
  if (v7 < 2)
    return v14;
  v15 = v11;
  if (v11 < 2)
    return v14;
  if (!a1[64])
  {
    if (*a1)
    {
      if (qword_1EE1720F8 != -1)
        dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
      v270 = qword_1EE172100;
      if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl(&dword_18F5B3000, v270, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[runRTS] Origin is not set.", __p, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1EE1720F8 != -1)
          dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
        LOWORD(v589[0]) = 0;
        v554 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v554);
        if (v554 != __p)
          free(v554);
      }
    }
    return 0;
  }
  *((_QWORD *)a1 + 18) = *((_QWORD *)a1 + 17);
  v575 = (uint64_t *)(a1 + 136);
  if (a1[200])
    a1[200] = 0;
  if (a1[248])
    a1[248] = 0;
  if (a1[344])
    a1[344] = 0;
  if (a1[360])
    a1[360] = 0;
  a1[128] = 0;
  *((_WORD *)a1 + 164) = 0;
  *((_QWORD *)a1 + 47) = 0;
  *((_QWORD *)a1 + 48) = 0;
  *((_QWORD *)a1 + 49) = 0;
  *((_QWORD *)a1 + 50) = 0x10000000000000;
  v16 = (void *)*((_QWORD *)a1 + 51);
  if (v16)
  {
    *((_QWORD *)a1 + 52) = v16;
    operator delete(v16);
  }
  *((_QWORD *)a1 + 51) = 0;
  *((_QWORD *)a1 + 52) = 0;
  *((_QWORD *)a1 + 53) = 0;
  v17 = sub_18F61030C(v573, (unint64_t)v4, v12, v13);
  if ((_BYTE)v18)
  {
    *((_QWORD *)a1 + 40) = v17;
    a1[329] = 1;
  }
  v20 = v15 + v7;
  v21 = *((_QWORD *)a1 + 17);
  if (v15 + v7 > (*((_QWORD *)a1 + 19) - v21) >> 6)
  {
    if (v20 >> 58)
      sub_18F5F7864();
    v22 = *((_QWORD *)a1 + 18) - v21;
    *(_QWORD *)v600 = a1 + 152;
    *(_QWORD *)__p = sub_18F6849DC(v20);
    *(_QWORD *)&__p[8] = *(_QWORD *)__p + v22;
    *(_QWORD *)&__p[16] = *(_QWORD *)__p + v22;
    *(_QWORD *)&__p[24] = *(_QWORD *)__p + (v23 << 6);
    sub_18F684940(v575, __p);
    if (*(_QWORD *)__p)
      operator delete(*(void **)__p);
  }
  v24 = 0;
  v572 = (double *)(a1 + 160);
  memset(v577, 0, sizeof(v577));
  v25 = (double *)(a1 + 72);
  v578 = 1065353216;
  v568 = 0;
  v571 = a1 + 336;
  v562 = a1 + 208;
  v576 = v4;
  do
  {
    v26 = (void *)objc_msgSend_objectAtIndexedSubscript_(v573, v18, v24, v19);
    objc_msgSend_horizontalAccuracy(v26, v27, v28, v29);
    if (v32 < 0.0)
    {
      if (!*a1)
        goto LABEL_387;
      if (qword_1EE1720F8 != -1)
        dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
      v271 = qword_1EE172100;
      if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend_horizontalAccuracy(v26, v272, v273, v274);
        *(_DWORD *)__p = 134349056;
        *(_QWORD *)&__p[4] = v275;
        _os_log_impl(&dword_18F5B3000, v271, OS_LOG_TYPE_DEFAULT, "[CLPedestrianRTSSmoother]:[runRTS] Negative horizontal uncertainty. horizontalUncertainty, %{public}.1f.", __p, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_387;
      bzero(__p, 0x65CuLL);
      if (qword_1EE1720F8 != -1)
        dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
      objc_msgSend_horizontalAccuracy(v26, v276, v277, v278);
      LODWORD(v589[0]) = 134349056;
      *(_QWORD *)((char *)v589 + 4) = v279;
      v280 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v280);
      goto LABEL_418;
    }
    if (!a1[200])
      goto LABEL_25;
    v33 = (void *)objc_msgSend_timestamp(v26, v30, v31, v19);
    objc_msgSend_timeIntervalSinceReferenceDate(v33, v34, v35, v36);
    if (!a1[200])
      sub_18F68490C();
    v38 = v37;
    if (v37 <= *v572)
    {
      if (*a1)
      {
        if (qword_1EE1720F8 != -1)
          dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
        v96 = qword_1EE172100;
        if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
        {
          if (!a1[200])
            sub_18F68490C();
          v97 = *v572;
          *(_DWORD *)__p = 134349312;
          *(double *)&__p[4] = v97;
          *(_WORD *)&__p[12] = 2050;
          *(double *)&__p[14] = v38;
          _os_log_impl(&dword_18F5B3000, v96, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[runRTS] Location sample timestamp does not increase, skipping, previousTime, %{public}.2f, currentTime, %{public}.2f", __p, 0x16u);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1EE1720F8 != -1)
            dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
          if (!a1[200])
            sub_18F68490C();
          v98 = *v572;
          LODWORD(v589[0]) = 134349312;
          *(double *)((char *)v589 + 4) = v98;
          WORD6(v589[0]) = 2050;
          *(double *)((char *)v589 + 14) = v38;
          LODWORD(v561) = 22;
          v99 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v99);
          if (v99 != __p)
            free(v99);
        }
      }
    }
    else
    {
LABEL_25:
      *(_DWORD *)v590 = 0;
      memset(v589, 0, sizeof(v589));
      if (!sub_18F60F50C((uint64_t)v589, v26, v31, v19, *((double *)a1 + 6), *((double *)a1 + 7)))
        goto LABEL_166;
      if (a1[128])
      {
        if (!a1[200])
        {
          if (*a1)
          {
            if (qword_1EE1720F8 != -1)
              dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
            v426 = qword_1EE172100;
            if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)__p = 0;
              _os_log_impl(&dword_18F5B3000, v426, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[runRTS] Returned false. Last consumed measurement is not initialized.", __p, 2u);
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1EE1720F8 == -1)
                goto LABEL_293;
              goto LABEL_455;
            }
          }
LABEL_387:
          v14 = 0;
          goto LABEL_388;
        }
        v39 = *v25;
        if (*v25 != *v572)
        {
          if (!*a1)
            goto LABEL_387;
          if (qword_1EE1720F8 != -1)
            dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
          v427 = qword_1EE172100;
          if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
          {
            if (!a1[200])
              sub_18F68490C();
            v428 = *v25;
            v429 = *v572;
            *(_DWORD *)__p = 134349312;
            *(double *)&__p[4] = v428;
            *(_WORD *)&__p[12] = 2050;
            *(double *)&__p[14] = v429;
            _os_log_impl(&dword_18F5B3000, v427, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[runRTS] Returned false. Timestamp of estimated state %{public}.3f is not equal to timestamp of last consumed measurement, %{public}.3f.", __p, 0x16u);
          }
          if (!sub_18F5C4AE0(115, 0))
            goto LABEL_387;
          bzero(__p, 0x65CuLL);
          if (qword_1EE1720F8 != -1)
            dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
          if (!a1[200])
            sub_18F68490C();
          v430 = *v25;
          v431 = *v572;
          LODWORD(v603[0]) = 134349312;
          *(double *)((char *)v603 + 4) = v430;
          WORD6(v603[0]) = 2050;
          *(double *)((char *)v603 + 14) = v431;
          v280 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v280);
          goto LABEL_418;
        }
        v40 = *(double *)v589;
        v581[0] = v568;
        v580[0] = v568;
        sub_18F60ED98(v4, (char *)v581, v580, v19, v39, *(double *)v589);
        v568 = v580[0];
        v41 = v581[0];
        v44 = (void *)objc_msgSend_objectAtIndexedSubscript_(v4, v42, v581[0], v43);
        v48 = (void *)objc_msgSend_cfAbsTimestamp(v44, v45, v46, v47);
        objc_msgSend_timeIntervalSinceReferenceDate(v48, v49, v50, v51);
        v53 = v52;
        v56 = (void *)objc_msgSend_objectAtIndexedSubscript_(v4, v54, v568, v55);
        v60 = (void *)objc_msgSend_cfAbsTimestamp(v56, v57, v58, v59);
        objc_msgSend_timeIntervalSinceReferenceDate(v60, v61, v62, v63);
        if (v53 < v39 || v53 > v40 || v64 < v40)
        {
          if (*a1)
          {
            if (qword_1EE1720F8 != -1)
              dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
            v107 = qword_1EE172100;
            if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_DEFAULT))
            {
              if (!a1[200])
                sub_18F68490C();
              v108 = *v572;
              *(_DWORD *)__p = 134349312;
              *(_QWORD *)&__p[4] = *(_QWORD *)&v589[0];
              *(_WORD *)&__p[12] = 2050;
              *(double *)&__p[14] = v108;
              _os_log_impl(&dword_18F5B3000, v107, OS_LOG_TYPE_DEFAULT, "[CLPedestrianRTSSmoother]:[runRTS] There is no inertialOdometry sample between consecutive location samples. timestamp of coming location sample %{public}.3f, timestamp of consumed location sample %{public}.3f.", __p, 0x16u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1EE1720F8 != -1)
                dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
              if (!a1[200])
                sub_18F68490C();
              v266 = *v572;
              LODWORD(v603[0]) = 134349312;
              *(_QWORD *)((char *)v603 + 4) = *(_QWORD *)&v589[0];
              WORD6(v603[0]) = 2050;
              *(double *)((char *)v603 + 14) = v266;
              LODWORD(v561) = 22;
              v267 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v267);
              if (v267 != __p)
                free(v267);
            }
          }
          v109 = 0;
          v110 = *(double *)v589;
          v587 = 0.0;
          v586 = 0x3FF0000000000000uLL;
          v588 = 1.0;
          v582 = (v110 - *v25) * 4.0 * ((v110 - *v25) * 4.0);
          v583 = v582;
          v111 = 1;
          do
          {
            v112 = v111;
            v113 = *(double *)sub_18F60F010((uint64_t)&v586, v109, 0);
            v114 = *((double *)a1 + 15);
            v115 = (double *)sub_18F60F010((uint64_t)&v586, v109, 1uLL);
            *v115 = *v115 + v113 * v114;
            *(_QWORD *)sub_18F60F010((uint64_t)v603, v109, 1uLL) = 0;
            *(_QWORD *)sub_18F60F010((uint64_t)v603, v109, 0) = 0;
            v116 = (_QWORD *)sub_18F60F010((uint64_t)v603, v109, v109);
            v111 = 0;
            *v116 = 0x3FF0000000000000;
            v109 = 1;
          }
          while ((v112 & 1) != 0);
          for (i = 1; ; --i)
          {
            v118 = 0;
            *((_QWORD *)&v596 + i) = 0;
            v119 = 1;
            v120 = 0.0;
            do
            {
              v121 = v119;
              v122 = *(double *)sub_18F60F010((uint64_t)&v586, i, v118);
              v123 = *(double *)sub_18F60F010((uint64_t)&v586, i, v118);
              v124 = *(double *)sub_18F685514((uint64_t)(a1 + 104), v118);
              v125 = *(double *)sub_18F60F010((uint64_t)v603, i, v118);
              v126 = (double *)sub_18F60F010((uint64_t)v603, i, v118);
              v119 = 0;
              v120 = v120 + v122 * v123 * v124 + v125 * *v126 * *(&v582 + v118);
              *((double *)&v596 + i) = v120;
              v118 = 1;
            }
            while ((v121 & 1) != 0);
            v4 = v576;
            if (v120 <= 0.0)
              break;
            if (!i)
            {
              *(_OWORD *)(a1 + 104) = v596;
              goto LABEL_145;
            }
            v127 = 0;
            v128 = 0.0;
            v129 = 1;
            do
            {
              v130 = v129;
              v131 = *(double *)sub_18F60F010((uint64_t)&v586, 0, v127);
              v132 = *(double *)sub_18F685514((uint64_t)(a1 + 104), v127);
              v133 = *(double *)sub_18F60F010((uint64_t)&v586, i, v127);
              v134 = *(double *)sub_18F60F010((uint64_t)v603, 0, v127);
              v135 = *(&v582 + v127);
              v136 = (double *)sub_18F60F010((uint64_t)v603, i, v127);
              v129 = 0;
              v128 = v128 + v131 * v132 * v133 + v134 * v135 * *v136;
              v127 = 1;
            }
            while ((v130 & 1) != 0);
            v137 = 0;
            *(double *)sub_18F6851BC((uint64_t)(a1 + 120), 0, i) = v128 / v120;
            v138 = 1;
            do
            {
              v139 = v138;
              v140 = *(double *)sub_18F6851BC((uint64_t)(a1 + 120), 0, i);
              v141 = *(double *)sub_18F60F010((uint64_t)&v586, i, v137);
              v142 = (double *)sub_18F60F010((uint64_t)&v586, 0, v137);
              *v142 = *v142 - v140 * v141;
              v143 = *(double *)sub_18F6851BC((uint64_t)(a1 + 120), 0, i);
              v144 = *(double *)sub_18F60F010((uint64_t)v603, i, v137);
              v145 = (double *)sub_18F60F010((uint64_t)v603, 0, v137);
              v138 = 0;
              *v145 = *v145 - v143 * v144;
              v137 = 1;
            }
            while ((v139 & 1) != 0);
          }
          if (qword_1ECD8E728 != -1)
            dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
          v233 = off_1ECD8E720;
          if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__p = 134217984;
            *(_QWORD *)&__p[4] = i;
            _os_log_impl(&dword_18F5B3000, v233, OS_LOG_TYPE_DEBUG, "D[%zu] <= 0, matrix ! positive definite", __p, 0xCu);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1ECD8E728 != -1)
              dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
            LODWORD(v593) = 134217984;
            *(_QWORD *)((char *)&v593 + 4) = i;
            LODWORD(v561) = 12;
            v234 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "void CMFactoredMatrix<double, 2>::thorntonTemporalUpdate(CMMatrix<T, N, N> &, const CMVector<T, N> &) [T = double, N = 2]", "CoreLocation: %s\n", v234);
            v4 = v576;
            if (v234 != __p)
              free(v234);
          }
LABEL_145:
          *((double *)a1 + 9) = v110;
          if (a1[200])
          {
            v235 = *((_DWORD *)a1 + 48);
          }
          else
          {
            v235 = *a1;
            if (*a1)
            {
              if (qword_1EE1720F8 != -1)
                dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
              v236 = qword_1EE172100;
              if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)__p = 0;
                _os_log_impl(&dword_18F5B3000, v236, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[forwardPropagate ZOH] LastConsumedMeasurement is not initialized.", __p, 2u);
              }
              if (sub_18F5C4AE0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1EE1720F8 != -1)
                  dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
                LOWORD(v603[0]) = 0;
                LODWORD(v561) = 2;
                v269 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 0, "void CLPedestrianRTSSmoother::forwardPropagate(const CFAbsoluteTime)", "CoreLocation: %s\n", v269);
                if (v269 != __p)
                  free(v269);
                v235 = 0;
                v4 = v576;
              }
              else
              {
                v235 = 0;
              }
            }
          }
          *((_DWORD *)a1 + 24) = v235;
          v237 = *((_QWORD *)a1 + 18);
          v238 = *((_QWORD *)a1 + 19);
          if (v237 >= v238)
          {
            v241 = (uint64_t)(v237 - *v575) >> 6;
            v242 = v241 + 1;
            if ((unint64_t)(v241 + 1) >> 58)
LABEL_424:
              sub_18F5F7864();
            v243 = v238 - *v575;
            if (v243 >> 5 > v242)
              v242 = v243 >> 5;
            if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFC0)
              v244 = 0x3FFFFFFFFFFFFFFLL;
            else
              v244 = v242;
            *(_QWORD *)v600 = a1 + 152;
            v245 = (char *)sub_18F6849DC(v244);
            v4 = v576;
            v246 = &v245[64 * v241];
            *(_QWORD *)__p = v245;
            *(_QWORD *)&__p[8] = v246;
            *(_QWORD *)&__p[24] = &v245[64 * v247];
            v248 = *(_OWORD *)(a1 + 84);
            *(_OWORD *)v246 = *(_OWORD *)v25;
            *(_OWORD *)(v246 + 12) = v248;
            *((_QWORD *)v246 + 4) = *((_QWORD *)a1 + 13);
            *((_QWORD *)v246 + 5) = *((_QWORD *)a1 + 14);
            *((_QWORD *)v246 + 6) = *((_QWORD *)a1 + 15);
            v246[56] = 0;
            *(_QWORD *)&__p[16] = v246 + 64;
            sub_18F684940(v575, __p);
            v240 = *((_QWORD *)a1 + 18);
            if (*(_QWORD *)__p)
              operator delete(*(void **)__p);
          }
          else
          {
            v239 = *(_OWORD *)v25;
            *(_OWORD *)(v237 + 12) = *(_OWORD *)(a1 + 84);
            *(_OWORD *)v237 = v239;
            *(_QWORD *)(v237 + 32) = *((_QWORD *)a1 + 13);
            *(_QWORD *)(v237 + 40) = *((_QWORD *)a1 + 14);
            *(_QWORD *)(v237 + 48) = *((_QWORD *)a1 + 15);
            *(_BYTE *)(v237 + 56) = 0;
            v240 = v237 + 64;
          }
          *((_QWORD *)a1 + 18) = v240;
          sub_18F6830A8((uint64_t)a1, v589);
          *(_BYTE *)(*((_QWORD *)a1 + 18) - 8) = 1;
          v171 = *((_QWORD *)a1 + 10);
          v170 = *((_QWORD *)a1 + 11);
          v172 = *((_QWORD *)a1 + 13);
          v173 = *((_QWORD *)a1 + 14);
          v174 = *((_QWORD *)a1 + 15);
          v175 = sub_18F684A58((float *)v577, (_QWORD *)a1 + 9, *((double *)a1 + 9));
        }
        else
        {
          sub_18F6835D8((uint64_t)a1, v4, v41, 1, *((double *)a1 + 9));
          sub_18F6835D8((uint64_t)a1, v4, v568, 0, *(double *)v589);
          v65 = *((double *)a1 + 33);
          v68 = __sincos_stret(*((double *)a1 + 34));
          v69 = v65 * v68.__cosval;
          v70 = v65 * v68.__sinval;
          for (j = *((_QWORD *)a1 + 32) + 1; j < *((_QWORD *)a1 + 35); ++j)
          {
            v72 = (void *)objc_msgSend_objectAtIndexedSubscript_(v4, v66, j, v67);
            v76 = (void *)objc_msgSend_deltaPosition_m(v72, v73, v74, v75);
            isValid = objc_msgSend_isValid(v76, v77, v78, v79);
            v82 = 0.0;
            v83 = 0.0;
            if (isValid)
            {
              v84 = (void *)objc_msgSend_deltaPosition_m(v72, v66, v81, v67, 0.0);
              objc_msgSend_X(v84, v85, v86, v87);
              v82 = v88;
              v92 = (void *)objc_msgSend_deltaPosition_m(v72, v89, v90, v91);
              objc_msgSend_Y(v92, v93, v94, v95);
            }
            v69 = v69 + v82;
            v70 = v70 + v83;
          }
          v146 = *((double *)a1 + 36);
          v147 = __sincos_stret(*((double *)a1 + 37));
          *(float32x2_t *)&v586 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)((char *)v589 + 8), *((float64x2_t *)a1 + 5)));
          *(float *)&v148 = v69 + v146 * v147.__cosval;
          *(float *)&v149 = v70 + v146 * v147.__sinval;
          *(_QWORD *)&v596 = __PAIR64__(v149, v148);
          sub_18F60F368((float *)&v586, (float *)&v596);
          v153 = v152;
          *((double *)a1 + 42) = v152;
          a1[344] = 1;
          if (a1[1])
          {
            ++*((_QWORD *)a1 + 47);
            v154 = __sincos_stret(v152);
            v155 = v154.__sinval + *((double *)a1 + 49);
            *((double *)a1 + 48) = v154.__cosval + *((double *)a1 + 48);
            *((double *)a1 + 49) = v155;
            if (a1[360])
            {
              v156 = *((double *)a1 + 44);
              v157 = __sincos_stret(v153);
              cosval = v157.__cosval;
              sinval = v157.__sinval;
              *(float *)__p = cosval;
              *(float *)&__p[4] = sinval;
              v160 = __sincos_stret(v156);
              *(float *)&v161 = v160.__cosval;
              *(float *)&v162 = v160.__sinval;
              *(_QWORD *)&v603[0] = __PAIR64__(v162, v161);
              sub_18F60F368((float *)__p, (float *)v603);
              v164 = fabs(v163);
              if (*((double *)a1 + 50) < v164)
                *((double *)a1 + 50) = v164;
            }
            *((_QWORD *)a1 + 44) = *v571;
            a1[360] = a1[344];
          }
          if (a1[2])
          {
            v165 = sqrtf((float)(*(float *)&v596 * *(float *)&v596) + (float)(*((float *)&v596 + 1)
                                                                            * *((float *)&v596 + 1)));
            v166 = 1.0;
            if (v165 > 2.2204e-16)
            {
              v167 = sqrtf((float)(*(float *)&v586 * *(float *)&v586)+ (float)(*((float *)&v586 + 1) * *((float *)&v586 + 1)))/ v165;
              v166 = 1.0;
              if (v167 <= 1.0)
                v166 = v167;
            }
            *((double *)a1 + 46) = v166;
          }
          if (!a1[344])
          {
            if (*a1)
            {
              if (qword_1EE1720F8 != -1)
                dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
              v434 = qword_1EE172100;
              if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)__p = 0;
                _os_log_impl(&dword_18F5B3000, v434, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[runRTS] Course offset is not initialized.", __p, 2u);
              }
              if (sub_18F5C4AE0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1EE1720F8 == -1)
                {
LABEL_293:
                  LOWORD(v603[0]) = 0;
                  v280 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v280);
                  goto LABEL_418;
                }
LABEL_455:
                dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
                goto LABEL_293;
              }
            }
            goto LABEL_387;
          }
          v168 = *((_QWORD *)a1 + 32);
          if (!a1[328])
          {
            *((_QWORD *)a1 + 38) = v168;
            *((_QWORD *)a1 + 39) = *((_QWORD *)a1 + 33);
            a1[328] = 1;
          }
          *(_QWORD *)&v603[1] = 0;
          v603[0] = 0x3FF0000000000000uLL;
          for (*((_QWORD *)&v603[1] + 1) = 0x3FF0000000000000; v168 <= *((_QWORD *)a1 + 35); v4 = v576)
          {
            v176 = (void *)objc_msgSend_objectAtIndexedSubscript_(v4, v150, v168, v151);
            v180 = (void *)objc_msgSend_deltaPosition_m(v176, v177, v178, v179);
            if (objc_msgSend_isValid(v180, v181, v182, v183))
            {
              v187 = (void *)objc_msgSend_deltaPosition_m(v176, v184, v185, v186);
              objc_msgSend_X(v187, v188, v189, v190);
              v192 = v191;
              v196 = (void *)objc_msgSend_deltaPosition_m(v176, v193, v194, v195);
              objc_msgSend_Y(v196, v197, v198, v199);
              if (!a1[344])
                sub_18F68490C();
              v201 = v200;
              v202 = atan2(v200, v192) - *(double *)v571;
              v203 = 16.0;
              v204 = 0x3FF0CCCCCCCCCCCDLL;
            }
            else
            {
              v203 = 25.0;
              v201 = 0.0;
              v204 = 0x3FF999999999999ALL;
              v192 = 0.0;
              v202 = 0.0;
            }
            v205 = (void *)objc_msgSend_cfAbsTimestamp(v176, v184, v185, v186);
            objc_msgSend_timeIntervalSinceReferenceDate(v205, v206, v207, v208);
            v210 = v209;
            if (v168 == *((_QWORD *)a1 + 32))
              v211 = *((double *)a1 + 33);
            else
              v211 = sqrt(v201 * v201 + v192 * v192);
            if (v168 == *((_QWORD *)a1 + 35))
              v211 = *((double *)a1 + 36);
            v212 = *((double *)a1 + 46) * v211;
            *(_QWORD *)&v596 = v204;
            *((double *)&v596 + 1) = v203;
            v213 = __sincos_stret(v202);
            *(double *)&v586 = -(v212 * v213.__sinval);
            *((double *)&v586 + 1) = v213.__cosval * v212;
            v587 = v213.__cosval;
            v588 = v213.__sinval;
            sub_18F68434C((uint64_t)(a1 + 104), (double *)v603, (double *)&v586, (uint64_t)&v596);
            v214 = *((double *)a1 + 11);
            *((double *)a1 + 10) = v213.__cosval * v212 + *((double *)a1 + 10);
            *((double *)a1 + 11) = v213.__sinval * v212 + v214;
            *((_QWORD *)a1 + 9) = v210;
            if (a1[200])
            {
              v215 = *((_DWORD *)a1 + 48);
            }
            else
            {
              v215 = *a1;
              if (*a1)
              {
                if (qword_1EE1720F8 != -1)
                  dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
                v216 = qword_1EE172100;
                if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)__p = 0;
                  _os_log_impl(&dword_18F5B3000, v216, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[forwardPropagate with IO] LastConsumedMeasurement is not initialized.", __p, 2u);
                }
                if (sub_18F5C4AE0(115, 0))
                {
                  bzero(__p, 0x65CuLL);
                  if (qword_1EE1720F8 != -1)
                    dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
                  LOWORD(v582) = 0;
                  LODWORD(v561) = 2;
                  v229 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 0, "void CLPedestrianRTSSmoother::forwardPropagate(NSArray<CLBackgroundInertialOdometrySample *> * _Nullable)", "CoreLocation: %s\n", v229);
                  if (v229 != __p)
                    free(v229);
                }
                v215 = 0;
              }
            }
            *((_DWORD *)a1 + 24) = v215;
            v217 = *((_QWORD *)a1 + 18);
            v218 = *((_QWORD *)a1 + 19);
            if (v217 >= v218)
            {
              v221 = (uint64_t)(v217 - *v575) >> 6;
              v222 = v221 + 1;
              if ((unint64_t)(v221 + 1) >> 58)
                goto LABEL_424;
              v223 = v218 - *v575;
              if (v223 >> 5 > v222)
                v222 = v223 >> 5;
              if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFC0)
                v224 = 0x3FFFFFFFFFFFFFFLL;
              else
                v224 = v222;
              *(_QWORD *)v600 = a1 + 152;
              v225 = (char *)sub_18F6849DC(v224);
              v226 = &v225[64 * v221];
              *(_QWORD *)__p = v225;
              *(_QWORD *)&__p[8] = v226;
              *(_QWORD *)&__p[24] = &v225[64 * v227];
              v228 = *(_OWORD *)(a1 + 84);
              *(_OWORD *)v226 = *(_OWORD *)v25;
              *(_OWORD *)(v226 + 12) = v228;
              *((_QWORD *)v226 + 4) = *((_QWORD *)a1 + 13);
              *((_QWORD *)v226 + 5) = *((_QWORD *)a1 + 14);
              *((_QWORD *)v226 + 6) = *((_QWORD *)a1 + 15);
              v226[56] = 0;
              *(_QWORD *)&__p[16] = v226 + 64;
              sub_18F684940(v575, __p);
              v220 = *((_QWORD *)a1 + 18);
              if (*(_QWORD *)__p)
                operator delete(*(void **)__p);
            }
            else
            {
              v219 = *(_OWORD *)v25;
              *(_OWORD *)(v217 + 12) = *(_OWORD *)(a1 + 84);
              *(_OWORD *)v217 = v219;
              *(_QWORD *)(v217 + 32) = *((_QWORD *)a1 + 13);
              *(_QWORD *)(v217 + 40) = *((_QWORD *)a1 + 14);
              *(_QWORD *)(v217 + 48) = *((_QWORD *)a1 + 15);
              *(_BYTE *)(v217 + 56) = 0;
              v220 = v217 + 64;
            }
            *((_QWORD *)a1 + 18) = v220;
            ++v168;
          }
          sub_18F6830A8((uint64_t)a1, v589);
          v169 = *((_QWORD *)a1 + 18);
          *(_QWORD *)(v169 - 64) = *((_QWORD *)a1 + 9);
          *(_BYTE *)(v169 - 8) = 1;
          v171 = *((_QWORD *)a1 + 10);
          v170 = *((_QWORD *)a1 + 11);
          v172 = *((_QWORD *)a1 + 13);
          v173 = *((_QWORD *)a1 + 14);
          v174 = *((_QWORD *)a1 + 15);
          v175 = sub_18F684A58((float *)v577, (_QWORD *)a1 + 9, *((double *)a1 + 9));
        }
        *((_QWORD *)v175 + 3) = v171;
        *((_QWORD *)v175 + 4) = v170;
        *((_QWORD *)v175 + 5) = v172;
        *((_QWORD *)v175 + 6) = v173;
        *((_QWORD *)v175 + 7) = v174;
      }
      else
      {
        *((_QWORD *)&v603[0] + 1) = 0;
        *(_QWORD *)&v603[1] = 0;
        *(double *)v603 = *((double *)&v589[1] + 1) * *((double *)&v589[1] + 1) * 0.5;
        *((double *)&v603[1] + 1) = *(double *)v603;
        if ((sub_18F6840A4((uint64_t)&v586, (uint64_t)v603) & 1) != 0)
        {
          v100 = *(_QWORD *)&v589[1];
          v101 = *(_DWORD *)v590;
          v102 = v587;
          *(_OWORD *)(a1 + 72) = v589[0];
          *((_QWORD *)a1 + 11) = v100;
          *((_DWORD *)a1 + 24) = v101;
          *(_OWORD *)(a1 + 104) = v586;
          *((double *)a1 + 15) = v102;
          a1[128] = 1;
          v103 = *((_QWORD *)a1 + 18);
          v104 = *((_QWORD *)a1 + 19);
          if (v103 >= v104)
          {
            v249 = (uint64_t)(v103 - *v575) >> 6;
            v250 = v249 + 1;
            if ((unint64_t)(v249 + 1) >> 58)
              sub_18F5F7864();
            v251 = v104 - *v575;
            if (v251 >> 5 > v250)
              v250 = v251 >> 5;
            if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFC0)
              v252 = 0x3FFFFFFFFFFFFFFLL;
            else
              v252 = v250;
            *(_QWORD *)v600 = a1 + 152;
            v253 = (char *)sub_18F6849DC(v252);
            v254 = &v253[64 * v249];
            *(_QWORD *)__p = v253;
            *(_QWORD *)&__p[8] = v254;
            *(_QWORD *)&__p[24] = &v253[64 * v255];
            v256 = *(_OWORD *)(a1 + 84);
            *(_OWORD *)v254 = *(_OWORD *)v25;
            *(_OWORD *)(v254 + 12) = v256;
            *((_QWORD *)v254 + 4) = *((_QWORD *)a1 + 13);
            *((_QWORD *)v254 + 5) = *((_QWORD *)a1 + 14);
            *((_QWORD *)v254 + 6) = *((_QWORD *)a1 + 15);
            v254[56] = 1;
            *(_QWORD *)&__p[16] = v254 + 64;
            sub_18F684940(v575, __p);
            v106 = *((_QWORD *)a1 + 18);
            if (*(_QWORD *)__p)
              operator delete(*(void **)__p);
          }
          else
          {
            v105 = *(_OWORD *)v25;
            *(_OWORD *)(v103 + 12) = *(_OWORD *)(a1 + 84);
            *(_OWORD *)v103 = v105;
            *(_QWORD *)(v103 + 32) = *((_QWORD *)a1 + 13);
            *(_QWORD *)(v103 + 40) = *((_QWORD *)a1 + 14);
            *(_QWORD *)(v103 + 48) = *((_QWORD *)a1 + 15);
            *(_BYTE *)(v103 + 56) = 1;
            v106 = v103 + 64;
          }
          *((_QWORD *)a1 + 18) = v106;
          v258 = *((_QWORD *)a1 + 10);
          v257 = *((_QWORD *)a1 + 11);
          v259 = *((_QWORD *)a1 + 13);
          v260 = *((_QWORD *)a1 + 14);
          v261 = *((_QWORD *)a1 + 15);
          v262 = sub_18F684A58((float *)v577, (_QWORD *)a1 + 9, *((double *)a1 + 9));
          *((_QWORD *)v262 + 3) = v258;
          *((_QWORD *)v262 + 4) = v257;
          *((_QWORD *)v262 + 5) = v259;
          *((_QWORD *)v262 + 6) = v260;
          *((_QWORD *)v262 + 7) = v261;
          v263 = v589[1];
          if (a1[248])
          {
            *v562 = v589[0];
            *((_OWORD *)a1 + 14) = v263;
            *((_DWORD *)a1 + 60) = *(_DWORD *)v590;
          }
          else
          {
            *v562 = v589[0];
            *((_OWORD *)a1 + 14) = v263;
            *((_QWORD *)a1 + 30) = *(_QWORD *)v590;
            a1[248] = 1;
          }
          v264 = v589[1];
          if (a1[200])
          {
            *(_OWORD *)v572 = v589[0];
            *((_OWORD *)a1 + 11) = v264;
            *((_DWORD *)a1 + 48) = *(_DWORD *)v590;
          }
          else
          {
            *(_OWORD *)v572 = v589[0];
            *((_OWORD *)a1 + 11) = v264;
            *((_QWORD *)a1 + 24) = *(_QWORD *)v590;
            a1[200] = 1;
          }
          if (*a1)
          {
            if (qword_1EE1720F8 != -1)
              dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
            v265 = qword_1EE172100;
            if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__p = 134349056;
              *(_QWORD *)&__p[4] = *((_QWORD *)&v589[1] + 1);
              _os_log_impl(&dword_18F5B3000, v265, OS_LOG_TYPE_DEFAULT, "[CLPedestrianRTSSmoother]:[runRTS] Forward state initialized successfully. horizontalUncertainty, %{public}.1f.", __p, 0xCu);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1EE1720F8 != -1)
                dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
              LODWORD(v603[0]) = 134349056;
              *(_QWORD *)((char *)v603 + 4) = *((_QWORD *)&v589[1] + 1);
              LODWORD(v561) = 12;
              v232 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v232);
LABEL_191:
              if (v232 != __p)
                free(v232);
              v4 = v576;
            }
          }
        }
        else if (*a1)
        {
          if (qword_1EE1720F8 != -1)
            dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
          v230 = qword_1EE172100;
          if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 134349056;
            *(_QWORD *)&__p[4] = *((_QWORD *)&v589[1] + 1);
            _os_log_impl(&dword_18F5B3000, v230, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[initializePositionState] Forward state initialization failed. horizontalUncertainty, %{public}.1f.", __p, 0xCu);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1EE1720F8 != -1)
              dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
            LODWORD(v596) = 134349056;
            *(_QWORD *)((char *)&v596 + 4) = *((_QWORD *)&v589[1] + 1);
            LODWORD(v561) = 12;
            v268 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::initializePositionState(const CLPTSUtility::LocationInNWU &, std::unordered_map<CFAbsoluteTime, PosterioriPositionEstimate> &)", "CoreLocation: %s\n", v268);
            v4 = v576;
            if (v268 != __p)
              free(v268);
          }
          if (*a1)
          {
            if (qword_1EE1720F8 != -1)
              dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
            v231 = qword_1EE172100;
            if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__p = 134349056;
              *(_QWORD *)&__p[4] = *((_QWORD *)&v589[1] + 1);
              _os_log_impl(&dword_18F5B3000, v231, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[runRTS] Forward state initialization failed. horizontalUncertainty, %{public}.1f.", __p, 0xCu);
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1EE1720F8 != -1)
                dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
              LODWORD(v603[0]) = 134349056;
              *(_QWORD *)((char *)v603 + 4) = *((_QWORD *)&v589[1] + 1);
              LODWORD(v561) = 12;
              v232 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v232);
              goto LABEL_191;
            }
          }
        }
      }
    }
LABEL_166:
    ++v24;
  }
  while (v24 != v15);
  v281 = *((_QWORD *)a1 + 18);
  if ((unint64_t)(v281 - *((_QWORD *)a1 + 17)) <= 0x7F)
  {
    if (*a1)
    {
      if (qword_1EE1720F8 != -1)
        dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
      v282 = qword_1EE172100;
      if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl(&dword_18F5B3000, v282, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[backPropagate] Not enough forward estimation, returned false", __p, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1EE1720F8 != -1)
          goto LABEL_456;
        goto LABEL_433;
      }
      goto LABEL_381;
    }
    goto LABEL_387;
  }
  if (!*(_BYTE *)(v281 - 8))
  {
    if (*a1)
    {
      if (qword_1EE1720F8 != -1)
        dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
      v432 = qword_1EE172100;
      if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl(&dword_18F5B3000, v432, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[backPropagate] last forward estimate is not corrected, returned false", __p, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1EE1720F8 != -1)
          goto LABEL_456;
        goto LABEL_433;
      }
      goto LABEL_381;
    }
    goto LABEL_387;
  }
  v283 = *(double *)(v281 - 64);
  v284 = sub_18F6856EC(v577[0], v577[1], v283);
  if (!v284)
  {
    if (*a1)
    {
      if (qword_1EE1720F8 != -1)
        dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
      v433 = qword_1EE172100;
      if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl(&dword_18F5B3000, v433, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[backPropagate] key for initialization does not exist, returned false", __p, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1EE1720F8 != -1)
          goto LABEL_456;
        goto LABEL_433;
      }
      goto LABEL_381;
    }
    goto LABEL_387;
  }
  v285 = v284[3];
  v286 = v284[4];
  v287 = 0.0;
  v288 = v284[6];
  v289 = v284[7];
  v290 = v284[5] + 0.0 + v289 * v288 * v289;
  v291 = v289 * v288 + 0.0;
  v292 = v288 * v289 + 0.0;
  v293 = v288 + 0.0;
  *(double *)&v596 = v290;
  *((double *)&v596 + 1) = v292;
  v597 = v291;
  v598 = v293;
  if (!a1[64])
  {
    if (*a1)
    {
      if (qword_1EE1720F8 != -1)
        dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
      v435 = qword_1EE172100;
      if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl(&dword_18F5B3000, v435, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[backPropagate] origin is not set, returned false", __p, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1EE1720F8 != -1)
          goto LABEL_456;
        goto LABEL_433;
      }
    }
    goto LABEL_381;
  }
  v294 = 0;
  v295 = *(unsigned int *)(v281 - 40);
  *(double *)__p = v290;
  *(double *)&__p[8] = v292;
  v296 = 1;
  *(double *)&__p[16] = v291;
  *(double *)&__p[24] = v293;
  do
  {
    v297 = v296;
    v298 = sub_18F684E64((uint64_t)__p, v294, v294);
    v296 = 0;
    v287 = v287 + v298;
    v294 = 1;
  }
  while ((v297 & 1) != 0);
  v299 = sub_18F60F7E4(v295, v283, sqrt(v287), v285, v286, *((double *)a1 + 6), *((double *)a1 + 7));
  objc_msgSend_addObject_(a4, v300, (uint64_t)v299, v301);

  v304 = (*((_QWORD *)a1 + 18) - *((_QWORD *)a1 + 17)) >> 6;
  v305 = (char *)v576;
  if ((int)v304 >= 2)
  {
    v436 = (v304 - 2);
    v437 = 0uLL;
LABEL_338:
    v438 = 0;
    v439 = v436 + 1;
    v584 = 0;
    v585 = 0;
    v440 = *v575 + ((v436 + 1) << 6);
    v441 = (uint64_t *)(v440 + 32);
    v442 = -*(double *)(v440 + 48);
    v589[0] = v437;
    v589[1] = v437;
    v443 = 1;
    while (1)
    {
      v444 = *v441;
      v445 = v441[1];
      *(_QWORD *)__p = *v441;
      *(_QWORD *)&__p[8] = v445;
      if (*(double *)&__p[8 * v438] <= 0.0)
        break;
      v446 = v443;
      *(_QWORD *)__p = v444;
      *(_QWORD *)&__p[8] = v445;
      v447 = *(double *)&__p[8 * v438];
      v448 = (double *)sub_18F60F010((uint64_t)v589, v438, v438);
      v443 = 0;
      *v448 = 1.0 / v447;
      v438 = 1;
      if ((v446 & 1) == 0)
      {
        v565 = v286;
        v569 = v285;
        *(_QWORD *)__p = 0x3FF0000000000000;
        *(double *)&__p[8] = v442;
        *(_OWORD *)&__p[16] = xmmword_18F774730;
        v586 = xmmword_18F774740;
        v587 = v442;
        v588 = 1.0;
        *(_QWORD *)&v603[0] = sub_18F6847AC((uint64_t)v589, (uint64_t)&v586);
        *((_QWORD *)&v603[0] + 1) = v449;
        *(_QWORD *)&v603[1] = v450;
        *((_QWORD *)&v603[1] + 1) = v451;
        v582 = sub_18F6847AC((uint64_t)__p, (uint64_t)v603);
        v583 = v452;
        v584 = v453;
        v585 = v454;
        v455 = *v575 + (v436 << 6);
        memset(v603, 0, sizeof(v603));
        if (*(_BYTE *)(v455 + 56))
        {
          v456 = sub_18F6856EC(v577[0], v577[1], *(double *)v455);
          if (v456)
          {
            v563 = v456[4];
            v564 = v456[3];
            v457 = v456[6];
            v458 = v456[7];
            v459 = v456[5] + 0.0 + v457 * v458 * v458;
            v460 = v457 * v458 + 0.0;
            v461 = v460;
            v462 = v457 + 0.0;
            *(double *)v603 = v459;
            *((double *)v603 + 1) = v460;
            *(double *)&v603[1] = v460;
            *((double *)&v603[1] + 1) = v457 + 0.0;
            goto LABEL_345;
          }
          if (*a1)
          {
            if (qword_1EE1720F8 != -1)
              dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
            v553 = qword_1EE172100;
            if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)__p = 0;
              _os_log_impl(&dword_18F5B3000, v553, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[backPropagate] key during back propagation does not exist , returned false", __p, 2u);
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1EE1720F8 == -1)
                goto LABEL_433;
LABEL_456:
              dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
LABEL_433:
              LOWORD(v589[0]) = 0;
              v557 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::backPropagate(const std::unordered_map<CFAbsoluteTime, PosterioriPositionEstimate> &, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v557);
              if (v557 != __p)
                free(v557);
            }
          }
          goto LABEL_381;
        }
        v463 = *(double *)(v455 + 40);
        v464 = *(double *)(v455 + 48);
        v459 = *(double *)(v455 + 32) + 0.0 + v464 * v463 * v464;
        v460 = v464 * v463 + 0.0;
        v461 = v463 * v464 + 0.0;
        v462 = v463 + 0.0;
        *(double *)v603 = v459;
        *((double *)v603 + 1) = v461;
        *(double *)&v603[1] = v460;
        *((double *)&v603[1] + 1) = v463 + 0.0;
        v563 = *(double *)(v455 + 16);
        v564 = *(double *)(v455 + 8);
LABEL_345:
        v465 = sub_18F6847AC((uint64_t)v603, (uint64_t)&v582);
        v574 = v466;
        v467 = v465;
        v469 = v468;
        v471 = v470;
        *(double *)&v586 = v465;
        *((double *)&v586 + 1) = v468;
        v587 = v466;
        v588 = v470;
        *(double *)&v593 = v465;
        *((double *)&v593 + 1) = v466;
        v594 = v468;
        v595 = v470;
        v472 = (double *)(*v575 + (v439 << 6));
        v581[0] = sub_18F6848A4((uint64_t)&v596, v472[4] + 0.0 + v472[6] * v472[5] * v472[6], v472[5] * v472[6] + 0.0, v472[6] * v472[5] + 0.0, v472[5] + 0.0);
        v581[1] = v473;
        v581[2] = v474;
        v581[3] = v475;
        v580[0] = sub_18F6847AC((uint64_t)&v586, (uint64_t)v581);
        v580[1] = v476;
        v580[2] = v477;
        v580[3] = v478;
        v579[0] = sub_18F6847AC((uint64_t)v580, (uint64_t)&v593);
        v579[1] = v479;
        v579[2] = v480;
        v579[3] = v481;
        v482 = sub_18F6848A4((uint64_t)v579, v459, v461, v460, v462);
        v484 = v483;
        v486 = v485;
        v488 = v487;
        v489 = 0;
        v490 = *v575 + (v439 << 6);
        v491 = v569 - *(double *)(v490 + 8);
        v492 = v565 - *(double *)(v490 + 16);
        v566 = v467 * v491;
        v570 = *(double *)v455;
        v493 = *(unsigned int *)(v455 + 24);
        v494 = v469 * v491 + v471 * v492;
        v495 = v492;
        *(double *)&v596 = v482;
        *((double *)&v596 + 1) = v483;
        v597 = v486;
        v598 = v487;
        *(double *)__p = v482;
        *(double *)&__p[8] = v483;
        *(double *)&__p[16] = v486;
        *(double *)&__p[24] = v487;
        v496 = 0.0;
        v497 = 1;
        do
        {
          v498 = v497;
          v499 = sub_18F684E64((uint64_t)__p, v489, v489);
          v497 = 0;
          v496 = v496 + v499;
          v489 = 1;
        }
        while ((v498 & 1) != 0);
        if (v482 >= 0.0 && v488 >= 0.0)
        {
          v500 = v486 - v484;
          if (v486 - v484 < 0.0)
            v500 = -(v486 - v484);
          if (v500 <= 0.00100000005 && v496 > 0.0)
          {
            v501 = sqrt(v496);
            goto LABEL_364;
          }
        }
        v501 = 10.0;
        if (*a1)
        {
          if (qword_1EE1720F8 != -1)
            dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
          v305 = (char *)v576;
          v502 = qword_1EE172100;
          if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
          {
            v503 = *(double *)v455;
            *(_DWORD *)__p = 134219008;
            *(double *)&__p[4] = v503;
            *(_WORD *)&__p[12] = 2048;
            *(double *)&__p[14] = v482;
            *(_WORD *)&__p[22] = 2048;
            *(double *)&__p[24] = v488;
            *(_WORD *)v600 = 2048;
            *(double *)&v600[2] = v486;
            v601 = 2048;
            v602 = v484;
            _os_log_impl(&dword_18F5B3000, v502, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[backPropagate] updated covariance is not positive definite, reporting a default value. timestamp,%.2f,diagonals,%.2f,%.2f,off-diagonals,%.2f,%.2f.", __p, 0x34u);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1EE1720F8 != -1)
              dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
            v504 = *(double *)v455;
            LODWORD(v589[0]) = 134219008;
            *(double *)((char *)v589 + 4) = v504;
            WORD6(v589[0]) = 2048;
            *(double *)((char *)v589 + 14) = v482;
            WORD3(v589[1]) = 2048;
            *((double *)&v589[1] + 1) = v488;
            *(_WORD *)v590 = 2048;
            *(double *)&v590[2] = v486;
            v591 = 2048;
            v592 = v484;
            LODWORD(v561) = 52;
            v505 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::backPropagate(const std::unordered_map<CFAbsoluteTime, PosterioriPositionEstimate> &, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v505);
            if (v505 != __p)
              free(v505);
            goto LABEL_364;
          }
        }
        else
        {
LABEL_364:
          v305 = (char *)v576;
        }
        v506 = v564 + v566 + v574 * v495;
        v507 = v563 + v494;
        v508 = sub_18F60F7E4(v493, v570, v501, v506, v563 + v494, *((double *)a1 + 6), *((double *)a1 + 7));
        Object = (void *)objc_msgSend_lastObject(a4, v509, v510, v511);
        objc_msgSend_latitude(v508, v513, v514, v515);
        v517 = v516;
        objc_msgSend_longitude(v508, v518, v519, v520);
        v522 = v521;
        objc_msgSend_latitude(Object, v523, v524, v525);
        v527 = v526;
        objc_msgSend_longitude(Object, v528, v529, v530);
        v532 = sub_18F71AF58((double *)a1 + 1, v517, v522, v527, v531);
        objc_msgSend_setCourse_(Object, v533, v534, v535, v532);
        objc_msgSend_course(Object, v536, v537, v538);
        v543 = v542 <= 0.0;
        v544 = -1.0;
        if (!v543)
          v544 = 10.0;
        objc_msgSend_setCourseAccuracy_(Object, v539, v540, v541, v544);
        objc_msgSend_addObject_(a4, v545, (uint64_t)v508, v546);

        v543 = v436-- < 1;
        v437 = 0uLL;
        v285 = v506;
        v286 = v507;
        if (v543)
          goto LABEL_239;
        goto LABEL_338;
      }
    }
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
    v547 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__p = 134217984;
      *(_QWORD *)&__p[4] = v438;
      _os_log_impl(&dword_18F5B3000, v547, OS_LOG_TYPE_DEBUG, "non-invertible matrix, D(%zu) <= 0 non-positive definite matrix!", __p, 0xCu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
      LODWORD(v603[0]) = 134217984;
      *(_QWORD *)((char *)v603 + 4) = v438;
      v555 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CMFactoredMatrix<double, 2>::inverse(CMMatrix<T, N> &) const [T = double, N = 2]", "CoreLocation: %s\n", v555);
      if (v555 != __p)
        free(v555);
    }
    if (*a1)
    {
      if (qword_1EE1720F8 != -1)
        dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
      v548 = qword_1EE172100;
      if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl(&dword_18F5B3000, v548, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[backPropagate] matrix inversion failed, returned false", __p, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1EE1720F8 != -1)
          goto LABEL_456;
        goto LABEL_433;
      }
    }
LABEL_381:
    if (!*a1)
      goto LABEL_387;
    if (qword_1EE1720F8 != -1)
      dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
    v549 = qword_1EE172100;
    if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__p = 0;
      _os_log_impl(&dword_18F5B3000, v549, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[runRTS] Returned false. Backpropagation failed.", __p, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_387;
    bzero(__p, 0x65CuLL);
    if (qword_1EE1720F8 != -1)
      dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
    LOWORD(v589[0]) = 0;
    v280 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v280);
LABEL_418:
    if (v280 != __p)
      free(v280);
    goto LABEL_387;
  }
LABEL_239:
  if (a1[328])
  {
    if (*((_QWORD *)a1 + 38))
    {
      if (a1[329])
      {
        sub_18F683B10((uint64_t)a1, v305, a4, v303);
        if (*a1)
        {
          if (qword_1EE1720F8 != -1)
            dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
          v306 = qword_1EE172100;
          if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__p = 0;
            _os_log_impl(&dword_18F5B3000, v306, OS_LOG_TYPE_DEFAULT, "[CLPedestrianRTSSmoother]:[runRTS] Open loop propagation for HEAD performed.", __p, 2u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1EE1720F8 != -1)
              dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
            LOWORD(v589[0]) = 0;
            LODWORD(v561) = 2;
            v560 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v560);
            if (v560 != __p)
              free(v560);
            v305 = (char *)v576;
          }
        }
      }
    }
  }
  objc_msgSend_sortUsingComparator_(a4, v302, (uint64_t)&unk_1E29905D0, v303);
  if (*a1)
  {
    if (qword_1EE1720F8 != -1)
      dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
    v309 = qword_1EE172100;
    if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__p = 0;
      _os_log_impl(&dword_18F5B3000, v309, OS_LOG_TYPE_DEFAULT, "[CLPedestrianRTSSmoother]:[runRTS] reconstructedLocation array elements are now in ascending temporal order.", __p, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EE1720F8 != -1)
        dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
      LOWORD(v589[0]) = 0;
      LODWORD(v561) = 2;
      v556 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v556);
      if (v556 != __p)
        free(v556);
      v305 = (char *)v576;
    }
  }
  v310 = *((_QWORD *)a1 + 35);
  v311 = (void *)objc_msgSend_objectAtIndex_(v305, v307, v310, v308);
  v315 = (void *)objc_msgSend_cfAbsTimestamp(v311, v312, v313, v314);
  objc_msgSend_timeIntervalSinceReferenceDate(v315, v316, v317, v318);
  if (!a1[200])
    goto LABEL_452;
  if (v322 <= *v572 || v310 >= v7)
  {
LABEL_396:
    if (*a1)
    {
      if (qword_1EE1720F8 != -1)
        dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
      v552 = qword_1EE172100;
      if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl(&dword_18F5B3000, v552, OS_LOG_TYPE_DEFAULT, "[CLPedestrianRTSSmoother]:[runRTS] Returned true. Pedestrian trajectory smoothing performed successfully.", __p, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1EE1720F8 != -1)
          dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
        LOWORD(v589[0]) = 0;
        v558 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v558);
        if (v558 != __p)
          free(v558);
      }
    }
  }
  else
  {
    v323 = (void *)objc_msgSend_lastObject(a4, v319, v320, v321);
    objc_msgSend_horizontalAccuracy(v323, v324, v325, v326);
    v328 = v327 * v327 * 0.5;
    *(_QWORD *)&v589[1] = 0;
    v589[0] = *(unint64_t *)&v328;
    *((double *)&v589[1] + 1) = v328;
    sub_18F6840A4((uint64_t)&v596, (uint64_t)v589);
    v603[0] = 0x3FF0000000000000uLL;
    *(_QWORD *)&v603[1] = 0;
    *((_QWORD *)&v603[1] + 1) = 0x3FF0000000000000;
    v329 = *((_QWORD *)a1 + 35);
    if (v329 < objc_msgSend_count(v305, v330, v331, v332))
    {
      while (1)
      {
        v335 = (void *)objc_msgSend_objectAtIndexedSubscript_(v305, v333, v329, v334);
        v339 = (void *)objc_msgSend_deltaPosition_m(v335, v336, v337, v338);
        v346 = objc_msgSend_isValid(v339, v340, v341, v342);
        v347 = 0.0;
        v348 = 0.0;
        if (v346)
        {
          v349 = (void *)objc_msgSend_deltaPosition_m(v335, v343, v344, v345, 0.0);
          objc_msgSend_X(v349, v350, v351, v352);
          v347 = v353;
          v357 = (void *)objc_msgSend_deltaPosition_m(v335, v354, v355, v356);
          objc_msgSend_Y(v357, v358, v359, v360);
        }
        v361 = sqrt(v348 * v348 + v347 * v347);
        if (v329 == *((_QWORD *)a1 + 35))
          v361 = v361 - *((double *)a1 + 36);
        if (v346)
        {
          v362 = atan2(v348, v347);
          v363 = 16.0;
          *(double *)&v364 = 1.05;
        }
        else
        {
          v362 = 0.0;
          v363 = 25.0;
          *(double *)&v364 = 1.6;
        }
        if (!a1[344])
          break;
        v365 = __sincos_stret(v362 - *(double *)v571);
        v369 = (void *)objc_msgSend_lastObject(a4, v366, v367, v368);
        objc_msgSend_latitude(v369, v370, v371, v372);
        v374 = v373;
        v378 = (void *)objc_msgSend_lastObject(a4, v375, v376, v377);
        objc_msgSend_longitude(v378, v379, v380, v381);
        v382 = v361 * v365.__cosval;
        v383 = -(v361 * v365.__sinval);
        *(_QWORD *)&v593 = 0;
        v581[0] = 0;
        sub_18F71AAC4((double *)a1 + 1, (double *)&v593, (double *)v581, (double *)v580, v374, v384, 0.0, v382, v383, 0.0);
        *(double *)&v586 = v383;
        *((double *)&v586 + 1) = v382;
        v587 = v365.__cosval;
        v588 = v365.__sinval;
        v582 = *(double *)&v364;
        v583 = v363;
        sub_18F68434C((uint64_t)&v596, (double *)v603, (double *)&v586, (uint64_t)&v582);
        v385 = 0;
        v386 = 0.0;
        *(double *)__p = *(double *)&v596 + 0.0 + v597 * *((double *)&v596 + 1) * v597;
        *(double *)&__p[8] = *((double *)&v596 + 1) * v597 + 0.0;
        *(double *)&__p[16] = v597 * *((double *)&v596 + 1) + 0.0;
        *(double *)&__p[24] = *((double *)&v596 + 1) + 0.0;
        v387 = 1;
        do
        {
          v388 = v387;
          v391 = sub_18F684E64((uint64_t)__p, v385, v385);
          v387 = 0;
          v386 = v386 + v391;
          v385 = 1;
        }
        while ((v388 & 1) != 0);
        v392 = (void *)objc_msgSend_lastObject(a4, (const char *)1, v389, v390);
        v305 = (char *)v576;
        objc_msgSend_latitude(v392, v393, v394, v395);
        v397 = v396;
        v401 = (void *)objc_msgSend_lastObject(a4, v398, v399, v400);
        objc_msgSend_longitude(v401, v402, v403, v404);
        v405 = *(double *)&v593;
        v406 = *(double *)v581;
        v408 = sub_18F71AF58((double *)a1 + 1, v397, v407, *(double *)&v593, *(double *)v581);
        v409 = [CLTripSegmentLocation alloc];
        v414 = objc_msgSend_cfAbsTimestamp(v335, v410, v411, v412);
        if (v408 <= 0.0)
          v415 = -1.0;
        else
          v415 = 10.0;
        v416 = (void *)objc_msgSend_initWithTime_latitude_longitude_horizontalAccuracy_course_courseAccuracy_speed_speedAccuracy_altitude_altitudeAccuracy_locType_(v409, v413, v414, 1, v405, v406, sqrt(v386), v408, v415, -1.0, -1.0, -1.0, 0xBFF0000000000000, v561);
        objc_msgSend_setLocationReconstructionType_(v416, v417, 2, v418);
        if (a1[200])
        {
          objc_msgSend_setSignalEnvironmentType_(v416, v419, *((unsigned int *)a1 + 48), v420);
        }
        else if (*a1)
        {
          if (qword_1EE1720F8 != -1)
            dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
          v421 = qword_1EE172100;
          if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__p = 0;
            _os_log_impl(&dword_18F5B3000, v421, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[openLoopPropagationTail] LastConsumedMeasurement is not initialized.", __p, 2u);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1EE1720F8 != -1)
              dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
            LOWORD(v579[0]) = 0;
            LODWORD(v561) = 2;
            v425 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "void CLPedestrianRTSSmoother::openLoopPropagationTail(NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v425);
            if (v425 != __p)
              free(v425);
            v305 = (char *)v576;
          }
        }
        objc_msgSend_addObject_(a4, v419, (uint64_t)v416, v420);

        if (++v329 >= objc_msgSend_count(v305, v422, v423, v424))
          goto LABEL_390;
      }
LABEL_452:
      sub_18F68490C();
    }
LABEL_390:
    if (*a1)
    {
      if (qword_1EE1720F8 != -1)
        dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
      v551 = qword_1EE172100;
      if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl(&dword_18F5B3000, v551, OS_LOG_TYPE_DEFAULT, "[CLPedestrianRTSSmoother]:[runRTS] Open loop propagation for TAIL performed.", __p, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1EE1720F8 != -1)
          dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
        LOWORD(v589[0]) = 0;
        v559 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLPedestrianRTSSmoother::runRTS(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v559);
        if (v559 != __p)
          free(v559);
      }
      goto LABEL_396;
    }
  }
  v14 = 1;
LABEL_388:
  sub_18F684A10((uint64_t)v577);
  return v14;
}

void sub_18F682FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_18F684A10((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_18F6830A8(uint64_t a1, __int128 *a2)
{
  float64x2_t v4;
  double v5;
  double *v6;
  unint64_t v7;
  double *v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  double *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  double v20;
  double v21;
  char v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  NSObject *v38;
  NSObject *v39;
  double v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  _QWORD v45[4];
  double v46[2];
  float64x2_t v47;
  int v48;
  unint64_t v49;
  uint8_t buf[4];
  unint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = vsubq_f64(*(float64x2_t *)((char *)a2 + 8), *(float64x2_t *)(a1 + 80));
  v47 = v4;
  if (*(_BYTE *)(a1 + 1))
  {
    v5 = sqrt(vaddvq_f64(vmulq_f64(v4, v4)));
    v6 = *(double **)(a1 + 416);
    v7 = *(_QWORD *)(a1 + 424);
    if ((unint64_t)v6 >= v7)
    {
      v9 = *(double **)(a1 + 408);
      v10 = v6 - v9;
      if ((unint64_t)(v10 + 1) >> 61)
        sub_18F5F7864();
      v11 = v7 - (_QWORD)v9;
      v12 = (uint64_t)(v7 - (_QWORD)v9) >> 2;
      if (v12 <= v10 + 1)
        v12 = v10 + 1;
      if (v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)sub_18F610B1C(a1 + 424, v13);
        v9 = *(double **)(a1 + 408);
        v6 = *(double **)(a1 + 416);
      }
      else
      {
        v14 = 0;
      }
      v15 = (double *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v5;
      v8 = v15 + 1;
      while (v6 != v9)
      {
        v17 = *((_QWORD *)v6-- - 1);
        *((_QWORD *)v15-- - 1) = v17;
      }
      *(_QWORD *)(a1 + 408) = v15;
      *(_QWORD *)(a1 + 416) = v8;
      *(_QWORD *)(a1 + 424) = v16;
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v6 = v5;
      v8 = v6 + 1;
    }
    *(_QWORD *)(a1 + 416) = v8;
  }
  v18 = 0;
  v46[0] = *((double *)a2 + 3) * *((double *)a2 + 3) * 0.5;
  v46[1] = v46[0];
  v45[0] = 0x3FF0000000000000;
  v45[1] = 0;
  v45[2] = 0;
  v45[3] = 0x3FF0000000000000;
  v19 = 1;
  v20 = 0.0;
  v21 = 0.0;
  while (1)
  {
    v22 = v19;
    v23 = sub_18F684E64((uint64_t)v45, v18, 0);
    v24 = *(double *)(a1 + 104);
    v25 = sub_18F684E64((uint64_t)v45, v18, 1uLL);
    v26 = sub_18F684E64((uint64_t)v45, v18, 0);
    v27 = v23 * v24;
    v28 = v46[v18];
    v29 = v28 + v23 * (v23 * v24);
    if (v29 <= 0.0)
    {
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
      v38 = off_1ECD8E720;
      if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        v51 = v18;
        _os_log_impl(&dword_18F5B3000, v38, OS_LOG_TYPE_DEBUG, "%zu: alpha <= 0, matrix ! positive definite", buf, 0xCu);
      }
      v21 = 0.0;
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_36;
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 == -1)
      {
LABEL_41:
        v48 = 134217984;
        v49 = v18;
        v44 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "CMVector<T, N> CMFactoredMatrix<double, 2>::biermanObservationalUpdate(const CMMatrix<T, P, N> &, const CMVector<T, P> &, const CMVector<T, P> &) [T = double, N = 2, P = 2UL]", "CoreLocation: %s\n", v44);
        if (v44 != (char *)buf)
          free(v44);
        goto LABEL_36;
      }
LABEL_44:
      dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
      goto LABEL_41;
    }
    v31 = *(double *)(a1 + 112);
    v30 = *(double *)(a1 + 120);
    v32 = v25 + v26 * v30;
    v33 = v32 * v31;
    *(double *)(a1 + 104) = v28 * (1.0 / v29) * *(double *)(a1 + 104);
    v34 = v29 + v32 * (v32 * v31);
    if (v34 <= 0.0)
      break;
    v19 = 0;
    v35 = 1.0 / v34;
    *(double *)(a1 + 112) = v31 * (v29 * v35);
    *(double *)(a1 + 120) = v30 + v27 * -(v32 * (1.0 / v29));
    v36 = v27 + v33 * v30;
    v37 = v35 * v47.f64[v18];
    v20 = v20 + v37 * v36;
    v21 = v21 + v37 * v33;
    v18 = 1;
    if ((v22 & 1) == 0)
      goto LABEL_37;
  }
  if (qword_1ECD8E728 != -1)
    dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
  v39 = off_1ECD8E720;
  if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v51 = v18;
    _os_log_impl(&dword_18F5B3000, v39, OS_LOG_TYPE_DEBUG, "%zu: alpha <= 0, matrix ! positive definite", buf, 0xCu);
  }
  v21 = 0.0;
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 == -1)
      goto LABEL_41;
    goto LABEL_44;
  }
LABEL_36:
  v20 = 0.0;
LABEL_37:
  v40 = v21 + *(double *)(a1 + 88);
  *(double *)(a1 + 80) = v20 + *(double *)(a1 + 80);
  *(double *)(a1 + 88) = v40;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)a2;
  v41 = (_OWORD *)(a1 + 160);
  v42 = *a2;
  v43 = a2[1];
  if (*(_BYTE *)(a1 + 200))
  {
    *(_DWORD *)(a1 + 192) = *((_DWORD *)a2 + 8);
    *v41 = v42;
    *(_OWORD *)(a1 + 176) = v43;
  }
  else
  {
    *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 4);
    *v41 = v42;
    *(_OWORD *)(a1 + 176) = v43;
    *(_BYTE *)(a1 + 200) = 1;
  }
}

void sub_18F6835D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, double a5)
{
  int v5;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  int isValid;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  NSObject *v46;
  double v47;
  NSObject *v48;
  NSObject *v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  long double v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  long double v70;
  double v71;
  double v72;
  char *v73;
  char *v74;
  char *v75;
  uint8_t buf[1640];
  uint64_t v77;

  v5 = a4;
  v77 = *MEMORY[0x1E0C80C00];
  v10 = (void *)objc_msgSend_objectAtIndexedSubscript_(a2, (const char *)a2, a3, a4);
  v14 = (void *)objc_msgSend_deltaPosition_m(v10, v11, v12, v13);
  isValid = objc_msgSend_isValid(v14, v15, v16, v17);
  if (a3 && ((isValid | v5 ^ 1) & 1) != 0)
  {
    if (((isValid | v5) & 1) != 0)
    {
      v21 = (void *)objc_msgSend_objectAtIndexedSubscript_(a2, v19, a3, v20);
      v25 = (void *)objc_msgSend_cfAbsTimestamp(v21, v22, v23, v24);
      objc_msgSend_timeIntervalSinceReferenceDate(v25, v26, v27, v28);
      v30 = v29;
      v33 = (void *)objc_msgSend_objectAtIndexedSubscript_(a2, v31, a3 - 1, v32);
      v37 = (void *)objc_msgSend_cfAbsTimestamp(v33, v34, v35, v36);
      objc_msgSend_timeIntervalSinceReferenceDate(v37, v38, v39, v40);
      v44 = v30 - v43;
      v45 = v30 - a5;
      if (v45 < 0.0 && *(_BYTE *)a1)
      {
        if (qword_1EE1720F8 != -1)
          dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
        v46 = qword_1EE172100;
        if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v46, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[interpolateInertialOdometryDeltaPosition] time between first inertial to next location is negative.", buf, 2u);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE1720F8 != -1)
            dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
          v73 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "void CLPedestrianRTSSmoother::interpolateInertialOdometryDeltaPosition(NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, const size_t, const CFAbsoluteTime, const BOOL)", "CoreLocation: %s\n", v73);
          if (v73 != (char *)buf)
            free(v73);
        }
      }
      v47 = v45 / v44;
      if (fabs(v44) < 2.22044605e-16 && *(_BYTE *)a1)
      {
        if (qword_1EE1720F8 != -1)
          dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
        v48 = qword_1EE172100;
        if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v48, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[interpolateInertialOdometryDeltaPosition] repeated timestamps of inertialOdometry.", buf, 2u);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE1720F8 != -1)
            dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
          v74 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "void CLPedestrianRTSSmoother::interpolateInertialOdometryDeltaPosition(NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, const size_t, const CFAbsoluteTime, const BOOL)", "CoreLocation: %s\n", v74);
          if (v74 != (char *)buf)
            free(v74);
        }
      }
      if (v47 > 1.0 && *(_BYTE *)a1)
      {
        if (qword_1EE1720F8 != -1)
          dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
        v49 = qword_1EE172100;
        if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v49, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[interpolateInertialOdometryDeltaPosition] interpolationScaleFactor is greater than 1.", buf, 2u);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE1720F8 != -1)
            dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
          v75 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "void CLPedestrianRTSSmoother::interpolateInertialOdometryDeltaPosition(NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, const size_t, const CFAbsoluteTime, const BOOL)", "CoreLocation: %s\n", v75);
          if (v75 != (char *)buf)
            free(v75);
        }
      }
      v50 = (void *)objc_msgSend_objectAtIndexedSubscript_(a2, v41, a3, v42);
      v54 = (void *)objc_msgSend_deltaPosition_m(v50, v51, v52, v53);
      objc_msgSend_X(v54, v55, v56, v57);
      v59 = v58;
      v62 = (void *)objc_msgSend_objectAtIndexedSubscript_(a2, v60, a3, v61);
      v66 = (void *)objc_msgSend_deltaPosition_m(v62, v63, v64, v65);
      objc_msgSend_Y(v66, v67, v68, v69);
      v71 = sqrt(v70 * v70 + v59 * v59);
      v72 = atan2(v70, v59);
      if (v5)
      {
        *(_QWORD *)(a1 + 256) = a3;
        *(double *)(a1 + 264) = v47 * v71;
        *(double *)(a1 + 272) = v72;
      }
      else
      {
        *(_QWORD *)(a1 + 280) = a3;
        *(double *)(a1 + 288) = (1.0 - v47) * v71;
        *(double *)(a1 + 296) = v72;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
      *(_QWORD *)(a1 + 280) = a3;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 264) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 256) = a3;
  }
}

unint64_t sub_18F683B10(uint64_t a1, char *a2, void *a3, uint64_t a4)
{
  void *Object;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  int isValid;
  double v31;
  double v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  __double2 v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  CLTripSegmentLocation *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  double v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  double v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  BOOL v109;
  double v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  double v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  double v129;
  double v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  double v135;
  double v136;
  __double2 v137;
  double v138;
  double v139;
  unint64_t v140;
  char v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  const char *v146;
  uint64_t v147;
  char *v148;
  unint64_t result;
  const char *v150;
  uint64_t v151;
  void *v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  double v156;
  double v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD v165[2];
  double v166[4];
  double v167;
  double v168;
  double v169;
  double v170[4];
  double v171;
  double v172;
  double v173;
  double v174[4];
  uint8_t buf[8];
  double v176;
  double v177;
  double v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  Object = (void *)objc_msgSend_lastObject(a3, a2, (uint64_t)a3, a4);
  objc_msgSend_horizontalAccuracy(Object, v8, v9, v10);
  v174[1] = 0.0;
  v174[2] = 0.0;
  v174[0] = v11 * v11 * 0.5;
  v174[3] = v174[0];
  sub_18F6840A4((uint64_t)&v171, (uint64_t)v174);
  v170[0] = 1.0;
  v170[1] = 0.0;
  v170[2] = 0.0;
  v170[3] = 1.0;
  if ((*(_QWORD *)(a1 + 304) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 304);
    do
    {
      v16 = (void *)objc_msgSend_objectAtIndexedSubscript_(a2, v12, v15, v14);
      v19 = (void *)objc_msgSend_objectAtIndexedSubscript_(a2, v17, v15, v18);
      v23 = (void *)objc_msgSend_deltaPosition_m(v19, v20, v21, v22);
      isValid = objc_msgSend_isValid(v23, v24, v25, v26);
      v31 = 0.0;
      v32 = 0.0;
      if (isValid)
      {
        v33 = (void *)objc_msgSend_deltaPosition_m(v16, v27, v28, v29, 0.0);
        objc_msgSend_X(v33, v34, v35, v36);
        v31 = v37;
        v41 = (void *)objc_msgSend_deltaPosition_m(v16, v38, v39, v40);
        objc_msgSend_Y(v41, v42, v43, v44);
      }
      v45 = sqrt(v32 * v32 + v31 * v31);
      if (*(_QWORD *)(a1 + 304) == v15)
        v45 = v45 - *(double *)(a1 + 312);
      v46 = 0.0;
      if (isValid)
        v46 = atan2(v32, v31);
      v47 = __sincos_stret(v46 - *(double *)(a1 + 320));
      v51 = (void *)objc_msgSend_lastObject(a3, v48, v49, v50);
      objc_msgSend_latitude(v51, v52, v53, v54);
      v56 = v55;
      v60 = (void *)objc_msgSend_lastObject(a3, v57, v58, v59);
      objc_msgSend_longitude(v60, v61, v62, v63);
      v168 = 0.0;
      v169 = 0.0;
      sub_18F71AAC4((double *)(a1 + 8), &v169, &v168, &v167, v56, v64, 0.0, -(v45 * v47.__cosval), v45 * v47.__sinval, 0.0);
      v65 = [CLTripSegmentLocation alloc];
      v69 = objc_msgSend_cfAbsTimestamp(v16, v66, v67, v68);
      v71 = (void *)objc_msgSend_initWithTime_latitude_longitude_horizontalAccuracy_course_courseAccuracy_speed_speedAccuracy_altitude_altitudeAccuracy_locType_(v65, v70, v69, 1, v169, v168, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0xBFF0000000000000);
      objc_msgSend_setLocationReconstructionType_(v71, v72, 2, v73);
      if (*(_BYTE *)(a1 + 248))
      {
        objc_msgSend_setSignalEnvironmentType_(v71, v74, *(unsigned int *)(a1 + 240), v76);
      }
      else if (*(_BYTE *)a1)
      {
        if (qword_1EE1720F8 != -1)
          dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
        v77 = qword_1EE172100;
        if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v77, OS_LOG_TYPE_ERROR, "[CLPedestrianRTSSmoother]:[openLoopPropagationHead] FirstConsumedMeasurement is not initialized.", buf, 2u);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE1720F8 != -1)
            dispatch_once(&qword_1EE1720F8, &unk_1E298DA10);
          LOWORD(v166[0]) = 0;
          v148 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "void CLPedestrianRTSSmoother::openLoopPropagationHead(NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v148);
          if (v148 != (char *)buf)
            free(v148);
        }
      }
      v78 = (void *)objc_msgSend_lastObject(a3, v74, v75, v76);
      objc_msgSend_latitude(v71, v79, v80, v81);
      v83 = v82;
      objc_msgSend_longitude(v71, v84, v85, v86);
      v88 = v87;
      objc_msgSend_latitude(v78, v89, v90, v91);
      v93 = v92;
      objc_msgSend_longitude(v78, v94, v95, v96);
      v98 = sub_18F71AF58((double *)(a1 + 8), v83, v88, v93, v97);
      objc_msgSend_setCourse_(v78, v99, v100, v101, v98);
      objc_msgSend_course(v78, v102, v103, v104);
      v109 = v108 <= 0.0;
      v110 = -1.0;
      if (!v109)
        v110 = 10.0;
      objc_msgSend_setCourseAccuracy_(v78, v105, v106, v107, v110);
      objc_msgSend_course(v78, v111, v112, v113);
      v115 = v114 * 0.0174532924;
      objc_msgSend_latitude(v78, v116, v117, v118);
      v120 = v119;
      objc_msgSend_longitude(v78, v121, v122, v123);
      v125 = v124;
      objc_msgSend_latitude(v71, v126, v127, v128);
      v130 = v129;
      objc_msgSend_longitude(v71, v131, v132, v133);
      v134 = 0.0;
      v136 = sub_18F5BD064((double *)(a1 + 8), v120, v125, v130, v135, 0.0);
      v137 = __sincos_stret(v115);
      v166[0] = -(v136 * v137.__sinval);
      v166[1] = v137.__cosval * v136;
      v166[2] = v137.__cosval;
      v166[3] = v137.__sinval;
      if (isValid)
        v138 = 1.05;
      else
        v138 = 1.6;
      v139 = 25.0;
      if (isValid)
        v139 = 16.0;
      *(double *)v165 = v138;
      *(double *)&v165[1] = v139;
      sub_18F68434C((uint64_t)&v171, v170, v166, (uint64_t)v165);
      v140 = 0;
      *(double *)buf = v171 + 0.0 + v173 * v172 * v173;
      v176 = v172 * v173 + 0.0;
      v177 = v173 * v172 + 0.0;
      v178 = v172 + 0.0;
      v141 = 1;
      do
      {
        v142 = v141;
        v145 = sub_18F684E64((uint64_t)buf, v140, v140);
        v141 = 0;
        v134 = v134 + v145;
        v140 = 1;
      }
      while ((v142 & 1) != 0);
      objc_msgSend_setHorizontalAccuracy_(v78, (const char *)1, v143, v144, sqrt(v134));
      objc_msgSend_addObject_(a3, v146, (uint64_t)v71, v147);

      v109 = v15-- <= 0;
    }
    while (!v109);
  }
  result = objc_msgSend_count(a3, v12, v13, v14);
  if (result > 1)
  {
    v152 = (void *)objc_msgSend_objectAtIndex_(a3, v150, result - 2, v151);
    objc_msgSend_horizontalAccuracy(v152, v153, v154, v155);
    v157 = v156;
    v161 = (void *)objc_msgSend_lastObject(a3, v158, v159, v160);
    return objc_msgSend_setHorizontalAccuracy_(v161, v162, v163, v164, v157);
  }
  return result;
}

uint64_t sub_18F68406C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  v5 = (void *)objc_msgSend_timestamp(a2, (const char *)a2, (uint64_t)a3, a4);
  v9 = objc_msgSend_timestamp(a3, v6, v7, v8);
  return objc_msgSend_compare_(v5, v10, v9, v11);
}

uint64_t sub_18F6840A4(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v5;
  unint64_t i;
  double v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  uint64_t result;
  char *v13;
  uint8_t buf[4];
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(double *)(a2 + 16) - *(double *)(a2 + 8);
  if (v2 < 0.0)
    v2 = -v2;
  if (v2 > 1.00000002e-16)
    return 0;
  v5 = a1 + 16;
  for (i = 1; ; --i)
  {
    v7 = sub_18F684E64(a2, i, i);
    if (!i)
    {
      v8 = *(double *)sub_18F6851BC(v5, 0, 1uLL);
      v7 = v7 + -(v8 * *(double *)sub_18F6851BC(v5, 0, 1uLL)) * *(double *)(a1 + 8);
    }
    *(double *)sub_18F685514(a1, i) = v7;
    if (*(double *)sub_18F685514(a1, i) <= 0.0)
      break;
    if (!i)
      return 1;
    v9 = sub_18F684E64(a2, i - 1, i);
    v10 = v9 / *(double *)sub_18F685514(a1, i);
    *(double *)sub_18F6851BC(v5, i - 1, i) = v10;
  }
  if (qword_1ECD8E728 != -1)
    dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
  v11 = off_1ECD8E720;
  if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v15 = i;
    _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_DEBUG, "D(%zu) <= 0 non-positive definite matrix!", buf, 0xCu);
  }
  result = sub_18F5C4AE0(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
    v13 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CMFactoredMatrix<double, 2>::factor(const CMMatrix<T, N, N> &) [T = double, N = 2]", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
    return 0;
  }
  return result;
}

void sub_18F68434C(uint64_t a1, double *a2, double *a3, uint64_t a4)
{
  uint64_t v8;
  double v9;
  double v10;
  unint64_t i;
  unint64_t v12;
  char v13;
  double v14;
  char v15;
  double v16;
  double v17;
  double *v18;
  unint64_t v19;
  char v20;
  char v21;
  double v22;
  double *v23;
  unint64_t v24;
  double v25;
  char v26;
  char v27;
  double v28;
  double v29;
  double *v30;
  unint64_t v31;
  char v32;
  char v33;
  double v34;
  double *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  NSObject *v40;
  char *v41;
  uint8_t buf[4];
  unint64_t v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v8 = a1 + 16;
  v9 = a2[1];
  v10 = a2[3];
  a2[2] = a2[2] + *a2 * *(double *)(a1 + 16);
  a2[3] = v10 + v9 * *(double *)(a1 + 16);
  for (i = 1; ; --i)
  {
    v12 = 0;
    *((_QWORD *)&v44 + i) = 0;
    v13 = 1;
    v14 = 0.0;
    do
    {
      v15 = v13;
      v16 = *(double *)sub_18F60F010((uint64_t)a2, i, v12);
      v17 = v16 * *(double *)sub_18F60F010((uint64_t)a2, i, v12);
      v18 = (double *)sub_18F685514(a1, v12);
      v13 = 0;
      v14 = v14 + v17 * *v18;
      *((double *)&v44 + i) = v14;
      v12 = 1;
    }
    while ((v15 & 1) != 0);
    v19 = 0;
    v20 = 1;
    do
    {
      v21 = v20;
      v22 = *(double *)sub_18F60F010((uint64_t)a3, i, v19);
      v23 = (double *)sub_18F60F010((uint64_t)a3, i, v19);
      v20 = 0;
      v14 = v14 + v22 * *v23 * *(double *)(a4 + 8 * v19);
      *((double *)&v44 + i) = v14;
      v19 = 1;
    }
    while ((v21 & 1) != 0);
    if (v14 <= 0.0)
      break;
    if (!i)
    {
      *(_OWORD *)a1 = v44;
      return;
    }
    v24 = 0;
    v25 = 0.0;
    v26 = 1;
    do
    {
      v27 = v26;
      v28 = *(double *)sub_18F60F010((uint64_t)a2, 0, v24);
      v29 = v28 * *(double *)sub_18F685514(a1, v24);
      v30 = (double *)sub_18F60F010((uint64_t)a2, i, v24);
      v26 = 0;
      v25 = v25 + v29 * *v30;
      v24 = 1;
    }
    while ((v27 & 1) != 0);
    v31 = 0;
    v32 = 1;
    do
    {
      v33 = v32;
      v34 = *(double *)sub_18F60F010((uint64_t)a3, 0, v31) * *(double *)(a4 + 8 * v31);
      v35 = (double *)sub_18F60F010((uint64_t)a3, i, v31);
      v32 = 0;
      v25 = v25 + v34 * *v35;
      v31 = 1;
    }
    while ((v33 & 1) != 0);
    *(double *)sub_18F6851BC(v8, 0, i) = v25 / v14;
    v36 = *(double *)sub_18F6851BC(v8, 0, i);
    *a2 = *a2 - v36 * *(double *)sub_18F60F010((uint64_t)a2, i, 0);
    v37 = *(double *)sub_18F6851BC(v8, 0, i);
    a2[2] = a2[2] - v37 * *(double *)sub_18F60F010((uint64_t)a2, i, 1uLL);
    v38 = *(double *)sub_18F6851BC(v8, 0, i);
    *a3 = *a3 - v38 * *(double *)sub_18F60F010((uint64_t)a3, i, 0);
    v39 = *(double *)sub_18F6851BC(v8, 0, i);
    a3[2] = a3[2] - v39 * *(double *)sub_18F60F010((uint64_t)a3, i, 1uLL);
  }
  if (qword_1ECD8E728 != -1)
    dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
  v40 = off_1ECD8E720;
  if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v43 = i;
    _os_log_impl(&dword_18F5B3000, v40, OS_LOG_TYPE_DEBUG, "D[%zu] <= 0, matrix ! positive definite", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
    v41 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CMFactoredMatrix<double, 2>::thorntonTemporalUpdate(CMMatrix<T, N, N> &, CMMatrix<T, N, M> &, const CMVector<T, M> &) [T = double, N = 2, M = 2UL]", "CoreLocation: %s\n", v41);
    if (v41 != (char *)buf)
      free(v41);
  }
}

double sub_18F6847AC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  char v8;
  char v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  double v16;

  v4 = 0;
  v5 = 1;
  do
  {
    v6 = 0;
    v7 = v5;
    v8 = 1;
    do
    {
      v9 = v8;
      v10 = sub_18F684E64(a1, v4, 0);
      v11 = v10 * sub_18F684E64(a2, 0, v6);
      *(double *)sub_18F60F010((uint64_t)&v16, v4, v6) = v11;
      v12 = sub_18F684E64(a1, v4, 1uLL);
      v13 = sub_18F684E64(a2, 1uLL, v6);
      v14 = (double *)sub_18F60F010((uint64_t)&v16, v4, v6);
      v8 = 0;
      *v14 = *v14 + v12 * v13;
      v6 = 1;
    }
    while ((v9 & 1) != 0);
    v5 = 0;
    v4 = 1;
  }
  while ((v7 & 1) != 0);
  return v16;
}

double sub_18F6848A4(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  _QWORD v7[4];

  v5 = 0;
  *(double *)&v7[2] = a4;
  *(double *)&v7[3] = a5;
  do
  {
    *(float64x2_t *)&v7[v5] = vsubq_f64(*(float64x2_t *)&v7[v5], *(float64x2_t *)(a1 + v5 * 8));
    v5 += 2;
  }
  while (v5 != 4);
  return *(double *)v7;
}

os_log_t sub_18F6848E0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "PedTrajectorySmoothing");
  qword_1EE172100 = (uint64_t)result;
  return result;
}

void sub_18F68490C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

uint64_t *sub_18F684940(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = *(_OWORD *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 52) = *(_OWORD *)(v2 + v5 - 52);
      *(_OWORD *)(v6 - 64) = v7;
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_BYTE *)(v6 - 8) = *(_BYTE *)(v2 + v5 - 8);
      v5 -= 64;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *sub_18F6849DC(unint64_t a1)
{
  if (a1 >> 58)
    sub_18F5F689C();
  return operator new(a1 << 6);
}

uint64_t sub_18F684A10(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

char *sub_18F684A58(float *a1, _QWORD *a2, double a3)
{
  double v3;
  double v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  if (a3 == 0.0)
    v6 = 0.0;
  else
    v6 = a3;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (*(_QWORD *)&v6 >= v7)
        *(_QWORD *)&v3 = *(_QWORD *)&v6 % v7;
    }
    else
    {
      *(_QWORD *)&v3 = (v7 - 1) & *(_QWORD *)&v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * *(_QWORD *)&v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == *(_QWORD *)&v6)
          {
            if (*((double *)v10 + 2) == a3)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != *(_QWORD *)&v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((double *)v10 + 1) = v6;
  *((_QWORD *)v10 + 2) = *a2;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_QWORD *)v10 + 7) = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            sub_18F5F689C();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_58;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_58:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_62;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_62:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (*(_QWORD *)&v6 >= v7)
        *(_QWORD *)&v3 = *(_QWORD *)&v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      *(_QWORD *)&v3 = (v7 - 1) & *(_QWORD *)&v6;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * *(_QWORD *)&v3);
  if (v30)
  {
    *(_QWORD *)v10 = *v30;
LABEL_75:
    *v30 = v10;
    goto LABEL_76;
  }
  *(_QWORD *)v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[*(_QWORD *)&v3] = a1 + 4;
  if (*(_QWORD *)v10)
  {
    v31 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_75;
  }
LABEL_76:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_18F684E50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_18F684E64(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  char *v8;
  NSObject *v9;
  char *v10;
  uint8_t buf[4];
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 2)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
    v7 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a2;
      v13 = 2048;
      v14 = 2;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 70,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "T CMMatrix<double, 2>::operator()(size_t, size_t) const [T = double, M = 2, N = 2]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  if (a3 >= 2)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
    v9 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a3;
      v13 = 2048;
      v14 = 2;
      _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 71,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "T CMMatrix<double, 2>::operator()(size_t, size_t) const [T = double, M = 2, N = 2]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return *(double *)(a1 + 8 * (a2 + 2 * a3));
}

uint64_t sub_18F6851BC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  char *v8;
  NSObject *v9;
  char *v10;
  uint8_t buf[4];
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a3 >= 2)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
    v7 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a3;
      v13 = 2048;
      v14 = 2;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMFactoredMatrix.h, line 237,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "T &CMFactoredMatrix<double, 2>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = double, N = 2]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  if (a3 <= a2)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
    v9 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a3;
      v13 = 2048;
      v14 = a2;
      _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMFactoredMatrix.h, line 238,invalid element %zu <= %zu.", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "T &CMFactoredMatrix<double, 2>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = double, N = 2]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return a1 + 8 * (a2 + (((a3 - 1) * a3) >> 1));
}

uint64_t sub_18F685514(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2 >= 2)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
    v5 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = 2;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMFactoredMatrix.h, line 191,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2991F90);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "T &CMFactoredMatrix<double, 2>::DiagonalMatrix::operator()(size_t) [T = double, N = 2]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return a1 + 8 * a2;
}

double *sub_18F6856EC(uint64_t a1, unint64_t a2, double a3)
{
  double v3;
  uint8x8_t v4;
  double v5;
  double **v6;
  double *result;
  unint64_t v8;

  v3 = a3;
  if (a3 == 0.0)
    v3 = 0.0;
  if (!a2)
    return 0;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = v3;
    if (*(_QWORD *)&v3 >= a2)
      *(_QWORD *)&v5 = *(_QWORD *)&v3 % a2;
  }
  else
  {
    *(_QWORD *)&v5 = *(_QWORD *)&v3 & (a2 - 1);
  }
  v6 = *(double ***)(a1 + 8 * *(_QWORD *)&v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = *(double **)result)
  {
    v8 = *((_QWORD *)result + 1);
    if (*(_QWORD *)&v3 == v8)
    {
      if (result[2] == a3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      if (v8 != *(_QWORD *)&v5)
        return 0;
    }
  }
  return result;
}

void sub_18F685B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F685BBC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  objc_msgSend_setIdentityToken_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
  objc_msgSend_setStorageToken_(*(void **)(a1 + 32), v5, 0, v6);
  return objc_msgSend_manageConnection(*(void **)(a1 + 32), v7, v8, v9);
}

void sub_18F685DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F685E0C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_cleanup(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_18F685FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F685FF0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 40))
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E29905F0);
    v2 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v15 = 2082;
      *(_QWORD *)&v15[2] = "";
      v16 = 2050;
      v17 = v3;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#backgroundActivitySession destroying connection (dealloc)\", \"self\":\"%{public}p\"}", buf, 0x1Cu);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E29905F0);
    }
    v4 = qword_1ECD8E750;
    if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
    {
      v5 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v15 = 2082;
      *(_QWORD *)&v15[2] = "";
      v16 = 2050;
      v17 = v5;
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#backgroundActivitySession destroying connection (dealloc)", "{\"msg%{public}.0s\":\"#backgroundActivitySession destroying connection (dealloc)\", \"self\":\"%{public}p\"}", buf, 0x1Cu);
    }
    sub_18F619E48("kCLConnectionMessageDestroyUponDisconnection", buf);
    v13 = *(std::__shared_weak_count **)v15;
    if (*(_QWORD *)v15)
    {
      v6 = (unint64_t *)(*(_QWORD *)v15 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    CLConnection::sendMessage();
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    CLConnection::deferredDelete(*(CLConnection **)(a1 + 40));
    v10 = *(std::__shared_weak_count **)v15;
    if (*(_QWORD *)v15)
    {
      v11 = (unint64_t *)(*(_QWORD *)v15 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_18F68623C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F6863E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F6867BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  id *v27;

  sub_18F5D6004((uint64_t)&a12);
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18F686848(uint64_t a1, uint64_t *a2)
{
  id Weak;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  Weak = objc_loadWeak((id *)(a1 + 40));
  if (Weak)
  {
    v5 = Weak;
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E29905F0);
    v6 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void *)objc_msgSend_identityToken(*(void **)(a1 + 32), v7, v8, v9);
      *(_DWORD *)buf = 68289538;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2082;
      v36 = objc_msgSend_UTF8String(v10, v11, v12, v13);
      v37 = 2050;
      v38 = v5;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#backgroundActivitySession Default handler received message\", \"identityToken\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x26u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E29905F0);
    }
    v14 = qword_1ECD8E750;
    if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
    {
      v18 = (void *)objc_msgSend_identityToken(*(void **)(a1 + 32), v15, v16, v17);
      v22 = objc_msgSend_UTF8String(v18, v19, v20, v21);
      *(_DWORD *)buf = 68289538;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2082;
      v36 = v22;
      v37 = 2050;
      v38 = v5;
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#backgroundActivitySession Default handler received message", "{\"msg%{public}.0s\":\"#backgroundActivitySession Default handler received message\", \"identityToken\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x26u);
    }
    v23 = (std::__shared_weak_count *)a2[1];
    v29 = *a2;
    v30 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    objc_msgSend_handleMessage_(v5, v15, (uint64_t)&v29, v17);
    v26 = v30;
    if (v30)
    {
      v27 = (unint64_t *)&v30->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
}

void sub_18F686A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18F686E78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F687104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  sub_18F5D6004((uint64_t)&a9);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F687338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

os_log_t sub_18F6879A0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F6879CC@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F687A2C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F687A18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F687A2C(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E298FE10;
  sub_18F687A8C((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F687A78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F687A8C(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F5D5990(__p, __s);
  MEMORY[0x194002B44](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F687AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F687DDC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v2;
  uint64_t v4;
  const void *v5;
  char *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  const __CFURL *v19;
  const __CFURL *v20;
  const __CFString *v21;
  const __CFString *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[3];

  v2 = (const char *)a1;
  v25[2] = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(_QWORD *)(a1 + 8))
    {
LABEL_7:
      v4 = CFCopyUserName();
      goto LABEL_8;
    }
    v2 = *(const char **)a1;
  }
  else if (!*(_BYTE *)(a1 + 23))
  {
    goto LABEL_7;
  }
  v4 = (uint64_t)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, 0x8000100u);
LABEL_8:
  v5 = (const void *)v4;
  sub_18F5CC0B8();
  if (sub_18F672E30() && (v6 = getenv("_SET_CLPERSISTENTSTORE_TEST_PATH")) != 0)
  {
    v9 = (void *)MEMORY[0x1E0CB3940];
    v25[0] = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)v6, v8);
    v25[1] = v5;
    v11 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v10, (uint64_t)v25, 2);
    v14 = (void *)objc_msgSend_pathWithComponents_(v9, v12, v11, v13);
    v18 = (char *)objc_msgSend_UTF8String(v14, v15, v16, v17);
    sub_18F5D5990(&v23, v18);
    *(_OWORD *)a2 = v23;
    a2[2] = v24;
  }
  else if (v5)
  {
    v19 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
    v20 = v19;
    if (v19)
    {
      v21 = CFURLCopyFileSystemPath(v19, kCFURLPOSIXPathStyle);
      v22 = v21;
      if (v21)
      {
        sub_18F661274(v21, (uint64_t)&v23);
        *(_OWORD *)a2 = v23;
        a2[2] = v24;
        CFRelease(v22);
      }
      CFRelease(v20);
    }
    CFRelease(v5);
  }
}

void sub_18F687F54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_18F687F84(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  const __CFString *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type size;
  int v13;
  std::string v14;
  std::string v15;

  v3 = a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  LODWORD(a2) = *(char *)(a1 + 23);
  if ((a2 & 0x80000000) != 0)
  {
    if (*(_QWORD *)(a1 + 8))
    {
LABEL_3:
      if ((a2 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((_BYTE)a2)
  {
    goto LABEL_3;
  }
  v4 = (const __CFString *)CFCopyUserName();
  sub_18F661274(v4, (uint64_t)&v15);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  v5 = v15.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
  a2 = (_QWORD *)HIBYTE(v5);
  if ((a2 & 0x80) == 0)
  {
LABEL_4:
    if (!(_BYTE)a2)
      return;
    goto LABEL_11;
  }
LABEL_10:
  if (!*(_QWORD *)(a1 + 8))
    return;
LABEL_11:
  sub_18F6880DC(&v14);
  v6 = std::string::append(&v14, "/private/var/Managed Preferences/");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = *(char *)(a1 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)a1;
  else
    v9 = *(const std::string::value_type **)a1;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 23);
  else
    v10 = *(_QWORD *)(a1 + 8);
  v11 = std::string::append(&v15, v9, v10);
  size = v11->__r_.__value_.__l.__size_;
  *v3 = v11->__r_.__value_.__r.__words[0];
  v3[1] = size;
  *(_QWORD *)((char *)v3 + 15) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  LOBYTE(size) = *((_BYTE *)&v11->__r_.__value_.__s + 23);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
  *((_BYTE *)v3 + 23) = size;
  if (v13 < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_18F6880A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

double sub_18F6880DC@<D0>(_QWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (qword_1ECD8F878 != -1)
    dispatch_once(&qword_1ECD8F878, &unk_1E2990610);
  if (qword_1ECD8F870)
  {
    sub_18F661274((const __CFString *)qword_1ECD8F870, (uint64_t)&v3);
    result = *(double *)&v3;
    *(_OWORD *)a1 = v3;
    a1[2] = v4;
  }
  return result;
}

void sub_18F688154(int a1@<W0>, std::string *a2@<X8>)
{
  const std::string::value_type *v4;
  std::string::size_type v5;
  std::string *v6;
  NSObject *v7;
  std::string *v8;
  NSObject *v9;
  void *__p[2];
  char v11;
  std::string v12;
  void *v13[2];
  unsigned __int8 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1 == 3)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E298D9B0);
    v7 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_DEFAULT))
    {
      v12.__r_.__value_.__r.__words[0] = 0x304020100;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "no mutable store path for type, %{public}d", (uint8_t *)&v12, 8u);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_28;
    bzero(&v12, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E298D9B0);
    v13[0] = (void *)0x304020100;
    v8 = (std::string *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "static std::string CLPersistentStore::getMutableStorePath(CLPersistentStoreType)", "CoreLocation: %s\n", (const char *)v8);
    goto LABEL_33;
  }
  if (a1)
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E298D9B0);
    v9 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v12.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(v12.__r_.__value_.__r.__words[0]) = a1;
      _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_FAULT, "could not get mutable store path for type, %{public}d", (uint8_t *)&v12, 8u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_28;
    bzero(&v12, 0x65CuLL);
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E298D9B0);
    LODWORD(v13[0]) = 67240192;
    HIDWORD(v13[0]) = a1;
    v8 = (std::string *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "static std::string CLPersistentStore::getMutableStorePath(CLPersistentStoreType)", "CoreLocation: %s\n", (const char *)v8);
LABEL_33:
    if (v8 != &v12)
      free(v8);
LABEL_28:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  sub_18F5D5990(__p, "root");
  sub_18F687DDC((uint64_t)__p, &v12);
  sub_18F5D5990(v13, "/Library/Caches/locationd/");
  if ((v14 & 0x80u) == 0)
    v4 = (const std::string::value_type *)v13;
  else
    v4 = (const std::string::value_type *)v13[0];
  if ((v14 & 0x80u) == 0)
    v5 = v14;
  else
    v5 = (std::string::size_type)v13[1];
  v6 = std::string::append(&v12, v4, v5);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_18F6884F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 57) < 0)
    operator delete(*(void **)(v23 - 80));
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_18F688544(std::string *a1@<X8>)
{
  std::string *v2;
  std::string v3;

  sub_18F6880DC(&v3);
  v2 = std::string::append(&v3, "/System/Library/Frameworks/CoreLocation.framework/Support/");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_18F6885A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F6885C4(std::string *a1@<X8>)
{
  std::string *v2;
  std::string v3;

  sub_18F6880DC(&v3);
  v2 = std::string::append(&v3, "/System/Library/Frameworks/CoreLocation.framework");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_18F688628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F688644()
{
  qword_1ECD8F870 = (uint64_t)CFSTR("/");
}

void sub_18F689094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F6890AC(uint64_t a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend_processTripSegmentData_withOptions_outputHandler_(*(void **)(a1 + 32), a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), *(_QWORD *)(a1 + 40));
  if (v6)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990630);
    v7 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349571;
      v33 = objc_msgSend_code(v6, v8, v9, v10);
      v34 = 2114;
      v35 = objc_msgSend_domain(v6, v11, v12, v13);
      v36 = 2113;
      v37 = objc_msgSend_localizedDescription(v6, v14, v15, v16);
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "CLTSP,processTripData returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990630);
      objc_msgSend_code(v6, v22, v23, v24);
      objc_msgSend_domain(v6, v25, v26, v27);
      objc_msgSend_localizedDescription(v6, v28, v29, v30);
      v31 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "-[CLTripSegmentProcessorManager processTripSegmentData:withOptions:outputHandler:completionHandler:]_block_invoke", "CoreLocation: %s\n", v31);
      if (v31 != (char *)buf)
        free(v31);
    }
  }
  if (objc_msgSend_createSparseDataFromOneHzData(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v3, v4, v5)&& objc_msgSend_isAutomotiveModeOfTransport(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v17, v18, v19))
  {
    objc_msgSend_simulateSparseTrajectoryAndSubmitCoreAnalytics_(*(void **)(a1 + 32), v20, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v21);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_18F68A480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F68A500(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

void sub_18F68A510(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *started;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint8_t buf[4];
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990630);
    v4 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEFAULT))
    {
      v8 = (void *)objc_msgSend_tripSegmentID(a2, v5, v6, v7);
      v12 = (void *)objc_msgSend_UUIDString(v8, v9, v10, v11);
      v16 = objc_msgSend_UTF8String(v12, v13, v14, v15);
      objc_msgSend_distance_m(a2, v17, v18, v19);
      v21 = v20;
      objc_msgSend_distanceUnc_m(a2, v22, v23, v24);
      v26 = v25;
      started = (void *)objc_msgSend_startDate(a2, v27, v28, v29);
      objc_msgSend_timeIntervalSinceReferenceDate(started, v31, v32, v33);
      v35 = v34;
      v39 = (void *)objc_msgSend_endDate(a2, v36, v37, v38);
      objc_msgSend_timeIntervalSinceReferenceDate(v39, v40, v41, v42);
      v44 = v43;
      v48 = objc_msgSend_modeOfTransport(a2, v45, v46, v47);
      v52 = (void *)objc_msgSend_tripLocations(a2, v49, v50, v51);
      *(_DWORD *)buf = 136447746;
      v120 = v16;
      v121 = 2050;
      v122 = v21;
      v123 = 2050;
      v124 = v26;
      v125 = 2050;
      v126 = v35;
      v127 = 2050;
      v128 = v44;
      v129 = 1026;
      v130 = v48;
      v131 = 1026;
      v132 = objc_msgSend_count(v52, v53, v54, v55);
      _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEFAULT, "CLTSP,simulatedSparse,received reconstructed trip,ID,%{public}s,distance,%{public}.2lf,distance unc,%{public}.2lf,startTime,%{public}.2lf,endTime, %{public}.2lf,modeOfTransport,%{public}d,locations,%{public}d", buf, 0x40u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990630);
      v80 = (void *)objc_msgSend_tripSegmentID(a2, v77, v78, v79);
      v84 = (void *)objc_msgSend_UUIDString(v80, v81, v82, v83);
      objc_msgSend_UTF8String(v84, v85, v86, v87);
      objc_msgSend_distance_m(a2, v88, v89, v90);
      objc_msgSend_distanceUnc_m(a2, v91, v92, v93);
      v97 = (void *)objc_msgSend_startDate(a2, v94, v95, v96);
      objc_msgSend_timeIntervalSinceReferenceDate(v97, v98, v99, v100);
      v104 = (void *)objc_msgSend_endDate(a2, v101, v102, v103);
      objc_msgSend_timeIntervalSinceReferenceDate(v104, v105, v106, v107);
      objc_msgSend_modeOfTransport(a2, v108, v109, v110);
      v114 = (void *)objc_msgSend_tripLocations(a2, v111, v112, v113);
      objc_msgSend_count(v114, v115, v116, v117);
      v118 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "-[CLTripSegmentProcessorManager simulateSparseTrajectoryAndSubmitCoreAnalytics:]_block_invoke", "CoreLocation: %s\n", v118);
      if (v118 != (char *)buf)
        free(v118);
    }
    v56 = sub_18F74911C();
    v60 = (void *)objc_msgSend_tripSegmentID(*(void **)(a1 + 32), v57, v58, v59);
    v64 = (void *)objc_msgSend_tripSegmentID(a2, v61, v62, v63);
    v65 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v69 = (void *)objc_msgSend_tripLocations(*(void **)(a1 + 32), v66, v67, v68);
    v70 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v71 = 0.0;
    if (*(double *)(v70 + 48) >= 0.0)
    {
      v72 = mach_continuous_time();
      v71 = vabdd_f64(sub_18F6BDF00(v72), *(double *)(v70 + 48)) * 1000.0;
    }
    sub_18F749274(v56, v60, v64, v65, v69, a2, v71);
    if (objc_msgSend_isFinalPart(*(void **)(a1 + 32), v73, v74, v75))
    {
      v76 = sub_18F74911C();
      sub_18F749F9C(v76);
    }
  }
}

void sub_18F68A964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

os_log_t sub_18F68A980()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1EE172170 = (uint64_t)result;
  return result;
}

void sub_18F68AD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F68AEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F68AED0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  objc_msgSend_setIdentityToken_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
  objc_msgSend_setStorageToken_(*(void **)(a1 + 32), v5, 0, v6);
  return objc_msgSend_manageConnection(*(void **)(a1 + 32), v7, v8, v9);
}

void sub_18F68B088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F68B478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  id *v27;

  sub_18F5D6004((uint64_t)&a12);
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18F68B504(uint64_t a1, uint64_t *a2)
{
  id Weak;
  void *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  Weak = objc_loadWeak((id *)(a1 + 40));
  if (Weak)
  {
    v5 = Weak;
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990650);
    v6 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void *)objc_msgSend_identityToken(*(void **)(a1 + 32), v7, v8, v9);
      *(_DWORD *)buf = 68289538;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2082;
      v36 = objc_msgSend_UTF8String(v10, v11, v12, v13);
      v37 = 2050;
      v38 = v5;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#fullAccuracySession Default handler received message\", \"identityToken\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x26u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990650);
    }
    v14 = qword_1ECD8E750;
    if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
    {
      v18 = (void *)objc_msgSend_identityToken(*(void **)(a1 + 32), v15, v16, v17);
      v22 = objc_msgSend_UTF8String(v18, v19, v20, v21);
      *(_DWORD *)buf = 68289538;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2082;
      v36 = v22;
      v37 = 2050;
      v38 = v5;
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#fullAccuracySession Default handler received message", "{\"msg%{public}.0s\":\"#fullAccuracySession Default handler received message\", \"identityToken\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x26u);
    }
    v23 = (std::__shared_weak_count *)a2[1];
    v29 = *a2;
    v30 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    objc_msgSend_handleMessage_(v5, v15, (uint64_t)&v29, v17);
    v26 = v30;
    if (v30)
    {
      v27 = (unint64_t *)&v30->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
}

void sub_18F68B734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18F68B9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  sub_18F5D6004((uint64_t)&a9);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F68BBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F68C040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F68C224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F68C240(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 40))
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990650);
    v2 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v15 = 2082;
      *(_QWORD *)&v15[2] = "";
      v16 = 2050;
      v17 = v3;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#fullAccuracySession destroying connection (dealloc)\", \"self\":\"%{public}p\"}", buf, 0x1Cu);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990650);
    }
    v4 = qword_1ECD8E750;
    if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
    {
      v5 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v15 = 2082;
      *(_QWORD *)&v15[2] = "";
      v16 = 2050;
      v17 = v5;
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#fullAccuracySession destroying connection (dealloc)", "{\"msg%{public}.0s\":\"#fullAccuracySession destroying connection (dealloc)\", \"self\":\"%{public}p\"}", buf, 0x1Cu);
    }
    sub_18F619E48("kCLConnectionMessageDestroyUponDisconnection", buf);
    v13 = *(std::__shared_weak_count **)v15;
    if (*(_QWORD *)v15)
    {
      v6 = (unint64_t *)(*(_QWORD *)v15 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    CLConnection::sendMessage();
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    CLConnection::deferredDelete(*(CLConnection **)(a1 + 40));
    v10 = *(std::__shared_weak_count **)v15;
    if (*(_QWORD *)v15)
    {
      v11 = (unint64_t *)(*(_QWORD *)v15 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_18F68C48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F68C64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F68C664(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_cleanup(*(void **)(a1 + 32), a2, a3, a4);
}

os_log_t sub_18F68C6D4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F68C700@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F68C760(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F68C74C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F68C760(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E298FE10;
  sub_18F68C7C0((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F68C7AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F68C7C0(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F5D5990(__p, __s);
  MEMORY[0x194002B44](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F68C814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F68CA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  sub_18F5D6004((uint64_t)&a11);
  sub_18F5D6004((uint64_t)&a13);
  MEMORY[0x194002D30](v28, 0xA0C40114AFA65);
  _Unwind_Resume(a1);
}

uint64_t sub_18F68CB5C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  CLBBTimeFreqTransferCallbackAssertion *v8;
  const char *v9;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD v18[3];
  _QWORD v19[3];
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2992000);
    v11 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLBBTFTA,reason missing\"}", buf, 0x12u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2992000);
    }
    v12 = qword_1ECD8E750;
    if (!os_signpost_enabled((os_log_t)qword_1ECD8E750))
      return 0;
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v13 = "CLBBTFTA,reason missing";
    v14 = "{\"msg%{public}.0s\":\"CLBBTFTA,reason missing\"}";
    goto LABEL_35;
  }
  if (!a1 || !a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2992000);
    v15 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLBBTFTA,bundleID or bundlePath needed\"}", buf, 0x12u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2992000);
    }
    v12 = qword_1ECD8E750;
    if (!os_signpost_enabled((os_log_t)qword_1ECD8E750))
      return 0;
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v13 = "CLBBTFTA,bundleID or bundlePath needed";
    v14 = "{\"msg%{public}.0s\":\"CLBBTFTA,bundleID or bundlePath needed\"}";
    goto LABEL_35;
  }
  if (!a4)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2992000);
    v16 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLBBTFTA,nil callback queue\"}", buf, 0x12u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2992000);
    }
    v12 = qword_1ECD8E750;
    if (!os_signpost_enabled((os_log_t)qword_1ECD8E750))
      return 0;
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v13 = "CLBBTFTA,nil callback queue";
    v14 = "{\"msg%{public}.0s\":\"CLBBTFTA,nil callback queue\"}";
    goto LABEL_35;
  }
  if (a5)
  {
    v18[0] = CFSTR("kCLConnectionMessageBundleIdentifierKey");
    v18[1] = CFSTR("kCLConnectionMessageBundlePathKey");
    v19[0] = a1;
    v19[1] = a2;
    v18[2] = CFSTR("kCLConnectionMessagePurposeKey");
    v19[2] = a3;
    v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v19, (uint64_t)v18, 3);
    v8 = [CLBBTimeFreqTransferCallbackAssertion alloc];
    return objc_msgSend_initWithRegistrationMessageName_messageDictionary_dispatchQueue_codeBlock_(v8, v9, (uint64_t)"kCLConnectionMessageBBTimeFreqTransferAssert", v7, a4, a5);
  }
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E2992000);
  v17 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLBBTFTA,nil callback block\"}", buf, 0x12u);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2992000);
  }
  v12 = qword_1ECD8E750;
  if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
  {
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v13 = "CLBBTFTA,nil callback block";
    v14 = "{\"msg%{public}.0s\":\"CLBBTFTA,nil callback block\"}";
LABEL_35:
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v13, v14, buf, 0x12u);
  }
  return 0;
}

void sub_18F68D10C(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E2992000);
  v3 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
  {
    v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0)
      v5 = v4;
    else
      v5 = *(_QWORD *)v4;
    *(_DWORD *)buf = 136315138;
    v8 = v5;
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEBUG, "CLBBTFTA,unexpected message,%s", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2992000);
    CLConnectionMessage::name(*a2);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "CLCallbackAssertionInternal::CLCallbackAssertionInternal(dispatch_queue_t, const char *, NSDictionary *, BBTimeFreqTransferCallback)_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

uint64_t sub_18F68D2E8(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  int v12;
  uint64_t v16;
  uint64_t v17;
  id v18;
  const char *v19;
  id v20;
  uint64_t Dictionary;
  _DWORD v22[2];
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E2992000);
  v4 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
  {
    v5 = CLConnectionMessage::name(*a2);
    if (*(char *)(v5 + 23) >= 0)
      v6 = v5;
    else
      v6 = *(_QWORD *)v5;
    v22[0] = 68289282;
    v22[1] = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2082;
    v26 = v6;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBBTFTA\", \"Connection Message\":%{public, location:escape_only}s}", (uint8_t *)v22, 0x1Cu);
  }
  v7 = (_QWORD *)CLConnectionMessage::name(*a2);
  v8 = *((char *)v7 + 23);
  if (v8 < 0)
  {
    if (v7[1] != 49)
      goto LABEL_14;
    v7 = (_QWORD *)*v7;
  }
  else if (v8 != 49)
  {
    goto LABEL_14;
  }
  if (!memcmp(v7, "kCLConnectionMessageBBTimeFreqTransferAssertError", 0x31uLL))
  {
    result = CLConnectionMessage::getDictionary(*a2);
    if (*(_QWORD *)(v3 + 8))
    {
      v17 = result;
      v18 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v20 = (id)objc_msgSend_initWithDomain_code_userInfo_(v18, v19, (uint64_t)CFSTR("CLBBTFTA Error"), 0, v17);
      return (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 8) + 16))();
    }
    return result;
  }
LABEL_14:
  v9 = (_QWORD *)CLConnectionMessage::name(*a2);
  v10 = *((char *)v9 + 23);
  if ((v10 & 0x80000000) == 0)
  {
    if (v10 != 49)
      goto LABEL_20;
LABEL_19:
    if (!memcmp(v9, "kCLConnectionMessageBBTimeFreqTransferMeasurement", 0x31uLL))
    {
      Dictionary = CLConnectionMessage::getDictionary(*a2);
      result = *(_QWORD *)(v3 + 8);
      if (result)
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(result + 16))(result, Dictionary, 0, 0);
      return result;
    }
    goto LABEL_20;
  }
  if (v9[1] == 49)
  {
    v9 = (_QWORD *)*v9;
    goto LABEL_19;
  }
LABEL_20:
  result = CLConnectionMessage::name(*a2);
  v12 = *(char *)(result + 23);
  if (v12 < 0)
  {
    if (*(_QWORD *)(result + 8) != 31)
      return result;
    result = *(_QWORD *)result;
  }
  else if (v12 != 31)
  {
    return result;
  }
  if (*(_QWORD *)result == 0x656E6E6F434C436BLL
    && *(_QWORD *)(result + 8) == 0x73654D6E6F697463
    && *(_QWORD *)(result + 16) == 0x53534E4765676173
    && *(_QWORD *)(result + 23) == 0x70614D7461654853)
  {
    v16 = CLConnectionMessage::getDictionary(*a2);
    result = *(_QWORD *)(v3 + 8);
    if (result)
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(result + 16))(result, 0, v16, 0);
  }
  return result;
}

os_log_t sub_18F68D59C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F68D9E4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Utility", "QA");
  qword_1EE172190 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F68E64C(_QWORD *a1, const std::string *a2)
{
  std::string *v4;

  *a1 = 0;
  v4 = (std::string *)sub_18F5D5990(a1 + 1, (char *)&unk_18F7C7555);
  std::string::operator=(v4, a2);
  return a1;
}

void sub_18F68E698(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F68E6B4(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {

    *(_QWORD *)a1 = 0;
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_18F68E6F8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  char *v4;
  _QWORD *v5;
  CLOSTransaction *v6;
  const char *v7;
  uint64_t v8;
  uint8_t buf[4];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a1)
  {
    if (qword_1ECD8E748 != -1)
      dispatch_once(&qword_1ECD8E748, &unk_1E29906F0);
    v2 = qword_1ECD8E740;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E740, OS_LOG_TYPE_DEFAULT))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v10 = v3;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "%s,os_transaction already taken, not taking another", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E748 != -1)
        dispatch_once(&qword_1ECD8E748, &unk_1E29906F0);
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLOSTransactionWrapper::Create()", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  else
  {
    v5 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v5 = (_QWORD *)*v5;
    v6 = [CLOSTransaction alloc];
    *(_QWORD *)a1 = objc_msgSend_initWithDescription_(v6, v7, (uint64_t)v5, v8);
  }
}

os_log_t sub_18F68E8F0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1ECD8E740 = (uint64_t)result;
  return result;
}

void sub_18F68F618(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v4;
  char *v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (byte_1EE172F70 == 1)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990710);
    v4 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "CLMM, memory cache and tile count limit already set", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990710);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "static void CLGeoMapAccessTileLoader::setTileMemoryCacheAndCountLimits()", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
  else
  {
    objc_msgSend_setMemoryCacheCountLimit_(MEMORY[0x1E0D275D0], a2, 9, a4);
    objc_msgSend_setMemoryCacheTotalCostLimit_(MEMORY[0x1E0D275D0], v6, 153600, v7);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990710);
    v8 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      v11 = 153600;
      v12 = 1024;
      v13 = 9;
      _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_DEBUG, "CLMM,GEOTileLoader memory cache,%d,tile count limit,%d", buf, 0xEu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990710);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "static void CLGeoMapAccessTileLoader::setTileMemoryCacheAndCountLimits()", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
    byte_1EE172F70 = 1;
  }
}

os_log_t sub_18F68F954()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

uint64_t sub_18F68FFC8(uint64_t a1, uint64_t a2, char a3)
{
  _OWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  v4 = *(_OWORD **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_OWORD *)a1 = *v4;
    *(_BYTE *)(a1 + 16) = a3;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *(_OWORD *)a1 = *v4;
    *(_BYTE *)(a1 + 16) = a3;
  }
  return a1;
}

BOOL sub_18F690058(unsigned __int8 *a1, char *a2, _QWORD *a3, uint64_t a4, double a5)
{
  uint64_t v6;
  double v10;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  int v21;
  double v22;
  int v23;
  double v24;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  BOOL v43;
  NSObject *v44;
  char *v45;
  int v46;
  uint64_t v47;
  _BOOL8 v48;
  NSObject *v50;
  unint64_t v51;
  double v52;
  _QWORD *v53;
  int v54;
  double v55;
  uint64_t v57;
  uint64_t v58;
  __int128 *v59;
  __int128 v60;
  double v61;
  BOOL v62;
  NSObject *v63;
  char *v64;
  NSObject *v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  __n128 v93;
  __int128 v94;
  _QWORD *v95;
  int v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  int v103;
  int v104;
  _BYTE v105[32];
  _BYTE v106[40];
  _DWORD v107[8];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _BYTE v114[30];
  __int128 v115;
  __int128 v116;
  __int16 v117;
  uint64_t v118;
  int v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _BYTE v123[27];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  unint64_t v128;
  uint8_t buf[4];
  _BYTE v130[10];
  _BYTE v131[10];
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  __int16 v145;
  int v146;
  __int16 v147;
  int v148;
  uint64_t v149;

  v96 = a4;
  v149 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0xBFF0000000000000;
  if (!*a1
    || (v6 = *((_QWORD *)a1 + 8)) == 0
    || !*(_BYTE *)(v6 + 18)
    || (v10 = *((double *)a1 + 22), v10 > 0.0) && vabdd_f64(a5, v10) <= 0.9)
  {
    if (!(_DWORD)a4)
      return 0;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v14 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v15 = *((_QWORD *)a1 + 8);
      if (v15)
        v16 = *(unsigned __int8 *)(v15 + 18);
      else
        v16 = -1;
      v46 = *a1;
      v47 = *((_QWORD *)a1 + 22);
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)v130 = v16;
      *(_WORD *)&v130[4] = 1026;
      *(_DWORD *)&v130[6] = v46;
      *(_WORD *)v131 = 2050;
      *(_QWORD *)&v131[2] = v47;
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_DEBUG, "CLMM,no TEPA,isTunnel,%{public}d,isSnapUsable,%{public}d,lastAssistanceTime,%{public}.1lf", buf, 0x18u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v78 = *((_QWORD *)a1 + 8);
    if (v78)
      v79 = *(unsigned __int8 *)(v78 + 18);
    else
      v79 = -1;
    v80 = *a1;
    v81 = *((_QWORD *)a1 + 22);
    *(_DWORD *)v105 = 67240704;
    *(_DWORD *)&v105[4] = v79;
    *(_WORD *)&v105[8] = 1026;
    *(_DWORD *)&v105[10] = v80;
    *(_WORD *)&v105[14] = 2050;
    *(_QWORD *)&v105[16] = v81;
    v13 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v13);
    goto LABEL_137;
  }
  if (objc_msgSend_isLocationShiftRequiredForCoordinate_(MEMORY[0x1E0D27178], a2, (uint64_t)a3, a4, *((double *)a1 + 12), *((double *)a1 + 13)))
  {
    if (!v96)
      return 0;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v12 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)v130 = a5;
      _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,no TEPA, shifted coordinates", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    *(_DWORD *)v105 = 134349056;
    *(double *)&v105[4] = a5;
    v13 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v13);
LABEL_137:
    if (v13 != (char *)buf)
      free(v13);
    return 0;
  }
  v17 = *((_QWORD *)a1 + 8);
  v18 = (std::__shared_weak_count *)*((_QWORD *)a1 + 9);
  v101 = v17;
  v102 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v95 = a3;
  v21 = *(unsigned __int8 *)(v17 + 18);
  v22 = *((double *)a1 + 14);
  a2[72] = 0;
  v23 = 0;
  if (!v21)
  {
    v24 = 0.0;
    goto LABEL_83;
  }
  v24 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  v93 = _Q0;
  while (1)
  {
    v29 = v101;
    if (!v101)
      goto LABEL_83;
    if (v23 == 200)
      break;
    sub_18F7047B4(v101);
    v30 = *(double *)(v29 + 40);
    *(double *)a2 = a5;
    v31 = v101;
    v32 = *(_QWORD *)(v101 + 144);
    v33 = v32 - *(_QWORD *)(v101 + 136);
    if (v33)
      v34 = *(_OWORD *)(v32 - 16);
    else
      v34 = 0uLL;
    *(_OWORD *)(a2 + 8) = v34;
    v35 = v33 >> 4;
    v36 = -1.0;
    if ((int)v35 >= 2)
    {
      v36 = sub_18F704B68(v31, (int)v35 - 2);
      v31 = v101;
    }
    *((double *)a2 + 4) = v36;
    *((_QWORD *)a2 + 8) = *(_QWORD *)(v31 + 96);
    if ((int)sub_18F70525C(v31) >= 1)
      a2[72] = 1;
    v37 = fmod(*((float *)a1 + 22) - *((double *)a2 + 4), 360.0);
    if (v37 < 0.0)
      v37 = v37 + 360.0;
    if (v37 > 180.0)
      v37 = v37 + -360.0;
    if (fabs(v37) > 7.5)
      a2[72] = 1;
    v38 = v101;
    sub_18F7047B4(v101);
    v39 = 1.0 - v22;
    v40 = *(double *)(v38 + 40);
    v99 = 0;
    v100 = 0.0;
    v97 = (uint64_t)&v97;
    v98 = &v97;
    *(_QWORD *)v105 = 0;
    *(__n128 *)&v105[16] = v93;
    *(_OWORD *)v106 = 0uLL;
    *(_QWORD *)&v106[16] = 0xBFF0000000000000;
    v118 = 0;
    v119 = 0;
    v115 = 0u;
    v116 = 0u;
    v117 = 0;
    v120 = 0u;
    v121 = 0u;
    v122 = 0u;
    memset(v123, 0, sizeof(v123));
    v124 = 0u;
    v125 = 0u;
    v126 = 0u;
    v113 = 0u;
    memset(v114, 0, sizeof(v114));
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v108 = 0u;
    *(_OWORD *)&v106[24] = 0u;
    memset(v107, 0, sizeof(v107));
    v128 = 0xBFF0000000000000;
    v127 = 0;
    *(double *)&v105[8] = a5;
    if (!(*(unsigned int (**)(_QWORD, _BYTE *, uint64_t *, _QWORD, uint64_t, uint64_t *, uint64_t, double *, double, double))(*(_QWORD *)*a3 + 80))(*a3, v105, &v97, 0, 1, &v101, 1, &v100, v22, v40 * (1.0 - v22) + 1.0))goto LABEL_54;
    if (v99 != 1 || v100 < 0.0)
    {
      if (v96)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990730);
        v44 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)v130 = v99;
          _os_log_impl(&dword_18F5B3000, v44, OS_LOG_TYPE_DEBUG, "CLMM,no TEPA,multi-outbound,%{public}d", buf, 8u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990730);
          v103 = 67240192;
          v104 = v99;
          v45 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v45);
          if (v45 != (char *)buf)
            free(v45);
        }
      }
      v43 = 0;
      *(_QWORD *)a2 = 0xBFF0000000000000;
      goto LABEL_62;
    }
    sub_18F623A40(&v101, v98 + 2);
    v41 = sub_18F7051E8(v101, 0, 1u);
    if (v41 < 0.0)
      goto LABEL_51;
    v42 = fmod(v41 - *((double *)a2 + 4), 360.0);
    if (v42 < 0.0)
      v42 = v42 + 360.0;
    if (v42 > 180.0)
      v42 = v42 + -360.0;
    if (fabs(v42) > 7.5)
LABEL_51:
      a2[72] = 1;
    v22 = 0.0;
    if (v101)
      v43 = *(_BYTE *)(v101 + 18) != 0;
    else
LABEL_54:
      v43 = 0;
LABEL_62:
    if (SHIBYTE(v110) < 0)
      operator delete(*((void **)&v109 + 1));
    v24 = v24 + v30 * v39;
    sub_18F64F950(&v97);
    ++v23;
    if (!v43)
      goto LABEL_83;
  }
  *(_QWORD *)a2 = 0xBFF0000000000000;
  if (v96)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v50 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v130 = 201;
      _os_log_impl(&dword_18F5B3000, v50, OS_LOG_TYPE_DEBUG, "CLMM,TEPA,outgoing reached max iterations,%{public}d", buf, 8u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990730);
      *(_QWORD *)v105 = 0xC904020100;
      v91 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v91);
      if (v91 != (char *)buf)
        free(v91);
    }
    v23 = 201;
LABEL_83:
    v51 = *(_QWORD *)a2;
    if (*(double *)a2 > 0.0)
    {
      *((double *)a2 + 14) = v24;
      *((_QWORD *)a2 + 3) = 0x4039000000000000;
      *(_OWORD *)(a2 + 40) = xmmword_18F7747B0;
      *((_QWORD *)a2 + 7) = 0xBFF0000000000000;
      v52 = *((double *)a1 + 4);
      if (v52 > 0.0)
      {
        *((_QWORD *)a2 + 6) = *((_QWORD *)a1 + 5);
        *((double *)a2 + 7) = v52;
      }
      *((_QWORD *)a1 + 22) = v51;
      *((_QWORD *)a2 + 11) = 0;
      *((_QWORD *)a2 + 12) = 0;
      v53 = a2 + 88;
      *((double *)a2 + 13) = v24;
      sub_18F623A40(&v101, (uint64_t *)a1 + 8);
      if (*(_BYTE *)(v101 + 18))
      {
        v54 = 0;
        v55 = *((double *)a1 + 14);
        __asm { FMOV            V0.2D, #-1.0 }
        v94 = _Q0;
        while (1)
        {
          v57 = v101;
          if (!v101)
            goto LABEL_121;
          if (v54 == 200)
          {
            *((_QWORD *)a2 + 13) = 0xBFF0000000000000;
            *v53 = 0;
            *((_QWORD *)a2 + 12) = 0;
            if (v96)
            {
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990730);
              v65 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 67240192;
                *(_DWORD *)v130 = 201;
                _os_log_impl(&dword_18F5B3000, v65, OS_LOG_TYPE_DEBUG, "CLMM,TEPA,incoming reached max iterations,%{public}d", buf, 8u);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990730);
                *(_QWORD *)v105 = 0xC904020100;
                v92 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v92);
                if (v92 != (char *)buf)
                  free(v92);
              }
            }
            v54 = 201;
            goto LABEL_121;
          }
          sub_18F7047B4(v101);
          *((double *)a2 + 13) = *((double *)a2 + 13) + *(double *)(v57 + 40) * v55;
          v58 = v101;
          v59 = *(__int128 **)(v101 + 136);
          if (*(__int128 **)(v101 + 144) == v59)
            v60 = 0uLL;
          else
            v60 = *v59;
          *(_OWORD *)v53 = v60;
          sub_18F7047B4(v58);
          v61 = *(double *)(v58 + 40);
          v99 = 0;
          v100 = 0.0;
          v97 = (uint64_t)&v97;
          v98 = &v97;
          *(_QWORD *)v105 = 0;
          *(_OWORD *)&v105[16] = v94;
          *(_OWORD *)v106 = 0uLL;
          *(_QWORD *)&v106[16] = 0xBFF0000000000000;
          v118 = 0;
          v119 = 0;
          v115 = 0u;
          v116 = 0u;
          v117 = 0;
          v120 = 0u;
          v121 = 0u;
          v122 = 0u;
          memset(v123, 0, sizeof(v123));
          v124 = 0u;
          v125 = 0u;
          v126 = 0u;
          v113 = 0u;
          memset(v114, 0, sizeof(v114));
          v111 = 0u;
          v112 = 0u;
          v109 = 0u;
          v110 = 0u;
          v108 = 0u;
          *(_OWORD *)&v106[24] = 0u;
          memset(v107, 0, sizeof(v107));
          v128 = 0xBFF0000000000000;
          v127 = 0;
          *(double *)&v105[8] = a5;
          if (!(*(unsigned int (**)(_QWORD, _BYTE *, _QWORD, uint64_t *, _QWORD, uint64_t *, uint64_t, double *, double, double))(*(_QWORD *)*v95 + 80))(*v95, v105, 0, &v97, 0, &v101, 1, &v100, v55, v61 * v55 + 1.0))goto LABEL_104;
          if (v99 != 1 || v100 < 0.0)
            break;
          sub_18F623A40(&v101, v98 + 2);
          v55 = 1.0;
          if (!v101)
            goto LABEL_104;
          v62 = *(_BYTE *)(v101 + 18) != 0;
LABEL_105:
          if (SHIBYTE(v110) < 0)
            operator delete(*((void **)&v109 + 1));
          sub_18F64F950(&v97);
          ++v54;
          if (!v62)
            goto LABEL_121;
        }
        *((_QWORD *)a2 + 13) = 0xBFF0000000000000;
        *v53 = 0;
        *((_QWORD *)a2 + 12) = 0;
        if (v96)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990730);
          v63 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)v130 = v99;
            _os_log_impl(&dword_18F5B3000, v63, OS_LOG_TYPE_DEBUG, "CLMM,no TEPA,multi-inbound,%{public}d", buf, 8u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990730);
            v103 = 67240192;
            v104 = v99;
            v64 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v64);
            if (v64 != (char *)buf)
              free(v64);
          }
        }
LABEL_104:
        v62 = 0;
        goto LABEL_105;
      }
      v54 = 0;
LABEL_121:
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990730);
      v66 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v67 = *((_QWORD *)a2 + 1);
        v68 = *((_QWORD *)a2 + 2);
        v69 = *((_QWORD *)a2 + 11);
        v70 = *((_QWORD *)a2 + 12);
        v71 = *((_QWORD *)a2 + 6);
        v72 = *((_QWORD *)a2 + 7);
        v73 = *((_QWORD *)a2 + 13);
        v74 = *((_QWORD *)a2 + 14);
        *(_DWORD *)buf = 134351617;
        *(double *)v130 = a5;
        *(_WORD *)&v130[8] = 2049;
        *(_QWORD *)v131 = v67;
        *(_WORD *)&v131[8] = 2049;
        v132 = v68;
        v133 = 2049;
        v134 = v69;
        v135 = 2049;
        v136 = v70;
        v137 = 2050;
        v138 = v71;
        v139 = 2050;
        v140 = v72;
        v141 = 2050;
        v142 = v73;
        v143 = 2050;
        v144 = v74;
        v145 = 1026;
        v146 = v23;
        v147 = 1026;
        v148 = v54;
        _os_log_impl(&dword_18F5B3000, v66, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,TEPA,ell,%{private}.7lf,%{private}.7lf,sll,%{private}.7lf,%{private}.7lf,alt,%{public}.1lf,vUnc,%{public}.1lf,length,%{public}.2lf,distFromCurrentParticle,%{public}.1lf,iterCountOut,%{public}d,iterCountIn,%{public}d", buf, 0x68u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990730);
        v82 = *((_QWORD *)a2 + 1);
        v83 = *((_QWORD *)a2 + 2);
        v84 = *((_QWORD *)a2 + 11);
        v85 = *((_QWORD *)a2 + 12);
        v86 = *((_QWORD *)a2 + 6);
        v87 = *((_QWORD *)a2 + 7);
        v88 = *((_QWORD *)a2 + 13);
        v89 = *((_QWORD *)a2 + 14);
        *(_DWORD *)v105 = 134351617;
        *(double *)&v105[4] = a5;
        *(_WORD *)&v105[12] = 2049;
        *(_QWORD *)&v105[14] = v82;
        *(_WORD *)&v105[22] = 2049;
        *(_QWORD *)&v105[24] = v83;
        *(_WORD *)v106 = 2049;
        *(_QWORD *)&v106[2] = v84;
        *(_WORD *)&v106[10] = 2049;
        *(_QWORD *)&v106[12] = v85;
        *(_WORD *)&v106[20] = 2050;
        *(_QWORD *)&v106[22] = v86;
        *(_WORD *)&v106[30] = 2050;
        *(_QWORD *)&v106[32] = v87;
        LOWORD(v107[0]) = 2050;
        *(_QWORD *)((char *)v107 + 2) = v88;
        HIWORD(v107[2]) = 2050;
        *(_QWORD *)&v107[3] = v89;
        LOWORD(v107[5]) = 1026;
        *(_DWORD *)((char *)&v107[5] + 2) = v23;
        HIWORD(v107[6]) = 1026;
        v107[7] = v54;
        v90 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::findTunnelEndPoint(double, CLGpsAssistant_Type::TunnelEndPositionAssistance &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v90);
        if (v90 != (char *)buf)
          free(v90);
      }
    }
  }
  _Q0.n128_u64[0] = *(_QWORD *)a2;
  v48 = *(double *)a2 > 0.0;
  v75 = v102;
  if (v102)
  {
    v76 = (unint64_t *)&v102->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v75->__on_zero_shared)(v75, _Q0);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  return v48;
}

void sub_18F691154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  sub_18F5D6004((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6911C0(double *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  int v4;
  int v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  BOOL v14;
  double v15;
  NSObject *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v31;
  NSObject *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  NSObject *v41;
  unint64_t v42;
  NSObject *v47;
  char *v48;
  NSObject *v49;
  NSObject *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  int v55;
  double v56;
  double *v57;
  double v58;
  double v59;
  double v60;
  NSObject *v61;
  NSObject *v62;
  char *v63;
  NSObject *v64;
  double *v65;
  double v66;
  double v67;
  double *v68;
  double v69;
  double *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  __int128 v85;
  _QWORD v86[3];
  uint64_t v87;
  uint64_t v88[2];
  unint64_t v89;
  int v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  double v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  _BYTE v102[12];
  __int16 v103;
  double v104;
  float v105;
  __int128 v106;
  _BYTE v107[88];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _BYTE v115[64];
  __int16 v116;
  uint64_t v117;
  int v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _BYTE v122[80];
  uint64_t v123;
  unint64_t v124;
  uint8_t buf[4];
  unint64_t v126;
  __int16 v127;
  _BYTE v128[10];
  _BYTE v129[10];
  _BYTE v130[10];
  _BYTE v131[10];
  _BYTE v132[10];
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  uint64_t v137;

  v4 = a4;
  v137 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a2 + 96);
  v9 = *(double *)(a2 + 76);
  v10 = *(double *)(a2 + 44);
  if (v10 >= 0.0)
  {
    a1[6] = v9;
    a1[1] = v10;
  }
  if (!*(_BYTE *)a1
    || (v11 = *((_QWORD *)a1 + 8)) == 0
    || ((v12 = a1[7], v13 = v9 - v12, v12 > 0.0) ? (v14 = v13 > 5.0) : (v14 = 1),
        v14
     || !*(_BYTE *)(v11 + 18)
     || (v8 == 3 || a1[2] <= 0.0) && ((v15 = a1[6], v15 <= 0.0) || (v13 = a1[1], v13 < 0.0) || v9 - v15 > 15.0)))
  {
    if (!(_DWORD)a4)
      return 0;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v20 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v21 = *(_QWORD *)(a2 + 76);
      v22 = *((_QWORD *)a1 + 8);
      if (v22)
        v23 = *(unsigned __int8 *)(v22 + 18);
      else
        v23 = -1;
      v24 = *(unsigned __int8 *)a1;
      v26 = *((_QWORD *)a1 + 6);
      v25 = *((_QWORD *)a1 + 7);
      v27 = *((_QWORD *)a1 + 1);
      v28 = *((_QWORD *)a1 + 2);
      *(_DWORD *)buf = 134351104;
      v126 = v21;
      v127 = 1026;
      *(_DWORD *)v128 = v23;
      *(_WORD *)&v128[4] = 1026;
      *(_DWORD *)&v128[6] = v24;
      *(_WORD *)v129 = 2050;
      *(_QWORD *)&v129[2] = v25;
      *(_WORD *)v130 = 2050;
      *(_QWORD *)&v130[2] = 0x4014000000000000;
      *(_WORD *)v131 = 2050;
      *(_QWORD *)&v131[2] = v27;
      *(_WORD *)v132 = 2050;
      *(_QWORD *)&v132[2] = v26;
      v133 = 2050;
      v134 = 0x402E000000000000;
      v135 = 2050;
      v136 = v28;
      _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,NotPropagating,isTunnel,%{public}d,isSnapUsable,%{public}d,particleTime,%{public}.2lf,particleTimeOut,%{public}.1lf,speed,%{public}.2lf,speedTime,%{public}.2lf,speedTimeOut,%{public}.1lf,speedLimit,%{public}.1lf", buf, 0x54u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v71 = *(_QWORD *)(a2 + 76);
    v72 = *((_QWORD *)a1 + 8);
    if (v72)
      v73 = *(unsigned __int8 *)(v72 + 18);
    else
      v73 = -1;
    v74 = *(unsigned __int8 *)a1;
    v76 = *((_QWORD *)a1 + 6);
    v75 = *((_QWORD *)a1 + 7);
    v77 = *((_QWORD *)a1 + 1);
    v78 = *((_QWORD *)a1 + 2);
    *(_DWORD *)v107 = 134351104;
    *(_QWORD *)&v107[4] = v71;
    *(_WORD *)&v107[12] = 1026;
    *(_DWORD *)&v107[14] = v73;
    *(_WORD *)&v107[18] = 1026;
    *(_DWORD *)&v107[20] = v74;
    *(_WORD *)&v107[24] = 2050;
    *(_QWORD *)&v107[26] = v75;
    *(_WORD *)&v107[34] = 2050;
    *(_QWORD *)&v107[36] = 0x4014000000000000;
    *(_WORD *)&v107[44] = 2050;
    *(_QWORD *)&v107[46] = v77;
    *(_WORD *)&v107[54] = 2050;
    *(_QWORD *)&v107[56] = v76;
    *(_WORD *)&v107[64] = 2050;
    *(_QWORD *)&v107[66] = 0x402E000000000000;
    *(_WORD *)&v107[74] = 2050;
    *(_QWORD *)&v107[76] = v78;
    v19 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v19);
    goto LABEL_140;
  }
  if (objc_msgSend_isLocationShiftRequiredForCoordinate_(MEMORY[0x1E0D27178], (const char *)a2, (uint64_t)a3, a4, a1[12], a1[13], v13)&& *(_DWORD *)(a2 + 132) != 2)
  {
    if (!v4)
      return 0;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v16 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_QWORD *)(a2 + 76);
      *(_DWORD *)buf = 134349056;
      v126 = v17;
      _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,NotPropagating, shifting is required but accessory is outputting  unshifted coordinates", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v18 = *(_QWORD *)(a2 + 76);
    *(_DWORD *)v107 = 134349056;
    *(_QWORD *)&v107[4] = v18;
    v19 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v19);
LABEL_140:
    if (v19 != (char *)buf)
      free(v19);
    return 0;
  }
  v31 = *(double *)(a2 + 76) - a1[7];
  if (v31 < 0.0)
  {
    if (!v4)
      return 0;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v32 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v33 = *(_QWORD *)(a2 + 76);
      v34 = *((_QWORD *)a1 + 7);
      *(_DWORD *)buf = 134349312;
      v126 = v33;
      v127 = 2050;
      *(_QWORD *)v128 = v34;
      _os_log_impl(&dword_18F5B3000, v32, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,NotPropagating,time lower than particleTime, %{public}.2lf", buf, 0x16u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v35 = *(_QWORD *)(a2 + 76);
    v36 = *((_QWORD *)a1 + 7);
    *(_DWORD *)v107 = 134349312;
    *(_QWORD *)&v107[4] = v35;
    *(_WORD *)&v107[12] = 2050;
    *(_QWORD *)&v107[14] = v36;
    v19 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v19);
    goto LABEL_140;
  }
  if (v8 == 3 || (v37 = a1[2], v37 <= 0.0))
  {
    v37 = a1[1];
  }
  else if (a1[1] >= v37)
  {
    v37 = a1[1];
  }
  v38 = v31 * v37;
  if (v31 * v37 <= 225.0)
    v39 = v31 * v37;
  else
    v39 = 225.0;
  if (v31 * v37 > 225.0 && v4 != 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v41 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v42 = *(_QWORD *)(a2 + 76);
      *(_DWORD *)buf = 134349568;
      v126 = v42;
      v127 = 2050;
      *(double *)v128 = v38;
      *(_WORD *)&v128[8] = 2050;
      *(_QWORD *)v129 = 0x406C200000000000;
      _os_log_impl(&dword_18F5B3000, v41, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,limit distance to propagate,orig,%{public}.1lf,new,%{public}.1lf", buf, 0x20u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990730);
      v79 = *(_QWORD *)(a2 + 76);
      *(_DWORD *)v107 = 134349568;
      *(_QWORD *)&v107[4] = v79;
      *(_WORD *)&v107[12] = 2050;
      *(double *)&v107[14] = v38;
      *(_WORD *)&v107[22] = 2050;
      *(_QWORD *)&v107[24] = 0x406C200000000000;
      v80 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v80);
      if (v80 != (char *)buf)
        free(v80);
    }
    v39 = 225.0;
  }
  *(_QWORD *)v107 = 0;
  *(_QWORD *)&v107[8] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v85 = _Q0;
  *(_OWORD *)&v107[16] = _Q0;
  *(_QWORD *)&v107[32] = 0;
  *(_QWORD *)&v107[40] = 0;
  *(_QWORD *)&v107[48] = 0xBFF0000000000000;
  v117 = 0;
  v118 = 0;
  memset(&v115[32], 0, 32);
  v116 = 0;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  memset(v122, 0, 27);
  memset(&v122[32], 0, 48);
  memset(v115, 0, 30);
  v114 = 0u;
  v113 = 0u;
  v112 = 0u;
  v111 = 0u;
  v110 = 0u;
  v109 = 0u;
  v108 = 0u;
  memset(&v107[56], 0, 32);
  v124 = 0xBFF0000000000000;
  v123 = 0;
  v88[0] = (uint64_t)v88;
  v88[1] = (uint64_t)v88;
  v89 = 0;
  v87 = 0;
  if (((*(uint64_t (**)(_QWORD, _BYTE *, uint64_t *, _QWORD, uint64_t, unsigned __int8 *, _QWORD, uint64_t *, double, double))(*(_QWORD *)*a3 + 80))(*a3, v107, v88, 0, 1, (unsigned __int8 *)a1 + 64, *((unsigned __int8 *)a1 + 84), &v87, a1[14], v39) & 1) == 0)
  {
    if (!v4)
      goto LABEL_83;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v49 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v49, OS_LOG_TYPE_DEBUG, "CLMM,NotPropagating,roadsAtIntersection returned false", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_83;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    *(_WORD *)v102 = 0;
    v48 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v48);
    goto LABEL_149;
  }
  if (v89 >= 2)
  {
    if (!v4)
      goto LABEL_83;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v47 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      v126 = v89;
      v127 = 2050;
      *(double *)v128 = v39;
      _os_log_impl(&dword_18F5B3000, v47, OS_LOG_TYPE_DEBUG, "CLMM,NotPropagating,multi-outbound,%{public}lu,intersection within the distance,%{public}.2lf, needed to be travelled returned", buf, 0x16u);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_83;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    *(_DWORD *)v102 = 134349312;
    *(_QWORD *)&v102[4] = v89;
    v103 = 2050;
    v104 = v39;
    v48 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v48);
LABEL_149:
    if (v48 != (char *)buf)
      free(v48);
LABEL_83:
    v29 = 0;
    goto LABEL_124;
  }
  sub_18F692488((uint64_t)v102, (uint64_t)(a1 + 8));
  v86[0] = v86;
  v86[1] = v86;
  v86[2] = 0;
  if (((*(uint64_t (**)(_QWORD, _BYTE *, _QWORD *, double))(*(_QWORD *)*a3 + 88))(*a3, v102, v86, v39) & 1) == 0)
  {
    if (!v4)
      goto LABEL_122;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v61 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v61, OS_LOG_TYPE_DEBUG, "CLMM,NotPropagating,moveOnRoad returned false", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_122;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_156;
    goto LABEL_159;
  }
  if (!*(_QWORD *)v102)
  {
    if (!v4)
      goto LABEL_122;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v62 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v62, OS_LOG_TYPE_FAULT, "CLMM,NotPropagating,NULL road", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_122;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    LOWORD(v90) = 0;
    v63 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v63);
    goto LABEL_157;
  }
  if (*(_BYTE *)(*(_QWORD *)v102 + 18))
  {
    if (v4)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990730);
      v50 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v51 = *(_QWORD *)(a2 + 76);
        v52 = *((_QWORD *)a1 + 1);
        v53 = *((_QWORD *)a1 + 2);
        *(_DWORD *)buf = 134350337;
        v126 = v51;
        v127 = 2049;
        *(_QWORD *)v128 = v106;
        *(_WORD *)&v128[8] = 2049;
        *(_QWORD *)v129 = *((_QWORD *)&v106 + 1);
        *(_WORD *)&v129[8] = 2050;
        *(double *)v130 = v105;
        *(_WORD *)&v130[8] = 2050;
        *(_QWORD *)v131 = v52;
        *(_WORD *)&v131[8] = 2050;
        *(_QWORD *)v132 = v53;
        _os_log_impl(&dword_18F5B3000, v50, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Propagating,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,speed,%{public}.1lf,speedLimit,%{public}.1lf", buf, 0x3Eu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990730);
        v81 = *(_QWORD *)(a2 + 76);
        v82 = *((_QWORD *)a1 + 1);
        v83 = *((_QWORD *)a1 + 2);
        v90 = 134350337;
        v91 = v81;
        v92 = 2049;
        v93 = v106;
        v94 = 2049;
        v95 = *((_QWORD *)&v106 + 1);
        v96 = 2050;
        v97 = v105;
        v98 = 2050;
        v99 = v82;
        v100 = 2050;
        v101 = v83;
        v84 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v84);
        if (v84 != (char *)buf)
          free(v84);
      }
    }
    v54 = *(double *)(a2 + 76);
    a1[6] = v54;
    *(_OWORD *)(a2 + 4) = v106;
    *(double *)(a2 + 60) = v105;
    *(_QWORD *)(a2 + 52) = 0x3FC999999999999ALL;
    *(_QWORD *)(a2 + 68) = 0x4008000000000000;
    *(_OWORD *)(a2 + 28) = xmmword_18F7722C0;
    v55 = *(_DWORD *)(a2 + 96);
    if (v55 != 3)
      *(_OWORD *)(a2 + 44) = v85;
    v56 = a1[4];
    if (v56 <= 0.0)
    {
      v58 = 0.0;
      v60 = -1.0;
    }
    else
    {
      v57 = (double *)(a2 + 36);
      v58 = a1[5];
      *(double *)(a2 + 28) = v58;
      v59 = v56 + v31 * 0.15;
      *(double *)(a2 + 36) = v59;
      if (v59 > 200.0)
        v57 = (double *)&unk_18F7747C0;
      v60 = *v57;
      *(double *)(a2 + 36) = *v57;
    }
    *(_QWORD *)(a2 + 20) = 0x4024000000000000;
    v65 = (double *)(a2 + 20);
    v66 = 10.0;
    if ((v55 & 0xFFFFFFF7) == 1)
    {
      v67 = a1[3] + v31 * 0.5;
      *v65 = v67;
      v68 = (double *)&unk_18F7747C8;
      if (v67 >= 10.0)
        v68 = v65;
      v69 = *v68;
      *v65 = *v68;
      v70 = (double *)&unk_18F7747D0;
      if (v69 <= 149.0)
        v70 = v65;
      v66 = *v70;
      *v65 = *v70;
    }
    v29 = 1;
    sub_18F692530((uint64_t)a1, (uint64_t)v102, 1, v54, v66, v58, v60);
    goto LABEL_123;
  }
  if (v4)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v64 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v64, OS_LOG_TYPE_DEBUG, "CLMM,NotPropagating,solution moved away from tunnel", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
      {
LABEL_156:
        LOWORD(v90) = 0;
        v63 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, BOOL)", "CoreLocation: %s\n", v63);
LABEL_157:
        if (v63 != (char *)buf)
          free(v63);
        goto LABEL_122;
      }
LABEL_159:
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
      goto LABEL_156;
    }
  }
LABEL_122:
  v29 = 0;
LABEL_123:
  sub_18F692F30(v86);
  sub_18F692600((uint64_t)v102);
LABEL_124:
  sub_18F64F950(v88);
  if (SHIBYTE(v111) < 0)
    operator delete(*((void **)&v110 + 1));
  return v29;
}

void sub_18F692428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  sub_18F692F30(&a14);
  sub_18F692600((uint64_t)&a29);
  sub_18F64F950(&a18);
  if (a64 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_18F692488(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_OWORD *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  v8 = *(_OWORD *)(a2 + 56);
  v9 = *(_OWORD *)(a2 + 65);
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 65) = v9;
  *(_OWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  sub_18F692CBC((_QWORD *)(a1 + 88), *(const void **)(a2 + 88), *(_QWORD *)(a2 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3));
  return a1;
}

void sub_18F69251C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18F5D6004(v1);
  _Unwind_Resume(a1);
}

void *sub_18F692530(uint64_t a1, uint64_t a2, char a3, double a4, double a5, double a6, double a7)
{
  uint64_t v13;
  void *result;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  double v19;

  *(double *)(a1 + 56) = a4;
  v13 = a1 + 64;
  result = sub_18F623A40((_QWORD *)(a1 + 64), (uint64_t *)a2);
  v15 = *(_QWORD *)(a2 + 48);
  v16 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 112) = v15;
  v17 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 120) = v17;
  if (v13 != a2)
    result = sub_18F692DD0((char *)(a1 + 152), *(char **)(a2 + 88), *(_QWORD *)(a2 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3));
  *(_BYTE *)a1 = a3;
  *(double *)(a1 + 32) = a7;
  *(double *)(a1 + 40) = a6;
  *(double *)(a1 + 24) = a5;
  v18 = *(_QWORD *)(a1 + 64);
  if (v18)
  {
    v19 = *(double *)(v18 + 32);
    if (v19 <= 0.0)
      v19 = -1.0;
    *(double *)(a1 + 16) = v19;
  }
  return result;
}

uint64_t sub_18F692600(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  return sub_18F5D6004(a1);
}

void sub_18F692630(uint64_t a1, __int128 *a2)
{
  double v3;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;

  v3 = *((double *)a2 + 1);
  *(double *)a1 = v3;
  if (!*((_BYTE *)a2 + 264))
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    v8 = a1 + 64;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 41) = 0u;
    goto LABEL_9;
  }
  v26 = 0.0;
  v27 = 0.0;
  v24 = 0.0;
  v25 = 0.0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_DWORD *)(a1 + 8))
  {
    v5 = v3 - *(double *)(a1 + 72);
    if (v5 >= 0.0
      && v5 <= 2.2
      && sub_18F5BD37C((double *)(a1 + 496), &v25, &v24, &v28, *((double *)a2 + 36), *((double *)a2 + 37), *((double *)a2 + 9), *(double *)(a1 + 352), *(double *)(a1 + 360), *(double *)(a1 + 136)))
    {
      v6 = v24;
      v7 = v25;
      if (sqrt(v6 * v6 + v7 * v7) / v5 <= 3.8
        && (*((_BYTE *)a2 + 228)
         || *((double *)a2 + 12) <= 2.2
         || sub_18F5BD37C((double *)(a1 + 496), &v27, &v26, &v28, *((double *)a2 + 7), *((double *)a2 + 8), *((double *)a2 + 9), *(double *)(a1 + 120), *(double *)(a1 + 128), *(double *)(a1 + 136))))
      {
        v22 = 0.0;
        sub_18F71ACC4((double *)(a1 + 496), &v23, &v22, *((double *)a2 + 36), *((double *)a2 + 37), *((double *)a2 + 9), *((double *)a2 + 21), *((double *)a2 + 7), *((double *)a2 + 8));
        v21 = v22;
        if (v22 > *(double *)(a1 + 48))
          *(_BYTE *)(a1 + 56) = 1;
        *(double *)(a1 + 48) = v21;
        v10 = v26;
        v11 = v27;
        v9 = *(_DWORD *)(a1 + 8) + 1;
        goto LABEL_11;
      }
    }
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 41) = 0u;
    v8 = a1 + 64;
LABEL_9:
    sub_18F692F90(v8);
    return;
  }
  v9 = 1;
  v6 = 0.0;
  v7 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
LABEL_11:
  v12 = *(double *)(a1 + 24);
  v13 = v11 + *(double *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v9;
  *(double *)(a1 + 16) = v13;
  *(double *)(a1 + 24) = v10 + v12;
  v14 = v6 + *(double *)(a1 + 40);
  *(double *)(a1 + 32) = v7 + *(double *)(a1 + 32);
  *(double *)(a1 + 40) = v14;
  v15 = *a2;
  v16 = a2[1];
  v17 = a2[3];
  *(_OWORD *)(a1 + 96) = a2[2];
  *(_OWORD *)(a1 + 112) = v17;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v16;
  v18 = a2[4];
  v19 = a2[5];
  v20 = a2[7];
  *(_OWORD *)(a1 + 160) = a2[6];
  *(_OWORD *)(a1 + 176) = v20;
  *(_OWORD *)(a1 + 128) = v18;
  *(_OWORD *)(a1 + 144) = v19;
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 8));
  memcpy((void *)(a1 + 216), (char *)a2 + 152, 0x118uLL);
}

uint64_t sub_18F692854(uint64_t *a1, int a2)
{
  double v3;
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  NSObject *v11;
  uint64_t v12;
  int v13;
  char *v14;
  char *v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  _BYTE v19[38];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a1 + 2) < 4u)
    return 0;
  v3 = sqrt(*((double *)a1 + 3) * *((double *)a1 + 3) + *((double *)a1 + 2) * *((double *)a1 + 2));
  v4 = sqrt(*((double *)a1 + 5) * *((double *)a1 + 5) + *((double *)a1 + 4) * *((double *)a1 + 4));
  if (*((_BYTE *)a1 + 56))
  {
    v5 = v3 - v4;
    if (*((double *)a1 + 6) > 15.0 && v5 > 29.0)
    {
      if (a2)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990730);
        v6 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
        {
          v7 = *a1;
          v8 = a1[6];
          *(_DWORD *)buf = 134350080;
          v17 = v7;
          v18 = 2050;
          *(_QWORD *)v19 = v8;
          *(_WORD *)&v19[8] = 2050;
          *(double *)&v19[10] = v3;
          *(_WORD *)&v19[18] = 2050;
          *(double *)&v19[20] = v4;
          *(_WORD *)&v19[28] = 2050;
          *(_QWORD *)&v19[30] = 0x403D000000000000;
          _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_INFO, "CLMM,%{public}.1lf,detected stuck,alongTrackRawToSnap,%{public}.1lf,deltaPosChange,%{public}.1lf,deltaSnapChange,%{public}.1lf,thresholdDiff,%{public}.1lf", buf, 0x34u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990730);
          v15 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::StuckAtEndOfRoad::isStuckAtEndOfRoad(const BOOL)", "CoreLocation: %s\n", v15);
          if (v15 != (char *)buf)
            free(v15);
        }
      }
      return 1;
    }
  }
  else
  {
    v5 = v3 - v4;
  }
  if (v5 <= 5.0 || a2 == 0)
    return 0;
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990730);
  v11 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v12 = *a1;
    v13 = *((unsigned __int8 *)a1 + 56);
    *(_DWORD *)buf = 134350080;
    v17 = v12;
    v18 = 1026;
    *(_DWORD *)v19 = v13;
    *(_WORD *)&v19[4] = 2050;
    *(double *)&v19[6] = v3;
    *(_WORD *)&v19[14] = 2050;
    *(double *)&v19[16] = v4;
    *(_WORD *)&v19[24] = 2050;
    *(_QWORD *)&v19[26] = 0x403D000000000000;
    _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_DEBUG, "CLMM, %{public}.1lf,isMovingAway,%{public}d,deltaPosChange,%{public}.1lf,deltaSnapChange,%{public}.1lf,thresholdDiff,%{public}.1lf", buf, 0x30u);
  }
  result = sub_18F5C4AE0(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990730);
    v14 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::StuckAtEndOfRoad::isStuckAtEndOfRoad(const BOOL)", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
    return 0;
  }
  return result;
}

os_log_t sub_18F692C90()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

_QWORD *sub_18F692CBC(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_18F692D34(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 4);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18F692D18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_18F692D34(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    sub_18F5F7864();
  result = (char *)sub_18F692D88((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *sub_18F692D88(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    sub_18F5F689C();
  return operator new(72 * a2);
}

char *sub_18F692DD0(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  char *v20;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0x8E38E38E38E38E39 * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x38E38E38E38E38ELL)
      sub_18F5F7864();
    v10 = 0x8E38E38E38E38E39 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x1C71C71C71C71C7)
      v12 = 0x38E38E38E38E38ELL;
    else
      v12 = v11;
    result = sub_18F692D34(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v17 - 4;
      v19 = v9;
      v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0x8E38E38E38E38E39 * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9 - 4);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v17 - 4;
    v19 = v9;
    v20 = v16;
LABEL_18:
    result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

_QWORD *sub_18F692F30(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void sub_18F692F90(uint64_t a1)
{
  _BYTE v7[88];
  __int128 v8;
  _BYTE v9[280];

  __asm { FMOV            V0.2D, #-1.0 }
  *(_QWORD *)v7 = 0xBFF0000000000000;
  *(_QWORD *)&v9[120] = 0;
  *(_DWORD *)&v9[128] = 0;
  memset(&v9[80], 0, 34);
  memset(&v9[136], 0, 75);
  memset(&v9[216], 0, 56);
  memset(&v7[8], 0, 80);
  memset(v9, 0, 78);
  v8 = 0u;
  *(_QWORD *)&v9[272] = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 32) = 0uLL;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
  *(_OWORD *)a1 = 0uLL;
  *(_OWORD *)(a1 + 16) = _Q0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)&v7[48];
  *(_OWORD *)(a1 + 112) = *(_OWORD *)&v7[64];
  *(_OWORD *)(a1 + 64) = *(_OWORD *)&v7[16];
  *(_OWORD *)(a1 + 80) = *(_OWORD *)&v7[32];
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)&v7[80]);
  memcpy((void *)(a1 + 152), v9, 0x118uLL);
  if (SHIBYTE(v8) < 0)
    operator delete(*(void **)&v7[80]);
}

void sub_18F693084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CLGetUncertaintyScaleFactors(unsigned int a1, double *a2, double *a3)
{
  NSObject *v5;
  int v6;
  uint64_t result;
  NSObject *v8;
  int v9;
  char *v10;
  NSObject *v12;
  double v13;
  double v14;
  char *v15;
  uint8_t buf[4];
  unsigned int v17;
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a2 && a3)
  {
    if (a1 - 100 > 0xFFFFFF9C)
    {
      *a2 = sub_18F6940AC(a1, dbl_18F7747D8);
      *a3 = sub_18F6940AC(a1, dbl_18F774868);
      if (qword_1EE1720A0 != -1)
        dispatch_once(&qword_1EE1720A0, &unk_1E2990750);
      v12 = qword_1EE172098;
      if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_DEBUG))
      {
        v13 = *a2;
        v14 = *a3;
        *(_DWORD *)buf = 67240704;
        v17 = a1;
        v18 = 2050;
        v19 = v13;
        v20 = 2050;
        v21 = v14;
        _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_DEBUG, "#CLEU,CLGetUncertaintyScaleFactors,conf,%{public}d,horzSF,%{public}f,vertSF,%{public}f", buf, 0x1Cu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE1720A0 != -1)
          dispatch_once(&qword_1EE1720A0, &unk_1E2990750);
        v15 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGetUncertaintyScaleFactors(unsigned int, double *, double *)", "CoreLocation: %s\n", v15);
        if (v15 != (char *)buf)
          free(v15);
      }
      return 1;
    }
    else
    {
      if (qword_1EE1720A0 != -1)
        dispatch_once(&qword_1EE1720A0, &unk_1E2990750);
      v5 = qword_1EE172098;
      if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        v17 = a1;
        _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_ERROR, "#CLEU,CLGetUncertaintyScaleFactors,confidence out of bounds,%{public}d", buf, 8u);
      }
      v6 = sub_18F5C4AE0(115, 0);
      result = 0;
      if (v6)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE1720A0 == -1)
          goto LABEL_17;
        goto LABEL_31;
      }
    }
  }
  else
  {
    if (qword_1EE1720A0 != -1)
      dispatch_once(&qword_1EE1720A0, &unk_1E2990750);
    v8 = qword_1EE172098;
    if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_ERROR, "#CLEU,CLGetUncertaintyScaleFactors,input horzontal or vertical SF pointer is NULL", buf, 2u);
    }
    v9 = sub_18F5C4AE0(115, 0);
    result = 0;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE1720A0 == -1)
      {
LABEL_17:
        v10 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGetUncertaintyScaleFactors(unsigned int, double *, double *)", "CoreLocation: %s\n", v10);
        if (v10 != (char *)buf)
          free(v10);
        return 0;
      }
LABEL_31:
      dispatch_once(&qword_1EE1720A0, &unk_1E2990750);
      goto LABEL_17;
    }
  }
  return result;
}

double sub_18F6940AC(unsigned int a1, double *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v7;
  int v8;
  uint64_t i;
  unsigned int v10;
  NSObject *v11;
  char *v12;
  char *v13;
  uint8_t buf[4];
  unsigned int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a2 <= a1)
  {
    if (*((_DWORD *)a2 + 32) >= a1)
    {
      for (i = 0; i != 18; i += 2)
      {
        v10 = LODWORD(a2[i]);
        if (v10 == a1)
          return a2[i + 1];
        if (i * 8 && v10 > a1)
          return a2[i + 1] + -(a2[i + 1] - a2[i - 1]) / (double)(v10 - LODWORD(a2[i - 2])) * (double)(v10 - a1);
      }
      if (qword_1EE1720A0 != -1)
        dispatch_once(&qword_1EE1720A0, &unk_1E2990750);
      v11 = qword_1EE172098;
      if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_ERROR, "#CLEU,linearInterp,failed to find table points bounding x", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 0))
        return a2[17];
      bzero(buf, 0x65CuLL);
      if (qword_1EE1720A0 == -1)
        goto LABEL_34;
    }
    else
    {
      if (qword_1EE1720A0 != -1)
        dispatch_once(&qword_1EE1720A0, &unk_1E2990750);
      v7 = qword_1EE172098;
      if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_ERROR))
      {
        v8 = *((_DWORD *)a2 + 32);
        *(_DWORD *)buf = 67240448;
        v15 = a1;
        v16 = 1026;
        v17 = v8;
        _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_ERROR, "#CLEU,linearInterp,x is greater than the last point in table,x,%{public}d,table[size-1].first,%{public}d", buf, 0xEu);
      }
      if (!sub_18F5C4AE0(115, 0))
        return a2[17];
      bzero(buf, 0x65CuLL);
      if (qword_1EE1720A0 == -1)
      {
LABEL_34:
        v13 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "double linearInterp(unsigned int, std::array<std::pair<unsigned int, double>, size>) [size = 9UL]", "CoreLocation: %s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
        return a2[17];
      }
    }
    dispatch_once(&qword_1EE1720A0, &unk_1E2990750);
    goto LABEL_34;
  }
  if (qword_1EE1720A0 != -1)
    dispatch_once(&qword_1EE1720A0, &unk_1E2990750);
  v4 = qword_1EE172098;
  if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_DWORD *)a2;
    *(_DWORD *)buf = 67240448;
    v15 = a1;
    v16 = 1026;
    v17 = v5;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_ERROR, "#CLEU,linearInterp,x is less than the first point in table,x,%{public}d,table[0].first,%{public}d", buf, 0xEu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720A0 != -1)
      dispatch_once(&qword_1EE1720A0, &unk_1E2990750);
    v12 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "double linearInterp(unsigned int, std::array<std::pair<unsigned int, double>, size>) [size = 9UL]", "CoreLocation: %s\n", v12);
    if (v12 != (char *)buf)
      free(v12);
  }
  return a2[1];
}

os_log_t sub_18F694554()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "Emergency");
  qword_1EE172098 = (uint64_t)result;
  return result;
}

uint64_t sub_18F6945C4()
{
  CLBeaconRegion *v0;
  const char *v1;
  uint64_t v2;
  uint64_t result;

  v0 = [CLBeaconRegion alloc];
  result = objc_msgSend_initWithIdentifier_(v0, v1, (uint64_t)CFSTR("CLBeaconRegionAnyIdentifier"), v2);
  qword_1EE172F78 = result;
  return result;
}

void sub_18F6959CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  sub_18F5D6004((uint64_t)&a11);
  sub_18F5D6004((uint64_t)&a13);
  MEMORY[0x194002D30](v28, 0xA0C40114AFA65);
  _Unwind_Resume(a1);
}

uint64_t sub_18F695AD8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  CLGnssExtensionsClient *v8;
  const char *v9;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD v18[3];
  _QWORD v19[3];
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D70);
    v11 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLGnssExtensions,reason missing\"}", buf, 0x12u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990D70);
    }
    v12 = qword_1ECD8E750;
    if (!os_signpost_enabled((os_log_t)qword_1ECD8E750))
      return 0;
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v13 = "CLGnssExtensions,reason missing";
    v14 = "{\"msg%{public}.0s\":\"CLGnssExtensions,reason missing\"}";
    goto LABEL_35;
  }
  if (!a1 || !a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D70);
    v15 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLGnssExtensions,bundleID or bundlePath needed\"}", buf, 0x12u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990D70);
    }
    v12 = qword_1ECD8E750;
    if (!os_signpost_enabled((os_log_t)qword_1ECD8E750))
      return 0;
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v13 = "CLGnssExtensions,bundleID or bundlePath needed";
    v14 = "{\"msg%{public}.0s\":\"CLGnssExtensions,bundleID or bundlePath needed\"}";
    goto LABEL_35;
  }
  if (!a4)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D70);
    v16 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v21 = 0;
      v22 = 2082;
      v23 = "";
      _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLGnssExtensions,nil callback queue\"}", buf, 0x12u);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990D70);
    }
    v12 = qword_1ECD8E750;
    if (!os_signpost_enabled((os_log_t)qword_1ECD8E750))
      return 0;
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v13 = "CLGnssExtensions,nil callback queue";
    v14 = "{\"msg%{public}.0s\":\"CLGnssExtensions,nil callback queue\"}";
    goto LABEL_35;
  }
  if (a5)
  {
    v18[0] = CFSTR("kCLConnectionMessageBundleIdentifierKey");
    v18[1] = CFSTR("kCLConnectionMessageBundlePathKey");
    v19[0] = a1;
    v19[1] = a2;
    v18[2] = CFSTR("kCLConnectionMessagePurposeKey");
    v19[2] = a3;
    v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v19, (uint64_t)v18, 3);
    v8 = [CLGnssExtensionsClient alloc];
    return objc_msgSend_initWithRegistrationMessageName_messageDictionary_dispatchQueue_codeBlock_(v8, v9, (uint64_t)"kCLConnectionMessageGnssExtensionsClient", v7, a4, a5);
  }
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E2990D70);
  v17 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLGnssExtensions,nil callback block\"}", buf, 0x12u);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D70);
  }
  v12 = qword_1ECD8E750;
  if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
  {
    *(_DWORD *)buf = 68289026;
    v21 = 0;
    v22 = 2082;
    v23 = "";
    v13 = "CLGnssExtensions,nil callback block";
    v14 = "{\"msg%{public}.0s\":\"CLGnssExtensions,nil callback block\"}";
LABEL_35:
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v13, v14, buf, 0x12u);
  }
  return 0;
}

void sub_18F69602C(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E2990D70);
  v3 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
  {
    v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0)
      v5 = v4;
    else
      v5 = *(_QWORD *)v4;
    *(_DWORD *)buf = 136315138;
    v8 = v5;
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEBUG, "CLGnssExtensions,unexpected message,%s", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990D70);
    CLConnectionMessage::name(*a2);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "CLGnssExtensionsCallbackAssertionInternal::CLGnssExtensionsCallbackAssertionInternal(dispatch_queue_t, const char *, NSDictionary *, GnssExtensionsCallback)_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

uint64_t sub_18F696208(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t result;
  int v10;
  uint64_t Dictionary;
  uint64_t v12;
  id v13;
  const char *v14;
  id v15;
  _DWORD v16[2];
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E2990D70);
  v4 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
  {
    v5 = CLConnectionMessage::name(*a2);
    if (*(char *)(v5 + 23) >= 0)
      v6 = v5;
    else
      v6 = *(_QWORD *)v5;
    v16[0] = 68289282;
    v16[1] = 0;
    v17 = 2082;
    v18 = "";
    v19 = 2082;
    v20 = v6;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssExtensions\", \"Connection Message\":%{public, location:escape_only}s}", (uint8_t *)v16, 0x1Cu);
  }
  v7 = (_QWORD *)CLConnectionMessage::name(*a2);
  v8 = *((char *)v7 + 23);
  if (v8 < 0)
  {
    if (v7[1] != 45)
      goto LABEL_14;
    v7 = (_QWORD *)*v7;
  }
  else if (v8 != 45)
  {
    goto LABEL_14;
  }
  if (!memcmp(v7, "kCLConnectionMessageGnssExtensionsClientError", 0x2DuLL))
  {
    result = CLConnectionMessage::getDictionary(*a2);
    if (*(_QWORD *)(v3 + 8))
    {
      v12 = result;
      v13 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v15 = (id)objc_msgSend_initWithDomain_code_userInfo_(v13, v14, (uint64_t)CFSTR("CLGnssExtensions Error"), 0, v12);
      return (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 8) + 16))();
    }
    return result;
  }
LABEL_14:
  result = CLConnectionMessage::name(*a2);
  v10 = *(char *)(result + 23);
  if (v10 < 0)
  {
    if (*(_QWORD *)(result + 8) != 38)
      return result;
    result = *(_QWORD *)result;
  }
  else if (v10 != 38)
  {
    return result;
  }
  result = memcmp((const void *)result, "kCLConnectionMessageGnssExtensionsData", 0x26uLL);
  if (!(_DWORD)result)
  {
    Dictionary = CLConnectionMessage::getDictionary(*a2);
    result = *(_QWORD *)(v3 + 8);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, Dictionary, 0);
  }
  return result;
}

os_log_t sub_18F696400()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

BOOL sub_18F69642C(double *a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  BOOL v5;

  v2 = *a1;
  if (*a1 >= 51.1 && v2 <= 61.1 && *a2 >= -13.2 && *a2 <= 1.87)
    return 1;
  if (v2 >= 49.866 && v2 <= 61.1 && *a2 >= -6.48 && *a2 <= 0.15)
    return 1;
  if (v2 >= 50.688 && v2 <= 61.1 && *a2 >= 0.15 && *a2 <= 1.43)
    return 1;
  if (v2 >= 29.32 && v2 <= 35.8 && *a2 >= 130.0 && *a2 <= 141.0)
    return 1;
  if (v2 >= 35.8 && v2 <= 41.3 && *a2 >= 135.8 && *a2 <= 142.95)
    return 1;
  if (v2 >= 41.3 && v2 <= 45.7 && *a2 >= 139.5 && *a2 <= 145.8)
    return 1;
  if (v2 >= 25.7 && v2 <= 34.756 && *a2 >= 128.837 && *a2 <= 130.0)
    return 1;
  if (v2 >= 23.861 && v2 <= 27.891 && *a2 >= 122.927 && *a2 <= 131.426)
    return 1;
  if (v2 >= -45.0 && v2 <= 4.3 && *a2 >= 104.0 && *a2 <= 156.25)
    return 1;
  if (v2 >= 0.0 && v2 <= 7.408 && *a2 >= 108.75 && *a2 <= 119.215)
    return 1;
  if (v2 >= -14.25 && v2 <= 8.35 && *a2 >= 88.9289 && *a2 <= 108.75)
    return 1;
  if (v2 >= -56.4 && v2 <= -28.0)
  {
    v3 = *a2;
    if (*a2 >= 155.0 && v3 <= 180.1)
      return 1;
    if (v3 >= -180.1 && v3 <= -175.74)
      return 1;
  }
  if (v2 >= -9.0 && v2 <= 27.3 && *a2 >= 67.0 && *a2 <= 92.17)
    return 1;
  if (v2 >= 27.3 && v2 <= 35.44 && *a2 >= 71.746 && *a2 <= 77.876)
    return 1;
  if (v2 >= 26.29 && v2 <= 27.8959 && *a2 >= 79.734 && *a2 <= 88.251)
    return 1;
  if (v2 >= 27.3 && v2 <= 29.15 && *a2 >= 77.83 && *a2 <= 84.154)
    return 1;
  if (v2 >= 27.3 && v2 <= 30.0 && *a2 >= 77.83 && *a2 <= 82.4)
    return 1;
  if (v2 >= 24.18 && v2 <= 29.338 && *a2 >= 63.36 && *a2 <= 71.746)
    return 1;
  if (v2 >= 29.338 && v2 <= 30.917 && *a2 >= 66.437 && *a2 <= 71.746)
    return 1;
  if (v2 >= 30.917 && v2 <= 33.0 && *a2 >= 69.584 && *a2 <= 71.746)
    return 1;
  if (v2 >= -36.08 && v2 <= -18.04 && *a2 >= 11.32 && *a2 <= 37.9)
    return 1;
  if (v2 >= -18.5 && v2 <= -13.45 && *a2 >= 23.5008 && *a2 <= 41.892382)
    return 1;
  if (v2 >= -13.45 && v2 <= 1.68 && *a2 >= 30.905 && *a2 <= 40.987)
    return 1;
  if (v2 >= 1.68 && v2 <= 3.388 && *a2 >= 31.324836 && *a2 <= 40.987)
    return 1;
  if (v2 >= -13.8 && v2 <= -12.44 && *a2 >= 24.07 && *a2 <= 28.33)
    return 1;
  if (v2 >= 11.671 && v2 <= 14.258 && *a2 >= -62.322 && *a2 <= -59.263)
    return 1;
  if (v2 >= 22.950919 && v2 <= 27.567702 && *a2 >= -79.487787 && *a2 <= -72.604668)
    return 1;
  if (v2 >= 21.74346 && v2 <= 27.567702 && *a2 >= -76.173118 && *a2 <= -72.604668)
    return 1;
  if (v2 >= 20.668412 && v2 <= 27.567702 && *a2 >= -73.949372 && *a2 <= -72.604668)
    return 1;
  if (v2 >= 8.3 && v2 <= 17.45 && *a2 >= 99.675 && *a2 <= 102.316)
    return 1;
  if (v2 >= 14.481 && v2 <= 17.51 && *a2 >= 102.286 && *a2 <= 104.683)
    return 1;
  if (v2 >= 17.45 && v2 <= 19.45 && *a2 >= 98.1 && *a2 <= 100.94)
    return 1;
  if (v2 >= 18.142198 && v2 <= 18.315026 && *a2 >= -63.184398 && *a2 <= -62.912807)
    return 1;
  if (v2 >= 16.914842 && v2 <= 17.240077 && *a2 >= -61.964541 && *a2 <= -61.607641)
    return 1;
  if (v2 >= 21.497173 && v2 <= 26.635702 && *a2 >= 88.025462 && *a2 <= 92.577511)
    return 1;
  if (v2 >= 32.166353 && v2 <= 32.577428 && *a2 >= -65.0 && *a2 <= -64.50204)
    return 1;
  if (v2 >= 26.902547 && v2 <= 27.854393 && *a2 >= 89.351473 && *a2 <= 91.521758)
    return 1;
  if (v2 >= 19.103 && v2 <= 20.058 && *a2 >= -81.654 && *a2 <= -79.5)
    return 1;
  if (v2 >= -23.5 && v2 <= -8.32 && *a2 >= -166.288 && *a2 <= -155.88)
    return 1;
  if (v2 >= 34.3297 && v2 <= 35.757 && *a2 >= 32.09 && *a2 <= 34.6509)
    return 1;
  if (v2 >= 15.06 && v2 <= 15.816 && *a2 >= -61.61 && *a2 <= -60.984)
    return 1;
  if (v2 >= -53.02 && v2 <= -50.229 && *a2 >= -61.937 && *a2 <= -56.853)
    return 1;
  if (v2 >= -21.1769 && v2 <= -12.1 && *a2 >= 176.19 && *a2 <= 180.1)
    return 1;
  if (v2 >= -21.1769 && v2 <= -15.057 && *a2 >= -180.1 && *a2 <= -178.097)
    return 1;
  v4 = v2 > 49.589 || v2 < 49.07;
  if (!v4 && *a2 >= -2.82 && *a2 <= -1.96)
    return 1;
  v5 = v2 < 2.6019;
  if (v2 > 8.469)
    v5 = 1;
  return !v5 && *a2 >= -59.5 && *a2 <= -54.489
      || v2 >= 22.178 && v2 <= 22.4435 && *a2 >= 113.828 && *a2 <= 114.4585
      || v2 >= 22.4435 && v2 <= 22.502 && *a2 >= 113.952 && *a2 <= 114.4585
      || v2 >= 17.366 && v2 <= 18.926 && *a2 >= -78.498 && *a2 <= -75.908
      || !v4 && *a2 >= -2.82 && *a2 <= -1.96
      || v2 >= 22.175 && v2 <= 22.203 && *a2 >= 113.53 && *a2 <= 113.6
      || v2 >= 22.107 && v2 <= 22.175 && *a2 >= 113.548 && *a2 <= 113.6
      || v2 >= 35.656 && v2 <= 36.201 && *a2 >= 14.04 && *a2 <= 14.713
      || v2 >= -20.76 && v2 <= -19.6 && *a2 >= 56.9 && *a2 <= 58.4
      || v2 >= 16.61 && v2 <= 16.91 && *a2 >= -62.3 && *a2 <= -62.06
      || v2 >= -0.6 && v2 <= -0.42 && *a2 >= 166.866 && *a2 <= 167.028
      || v2 >= -19.3 && v2 <= -18.67 && *a2 >= -170.126 && *a2 <= -169.6
      || v2 >= -25.858 && v2 <= -23.42 && *a2 >= -131.33 && *a2 <= -123.664
      || v2 >= -14.457 && v2 <= -12.864 && *a2 >= -173.081 && *a2 <= -171.117
      || v2 >= -16.4 && v2 <= -15.4 && *a2 >= -6.2 && *a2 <= -5.0
      || v2 >= 16.986 && v2 <= 17.508 && *a2 >= -62.918 && *a2 <= -62.478
      || v2 >= -5.4 && v2 <= -3.15 && *a2 >= 54.5 && *a2 <= 56.8
      || v2 >= -12.139 && v2 <= -6.353 && *a2 >= 156.267 && *a2 <= 167.87
      || !v5 && *a2 >= -59.5 && *a2 <= -54.489
      || v2 >= -9.8 && v2 <= -8.01 && *a2 >= -172.9 && *a2 <= -170.9
      || v2 >= -22.115 && v2 <= -14.7 && *a2 >= -176.47 && *a2 <= -172.98
      || v2 >= 10.0 && v2 <= 11.585 && *a2 >= -61.8316 && *a2 <= -60.32
      || v2 >= 20.8 && v2 <= 22.35 && *a2 >= -72.56 && *a2 <= -70.81
      || v2 >= 17.555 && v2 <= 18.9639 && *a2 >= -65.11 && *a2 <= -64.14;
}

BOOL sub_18F697618(double *a1, double *a2)
{
  double v2;

  v2 = *a1;
  return *a1 >= 22.4434 && v2 <= 22.62 && *a2 >= 113.952 && *a2 <= 114.4585
      || v2 >= 22.088 && v2 <= 22.244 && *a2 >= 113.511 && *a2 <= 113.621
      || v2 >= 20.439 && v2 <= 29.709 && *a2 >= 92.078 && *a2 <= 97.72
      || v2 >= 26.211 && v2 <= 30.6 && *a2 >= 77.862 && *a2 <= 97.72
      || v2 >= 8.42 && v2 <= 20.553 && *a2 >= 97.2 && *a2 <= 105.72
      || v2 >= 30.6 && v2 <= 37.23 && *a2 >= 69.13 && *a2 <= 80.725
      || v2 >= 24.09 && v2 <= 31.9 && *a2 >= 60.726 && *a2 <= 69.13
      || v2 >= -18.347 && v2 <= -16.74 && *a2 >= 11.05 && *a2 <= 23.74
      || v2 >= -17.067 && v2 <= -10.64 && *a2 >= 21.69 && *a2 <= 24.313
      || v2 >= -13.672 && v2 <= -10.44 && *a2 >= 23.327 && *a2 <= 31.131
      || v2 >= -10.65 && v2 <= 4.07 && *a2 >= 28.115 && *a2 <= 31.96
      || v2 >= -3.03 && v2 <= 5.2 && *a2 >= 31.65 && *a2 <= 42.51
      || v2 >= 0.96 && v2 <= 8.6 && *a2 >= -61.6 && *a2 <= -53.7;
}

BOOL sub_18F69799C(double *a1, double *a2)
{
  double v2;
  BOOL v3;
  BOOL v4;
  _BOOL8 result;

  v2 = *a1;
  result = 1;
  if ((*a1 < 27.6 || v2 > 90.0 || *a2 < -180.0 || *a2 > -65.0) && (v2 < 37.1 || v2 > 90.0 || *a2 < 2.75 || *a2 > 129.7))
  {
    if (v2 < -49.0 || v2 > 0.0 || (*a2 >= -93.0 ? (v3 = *a2 > -30.0) : (v3 = 1), v3))
    {
      if ((v2 < 22.7 || v2 > 90.0 || *a2 < 97.7 || *a2 > 122.7)
        && (v2 < 5.24 || v2 > 33.0 || *a2 < -29.8 || *a2 > 54.475)
        && (v2 < 31.75 || v2 > 49.0 || *a2 < -13.0 || *a2 > 3.0))
      {
        v4 = v2 < -1.0 || v2 > 28.0;
        if ((v4 || *a2 < -120.0 || *a2 > -81.67) && (v2 < 14.3 || v2 > 25.4 || *a2 < -163.4 || *a2 > -150.8))
          return 0;
      }
    }
  }
  return result;
}

uint64_t sub_18F697BA0(double a1, double a2)
{
  double v3;
  double v4;

  v3 = a2;
  v4 = a1;
  if (sub_18F69799C(&v4, &v3))
    return 2;
  if (sub_18F69642C(&v4, &v3))
    return 1;
  if (sub_18F697618(&v4, &v3))
    return 0;
  return 2;
}

long double CLClientGetDistanceCoordinates(double a1, double a2, double a3, double a4)
{
  unsigned __int8 v4;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v4 = atomic_load((unsigned __int8 *)&qword_1EE172C28);
  if ((v4 & 1) == 0)
  {
    v9 = a4;
    v7 = a3;
    v10 = a2;
    v8 = a1;
    v6 = __cxa_guard_acquire(&qword_1EE172C28);
    a3 = v7;
    a1 = v8;
    a2 = v10;
    a4 = v9;
    if (v6)
    {
      qword_1EE172C10 = 0;
      unk_1EE172C18 = 0;
      xmmword_1EE172C00 = xmmword_18F771F40;
      qword_1EE172C20 = 0x3FF0000000000000;
      __cxa_guard_release(&qword_1EE172C28);
      a3 = v7;
      a1 = v8;
      a2 = v10;
      a4 = v9;
    }
  }
  return sub_18F5BD064((double *)&xmmword_1EE172C00, a1, a2, a3, a4, 0.0);
}

CFStringRef CLClientCreateIso6709Notation(uint64_t a1)
{
  double v2;
  const __CFAllocator *v3;
  double v4;

  v2 = *(double *)(a1 + 36);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = *(double *)(a1 + 4);
  if (v2 >= 0.0)
    return CFStringCreateWithFormat(v3, 0, CFSTR("%+08.4lf%+09.4lf%+08.3lf/"), v4, *(_QWORD *)&v4, *(_QWORD *)(a1 + 12), *(_QWORD *)(a1 + 28));
  else
    return CFStringCreateWithFormat(v3, 0, CFSTR("%+08.4lf%+09.4lf/"), v4, *(_QWORD *)(a1 + 4), *(_QWORD *)(a1 + 12));
}

uint64_t sub_18F6993F8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int v15;
  double v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  int v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a2[1];
  v24 = *a2;
  v25 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_18F673B14(a1, &v24, a3);
  v7 = v25;
  if (v25)
  {
    v8 = (unint64_t *)&v25->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_1E298F618;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_QWORD *)(a1 + 912) = a1 + 912;
  *(_QWORD *)(a1 + 920) = a1 + 912;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_QWORD *)(a1 + 984) = a1 + 992;
  *(_QWORD *)(a1 + 976) = 0;
  sub_18F6B22D8(a1 + 1008);
  sub_18F6B22D8(a1 + 1848);
  *(_BYTE *)(a1 + 2688) = 0;
  *(_OWORD *)(a1 + 2696) = 0u;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_DWORD *)(a1 + 2728) = 0;
  *(_WORD *)(a1 + 2732) = 1;
  *(_DWORD *)(a1 + 2736) = 0;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_BYTE *)(a1 + 2792) = 0;
  *(_QWORD *)(a1 + 2800) = 0;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_DWORD *)(a1 + 2824) = 0;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_DWORD *)(a1 + 2872) = 0;
  *(_BYTE *)(a1 + 2848) = 0;
  *(_OWORD *)(a1 + 2832) = 0u;
  *(_WORD *)(a1 + 2876) = 1;
  *(_DWORD *)(a1 + 2880) = 0;
  *(_QWORD *)(a1 + 2952) = 0;
  *(_QWORD *)(a1 + 2944) = 0;
  *(_QWORD *)(a1 + 2960) = 0;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_OWORD *)(a1 + 2920) = 0u;
  *(_BYTE *)(a1 + 2936) = 0;
  *(_QWORD *)(a1 + 2968) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 2976) = &off_1E298F6D8;
  *(_QWORD *)(a1 + 2984) = 30;
  *(_OWORD *)(a1 + 2992) = 0u;
  *(_OWORD *)(a1 + 3008) = 0u;
  *(_OWORD *)(a1 + 3024) = 0u;
  *(_QWORD *)(a1 + 3040) = 0;
  *(_QWORD *)(a1 + 3048) = a1 + 3048;
  *(_QWORD *)(a1 + 3056) = a1 + 3048;
  *(_QWORD *)(a1 + 3064) = 0;
  *(_QWORD *)(a1 + 3072) = a1 + 3072;
  *(_QWORD *)(a1 + 3080) = a1 + 3072;
  *(_QWORD *)(a1 + 3088) = 0;
  *(_QWORD *)(a1 + 3096) = a1 + 3096;
  *(_QWORD *)(a1 + 3104) = a1 + 3096;
  *(_QWORD *)(a1 + 3112) = 0;
  *(_QWORD *)(a1 + 3120) = a1 + 3120;
  *(_QWORD *)(a1 + 3128) = a1 + 3120;
  *(_QWORD *)(a1 + 3144) = 0;
  *(_QWORD *)(a1 + 3136) = 0;
  *(_QWORD *)(a1 + 3152) = 0;
  *(_QWORD *)(a1 + 3160) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 3184) = 0;
  *(_DWORD *)(a1 + 3192) = 0;
  *(_OWORD *)(a1 + 3200) = 0u;
  *(_OWORD *)(a1 + 3216) = 0u;
  *(_OWORD *)(a1 + 3225) = 0u;
  *(_QWORD *)(a1 + 3256) = 0;
  *(_QWORD *)(a1 + 3248) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 3264) = _Q0;
  *(_QWORD *)(a1 + 3280) = 0;
  *(_QWORD *)(a1 + 3288) = 0;
  *(_QWORD *)(a1 + 3296) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 3520) = 0;
  *(_DWORD *)(a1 + 3528) = 0;
  *(_WORD *)(a1 + 3512) = 0;
  *(_OWORD *)(a1 + 3480) = 0u;
  *(_OWORD *)(a1 + 3496) = 0u;
  *(_OWORD *)(a1 + 3595) = 0u;
  *(_OWORD *)(a1 + 3584) = 0u;
  *(_OWORD *)(a1 + 3568) = 0u;
  *(_OWORD *)(a1 + 3552) = 0u;
  *(_OWORD *)(a1 + 3536) = 0u;
  *(_OWORD *)(a1 + 3648) = 0u;
  *(_OWORD *)(a1 + 3632) = 0u;
  *(_OWORD *)(a1 + 3616) = 0u;
  *(_OWORD *)(a1 + 3462) = 0u;
  *(_OWORD *)(a1 + 3448) = 0u;
  *(_OWORD *)(a1 + 3432) = 0u;
  *(_OWORD *)(a1 + 3416) = 0u;
  *(_OWORD *)(a1 + 3400) = 0u;
  *(_OWORD *)(a1 + 3384) = 0u;
  *(_OWORD *)(a1 + 3368) = 0u;
  *(_OWORD *)(a1 + 3352) = 0u;
  *(_OWORD *)(a1 + 3336) = 0u;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(_OWORD *)(a1 + 3304) = 0u;
  *(_QWORD *)(a1 + 3672) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 3664) = 0;
  *(_QWORD *)(a1 + 3704) = 0;
  *(_QWORD *)(a1 + 3696) = 0;
  *(_OWORD *)(a1 + 3680) = xmmword_18F771F40;
  *(_QWORD *)(a1 + 3712) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 3720) = 0;
  *(_BYTE *)(a1 + 3832) = 0;
  *(_OWORD *)(a1 + 3840) = _Q0;
  *(_QWORD *)(a1 + 3864) = 0;
  *(_QWORD *)(a1 + 3856) = 0;
  *(_QWORD *)(a1 + 3872) = 0;
  *(_QWORD *)(a1 + 3880) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 3888) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 3904) = 0;
  *(_QWORD *)(a1 + 3896) = 0;
  *(_DWORD *)(a1 + 3912) = 0;
  *(_WORD *)(a1 + 3916) = 1;
  *(_DWORD *)(a1 + 3920) = 0;
  *(_QWORD *)(a1 + 3992) = 0;
  *(_QWORD *)(a1 + 3984) = 0;
  *(_QWORD *)(a1 + 4000) = 0;
  *(_BYTE *)(a1 + 3976) = 0;
  *(_OWORD *)(a1 + 3944) = 0u;
  *(_OWORD *)(a1 + 3960) = 0u;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(_QWORD *)(a1 + 4008) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 4016) = _Q0;
  *(_QWORD *)(a1 + 4032) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 4040) = 0;
  *(_QWORD *)(a1 + 4112) = 0;
  *(_OWORD *)(a1 + 4096) = 0u;
  *(_OWORD *)(a1 + 4080) = 0u;
  *(_OWORD *)(a1 + 4064) = 0u;
  *(_OWORD *)(a1 + 4048) = 0u;
  *(_QWORD *)(a1 + 4120) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 4128) = 0xBFF0000000000000;
  if (sub_18F672078())
  {
    *(_BYTE *)(a1 + 3168) = 0;
LABEL_12:
    v16 = 30.0;
    goto LABEL_14;
  }
  v15 = sub_18F672940();
  *(_BYTE *)(a1 + 3168) = v15 ^ 1;
  if (((v15 ^ 1) & 1) == 0)
    goto LABEL_12;
  v16 = 70.0;
LABEL_14:
  *(double *)(a1 + 3176) = v16;
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29907B0);
  v17 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v18 = *(unsigned __int8 *)(a1 + 3168);
    v19 = *(_QWORD *)(a1 + 3176);
    *(_DWORD *)buf = 67240448;
    v31 = v18;
    v32 = 2050;
    v33 = v19;
    _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_DEBUG, "CLMM,Constructor,fUseSpeedCheckForDOT,%{public}d,fMaxDistanceForTIntersectionForDOT,%{public}.1lf", buf, 0x12u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v21 = *(unsigned __int8 *)(a1 + 3168);
    v22 = *(_QWORD *)(a1 + 3176);
    v26 = 67240448;
    v27 = v21;
    v28 = 2050;
    v29 = v22;
    v23 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "CLParticleMapMatcher::CLParticleMapMatcher(CLMapGeometryPtr, const std::string &)", "CoreLocation: %s\n", v23);
    if (v23 != (char *)buf)
      free(v23);
  }
  srandom(0);
  bzero((void *)(a1 + 3728), 0x68uLL);
  return a1;
}

void sub_18F699918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  void *v29;
  void *v30;

  a21 = (void **)(v21 + 4096);
  sub_18F6B2FEC(&a21);
  a21 = (void **)(v21 + 4072);
  sub_18F6B2FEC(&a21);
  a21 = (void **)(v21 + 4048);
  sub_18F6B2F7C(&a21);
  sub_18F699A2C(v22);
  if (*(char *)(v21 + 3399) < 0)
    operator delete(*(void **)(v21 + 3376));
  sub_18F64F950(v27);
  sub_18F64F950(v26);
  sub_18F64F950(v25);
  sub_18F64F950(a11);
  *(_QWORD *)(v21 + 2976) = &off_1E298F6D8;
  sub_18F6B2EB8(v21 + 3000);
  sub_18F699A94(v24);
  sub_18F699ACC(v23);
  sub_18F699B04(a12);
  sub_18F699B04(a13);
  sub_18F6B2E08(*(_QWORD **)(v21 + 992));
  v29 = *(void **)(v21 + 960);
  if (v29)
  {
    *(_QWORD *)(v21 + 968) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(v21 + 936);
  if (v30)
  {
    *(_QWORD *)(v21 + 944) = v30;
    operator delete(v30);
  }
  sub_18F692F30(a14);
  a21 = (void **)(v21 + 888);
  sub_18F6B2D54(&a21);
  a21 = (void **)(v21 + 864);
  sub_18F6B2D54(&a21);
  sub_18F673E74(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_18F699A2C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(_QWORD *)(a1 + 160) = v2;
    operator delete(v2);
  }
  sub_18F5D6004(a1 + 64);
  return a1;
}

_QWORD *sub_18F699A64(_QWORD *a1)
{
  *a1 = &off_1E298F6D8;
  sub_18F6B2EB8((uint64_t)(a1 + 3));
  return a1;
}

uint64_t sub_18F699A94(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  sub_18F5D6004(a1 + 8);
  return a1;
}

uint64_t sub_18F699ACC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  sub_18F5D6004(a1 + 24);
  return a1;
}

uint64_t sub_18F699B04(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = a1 + 672;
  v3 = *(void **)(a1 + 760);
  if (v3)
  {
    *(_QWORD *)(a1 + 768) = v3;
    operator delete(v3);
  }
  sub_18F5D6004(v2);
  sub_18F5D6004(a1 + 648);
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  sub_18F5D6004(a1 + 8);
  return a1;
}

uint64_t sub_18F699B70(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v12;

  *(_QWORD *)a1 = &off_1E298F618;
  v12 = (void **)(a1 + 4096);
  sub_18F6B2FEC(&v12);
  v12 = (void **)(a1 + 4072);
  sub_18F6B2FEC(&v12);
  v12 = (void **)(a1 + 4048);
  sub_18F6B2F7C(&v12);
  v2 = *(void **)(a1 + 3984);
  if (v2)
  {
    *(_QWORD *)(a1 + 3992) = v2;
    operator delete(v2);
  }
  sub_18F5D6004(a1 + 3896);
  if (*(char *)(a1 + 3399) < 0)
    operator delete(*(void **)(a1 + 3376));
  sub_18F64F950((uint64_t *)(a1 + 3120));
  sub_18F64F950((uint64_t *)(a1 + 3096));
  sub_18F64F950((uint64_t *)(a1 + 3072));
  sub_18F64F950((uint64_t *)(a1 + 3048));
  *(_QWORD *)(a1 + 2976) = &off_1E298F6D8;
  sub_18F6B2EB8(a1 + 3000);
  v3 = *(void **)(a1 + 2944);
  if (v3)
  {
    *(_QWORD *)(a1 + 2952) = v3;
    operator delete(v3);
  }
  sub_18F5D6004(a1 + 2856);
  v4 = *(void **)(a1 + 2800);
  if (v4)
  {
    *(_QWORD *)(a1 + 2808) = v4;
    operator delete(v4);
  }
  sub_18F5D6004(a1 + 2712);
  v5 = *(void **)(a1 + 2608);
  if (v5)
  {
    *(_QWORD *)(a1 + 2616) = v5;
    operator delete(v5);
  }
  sub_18F5D6004(a1 + 2520);
  sub_18F5D6004(a1 + 2496);
  if (*(char *)(a1 + 2119) < 0)
    operator delete(*(void **)(a1 + 2096));
  v6 = *(void **)(a1 + 1944);
  if (v6)
  {
    *(_QWORD *)(a1 + 1952) = v6;
    operator delete(v6);
  }
  sub_18F5D6004(a1 + 1856);
  v7 = *(void **)(a1 + 1768);
  if (v7)
  {
    *(_QWORD *)(a1 + 1776) = v7;
    operator delete(v7);
  }
  sub_18F5D6004(a1 + 1680);
  sub_18F5D6004(a1 + 1656);
  if (*(char *)(a1 + 1279) < 0)
    operator delete(*(void **)(a1 + 1256));
  v8 = *(void **)(a1 + 1104);
  if (v8)
  {
    *(_QWORD *)(a1 + 1112) = v8;
    operator delete(v8);
  }
  sub_18F5D6004(a1 + 1016);
  sub_18F6B2E08(*(_QWORD **)(a1 + 992));
  v9 = *(void **)(a1 + 960);
  if (v9)
  {
    *(_QWORD *)(a1 + 968) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 936);
  if (v10)
  {
    *(_QWORD *)(a1 + 944) = v10;
    operator delete(v10);
  }
  sub_18F692F30((_QWORD *)(a1 + 912));
  v12 = (void **)(a1 + 888);
  sub_18F6B2D54(&v12);
  v12 = (void **)(a1 + 864);
  sub_18F6B2D54(&v12);
  return sub_18F673E74(a1);
}

void sub_18F699D50(uint64_t a1)
{
  sub_18F699B70(a1);
  JUMPOUT(0x194002D30);
}

uint64_t sub_18F699D74(uint64_t a1, uint64_t a2, int *a3, double a4)
{
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __n128 *v16[3];
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v20 = 0;
  v21 = 0;
  LODWORD(v22) = 0;
  WORD2(v22) = 1;
  DWORD2(v22) = 0;
  v24 = 0;
  v23 = 0uLL;
  sub_18F623A40(&v20, (uint64_t *)a2);
  BYTE4(v22) = *(_BYTE *)(a2 + 20);
  v24 = *(_QWORD *)(a2 + 48);
  v18 = 0;
  v19 = 0;
  v17[0] = (uint64_t)v17;
  v17[1] = (uint64_t)v17;
  v17[2] = 0;
  v16[0] = (__n128 *)v16;
  v16[1] = (__n128 *)v16;
  v16[2] = 0;
  *a3 = 0;
  v8 = sub_18F699EDC(*(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), &v20, a3, v17, v16, &v19, &v18, a4);
  if (*a3 > 1)
    v9 = v8;
  else
    v9 = 0;
  if ((v9 & 1) != 0)
  {
    sub_18F623A40((_QWORD *)a2, (uint64_t *)&v20);
    v10 = v23;
    *(_OWORD *)(a2 + 16) = v22;
    *(_OWORD *)(a2 + 32) = v10;
    *(_QWORD *)(a2 + 48) = v24;
    v11 = v18;
    *(_QWORD *)(a2 + 32) = v19;
    *(_QWORD *)(a2 + 40) = v11;
    *(_DWORD *)(a2 + 24) = -1082130432;
  }
  sub_18F64F950((uint64_t *)v16);
  sub_18F64F950(v17);
  v12 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v9;
}

void sub_18F699EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_18F64F950((uint64_t *)va);
  sub_18F64F950((uint64_t *)va1);
  sub_18F5D6004((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_18F699EDC(uint64_t a1, std::__shared_weak_count *a2, uint64_t **a3, int *a4, uint64_t *a5, __n128 **a6, _QWORD *a7, _QWORD *a8, double a9)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  double v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 *v31;
  char v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char v40;
  __int128 v41;
  _QWORD v42[2];
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[64];
  __int16 v57;
  uint64_t *v58;
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[80];
  uint64_t v64;
  unint64_t v65;
  double v66;
  uint64_t v67;
  std::__shared_weak_count *v68;

  v67 = a1;
  v68 = a2;
  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = 0;
  *a7 = 0;
  *a8 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v41 = _Q0;
  while (1)
  {
    sub_18F64F950(a5);
    *a4 = 0;
    v66 = 0.0;
    v42[0] = 0;
    v42[1] = 0;
    v43 = v41;
    v44 = 0;
    v45 = 0;
    v46 = 0xBFF0000000000000;
    v58 = 0;
    v59 = 0;
    memset(&v56[32], 0, 32);
    v57 = 0;
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    memset(v63, 0, 27);
    memset(&v63[32], 0, 48);
    v55 = 0u;
    memset(v56, 0, 30);
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v64 = 0;
    v65 = 0xBFF0000000000000;
    if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, _QWORD, uint64_t, uint64_t **, _QWORD, double *, double, double))(*(_QWORD *)v67 + 80))(v67, v42, a5, 0, 1, a3, *((unsigned __int8 *)a3 + 20), &v66, *((double *)a3 + 6), a9) & 1) == 0)
    {
      v22 = 0;
      v40 = 0;
      goto LABEL_23;
    }
    v21 = v66;
    if (v66 == -1.0)
    {
      v22 = 0;
LABEL_22:
      v40 = 1;
      goto LABEL_23;
    }
    v23 = a5[1];
    v24 = *a4;
    if ((uint64_t *)v23 == a5)
    {
      v25 = 0;
      v28 = a5;
    }
    else
    {
      v25 = 0;
      v26 = **a3;
      v27 = *((unsigned __int8 *)a3 + 20);
      v28 = a5;
      do
      {
        if (**(_QWORD **)(v23 + 16) == v26 && *(unsigned __int8 *)(v23 + 32) != v27)
        {
          v28 = (uint64_t *)v23;
        }
        else
        {
          *a4 = ++v24;
          v25 = v23;
        }
        v23 = *(_QWORD *)(v23 + 8);
      }
      while ((uint64_t *)v23 != a5);
    }
    a9 = a9 - v21;
    if (v24 >= 2)
    {
      if (v28 != a5)
      {
        v29 = *v28;
        *(_QWORD *)(v29 + 8) = v28[1];
        *(_QWORD *)v28[1] = v29;
        --a5[2];
        sub_18F5D6004((uint64_t)(v28 + 2));
        operator delete(v28);
      }
      v22 = 0;
      v30 = *((_QWORD *)&v53 + 1);
      *a7 = v53;
      *a8 = v30;
      a3[6] = v58;
      goto LABEL_22;
    }
    if (v24 == 1)
    {
      sub_18F623A40(a3, (uint64_t *)(v25 + 16));
      *((_BYTE *)a3 + 20) = *(_BYTE *)(v25 + 32);
      a3[6] = *(uint64_t **)(v25 + 40);
      *a4 = 0;
      v31 = (__n128 *)a5[1];
      if (v31 == (__n128 *)a5)
      {
        v22 = 1;
      }
      else
      {
        do
        {
          if (*(_QWORD *)v31[1].n128_u64[0] != **a3 || v31[2].n128_u8[0] == *((unsigned __int8 *)a3 + 20))
            sub_18F64BD58(a6, v31 + 1);
          v31 = (__n128 *)v31->n128_u64[1];
          v22 = 1;
        }
        while (v31 != (__n128 *)a5);
      }
    }
    else
    {
      sub_18F64F950(a5);
      v22 = 0;
      v40 = 1;
    }
LABEL_23:
    if (SHIBYTE(v52) < 0)
      operator delete(*((void **)&v51 + 1));
    if ((v22 & 1) == 0)
      break;
    if (++v15 == 30)
    {
      v32 = 1;
      goto LABEL_38;
    }
  }
  v32 = v40;
LABEL_38:
  v33 = v68;
  if (v68)
  {
    v34 = (unint64_t *)&v68->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return v32 & 1;
}

void sub_18F69A23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a38 < 0)
    operator delete(__p);
  sub_18F5D6004(v38 - 120);
  _Unwind_Resume(a1);
}

double sub_18F69A264(uint64_t a1, double a2)
{
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v10;
  __n128 *v11[3];
  uint64_t v12[3];
  double v13;
  double v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!*(_BYTE *)(a1 + 1008))
    return -1.0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  v19 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  sub_18F623A40(&v15, (uint64_t *)(a1 + 1016));
  LOBYTE(v18) = *(_BYTE *)(a1 + 1036);
  v22 = *(_QWORD *)(a1 + 1064);
  v13 = 0.0;
  v14 = 0.0;
  v12[0] = (uint64_t)v12;
  v12[1] = (uint64_t)v12;
  v12[2] = 0;
  v11[0] = (__n128 *)v11;
  v11[1] = (__n128 *)v11;
  v11[2] = 0;
  v10 = 0;
  v4 = sub_18F699EDC(*(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), &v15, &v10, v12, v11, &v14, &v13, a2);
  v5 = -1.0;
  if (v4 && (fabs(v14) >= 0.00003 || fabs(v13) >= 0.00003))
    v5 = sub_18F5BD064((double *)(a1 + 608), *(double *)(a1 + 1280), *(double *)(a1 + 1288), v14, v13, *(double *)(a1 + 1200));
  sub_18F64F950((uint64_t *)v11);
  sub_18F64F950(v12);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_18F69A3B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_18F64F950((uint64_t *)va);
  sub_18F64F950((uint64_t *)va1);
  sub_18F5D6004((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_18F69A3D4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  char *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  _BOOL4 v34;
  char **v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD **v77;
  _BYTE v78[56];
  __int128 v79;
  _BYTE v80[33];
  void *v81;
  __int128 v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[32];
  __int128 v88;
  __int128 v89;
  _BYTE v90[104];
  _BYTE v91[280];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[104];
  _BYTE v96[288];
  _QWORD v97[480];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[104];
  _QWORD v102[35];
  __int128 v103;
  __int128 v104;
  _QWORD v105[2];
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  _OWORD v116[2];
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  _BYTE v134[280];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  _BYTE v145[280];
  uint64_t v146;
  _BYTE v147[3840];
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 __p;
  uint64_t v157;
  _BYTE v158[280];
  __int128 v159;
  __int128 v160;
  uint64_t v161;

  v0 = MEMORY[0x1E0C80A78]();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v0;
  v161 = *MEMORY[0x1E0C80C00];
  v11 = (std::__shared_weak_count *)v8[1];
  v105[0] = *v8;
  v105[1] = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_18F68FFC8((uint64_t)&v106, (uint64_t)v105, v1);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v16 = sub_18F6B3060(v10 + 984, (uint64_t *)&v106);
  v17 = v16;
  if (v10 + 992 != v16)
  {
    if (*(int *)(v16 + 72) > 95)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v29 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v108) = 0;
        _os_log_impl(&dword_18F5B3000, v29, OS_LOG_TYPE_ERROR, "CLMM,Unexpected out of bounds array access attempt", (uint8_t *)&v108, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(&v108, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        *(_WORD *)v78 = 0;
        v30 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "void CLParticleMapMatcher::updateCandidate(const CLMapRoadPtr &, BOOL, double, double, double)", "CoreLocation: %s\n", v30);
        if (v30 != (char *)&v108)
          free(v30);
      }
    }
    else
    {
      sub_18F623A40((_QWORD *)(v16 + 56), v9);
      v18 = *(int *)(v17 + 72);
      v19 = (_QWORD *)(v17 + 56 + 8 * v18);
      v19[134] = v5;
      v19[230] = v3;
      v19[326] = v7;
      *(_DWORD *)(v17 + 72) = v18 + 1;
    }
    return;
  }
  v77 = (_QWORD **)(v10 + 984);
  memset(v78, 0, 44);
  *(_WORD *)&v78[44] = 1;
  *(_DWORD *)&v78[48] = 0;
  v79 = 0u;
  memset(v80, 0, sizeof(v80));
  HIDWORD(v83) = 0;
  v84 = 0;
  v81 = 0;
  v82 = 0u;
  LOBYTE(v83) = 0;
  *(_QWORD *)&v85 = 0;
  DWORD2(v85) = 0;
  v86 = 0u;
  v87[0] = 1;
  memset(&v87[8], 0, 24);
  __asm { FMOV            V2.2D, #-1.0 }
  v88 = _Q2;
  v89 = 0u;
  *(_QWORD *)v90 = 0xBFF0000000000000;
  *(_QWORD *)&v91[120] = 0;
  *(_DWORD *)&v91[128] = 0;
  memset(&v91[80], 0, 34);
  memset(&v91[136], 0, 75);
  memset(&v91[216], 0, 56);
  memset(v91, 0, 78);
  memset(&v90[8], 0, 96);
  *(_QWORD *)&v91[272] = 0xBFF0000000000000;
  v92 = 0u;
  *(_QWORD *)&v93 = 0xBFF0000000000000;
  *((_QWORD *)&v93 + 1) = 0xBFF0000000000000;
  v94 = 0u;
  *(_QWORD *)v95 = 0xBFF0000000000000;
  *(_QWORD *)&v96[120] = 0;
  *(_DWORD *)&v96[128] = 0;
  memset(&v96[80], 0, 34);
  memset(&v96[136], 0, 75);
  memset(&v96[216], 0, 56);
  memset(v96, 0, 78);
  memset(&v95[8], 0, 96);
  *(_OWORD *)&v96[272] = xmmword_18F772330;
  v98 = 0u;
  v99 = _Q2;
  v100 = 0u;
  *(_QWORD *)v101 = 0xBFF0000000000000;
  v102[15] = 0;
  LODWORD(v102[16]) = 0;
  memset(&v102[10], 0, 34);
  memset(&v102[17], 0, 75);
  memset(&v102[27], 0, 56);
  memset(v102, 0, 78);
  memset(&v101[8], 0, 96);
  v102[34] = 0xBFF0000000000000;
  *(_QWORD *)&v104 = 0;
  v103 = 0u;
  *((_QWORD *)&v104 + 1) = 0x3FF0000000000000;
  bzero(v97, 0xC00uLL);
  sub_18F623A40(v78, v9);
  v97[0] = v5;
  v97[96] = v3;
  v97[192] = v7;
  *(_DWORD *)&v78[16] = 1;
  v108 = v106;
  v109 = v107;
  v110 = *(_OWORD *)v78;
  if (*(_QWORD *)&v78[8])
  {
    v25 = (unint64_t *)(*(_QWORD *)&v78[8] + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v111 = *(_QWORD *)&v78[16];
  v112 = *(_OWORD *)&v78[24];
  if (*(_QWORD *)&v78[32])
  {
    v27 = (unint64_t *)(*(_QWORD *)&v78[32] + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v113 = *(_OWORD *)&v78[40];
  v114 = v79;
  v116[0] = *(_OWORD *)&v80[8];
  *(_OWORD *)((char *)v116 + 9) = *(_OWORD *)&v80[17];
  v115 = *(_QWORD *)v80;
  v117 = 0uLL;
  v118 = 0;
  sub_18F692CBC(&v117, v81, v82, 0x8E38E38E38E38E39 * ((uint64_t)(v82 - (_QWORD)v81) >> 3));
  v119 = v83;
  v120 = v84;
  v121 = v85;
  v122 = v86;
  v126 = v89;
  v125 = v88;
  v123 = *(_OWORD *)v87;
  v124 = *(_OWORD *)&v87[16];
  v131 = *(_OWORD *)&v90[64];
  v130 = *(_OWORD *)&v90[48];
  v129 = *(_OWORD *)&v90[32];
  v127 = *(_OWORD *)v90;
  v128 = *(_OWORD *)&v90[16];
  if ((v90[103] & 0x80000000) != 0)
  {
    sub_18F5C6990(&v132, *(void **)&v90[80], *(unint64_t *)&v90[88]);
  }
  else
  {
    v132 = *(_OWORD *)&v90[80];
    v133 = *(_QWORD *)&v90[96];
  }
  memcpy(v134, v91, sizeof(v134));
  v139 = *(_OWORD *)&v95[16];
  v140 = *(_OWORD *)&v95[32];
  v141 = *(_OWORD *)&v95[48];
  v142 = *(_OWORD *)&v95[64];
  v135 = v92;
  v136 = v93;
  v137 = v94;
  v138 = *(_OWORD *)v95;
  if ((v95[103] & 0x80000000) != 0)
  {
    sub_18F5C6990(&v143, *(void **)&v95[80], *(unint64_t *)&v95[88]);
  }
  else
  {
    v143 = *(_OWORD *)&v95[80];
    v144 = *(_QWORD *)&v95[96];
  }
  memcpy(v145, v96, sizeof(v145));
  v146 = *(_QWORD *)&v96[280];
  memcpy(v147, v97, sizeof(v147));
  v152 = *(_OWORD *)&v101[16];
  v153 = *(_OWORD *)&v101[32];
  v154 = *(_OWORD *)&v101[48];
  v155 = *(_OWORD *)&v101[64];
  v148 = v98;
  v149 = v99;
  v150 = v100;
  v151 = *(_OWORD *)v101;
  if ((v101[103] & 0x80000000) != 0)
  {
    sub_18F5C6990(&__p, *(void **)&v101[80], *(unint64_t *)&v101[88]);
  }
  else
  {
    __p = *(_OWORD *)&v101[80];
    v157 = *(_QWORD *)&v101[96];
  }
  memcpy(v158, v102, sizeof(v158));
  v160 = v104;
  v159 = v103;
  v31 = *(uint64_t **)v17;
  if (!*(_QWORD *)v17)
  {
    v35 = (char **)v17;
    v32 = (uint64_t *)v17;
    goto LABEL_60;
  }
  do
  {
    while (1)
    {
      v32 = v31;
      v33 = v31[4];
      if ((_QWORD)v108 != v33)
      {
        if ((uint64_t)v108 >= v33)
        {
          if (v33 >= (uint64_t)v108)
            goto LABEL_63;
          goto LABEL_57;
        }
        goto LABEL_49;
      }
      if (!(_BYTE)v109 || !*((_BYTE *)v32 + 48))
        break;
      if (*((_QWORD *)&v108 + 1) >= (unint64_t)v32[5])
        goto LABEL_51;
LABEL_49:
      v31 = (uint64_t *)*v32;
      v35 = (char **)v32;
      if (!*v32)
        goto LABEL_60;
    }
    if (*((_BYTE *)v32 + 48))
      v34 = 0;
    else
      v34 = (_BYTE)v109 != 0;
    if (v34)
      goto LABEL_49;
LABEL_51:
    if (*((_BYTE *)v32 + 48) && (_BYTE)v109)
    {
      if ((unint64_t)v32[5] >= *((_QWORD *)&v108 + 1))
        goto LABEL_63;
    }
    else if (!*((_BYTE *)v32 + 48) || (_BYTE)v109)
    {
      goto LABEL_63;
    }
LABEL_57:
    v31 = (uint64_t *)v32[1];
  }
  while (v31);
  v35 = (char **)(v32 + 1);
LABEL_60:
  v36 = (char *)operator new(0x1538uLL);
  v37 = v111;
  *((_QWORD *)v36 + 6) = v109;
  *((_OWORD *)v36 + 2) = v108;
  v38 = v110;
  v110 = 0uLL;
  *(_OWORD *)(v36 + 56) = v38;
  *((_QWORD *)v36 + 9) = v37;
  v39 = v112;
  v112 = 0uLL;
  v40 = v113;
  v41 = v114;
  *((_OWORD *)v36 + 5) = v39;
  *((_OWORD *)v36 + 6) = v40;
  *((_OWORD *)v36 + 7) = v41;
  *((_QWORD *)v36 + 16) = v115;
  *(_OWORD *)(v36 + 145) = *(_OWORD *)((char *)v116 + 9);
  *(_OWORD *)(v36 + 136) = v116[0];
  *(_OWORD *)(v36 + 168) = v117;
  v42 = v118;
  v118 = 0;
  v117 = 0uLL;
  v36[200] = v120;
  v43 = v119;
  *((_QWORD *)v36 + 23) = v42;
  *((_QWORD *)v36 + 24) = v43;
  v44 = v122;
  v45 = v123;
  *((_OWORD *)v36 + 13) = v121;
  *((_OWORD *)v36 + 14) = v44;
  v46 = v124;
  v47 = v126;
  v48 = v127;
  *((_OWORD *)v36 + 17) = v125;
  *((_OWORD *)v36 + 18) = v47;
  *((_OWORD *)v36 + 15) = v45;
  *((_OWORD *)v36 + 16) = v46;
  v49 = v128;
  v50 = v130;
  v51 = v131;
  *((_OWORD *)v36 + 21) = v129;
  *((_OWORD *)v36 + 22) = v50;
  *((_OWORD *)v36 + 19) = v48;
  *((_OWORD *)v36 + 20) = v49;
  v52 = v132;
  *((_QWORD *)v36 + 50) = v133;
  *((_OWORD *)v36 + 23) = v51;
  *((_OWORD *)v36 + 24) = v52;
  v132 = 0uLL;
  v133 = 0;
  memcpy(v36 + 408, v134, 0x118uLL);
  v53 = v140;
  *((_OWORD *)v36 + 47) = v139;
  *((_OWORD *)v36 + 48) = v53;
  v54 = v142;
  *((_OWORD *)v36 + 49) = v141;
  *((_OWORD *)v36 + 50) = v54;
  v55 = v136;
  *((_OWORD *)v36 + 43) = v135;
  *((_OWORD *)v36 + 44) = v55;
  v56 = v138;
  *((_OWORD *)v36 + 45) = v137;
  *((_OWORD *)v36 + 46) = v56;
  v57 = v143;
  *((_QWORD *)v36 + 104) = v144;
  *((_OWORD *)v36 + 51) = v57;
  v144 = 0;
  v143 = 0uLL;
  memcpy(v36 + 840, v145, 0x118uLL);
  *((_QWORD *)v36 + 140) = v146;
  memcpy(v36 + 1128, v147, 0xF00uLL);
  v58 = v153;
  *(_OWORD *)(v36 + 5032) = v152;
  *(_OWORD *)(v36 + 5048) = v58;
  v59 = v155;
  *(_OWORD *)(v36 + 5064) = v154;
  *(_OWORD *)(v36 + 5080) = v59;
  v60 = v149;
  *(_OWORD *)(v36 + 4968) = v148;
  *(_OWORD *)(v36 + 4984) = v60;
  v61 = v151;
  *(_OWORD *)(v36 + 5000) = v150;
  *(_OWORD *)(v36 + 5016) = v61;
  v62 = __p;
  *((_QWORD *)v36 + 639) = v157;
  *(_OWORD *)(v36 + 5096) = v62;
  v157 = 0;
  __p = 0uLL;
  memcpy(v36 + 5120, v102, 0x118uLL);
  v63 = v104;
  *(_OWORD *)(v36 + 5400) = v103;
  *(_OWORD *)(v36 + 5416) = v63;
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 1) = 0;
  *((_QWORD *)v36 + 2) = v32;
  *v35 = v36;
  v64 = (_QWORD *)**v77;
  if (v64)
  {
    *v77 = v64;
    v36 = *v35;
  }
  sub_18F62A74C(*(uint64_t **)v17, (uint64_t *)v36);
  ++*(_QWORD *)(v10 + 1000);
LABEL_63:
  if (SHIBYTE(v157) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v144) < 0)
    operator delete((void *)v143);
  if (SHIBYTE(v133) < 0)
    operator delete((void *)v132);
  if ((_QWORD)v117)
  {
    *((_QWORD *)&v117 + 1) = v117;
    operator delete((void *)v117);
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  if (*((_QWORD *)&v110 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if ((v101[103] & 0x80000000) != 0)
    operator delete(*(void **)&v101[80]);
  if ((v95[103] & 0x80000000) != 0)
    operator delete(*(void **)&v95[80]);
  if ((v90[103] & 0x80000000) != 0)
    operator delete(*(void **)&v90[80]);
  if (v81)
  {
    *(_QWORD *)&v82 = v81;
    operator delete(v81);
  }
  v71 = *(std::__shared_weak_count **)&v78[32];
  if (*(_QWORD *)&v78[32])
  {
    v72 = (unint64_t *)(*(_QWORD *)&v78[32] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *(std::__shared_weak_count **)&v78[8];
  if (*(_QWORD *)&v78[8])
  {
    v75 = (unint64_t *)(*(_QWORD *)&v78[8] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
}

void sub_18F69AFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_18F6B23F4(a9);
  sub_18F692600(a14);
  sub_18F5D6004(a15);
  sub_18F69B104((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F69B08C(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 5087) < 0)
    operator delete(*(void **)(a1 + 5064));
  if (*(char *)(a1 + 807) < 0)
    operator delete(*(void **)(a1 + 784));
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  sub_18F5D6004(a1 + 48);
  sub_18F5D6004(a1 + 24);
  return a1;
}

uint64_t sub_18F69B104(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 5063) < 0)
    operator delete(*(void **)(a1 + 5040));
  if (*(char *)(a1 + 783) < 0)
    operator delete(*(void **)(a1 + 760));
  if (*(char *)(a1 + 351) < 0)
    operator delete(*(void **)(a1 + 328));
  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  sub_18F5D6004(a1 + 24);
  return sub_18F5D6004(a1);
}

void sub_18F69B170(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[2];

  v4 = *(std::__shared_weak_count **)(a1 + 8);
  v9[0] = *(_QWORD *)a1;
  v9[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_18F68FFC8(a2, (uint64_t)v9, *(_BYTE *)(a1 + 20));
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_18F69B204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F69B218(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  sub_18F623A40((_QWORD *)a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 56) = v6;
  if (a1 != a2)
    sub_18F692DD0((char *)(a1 + 88), *(char **)(a2 + 88), *(_QWORD *)(a2 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3));
  return a1;
}

uint64_t sub_18F69B290(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  NSObject *v25;
  char *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  BOOL v32;
  int v33;
  double v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  double v64;
  double v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  char v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  NSObject *v89;
  uint64_t *v90;
  int v91;
  uint64_t **v92;
  __int128 v93;
  __int128 v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  int v108;
  int v109;
  NSObject *v110;
  int v111;
  uint64_t v112;
  int v113;
  int v114;
  double v115;
  double v116;
  double *v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  double v123;
  double v124;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  int v132;
  char v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  NSObject *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  char **v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  char *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  char *v163;
  char *v164;
  char *v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  char *v174;
  NSObject *v175;
  uint64_t v176;
  uint64_t v177;
  NSObject *v178;
  uint64_t v179;
  void **v180;
  _QWORD *v181;
  float *v182;
  double v183;
  uint64_t v184;
  double v185;
  float v186;
  float *v187;
  float *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  float *v194;
  int v195;
  uint64_t v196;
  double v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  NSObject *v202;
  NSObject *v203;
  NSObject *v204;
  NSObject *v205;
  NSObject *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  int v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  int v216;
  int v217;
  int v218;
  int v219;
  uint64_t v220;
  double v221;
  int v222;
  double v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  int v228;
  int v229;
  int v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  _QWORD v238[11];
  void *v239;
  _BYTE *v240;
  uint64_t v241;
  _BYTE v242[32];
  _BYTE v243[24];
  _BYTE buf[32];
  _OWORD v245[2];
  __int128 v246;
  char v247;
  void *__p;
  void *v249;
  uint64_t v250;
  uint64_t v251;

  v251 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  v236 = *(_QWORD *)(a1 + 8);
  v237 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(double *)(a1 + 2064);
  v6 = 0.0;
  if (v5 >= 0.0)
  {
    if (*(double *)(a1 + 2152) > 0.0)
      v6 = *(double *)(a1 + 2152);
    else
      v6 = 0.0;
  }
  v7 = *(double *)(a1 + 1224);
  if (v7 >= 0.0)
  {
    v8 = *(double *)(a1 + 1640);
    if (v5 >= 0.0 && v8 < 2.2)
      v7 = (v5 + v7) * 0.5;
    *(double *)(a1 + 1792) = v7;
  }
  else
  {
    *(_QWORD *)(a1 + 1792) = 0;
    v8 = *(double *)(a1 + 1640);
    v7 = 0.0;
  }
  v9 = v8 * v7;
  if (*(double *)(a1 + 2048) <= 0.0 || v8 >= 2.2)
  {
    *(double *)(a1 + 1800) = v9;
    v10 = -1.0;
  }
  else
  {
    v10 = sub_18F5BD064((double *)(a1 + 608), *(double *)(a1 + 1184), *(double *)(a1 + 1192), *(double *)(a1 + 2024), *(double *)(a1 + 2032), *(double *)(a1 + 1200));
    if (v10 > 300.0)
    {
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_82;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v11 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        v12 = *(_QWORD *)(a1 + 1640);
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = v10;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v12;
        _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_ERROR, "CLMM, Position jump(m),%{public}.1lf,dT(s),%{public}.1lf", buf, 0x16u);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_82;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v13 = *(_QWORD *)(a1 + 1640);
      LODWORD(v238[0]) = 134349312;
      *(double *)((char *)v238 + 4) = v10;
      WORD2(v238[1]) = 2050;
      *(_QWORD *)((char *)&v238[1] + 6) = v13;
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v14);
LABEL_419:
      if (v14 != buf)
        free(v14);
LABEL_82:
      v41 = 0;
      goto LABEL_83;
    }
    *(double *)(a1 + 1800) = v9;
    if (v10 < 0.0 || *(double *)(a1 + 1792) <= 0.0 || *(_BYTE *)(a1 + 1356))
    {
      if (v10 >= 0.0 && !*(_BYTE *)(a1 + 1356))
        *(double *)(a1 + 1800) = v10;
    }
    else
    {
      *(double *)(a1 + 1800) = (v9 + v10) * 0.5;
    }
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v15 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(_QWORD *)(a1 + 1136);
      v17 = *(_QWORD *)(a1 + 1800);
      *(_DWORD *)buf = 134349824;
      *(_QWORD *)&buf[4] = v16;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v17;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = v9;
      LOWORD(v245[0]) = 2050;
      *(double *)((char *)v245 + 2) = v10;
      _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,predictionAndUpdate,distance,%{public}.1lf,distBasedOnSpeed,%{public}.1lf,distBasedOnPos,%{public}.1lf", buf, 0x2Au);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v207 = *(_QWORD *)(a1 + 1136);
      v208 = *(_QWORD *)(a1 + 1800);
      LODWORD(v238[0]) = 134349824;
      *(_QWORD *)((char *)v238 + 4) = v207;
      WORD2(v238[1]) = 2050;
      *(_QWORD *)((char *)&v238[1] + 6) = v208;
      HIWORD(v238[2]) = 2050;
      *(double *)&v238[3] = v9;
      LOWORD(v238[4]) = 2050;
      *(double *)((char *)&v238[4] + 2) = v10;
      v209 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v209);
      if (v209 != buf)
        free(v209);
    }
  }
  *(_QWORD *)(a1 + 1608) = 0xBFF0000000000000;
  v18 = *(_QWORD *)(a1 + 872);
  v19 = *(_QWORD *)(a1 + 864);
  v20 = v18 - v19;
  if (v18 == v19)
  {
LABEL_366:
    v41 = 1;
    goto LABEL_367;
  }
  v21 = *(double *)(a1 + 1800);
  v22 = *(double *)(a1 + 1640);
  v23 = v22 * v22;
  if (*(_BYTE *)(a1 + 1356) && v22 > 4.9)
  {
    v24 = 24.01;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v25 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = v23;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = 0x4038028F5C28F5C4;
        _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_DEBUG, "CLMM,dT2 limited,from,%{public}.1lf,to,%{public}.1lf", buf, 0x16u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        LODWORD(v238[0]) = 134349312;
        *(double *)((char *)v238 + 4) = v23;
        WORD2(v238[1]) = 2050;
        *(_QWORD *)((char *)&v238[1] + 6) = 0x4038028F5C28F5C4;
        v26 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v26);
        if (v26 != buf)
          free(v26);
      }
    }
  }
  else
  {
    v24 = v22 * v22;
  }
  v27 = v24 * ((v6 * v6 + *(double *)(a1 + 1312) * *(double *)(a1 + 1312)) * 0.25);
  *(double *)(a1 + 1808) = v27;
  v28 = *(double *)(a1 + 1792);
  v29 = v24 * 3.0;
  if (v28 >= 8.05555556)
    v29 = v24;
  *(double *)(a1 + 1816) = v29;
  v30 = v24 * (v28 * v28 * 0.25);
  *(double *)(a1 + 1824) = v30;
  *(double *)(a1 + 1832) = sqrt(v27 + v29 + v30);
  v31 = *(double *)(a1 + 1640);
  if (v31 <= 0.0
    || (v31 > 4.9 ? (v32 = *(_BYTE *)(a1 + 1356) == 0) : (v32 = 0), !v32 ? (v33 = 0) : (v33 = 1), v31 > 75.0 || v33))
  {
    if (!*(_BYTE *)(a1 + 96))
      goto LABEL_82;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v39 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v40 = *(_QWORD *)(a1 + 1640);
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v40;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = 0x401399999999999ALL;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = 0x4052C00000000000;
      _os_log_impl(&dword_18F5B3000, v39, OS_LOG_TYPE_ERROR, "#Warning CLMM,unexpected,dT,%{public}.1lf,minMoreThan,0,threshold1,%{public}.1lf,threshold2,%{public}.1lf", buf, 0x20u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_82;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v210 = *(_QWORD *)(a1 + 1640);
    LODWORD(v238[0]) = 134349568;
    *(_QWORD *)((char *)v238 + 4) = v210;
    WORD2(v238[1]) = 2050;
    *(_QWORD *)((char *)&v238[1] + 6) = 0x401399999999999ALL;
    HIWORD(v238[2]) = 2050;
    v238[3] = 0x4052C00000000000;
    v14 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v14);
    goto LABEL_419;
  }
  v232 = (uint64_t *)(a1 + 864);
  if (*(_BYTE *)(a1 + 2688))
  {
    v34 = sub_18F5BD064((double *)(a1 + 608), *(double *)(a1 + 2120), *(double *)(a1 + 2128), *(double *)(a1 + 2744), *(double *)(a1 + 2752), *(double *)(a1 + 1200));
    v35 = *(_DWORD *)(a1 + 2824);
    v36 = 4 * v35;
    if (v35 >= 1)
    {
      if (v36 <= 1)
        v37 = 1;
      else
        v37 = 4 * v35;
      v38 = *(_QWORD *)(a1 + 872);
      do
      {
        if (v38 >= *(_QWORD *)(a1 + 880))
        {
          v38 = sub_18F6B3118(v232, a1 + 2712);
        }
        else
        {
          sub_18F6B323C(a1 + 880, v38, a1 + 2712);
          v38 += 112;
          *(_QWORD *)(a1 + 872) = v38;
        }
        *(_QWORD *)(a1 + 872) = v38;
        --v37;
      }
      while (v37);
    }
  }
  else
  {
    v36 = 0;
    v34 = 0.0;
  }
  v220 = v20;
  v222 = v36;
  if (*(_BYTE *)(a1 + 2232))
  {
    v42 = a1 + 3048;
    v43 = a1 + 3096;
    memset(buf, 0, 20);
    *(_WORD *)&buf[20] = 1;
    *(_DWORD *)&buf[24] = 0;
    memset(v245, 0, 24);
    sub_18F623A40(buf, (uint64_t *)(a1 + 1856));
    buf[20] = *(_BYTE *)(a1 + 1876);
    *(_QWORD *)&v245[1] = *(_QWORD *)(a1 + 1904);
    sub_18F64F950((uint64_t *)(a1 + 3048));
    sub_18F64F950((uint64_t *)(a1 + 3096));
    LODWORD(v233) = 0;
    v44 = sub_18F699EDC(*(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (uint64_t **)buf, (int *)&v233, (uint64_t *)(a1 + 3048), (__n128 **)(a1 + 3096), v238, v242, 80.0);
    v45 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v46 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if ((v44 & 1) == 0)
      goto LABEL_411;
    v227 = a1 + 1856;
    v48 = *(_QWORD *)(a1 + 3104);
    if (v48 == v43)
    {
      v49 = 0;
    }
    else
    {
      v49 = 0;
      do
      {
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&buf[24] = 0;
        v249 = 0;
        v250 = 0;
        __p = 0;
        memset(v245, 0, sizeof(v245));
        v246 = 0u;
        v247 = 0;
        sub_18F623A40(buf, (uint64_t *)(v48 + 16));
        *(_QWORD *)&v245[1] = *(_QWORD *)(v48 + 40);
        buf[20] = *(_BYTE *)(v48 + 32);
        v49 += 6;
        v50 = *(_QWORD *)(a1 + 872);
        v51 = 6;
        do
        {
          if (v50 >= *(_QWORD *)(a1 + 880))
          {
            v50 = sub_18F6B3118(v232, (uint64_t)buf);
          }
          else
          {
            sub_18F6B323C(a1 + 880, v50, (uint64_t)buf);
            v50 += 112;
            *(_QWORD *)(a1 + 872) = v50;
          }
          *(_QWORD *)(a1 + 872) = v50;
          --v51;
        }
        while (v51);
        if (__p)
        {
          v249 = __p;
          operator delete(__p);
        }
        v52 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v53 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v48 = *(_QWORD *)(v48 + 8);
      }
      while (v48 != v43);
    }
    v56 = *(_QWORD *)(a1 + 3056);
    v230 = v49;
    if (v56 != v42)
    {
      v230 = v49;
      do
      {
        v230 += 6;
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&buf[24] = 0;
        v249 = 0;
        v250 = 0;
        __p = 0;
        memset(v245, 0, sizeof(v245));
        v246 = 0u;
        v247 = 0;
        sub_18F623A40(buf, (uint64_t *)(v56 + 16));
        *(_QWORD *)&v245[1] = *(_QWORD *)(v56 + 40);
        buf[20] = *(_BYTE *)(v56 + 32);
        v57 = *(_QWORD *)(a1 + 872);
        v58 = 6;
        do
        {
          if (v57 >= *(_QWORD *)(a1 + 880))
          {
            v57 = sub_18F6B3118(v232, (uint64_t)buf);
          }
          else
          {
            sub_18F6B323C(a1 + 880, v57, (uint64_t)buf);
            v57 += 112;
            *(_QWORD *)(a1 + 872) = v57;
          }
          *(_QWORD *)(a1 + 872) = v57;
          --v58;
        }
        while (v58);
        if (__p)
        {
          v249 = __p;
          operator delete(__p);
        }
        v59 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v60 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v56 = *(_QWORD *)(v56 + 8);
      }
      while (v56 != v42);
    }
    v55 = v49 + v222 + v230;
    if (*(_BYTE *)(a1 + 2232))
    {
      v62 = *(_QWORD *)(a1 + 872);
      v63 = 12;
      do
      {
        if (v62 >= *(_QWORD *)(a1 + 880))
        {
          v62 = sub_18F6B3118(v232, v227);
        }
        else
        {
          sub_18F6B323C(a1 + 880, v62, v227);
          v62 += 112;
          *(_QWORD *)(a1 + 872) = v62;
        }
        *(_QWORD *)(a1 + 872) = v62;
        --v63;
      }
      while (v63);
      v55 += 12;
      v217 = 12;
    }
    else
    {
      v217 = 0;
    }
  }
  else
  {
    v230 = 0;
    v217 = 0;
    v55 = v36;
  }
  if (*(_BYTE *)(a1 + 114)
    && ((v64 = *(double *)(a1 + 88), v65 = vabdd_f64(*(double *)(a1 + 1152), v64), v64 >= 0.0)
      ? (v66 = v65 <= 6.0)
      : (v66 = 0),
        v66 && (v67 = *(_QWORD *)(a1 + 4048), v224 = *(_QWORD *)(a1 + 4056), v67 != v224)))
  {
    v226 = 0;
    do
    {
      v68 = *(_QWORD *)(v67 + 8);
      *(_QWORD *)v242 = *(_QWORD *)v67;
      *(_QWORD *)&v242[8] = v68;
      if (v68)
      {
        v69 = (unint64_t *)(v68 + 8);
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      v71 = *(_OWORD *)(v67 + 16);
      v72 = *(_OWORD *)(v67 + 32);
      *(_QWORD *)&v243[16] = *(_QWORD *)(v67 + 48);
      *(_OWORD *)&v242[16] = v71;
      *(_OWORD *)v243 = v72;
      v226 += 2;
      v228 = v55 + 2;
      v73 = 1;
      do
      {
        v74 = v73;
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&buf[24] = 0;
        v249 = 0;
        v250 = 0;
        __p = 0;
        memset(v245, 0, sizeof(v245));
        v246 = 0u;
        v247 = 0;
        sub_18F623A40(buf, (uint64_t *)v242);
        *(_OWORD *)&buf[16] = *(_OWORD *)&v242[16];
        v245[0] = *(_OWORD *)v243;
        *(_QWORD *)&v245[1] = *(_QWORD *)&v243[16];
        v75 = *(_QWORD *)(a1 + 872);
        if (v75 >= *(_QWORD *)(a1 + 880))
        {
          v76 = sub_18F6B3118(v232, (uint64_t)buf);
        }
        else
        {
          sub_18F6B323C(a1 + 880, *(_QWORD *)(a1 + 872), (uint64_t)buf);
          v76 = v75 + 112;
          *(_QWORD *)(a1 + 872) = v75 + 112;
        }
        *(_QWORD *)(a1 + 872) = v76;
        if (__p)
        {
          v249 = __p;
          operator delete(__p);
        }
        v77 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v78 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v73 = 0;
      }
      while ((v74 & 1) != 0);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v80 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v81 = *(_QWORD *)(a1 + 1136);
        v82 = **(_QWORD **)v242;
        *(_DWORD *)buf = 134350337;
        *(_QWORD *)&buf[4] = v81;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = *(_QWORD *)v243;
        *(_WORD *)&buf[22] = 2049;
        *(_QWORD *)&buf[24] = *(_QWORD *)&v243[8];
        LOWORD(v245[0]) = 2050;
        *(double *)((char *)v245 + 2) = *(float *)&v242[24];
        WORD5(v245[0]) = 2049;
        *(_QWORD *)((char *)v245 + 12) = v82;
        WORD2(v245[1]) = 1026;
        *(_DWORD *)((char *)&v245[1] + 6) = v242[20];
        _os_log_impl(&dword_18F5B3000, v80, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHint,add particle,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,rseg,%{private}lld,fwd,%{public}d", buf, 0x3Au);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v86 = *(_QWORD *)(a1 + 1136);
        v87 = **(_QWORD **)v242;
        LODWORD(v238[0]) = 134350337;
        *(_QWORD *)((char *)v238 + 4) = v86;
        WORD2(v238[1]) = 2049;
        *(_QWORD *)((char *)&v238[1] + 6) = *(_QWORD *)v243;
        HIWORD(v238[2]) = 2049;
        v238[3] = *(_QWORD *)&v243[8];
        LOWORD(v238[4]) = 2050;
        *(double *)((char *)&v238[4] + 2) = *(float *)&v242[24];
        WORD1(v238[5]) = 2049;
        *(_QWORD *)((char *)&v238[5] + 4) = v87;
        WORD2(v238[6]) = 1026;
        *(_DWORD *)((char *)&v238[6] + 6) = v242[20];
        v88 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v88);
        if (v88 != buf)
          free(v88);
      }
      v83 = *(std::__shared_weak_count **)&v242[8];
      if (*(_QWORD *)&v242[8])
      {
        v84 = (unint64_t *)(*(_QWORD *)&v242[8] + 8);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v67 += 56;
      v55 = v228;
    }
    while (v67 != v224);
  }
  else
  {
    v226 = 0;
  }
  v229 = v55;
  if (*(_BYTE *)(a1 + 2684))
  {
    v233 = (uint64_t)&v233;
    v234 = &v233;
    v235 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t *, double))(*(_QWORD *)v236 + 64))(v236, &v233, 40.0) & 1) == 0
      && *(_BYTE *)(a1 + 96))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v89 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v89, OS_LOG_TYPE_DEBUG, "CLMM,railway search,roadsWithinDistance returned false", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        LOWORD(v238[0]) = 0;
        v214 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v214);
        if (v214 != buf)
          free(v214);
      }
    }
    if (!v235 || (v90 = v234, v234 == &v233))
    {
      v91 = 0;
    }
    else
    {
      v91 = 0;
      do
      {
        v92 = (uint64_t **)(v90 + 2);
        if (*(_BYTE *)(v90[2] + 17))
        {
          memset(v238, 0, 20);
          WORD2(v238[2]) = 1;
          LODWORD(v238[3]) = 0;
          v240 = 0;
          v241 = 0;
          v239 = 0;
          memset(&v238[4], 0, 49);
          sub_18F623A40(v238, v90 + 2);
          v93 = *((_OWORD *)v90 + 2);
          v94 = *((_OWORD *)v90 + 3);
          v238[6] = v90[8];
          *(_OWORD *)&v238[2] = v93;
          *(_OWORD *)&v238[4] = v94;
          v95 = *(_QWORD *)(a1 + 872);
          if (v95 >= *(_QWORD *)(a1 + 880))
          {
            v96 = sub_18F6B3118(v232, (uint64_t)v238);
          }
          else
          {
            sub_18F6B323C(a1 + 880, *(_QWORD *)(a1 + 872), (uint64_t)v238);
            v96 = v95 + 112;
            *(_QWORD *)(a1 + 872) = v96;
          }
          *(_QWORD *)(a1 + 872) = v96;
          if (v96 >= *(_QWORD *)(a1 + 880))
          {
            v97 = sub_18F6B3118(v232, (uint64_t)v238);
          }
          else
          {
            sub_18F6B323C(a1 + 880, v96, (uint64_t)v238);
            v97 = v96 + 112;
            *(_QWORD *)(a1 + 872) = v96 + 112;
          }
          *(_QWORD *)(a1 + 872) = v97;
          if (*(_BYTE *)(a1 + 96))
          {
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            v98 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              v99 = *(_QWORD *)(a1 + 1136);
              v100 = **v92;
              *(_DWORD *)buf = 134350081;
              *(_QWORD *)&buf[4] = v99;
              *(_WORD *)&buf[12] = 2049;
              *(_QWORD *)&buf[14] = v238[4];
              *(_WORD *)&buf[22] = 2049;
              *(_QWORD *)&buf[24] = v238[5];
              LOWORD(v245[0]) = 2050;
              *(double *)((char *)v245 + 2) = *(float *)&v238[3];
              WORD5(v245[0]) = 2049;
              *(_QWORD *)((char *)v245 + 12) = v100;
              _os_log_impl(&dword_18F5B3000, v98, OS_LOG_TYPE_DEBUG, "CLMM,railwayParticle,timestamp,%{public}.3lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.3lf,rseg,%{private}lld", buf, 0x34u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              v104 = *(_QWORD *)(a1 + 1136);
              v105 = **v92;
              *(_DWORD *)v242 = 134350081;
              *(_QWORD *)&v242[4] = v104;
              *(_WORD *)&v242[12] = 2049;
              *(_QWORD *)&v242[14] = v238[4];
              *(_WORD *)&v242[22] = 2049;
              *(_QWORD *)&v242[24] = v238[5];
              *(_WORD *)v243 = 2050;
              *(double *)&v243[2] = *(float *)&v238[3];
              *(_WORD *)&v243[10] = 2049;
              *(_QWORD *)&v243[12] = v105;
              v106 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v106);
              if (v106 != buf)
                free(v106);
            }
          }
          if (v239)
          {
            v240 = v239;
            operator delete(v239);
          }
          v101 = (std::__shared_weak_count *)v238[1];
          if (v238[1])
          {
            v102 = (unint64_t *)(v238[1] + 8);
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
          v91 += 2;
        }
        v90 = (uint64_t *)v90[1];
      }
      while (v90 != &v233);
    }
    sub_18F64F950(&v233);
  }
  else
  {
    v91 = 0;
  }
  if (*(_BYTE *)(a1 + 2512) && *(_BYTE *)(a1 + 2233))
  {
    v107 = *(_QWORD *)(a1 + 872);
    v108 = 4;
    do
    {
      if (v107 >= *(_QWORD *)(a1 + 880))
      {
        v107 = sub_18F6B3118(v232, a1 + 2520);
      }
      else
      {
        sub_18F6B323C(a1 + 880, v107, a1 + 2520);
        v107 += 112;
        *(_QWORD *)(a1 + 872) = v107;
      }
      *(_QWORD *)(a1 + 872) = v107;
      --v108;
    }
    while (v108);
    v229 += 4;
    v109 = 4;
  }
  else
  {
    v109 = 0;
  }
  v225 = 0x6DB6DB6DB6DB6DB7 * (v220 >> 4);
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v110 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v111 = -1227133513 * ((*(_QWORD *)(a1 + 872) - *(_QWORD *)(a1 + 864)) >> 4);
      *(_DWORD *)buf = 67242240;
      *(_DWORD *)&buf[4] = v111;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = -1227133513 * (v220 >> 4);
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&buf[16] = v229;
      *(_WORD *)&buf[20] = 1026;
      *(_DWORD *)&buf[22] = v222;
      *(_WORD *)&buf[26] = 1026;
      *(_DWORD *)&buf[28] = 0;
      LOWORD(v245[0]) = 1026;
      *(_DWORD *)((char *)v245 + 2) = v230;
      WORD3(v245[0]) = 1026;
      DWORD2(v245[0]) = v217;
      WORD6(v245[0]) = 1026;
      *(_DWORD *)((char *)v245 + 14) = v109;
      WORD1(v245[1]) = 1026;
      DWORD1(v245[1]) = v226;
      _os_log_impl(&dword_18F5B3000, v110, OS_LOG_TYPE_DEBUG, "CLMM,prediction,NrParticles,%{public}d,NrStandard,%{public}d,NrNew,%{public}d,NrPriorIntersectionParticles,%{public}d,NrNewAlternateCandidateNoiseParticles,%{public}d,NrNewFwdIntersectionParticles,%{public}d,NrNewBiasedToPrior,%{public}d,NrNewAmbiguous,%{public}d,NrNewRouteParticles,%{public}d", buf, 0x38u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v211 = -1227133513 * ((*(_QWORD *)(a1 + 872) - *(_QWORD *)(a1 + 864)) >> 4);
      LODWORD(v238[0]) = 67242240;
      HIDWORD(v238[0]) = v211;
      LOWORD(v238[1]) = 1026;
      *(_DWORD *)((char *)&v238[1] + 2) = -1227133513 * (v220 >> 4);
      HIWORD(v238[1]) = 1026;
      LODWORD(v238[2]) = v229;
      WORD2(v238[2]) = 1026;
      *(_DWORD *)((char *)&v238[2] + 6) = v222;
      WORD1(v238[3]) = 1026;
      HIDWORD(v238[3]) = 0;
      LOWORD(v238[4]) = 1026;
      *(_DWORD *)((char *)&v238[4] + 2) = v230;
      HIWORD(v238[4]) = 1026;
      LODWORD(v238[5]) = v217;
      WORD2(v238[5]) = 1026;
      *(_DWORD *)((char *)&v238[5] + 6) = v109;
      WORD1(v238[6]) = 1026;
      HIDWORD(v238[6]) = v226;
      v212 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v212);
      if (v212 != buf)
        free(v212);
    }
  }
  v112 = *(_QWORD *)(a1 + 864);
  if (v112 == *(_QWORD *)(a1 + 872))
  {
    v116 = 0.0;
    goto LABEL_325;
  }
  v113 = 0;
  v219 = v222 - 1227133513 * (v220 >> 4);
  v218 = v230 + v219;
  v114 = v226 + v217 + v230 + v219;
  if (v114 <= v91 + v114)
    v114 += v91;
  v216 = v114;
  v231 = a1 + 912;
  v221 = v21;
  if (v21 + v34 + 0.0 <= 0.0)
    v115 = 0.1;
  else
    v115 = v21 + v34 + 0.0;
  v116 = 0.0;
  v117 = (double *)(a1 + 1128);
  v223 = v115;
  do
  {
    if (v113 >= (int)v225)
    {
      if (v113 >= v219)
      {
        if (v113 >= v218)
        {
          if (v113 >= v217 + v218)
          {
            if (v113 >= v216)
            {
              if (byte_1EE172810)
              {
                byte_1EE172810 = 0;
                v169 = *(float *)&dword_1EE172814;
              }
              else
              {
                do
                {
                  v170 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
                  v171 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
                  v172 = (float)(v171 * v171) + (float)(v170 * v170);
                }
                while (v172 >= 1.0);
                v169 = 0.0;
                if (v172 != 0.0)
                {
                  v173 = sqrtf((float)(logf((float)(v171 * v171) + (float)(v170 * v170)) * -2.0) / v172);
                  *(float *)&dword_1EE172814 = v171 * v173;
                  byte_1EE172810 = 1;
                  v169 = v170 * v173;
                }
              }
              v115 = v223;
              if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v236 + 88))(v236, v112, v231, v221 + *(double *)(a1 + 1832) * v169) & 1) == 0)
              {
                if (!*(_BYTE *)(a1 + 96))
                  goto LABEL_411;
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E29907B0);
                v206 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_18F5B3000, v206, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,alternate ambiguous particles", buf, 2u);
                }
                if (!sub_18F5C4AE0(115, 2))
                  goto LABEL_411;
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 == -1)
                {
LABEL_435:
                  LOWORD(v238[0]) = 0;
                  v215 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v215);
                  if (v215 != buf)
                    free(v215);
LABEL_411:
                  v41 = 0;
                  ++*(_DWORD *)(a1 + 108);
                  goto LABEL_367;
                }
LABEL_440:
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
                goto LABEL_435;
              }
            }
          }
          else
          {
            if (byte_1EE172810)
            {
              byte_1EE172810 = 0;
              v137 = *(float *)&dword_1EE172814;
            }
            else
            {
              do
              {
                v138 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
                v139 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
                v140 = (float)(v139 * v139) + (float)(v138 * v138);
              }
              while (v140 >= 1.0);
              v137 = 0.0;
              if (v140 != 0.0)
              {
                v141 = sqrtf((float)(logf((float)(v139 * v139) + (float)(v138 * v138)) * -2.0) / v140);
                *(float *)&dword_1EE172814 = v139 * v141;
                byte_1EE172810 = 1;
                v137 = v138 * v141;
              }
            }
            v115 = v223;
            if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v236 + 88))(v236, v112, v231, *(double *)(a1 + 1832) * v137 + 0.0) & 1) == 0)
            {
              if (!*(_BYTE *)(a1 + 96))
                goto LABEL_411;
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              v205 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18F5B3000, v205, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,prior snap particles", buf, 2u);
              }
              if (!sub_18F5C4AE0(115, 2))
                goto LABEL_411;
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 == -1)
                goto LABEL_435;
              goto LABEL_440;
            }
          }
        }
        else if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v236 + 88))(v236, v112, v231, (double)((v113 - v219) % 6 + 1) * 3.5 + 0.0) & 1) == 0)
        {
          if (!*(_BYTE *)(a1 + 96))
            goto LABEL_411;
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v204 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v204, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,fwd intersection particles", buf, 2u);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_411;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
            goto LABEL_435;
          goto LABEL_440;
        }
      }
      else
      {
        v126 = *(_QWORD *)(v112 + 8);
        v238[0] = *(_QWORD *)v112;
        v238[1] = v126;
        if (v126)
        {
          v127 = (unint64_t *)(v126 + 8);
          do
            v128 = __ldxr(v127);
          while (__stxr(v128 + 1, v127));
        }
        v129 = *(_OWORD *)(v112 + 16);
        v130 = *(_OWORD *)(v112 + 32);
        v238[6] = *(_QWORD *)(v112 + 48);
        *(_OWORD *)&v238[2] = v129;
        *(_OWORD *)&v238[4] = v130;
        v131 = *(_OWORD *)(v112 + 65);
        *(_OWORD *)&v238[7] = *(_OWORD *)(v112 + 56);
        *(_OWORD *)((char *)&v238[8] + 1) = v131;
        v240 = 0;
        v241 = 0;
        v239 = 0;
        sub_18F692CBC(&v239, *(const void **)(v112 + 88), *(_QWORD *)(v112 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v112 + 96) - *(_QWORD *)(v112 + 88)) >> 3));
        v132 = 4;
        while (1)
        {
          v133 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v236 + 88))(v236, v112, v231, v115);
          if ((v133 & 1) == 0)
            break;
          if (**(_QWORD **)v112 == *(_QWORD *)v238[0] && *(unsigned __int8 *)(v112 + 20) != BYTE4(v238[2]))
          {
            sub_18F623A40((_QWORD *)v112, v238);
            v134 = *(_OWORD *)&v238[2];
            v135 = *(_OWORD *)&v238[4];
            *(_QWORD *)(v112 + 48) = v238[6];
            *(_OWORD *)(v112 + 16) = v134;
            *(_OWORD *)(v112 + 32) = v135;
            v136 = *(_OWORD *)&v238[7];
            *(_OWORD *)(v112 + 65) = *(_OWORD *)((char *)&v238[8] + 1);
            *(_OWORD *)(v112 + 56) = v136;
            if ((_QWORD *)v112 != v238)
              sub_18F692DD0((char *)(v112 + 88), (char *)v239, (uint64_t)v240, 0x8E38E38E38E38E39 * ((v240 - (_BYTE *)v239) >> 3));
            if (--v132)
              continue;
          }
          goto LABEL_282;
        }
        if (*(_BYTE *)(a1 + 96))
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v142 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v142, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,prior intersection particles", buf, 2u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            *(_WORD *)v242 = 0;
            v174 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v174);
            if (v174 != buf)
              free(v174);
            v115 = v223;
          }
        }
        ++*(_DWORD *)(a1 + 108);
LABEL_282:
        if (v239)
        {
          v240 = v239;
          operator delete(v239);
        }
        v143 = (std::__shared_weak_count *)v238[1];
        v117 = (double *)(a1 + 1128);
        if (v238[1])
        {
          v144 = (unint64_t *)(v238[1] + 8);
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
        }
        if ((v133 & 1) == 0)
        {
          v41 = 0;
          goto LABEL_367;
        }
      }
    }
    else
    {
      if (byte_1EE172810)
      {
        byte_1EE172810 = 0;
        v118 = *(float *)&dword_1EE172814;
      }
      else
      {
        do
        {
          v119 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          v120 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          v121 = (float)(v120 * v120) + (float)(v119 * v119);
        }
        while (v121 >= 1.0);
        v118 = 0.0;
        if (v121 != 0.0)
        {
          v122 = sqrtf((float)(logf((float)(v120 * v120) + (float)(v119 * v119)) * -2.0) / v121);
          *(float *)&dword_1EE172814 = v120 * v122;
          byte_1EE172810 = 1;
          v118 = v119 * v122;
        }
      }
      v123 = *(double *)(a1 + 1832);
      v124 = v123 * v118;
      if ((-1171354717 * v113) <= 0x1745D174 && v123 < 8.0)
      {
        v124 = fabs(v124) / v123 * 8.0;
        v115 = v223;
      }
      else
      {
        v115 = v223;
        if ((-252645135 * v113) <= 0xF0F0F0F)
          v124 = fabs(v124) / v123 * 34.0;
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v236 + 88))(v236, v112, v231, v221 + v124) & 1) == 0)
      {
        if (!*(_BYTE *)(a1 + 96))
          goto LABEL_411;
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v203 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v203, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,standard particles", buf, 2u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_411;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 == -1)
          goto LABEL_435;
        goto LABEL_440;
      }
    }
    if (!*(_QWORD *)v112)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v178 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v178, OS_LOG_TYPE_ERROR, "CLMM,NULL road", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_82;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_340;
      goto LABEL_438;
    }
    if (*(double *)(v112 + 32) == 0.0 && *(double *)(v112 + 40) == 0.0)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v202 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v202, OS_LOG_TYPE_ERROR, "CLMM,Unexpected particle with snapLat == snapLon == 0", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_82;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
      {
LABEL_340:
        LOWORD(v238[0]) = 0;
        v14 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v14);
        goto LABEL_419;
      }
LABEL_438:
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      goto LABEL_340;
    }
    *(_QWORD *)(v112 + 56) = 0;
    *(_QWORD *)(v112 + 64) = 0;
    *(_QWORD *)(v112 + 72) = 0;
    v146 = (char **)(v112 + 88);
    *(_QWORD *)(v112 + 96) = *(_QWORD *)(v112 + 88);
    memset(buf, 0, 24);
    *(_QWORD *)&buf[24] = 0x3FF0000000000000;
    memset(v245, 0, sizeof(v245));
    LODWORD(v246) = 0;
    sub_18F676F68(a1, a1 + 656, (uint64_t *)v112, v117, (double *)v238, (double *)v242, (double *)&v233, (uint64_t)buf, 0);
    v147 = *(_QWORD *)(v112 + 104);
    v148 = *(_QWORD *)&buf[16];
    *(_QWORD *)(v112 + 56) = *(_QWORD *)buf;
    *(_QWORD *)(v112 + 72) = v148;
    LODWORD(v246) = 1;
    *(_QWORD *)&buf[24] = 0x3FF0000000000000;
    v149 = *(_QWORD *)(v112 + 96);
    if (v149 >= v147)
    {
      v154 = 0x8E38E38E38E38E39 * ((uint64_t)(v149 - (_QWORD)*v146) >> 3);
      v155 = v154 + 1;
      if (v154 + 1 > 0x38E38E38E38E38ELL)
        sub_18F5F7864();
      v156 = 0x8E38E38E38E38E39 * ((uint64_t)(v147 - (_QWORD)*v146) >> 3);
      if (2 * v156 > v155)
        v155 = 2 * v156;
      if (v156 >= 0x1C71C71C71C71C7)
        v157 = 0x38E38E38E38E38ELL;
      else
        v157 = v155;
      if (v157)
        v158 = (char *)sub_18F692D88(v112 + 104, v157);
      else
        v158 = 0;
      v159 = &v158[72 * v154];
      *(_OWORD *)v159 = *(_OWORD *)buf;
      v160 = *(_OWORD *)&buf[16];
      v161 = v245[0];
      v162 = v245[1];
      *((_QWORD *)v159 + 8) = v246;
      *((_OWORD *)v159 + 2) = v161;
      *((_OWORD *)v159 + 3) = v162;
      *((_OWORD *)v159 + 1) = v160;
      v164 = *(char **)(v112 + 88);
      v163 = *(char **)(v112 + 96);
      v165 = v159;
      if (v163 != v164)
      {
        do
        {
          *(_OWORD *)(v165 - 72) = *(_OWORD *)(v163 - 72);
          v166 = *(_OWORD *)(v163 - 56);
          v167 = *(_OWORD *)(v163 - 40);
          v168 = *(_OWORD *)(v163 - 24);
          *((_DWORD *)v165 - 2) = *((_DWORD *)v163 - 2);
          *(_OWORD *)(v165 - 24) = v168;
          *(_OWORD *)(v165 - 40) = v167;
          *(_OWORD *)(v165 - 56) = v166;
          v165 -= 72;
          v163 -= 72;
        }
        while (v163 != v164);
        v163 = *v146;
      }
      v153 = v159 + 72;
      *(_QWORD *)(v112 + 88) = v165;
      *(_QWORD *)(v112 + 96) = v159 + 72;
      *(_QWORD *)(v112 + 104) = &v158[72 * v157];
      if (v163)
        operator delete(v163);
    }
    else
    {
      *(_OWORD *)v149 = *(_OWORD *)buf;
      v150 = *(_OWORD *)&buf[16];
      v151 = v245[0];
      v152 = v245[1];
      *(_QWORD *)(v149 + 64) = v246;
      *(_OWORD *)(v149 + 32) = v151;
      *(_OWORD *)(v149 + 48) = v152;
      *(_OWORD *)(v149 + 16) = v150;
      v153 = (char *)(v149 + 72);
    }
    ++v113;
    *(_QWORD *)(v112 + 96) = v153;
    v116 = v116 + *(double *)(v112 + 56);
    v112 += 112;
  }
  while (v112 != *(_QWORD *)(a1 + 872));
  if (v116 > 0.0)
  {
    v179 = *v232;
    if (*v232 != v112)
    {
      v180 = (void **)(a1 + 936);
      v181 = (_QWORD *)(a1 + 952);
      v182 = *(float **)(a1 + 944);
      v183 = 0.0;
      do
      {
        v184 = v179;
        v185 = *(double *)(v179 + 56) / v116;
        *(double *)(v179 + 64) = v185;
        v183 = v183 + v185;
        v186 = v183;
        if ((unint64_t)v182 >= *v181)
        {
          v188 = (float *)*v180;
          v189 = ((char *)v182 - (_BYTE *)*v180) >> 2;
          v190 = v189 + 1;
          if ((unint64_t)(v189 + 1) >> 62)
            sub_18F5F7864();
          v191 = *v181 - (_QWORD)v188;
          if (v191 >> 1 > v190)
            v190 = v191 >> 1;
          if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFFCLL)
            v192 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v192 = v190;
          if (v192)
          {
            v193 = (char *)sub_18F62C554(a1 + 952, v192);
            v182 = *(float **)(a1 + 944);
            v188 = *(float **)(a1 + 936);
          }
          else
          {
            v193 = 0;
          }
          v194 = (float *)&v193[4 * v189];
          *v194 = v186;
          v187 = v194 + 1;
          while (v182 != v188)
          {
            v195 = *((_DWORD *)v182-- - 1);
            *((_DWORD *)v194-- - 1) = v195;
          }
          *(_QWORD *)(a1 + 936) = v194;
          *(_QWORD *)(a1 + 944) = v187;
          *(_QWORD *)(a1 + 952) = &v193[4 * v192];
          if (v188)
            operator delete(v188);
        }
        else
        {
          *v182 = v186;
          v187 = v182 + 1;
        }
        *(_QWORD *)(a1 + 944) = v187;
        v179 = v184 + 112;
        v182 = v187;
      }
      while (v184 + 112 != *(_QWORD *)(a1 + 872));
      if (v179 != *v232)
      {
        v196 = *v232 - 112;
        v197 = 0.0;
        do
        {
          v197 = v197 + *(double *)(v196 + 176) * *(double *)(v196 + 176);
          v196 += 112;
        }
        while (v196 != v184);
        if (v197 > 0.0)
          *(double *)(a1 + 1608) = 1.0 / v197;
      }
    }
    goto LABEL_366;
  }
LABEL_325:
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v175 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v116;
      _os_log_impl(&dword_18F5B3000, v175, OS_LOG_TYPE_ERROR, "CLMM,totalScore<=0,%{public}.1lf", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      LODWORD(v238[0]) = 134349056;
      *(double *)((char *)v238 + 4) = v116;
      v213 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v213);
      if (v213 != buf)
        free(v213);
    }
  }
  v176 = *(_QWORD *)(a1 + 872);
  v177 = *(_QWORD *)(a1 + 864);
  while (v176 != v177)
  {
    v176 -= 112;
    sub_18F6B2DD8(a1 + 880, v176);
  }
  v41 = 0;
  *(_QWORD *)(a1 + 872) = v177;
LABEL_83:
  ++*(_DWORD *)(a1 + 104);
LABEL_367:
  v198 = v237;
  if (v237)
  {
    v199 = (unint64_t *)&v237->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  return v41;
}

void sub_18F69DEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_18F5D6004((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void **sub_18F69E014(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL)
      sub_18F5F7864();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_18F6B3350((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 112 * v6;
    sub_18F6B32DC(a1, v7);
    return sub_18F6B34E8(v7);
  }
  return result;
}

void sub_18F69E0BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F6B34E8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F69E0D0(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  double **v4;
  double *v5;
  double *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double *v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  double v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  _BOOL4 v43;
  _BOOL4 v44;
  double v45;
  double v46;
  double v48;
  double v49;
  NSObject *v50;
  std::string::size_type v51;
  std::string::size_type v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  double v57;
  double v58;
  NSObject *v59;
  std::string::size_type v60;
  std::string::size_type v61;
  _BOOL4 v62;
  _BOOL4 v63;
  NSObject *v64;
  std::string::size_type v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  NSObject *v84;
  std::string::size_type v85;
  std::string::size_type v86;
  double v87;
  NSObject *v88;
  std::string::size_type v89;
  std::string::size_type v90;
  double v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  NSObject *v98;
  uint64_t v99;
  double v100;
  double *v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  std::string::size_type v111;
  double v112;
  BOOL v113;
  NSObject *v115;
  double *v116;
  double *v117;
  std::string *v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *p_shared_owners;
  unint64_t v123;
  int v126;
  unint64_t *v127;
  unint64_t v128;
  NSObject *v129;
  std::string::size_type v130;
  NSObject *v131;
  double v132;
  double v133;
  uint64_t v134;
  uint64_t v135;
  double v136;
  uint64_t v137;
  float v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  NSObject *v144;
  double v145;
  _BOOL4 v146;
  double v147;
  double v148;
  NSObject *v149;
  int v150;
  int v151;
  std::string *v152;
  NSObject *v153;
  NSObject *v155;
  std::string::size_type v156;
  double v157;
  NSObject *v158;
  std::string::size_type v159;
  NSObject *v160;
  std::string::size_type v161;
  std::string::size_type v162;
  double v163;
  NSObject *v164;
  std::string::size_type v165;
  std::string::size_type v166;
  double v167;
  double v168;
  NSObject *v169;
  std::string::size_type v170;
  std::string::size_type v171;
  double v172;
  NSObject *v173;
  std::string::size_type v174;
  std::string::size_type v175;
  double v176;
  char v177;
  std::string::size_type v178;
  std::string::size_type v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  NSObject *v183;
  std::string *v184;
  std::string *v185;
  uint64_t v186;
  std::string *v187;
  std::string *v188;
  std::string *v189;
  uint64_t v190;
  std::string *v191;
  uint64_t v192;
  uint64_t v193;
  double v194;
  std::string *v195;
  uint64_t v196;
  std::string *v197;
  std::string *v198;
  std::string *v199;
  std::string *v200;
  uint64_t v201;
  uint64_t v202;
  double v203;
  std::string *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  std::string *v210;
  uint64_t v211;
  std::string *v212;
  uint64_t v213;
  uint64_t v214;
  double v215;
  std::string *v216;
  uint64_t v217;
  std::string *v218;
  uint64_t v219;
  uint64_t v220;
  std::string *v221;
  uint64_t v222;
  uint64_t v223;
  double v224;
  std::string *v225;
  uint64_t v226;
  uint64_t v227;
  double v228;
  std::string *v229;
  uint64_t v230;
  uint64_t v231;
  double v232;
  std::string *v233;
  double **v234;
  _BOOL4 v235;
  double *v236;
  _QWORD v237[2];
  uint64_t v238;
  __int16 v239;
  __int128 v240;
  int v241;
  __int16 v242;
  int v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  char v247;
  void *v248[2];
  __int128 v249;
  uint64_t v250;
  __int128 v251;
  __int128 v252;
  unint64_t v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  _BYTE v263[64];
  __int16 v264;
  uint64_t v265;
  int v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  _BYTE v270[80];
  uint64_t v271;
  unint64_t v272;
  char v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  _BYTE v278[19];
  __int128 v279;
  char v280;
  __int128 v281;
  int v282;
  __int16 v283;
  int v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  char v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  _BYTE v292[30];
  double v293;
  _BYTE v294[12];
  __int16 v295;
  uint64_t v296;
  _WORD v297[41];
  _BOOL4 v298;
  void *__src;
  _BYTE *v300;
  uint64_t v301;
  _BYTE v302[22];
  __int16 v303;
  double v304;
  __int128 v305;
  uint64_t v306;
  std::string buf;
  double v308;
  _BYTE v309[36];
  __int16 v310;
  _BOOL4 v311;
  __int16 v312;
  _BOOL4 v313;
  __int16 v314;
  _BOOL4 v315;
  uint64_t v316;

  v316 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(a1 + 1656);
  if (*(_QWORD *)(a1 + 1656))
    sub_18F677990((_QWORD *)(a1 + 1656));
  if (*(_QWORD *)(a1 + 872) == *(_QWORD *)(a1 + 864))
    return 1;
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v3 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEBUG, "CLMM,extractSolution", (uint8_t *)&buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v239 = 0;
      v184 = (std::string *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v184);
      if (v184 != &buf)
        free(v184);
    }
  }
  LOBYTE(v239) = 0;
  v4 = (double **)(a1 + 984);
  v240 = 0u;
  v5 = (double *)(a1 + 992);
  v241 = 0;
  v242 = 1;
  v243 = 0;
  v244 = 0u;
  v245 = 0u;
  v246 = 0u;
  v247 = 0;
  *(_OWORD *)v248 = 0u;
  v249 = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  v251 = _Q1;
  v252 = 0u;
  v250 = 0;
  v253 = 0xBFF0000000000000;
  v265 = 0;
  v266 = 0;
  v264 = 0;
  memset(&v263[32], 0, 32);
  v267 = 0u;
  v268 = 0u;
  v269 = 0u;
  memset(v270, 0, 27);
  memset(&v270[32], 0, 48);
  v254 = 0u;
  v255 = 0u;
  v256 = 0u;
  v257 = 0u;
  v258 = 0u;
  v259 = 0u;
  v260 = 0u;
  v261 = 0u;
  v262 = 0u;
  memset(v263, 0, 30);
  v272 = 0xBFF0000000000000;
  v271 = 0;
  v273 = 0;
  v281 = 0u;
  v282 = 0;
  v274 = 0u;
  v275 = 0u;
  v276 = 0u;
  v277 = 0u;
  memset(v278, 0, sizeof(v278));
  v279 = 0u;
  v280 = 0;
  v283 = 1;
  v284 = 0;
  v288 = 0;
  v286 = 0u;
  v287 = 0u;
  v285 = 0u;
  memset(v292, 0, sizeof(v292));
  v291 = 0u;
  v290 = 0u;
  *(_QWORD *)&_Q1 = *(_QWORD *)(a1 + 1224);
  v289 = 0u;
  if (*(double *)&_Q1 == 0.0 || *(_BYTE *)(a1 + 1356))
    *(_QWORD *)(a1 + 3144) = *(_QWORD *)(a1 + 1136);
  v9 = *v4;
  if (*v4 == v5)
    goto LABEL_45;
  v10 = 0;
  v11 = a1 + 1128;
  v12 = a1 + 992;
  do
  {
    if (!*((_QWORD *)v9 + 7))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v24 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_18F5B3000, v24, OS_LOG_TYPE_ERROR, "CLMM,NULL road, bad candidate", (uint8_t *)&buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_58;
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
LABEL_493:
      v297[0] = 0;
      v185 = (std::string *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v185);
      if (v185 != &buf)
        free(v185);
      goto LABEL_58;
    }
    if (*((_BYTE *)v9 + 200))
      v13 = 216;
    else
      v13 = 76;
    v14 = *(_DWORD *)((char *)v9 + v13);
    if (v14 > v10)
    {
      v12 = (uint64_t)v9;
      v10 = v14;
    }
    v15 = (double *)*((_QWORD *)v9 + 1);
    if (v15)
    {
      do
      {
        v16 = v15;
        v15 = *(double **)v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = (double *)*((_QWORD *)v9 + 2);
        _ZF = *(_QWORD *)v16 == (_QWORD)v9;
        v9 = v16;
      }
      while (!_ZF);
    }
    v9 = v16;
  }
  while (v16 != v5);
  if (v10 <= 0)
  {
LABEL_45:
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v23 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_18F5B3000, v23, OS_LOG_TYPE_ERROR, "CLMM,Unexpected bestCount<=0", (uint8_t *)&buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_58;
    bzero(&buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    goto LABEL_493;
  }
  if ((double *)v12 == v5)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v35 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_18F5B3000, v35, OS_LOG_TYPE_ERROR, "CLMM,Unexpected no best candidate found", (uint8_t *)&buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_58;
    bzero(&buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    goto LABEL_493;
  }
  *(_WORD *)(a1 + 1649) = 0;
  v236 = (double *)(a1 + 1128);
  v234 = (double **)(a1 + 984);
  if (!*(_BYTE *)(v12 + 200) || !*(_BYTE *)(v12 + 192) || *(_DWORD *)(v12 + 212) <= *(_DWORD *)(v12 + 208))
    goto LABEL_170;
  v17 = sub_18F6B3060((uint64_t)v4, (uint64_t *)(v12 + 224));
  if (v5 == (double *)v17)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v36 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_18F5B3000, v36, OS_LOG_TYPE_ERROR, "CLMM,Unexpected. There should be an outgoing road", (uint8_t *)&buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_58;
    bzero(&buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    goto LABEL_493;
  }
  v18 = v17;
  memset(v302, 0, 20);
  *(_WORD *)&v302[20] = 1;
  LODWORD(v304) = 0;
  v306 = 0;
  v305 = 0uLL;
  sub_18F623A40(v302, (uint64_t *)(v17 + 56));
  if (!*(_QWORD *)v302)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v37 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_18F5B3000, v37, OS_LOG_TYPE_ERROR, "CLMM,Unexpected NULL outgoing road candidate", (uint8_t *)&buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
LABEL_521:
      v297[0] = 0;
      v198 = (std::string *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v198);
      if (v198 != &buf)
        free(v198);
    }
LABEL_100:
    sub_18F5D6004((uint64_t)v302);
LABEL_58:
    v22 = 0;
    goto LABEL_59;
  }
  *(_DWORD *)&v302[16] = 0;
  *(_WORD *)&v302[20] = *(unsigned __int8 *)(v18 + 48);
  v19 = *(double *)(v12 + 856);
  *(float *)&v304 = v19;
  v20 = *(double *)(v12 + 848);
  *(_QWORD *)&v305 = *(_QWORD *)(v12 + 840);
  *((double *)&v305 + 1) = v20;
  v306 = *(_QWORD *)(v12 + 960);
  if (*(double *)&v305 == 0.0 && v20 == 0.0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v21 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_18F5B3000, v21, OS_LOG_TYPE_ERROR, "CLMM,Unexpected outgoing snapLat==snapLon==0", (uint8_t *)&buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      goto LABEL_521;
    }
    goto LABEL_100;
  }
  *(_QWORD *)v294 = 0;
  v293 = 0.0;
  v238 = 0;
  memset(&buf, 0, sizeof(buf));
  v308 = 1.0;
  memset(v309, 0, sizeof(v309));
  sub_18F676F68(a1, a1 + 656, (uint64_t *)v302, v236, (double *)v294, &v293, (double *)&v238, (uint64_t)&buf, 0);
  v38 = *(double *)(v12 + 5136);
  v39 = *(float *)&v304;
  v40 = fmod(v38 - *(float *)&v304, 360.0);
  if (v40 < 0.0)
    v40 = v40 + 360.0;
  if (v40 > 180.0)
    v40 = v40 + -360.0;
  v41 = fabs(v40);
  v42 = *(double *)(a1 + 1232);
  if (v42 >= 0.0)
  {
    v45 = fmod(v42 - v39, 360.0);
    v43 = 0;
    if (v45 < 0.0)
      v45 = v45 + 360.0;
    if (v45 > 180.0)
      v45 = v45 + -360.0;
    v46 = fabs(v45);
    v235 = v46 < 25.0;
    v44 = v46 < 25.0 || *(double *)(v12 + 248) >= 7.5;
    if (v44 && v41 >= 45.0 && v46 >= 25.0)
    {
      if (*(double *)(a1 + 1320) >= 20.0)
      {
        v235 = 0;
        v43 = 0;
      }
      else
      {
        v48 = fmod(v38 - v42, 360.0);
        v235 = 0;
        if (v48 < 0.0)
          v48 = v48 + 360.0;
        if (v48 > 180.0)
          v48 = v48 + -360.0;
        v49 = fabs(v48);
        v43 = v49 < 10.0;
        v44 = v49 >= 10.0;
      }
    }
  }
  else
  {
    v235 = 0;
    v43 = 0;
    v44 = 1;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v50 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v51 = *(_QWORD *)(a1 + 1136);
      v52 = *(_QWORD *)(v12 + 5136);
      v53 = *(_QWORD *)(a1 + 1232);
      v54 = *(_QWORD *)(v12 + 248);
      v55 = *(_QWORD *)(a1 + 1320);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134351360;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v51;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v52;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
      v308 = *(float *)&v304;
      *(_WORD *)v309 = 2050;
      *(_QWORD *)&v309[2] = v53;
      *(_WORD *)&v309[10] = 2050;
      *(_QWORD *)&v309[12] = v54;
      *(_WORD *)&v309[20] = 1026;
      *(_DWORD *)&v309[22] = v44;
      *(_WORD *)&v309[26] = 2050;
      *(_QWORD *)&v309[28] = v55;
      v310 = 1026;
      v311 = v41 >= 45.0;
      v312 = 1026;
      v313 = v235;
      v314 = 1026;
      v315 = v43;
      _os_log_impl(&dword_18F5B3000, v50, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf, crumbCourse,%{public}.2lf, outgoingDistanceFromIntersection,%{public}.2lf,outgoingCondition,%{public}d,crumbCourseUnc,%{public}.2lf,significantCourseChange,%{public}d,isCourseAligned,%{public}d, isMeanCandidateAlignedWithCourse,%{public}d", (uint8_t *)&buf, 0x56u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v205 = *(_QWORD *)(a1 + 1136);
      v206 = *(_QWORD *)(v12 + 5136);
      v207 = *(_QWORD *)(a1 + 1232);
      v208 = *(_QWORD *)(v12 + 248);
      v209 = *(_QWORD *)(a1 + 1320);
      *(_DWORD *)v297 = 134351360;
      *(_QWORD *)&v297[2] = v205;
      v297[6] = 2050;
      *(_QWORD *)&v297[7] = v206;
      v297[11] = 2050;
      *(double *)&v297[12] = *(float *)&v304;
      v297[16] = 2050;
      *(_QWORD *)&v297[17] = v207;
      v297[21] = 2050;
      *(_QWORD *)&v297[22] = v208;
      v297[26] = 1026;
      *(_DWORD *)&v297[27] = v44;
      v297[29] = 2050;
      *(_QWORD *)&v297[30] = v209;
      v297[34] = 1026;
      *(_DWORD *)&v297[35] = v41 >= 45.0;
      v297[37] = 1026;
      *(_DWORD *)&v297[38] = v235;
      v297[40] = 1026;
      v298 = v43;
      v210 = (std::string *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v210);
      if (v210 != &buf)
        free(v210);
    }
  }
  if (*(double *)(a1 + 1792) >= 8.05555556)
  {
    v56 = v235;
  }
  else
  {
    v56 = v235;
    if (*(int *)(v12 + 196) > 1 || *(double *)(a1 + 1208) > 10.0)
    {
      v57 = 15.0;
      if (*(double *)(a1 + 1224) > 0.0
        && !*(_BYTE *)(a1 + 1356)
        && vabdd_f64(*(double *)(a1 + 1136), *(double *)(a1 + 3144)) < 20.0)
      {
        v57 = 7.5;
      }
      if (v41 >= 45.0 && v235)
        v58 = v57 * 0.6;
      else
        v58 = v57;
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_148;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v59 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v60 = *(_QWORD *)(a1 + 1136);
        v61 = *(_QWORD *)(v12 + 248);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v60;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v61;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
        v308 = v58;
        _os_log_impl(&dword_18F5B3000, v59, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,exit distance check,distance,%{public}.2lf,exitDistance,%{public}.2lf", (uint8_t *)&buf, 0x20u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v219 = *(_QWORD *)(a1 + 1136);
        v220 = *(_QWORD *)(v12 + 248);
        *(_DWORD *)v297 = 134349568;
        *(_QWORD *)&v297[2] = v219;
        v297[6] = 2050;
        *(_QWORD *)&v297[7] = v220;
        v297[11] = 2050;
        *(double *)&v297[12] = v58;
        v221 = (std::string *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v221);
        if (v221 != &buf)
          free(v221);
        v56 = v235;
        if (v44)
LABEL_149:
          v44 = *(double *)(v12 + 248) > v58;
      }
      else
      {
LABEL_148:
        if (v44)
          goto LABEL_149;
      }
    }
  }
  v62 = v41 >= 45.0 && v56;
  if (v62 && *(double *)(a1 + 1320) < 20.0)
  {
    if (!v44)
      goto LABEL_162;
LABEL_160:
    if (*(double *)(a1 + 1224) <= 0.0)
      goto LABEL_162;
    v63 = *(_BYTE *)(a1 + 1356) == 0;
  }
  else
  {
    if (v44 && *(int *)(v12 + 212) > 2 * *(int *)(v12 + 208))
      goto LABEL_160;
LABEL_162:
    v63 = 0;
  }
  *(_BYTE *)(a1 + 1650) = v63;
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v64 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v65 = *(_QWORD *)(a1 + 1136);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v65;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v63;
      _os_log_impl(&dword_18F5B3000, v64, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,outgoing condition,%{public}d", (uint8_t *)&buf, 0x12u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v211 = *(_QWORD *)(a1 + 1136);
      *(_DWORD *)v297 = 134349312;
      *(_QWORD *)&v297[2] = v211;
      v297[6] = 1026;
      *(_DWORD *)&v297[7] = v63;
      v212 = (std::string *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v212);
      if (v212 != &buf)
        free(v212);
    }
  }
  *(_BYTE *)(a1 + 1649) = 1;
  sub_18F5D6004((uint64_t)v302);
  v11 = a1 + 1128;
LABEL_170:
  memset(v297, 0, 20);
  v297[10] = 1;
  *(_DWORD *)&v297[12] = 0;
  v301 = 0;
  __src = 0;
  v300 = 0;
  memset(&v297[16], 0, 49);
  v66 = *(double *)(a1 + 1320);
  if (v66 < 19.0)
  {
    *(_QWORD *)(a1 + 1320) = 0x4033000000000000;
    sub_18F6E4484(a1 + 656, v11, *(unsigned __int8 *)(a1 + 752));
  }
  v67 = *(_QWORD *)(a1 + 864);
  if (v67 != *(_QWORD *)(a1 + 872))
  {
    while (2)
    {
      *(_BYTE *)(v67 + 80) = 0;
      sub_18F69B170(v67, (uint64_t)&buf);
      if (buf.__r_.__value_.__r.__words[0] == *(_QWORD *)(v12 + 32)
        && buf.__r_.__value_.__s.__data_[16] == *(unsigned __int8 *)(v12 + 48))
      {
        if (buf.__r_.__value_.__l.__size_ == *(_QWORD *)(v12 + 40))
        {
          if (!*(_BYTE *)(a1 + 1650) && *(_BYTE *)(v12 + 200) && *(_BYTE *)(v12 + 192))
          {
            v75 = *(double *)(v67 + 48);
            v76 = *(double *)(v12 + 528);
            if (buf.__r_.__value_.__s.__data_[16])
            {
              if (v75 > v76)
                goto LABEL_208;
            }
            else if (v75 < v76)
            {
              goto LABEL_208;
            }
          }
LABEL_177:
          *(_BYTE *)(v67 + 80) = 1;
          memset(&buf, 0, sizeof(buf));
          v308 = 1.0;
          memset(v309, 0, sizeof(v309));
          sub_18F676F68(a1, a1 + 656, (uint64_t *)v67, v236, (double *)v302, (double *)v294, &v293, (uint64_t)&buf, 0);
          *(_QWORD *)(v67 + 56) = buf.__r_.__value_.__r.__words[0];
          *(_QWORD *)(v67 + 72) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
          if (*(double *)(v67 + 56) > *(double *)&v297[28])
          {
            sub_18F623A40(v297, (uint64_t *)v67);
            v68 = *(_QWORD *)(v67 + 48);
            v69 = *(_OWORD *)(v67 + 32);
            *(_OWORD *)&v297[8] = *(_OWORD *)(v67 + 16);
            *(_OWORD *)&v297[16] = v69;
            *(_QWORD *)&v297[24] = v68;
            v70 = *(_OWORD *)(v67 + 56);
            *(_OWORD *)((char *)&v297[32] + 1) = *(_OWORD *)(v67 + 65);
            *(_OWORD *)&v297[28] = v70;
            if ((_WORD *)v67 != v297)
              sub_18F692DD0((char *)&__src, *(char **)(v67 + 88), *(_QWORD *)(v67 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v67 + 96) - *(_QWORD *)(v67 + 88)) >> 3));
          }
          goto LABEL_209;
        }
        if (!*(_BYTE *)(a1 + 1650))
        {
LABEL_190:
          if (*(_BYTE *)(v12 + 200))
          {
            if (!*(_BYTE *)(v12 + 192))
            {
              sub_18F69B170(v67, (uint64_t)&buf);
              if (buf.__r_.__value_.__r.__words[0] == *(_QWORD *)(v12 + 224)
                && buf.__r_.__value_.__s.__data_[16] == *(unsigned __int8 *)(v12 + 240)
                && buf.__r_.__value_.__l.__size_ == *(_QWORD *)(v12 + 232))
              {
                v73 = *(double *)(v67 + 48);
                v74 = *(double *)(v12 + 1120);
                if (buf.__r_.__value_.__s.__data_[16])
                {
                  if (v73 < v74)
                    goto LABEL_208;
                }
                else if (v73 > v74)
                {
                  goto LABEL_208;
                }
                *(_BYTE *)(v67 + 80) = 1;
                goto LABEL_177;
              }
            }
          }
LABEL_208:
          *(_BYTE *)(v67 + 80) = 0;
LABEL_209:
          v67 += 112;
          if (v67 == *(_QWORD *)(a1 + 872))
            goto LABEL_210;
          continue;
        }
      }
      else if (!*(_BYTE *)(a1 + 1650))
      {
        goto LABEL_190;
      }
      break;
    }
    if (*(_BYTE *)(v12 + 200))
    {
      if (*(_BYTE *)(v12 + 192))
      {
        sub_18F69B170(v67, (uint64_t)&buf);
        if (buf.__r_.__value_.__r.__words[0] == *(_QWORD *)(v12 + 224)
          && buf.__r_.__value_.__s.__data_[16] == *(unsigned __int8 *)(v12 + 240)
          && buf.__r_.__value_.__l.__size_ == *(_QWORD *)(v12 + 232))
        {
          v71 = *(double *)(v67 + 48);
          v72 = *(double *)(v12 + 1120);
          if (buf.__r_.__value_.__s.__data_[16])
          {
            if (v71 >= v72)
              goto LABEL_177;
          }
          else if (v71 <= v72)
          {
            goto LABEL_177;
          }
        }
      }
    }
    goto LABEL_190;
  }
LABEL_210:
  *(_BYTE *)(a1 + 1008) = 1;
  sub_18F623A40((_QWORD *)(a1 + 1016), (uint64_t *)v297);
  v77 = *(_OWORD *)&v297[16];
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)&v297[8];
  *(_OWORD *)(a1 + 1048) = v77;
  *(_QWORD *)(a1 + 1064) = *(_QWORD *)&v297[24];
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)&v297[28];
  *(_OWORD *)(a1 + 1081) = *(_OWORD *)((char *)&v297[32] + 1);
  if ((_WORD *)(a1 + 1016) != v297)
    sub_18F692DD0((char *)(a1 + 1104), (char *)__src, (uint64_t)v300, 0x8E38E38E38E38E39 * ((v300 - (_BYTE *)__src) >> 3));
  if (*(_BYTE *)(a1 + 1650))
  {
    sub_18F69B170((uint64_t)v297, (uint64_t)&buf);
    if (*(_QWORD *)(v12 + 224) == buf.__r_.__value_.__r.__words[0]
      && *(unsigned __int8 *)(v12 + 240) == buf.__r_.__value_.__s.__data_[16]
      && *(_QWORD *)(v12 + 232) == buf.__r_.__value_.__l.__size_)
    {
      v78 = *(_OWORD *)(v12 + 688);
      v79 = *(_OWORD *)(v12 + 704);
      v80 = *(_OWORD *)(v12 + 736);
      *(_OWORD *)(a1 + 1160) = *(_OWORD *)(v12 + 720);
      *(_OWORD *)(a1 + 1176) = v80;
      *(_OWORD *)v236 = v78;
      *(_OWORD *)(a1 + 1144) = v79;
      v81 = *(_OWORD *)(v12 + 752);
      v82 = *(_OWORD *)(v12 + 768);
      v83 = *(_OWORD *)(v12 + 800);
      *(_OWORD *)(a1 + 1224) = *(_OWORD *)(v12 + 784);
      *(_OWORD *)(a1 + 1240) = v83;
      *(_OWORD *)(a1 + 1192) = v81;
      *(_OWORD *)(a1 + 1208) = v82;
      std::string::operator=((std::string *)(a1 + 1256), (const std::string *)(v12 + 816));
      memcpy((void *)(a1 + 1280), (const void *)(v12 + 840), 0x118uLL);
      sub_18F623A40(v2, (uint64_t *)(v12 + 56));
      if (*(_BYTE *)(a1 + 96) && *v2)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v84 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v85 = *(_QWORD *)(a1 + 1136);
          v86 = **(_QWORD **)(a1 + 1656);
          v87 = *(double *)(v12 + 224);
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349569;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v85;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v86;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2049;
          v308 = v87;
          _os_log_impl(&dword_18F5B3000, v84, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Using outgoing,incomingID,%{private}lld,outgoingID,%{private}lld", (uint8_t *)&buf, 0x20u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v201 = *(_QWORD *)(a1 + 1136);
          v202 = **(_QWORD **)(a1 + 1656);
          v203 = *(double *)(v12 + 224);
          *(_DWORD *)v302 = 134349569;
          *(_QWORD *)&v302[4] = v201;
          *(_WORD *)&v302[12] = 2049;
          *(_QWORD *)&v302[14] = v202;
          v303 = 2049;
          v304 = v203;
          v204 = (std::string *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v204);
          if (v204 != &buf)
            free(v204);
        }
      }
      if (v66 >= 19.0)
        goto LABEL_246;
LABEL_245:
      *(double *)(a1 + 1320) = v66;
      sub_18F6E4484(a1 + 656, (uint64_t)v236, *(unsigned __int8 *)(a1 + 752));
      goto LABEL_246;
    }
  }
  if (*(_BYTE *)(v12 + 200))
  {
    if (!*(_BYTE *)(v12 + 192))
    {
      sub_18F69B170((uint64_t)v297, (uint64_t)&buf);
      if (*(_QWORD *)(v12 + 224) == buf.__r_.__value_.__r.__words[0]
        && *(unsigned __int8 *)(v12 + 240) == buf.__r_.__value_.__s.__data_[16]
        && *(_QWORD *)(v12 + 232) == buf.__r_.__value_.__l.__size_)
      {
        sub_18F623A40(v2, (uint64_t *)(v12 + 56));
        if (*(_BYTE *)(a1 + 96))
        {
          if (*v2)
          {
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            v88 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              v89 = *(_QWORD *)(a1 + 1136);
              v90 = **(_QWORD **)(a1 + 1656);
              v91 = **(double **)v297;
              LODWORD(buf.__r_.__value_.__l.__data_) = 134349569;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v89;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v90;
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 2049;
              v308 = v91;
              _os_log_impl(&dword_18F5B3000, v88, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Using particle on outgoing,incomingID,%{private}lld,outgoingID,%{private}lld", (uint8_t *)&buf, 0x20u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              v222 = *(_QWORD *)(a1 + 1136);
              v223 = **(_QWORD **)(a1 + 1656);
              v224 = **(double **)v297;
              *(_DWORD *)v302 = 134349569;
              *(_QWORD *)&v302[4] = v222;
              *(_WORD *)&v302[12] = 2049;
              *(_QWORD *)&v302[14] = v223;
              v303 = 2049;
              v304 = v224;
              v225 = (std::string *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v225);
              if (v225 != &buf)
                free(v225);
            }
          }
        }
      }
    }
  }
  v92 = *(_OWORD *)(v12 + 4968);
  v93 = *(_OWORD *)(v12 + 4984);
  v94 = *(_OWORD *)(v12 + 5016);
  *(_OWORD *)(a1 + 1160) = *(_OWORD *)(v12 + 5000);
  *(_OWORD *)(a1 + 1176) = v94;
  *(_OWORD *)v236 = v92;
  *(_OWORD *)(a1 + 1144) = v93;
  v95 = *(_OWORD *)(v12 + 5032);
  v96 = *(_OWORD *)(v12 + 5048);
  v97 = *(_OWORD *)(v12 + 5080);
  *(_OWORD *)(a1 + 1224) = *(_OWORD *)(v12 + 5064);
  *(_OWORD *)(a1 + 1240) = v97;
  *(_OWORD *)(a1 + 1192) = v95;
  *(_OWORD *)(a1 + 1208) = v96;
  std::string::operator=((std::string *)(a1 + 1256), (const std::string *)(v12 + 5096));
  memcpy((void *)(a1 + 1280), (const void *)(v12 + 5120), 0x118uLL);
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v98 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v99 = *(_QWORD *)(a1 + 1136);
      sub_18F69B170((uint64_t)v297, (uint64_t)&buf);
      *(_DWORD *)v302 = 134349313;
      *(_QWORD *)&v302[4] = v99;
      *(_WORD *)&v302[12] = 2049;
      *(_QWORD *)&v302[14] = buf.__r_.__value_.__r.__words[0];
      _os_log_impl(&dword_18F5B3000, v98, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,bestParticleRoadID,%{private}lld", v302, 0x16u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v186 = *(_QWORD *)(a1 + 1136);
      sub_18F69B170((uint64_t)v297, (uint64_t)v302);
      *(_DWORD *)v294 = 134349313;
      *(_QWORD *)&v294[4] = v186;
      v295 = 2049;
      v296 = *(_QWORD *)v302;
      v187 = (std::string *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v187);
      if (v187 != &buf)
        free(v187);
    }
  }
  if (v66 < 19.0 && !*(_BYTE *)(a1 + 1649))
    goto LABEL_245;
LABEL_246:
  if (*(_BYTE *)(a1 + 1490))
  {
    v100 = 0.0;
    if (*(_DWORD *)(a1 + 1528) == 1)
      goto LABEL_298;
  }
  if (*(_BYTE *)(a1 + 1649) && !*(_BYTE *)(a1 + 1650) || (v101 = *v234, *v234 == v5))
  {
    v100 = 0.0;
    goto LABEL_298;
  }
  v100 = 0.0;
  v102 = 3.0;
  while (2)
  {
    if (v101 == (double *)v12
      || *(_BYTE *)(v12 + 200)
      && *((_QWORD *)v101 + 4) == *(_QWORD *)(v12 + 224)
      && *((unsigned __int8 *)v101 + 48) == *(unsigned __int8 *)(v12 + 240)
      && *((_QWORD *)v101 + 5) == *(_QWORD *)(v12 + 232))
    {
      goto LABEL_286;
    }
    v103 = v101[17];
    if (v103 == 0.0)
      goto LABEL_286;
    if (v103 > v100)
      v100 = v101[17];
    v104 = *(double *)(v12 + 136) / v103;
    v105 = v104 <= 1000000.0 ? v104 : 1000000.0;
    if (v105 > v102)
      goto LABEL_286;
    v106 = *(double *)(v12 + 5136);
    v107 = fmod(v106 - v101[642], 360.0);
    if (v107 < 0.0)
      v107 = v107 + 360.0;
    if (v107 > 180.0)
      v107 = v107 + -360.0;
    v108 = fabs(v107);
    *(_QWORD *)v294 = 0;
    v293 = 0.0;
    sub_18F71ACC4((double *)(a1 + 608), (double *)v294, &v293, *(double *)(v12 + 5120), *(double *)(v12 + 5128), *(double *)(v12 + 5040), v106, v101[640], v101[641]);
    if (v108 >= 35.0)
    {
LABEL_286:
      v116 = (double *)*((_QWORD *)v101 + 1);
      if (v116)
      {
        do
        {
          v117 = v116;
          v116 = *(double **)v116;
        }
        while (v116);
      }
      else
      {
        do
        {
          v117 = (double *)*((_QWORD *)v101 + 2);
          _ZF = *(_QWORD *)v117 == (_QWORD)v101;
          v101 = v117;
        }
        while (!_ZF);
      }
      v101 = v117;
      if (v117 == v5)
        goto LABEL_298;
      continue;
    }
    break;
  }
  if (*(_BYTE *)(a1 + 1848) && !*(_BYTE *)(a1 + 2233))
  {
    v109 = v293;
    v110 = fabs(v293);
    v111 = *(_QWORD *)v294;
    v112 = fabs(*(double *)v294);
    v113 = v112 > 2.0 && v110 < 1.5;
    if (!v113 && v112 <= 10.0)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v115 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349824;
          *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v108;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v111;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
          v308 = v105;
          *(_WORD *)v309 = 2050;
          *(double *)&v309[2] = v109;
          _os_log_impl(&dword_18F5B3000, v115, OS_LOG_TYPE_DEBUG, "CLMM,ambiguous solution not detected,fabsCourseDiff,%{public}.1lf,acrossTrack,%{public}.1lf,ratio,%{public}.3lf,alongTrackToAlt,%{public}.1lf", (uint8_t *)&buf, 0x2Au);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          *(_DWORD *)v302 = 134349824;
          *(double *)&v302[4] = v108;
          *(_WORD *)&v302[12] = 2050;
          *(_QWORD *)&v302[14] = v111;
          v303 = 2050;
          v304 = v105;
          LOWORD(v305) = 2050;
          *(double *)((char *)&v305 + 2) = v109;
          v118 = (std::string *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v118);
          if (v118 != &buf)
            free(v118);
        }
      }
      v102 = 3.0;
      if (*(_BYTE *)(a1 + 1393))
        goto LABEL_477;
      goto LABEL_286;
    }
  }
  *(_BYTE *)(a1 + 1393) = 1;
LABEL_477:
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v183 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349824;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v108;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = *(_QWORD *)v294;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
      v308 = v105;
      *(_WORD *)v309 = 2050;
      *(double *)&v309[2] = v293;
      _os_log_impl(&dword_18F5B3000, v183, OS_LOG_TYPE_DEBUG, "CLMM,ambiguous solution detected,fabsCourseDiff,%{public}.1lf,acrossTrack,%{public}.1lf,ratio,%{public}.3lf,alongTrackToAlt,%{public}.1lf", (uint8_t *)&buf, 0x2Au);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      *(_DWORD *)v302 = 134349824;
      *(double *)&v302[4] = v108;
      *(_WORD *)&v302[12] = 2050;
      *(_QWORD *)&v302[14] = *(_QWORD *)v294;
      v303 = 2050;
      v304 = v105;
      LOWORD(v305) = 2050;
      *(double *)((char *)&v305 + 2) = v293;
      v200 = (std::string *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v200);
      if (v200 != &buf)
        free(v200);
    }
  }
  *(_BYTE *)(a1 + 1648) = 1;
  sub_18F69B218(a1 + 1680, (uint64_t)(v101 + 10));
  *(_BYTE *)(a1 + 1672) = 1;
  if (*(_BYTE *)(a1 + 1848) && !*(_BYTE *)(a1 + 2233))
    *(_QWORD *)(a1 + 3152) = *(_QWORD *)(a1 + 1136);
LABEL_298:
  if (*(_BYTE *)(a1 + 1393))
  {
    v119 = *(_QWORD *)(a1 + 4048);
    v120 = *(_QWORD *)(a1 + 4056);
    while (v119 != v120)
    {
      sub_18F69B170(a1 + 1016, (uint64_t)&buf);
      v121 = *(std::__shared_weak_count **)(v119 + 8);
      v237[0] = *(_QWORD *)v119;
      v237[1] = v121;
      if (v121)
      {
        p_shared_owners = (unint64_t *)&v121->__shared_owners_;
        do
          v123 = __ldxr(p_shared_owners);
        while (__stxr(v123 + 1, p_shared_owners));
      }
      sub_18F68FFC8((uint64_t)v302, (uint64_t)v237, *(_BYTE *)(v119 + 20));
      _ZF = buf.__r_.__value_.__r.__words[0] == *(_QWORD *)v302 && buf.__r_.__value_.__l.__size_ == *(_QWORD *)&v302[8];
      v126 = !_ZF || buf.__r_.__value_.__s.__data_[16] != (unint64_t)v302[16];
      if (v121)
      {
        v127 = (unint64_t *)&v121->__shared_owners_;
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      if (!v126)
      {
        *(_BYTE *)(a1 + 1393) = 0;
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v129 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v130 = *(_QWORD *)(a1 + 1136);
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v130;
          _os_log_impl(&dword_18F5B3000, v129, OS_LOG_TYPE_DEBUG, "%{public}.1lf,CLMM,ambiguity reverted using route-hints", (uint8_t *)&buf, 0xCu);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v190 = *(_QWORD *)(a1 + 1136);
          *(_DWORD *)v302 = 134349056;
          *(_QWORD *)&v302[4] = v190;
          v191 = (std::string *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v191);
          if (v191 != &buf)
            free(v191);
        }
        break;
      }
      v119 += 56;
    }
  }
  if (*(_BYTE *)(a1 + 1848)
    && *(_BYTE *)(a1 + 2233)
    && !*(_BYTE *)(a1 + 1393)
    && *(double *)(a1 + 1136) - *(double *)(a1 + 3152) < 3.1)
  {
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v131 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_18F5B3000, v131, OS_LOG_TYPE_DEBUG, "CLMM,ambiguous solution hysteresis", (uint8_t *)&buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        *(_WORD *)v302 = 0;
        v199 = (std::string *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v199);
        if (v199 != &buf)
          free(v199);
      }
    }
    *(_BYTE *)(a1 + 1393) = 1;
    *(_BYTE *)(a1 + 1648) = 1;
    *(_BYTE *)(a1 + 1672) = 0;
  }
  v132 = *(double *)&v297[28];
  *(_QWORD *)(a1 + 1616) = *(_QWORD *)&v297[28];
  if (v100 <= 0.0)
  {
    v133 = *(double *)(a1 + 1632);
  }
  else
  {
    v133 = v132 / v100;
    *(double *)(a1 + 1632) = v133;
    if (v133 > 1000000.0)
    {
      *(_QWORD *)(a1 + 1632) = 0x412E848000000000;
      v133 = 1000000.0;
    }
  }
  *(_DWORD *)(a1 + 1408) = 1;
  v134 = *(_QWORD *)&v297[16];
  v135 = *(_QWORD *)&v297[20];
  *(_QWORD *)(a1 + 1280) = *(_QWORD *)&v297[16];
  *(_QWORD *)(a1 + 1288) = v135;
  v136 = *(float *)&v297[12];
  *(double *)(a1 + 1296) = *(float *)&v297[12];
  *(_QWORD *)(a1 + 1416) = v134;
  *(_QWORD *)(a1 + 1424) = v135;
  *(double *)(a1 + 1432) = v136;
  v137 = *(_QWORD *)v297;
  *(_QWORD *)(a1 + 1248) = *(_QWORD *)(*(_QWORD *)v297 + 20);
  *(_QWORD *)(a1 + 1400) = *(_QWORD *)&v297[24];
  *(float *)(a1 + 1304) = (float)v10;
  v138 = v133;
  *(float *)(a1 + 1308) = v138;
  if (*(char *)(v137 + 71) < 0)
    sub_18F5C6990(&buf, *(void **)(v137 + 48), *(_QWORD *)(v137 + 56));
  else
    buf = *(std::string *)(v137 + 48);
  std::string::operator=((std::string *)(a1 + 1256), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 1240) = **(_QWORD **)v297;
  v139 = *(double *)(a1 + 1232);
  v140 = -1.0;
  if (v139 >= 0.0)
  {
    v141 = fmod(v139 - *(double *)(a1 + 1296), 360.0);
    if (v141 < 0.0)
      v141 = v141 + 360.0;
    if (v141 > 180.0)
      v141 = v141 + -360.0;
    v140 = fabs(v141);
  }
  *(double *)(a1 + 1600) = v140;
  if (!*(_BYTE *)(a1 + 1357) && !*(_BYTE *)(a1 + 816))
  {
    v148 = *(double *)(a1 + 824) - *(double *)(a1 + 832);
    if (v148 >= 0.0 && v148 < 30.0)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v149 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v150 = *(unsigned __int8 *)(a1 + 1648);
          LODWORD(buf.__r_.__value_.__l.__data_) = 67240192;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v150;
          _os_log_impl(&dword_18F5B3000, v149, OS_LOG_TYPE_DEBUG, "CLMM,dismounted recently,doNotSnapCourse,%{public}d", (uint8_t *)&buf, 8u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v151 = *(unsigned __int8 *)(a1 + 1648);
          *(_DWORD *)v302 = 67240192;
          *(_DWORD *)&v302[4] = v151;
          v152 = (std::string *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v152);
          if (v152 != &buf)
            free(v152);
        }
      }
      goto LABEL_464;
    }
  }
  v142 = sub_18F5BD064((double *)(a1 + 608), *(double *)(a1 + 1184), *(double *)(a1 + 1192), *(double *)(a1 + 2024), *(double *)(a1 + 2032), *(double *)(a1 + 1200));
  v143 = sub_18F69A264(a1, 35.0);
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v144 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v143;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v142;
      _os_log_impl(&dword_18F5B3000, v144, OS_LOG_TYPE_DEBUG, "CLMM,distToNextMulti,%{public}.1lf, distFromPriorCrumb,%{public}.1lf", (uint8_t *)&buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      *(_DWORD *)v302 = 134349312;
      *(double *)&v302[4] = v143;
      *(_WORD *)&v302[12] = 2050;
      *(double *)&v302[14] = v142;
      v188 = (std::string *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v188);
      if (v188 != &buf)
        free(v188);
    }
  }
  v145 = *(double *)(a1 + 1320);
  if (v145 <= 0.0 || v145 >= 45.0 || *(double *)(a1 + 1600) <= 30.0)
  {
    if (*(_BYTE *)(a1 + 776))
    {
      v146 = 0;
      v147 = *(double *)(a1 + 800);
      if (v147 > 0.0 && v147 < 45.0)
        v146 = *(double *)(a1 + 792) > 30.0;
    }
    else
    {
      v146 = 0;
    }
  }
  else
  {
    v146 = 1;
  }
  if (*(_BYTE *)(a1 + 1648) || v143 < 0.0 || v143 >= 35.0 || !v146)
  {
LABEL_390:
    if (!*(_BYTE *)(a1 + 1648) && *(_BYTE *)(a1 + 1649) && v146)
    {
      if (*(_BYTE *)(v12 + 200))
      {
        if (*(_BYTE *)(v12 + 192))
        {
          if (sub_18F5BD064((double *)(a1 + 608), *(double *)(a1 + 1280), *(double *)(a1 + 1288), *(double *)(v12 + 408), *(double *)(v12 + 416), *(double *)(a1 + 1200)) < 35.0)
          {
            *(_BYTE *)(a1 + 1648) = 1;
            if (*(_BYTE *)(a1 + 96))
            {
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              v155 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                v156 = *(_QWORD *)(a1 + 1600);
                LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v156;
                _os_log_impl(&dword_18F5B3000, v155, OS_LOG_TYPE_DEBUG, "CLMM,not snapping course,reason,at intersection,fabsCourseDifference,%{public}.1lf", (uint8_t *)&buf, 0xCu);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E29907B0);
                v217 = *(_QWORD *)(a1 + 1600);
                *(_DWORD *)v302 = 134349056;
                *(_QWORD *)&v302[4] = v217;
                v218 = (std::string *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v218);
                if (v218 != &buf)
                  free(v218);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    *(_BYTE *)(a1 + 1648) = 1;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v153 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
        *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v143;
        _os_log_impl(&dword_18F5B3000, v153, OS_LOG_TYPE_DEBUG, "CLMM,not snapping course,reason,distanceToIntersection,%{public}.1lf", (uint8_t *)&buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        *(_DWORD *)v302 = 134349056;
        *(double *)&v302[4] = v143;
        v189 = (std::string *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v189);
        if (v189 != &buf)
          free(v189);
      }
      goto LABEL_390;
    }
  }
  v157 = *(double *)(a1 + 1320);
  if (v157 > 0.0 && v157 < 5.0 && *(_BYTE *)(a1 + 752) && *(double *)(a1 + 1600) > 45.0)
  {
    *(_BYTE *)(a1 + 1648) = 1;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v158 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v159 = *(_QWORD *)(a1 + 1600);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v159;
        _os_log_impl(&dword_18F5B3000, v158, OS_LOG_TYPE_DEBUG, "CLMM,not snapping course,reason,turning,fabsCourseDifference,%{public}.1lf", (uint8_t *)&buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v196 = *(_QWORD *)(a1 + 1600);
        *(_DWORD *)v302 = 134349056;
        *(_QWORD *)&v302[4] = v196;
        v197 = (std::string *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v197);
        if (v197 != &buf)
          free(v197);
      }
      goto LABEL_414;
    }
  }
  else
  {
LABEL_414:
    if (!*(_BYTE *)(a1 + 1648))
      goto LABEL_464;
  }
  if ((*(double *)(a1 + 1224) < 0.2 || *(_BYTE *)(a1 + 1356))
    && v142 < 2.5
    && (*(double *)(a1 + 1600) > 135.0 || *(_BYTE *)(a1 + 776) && *(double *)(a1 + 792) > 30.0))
  {
    *(_BYTE *)(a1 + 1648) = 0;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v160 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v161 = *(_QWORD *)(a1 + 1136);
        v162 = *(_QWORD *)(a1 + 1600);
        v163 = *(double *)(a1 + 792);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v161;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v162;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
        v308 = v163;
        _os_log_impl(&dword_18F5B3000, v160, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,snapping course,reason,gps course not reliable,%{public}.1lf,fabsCourseDiffWithPriorSnap,%{public}.1lf", (uint8_t *)&buf, 0x20u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v192 = *(_QWORD *)(a1 + 1136);
        v193 = *(_QWORD *)(a1 + 1600);
        v194 = *(double *)(a1 + 792);
        *(_DWORD *)v302 = 134349568;
        *(_QWORD *)&v302[4] = v192;
        *(_WORD *)&v302[12] = 2050;
        *(_QWORD *)&v302[14] = v193;
        v303 = 2050;
        v304 = v194;
        v195 = (std::string *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v195);
        if (v195 != &buf)
          free(v195);
      }
    }
    if (*(double *)(a1 + 1600) > 135.0 && !*(_BYTE *)(a1 + 776))
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v164 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v165 = *(_QWORD *)(a1 + 1136);
          v166 = *(_QWORD *)(a1 + 1232);
          v167 = *(double *)(a1 + 1296);
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v165;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v166;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
          v308 = v167;
          _os_log_impl(&dword_18F5B3000, v164, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,overwriting unreliable GPS course,static case, priorCourse,%{public}.1lf,newCourse,%{public}.1lf", (uint8_t *)&buf, 0x20u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v213 = *(_QWORD *)(a1 + 1136);
          v214 = *(_QWORD *)(a1 + 1232);
          v215 = *(double *)(a1 + 1296);
          *(_DWORD *)v302 = 134349568;
          *(_QWORD *)&v302[4] = v213;
          *(_WORD *)&v302[12] = 2050;
          *(_QWORD *)&v302[14] = v214;
          v303 = 2050;
          v304 = v215;
          v216 = (std::string *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v216);
          if (v216 != &buf)
            free(v216);
        }
      }
      *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a1 + 1296);
      *(_QWORD *)(a1 + 1320) = 0x403DE66666666666;
      *(_QWORD *)(a1 + 1600) = 0;
    }
  }
  if (*(_BYTE *)(a1 + 1648)
    && *(_BYTE *)(a1 + 384)
    && *(double *)(a1 + 1224) < 5.0
    && v142 < 5.0
    && fabs(*(double *)(a1 + 1640)) < 1.4)
  {
    v168 = fmod(*(double *)(a1 + 1296) - *(double *)(a1 + 288), 360.0);
    if (v168 < 0.0)
      v168 = v168 + 360.0;
    if (v168 > 180.0)
      v168 = v168 + -360.0;
    if (fabs(v168) < 10.0 && (*(double *)(a1 + 1600) > 135.0 || *(_BYTE *)(a1 + 776) && *(double *)(a1 + 792) > 135.0))
    {
      *(_BYTE *)(a1 + 1648) = 0;
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v169 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v170 = *(_QWORD *)(a1 + 1136);
          v171 = *(_QWORD *)(a1 + 1600);
          v172 = *(double *)(a1 + 792);
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v170;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v171;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
          v308 = v172;
          _os_log_impl(&dword_18F5B3000, v169, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,snapping course, reason,gps course flipping at low speeds,%{public}.1lf,fabsCourseDiffWithPriorSnap,%{public}.1lf", (uint8_t *)&buf, 0x20u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v226 = *(_QWORD *)(a1 + 1136);
          v227 = *(_QWORD *)(a1 + 1600);
          v228 = *(double *)(a1 + 792);
          *(_DWORD *)v302 = 134349568;
          *(_QWORD *)&v302[4] = v226;
          *(_WORD *)&v302[12] = 2050;
          *(_QWORD *)&v302[14] = v227;
          v303 = 2050;
          v304 = v228;
          v229 = (std::string *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v229);
          if (v229 != &buf)
            free(v229);
        }
      }
      if (*(double *)(a1 + 1600) > 135.0 && !*(_BYTE *)(a1 + 776))
      {
        if (*(_BYTE *)(a1 + 96))
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v173 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            v174 = *(_QWORD *)(a1 + 1136);
            v175 = *(_QWORD *)(a1 + 1232);
            v176 = *(double *)(a1 + 1296);
            LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v174;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v175;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
            v308 = v176;
            _os_log_impl(&dword_18F5B3000, v173, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,overwriting unreliable GPS course,low speed case,priorCourse,%{public}.1lf,newCourse,%{public}.1lf", (uint8_t *)&buf, 0x20u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            v230 = *(_QWORD *)(a1 + 1136);
            v231 = *(_QWORD *)(a1 + 1232);
            v232 = *(double *)(a1 + 1296);
            *(_DWORD *)v302 = 134349568;
            *(_QWORD *)&v302[4] = v230;
            *(_WORD *)&v302[12] = 2050;
            *(_QWORD *)&v302[14] = v231;
            v303 = 2050;
            v304 = v232;
            v233 = (std::string *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v233);
            if (v233 != &buf)
              free(v233);
          }
        }
        *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a1 + 1296);
        *(_QWORD *)(a1 + 1320) = 0x403DE66666666666;
        *(_QWORD *)(a1 + 1600) = 0;
      }
    }
  }
LABEL_464:
  if (*(_BYTE *)(a1 + 1648))
    *(_QWORD *)(a1 + 1296) = *(_QWORD *)(a1 + 1232);
  v177 = *(_BYTE *)(a1 + 1393);
  memset(&buf, 0, sizeof(buf));
  v308 = 1.0;
  memset(v309, 0, sizeof(v309));
  sub_18F676F68(a1, a1 + 656, (uint64_t *)(a1 + 1016), v236, (double *)(a1 + 1576), (double *)(a1 + 1584), (double *)(a1 + 1568), (uint64_t)&buf, v177);
  v178 = buf.__r_.__value_.__r.__words[0];
  v179 = buf.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 1072) = buf.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 1088) = v179;
  *(_QWORD *)(a1 + 1592) = *(_QWORD *)&v309[24];
  *(_QWORD *)(a1 + 1616) = v178;
  *(_QWORD *)(a1 + 1360) = v179;
  if (__src)
  {
    v300 = __src;
    operator delete(__src);
  }
  v180 = *(std::__shared_weak_count **)&v297[4];
  if (*(_QWORD *)&v297[4])
  {
    v181 = (unint64_t *)(*(_QWORD *)&v297[4] + 8);
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  if ((_QWORD)v289)
  {
    *((_QWORD *)&v289 + 1) = v289;
    operator delete((void *)v289);
  }
  v22 = 1;
LABEL_59:
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v281 + 1);
  if (*((_QWORD *)&v281 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v279 + 1);
  if (*((_QWORD *)&v279 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v279 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (SHIBYTE(v259) < 0)
    operator delete(*((void **)&v258 + 1));
  if (v248[0])
  {
    v248[1] = v248[0];
    operator delete(v248[0]);
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v240 + 1);
  if (*((_QWORD *)&v240 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v240 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  return v22;
}

void sub_18F6A1A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_18F692600((uint64_t)&STACK[0x3C0]);
  sub_18F699B04((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F6A1B90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  _BOOL4 v6;
  double *v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  int v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  int v52;
  uint64_t v53;
  __int16 v54;
  _BYTE v55[10];
  _BYTE v56[10];
  _BYTE v57[10];
  uint8_t buf[4];
  uint64_t v59;
  __int16 v60;
  _BYTE v61[10];
  _BYTE v62[10];
  _WORD v63[807];

  *(_QWORD *)&v63[803] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 872) == *(_QWORD *)(a1 + 864))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v18 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v19 = *(_QWORD *)(a1 + 1136);
      *(_DWORD *)buf = 134349056;
      v59 = v19;
      _os_log_impl(&dword_18F5B3000, v18, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,roadWithAdustment,number of particles are 0", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v20 = *(_QWORD *)(a1 + 1136);
    v52 = 134349056;
    v53 = v20;
LABEL_41:
    v24 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMapMatcher::adjustSolutionforRoadWidth()", "CoreLocation: %s\n");
LABEL_42:
    if (v24 != buf)
      free(v24);
    return;
  }
  *(_QWORD *)(a1 + 1448) = 0;
  *(_QWORD *)(a1 + 1440) = 0;
  if (!*(_BYTE *)(a1 + 1008))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v21 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v22 = *(_QWORD *)(a1 + 1136);
      *(_DWORD *)buf = 134349056;
      v59 = v22;
      _os_log_impl(&dword_18F5B3000, v21, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,roadWithAdustment,snap invalid or frc = 9", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v23 = *(_QWORD *)(a1 + 1136);
    v52 = 134349056;
    v53 = v23;
    goto LABEL_41;
  }
  if (!*(_QWORD *)(a1 + 1016))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v25 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v26 = *(_QWORD *)(a1 + 1136);
      *(_DWORD *)buf = 134349056;
      v59 = v26;
      _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,roadWithAdustment,road is nullptr", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v27 = *(_QWORD *)(a1 + 1136);
      v52 = 134349056;
      v53 = v27;
      v24 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void CLParticleMapMatcher::adjustSolutionforRoadWidth()", "CoreLocation: %s\n");
      goto LABEL_42;
    }
    return;
  }
  v50 = 0;
  v51 = 0.0;
  sub_18F71ACC4((double *)(a1 + 608), &v51, (double *)&v50, *(double *)(a1 + 1416), *(double *)(a1 + 1424), *(double *)(a1 + 1200), *(double *)(a1 + 1432), *(double *)(a1 + 1184), *(double *)(a1 + 1192));
  v2 = *(_QWORD *)(a1 + 1016);
  if (!v2)
    return;
  v3 = *(int *)(v2 + 20);
  if ((_DWORD)v3 == 9 || ((v4 = *(_DWORD *)(v2 + 72), v4 != 255) ? (v5 = v4 == 6) : (v5 = 1), v5))
  {
    v6 = *(_BYTE *)(v2 + 16) == 0;
    v7 = (double *)&unk_18F775240;
LABEL_12:
    v8 = v7[v6];
    goto LABEL_13;
  }
  v8 = *(double *)(v2 + 96);
  if (v8 < 0.000001)
  {
    v36 = *(unsigned __int8 *)(v2 + 16);
    if ((v3 & 0xFFFFFFFE) == 8)
    {
      v6 = v36 == 0;
      v7 = dbl_18F772340;
      goto LABEL_12;
    }
    if (v36)
    {
      if (v3 < 8)
      {
        v42 = (double *)&unk_18F775360;
LABEL_90:
        v8 = v42[v3];
        goto LABEL_13;
      }
      v8 = 5.55000019;
    }
    else
    {
      if (v3 < 8)
      {
        v42 = (double *)&unk_18F7753A0;
        goto LABEL_90;
      }
      v8 = 7.4000001;
    }
  }
LABEL_13:
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29907B0);
  v9 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_QWORD *)(a1 + 1136);
    v11 = *(_QWORD *)(a1 + 1016);
    v12 = *(_DWORD *)(v11 + 20);
    LODWORD(v11) = *(unsigned __int8 *)(v11 + 16);
    *(_DWORD *)buf = 134350080;
    v59 = v10;
    v60 = 1026;
    *(_DWORD *)v61 = v12;
    *(_WORD *)&v61[4] = 1026;
    *(_DWORD *)&v61[6] = v11;
    *(_WORD *)v62 = 2050;
    *(double *)&v62[2] = v8;
    v63[0] = 2050;
    *(double *)&v63[1] = v51;
    _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,frc,%{public}d,oneway,%{public}d,roadWidth,%{public}.1lf,acrossTrack,%{public}.3lf", buf, 0x2Cu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v43 = *(_QWORD *)(a1 + 1136);
    v44 = *(_QWORD *)(a1 + 1016);
    v45 = *(_DWORD *)(v44 + 20);
    LODWORD(v44) = *(unsigned __int8 *)(v44 + 16);
    v52 = 134350080;
    v53 = v43;
    v54 = 1026;
    *(_DWORD *)v55 = v45;
    *(_WORD *)&v55[4] = 1026;
    *(_DWORD *)&v55[6] = v44;
    *(_WORD *)v56 = 2050;
    *(double *)&v56[2] = v8;
    *(_WORD *)v57 = 2050;
    *(double *)&v57[2] = v51;
    v46 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMapMatcher::adjustSolutionforRoadWidth()", "CoreLocation: %s\n", v46);
    if (v46 != (char *)buf)
      free(v46);
  }
  if (v8 >= 0.000001)
  {
    *(double *)(a1 + 1552) = v8;
    v13 = *(_QWORD *)(a1 + 1280);
    v48 = *(_QWORD *)(a1 + 1288);
    v49 = v13;
    v14 = *(double *)(a1 + 768);
    v15 = *(double *)(a1 + 1136);
    if (v14 <= 0.0 || vabdd_f64(v15, v14) > 120.0)
    {
      *(_DWORD *)(a1 + 760) = sub_18F697BA0(*(double *)(a1 + 1184), *(double *)(a1 + 1192));
      *(double *)(a1 + 768) = v15;
    }
    v16 = v8 * 0.5;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 1016) + 16))
      goto LABEL_23;
    v28 = *(_DWORD *)(a1 + 760);
    v29 = 0.0;
    switch(v28)
    {
      case 2:
        if (v51 <= 0.0)
        {
          if (v51 < 0.0)
            v29 = fabs(v51) + 1.85000002;
          goto LABEL_61;
        }
        v37 = fabs(v51);
        if (v37 < v16)
          goto LABEL_24;
        v38 = v16 + -1.85000002;
        if (v16 <= 1.85000002)
          v38 = v16 * 0.85;
        v39 = v37 - v38;
        break;
      case 1:
        if (v51 < 0.0)
        {
          v40 = fabs(v51);
          if (v40 < v16)
            goto LABEL_24;
          v41 = v16 + -1.85000002;
          if (v16 <= 1.85000002)
            v41 = v16 * 0.85;
          v29 = v40 - v41;
          goto LABEL_61;
        }
        if (v51 <= 0.0)
        {
LABEL_61:
          sub_18F71AA00((double *)(a1 + 608), (double *)&v49, (double *)&v48, *(double *)(a1 + 1184), *(double *)(a1 + 1192), *(double *)(a1 + 1200), *(double *)(a1 + 1432), v29);
          *(double *)(a1 + 1568) = v29;
          *(_DWORD *)(a1 + 1408) = 2;
          v33 = v48;
          v32 = v49;
          *(_QWORD *)(a1 + 1280) = v49;
          *(_QWORD *)(a1 + 1288) = v33;
          *(_QWORD *)(a1 + 1440) = v32;
          *(_QWORD *)(a1 + 1448) = v33;
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v34 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            v35 = *(_QWORD *)(a1 + 1136);
            *(_DWORD *)buf = 134349824;
            v59 = v35;
            v60 = 2050;
            *(double *)v61 = v51;
            *(_WORD *)&v61[8] = 2050;
            *(double *)v62 = v29;
            *(_WORD *)&v62[8] = 2050;
            *(double *)v63 = v16;
            _os_log_impl(&dword_18F5B3000, v34, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,roadWidthCorrection,acrossTrack,%{public}.2lf,correction,%{public}.2lf,halfRoadWidth,%{public}.2lf", buf, 0x2Au);
          }
          if (!sub_18F5C4AE0(115, 2))
            return;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v47 = *(_QWORD *)(a1 + 1136);
          v52 = 134349824;
          v53 = v47;
          v54 = 2050;
          *(double *)v55 = v51;
          *(_WORD *)&v55[8] = 2050;
          *(double *)v56 = v29;
          *(_WORD *)&v56[8] = 2050;
          *(double *)v57 = v16;
          goto LABEL_41;
        }
        v39 = fabs(v51) + 1.85000002;
        break;
      case 0:
LABEL_23:
        v17 = fabs(v51);
        if (v17 < v16)
        {
LABEL_24:
          *(_OWORD *)(a1 + 1280) = *(_OWORD *)(a1 + 1184);
          return;
        }
        v30 = v16 + -1.85000002;
        if (v16 <= 1.85000002)
          v30 = v16 * 0.85;
        v31 = v17 - v30;
        if (v51 >= 0.0)
          v29 = -v31;
        else
          v29 = v31;
        goto LABEL_61;
      default:
        goto LABEL_61;
    }
    v29 = -v39;
    goto LABEL_61;
  }
}

void sub_18F6A2568(uint64_t a1)
{
  NSObject *v2;
  double v3;
  double v4;
  NSObject *v5;
  char *v6;
  double v7;
  double v8;
  int v10;
  int v11;
  double v12;
  NSObject *v13;
  int v14;
  int v15;
  char *v16;
  char *v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  double v21;
  __int16 v22;
  double v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 872) == *(_QWORD *)(a1 + 864) || !*(_BYTE *)(a1 + 1392))
    return;
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v2 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEBUG, "CLMM,performPartialMatching", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v16 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMapMatcher::performPartialMatching()", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
  }
  v3 = *(double *)(a1 + 1280);
  v4 = *(double *)(a1 + 1288);
  if (*(_BYTE *)(a1 + 1490) && *(_DWORD *)(a1 + 1528) == 1)
  {
    *(double *)(a1 + 1456) = v3;
    *(double *)(a1 + 1464) = v4;
    *(_DWORD *)(a1 + 2972) = 0;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v5 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEBUG, "CLMM,skipping partial match as solution is inside tunnel", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMapMatcher::performPartialMatching()", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    return;
  }
  if (*(double *)(a1 + 2200) < 4.0)
    *(_DWORD *)(a1 + 2972) = 0;
  v7 = *(double *)(a1 + 1600);
  v8 = *(double *)(a1 + 1360);
  if (v7 >= 0.0 && v7 < 25.0)
  {
    v11 = *(_DWORD *)(a1 + 2972);
    if (v8 > 10.0)
    {
LABEL_33:
      v10 = v11 + 2;
      goto LABEL_38;
    }
LABEL_35:
    if (v11 <= 0)
      v10 = 0;
    else
      v10 = v11 - 1;
    goto LABEL_38;
  }
  if (v8 <= 6.0)
  {
    if (v7 > 45.0)
    {
      if (v8 <= 8.0)
      {
        v15 = *(_DWORD *)(a1 + 2972);
        if (v8 <= 10.0)
          v10 = v15 + 4;
        else
          v10 = v15 + 3;
        goto LABEL_38;
      }
      v11 = *(_DWORD *)(a1 + 2972);
      goto LABEL_33;
    }
    v11 = *(_DWORD *)(a1 + 2972);
    goto LABEL_35;
  }
  v10 = *(_DWORD *)(a1 + 2972) + 1;
LABEL_38:
  *(_DWORD *)(a1 + 2972) = v10;
  if (v10 >= 1)
  {
    if (v10 >= 0x1F)
    {
      v10 = 30;
      *(_DWORD *)(a1 + 2972) = 30;
    }
    v12 = (double)v10 / 40.0;
    v3 = *(double *)(a1 + 1184) * v12 + (1.0 - v12) * v3;
    v4 = v12 * *(double *)(a1 + 1192) + (1.0 - v12) * v4;
    if (v7 >= 0.0 && v7 > 20.0)
      *(_QWORD *)(a1 + 1296) = *(_QWORD *)(a1 + 1232);
    *(_DWORD *)(a1 + 1408) = 3;
    *(double *)(a1 + 1280) = v3;
    *(double *)(a1 + 1288) = v4;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v13 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v14 = *(_DWORD *)(a1 + 2972);
        *(_DWORD *)buf = 67240704;
        v19 = v14;
        v20 = 2050;
        v21 = v12;
        v22 = 2050;
        v23 = 1.0 - v12;
        _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_DEBUG, "CLMM,partial snapping,poorVarFactorCount,%{public}d,weightGPS,%{public}.2lf,weightSnap,%{public}.2lf", buf, 0x1Cu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v17 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMapMatcher::performPartialMatching()", "CoreLocation: %s\n", v17);
        if (v17 != (char *)buf)
          free(v17);
      }
    }
  }
  *(double *)(a1 + 1456) = v3;
  *(double *)(a1 + 1464) = v4;
}

