uint64_t sub_18F6A2B30(uint64_t a1, double *a2, double *a3, _BYTE *a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  void *v25;
  void *v26;
  int v27;
  void **v28;
  uint64_t v29;
  void **v30;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v36;
  BOOL v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  double v41;
  NSObject *v42;
  uint64_t v43;
  NSObject *v44;
  unsigned int v45;
  NSObject *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  char *v51;
  char *v52;
  char *v53;
  void *__p[2];
  uint64_t v55;
  void *__s1[2];
  uint64_t v57;
  _OWORD v58[3];
  _BYTE v59[32];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _QWORD v65[35];
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint8_t buf[8];
  std::__shared_weak_count *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  *a4 = 1;
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v69 = v9;
  v70 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v66 = (uint64_t)&v66;
  v67 = &v66;
  v68 = 0;
  v12 = *(_OWORD *)(a1 + 1208);
  *(_OWORD *)&v59[16] = *(_OWORD *)(a1 + 1192);
  v60 = v12;
  v13 = *(_OWORD *)(a1 + 1240);
  v61 = *(_OWORD *)(a1 + 1224);
  v62 = v13;
  v14 = *(_OWORD *)(a1 + 1144);
  v58[0] = *(_OWORD *)(a1 + 1128);
  v58[1] = v14;
  v15 = *(_OWORD *)(a1 + 1176);
  v58[2] = *(_OWORD *)(a1 + 1160);
  *(_OWORD *)v59 = v15;
  if (*(char *)(a1 + 1279) < 0)
  {
    sub_18F5C6990(&v63, *(void **)(a1 + 1256), *(_QWORD *)(a1 + 1264));
  }
  else
  {
    v63 = *(_OWORD *)(a1 + 1256);
    v64 = *(_QWORD *)(a1 + 1272);
  }
  memcpy(v65, (const void *)(a1 + 1280), sizeof(v65));
  *(_OWORD *)&v59[8] = *(_OWORD *)&v65[17];
  *((_QWORD *)&v61 + 1) = v65[19];
  if (((*(uint64_t (**)(uint64_t, uint64_t *, _OWORD *, uint64_t, double))(*(_QWORD *)v9 + 64))(v9, &v66, v58, 1, *a2) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v42 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v42, OS_LOG_TYPE_DEBUG, "CLMM,roadsWithinDistance returned false", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        LOWORD(__s1[0]) = 0;
        v51 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, BOOL &)", "CoreLocation: %s\n", v51);
        if (v51 != (char *)buf)
          free(v51);
      }
    }
    v43 = 0;
    ++*(_DWORD *)(a1 + 108);
    goto LABEL_94;
  }
  if (!v68)
  {
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v44 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v44, OS_LOG_TYPE_ERROR, "CLMM,Unexpected roadsWithinDistance returned empty list", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        LOWORD(__s1[0]) = 0;
        v53 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, BOOL &)", "CoreLocation: %s\n", v53);
        if (v53 != (char *)buf)
          free(v53);
      }
    }
    v43 = 0;
    goto LABEL_94;
  }
  v16 = v67;
  if (v67 == &v66)
  {
LABEL_81:
    v45 = *(unsigned __int8 *)(a1 + 96);
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v46 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v46, OS_LOG_TYPE_INFO, "CLMM,Unexpected roadsWithinDistance returned only railways", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        LOWORD(__s1[0]) = 0;
        v52 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, BOOL &)", "CoreLocation: %s\n", v52);
        if (v52 != (char *)buf)
          free(v52);
      }
      v45 = 0;
    }
    v38 = 1;
    goto LABEL_91;
  }
  v17 = 1;
  do
  {
    v18 = v16[2];
    if (*(_BYTE *)(v18 + 17))
      goto LABEL_54;
    v19 = (std::__shared_weak_count *)v16[3];
    *(_QWORD *)buf = v16[2];
    v72 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *((_OWORD *)v16 + 3);
    v73 = *((_OWORD *)v16 + 2);
    v74 = v22;
    v75 = v16[8];
    v23 = *(_QWORD *)(a1 + 1016);
    if (*(_QWORD *)v23 == *(_QWORD *)v18)
      goto LABEL_46;
    if (*(char *)(v23 + 71) < 0)
    {
      sub_18F5C6990(__s1, *(void **)(v23 + 48), *(_QWORD *)(v23 + 56));
    }
    else
    {
      *(_OWORD *)__s1 = *(_OWORD *)(v23 + 48);
      v57 = *(_QWORD *)(v23 + 64);
    }
    if (*(char *)(v18 + 71) < 0)
    {
      sub_18F5C6990(__p, *(void **)(v18 + 48), *(_QWORD *)(v18 + 56));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v18 + 48);
      v55 = *(_QWORD *)(v18 + 64);
    }
    v24 = HIBYTE(v57);
    if (v57 >= 0)
      v25 = (void *)HIBYTE(v57);
    else
      v25 = __s1[1];
    v26 = (void *)HIBYTE(v55);
    v27 = SHIBYTE(v55);
    if (v55 < 0)
      v26 = __p[1];
    if (v25 != v26)
    {
      v37 = 0;
      if ((SHIBYTE(v55) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_57;
    }
    if (v55 >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if (SHIBYTE(v57) < 0)
    {
      v37 = memcmp(__s1[0], v28, (size_t)__s1[1]) == 0;
      goto LABEL_43;
    }
    if (HIBYTE(v57))
    {
      v29 = HIBYTE(v57) - 1;
      v30 = __s1;
      do
      {
        v32 = *(unsigned __int8 *)v30;
        v30 = (void **)((char *)v30 + 1);
        v31 = v32;
        v34 = *(unsigned __int8 *)v28;
        v28 = (void **)((char *)v28 + 1);
        v33 = v34;
        v36 = v29-- != 0;
        v37 = v31 == v33;
      }
      while (v31 == v33 && v36);
LABEL_43:
      if ((v27 & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_57;
    }
    v37 = 1;
    if ((SHIBYTE(v55) & 0x80000000) == 0)
    {
LABEL_44:
      if ((v24 & 0x80) == 0)
        goto LABEL_45;
      goto LABEL_58;
    }
LABEL_57:
    operator delete(__p[0]);
    if ((v57 & 0x8000000000000000) == 0)
    {
LABEL_45:
      if (!v37)
        goto LABEL_59;
      goto LABEL_46;
    }
LABEL_58:
    operator delete(__s1[0]);
    if (!v37)
    {
LABEL_59:
      v41 = fmod(*(double *)(a1 + 1432) - *((float *)&v73 + 2), 360.0);
      if (v41 < 0.0)
        v41 = v41 + 360.0;
      if (v41 > 180.0)
        v41 = v41 + -360.0;
      if (fabs(v41) >= *a3)
      {
        v38 = 0;
      }
      else
      {
        v38 = 1;
        *a4 = 1;
      }
      goto LABEL_47;
    }
LABEL_46:
    v38 = 16;
LABEL_47:
    if (v19)
    {
      v39 = (unint64_t *)&v19->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if ((v38 | 0x10) != 0x10)
      goto LABEL_90;
    v17 = 0;
LABEL_54:
    v16 = (uint64_t *)v16[1];
  }
  while (v16 != &v66);
  if ((v17 & 1) != 0)
    goto LABEL_81;
  v38 = 0;
  *a4 = 0;
LABEL_90:
  v45 = 1;
LABEL_91:
  if (v38)
    v43 = v45;
  else
    v43 = 1;
LABEL_94:
  if (SHIBYTE(v64) < 0)
    operator delete((void *)v63);
  sub_18F64F950(&v66);
  v47 = v70;
  if (v70)
  {
    v48 = (unint64_t *)&v70->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  return v43;
}

void sub_18F6A3334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  sub_18F64F950((uint64_t *)&STACK[0x208]);
  sub_18F5D6004((uint64_t)&STACK[0x220]);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6A33A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  _DWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  NSObject *v16;
  double v17;
  double v18;
  NSObject *v19;
  double v20;
  double v21;
  NSObject *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  double v27;
  double v28;
  double v29;
  NSObject *v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  double v34;
  NSObject *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  NSObject *v43;
  uint64_t v44;
  _QWORD *v45;
  float *v46;
  double v47;
  double v48;
  float v49;
  float *v50;
  float *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  float *v57;
  int v58;
  uint64_t *v59;
  void **v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  void *v65;
  void *v66;
  int v67;
  uint64_t v68;
  void **v69;
  int v70;
  int v71;
  int v72;
  int v73;
  BOOL v75;
  BOOL v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  double v80;
  double v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  void **v92;
  uint64_t *v93;
  double *v94;
  void *__dst[2];
  uint64_t v96;
  void *__s1[2];
  __int128 v98;
  __int128 v99;
  _QWORD v100[5];
  void *__p;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  _DWORD *v107;
  std::__shared_weak_count *v108;
  double v109;
  double v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _BYTE v114[33];
  void *v115;
  void *v116;
  uint64_t v117;
  __int128 buf;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  char v123;
  void *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 872);
  v3 = *(_QWORD *)(a1 + 864);
  if (v2 != v3 && *(_BYTE *)(a1 + 652))
    return 1;
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v5 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEBUG, "CLMM,prepareSeeding", (uint8_t *)&buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      LOWORD(v111) = 0;
      v88 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::prepareSeeding()", "CoreLocation: %s\n", v88);
      if (v88 != (char *)&buf)
        free(v88);
    }
  }
  v7 = *(_DWORD **)(a1 + 8);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  v107 = v7;
  v108 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *(double *)(a1 + 1208);
  v11 = *(double *)(a1 + 1328);
  if (v11 > 0.0)
  {
    v12 = *(double *)(a1 + 1336);
    if (v12 > 0.0)
      v10 = sqrt(v12 / 2.45 * (v12 / 2.45) + v11 / 2.45 * (v11 / 2.45));
  }
  v13 = v10 * 4.0;
  v14 = 75.0;
  if (v13 >= 75.0)
  {
    v14 = v13;
    if (v13 > 249.9999)
      v14 = 249.9999;
  }
  if (v2 == v3 || !*(_BYTE *)(a1 + 1008))
  {
LABEL_41:
    v21 = 1249.9995;
    if (v14 <= 1249.9995)
    {
      v21 = v14;
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v22 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134349056;
        *(double *)((char *)&buf + 4) = v14;
        _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_ERROR, "CLMM,Unexpected maxDistance,%{public}.1lf", (uint8_t *)&buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        LODWORD(v111) = 134349056;
        *(double *)((char *)&v111 + 4) = v14;
        v23 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::prepareSeeding()", "CoreLocation: %s\n", v23);
        if (v23 != (char *)&buf)
          free(v23);
      }
    }
    v7[9] = 0;
    v104 = (uint64_t)&v104;
    v105 = &v104;
    v106 = 0;
    v94 = (double *)(a1 + 1128);
    if (((*(uint64_t (**)(_DWORD *, uint64_t *, double))(*(_QWORD *)v7 + 64))(v7, &v104, v21) & 1) == 0)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v43 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_18F5B3000, v43, OS_LOG_TYPE_DEBUG, "CLMM,roadsWithinDistance returned false", (uint8_t *)&buf, 2u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          LOWORD(v111) = 0;
          v89 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::prepareSeeding()", "CoreLocation: %s\n", v89);
          if (v89 != (char *)&buf)
            free(v89);
        }
      }
      v4 = 0;
      ++*(_DWORD *)(a1 + 108);
LABEL_190:
      sub_18F64F950(&v104);
      if (!v6)
        return v4;
      goto LABEL_191;
    }
    if (!v106)
    {
      v4 = 0;
      ++*(_DWORD *)(a1 + 104);
      goto LABEL_190;
    }
    v93 = (uint64_t *)(a1 + 888);
    v24 = *(_QWORD *)(a1 + 896);
    v25 = *(_QWORD *)(a1 + 888);
    while (v24 != v25)
    {
      v24 -= 112;
      sub_18F6B2DD8(a1 + 904, v24);
    }
    *(_QWORD *)(a1 + 896) = v25;
    sub_18F69E014(v93, 0x60uLL);
    *(_QWORD *)(a1 + 968) = *(_QWORD *)(a1 + 960);
    v92 = (void **)(a1 + 960);
    sub_18F6A4620((void **)(a1 + 960), 0x60uLL);
    v91 = v2;
    v111 = 0uLL;
    LODWORD(v112) = 0;
    WORD2(v112) = 1;
    DWORD2(v112) = 0;
    v116 = 0;
    v117 = 0;
    v115 = 0;
    v113 = 0u;
    memset(v114, 0, sizeof(v114));
    v26 = v105;
    if (v105 != &v104)
    {
      v27 = 0.0;
      v28 = 0.0;
      v29 = 0.0;
      while (1)
      {
        if (*(_BYTE *)(v26[2] + 17) && *(_BYTE *)(a1 + 96))
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v30 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_18F5B3000, v30, OS_LOG_TYPE_DEBUG, "CLMM,including railway", (uint8_t *)&buf, 2u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            LOWORD(__s1[0]) = 0;
            v41 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::prepareSeeding()", "CoreLocation: %s\n", v41);
            if (v41 != (char *)&buf)
              free(v41);
          }
        }
        __s1[0] = 0;
        __s1[1] = 0;
        LODWORD(v98) = 0;
        WORD2(v98) = 1;
        DWORD2(v98) = 0;
        v102 = 0;
        v103 = 0;
        __p = 0;
        v99 = 0u;
        memset(v100, 0, 33);
        sub_18F623A40(__s1, v26 + 2);
        v31 = *((_OWORD *)v26 + 2);
        v32 = *((_OWORD *)v26 + 3);
        v100[0] = v26[8];
        v98 = v31;
        v99 = v32;
        v33 = __s1[0];
        if (__s1[0])
        {
          buf = 0uLL;
          *(_QWORD *)&v119 = 0;
          *((_QWORD *)&v119 + 1) = 0x3FF0000000000000;
          v120 = 0u;
          v121 = 0u;
          LODWORD(v122) = 0;
          sub_18F676F68(a1, a1 + 656, v26 + 2, v94, (double *)__dst, &v110, &v109, (uint64_t)&buf, 0);
          v100[1] = buf;
          v100[3] = v119;
          if (*(double *)&buf <= v29)
          {
            v34 = v29;
            if (*(double *)&buf > v28)
              v28 = *(double *)&buf;
          }
          else
          {
            sub_18F623A40(&v111, (uint64_t *)__s1);
            v112 = v98;
            v113 = v99;
            *(_QWORD *)v114 = v100[0];
            *(_OWORD *)&v114[8] = *(_OWORD *)&v100[1];
            *(_OWORD *)&v114[17] = *(_OWORD *)((char *)&v100[2] + 1);
            sub_18F692DD0((char *)&v115, (char *)__p, (uint64_t)v102, 0x8E38E38E38E38E39 * ((v102 - (_BYTE *)__p) >> 3));
            v34 = *(double *)&v100[1];
            v28 = v29;
          }
          v36 = *(_QWORD *)(a1 + 896);
          if (v36 >= *(_QWORD *)(a1 + 904))
          {
            v37 = sub_18F6B3118(v93, (uint64_t)__s1);
          }
          else
          {
            sub_18F6B323C(a1 + 904, *(_QWORD *)(a1 + 896), (uint64_t)__s1);
            v37 = v36 + 112;
            *(_QWORD *)(a1 + 896) = v36 + 112;
          }
          *(_QWORD *)(a1 + 896) = v37;
          v27 = v27 + *(double *)&v100[1];
          v29 = v34;
        }
        else
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v35 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_18F5B3000, v35, OS_LOG_TYPE_ERROR, "CLMM,Unexpected NULL road", (uint8_t *)&buf, 2u);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            LOWORD(__dst[0]) = 0;
            v42 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::prepareSeeding()", "CoreLocation: %s\n", v42);
            if (v42 != (char *)&buf)
              free(v42);
          }
          ++*(_DWORD *)(a1 + 104);
        }
        if (__p)
        {
          v102 = __p;
          operator delete(__p);
        }
        v38 = (std::__shared_weak_count *)__s1[1];
        if (__s1[1])
        {
          v39 = (unint64_t *)((char *)__s1[1] + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        if (!v33)
          break;
        v26 = (uint64_t *)v26[1];
        if (v26 == &v104)
          goto LABEL_107;
      }
      v4 = 0;
      goto LABEL_182;
    }
    v27 = 0.0;
LABEL_107:
    v44 = *(_QWORD *)(a1 + 888);
    if (v44 == *(_QWORD *)(a1 + 896))
    {
      v4 = 0;
      ++*(_DWORD *)(a1 + 104);
    }
    else
    {
      v45 = (_QWORD *)(a1 + 976);
      v46 = *(float **)(a1 + 968);
      v47 = 0.0;
      do
      {
        v48 = *(double *)(v44 + 56) / v27;
        *(double *)(v44 + 64) = v48;
        v47 = v47 + v48;
        v49 = v47;
        if ((unint64_t)v46 >= *v45)
        {
          v51 = (float *)*v92;
          v52 = ((char *)v46 - (_BYTE *)*v92) >> 2;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 62)
            sub_18F5F7864();
          v54 = *v45 - (_QWORD)v51;
          if (v54 >> 1 > v53)
            v53 = v54 >> 1;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
            v55 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v55 = v53;
          if (v55)
          {
            v56 = (char *)sub_18F62C554(a1 + 976, v55);
            v46 = *(float **)(a1 + 968);
            v51 = *(float **)(a1 + 960);
          }
          else
          {
            v56 = 0;
          }
          v57 = (float *)&v56[4 * v52];
          *v57 = v49;
          v50 = v57 + 1;
          while (v46 != v51)
          {
            v58 = *((_DWORD *)v46-- - 1);
            *((_DWORD *)v57-- - 1) = v58;
          }
          *(_QWORD *)(a1 + 960) = v57;
          *(_QWORD *)(a1 + 968) = v50;
          *(_QWORD *)(a1 + 976) = &v56[4 * v55];
          if (v51)
            operator delete(v51);
        }
        else
        {
          *v46 = v49;
          v50 = v46 + 1;
        }
        *(_QWORD *)(a1 + 968) = v50;
        v44 += 112;
        v46 = v50;
      }
      while (v44 != *(_QWORD *)(a1 + 896));
      *(_QWORD *)(a1 + 1624) = 0;
      if (v91 != v3)
      {
        v59 = v105;
        if (v105 == &v104)
        {
          *(_QWORD *)(a1 + 1632) = 0;
          goto LABEL_181;
        }
        while (1)
        {
          buf = 0uLL;
          LODWORD(v119) = 0;
          WORD2(v119) = 1;
          DWORD2(v119) = 0;
          v125 = 0;
          v126 = 0;
          v124 = 0;
          v120 = 0u;
          v121 = 0u;
          v122 = 0u;
          v123 = 0;
          sub_18F623A40(&buf, v59 + 2);
          v61 = *((_OWORD *)v59 + 2);
          v62 = *((_OWORD *)v59 + 3);
          *(_QWORD *)&v121 = v59[8];
          v119 = v61;
          v120 = v62;
          v63 = *(_QWORD *)(a1 + 1016);
          if ((_QWORD)buf == v63)
            goto LABEL_162;
          if (*(char *)(buf + 71) < 0)
          {
            sub_18F5C6990(__s1, *(void **)(buf + 48), *(_QWORD *)(buf + 56));
            v63 = *(_QWORD *)(a1 + 1016);
          }
          else
          {
            *(_OWORD *)__s1 = *(_OWORD *)(buf + 48);
            *(_QWORD *)&v98 = *(_QWORD *)(buf + 64);
          }
          if (*(char *)(v63 + 71) < 0)
          {
            sub_18F5C6990(__dst, *(void **)(v63 + 48), *(_QWORD *)(v63 + 56));
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(v63 + 48);
            v96 = *(_QWORD *)(v63 + 64);
          }
          v64 = BYTE7(v98);
          if ((SBYTE7(v98) & 0x80u) == 0)
            v65 = (void *)BYTE7(v98);
          else
            v65 = __s1[1];
          v66 = (void *)HIBYTE(v96);
          v67 = SHIBYTE(v96);
          if (v96 < 0)
            v66 = __dst[1];
          if (v65 == v66)
          {
            if (v96 >= 0)
              v60 = __dst;
            else
              v60 = (void **)__dst[0];
            if (SBYTE7(v98) < 0)
            {
              v76 = memcmp(__s1[0], v60, (size_t)__s1[1]) == 0;
              if ((v67 & 0x80000000) == 0)
                goto LABEL_153;
            }
            else if (BYTE7(v98))
            {
              v68 = BYTE7(v98) - 1;
              v69 = __s1;
              do
              {
                v71 = *(unsigned __int8 *)v69;
                v69 = (void **)((char *)v69 + 1);
                v70 = v71;
                v73 = *(unsigned __int8 *)v60;
                v60 = (void **)((char *)v60 + 1);
                v72 = v73;
                v75 = v68-- != 0;
                v76 = v70 == v72;
              }
              while (v70 == v72 && v75);
              if ((SHIBYTE(v96) & 0x80000000) == 0)
              {
LABEL_153:
                if ((v64 & 0x80) == 0)
                  goto LABEL_154;
                goto LABEL_158;
              }
            }
            else
            {
              v76 = 1;
              if ((SHIBYTE(v96) & 0x80000000) == 0)
                goto LABEL_153;
            }
          }
          else
          {
            v76 = 0;
            if ((SHIBYTE(v96) & 0x80000000) == 0)
              goto LABEL_153;
          }
          operator delete(__dst[0]);
          if ((BYTE7(v98) & 0x80) == 0)
          {
LABEL_154:
            if (!v76)
              goto LABEL_159;
            goto LABEL_162;
          }
LABEL_158:
          operator delete(__s1[0]);
          if (!v76)
          {
LABEL_159:
            if (*(_QWORD *)buf != **(_QWORD **)(a1 + 1016))
            {
              __s1[0] = 0;
              __s1[1] = 0;
              *(_QWORD *)&v98 = 0;
              *((_QWORD *)&v98 + 1) = 0x3FF0000000000000;
              v99 = 0u;
              memset(v100, 0, 20);
              sub_18F676F68(a1, a1 + 656, v59 + 2, v94, (double *)__dst, &v110, &v109, (uint64_t)__s1, 0);
              *((void **)&v121 + 1) = __s1[0];
              *((_QWORD *)&v122 + 1) = v98;
              if (*(double *)__s1 > *(double *)(a1 + 1624))
                *(void **)(a1 + 1624) = __s1[0];
            }
          }
LABEL_162:
          if (v124)
          {
            v125 = v124;
            operator delete(v124);
          }
          v77 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
          if (*((_QWORD *)&buf + 1))
          {
            v78 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *, void **))v77->__on_zero_shared)(v77, v60);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          v59 = (uint64_t *)v59[1];
          if (v59 == &v104)
          {
            v80 = *(double *)(a1 + 1624);
            *(_QWORD *)(a1 + 1632) = 0;
            if (v80 > 0.0)
            {
              v81 = *(double *)(a1 + 1616) / v80;
              *(double *)(a1 + 1632) = v81;
              if (v81 > 1000000.0)
                *(_QWORD *)(a1 + 1632) = 0x412E848000000000;
            }
            break;
          }
        }
      }
LABEL_181:
      v4 = 1;
    }
LABEL_182:
    if (v115)
    {
      v116 = v115;
      operator delete(v115);
    }
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
    if (*((_QWORD *)&v111 + 1))
    {
      v83 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v6 = v108;
    goto LABEL_190;
  }
  v15 = *(double *)(a1 + 1184);
  if (v15 == 0.0 && *(double *)(a1 + 1192) == 0.0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v16 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_ERROR, "CLMM,Unexpected crumb lat==lon==0", (uint8_t *)&buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
      {
LABEL_205:
        LOWORD(v111) = 0;
        v90 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::prepareSeeding()", "CoreLocation: %s\n", v90);
        if (v90 != (char *)&buf)
          free(v90);
        goto LABEL_37;
      }
LABEL_208:
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      goto LABEL_205;
    }
    goto LABEL_37;
  }
  v17 = *(double *)(a1 + 1280);
  v18 = *(double *)(a1 + 1288);
  if (v17 != 0.0 || v18 != 0.0)
  {
    v20 = sub_18F5BD064((double *)(a1 + 608), v15, *(double *)(a1 + 1192), v17, v18, *(double *)(a1 + 1200));
    if (v14 < v20)
      v14 = v20 + 10.0;
    goto LABEL_41;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29907B0);
  v19 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_ERROR, "CLMM,Unexpected crumb snapLat==snapLon==0", (uint8_t *)&buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_205;
    goto LABEL_208;
  }
LABEL_37:
  v4 = 0;
  ++*(_DWORD *)(a1 + 104);
  if (!v6)
    return v4;
LABEL_191:
  v85 = (unint64_t *)&v6->__shared_owners_;
  do
    v86 = __ldaxr(v85);
  while (__stlxr(v86 - 1, v85));
  if (!v86)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v4;
}

void sub_18F6A457C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_18F5D6004((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_18F6A4620(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      sub_18F5F7864();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_18F62C554(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_18F6A46B4(uint64_t a1, _BYTE *a2)
{
  NSObject *v4;
  float v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t result;
  int v9;
  NSObject *v10;
  std::string *v11;
  char v12;
  int v13;
  NSObject *v14;
  std::string::size_type v15;
  unsigned int v16;
  NSObject *v17;
  double v18;
  double v19;
  double v20;
  NSObject *v21;
  std::string *v22;
  double v23;
  NSObject *v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string v31;
  int v32;
  std::string *v33;
  std::string buf[68];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 872) == *(_QWORD *)(a1 + 864))
  {
    result = 1;
    *a2 = 1;
    return result;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v4 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "CLMM,assessMatchAndNeedForReseed", (uint8_t *)buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      LOWORD(v31.__r_.__value_.__l.__data_) = 0;
      v26 = (std::string *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "CoreLocation: %s\n", (const char *)v26);
      if (v26 != buf)
        free(v26);
    }
  }
  *(_QWORD *)(a1 + 1360) = *(_QWORD *)(a1 + 1088);
  *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a1 + 1576);
  v5 = *(double *)(a1 + 1632);
  *(float *)(a1 + 1308) = v5;
  *(_QWORD *)(a1 + 1368) = *(_QWORD *)(a1 + 1592);
  v6 = *(_QWORD *)(a1 + 1016);
  *(_BYTE *)(a1 + 1489) = *(_BYTE *)(v6 + 19);
  *(_BYTE *)(a1 + 1490) = *(_BYTE *)(v6 + 18);
  if (*(_BYTE *)(a1 + 1649))
    v7 = *(_BYTE *)(a1 + 1650) == 0;
  else
    v7 = 0;
  v9 = sub_18F675790(a1, a1 + 1128, v7);
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v10 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      sub_18F60DF24(a1 + 1128, buf);
      v11 = (buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? buf
          : (std::string *)buf[0].__r_.__value_.__r.__words[0];
      LODWORD(v31.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl(&dword_18F5B3000, v10, OS_LOG_TYPE_DEBUG, "CLMM,postEvaluateMatch,%{private}s", (uint8_t *)&v31, 0xCu);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      sub_18F60DF24(a1 + 1128, &v31);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v31;
      else
        v27 = (std::string *)v31.__r_.__value_.__r.__words[0];
      v32 = 136380675;
      v33 = v27;
      v28 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "CoreLocation: %s\n", (const char *)v28);
      if (v28 != buf)
        free(v28);
    }
  }
  *(_BYTE *)(a1 + 1392) = v9;
  if (*(_BYTE *)(a1 + 841))
    v12 = v9;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 1478) = v12;
  if (!*(_BYTE *)(a1 + 1488))
    sub_18F692530(a1 + 3832, a1 + 1016, v9, *(double *)(a1 + 1136), *(double *)(a1 + 1208), *(double *)(a1 + 1200), *(double *)(a1 + 1216));
  sub_18F692630(a1 + 3184, (__int128 *)(a1 + 1128));
  v13 = sub_18F692854((uint64_t *)(a1 + 3184), *(unsigned __int8 *)(a1 + 96));
  if (!v13)
  {
    if (v9)
    {
      *(_DWORD *)(a1 + 2968) = 0;
      *(_OWORD *)(a1 + 2832) = 0u;
      return v13 ^ 1u;
    }
    *(_DWORD *)(a1 + 1408) = 0;
    *(_OWORD *)(a1 + 1280) = *(_OWORD *)(a1 + 1184);
    *(_QWORD *)(a1 + 1296) = *(_QWORD *)(a1 + 1232);
    if (*(double *)(a1 + 1088) > 70.0)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v14 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v15 = *(_QWORD *)(a1 + 1088);
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349312;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v15;
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 0x4051800000000000;
          _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_DEBUG, "CLMM,Reseeding due to varFactor,%{public}.1lf,max,%{public}.1lf", (uint8_t *)buf, 0x16u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v29 = *(_QWORD *)(a1 + 1088);
          LODWORD(v31.__r_.__value_.__l.__data_) = 134349312;
          *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + 4) = v29;
          WORD2(v31.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&v31.__r_.__value_.__r.__words[1] + 6) = 0x4051800000000000;
          v30 = (std::string *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "CoreLocation: %s\n", (const char *)v30);
          if (v30 != buf)
            free(v30);
        }
      }
      *a2 = 1;
    }
    v16 = *(_DWORD *)(a1 + 2968);
    if ((v16 & 0x80000000) != 0 || (*(_DWORD *)(a1 + 2968) = v16 + 1, v16 < 0x1E))
    {
      if (*a2 || !*(_BYTE *)(a1 + 1848) || *(double *)(a1 + 1136) - *(double *)(a1 + 1976) >= 4.9)
        return v13 ^ 1u;
      if (*(double *)(a1 + 1088) <= 50.0
        || *(double *)(a1 + 1928) <= 50.0
        || (v18 = *(double *)(a1 + 1608), v18 < 0.0)
        || (v23 = *(double *)(a1 + 2448), v23 >= 2.5)
        || v18 >= 2.5
        || v23 < 0.0)
      {
        *(double *)(a1 + 2832) = *(double *)(a1 + 1800) + *(double *)(a1 + 2832);
        v19 = sub_18F5BD064((double *)(a1 + 608), *(double *)(a1 + 2120), *(double *)(a1 + 2128), *(double *)(a1 + 1280), *(double *)(a1 + 1288), *(double *)(a1 + 1200))+ *(double *)(a1 + 2840);
        *(double *)(a1 + 2840) = v19;
        v20 = *(double *)(a1 + 2832);
        if (v20 > 80.0 && v20 / v19 > 5.0)
        {
          *a2 = 1;
          if (*(_BYTE *)(a1 + 96))
          {
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            v21 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
              _os_log_impl(&dword_18F5B3000, v21, OS_LOG_TYPE_DEBUG, "CLMM,Reseeding due to stuck at dead-end while observations move away", (uint8_t *)buf, 2u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              LOWORD(v31.__r_.__value_.__l.__data_) = 0;
              v22 = (std::string *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "CoreLocation: %s\n", (const char *)v22);
              if (v22 != buf)
                free(v22);
            }
          }
        }
        return v13 ^ 1u;
      }
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_47;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v24 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_18F5B3000, v24, OS_LOG_TYPE_DEBUG, "CLMM,Reseeding due to Neff", (uint8_t *)buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_47;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      LOWORD(v31.__r_.__value_.__l.__data_) = 0;
      v25 = (std::string *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "CoreLocation: %s\n", (const char *)v25);
    }
    else
    {
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_47;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v17 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        buf[0].__r_.__value_.__r.__words[0] = 0x1E04020100;
        _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_DEBUG, "CLMM,Reseeding due to badMatchCount,max,%{public}d", (uint8_t *)buf, 8u);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_47;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v31.__r_.__value_.__r.__words[0] = 0x1E04020100;
      v25 = (std::string *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "CoreLocation: %s\n", (const char *)v25);
    }
    if (v25 != buf)
      free(v25);
LABEL_47:
    *a2 = 1;
    return v13 ^ 1u;
  }
  *(_BYTE *)(a1 + 1392) = 0;
  *(_BYTE *)(a1 + 1478) = 0;
  return v13 ^ 1u;
}

BOOL sub_18F6A5168(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  unint64_t v17;
  float *v18;
  unint64_t v19;
  float *v20;
  float *v21;
  float v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BOOL8 v30;
  __int128 v31;
  uint64_t v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v37;
  char *v38;
  void *__p;
  _BYTE *v40;
  __int128 v41;
  _QWORD v42[4];
  int v43;
  int v44;
  uint8_t buf[8];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v2 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEBUG, "CLMM,reseed", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      LOWORD(v41) = 0;
      v37 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::reseed()", "CoreLocation: %s\n", v37);
      if (v37 != (char *)buf)
        free(v37);
    }
  }
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v42[2] = *(_QWORD *)(a1 + 8);
  v42[3] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_18F6A5838(a1);
  if (*(_QWORD *)(a1 + 888) == *(_QWORD *)(a1 + 896) && (sub_18F6A33A0(a1) & 1) == 0)
  {
    v30 = 0;
    if (!v3)
      return v30;
    goto LABEL_56;
  }
  v41 = 0uLL;
  v42[0] = 0;
  sub_18F69E014((uint64_t *)&v41, 0x60uLL);
  v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 896) - *(_QWORD *)(a1 + 888)) >> 4);
  *(_DWORD *)buf = 0;
  sub_18F6B355C(&__p, v6, buf);
  sub_18F6B2E08(*(_QWORD **)(a1 + 992));
  *(_QWORD *)(a1 + 984) = a1 + 992;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  v7 = *(_QWORD *)(a1 + 896);
  v8 = *(_QWORD *)(a1 + 888);
  if (v7 != v8 && (int)(-1227133513 * ((unint64_t)(v7 - v8) >> 4)) <= 95)
  {
    v7 = *(_QWORD *)(a1 + 888);
    do
    {
      v9 = *((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1) >= v42[0])
      {
        v10 = sub_18F6B3118((uint64_t *)&v41, v7);
      }
      else
      {
        sub_18F6B323C((uint64_t)v42, *((uint64_t *)&v41 + 1), v7);
        v10 = v9 + 112;
      }
      *((_QWORD *)&v41 + 1) = v10;
      sub_18F69A3D4();
      v7 += 112;
    }
    while (v7 != *(_QWORD *)(a1 + 896));
  }
  v11 = *((_QWORD *)&v41 + 1);
  v12 = v41;
  if (*((_QWORD *)&v41 + 1) - (_QWORD)v41 != 10752)
  {
    v13 = 0;
    do
    {
      v14 = random();
      v15 = *(float **)(a1 + 960);
      v16 = *(float **)(a1 + 968);
      if (v16 == v15)
      {
        v18 = *(float **)(a1 + 968);
      }
      else
      {
        v17 = v16 - v15;
        v18 = *(float **)(a1 + 960);
        do
        {
          v19 = v17 >> 1;
          v20 = &v18[v17 >> 1];
          v22 = *v20;
          v21 = v20 + 1;
          v17 += ~(v17 >> 1);
          if (v22 < (float)((float)v14 * 4.6566e-10))
            v18 = v21;
          else
            v17 = v19;
        }
        while (v17);
      }
      if (v16 != v18)
        ++*(_DWORD *)((char *)__p + (((char *)v18 - (char *)v15) << 30 >> 30));
      ++v13;
      v11 = *((_QWORD *)&v41 + 1);
      v12 = v41;
    }
    while (96 - 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v41 + 1) - v41) >> 4) > v13);
    v7 = *(_QWORD *)(a1 + 896);
  }
  v23 = *(_QWORD *)(a1 + 888);
  if (v23 != v7)
  {
    v24 = 0;
    v25 = __p;
    do
    {
      if (v24 >= (v40 - v25) >> 2)
        break;
      if (*(int *)&v25[4 * v24] >= 1)
      {
        v26 = 0;
        do
        {
          v27 = *((_QWORD *)&v41 + 1);
          if (*((_QWORD *)&v41 + 1) >= v42[0])
          {
            v28 = sub_18F6B3118((uint64_t *)&v41, v23);
          }
          else
          {
            sub_18F6B323C((uint64_t)v42, *((uint64_t *)&v41 + 1), v23);
            v28 = v27 + 112;
          }
          *((_QWORD *)&v41 + 1) = v28;
          sub_18F69A3D4();
          ++v26;
          v25 = __p;
        }
        while (v26 < *((_DWORD *)__p + v24));
        v7 = *(_QWORD *)(a1 + 896);
      }
      v23 += 112;
      ++v24;
    }
    while (v23 != v7);
    v11 = *((_QWORD *)&v41 + 1);
    v12 = v41;
  }
  v29 = 0x6DB6DB6DB6DB6DB7 * ((v11 - v12) >> 4);
  v30 = v29 < 0x61;
  if (v29 >= 0x61)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v33 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v29;
      _os_log_impl(&dword_18F5B3000, v33, OS_LOG_TYPE_ERROR, "CLMM,Unexpected number of particles after resampling,%{public}d", buf, 8u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v43 = 67240192;
      v44 = v29;
      v38 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::reseed()", "CoreLocation: %s\n", v38);
      if (v38 != (char *)buf)
        free(v38);
    }
    ++*(_DWORD *)(a1 + 104);
  }
  else
  {
    v31 = *(_OWORD *)(a1 + 864);
    *(_QWORD *)(a1 + 864) = v12;
    *(_QWORD *)(a1 + 872) = v11;
    v41 = v31;
    v32 = *(_QWORD *)(a1 + 880);
    *(_QWORD *)(a1 + 880) = v42[0];
    v42[0] = v32;
  }
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  *(_QWORD *)buf = &v41;
  sub_18F6B2D54((void ***)buf);
  if (v3)
  {
LABEL_56:
    v34 = (unint64_t *)&v3->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v30;
}

void sub_18F6A57C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23)
{
  if (__p)
    operator delete(__p);
  a23 = &a15;
  sub_18F6B2D54((void ***)&a23);
  sub_18F5D6004((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_18F6A5838(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  _BYTE v19[20];
  __int128 v20;
  __int128 v21;
  _BYTE v22[33];
  void *__p;
  _BYTE *v24;
  uint64_t v25;
  _BYTE buf[24];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[5];
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29907B0);
  v2 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(a1 + 1136);
    v4 = *(_QWORD *)(a1 + 1184);
    v5 = *(_QWORD *)(a1 + 1192);
    *(_DWORD *)buf = 134349569;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = v4;
    *(_WORD *)&buf[22] = 2049;
    *(_QWORD *)&v27 = v5;
    _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,filterResetForReseed,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v14 = *(_QWORD *)(a1 + 1136);
    v15 = *(_QWORD *)(a1 + 1184);
    v16 = *(_QWORD *)(a1 + 1192);
    v18 = 134349569;
    *(_QWORD *)v19 = v14;
    *(_WORD *)&v19[8] = 2049;
    *(_QWORD *)&v19[10] = v15;
    *(_WORD *)&v19[18] = 2049;
    *(_QWORD *)&v20 = v16;
    v17 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMapMatcher::resetForReseed()", "CoreLocation: %s\n", v17);
    if (v17 != buf)
      free(v17);
  }
  sub_18F673EE0(a1);
  *(_DWORD *)(a1 + 2968) = -1;
  v6 = *(_QWORD *)(a1 + 872);
  v7 = *(_QWORD *)(a1 + 864);
  while (v6 != v7)
  {
    v6 -= 112;
    sub_18F6B2DD8(a1 + 880, v6);
  }
  *(_QWORD *)(a1 + 872) = v7;
  sub_18F6B2E08(*(_QWORD **)(a1 + 992));
  *(_QWORD *)(a1 + 984) = a1 + 992;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 2832) = 0u;
  sub_18F692F30((_QWORD *)(a1 + 912));
  buf[0] = 0;
  *(_OWORD *)&buf[8] = 0u;
  v27 = 0u;
  LODWORD(v28) = 0;
  WORD2(v28) = 1;
  DWORD2(v28) = 0;
  v29 = 0u;
  memset(v30, 0, 33);
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v34 = 0;
  *(_QWORD *)(a1 + 2704) = 0;
  *(_OWORD *)(a1 + 2688) = *(_OWORD *)buf;
  sub_18F623A40((_QWORD *)(a1 + 2712), (uint64_t *)&v27);
  *(_OWORD *)(a1 + 2728) = v28;
  *(_OWORD *)(a1 + 2744) = v29;
  *(_QWORD *)(a1 + 2760) = v30[0];
  *(_OWORD *)(a1 + 2768) = *(_OWORD *)&v30[1];
  *(_OWORD *)(a1 + 2777) = *(_OWORD *)((char *)&v30[2] + 1);
  if ((_BYTE *)(a1 + 2688) != buf)
    sub_18F692DD0((char *)(a1 + 2800), (char *)v31, (uint64_t)v32, 0x8E38E38E38E38E39 * ((v32 - (_BYTE *)v31) >> 3));
  *(_DWORD *)(a1 + 2824) = v34;
  *(_DWORD *)(a1 + 2972) = 0;
  LOBYTE(v18) = 0;
  *(_QWORD *)&v19[4] = 0;
  *(_QWORD *)&v19[12] = 0;
  LODWORD(v20) = 0;
  WORD2(v20) = 1;
  DWORD2(v20) = 0;
  v24 = 0;
  v25 = 0;
  __p = 0;
  v21 = 0u;
  memset(v22, 0, sizeof(v22));
  *(_BYTE *)(a1 + 2848) = 0;
  sub_18F623A40((_QWORD *)(a1 + 2856), (uint64_t *)&v19[4]);
  *(_OWORD *)(a1 + 2872) = v20;
  *(_OWORD *)(a1 + 2888) = v21;
  *(_QWORD *)(a1 + 2904) = *(_QWORD *)v22;
  *(_OWORD *)(a1 + 2912) = *(_OWORD *)&v22[8];
  *(_OWORD *)(a1 + 2921) = *(_OWORD *)&v22[17];
  if ((int *)(a1 + 2848) != &v18)
    sub_18F692DD0((char *)(a1 + 2944), (char *)__p, (uint64_t)v24, 0x8E38E38E38E38E39 * ((v24 - (_BYTE *)__p) >> 3));
  sub_18F6A5CB8(a1 + 3832);
  *(_DWORD *)(a1 + 4040) = 0;
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  v8 = *(std::__shared_weak_count **)&v19[12];
  if (*(_QWORD *)&v19[12])
  {
    v9 = (unint64_t *)(*(_QWORD *)&v19[12] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_18F6A5C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_18F699ACC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_18F6A5CB8(uint64_t a1)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _BYTE v14[24];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[33];
  void *__p;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;

  v14[0] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v14[8] = _Q0;
  v16 = 0uLL;
  v15 = 0;
  v17 = _Q0;
  v18 = 0;
  v19 = 0;
  LODWORD(v20) = 0;
  WORD2(v20) = 1;
  DWORD2(v20) = 0;
  __p = 0;
  v24 = 0;
  v21 = 0u;
  memset(v22, 0, sizeof(v22));
  v25 = 0;
  v26 = 0xBFF0000000000000;
  v7 = *(_OWORD *)v14;
  v8 = *(unint64_t *)&v14[16];
  v9 = v17;
  *(_OWORD *)(a1 + 32) = 0uLL;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  sub_18F623A40((_QWORD *)(a1 + 64), &v18);
  v10 = v21;
  *(_OWORD *)(a1 + 80) = v20;
  *(_OWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)v22;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v22[8];
  *(_OWORD *)(a1 + 129) = *(_OWORD *)&v22[17];
  if (v14 != (_BYTE *)a1)
    sub_18F692DD0((char *)(a1 + 152), (char *)__p, (uint64_t)v24, 0x8E38E38E38E38E39 * ((v24 - (_BYTE *)__p) >> 3));
  *(_QWORD *)(a1 + 176) = v26;
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_18F6A5DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F699A2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F6A5E08(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29907B0);
  v2 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[142];
    v4 = a1[148];
    v5 = a1[149];
    *(_DWORD *)buf = 134349569;
    v10 = v3;
    v11 = 2049;
    v12 = v4;
    v13 = 2049;
    v14 = v5;
    _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,filterReset,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual void CLParticleMapMatcher::reset()", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
  sub_18F6A5838((uint64_t)a1);
  v6 = a1[112];
  v7 = a1[111];
  while (v6 != v7)
  {
    v6 -= 112;
    sub_18F6B2DD8((uint64_t)(a1 + 113), v6);
  }
  a1[112] = v7;
  a1[121] = a1[120];
  sub_18F6A6064((uint64_t)(a1 + 126));
  sub_18F6A6064((uint64_t)(a1 + 231));
  sub_18F64F950(a1 + 381);
  sub_18F64F950(a1 + 384);
  sub_18F64F950(a1 + 387);
  sub_18F64F950(a1 + 390);
}

void sub_18F6A6064(uint64_t a1)
{
  uint64_t *v2;
  __int128 v3;
  __int128 v4;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _BYTE v13[88];
  __int128 v14;
  _BYTE v15[280];
  uint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[33];
  char *v21;
  char *v22;
  uint64_t v23;

  v16 = 0;
  v17 = 0;
  LODWORD(v18) = 0;
  WORD2(v18) = 1;
  DWORD2(v18) = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  v2 = (uint64_t *)(a1 + 8);
  sub_18F623A40((_QWORD *)(a1 + 8), &v16);
  v3 = v19;
  *(_OWORD *)(a1 + 24) = v18;
  *(_OWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)v20;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)&v20[8];
  *(_OWORD *)(a1 + 73) = *(_OWORD *)&v20[17];
  if (v2 != &v16)
    sub_18F692DD0((char *)(a1 + 96), v21, (uint64_t)v22, 0x8E38E38E38E38E39 * ((v22 - v21) >> 3));
  sub_18F623A40((_QWORD *)(a1 + 672), &v16);
  v4 = v19;
  *(_OWORD *)(a1 + 688) = v18;
  *(_OWORD *)(a1 + 704) = v4;
  *(_QWORD *)(a1 + 720) = *(_QWORD *)v20;
  *(_OWORD *)(a1 + 728) = *(_OWORD *)&v20[8];
  *(_OWORD *)(a1 + 737) = *(_OWORD *)&v20[17];
  if ((uint64_t *)(a1 + 672) != &v16)
    sub_18F692DD0((char *)(a1 + 760), v21, (uint64_t)v22, 0x8E38E38E38E38E39 * ((v22 - v21) >> 3));
  __asm { FMOV            V0.2D, #-1.0 }
  *(_QWORD *)v13 = 0xBFF0000000000000;
  *(_QWORD *)&v15[120] = 0;
  *(_DWORD *)&v15[128] = 0;
  memset(&v15[80], 0, 34);
  memset(&v15[136], 0, 75);
  memset(&v15[216], 0, 56);
  memset(&v13[8], 0, 80);
  memset(v15, 0, 78);
  v14 = 0u;
  *(_QWORD *)&v15[272] = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)v13;
  *(_OWORD *)(a1 + 152) = 0uLL;
  *(_OWORD *)(a1 + 136) = _Q0;
  *(_OWORD *)(a1 + 120) = 0uLL;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v13[64];
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v13[48];
  *(_OWORD *)(a1 + 200) = *(_OWORD *)&v13[32];
  *(_OWORD *)(a1 + 184) = *(_OWORD *)&v13[16];
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)&v13[80]);
  memcpy((void *)(a1 + 272), v15, 0x118uLL);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_DWORD *)(a1 + 639) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_QWORD *)(a1 + 830) = 0;
  if (SHIBYTE(v14) < 0)
    operator delete(*(void **)&v13[80]);
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_18F6A62EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a30 < 0)
    operator delete(__p);
  sub_18F692600(v30 - 160);
  _Unwind_Resume(a1);
}

BOOL sub_18F6A6318(uint64_t a1, char *a2, double a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL8 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v6 = (unsigned __int8 *)(a1 + 3832);
  v14 = v5;
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = sub_18F690058(v6, a2, &v14, *(unsigned __int8 *)(a1 + 96), a3);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_18F6A63AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18F6A63C0(uint64_t a1)
{
  sub_18F6A5CB8(a1 + 3832);
}

uint64_t sub_18F6A63C8(uint64_t a1, uint64_t a2)
{
  double *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v3 = (double *)(a1 + 3832);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = sub_18F6911C0(v3, a2, &v12, *(unsigned __int8 *)(a1 + 96));
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v7;
}

void sub_18F6A645C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6A6470(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  _QWORD *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  void *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  void **v49;
  void *v50;
  void *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t i;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  float v96;
  float v97;
  double v98;
  NSObject *v99;
  unsigned int v100;
  unint64_t v101;
  float v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  uint64_t v107;
  NSObject *v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  double v116;
  double v117;
  NSObject *v118;
  double v119;
  double v120;
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  double v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  double v140;
  BOOL v141;
  uint64_t v142;
  char v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  void **v147;
  void **v148;
  uint64_t v149;
  uint64_t v150;
  void **v151;
  void *v152;
  void *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  int64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  __n128 *j;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  int v189;
  unint64_t *v190;
  unint64_t v191;
  NSObject *v192;
  char v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  NSObject *v203;
  __int128 v204;
  __n128 **v205;
  uint64_t v206;
  unint64_t v207;
  double v208;
  uint64_t v211;
  NSObject *v212;
  uint64_t v213;
  _OWORD *v214;
  uint64_t v215;
  double v216;
  double v217;
  double v218;
  double *v219;
  double *v220;
  BOOL v221;
  double v222;
  double v223;
  _BOOL8 v225;
  unint64_t v226;
  NSObject *v227;
  char *v228;
  double v229;
  unint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  NSObject *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  double v254;
  uint64_t v255;
  uint64_t v256;
  __int128 v257;
  double v258;
  double v259;
  double v260;
  double v261;
  BOOL v262;
  double v264;
  NSObject *v265;
  double v266;
  uint64_t v267;
  int v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  _OWORD *v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  __int128 v285;
  __int128 v286;
  uint64_t v287;
  NSObject *v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  double v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  NSObject *v298;
  char *v299;
  uint64_t v300;
  char *v301;
  NSObject *v302;
  unint64_t *v303;
  unint64_t v304;
  double v305;
  double v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t *v313;
  unint64_t v314;
  unint64_t v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  char *v325;
  char *v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  char *v330;
  char *v331;
  uint64_t v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  NSObject *v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  double v346;
  uint64_t v347;
  float *v348;
  _QWORD *v349;
  double v350;
  uint64_t v351;
  double v352;
  float v353;
  float *v354;
  float *v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  unint64_t v359;
  char *v360;
  float *v361;
  int v362;
  uint64_t v363;
  uint64_t v364;
  double v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  _BYTE *v369;
  NSObject *v370;
  unsigned int v371;
  int v372;
  unint64_t v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  float *v379;
  float *v380;
  unint64_t v381;
  unint64_t v382;
  float *v383;
  float *v384;
  float v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  NSObject *v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  NSObject *v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  _QWORD *v404;
  _QWORD *v405;
  uint64_t v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  double *v413;
  uint64_t v414;
  int v415;
  double *v416;
  double v417;
  uint64_t v418;
  uint64_t v419;
  double v420;
  uint64_t v421;
  __int128 v422;
  __int128 v423;
  NSObject *v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  int v428;
  _QWORD *v429;
  _QWORD *v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  int v434;
  char *v435;
  int v436;
  _QWORD *v437;
  uint64_t v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  double v443;
  double v444;
  double v445;
  double v446;
  long double v447;
  int v448;
  NSObject *v449;
  int v450;
  NSObject *v451;
  uint64_t v452;
  uint64_t v453;
  int v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  unint64_t *v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  int v465;
  uint64_t v466;
  int v467;
  double v468;
  double v469;
  double v470;
  double v471;
  uint64_t v472;
  double v473;
  double v474;
  double v475;
  uint64_t v476;
  NSObject *v477;
  uint64_t v478;
  uint64_t v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  _OWORD *v484;
  std::__shared_weak_count *v485;
  unint64_t *v486;
  unint64_t v487;
  char v488;
  unint64_t v489;
  char v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  uint64_t v497;
  uint64_t v498;
  char *v499;
  NSObject *v500;
  char *v501;
  NSObject *v502;
  uint64_t v503;
  uint64_t v504;
  int v505;
  int v506;
  NSObject *v507;
  uint64_t v508;
  uint64_t v509;
  _QWORD *v510;
  _QWORD *v511;
  NSObject *v512;
  char *v513;
  uint64_t v514;
  uint64_t v515;
  int v516;
  char *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  int v522;
  int v523;
  char *v524;
  char *v525;
  NSObject *v526;
  char *v527;
  NSObject *v528;
  std::__shared_weak_count *v529;
  unint64_t *v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  double v534;
  uint64_t v535;
  uint64_t v536;
  _BOOL4 v537;
  unint64_t *v538;
  unint64_t v539;
  uint64_t *v541;
  uint64_t k;
  uint64_t v543;
  unint64_t *v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t *v548;
  unint64_t v549;
  float64x2_t *v550;
  float64x2_t *v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t *v554;
  float64x2_t *v555;
  uint64_t v556;
  int32x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  int32x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  int32x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  int32x2_t v566;
  int v567;
  NSObject *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  unint64_t *v573;
  unint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t *v577;
  unint64_t v578;
  float64x2_t *v579;
  float64x2_t *v580;
  uint64_t v581;
  NSObject *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  int32x2_t v587;
  unsigned __int8 v588;
  _BOOL4 v589;
  char *v590;
  uint64_t v591;
  char *v592;
  char *v593;
  NSObject *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  int v601;
  uint64_t v602;
  uint64_t v603;
  _BYTE *v604;
  _QWORD *v605;
  int v606;
  double v607;
  long double v608;
  NSObject *v609;
  NSObject *v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  NSObject *v617;
  int v618;
  _QWORD *v619;
  double v620;
  double v621;
  int v622;
  NSObject *v624;
  uint64_t v625;
  uint64_t v626;
  char *v627;
  char *v628;
  NSObject *v629;
  uint64_t v630;
  int v631;
  char *v632;
  NSObject *v633;
  uint64_t v634;
  int v635;
  uint64_t v636;
  int v637;
  char *v638;
  char *v639;
  char *v640;
  char *v641;
  char *v642;
  char *v643;
  uint64_t v644;
  char *v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  char *v649;
  char *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  char *v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  char *v661;
  _OWORD *v662;
  int v663;
  __int128 v664;
  __int128 v665;
  unint64_t v666;
  uint64_t v667;
  _QWORD *v668;
  std::string *v669;
  int v670;
  uint64_t v671;
  uint64_t v672;
  _BYTE *v673;
  uint64_t v674;
  uint64_t v675;
  float64x2_t v676;
  uint64_t v677;
  void **v678;
  double *v679;
  float64x2_t v680;
  __int128 *v681;
  void *__src;
  std::string *__str;
  double *__dst;
  _QWORD *v685;
  std::__shared_weak_count *v686;
  int v687;
  __n128 *v688;
  __n128 **v689;
  unint64_t v690;
  double v691[2];
  uint64_t v692;
  std::__shared_weak_count *v693;
  unsigned __int8 v694;
  uint64_t v695;
  std::__shared_weak_count *v696;
  _OWORD *v697;
  _OWORD *v698;
  unint64_t v699;
  _BYTE v700[24];
  uint64_t v701;
  __int16 v702;
  uint64_t v703;
  __int16 v704;
  uint64_t v705;
  __int16 v706;
  uint64_t v707;
  __int16 v708;
  uint64_t v709;
  _BYTE v710[62];
  __int16 v711;
  uint64_t v712;
  __int16 v713;
  uint64_t v714;
  _BYTE v715[48];
  _BYTE v716[384];
  _BYTE buf[64];
  uint64_t v718;
  __int16 v719;
  uint64_t v720;
  uint64_t v721;

  v721 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v686 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v5)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v25 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v26 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v26;
      _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,invalid geometry pointer, mapMatch", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_832;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v27 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)v715 = 134349056;
    *(_QWORD *)&v715[4] = v27;
    v28 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v28);
LABEL_153:
    if (v28 != buf)
      free(v28);
    goto LABEL_832;
  }
  if (*(_BYTE *)(a1 + 96))
    sub_18F6F045C((uint64_t)v5);
  v8 = a1 + 1008;
  *(_BYTE *)(a1 + 1848) = *(_BYTE *)(a1 + 1008);
  v685 = (_QWORD *)(a1 + 1856);
  v677 = a1 + 1016;
  sub_18F623A40((_QWORD *)(a1 + 1856), (uint64_t *)(a1 + 1016));
  *(_OWORD *)(a1 + 1872) = *(_OWORD *)(a1 + 1032);
  *(_OWORD *)(a1 + 1888) = *(_OWORD *)(a1 + 1048);
  *(_QWORD *)(a1 + 1904) = *(_QWORD *)(a1 + 1064);
  *(_OWORD *)(a1 + 1912) = *(_OWORD *)(a1 + 1072);
  *(_OWORD *)(a1 + 1921) = *(_OWORD *)(a1 + 1081);
  sub_18F692DD0((char *)(a1 + 1944), *(char **)(a1 + 1104), *(_QWORD *)(a1 + 1112), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 1112) - *(_QWORD *)(a1 + 1104)) >> 3));
  *(_OWORD *)(a1 + 2032) = *(_OWORD *)(a1 + 1192);
  *(_OWORD *)(a1 + 2048) = *(_OWORD *)(a1 + 1208);
  *(_OWORD *)(a1 + 2064) = *(_OWORD *)(a1 + 1224);
  *(_OWORD *)(a1 + 2080) = *(_OWORD *)(a1 + 1240);
  *(_OWORD *)(a1 + 1968) = *(_OWORD *)(a1 + 1128);
  *(_OWORD *)(a1 + 1984) = *(_OWORD *)(a1 + 1144);
  *(_OWORD *)(a1 + 2000) = *(_OWORD *)(a1 + 1160);
  *(_OWORD *)(a1 + 2016) = *(_OWORD *)(a1 + 1176);
  __str = (std::string *)(a1 + 1256);
  std::string::operator=((std::string *)(a1 + 2096), (const std::string *)(a1 + 1256));
  __dst = (double *)(a1 + 1280);
  memcpy((void *)(a1 + 2120), (const void *)(a1 + 1280), 0x118uLL);
  v9 = *(_OWORD *)(a1 + 1608);
  *(_OWORD *)(a1 + 2432) = *(_OWORD *)(a1 + 1592);
  *(_OWORD *)(a1 + 2448) = v9;
  *(_OWORD *)(a1 + 2464) = *(_OWORD *)(a1 + 1624);
  *(_OWORD *)(a1 + 2475) = *(_OWORD *)(a1 + 1635);
  v10 = *(_OWORD *)(a1 + 1576);
  *(_OWORD *)(a1 + 2400) = *(_OWORD *)(a1 + 1560);
  *(_OWORD *)(a1 + 2416) = v10;
  v675 = a1 + 1656;
  sub_18F623A40((_QWORD *)(a1 + 2496), (uint64_t *)(a1 + 1656));
  *(_BYTE *)(a1 + 2512) = *(_BYTE *)(a1 + 1672);
  sub_18F623A40((_QWORD *)(a1 + 2520), (uint64_t *)(a1 + 1680));
  v11 = *(_OWORD *)(a1 + 1712);
  *(_OWORD *)(a1 + 2536) = *(_OWORD *)(a1 + 1696);
  *(_OWORD *)(a1 + 2552) = v11;
  *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a1 + 1728);
  *(_OWORD *)(a1 + 2576) = *(_OWORD *)(a1 + 1736);
  *(_OWORD *)(a1 + 2585) = *(_OWORD *)(a1 + 1745);
  sub_18F692DD0((char *)(a1 + 2608), *(char **)(a1 + 1768), *(_QWORD *)(a1 + 1776), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 1776) - *(_QWORD *)(a1 + 1768)) >> 3));
  v12 = *(_OWORD *)(a1 + 1808);
  *(_OWORD *)(a1 + 2632) = *(_OWORD *)(a1 + 1792);
  *(_OWORD *)(a1 + 2648) = v12;
  *(_OWORD *)(a1 + 2664) = *(_OWORD *)(a1 + 1824);
  *(_QWORD *)(a1 + 2678) = *(_QWORD *)(a1 + 1838);
  v13 = *(double *)(a2 + 96);
  if (v13 >= 0.0)
  {
    *(_QWORD *)(a1 + 3880) = *(_QWORD *)(a2 + 8);
    *(double *)(a1 + 3840) = v13;
  }
  *(_BYTE *)(a1 + 3720) = 0;
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 848) = v14;
  *(_QWORD *)(a1 + 856) = v15;
  v16 = *(unsigned __int8 *)(a1 + 1357);
  v17 = *(_QWORD *)(a1 + 1136);
  if (*(unsigned __int8 *)(a1 + 816) != v16 || *(double *)(a1 + 832) == 0.0)
  {
    *(_QWORD *)(a1 + 832) = v17;
    *(_BYTE *)(a1 + 816) = v16;
  }
  *(_QWORD *)(a1 + 824) = v17;
  v18 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 152) = v18;
  v19 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 160) = v19;
  *(_QWORD *)(a2 + 168) = v14;
  *(_QWORD *)(a2 + 288) = v18;
  *(_QWORD *)(a2 + 296) = v19;
  *(_QWORD *)(a2 + 304) = v14;
  *(_QWORD *)(a2 + 312) = v18;
  *(_QWORD *)(a2 + 320) = v19;
  *(_QWORD *)(a2 + 328) = v18;
  *(_QWORD *)(a2 + 336) = v19;
  *(_DWORD *)(a2 + 280) = 0;
  __src = (void *)(a2 + 152);
  if (*(double *)(a2 + 8) - *(double *)(a1 + 1976) <= 6.0)
  {
    v21 = *(char **)(a1 + 3016);
    v20 = *(void ***)(a1 + 3008);
    goto LABEL_30;
  }
  v20 = *(void ***)(a1 + 3008);
  v21 = *(char **)(a1 + 3016);
  *(_QWORD *)(a1 + 3040) = 0;
  v22 = v21 - (char *)v20;
  if ((unint64_t)(v21 - (char *)v20) >= 0x11)
  {
    do
    {
      operator delete(*v20);
      v20 = (void **)(*(_QWORD *)(a1 + 3008) + 8);
      *(_QWORD *)(a1 + 3008) = v20;
      v21 = *(char **)(a1 + 3016);
      v22 = v21 - (char *)v20;
    }
    while ((unint64_t)(v21 - (char *)v20) > 0x10);
  }
  v23 = v22 >> 3;
  if (v23 == 1)
  {
    v24 = 512;
    goto LABEL_28;
  }
  if (v23 == 2)
  {
    v24 = 1024;
LABEL_28:
    *(_QWORD *)(a1 + 3032) = v24;
  }
  *(_QWORD *)(a1 + 2992) = 0;
  v13 = *(double *)(a2 + 96);
LABEL_30:
  v29 = v21 - (char *)v20;
  if (v21 == (char *)v20)
    v30 = 0;
  else
    v30 = ((v21 - (char *)v20) << 7) - 1;
  v31 = *(_QWORD *)(a1 + 3032);
  v32 = *(_QWORD *)(a1 + 3040);
  v33 = v32 + v31;
  if (v30 == v32 + v31)
  {
    if (v31 < 0x400)
    {
      v671 = a2;
      v47 = v29 >> 3;
      v48 = *(char **)(a1 + 3024);
      v49 = *(void ***)(a1 + 3000);
      if (v29 >> 3 >= (unint64_t)((v48 - (char *)v49) >> 3))
      {
        if (v48 == (char *)v49)
          v52 = 1;
        else
          v52 = (v48 - (char *)v49) >> 2;
        v53 = (char *)sub_18F65FEC8(v52);
        v55 = v54;
        v56 = operator new(0x1000uLL);
        v57 = &v53[8 * v47];
        v58 = &v53[8 * v55];
        if (v47 == v55)
        {
          v59 = 8 * v47;
          a2 = v671;
          if (v29 < 1)
          {
            v74 = v56;
            v75 = v59 >> 2;
            if (v21 == (char *)v20)
              v76 = 1;
            else
              v76 = v75;
            v77 = (char *)sub_18F65FEC8(v76);
            v57 = &v77[8 * (v76 >> 2)];
            v58 = &v77[8 * v78];
            if (v53)
              operator delete(v53);
            v53 = v77;
            v56 = v74;
          }
          else
          {
            v60 = v59 >> 3;
            if (v60 >= -1)
              v61 = v60 + 1;
            else
              v61 = v60 + 2;
            v57 -= 8 * (v61 >> 1);
          }
        }
        else
        {
          a2 = v671;
        }
        *(_QWORD *)v57 = v56;
        v79 = v57 + 8;
        for (i = *(_QWORD *)(a1 + 3016); i != *(_QWORD *)(a1 + 3008); i -= 8)
        {
          if (v57 == v53)
          {
            if (v79 >= v58)
            {
              if (v58 == v53)
                v85 = 1;
              else
                v85 = (v58 - v53) >> 2;
              v86 = (char *)sub_18F65FEC8(v85);
              v88 = v86;
              v57 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
              v89 = v79 - v53;
              _ZF = v79 == v53;
              v79 = v57;
              if (!_ZF)
              {
                v79 = &v57[v89 & 0xFFFFFFFFFFFFFFF8];
                v90 = 8 * (v89 >> 3);
                v91 = v57;
                v92 = (uint64_t *)v53;
                do
                {
                  v93 = *v92++;
                  *(_QWORD *)v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              v58 = &v86[8 * v87];
              if (v53)
                operator delete(v53);
              v53 = v88;
            }
            else
            {
              v81 = (v58 - v79) >> 3;
              if (v81 >= -1)
                v82 = v81 + 1;
              else
                v82 = v81 + 2;
              v83 = v82 >> 1;
              v57 = &v53[8 * (v82 >> 1)];
              v84 = v53;
              if (v79 != v53)
              {
                memmove(v57, v53, v79 - v53);
                v84 = v79;
              }
              v79 = &v84[8 * v83];
            }
          }
          v94 = *(_QWORD *)(i - 8);
          *((_QWORD *)v57 - 1) = v94;
          v57 -= 8;
        }
        v95 = *(void **)(a1 + 3000);
        *(_QWORD *)(a1 + 3000) = v53;
        *(_QWORD *)(a1 + 3008) = v57;
        *(_QWORD *)(a1 + 3016) = v79;
        *(_QWORD *)(a1 + 3024) = v58;
        v8 = a1 + 1008;
        if (v95)
          operator delete(v95);
        goto LABEL_96;
      }
      v50 = operator new(0x1000uLL);
      v51 = v50;
      if (v48 != v21)
      {
        *(_QWORD *)v21 = v50;
        *(_QWORD *)(a1 + 3016) += 8;
        v8 = a1 + 1008;
LABEL_96:
        v32 = *(_QWORD *)(a1 + 3040);
        v20 = *(void ***)(a1 + 3008);
        v31 = *(_QWORD *)(a1 + 3032);
        v33 = v31 + v32;
        goto LABEL_97;
      }
      if (v20 == v49)
      {
        if (v21 == (char *)v20)
          v144 = 1;
        else
          v144 = (v48 - (char *)v20) >> 2;
        v145 = (char *)sub_18F65FEC8(v144);
        v20 = (void **)&v145[(2 * v144 + 6) & 0xFFFFFFFFFFFFFFF8];
        v147 = *(void ***)(a1 + 3008);
        v148 = v20;
        v149 = *(_QWORD *)(a1 + 3016) - (_QWORD)v147;
        v8 = a1 + 1008;
        if (v149)
        {
          v148 = (void **)((char *)v20 + (v149 & 0xFFFFFFFFFFFFFFF8));
          v150 = 8 * (v149 >> 3);
          v151 = v20;
          do
          {
            v152 = *v147++;
            *v151++ = v152;
            v150 -= 8;
          }
          while (v150);
        }
        v153 = *(void **)(a1 + 3000);
        *(_QWORD *)(a1 + 3000) = v145;
        *(_QWORD *)(a1 + 3008) = v20;
        *(_QWORD *)(a1 + 3016) = v148;
        *(_QWORD *)(a1 + 3024) = &v145[8 * v146];
        if (v153)
        {
          operator delete(v153);
          v20 = *(void ***)(a1 + 3008);
        }
      }
      else
      {
        v8 = a1 + 1008;
      }
      *(v20 - 1) = v51;
      v154 = *(char **)(a1 + 3008);
      *(_QWORD *)(a1 + 3008) = v154 - 8;
      v155 = *((_QWORD *)v154 - 1);
      *(_QWORD *)(a1 + 3008) = v154;
      v156 = *(char **)(a1 + 3016);
      if (v156 == *(char **)(a1 + 3024))
      {
        v157 = *(_QWORD *)(a1 + 3000);
        v158 = (uint64_t)&v154[-v157];
        if ((unint64_t)v154 <= v157)
        {
          v166 = (uint64_t)&v156[-v157];
          _ZF = v166 == 0;
          v167 = v166 >> 2;
          if (_ZF)
            v168 = 1;
          else
            v168 = v167;
          v169 = (char *)sub_18F65FEC8(v168);
          v171 = &v169[8 * (v168 >> 2)];
          v172 = *(uint64_t **)(a1 + 3008);
          v156 = v171;
          v173 = *(_QWORD *)(a1 + 3016) - (_QWORD)v172;
          v8 = a1 + 1008;
          if (v173)
          {
            v156 = &v171[v173 & 0xFFFFFFFFFFFFFFF8];
            v174 = 8 * (v173 >> 3);
            v175 = &v169[8 * (v168 >> 2)];
            do
            {
              v176 = *v172++;
              *(_QWORD *)v175 = v176;
              v175 += 8;
              v174 -= 8;
            }
            while (v174);
          }
          v177 = *(void **)(a1 + 3000);
          *(_QWORD *)(a1 + 3000) = v169;
          *(_QWORD *)(a1 + 3008) = v171;
          *(_QWORD *)(a1 + 3016) = v156;
          *(_QWORD *)(a1 + 3024) = &v169[8 * v170];
          if (v177)
          {
            operator delete(v177);
            v156 = *(char **)(a1 + 3016);
          }
        }
        else
        {
          v159 = v158 >> 3;
          v121 = v158 >> 3 < -1;
          v160 = (v158 >> 3) + 2;
          if (v121)
            v161 = v160;
          else
            v161 = v159 + 1;
          v162 = -(v161 >> 1);
          v163 = v161 >> 1;
          v164 = &v154[-8 * v163];
          v165 = v156 - v154;
          if (v156 != v154)
          {
            memmove(&v154[-8 * v163], v154, v156 - v154);
            v154 = *(char **)(a1 + 3008);
          }
          v156 = &v164[v165];
          *(_QWORD *)(a1 + 3016) = &v164[v165];
          *(_QWORD *)(a1 + 3008) = &v154[8 * v162];
        }
      }
      *(_QWORD *)v156 = v155;
    }
    else
    {
      *(_QWORD *)(a1 + 3032) = v31 - 1024;
      v36 = *v20;
      v34 = (char *)(v20 + 1);
      v35 = v36;
      *(_QWORD *)(a1 + 3008) = v34;
      if (v21 == *(char **)(a1 + 3024))
      {
        v37 = *(_QWORD *)(a1 + 3000);
        v38 = (uint64_t)&v34[-v37];
        if ((unint64_t)v34 <= v37)
        {
          v62 = (uint64_t)&v21[-v37];
          _ZF = v62 == 0;
          v63 = v62 >> 2;
          if (_ZF)
            v64 = 1;
          else
            v64 = v63;
          v65 = (char *)sub_18F65FEC8(v64);
          v67 = &v65[8 * (v64 >> 2)];
          v68 = *(uint64_t **)(a1 + 3008);
          v21 = v67;
          v69 = *(_QWORD *)(a1 + 3016) - (_QWORD)v68;
          if (v69)
          {
            v21 = &v67[v69 & 0xFFFFFFFFFFFFFFF8];
            v70 = 8 * (v69 >> 3);
            v71 = &v65[8 * (v64 >> 2)];
            do
            {
              v72 = *v68++;
              *(_QWORD *)v71 = v72;
              v71 += 8;
              v70 -= 8;
            }
            while (v70);
          }
          v73 = *(void **)(a1 + 3000);
          *(_QWORD *)(a1 + 3000) = v65;
          *(_QWORD *)(a1 + 3008) = v67;
          *(_QWORD *)(a1 + 3016) = v21;
          *(_QWORD *)(a1 + 3024) = &v65[8 * v66];
          if (v73)
          {
            operator delete(v73);
            v21 = *(char **)(a1 + 3016);
          }
        }
        else
        {
          v39 = v38 >> 3;
          v121 = v38 >> 3 < -1;
          v40 = (v38 >> 3) + 2;
          if (v121)
            v41 = v40;
          else
            v41 = v39 + 1;
          v42 = -(v41 >> 1);
          v43 = v41 >> 1;
          v44 = &v34[-8 * v43];
          v45 = v21 - v34;
          if (v21 != v34)
          {
            memmove(&v34[-8 * v43], v34, v21 - v34);
            v21 = *(char **)(a1 + 3008);
          }
          v46 = &v21[8 * v42];
          v21 = &v44[v45];
          *(_QWORD *)(a1 + 3016) = &v44[v45];
          *(_QWORD *)(a1 + 3008) = v46;
        }
      }
      *(_QWORD *)v21 = v35;
    }
    *(_QWORD *)(a1 + 3016) += 8;
    goto LABEL_96;
  }
LABEL_97:
  v96 = v13;
  (*(float **)((char *)v20 + ((v33 >> 7) & 0x1FFFFFFFFFFFFF8)))[v33 & 0x3FF] = v96;
  *(_QWORD *)(a1 + 3040) = v32 + 1;
  if ((unint64_t)(v32 + 1) > *(_QWORD *)(a1 + 2984))
  {
    v97 = (*(float **)((char *)v20 + ((v31 >> 7) & 0x1FFFFFFFFFFFFF8)))[v31 & 0x3FF];
    *(float *)(a1 + 2992) = *(float *)(a1 + 2992) - v97;
    *(float *)(a1 + 2996) = *(float *)(a1 + 2996) - (float)(v97 * v97);
    *(_QWORD *)(a1 + 3040) = v32;
    *(_QWORD *)(a1 + 3032) = v31 + 1;
    if (v31 + 1 >= 0x800)
    {
      operator delete(*v20);
      *(_QWORD *)(a1 + 3008) += 8;
      *(_QWORD *)(a1 + 3032) -= 1024;
    }
  }
  *(float *)(a1 + 2992) = *(float *)(a1 + 2992) + v96;
  *(float *)(a1 + 2996) = *(float *)(a1 + 2996) + (float)(v96 * v96);
  v98 = *(double *)(a1 + 4032);
  if (v98 < 0.0)
  {
    if (*(double *)(a2 + 24) - *(double *)(a1 + 4016) >= 900.0)
      v98 = 5.55555556;
    else
      v98 = 1.66666667;
  }
  if (*(double *)(a2 + 96) <= v98 && !*(_BYTE *)(a1 + 2232))
  {
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v103 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v104 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v104;
        _os_log_impl(&dword_18F5B3000, v103, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf, not matching", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v591 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)v715 = 134349056;
        *(_QWORD *)&v715[4] = v591;
        v592 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v592);
        if (v592 != buf)
          free(v592);
      }
    }
    goto LABEL_123;
  }
  if (!*(_BYTE *)(a2 + 348))
    goto LABEL_114;
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v99 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v99, OS_LOG_TYPE_DEBUG, "CLMM,opportunistic tile download only, favorable GPS conditions", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      *(_WORD *)v715 = 0;
      v590 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v590);
      if (v590 != buf)
        free(v590);
    }
  }
  v100 = *(unsigned __int8 *)(a1 + 112);
  if (*(_BYTE *)(a1 + 112))
  {
LABEL_114:
    v101 = *(_QWORD *)(a1 + 3040);
    if (v101 < *(_QWORD *)(a1 + 2984)
      || (!v101 ? (v102 = 0.0) : (v102 = *(float *)(a1 + 2992) / (float)v101), v102 <= 22.222))
    {
      v100 = 1;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 96))
      {
        v107 = 0;
        goto LABEL_143;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v106 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v106, OS_LOG_TYPE_DEBUG, "CLMM,opportunistic tile download only, high speed threshold", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        *(_WORD *)v715 = 0;
        v593 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v593);
        if (v593 != buf)
          free(v593);
      }
      v100 = 0;
    }
  }
  if (*(_BYTE *)(a1 + 113))
    v107 = 0;
  else
    v107 = v100;
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v108 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v109 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v109;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v107;
      _os_log_impl(&dword_18F5B3000, v108, OS_LOG_TYPE_DEBUG, "CLMM,match,%{public}.1lf,allowsNetworkUsage,%{public}d", buf, 0x12u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v300 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)v715 = 134349312;
      *(_QWORD *)&v715[4] = v300;
      *(_WORD *)&v715[12] = 1026;
      *(_DWORD *)&v715[14] = v107;
      v301 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v301);
      if (v301 != buf)
        free(v301);
    }
  }
LABEL_143:
  (*(void (**)(_QWORD *, uint64_t))(*v5 + 32))(v5, v107);
  (*(void (**)(_QWORD *, uint64_t, double))(*v5 + 48))(v5, a2, 450.0);
  v5[1] = *(_QWORD *)(a2 + 8);
  (*(void (**)(_QWORD *))(*v5 + 96))(v5);
  sub_18F6B2E08(*(_QWORD **)(a1 + 992));
  *(_QWORD *)(a1 + 984) = a1 + 992;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  *(_QWORD *)(a1 + 944) = *(_QWORD *)(a1 + 936);
  sub_18F6A4620((void **)(a1 + 936), 0xC0uLL);
  sub_18F6A6064(v8);
  v110 = *(_OWORD *)a2;
  v111 = *(_OWORD *)(a2 + 16);
  v112 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 152) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 168) = v112;
  *(_OWORD *)(v8 + 120) = v110;
  *(_OWORD *)(v8 + 136) = v111;
  v113 = *(_OWORD *)(a2 + 64);
  v114 = *(_OWORD *)(a2 + 80);
  v115 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v8 + 216) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v8 + 232) = v115;
  *(_OWORD *)(v8 + 184) = v113;
  *(_OWORD *)(v8 + 200) = v114;
  v681 = (__int128 *)(v8 + 120);
  std::string::operator=(__str, (const std::string *)(a2 + 128));
  memcpy(__dst, __src, 0x118uLL);
  v116 = *(double *)(a1 + 1976);
  v117 = *(double *)(a1 + 1136) - v116;
  *(double *)(a1 + 1640) = v117;
  if (v117 == 0.0)
  {
    if (!*(_BYTE *)(a1 + 96))
      goto LABEL_832;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v118 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v118, OS_LOG_TYPE_INFO, "CLMM,Time difference between updates is zero,update ignored", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_832;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    *(_WORD *)v715 = 0;
    v28 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v28);
    goto LABEL_153;
  }
  v674 = a1 + 992;
  v678 = (void **)(a1 + 936);
  if (*(_BYTE *)(a1 + 1356))
  {
    v119 = 4.9;
    if (v117 > 4.9 && *(_BYTE *)(a1 + 2232))
    {
      v120 = *(double *)(a1 + 1480);
      v121 = v120 > v116 + 1.2 || v120 <= 0.0;
      v119 = 4.9;
      if (!v121)
        v119 = 75.0;
    }
  }
  else
  {
    v119 = 4.9;
  }
  v669 = (std::string *)(a2 + 128);
  if (v117 < 0.0 || v117 > v119)
    sub_18F6A5838(a1);
  if (*(_QWORD *)(a1 + 864) == *(_QWORD *)(a1 + 872))
    *(_QWORD *)(a1 + 1640) = 0;
  sub_18F6742D0(a1, (uint64_t)v681);
  sub_18F6E4484(a1 + 656, (uint64_t)v681, *(unsigned __int8 *)(a1 + 752));
  v122 = *(_QWORD *)(a1 + 4056);
  v123 = *(_QWORD *)(a1 + 4048);
  while (v122 != v123)
    v122 = sub_18F5D6004(v122 - 56);
  *(_QWORD *)(a1 + 4056) = v123;
  if (*(_BYTE *)(a1 + 114))
  {
    v124 = *(_QWORD *)(a1 + 8);
    v125 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)buf = v124;
    *(_QWORD *)&buf[8] = v125;
    if (v125)
    {
      v126 = (unint64_t *)(v125 + 8);
      do
        v127 = __ldxr(v126);
      while (__stxr(v127 + 1, v126));
      *(_QWORD *)&v715[8] = v125;
      do
        v128 = __ldxr(v126);
      while (__stxr(v128 + 1, v126));
    }
    else
    {
      *(_QWORD *)&v715[8] = 0;
    }
    *(_QWORD *)v715 = v124;
    sub_18F6B03A0((uint64_t)v681, v715, (double *)(a1 + 608), a1 + 48, (uint64_t *)(a1 + 4048), 1, 200.0);
    v129 = *(std::__shared_weak_count **)&v715[8];
    if (*(_QWORD *)&v715[8])
    {
      v130 = (unint64_t *)(*(_QWORD *)&v715[8] + 8);
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    v132 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v133 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
  }
  ++*(_DWORD *)(a1 + 100);
  if (!sub_18F69B290(a1))
    goto LABEL_831;
  v673 = (_BYTE *)v8;
  if (*(_QWORD *)(a1 + 872) == *(_QWORD *)(a1 + 864) || !*(_BYTE *)(a1 + 114))
    goto LABEL_493;
  v135 = *(double *)(a1 + 88);
  if (*(double *)(a1 + 4120) < 0.0 || vabdd_f64(*(double *)(a1 + 4128), v135) > 6.0)
    *(double *)(a1 + 4120) = v135;
  *(double *)(a1 + 4128) = v135;
  v136 = *(_QWORD *)(a1 + 4080);
  v137 = *(_QWORD *)(a1 + 4072);
  if (v136 != v137)
  {
    sub_18F6B361C(a1 + 4096, v137, *(_QWORD *)(a1 + 4080), 0xF83E0F83E0F83E1 * ((v136 - v137) >> 3));
    v136 = *(_QWORD *)(a1 + 4080);
    v138 = *(_QWORD *)(a1 + 4072);
    if (v136 != v138)
    {
      do
      {
        sub_18F5D6004(v136 - 56);
        v136 -= 264;
      }
      while (v136 != v138);
      v136 = v138;
    }
  }
  *(_QWORD *)(a1 + 4080) = v136;
  if (!*(_BYTE *)(a1 + 114)
    || *(_QWORD *)(a1 + 4048) == *(_QWORD *)(a1 + 4056)
    || ((v139 = *(double *)(a1 + 88), v140 = vabdd_f64(*(double *)(a1 + 1152), v139), v139 >= 0.0)
      ? (v141 = v140 <= 2.5)
      : (v141 = 0),
        !v141 || vabdd_f64(v139, *(double *)(a1 + 4120)) < 60.0))
  {
    v142 = *(_QWORD *)(a1 + 4072);
LABEL_210:
    while (v136 != v142)
    {
      sub_18F5D6004(v136 - 56);
      v136 -= 264;
    }
    v143 = 0;
    *(_QWORD *)(a1 + 4080) = v142;
    goto LABEL_494;
  }
  v178 = *(_QWORD *)(a1 + 1136);
  v179 = *(_QWORD *)(a1 + 8);
  v180 = *(std::__shared_weak_count **)(a1 + 16);
  v695 = v179;
  v696 = v180;
  if (v180)
  {
    v181 = (unint64_t *)&v180->__shared_owners_;
    do
      v182 = __ldxr(v181);
    while (__stxr(v182 + 1, v181));
  }
  if (!v179)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v192 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v192, OS_LOG_TYPE_ERROR, "CLMM,Unexpected,invalid geometry pointer,generateRouteHint", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      *(_WORD *)v715 = 0;
      v639 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v639);
      if (v639 != buf)
        free(v639);
    }
    v193 = 0;
    goto LABEL_447;
  }
  v697 = 0;
  v698 = 0;
  v699 = 0;
  v667 = v178;
  if (*(_BYTE *)(a1 + 2232))
  {
    sub_18F69B170((uint64_t)v685, (uint64_t)&v692);
    for (j = *(__n128 **)(a1 + 4048); ; j = (__n128 *)((char *)j + 56))
    {
      if (j == *(__n128 **)(a1 + 4056))
        goto LABEL_308;
      v184 = (std::__shared_weak_count *)j->n128_u64[1];
      v691[0] = j->n128_f64[0];
      *(_QWORD *)&v691[1] = v184;
      if (v184)
      {
        v185 = (unint64_t *)&v184->__shared_owners_;
        do
          v186 = __ldxr(v185);
        while (__stxr(v186 + 1, v185));
      }
      sub_18F68FFC8((uint64_t)buf, (uint64_t)v691, j[1].n128_i8[4]);
      _ZF = v692 == *(_QWORD *)buf && v693 == *(std::__shared_weak_count **)&buf[8];
      v189 = !_ZF || v694 != (unint64_t)buf[16];
      if (v184)
      {
        v190 = (unint64_t *)&v184->__shared_owners_;
        do
          v191 = __ldaxr(v190);
        while (__stlxr(v191 - 1, v190));
        if (!v191)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
        }
      }
      if (!v189)
        break;
    }
    v194 = *(double *)(a1 + 1152);
    v195 = -1.0;
    if (v194 >= 0.0)
    {
      v196 = *(double *)(a1 + 1992);
      v197 = vabdd_f64(v194, v196);
      if (v196 >= 0.0)
        v195 = v197;
      else
        v195 = -1.0;
    }
    v198 = fmax(*(double *)(a1 + 1800), 0.0) + (float)((float)random() * 4.6566e-10) * 0.25;
    if (v198 <= v195 * 72.0)
      v199 = v198;
    else
      v199 = v195 * 72.0;
    sub_18F692488((uint64_t)v710, (uint64_t)v685);
    v688 = (__n128 *)&v688;
    v689 = &v688;
    v690 = 0;
    while (j != *(__n128 **)(a1 + 4056))
    {
      sub_18F64A3C4(&v688, j);
      j = (__n128 *)((char *)j + 56);
    }
    v687 = 0;
    if (((*(uint64_t (**)(uint64_t, _BYTE *, __n128 **, int *, double, double))(*(_QWORD *)v695 + 56))(v695, v710, &v688, &v687, *(double *)&v710[48], v199) & 1) == 0)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v298 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v178;
        _os_log_impl(&dword_18F5B3000, v298, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,failed as not enough route roads are available", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        *(_DWORD *)v715 = 134349056;
        *(_QWORD *)&v715[4] = v178;
        v299 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v299);
        if (v299 != buf)
          free(v299);
      }
      goto LABEL_444;
    }
    if (v690 <= v687)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v302 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)&buf[4] = v178;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v687;
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = v690;
        _os_log_impl(&dword_18F5B3000, v302, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,route index,%{public}d,is more than number of route roads,%{public}ld", buf, 0x1Cu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        *(_DWORD *)v715 = 134349568;
        *(_QWORD *)&v715[4] = v178;
        *(_WORD *)&v715[12] = 1026;
        *(_DWORD *)&v715[14] = v687;
        *(_WORD *)&v715[18] = 2050;
        *(_QWORD *)&v715[20] = v690;
        v643 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v643);
        if (v643 != buf)
          free(v643);
      }
      goto LABEL_444;
    }
    v200 = *(float *)&v710[24];
    v201 = 5.0;
    if (*(double *)&v710[48] <= 0.97 && *(double *)&v710[48] >= 0.03)
    {
      if (*(double *)(a1 + 1320) <= 0.0 || (v202 = *(double *)(a1 + 1232), v202 < 0.0))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v203 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)&buf[4] = v178;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = 0x403E000000000000;
          _os_log_impl(&dword_18F5B3000, v203, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,course deweighted,unc,%{public}.2lf", buf, 0x16u);
        }
        v201 = 30.0;
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          *(_DWORD *)v715 = 134349312;
          *(_QWORD *)&v715[4] = v178;
          *(_WORD *)&v715[12] = 2050;
          *(_QWORD *)&v715[14] = 0x403E000000000000;
          v650 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v650);
          if (v650 != buf)
            free(v650);
        }
        goto LABEL_292;
      }
      v620 = fmod(v202 - v200, 360.0);
      if (v620 < 0.0)
        v620 = v620 + 360.0;
      if (v620 > 180.0)
        v620 = v620 + -360.0;
      v621 = fabs(v620);
      v622 = *(_DWORD *)(a1 + 4040);
      if (v621 >= 135.0)
      {
        *(_DWORD *)(a1 + 4040) = v622 + 1;
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v629 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v630 = *(_QWORD *)(a1 + 1232);
          v631 = *(_DWORD *)(a1 + 4040);
          *(_DWORD *)buf = 134349824;
          *(_QWORD *)&buf[4] = v178;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v200;
          *(_WORD *)&buf[22] = 2050;
          *(_QWORD *)&buf[24] = v630;
          *(_WORD *)&buf[32] = 1026;
          *(_DWORD *)&buf[34] = v631;
          _os_log_impl(&dword_18F5B3000, v629, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", buf, 0x26u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_444;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 == -1)
          goto LABEL_1023;
        goto LABEL_1080;
      }
      if (v621 > 60.0 && v622 >= 1)
      {
        *(_DWORD *)(a1 + 4040) = v622 + 1;
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v633 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v634 = *(_QWORD *)(a1 + 1232);
          v635 = *(_DWORD *)(a1 + 4040);
          *(_DWORD *)buf = 134349824;
          *(_QWORD *)&buf[4] = v178;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v200;
          *(_WORD *)&buf[22] = 2050;
          *(_QWORD *)&buf[24] = v634;
          *(_WORD *)&buf[32] = 1026;
          *(_DWORD *)&buf[34] = v635;
          _os_log_impl(&dword_18F5B3000, v633, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is different than crumb course,%{public}.1lf, and rejections are high,rejection,%{public}d", buf, 0x26u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_444;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 == -1)
        {
LABEL_1023:
          v636 = *(_QWORD *)(a1 + 1232);
          v637 = *(_DWORD *)(a1 + 4040);
          *(_DWORD *)v715 = 134349824;
          *(_QWORD *)&v715[4] = v178;
          *(_WORD *)&v715[12] = 2050;
          *(double *)&v715[14] = v200;
          *(_WORD *)&v715[22] = 2050;
          *(_QWORD *)&v715[24] = v636;
          *(_WORD *)&v715[32] = 1026;
          *(_DWORD *)&v715[34] = v637;
          v638 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v638);
          if (v638 != buf)
            free(v638);
LABEL_444:
          sub_18F64F950((uint64_t *)&v688);
          sub_18F692600((uint64_t)v710);
LABEL_445:
          v193 = 0;
          goto LABEL_446;
        }
LABEL_1080:
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        goto LABEL_1023;
      }
      if (v621 > 80.0)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v624 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v625 = *(_QWORD *)(a1 + 1232);
          *(_DWORD *)buf = 134349568;
          *(_QWORD *)&buf[4] = v178;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v200;
          *(_WORD *)&buf[22] = 2050;
          *(_QWORD *)&buf[24] = v625;
          _os_log_impl(&dword_18F5B3000, v624, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,skipping,moveOnRouteRoads meas,routeCourse,%{public}.1lf,is somewhat different than crumb course,%{public}.1lf", buf, 0x20u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v626 = *(_QWORD *)(a1 + 1232);
          *(_DWORD *)v715 = 134349568;
          *(_QWORD *)&v715[4] = v178;
          *(_WORD *)&v715[12] = 2050;
          *(double *)&v715[14] = v200;
          *(_WORD *)&v715[22] = 2050;
          *(_QWORD *)&v715[24] = v626;
          v627 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v627);
          if (v627 != buf)
            free(v627);
        }
        goto LABEL_307;
      }
    }
LABEL_292:
    v204 = *(_OWORD *)&v710[32];
    v205 = v689;
    v206 = v687;
    if (v687 < 0)
    {
      do
      {
        v205 = (__n128 **)*v205;
        _CF = __CFADD__(v206++, 1);
      }
      while (!_CF);
    }
    else if (v687)
    {
      v207 = v687 + 1;
      do
      {
        v205 = (__n128 **)v205[1];
        --v207;
      }
      while (v207 > 1);
    }
    v208 = sub_18F5BD064((double *)(a1 + 608), *(double *)&v710[32], *(double *)&v710[40], *((double *)v205 + 6), *((double *)v205 + 7), 0.0);
    memset(v715, 0, 24);
    *(_OWORD *)&v715[24] = xmmword_18F772330;
    v715[40] = 0;
    memset(v716, 0, 32);
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)&v716[112] = _Q1;
    *(_QWORD *)&v716[128] = 0xBFF0000000000000;
    memset(&v716[160], 0, 20);
    *(_WORD *)&v716[180] = 1;
    *(_DWORD *)&v716[184] = 0;
    memset(&v716[192], 0, 24);
    *(_OWORD *)&v716[32] = v204;
    *(_QWORD *)&v716[48] = *(_QWORD *)(a1 + 1200);
    *(double *)&v716[56] = v200;
    if (v208 < 8.0)
      v208 = 8.0;
    *(double *)&v716[64] = v208;
    *(double *)&v716[72] = v201;
    *(_QWORD *)&v716[80] = 0x3FF0000000000000;
    v211 = *(_QWORD *)(a1 + 1312);
    *(_QWORD *)&v716[88] = *(_QWORD *)(a1 + 1224);
    *(_QWORD *)&v716[96] = v211;
    v716[104] = *(_BYTE *)(a1 + 1356);
    *(int8x16_t *)&v716[136] = vextq_s8(*(int8x16_t *)(a1 + 1144), *(int8x16_t *)(a1 + 1144), 8uLL);
    *(_QWORD *)&v716[152] = *(_QWORD *)(a1 + 1136);
    sub_18F6B2010((uint64_t)v715, 0);
    sub_18F623A40(&v716[160], (uint64_t *)v710);
    *(_OWORD *)&v716[176] = *(_OWORD *)&v710[16];
    *(_OWORD *)&v716[192] = *(_OWORD *)&v710[32];
    *(_QWORD *)&v716[208] = *(_QWORD *)&v710[48];
    sub_18F6B211C((uint64_t *)&v697, (uint64_t)v715);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v212 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v213 = 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 4080) - *(_QWORD *)(a1 + 4072)) >> 3);
      *(_DWORD *)buf = 134350593;
      *(_QWORD *)&buf[4] = v178;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = *(_QWORD *)&v716[32];
      *(_WORD *)&buf[22] = 2049;
      *(_QWORD *)&buf[24] = *(_QWORD *)&v716[40];
      *(_WORD *)&buf[32] = 2050;
      *(_QWORD *)&buf[34] = *(_QWORD *)&v716[56];
      *(_WORD *)&buf[42] = 2050;
      *(_QWORD *)&buf[44] = *(_QWORD *)&v716[64];
      *(_WORD *)&buf[52] = 2050;
      *(_QWORD *)&buf[54] = *(_QWORD *)&v716[72];
      *(_WORD *)&buf[62] = 2050;
      v718 = v213;
      _os_log_impl(&dword_18F5B3000, v212, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,meas,moveOnRouteRoads,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu", buf, 0x48u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v644 = 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 4080) - *(_QWORD *)(a1 + 4072)) >> 3);
      *(_DWORD *)v700 = 134350593;
      *(_QWORD *)&v700[4] = v178;
      *(_WORD *)&v700[12] = 2049;
      *(_QWORD *)&v700[14] = *(_QWORD *)&v716[32];
      *(_WORD *)&v700[22] = 2049;
      v701 = *(_QWORD *)&v716[40];
      v702 = 2050;
      v703 = *(_QWORD *)&v716[56];
      v704 = 2050;
      v705 = *(_QWORD *)&v716[64];
      v706 = 2050;
      v707 = *(_QWORD *)&v716[72];
      v708 = 2050;
      v709 = v644;
      v645 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v645);
      if (v645 != buf)
        free(v645);
    }
    sub_18F5D6004((uint64_t)&v716[160]);
LABEL_307:
    sub_18F64F950((uint64_t *)&v688);
    sub_18F692600((uint64_t)v710);
  }
LABEL_308:
  v215 = (uint64_t)v697;
  v214 = v698;
  if (v698 != v697)
    goto LABEL_309;
  v250 = *(_QWORD *)(a1 + 4048);
  v251 = *(_QWORD *)(a1 + 4056);
  if (v250 == v251)
    goto LABEL_445;
  v252 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v664 = _Q0;
  do
  {
    v254 = sub_18F5BD064((double *)(a1 + 608), *(double *)(v250 + 32), *(double *)(v250 + 40), *(double *)(a1 + 1160), *(double *)(a1 + 1168), 0.0);
    memset(v715, 0, 24);
    *(_OWORD *)&v715[24] = xmmword_18F772330;
    v715[40] = 0;
    memset(v716, 0, 32);
    *(_OWORD *)&v716[112] = v664;
    *(_QWORD *)&v716[128] = 0xBFF0000000000000;
    memset(&v716[160], 0, 20);
    *(_WORD *)&v716[180] = 1;
    *(_DWORD *)&v716[184] = 0;
    memset(&v716[192], 0, 24);
    *(_OWORD *)&v716[32] = *(_OWORD *)(v250 + 32);
    *(_QWORD *)&v716[48] = *(_QWORD *)(a1 + 1200);
    if (v254 < 8.0)
      v254 = 8.0;
    *(double *)&v716[56] = *(float *)(v250 + 24);
    *(double *)&v716[64] = v254;
    *(_OWORD *)&v716[72] = xmmword_18F775250;
    v255 = *(_QWORD *)(a1 + 1312);
    *(_QWORD *)&v716[88] = *(_QWORD *)(a1 + 1224);
    *(_QWORD *)&v716[96] = v255;
    v716[104] = *(_BYTE *)(a1 + 1356);
    *(int8x16_t *)&v716[136] = vextq_s8(*(int8x16_t *)(a1 + 1144), *(int8x16_t *)(a1 + 1144), 8uLL);
    *(_QWORD *)&v716[152] = *(_QWORD *)(a1 + 1136);
    sub_18F6B2010((uint64_t)v715, 0);
    *(double *)&v716[80] = 1.0 / *(double *)&v716[72];
    sub_18F623A40(&v716[160], (uint64_t *)v250);
    v256 = *(_QWORD *)(v250 + 48);
    v257 = *(_OWORD *)(v250 + 32);
    *(_OWORD *)&v716[176] = *(_OWORD *)(v250 + 16);
    *(_OWORD *)&v716[192] = v257;
    *(_QWORD *)&v716[208] = v256;
    if (*(double *)(a1 + 1320) <= 0.0 || (v258 = *(double *)(a1 + 1232), v258 < 0.0))
    {
      if (!*(_BYTE *)(a1 + 1848))
        goto LABEL_381;
      v258 = *(double *)(a1 + 2136);
      if (v258 < 0.0)
        goto LABEL_381;
    }
    v259 = fmod(v258 - *(double *)&v716[56], 360.0);
    if (v259 < 0.0)
      v259 = v259 + 360.0;
    v260 = v259 + -360.0;
    if (v259 <= 180.0)
      v260 = v259;
    v261 = fabs(v260);
    if (v261 < 135.0
      && (v261 > 60.0 ? (v262 = *(_DWORD *)(a1 + 4040) <= 0) : (v262 = 1),
          v262
       && (v261 > 80.0
         ? (_CF = (unint64_t)(0x6DB6DB6DB6DB6DB7
                                   * ((uint64_t)(*(_QWORD *)(a1 + 4056) - *(_QWORD *)(a1 + 4048)) >> 3)) >= 2)
         : (_CF = 0),
           !_CF)))
    {
      if (v260 == 0.0)
        v264 = *(double *)&v716[80];
      else
        v264 = 1.0 / v261;
      *(double *)&v716[80] = v264;
      sub_18F6B2010((uint64_t)v715, 0);
      v272 = v698;
      if ((unint64_t)v698 >= v699)
      {
        v287 = sub_18F6B3A10((uint64_t *)&v697, (uint64_t)v715);
      }
      else
      {
        *v698 = *(_OWORD *)v715;
        v273 = *(_OWORD *)&v715[16];
        v274 = *(_OWORD *)&v715[32];
        v275 = *(_OWORD *)&v716[16];
        v272[3] = *(_OWORD *)v716;
        v272[4] = v275;
        v272[1] = v273;
        v272[2] = v274;
        v276 = *(_OWORD *)&v716[32];
        v277 = *(_OWORD *)&v716[48];
        v278 = *(_OWORD *)&v716[80];
        v272[7] = *(_OWORD *)&v716[64];
        v272[8] = v278;
        v272[5] = v276;
        v272[6] = v277;
        v279 = *(_OWORD *)&v716[96];
        v280 = *(_OWORD *)&v716[112];
        v281 = *(_OWORD *)&v716[144];
        v272[11] = *(_OWORD *)&v716[128];
        v272[12] = v281;
        v272[9] = v279;
        v272[10] = v280;
        *((_QWORD *)v272 + 26) = *(_QWORD *)&v716[160];
        v282 = *(_QWORD *)&v716[168];
        *((_QWORD *)v272 + 27) = *(_QWORD *)&v716[168];
        if (v282)
        {
          v283 = (unint64_t *)(v282 + 8);
          do
            v284 = __ldxr(v283);
          while (__stxr(v284 + 1, v283));
        }
        v285 = *(_OWORD *)&v716[176];
        v286 = *(_OWORD *)&v716[192];
        *((_QWORD *)v272 + 32) = *(_QWORD *)&v716[208];
        v272[14] = v285;
        v272[15] = v286;
        v287 = (uint64_t)v272 + 264;
      }
      v698 = (_OWORD *)v287;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v288 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v289 = 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 4080) - *(_QWORD *)(a1 + 4072)) >> 3);
        *(_DWORD *)buf = 134350849;
        *(_QWORD *)&buf[4] = v178;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = *(_QWORD *)&v716[32];
        *(_WORD *)&buf[22] = 2049;
        *(_QWORD *)&buf[24] = *(_QWORD *)&v716[40];
        *(_WORD *)&buf[32] = 2050;
        *(_QWORD *)&buf[34] = *(_QWORD *)&v716[56];
        *(_WORD *)&buf[42] = 2050;
        *(_QWORD *)&buf[44] = *(_QWORD *)&v716[64];
        *(_WORD *)&buf[52] = 2050;
        *(_QWORD *)&buf[54] = *(_QWORD *)&v716[72];
        *(_WORD *)&buf[62] = 2050;
        v718 = v289;
        v719 = 2050;
        v720 = *(_QWORD *)&v716[80];
        _os_log_impl(&dword_18F5B3000, v288, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,meas,projection,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu,confidence,%{public}.4lf", buf, 0x52u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v290 = 0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 4080) - *(_QWORD *)(a1 + 4072)) >> 3);
        *(_DWORD *)v710 = 134350849;
        *(_QWORD *)&v710[4] = v667;
        *(_WORD *)&v710[12] = 2049;
        *(_QWORD *)&v710[14] = *(_QWORD *)&v716[32];
        *(_WORD *)&v710[22] = 2049;
        *(_QWORD *)&v710[24] = *(_QWORD *)&v716[40];
        *(_WORD *)&v710[32] = 2050;
        *(_QWORD *)&v710[34] = *(_QWORD *)&v716[56];
        *(_WORD *)&v710[42] = 2050;
        *(_QWORD *)&v710[44] = *(_QWORD *)&v716[64];
        *(_WORD *)&v710[52] = 2050;
        *(_QWORD *)&v710[54] = *(_QWORD *)&v716[72];
        v711 = 2050;
        v712 = v290;
        v713 = 2050;
        v714 = *(_QWORD *)&v716[80];
        v291 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v291);
LABEL_411:
        if (v291 != buf)
          free(v291);
        v178 = v667;
      }
    }
    else
    {
LABEL_381:
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v265 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v266 = *(float *)(v250 + 24);
        v267 = *(_QWORD *)(a1 + 1232);
        v268 = *(_DWORD *)(a1 + 4040);
        *(_DWORD *)buf = 134349824;
        *(_QWORD *)&buf[4] = v178;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v266;
        *(_WORD *)&buf[22] = 2050;
        *(_QWORD *)&buf[24] = v267;
        *(_WORD *)&buf[32] = 1026;
        *(_DWORD *)&buf[34] = v268;
        _os_log_impl(&dword_18F5B3000, v265, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints, no meas, projection,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", buf, 0x26u);
      }
      ++v252;
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v292 = *(float *)(v250 + 24);
        v293 = *(_QWORD *)(a1 + 1232);
        v294 = *(_DWORD *)(a1 + 4040);
        *(_DWORD *)v710 = 134349824;
        *(_QWORD *)&v710[4] = v667;
        *(_WORD *)&v710[12] = 2050;
        *(double *)&v710[14] = v292;
        *(_WORD *)&v710[22] = 2050;
        *(_QWORD *)&v710[24] = v293;
        *(_WORD *)&v710[32] = 1026;
        *(_DWORD *)&v710[34] = v294;
        v291 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v291);
        goto LABEL_411;
      }
    }
    v269 = *(std::__shared_weak_count **)&v716[168];
    if (*(_QWORD *)&v716[168])
    {
      v270 = (unint64_t *)(*(_QWORD *)&v716[168] + 8);
      do
        v271 = __ldaxr(v270);
      while (__stlxr(v271 - 1, v270));
      if (!v271)
      {
        ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
        std::__shared_weak_count::__release_weak(v269);
      }
    }
    v250 += 56;
  }
  while (v250 != v251);
  v215 = (uint64_t)v697;
  v214 = v698;
  if (v252 > 0
    && 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 4056) - *(_QWORD *)(a1 + 4048)) >> 3) == v252
    && v698 == v697)
  {
    v193 = 0;
    ++*(_DWORD *)(a1 + 4040);
    goto LABEL_446;
  }
LABEL_309:
  if (v214 == (_OWORD *)v215)
    goto LABEL_445;
  *(_DWORD *)(a1 + 4040) = 0;
  v216 = -1.0;
  v217 = 0.0;
  v218 = -1.0;
  v672 = a2;
  do
  {
    v219 = *(double **)(a1 + 4096);
    v220 = *(double **)(a1 + 4104);
    if (v219 == v220)
      goto LABEL_336;
    v221 = 1;
    do
    {
      v222 = vabdd_f64(v219[23], *(double *)(v215 + 184));
      if (v216 < 0.0)
        v216 = v222;
      v223 = sub_18F5BD064((double *)(a1 + 608), *(double *)(v215 + 80), *(double *)(v215 + 88), v219[10], v219[11], 0.0);
      if (v223 < v218 || v218 < 0.0)
        v218 = v223;
      if (v223 < 0.001)
      {
        v225 = *(double *)(v215 + 256) >= 0.2;
        *(_QWORD *)v710 = v710;
        *(_QWORD *)&v710[8] = v710;
        *(_QWORD *)&v710[16] = 0;
        if ((*(unsigned int (**)(uint64_t, _BYTE *, uint64_t, _BOOL8, _QWORD))(*(_QWORD *)v695 + 72))(v695, v710, v215 + 208, v225, 0))
        {
          v226 = *(_QWORD *)&v710[16];
          v221 = *(_QWORD *)&v710[16] > 1uLL;
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v227 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349568;
            *(_QWORD *)&buf[4] = v178;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = v226 > 1;
            *(_WORD *)&buf[18] = 2050;
            *(_QWORD *)&buf[20] = *(_QWORD *)&v710[16];
            _os_log_impl(&dword_18F5B3000, v227, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,duplicate measurement check,measurementGood,%{public}d,vector,%{public}lu", buf, 0x1Cu);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            *(_DWORD *)v715 = 134349568;
            *(_QWORD *)&v715[4] = v667;
            *(_WORD *)&v715[12] = 1026;
            *(_DWORD *)&v715[14] = v226 > 1;
            *(_WORD *)&v715[18] = 2050;
            *(_QWORD *)&v715[20] = *(_QWORD *)&v710[16];
            v228 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v228);
            if (v228 != buf)
              free(v228);
            v178 = v667;
          }
        }
        sub_18F677A18((uint64_t *)v710);
      }
      v219 += 33;
    }
    while (v219 != v220);
    if (v221)
    {
LABEL_336:
      v229 = *(double *)(v215 + 128);
      v230 = *(_QWORD *)(a1 + 4080);
      a2 = v672;
      if (v230 >= *(_QWORD *)(a1 + 4088))
      {
        v245 = sub_18F6B3A10((uint64_t *)(a1 + 4072), v215);
      }
      else
      {
        *(_OWORD *)v230 = *(_OWORD *)v215;
        v231 = *(_OWORD *)(v215 + 16);
        v232 = *(_OWORD *)(v215 + 32);
        v233 = *(_OWORD *)(v215 + 64);
        *(_OWORD *)(v230 + 48) = *(_OWORD *)(v215 + 48);
        *(_OWORD *)(v230 + 64) = v233;
        *(_OWORD *)(v230 + 16) = v231;
        *(_OWORD *)(v230 + 32) = v232;
        v234 = *(_OWORD *)(v215 + 80);
        v235 = *(_OWORD *)(v215 + 96);
        v236 = *(_OWORD *)(v215 + 128);
        *(_OWORD *)(v230 + 112) = *(_OWORD *)(v215 + 112);
        *(_OWORD *)(v230 + 128) = v236;
        *(_OWORD *)(v230 + 80) = v234;
        *(_OWORD *)(v230 + 96) = v235;
        v237 = *(_OWORD *)(v215 + 144);
        v238 = *(_OWORD *)(v215 + 160);
        v239 = *(_OWORD *)(v215 + 192);
        *(_OWORD *)(v230 + 176) = *(_OWORD *)(v215 + 176);
        *(_OWORD *)(v230 + 192) = v239;
        *(_OWORD *)(v230 + 144) = v237;
        *(_OWORD *)(v230 + 160) = v238;
        *(_QWORD *)(v230 + 208) = *(_QWORD *)(v215 + 208);
        v240 = *(_QWORD *)(v215 + 216);
        *(_QWORD *)(v230 + 216) = v240;
        if (v240)
        {
          v241 = (unint64_t *)(v240 + 8);
          do
            v242 = __ldxr(v241);
          while (__stxr(v242 + 1, v241));
        }
        v243 = *(_OWORD *)(v215 + 224);
        v244 = *(_OWORD *)(v215 + 240);
        *(_QWORD *)(v230 + 256) = *(_QWORD *)(v215 + 256);
        *(_OWORD *)(v230 + 224) = v243;
        *(_OWORD *)(v230 + 240) = v244;
        v245 = v230 + 264;
      }
      v217 = v217 + v229;
      *(_QWORD *)(a1 + 4080) = v245;
      v178 = v667;
    }
    else
    {
      a2 = v672;
    }
    v215 += 264;
  }
  while ((_OWORD *)v215 != v214);
  if (v218 < 0.0 || v216 <= 0.0 || v216 >= 5.0 || v218 <= v216 * 50.0)
  {
    if (v217 > 0.0)
    {
      v295 = *(_QWORD *)(a1 + 4072);
      v296 = *(_QWORD *)(a1 + 4080);
      while (v295 != v296)
      {
        *(double *)(v295 + 128) = *(double *)(v295 + 128) / v217;
        v295 += 264;
      }
    }
    v193 = 1;
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v246 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v178;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v218;
      _os_log_impl(&dword_18F5B3000, v246, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,jump in route hint measurement,%{public}.3lf,rejecting", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      *(_DWORD *)v715 = 134349312;
      *(_QWORD *)&v715[4] = v667;
      *(_WORD *)&v715[12] = 2050;
      *(double *)&v715[14] = v218;
      v641 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v641);
      if (v641 != buf)
        free(v641);
      a2 = v672;
    }
    v247 = *(_QWORD *)(a1 + 4080);
    v248 = *(_QWORD *)(a1 + 4072);
    if (v247 != v248)
    {
      do
      {
        v249 = v247 - 264;
        sub_18F5D6004(v247 - 56);
        v247 = v249;
      }
      while (v249 != v248);
    }
    v193 = 0;
    *(_QWORD *)(a1 + 4080) = v248;
  }
LABEL_446:
  *(_QWORD *)buf = &v697;
  sub_18F6B2FEC((void ***)buf);
  v180 = v696;
LABEL_447:
  if (v180)
  {
    v303 = (unint64_t *)&v180->__shared_owners_;
    do
      v304 = __ldaxr(v303);
    while (__stlxr(v304 - 1, v303));
    if (!v304)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  v136 = *(_QWORD *)(a1 + 4080);
  v142 = *(_QWORD *)(a1 + 4072);
  if ((v193 & 1) == 0)
    goto LABEL_210;
  if (v142 == v136)
  {
LABEL_493:
    v143 = 0;
    goto LABEL_494;
  }
  v143 = 0;
  while (1)
  {
    v305 = *(double *)(v142 + 184);
    v306 = vabdd_f64(v305, *(double *)(a1 + 1152));
    if (v306 > 0.01)
    {
      v336 = *(_QWORD *)(a1 + 4080);
      v337 = *(_QWORD *)(a1 + 4072);
      if (v336 != v337)
      {
        do
        {
          v338 = v336 - 264;
          sub_18F5D6004(v336 - 56);
          v336 = v338;
        }
        while (v338 != v337);
      }
      *(_QWORD *)(a1 + 4080) = v337;
      LOBYTE(v664) = v143;
    }
    else
    {
      *(_QWORD *)&v716[224] = 0;
      *(_DWORD *)&v716[232] = 0;
      memset(&v716[184], 0, 34);
      memset(&v716[240], 0, 75);
      memset(&v716[320], 0, 56);
      *(_OWORD *)&v716[166] = 0u;
      memset(&v716[136], 0, 32);
      memset(&v716[40], 0, 96);
      *(_QWORD *)&v716[376] = 0xBFF0000000000000;
      *(_OWORD *)&v716[8] = *(_OWORD *)(v142 + 80);
      v307 = *(_QWORD *)(v142 + 104);
      v308 = *(_QWORD *)(v142 + 112);
      v309 = *(_QWORD *)(v142 + 120);
      *(_QWORD *)&v716[24] = *(_QWORD *)(v142 + 96);
      *(_QWORD *)&v716[32] = v308;
      *(_QWORD *)&v716[144] = v309;
      *(_OWORD *)&v716[152] = *(_OWORD *)(v142 + 160);
      *(_QWORD *)&v716[168] = *(_QWORD *)(v142 + 176);
      v310 = *(_QWORD *)(v142 + 136);
      v311 = *(_QWORD *)(v142 + 144);
      *(_QWORD *)&v716[56] = v307;
      *(_QWORD *)&v716[48] = v310;
      *(_QWORD *)v715 = 0;
      *(_QWORD *)&v715[32] = 0;
      *(_QWORD *)&v715[40] = 0;
      *(_QWORD *)v716 = 0xBFF0000000000000;
      *(_QWORD *)&v716[136] = v311;
      v716[180] = *(_BYTE *)(v142 + 152);
      *(double *)&v715[24] = v305;
      *(int8x16_t *)&v715[8] = vextq_s8(*(int8x16_t *)(v142 + 192), *(int8x16_t *)(v142 + 192), 8uLL);
      v312 = *(uint64_t **)(a1 + 864);
      v313 = *(uint64_t **)(a1 + 872);
      while (v312 != v313)
      {
        memset(buf, 0, 24);
        *(_QWORD *)&buf[24] = 0x3FF0000000000000;
        memset(&buf[32], 0, 32);
        LODWORD(v718) = 0;
        sub_18F676F68(a1, v142, v312, (double *)v715, (double *)v710, (double *)v700, (double *)&v697, (uint64_t)buf, 0);
        LODWORD(v718) = 2;
        *(_QWORD *)&buf[24] = *(_QWORD *)(v142 + 128);
        v314 = v312[13];
        v315 = v312[12];
        if (v315 >= v314)
        {
          v320 = v312[11];
          v321 = 0x8E38E38E38E38E39 * ((uint64_t)(v315 - v320) >> 3);
          v322 = v321 + 1;
          if (v321 + 1 > 0x38E38E38E38E38ELL)
            sub_18F5F7864();
          v323 = 0x8E38E38E38E38E39 * ((uint64_t)(v314 - v320) >> 3);
          if (2 * v323 > v322)
            v322 = 2 * v323;
          if (v323 >= 0x1C71C71C71C71C7)
            v324 = 0x38E38E38E38E38ELL;
          else
            v324 = v322;
          if (v324)
            v325 = (char *)sub_18F692D88((uint64_t)(v312 + 13), v324);
          else
            v325 = 0;
          v326 = &v325[72 * v321];
          *(_OWORD *)v326 = *(_OWORD *)buf;
          v327 = *(_OWORD *)&buf[16];
          v328 = *(_OWORD *)&buf[32];
          v329 = *(_OWORD *)&buf[48];
          *((_QWORD *)v326 + 8) = v718;
          *((_OWORD *)v326 + 2) = v328;
          *((_OWORD *)v326 + 3) = v329;
          *((_OWORD *)v326 + 1) = v327;
          v331 = (char *)v312[11];
          v330 = (char *)v312[12];
          v332 = (uint64_t)v326;
          if (v330 != v331)
          {
            do
            {
              *(_OWORD *)(v332 - 72) = *(_OWORD *)(v330 - 72);
              v333 = *(_OWORD *)(v330 - 56);
              v334 = *(_OWORD *)(v330 - 40);
              v335 = *(_OWORD *)(v330 - 24);
              *(_DWORD *)(v332 - 8) = *((_DWORD *)v330 - 2);
              *(_OWORD *)(v332 - 24) = v335;
              *(_OWORD *)(v332 - 40) = v334;
              *(_OWORD *)(v332 - 56) = v333;
              v332 -= 72;
              v330 -= 72;
            }
            while (v330 != v331);
            v330 = (char *)v312[11];
          }
          v319 = (uint64_t)(v326 + 72);
          v312[11] = v332;
          v312[12] = (uint64_t)(v326 + 72);
          v312[13] = (uint64_t)&v325[72 * v324];
          if (v330)
            operator delete(v330);
        }
        else
        {
          *(_OWORD *)v315 = *(_OWORD *)buf;
          v316 = *(_OWORD *)&buf[16];
          v317 = *(_OWORD *)&buf[32];
          v318 = *(_OWORD *)&buf[48];
          *(_QWORD *)(v315 + 64) = v718;
          *(_OWORD *)(v315 + 32) = v317;
          *(_OWORD *)(v315 + 48) = v318;
          *(_OWORD *)(v315 + 16) = v316;
          v319 = v315 + 72;
        }
        v312[12] = v319;
        sub_18F6B21C0((double *)v312);
        v312 += 14;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v339 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v340 = *(_QWORD *)(a1 + 1136);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v340;
        _os_log_impl(&dword_18F5B3000, v339, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,used route-hint", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v341 = *(_QWORD *)(a1 + 1136);
        *(_DWORD *)v710 = 134349056;
        *(_QWORD *)&v710[4] = v341;
        v342 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::integrateRouteHint()", "CoreLocation: %s\n", v342);
        if (v342 != buf)
          free(v342);
      }
      if ((v716[103] & 0x80000000) != 0)
        operator delete(*(void **)&v716[80]);
      v143 = 1;
    }
    if (v306 > 0.01)
      break;
    v142 += 264;
    if (v142 == v136)
      goto LABEL_494;
  }
  v143 = v664;
LABEL_494:
  *(_BYTE *)(a1 + 1845) = v143 & 1;
  v343 = *(_QWORD *)(a1 + 872);
  v344 = *(_QWORD *)(a1 + 864);
  v345 = a1 + 992;
  if (v343 != v344)
  {
    v346 = 0.0;
    v347 = *(_QWORD *)(a1 + 864);
    do
    {
      v346 = v346 + *(double *)(v347 + 56);
      v347 += 112;
    }
    while (v347 != v343);
    if (v346 > 0.0)
    {
      v348 = *(float **)(a1 + 936);
      *(_QWORD *)(a1 + 944) = v348;
      v349 = (_QWORD *)(a1 + 952);
      v350 = 0.0;
      do
      {
        v351 = v344;
        v352 = *(double *)(v344 + 56) / v346;
        *(double *)(v344 + 64) = v352;
        v350 = v350 + v352;
        v353 = v350;
        if ((unint64_t)v348 >= *v349)
        {
          v355 = (float *)*v678;
          v356 = ((char *)v348 - (_BYTE *)*v678) >> 2;
          v357 = v356 + 1;
          if ((unint64_t)(v356 + 1) >> 62)
            sub_18F5F7864();
          v358 = *v349 - (_QWORD)v355;
          if (v358 >> 1 > v357)
            v357 = v358 >> 1;
          if ((unint64_t)v358 >= 0x7FFFFFFFFFFFFFFCLL)
            v359 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v359 = v357;
          if (v359)
          {
            v360 = (char *)sub_18F62C554(a1 + 952, v359);
            v348 = *(float **)(a1 + 944);
            v355 = *(float **)(a1 + 936);
          }
          else
          {
            v360 = 0;
          }
          v361 = (float *)&v360[4 * v356];
          *v361 = v353;
          v354 = v361 + 1;
          while (v348 != v355)
          {
            v362 = *((_DWORD *)v348-- - 1);
            *((_DWORD *)v361-- - 1) = v362;
          }
          *(_QWORD *)(a1 + 936) = v361;
          *(_QWORD *)(a1 + 944) = v354;
          *(_QWORD *)(a1 + 952) = &v360[4 * v359];
          if (v355)
            operator delete(v355);
        }
        else
        {
          *v348 = v353;
          v354 = v348 + 1;
        }
        *(_QWORD *)(a1 + 944) = v354;
        v344 += 112;
        v348 = v354;
      }
      while (v351 + 112 != *(_QWORD *)(a1 + 872));
      v363 = *(_QWORD *)(a1 + 864);
      v345 = a1 + 992;
      if (v344 != v363)
      {
        v364 = v363 - 112;
        v365 = 0.0;
        do
        {
          v365 = v365 + *(double *)(v364 + 176) * *(double *)(v364 + 176);
          v364 += 112;
        }
        while (v364 != v351);
        if (v365 > 0.0)
          *(double *)(a1 + 1608) = 1.0 / v365;
      }
      goto LABEL_521;
    }
    do
    {
      v343 -= 112;
      sub_18F6B2DD8(a1 + 880, v343);
    }
    while (v343 != v344);
    *(_QWORD *)(a1 + 872) = v344;
    goto LABEL_831;
  }
LABEL_521:
  sub_18F6B2E08(*(_QWORD **)(a1 + 992));
  *(_QWORD *)(a1 + 984) = v345;
  *(_OWORD *)(a1 + 992) = 0u;
  v366 = *(_QWORD *)(a1 + 872);
  v367 = *(_QWORD *)(a1 + 864);
  v368 = v366 - v367;
  if (v366 == v367)
  {
    v369 = v673;
    goto LABEL_814;
  }
  v369 = v673;
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v370 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v370, OS_LOG_TYPE_DEBUG, "CLMM,resample", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      *(_WORD *)v715 = 0;
      v628 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::resample()", "CoreLocation: %s\n", v628);
      if (v628 != buf)
        free(v628);
    }
  }
  if (*(double *)(a1 + 1224) == 0.0 || *(_BYTE *)(a1 + 1356))
  {
    v371 = 48;
    v372 = 5;
  }
  else
  {
    v371 = 96;
    v372 = 10;
  }
  memset(v715, 0, 24);
  v373 = v371;
  sub_18F69E014((uint64_t *)v715, v371);
  *(_DWORD *)buf = 0;
  sub_18F6B355C(v710, 0x6DB6DB6DB6DB6DB7 * (v368 >> 4), buf);
  if (*(_BYTE *)(a1 + 2232) && *(_BYTE *)(a1 + 2489) && *v685)
  {
    v374 = v372;
    do
    {
      v375 = *(_QWORD *)&v715[8];
      if (*(_QWORD *)&v715[8] >= *(_QWORD *)&v715[16])
      {
        v376 = sub_18F6B3118((uint64_t *)v715, (uint64_t)v685);
      }
      else
      {
        sub_18F6B323C((uint64_t)&v715[16], *(uint64_t *)&v715[8], (uint64_t)v685);
        v376 = v375 + 112;
      }
      *(_QWORD *)&v715[8] = v376;
      sub_18F69A3D4();
      --v374;
    }
    while (v374);
  }
  else
  {
    v372 = 0;
  }
  v377 = 0;
  v668 = (_QWORD *)(a1 + 984);
  do
  {
    v378 = random();
    v379 = *(float **)(a1 + 936);
    v380 = *(float **)(a1 + 944);
    if (v380 != v379)
    {
      v381 = v380 - v379;
      v380 = *(float **)(a1 + 936);
      do
      {
        v382 = v381 >> 1;
        v383 = &v380[v381 >> 1];
        v385 = *v383;
        v384 = v383 + 1;
        v381 += ~(v381 >> 1);
        if (v385 < (float)((float)v378 * 4.6566e-10))
          v380 = v384;
        else
          v381 = v382;
      }
      while (v381);
    }
    v386 = (char *)v380 - (char *)v379;
    v387 = *(_QWORD *)v710;
    ++*(_DWORD *)(*(_QWORD *)v710 + (v386 << 30 >> 30));
    ++v377;
  }
  while (v377 != (_DWORD)v373 - v372);
  v388 = *(_QWORD *)(a1 + 864);
  v389 = *(_QWORD *)(a1 + 872);
  if (v388 == v389)
  {
    v389 = *(_QWORD *)(a1 + 864);
  }
  else
  {
    v390 = 0;
    do
    {
      if (v390 >= (*(_QWORD *)&v710[8] - v387) >> 2)
        break;
      if (*(int *)(v387 + 4 * v390) >= 1)
      {
        v391 = 0;
        do
        {
          v392 = *(_QWORD *)&v715[8];
          if (*(_QWORD *)&v715[8] >= *(_QWORD *)&v715[16])
          {
            v393 = sub_18F6B3118((uint64_t *)v715, v388);
          }
          else
          {
            sub_18F6B323C((uint64_t)&v715[16], *(uint64_t *)&v715[8], v388);
            v393 = v392 + 112;
          }
          *(_QWORD *)&v715[8] = v393;
          sub_18F69A3D4();
          ++v391;
          v387 = *(_QWORD *)v710;
        }
        while (v391 < *(_DWORD *)(*(_QWORD *)v710 + 4 * v390));
        v389 = *(_QWORD *)(a1 + 872);
      }
      v388 += 112;
      ++v390;
    }
    while (v388 != v389);
  }
  v394 = *(_QWORD *)&v715[8];
  v395 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&v715[8] - *(_QWORD *)v715) >> 4);
  if (v395 <= v373)
  {
    v398 = *(_QWORD *)(a1 + 864);
    *(_QWORD *)(a1 + 864) = *(_QWORD *)v715;
    *(_QWORD *)(a1 + 872) = v394;
    *(_QWORD *)v715 = v398;
    *(_QWORD *)&v715[8] = v389;
    v399 = *(_QWORD *)(a1 + 880);
    *(_QWORD *)(a1 + 880) = *(_QWORD *)&v715[16];
    *(_QWORD *)&v715[16] = v399;
  }
  else if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v396 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v395;
      _os_log_impl(&dword_18F5B3000, v396, OS_LOG_TYPE_ERROR, "CLMM,Unexpected number of particles after resampling,%{public}d", buf, 8u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      *(_DWORD *)v700 = 67240192;
      *(_DWORD *)&v700[4] = v395;
      v397 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::resample()", "CoreLocation: %s\n", v397);
      if (v397 != buf)
        free(v397);
    }
  }
  if (*(_QWORD *)v710)
  {
    *(_QWORD *)&v710[8] = *(_QWORD *)v710;
    operator delete(*(void **)v710);
  }
  *(_QWORD *)buf = v715;
  sub_18F6B2D54((void ***)buf);
  if (v395 > v373)
    goto LABEL_839;
  if (*(_QWORD *)(a1 + 872) == *(_QWORD *)(a1 + 864))
    goto LABEL_814;
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v400 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v400, OS_LOG_TYPE_DEBUG, "CLMM,Assessing candidates", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      *(_WORD *)v715 = 0;
      v632 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v632);
      if (v632 != buf)
        free(v632);
    }
  }
  v401 = *(std::__shared_weak_count **)(a1 + 16);
  v692 = *(_QWORD *)(a1 + 8);
  v693 = v401;
  if (v401)
  {
    v402 = (unint64_t *)&v401->__shared_owners_;
    do
      v403 = __ldxr(v402);
    while (__stxr(v403 + 1, v402));
  }
  v666 = *(_QWORD *)(a1 + 1000);
  v404 = *(_QWORD **)(a1 + 984);
  v405 = (_QWORD *)(a1 + 992);
  if (v404 != (_QWORD *)v674)
  {
    while (1)
    {
      v406 = v404[7];
      *((_BYTE *)v404 + 200) = 0;
      *((_BYTE *)v404 + 192) = 0;
      if (!v406)
        break;
      if (*(_BYTE *)(v406 + 17))
        *(_BYTE *)(a1 + 1844) = 1;
      v407 = *v681;
      v408 = v681[1];
      v409 = v681[2];
      *(_OWORD *)(v404 + 627) = v681[3];
      *(_OWORD *)(v404 + 625) = v409;
      *(_OWORD *)(v404 + 623) = v408;
      *(_OWORD *)(v404 + 621) = v407;
      v410 = v681[4];
      v411 = v681[5];
      v412 = v681[6];
      *(_OWORD *)(v404 + 635) = v681[7];
      *(_OWORD *)(v404 + 633) = v412;
      *(_OWORD *)(v404 + 631) = v411;
      *(_OWORD *)(v404 + 629) = v410;
      std::string::operator=((std::string *)(v404 + 637), __str);
      memcpy(v404 + 640, __dst, 0x118uLL);
      if ((sub_18F6F0B68(v692, (uint64_t)(v404 + 621), v404 + 7, *((_BYTE *)v404 + 48), (double *)v404 + 333, *((_DWORD *)v404 + 18)) & 1) == 0)
      {
        v369 = v673;
        if (!*(_BYTE *)(a1 + 96))
          goto LABEL_805;
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v528 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v528, OS_LOG_TYPE_DEBUG, "CLMM,interpolateOnRoad returned false, determining mean road position", buf, 2u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_805;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        *(_WORD *)v715 = 0;
        v527 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v527);
LABEL_1029:
        if (v527 != buf)
          free(v527);
        v369 = v673;
LABEL_805:
        v436 = 0;
        ++*(_DWORD *)(a1 + 104);
        goto LABEL_808;
      }
      v413 = (double *)(v404 + 677);
      *(_OWORD *)(v404 + 677) = xmmword_18F774740;
      if (*((int *)v404 + 18) < 1)
      {
        v415 = 0;
      }
      else
      {
        v414 = 0;
        v415 = 0;
        do
        {
          v416 = (double *)&v404[v414];
          if (sub_18F5BD064((double *)(a1 + 608), *((double *)v404 + 640), *((double *)v404 + 641), v416[141], v416[237], *(double *)(a1 + 1200)) <= 40.0)
          {
            v417 = v416[333];
            if (v417 > *((double *)v404 + 678))
            {
              *((double *)v404 + 678) = v417;
              v417 = v416[333];
            }
            ++v415;
            if (v417 < *v413)
              *v413 = v417;
          }
          ++v414;
        }
        while (v414 < *((int *)v404 + 18));
      }
      *((_DWORD *)v404 + 19) = v415;
      v418 = *(_QWORD *)(a1 + 872);
      v419 = *(_QWORD *)(a1 + 864);
      v405 = (_QWORD *)(a1 + 992);
      if (v419 != v418)
      {
        v420 = 0.0;
        do
        {
          sub_18F69B170(v419, (uint64_t)buf);
          if (*(_QWORD *)buf == v404[4]
            && buf[16] == *((unsigned __int8 *)v404 + 48)
            && *(_QWORD *)&buf[8] == v404[5]
            && *(double *)(v419 + 56) > v420)
          {
            v418 = v419;
            v420 = *(double *)(v419 + 56);
          }
          v419 += 112;
        }
        while (v419 != *(_QWORD *)(a1 + 872));
        if (v419 != v418)
        {
          sub_18F623A40(v404 + 10, (uint64_t *)v418);
          v421 = *(_QWORD *)(v418 + 48);
          v422 = *(_OWORD *)(v418 + 32);
          *((_OWORD *)v404 + 6) = *(_OWORD *)(v418 + 16);
          *((_OWORD *)v404 + 7) = v422;
          v404[16] = v421;
          v423 = *(_OWORD *)(v418 + 56);
          *(_OWORD *)((char *)v404 + 145) = *(_OWORD *)(v418 + 65);
          *(_OWORD *)(v404 + 17) = v423;
          if (v404 + 10 != (_QWORD *)v418)
            sub_18F692DD0((char *)v404 + 168, *(char **)(v418 + 88), *(_QWORD *)(v418 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v418 + 96) - *(_QWORD *)(v418 + 88)) >> 3));
        }
      }
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v424 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v425 = *(_QWORD *)(a1 + 1136);
          v426 = v404[4];
          v427 = *((unsigned __int8 *)v404 + 48);
          v428 = *((_DWORD *)v404 + 19);
          *(_DWORD *)buf = 134349825;
          *(_QWORD *)&buf[4] = v425;
          *(_WORD *)&buf[12] = 2049;
          *(_QWORD *)&buf[14] = v426;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&buf[24] = v427;
          *(_WORD *)&buf[28] = 1026;
          *(_DWORD *)&buf[30] = v428;
          _os_log_impl(&dword_18F5B3000, v424, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,candidate,roadID,%{private}llu,fwd,%{public}d,countAroundMean,%{public}d", buf, 0x22u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v431 = *(_QWORD *)(a1 + 1136);
          v432 = v404[4];
          v433 = *((unsigned __int8 *)v404 + 48);
          v434 = *((_DWORD *)v404 + 19);
          *(_DWORD *)v715 = 134349825;
          *(_QWORD *)&v715[4] = v431;
          *(_WORD *)&v715[12] = 2049;
          *(_QWORD *)&v715[14] = v432;
          *(_WORD *)&v715[22] = 1026;
          *(_DWORD *)&v715[24] = v433;
          *(_WORD *)&v715[28] = 1026;
          *(_DWORD *)&v715[30] = v434;
          v435 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v435);
          if (v435 != buf)
            free(v435);
          v405 = (_QWORD *)(a1 + 992);
        }
      }
      v429 = (_QWORD *)v404[1];
      if (v429)
      {
        do
        {
          v430 = v429;
          v429 = (_QWORD *)*v429;
        }
        while (v429);
      }
      else
      {
        do
        {
          v430 = (_QWORD *)v404[2];
          _ZF = *v430 == (_QWORD)v404;
          v404 = v430;
        }
        while (!_ZF);
      }
      v404 = v430;
      if (v430 == v405)
        goto LABEL_634;
    }
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v369 = v673;
    v526 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v526, OS_LOG_TYPE_ERROR, "CLMM,NULL road, bad candidate", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_805;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    *(_WORD *)v715 = 0;
    v527 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v527);
    goto LABEL_1029;
  }
LABEL_634:
  if (v666 < 2)
    goto LABEL_635;
  v437 = (_QWORD *)*v668;
  v436 = 1;
  if ((_QWORD *)*v668 == v405)
    goto LABEL_807;
  v679 = (double *)(a1 + 608);
  __asm { FMOV            V0.2D, #-1.0 }
  v665 = _Q0;
  while (2)
  {
    v695 = 0;
    v439 = *(_QWORD *)(a1 + 1136);
    *(_QWORD *)v715 = 0;
    *(_QWORD *)&v715[8] = v439;
    *(_OWORD *)&v715[16] = v665;
    *(_QWORD *)&v715[32] = 0;
    *(_QWORD *)&v715[40] = 0;
    *(_QWORD *)v716 = 0xBFF0000000000000;
    *(_QWORD *)&v716[224] = 0;
    *(_DWORD *)&v716[232] = 0;
    memset(&v716[184], 0, 34);
    memset(&v716[240], 0, 75);
    memset(&v716[320], 0, 56);
    memset(&v716[8], 0, 174);
    *(_QWORD *)&v716[376] = 0xBFF0000000000000;
    *(_QWORD *)v700 = v700;
    *(_QWORD *)&v700[8] = v700;
    *(_QWORD *)&v700[16] = 0;
    v440 = 677;
    if (!*((_BYTE *)v437 + 48))
      v440 = 678;
    if (((*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, _QWORD, uint64_t, _QWORD *, double, double))(*(_QWORD *)v692 + 80))(v692, v715, v700, 0, 1, v437 + 7, *(double *)&v437[v440], 40.0) & 1) == 0)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v449 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v449, OS_LOG_TYPE_DEBUG, "CLMM,roadsAtIntersection returned false, searching for connected candidates", buf, 2u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          *(_WORD *)v710 = 0;
          v513 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v513);
          if (v513 != buf)
            free(v513);
          v405 = (_QWORD *)(a1 + 992);
        }
      }
      ++*(_DWORD *)(a1 + 108);
LABEL_661:
      v450 = 1;
      goto LABEL_745;
    }
    if (!*(_QWORD *)&v700[16])
      goto LABEL_744;
    v441 = *((_DWORD *)v437 + 18);
    if (v441 < 1)
      goto LABEL_719;
    v442 = 0;
    v670 = 0;
    v443 = *(double *)&v716[224];
    v444 = *(double *)&v716[104];
    v445 = *(double *)&v716[112];
    while (2)
    {
      v446 = *(double *)&v437[v442 + 333];
      if (*((_BYTE *)v437 + 48))
      {
        if (v446 >= v443)
          goto LABEL_647;
      }
      else if (v446 >= v443)
      {
LABEL_647:
        v447 = sub_18F5BD064(v679, v444, v445, *(double *)&v437[v442 + 141], *(double *)&v437[v442 + 237], *(double *)(a1 + 1200));
        v448 = v670;
        if (v447 <= 40.0)
          v448 = v670 + 1;
        v670 = v448;
        v441 = *((_DWORD *)v437 + 18);
      }
      if (++v442 < v441)
        continue;
      break;
    }
    if (v670 < 1)
    {
LABEL_719:
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_744;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v500 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v500, OS_LOG_TYPE_DEBUG, "CLMM,unexpected incomingCount < 1", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_744;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      *(_WORD *)v710 = 0;
      v501 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v501);
      goto LABEL_777;
    }
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v451 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v452 = *(_QWORD *)(a1 + 1136);
        v453 = v437[4];
        v454 = *((_DWORD *)v437 + 19);
        *(_DWORD *)buf = 134349569;
        *(_QWORD *)&buf[4] = v452;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v453;
        *(_WORD *)&buf[22] = 1026;
        *(_DWORD *)&buf[24] = v454;
        _os_log_impl(&dword_18F5B3000, v451, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,roadID,%{private}llu,incoming,countAroundMean,%{public}d", buf, 0x1Cu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v514 = *(_QWORD *)(a1 + 1136);
        v515 = v437[4];
        v516 = *((_DWORD *)v437 + 19);
        *(_DWORD *)v710 = 134349569;
        *(_QWORD *)&v710[4] = v514;
        *(_WORD *)&v710[12] = 2049;
        *(_QWORD *)&v710[14] = v515;
        *(_WORD *)&v710[22] = 1026;
        *(_DWORD *)&v710[24] = v516;
        v517 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v517);
        if (v517 != buf)
          free(v517);
        v405 = (_QWORD *)(a1 + 992);
      }
    }
    *((_DWORD *)v437 + 52) = v670;
    v455 = *(_QWORD *)&v700[8];
    if (*(_BYTE **)&v700[8] == v700)
    {
LABEL_738:
      if (!*(_BYTE *)(a1 + 96))
      {
        v450 = 37;
        goto LABEL_745;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v507 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v508 = *(_QWORD *)(a1 + 1136);
        v509 = v437[4];
        *(_DWORD *)buf = 134349313;
        *(_QWORD *)&buf[4] = v508;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v509;
        _os_log_impl(&dword_18F5B3000, v507, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,roadID,%{private}llu,no particles after the intersection", buf, 0x16u);
      }
      if (!sub_18F5C4AE0(115, 2))
      {
LABEL_744:
        v450 = 37;
        goto LABEL_745;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v518 = *(_QWORD *)(a1 + 1136);
      v519 = v437[4];
      *(_DWORD *)v710 = 134349313;
      *(_QWORD *)&v710[4] = v518;
      *(_WORD *)&v710[12] = 2049;
      *(_QWORD *)&v710[14] = v519;
      v501 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v501);
LABEL_777:
      if (v501 != buf)
        free(v501);
      v450 = 37;
      goto LABEL_780;
    }
    v456 = 0;
    v663 = 0;
    v457 = 0;
    v662 = v437 + 86;
    do
    {
      if (**(_QWORD **)(v455 + 16) == v437[4]
        && *(unsigned __int8 *)(v455 + 32) == (*((unsigned __int8 *)v437 + 48) ^ 1))
      {
        goto LABEL_708;
      }
      v458 = *(std::__shared_weak_count **)(v455 + 24);
      v688 = *(__n128 **)(v455 + 16);
      v689 = (__n128 **)v458;
      if (v458)
      {
        v459 = (unint64_t *)&v458->__shared_owners_;
        do
          v460 = __ldxr(v459);
        while (__stxr(v460 + 1, v459));
      }
      sub_18F68FFC8((uint64_t)&v697, (uint64_t)&v688, *(_BYTE *)(v455 + 32));
      if (v458)
      {
        v461 = (unint64_t *)&v458->__shared_owners_;
        do
          v462 = __ldaxr(v461);
        while (__stlxr(v462 - 1, v461));
        if (!v462)
        {
          ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
          std::__shared_weak_count::__release_weak(v458);
        }
      }
      v463 = sub_18F6B3060((uint64_t)v668, (uint64_t *)&v697);
      v691[0] = 0.0;
      if (v674 == v463 || (v464 = v463, *(int *)(v463 + 72) < 1))
      {
LABEL_706:
        v476 = v456;
        goto LABEL_707;
      }
      v465 = v457;
      v466 = 0;
      v467 = 0;
      v468 = 0.0;
      v469 = *(double *)&v716[104];
      v470 = *(double *)&v716[112];
      v471 = 0.0;
      do
      {
        v472 = v464 + 8 * v466;
        v473 = *(double *)(v472 + 2664);
        v474 = *(double *)(v455 + 40);
        if (*(_BYTE *)(v464 + 48))
        {
          if (v473 <= v474)
            goto LABEL_690;
        }
        else if (v473 >= v474)
        {
          goto LABEL_690;
        }
        v475 = sub_18F5BD064(v679, v469, v470, *(double *)(v464 + 8 * v466 + 1128), *(double *)(v464 + 8 * v466 + 1896), *(double *)(a1 + 1200));
        if (v475 <= 40.0)
        {
          v468 = v468 + *(double *)(v472 + 2664);
          v691[0] = v468;
          v471 = v471 + v475;
          ++v467;
        }
LABEL_690:
        ++v466;
      }
      while (v466 < *(int *)(v464 + 72));
      if (!v467)
      {
        v476 = v456;
        v457 = v465;
        goto LABEL_707;
      }
      ++v663;
      v691[0] = v468 / (double)v467;
      v476 = (v467 + v670);
      v457 = v465;
      if ((int)v476 <= (int)v456)
        goto LABEL_706;
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v477 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v478 = *(_QWORD *)(a1 + 1136);
          v479 = v437[4];
          *(_DWORD *)buf = 134349825;
          *(_QWORD *)&buf[4] = v478;
          *(_WORD *)&buf[12] = 2049;
          *(_QWORD *)&buf[14] = v479;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&buf[24] = v670;
          *(_WORD *)&buf[28] = 1026;
          *(_DWORD *)&buf[30] = v467;
          _os_log_impl(&dword_18F5B3000, v477, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,combinedBest,roadID,%{private}llu,incomingCount,%{public}d,outgoingCount,%{public}d", buf, 0x22u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v497 = *(_QWORD *)(a1 + 1136);
          v498 = v437[4];
          *(_DWORD *)v710 = 134349825;
          *(_QWORD *)&v710[4] = v497;
          *(_WORD *)&v710[12] = 2049;
          *(_QWORD *)&v710[14] = v498;
          *(_WORD *)&v710[22] = 1026;
          *(_DWORD *)&v710[24] = v670;
          *(_WORD *)&v710[28] = 1026;
          *(_DWORD *)&v710[30] = v467;
          v499 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v499);
          if (v499 != buf)
            free(v499);
          v457 = v465;
        }
      }
      v480 = *(_OWORD *)&v716[32];
      *((_OWORD *)v437 + 20) = *(_OWORD *)&v716[16];
      *((_OWORD *)v437 + 21) = v480;
      v481 = *(_OWORD *)&v716[64];
      *((_OWORD *)v437 + 22) = *(_OWORD *)&v716[48];
      *((_OWORD *)v437 + 23) = v481;
      v482 = *(_OWORD *)&v715[16];
      *((_OWORD *)v437 + 16) = *(_OWORD *)v715;
      *((_OWORD *)v437 + 17) = v482;
      v483 = *(_OWORD *)v716;
      *((_OWORD *)v437 + 18) = *(_OWORD *)&v715[32];
      *((_OWORD *)v437 + 19) = v483;
      std::string::operator=((std::string *)v437 + 16, (const std::string *)&v716[80]);
      memcpy(v437 + 51, &v716[104], 0x118uLL);
      *((_DWORD *)v437 + 53) = v467;
      *((_DWORD *)v437 + 54) = v476;
      *((double *)v437 + 31) = v471 / (double)v467;
      v437[140] = *(_QWORD *)(v455 + 40);
      v484 = *(_OWORD **)(v464 + 56);
      v485 = *(std::__shared_weak_count **)(v464 + 64);
      if (v485)
      {
        v486 = (unint64_t *)&v485->__shared_owners_;
        do
          v487 = __ldxr(v486);
        while (__stxr(v487 + 1, v486));
        v488 = *(_BYTE *)(v464 + 48);
        *((_OWORD *)v437 + 14) = *v484;
        *((_BYTE *)v437 + 240) = v488;
        do
          v489 = __ldaxr(v486);
        while (__stlxr(v489 - 1, v486));
        if (!v489)
        {
          ((void (*)(std::__shared_weak_count *))v485->__on_zero_shared)(v485);
          std::__shared_weak_count::__release_weak(v485);
        }
      }
      else
      {
        v490 = *(_BYTE *)(v464 + 48);
        *((_OWORD *)v437 + 14) = *v484;
        *((_BYTE *)v437 + 240) = v490;
      }
      v491 = *v681;
      v492 = v681[1];
      v493 = v681[3];
      *((_OWORD *)v437 + 45) = v681[2];
      *((_OWORD *)v437 + 46) = v493;
      *v662 = v491;
      *((_OWORD *)v437 + 44) = v492;
      v494 = v681[4];
      v495 = v681[5];
      v496 = v681[7];
      *((_OWORD *)v437 + 49) = v681[6];
      *((_OWORD *)v437 + 50) = v496;
      *((_OWORD *)v437 + 47) = v494;
      *((_OWORD *)v437 + 48) = v495;
      std::string::operator=((std::string *)v437 + 34, __str);
      memcpy(v437 + 105, __dst, 0x118uLL);
      if ((sub_18F6F0B68(v692, (uint64_t)v662, (uint64_t *)(v464 + 56), *(_BYTE *)(v464 + 48), v691, 1) & 1) == 0)
      {
        v405 = (_QWORD *)(a1 + 992);
        if (*(_BYTE *)(a1 + 96))
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v512 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v512, OS_LOG_TYPE_DEBUG, "CLMM,interpolateOnRoad returned false, determining outgoing road position", buf, 2u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            *(_WORD *)v710 = 0;
            v525 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v525);
            if (v525 != buf)
              free(v525);
            v405 = (_QWORD *)(a1 + 992);
          }
        }
        ++*(_DWORD *)(a1 + 104);
        goto LABEL_661;
      }
LABEL_707:
      ++v457;
      v456 = v476;
LABEL_708:
      v455 = *(_QWORD *)(v455 + 8);
    }
    while ((_BYTE *)v455 != v700);
    v121 = (int)v456 < 1;
    v405 = (_QWORD *)(a1 + 992);
    if (v121)
      goto LABEL_738;
    *((_BYTE *)v437 + 200) = 1;
    if (v457 > 1)
      *((_BYTE *)v437 + 192) = 1;
    *((_DWORD *)v437 + 49) = v663;
    if (!*(_BYTE *)(a1 + 96))
      goto LABEL_737;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v502 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v503 = *(_QWORD *)(a1 + 1136);
      v504 = v437[4];
      v505 = *((unsigned __int8 *)v437 + 200);
      v506 = *((unsigned __int8 *)v437 + 192);
      *(_DWORD *)buf = 134349825;
      *(_QWORD *)&buf[4] = v503;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v504;
      *(_WORD *)&buf[22] = 1026;
      *(_DWORD *)&buf[24] = v505;
      *(_WORD *)&buf[28] = 1026;
      *(_DWORD *)&buf[30] = v506;
      _os_log_impl(&dword_18F5B3000, v502, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,roadID,%{private}llu,isCombined,%{public}d,isMulti,%{public}d", buf, 0x22u);
    }
    if (!sub_18F5C4AE0(115, 2))
    {
LABEL_737:
      v450 = 0;
      goto LABEL_745;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v520 = *(_QWORD *)(a1 + 1136);
    v521 = v437[4];
    v522 = *((unsigned __int8 *)v437 + 200);
    v523 = *((unsigned __int8 *)v437 + 192);
    *(_DWORD *)v710 = 134349825;
    *(_QWORD *)&v710[4] = v520;
    *(_WORD *)&v710[12] = 2049;
    *(_QWORD *)&v710[14] = v521;
    *(_WORD *)&v710[22] = 1026;
    *(_DWORD *)&v710[24] = v522;
    *(_WORD *)&v710[28] = 1026;
    *(_DWORD *)&v710[30] = v523;
    v524 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v524);
    if (v524 != buf)
      free(v524);
    v450 = 0;
LABEL_780:
    v405 = (_QWORD *)(a1 + 992);
LABEL_745:
    sub_18F64F950((uint64_t *)v700);
    if ((v716[103] & 0x80000000) != 0)
      operator delete(*(void **)&v716[80]);
    if (v450 == 37 || !v450)
    {
      v510 = (_QWORD *)v437[1];
      if (v510)
      {
        do
        {
          v511 = v510;
          v510 = (_QWORD *)*v510;
        }
        while (v510);
      }
      else
      {
        do
        {
          v511 = (_QWORD *)v437[2];
          _ZF = *v511 == (_QWORD)v437;
          v437 = v511;
        }
        while (!_ZF);
      }
      v437 = v511;
      if (v511 == v405)
      {
LABEL_635:
        v436 = 1;
        goto LABEL_807;
      }
      continue;
    }
    break;
  }
  v436 = 0;
LABEL_807:
  v369 = v673;
LABEL_808:
  v529 = v693;
  if (v693)
  {
    v530 = (unint64_t *)&v693->__shared_owners_;
    do
      v531 = __ldaxr(v530);
    while (__stlxr(v531 - 1, v530));
    if (!v531)
    {
      ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
      std::__shared_weak_count::__release_weak(v529);
    }
  }
  if (!v436)
    goto LABEL_831;
LABEL_814:
  if ((sub_18F69E0D0(a1) & 1) == 0)
    goto LABEL_839;
  sub_18F6A1B90(a1);
  if ((sub_18F6A33A0(a1) & 1) == 0)
    goto LABEL_831;
  LOBYTE(v697) = 0;
  if ((sub_18F6A46B4(a1, &v697) & 1) == 0)
    goto LABEL_839;
  if ((_BYTE)v697 && !sub_18F6A5168(a1))
  {
LABEL_831:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
LABEL_832:
    v105 = 0;
    goto LABEL_833;
  }
  if (!*(_BYTE *)(a1 + 1392)
    || (v532 = *(_QWORD *)(a1 + 1016),
        *(_BYTE *)(a1 + 777) = *(_BYTE *)(v532 + 16),
        *(_DWORD *)(a1 + 780) = *(_DWORD *)(v532 + 20),
        *(_BYTE *)(a1 + 784) = *(_BYTE *)(a1 + 1649),
        !*(_BYTE *)(a1 + 2232)))
  {
    sub_18F64F950((uint64_t *)(a1 + 3072));
    v541 = (uint64_t *)(a1 + 3120);
    goto LABEL_926;
  }
  v533 = *(_QWORD *)(a1 + 1240);
  if (*(_QWORD *)(a1 + 2080) != v533)
  {
    v534 = fmod(*(double *)(a1 + 1432) - *(double *)(a1 + 2272), 360.0);
    if (v534 < 0.0)
      v534 = v534 + 360.0;
    if (v534 > 180.0)
      v534 = v534 + -360.0;
    if (fabs(v534) > 45.0)
    {
      v535 = *(_QWORD *)(a1 + 3080);
      if (v535 == a1 + 3072)
      {
        v537 = 1;
      }
      else
      {
        do
        {
          v536 = **(_QWORD **)(v535 + 16);
          _ZF = v533 == v536;
          v537 = v533 != v536;
          if (_ZF)
            break;
          v535 = *(_QWORD *)(v535 + 8);
        }
        while (v535 != a1 + 3072);
      }
      for (k = *(_QWORD *)(a1 + 3128); k != a1 + 3120; k = *(_QWORD *)(k + 8))
      {
        if (v533 == **(_QWORD **)(k + 16))
          goto LABEL_925;
      }
      if (v537)
      {
        v543 = *(_QWORD *)(a1 + 1024);
        *(_QWORD *)v710 = v532;
        *(_QWORD *)&v710[8] = v543;
        if (v543)
        {
          v544 = (unint64_t *)(v543 + 8);
          do
            v545 = __ldxr(v544);
          while (__stxr(v545 + 1, v544));
        }
        v546 = *(_QWORD *)(a1 + 1856);
        v547 = *(_QWORD *)(a1 + 1864);
        *(_QWORD *)v700 = v546;
        *(_QWORD *)&v700[8] = v547;
        if (v547)
        {
          v548 = (unint64_t *)(v547 + 8);
          do
            v549 = __ldxr(v548);
          while (__stxr(v549 + 1, v548));
        }
        v551 = *(float64x2_t **)(v532 + 136);
        v550 = *(float64x2_t **)(v532 + 144);
        v552 = 0uLL;
        v553 = 0uLL;
        if (v550 != v551)
          v553 = *v551;
        v556 = v546 + 136;
        v555 = *(float64x2_t **)(v546 + 136);
        v554 = *(float64x2_t **)(v556 + 8);
        if (v554 != v555)
          v552 = *v555;
        v557 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v553, v552)));
        if ((vand_s8((int8x8_t)v557, (int8x8_t)vdup_lane_s32(v557, 1)).u8[0] & 1) != 0)
          goto LABEL_876;
        v558 = 0uLL;
        v559 = 0uLL;
        if (v550 != v551)
          v559 = *v551;
        if (v554 != v555)
          v558 = v554[-1];
        v560 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v559, v558)));
        if ((vand_s8((int8x8_t)v560, (int8x8_t)vdup_lane_s32(v560, 1)).u8[0] & 1) != 0)
          goto LABEL_876;
        v561 = 0uLL;
        v562 = 0uLL;
        if (v550 != v551)
          v562 = v550[-1];
        if (v554 != v555)
          v561 = *v555;
        v563 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v562, v561)));
        if ((vand_s8((int8x8_t)v563, (int8x8_t)vdup_lane_s32(v563, 1)).u8[0] & 1) != 0)
          goto LABEL_876;
        v564 = 0uLL;
        v565 = 0uLL;
        if (v550 != v551)
          v565 = v550[-1];
        if (v554 != v555)
          v564 = v554[-1];
        v566 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v565, v564)));
        if ((vand_s8((int8x8_t)v566, (int8x8_t)vdup_lane_s32(v566, 1)).u8[0] & 1) != 0)
LABEL_876:
          v567 = 1;
        else
          v567 = 0;
        if (*(_BYTE *)(a1 + 96))
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v568 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            v569 = *(_QWORD *)(a1 + 1136);
            v570 = **(_QWORD **)(a1 + 1016);
            v571 = **(_QWORD **)(a1 + 1856);
            *(_DWORD *)buf = 134349825;
            *(_QWORD *)&buf[4] = v569;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = v567;
            *(_WORD *)&buf[18] = 2049;
            *(_QWORD *)&buf[20] = v570;
            *(_WORD *)&buf[28] = 2049;
            *(_QWORD *)&buf[30] = v571;
            _os_log_impl(&dword_18F5B3000, v568, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,hopping check,connecting roads,%{public}d,current road,%{private}lld,prior road,%{private}lld", buf, 0x26u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            v646 = *(_QWORD *)(a1 + 1136);
            v647 = **(_QWORD **)(a1 + 1016);
            v648 = **(_QWORD **)(a1 + 1856);
            *(_DWORD *)v715 = 134349825;
            *(_QWORD *)&v715[4] = v646;
            *(_WORD *)&v715[12] = 1026;
            *(_DWORD *)&v715[14] = v567;
            *(_WORD *)&v715[18] = 2049;
            *(_QWORD *)&v715[20] = v647;
            *(_WORD *)&v715[28] = 2049;
            *(_QWORD *)&v715[30] = v648;
            v649 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v649);
            if (v649 != buf)
              free(v649);
          }
        }
        sub_18F5D6004((uint64_t)v700);
        sub_18F5D6004((uint64_t)v710);
        if ((v567 & 1) == 0)
        {
          if (!*(_QWORD *)v675 || !**(_QWORD **)v675)
            goto LABEL_924;
          v572 = *(_QWORD *)(a1 + 1024);
          *(_QWORD *)v710 = *(_QWORD *)(a1 + 1016);
          *(_QWORD *)&v710[8] = v572;
          if (v572)
          {
            v573 = (unint64_t *)(v572 + 8);
            do
              v574 = __ldxr(v573);
            while (__stxr(v574 + 1, v573));
          }
          v575 = *(_QWORD *)(a1 + 1856);
          v576 = *(_QWORD *)(a1 + 1864);
          *(_QWORD *)v700 = v575;
          *(_QWORD *)&v700[8] = v576;
          if (v576)
          {
            v577 = (unint64_t *)(v576 + 8);
            do
              v578 = __ldxr(v577);
            while (__stxr(v578 + 1, v577));
          }
          v579 = *(float64x2_t **)(*(_QWORD *)v675 + 136);
          v580 = *(float64x2_t **)(*(_QWORD *)v675 + 144);
          v680 = 0u;
          v676 = 0u;
          if (v580 != v579)
            v676 = *v579;
          v581 = *(_QWORD *)(v575 + 144);
          if (v581 != *(_QWORD *)(v575 + 136))
            v680 = *(float64x2_t *)(v581 - 16);
          if (*(_BYTE *)(a1 + 96))
          {
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            v582 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              v583 = *(_QWORD *)(a1 + 1136);
              v584 = **(_QWORD **)v700;
              v585 = **(_QWORD **)(a1 + 1656);
              v586 = **(_QWORD **)v710;
              *(_DWORD *)buf = 134349825;
              *(_QWORD *)&buf[4] = v583;
              *(_WORD *)&buf[12] = 2049;
              *(_QWORD *)&buf[14] = v584;
              *(_WORD *)&buf[22] = 2049;
              *(_QWORD *)&buf[24] = v585;
              *(_WORD *)&buf[32] = 2049;
              *(_QWORD *)&buf[34] = v586;
              _os_log_impl(&dword_18F5B3000, v582, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,hopping check,prior road,%{private}lld, connected to the incoming road,%{private}lld, of the current solution road,%{private}lld", buf, 0x2Au);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              v657 = *(_QWORD *)(a1 + 1136);
              v658 = **(_QWORD **)v700;
              v659 = **(_QWORD **)(a1 + 1656);
              v660 = **(_QWORD **)v710;
              *(_DWORD *)v715 = 134349825;
              *(_QWORD *)&v715[4] = v657;
              *(_WORD *)&v715[12] = 2049;
              *(_QWORD *)&v715[14] = v658;
              *(_WORD *)&v715[22] = 2049;
              *(_QWORD *)&v715[24] = v659;
              *(_WORD *)&v715[32] = 2049;
              *(_QWORD *)&v715[34] = v660;
              v661 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v661);
              if (v661 != buf)
                free(v661);
            }
          }
          v587 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v676, v680)));
          v588 = vand_s8((int8x8_t)v587, (int8x8_t)vdup_lane_s32(v587, 1)).u8[0];
          sub_18F5D6004((uint64_t)v700);
          sub_18F5D6004((uint64_t)v710);
          if ((v588 & 1) == 0)
          {
LABEL_924:
            v589 = sub_18F5BD064((double *)(a1 + 608), *(double *)(a1 + 2256), *(double *)(a1 + 2264), *(double *)(a1 + 1416), *(double *)(a1 + 1424), *(double *)(a1 + 1200)) > 35.0|| *(_DWORD *)(a1 + 2680) > 15;
            if (*(_BYTE *)(a1 + 96))
            {
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              v594 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                v595 = *(_QWORD *)(a1 + 1136);
                v596 = *(_QWORD *)(a1 + 2272);
                v597 = *(_QWORD *)(a1 + 1432);
                v598 = **(_QWORD **)(a1 + 1016);
                v599 = **(_QWORD **)(a1 + 1856);
                *(_DWORD *)buf = 134350337;
                *(_QWORD *)&buf[4] = v595;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v589;
                *(_WORD *)&buf[18] = 2050;
                *(_QWORD *)&buf[20] = v596;
                *(_WORD *)&buf[28] = 2050;
                *(_QWORD *)&buf[30] = v597;
                *(_WORD *)&buf[38] = 2049;
                *(_QWORD *)&buf[40] = v598;
                *(_WORD *)&buf[48] = 2049;
                *(_QWORD *)&buf[50] = v599;
                _os_log_impl(&dword_18F5B3000, v594, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,hopping between roads detected,reset,%{public}d,priorfullSnapCourse,%{public}.1lf,currentFullSnapCourse,%{public}.1lf,priorId,%{private}llu,currentId,%{private}llu", buf, 0x3Au);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E29907B0);
                v651 = *(_QWORD *)(a1 + 1136);
                v652 = *(_QWORD *)(a1 + 2272);
                v653 = *(_QWORD *)(a1 + 1432);
                v654 = **(_QWORD **)(a1 + 1016);
                v655 = **(_QWORD **)(a1 + 1856);
                *(_DWORD *)v715 = 134350337;
                *(_QWORD *)&v715[4] = v651;
                *(_WORD *)&v715[12] = 1026;
                *(_DWORD *)&v715[14] = v589;
                *(_WORD *)&v715[18] = 2050;
                *(_QWORD *)&v715[20] = v652;
                *(_WORD *)&v715[28] = 2050;
                *(_QWORD *)&v715[30] = v653;
                *(_WORD *)&v715[38] = 2049;
                *(_QWORD *)&v715[40] = v654;
                *(_WORD *)v716 = 2049;
                *(_QWORD *)&v716[2] = v655;
                v656 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v656);
                if (v656 != buf)
                  free(v656);
              }
            }
            if (v589)
              goto LABEL_839;
          }
        }
      }
    }
  }
LABEL_925:
  sub_18F64FCD8((uint64_t *)(a1 + 3072), *(_QWORD *)(a1 + 3056), a1 + 3048);
  sub_18F64F950((uint64_t *)(a1 + 3048));
  v541 = (uint64_t *)(a1 + 3096);
  sub_18F64FCD8((uint64_t *)(a1 + 3120), *(_QWORD *)(a1 + 3104), a1 + 3096);
LABEL_926:
  sub_18F64F950(v541);
  if (*v369)
  {
    v600 = **(_QWORD **)(a1 + 1016);
    v601 = *(unsigned __int8 *)(a1 + 1036);
    v602 = *(_QWORD *)(a1 + 928);
    if (!v602
      || (v603 = *(_QWORD *)(a1 + 920), v600 != *(_QWORD *)(v603 + 16))
      || v601 != *(unsigned __int8 *)(v603 + 24))
    {
      v604 = operator new(0x20uLL);
      v604[24] = v601;
      v605 = *(_QWORD **)(a1 + 920);
      *(_QWORD *)v604 = a1 + 912;
      *((_QWORD *)v604 + 1) = v605;
      *((_QWORD *)v604 + 2) = v600;
      *v605 = v604;
      *(_QWORD *)(a1 + 920) = v604;
      *(_QWORD *)(a1 + 928) = v602 + 1;
      if ((int)v602 + 1 >= 51)
        sub_18F6AD04C((uint64_t **)(a1 + 912));
    }
    if (*v369 && *(_BYTE *)(a1 + 1848))
    {
      if (v600 == *(_QWORD *)*v685 && v601 == *(unsigned __int8 *)(a1 + 1876))
        v606 = *(_DWORD *)(a1 + 2680) + 1;
      else
        v606 = 0;
      *(_DWORD *)(a1 + 1840) = v606;
      v607 = sub_18F5BD064((double *)(a1 + 608), *(double *)(a1 + 1888), *(double *)(a1 + 1896), *(double *)(a1 + 1048), *(double *)(a1 + 1056), *(double *)(a1 + 1200));
      sub_18F692488((uint64_t)buf, (uint64_t)v685);
      *(_DWORD *)v715 = 0;
      if (sub_18F699D74(a1, (uint64_t)buf, (int *)v715, v607))
      {
        *(_BYTE *)(a1 + 2688) = 1;
        *(_DWORD *)(a1 + 2824) = *(_DWORD *)v715;
        sub_18F69B218(a1 + 2712, (uint64_t)buf);
        *(_QWORD *)(a1 + 2704) = *(_QWORD *)(a1 + 1976);
      }
      sub_18F692600((uint64_t)buf);
    }
    else
    {
      *(_DWORD *)(a1 + 1840) = 0;
    }
  }
  if (*(_BYTE *)(a1 + 2688))
  {
    if (!*v369
      || (v608 = sub_18F5BD064((double *)(a1 + 608), *(double *)(a1 + 2744), *(double *)(a1 + 2752), *(double *)(a1 + 1280), *(double *)(a1 + 1288), *(double *)(a1 + 1200)), *(long double *)(a1 + 2696) = v608, v608 > 450.0))
    {
      *(_BYTE *)(a1 + 2688) = 0;
    }
  }
  sub_18F6A2568(a1);
  if (*(double *)(a1 + 1184) == 0.0 && *(double *)(a1 + 1192) == 0.0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v609 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v609, OS_LOG_TYPE_ERROR, "CLMM,Unexpected crumb lat==lon==0", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      *(_WORD *)v715 = 0;
      v640 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v640);
      if (v640 != buf)
        goto LABEL_1039;
    }
    goto LABEL_839;
  }
  if (!*v369)
  {
LABEL_965:
    v611 = *v681;
    v612 = v681[1];
    v613 = v681[3];
    *(_OWORD *)(a2 + 32) = v681[2];
    *(_OWORD *)(a2 + 48) = v613;
    *(_OWORD *)a2 = v611;
    *(_OWORD *)(a2 + 16) = v612;
    v614 = v681[4];
    v615 = v681[5];
    v616 = v681[7];
    *(_OWORD *)(a2 + 96) = v681[6];
    *(_OWORD *)(a2 + 112) = v616;
    *(_OWORD *)(a2 + 64) = v614;
    *(_OWORD *)(a2 + 80) = v615;
    std::string::operator=(v669, __str);
    memcpy(__src, __dst, 0x118uLL);
    if (*(_BYTE *)(a1 + 1392))
    {
      *(_QWORD *)(a1 + 4016) = *(_QWORD *)(a1 + 1152);
      if (*(_BYTE *)(a1 + 776) && *(_BYTE *)(a1 + 1648))
      {
        if (*(_BYTE *)(a1 + 96))
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v617 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v617, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse engaged but not snapping course", buf, 2u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            *(_WORD *)v715 = 0;
            v642 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v642);
            if (v642 != buf)
              free(v642);
          }
        }
        *(_QWORD *)(a2 + 168) = *(_QWORD *)(a1 + 848);
      }
      sub_18F6AD074(a1, a2);
      v618 = *(unsigned __int8 *)(a1 + 1392);
      *(_QWORD *)buf = *(_QWORD *)(a2 + 192);
      if (v618 && (sub_18F674064(a1, (uint64_t *)buf) & 1) != 0)
      {
        v619 = buf;
LABEL_980:
        *(_QWORD *)(a2 + 192) = *v619;
LABEL_123:
        v105 = 1;
        goto LABEL_833;
      }
    }
    else
    {
      *(_QWORD *)(a2 + 168) = *(_QWORD *)(a1 + 848);
      ++*(_DWORD *)(a1 + 104);
      *(_QWORD *)buf = *(_QWORD *)(a2 + 192);
    }
    v619 = (_QWORD *)(a1 + 856);
    goto LABEL_980;
  }
  if (*__dst != 0.0 || *(double *)(a1 + 1288) != 0.0)
  {
    if (*(_QWORD *)v677)
      *(_BYTE *)(a1 + 1477) = *(_BYTE *)(*(_QWORD *)v677 + 17);
    goto LABEL_965;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29907B0);
  v610 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v610, OS_LOG_TYPE_ERROR, "CLMM,Unexpected crumb snapLat==snapLon==0", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    *(_WORD *)v715 = 0;
    v640 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v640);
    if (v640 != buf)
LABEL_1039:
      free(v640);
  }
LABEL_839:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v105 = 0;
  ++*(_DWORD *)(a1 + 104);
LABEL_833:
  if (v686)
  {
    v538 = (unint64_t *)&v686->__shared_owners_;
    do
      v539 = __ldaxr(v538);
    while (__stlxr(v539 - 1, v538));
    if (!v539)
    {
      ((void (*)(std::__shared_weak_count *))v686->__on_zero_shared)(v686);
      std::__shared_weak_count::__release_weak(v686);
    }
  }
  return v105;
}

void sub_18F6ACDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;
  char a72;

  sub_18F64F950(&a62);
  sub_18F692600((uint64_t)&STACK[0x260]);
  STACK[0x480] = (unint64_t)&a72;
  sub_18F6B2FEC((void ***)&STACK[0x480]);
  sub_18F5D6004((uint64_t)&a70);
  sub_18F5D6004((uint64_t)&a59);
  _Unwind_Resume(a1);
}

void sub_18F6AD04C(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *a1;
  v2 = **a1;
  *(_QWORD *)(v2 + 8) = (*a1)[1];
  *(_QWORD *)v1[1] = v2;
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  operator delete(v1);
}

void sub_18F6AD074(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  double v4;
  double v6;
  double v7;
  BOOL v8;
  double v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  char *v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  double v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  double v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 264))
    v2 = *(_BYTE *)(a2 + 265) == 0;
  else
    v2 = 0;
  if (v2)
  {
    v4 = *(double *)(a2 + 80);
    if (v4 < 400.0 && v4 > 0.0)
    {
      if (!*(_BYTE *)(a1 + 1649)
        || *(_BYTE *)(a1 + 1650)
        || ((v6 = *(double *)(a1 + 4024), v7 = vabdd_f64(*(double *)(a2 + 8), v6), v6 >= 0.0)
          ? (v8 = v7 <= 2.0)
          : (v8 = 0),
            v8))
      {
        v9 = sub_18F5BD064((double *)(a1 + 608), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 152), *(double *)(a2 + 160), 0.0);
        v10 = v9 / *(double *)(a2 + 80);
        if (v10 > 1.5)
        {
          if (*(_BYTE *)(a1 + 96))
          {
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            v11 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              v12 = *(_QWORD *)(a2 + 8);
              v13 = *(_QWORD *)(a2 + 56);
              v14 = *(_QWORD *)(a2 + 64);
              v15 = *(_QWORD *)(a2 + 104);
              v16 = *(_QWORD *)(a2 + 152);
              v17 = *(_QWORD *)(a2 + 160);
              v18 = *(_QWORD *)(a2 + 168);
              v19 = *(_QWORD *)(a2 + 72);
              v20 = *(_QWORD *)(a2 + 80);
              *(_DWORD *)buf = 134351617;
              v24 = v12;
              v25 = 2049;
              v26 = v13;
              v27 = 2049;
              v28 = v14;
              v29 = 2050;
              v30 = v19;
              v31 = 2050;
              v32 = v15;
              v33 = 2049;
              v34 = v16;
              v35 = 2049;
              v36 = v17;
              v37 = 2050;
              v38 = v18;
              v39 = 2050;
              v40 = v9;
              v41 = 2050;
              v42 = v20;
              v43 = 2050;
              v44 = v10;
              _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf,alt,%{public}.2lf,course,%{public}.1lf,snapLat,%{private}.8lf,snapLon,%{private}.8lf,snapCourse,%{public}.1lf,horizontalError,%{public}.2lf,hunc,%{public}.2lf,ratio,%{public}.2lf", buf, 0x70u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              v22 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::modifyHorizontalUncertainty(CLMapCrumb &)", "CoreLocation: %s\n", v22);
              if (v22 != (char *)buf)
                free(v22);
            }
          }
          v21 = v9 * 1.05;
          if (v9 * 1.05 > 400.0)
            v21 = 400.0;
          *(double *)(a2 + 80) = v21;
          *(_QWORD *)(a1 + 4024) = *(_QWORD *)(a2 + 8);
        }
      }
    }
  }
}

uint64_t sub_18F6AD3C8(uint64_t a1, double *a2, double a3, double a4, double a5)
{
  double v9;
  double v10;
  double v11;
  NSObject *v12;
  uint64_t result;
  NSObject *v14;
  NSObject *v15;
  char *v16;
  double v17;
  double v18[2];
  uint8_t buf[1640];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v9 = *(double *)(a1 + 1432);
  v10 = fmod(v9 - a5, 360.0);
  if (v10 < 0.0)
    v10 = v10 + 360.0;
  if (v10 > 180.0)
    v10 = v10 + -360.0;
  v11 = fabs(v10);
  if (v11 <= 8.0)
  {
    if (v11 > *a2)
    {
      *a2 = v11;
      v9 = *(double *)(a1 + 1432);
    }
    v17 = 0.0;
    v18[0] = 0.0;
    sub_18F71ACC4((double *)(a1 + 608), v18, &v17, *(double *)(a1 + 1416), *(double *)(a1 + 1424), *(double *)(a1 + 1200), v9, a3, a4);
    if (fabs(v18[0]) <= 5.0)
    {
      if (fabs(v17) <= 45.0)
        return 1;
      if (!*(_BYTE *)(a1 + 96))
        return 0;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v15 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_DEBUG, "CLMM,along track too large, not suitable DOT assistance", buf, 2u);
      }
      result = sub_18F5C4AE0(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
      {
LABEL_34:
        v16 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::runDirectionOfTravelHelper(double, double, double, double &)", "CoreLocation: %s\n", v16);
        if (v16 != (char *)buf)
          free(v16);
        return 0;
      }
    }
    else
    {
      if (!*(_BYTE *)(a1 + 96))
        return 0;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v14 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_DEBUG, "CLMM,across track too large, not suitable DOT assistance", buf, 2u);
      }
      result = sub_18F5C4AE0(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_34;
    }
    dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    goto LABEL_34;
  }
  if (!*(_BYTE *)(a1 + 96))
    return 0;
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29907B0);
  v12 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_DEBUG, "CLMM,no DOT, course is not aligned", buf, 2u);
  }
  result = sub_18F5C4AE0(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    LOWORD(v18[0]) = 0;
    goto LABEL_34;
  }
  return result;
}

uint64_t sub_18F6AD7F0(uint64_t a1, double *a2)
{
  double v4;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  double v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v25;
  char *v26;
  NSObject *v27;
  BOOL v28;
  double v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  double v33;
  double v34;
  uint64_t v35;
  int v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  BOOL v42;
  float64x2_t v47;
  int16x8_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  NSObject *v73;
  NSObject *v74;
  char *v75;
  int v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  NSObject *v82;
  NSObject *v83;
  NSObject *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  char *v106;
  uint64_t v107;
  void *v108[2];
  char v109;
  double v110[3];
  float v111;
  double v112;
  double v113;
  __int16 v114;
  _QWORD v115[3];
  float v116;
  double v117;
  double v118;
  void *__p[2];
  char v120;
  _WORD v121[12];
  float v122;
  double v123;
  double v124;
  _QWORD v125[2];
  double v126;
  _BYTE v127[12];
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  int v147;
  __int16 v148;
  int v149;
  __int16 v150;
  int v151;
  __int16 v152;
  int v153;
  __int16 v154;
  double v155;
  __int16 v156;
  int v157;
  __int16 v158;
  uint64_t v159;
  __int16 v160;
  double v161;
  __int16 v162;
  int v163;
  _BYTE buf[12];
  __int16 v165;
  uint64_t v166;
  __int16 v167;
  uint64_t v168;
  __int16 v169;
  uint64_t v170;
  __int16 v171;
  uint64_t v172;
  __int16 v173;
  uint64_t v174;
  __int16 v175;
  uint64_t v176;
  __int16 v177;
  uint64_t v178;
  __int16 v179;
  uint64_t v180;
  __int16 v181;
  uint64_t v182;
  __int16 v183;
  int v184;
  __int16 v185;
  int v186;
  __int16 v187;
  int v188;
  __int16 v189;
  int v190;
  __int16 v191;
  double v192;
  __int16 v193;
  int v194;
  __int16 v195;
  uint64_t v196;
  __int16 v197;
  double v198;
  __int16 v199;
  int v200;
  uint64_t v201;

  v201 = *MEMORY[0x1E0C80C00];
  bzero(a2, 0x68uLL);
  v4 = *(double *)(a1 + 3728);
  if (v4 > 0.0 && vabdd_f64(*(double *)(a1 + 1136), v4 + -1.0) < 0.9)
  {
    if (!*(_BYTE *)(a1 + 96))
      return 0;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v5 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,feedback interval check", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_10;
LABEL_237:
    dispatch_once(&qword_1EE172158, &unk_1E29907B0);
LABEL_10:
    *(_WORD *)v127 = 0;
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v6);
    goto LABEL_11;
  }
  if (!*(_DWORD *)(a1 + 1248) && sub_18F672464() && !sub_18F672278() && (sub_18F672940() & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 96))
      return 0;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v8 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,frc,0", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_10;
    goto LABEL_237;
  }
  if (*(_BYTE *)(a1 + 2232)
    && *(_BYTE *)(a1 + 1392)
    && !*(_BYTE *)(a1 + 2233)
    && !*(_BYTE *)(a1 + 1393)
    && *(double *)(a1 + 1136) - *(double *)(a1 + 1976) <= 1.5)
  {
    if (*(_BYTE *)(a1 + 2688) && *(double *)(a1 + 2696) < 36.0)
    {
      if (!*(_BYTE *)(a1 + 96))
        return 0;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v7 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too close to prior intersection", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_10;
      goto LABEL_237;
    }
    v11 = fmod(*(double *)(a1 + 1296) - *(double *)(a1 + 1432), 360.0);
    if (v11 < 0.0)
      v11 = v11 + 360.0;
    if (v11 > 180.0)
      v11 = v11 + -360.0;
    if (fabs(v11) > 1.0)
    {
      if (!*(_BYTE *)(a1 + 96))
        return 0;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v12 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,course not aligned to full snap", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_10;
      goto LABEL_237;
    }
    v126 = -1.0;
    if (sub_18F6AD3C8(a1, &v126, *(double *)(a1 + 2256), *(double *)(a1 + 2264), *(double *)(a1 + 2272)))
    {
      if (!*(_BYTE *)(a1 + 1490) || *(_DWORD *)(a1 + 1528) != 1)
      {
        *(_QWORD *)v127 = 0x4044000000000000;
        LOBYTE(v115[0]) = 1;
        *(_QWORD *)buf = 0x4046800000000000;
        if ((sub_18F6A2B30(a1, (double *)v127, (double *)buf, v115) & 1) == 0)
        {
          if (!*(_BYTE *)(a1 + 96))
            return 0;
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v22 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,assessParallelRoadsWithinDist returned false,unexpected", buf, 2u);
          }
          if (!sub_18F5C4AE0(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
            goto LABEL_65;
          goto LABEL_253;
        }
        if (LOBYTE(v115[0]))
        {
          if (!*(_BYTE *)(a1 + 96))
            return 0;
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v13 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too close to a road with similar course", buf, 2u);
          }
          if (!sub_18F5C4AE0(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
            goto LABEL_65;
LABEL_253:
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
LABEL_65:
          v121[0] = 0;
          v6 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v6);
LABEL_11:
          if (v6 != buf)
            free(v6);
          return 0;
        }
      }
      v14 = *(_QWORD *)(a1 + 16);
      v125[0] = *(_QWORD *)(a1 + 8);
      v125[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = 70.0;
      v18 = sub_18F69A264(a1, 70.0);
      v19 = *(double *)(a1 + 1224);
      if (v18 < 0.0)
      {
        if (v19 < 5.0)
        {
          sub_18F692488((uint64_t)v127, a1 + 1016);
          if (((*(uint64_t (**)(_QWORD, _BYTE *, uint64_t, double))(*(_QWORD *)v125[0] + 88))(v125[0], v127, a1 + 912, *(double *)(a1 + 3176)) & 1) == 0)
          {
            if (!*(_BYTE *)(a1 + 96))
              goto LABEL_123;
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            v27 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F5B3000, v27, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,DOT particle assistance", buf, 2u);
            }
            if (!sub_18F5C4AE0(115, 2))
              goto LABEL_123;
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 == -1)
              goto LABEL_230;
            goto LABEL_257;
          }
          v20 = fmod(*(float *)&v131 - *(double *)(a1 + 1232), 360.0);
          if (v20 < 0.0)
            v20 = v20 + 360.0;
          if (v20 > 180.0)
            v20 = v20 + -360.0;
          if (fabs(v20) > 8.0)
          {
            if (!*(_BYTE *)(a1 + 96))
              goto LABEL_123;
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            v21 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F5B3000, v21, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too close large road direction change", buf, 2u);
            }
            if (!sub_18F5C4AE0(115, 2))
              goto LABEL_123;
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 == -1)
            {
LABEL_230:
              v121[0] = 0;
              v87 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v87);
              if (v87 != buf)
                free(v87);
LABEL_123:
              sub_18F692600((uint64_t)v127);
LABEL_124:
              v9 = 0;
LABEL_148:
              sub_18F5D6004((uint64_t)v125);
              return v9;
            }
LABEL_257:
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            goto LABEL_230;
          }
          sub_18F692600((uint64_t)v127);
        }
LABEL_126:
        sub_18F692488((uint64_t)v121, a1 + 1016);
        if (((*(uint64_t (**)(_QWORD, _WORD *, uint64_t, double))(*(_QWORD *)v125[0] + 88))(v125[0], v121, a1 + 912, -15.0) & 1) != 0)
        {
          if (!sub_18F6AD3C8(a1, &v126, v123, v124, v122))
            goto LABEL_146;
          sub_18F5D5990(__p, "Start");
          v107 = a1 + 912;
          v28 = sub_18F60E900(a1 + 1128, (double *)(a1 + 608), (uint64_t *)__p, a2 + 1, a2 + 2, v123, v124);
          if (v120 < 0)
            operator delete(__p[0]);
          if (v28)
          {
            v29 = sub_18F5BD064((double *)(a1 + 608), *(double *)(a1 + 1048), *(double *)(a1 + 1056), v123, v124, *(double *)(a1 + 1200));
            sub_18F692488((uint64_t)v115, a1 + 1016);
            if (v17 - *(double *)(a1 + 1224) < 18.0)
            {
              if (!*(_BYTE *)(a1 + 96))
                goto LABEL_184;
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              v30 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18F5B3000, v30, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,predicted point is too close to intersection", buf, 2u);
              }
              if (!sub_18F5C4AE0(115, 2))
                goto LABEL_184;
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 == -1)
                goto LABEL_234;
LABEL_260:
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
LABEL_234:
              *(_WORD *)v127 = 0;
              v75 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v75);
LABEL_235:
              if (v75 != buf)
                free(v75);
              goto LABEL_184;
            }
            if (((*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)v125[0] + 88))(v125[0], v115, v107) & 1) == 0)
            {
              if (!*(_BYTE *)(a1 + 96))
                goto LABEL_184;
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              v73 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18F5B3000, v73, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,DOT particle assistance", buf, 2u);
              }
              if (!sub_18F5C4AE0(115, 2))
                goto LABEL_184;
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 == -1)
                goto LABEL_234;
              goto LABEL_260;
            }
            if (!sub_18F6AD3C8(a1, &v126, v117, v118, v116))
            {
LABEL_184:
              v9 = 0;
LABEL_185:
              sub_18F692600((uint64_t)v115);
              goto LABEL_147;
            }
            v33 = v117;
            v34 = v118;
            a2[4] = v118;
            a2[3] = v33;
            v35 = *(_QWORD *)(a1 + 1016);
            v36 = *(unsigned __int8 *)(v35 + 16);
            v37 = sub_18F675740(a1, *(_DWORD *)(v35 + 20), v36);
            a2[8] = v37;
            if (!v36)
            {
              v76 = *(_DWORD *)(a1 + 760);
              if (v76)
              {
                v77 = v37 * 0.5;
                a2[8] = v77;
                v78 = v77 * 0.5;
                v79 = -(v77 * 0.5);
                if (v76 == 1)
                  v80 = v79;
                else
                  v80 = v78;
                *(_QWORD *)v127 = 0;
                v110[0] = 0.0;
                if (sub_18F71AA00((double *)(a1 + 608), (double *)v127, v110, v33, v34, *(double *)(a1 + 1200), v116, v80))
                {
                  v81 = v110[0];
                  a2[3] = *(double *)v127;
                  a2[4] = v81;
                  v37 = a2[8];
                }
                else
                {
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E29907B0);
                  v83 = off_1EE172160;
                  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_18F5B3000, v83, OS_LOG_TYPE_ERROR, "CLMM,Unexpected calculateNewPosUsingAcrossTrack fail", buf, 2u);
                  }
                  if (sub_18F5C4AE0(115, 0))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172158 != -1)
                      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
                    v114 = 0;
                    v88 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v88);
                    if (v88 != buf)
                      free(v88);
                  }
                  v37 = a2[8] + a2[8];
                  a2[8] = v37;
                }
              }
            }
            v38 = fmax(v37, 15.0);
            if (v17 <= v38 + 1.0)
            {
              if (!*(_BYTE *)(a1 + 96))
                goto LABEL_184;
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              v74 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18F5B3000, v74, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,current particle within the stopDistanceFromIntersection", buf, 2u);
              }
              if (!sub_18F5C4AE0(115, 2))
                goto LABEL_184;
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              *(_WORD *)v127 = 0;
              v75 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v75);
              goto LABEL_235;
            }
            sub_18F692488((uint64_t)v110, a1 + 1016);
            if (v17 - v38 >= (*(double *)(a1 + 1224) + 15.0) * 1.5)
              v39 = (*(double *)(a1 + 1224) + 15.0) * 1.5;
            else
              v39 = v17 - v38;
            if (((*(uint64_t (**)(_QWORD, double *, uint64_t, double))(*(_QWORD *)v125[0] + 88))(v125[0], v110, v107, v39) & 1) != 0)
            {
              if (!sub_18F6AD3C8(a1, &v126, v112, v113, v111))
                goto LABEL_209;
              v40 = fmin(v29, 15.0);
              a2[5] = v40 + v39;
              v41 = v126;
              if (v126 < 3.0)
                v41 = 3.0;
              a2[7] = v41;
              sub_18F5D5990(v108, "Predicted");
              v42 = sub_18F60E900(a1 + 1128, (double *)(a1 + 608), (uint64_t *)v108, a2 + 3, a2 + 4, a2[3], a2[4]);
              if (v109 < 0)
                operator delete(v108[0]);
              if (v42)
              {
                a2[6] = v116;
                *a2 = *(double *)(a1 + 1136) + 1.0;
                __asm { FMOV            V1.2D, #1.0 }
                v47 = vaddq_f64(*(float64x2_t *)(a1 + 1144), _Q1);
                *(float64x2_t *)(a2 + 11) = v47;
                LODWORD(v47.f64[0]) = *(_DWORD *)(v115[0] + 16);
                v48 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v47.f64[0]);
                *(int16x4_t *)v48.i8 = vuzp2_s16((int16x4_t)vext_s8(*(int8x8_t *)v48.i8, *(int8x8_t *)v48.i8, 2uLL), *(int16x4_t *)v48.i8);
                *((_DWORD *)a2 + 18) = vmovn_s16(v48).u32[0];
                *((_BYTE *)a2 + 76) = *(_DWORD *)(a1 + 1248) == 0;
                v49 = 1;
                *((_DWORD *)a2 + 20) = 1;
                if (*(_BYTE *)(a1 + 96))
                {
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E29907B0);
                  v50 = off_1EE172160;
                  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                  {
                    v51 = *((_QWORD *)a2 + 6);
                    v52 = *((_QWORD *)a2 + 7);
                    v53 = *((_QWORD *)a2 + 8);
                    v54 = *a2;
                    v55 = *((_QWORD *)a2 + 1);
                    v57 = *((_QWORD *)a2 + 2);
                    v56 = *((_QWORD *)a2 + 3);
                    v58 = *((_QWORD *)a2 + 4);
                    v59 = *((_QWORD *)a2 + 5);
                    v60 = *(_QWORD *)(a1 + 1224);
                    v61 = *((unsigned __int8 *)a2 + 73);
                    v62 = *((unsigned __int8 *)a2 + 74);
                    v63 = *((unsigned __int8 *)a2 + 72);
                    v64 = *((unsigned __int8 *)a2 + 75);
                    v65 = *((unsigned __int8 *)a2 + 76);
                    v66 = *((_QWORD *)a2 + 12);
                    v67 = *((_DWORD *)a2 + 20);
                    *(_DWORD *)buf = 134353665;
                    *(double *)&buf[4] = v54;
                    v165 = 2049;
                    v166 = v56;
                    v167 = 2049;
                    v168 = v58;
                    v169 = 2050;
                    v170 = v51;
                    v171 = 2050;
                    v172 = v52;
                    v173 = 2050;
                    v174 = v53;
                    v175 = 2049;
                    v176 = v55;
                    v177 = 2049;
                    v178 = v57;
                    v179 = 2050;
                    v180 = v59;
                    v181 = 2050;
                    v182 = v60;
                    v183 = 1026;
                    v184 = v61;
                    v185 = 1026;
                    v186 = v62;
                    v187 = 1026;
                    v188 = v63;
                    v189 = 1026;
                    v190 = v64;
                    v191 = 2050;
                    v192 = v38;
                    v193 = 1026;
                    v194 = v65;
                    v195 = 2050;
                    v196 = v66;
                    v197 = 2050;
                    v198 = v40;
                    v199 = 1026;
                    v200 = v67;
                    _os_log_impl(&dword_18F5B3000, v50, OS_LOG_TYPE_DEBUG, "CLMM,DOT,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.1lf,courseUnc,%{public}.1lf,rw,%{public}.1lf,startLat,%{private}.7lf,startLon,%{private}.7lf,length,%{public}.1lf,speed,%{public}.3lf,isOneWay,%{public}d,isRailWay,%{public}d,isTunnel,%{public}d,isBridge,%{public}d,distFromIntersection,%{public}.1lf,isFreeway,%{public}d,machContinuousTime,%{public}.3lf,lookBehindDistance,%{public}.2lf,type,%{public}d", buf, 0xA8u);
                  }
                  if (sub_18F5C4AE0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172158 != -1)
                      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
                    v89 = *((_QWORD *)a2 + 6);
                    v90 = *((_QWORD *)a2 + 7);
                    v91 = *((_QWORD *)a2 + 8);
                    v92 = *a2;
                    v93 = *((_QWORD *)a2 + 1);
                    v95 = *((_QWORD *)a2 + 2);
                    v94 = *((_QWORD *)a2 + 3);
                    v96 = *((_QWORD *)a2 + 4);
                    v97 = *((_QWORD *)a2 + 5);
                    v98 = *(_QWORD *)(a1 + 1224);
                    v99 = *((unsigned __int8 *)a2 + 73);
                    v100 = *((unsigned __int8 *)a2 + 74);
                    v101 = *((unsigned __int8 *)a2 + 72);
                    v102 = *((unsigned __int8 *)a2 + 75);
                    v103 = *((unsigned __int8 *)a2 + 76);
                    v104 = *((_QWORD *)a2 + 12);
                    v105 = *((_DWORD *)a2 + 20);
                    *(_DWORD *)v127 = 134353665;
                    *(double *)&v127[4] = v92;
                    v128 = 2049;
                    v129 = v94;
                    v130 = 2049;
                    v131 = v96;
                    v132 = 2050;
                    v133 = v89;
                    v134 = 2050;
                    v135 = v90;
                    v136 = 2050;
                    v137 = v91;
                    v138 = 2049;
                    v139 = v93;
                    v140 = 2049;
                    v141 = v95;
                    v142 = 2050;
                    v143 = v97;
                    v144 = 2050;
                    v145 = v98;
                    v146 = 1026;
                    v147 = v99;
                    v148 = 1026;
                    v149 = v100;
                    v150 = 1026;
                    v151 = v101;
                    v152 = 1026;
                    v153 = v102;
                    v154 = 2050;
                    v155 = v38;
                    v156 = 1026;
                    v157 = v103;
                    v158 = 2050;
                    v159 = v104;
                    v160 = 2050;
                    v161 = v40;
                    v162 = 1026;
                    v163 = v105;
                    v106 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v106);
                    if (v106 != buf)
                      free(v106);
                  }
                }
                *(_BYTE *)(a1 + 3720) = 1;
                v68 = *(_OWORD *)a2;
                v69 = *((_OWORD *)a2 + 2);
                *(_OWORD *)(a1 + 3744) = *((_OWORD *)a2 + 1);
                *(_OWORD *)(a1 + 3760) = v69;
                *(_OWORD *)(a1 + 3728) = v68;
                v70 = *((_OWORD *)a2 + 3);
                v71 = *((_OWORD *)a2 + 4);
                v72 = *((_OWORD *)a2 + 5);
                *(double *)(a1 + 3824) = a2[12];
                *(_OWORD *)(a1 + 3792) = v71;
                *(_OWORD *)(a1 + 3808) = v72;
                *(_OWORD *)(a1 + 3776) = v70;
                goto LABEL_210;
              }
              if (!*(_BYTE *)(a1 + 96))
                goto LABEL_209;
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              v84 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18F5B3000, v84, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,computeSnapCoordinatesFromRawGPSCoordinates predicted returned false", buf, 2u);
              }
              if (!sub_18F5C4AE0(115, 2))
              {
LABEL_209:
                v49 = 0;
LABEL_210:
                sub_18F692600((uint64_t)v110);
                v9 = v49;
                goto LABEL_185;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              *(_WORD *)v127 = 0;
              v85 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v85);
            }
            else
            {
              if (!*(_BYTE *)(a1 + 96))
                goto LABEL_209;
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              v82 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18F5B3000, v82, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,DOT particle assistance", buf, 2u);
              }
              if (!sub_18F5C4AE0(115, 2))
                goto LABEL_209;
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              *(_WORD *)v127 = 0;
              v85 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v85);
            }
            if (v85 != buf)
              free(v85);
            goto LABEL_209;
          }
          if (!*(_BYTE *)(a1 + 96))
            goto LABEL_146;
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v32 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v32, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,computeSnapCoordinatesFromRawGPSCoordinates lookBehind returned false", buf, 2u);
          }
          if (!sub_18F5C4AE0(115, 2))
          {
LABEL_146:
            v9 = 0;
LABEL_147:
            sub_18F692600((uint64_t)v121);
            goto LABEL_148;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
          {
LABEL_227:
            *(_WORD *)v127 = 0;
            v86 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v86);
            if (v86 != buf)
              free(v86);
            goto LABEL_146;
          }
        }
        else
        {
          if (!*(_BYTE *)(a1 + 96))
            goto LABEL_146;
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v31 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v31, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,DOT particle assistance", buf, 2u);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_146;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
            goto LABEL_227;
        }
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        goto LABEL_227;
      }
      if (v18 - v19 >= 18.0)
      {
        if (v19 >= 5.0 || *(_BYTE *)(a1 + 3168) == 0)
        {
          v17 = v18 + -1.0;
          goto LABEL_126;
        }
        if (!*(_BYTE *)(a1 + 96))
          goto LABEL_124;
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v25 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too slow when nearing intersection", buf, 2u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_124;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 == -1)
        {
LABEL_115:
          *(_WORD *)v127 = 0;
          v26 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v26);
          if (v26 != buf)
            free(v26);
          goto LABEL_124;
        }
      }
      else
      {
        if (!*(_BYTE *)(a1 + 96))
          goto LABEL_124;
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v23 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v23, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too close to next intersection", buf, 2u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_124;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 == -1)
          goto LABEL_115;
      }
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      goto LABEL_115;
    }
  }
  return 0;
}

void sub_18F6AF6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  sub_18F692600((uint64_t)&a15);
  sub_18F692600((uint64_t)&a30);
  sub_18F692600((uint64_t)&a47);
  sub_18F5D6004((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6AF77C(uint64_t a1, uint64_t *a2)
{
  double v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  _BYTE buf[12];
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 3720) || *(double *)(a1 + 1224) >= 22.222 || *(int *)(a1 + 1248) < 2)
    return 0;
  v24 = 0x4056800000000000;
  v4 = *(double *)(a1 + 1208);
  v5 = 0x4049000000000000;
  if (v4 <= 10.0)
    goto LABEL_7;
  if (v4 < 50.0)
  {
    v5 = 0x4052C00000000000;
LABEL_7:
    v24 = v5;
  }
  v23 = 1;
  *(_QWORD *)buf = 0x4024000000000000;
  if (!sub_18F6A2B30(a1, (double *)&v24, (double *)buf, &v23) || v23)
    return 0;
  *a2 = *(_QWORD *)(a1 + 3728);
  *(_OWORD *)(a2 + 1) = *(_OWORD *)(a1 + 3752);
  a2[3] = 0x4059000000000000;
  a2[4] = *(_QWORD *)(a1 + 3792);
  a2[5] = *(_QWORD *)(a1 + 3776);
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v6 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v7 = *a2;
      v8 = a2[1];
      v9 = a2[2];
      v10 = a2[3];
      v11 = a2[4];
      v12 = a2[5];
      v13 = *(_QWORD *)(a1 + 1432);
      *(_DWORD *)buf = 134350593;
      *(_QWORD *)&buf[4] = v7;
      v40 = 2049;
      v41 = v8;
      v42 = 2049;
      v43 = v9;
      v44 = 2050;
      v45 = v10;
      v46 = 2050;
      v47 = v11;
      v48 = 2050;
      v49 = v12;
      v50 = 2050;
      v51 = v13;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEBUG, "CLMM,MMPA,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,a,%{public}.2lf,b,%{public}.2lf,az,%{public}.3lf,course,%{public}.3lf", buf, 0x48u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v15 = *a2;
      v16 = a2[1];
      v17 = a2[2];
      v18 = a2[3];
      v19 = a2[4];
      v20 = a2[5];
      v21 = *(_QWORD *)(a1 + 1432);
      v25 = 134350593;
      v26 = v15;
      v27 = 2049;
      v28 = v16;
      v29 = 2049;
      v30 = v17;
      v31 = 2050;
      v32 = v18;
      v33 = 2050;
      v34 = v19;
      v35 = 2050;
      v36 = v20;
      v37 = 2050;
      v38 = v21;
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getPosAssistanceForGps(CLGpsAssistant_Type::MapMatchedPositionAssistance &)", "CoreLocation: %s\n", v22);
      if (v22 != buf)
        free(v22);
    }
  }
  return 1;
}

uint64_t sub_18F6AFA8C(uint64_t a1, uint64_t a2)
{
  double v2;
  double v4;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  double v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v19;
  char v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  int v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  char *v53;
  _QWORD v54[2];
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  void *__p[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[64];
  __int16 v69;
  uint64_t v70;
  int v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[80];
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  uint8_t buf[4];
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v2 = *(double *)(a2 + 8);
  if (v2 < 0.0 || (v4 = *(double *)a2, *(double *)a2 < 0.0))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v7 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEBUG, "CLMM,TBA,Invalid time", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_64;
    goto LABEL_74;
  }
  if (vabdd_f64(*(double *)(a1 + 1136), v2) < 5.0)
  {
    if (*(_BYTE *)(a1 + 1392))
    {
      if (!*(_BYTE *)(a1 + 1393))
      {
        v38 = *(unsigned __int8 *)(a1 + 1489);
        *(_BYTE *)(a2 + 43) = v38;
        v39 = *(unsigned __int8 *)(a1 + 1490);
        *(_BYTE *)(a2 + 42) = v39;
        if (v39 | v38)
        {
          *(_BYTE *)(a2 + 40) = v39;
          *(_BYTE *)(a2 + 41) = v38;
          return 1;
        }
      }
    }
  }
  if (fabs(*(double *)(a2 + 16)) >= 0.00003 || fabs(*(double *)(a2 + 24)) >= 0.00003)
  {
    v80 = (uint64_t)&v80;
    v81 = &v80;
    v82 = 0;
    v9 = *(double *)(a1 + 3160);
    if (v9 > 0.0 && vabdd_f64(v9, v4) < *(double *)(a2 + 32) / 38.0)
    {
      v8 = 0;
LABEL_59:
      sub_18F64F950(&v80);
      return v8;
    }
    *(double *)(a1 + 3160) = v4;
    v11 = *(_QWORD *)(a1 + 8);
    v10 = *(std::__shared_weak_count **)(a1 + 16);
    v78 = v11;
    v79 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
    v54[0] = 0;
    v54[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v55 = _Q0;
    v56 = 0;
    v57 = 0;
    v58 = 0xBFF0000000000000;
    v70 = 0;
    v71 = 0;
    memset(&v68[32], 0, 32);
    v69 = 0;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    memset(v75, 0, 27);
    memset(&v75[32], 0, 48);
    memset(v68, 0, 30);
    v67 = 0u;
    v66 = 0u;
    v65 = 0u;
    v64 = 0u;
    *(_OWORD *)__p = 0u;
    v62 = 0u;
    v61 = 0u;
    v60 = 0u;
    v76 = 0;
    v77 = 0xBFF0000000000000;
    v59 = *(_OWORD *)(a2 + 16);
    if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, uint64_t, double))(*(_QWORD *)v11 + 64))(v11, &v80, v54, 1, *(double *)(a2 + 32)) & 1) != 0)
    {
      if (v82)
      {
        v19 = v81;
        if (v81 != &v80)
        {
          v20 = 0;
          do
          {
            while (1)
            {
              v21 = v19[2];
              if (!v21)
                break;
              if (*(_BYTE *)(v21 + 18))
              {
                v20 = 1;
                *(_BYTE *)(a2 + 40) = 1;
              }
              if (!*(_BYTE *)(v21 + 19))
                break;
              v20 = 1;
              *(_BYTE *)(a2 + 41) = 1;
              v19 = (uint64_t *)v19[1];
              if (v19 == &v80)
                goto LABEL_39;
            }
            v19 = (uint64_t *)v19[1];
          }
          while (v19 != &v80);
          if ((v20 & 1) == 0)
            goto LABEL_51;
LABEL_39:
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29907B0);
          v22 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            v23 = *(_QWORD *)(a2 + 16);
            v24 = *(_QWORD *)(a2 + 24);
            v25 = *(_QWORD *)(a1 + 1208);
            v26 = *(_QWORD *)(a2 + 32);
            v27 = *(unsigned __int8 *)(a2 + 40);
            v28 = *(unsigned __int8 *)(a2 + 41);
            v29 = *(unsigned __int8 *)(a2 + 42);
            v30 = *(unsigned __int8 *)(a2 + 43);
            *(_DWORD *)buf = 134285313;
            v100 = v23;
            v101 = 2049;
            v102 = v24;
            v103 = 2050;
            v104 = v25;
            v105 = 2050;
            v106 = v26;
            v107 = 1026;
            v108 = v27;
            v109 = 1026;
            v110 = v28;
            v111 = 1026;
            v112 = v29;
            v113 = 1026;
            v114 = v30;
            _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_DEBUG, "CLMM, TBA,lat,%{private}.8lf,lon,%{private}.8lf,unc,%{public}.2lf,searchRadius,%{public}.1lf,isCloseToTunnel,%{public}d,isCloseToBridge,%{public}d,isTunnel,%{public}d,isBridge,%{public}d", buf, 0x42u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            v45 = *(_QWORD *)(a2 + 16);
            v46 = *(_QWORD *)(a2 + 24);
            v47 = *(_QWORD *)(a1 + 1208);
            v48 = *(_QWORD *)(a2 + 32);
            v49 = *(unsigned __int8 *)(a2 + 40);
            v50 = *(unsigned __int8 *)(a2 + 41);
            v51 = *(unsigned __int8 *)(a2 + 42);
            v52 = *(unsigned __int8 *)(a2 + 43);
            v83 = 134285313;
            v84 = v45;
            v85 = 2049;
            v86 = v46;
            v87 = 2050;
            v88 = v47;
            v89 = 2050;
            v90 = v48;
            v91 = 1026;
            v92 = v49;
            v93 = 1026;
            v94 = v50;
            v95 = 1026;
            v96 = v51;
            v97 = 1026;
            v98 = v52;
            v53 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getTunnelBridgeAssistance(CLGpsAssistant_Type::TunnelBridgeAssistance &)", "CoreLocation: %s\n", v53);
            if (v53 != (char *)buf)
              free(v53);
          }
          v8 = 1;
          goto LABEL_52;
        }
      }
    }
    else if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v31 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v32 = *(_QWORD *)(a1 + 1184);
        v33 = *(_QWORD *)(a1 + 1192);
        v34 = *(_QWORD *)(a2 + 32);
        *(_DWORD *)buf = 134284033;
        v100 = v32;
        v101 = 2049;
        v102 = v33;
        v103 = 2050;
        v104 = v34;
        _os_log_impl(&dword_18F5B3000, v31, OS_LOG_TYPE_DEBUG, "CLMM,TBA,roadsWithinDistance returns query failed,lat,%{private}.8lf,lon,%{private}.8lf,searchRadius,%{public}.1lf", buf, 0x20u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v41 = *(_QWORD *)(a1 + 1184);
        v42 = *(_QWORD *)(a1 + 1192);
        v43 = *(_QWORD *)(a2 + 32);
        v83 = 134284033;
        v84 = v41;
        v85 = 2049;
        v86 = v42;
        v87 = 2050;
        v88 = v43;
        v44 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getTunnelBridgeAssistance(CLGpsAssistant_Type::TunnelBridgeAssistance &)", "CoreLocation: %s\n", v44);
        if (v44 != (char *)buf)
          free(v44);
      }
    }
LABEL_51:
    v8 = 0;
LABEL_52:
    if (SHIBYTE(v64) < 0)
      operator delete(__p[1]);
    if (v10)
    {
      v35 = (unint64_t *)&v10->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    goto LABEL_59;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29907B0);
  v6 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEBUG, "CLMM,TBA,NULL Island", buf, 2u);
  }
  if (!sub_18F5C4AE0(115, 2))
    return 0;
  bzero(buf, 0x65CuLL);
  if (qword_1EE172158 != -1)
LABEL_74:
    dispatch_once(&qword_1EE172158, &unk_1E29907B0);
LABEL_64:
  LOWORD(v54[0]) = 0;
  v40 = (char *)_os_log_send_and_compose_impl();
  sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getTunnelBridgeAssistance(CLGpsAssistant_Type::TunnelBridgeAssistance &)", "CoreLocation: %s\n", v40);
  if (v40 != (char *)buf)
    free(v40);
  return 0;
}

void sub_18F6B035C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t a71;

  if (a32 < 0)
    operator delete(__p);
  sub_18F5D6004((uint64_t)&a69);
  sub_18F64F950(&a71);
  _Unwind_Resume(a1);
}

BOOL sub_18F6B03A0(uint64_t a1, _QWORD *a2, double *a3, uint64_t a4, uint64_t *a5, int a6, double a7)
{
  uint64_t i;
  uint64_t v14;
  double v15;
  double v16;
  BOOL v17;
  NSObject *v18;
  uint64_t v19;
  unint64_t v20;
  _BOOL8 v21;
  NSObject *v22;
  uint64_t v23;
  unint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  double *v29;
  uint64_t *v30;
  char v31;
  _QWORD *v32;
  unint64_t **v33;
  double v34;
  double v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _BOOL4 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  double v43;
  double v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _BOOL4 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  double v52;
  float v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  NSObject *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  __n128 **v65;
  __n128 **v66;
  char v67;
  unint64_t **v68;
  unint64_t **v69;
  unint64_t *v70;
  float64x2_t *v71;
  float64x2_t *v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t *v75;
  float64x2_t *v76;
  int32x2_t v77;
  char v78;
  char v79;
  float64x2_t v80;
  float64x2_t v81;
  int32x2_t v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  NSObject *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  unint64_t v94;
  __n128 *v95;
  unint64_t *v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  NSObject *v106;
  uint64_t v107;
  unint64_t v108;
  float64x2_t v109;
  float64x2_t v110;
  int32x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  int32x2_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  __n128 *v118;
  unint64_t *v119;
  unint64_t v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  NSObject *v131;
  uint64_t v132;
  unint64_t v133;
  double v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  double v138;
  unint64_t v139;
  char *v140;
  NSObject *v141;
  uint64_t v142;
  unint64_t v143;
  NSObject *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  NSObject *v148;
  uint64_t v149;
  NSObject *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  double v154;
  unint64_t v155;
  uint64_t j;
  uint64_t v157;
  BOOL v158;
  NSObject *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  double v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  double *v178;
  float64x2_t v179;
  _QWORD v181[2];
  _QWORD v182[2];
  _QWORD v183[2];
  uint64_t v184;
  std::__shared_weak_count *v185;
  _QWORD *v186;
  std::__shared_weak_count *v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  __n128 *v191;
  __n128 **v192;
  uint64_t v193;
  __n128 *v194;
  __n128 **v195;
  uint64_t v196;
  uint64_t *v197;
  _QWORD *v198[2];
  uint64_t v199;
  uint64_t *v200;
  unint64_t v201;
  _BYTE v202[12];
  __int16 v203;
  unint64_t v204;
  int v205;
  uint64_t v206;
  __int16 v207;
  unint64_t v208;
  int v209;
  uint64_t v210;
  __int16 v211;
  unint64_t v212;
  __int16 v213;
  unint64_t v214;
  __int16 v215;
  double v216;
  __int16 v217;
  unint64_t v218;
  _BYTE buf[12];
  __int16 v220;
  unint64_t v221;
  __int16 v222;
  unint64_t v223;
  __int16 v224;
  double v225;
  __int16 v226;
  unint64_t v227;
  uint64_t v228;

  v228 = *MEMORY[0x1E0C80C00];
  v14 = *a5;
  for (i = a5[1]; i != v14; i = sub_18F5D6004(i - 56))
    ;
  a5[1] = v14;
  if (*(_QWORD *)(a4 + 16) == *(_QWORD *)(a4 + 8)
    || ((v15 = *(double *)(a4 + 40), v16 = vabdd_f64(*(double *)(a1 + 24), v15), v15 >= 0.0)
      ? (v17 = v16 <= 6.0)
      : (v17 = 0),
        !v17))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v18 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v19 = *(_QWORD *)(a1 + 8);
      v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) >> 3);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v19;
      v220 = 2050;
      v221 = v20;
      _os_log_impl(&dword_18F5B3000, v18, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routehint timed out or empty, segments,%{public}lu", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v163 = *(_QWORD *)(a1 + 8);
      v164 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) >> 3);
      v209 = 134349312;
      v210 = v163;
      v211 = 2050;
      v212 = v164;
      v165 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v165);
      if (v165 != buf)
        free(v165);
    }
    v21 = 0;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a4 + 8);
    return v21;
  }
  if (!*a2)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v25 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v26 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v26;
      _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,invalid geometry pointer, determineRouteHintRoadVectors", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v27 = *(_QWORD *)(a1 + 8);
    v209 = 134349056;
    v210 = v27;
    v28 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v28);
    goto LABEL_239;
  }
  if (a6)
  {
    if (!sub_18F5F6C94((_QWORD *)a4))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v22 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        v23 = *(_QWORD *)(a1 + 8);
        v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) >> 3);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v23;
        v220 = 2050;
        v221 = v24;
        _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,routeHint road search,isConnectivityGood,poorConnectivity caused by radar:58817500,%{public}lu,file radar if 58817500 is already fixed", buf, 0x16u);
      }
      if (!sub_18F5C4AE0(115, 0))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_238;
LABEL_254:
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
LABEL_238:
      v166 = *(_QWORD *)(a1 + 8);
      v167 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) >> 3);
      v209 = 134349312;
      v210 = v166;
      v211 = 2050;
      v212 = v167;
      v28 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v28);
LABEL_239:
      if (v28 != buf)
        free(v28);
      return 0;
    }
  }
  else if ((sub_18F5F6F28((_QWORD *)a4) & 1) == 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v141 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v142 = *(_QWORD *)(a1 + 8);
      v143 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) >> 3);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v142;
      v220 = 2050;
      v221 = v143;
      _os_log_impl(&dword_18F5B3000, v141, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,routeHint road search,getConnectedRouteSegments,poorConnectivity caused by radar:58817500,%{public}lu,file radar if 58817500 is already fixed", buf, 0x16u);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_238;
    goto LABEL_254;
  }
  v199 = (uint64_t)&v199;
  v200 = &v199;
  v201 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, uint64_t, double))(*(_QWORD *)*a2 + 64))(*a2, &v199, a1, 1, a7) & 1) == 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v144 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v145 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v145;
      _os_log_impl(&dword_18F5B3000, v144, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,search, roadsWithinDistance returned false", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_209;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v146 = *(_QWORD *)(a1 + 8);
    v209 = 134349056;
    v210 = v146;
    v147 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v147);
    goto LABEL_244;
  }
  if (!v201)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v148 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v149 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v149;
      _os_log_impl(&dword_18F5B3000, v148, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected, empty road list", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_209;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v168 = *(_QWORD *)(a1 + 8);
    v209 = 134349056;
    v210 = v168;
    v147 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v147);
LABEL_244:
    if (v147 != buf)
      free(v147);
LABEL_209:
    v21 = 0;
    goto LABEL_231;
  }
  v198[0] = 0;
  v198[1] = 0;
  v197 = (uint64_t *)v198;
  v29 = *(double **)(a4 + 8);
  v178 = *(double **)(a4 + 16);
  if (v29 == v178)
    goto LABEL_229;
  v179 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
  do
  {
    v194 = (__n128 *)&v194;
    v195 = &v194;
    v196 = 0;
    v191 = (__n128 *)&v191;
    v192 = &v191;
    v193 = 0;
    v30 = v200;
    if (v200 == &v199)
      goto LABEL_184;
    v31 = 0;
    while (1)
    {
      v33 = (unint64_t **)(v30 + 2);
      v32 = (_QWORD *)v30[2];
      if (*(_QWORD *)v29 == *v32)
        break;
LABEL_80:
      v30 = (uint64_t *)v30[1];
      if (v30 == &v199)
      {
        v65 = v195;
        if (v31 & 1 | (v195 == &v194))
          goto LABEL_184;
        while (1)
        {
          v66 = v192;
          if (v192 != &v191)
            break;
LABEL_164:
          v65 = (__n128 **)v65[1];
          if (v65 == &v194)
            goto LABEL_184;
        }
        v67 = 0;
        v68 = (unint64_t **)(v65 + 2);
        while (1)
        {
          while (1)
          {
            v69 = (unint64_t **)(v66 + 2);
            v70 = *v68;
            if ((v67 & 1) != 0)
              goto LABEL_106;
            v71 = (float64x2_t *)v70[17];
            v72 = (float64x2_t *)v70[18];
            v73 = 0uLL;
            v74 = 0uLL;
            if (v72 != v71)
              v74 = v72[-1];
            v76 = (float64x2_t *)(*v69)[17];
            v75 = (float64x2_t *)(*v69)[18];
            if (v75 != v76)
              v73 = *v76;
            v77 = vmovn_s64(vcgtq_f64(v179, vabdq_f64(v74, v73)));
            if ((vand_s8((int8x8_t)v77, (int8x8_t)vdup_lane_s32(v77, 1)).u8[0] & 1) == 0)
              break;
            v78 = 1;
LABEL_98:
            v79 = 1;
LABEL_105:
            *((_BYTE *)v65 + 36) = v78;
            *((_BYTE *)v66 + 36) = v79;
LABEL_106:
            v83 = (std::__shared_weak_count *)v65[3];
            v182[0] = v70;
            v182[1] = v83;
            if (v83)
            {
              p_shared_owners = (unint64_t *)&v83->__shared_owners_;
              do
                v85 = __ldxr(p_shared_owners);
              while (__stxr(v85 + 1, p_shared_owners));
            }
            sub_18F68FFC8((uint64_t)&v209, (uint64_t)v182, *((_BYTE *)v65 + 36));
            if (v83)
            {
              v86 = (unint64_t *)&v83->__shared_owners_;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
              }
            }
            if (sub_18F6B28F4((uint64_t)&v197, (uint64_t *)&v209))
            {
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              v88 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                v89 = *(_QWORD *)(a1 + 8);
                v90 = **v68;
                *(_DWORD *)buf = 134349313;
                *(_QWORD *)&buf[4] = v89;
                v220 = 2049;
                v221 = v90;
                _os_log_impl(&dword_18F5B3000, v88, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,road search,road already present,start,%{private}lld", buf, 0x16u);
              }
              if (!sub_18F5C4AE0(115, 2))
                goto LABEL_143;
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              v91 = *(_QWORD *)(a1 + 8);
              v92 = **v68;
              v205 = 134349313;
              v206 = v91;
              v207 = 2049;
              v208 = v92;
              v93 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v93);
              goto LABEL_162;
            }
            *(_QWORD *)buf = &v209;
            *((_BYTE *)sub_18F6B2988(&v197, (uint64_t *)&v209, (uint64_t)&unk_18F772428, (_OWORD **)buf) + 56) = 1;
            v94 = a5[1];
            if (v94 >= a5[2])
            {
              v100 = sub_18F6B2AC8(a5, (uint64_t)(v65 + 2));
            }
            else
            {
              *(_QWORD *)v94 = v65[2];
              v95 = v65[3];
              *(_QWORD *)(v94 + 8) = v95;
              if (v95)
              {
                v96 = &v95->n128_u64[1];
                do
                  v97 = __ldxr(v96);
                while (__stxr(v97 + 1, v96));
              }
              v98 = *((_OWORD *)v65 + 2);
              v99 = *((_OWORD *)v65 + 3);
              *(_QWORD *)(v94 + 48) = v65[8];
              *(_OWORD *)(v94 + 16) = v98;
              *(_OWORD *)(v94 + 32) = v99;
              v100 = v94 + 56;
            }
            a5[1] = v100;
            v101 = (std::__shared_weak_count *)v66[3];
            v181[0] = v66[2];
            v181[1] = v101;
            if (v101)
            {
              v102 = (unint64_t *)&v101->__shared_owners_;
              do
                v103 = __ldxr(v102);
              while (__stxr(v103 + 1, v102));
            }
            sub_18F68FFC8((uint64_t)&v205, (uint64_t)v181, *((_BYTE *)v66 + 36));
            if (v101)
            {
              v104 = (unint64_t *)&v101->__shared_owners_;
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                std::__shared_weak_count::__release_weak(v101);
              }
            }
            if (!sub_18F6B28F4((uint64_t)&v197, (uint64_t *)&v205))
            {
              *(_QWORD *)buf = &v205;
              *((_BYTE *)sub_18F6B2988(&v197, (uint64_t *)&v205, (uint64_t)&unk_18F772428, (_OWORD **)buf) + 56) = 1;
              v117 = a5[1];
              if (v117 >= a5[2])
              {
                v123 = sub_18F6B2AC8(a5, (uint64_t)(v66 + 2));
              }
              else
              {
                *(_QWORD *)v117 = v66[2];
                v118 = v66[3];
                *(_QWORD *)(v117 + 8) = v118;
                if (v118)
                {
                  v119 = &v118->n128_u64[1];
                  do
                    v120 = __ldxr(v119);
                  while (__stxr(v120 + 1, v119));
                }
                v121 = *((_OWORD *)v66 + 2);
                v122 = *((_OWORD *)v66 + 3);
                *(_QWORD *)(v117 + 48) = v66[8];
                *(_OWORD *)(v117 + 16) = v121;
                *(_OWORD *)(v117 + 32) = v122;
                v123 = v117 + 56;
              }
              a5[1] = v123;
              goto LABEL_184;
            }
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29907B0);
            v106 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              v107 = *(_QWORD *)(a1 + 8);
              v108 = **v69;
              *(_DWORD *)buf = 134349313;
              *(_QWORD *)&buf[4] = v107;
              v220 = 2049;
              v221 = v108;
              _os_log_impl(&dword_18F5B3000, v106, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,road search,road already present,stop,%{private}lld", buf, 0x16u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E29907B0);
              v115 = *(_QWORD *)(a1 + 8);
              v116 = **v69;
              *(_DWORD *)v202 = 134349313;
              *(_QWORD *)&v202[4] = v115;
              v203 = 2049;
              v204 = v116;
              v93 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v93);
LABEL_162:
              if (v93 != buf)
                free(v93);
            }
LABEL_143:
            v66 = (__n128 **)v66[1];
            v67 = 1;
            if (v66 == &v191)
              goto LABEL_184;
          }
          v80 = 0uLL;
          v81 = 0uLL;
          if (v72 != v71)
            v81 = v72[-1];
          if (v75 != v76)
            v80 = v75[-1];
          v82 = vmovn_s64(vcgtq_f64(v179, vabdq_f64(v81, v80)));
          if ((vand_s8((int8x8_t)v82, (int8x8_t)vdup_lane_s32(v82, 1)).u8[0] & 1) != 0)
          {
            v79 = 0;
            v78 = 1;
            goto LABEL_105;
          }
          v109 = 0uLL;
          v110 = 0uLL;
          if (v72 != v71)
            v110 = *v71;
          if (v75 != v76)
            v109 = *v76;
          v111 = vmovn_s64(vcgtq_f64(v179, vabdq_f64(v110, v109)));
          if ((vand_s8((int8x8_t)v111, (int8x8_t)vdup_lane_s32(v111, 1)).u8[0] & 1) != 0)
          {
            v78 = 0;
            goto LABEL_98;
          }
          v112 = 0uLL;
          v113 = 0uLL;
          if (v72 != v71)
            v113 = *v71;
          if (v75 != v76)
            v112 = v75[-1];
          v114 = vmovn_s64(vcgtq_f64(v179, vabdq_f64(v113, v112)));
          if ((vand_s8((int8x8_t)v114, (int8x8_t)vdup_lane_s32(v114, 1)).u8[0] & 1) != 0)
          {
            v78 = 0;
            v79 = 0;
            goto LABEL_105;
          }
          v67 = 0;
          v66 = (__n128 **)v66[1];
          if (v66 == &v191)
            goto LABEL_164;
        }
      }
    }
    *(_QWORD *)v202 = 0;
    v189 = 0;
    v190 = 0.0;
    v34 = v29[1];
    v35 = v29[2];
    v36 = (std::__shared_weak_count *)v30[3];
    v186 = v32;
    v187 = v36;
    v188 = 0;
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v39 = sub_18F6B2434(a3, (uint64_t *)&v186, (double *)&v189, (double *)v202, v34, v35);
    v40 = v187;
    if (v187)
    {
      v41 = (unint64_t *)&v187->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v29[3];
    v44 = v29[4];
    v45 = (std::__shared_weak_count *)v30[3];
    v184 = v30[2];
    v185 = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v48 = sub_18F6B2434(a3, &v184, (double *)&v188, &v190, v43, v44);
    v49 = v185;
    if (v185)
    {
      v50 = (unint64_t *)&v185->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
        if (!v39)
          goto LABEL_58;
LABEL_57:
        sub_18F64A3C4(&v194, (__n128 *)v30 + 1);
        goto LABEL_58;
      }
    }
    if (v39)
      goto LABEL_57;
LABEL_58:
    if (!v48)
      goto LABEL_80;
    sub_18F64A3C4(&v191, (__n128 *)v30 + 1);
    if (!v39)
      goto LABEL_80;
    if (vabdd_f64(*(double *)v202, v190) < 0.0001)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v150 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        v151 = *(_QWORD *)(a1 + 8);
        v152 = *((_QWORD *)v29 + 1);
        v153 = *((_QWORD *)v29 + 2);
        v154 = v29[3];
        v155 = *((_QWORD *)v29 + 4);
        *(_DWORD *)buf = 134350081;
        *(_QWORD *)&buf[4] = v151;
        v220 = 2049;
        v221 = v152;
        v222 = 2049;
        v223 = v153;
        v224 = 2049;
        v225 = v154;
        v226 = 2049;
        v227 = v155;
        _os_log_impl(&dword_18F5B3000, v150, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,routeHints,road search, invalid data encountered, same start and end route coords, not using routehints,sLat,%{private}.7lf,sLon,%{private}.7lf,eLat,%{private}.7lf,eLon,%{private}.7lf", buf, 0x34u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v169 = *(_QWORD *)(a1 + 8);
        v170 = *((_QWORD *)v29 + 1);
        v171 = *((_QWORD *)v29 + 2);
        v172 = v29[3];
        v173 = *((_QWORD *)v29 + 4);
        v209 = 134350081;
        v210 = v169;
        v211 = 2049;
        v212 = v170;
        v213 = 2049;
        v214 = v171;
        v215 = 2049;
        v216 = v172;
        v217 = 2049;
        v218 = v173;
        v174 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v174);
        if (v174 != buf)
          free(v174);
      }
      v157 = *a5;
      for (j = a5[1]; j != v157; j = sub_18F5D6004(j - 56))
        ;
      a5[1] = v157;
      sub_18F64F950((uint64_t *)&v191);
      sub_18F64F950((uint64_t *)&v194);
      v21 = 0;
      goto LABEL_230;
    }
    if (*(double *)v202 >= v190)
    {
      v52 = fmod((float)(*((float *)v30 + 10) + 180.0), 360.0);
      if (v52 < 0.0)
        v52 = v52 + 360.0;
      v53 = v52;
      *((float *)v30 + 10) = v53;
      *((_BYTE *)v30 + 36) ^= 1u;
    }
    v54 = (std::__shared_weak_count *)v30[3];
    v183[0] = v30[2];
    v183[1] = v54;
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    sub_18F68FFC8((uint64_t)&v205, (uint64_t)v183, *((_BYTE *)v30 + 36));
    if (v54)
    {
      v57 = (unint64_t *)&v54->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    if (sub_18F6B28F4((uint64_t)&v197, (uint64_t *)&v205))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v59 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v60 = *(_QWORD *)(a1 + 8);
        v61 = **v33;
        *(_DWORD *)buf = 134349313;
        *(_QWORD *)&buf[4] = v60;
        v220 = 2049;
        v221 = v61;
        _os_log_impl(&dword_18F5B3000, v59, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,road search,road already present,%{private}lld", buf, 0x16u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29907B0);
        v62 = *(_QWORD *)(a1 + 8);
        v63 = **v33;
        v209 = 134349313;
        v210 = v62;
        v211 = 2049;
        v212 = v63;
        v64 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v64);
        if (v64 != buf)
          free(v64);
      }
      v31 = 1;
      goto LABEL_80;
    }
    *(_QWORD *)buf = &v205;
    *((_BYTE *)sub_18F6B2988(&v197, (uint64_t *)&v205, (uint64_t)&unk_18F772428, (_OWORD **)buf) + 56) = 1;
    v124 = a5[1];
    if (v124 >= a5[2])
    {
      v130 = sub_18F6B2AC8(a5, (uint64_t)(v30 + 2));
    }
    else
    {
      *(_QWORD *)v124 = v30[2];
      v125 = v30[3];
      *(_QWORD *)(v124 + 8) = v125;
      if (v125)
      {
        v126 = (unint64_t *)(v125 + 8);
        do
          v127 = __ldxr(v126);
        while (__stxr(v127 + 1, v126));
      }
      v128 = *((_OWORD *)v30 + 2);
      v129 = *((_OWORD *)v30 + 3);
      *(_QWORD *)(v124 + 48) = v30[8];
      *(_OWORD *)(v124 + 16) = v128;
      *(_OWORD *)(v124 + 32) = v129;
      v130 = v124 + 56;
    }
    a5[1] = v130;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v131 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v132 = *(_QWORD *)(a1 + 8);
      v133 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) >> 3);
      v134 = *v29;
      v135 = **v33;
      *(_DWORD *)buf = 134350081;
      *(_QWORD *)&buf[4] = v132;
      v220 = 2050;
      v221 = v201;
      v222 = 2050;
      v223 = v133;
      v224 = 2049;
      v225 = v134;
      v226 = 2049;
      v227 = v135;
      _os_log_impl(&dword_18F5B3000, v131, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,road search,roadList,%{public}lu,routeRoads,%{public}lu,routeID,%{private}lld,matched,%{private}lld", buf, 0x34u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v136 = *(_QWORD *)(a1 + 8);
      v137 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) >> 3);
      v138 = *v29;
      v139 = **v33;
      v209 = 134350081;
      v210 = v136;
      v211 = 2050;
      v212 = v201;
      v213 = 2050;
      v214 = v137;
      v215 = 2049;
      v216 = v138;
      v217 = 2049;
      v218 = v139;
      v140 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v140);
      if (v140 != buf)
        free(v140);
    }
LABEL_184:
    sub_18F64F950((uint64_t *)&v191);
    sub_18F64F950((uint64_t *)&v194);
    v29 += 5;
  }
  while (v29 != v178);
  v158 = *(_QWORD *)(a4 + 16) == *(_QWORD *)(a4 + 8) || v201 == 0;
  if (!v158 && a5[1] == *a5)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    v159 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v160 = *(_QWORD *)(a1 + 8);
      v161 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) >> 3);
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v160;
      v220 = 2050;
      v221 = v161;
      v222 = 2050;
      v223 = v201;
      _os_log_impl(&dword_18F5B3000, v159, OS_LOG_TYPE_DEBUG, "#Warning,CLMM,%{public}.1lf,routeHints,unable to find routeHints road,segments,%{public}lu,roadList,%{public}lu", buf, 0x20u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29907B0);
      v175 = *(_QWORD *)(a1 + 8);
      v176 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) >> 3);
      v209 = 134349568;
      v210 = v175;
      v211 = 2050;
      v212 = v176;
      v213 = 2050;
      v214 = v201;
      v177 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v177);
      if (v177 != buf)
        free(v177);
    }
  }
LABEL_229:
  v21 = a5[1] != *a5;
LABEL_230:
  sub_18F62C738((uint64_t)&v197, v198[0]);
LABEL_231:
  sub_18F64F950(&v199);
  return v21;
}

void sub_18F6B1F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,_QWORD *a40,uint64_t a41,uint64_t a42)
{
  sub_18F62C738((uint64_t)&a39, a40);
  sub_18F64F950(&a42);
  _Unwind_Resume(a1);
}

void sub_18F6B2010(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *__p[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[30];
  __int128 v24;
  __int128 v25;
  __int16 v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[80];
  uint64_t v33;
  unint64_t v34;

  v24 = 0u;
  v25 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  memset(v32, 0, 27);
  memset(&v32[32], 0, 48);
  *(_OWORD *)&v23[14] = 0u;
  *(_OWORD *)v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  *(_OWORD *)__p = 0u;
  v17 = 0u;
  v16 = 0u;
  v13 = *(_OWORD *)(a1 + 80);
  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 96);
  v15 = v3;
  *(_OWORD *)v23 = *(_OWORD *)(a1 + 160);
  v5 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)&v23[16] = *(_QWORD *)(a1 + 176);
  v6 = *(_QWORD *)(a1 + 144);
  *((_QWORD *)&v16 + 1) = *(_QWORD *)(a1 + 136);
  *(_QWORD *)&v17 = v2;
  *(_QWORD *)&v22 = v6;
  *((_QWORD *)&v22 + 1) = v4;
  v7 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0xBFF0000000000000;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v33 = 0;
  v34 = 0xBFF0000000000000;
  v23[28] = *(_BYTE *)(a1 + 152);
  v9 = v5;
  v8 = vextq_s8(*(int8x16_t *)(a1 + 192), *(int8x16_t *)(a1 + 192), 8uLL);
  sub_18F6E4484(a1, (uint64_t)&v7, a2);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[1]);
}

void sub_18F6B2100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F6B211C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = sub_18F6B3A10(a1, a2);
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)a2;
    v4 = *(_OWORD *)(a2 + 16);
    v5 = *(_OWORD *)(a2 + 32);
    v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v3 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v3 + 64) = v6;
    *(_OWORD *)(v3 + 16) = v4;
    *(_OWORD *)(v3 + 32) = v5;
    v7 = *(_OWORD *)(a2 + 80);
    v8 = *(_OWORD *)(a2 + 96);
    v9 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v3 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(v3 + 128) = v9;
    *(_OWORD *)(v3 + 80) = v7;
    *(_OWORD *)(v3 + 96) = v8;
    v10 = *(_OWORD *)(a2 + 144);
    v11 = *(_OWORD *)(a2 + 160);
    v12 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(v3 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(v3 + 192) = v12;
    *(_OWORD *)(v3 + 144) = v10;
    *(_OWORD *)(v3 + 160) = v11;
    v13 = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(v3 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(v3 + 216) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = *(_OWORD *)(a2 + 224);
    v17 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(v3 + 256) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)(v3 + 224) = v16;
    *(_OWORD *)(v3 + 240) = v17;
    result = v3 + 264;
  }
  a1[1] = result;
  return result;
}

void sub_18F6B21C0(double *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  long double v12;

  a1[7] = 0.0;
  a1[8] = 0.0;
  a1[9] = 0.0;
  v1 = *((_QWORD *)a1 + 11);
  v2 = *((_QWORD *)a1 + 12);
  if (v1 != v2)
  {
    v4 = 0.0;
    v5 = 0.0;
    v6 = *((_QWORD *)a1 + 11);
    do
    {
      if (*(_DWORD *)(v6 + 64) == 2)
      {
        v7 = *(double *)(v6 + 24);
        v4 = v4 + *(double *)v6 * v7;
        v5 = v5 + *(double *)(v6 + 16) * v7;
      }
      v6 += 72;
    }
    while (v6 != v2);
    a1[7] = v4;
    v8 = v5 + 0.0;
    a1[9] = v5 + 0.0;
    do
    {
      if (*(_DWORD *)(v1 + 64) != 2)
      {
        v9 = *(double *)(v1 + 24);
        v10 = *(double *)v1 * v9;
        if (v4 > 0.0)
        {
          v11 = log(v4);
          v12 = log(v10);
          v10 = exp(v11 + v12);
        }
        a1[7] = v10;
        v8 = v8 + *(double *)(v1 + 16) * v9;
        a1[9] = v8;
        v4 = v10;
      }
      v1 += 72;
    }
    while (v1 != v2);
  }
}

uint64_t sub_18F6B22A8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 1024);
  *a2 = *(_QWORD *)(result + 1016);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_18F6B22D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1036);
}

double sub_18F6B22D8(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 136) = _Q1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_WORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 467) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 334) = 0u;
  *(_QWORD *)(a1 + 544) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_DWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_DWORD *)(a1 + 639) = 0;
  *(_BYTE *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_WORD *)(a1 + 692) = 1;
  *(_DWORD *)(a1 + 696) = 0;
  *(_BYTE *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 822) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  return result;
}

os_log_t sub_18F6B23C8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

uint64_t sub_18F6B23F4(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0)
    operator delete(*(void **)(a1 + 608));
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  return a1;
}

BOOL sub_18F6B2434(double *a1, uint64_t *a2, double *a3, double *a4, double a5, double a6)
{
  uint64_t v6;
  double *v7;
  unint64_t v8;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  _BOOL8 result;
  NSObject *v37;
  NSObject *v38;
  int v39;
  char *v40;
  char *v41;
  double v42;
  double v43[2];
  double v44;
  uint8_t buf[8];
  double v46[205];

  v46[204] = *(double *)MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = *(double **)(*a2 + 136);
  v8 = *(_QWORD *)(*a2 + 144) - (_QWORD)v7;
  *a3 = -1.0;
  *a4 = -1.0;
  if ((int)(v8 >> 4) > 1)
  {
    v14 = *v7;
    v15 = v7[1];
    *(double *)buf = 0.0;
    v46[0] = 0.0;
    sub_18F5BD37C(a1, (double *)buf, v46, &v42, a5, a6, 0.0, v14, v15, 0.0);
    v16 = 0;
    v17 = *(double *)buf;
    v18 = v46[0];
    v19 = (v8 >> 4) - 1;
    v20 = 0.0;
    v21 = 0.0;
    while (1)
    {
      v22 = *(_QWORD *)(v6 + 136) + v16;
      v23 = *(double *)(v22 + 16);
      v24 = *(double *)(v22 + 24);
      v42 = 0.0;
      v43[0] = 0.0;
      sub_18F5BD37C(a1, &v42, v43, &v44, a5, a6, 0.0, v23, v24, 0.0);
      v25 = v42;
      v26 = v43[0];
      v27 = (v17 - v42) * (v17 - v42) + (v18 - v43[0]) * (v18 - v43[0]);
      v28 = 0.0 - v17;
      if (v27 >= 0.001)
      {
        v30 = ((0.0 - v18) * (v43[0] - v18) + v28 * (v42 - v17)) / v27;
        if (v30 < 0.0)
        {
          v32 = v28 * v28 + (0.0 - v18) * (0.0 - v18);
          v30 = 0.0;
          goto LABEL_11;
        }
        if (v30 > 1.0)
        {
          v32 = (0.0 - v42) * (0.0 - v42) + (0.0 - v43[0]) * (0.0 - v43[0]);
          v30 = 1.0;
          goto LABEL_11;
        }
        v29 = (0.0 - (v17 + (v42 - v17) * v30)) * (0.0 - (v17 + (v42 - v17) * v30));
        v31 = 0.0 - (v18 + (v43[0] - v18) * v30);
      }
      else
      {
        v29 = v28 * v28;
        v30 = 0.0;
        v31 = 0.0 - v18;
      }
      v32 = v29 + v31 * v31;
LABEL_11:
      v33 = sqrt(v27);
      v34 = sqrt(v32);
      if (*a3 < 0.0 || v34 < *a3)
      {
        *a3 = v34;
        v20 = v21 + v33 * v30;
      }
      v21 = v21 + v33;
      v16 += 16;
      v18 = v26;
      v17 = v25;
      if (!--v19)
      {
        v35 = v20 / v21;
        if (v21 < 0.001)
          v35 = 0.0;
        *a4 = v35;
        return *a3 < 0.03;
      }
    }
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29907B0);
  v37 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v37, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    LOWORD(v42) = 0;
    v40 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "CoreLocation: %s\n", v40);
    if (v40 != (char *)buf)
      free(v40);
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29907B0);
  v38 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v38, OS_LOG_TYPE_ERROR, "#Warning CLMM, findClosestPointOnRoad returned false", buf, 2u);
  }
  v39 = sub_18F5C4AE0(115, 0);
  result = 0;
  if (v39)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29907B0);
    LOWORD(v42) = 0;
    v41 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryCommon::isCoordinateOnRoadVector(CLDistanceCalc &, const double, const double, CLMapRoadPtr, double &, double &)", "CoreLocation: %s\n", v41);
    if (v41 != (char *)buf)
      free(v41);
    return 0;
  }
  return result;
}

uint64_t sub_18F6B28F4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  BOOL v7;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v3 = *a2;
    v4 = a2[1];
    result = 1;
    while (1)
    {
      v6 = v2[4];
      if (v3 == v6)
        break;
      if (v3 >= v6)
      {
        if (v6 >= v3)
          return result;
LABEL_21:
        ++v2;
      }
LABEL_22:
      v2 = (uint64_t *)*v2;
      if (!v2)
        return 0;
    }
    if (*((_BYTE *)a2 + 16) && *((_BYTE *)v2 + 48))
    {
      if (v4 < v2[5])
        goto LABEL_22;
    }
    else
    {
      if (*((_BYTE *)v2 + 48))
        v7 = 0;
      else
        v7 = *((_BYTE *)a2 + 16) != 0;
      if (v7)
        goto LABEL_22;
    }
    if (*((_BYTE *)v2 + 48) && *((_BYTE *)a2 + 16))
    {
      if (v2[5] >= v4)
        return result;
    }
    else if (!*((_BYTE *)v2 + 48) || *((_BYTE *)a2 + 16))
    {
      return result;
    }
    goto LABEL_21;
  }
  return 0;
}

_OWORD *sub_18F6B2988(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v11;

  v6 = sub_18F6B2A18((uint64_t)a1, &v11, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v9;
    *((_BYTE *)v7 + 56) = 0;
    sub_18F62A6F8(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_18F6B2A18(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _BOOL4 v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    while (1)
    {
      v8 = v4;
      v9 = v4[4];
      if (v6 != v9)
        break;
      if (*((_BYTE *)a3 + 16) && *((_BYTE *)v8 + 48))
      {
        if (v7 >= v8[5])
          goto LABEL_17;
LABEL_15:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_26;
      }
      else
      {
        if (*((_BYTE *)v8 + 48))
          v10 = 0;
        else
          v10 = *((_BYTE *)a3 + 16) != 0;
        if (v10)
          goto LABEL_15;
LABEL_17:
        if (*((_BYTE *)v8 + 48) && *((_BYTE *)a3 + 16))
        {
          if (v8[5] >= v7)
            goto LABEL_26;
        }
        else if (!*((_BYTE *)v8 + 48) || *((_BYTE *)a3 + 16))
        {
          goto LABEL_26;
        }
LABEL_23:
        result = v8 + 1;
        v4 = (uint64_t *)v8[1];
        if (!v4)
          goto LABEL_26;
      }
    }
    if (v6 >= v9)
    {
      if (v9 >= v6)
        goto LABEL_26;
      goto LABEL_23;
    }
    goto LABEL_15;
  }
  v8 = result;
LABEL_26:
  *a2 = v8;
  return result;
}

uint64_t sub_18F6B2AC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v20[5];

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_18F5F7864();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v20[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_18F6B2C80(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v20[0] = v10;
  v20[1] = v11;
  v20[3] = &v10[56 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v11 + 1) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = &v10[56 * v4];
  v16 = *(_OWORD *)(a2 + 16);
  v17 = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v15 + 6) = *(_QWORD *)(a2 + 48);
  *((_OWORD *)v15 + 1) = v16;
  *((_OWORD *)v15 + 2) = v17;
  v20[2] = v11 + 56;
  sub_18F6B2C14(a1, v20);
  v18 = a1[1];
  sub_18F6B2CC8((uint64_t)v20);
  return v18;
}

void sub_18F6B2C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F6B2CC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F6B2C14(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 56);
    v2 -= 56;
    *(_OWORD *)(v4 - 56) = v5;
    v4 -= 56;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v6 = *(_OWORD *)(v2 + 16);
    v7 = *(_OWORD *)(v2 + 32);
    *(_QWORD *)(v4 + 48) = *(_QWORD *)(v2 + 48);
    *(_OWORD *)(v4 + 16) = v6;
    *(_OWORD *)(v4 + 32) = v7;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *sub_18F6B2C80(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    sub_18F5F689C();
  return operator new(56 * a2);
}

uint64_t sub_18F6B2CC8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    sub_18F5D6004(i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_18F6B2D14(_QWORD *a1)
{
  *a1 = &off_1E298F6D8;
  sub_18F6B2EB8((uint64_t)(a1 + 3));
  JUMPOUT(0x194002D30);
}

void sub_18F6B2D54(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        sub_18F6B2DD8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_18F6B2DD8(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 88);
  if (v3)
  {
    *(_QWORD *)(a2 + 96) = v3;
    operator delete(v3);
  }
  return sub_18F5D6004(a2);
}

void sub_18F6B2E08(_QWORD *a1)
{
  if (a1)
  {
    sub_18F6B2E08(*a1);
    sub_18F6B2E08(a1[1]);
    sub_18F6B2E48((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t sub_18F6B2E48(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 5087) < 0)
    operator delete(*(void **)(a1 + 5064));
  if (*(char *)(a1 + 807) < 0)
    operator delete(*(void **)(a1 + 784));
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  sub_18F5D6004(a1 + 48);
  return sub_18F5D6004(a1 + 24);
}

uint64_t sub_18F6B2EB8(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_18F6B2F7C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_18F5D6004(v4 - 56);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18F6B2FEC(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 264;
        sub_18F5D6004((uint64_t)(v4 - 56));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_18F6B3060(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  _BOOL4 v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *((unsigned __int8 *)a2 + 16);
  v6 = v2;
  v8 = *a2;
  v7 = a2[1];
  do
  {
    v9 = *(_QWORD *)(v3 + 32);
    if (v9 == v8)
    {
      if (*(_BYTE *)(v3 + 48))
        v10 = v5 == 0;
      else
        v10 = 1;
      if (v10)
      {
        if (*(_BYTE *)(v3 + 48))
          v11 = v5 == 0;
        else
          v11 = 0;
        v12 = v11;
      }
      else
      {
        v12 = *(_QWORD *)(v3 + 40) < v7;
      }
    }
    else
    {
      v12 = v9 < v8;
    }
    v13 = !v12;
    if (v12)
      v14 = (uint64_t *)(v3 + 8);
    else
      v14 = (uint64_t *)v3;
    if (v13)
      v6 = v3;
    v3 = *v14;
  }
  while (*v14);
  if (v6 == v2)
    return v2;
  v15 = *(_QWORD *)(v6 + 32);
  if (v8 != v15)
  {
    if (v8 >= v15)
      return v6;
    return v2;
  }
  if (*((_BYTE *)a2 + 16) && *(_BYTE *)(v6 + 48))
  {
    if (v7 >= *(_QWORD *)(v6 + 40))
      return v6;
    return v2;
  }
  if (*((_BYTE *)a2 + 16) && !*(_BYTE *)(v6 + 48))
    return v2;
  return v6;
}

uint64_t sub_18F6B3118(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x249249249249249)
    sub_18F5F7864();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924)
    v6 = 0x249249249249249;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_18F6B3350((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[112 * v3];
  v13 = &v7[112 * v6];
  sub_18F6B323C((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 112;
  sub_18F6B32DC(a1, &v10);
  v8 = a1[1];
  sub_18F6B34E8(&v10);
  return v8;
}

void sub_18F6B3228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F6B34E8((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F6B323C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_OWORD *)(a3 + 16);
  v7 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  v8 = *(_OWORD *)(a3 + 56);
  v9 = *(_OWORD *)(a3 + 65);
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 65) = v9;
  *(_OWORD *)(a2 + 56) = v8;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  return sub_18F692CBC((_QWORD *)(a2 + 88), *(const void **)(a3 + 88), *(_QWORD *)(a3 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a3 + 96) - *(_QWORD *)(a3 + 88)) >> 3));
}

void sub_18F6B32C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18F5D6004(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6B32DC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_18F6B3398((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_18F6B3350(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL)
    sub_18F5F689C();
  return operator new(112 * a2);
}

uint64_t sub_18F6B3398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 112);
      a3 -= 112;
      *(_OWORD *)(v7 - 112) = v8;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v9 = *(_OWORD *)(a3 + 16);
      v10 = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v7 - 64) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(v7 - 96) = v9;
      *(_OWORD *)(v7 - 80) = v10;
      v11 = *(_OWORD *)(a3 + 56);
      *(_OWORD *)(v7 - 47) = *(_OWORD *)(a3 + 65);
      *(_OWORD *)(v7 - 56) = v11;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 88);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 104);
      *(_QWORD *)(a3 + 88) = 0;
      *(_QWORD *)(a3 + 96) = 0;
      *(_QWORD *)(a3 + 104) = 0;
      v7 = *((_QWORD *)&v17 + 1) - 112;
      *((_QWORD *)&v17 + 1) -= 112;
    }
    while (a3 != a5);
    v12 = v17;
  }
  v15 = 1;
  sub_18F6B3464((uint64_t)v14);
  return v12;
}

uint64_t sub_18F6B3464(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_18F6B3498((uint64_t *)a1);
  return a1;
}

uint64_t *sub_18F6B3498(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_18F6B2DD8(v3, v1);
      v1 += 112;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_18F6B34E8(void **a1)
{
  sub_18F6B3518((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_18F6B3518(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 112;
      result = sub_18F6B2DD8(v4, v1 - 112);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

_QWORD *sub_18F6B355C(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_18F6B35DC(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_18F6B35C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_18F6B35DC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_18F5F7864();
  result = (char *)sub_18F62C554((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t sub_18F6B361C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = a2;
  v8 = *(void **)a1;
  if (0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_18F6B3864((void **)a1);
    if (a4 > 0xF83E0F83E0F83ELL)
      sub_18F5F7864();
    v9 = 0x1F07C1F07C1F07C2 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    if ((unint64_t)(0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x7C1F07C1F07C1FLL)
      v10 = 0xF83E0F83E0F83ELL;
    else
      v10 = v9;
    result = (uint64_t)sub_18F6B38CC((_QWORD *)a1, v10);
    v12 = *(_QWORD *)(a1 + 8);
    while (v6 != a3)
    {
      *(_OWORD *)v12 = *(_OWORD *)v6;
      v13 = *(_OWORD *)(v6 + 16);
      v14 = *(_OWORD *)(v6 + 32);
      v15 = *(_OWORD *)(v6 + 64);
      *(_OWORD *)(v12 + 48) = *(_OWORD *)(v6 + 48);
      *(_OWORD *)(v12 + 64) = v15;
      *(_OWORD *)(v12 + 16) = v13;
      *(_OWORD *)(v12 + 32) = v14;
      v16 = *(_OWORD *)(v6 + 80);
      v17 = *(_OWORD *)(v6 + 96);
      v18 = *(_OWORD *)(v6 + 128);
      *(_OWORD *)(v12 + 112) = *(_OWORD *)(v6 + 112);
      *(_OWORD *)(v12 + 128) = v18;
      *(_OWORD *)(v12 + 80) = v16;
      *(_OWORD *)(v12 + 96) = v17;
      v19 = *(_OWORD *)(v6 + 144);
      v20 = *(_OWORD *)(v6 + 160);
      v21 = *(_OWORD *)(v6 + 192);
      *(_OWORD *)(v12 + 176) = *(_OWORD *)(v6 + 176);
      *(_OWORD *)(v12 + 192) = v21;
      *(_OWORD *)(v12 + 144) = v19;
      *(_OWORD *)(v12 + 160) = v20;
      v22 = *(_QWORD *)(v6 + 216);
      *(_QWORD *)(v12 + 208) = *(_QWORD *)(v6 + 208);
      *(_QWORD *)(v12 + 216) = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = *(_OWORD *)(v6 + 224);
      v26 = *(_OWORD *)(v6 + 240);
      *(_QWORD *)(v12 + 256) = *(_QWORD *)(v6 + 256);
      *(_OWORD *)(v12 + 224) = v25;
      *(_OWORD *)(v12 + 240) = v26;
      v6 += 264;
      v12 += 264;
    }
LABEL_21:
    *(_QWORD *)(a1 + 8) = v12;
    return result;
  }
  if (0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3) < a4)
  {
    v27 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3);
    result = sub_18F6B3920(a2, v27, (uint64_t)v8);
    v12 = *(_QWORD *)(a1 + 8);
    while (v27 != a3)
    {
      *(_OWORD *)v12 = *(_OWORD *)v27;
      v28 = *(_OWORD *)(v27 + 16);
      v29 = *(_OWORD *)(v27 + 32);
      v30 = *(_OWORD *)(v27 + 64);
      *(_OWORD *)(v12 + 48) = *(_OWORD *)(v27 + 48);
      *(_OWORD *)(v12 + 64) = v30;
      *(_OWORD *)(v12 + 16) = v28;
      *(_OWORD *)(v12 + 32) = v29;
      v31 = *(_OWORD *)(v27 + 80);
      v32 = *(_OWORD *)(v27 + 96);
      v33 = *(_OWORD *)(v27 + 128);
      *(_OWORD *)(v12 + 112) = *(_OWORD *)(v27 + 112);
      *(_OWORD *)(v12 + 128) = v33;
      *(_OWORD *)(v12 + 80) = v31;
      *(_OWORD *)(v12 + 96) = v32;
      v34 = *(_OWORD *)(v27 + 144);
      v35 = *(_OWORD *)(v27 + 160);
      v36 = *(_OWORD *)(v27 + 192);
      *(_OWORD *)(v12 + 176) = *(_OWORD *)(v27 + 176);
      *(_OWORD *)(v12 + 192) = v36;
      *(_OWORD *)(v12 + 144) = v34;
      *(_OWORD *)(v12 + 160) = v35;
      v37 = *(_QWORD *)(v27 + 216);
      *(_QWORD *)(v12 + 208) = *(_QWORD *)(v27 + 208);
      *(_QWORD *)(v12 + 216) = v37;
      if (v37)
      {
        v38 = (unint64_t *)(v37 + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = *(_OWORD *)(v27 + 224);
      v41 = *(_OWORD *)(v27 + 240);
      *(_QWORD *)(v12 + 256) = *(_QWORD *)(v27 + 256);
      *(_OWORD *)(v12 + 224) = v40;
      *(_OWORD *)(v12 + 240) = v41;
      v27 += 264;
      v12 += 264;
    }
    goto LABEL_21;
  }
  result = sub_18F6B3920(a2, a3, (uint64_t)v8);
  v43 = v42;
  v44 = *(_QWORD *)(a1 + 8);
  if (v44 != v42)
  {
    do
    {
      v45 = v44 - 264;
      result = sub_18F5D6004(v44 - 56);
      v44 = v45;
    }
    while (v45 != v43);
  }
  *(_QWORD *)(a1 + 8) = v43;
  return result;
}

void sub_18F6B3864(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 264;
        sub_18F5D6004((uint64_t)(v3 - 56));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_18F6B38CC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xF83E0F83E0F83FLL)
    sub_18F5F7864();
  result = (char *)sub_18F6B39C8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[264 * v4];
  return result;
}

uint64_t sub_18F6B3920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    *(_OWORD *)a3 = *(_OWORD *)v4;
    v6 = *(_OWORD *)(v4 + 16);
    v7 = *(_OWORD *)(v4 + 32);
    v8 = *(_OWORD *)(v4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(v4 + 48);
    *(_OWORD *)(a3 + 64) = v8;
    *(_OWORD *)(a3 + 16) = v6;
    *(_OWORD *)(a3 + 32) = v7;
    v9 = *(_OWORD *)(v4 + 80);
    v10 = *(_OWORD *)(v4 + 96);
    v11 = *(_OWORD *)(v4 + 128);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(v4 + 112);
    *(_OWORD *)(a3 + 128) = v11;
    *(_OWORD *)(a3 + 80) = v9;
    *(_OWORD *)(a3 + 96) = v10;
    v12 = *(_OWORD *)(v4 + 144);
    v13 = *(_OWORD *)(v4 + 160);
    v14 = *(_OWORD *)(v4 + 192);
    *(_OWORD *)(a3 + 176) = *(_OWORD *)(v4 + 176);
    *(_OWORD *)(a3 + 192) = v14;
    *(_OWORD *)(a3 + 144) = v12;
    *(_OWORD *)(a3 + 160) = v13;
    sub_18F623A40((_QWORD *)(a3 + 208), (uint64_t *)(v4 + 208));
    v15 = *(_QWORD *)(v4 + 256);
    v16 = *(_OWORD *)(v4 + 240);
    *(_OWORD *)(a3 + 224) = *(_OWORD *)(v4 + 224);
    *(_OWORD *)(a3 + 240) = v16;
    *(_QWORD *)(a3 + 256) = v15;
    a3 += 264;
    v4 += 264;
  }
  while (v4 != v5);
  return v5;
}

void *sub_18F6B39C8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF83E0F83E0F83FLL)
    sub_18F5F689C();
  return operator new(264 * a2);
}

uint64_t sub_18F6B3A10(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v29[5];

  v3 = *a1;
  v4 = 0xF83E0F83E0F83E1 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xF83E0F83E0F83ELL)
    sub_18F5F7864();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xF83E0F83E0F83E1 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x7C1F07C1F07C1FLL)
    v9 = 0xF83E0F83E0F83ELL;
  else
    v9 = v5;
  v29[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_18F6B39C8(v7, v9);
  else
    v10 = 0;
  v11 = &v10[264 * v4];
  v29[0] = v10;
  v29[1] = v11;
  v29[3] = &v10[264 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v11 + 4) = v14;
  *((_OWORD *)v11 + 2) = v13;
  v15 = *(_OWORD *)(a2 + 128);
  v17 = *(_OWORD *)(a2 + 80);
  v16 = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v11 + 8) = v15;
  *((_OWORD *)v11 + 5) = v17;
  *((_OWORD *)v11 + 6) = v16;
  v18 = *(_OWORD *)(a2 + 192);
  v20 = *(_OWORD *)(a2 + 144);
  v19 = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v11 + 11) = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v11 + 12) = v18;
  *((_OWORD *)v11 + 9) = v20;
  *((_OWORD *)v11 + 10) = v19;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 26) = *(_QWORD *)(a2 + 208);
  v21 = *(_QWORD *)(a2 + 216);
  *((_QWORD *)v11 + 27) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = &v10[264 * v4];
  v25 = *(_OWORD *)(a2 + 224);
  v26 = *(_OWORD *)(a2 + 240);
  *((_QWORD *)v24 + 32) = *(_QWORD *)(a2 + 256);
  *((_OWORD *)v24 + 14) = v25;
  *((_OWORD *)v24 + 15) = v26;
  v29[2] = v11 + 264;
  sub_18F6B3B94(a1, v29);
  v27 = a1[1];
  sub_18F6B3C54((uint64_t)v29);
  return v27;
}

void sub_18F6B3B80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F6B3C54((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F6B3B94(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 != *result)
  {
    v5 = v4 - 56;
    v6 = v3 - 56;
    do
    {
      v7 = v6 - 208;
      *(_OWORD *)(v5 - 208) = *(_OWORD *)(v6 - 208);
      v8 = *(_OWORD *)(v6 - 192);
      v9 = *(_OWORD *)(v6 - 176);
      v10 = *(_OWORD *)(v6 - 144);
      *(_OWORD *)(v5 - 160) = *(_OWORD *)(v6 - 160);
      *(_OWORD *)(v5 - 144) = v10;
      *(_OWORD *)(v5 - 192) = v8;
      *(_OWORD *)(v5 - 176) = v9;
      v11 = *(_OWORD *)(v6 - 128);
      v12 = *(_OWORD *)(v6 - 112);
      v13 = *(_OWORD *)(v6 - 80);
      *(_OWORD *)(v5 - 96) = *(_OWORD *)(v6 - 96);
      *(_OWORD *)(v5 - 80) = v13;
      *(_OWORD *)(v5 - 128) = v11;
      *(_OWORD *)(v5 - 112) = v12;
      v14 = *(_OWORD *)(v6 - 64);
      v15 = *(_OWORD *)(v6 - 48);
      v16 = *(_OWORD *)(v6 - 16);
      *(_OWORD *)(v5 - 32) = *(_OWORD *)(v6 - 32);
      *(_OWORD *)(v5 - 16) = v16;
      *(_OWORD *)(v5 - 64) = v14;
      *(_OWORD *)(v5 - 48) = v15;
      *(_OWORD *)v5 = *(_OWORD *)v6;
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      v17 = *(_OWORD *)(v6 + 16);
      v18 = *(_OWORD *)(v6 + 32);
      *(_QWORD *)(v5 + 48) = *(_QWORD *)(v6 + 48);
      *(_OWORD *)(v5 + 16) = v17;
      *(_OWORD *)(v5 + 32) = v18;
      v5 -= 264;
      v6 -= 264;
    }
    while (v7 != v2);
    v4 = v5 + 56;
  }
  a2[1] = v4;
  v19 = *result;
  *result = v4;
  a2[1] = v19;
  v20 = result[1];
  result[1] = a2[2];
  a2[2] = v20;
  v21 = result[2];
  result[2] = a2[3];
  a2[3] = v21;
  *a2 = a2[1];
  return result;
}

uint64_t sub_18F6B3C54(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 264;
    sub_18F5D6004(i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_18F6B3D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F6B556C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F6B558C()
{
  NSObject *v0;
  char *v1;
  uint8_t buf[1640];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B0 != -1)
    dispatch_once(&qword_1EE1720B0, &unk_1E298D930);
  v0 = qword_1EE172090;
  if (os_log_type_enabled((os_log_t)qword_1EE172090, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_DEFAULT, "Simulation connection interrupted", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720B0 != -1)
      dispatch_once(&qword_1EE1720B0, &unk_1E298D930);
    v1 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLSimulationManager daemonProxy]_block_invoke", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

uint64_t sub_18F6B5710(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  char *v6;
  uint8_t buf[1640];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B0 != -1)
    dispatch_once(&qword_1EE1720B0, &unk_1E298D930);
  v2 = qword_1EE172090;
  if (os_log_type_enabled((os_log_t)qword_1EE172090, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "Simulation connection invalidated", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720B0 != -1)
      dispatch_once(&qword_1EE1720B0, &unk_1E298D930);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLSimulationManager daemonProxy]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  return objc_msgSend_setConnection_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v3, 0, v4);
}

void sub_18F6B58B4()
{
  NSObject *v0;
  char *v1;
  uint8_t buf[1640];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B0 != -1)
    dispatch_once(&qword_1EE1720B0, &unk_1E298D930);
  v0 = qword_1EE172090;
  if (os_log_type_enabled((os_log_t)qword_1EE172090, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_DEFAULT, "Error fetching remoteObjectProxy", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720B0 != -1)
      dispatch_once(&qword_1EE1720B0, &unk_1E298D930);
    v1 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLSimulationManager daemonProxy]_block_invoke", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

os_log_t sub_18F6B5A70()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

os_log_t sub_18F6B5A9C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Simulation");
  qword_1EE172090 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F6B616C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E298F7A8;
  sub_18F6B61B8(a1, 0, 0);
  dispatch_release(*(dispatch_object_t *)(a1 + 208));
  sub_18F5D6004(a1 + 216);
  return sub_18F75B758((_QWORD *)a1);
}

uint64_t sub_18F6B61B8(uint64_t a1, FILE *a2, char a3)
{
  _QWORD *v6;
  FILE *v7;

  v6 = (_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
  v7 = (FILE *)v6[18];
  if (v7 != a2)
  {
    *(_QWORD *)(a1 + 184) = a2;
    if (v7 && *(_BYTE *)(a1 + 156))
      fclose(v7);
    *(_BYTE *)(a1 + 156) = a3;
  }
  return (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
}

void sub_18F6B6234(uint64_t a1)
{
  sub_18F6B616C(a1);
  JUMPOUT(0x194002D30);
}

uint64_t sub_18F6B6258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;

  v10 = a1 + 40;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
  sub_18F6B62F8(a1, "Generic", 0, 2, "void CLLog::logHeader()", "%s\n", &a9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
}

void sub_18F6B62E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6B62F8(uint64_t a1, const char *a2, int a3, signed int a4, const char *a5, const char *a6, va_list a7, ...)
{
  fpos_t v13;
  unsigned int v14;
  unsigned int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  double Current;
  double v21;
  const char *v22;
  FILE *v23;
  const char *v24;
  FILE *v26;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string::size_type size;
  __int128 *v34;
  std::string *v35;
  std::string *v36;
  uid_t v37;
  gid_t v38;
  std::error_code *v39;
  char *v40;
  const std::__fs::filesystem::path *v41;
  const std::__fs::filesystem::path *v42;
  int v43;
  int v44;
  const char *v45;
  int *v46;
  const char *v47;
  int v48;
  void *v49;
  void *v50;
  void *v51;
  NSObject *v52;
  FILE *v53;
  const char *v54;
  int v55;
  fpos_t v57[3];
  __int16 v58;
  void *__p[2];
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v61;
  _QWORD *v62;
  std::string v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  _QWORD v69[6];
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  _QWORD v75[3];
  int v76;
  __int128 v77;
  uint64_t v78;
  __int128 __dst;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  std::string v83;
  fpos_t v84;
  __int16 v85;
  char __str[512];
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v13 = a1 + 40;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
  v14 = vsnprintf(__str, 0x1FFuLL, a6, a7);
  if ((v14 & 0x80000000) == 0)
  {
    v15 = v14;
    if (v14 < 0x1FF)
    {
      v16 = 0;
      v17 = __str;
    }
    else
    {
      v16 = (char *)operator new[]();
      __p[0] = a7;
      if (vsnprintf(v16, v15 + 2 - 1, a6, a7) != v15)
        __assert_rtn("vlog", "CLLog.mm", 169, "newFullContentLength == fullContentLength");
      v17 = v16;
    }
    v18 = (int)v15 - 1;
    if (v17[v18] != 10)
      __assert_rtn("vlog", "CLLog.mm", 172, "'\\n' == buffer[fullContentLength - 1]");
    if (v15 >= 2)
    {
      v18 = v18;
      v19 = v17;
      do
      {
        if (*v19 == 10)
          *v19 = 32;
        ++v19;
        --v18;
      }
      while (v18);
    }
    Current = CFAbsoluteTimeGetCurrent();
    v21 = Current;
    if (*(_BYTE *)(a1 + 152))
    {
      if (a4 > 5)
        v22 = "NONE";
      else
        v22 = off_1E2992180[a4];
      fprintf(*(FILE **)(a1 + 200), "%s,%s,Time,%08.3f,Function,\"%s\",", v22, a2, Current, a5);
      fputs(v17, *(FILE **)(a1 + 200));
    }
    else
    {
      v23 = *(FILE **)(a1 + 184);
      if (v23 && *(_DWORD *)(a1 + 160) >= a4)
      {
        if (a4 > 5)
          v24 = "NONE";
        else
          v24 = off_1E2992180[a4];
        fprintf(v23, "%s,%s,Time,%08.3f,Function,\"%s\",", v24, a2, Current, a5);
        fputs(v17, *(FILE **)(a1 + 184));
        if (*(_DWORD *)(a1 + 172) >= a4)
          sub_18F6B6ECC(a1, 3, *(FILE **)(a1 + 184));
        v57[1] = v13;
        (*(void (**)(fpos_t))(*(_QWORD *)v13 + 16))(v13);
        v58 = 256;
        if (*(int *)(a1 + 12) >= 1)
        {
          v26 = *(FILE **)(a1 + 184);
          if (v26)
          {
            if (*(char *)(a1 + 151) < 0 ? *(_QWORD *)(a1 + 136) : *(unsigned __int8 *)(a1 + 151))
            {
              if (*(char *)(a1 + 79) < 0 ? *(_QWORD *)(a1 + 64) : *(unsigned __int8 *)(a1 + 79))
              {
                v57[0] = 0;
                fgetpos(v26, v57);
                if (v57[0] >= *(int *)(a1 + 12))
                {
                  v84 = v13;
                  (*(void (**)(fpos_t))(*(_QWORD *)v13 + 16))(v13);
                  v85 = 256;
                  sub_18F5D5990(__p, ".log");
                  v32 = sub_18F75BFE0(a1, v29, v30, v31);
                  sub_18F75BC80((const void **)(a1 + 56), a1 + 80, (uint64_t)__p, v32, &v83);
                  if (SHIBYTE(v60) < 0)
                    operator delete(__p[0]);
                  if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
                  else
                    size = v83.__r_.__value_.__l.__size_;
                  v34 = &v81;
                  sub_18F673A90((uint64_t)&v81, size + 4);
                  if (v82 < 0)
                    v34 = (__int128 *)v81;
                  if (size)
                  {
                    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v35 = &v83;
                    else
                      v35 = (std::string *)v83.__r_.__value_.__r.__words[0];
                    memmove(v34, v35, size);
                  }
                  strcpy((char *)v34 + size, ".bz2");
                  sub_18F6B7D94(a1);
                  if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v36 = &v83;
                  else
                    v36 = (std::string *)v83.__r_.__value_.__r.__words[0];
                  v37 = getuid();
                  v38 = getgid();
                  sub_18F5F41FC(v36, v37, v38);
                  v40 = (char *)(a1 + 128);
                  v41 = (const std::__fs::filesystem::path *)(a1 + 128);
                  if (*(char *)(a1 + 151) < 0)
                    v41 = *(const std::__fs::filesystem::path **)v40;
                  if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v42 = (const std::__fs::filesystem::path *)&v83;
                  else
                    v42 = (const std::__fs::filesystem::path *)v83.__r_.__value_.__r.__words[0];
                  rename(v41, v42, v39);
                  if (v43)
                  {
                    v44 = SHIBYTE(v82);
                    v45 = (const char *)v81;
                    v46 = __error();
                    v47 = (const char *)&v81;
                    if (v44 < 0)
                      v47 = v45;
                    syslog(3, "%s,%s,Failed to move aside log file %s (%d)\n", "ERROR", "CLLog", v47, *v46);
                  }
                  if (*(char *)(a1 + 151) < 0)
                    v40 = *(char **)v40;
                  sub_18F6B77FC(a1, v40);
                  if (*(char *)(a1 + 103) < 0)
                  {
                    sub_18F5C6990(&__dst, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
                  }
                  else
                  {
                    __dst = *(_OWORD *)(a1 + 80);
                    v80 = *(_QWORD *)(a1 + 96);
                  }
                  if (*(char *)(a1 + 79) < 0)
                  {
                    sub_18F5C6990(&v77, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
                  }
                  else
                  {
                    v77 = *(_OWORD *)(a1 + 56);
                    v78 = *(_QWORD *)(a1 + 72);
                  }
                  v48 = *(_DWORD *)(a1 + 16);
                  v75[0] = 0;
                  v75[1] = v75;
                  v75[2] = 0x2020000000;
                  v76 = 0;
                  v49 = (void *)MEMORY[0x1E0C809B0];
                  v69[0] = MEMORY[0x1E0C809B0];
                  v69[1] = 3321888768;
                  v69[2] = sub_18F6B7DE0;
                  v69[3] = &unk_1E2990098;
                  v69[5] = a1;
                  if (SHIBYTE(v80) < 0)
                  {
                    v50 = (void *)MEMORY[0x1E0C809B0];
                    sub_18F5C6990(&v70, (void *)__dst, *((unint64_t *)&__dst + 1));
                    v49 = v50;
                  }
                  else
                  {
                    v70 = __dst;
                    v71 = v80;
                  }
                  v69[4] = v75;
                  v74 = v48;
                  if (SHIBYTE(v78) < 0)
                  {
                    v51 = v49;
                    sub_18F5C6990(&v72, (void *)v77, *((unint64_t *)&v77 + 1));
                    v49 = v51;
                  }
                  else
                  {
                    v72 = v77;
                    v73 = v78;
                  }
                  v52 = *(NSObject **)(a1 + 208);
                  __p[0] = v49;
                  __p[1] = (void *)3321888768;
                  v60 = sub_18F6B81B0;
                  v61 = &unk_1E29900D0;
                  v68 = v48;
                  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
                    sub_18F5C6990(&v63, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
                  else
                    v63 = v83;
                  if (SHIBYTE(v82) < 0)
                  {
                    sub_18F5C6990(&v64, (void *)v81, *((unint64_t *)&v81 + 1));
                  }
                  else
                  {
                    v64 = v81;
                    v65 = v82;
                  }
                  if (SHIBYTE(v78) < 0)
                  {
                    sub_18F5C6990(&v66, (void *)v77, *((unint64_t *)&v77 + 1));
                  }
                  else
                  {
                    v66 = v77;
                    v67 = v78;
                  }
                  v62 = v69;
                  dispatch_async(v52, __p);
                  if (SHIBYTE(v67) < 0)
                    operator delete((void *)v66);
                  if (SHIBYTE(v65) < 0)
                    operator delete((void *)v64);
                  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v63.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v73) < 0)
                    operator delete((void *)v72);
                  if (SHIBYTE(v71) < 0)
                    operator delete((void *)v70);
                  _Block_object_dispose(v75, 8);
                  if (SHIBYTE(v78) < 0)
                    operator delete((void *)v77);
                  if (SHIBYTE(v80) < 0)
                    operator delete((void *)__dst);
                  if (SHIBYTE(v82) < 0)
                    operator delete((void *)v81);
                  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v83.__r_.__value_.__l.__data_);
                  (*(void (**)(fpos_t))(*(_QWORD *)v13 + 24))(v13);
                }
              }
            }
          }
        }
        (*(void (**)(fpos_t))(*(_QWORD *)v13 + 24))(v13);
      }
      v53 = *(FILE **)(a1 + 192);
      if (v53 && *(_DWORD *)(a1 + 164) >= a4)
      {
        if (a4 > 5)
          v54 = "NONE";
        else
          v54 = off_1E2992180[a4];
        fprintf(v53, "%s,%s,Time,%08.3f,", v54, a2, v21);
        fputs(v17, *(FILE **)(a1 + 192));
      }
      if ((!a3 || *(_DWORD *)(a1 + 176)) && *(_DWORD *)(a1 + 168) >= a4)
      {
        if (a4)
          v55 = 5;
        else
          v55 = 3;
        syslog(v55, "%s", v17);
      }
    }
    if (v16)
      MEMORY[0x194002D18](v16, 0x1000C8077774924);
  }
  return (*(uint64_t (**)(fpos_t))(*(_QWORD *)v13 + 24))(v13);
}

void sub_18F6B6AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  char a65;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  char a79;
  uint64_t v79;

  if (a41 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a63 < 0)
    operator delete(a58);
  if (a57 < 0)
    operator delete(a52);
  _Block_object_dispose(&a65, 8);
  if (a72 < 0)
    operator delete(a69);
  if (a74 < 0)
    operator delete(a73);
  if (a76 < 0)
    operator delete(a75);
  if (a78 < 0)
    operator delete(a77);
  sub_18F5CE240((uint64_t)&a79);
  sub_18F5CE240((uint64_t)&a22);
  if (v79)
    MEMORY[0x194002D18](v79, 0x1000C8077774924);
  sub_18F5CE240((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6B6C4C(uint64_t a1, const char *a2, int a3, signed int a4, const char *a5, char *__src, va_list a7)
{
  int v13;
  char __dst[1628];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v13 = strncpy(__dst, __src, 0x65CuLL);
  sub_18F6B6D00(v13, __dst);
  return sub_18F6B62F8(a1, a2, a3, a4, a5, __dst, a7);
}

BOOL sub_18F6B6D00(int a1, char *__s)
{
  int64_t v3;
  char *v4;
  char *v5;
  char *v6;
  int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  _BOOL8 result;
  NSObject *v14;
  int v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = strlen(__s);
  if (v3 < 1)
    return 1;
  v4 = &__s[v3];
  v5 = __s;
  while (1)
  {
    if (*v5 != 37)
    {
      v6 = v5;
      goto LABEL_18;
    }
    v6 = v5 + 1;
    v7 = v5[1];
    if (v7 == 123)
      break;
LABEL_11:
    v6 = v5 + 1;
    v12 = v5 + 1;
    if (v7 != 64)
    {
      if (v7 != 46)
        goto LABEL_18;
      if (v5[2] != 42)
        goto LABEL_18;
      v12 = v5 + 3;
      if (v5[3] != 80)
        goto LABEL_18;
      *(_WORD *)(v5 + 1) = 9572;
    }
    *v12 = 112;
LABEL_18:
    v5 = v6 + 1;
    if (v6 + 1 >= v4)
      return 1;
  }
  if (v6 != v4)
  {
    v8 = 0;
    while (1)
    {
      v9 = &v5[v8 + 2];
      if (v9 == v4)
        break;
      ++v8;
      if (*v9 == 125)
      {
        if (v8 == -1)
          goto LABEL_18;
        v10 = &v5[v8];
        v11 = (uint64_t)&v5[v8 + 1];
        memmove(v5, v6, v8 + 1);
        v10[1] = 37;
        v7 = v10[2];
        v5 = (char *)v11;
        goto LABEL_11;
      }
    }
  }
  if (qword_1ECD8E748 != -1)
    dispatch_once(&qword_1ECD8E748, &unk_1E2992160);
  v14 = qword_1ECD8E740;
  result = os_log_type_enabled((os_log_t)qword_1ECD8E740, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v15 = 136446210;
    v16 = __s;
    _os_log_error_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "Failed parse os_log format specifier for shimming:missing closing brace,format,%{public}s", (uint8_t *)&v15, 0xCu);
    return 0;
  }
  return result;
}

uint64_t sub_18F6B6ECC(uint64_t a1, int a2, FILE *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  const void **v9;
  Dl_info v11;
  uint64_t v12;
  __int16 v13;
  void *v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 40;
  v5 = *(_QWORD *)(a1 + 40);
  v12 = a1 + 40;
  (*(void (**)(uint64_t))(v5 + 16))(a1 + 40);
  v13 = 256;
  CFAbsoluteTimeGetCurrent();
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)v14 = 0u;
  v7 = backtrace(v14, 128);
  v8 = a2 + 1;
  if (a2 + 1 < v7)
  {
    v9 = (const void **)&v14[v8];
    do
    {
      if (dladdr(*v9, &v11))
      {
        if (v11.dli_sname)
        {
          basename((char *)v11.dli_fname);
          fprintf(a3, "%s,%s,Time,%08.3f,%d\t%s\t0x%08lx %s + %lu\n", "STATUS");
        }
        else
        {
          basename((char *)v11.dli_fname);
          fprintf(a3, "%s,%s,Time,%08.3f,%d\t%s\t0x%08lx 0x%08lx + %lu\n", "STATUS");
        }
      }
      else
      {
        fprintf(a3, "%s,%s,Time,%08.3f,%d\t0x%08lx\n");
      }
      ++v8;
      ++v9;
    }
    while (v7 != v8);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_18F6B70C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_18F5D57A8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_18F6B70F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  std::string *v8;
  const void *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  void *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  void **p_p;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  _QWORD *v35;
  unint64_t *v36;
  uint64_t v37;
  FILE *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::string v49;
  std::string v50;
  void *__p;
  __int128 __n;
  int v53;
  _QWORD v54[3];

  v54[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend_assertInside(*(void **)(*(_QWORD *)(a1 + 48) + 64), a2, a3, a4);
  pthread_self();
  sub_18F5C7D34(*(_QWORD *)(a1 + 24), "ShowError", (BOOL *)(a1 + 154));
  sub_18F5C7D34(*(_QWORD *)(a1 + 24), "LogShowUI", (BOOL *)(a1 + 155));
  sub_18F5C71C0(*(_QWORD *)(a1 + 24), "LogFileLevel", (_DWORD *)(a1 + 160));
  sub_18F5C71C0(*(_QWORD *)(a1 + 24), "LogBufferLevel", (_DWORD *)(a1 + 164));
  sub_18F5C71C0(*(_QWORD *)(a1 + 24), "LogConsoleLevel", (_DWORD *)(a1 + 168));
  sub_18F5C71C0(*(_QWORD *)(a1 + 24), "LogStackLevel", (_DWORD *)(a1 + 172));
  sub_18F662744(*(_QWORD *)(a1 + 24), "LogFileDirectory", a1 + 56);
  sub_18F662744(*(_QWORD *)(a1 + 24), "LogFilePrefix", a1 + 80);
  sub_18F5C7D34(*(_QWORD *)(a1 + 24), "LogFileFlush", (BOOL *)(a1 + 157));
  sub_18F5C7D34(*(_QWORD *)(a1 + 24), "LogFence", (BOOL *)(a1 + 153));
  v53 = 0;
  sub_18F5C71C0(*(_QWORD *)(a1 + 24), "LogBufferSize", &v53);
  if ((*(_DWORD *)(a1 + 160) & 0x80000000) != 0)
  {
    sub_18F6B61B8(a1, 0, 0);
    goto LABEL_75;
  }
  v5 = *(_QWORD *)(a1 + 184);
  __p = 0;
  __n = 0uLL;
  if (!sub_18F662744(*(_QWORD *)(a1 + 24), "LogFile", (uint64_t)&__p))
    goto LABEL_6;
  v6 = HIBYTE(__n);
  if (__n < 0)
    v6 = __n;
  if (!v6)
  {
LABEL_6:
    if (*(char *)(a1 + 79) < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        goto LABEL_43;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      goto LABEL_43;
    }
    if (*(char *)(a1 + 103) < 0)
    {
      if (!*(_QWORD *)(a1 + 88))
        goto LABEL_43;
    }
    else if (!*(_BYTE *)(a1 + 103))
    {
      goto LABEL_43;
    }
    if (*(char *)(a1 + 79) >= 0)
      v7 = *(unsigned __int8 *)(a1 + 79);
    else
      v7 = *(_QWORD *)(a1 + 64);
    v8 = &v49;
    sub_18F673A90((uint64_t)&v49, v7 + 1);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v49.__r_.__value_.__r.__words[0];
    if (v7)
    {
      if (*(char *)(a1 + 79) >= 0)
        v9 = (const void *)(a1 + 56);
      else
        v9 = *(const void **)(a1 + 56);
      memmove(v8, v9, v7);
    }
    *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 47;
    v10 = *(char *)(a1 + 103);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)(a1 + 80);
    else
      v11 = *(const std::string::value_type **)(a1 + 80);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a1 + 103);
    else
      v12 = *(_QWORD *)(a1 + 88);
    v13 = std::string::append(&v49, v11, v12);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = *(char *)(a1 + 127);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)(a1 + 104);
    else
      v16 = *(const std::string::value_type **)(a1 + 104);
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a1 + 127);
    else
      v17 = *(_QWORD *)(a1 + 112);
    v18 = std::string::append(&v50, v16, v17);
    v19 = (void *)v18->__r_.__value_.__r.__words[0];
    v54[0] = v18->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v54 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__n) < 0)
      operator delete(__p);
    __p = v19;
    *(_QWORD *)&__n = v54[0];
    *(_QWORD *)((char *)&__n + 7) = *(_QWORD *)((char *)v54 + 7);
    HIBYTE(__n) = v20;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
  }
LABEL_43:
  if (__n >= 0)
    v21 = HIBYTE(__n);
  else
    v21 = __n;
  if (v21)
  {
    if (v5)
    {
      v22 = *(unsigned __int8 *)(a1 + 151);
      v23 = (char)v22;
      if ((v22 & 0x80u) != 0)
        v22 = *(_QWORD *)(a1 + 136);
      if (v21 == v22)
      {
        if (v23 >= 0)
          v24 = (unsigned __int8 *)(a1 + 128);
        else
          v24 = *(unsigned __int8 **)(a1 + 128);
        if ((HIBYTE(__n) & 0x80) != 0)
        {
          v27 = (char *)__p;
          if (memcmp(__p, v24, __n))
            goto LABEL_63;
        }
        else if (HIBYTE(__n))
        {
          p_p = &__p;
          v26 = HIBYTE(__n);
          while (*(unsigned __int8 *)p_p == *v24)
          {
            p_p = (void **)((char *)p_p + 1);
            ++v24;
            if (!--v26)
              goto LABEL_66;
          }
          goto LABEL_60;
        }
LABEL_66:
        sub_18F6B7D28(a1, *(unsigned __int8 *)(a1 + 157));
        v29 = (const char *)&__p;
        if (__n < 0)
          v29 = (const char *)__p;
        if (*(_BYTE *)(a1 + 157))
          v30 = " and flushing immediately";
        else
          v30 = " no flush";
        syslog(5, "%s,%s,logging locations to %s%s\n", "NOTICE", "CLLog", v29, v30);
        goto LABEL_73;
      }
    }
LABEL_60:
    if (__n >= 0)
      v27 = (char *)&__p;
    else
      v27 = (char *)__p;
LABEL_63:
    sub_18F6B77FC(a1, v27);
    if (!v5)
    {
      v28 = *(_QWORD *)(a1 + 216);
      if (v28)
        sub_18F6BD7D0(v28, *(FILE **)(a1 + 184));
    }
    goto LABEL_66;
  }
  sub_18F6B61B8(a1, 0, 0);
LABEL_73:
  if (SHIBYTE(__n) < 0)
    operator delete(__p);
LABEL_75:
  if ((*(_DWORD *)(a1 + 164) & 0x80000000) != 0 || (v31 = v53, v53 < 1))
  {
    v46 = *(std::__shared_weak_count **)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    *(_QWORD *)(a1 + 192) = 0;
  }
  else
  {
    if (v53 > 0xA00000)
    {
      v31 = 10485760;
      v53 = 10485760;
    }
    v32 = *(_QWORD *)(a1 + 216);
    if (!v32 || *(_DWORD *)(v32 + 16) != v31)
    {
      v33 = (_QWORD *)operator new();
      v34 = v53;
      *v33 = 0;
      v33[1] = 0;
      *((_DWORD *)v33 + 5) = 0;
      *((_DWORD *)v33 + 6) = 0;
      *((_DWORD *)v33 + 4) = v34;
      sub_18F5BB62C((uint64_t)(v33 + 4), "CLCircularLogBuffer", 1, 1);
      __p = v33;
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
      v35 = (_QWORD *)operator new();
      v35[1] = 0;
      v36 = v35 + 1;
      *v35 = &off_1E298FFD0;
      v35[2] = 0;
      v35[3] = v33;
      *(_QWORD *)&__n = v35;
      v37 = *(_QWORD *)(a1 + 216);
      if (v37)
      {
        v38 = sub_18F6BD608((FILE **)v33);
        sub_18F6BD7D0(v37, v38);
      }
      do
        v39 = __ldxr(v36);
      while (__stxr(v39 + 1, v36));
      v40 = *(std::__shared_weak_count **)(a1 + 224);
      *(_QWORD *)(a1 + 216) = v33;
      *(_QWORD *)(a1 + 224) = v35;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = (std::__shared_weak_count *)__n;
      if ((_QWORD)__n)
      {
        v44 = (unint64_t *)(__n + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v32 = *(_QWORD *)(a1 + 216);
    }
    *(_QWORD *)(a1 + 192) = sub_18F6BD608((FILE **)v32);
    syslog(5, "%s,%s,logging locations to an internal buffer with capacity %d\n", "NOTICE", "CLLog", v53);
  }
}

void sub_18F6B7764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F6B77FC(uint64_t a1, char *a2)
{
  uint64_t v4;
  uid_t v5;
  gid_t v6;
  FILE *v7;
  FILE *v8;
  char *v9;
  unint64_t v10;
  unsigned __int8 v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  void **v36;
  void **v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v58[2];
  char v59;
  void *v60[2];
  char v61;
  uint32_t bufsize;
  void *v63[2];
  unsigned __int8 v64;
  char buf[1024];
  char __p[114];
  _BYTE v67[1534];

  *(_QWORD *)&v67[1526] = *MEMORY[0x1E0C80C00];
  v4 = a1 + 40;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
  if (a2)
  {
    v5 = getuid();
    v6 = getgid();
    sub_18F5F41FC(a2, v5, v6);
    v7 = fopen(a2, "a");
    if (v7)
    {
      MEMORY[0x194002BEC](a1 + 128, a2);
      sub_18F6B61B8(a1, v7, 1);
      sub_18F6B7D28(a1, *(unsigned __int8 *)(a1 + 157));
      v8 = *(FILE **)(a1 + 184);
      if (v8)
        sub_18F5F5A54(v8);
      sub_18F5CC0B8();
      sub_18F671500((uint64_t)__p);
      if (__p[23] >= 0)
        v9 = __p;
      else
        v9 = *(char **)__p;
      sub_18F5D5990(v63, v9);
      if (__p[23] < 0)
        operator delete(*(void **)__p);
      v10 = v64;
      v11 = v64;
      if ((v64 & 0x80u) != 0)
        v10 = (unint64_t)v63[1];
      if (!v10)
      {
        MEMORY[0x194002BEC](v63, "Unplugged!");
        v11 = v64;
      }
      bzero(__p, 0x65CuLL);
      v12 = v63;
      if ((v11 & 0x80u) != 0)
        v12 = (void **)v63[0];
      snprintf(__p, 0x65CuLL, "CoreLocation-%s\n", (const char *)v12);
      sub_18F6B6258(a1, v13, 0, v14, v15, v16, v17, v18, (char)__p);
      bzero(__p, 0x65CuLL);
      snprintf(__p, 0x65CuLL, "locationd was compiled on %s at %s\n", "Aug 13 2024", "20:06:10");
      sub_18F6B6258(a1, v19, 0, v20, v21, v22, v23, v24, (char)__p);
      bufsize = 1024;
      if (_NSGetExecutablePath(buf, &bufsize))
      {
        bzero(__p, 0x65CuLL);
        v25 = sub_18F5CC0B8();
        v26 = v60;
        sub_18F671318(v25, (uint64_t)v60);
        if (v61 < 0)
          v26 = (void **)v60[0];
        sub_18F5CC0B8();
        sub_18F670E88((uint64_t)v58);
        if (v59 >= 0)
          v27 = v58;
        else
          v27 = (void **)v58[0];
        snprintf(__p, 0x65CuLL, "/usr/libexec/locationd @ system model %s / version %s\n", (const char *)v26, (const char *)v27);
        if (v59 < 0)
          operator delete(v58[0]);
        if (v61 < 0)
          operator delete(v60[0]);
      }
      else
      {
        bzero(__p, 0x65CuLL);
        v35 = sub_18F5CC0B8();
        v36 = v60;
        sub_18F671318(v35, (uint64_t)v60);
        if (v61 < 0)
          v36 = (void **)v60[0];
        sub_18F5CC0B8();
        sub_18F670E88((uint64_t)v58);
        if (v59 >= 0)
          v37 = v58;
        else
          v37 = (void **)v58[0];
        snprintf(__p, 0x65CuLL, "%s @ system model %s / version %s\n", buf, (const char *)v36, (const char *)v37);
        if (v59 < 0)
          operator delete(v58[0]);
        if (v61 < 0)
          operator delete(v60[0]);
      }
      sub_18F6B6258(a1, v28, 0, v29, v30, v31, v32, v33, (char)__p);
      bzero(__p, 0x65CuLL);
      sub_18F5CC0B8();
      sub_18F671748((uint64_t)v60);
      if (v61 >= 0)
        v38 = v60;
      else
        v38 = (void **)v60[0];
      snprintf(__p, 0x65CuLL, "IOPlatformSerialNumber: %s\n", (const char *)v38);
      if (v61 < 0)
        operator delete(v60[0]);
      sub_18F6B6258(a1, v39, 0, v40, v41, v42, v43, v44, (char)__p);
      bzero(v67, 0x5EAuLL);
      strcpy(__p, "Begin settings dump (read at construction of CLSettings or upon darwin notification 'com.apple.locationd/prefs')\n");
      sub_18F6B6258(a1, v45, 0, v46, v47, v48, v49, v50, (char)__p);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 792))(*(_QWORD *)(a1 + 24));
      bzero(&__p[19], 0x649uLL);
      strcpy(__p, "End settings dump\n");
      sub_18F6B6258(a1, v51, 0, v52, v53, v54, v55, v56, (char)__p);
      if ((char)v64 < 0)
        operator delete(v63[0]);
    }
    else
    {
      v34 = __error();
      syslog(3, "%s,%s,could not open locations log %s, errno %d\n", "ERROR", "CLLog", a2, *v34);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_18F6B7C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  sub_18F5CE240((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6B7D28(uint64_t a1, int a2)
{
  uint64_t v3;
  FILE *v4;

  v3 = a1 + 40;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
  *(_BYTE *)(v3 + 117) = a2 != 0;
  v4 = *(FILE **)(v3 + 144);
  if (v4)
    setvbuf(v4, 0, a2 != 0, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
}

uint64_t sub_18F6B7D94(uint64_t a1)
{
  _QWORD *v1;
  FILE *v2;

  v1 = (_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
  v2 = (FILE *)v1[18];
  if (v2)
    fflush(v2);
  return (*(uint64_t (**)(_QWORD *))(*v1 + 24))(v1);
}

uint64_t sub_18F6B7DE0(uint64_t a1, char *a2)
{
  uint64_t v4;
  size_t v5;
  void **v6;
  const void *v7;
  int v8;
  const char *v9;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 40);
  sub_18F5D5990(v21, a2);
  if (*(char *)(a1 + 71) >= 0)
    v5 = *(unsigned __int8 *)(a1 + 71);
  else
    v5 = *(_QWORD *)(a1 + 56);
  v6 = v19;
  sub_18F673A90((uint64_t)v19, v5 + 1);
  if (v20 < 0)
    v6 = (void **)v19[0];
  if (v5)
  {
    if (*(char *)(a1 + 71) >= 0)
      v7 = (const void *)(a1 + 48);
    else
      v7 = *(const void **)(a1 + 48);
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)v6 + v5) = 95;
  if (sub_18F75BFEC(v4, (char **)v21, (char *)v19))
  {
    sub_18F5D5990(v17, a2);
    sub_18F5D5990(v15, ".log.bz2");
    if ((sub_18F75C0C0(v4, v17, (char *)v15) & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      sub_18F5D5990(v13, a2);
      sub_18F5D5990(__p, ".log");
      v8 = sub_18F75C0C0(v4, v13, (char *)__p);
      if (v12 < 0)
        operator delete(__p[0]);
      if (v14 < 0)
        operator delete(v13[0]);
    }
    if (v16 < 0)
      operator delete(v15[0]);
    if (v18 < 0)
      operator delete(v17[0]);
  }
  else
  {
    v8 = 0;
  }
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
  {
    operator delete(v21[0]);
    if (!v8)
      return 1;
  }
  else if (!v8)
  {
    return 1;
  }
  if (++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) > *(_DWORD *)(a1 + 96))
  {
    LOBYTE(v21[0]) = 0;
    v9 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v9 = *(const char **)v9;
    if (snprintf((char *)v21, 0x400uLL, "%s/%s", v9, a2) > 1023)
    {
      syslog(3, "%s,%s,Rotation path is too long, could not delete old logs.\n", "ERROR", "CLLog");
    }
    else if (unlink((const char *)v21))
    {
      perror("Failed to delete log");
    }
  }
  return 1;
}

void sub_18F6B8048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  if (a37 < 0)
    operator delete(a32);
  if (a43 < 0)
    operator delete(a38);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_18F6B80CC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *result;
  __int128 v6;

  if (*(char *)(a2 + 71) < 0)
  {
    sub_18F5C6990((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
  }
  result = (_BYTE *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
    return sub_18F5C6990(result, *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  v6 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)result = v6;
  return result;
}

void sub_18F6B8150(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 71) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_18F6B816C(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_18F6B81B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  _QWORD *v9;

  if (!*(_DWORD *)(a1 + 112))
    goto LABEL_7;
  v5 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    v5 = *(const char **)v5;
  v6 = (const char *)(a1 + 64);
  v7 = (const char *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    v7 = *(const char **)v6;
  if (!sub_18F5F4958(v5, v7, a3, a4))
  {
    if (*(char *)(a1 + 87) < 0)
      v6 = *(const char **)v6;
    syslog(3, "%s,%s,Failed to write %s\n", "ERROR", "CLLog", v6);
  }
  else
  {
LABEL_7:
    v8 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v8 = *(const char **)v8;
    unlink(v8);
  }
  if ((*(_DWORD *)(a1 + 112) & 0x80000000) == 0)
  {
    v9 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v9 = (_QWORD *)*v9;
    sub_18F6BE4DC((uint64_t)v9, *(_QWORD *)(a1 + 32));
  }
}

_BYTE *sub_18F6B8280(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *result;
  __int128 v7;

  if (*(char *)(a2 + 63) < 0)
  {
    sub_18F5C6990((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    sub_18F5C6990((_BYTE *)(a1 + 64), *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v5;
  }
  result = (_BYTE *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
    return sub_18F5C6990(result, *(void **)(a2 + 88), *(_QWORD *)(a2 + 96));
  v7 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)result = v7;
  return result;
}

void sub_18F6B8334(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 87) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 63) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_18F6B8368(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_18F6B83BC(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  stat *v7;
  FILE *v8;
  FILE *v9;
  char v10;
  const char *p_dst;
  char v12;
  __int128 *v13;
  char *v14;
  const char *v15;
  std::error_code *v16;
  const std::__fs::filesystem::path *v17;
  stat *v18;
  stat *v19;
  char v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *st_ino;
  unint64_t *v25;
  unint64_t v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  void **v38;
  stat *v39;
  stat *v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  stat *v53;
  stat *v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  void **v61;
  void **v62;
  stat *v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  void *v68[2];
  int64_t v69;
  BOOL v70;
  _QWORD v71[5];
  __int128 v72;
  uint64_t v73;
  __int128 __p;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 __dst;
  uint64_t v79;
  uint64_t v80;
  pthread_mutex_t *v81;
  __int16 v82;
  stat v83;

  v2 = *(_QWORD *)(a1 + 40);
  v80 = a1 + 40;
  (*(void (**)(void))(v2 + 16))();
  v82 = 256;
  v6 = sub_18F75BFE0(a1, v3, v4, v5);
  if (*(char *)(a1 + 79) < 0)
  {
    sub_18F5C6990(&__dst, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
  }
  else
  {
    __dst = *(_OWORD *)(a1 + 56);
    v79 = *(_QWORD *)(a1 + 72);
  }
  if (*(char *)(a1 + 103) < 0)
  {
    sub_18F5C6990(&v76, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
  }
  else
  {
    v76 = *(_OWORD *)(a1 + 80);
    v77 = *(_QWORD *)(a1 + 96);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    syslog(5, "%s,%s,dumping internal buffer\n", "NOTICE", "CLLog");
    sub_18F75BF14(a1, (std::string *)&v83);
    if ((v83.st_gid & 0x80000000) == 0)
      v7 = &v83;
    else
      v7 = *(stat **)&v83.st_dev;
    v8 = fopen((const char *)v7, "a");
    v9 = v8;
    if (SHIBYTE(v83.st_gid) < 0)
    {
      operator delete(*(void **)&v83.st_dev);
      if (v9)
        goto LABEL_13;
    }
    else if (v8)
    {
LABEL_13:
      sub_18F6BD7D0(*(_QWORD *)(a1 + 216), v9);
      fclose(v9);
      v10 = 1;
      goto LABEL_16;
    }
  }
  v10 = 0;
LABEL_16:
  if (v79 >= 0)
    p_dst = (const char *)&__dst;
  else
    p_dst = (const char *)__dst;
  if (!stat(p_dst, &v83))
  {
    v12 = HIBYTE(v79);
    if (v79 >= 0)
      v13 = &__dst;
    else
      v13 = (__int128 *)__dst;
    v71[0] = MEMORY[0x1E0C809B0];
    v71[1] = 3321888768;
    v71[2] = sub_18F6B8F80;
    v71[3] = &unk_1E2990100;
    v71[4] = a1;
    if (SHIBYTE(v77) < 0)
    {
      sub_18F5C6990(&v72, (void *)v76, *((unint64_t *)&v76 + 1));
      v12 = HIBYTE(v79);
    }
    else
    {
      v72 = v76;
      v73 = v77;
    }
    if (v12 < 0)
    {
      sub_18F5C6990(&__p, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      __p = __dst;
      v75 = v79;
    }
    sub_18F6BE4DC((uint64_t)v13, (uint64_t)v71);
    if (SHIBYTE(v75) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v73) < 0)
      operator delete((void *)v72);
  }
  sub_18F6B7D94(a1);
  v14 = (char *)(a1 + 128);
  v15 = (const char *)(a1 + 128);
  if (*(char *)(a1 + 151) < 0)
    v15 = *(const char **)v14;
  if (!stat(v15, &v83))
  {
    sub_18F75BF14(a1, (std::string *)&v83);
    v17 = (const std::__fs::filesystem::path *)(a1 + 128);
    if (*(char *)(a1 + 151) < 0)
      v17 = *(const std::__fs::filesystem::path **)v14;
    if ((v83.st_gid & 0x80000000) == 0)
      v18 = &v83;
    else
      v18 = *(stat **)&v83.st_dev;
    rename(v17, (const std::__fs::filesystem::path *)v18, v16);
    if ((v83.st_gid & 0x80000000) == 0)
      v19 = &v83;
    else
      v19 = *(stat **)&v83.st_dev;
    sub_18F5F41BC((const char *)v19);
    if (*(char *)(a1 + 151) < 0)
      v14 = *(char **)v14;
    sub_18F6B77FC(a1, v14);
    if (SHIBYTE(v83.st_gid) < 0)
      operator delete(*(void **)&v83.st_dev);
    v10 = 1;
  }
  v70 = 0;
  sub_18F677BE4(&v83);
  if ((sub_18F5C7D34(*(uint64_t *)&v83.st_dev, "LogNatalimetry", &v70) & 1) != 0)
  {
    v20 = 1;
  }
  else
  {
    sub_18F677BE4(v68);
    v20 = sub_18F5C7D34((uint64_t)v68[0], "LogCalorimetry", &v70);
    v21 = (std::__shared_weak_count *)v68[1];
    if (v68[1])
    {
      v22 = (unint64_t *)((char *)v68[1] + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  st_ino = (std::__shared_weak_count *)v83.st_ino;
  if (!v83.st_ino)
    goto LABEL_60;
  v25 = (unint64_t *)(v83.st_ino + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
  {
LABEL_60:
    if ((v20 & 1) != 0)
      goto LABEL_61;
LABEL_117:
    v70 = 0;
    goto LABEL_118;
  }
  ((void (*)(std::__shared_weak_count *))st_ino->__on_zero_shared)(st_ino);
  std::__shared_weak_count::__release_weak(st_ino);
  if ((v20 & 1) == 0)
    goto LABEL_117;
LABEL_61:
  if (v70)
  {
    sub_18F688154(0, &v67);
    v27 = std::string::append(&v67, "userinfo");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    *(_QWORD *)&v83.st_uid = *((_QWORD *)&v27->__r_.__value_.__l + 2);
    *(_OWORD *)&v83.st_dev = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = std::string::append((std::string *)&v83, ".plist");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v69 = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)v68 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v83.st_gid) < 0)
      operator delete(*(void **)&v83.st_dev);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    if (v69 >= 0)
      v31 = v68;
    else
      v31 = (void **)v68[0];
    if (!stat((const char *)v31, &v83))
    {
      sub_18F75BAC0((uint64_t)&v65);
      v32 = std::string::append(&v65, "/");
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      v34 = std::string::append(&v66, "userinfo");
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      v36 = std::string::append(&v67, ".log");
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      *(_QWORD *)&v83.st_uid = *((_QWORD *)&v36->__r_.__value_.__l + 2);
      *(_OWORD *)&v83.st_dev = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (v69 >= 0)
        v38 = v68;
      else
        v38 = (void **)v68[0];
      if ((v83.st_gid & 0x80000000) == 0)
        v39 = &v83;
      else
        v39 = *(stat **)&v83.st_dev;
      sub_18F5F42F4((const char *)v38, (const char *)v39);
      if ((v83.st_gid & 0x80000000) == 0)
        v40 = &v83;
      else
        v40 = *(stat **)&v83.st_dev;
      sub_18F5F41BC((const char *)v40);
      if (SHIBYTE(v83.st_gid) < 0)
        operator delete(*(void **)&v83.st_dev);
    }
    sub_18F688154(0, &v66);
    v41 = std::string::append(&v66, "cache");
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    *(_QWORD *)&v83.st_uid = *((_QWORD *)&v41->__r_.__value_.__l + 2);
    *(_OWORD *)&v83.st_dev = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    v43 = std::string::append((std::string *)&v83, ".plist");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v83.st_gid) < 0)
      operator delete(*(void **)&v83.st_dev);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = &v67;
    else
      v45 = (std::string *)v67.__r_.__value_.__r.__words[0];
    if (!stat((const char *)v45, &v83))
    {
      sub_18F75BAC0((uint64_t)&v64);
      v46 = std::string::append(&v64, "/");
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      v48 = std::string::append(&v65, "cache");
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      v50 = std::string::append(&v66, ".log");
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      *(_QWORD *)&v83.st_uid = *((_QWORD *)&v50->__r_.__value_.__l + 2);
      *(_OWORD *)&v83.st_dev = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &v67;
      else
        v52 = (std::string *)v67.__r_.__value_.__r.__words[0];
      if ((v83.st_gid & 0x80000000) == 0)
        v53 = &v83;
      else
        v53 = *(stat **)&v83.st_dev;
      sub_18F5F42F4((const char *)v52, (const char *)v53);
      if ((v83.st_gid & 0x80000000) == 0)
        v54 = &v83;
      else
        v54 = *(stat **)&v83.st_dev;
      sub_18F5F41BC((const char *)v54);
      if (SHIBYTE(v83.st_gid) < 0)
        operator delete(*(void **)&v83.st_dev);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    if (SHIBYTE(v69) < 0)
      operator delete(v68[0]);
  }
LABEL_118:
  sub_18F75B900((uint64_t)&v66);
  v55 = std::string::append(&v66, "/");
  v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  v57 = std::string::append(&v67, "com.apple.timed");
  v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  *(_QWORD *)&v83.st_uid = *((_QWORD *)&v57->__r_.__value_.__l + 2);
  *(_OWORD *)&v83.st_dev = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  v59 = std::string::append((std::string *)&v83, ".plist");
  v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
  v69 = v59->__r_.__value_.__r.__words[2];
  *(_OWORD *)v68 = v60;
  v59->__r_.__value_.__l.__size_ = 0;
  v59->__r_.__value_.__r.__words[2] = 0;
  v59->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v83.st_gid) < 0)
    operator delete(*(void **)&v83.st_dev);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (v69 >= 0)
    v61 = v68;
  else
    v61 = (void **)v68[0];
  if (stat((const char *)v61, &v83))
    goto LABEL_143;
  sub_18F75B818((uint64_t)&v67);
  sub_18F5D5990(&v66, "com.apple.timed");
  sub_18F5D5990(&v65, ".plist.log");
  sub_18F75BC80((const void **)&v67.__r_.__value_.__l.__data_, (uint64_t)&v66, (uint64_t)&v65, v6, (std::string *)&v83);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (v69 >= 0)
    v62 = v68;
  else
    v62 = (void **)v68[0];
  if ((v83.st_gid & 0x80000000) == 0)
    v63 = &v83;
  else
    v63 = *(stat **)&v83.st_dev;
  if (sub_18F5F42F4((const char *)v62, (const char *)v63) == 1)
    syslog(5, "%s,%s,could not copy %s log\n", "WARNING", "CLLog", "com.apple.timed");
  if ((SHIBYTE(v83.st_gid) & 0x80000000) == 0)
  {
LABEL_143:
    if ((v10 & 1) != 0)
      goto LABEL_145;
    goto LABEL_144;
  }
  operator delete(*(void **)&v83.st_dev);
  if ((v10 & 1) == 0)
LABEL_144:
    syslog(5, "%s,%s,could not dump log file\n", "WARNING", "CLLog");
LABEL_145:
  if (SHIBYTE(v69) < 0)
    operator delete(v68[0]);
  if (SHIBYTE(v77) < 0)
    operator delete((void *)v76);
  if (SHIBYTE(v79) < 0)
    operator delete((void *)__dst);
  if (HIBYTE(v82))
  {
    if ((_BYTE)v82)
      pthread_mutex_unlock(v81);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 24))(v80);
  }
}

void sub_18F6B8CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  if (a30 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a17 < 0)
    operator delete(a12);
  if (a37 < 0)
    operator delete(a32);
  if (a44 < 0)
    operator delete(a39);
  if (a63 < 0)
    operator delete(a58);
  if (*(char *)(v63 - 233) < 0)
    operator delete(*(void **)(v63 - 256));
  sub_18F5CE240(v63 - 232);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6B8F80(uint64_t a1, char *a2)
{
  uint64_t v4;
  size_t v5;
  std::string *v6;
  const void *v7;
  int v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  size_t v13;
  std::string *v14;
  const void *v15;
  std::string *v16;
  std::error_code *v17;
  int v18;
  void *v19;
  const std::__fs::filesystem::path *v20;
  const std::__fs::filesystem::path *v21;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  std::string v29;
  std::string v30;
  __int128 v31;
  int64_t v32;

  v4 = *(_QWORD *)(a1 + 32);
  sub_18F5D5990(&v31, a2);
  if (*(char *)(a1 + 63) >= 0)
    v5 = *(unsigned __int8 *)(a1 + 63);
  else
    v5 = *(_QWORD *)(a1 + 48);
  v6 = &v30;
  sub_18F673A90((uint64_t)&v30, v5 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (*(char *)(a1 + 63) >= 0)
      v7 = (const void *)(a1 + 40);
    else
      v7 = *(const void **)(a1 + 40);
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 95;
  if (sub_18F75BFEC(v4, (char **)&v31, (char *)&v30))
  {
    sub_18F5D5990(&v29, a2);
    sub_18F5D5990(v27, ".log.bz2");
    if ((sub_18F75C0C0(v4, (void **)&v29.__r_.__value_.__l.__data_, (char *)v27) & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      sub_18F5D5990(v25, a2);
      sub_18F5D5990(__p, ".log");
      v8 = sub_18F75C0C0(v4, v25, (char *)__p);
      if (v24 < 0)
        operator delete(__p[0]);
      if (v26 < 0)
        operator delete(v25[0]);
    }
    if (v28 < 0)
      operator delete(v27[0]);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = 0;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32) < 0)
  {
    operator delete((void *)v31);
    if (!v8)
      return 1;
  }
  else if (!v8)
  {
    return 1;
  }
  sub_18F75BAC0((uint64_t)&v29);
  v9 = std::string::append(&v29, "/");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v30, a2);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v32 = v11->__r_.__value_.__r.__words[2];
  v31 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 87) >= 0)
    v13 = *(unsigned __int8 *)(a1 + 87);
  else
    v13 = *(_QWORD *)(a1 + 72);
  v14 = &v29;
  sub_18F673A90((uint64_t)&v29, v13 + 1);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if (v13)
  {
    if (*(char *)(a1 + 87) >= 0)
      v15 = (const void *)(a1 + 64);
    else
      v15 = *(const void **)(a1 + 64);
    memmove(v14, v15, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 47;
  v16 = std::string::append(&v29, a2);
  v30 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v18 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
  v19 = (void *)v30.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = (const std::__fs::filesystem::path *)&v30;
  else
    v20 = (const std::__fs::filesystem::path *)v30.__r_.__value_.__r.__words[0];
  if (v32 >= 0)
    v21 = (const std::__fs::filesystem::path *)&v31;
  else
    v21 = (const std::__fs::filesystem::path *)v31;
  rename(v20, v21, v17);
  sub_18F5F41BC((const char *)v21);
  if (v18 < 0)
    operator delete(v19);
  if (SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  return 1;
}

void sub_18F6B927C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 57) < 0)
    operator delete(*(void **)(v35 - 80));
  _Unwind_Resume(exception_object);
}

_BYTE *sub_18F6B934C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *result;
  __int128 v6;

  if (*(char *)(a2 + 63) < 0)
  {
    sub_18F5C6990((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  result = (_BYTE *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
    return sub_18F5C6990(result, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  v6 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)result = v6;
  return result;
}

void sub_18F6B93D0(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 63) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_18F6B93EC(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

os_log_t sub_18F6B9430()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1ECD8E740 = (uint64_t)result;
  return result;
}

void sub_18F6B9460(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194002D30);
}

FILE **sub_18F6B9484(uint64_t a1)
{
  FILE **result;

  result = *(FILE ***)(a1 + 24);
  if (result)
  {
    sub_18F6BD52C(result);
    JUMPOUT(0x194002D30);
  }
  return result;
}

uint64_t sub_18F6B94B8(uint64_t a1, uint64_t a2)
{
  if (sub_18F64FAAC(a2, (uint64_t)&unk_1E298E1F0))
    return a1 + 24;
  else
    return 0;
}

FILE **sub_18F6B94F8(FILE ***a1)
{
  FILE **result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_18F6BD52C(result);
    JUMPOUT(0x194002D30);
  }
  return result;
}

uint64_t sub_18F6B9534(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;

  v2 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  objc_msgSend_setDateFormat_(v2, v3, (uint64_t)CFSTR("yy-MM-dd"), v4);
  return objc_msgSend_stringFromDate_(v2, v5, a1, v6);
}

uint64_t sub_18F6B9578(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;

  v2 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  objc_msgSend_setDateFormat_(v2, v3, (uint64_t)CFSTR("HH-mm-ss"), v4);
  return objc_msgSend_stringFromDate_(v2, v5, a1, v6);
}

void sub_18F6B95BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  void *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  std::ios_base *v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  const char *v95;
  void *v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  char *v131;
  NSObject *v132;
  NSObject *v133;
  uint64_t v134;
  NSObject *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  __int16 v152;
  int v153;
  _BYTE __p[12];
  __int16 v155;
  uint64_t v156;
  char v157;
  _BYTE buf[14];
  uint64_t v159;
  _BYTE v160[384];
  _QWORD v161[154];

  v161[152] = *MEMORY[0x1E0C80C00];
  sub_18F5CC0B8();
  if (sub_18F672E30() && *(_BYTE *)a1)
  {
    if (a4)
      goto LABEL_4;
    sub_18F5CC0B8();
    if (sub_18F672E30() && *(_BYTE *)a1)
    {
      v28 = *(_QWORD *)(a1 + 8);
      buf[0] = 0;
      v29 = (void *)objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v25, v26, v27);
      if ((objc_msgSend_fileExistsAtPath_isDirectory_(v29, v30, v28, (uint64_t)buf) & 1) != 0)
      {
LABEL_20:
        v38 = objc_msgSend_dateWithTimeIntervalSinceNow_(MEMORY[0x1E0C99D68], v31, v32, v33, -604800.0);
        sub_18F5CC0B8();
        if (sub_18F672E30())
        {
          if (*(_BYTE *)a1)
          {
            v42 = (void *)objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v39, v40, v41);
            v45 = (void *)objc_msgSend_enumeratorAtPath_(v42, v43, *(_QWORD *)(a1 + 8), v44);
            for (i = objc_msgSend_nextObject(v45, v46, v47, v48); i; i = objc_msgSend_nextObject(v45, v61, v62, v63))
            {
              v151 = 0;
              v52 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v50, (uint64_t)CFSTR("%@/%@"), v51, *(_QWORD *)(a1 + 8), i);
              v54 = (void *)objc_msgSend_attributesOfItemAtPath_error_(v42, v53, v52, 0);
              v58 = (void *)objc_msgSend_fileCreationDate(v54, v55, v56, v57);
              if (objc_msgSend_compare_(v58, v59, v38, v60) == -1)
              {
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990810);
                v64 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
                {
                  objc_msgSend_timeIntervalSinceReferenceDate(v58, v65, v66, v67);
                  *(_DWORD *)buf = 138543618;
                  *(_QWORD *)&buf[4] = v52;
                  *(_WORD *)&buf[12] = 2050;
                  v159 = v68;
                  _os_log_impl(&dword_18F5B3000, v64, OS_LOG_TYPE_INFO, "CLTSP,Recorder,old file deleted,%{public}@,creationDate,%{public}.2lf", buf, 0x16u);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990810);
                  objc_msgSend_timeIntervalSinceReferenceDate(v58, v74, v75, v76);
                  *(_DWORD *)__p = 138543618;
                  *(_QWORD *)&__p[4] = v52;
                  v155 = 2050;
                  v156 = v77;
                  v78 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentRecorder::removeFilesOlderThanThisDate(NSDate * _Nonnull)", "CoreLocation: %s\n", v78);
                  if (v78 != buf)
                    free(v78);
                }
                v72 = (void *)objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v69, v70, v71);
                objc_msgSend_removeItemAtPath_error_(v72, v73, v52, (uint64_t)&v151);
              }
            }
          }
        }
LABEL_4:
        v8 = (void *)sub_18F6B9534(a3);
        v9 = (void *)sub_18F6B9578(a3);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990810);
        v10 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
        {
          v14 = objc_msgSend_UTF8String(v8, v11, v12, v13);
          v18 = objc_msgSend_UTF8String(v9, v15, v16, v17);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v14;
          *(_WORD *)&buf[12] = 2082;
          v159 = v18;
          _os_log_impl(&dword_18F5B3000, v10, OS_LOG_TYPE_INFO, "CLTSP,Recorder,recording data for date,%{public}s,time,%{public}s", buf, 0x16u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990810);
          v139 = objc_msgSend_UTF8String(v8, v136, v137, v138);
          v143 = objc_msgSend_UTF8String(v9, v140, v141, v142);
          *(_DWORD *)__p = 136446466;
          *(_QWORD *)&__p[4] = v139;
          v155 = 2082;
          v156 = v143;
          v144 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "NSString * _Nonnull CLTripSegmentRecorder::getFileName(NSDate * _Nonnull)", "CoreLocation: %s\n", v144);
          if (v144 != buf)
            free(v144);
        }
        if (*(_BYTE *)(a1 + 1))
          v21 = (void *)objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v19, (uint64_t)CFSTR("%@/tripSegment_%@_%@.cltsp"), v20, *(_QWORD *)(a1 + 8), v8, v9);
        else
          v21 = (void *)objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v19, (uint64_t)CFSTR("%@/tripSegment_%@.cltsp"), v20, *(_QWORD *)(a1 + 8), v8);
        v79 = (uint64_t)v21;
        v80 = (char *)objc_msgSend_UTF8String(v21, v22, v23, v24);
        sub_18F5D5990(__p, v80);
        buf[0] = 0;
        v84 = (void *)objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v81, v82, v83);
        if ((objc_msgSend_fileExistsAtPath_isDirectory_(v84, v85, v79, (uint64_t)buf) & 1) == 0)
        {
          v86 = MEMORY[0x1E0DE4FB0];
          v87 = MEMORY[0x1E0DE4FB0] + 64;
          v88 = (_QWORD *)MEMORY[0x1E0DE4F48];
          v89 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
          v90 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
          v161[0] = MEMORY[0x1E0DE4FB0] + 64;
          *(_QWORD *)buf = v89;
          *(_QWORD *)&buf[*(_QWORD *)(v89 - 24)] = v90;
          v91 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
          std::ios_base::init(v91, &buf[8]);
          v91[1].__vftable = 0;
          v91[1].__fmtflags_ = -1;
          *(_QWORD *)buf = v86 + 24;
          v161[0] = v87;
          MEMORY[0x194002C28](&buf[8]);
          if (!std::filebuf::open())
            std::ios_base::clear((std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)], *(_DWORD *)&v160[*(_QWORD *)(*(_QWORD *)buf - 24)] | 4);
          if (!std::filebuf::close())
            std::ios_base::clear((std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)], *(_DWORD *)&v160[*(_QWORD *)(*(_QWORD *)buf - 24)] | 4);
          *(_QWORD *)buf = *v88;
          *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v88[3];
          MEMORY[0x194002C34](&buf[8]);
          std::ostream::~ostream();
          MEMORY[0x194002CE8](v161);
        }
        v92 = (void *)MEMORY[0x1940032C4]();
        v96 = (void *)objc_msgSend_fileHandleForWritingAtPath_(MEMORY[0x1E0CB3608], v93, v79, v94);
        if (!v96)
          goto LABEL_58;
        v150 = 0;
        v97 = (void *)objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(MEMORY[0x1E0CB36F8], v95, a2, 1, &v150);
        if (objc_msgSend_length(v97, v98, v99, v100))
        {
          objc_msgSend_seekToEndOfFile(v96, v101, v102, v103);
          v104 = (void *)MEMORY[0x1E0CB3940];
          v108 = objc_msgSend_length(v97, v105, v106, v107);
          v111 = (void *)objc_msgSend_stringWithFormat_(v104, v109, (uint64_t)CFSTR("cltspv1,%d,%d,AA"), v110, a4, v108);
          v114 = objc_msgSend_dataUsingEncoding_(v111, v112, 4, v113);
          objc_msgSend_writeData_(v96, v115, v114, v116);
          objc_msgSend_writeData_(v96, v117, (uint64_t)v97, v118);
          objc_msgSend_closeFile(v96, v119, v120, v121);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990810);
          v122 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
          {
            v126 = objc_msgSend_length(v97, v123, v124, v125);
            *(_DWORD *)buf = 67240448;
            *(_DWORD *)&buf[4] = a4;
            *(_WORD *)&buf[8] = 1026;
            *(_DWORD *)&buf[10] = v126;
            _os_log_impl(&dword_18F5B3000, v122, OS_LOG_TYPE_INFO, "CLTSP,Recorder,writeToFile,success,type,%{public}d,length,%{public}d", buf, 0xEu);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_58;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990810);
          v130 = objc_msgSend_length(v97, v127, v128, v129);
          LODWORD(v151) = 67240448;
          HIDWORD(v151) = a4;
          v152 = 1026;
          v153 = v130;
          v131 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentRecorder::writeToFile(id _Nonnull, NSDate * _Nonnull, const CLTripSegmentRecorderLogEnum)", "CoreLocation: %s\n", v131);
        }
        else
        {
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990810);
          v132 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl(&dword_18F5B3000, v132, OS_LOG_TYPE_INFO, "CLTSP,Recorder,writeToFile,failed as date length is 0,type,%{public}d", buf, 8u);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_58;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990810);
          LODWORD(v151) = 67240192;
          HIDWORD(v151) = a4;
          v131 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentRecorder::writeToFile(id _Nonnull, NSDate * _Nonnull, const CLTripSegmentRecorderLogEnum)", "CoreLocation: %s\n", v131);
        }
        if (v131 != buf)
          free(v131);
LABEL_58:
        objc_autoreleasePoolPop(v92);
        if (v157 < 0)
          operator delete(*(void **)__p);
        return;
      }
      v34 = (void *)objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v31, v32, v33);
      v151 = 0;
      if ((objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(v34, v35, *(_QWORD *)(a1 + 8), 1, 0, &v151) & 1) != 0)
      {
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990810);
        v36 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
        {
          v37 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v37;
          _os_log_impl(&dword_18F5B3000, v36, OS_LOG_TYPE_INFO, "CLTSP,Recorder,created directory at path,%{public}@", buf, 0xCu);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990810);
          v146 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)__p = 138543362;
          *(_QWORD *)&__p[4] = v146;
          v147 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentRecorder::createDirectory()", "CoreLocation: %s\n", v147);
          if (v147 != buf)
            free(v147);
        }
        goto LABEL_20;
      }
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990810);
      v133 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
      {
        v134 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v134;
        *(_WORD *)&buf[12] = 2114;
        v159 = v151;
        _os_log_impl(&dword_18F5B3000, v133, OS_LOG_TYPE_INFO, "CLTSP,Recorder,unable to create directory at path,%{public}@, error, %{public}@", buf, 0x16u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990810);
        v148 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)__p = 138543618;
        *(_QWORD *)&__p[4] = v148;
        v155 = 2114;
        v156 = v151;
        v149 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentRecorder::createDirectory()", "CoreLocation: %s\n", v149);
        if (v149 != buf)
          free(v149);
      }
    }
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990810);
    v135 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 0;
      _os_log_impl(&dword_18F5B3000, v135, OS_LOG_TYPE_ERROR, "CLTSP,Recorder,unable to write data of type,%{pubilc}d,as directory could not be created", buf, 8u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990810);
      *(_QWORD *)__p = 67109120;
      v145 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void CLTripSegmentRecorder::writeToFile(id _Nonnull, NSDate * _Nonnull, const CLTripSegmentRecorderLogEnum)", "CoreLocation: %s\n", v145);
      if (v145 != buf)
        free(v145);
    }
  }
}

void sub_18F6BA394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18F6BA418(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *a1 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x194002C34](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x194002CE8](a1 + 52);
  return a1;
}

os_log_t sub_18F6BA470()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1EE172170 = (uint64_t)result;
  return result;
}

void sub_18F6BC590(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECD8F888);
  _Unwind_Resume(a1);
}

os_log_t sub_18F6BCEC4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

id sub_18F6BCEF0(uint64_t a1, const char *a2)
{
  id result;
  uint64_t v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v3 = *MEMORY[0x1E0CB2AD8];
  v4[0] = *MEMORY[0x1E0CB2AC0];
  result = (id)objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v4, (uint64_t)&v3, 1);
  qword_1ECD8F890 = (uint64_t)result;
  return result;
}

os_log_t sub_18F6BCF78()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1ECD8E740 = (uint64_t)result;
  return result;
}

char *sub_18F6BD47C(char *a1, const __CFString *a2, char a3)
{
  uint64_t v4;

  v4 = sub_18F66E43C((uint64_t)a1, a2, a3, 0x1E2993EC8);
  *(_QWORD *)v4 = &off_1E298E420;
  if (*(_BYTE *)(v4 + 16))
    sub_18F66ECF8(a1, 1);
  return a1;
}

void sub_18F6BD4C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18F66EC60(v1);
  _Unwind_Resume(a1);
}

void sub_18F6BD4E0(uint64_t a1)
{
  sub_18F66EC60(a1);
  JUMPOUT(0x194002D30);
}

BOOL sub_18F6BD508(uint64_t a1, const __CFString *a2, const void *a3)
{
  sub_18F67072C(a1, a2, a3);
  return sub_18F66EBBC(a1);
}

FILE **sub_18F6BD52C(FILE **a1)
{
  sub_18F6BD55C(a1);
  sub_18F66AD0C((uint64_t)(a1 + 4));
  return a1;
}

uint64_t sub_18F6BD55C(FILE **a1)
{
  _QWORD *v2;
  FILE *v3;
  FILE *v4;
  uint64_t v5;

  v2 = a1 + 4;
  (*(void (**)(FILE **))&a1[4]->_flags)(a1 + 4);
  v3 = *a1;
  if (*a1)
  {
    *a1 = 0;
    fclose(v3);
  }
  v4 = a1[1];
  if (v4)
  {
    free(v4);
    a1[1] = 0;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  sub_18F6BD78C((uint64_t)a1);
  (*(void (**)(_QWORD *))(*v2 + 24))(v2);
  return v5;
}

void sub_18F6BD5F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

FILE *sub_18F6BD608(FILE **a1)
{
  char *v2;
  FILE *v3;
  FILE *v4;

  v2 = (char *)(a1 + 4);
  (*(void (**)(FILE **))&a1[4]->_flags)(a1 + 4);
  v3 = *a1;
  if (!*a1)
  {
    v4 = (FILE *)malloc_type_malloc(*((int *)a1 + 4), 0x100004077774924uLL);
    a1[1] = v4;
    if (v4)
    {
      *a1 = funopen(a1, 0, (int (__cdecl *)(void *, const char *, int))sub_18F6BD6D8, 0, (int (__cdecl *)(void *))sub_18F6BD788);
      sub_18F6BD78C((uint64_t)a1);
    }
    v3 = *a1;
  }
  (*(void (**)(char *))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

void sub_18F6BD6C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6BD6D8(uint64_t a1, const void *a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  LODWORD(v3) = a3;
  v6 = a1 + 32;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  v7 = *(_QWORD *)(v6 - 24);
  if (v7)
  {
    v8 = *(int *)(a1 + 20);
    v9 = *(_DWORD *)(a1 + 16) - v8;
    if (v9 >= (int)v3)
      v3 = v3;
    else
      v3 = v9;
    memcpy((void *)(v7 + v8), a2, (int)v3);
    v10 = *(_DWORD *)(a1 + 16);
    v11 = (*(_DWORD *)(a1 + 20) + (int)v3) % v10;
    if (*(_DWORD *)(a1 + 24) + (int)v3 < v10)
      v10 = *(_DWORD *)(a1 + 24) + v3;
    *(_DWORD *)(a1 + 20) = v11;
    *(_DWORD *)(a1 + 24) = v10;
  }
  else
  {
    v3 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v3;
}

uint64_t sub_18F6BD78C(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  *(_QWORD *)(v1 - 12) = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
}

uint64_t sub_18F6BD7D0(uint64_t a1, FILE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v4 = a1 + 32;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  v5 = *(_QWORD *)(v4 - 24);
  if (v5)
  {
    if (*(_QWORD *)a1)
    {
      fflush(*(FILE **)a1);
      v5 = *(_QWORD *)(a1 + 8);
    }
    v6 = *(unsigned int *)(a1 + 24);
    v7 = *(int *)(a1 + 16);
    if ((int)v6 >= (int)v7)
    {
      v8 = v7 + v5;
      v9 = *(char *)(v8 - 1);
      *(_BYTE *)(v8 - 1) = 0;
      fputs((const char *)(*(_QWORD *)(a1 + 8) + *(int *)(a1 + 20)), a2);
      fputc(v9, a2);
      v5 = *(_QWORD *)(a1 + 8);
    }
    *(_BYTE *)(v5 + *(int *)(a1 + 20)) = 0;
    fputs(*(const char **)(a1 + 8), a2);
    sub_18F6BD78C(a1);
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v6;
}

void sub_18F6BD8B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_18F6BDF00(unint64_t a1)
{
  double v2;
  uint32_t denom;
  uint32_t numer;
  uint32_t v5;
  unsigned int v6;
  uint32_t v7;
  uint32_t v8;
  mach_timebase_info info;

  v2 = *(double *)&qword_1EE172C30;
  if (*(double *)&qword_1EE172C30 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      denom = info.denom;
      numer = info.numer;
      do
      {
        v5 = denom;
        denom = numer % denom;
        numer = v5;
      }
      while (denom);
    }
    else
    {
      v5 = info.numer;
    }
    v6 = 1000000000;
    v7 = info.numer / v5;
    do
    {
      v8 = v7;
      v7 = v6;
      v6 = v8 % v6;
    }
    while (v6);
    v2 = (double)(info.numer / v5 / v7) / (double)(0x3B9ACA00 / v7 * (unint64_t)(info.denom / v5));
    *(double *)&qword_1EE172C30 = v2;
  }
  return v2 * (double)a1;
}

void sub_18F6BE4DC(uint64_t a1, uint64_t a2)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(MEMORY[0x1E0CB3620]);
  v7 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v5, a1, v6);
  v9 = (void *)objc_msgSend_contentsOfDirectoryAtPath_error_(v4, v8, v7, 0);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v13 = (void *)objc_msgSend_reverseObjectEnumerator(v9, v10, v11, v12, 0);
  v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v23, (uint64_t)v27, 16);
  if (v15)
  {
    v19 = v15;
    v20 = *(_QWORD *)v24;
LABEL_3:
    v21 = 0;
    while (1)
    {
      if (*(_QWORD *)v24 != v20)
        objc_enumerationMutation(v13);
      v22 = objc_msgSend_UTF8String(*(void **)(*((_QWORD *)&v23 + 1) + 8 * v21), v16, v17, v18);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(a2 + 16))(a2, v22))
        break;
      if (v19 == ++v21)
      {
        v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v16, (uint64_t)&v23, (uint64_t)v27, 16);
        if (v19)
          goto LABEL_3;
        break;
      }
    }
  }

}

uint64_t sub_18F6BEBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = a2;
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_handleDiagnosticUpdate, a3, a4);
}

uint64_t sub_18F6BEBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = a2;
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_handleDiagnosticUpdate, a3, a4);
}

uint64_t sub_18F6BEBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = a2;
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_handleDiagnosticUpdate, a3, a4);
}

uint64_t sub_18F6BEC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = a2;
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_handleDiagnosticUpdate, a3, a4);
}

os_log_t sub_18F6BF5D8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

id sub_18F6BF604(void *a1, uint64_t a2, void *a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  double v8;
  double v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  objc_super v82;

  v82.receiver = a1;
  v82.super_class = (Class)&off_1EE189040;
  v7 = objc_msgSendSuper2(&v82, sel_init);
  if (v7)
  {
    v80 = 0.0;
    v81 = 0.0;
    v78 = 0.0;
    v79 = 0.0;
    objc_msgSend_center(a3, v4, v5, v6);
    v9 = v8;
    objc_msgSend_center(a3, v10, v11, v12);
    v14 = v13;
    objc_msgSend_radius(a3, v15, v16, v17);
    v19 = sub_18F5F553C(&v81, &v77, v9, v14, 0.0, v18);
    objc_msgSend_center(a3, v20, v21, v22, v19);
    v24 = v23;
    objc_msgSend_center(a3, v25, v26, v27);
    v29 = v28;
    objc_msgSend_radius(a3, v30, v31, v32);
    v34 = sub_18F5F553C(&v77, &v79, v24, v29, 90.0, v33);
    objc_msgSend_center(a3, v35, v36, v37, v34);
    v39 = v38;
    objc_msgSend_center(a3, v40, v41, v42);
    v44 = v43;
    objc_msgSend_radius(a3, v45, v46, v47);
    v49 = sub_18F5F553C(&v80, &v77, v39, v44, 180.0, v48);
    objc_msgSend_center(a3, v50, v51, v52, v49);
    v54 = v53;
    objc_msgSend_center(a3, v55, v56, v57);
    v59 = v58;
    objc_msgSend_radius(a3, v60, v61, v62);
    sub_18F5F553C(&v77, &v78, v54, v59, 270.0, v63);
    objc_msgSend_setSouthLat_(v7, v64, v65, v66, v80);
    objc_msgSend_setWestLng_(v7, v67, v68, v69, v78);
    objc_msgSend_setNorthLat_(v7, v70, v71, v72, v81);
    objc_msgSend_setEastLng_(v7, v73, v74, v75, v79);
  }
  return v7;
}

uint64_t sub_18F6BF804(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__notifyNoResult(*(void **)(a1 + 32), a2, a3, a4);
}

uint64_t sub_18F6BF80C(_QWORD *a1, const char *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;

  v5 = (void *)a1[4];
  v6 = a1[5];
  if (a3)
    return objc_msgSend__ticket_didReturnError_partialResultForLocation_(v5, a2, v6, a3, a1[6]);
  else
    return MEMORY[0x1E0DE7D20](v5, sel__ticket_didReturnGeoMapItems_, v6, a2);
}

void sub_18F6BF89C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  NSObject *v39;
  _QWORD v40[6];
  _QWORD block[5];

  if ((objc_msgSend_isGeocoding(*(void **)(a1 + 32), a2, a3, a4) & 1) == 0)
  {
    v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 8);
    if (v8)
      v9 = v8;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 8) = objc_msgSend_copy(*(void **)(a1 + 56), v5, v6, v7);
    v13 = *(void **)(a1 + 40);
    if (v13 && objc_msgSend_count(v13, v10, v11, v12))
    {
      v17 = (void *)objc_msgSend_sharedService(MEMORY[0x1E0D27218], v14, v15, v16);
      v21 = (void *)objc_msgSend_defaultTraits(v17, v18, v19, v20);
      v25 = v21;
      if (*(_QWORD *)(a1 + 48))
      {
        objc_msgSend_clearDeviceDisplayLanguages(v21, v22, v23, v24);
        v26 = (void *)MEMORY[0x1E0C99DC8];
        v30 = objc_msgSend_localeIdentifier(*(void **)(a1 + 48), v27, v28, v29);
        v33 = objc_msgSend_canonicalLanguageIdentifierFromString_(v26, v31, v30, v32);
        if (v33)
          objc_msgSend_addDeviceDisplayLanguage_(v25, v22, v33, v24);
      }
      v34 = (void *)objc_msgSend_sharedService(MEMORY[0x1E0D27218], v22, v23, v24);
      v36 = (void *)objc_msgSend__cl_ticketForForwardGeocodeAddressDictionary_maxResults_traits_(v34, v35, *(_QWORD *)(a1 + 40), 5, v25);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 16) = v36;
      v40[0] = MEMORY[0x1E0C809B0];
      v40[1] = 3221225472;
      v40[2] = sub_18F6BFA1C;
      v40[3] = &unk_1E29924E8;
      v40[4] = *(_QWORD *)(a1 + 32);
      v40[5] = v36;
      objc_msgSend_submitWithRefinedHandler_networkActivity_(v36, v37, (uint64_t)v40, 0);
    }
    else
    {
      v38 = *(_QWORD *)(a1 + 32);
      v39 = *(NSObject **)(*(_QWORD *)(v38 + 8) + 24);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_18F6BFA14;
      block[3] = &unk_1E2990DE0;
      block[4] = v38;
      dispatch_async(v39, block);
    }
  }
}

uint64_t sub_18F6BFA14(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__notifyNoResult(*(void **)(a1 + 32), a2, a3, a4);
}

uint64_t sub_18F6BFA1C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4)
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__ticket_didReturnError_, *(_QWORD *)(a1 + 40), a4);
  v6 = a2;
  if (!objc_msgSend_count(a2, (const char *)a2, (uint64_t)a3, 0))
  {
    if (objc_msgSend_count(a3, v7, v8, v9))
      v6 = a3;
    else
      v6 = 0;
  }
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__ticket_didReturnGeoMapItems_, *(_QWORD *)(a1 + 40), v6);
}

void sub_18F6BFBC4(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  id v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  id v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  void *v51;
  const char *v52;
  const char *v53;
  _QWORD v54[6];
  __int128 v55;
  unsigned __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[2];
  __int128 v64;
  unsigned __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD v72[2];
  _QWORD block[5];

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = 0;
  else
    v5 = *(_QWORD *)(a1 + 32);
  if ((objc_msgSend_isGeocoding(*(void **)(a1 + 40), v2, v3, v4) & 1) != 0)
    return;
  v9 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 8);
  if (v9)
    v10 = v9;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 8) = objc_msgSend_copy(*(void **)(a1 + 64), v6, v7, v8);
  v14 = *(void **)(a1 + 48);
  if (!v14 || !objc_msgSend_length(v14, v11, v12, v13))
    goto LABEL_17;
  if (!v5)
    goto LABEL_15;
  objc_msgSend_center((void *)v5, v15, v16, v17);
  if (v19 < -180.0 || v19 > 180.0 || v18 > 90.0 || v18 < -90.0)
  {
LABEL_17:
    v27 = *(_QWORD *)(a1 + 40);
    v28 = *(NSObject **)(*(_QWORD *)(v27 + 8) + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_18F6BFF08;
    block[3] = &unk_1E2990DE0;
    block[4] = v27;
    dispatch_async(v28, block);
    return;
  }
  v20 = objc_alloc(MEMORY[0x1E0D27208]);
  v5 = (uint64_t)(id)objc_msgSend__initWithCircularRegion_(v20, v21, v5, v22);
LABEL_15:
  getpid();
  v53 = "com.apple.locationd.registration";
  if (sandbox_check())
    goto LABEL_16;
  v71 = 0u;
  memset(v72, 0, 28);
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v64 = 0u;
  if (!CLClientRetrieveLocationWithDynamicAccuracyReductionAndAlteredAccessoryLocations(0, 0, 0, (uint64_t)&v64))
  {
LABEL_16:
    v26 = 0;
  }
  else
  {
    v61 = v70;
    v62 = v71;
    v63[0] = v72[0];
    *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)((char *)v72 + 12);
    v57 = v66;
    v58 = v67;
    v55 = v64;
    v56 = v65;
    v59 = v68;
    v60 = v69;
    if (COERCE_DOUBLE(v65 >> 32) < 1414.21356)
    {
      sub_18F5F40C4((double *)((char *)&v55 + 4), (double *)((unint64_t)&v55 | 0xC), 1000.0);
      *(_QWORD *)((char *)&v56 + 4) = 0x409618DAB0184066;
    }
    v29 = objc_alloc(MEMORY[0x1E0D27168]);
    v26 = (uint64_t)(id)objc_msgSend__initWithCLClientLocation_(v29, v30, (uint64_t)&v55, v31, "com.apple.locationd.registration");
  }
  v32 = (void *)objc_msgSend_sharedService(MEMORY[0x1E0D27218], v23, v24, v25, v53);
  v36 = (void *)objc_msgSend_defaultTraits(v32, v33, v34, v35);
  v40 = v36;
  if (*(_QWORD *)(a1 + 56))
  {
    objc_msgSend_clearDeviceDisplayLanguages(v36, v37, v38, v39);
    v41 = (void *)MEMORY[0x1E0C99DC8];
    v45 = objc_msgSend_localeIdentifier(*(void **)(a1 + 56), v42, v43, v44);
    v48 = objc_msgSend_canonicalLanguageIdentifierFromString_(v41, v46, v45, v47);
    if (v48)
      objc_msgSend_addDeviceDisplayLanguage_(v40, v37, v48, v39);
  }
  if (v26 | v5)
  {
    if (v26)
      objc_msgSend_setDeviceLocation_(v40, v37, v26, v39);
    if (v5)
      objc_msgSend_setMapRegion_(v40, v37, v5, v39);
  }
  v49 = (void *)objc_msgSend_sharedService(MEMORY[0x1E0D27218], v37, v38, v39);
  v51 = (void *)objc_msgSend__cl_ticketForForwardGeocodeString_maxResults_traits_(v49, v50, *(_QWORD *)(a1 + 48), 5, v40);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16) = v51;
  v54[0] = MEMORY[0x1E0C809B0];
  v54[1] = 3221225472;
  v54[2] = sub_18F6BFF10;
  v54[3] = &unk_1E29924E8;
  v54[4] = *(_QWORD *)(a1 + 40);
  v54[5] = v51;
  objc_msgSend_submitWithRefinedHandler_networkActivity_(v51, v52, (uint64_t)v54, 0);
}

uint64_t sub_18F6BFF08(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__notifyNoResult(*(void **)(a1 + 32), a2, a3, a4);
}

uint64_t sub_18F6BFF10(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4)
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__ticket_didReturnError_, *(_QWORD *)(a1 + 40), a4);
  v6 = a2;
  if (!objc_msgSend_count(a2, (const char *)a2, (uint64_t)a3, 0))
  {
    if (objc_msgSend_count(a3, v7, v8, v9))
      v6 = a3;
    else
      v6 = 0;
  }
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__ticket_didReturnGeoMapItems_, *(_QWORD *)(a1 + 40), v6);
}

uint64_t sub_18F6BFFD4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  const char *v7;
  _QWORD v9[5];

  if (*(_QWORD *)(a1 + 32))
  {
    v5 = (void *)objc_msgSend_sharedService(MEMORY[0x1E0D27218], a2, a3, a4);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_18F6C0088;
    v9[3] = &unk_1E2992560;
    v6 = *(_QWORD *)(a1 + 32);
    v9[4] = *(_QWORD *)(a1 + 40);
    return objc_msgSend_resolveMapItemLocallyFromHandle_completionHandler_(v5, v7, v6, (uint64_t)v9);
  }
  else
  {
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("kCLErrorDomain"), 8, 0);
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

void sub_18F6C0088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD block[7];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F6C00E8;
  block[3] = &unk_1E2990EA8;
  v3 = *(_QWORD *)(a1 + 32);
  block[5] = a3;
  block[6] = v3;
  block[4] = a2;
  dispatch_async(MEMORY[0x1E0C80D38], block);
}

uint64_t sub_18F6C00E8(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_18F6C0158(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = objc_msgSend_isGeocoding(*(void **)(a1 + 32), a2, a3, a4);
  if ((_DWORD)result)
  {
    objc_msgSend_cancel(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 16), v6, v7, v8);

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 16) = 0;
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__notifyCancel, v9, v10);
  }
  return result;
}

uint64_t sub_18F6C021C(uint64_t result)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint8_t buf[4];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = *(void **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 16);
  if (v1 == *(void **)(result + 40))
  {
    v2 = result;

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 16) = 0;
    if (*(_QWORD *)(v2 + 48))
    {
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990870);
      v6 = qword_1ECD8E750;
      if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
      {
        v10 = objc_msgSend_description(*(void **)(v2 + 48), v7, v8, v9);
        *(_DWORD *)buf = 138477827;
        v24 = v10;
        _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEFAULT, "#Warning Geocode error: %{private}@", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E2990870);
        objc_msgSend_description(*(void **)(v2 + 48), v19, v20, v21);
        v22 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "-[CLGeocoder _ticket:didReturnError:partialResultForLocation:]_block_invoke", "CoreLocation: %s\n", v22);
        if (v22 != (char *)buf)
          free(v22);
      }
    }
    v11 = (void *)objc_msgSend_domain(*(void **)(v2 + 48), v3, v4, v5);
    v12 = GEOErrorDomain();
    if (objc_msgSend_isEqual_(v11, v13, v12, v14)
      && objc_msgSend_code(*(void **)(v2 + 48), v15, v16, v17) == -8)
    {
      return objc_msgSend__notifyNoResult(*(void **)(v2 + 32), v15, v18, v17);
    }
    else
    {
      return objc_msgSend__notifyError_(*(void **)(v2 + 32), v15, *(_QWORD *)(v2 + 48), v17);
    }
  }
  return result;
}

BOOL sub_18F6C0744(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  uint8_t buf[1640];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if ((*(_DWORD *)(a1 + 20) & 0xFFFFFFFE) != 8)
      return (*(_DWORD *)(a1 + 24) & 0xFFFFFFFE) == 6;
  }
  else
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990890);
    v2 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_ERROR, "CLTSP,isRestrictedRoadForWiFiFix,null road", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
      v3 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL isRestrictedRoadForWiFiFix(CLMapRoadPtr)", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf)
        free(v3);
    }
  }
  return 1;
}

uint64_t sub_18F6C08F4(uint64_t a1, std::__shared_weak_count *a2, char a3)
{
  _BOOL8 v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if ((a3 & 1) != 0)
    return 1;
  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v3 = !sub_18F6C0744(a1);
  if (a2)
  {
    v7 = (unint64_t *)&a2->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a2->__on_zero_shared)(a2);
      std::__shared_weak_count::__release_weak(a2);
    }
  }
  return v3;
}

void sub_18F6C0980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6C0994(char a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t result;
  int v7;
  _BOOL4 v9;
  double v10;
  _BOOL4 v11;
  std::__shared_weak_count *v12;
  int v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;

  if (!a2)
    return 0;
  v4 = *a3;
  if (!*a3)
    return 0;
  result = *v4;
  if (!*v4)
    return result;
  v7 = *(_DWORD *)(a2 + 88);
  if (v7 != 11 && v7 != 4)
    return 1;
  v9 = *(_DWORD *)(result + 20) < 3u || (*(_DWORD *)(result + 24) - 1) < 2;
  v10 = *(double *)(a2 + 24);
  v11 = v10 < 240.0 && v9;
  v12 = (std::__shared_weak_count *)v4[1];
  v13 = v10 < 80.0 || v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = sub_18F6C08F4(result, v12, a1);
  if (v12)
  {
    v17 = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v13)
        goto LABEL_26;
      return 0;
    }
  }
  if (!v13)
    return 0;
LABEL_26:
  v19 = *((double *)*a3 + 11) < 75.0 || v9;
  return v16 & v19;
}

void sub_18F6C0AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6C0AE4(uint64_t result, _QWORD **a2, _QWORD **a3)
{
  _QWORD *v3;
  BOOL v4;
  _QWORD *v5;

  if (result)
  {
    v3 = *(_QWORD **)result;
    if (*(_QWORD *)result)
      v4 = a2 == a3;
    else
      v4 = 1;
    if (v4)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        v5 = *a2;
        if (*a2)
        {
          if (*v3 == *v5 && v3[1] == v5[1])
            break;
        }
        a2 += 2;
        if (a2 == a3)
          return 0;
      }
      return 1;
    }
  }
  return result;
}

void sub_18F6C0B3C(uint64_t **a1, unint64_t ****a2, uint64_t *a3, char **a4, uint64_t **a5)
{
  uint64_t *v5;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void **v21;
  void **i;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t ***v25;
  unint64_t ***v26;
  unint64_t **v27;
  unint64_t *v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  void **v34;
  void **v35;
  uint64_t v36;
  _QWORD v37[3];
  unint64_t *v38;
  char **v39;

  v5 = *a1;
  if (*a1)
  {
    memset(v37, 0, sizeof(v37));
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v11 = *a3;
    v13 = *v5;
    v12 = (std::__shared_weak_count *)v5[1];
    v32 = v13;
    v33 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = sub_18F624A40(v11, &v32, (uint64_t)v37, (uint64_t)&v34, 0, 200.0);
    v17 = v16;
    v18 = v33;
    if (!v33)
      goto LABEL_9;
    v19 = (unint64_t *)&v33->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if ((v17 & 1) != 0)
      {
LABEL_10:
        if (v34 != v35)
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          if (sub_18F623BF8(*a3, (uint64_t *)v34, &v29, 0))
            sub_18F6CA0BC((uint64_t *)&v34, (uint64_t)v35, (uint64_t *)v29, v30, ((char *)v30 - v29) >> 4);
          v21 = v34;
          for (i = v35; v21 != i; v21 += 2)
          {
            v23 = *v21;
            if (*v21)
            {
              v24 = (_QWORD *)**a1;
              if (*v23 != *v24 || v23[1] != v24[1])
              {
                v25 = *a2;
                v26 = a2[1];
                while (v25 != v26)
                {
                  v27 = *v25;
                  if (*v25)
                  {
                    if (*v27)
                    {
                      if (!sub_18F62A584((uint64_t)a5, *v27))
                      {
                        v28 = **v25;
                        if (*v28 == *(_QWORD *)*v21 && v28[1] == *((_QWORD *)*v21 + 1))
                        {
                          v38 = **v25;
                          *((_BYTE *)sub_18F62CB48(a5, v28, (uint64_t)&unk_18F772428, (_OWORD **)&v38) + 48) = 1;
                          sub_18F623AB8(a4, (__int128 *)v25);
                        }
                      }
                    }
                  }
                  v25 += 2;
                }
              }
            }
          }
          v39 = &v29;
          sub_18F62AB98((void ***)&v39);
        }
      }
    }
    else
    {
LABEL_9:
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
    v29 = (char *)&v34;
    sub_18F62AB98((void ***)&v29);
    v34 = (void **)v37;
    sub_18F62AB98(&v34);
  }
}

void sub_18F6C0D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  *(_QWORD *)(v17 - 88) = &a9;
  sub_18F62AB98((void ***)(v17 - 88));
  a9 = &a14;
  sub_18F62AB98((void ***)&a9);
  a14 = (void **)&a17;
  sub_18F62AB98(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6C0DD0(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  float64x2_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int32x2_t v12;
  char v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  float64x2_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  if (a1 == a2)
  {
    v13 = 0;
  }
  else
  {
    v3 = a1;
    v4 = 0;
    v19 = 0;
    v20 = 0;
    v5 = 1;
    v6 = 1;
    v7 = 1;
    v8 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
    v18 = v8;
    do
    {
      v9 = *v3;
      if (*v3)
      {
        v10 = *(double *)(v9 + 48) <= 2.22;
        v11 = *(double *)(v9 + 40) >= 179.0;
        if (!v4)
        {
          sub_18F623A40(&v19, v3);
          v8 = v18;
          v9 = *v3;
          v4 = v19;
        }
        v5 &= v10;
        v7 &= v11;
        v12 = vmovn_s64(vcgtq_f64(v8, vabdq_f64(*(float64x2_t *)(v9 + 8), *(float64x2_t *)(v4 + 8))));
        v6 &= vand_s8((int8x8_t)v12, (int8x8_t)vdup_lane_s32(v12, 1)).u8[0];
      }
      v3 += 2;
    }
    while (v3 != a2);
    v13 = v5 | v6 | v7;
    v14 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  return v13 & 1;
}

char *sub_18F6C0F18(char *result, double a2)
{
  char *v2;
  int v3;
  double v4;
  double v5;
  unsigned int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;

  v2 = result;
  v12 = a2;
  v3 = *((_DWORD *)result + 6);
  if (v3)
  {
    v4 = *((double *)result + 1);
  }
  else
  {
    *((double *)result + 1) = a2;
    *((double *)result + 2) = a2;
    v4 = a2;
  }
  v5 = fabs(a2);
  if (v5 > fabs(v4))
    *((double *)result + 1) = a2;
  if (v5 < fabs(*((double *)result + 2)))
    *((double *)result + 2) = a2;
  v6 = v3 + 1;
  *((_DWORD *)result + 6) = v6;
  v7 = *((double *)result + 4);
  v8 = a2 - v7;
  v9 = v7 + (a2 - v7) / (double)v6;
  v10 = *((double *)result + 5) + (a2 - v9) * v8;
  *((double *)result + 4) = v9;
  *((double *)result + 5) = v10;
  *((double *)result + 6) = a2 * a2 / (double)v6 + *((double *)result + 6) - *((double *)result + 6) / (double)v6;
  if (*(int *)result >= 1)
  {
    result = sub_18F6C99D4((uint64_t)(result + 56), *((char **)result + 7), (char *)&v12);
    v11 = *((_QWORD *)v2 + 8);
    if (*(int *)v2 < (unint64_t)((v11 - *((_QWORD *)v2 + 7)) >> 3))
      *((_QWORD *)v2 + 8) = v11 - 8;
  }
  return result;
}

void sub_18F6C1004(char **a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  int *v5;
  const char *v6;
  double v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  _BOOL4 v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  const char *v23;
  int *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37[2];
  _BYTE v38[22];
  __int16 v39;
  uint64_t v40;
  _OWORD *v41[2];
  _BYTE buf[22];
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v1 = a1[1];
  v37[0] = 0;
  v37[1] = 0;
  v36 = (uint64_t *)v37;
  v3 = v1 - v2;
  if (v1 != v2)
  {
    v35 = v1 - v2;
    v5 = &dword_18F5B3000;
    v6 = "CLTSP,%{public}.1lf,removeDuplicateSnapsOnSameRoad,invalid snap pointer";
    v7 = -1.0;
    while (1)
    {
      v8 = *(_QWORD *)v2;
      v9 = (std::__shared_weak_count *)*((_QWORD *)v2 + 1);
      *(_QWORD *)v38 = *(_QWORD *)v2;
      *(_QWORD *)&v38[8] = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      if (!v8)
      {
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990890);
        v19 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v7;
          _os_log_impl(v5, v19, OS_LOG_TYPE_ERROR, v6, buf, 0xCu);
        }
        if (!sub_18F5C4AE0(115, 0))
        {
LABEL_31:
          v2 += 16;
          if (!v9)
            goto LABEL_36;
LABEL_32:
          v21 = (unint64_t *)&v9->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          goto LABEL_36;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 == -1)
        {
LABEL_49:
          LODWORD(v41[0]) = 134349056;
          *(_OWORD **)((char *)v41 + 4) = *(_OWORD **)&v7;
          v30 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "void CLTripSegmentRouteBuilder::removeDuplicateSnapsOnSameRoad(std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v30);
          if (v30 != buf)
            free(v30);
          goto LABEL_31;
        }
LABEL_51:
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
        goto LABEL_49;
      }
      v7 = *(double *)(v8 + 16);
      v12 = *(_OWORD **)v8;
      if (!v12)
      {
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990890);
        v20 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v7;
          _os_log_impl(v5, v20, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,removeDuplicateSnapsOnSameRoad,invalid road in snap pointer", buf, 0xCu);
        }
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_31;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 == -1)
          goto LABEL_49;
        goto LABEL_51;
      }
      *(_OWORD *)buf = *v12;
      v13 = v37[0];
      if (!v37[0])
      {
LABEL_18:
        v41[0] = buf;
        *((_BYTE *)sub_18F62CB48(&v36, (unint64_t *)buf, (uint64_t)&unk_18F772428, v41) + 48) = 1;
        goto LABEL_31;
      }
      while (1)
      {
        v14 = v13[4];
        v15 = v13[5];
        v16 = *(_QWORD *)&buf[8] < v15;
        if (*(_QWORD *)buf != v14)
          v16 = *(_QWORD *)buf < v14;
        if (v16)
          goto LABEL_17;
        v17 = v15 < *(_QWORD *)&buf[8];
        v18 = *(_QWORD *)buf == v14 ? v17 : v14 < *(_QWORD *)buf;
        if (v18 != 1)
          break;
        ++v13;
LABEL_17:
        v13 = (_QWORD *)*v13;
        if (!v13)
          goto LABEL_18;
      }
      v23 = v6;
      v24 = v5;
      v25 = (uint64_t)(v2 + 16);
      v26 = a1[1];
      if (v2 + 16 == v26)
      {
        v28 = v2;
      }
      else
      {
        v27 = (uint64_t)v2;
        do
        {
          v28 = (char *)(v27 + 16);
          sub_18F62B3EC(v27, (__int128 *)(v27 + 16));
          v29 = v27 + 32;
          v27 += 16;
        }
        while ((char *)v29 != v26);
        v25 = (uint64_t)a1[1];
      }
      v5 = v24;
      v6 = v23;
      if ((char *)v25 != v28)
      {
        do
          v25 = sub_18F5D6004(v25 - 16);
        while ((char *)v25 != v28);
        v9 = *(std::__shared_weak_count **)&v38[8];
      }
      a1[1] = v28;
      if (v9)
        goto LABEL_32;
LABEL_36:
      if (v2 == a1[1])
      {
        v1 = *a1;
        v3 = v35;
        goto LABEL_53;
      }
    }
  }
  v7 = -1.0;
  v2 = v1;
LABEL_53:
  v31 = v3 >> 4;
  v32 = (v2 - v1) >> 4;
  if (v32 != v3 >> 4)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990890);
    v33 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v31;
      v43 = 2050;
      v44 = v32;
      _os_log_impl(&dword_18F5B3000, v33, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,removeDuplicateSnapsOnSameRoad,prevSize,%{public}lu,newSize,%{public}lu", buf, 0x20u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
      *(_DWORD *)v38 = 134349568;
      *(double *)&v38[4] = v7;
      *(_WORD *)&v38[12] = 2050;
      *(_QWORD *)&v38[14] = v31;
      v39 = 2050;
      v40 = v32;
      v34 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::removeDuplicateSnapsOnSameRoad(std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v34);
      if (v34 != buf)
        free(v34);
    }
  }
  sub_18F62C738((uint64_t)&v36, v37[0]);
}

void sub_18F6C1628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16)
{
  sub_18F62C738((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void sub_18F6C1660(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t *a4, _BYTE *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  NSObject *v13;
  char *v14;
  __int128 *v15;
  __int128 *v16;
  double v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::string::size_type **v33;
  uint64_t *v34;
  int v35;
  int v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  char *v46;
  std::string::size_type v47;
  unint64_t *v48;
  unint64_t v49;
  BOOL v50;
  BOOL v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  double v56;
  double v57;
  uint64_t *v58;
  uint64_t *v59;
  double *v60;
  double **j;
  __int128 *v62;
  __int128 *k;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  double v67;
  double v68;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t i;
  std::string::size_type **v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void ***p_p_buf;
  _QWORD *v88;
  NSObject *v89;
  uint64_t v90;
  std::string::size_type **v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  char *v97;
  uint64_t m;
  uint64_t *v99;
  uint64_t **v100;
  _BYTE *v101;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  __int128 *v107;
  __int128 *v108;
  uint64_t v109;
  uint64_t v110[2];
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t v115;
  double *v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  double *p_buf;
  std::__shared_weak_count *v121;
  uint64_t v122;
  __int128 **v123;
  __int128 v124;
  uint64_t v125;
  __int128 buf;
  uint64_t v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v9 = *a3;
  v10 = a3[1];
  while (v10 != v9)
  {
    v10 -= 24;
    *(_QWORD *)&buf = v10;
    sub_18F62AB98((void ***)&buf);
  }
  a3[1] = v9;
  v11 = *a2;
  v12 = a2[1];
  if (*a2 == v12)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990890);
    v13 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_ERROR, "CLTSP,processLocationSeries,empty GPS section", (uint8_t *)&buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
      LOWORD(p_buf) = 0;
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentRouteBuilder::processLocationSeries(std::vector<CLGeoMapLocationPtr> &, std::vector<std::vector<CLGeoMapSnapDataPtr>> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL &)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)&buf)
        free(v14);
    }
  }
  else
  {
    v104 = 0;
    v105 = 0;
    v106 = 0;
    v100 = a2;
    if (sub_18F6C0DD0(v11, v12))
    {
      v22 = sub_18F6CA2A8(&v104, a2);
      v105 = (char *)v22;
    }
    else
    {
      p_buf = 0;
      v121 = 0;
      buf = 0uLL;
      v127 = 0;
      v16 = (__int128 *)*a2;
      v15 = (__int128 *)a2[1];
      if (*a2 != (uint64_t *)v15)
      {
        while (1)
        {
          if (p_buf)
          {
            v17 = p_buf[6];
            if ((v17 >= 2.22 || *(double *)(*(_QWORD *)v16 + 48) >= 2.22)
              && (v17 < 2.22 || *(double *)(*(_QWORD *)v16 + 48) < 2.22))
            {
              v18 = v105;
              if ((unint64_t)v105 >= v106)
              {
                v19 = sub_18F6CA2A8(&v104, (_QWORD **)&buf);
              }
              else
              {
                *(_QWORD *)v105 = 0;
                *((_QWORD *)v18 + 1) = 0;
                *((_QWORD *)v18 + 2) = 0;
                sub_18F6CA41C(v18, (_QWORD *)buf, *((_QWORD **)&buf + 1), (uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 4);
                v19 = (uint64_t)(v18 + 24);
              }
              v105 = (char *)v19;
              v20 = *((_QWORD *)&buf + 1);
              v21 = buf;
              while (v20 != v21)
                v20 = sub_18F5D6004(v20 - 16);
              *((_QWORD *)&buf + 1) = v21;
            }
          }
          sub_18F623AB8((char **)&buf, v16);
          if (*(_QWORD *)v16 == *(a2[1] - 2))
            break;
          sub_18F623A40(&p_buf, (uint64_t *)v16++);
          if (v16 == v15)
            goto LABEL_36;
        }
        v23 = v105;
        if ((unint64_t)v105 >= v106)
        {
          v24 = sub_18F6CA2A8(&v104, (_QWORD **)&buf);
        }
        else
        {
          *(_QWORD *)v105 = 0;
          *((_QWORD *)v23 + 1) = 0;
          *((_QWORD *)v23 + 2) = 0;
          sub_18F6CA41C(v23, (_QWORD *)buf, *((_QWORD **)&buf + 1), (uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 4);
          v24 = (uint64_t)(v23 + 24);
        }
        v105 = (char *)v24;
      }
LABEL_36:
      *(_QWORD *)&v124 = &buf;
      sub_18F62AB98((void ***)&v124);
      v25 = v121;
      if (v121)
      {
        p_shared_owners = (unint64_t *)&v121->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v22 = (uint64_t)v105;
    }
    v28 = v104;
    if (v104 != v22)
    {
      v101 = a5;
      do
      {
        v29 = *a4;
        v30 = (std::__shared_weak_count *)a4[1];
        v103 = *a4;
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        v33 = *(std::string::size_type ***)v28;
        v34 = *(uint64_t **)(v28 + 8);
        if (*(uint64_t **)v28 == v34)
        {
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990890);
          v45 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_18F5B3000, v45, OS_LOG_TYPE_ERROR, "CLTSP,processLocationSeries,empty GPS section", (uint8_t *)&buf, 2u);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990890);
            LOWORD(p_buf) = 0;
            v46 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentRouteBuilder::processSplitLocationSeries(std::vector<CLGeoMapLocationPtr> &, std::vector<std::vector<CLGeoMapSnapDataPtr>> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL)", "CoreLocation: %s\n", v46);
            if (v46 != (char *)&buf)
              free(v46);
          }
          goto LABEL_176;
        }
        v35 = *a5;
        if ((char *)v34 - (char *)v33 == 16
          || (v36 = sub_18F6C0DD0((uint64_t *)v33, v34), v33 = *(std::string::size_type ***)v28, v36))
        {
          buf = 0uLL;
          v127 = 0;
          v107 = (__int128 *)(*v33)[4];
          p_buf = 0;
          v121 = 0;
          *(_QWORD *)&v124 = v29;
          *((_QWORD *)&v124 + 1) = v30;
          if (v30)
          {
            v37 = (unint64_t *)&v30->__shared_owners_;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
            v33 = *(std::string::size_type ***)v28;
          }
          if (v35)
            v39 = (uint64_t *)v33;
          else
            v39 = (uint64_t *)(*(_QWORD *)(v28 + 8) - 16);
          sub_18F6C24AC(a1, (uint64_t *)&v124, 1, v39, &p_buf, (double *)&v107, (uint64_t)&buf);
          v40 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
          if (*((_QWORD *)&v124 + 1))
          {
            v41 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          if ((_QWORD)buf != *((_QWORD *)&buf + 1))
          {
            sub_18F6C1004((char **)&buf);
            v43 = a3[1];
            if (v43 >= a3[2])
            {
              v44 = sub_18F6CA50C(a3, (_QWORD **)&buf);
            }
            else
            {
              sub_18F6CA4BC((uint64_t)a3, (_QWORD **)&buf);
              v44 = v43 + 24;
            }
            a3[1] = v44;
          }
          v83 = *(std::string::size_type ***)v28;
          for (i = *(_QWORD *)(v28 + 8); (std::string::size_type **)i != v83; i = sub_18F5D6004(i - 16))
            ;
          *(_QWORD *)(v28 + 8) = v83;
          v84 = v121;
          if (v121)
          {
            v85 = (unint64_t *)&v121->__shared_owners_;
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
          p_buf = (double *)&buf;
          p_p_buf = (void ***)&p_buf;
          goto LABEL_175;
        }
        v47 = **v33;
        p_buf = 0;
        v121 = 0;
        v122 = 0;
        v118 = v29;
        v119 = v30;
        if (v30)
        {
          v48 = (unint64_t *)&v30->__shared_owners_;
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        v50 = sub_18F6D4BDC((std::string::size_type ***)v28, (uint64_t)&p_buf, &v118);
        v51 = v50;
        v52 = v119;
        if (!v119)
          goto LABEL_81;
        v53 = (unint64_t *)&v119->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
          if (v51)
          {
LABEL_82:
            v116 = 0;
            v117 = 0;
            v55 = *(_DWORD *)(v103 + 152);
            if (v55 == 3)
              v56 = 20.0;
            else
              v56 = 30.0;
            if (v55 == 2)
              v57 = 8.0;
            else
              v57 = v56;
            *((_QWORD *)&buf + 1) = 0;
            v127 = 0;
            *(_QWORD *)&buf = (char *)&buf + 8;
            v115 = 0xBFF0000000000000;
            v59 = (uint64_t *)p_buf;
            v58 = (uint64_t *)v121;
            if (p_buf == (double *)v121)
            {
              v88 = 0;
            }
            else
            {
              do
              {
                v60 = (double *)*v59;
                if (*v59)
                {
                  if (!v116)
                  {
                    sub_18F623A40(&v116, v59);
                    v60 = (double *)*v59;
                  }
                  if (v35 && v60 == *(double **)p_buf
                    || v60 == (double *)v121[-1].__shared_owners_
                    || !v116
                    || ((unint64_t)((char *)v121 - (char *)p_buf) < 0x1E1 || vabdd_f64(v116[2], v60[2]) >= 5.0)
                    && sub_18F5BD064((double *)(a1 + 80), v60[3], v60[4], v116[3], v116[4], 0.0) >= v57)
                  {
                    v113 = 0;
                    v114 = 0;
                    v111 = 0;
                    v112 = 0;
                    for (j = *(double ***)v28; ; j += 2)
                    {
                      if (j == *(double ***)(v28 + 8))
                      {
                        v124 = 0uLL;
                        v125 = 0;
                        goto LABEL_105;
                      }
                      if (*j && vabdd_f64(**j, *(double *)(*v59 + 16)) < 0.001)
                        break;
                    }
                    sub_18F623A40(&v113, (uint64_t *)j);
                    v124 = 0uLL;
                    v125 = 0;
                    if (v113)
                    {
                      v115 = *(_QWORD *)(v113 + 32);
                      v110[0] = v103;
                      v110[1] = (uint64_t)v30;
                      if (v30)
                      {
                        v78 = (unint64_t *)&v30->__shared_owners_;
                        do
                          v79 = __ldxr(v78);
                        while (__stxr(v79 + 1, v78));
                      }
                      sub_18F6C24AC(a1, v110, 1, &v113, &v111, (double *)&v115, (uint64_t)&v124);
                      if (v30)
                      {
                        v80 = (unint64_t *)&v30->__shared_owners_;
                        do
                          v81 = __ldaxr(v80);
                        while (__stlxr(v81 - 1, v80));
                        if (!v81)
                        {
                          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                          std::__shared_weak_count::__release_weak(v30);
                        }
                      }
                    }
LABEL_105:
                    v107 = 0;
                    v108 = 0;
                    v109 = 0;
                    v62 = (__int128 *)*((_QWORD *)&v124 + 1);
                    for (k = (__int128 *)v124; k != v62; ++k)
                    {
                      v64 = *(_QWORD *)k;
                      if (*(_QWORD *)k)
                      {
                        v65 = *(_QWORD **)v64;
                        if (*(_QWORD *)v64)
                        {
                          v66 = *(_QWORD **)*v59;
                          if (v66)
                          {
                            if (*v65 != *v66 || v65[1] != v66[1])
                            {
                              v67 = sqrt(*(double *)(v64 + 72) * *(double *)(v64 + 72)+ *(double *)(v64 + 80) * *(double *)(v64 + 80));
                              v68 = sqrt(*(double *)(*v59 + 72) * *(double *)(*v59 + 72)+ *(double *)(*v59 + 80) * *(double *)(*v59 + 80))* 1.5;
                              if (v67 < 35.0 || v67 < v68)
                                sub_18F623AB8((char **)&v107, k);
                            }
                          }
                        }
                      }
                    }
                    sub_18F623AB8((char **)&v107, (__int128 *)v59);
                    if (v107 != v108)
                    {
                      sub_18F6C1004((char **)&v107);
                      v70 = a3[1];
                      if (v70 >= a3[2])
                      {
                        v71 = sub_18F6CA50C(a3, (_QWORD **)&v107);
                      }
                      else
                      {
                        sub_18F6CA4BC((uint64_t)a3, (_QWORD **)&v107);
                        v71 = v70 + 24;
                      }
                      a3[1] = v71;
                    }
                    sub_18F623A40(&v116, v59);
                    v123 = &v107;
                    sub_18F62AB98((void ***)&v123);
                    v107 = &v124;
                    sub_18F62AB98((void ***)&v107);
                    v72 = v112;
                    if (v112)
                    {
                      v73 = (unint64_t *)&v112->__shared_owners_;
                      do
                        v74 = __ldaxr(v73);
                      while (__stlxr(v74 - 1, v73));
                      if (!v74)
                      {
                        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                        std::__shared_weak_count::__release_weak(v72);
                      }
                    }
                    v75 = v114;
                    if (v114)
                    {
                      v76 = (unint64_t *)&v114->__shared_owners_;
                      do
                        v77 = __ldaxr(v76);
                      while (__stlxr(v77 - 1, v76));
                      if (!v77)
                      {
                        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                        std::__shared_weak_count::__release_weak(v75);
                      }
                    }
                  }
                }
                v59 += 2;
              }
              while (v59 != v58);
              v88 = (_QWORD *)*((_QWORD *)&buf + 1);
            }
            sub_18F62C738((uint64_t)&buf, v88);
            v92 = v117;
            a5 = v101;
            if (v117)
            {
              v93 = (unint64_t *)&v117->__shared_owners_;
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
            v91 = *(std::string::size_type ***)v28;
            v90 = *(_QWORD *)(v28 + 8);
            if (v90 == *(_QWORD *)v28)
              goto LABEL_174;
            do
              v90 = sub_18F5D6004(v90 - 16);
            while ((std::string::size_type **)v90 != v91);
            goto LABEL_173;
          }
        }
        else
        {
LABEL_81:
          if (v50)
            goto LABEL_82;
        }
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990890);
        a5 = v101;
        v89 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf) = 134349056;
          *(_QWORD *)((char *)&buf + 4) = v47;
          _os_log_impl(&dword_18F5B3000, v89, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,processLocationSeries,unable to snap solution", (uint8_t *)&buf, 0xCu);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990890);
          LODWORD(v124) = 134349056;
          *(_QWORD *)((char *)&v124 + 4) = v47;
          v97 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSplitLocationSeries(std::vector<CLGeoMapLocationPtr> &, std::vector<std::vector<CLGeoMapSnapDataPtr>> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL)", "CoreLocation: %s\n", v97);
          if (v97 != (char *)&buf)
            free(v97);
        }
        v91 = *(std::string::size_type ***)v28;
        v90 = *(_QWORD *)(v28 + 8);
        if (v90 == *(_QWORD *)v28)
          goto LABEL_174;
        do
          v90 = sub_18F5D6004(v90 - 16);
        while ((std::string::size_type **)v90 != v91);
LABEL_173:
        v90 = (uint64_t)v91;
LABEL_174:
        *(_QWORD *)(v28 + 8) = v90;
        *(_QWORD *)&buf = &p_buf;
        p_p_buf = (void ***)&buf;
LABEL_175:
        sub_18F62AB98(p_p_buf);
LABEL_176:
        if (v30)
        {
          v95 = (unint64_t *)&v30->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v28 += 24;
      }
      while (v28 != v22);
    }
    *a5 = 0;
    v99 = *v100;
    for (m = (uint64_t)v100[1]; (uint64_t *)m != v99; m = sub_18F5D6004(m - 16))
      ;
    v100[1] = v99;
    *(_QWORD *)&buf = &v104;
    sub_18F62C498((void ***)&buf);
  }
}

void sub_18F6C2378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void ***a45)
{
  a45 = &a37;
  sub_18F62AB98((void ***)&a45);
  sub_18F5D6004((uint64_t)&a18);
  a37 = (void **)&a20;
  sub_18F62C498(&a37);
  _Unwind_Resume(a1);
}

BOOL sub_18F6C24AC(uint64_t a1, uint64_t *a2, char a3, uint64_t *a4, _QWORD *a5, double *a6, uint64_t a7)
{
  uint64_t v7;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  NSObject *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  NSObject *v31;
  double v32;
  uint64_t v33;
  NSObject *v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  int v56;
  NSObject *v57;
  _BOOL8 v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  NSObject *v65;
  char *v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  int v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  int v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  NSObject *v115;
  double v116;
  double v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  unint64_t *v123;
  unint64_t v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  NSObject *v152;
  double v153;
  double v154;
  double v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  NSObject *v189;
  double v190;
  double v191;
  double v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t *v197;
  NSObject *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  uint64_t v214;
  double v215;
  double v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  double v227;
  double v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  double v234;
  double v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char v240;
  uint64_t v241;
  uint64_t v242[2];
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  __int128 v247;
  uint64_t v248[2];
  __int128 v249;
  uint64_t *v250[3];
  std::__shared_weak_count *v251;
  __int128 v252;
  uint64_t v253[2];
  __int128 v254;
  uint64_t *v255[3];
  std::__shared_weak_count *v256;
  char *v257;
  _QWORD **v258;
  uint64_t v259;
  uint64_t *v260;
  _QWORD *v261[2];
  __int128 v262;
  __int128 v263;
  __int128 v264;
  char *v265;
  uint64_t *v266;
  uint64_t v267;
  char *v268;
  uint64_t *v269;
  uint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  _BYTE v274[12];
  __int16 v275;
  uint64_t v276;
  __int16 v277;
  double v278;
  __int16 v279;
  double v280;
  __int16 v281;
  uint64_t v282;
  __int16 v283;
  uint64_t v284;
  __int16 v285;
  uint64_t v286;
  _BYTE buf[12];
  __int16 v288;
  double v289;
  __int16 v290;
  double v291;
  __int16 v292;
  double v293;
  __int16 v294;
  uint64_t v295;
  __int16 v296;
  uint64_t v297;
  __int16 v298;
  uint64_t v299;
  uint64_t v300;

  v300 = *MEMORY[0x1E0C80C00];
  v7 = *a4;
  if (*a4)
  {
    v15 = *(double *)v7;
    if (!*a5)
    {
      sub_18F623A40(a5, a4);
      v7 = *a4;
    }
    v271 = 0;
    v272 = 0;
    v273 = 0;
    v16 = *(double *)(v7 + 32);
    v241 = a7;
    v240 = a3;
    if (v16 >= 0.0)
    {
      v17 = *(double *)(v7 + 40);
      if (v17 > 0.0)
      {
        v18 = *(double *)(v7 + 24);
        if (v16 >= 0.0)
        {
          v19 = v18 + 10.0;
          if (v17 >= v18)
            v19 = *(double *)(v7 + 40);
          if (v19 <= 179.0)
            v17 = v19;
          else
            v17 = 135.0;
        }
        *(double *)(v7 + 40) = v17;
        v20 = *(_DWORD *)(v7 + 88);
        v21 = v20 > 9;
        v22 = (1 << v20) & 0x20A;
        if (v21 || v22 == 0)
        {
          v17 = fmax(v17, 60.0);
          *(double *)(v7 + 40) = v17;
        }
        if (!sub_18F6211AC(*a2, *(_DWORD *)(v7 + 96), &v271, 0, *(double *)v7, *(double *)(v7 + 8), *(double *)(v7 + 16), v16, v18, v17))
        {
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990890);
          v24 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134349056;
            *(double *)&buf[4] = v15;
            _os_log_impl(&dword_18F5B3000, v24, OS_LOG_TYPE_INFO, "CLTSP,%{public}.2lf,generateWiFiSnapCandidates,unable to compute candidates", buf, 0xCu);
          }
          a7 = v241;
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990890);
            *(_DWORD *)v274 = 134349056;
            *(double *)&v274[4] = v15;
            v225 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v225);
            if (v225 != buf)
              free(v225);
            a7 = v241;
          }
        }
        v7 = *a4;
        v25 = v271;
        v26 = v272;
        while (v25 != v26)
        {
          v27 = *(_QWORD *)v25;
          if (*(_QWORD *)v25)
          {
            *(_DWORD *)(v27 + 120) = *(_DWORD *)(v7 + 88);
            *(_QWORD *)(v27 + 104) = *(_QWORD *)(v7 + 48);
          }
          v25 += 16;
        }
      }
    }
    v269 = 0;
    v270 = 0;
    v268 = 0;
    v28 = (double *)(a1 + 80);
    v29 = sub_18F5BD064(v28, *(double *)(v7 + 8), *(double *)(v7 + 16), *(double *)(*a5 + 8), *(double *)(*a5 + 16), 0.0);
    if (v29 > 70.0 || v29 > 50.0 && *(double *)(*a4 + 24) <= 30.0 || (v30 = *a6, *a6 < 0.0))
    {
      v30 = sub_18F71AF58(v28, *(double *)(*a5 + 8), *(double *)(*a5 + 16), *(double *)(*a4 + 8), *(double *)(*a4 + 16));
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
      v31 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
      {
        v32 = *a6;
        *(_DWORD *)buf = 134349824;
        *(double *)&buf[4] = v15;
        v288 = 2050;
        v289 = v32;
        v290 = 2050;
        v291 = v30;
        v292 = 2050;
        v293 = v29;
        _os_log_impl(&dword_18F5B3000, v31, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.2lf,processSparseLocations,distance,lastAzimuthChangedfrom,%{public}.1lf,to,%{public}.1lf,distance,%{public}.2lf", buf, 0x2Au);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990890);
        v209 = *(_QWORD *)a6;
        *(_DWORD *)v274 = 134349824;
        *(double *)&v274[4] = v15;
        v275 = 2050;
        v276 = v209;
        v277 = 2050;
        v278 = v30;
        v279 = 2050;
        v280 = v29;
        v210 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v210);
        if (v210 != buf)
          free(v210);
      }
      sub_18F623A40(a5, a4);
      *a6 = v30;
    }
    v33 = *a4;
    if (v30 >= 0.0)
    {
      v60 = *(double *)(v33 + 32);
      v59 = *(double *)(v33 + 40);
      if (v59 <= 0.0 || v60 < 0.0)
        goto LABEL_104;
      v61 = fmod(v60 - v30, 360.0);
      if (v61 < 0.0)
        v61 = v61 + 360.0;
      if (v61 > 180.0)
        v61 = v61 + -360.0;
      if (fabs(v61) > 5.0)
      {
LABEL_104:
        v62 = *(double *)(v33 + 24);
        if (v60 >= 0.0)
        {
          v63 = v62 + 10.0;
          if (v59 >= v62)
            v63 = v59;
          if (v63 <= 179.0)
            v59 = v63;
          else
            v59 = 135.0;
        }
        v64 = fmax(v59, 60.0);
        *(double *)(v33 + 40) = v64;
        if (!sub_18F6211AC(*a2, *(_DWORD *)(v33 + 96), &v268, 0, *(double *)v33, *(double *)(v33 + 8), *(double *)(v33 + 16), *a6, v62, v64))
        {
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990890);
          v65 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134349056;
            *(double *)&buf[4] = v15;
            _os_log_impl(&dword_18F5B3000, v65, OS_LOG_TYPE_INFO, "CLTSP,%{public}.2lf,generateWiFiSnapCandidates,unable to compute candidates based on alternate course", buf, 0xCu);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990890);
            *(_DWORD *)v274 = 134349056;
            *(double *)&v274[4] = v15;
            v224 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v224);
            if (v224 != buf)
              free(v224);
            a7 = v241;
          }
        }
        v33 = *a4;
        v66 = v268;
        v67 = v269;
        while (v66 != (char *)v67)
        {
          v68 = *(_QWORD *)v66;
          if (*(_QWORD *)v66)
          {
            *(_DWORD *)(v68 + 120) = *(_DWORD *)(v33 + 88);
            *(_QWORD *)(v68 + 104) = *(_QWORD *)(v33 + 48);
          }
          v66 += 16;
        }
      }
    }
    v265 = 0;
    v266 = 0;
    v267 = 0;
    if (!sub_18F6211AC(*a2, *(_DWORD *)(v33 + 96), &v265, 0, *(double *)v33, *(double *)(v33 + 8), *(double *)(v33 + 16), -1.0, *(double *)(v33 + 24), -1.0))
    {
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
      v34 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v15;
        _os_log_impl(&dword_18F5B3000, v34, OS_LOG_TYPE_INFO, "CLTSP,%{public}.2lf,generateSnapCandidates,unable to compute candidates with just position", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990890);
        *(_DWORD *)v274 = 134349056;
        *(double *)&v274[4] = v15;
        v212 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v212);
        if (v212 != buf)
          free(v212);
      }
    }
    v35 = v265;
    v36 = v266;
    if (v265 != (char *)v266)
    {
      v37 = *a4;
      do
      {
        v38 = *(_QWORD *)v35;
        if (*(_QWORD *)v35)
        {
          *(_DWORD *)(v38 + 120) = *(_DWORD *)(v37 + 88);
          *(_QWORD *)(v38 + 104) = *(_QWORD *)(v37 + 48);
        }
        v35 += 16;
      }
      while (v35 != (char *)v36);
    }
    v264 = 0uLL;
    if (v271 != v272 && (sub_18F62728C(*a2, (uint64_t ***)&v271, (uint64_t **)&v264, -1.0) & 1) == 0)
    {
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
      v39 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v15;
        _os_log_impl(&dword_18F5B3000, v39, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.2lf,generateSnapCandidates,unable to determine snap with highest score", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990890);
        *(_DWORD *)v274 = 134349056;
        *(double *)&v274[4] = v15;
        v221 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v221);
        if (v221 != buf)
          free(v221);
        a7 = v241;
      }
    }
    v263 = 0uLL;
    if (v268 != (char *)v269 && (sub_18F62728C(*a2, (uint64_t ***)&v268, (uint64_t **)&v263, -1.0) & 1) == 0)
    {
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
      v40 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v15;
        _os_log_impl(&dword_18F5B3000, v40, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.2lf,generateSnapCandidates,unable to determine snap with highest score for alternate course", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990890);
        *(_DWORD *)v274 = 134349056;
        *(double *)&v274[4] = v15;
        v222 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v222);
        if (v222 != buf)
          free(v222);
        a7 = v241;
      }
    }
    v262 = 0uLL;
    if (v265 != (char *)v266
      && (sub_18F62728C(*a2, (uint64_t ***)&v265, (uint64_t **)&v262, *(double *)(*a4 + 32)) & 1) == 0)
    {
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
      v41 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v15;
        _os_log_impl(&dword_18F5B3000, v41, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.2lf,generateSnapCandidates,unable to determine snap with highest score for position only", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990890);
        *(_DWORD *)v274 = 134349056;
        *(double *)&v274[4] = v15;
        v223 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v223);
        if (v223 != buf)
          free(v223);
        a7 = v241;
      }
    }
    v42 = v264;
    if (*((_QWORD *)&v264 + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v263;
    if (*((_QWORD *)&v263 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v48 = v262;
    if (*((_QWORD *)&v262 + 1))
    {
      v49 = (unint64_t *)(*((_QWORD *)&v262 + 1) + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    if (!(_QWORD)v42 || (v51 = *(_QWORD *)v42) == 0)
    {
      v56 = 0;
      v55 = 0;
      if (!(_QWORD)v45)
        goto LABEL_140;
LABEL_127:
      v71 = *(_QWORD *)v45;
      if (*(_QWORD *)v45)
      {
        v72 = *(std::__shared_weak_count **)(v45 + 8);
        if (v72)
        {
          p_shared_owners = (unint64_t *)&v72->__shared_owners_;
          do
            v74 = __ldxr(p_shared_owners);
          while (__stxr(v74 + 1, p_shared_owners));
        }
        v75 = (*(_DWORD *)(v71 + 20) & 0xFFFFFFFE) == 8 || (*(_DWORD *)(v71 + 24) & 0xFFFFFFFE) == 6;
        ++v56;
        v55 += v75;
        if (v72)
        {
          v76 = (unint64_t *)&v72->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        a7 = v241;
      }
LABEL_140:
      if ((_QWORD)v48)
      {
        v78 = *(_QWORD *)v48;
        if (*(_QWORD *)v48)
        {
          v79 = *(std::__shared_weak_count **)(v48 + 8);
          if (v79)
          {
            v80 = (unint64_t *)&v79->__shared_owners_;
            do
              v81 = __ldxr(v80);
            while (__stxr(v81 + 1, v80));
          }
          v82 = (*(_DWORD *)(v78 + 20) & 0xFFFFFFFE) == 8 || (*(_DWORD *)(v78 + 24) & 0xFFFFFFFE) == 6;
          ++v56;
          v55 += v82;
          if (v79)
          {
            v83 = (unint64_t *)&v79->__shared_owners_;
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          a7 = v241;
        }
      }
      if (*((_QWORD *)&v48 + 1))
      {
        v85 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v48 + 1) + 16))(*((_QWORD *)&v48 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v48 + 1));
        }
      }
      if (*((_QWORD *)&v45 + 1))
      {
        v87 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v45 + 1) + 16))(*((_QWORD *)&v45 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v45 + 1));
        }
      }
      if (*((_QWORD *)&v42 + 1))
      {
        v89 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v42 + 1) + 16))(*((_QWORD *)&v42 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v42 + 1));
        }
      }
      v261[0] = 0;
      v261[1] = 0;
      v259 = 0;
      v260 = (uint64_t *)v261;
      v257 = 0;
      v258 = 0;
      v91 = (uint64_t *)v264;
      if ((_QWORD)v264)
      {
        if (!*(_QWORD *)v264 || (v240 & 1) != 0)
        {
          if (!*(_QWORD *)v264)
            goto LABEL_211;
        }
        else
        {
          v92 = *a4;
          v93 = a4[1];
          v255[2] = (uint64_t *)*a4;
          v256 = (std::__shared_weak_count *)v93;
          if (v93)
          {
            v94 = (unint64_t *)(v93 + 8);
            do
              v95 = __ldxr(v94);
            while (__stxr(v95 + 1, v94));
          }
          v96 = (std::__shared_weak_count *)*((_QWORD *)&v264 + 1);
          v255[0] = v91;
          v255[1] = *((uint64_t **)&v264 + 1);
          if (*((_QWORD *)&v264 + 1))
          {
            v97 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
            do
              v98 = __ldxr(v97);
            while (__stxr(v98 + 1, v97));
          }
          v99 = sub_18F6C0994(v56 == v55, v92, v255);
          if (v96)
          {
            v100 = (unint64_t *)&v96->__shared_owners_;
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          v102 = v256;
          if (!v256)
            goto LABEL_187;
          v103 = (unint64_t *)&v256->__shared_owners_;
          do
            v104 = __ldaxr(v103);
          while (__stlxr(v104 - 1, v103));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
            if ((v99 & 1) == 0)
              goto LABEL_211;
          }
          else
          {
LABEL_187:
            if (!v99)
              goto LABEL_211;
          }
        }
        sub_18F623AB8((char **)a7, &v264);
        *(_QWORD *)v274 = *(_QWORD *)v264;
        *((_BYTE *)sub_18F62CB48(&v260, *(unint64_t **)v274, (uint64_t)&unk_18F772428, (_OWORD **)v274) + 48) = 1;
        v254 = v264;
        if (*((_QWORD *)&v264 + 1))
        {
          v105 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
          do
            v106 = __ldxr(v105);
          while (__stxr(v106 + 1, v105));
        }
        v107 = (std::__shared_weak_count *)a2[1];
        v253[0] = *a2;
        v253[1] = (uint64_t)v107;
        if (v107)
        {
          v108 = (unint64_t *)&v107->__shared_owners_;
          do
            v109 = __ldxr(v108);
          while (__stxr(v109 + 1, v108));
        }
        sub_18F6C0B3C((uint64_t **)&v254, (unint64_t ****)&v271, v253, (char **)a7, &v260);
        if (v107)
        {
          v110 = (unint64_t *)&v107->__shared_owners_;
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        v112 = (std::__shared_weak_count *)*((_QWORD *)&v254 + 1);
        if (*((_QWORD *)&v254 + 1))
        {
          v113 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 8);
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        sub_18F623BF8(*a2, (uint64_t *)v264, &v257, 1);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990890);
        v115 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
        {
          v116 = *(double *)(*a4 + 8);
          v117 = *(double *)(*a4 + 16);
          v118 = *(double *)(*a4 + 32);
          v119 = *(_QWORD *)(v264 + 24);
          v120 = *(_QWORD *)(v264 + 32);
          v121 = *(_QWORD *)(v264 + 40);
          *(_DWORD *)buf = 134350593;
          *(double *)&buf[4] = v15;
          v288 = 2049;
          v289 = v116;
          v290 = 2049;
          v291 = v117;
          v292 = 2050;
          v293 = v118;
          v294 = 2049;
          v295 = v119;
          v296 = 2049;
          v297 = v120;
          v298 = 2050;
          v299 = v121;
          _os_log_impl(&dword_18F5B3000, v115, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.2lf,generateSnapCandidates,added course based snap as primary snap,rawLL,%{private}.7lf,%{private}.7lf,rawCourse,%{public}.2lf,snapLL,%{private}.7lf,%{private}.7lf,snapCourse,%{public}.2lf", buf, 0x48u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990890);
          v214 = *(_QWORD *)(*a4 + 8);
          v215 = *(double *)(*a4 + 16);
          v216 = *(double *)(*a4 + 32);
          v217 = *(_QWORD *)(v264 + 24);
          v218 = *(_QWORD *)(v264 + 32);
          v219 = *(_QWORD *)(v264 + 40);
          *(_DWORD *)v274 = 134350593;
          *(double *)&v274[4] = v15;
          v275 = 2049;
          v276 = v214;
          v277 = 2049;
          v278 = v215;
          v279 = 2050;
          v280 = v216;
          v281 = 2049;
          v282 = v217;
          v283 = 2049;
          v284 = v218;
          v285 = 2050;
          v286 = v219;
          v220 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v220);
          if (v220 != buf)
            free(v220);
          a7 = v241;
        }
      }
LABEL_211:
      if ((_QWORD)v263 && *(_QWORD *)v263 && !sub_18F62A584((uint64_t)&v260, *(unint64_t **)v263))
      {
        v122 = (uint64_t *)v263;
        v252 = v263;
        if (*((_QWORD *)&v263 + 1))
        {
          v123 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
          do
            v124 = __ldxr(v123);
          while (__stxr(v124 + 1, v123));
        }
        v125 = sub_18F6C0AE4((uint64_t)v122, (_QWORD **)v257, v258);
        v126 = v125 ^ 1;
        if ((v125 & 1) == 0 && (v240 & 1) == 0)
        {
          v127 = *a4;
          v128 = a4[1];
          v250[2] = (uint64_t *)*a4;
          v251 = (std::__shared_weak_count *)v128;
          if (v128)
          {
            v129 = (unint64_t *)(v128 + 8);
            do
              v130 = __ldxr(v129);
            while (__stxr(v130 + 1, v129));
          }
          v131 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
          v250[0] = v122;
          v250[1] = *((uint64_t **)&v263 + 1);
          if (*((_QWORD *)&v263 + 1))
          {
            v132 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
            do
              v133 = __ldxr(v132);
            while (__stxr(v133 + 1, v132));
          }
          v126 = sub_18F6C0994(v56 == v55, v127, v250);
          if (v131)
          {
            v134 = (unint64_t *)&v131->__shared_owners_;
            do
              v135 = __ldaxr(v134);
            while (__stlxr(v135 - 1, v134));
            if (!v135)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }
          v136 = v251;
          if (v251)
          {
            v137 = (unint64_t *)&v251->__shared_owners_;
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 - 1, v137));
            if (!v138)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
        }
        v139 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
        if (!*((_QWORD *)&v252 + 1))
          goto LABEL_239;
        v140 = (unint64_t *)(*((_QWORD *)&v252 + 1) + 8);
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
          if ((v126 & 1) == 0)
            goto LABEL_265;
        }
        else
        {
LABEL_239:
          if (!v126)
            goto LABEL_265;
        }
        sub_18F623AB8((char **)a7, &v263);
        *(_QWORD *)v274 = *(_QWORD *)v263;
        *((_BYTE *)sub_18F62CB48(&v260, *(unint64_t **)v274, (uint64_t)&unk_18F772428, (_OWORD **)v274) + 48) = 1;
        v249 = v263;
        if (*((_QWORD *)&v263 + 1))
        {
          v142 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
          do
            v143 = __ldxr(v142);
          while (__stxr(v143 + 1, v142));
        }
        v144 = (std::__shared_weak_count *)a2[1];
        v248[0] = *a2;
        v248[1] = (uint64_t)v144;
        if (v144)
        {
          v145 = (unint64_t *)&v144->__shared_owners_;
          do
            v146 = __ldxr(v145);
          while (__stxr(v146 + 1, v145));
        }
        sub_18F6C0B3C((uint64_t **)&v249, (unint64_t ****)&v268, v248, (char **)a7, &v260);
        if (v144)
        {
          v147 = (unint64_t *)&v144->__shared_owners_;
          do
            v148 = __ldaxr(v147);
          while (__stlxr(v148 - 1, v147));
          if (!v148)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        v149 = (std::__shared_weak_count *)*((_QWORD *)&v249 + 1);
        if (*((_QWORD *)&v249 + 1))
        {
          v150 = (unint64_t *)(*((_QWORD *)&v249 + 1) + 8);
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
        sub_18F623BF8(*a2, (uint64_t *)v263, &v257, 1);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990890);
        v152 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
        {
          v153 = *(double *)(*a4 + 8);
          v154 = *(double *)(*a4 + 16);
          v155 = *(double *)(*a4 + 32);
          v156 = *(_QWORD *)(v263 + 24);
          v157 = *(_QWORD *)(v263 + 32);
          v158 = *(_QWORD *)(v263 + 40);
          *(_DWORD *)buf = 134350593;
          *(double *)&buf[4] = v15;
          v288 = 2049;
          v289 = v153;
          v290 = 2049;
          v291 = v154;
          v292 = 2050;
          v293 = v155;
          v294 = 2049;
          v295 = v156;
          v296 = 2049;
          v297 = v157;
          v298 = 2050;
          v299 = v158;
          _os_log_impl(&dword_18F5B3000, v152, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.2lf,generateSnapCandidates,added alternate course based snap as primary snap,rawLL,%{private}.7lf,%{private}.7lf,rawCourse,%{public}.2lf,snapLL,%{private}.7lf,%{private}.7lf,snapCourse,%{public}.2lf", buf, 0x48u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990890);
          v226 = *(_QWORD *)(*a4 + 8);
          v227 = *(double *)(*a4 + 16);
          v228 = *(double *)(*a4 + 32);
          v229 = *(_QWORD *)(v263 + 24);
          v230 = *(_QWORD *)(v263 + 32);
          v231 = *(_QWORD *)(v263 + 40);
          *(_DWORD *)v274 = 134350593;
          *(double *)&v274[4] = v15;
          v275 = 2049;
          v276 = v226;
          v277 = 2049;
          v278 = v227;
          v279 = 2050;
          v280 = v228;
          v281 = 2049;
          v282 = v229;
          v283 = 2049;
          v284 = v230;
          v285 = 2050;
          v286 = v231;
          v232 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v232);
          if (v232 != buf)
            free(v232);
          a7 = v241;
        }
      }
LABEL_265:
      if (!(_QWORD)v262 || !*(_QWORD *)v262 || sub_18F62A584((uint64_t)&v260, *(unint64_t **)v262))
        goto LABEL_317;
      v159 = v263;
      v247 = v263;
      if (*((_QWORD *)&v263 + 1))
      {
        v160 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
        do
          v161 = __ldxr(v160);
        while (__stxr(v161 + 1, v160));
      }
      v162 = sub_18F6C0AE4(v159, (_QWORD **)v257, v258);
      v163 = v162 ^ 1;
      if ((v162 & 1) == 0 && (v240 & 1) == 0)
      {
        v164 = *a4;
        v165 = a4[1];
        v245 = *a4;
        v246 = (std::__shared_weak_count *)v165;
        if (v165)
        {
          v166 = (unint64_t *)(v165 + 8);
          do
            v167 = __ldxr(v166);
          while (__stxr(v167 + 1, v166));
        }
        v168 = (std::__shared_weak_count *)*((_QWORD *)&v262 + 1);
        v244 = v262;
        if (*((_QWORD *)&v262 + 1))
        {
          v169 = (unint64_t *)(*((_QWORD *)&v262 + 1) + 8);
          do
            v170 = __ldxr(v169);
          while (__stxr(v170 + 1, v169));
        }
        v163 = sub_18F6C0994(v56 == v55, v164, (uint64_t **)&v244);
        if (v168)
        {
          v171 = (unint64_t *)&v168->__shared_owners_;
          do
            v172 = __ldaxr(v171);
          while (__stlxr(v172 - 1, v171));
          if (!v172)
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v168);
          }
        }
        v173 = v246;
        if (v246)
        {
          v174 = (unint64_t *)&v246->__shared_owners_;
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }
      }
      v176 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
      if (!*((_QWORD *)&v247 + 1))
        goto LABEL_293;
      v177 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
        if ((v163 & 1) == 0)
        {
LABEL_317:
          if (*(_QWORD *)a7 == *(_QWORD *)(a7 + 8))
          {
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990890);
            v198 = qword_1EE172170;
            if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134349056;
              *(double *)&buf[4] = v15;
              _os_log_impl(&dword_18F5B3000, v198, OS_LOG_TYPE_INFO, "CLTSP,%{public}.2lf,generateSnapCandidates,unable to determine primary snap", buf, 0xCu);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990890);
              *(_DWORD *)v274 = 134349056;
              *(double *)&v274[4] = v15;
              v213 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v213);
              if (v213 != buf)
                free(v213);
            }
            v58 = 0;
          }
          else
          {
            v196 = (uint64_t *)v271;
            v197 = (uint64_t *)v272;
            if (v271 == v272)
            {
              sub_18F62C588((uint64_t)&v271, (uint64_t *)v268, v269, ((char *)v269 - v268) >> 4);
              v196 = (uint64_t *)v271;
              v197 = (uint64_t *)v272;
            }
            sub_18F6C4734(v196, v197, (*(_DWORD *)(*a2 + 152) & 0xFFFFFFFE) == 2, (char **)a7, &v260, (_QWORD ***)&v257);
            sub_18F6C4734((uint64_t *)v265, v266, (*(_DWORD *)(*a2 + 152) & 0xFFFFFFFE) == 2, (char **)a7, &v260, (_QWORD ***)&v257);
            v58 = *(_QWORD *)a7 != *(_QWORD *)(a7 + 8);
          }
          *(_QWORD *)buf = &v257;
          sub_18F62AB98((void ***)buf);
          sub_18F62C738((uint64_t)&v260, v261[0]);
          v199 = (std::__shared_weak_count *)*((_QWORD *)&v262 + 1);
          if (*((_QWORD *)&v262 + 1))
          {
            v200 = (unint64_t *)(*((_QWORD *)&v262 + 1) + 8);
            do
              v201 = __ldaxr(v200);
            while (__stlxr(v201 - 1, v200));
            if (!v201)
            {
              ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
              std::__shared_weak_count::__release_weak(v199);
            }
          }
          v202 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
          if (*((_QWORD *)&v263 + 1))
          {
            v203 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
            do
              v204 = __ldaxr(v203);
            while (__stlxr(v204 - 1, v203));
            if (!v204)
            {
              ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
              std::__shared_weak_count::__release_weak(v202);
            }
          }
          v205 = (std::__shared_weak_count *)*((_QWORD *)&v264 + 1);
          if (*((_QWORD *)&v264 + 1))
          {
            v206 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
            do
              v207 = __ldaxr(v206);
            while (__stlxr(v207 - 1, v206));
            if (!v207)
            {
              ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
              std::__shared_weak_count::__release_weak(v205);
            }
          }
          *(_QWORD *)buf = &v265;
          sub_18F62AB98((void ***)buf);
          *(_QWORD *)buf = &v268;
          sub_18F62AB98((void ***)buf);
          *(_QWORD *)buf = &v271;
          sub_18F62AB98((void ***)buf);
          return v58;
        }
      }
      else
      {
LABEL_293:
        if (!v163)
          goto LABEL_317;
      }
      sub_18F623AB8((char **)a7, &v262);
      *(_QWORD *)v274 = *(_QWORD *)v262;
      *((_BYTE *)sub_18F62CB48(&v260, *(unint64_t **)v274, (uint64_t)&unk_18F772428, (_OWORD **)v274) + 48) = 1;
      v243 = v262;
      if (*((_QWORD *)&v262 + 1))
      {
        v179 = (unint64_t *)(*((_QWORD *)&v262 + 1) + 8);
        do
          v180 = __ldxr(v179);
        while (__stxr(v180 + 1, v179));
      }
      v181 = (std::__shared_weak_count *)a2[1];
      v242[0] = *a2;
      v242[1] = (uint64_t)v181;
      if (v181)
      {
        v182 = (unint64_t *)&v181->__shared_owners_;
        do
          v183 = __ldxr(v182);
        while (__stxr(v183 + 1, v182));
      }
      sub_18F6C0B3C((uint64_t **)&v243, (unint64_t ****)&v265, v242, (char **)a7, &v260);
      if (v181)
      {
        v184 = (unint64_t *)&v181->__shared_owners_;
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }
      v186 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
      if (*((_QWORD *)&v243 + 1))
      {
        v187 = (unint64_t *)(*((_QWORD *)&v243 + 1) + 8);
        do
          v188 = __ldaxr(v187);
        while (__stlxr(v188 - 1, v187));
        if (!v188)
        {
          ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
          std::__shared_weak_count::__release_weak(v186);
        }
      }
      sub_18F623BF8(*a2, (uint64_t *)v262, &v257, 1);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
      v189 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
      {
        v190 = *(double *)(*a4 + 8);
        v191 = *(double *)(*a4 + 16);
        v192 = *(double *)(*a4 + 32);
        v193 = *(_QWORD *)(v262 + 24);
        v194 = *(_QWORD *)(v262 + 32);
        v195 = *(_QWORD *)(v262 + 40);
        *(_DWORD *)buf = 134350593;
        *(double *)&buf[4] = v15;
        v288 = 2049;
        v289 = v190;
        v290 = 2049;
        v291 = v191;
        v292 = 2050;
        v293 = v192;
        v294 = 2049;
        v295 = v193;
        v296 = 2049;
        v297 = v194;
        v298 = 2050;
        v299 = v195;
        _os_log_impl(&dword_18F5B3000, v189, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.2lf,generateSnapCandidates,added position based snap as primary snap,rawLL,%{private}.7lf,%{private}.7lf,rawCourse,%{public}.2lf,snapLL,%{private}.7lf,%{private}.7lf,snapCourse,%{public}.2lf", buf, 0x48u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990890);
        v233 = *(_QWORD *)(*a4 + 8);
        v234 = *(double *)(*a4 + 16);
        v235 = *(double *)(*a4 + 32);
        v236 = *(_QWORD *)(v262 + 24);
        v237 = *(_QWORD *)(v262 + 32);
        v238 = *(_QWORD *)(v262 + 40);
        *(_DWORD *)v274 = 134350593;
        *(double *)&v274[4] = v15;
        v275 = 2049;
        v276 = v233;
        v277 = 2049;
        v278 = v234;
        v279 = 2050;
        v280 = v235;
        v281 = 2049;
        v282 = v236;
        v283 = 2049;
        v284 = v237;
        v285 = 2050;
        v286 = v238;
        v239 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v239);
        if (v239 != buf)
          free(v239);
        a7 = v241;
      }
      goto LABEL_317;
    }
    v52 = *(std::__shared_weak_count **)(v42 + 8);
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if ((*(_DWORD *)(v51 + 20) & 0xFFFFFFFE) == 8)
    {
      v55 = 1;
      if (!v52)
        goto LABEL_126;
    }
    else
    {
      v55 = (*(_DWORD *)(v51 + 24) & 0xFFFFFFFE) == 6;
      if (!v52)
        goto LABEL_126;
    }
    v69 = (unint64_t *)&v52->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
LABEL_126:
    v56 = 1;
    a7 = v241;
    if (!(_QWORD)v45)
      goto LABEL_140;
    goto LABEL_127;
  }
  if (qword_1EE172168 != -1)
    dispatch_once(&qword_1EE172168, &unk_1E2990890);
  v57 = qword_1EE172170;
  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v57, OS_LOG_TYPE_ERROR, "CLTSP,addLocationToGPSSectionAndProcess,null location", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990890);
    *(_WORD *)v274 = 0;
    v211 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v211);
    if (v211 != buf)
      free(v211);
  }
  return 0;
}

void sub_18F6C45C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,_QWORD *a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59)
{
  STACK[0x200] = (unint64_t)&a41;
  sub_18F62AB98((void ***)&STACK[0x200]);
  sub_18F62C738((uint64_t)&a44, a45);
  sub_18F5D6004((uint64_t)&a47);
  sub_18F5D6004((uint64_t)&a49);
  sub_18F5D6004((uint64_t)&a51);
  STACK[0x200] = (unint64_t)&a53;
  sub_18F62AB98((void ***)&STACK[0x200]);
  STACK[0x200] = (unint64_t)&a56;
  sub_18F62AB98((void ***)&STACK[0x200]);
  STACK[0x200] = (unint64_t)&a59;
  sub_18F62AB98((void ***)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_18F6C4734(uint64_t *a1, uint64_t *a2, int a3, char **a4, uint64_t **a5, _QWORD ***a6)
{
  uint64_t *v10;
  double v11;
  unint64_t **v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  double *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  char v27;
  unint64_t v28;
  unsigned int v29;
  double v31;
  unint64_t *v32;

  if (a1 != a2)
  {
    v10 = a1;
    if (a3)
      v11 = 0.01;
    else
      v11 = 0.5;
    do
    {
      v12 = (unint64_t **)*v10;
      if (!*v10)
        goto LABEL_41;
      v13 = (uint64_t)*v12;
      v14 = (std::__shared_weak_count *)v12[1];
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = sub_18F6C08F4(v13, v14, 0);
      v18 = v17;
      if (!v14)
        goto LABEL_13;
      v19 = (unint64_t *)&v14->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if ((v18 & 1) == 0)
          goto LABEL_41;
      }
      else
      {
LABEL_13:
        if ((v17 & 1) == 0)
          goto LABEL_41;
      }
      v21 = *(unint64_t **)*v10;
      if (!v21 || sub_18F62A584((uint64_t)a5, v21))
        goto LABEL_41;
      v22 = (double *)*v10;
      v23 = (std::__shared_weak_count *)v10[1];
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        v26 = sub_18F6C0AE4((uint64_t)v22, *a6, a6[1]);
        v27 = v26;
        do
          v28 = __ldaxr(v24);
        while (__stlxr(v28 - 1, v24));
        if (v28)
        {
          v22 = (double *)*v10;
          if (!v26)
            goto LABEL_31;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
          v22 = (double *)*v10;
          if ((v27 & 1) == 0)
            goto LABEL_31;
        }
      }
      else if ((sub_18F6C0AE4(*v10, *a6, a6[1]) & 1) == 0)
      {
        goto LABEL_31;
      }
      if (sqrt(v22[9] * v22[9] + v22[10] * v22[10]) < 7.0 && v22[14] > 0.25)
        goto LABEL_40;
LABEL_31:
      v29 = *(_DWORD *)(*(_QWORD *)v22 + 20);
      if (v29 < 3 || (*(_DWORD *)(*(_QWORD *)v22 + 24) - 1) <= 1)
        goto LABEL_40;
      if (v29 == 3 || v29 == 5)
      {
        v31 = v22[14];
        if (v31 > 0.05)
          goto LABEL_40;
      }
      else
      {
        v31 = v22[14];
      }
      if (v31 > v11)
      {
LABEL_40:
        sub_18F623AB8(a4, (__int128 *)v10);
        v32 = *(unint64_t **)*v10;
        *((_BYTE *)sub_18F62CB48(a5, v32, (uint64_t)&unk_18F772428, (_OWORD **)&v32) + 48) = 1;
      }
LABEL_41:
      v10 += 2;
    }
    while (v10 != a2);
  }
}

void sub_18F6C4994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18F6C49A8(uint64_t a1, const std::string *a2, uint64_t a3, int a4, void *a5, uint64_t *a6)
{
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  const char *v36;
  uint64_t v37;
  double v38;
  double v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  double v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  NSObject *v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  const char *v189;
  uint64_t v190;
  double v191;
  double v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  const char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  NSObject *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  const char *v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  const char *v227;
  uint64_t v228;
  const char *v229;
  uint64_t v230;
  uint64_t v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  const char *v235;
  uint64_t v236;
  unint64_t v237;
  void *v238;
  void *v239;
  const char *v240;
  uint64_t v241;
  uint64_t v242;
  const char *v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  const char *v251;
  uint64_t v252;
  double v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  double v258;
  const char *v259;
  uint64_t v260;
  uint64_t v261;
  _BOOL4 v263;
  _BOOL4 v264;
  uint64_t v265;
  int v266;
  unsigned int v267;
  int v268;
  int v269;
  int v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t *v274;
  unint64_t v275;
  NSObject *v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  _BOOL4 v281;
  _BOOL4 v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  NSObject *v287;
  char *v288;
  std::__shared_weak_count *v289;
  unint64_t *p_shared_owners;
  unint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  NSObject *v294;
  uint64_t v295;
  BOOL v296;
  NSObject *v297;
  uint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  char *v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  double v318;
  double v319;
  _BOOL4 v320;
  void *v321;
  uint64_t *v323;
  uint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  char *v328;
  uint64_t i;
  unint64_t *v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  double v335;
  double v336;
  _BOOL4 v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v341;
  uint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t j;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  const char *v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  const char *v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  char *v361;
  void **v363;
  uint64_t v366[2];
  uint64_t v367[2];
  uint64_t v368[2];
  uint64_t v369[2];
  __int128 v370;
  uint64_t v371;
  BOOL v372;
  _QWORD v373[2];
  unint64_t v374;
  double *v375;
  std::__shared_weak_count *v376;
  double v377;
  double v378;
  double v379;
  double v380;
  int v381;
  uint64_t v382;
  __int16 v383;
  int64_t v384;
  char *v385[3];
  uint64_t v386;
  __int16 v387;
  uint64_t v388;
  __int16 v389;
  uint64_t v390;
  __int16 v391;
  uint64_t v392;
  _BYTE buf[22];
  __int16 v394;
  uint64_t v395;
  __int16 v396;
  uint64_t v397;
  __int16 v398;
  uint64_t v399;
  __int16 v400;
  uint64_t v401;
  uint64_t v402;

  v8 = a3 == 1;
  v402 = *MEMORY[0x1E0C80C00];
  sub_18F6C640C(a1, a2);
  ++*(_DWORD *)(a1 + 76);
  *(_BYTE *)(a1 + 128) = sub_18F6C66F4((uint64_t)CFSTR("UsePreferredSnapCandidatesInRouteBuilder"), (const char *)*(unsigned __int8 *)(a1 + 128), v9, v10);
  v14 = (void *)objc_msgSend_array(MEMORY[0x1E0C99DE8], v11, v12, v13);
  if (objc_msgSend_count(a5, v15, v16, v17))
  {
    v20 = 0;
    v21 = dbl_18F775560[v8];
    v22 = 1;
    while (1)
    {
      v23 = (void *)objc_msgSend_objectAtIndexedSubscript_(a5, v18, v20, v19);
      if ((objc_msgSend_isWiFiLocationType(v23, v24, v25, v26) & 1) != 0
        || objc_msgSend_isLoiLocationType(v23, v27, v28, v29))
      {
        v30 = (void *)objc_msgSend_timestamp(v23, v27, v28, v29);
        objc_msgSend_timeIntervalSinceReferenceDate(v30, v31, v32, v33);
        v35 = v34;
        if ((objc_msgSend_containsObject_(v14, v36, (uint64_t)v23, v37) & 1) == 0)
        {
          if (v20)
          {
            if (objc_msgSend_count(a5, v27, v28, v29) - 1 != v20)
            {
              objc_msgSend_horizontalAccuracy(v23, v27, v28, v29);
              if (v163 > 100.0
                || (objc_msgSend_speedAccuracy(v23, v160, v161, v162), v191 > 0.0)
                && (objc_msgSend_speed(v23, v27, v28, v29), v192 < 1.0))
              {
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990890);
                v164 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                {
                  objc_msgSend_latitude(v23, v165, v166, v167);
                  v169 = v168;
                  objc_msgSend_longitude(v23, v170, v171, v172);
                  v174 = v173;
                  objc_msgSend_horizontalAccuracy(v23, v175, v176, v177);
                  v179 = v178;
                  objc_msgSend_speed(v23, v180, v181, v182);
                  v184 = v183;
                  objc_msgSend_course(v23, v185, v186, v187);
                  *(_DWORD *)buf = 134350337;
                  *(_QWORD *)&buf[4] = v35;
                  *(_WORD *)&buf[12] = 2049;
                  *(_QWORD *)&buf[14] = v169;
                  v394 = 2049;
                  v395 = v174;
                  v396 = 2050;
                  v397 = v179;
                  v398 = 2050;
                  v399 = v184;
                  v400 = 2050;
                  v401 = v188;
                  _os_log_impl(&dword_18F5B3000, v164, OS_LOG_TYPE_DEBUG, "CLTSP,filterWiFiFixes,huncCheck removed,time,%{public}.2lf,LL,%{private}.7lf,%{private}.7lf,hunc,%{public}.3lf,speed,%{public}.3lf,course,%{public}.3lf", buf, 0x3Eu);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990890);
                  objc_msgSend_latitude(v23, v193, v194, v195);
                  v197 = v196;
                  objc_msgSend_longitude(v23, v198, v199, v200);
                  v202 = v201;
                  objc_msgSend_horizontalAccuracy(v23, v203, v204, v205);
                  v207 = v206;
                  objc_msgSend_speed(v23, v208, v209, v210);
                  v212 = v211;
                  objc_msgSend_course(v23, v213, v214, v215);
                  LODWORD(v385[0]) = 134350337;
                  *(char **)((char *)v385 + 4) = v35;
                  WORD2(v385[1]) = 2049;
                  *(char **)((char *)&v385[1] + 6) = v197;
                  HIWORD(v385[2]) = 2049;
                  v386 = v202;
                  v387 = 2050;
                  v388 = v207;
                  v389 = 2050;
                  v390 = v212;
                  v391 = 2050;
                  v392 = v216;
                  v217 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "static void CLTripSegmentUtilities::filterWiFiFixes(const CLTripSegmentModeOfTransport, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, double, double)", "CoreLocation: %s\n", v217);
                  if (v217 != buf)
                    free(v217);
                }
                objc_msgSend_addObject_(v14, v189, (uint64_t)v23, v190);
                goto LABEL_51;
              }
            }
          }
          objc_msgSend_latitude(v23, v27, v28, v29);
          v39 = v38;
          objc_msgSend_longitude(v23, v40, v41, v42);
          sub_18F62B450(&v377, v39, v43, 50.0);
          if (objc_msgSend_count(a5, v44, v45, v46) - 1 > v20 + 1)
            break;
        }
      }
LABEL_51:
      ++v20;
      ++v22;
      if (objc_msgSend_count(a5, v27, v28, v29) <= v20)
        goto LABEL_60;
    }
    v47 = v22;
    while (1)
    {
      v48 = (void *)objc_msgSend_objectAtIndexedSubscript_(a5, v27, v47, v29);
      if ((objc_msgSend_isWiFiLocationType(v48, v49, v50, v51) & 1) == 0
        && !objc_msgSend_isLoiLocationType(v48, v52, v53, v54))
      {
        goto LABEL_33;
      }
      v57 = (void *)objc_msgSend_timestamp(v48, v52, v53, v54);
      objc_msgSend_timeIntervalSinceReferenceDate(v57, v58, v59, v60);
      v62 = v61;
      v66 = (void *)objc_msgSend_timestamp(v48, v63, v64, v65);
      v70 = objc_msgSend_timestamp(v23, v67, v68, v69);
      objc_msgSend_timeIntervalSinceDate_(v66, v71, v70, v72);
      if (v73 > v21)
        goto LABEL_51;
      objc_msgSend_horizontalAccuracy(v48, v27, v28, v29);
      if (v77 > 100.0 && (objc_msgSend_containsObject_(v14, v74, (uint64_t)v48, v76) & 1) == 0)
        break;
      objc_msgSend_latitude(v48, v74, v75, v76);
      v79 = v78;
      objc_msgSend_longitude(v48, v80, v81, v82);
      v56 = v377;
      if (v377 > v79)
        goto LABEL_33;
      v56 = v379;
      if (v379 < v79)
        goto LABEL_33;
      v56 = v378;
      if (v380 <= v378)
      {
        if (v380 >= v378 || v380 <= v55 && v378 >= v55)
          goto LABEL_33;
      }
      else if (v380 < v55 || v378 > v55)
      {
        goto LABEL_33;
      }
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
      v83 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
      {
        objc_msgSend_latitude(v48, v84, v85, v86);
        v88 = v87;
        objc_msgSend_longitude(v48, v89, v90, v91);
        v93 = v92;
        objc_msgSend_horizontalAccuracy(v48, v94, v95, v96);
        v98 = v97;
        objc_msgSend_speed(v48, v99, v100, v101);
        v103 = v102;
        objc_msgSend_course(v48, v104, v105, v106);
        *(_DWORD *)buf = 134350337;
        *(_QWORD *)&buf[4] = v62;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v88;
        v394 = 2049;
        v395 = v93;
        v396 = 2050;
        v397 = v98;
        v398 = 2050;
        v399 = v103;
        v400 = 2050;
        v401 = v107;
        _os_log_impl(&dword_18F5B3000, v83, OS_LOG_TYPE_DEBUG, "CLTSP,filterWiFiFixes,boundingBoxCheck removed,time,%{public}.2lf,LL,%{private}.7lf,%{private}.7lf,hunc,%{public}.3lf,speed,%{public}.3lf,course,%{public}.3lf", buf, 0x3Eu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 == -1)
        {
LABEL_40:
          objc_msgSend_latitude(v48, v110, v111, v112);
          v139 = v138;
          objc_msgSend_longitude(v48, v140, v141, v142);
          v144 = v143;
          objc_msgSend_horizontalAccuracy(v48, v145, v146, v147);
          v149 = v148;
          objc_msgSend_speed(v48, v150, v151, v152);
          v154 = v153;
          objc_msgSend_course(v48, v155, v156, v157);
          LODWORD(v385[0]) = 134350337;
          *(char **)((char *)v385 + 4) = v62;
          WORD2(v385[1]) = 2049;
          *(char **)((char *)&v385[1] + 6) = v139;
          HIWORD(v385[2]) = 2049;
          v386 = v144;
          v387 = 2050;
          v388 = v149;
          v389 = 2050;
          v390 = v154;
          v391 = 2050;
          v392 = v158;
          v159 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "static void CLTripSegmentUtilities::filterWiFiFixes(const CLTripSegmentModeOfTransport, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, double, double)", "CoreLocation: %s\n", v159);
          if (v159 != buf)
            free(v159);
          goto LABEL_32;
        }
LABEL_42:
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
        goto LABEL_40;
      }
LABEL_32:
      objc_msgSend_addObject_(v14, v108, (uint64_t)v48, v109);
LABEL_33:
      if (objc_msgSend_count(a5, v52, v53, v54, v55, v56) - 1 <= (unint64_t)++v47)
        goto LABEL_51;
    }
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990890);
    v113 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend_latitude(v48, v114, v115, v116);
      v118 = v117;
      objc_msgSend_longitude(v48, v119, v120, v121);
      v123 = v122;
      objc_msgSend_horizontalAccuracy(v48, v124, v125, v126);
      v128 = v127;
      objc_msgSend_speed(v48, v129, v130, v131);
      v133 = v132;
      objc_msgSend_course(v48, v134, v135, v136);
      *(_DWORD *)buf = 134350337;
      *(_QWORD *)&buf[4] = v62;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v118;
      v394 = 2049;
      v395 = v123;
      v396 = 2050;
      v397 = v128;
      v398 = 2050;
      v399 = v133;
      v400 = 2050;
      v401 = v137;
      _os_log_impl(&dword_18F5B3000, v113, OS_LOG_TYPE_DEBUG, "CLTSP,filterWiFiFixes,huncCheck removed,time,%{public}.2lf,LL,%{private}.7lf,%{private}.7lf,hunc,%{public}.3lf,speed,%{public}.3lf,course,%{public}.3lf", buf, 0x3Eu);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_32;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 == -1)
      goto LABEL_40;
    goto LABEL_42;
  }
LABEL_60:
  if (qword_1EE172168 != -1)
    dispatch_once(&qword_1EE172168, &unk_1E2990890);
  v218 = qword_1EE172170;
  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
  {
    v222 = objc_msgSend_count(a5, v219, v220, v221);
    v226 = objc_msgSend_count(v14, v223, v224, v225);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v222;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v226;
    _os_log_impl(&dword_18F5B3000, v218, OS_LOG_TYPE_INFO, "CLTSP,filterWiFiFixes,locationCountIn,%{public}d,locationsRemoved,%{public}d", buf, 0xEu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990890);
    v356 = objc_msgSend_count(a5, v353, v354, v355);
    v360 = objc_msgSend_count(v14, v357, v358, v359);
    LODWORD(v385[0]) = 67240448;
    HIDWORD(v385[0]) = v356;
    LOWORD(v385[1]) = 1026;
    *(_DWORD *)((char *)&v385[1] + 2) = v360;
    v361 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "static void CLTripSegmentUtilities::filterWiFiFixes(const CLTripSegmentModeOfTransport, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, double, double)", "CoreLocation: %s\n", v361);
    if (v361 != buf)
      free(v361);
  }
  objc_msgSend_removeObjectsInArray_(a5, v227, (uint64_t)v14, v228);
  objc_msgSend_removeAllObjects(v14, v229, v230, v231);
  if (objc_msgSend_count(a5, v232, v233, v234))
  {
    v237 = 0;
    v238 = 0;
    do
    {
      v239 = (void *)objc_msgSend_objectAtIndexedSubscript_(a5, v235, v237, v236);
      if (objc_msgSend_isWiFiLocationType(v239, v240, v241, v242))
      {
        if (v238
          && (v246 = (void *)objc_msgSend_timestamp(v239, v243, v244, v245),
              v250 = objc_msgSend_timestamp(v238, v247, v248, v249),
              objc_msgSend_timeIntervalSinceDate_(v246, v251, v250, v252),
              v253 < 10.0))
        {
          objc_msgSend_addObject_(v14, v243, (uint64_t)v239, v245);
        }
        else
        {
          v238 = v239;
        }
      }
      ++v237;
    }
    while (objc_msgSend_count(a5, v243, v244, v245) > v237);
  }
  objc_msgSend_removeObjectsInArray_(a5, v235, (uint64_t)v14, v236);
  v257 = 0;
  v363 = (void **)(a1 + 24);
  v375 = 0;
  v376 = 0;
  v373[1] = 0;
  v374 = 0xBFF0000000000000;
  v373[0] = 0xBFF0000000000000;
  memset(v385, 0, sizeof(v385));
  if (a3 == 1)
    v258 = 10.0;
  else
    v258 = 30.0;
  v372 = 0;
  while (objc_msgSend_count(a5, v254, v255, v256) > v257)
  {
    v263 = *(_DWORD *)(a1 + 76) == 1 && v257 == 0;
    if (a4)
      v264 = objc_msgSend_count(a5, v259, v260, v261) - 1 == v257;
    else
      v264 = 0;
    v371 = 0;
    v371 = objc_msgSend_objectAtIndexedSubscript_(a5, v259, v257, v261);
    if (v371)
    {
      sub_18F67F298((void **)&v371, &v370);
      v266 = sub_18F6C6A64((uint64_t)v373, a5, v257, v265, v258, 45.0, 25.0);
      v267 = *(_DWORD *)(v370 + 88);
      if (v267 <= 0xD)
      {
        v268 = 1 << v267;
        if ((v268 & 0x20A) != 0)
        {
          if (*(double *)(v370 + 24) <= 100.0)
          {
            if (v375
              && (vabdd_f64(*v375, *(double *)v370) >= 3.0 || objc_msgSend_count(a5, v254, v255, v256) - 1 == v257)
              && v385[0] != v385[1])
            {
              v377 = 0.0;
              v378 = 0.0;
              v379 = 0.0;
              v289 = (std::__shared_weak_count *)a6[1];
              v369[0] = *a6;
              v369[1] = (uint64_t)v289;
              if (v289)
              {
                p_shared_owners = (unint64_t *)&v289->__shared_owners_;
                do
                  v291 = __ldxr(p_shared_owners);
                while (__stxr(v291 + 1, p_shared_owners));
              }
              sub_18F6C1660(a1, (uint64_t **)v385, (uint64_t *)&v377, v369, &v372);
              if (v289)
              {
                v292 = (unint64_t *)&v289->__shared_owners_;
                do
                  v293 = __ldaxr(v292);
                while (__stlxr(v293 - 1, v292));
                if (!v293)
                {
                  ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                  std::__shared_weak_count::__release_weak(v289);
                }
              }
              if (*(_QWORD *)&v377 != *(_QWORD *)&v378)
              {
                sub_18F6CA830(v363, *(_QWORD **)(a1 + 32), *(uint64_t ***)&v377, *(_QWORD ***)&v378, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v378 - *(_QWORD *)&v377) >> 3));
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990890);
                v294 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                {
                  v295 = *(_QWORD *)v370;
                  *(_DWORD *)buf = 134349312;
                  *(_QWORD *)&buf[4] = v295;
                  *(_WORD *)&buf[12] = 2050;
                  *(_QWORD *)&buf[14] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v378 - *(_QWORD *)&v377) >> 3);
                  _os_log_impl(&dword_18F5B3000, v294, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,processLocationSeries,numCandidates,%{public}lu", buf, 0x16u);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990890);
                  v306 = *(_QWORD *)v370;
                  v381 = 134349312;
                  v382 = v306;
                  v383 = 2050;
                  v384 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v378 - *(_QWORD *)&v377) >> 3);
                  v307 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::generateSnapCandidates(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v307);
                  if (v307 != buf)
                    free(v307);
                }
              }
              *(_QWORD *)buf = &v377;
              sub_18F62C498((void ***)buf);
            }
            v296 = v372;
            if (!v372 && v263)
              v296 = v263;
            v372 = v296;
            sub_18F623AB8(v385, &v370);
            sub_18F623A40(&v375, (uint64_t *)&v370);
            if (*(double *)(v370 + 40) > 0.0 && *(double *)(v370 + 32) >= 0.0)
              v374 = *(_QWORD *)(v370 + 32);
          }
        }
        else if ((v268 & 0x2810) != 0)
        {
          v269 = v266;
          if (!v375)
            sub_18F623A40(&v375, (uint64_t *)&v370);
          v270 = v263 || v264;
          if ((v269 | v270) == 1)
          {
            if (v385[0] != v385[1])
            {
              v377 = 0.0;
              v378 = 0.0;
              v379 = 0.0;
              v271 = (std::__shared_weak_count *)a6[1];
              v368[0] = *a6;
              v368[1] = (uint64_t)v271;
              if (v271)
              {
                v272 = (unint64_t *)&v271->__shared_owners_;
                do
                  v273 = __ldxr(v272);
                while (__stxr(v273 + 1, v272));
              }
              sub_18F6C1660(a1, (uint64_t **)v385, (uint64_t *)&v377, v368, &v372);
              if (v271)
              {
                v274 = (unint64_t *)&v271->__shared_owners_;
                do
                  v275 = __ldaxr(v274);
                while (__stlxr(v275 - 1, v274));
                if (!v275)
                {
                  ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                  std::__shared_weak_count::__release_weak(v271);
                }
              }
              if (*(_QWORD *)&v377 != *(_QWORD *)&v378)
              {
                sub_18F6CA830(v363, *(_QWORD **)(a1 + 32), *(uint64_t ***)&v377, *(_QWORD ***)&v378, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v378 - *(_QWORD *)&v377) >> 3));
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990890);
                v276 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                {
                  v277 = *(_QWORD *)v370;
                  *(_DWORD *)buf = 134349312;
                  *(_QWORD *)&buf[4] = v277;
                  *(_WORD *)&buf[12] = 2050;
                  *(_QWORD *)&buf[14] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v378 - *(_QWORD *)&v377) >> 3);
                  _os_log_impl(&dword_18F5B3000, v276, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,processLocationSeries,numCandidates,%{public}lu", buf, 0x16u);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990890);
                  v302 = *(_QWORD *)v370;
                  v381 = 134349312;
                  v382 = v302;
                  v383 = 2050;
                  v384 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v378 - *(_QWORD *)&v377) >> 3);
                  v303 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::generateSnapCandidates(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v303);
                  if (v303 != buf)
                    free(v303);
                }
              }
              *(_QWORD *)buf = &v377;
              sub_18F62C498((void ***)buf);
            }
            v377 = 0.0;
            v378 = 0.0;
            v379 = 0.0;
            v278 = (std::__shared_weak_count *)a6[1];
            v367[0] = *a6;
            v367[1] = (uint64_t)v278;
            if (v278)
            {
              v279 = (unint64_t *)&v278->__shared_owners_;
              do
                v280 = __ldxr(v279);
              while (__stxr(v280 + 1, v279));
            }
            v281 = sub_18F6C24AC(a1, v367, v270, (uint64_t *)&v370, &v375, (double *)&v374, (uint64_t)&v377);
            v282 = v281;
            if (!v278)
              goto LABEL_117;
            v283 = (unint64_t *)&v278->__shared_owners_;
            do
              v284 = __ldaxr(v283);
            while (__stlxr(v284 - 1, v283));
            if (!v284)
            {
              ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
              std::__shared_weak_count::__release_weak(v278);
              if (v282)
                goto LABEL_118;
            }
            else
            {
LABEL_117:
              if (v281)
              {
LABEL_118:
                if (*(_QWORD *)&v377 != *(_QWORD *)&v378)
                {
                  sub_18F6C1004((char **)&v377);
                  v285 = *(_QWORD *)(a1 + 32);
                  if (v285 >= *(_QWORD *)(a1 + 40))
                  {
                    v286 = sub_18F6CA50C((uint64_t *)v363, (_QWORD **)&v377);
                  }
                  else
                  {
                    sub_18F6CA4BC((uint64_t)v363, (_QWORD **)&v377);
                    v286 = v285 + 24;
                  }
                  *(_QWORD *)(a1 + 32) = v286;
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990890);
                  v297 = qword_1EE172170;
                  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                  {
                    v298 = *(_QWORD *)v370;
                    *(_DWORD *)buf = 134349312;
                    *(_QWORD *)&buf[4] = v298;
                    *(_WORD *)&buf[12] = 2050;
                    *(_QWORD *)&buf[14] = (uint64_t)(*(_QWORD *)&v378 - *(_QWORD *)&v377) >> 4;
                    _os_log_impl(&dword_18F5B3000, v297, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,processSingleLocation,numCandidates,%{public}lu", buf, 0x16u);
                  }
                  if (sub_18F5C4AE0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172168 != -1)
                      dispatch_once(&qword_1EE172168, &unk_1E2990890);
                    v304 = *(_QWORD *)v370;
                    v381 = 134349312;
                    v382 = v304;
                    v383 = 2050;
                    v384 = (uint64_t)(*(_QWORD *)&v378 - *(_QWORD *)&v377) >> 4;
                    v305 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::generateSnapCandidates(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v305);
                    if (v305 != buf)
                      free(v305);
                  }
                }
              }
            }
            *(_QWORD *)buf = &v377;
            sub_18F62AB98((void ***)buf);
          }
        }
      }
      v299 = (std::__shared_weak_count *)*((_QWORD *)&v370 + 1);
      if (*((_QWORD *)&v370 + 1))
      {
        v300 = (unint64_t *)(*((_QWORD *)&v370 + 1) + 8);
        do
          v301 = __ldaxr(v300);
        while (__stlxr(v301 - 1, v300));
        if (!v301)
        {
          ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
          std::__shared_weak_count::__release_weak(v299);
        }
      }
      goto LABEL_169;
    }
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990890);
    v287 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v287, OS_LOG_TYPE_ERROR, "CLTSP,generateSnapCandidates,null location", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
      LOWORD(v377) = 0;
      v288 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void CLTripSegmentRouteBuilder::generateSnapCandidates(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v288);
      if (v288 != buf)
        free(v288);
    }
LABEL_169:
    ++v257;
  }
  v308 = (std::__shared_weak_count *)a6[1];
  v366[0] = *a6;
  v366[1] = (uint64_t)v308;
  if (v308)
  {
    v309 = (unint64_t *)&v308->__shared_owners_;
    do
      v310 = __ldxr(v309);
    while (__stxr(v310 + 1, v309));
  }
  sub_18F6C6D58(a1, v366, a4);
  if (v308)
  {
    v311 = (unint64_t *)&v308->__shared_owners_;
    do
      v312 = __ldaxr(v311);
    while (__stlxr(v312 - 1, v311));
    if (!v312)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
    }
  }
  v314 = *(_QWORD *)(a1 + 48);
  v313 = *(_QWORD *)(a1 + 56);
  while (v314 != v313)
  {
    sub_18F6CC4F8(v314);
    v314 += 80;
  }
  if (*(_DWORD *)(a1 + 76) == 1 && *(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 32))
  {
    v315 = *(_QWORD *)(a1 + 48);
    v316 = *(_QWORD *)(a1 + 56);
    if (v315 != v316)
    {
      v317 = 0;
      v318 = -1.0;
      do
      {
        v319 = sub_18F6CC5EC(v315);
        v320 = v318 < 0.0;
        if (v319 < v318)
          v320 = 1;
        if (v320)
        {
          v318 = v319;
          v317 = v315;
        }
        v315 += 80;
      }
      while (v315 != v316);
      v321 = *v363;
      if (*((_QWORD *)*v363 + 1) - *(_QWORD *)*v363 >= 0x11uLL && v317 != 0)
      {
        v323 = *(uint64_t **)(v317 + 24);
        if (v323 != *(uint64_t **)(v317 + 32))
        {
          v324 = *v323;
          v325 = (std::__shared_weak_count *)v323[1];
          *(_QWORD *)buf = *v323;
          *(_QWORD *)&buf[8] = v325;
          if (v325)
          {
            v326 = (unint64_t *)&v325->__shared_owners_;
            do
              v327 = __ldxr(v326);
            while (__stxr(v327 + 1, v326));
          }
          if (v324)
          {
            v328 = *(char **)v321;
            if (vabdd_f64(*(double *)(v324 + 16), *(double *)(**(_QWORD **)v321 + 16)) < 0.0001)
            {
              for (i = *((_QWORD *)v321 + 1); (char *)i != v328; i = sub_18F5D6004(i - 16))
                ;
              *((_QWORD *)v321 + 1) = v328;
              sub_18F623AB8((char **)v321, (__int128 *)buf);
              v325 = *(std::__shared_weak_count **)&buf[8];
            }
          }
          if (v325)
          {
            v330 = (unint64_t *)&v325->__shared_owners_;
            do
              v331 = __ldaxr(v330);
            while (__stlxr(v331 - 1, v330));
            if (!v331)
            {
              ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
              std::__shared_weak_count::__release_weak(v325);
            }
          }
        }
      }
    }
  }
  if (a4)
  {
    if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 32))
    {
      v332 = *(_QWORD *)(a1 + 48);
      v333 = *(_QWORD *)(a1 + 56);
      if (v332 != v333)
      {
        v334 = 0;
        v335 = -1.0;
        do
        {
          v336 = sub_18F6CC5EC(v332);
          v337 = v335 < 0.0;
          if (v336 < v335)
            v337 = 1;
          if (v337)
          {
            v335 = v336;
            v334 = v332;
          }
          v332 += 80;
        }
        while (v332 != v333);
        v338 = *(_QWORD *)(a1 + 32);
        v339 = (uint64_t *)(v338 - 24);
        if (*(_QWORD *)(v338 - 16) - *(_QWORD *)(v338 - 24) >= 0x11uLL && v334 != 0)
        {
          v341 = *(_QWORD *)(v334 + 56);
          if (*(_QWORD *)(v334 + 48) != v341)
          {
            v342 = *(_QWORD *)(v341 - 16);
            *(_QWORD *)buf = v342;
            v343 = *(std::__shared_weak_count **)(v341 - 8);
            *(_QWORD *)&buf[8] = v343;
            if (v343)
            {
              v344 = (unint64_t *)&v343->__shared_owners_;
              do
                v345 = __ldxr(v344);
              while (__stxr(v345 + 1, v344));
            }
            if (v342)
            {
              v346 = *v339;
              if (vabdd_f64(*(double *)(v342 + 16), *(double *)(*(_QWORD *)*v339 + 16)) < 0.0001)
              {
                for (j = *(_QWORD *)(v338 - 16); j != v346; j = sub_18F5D6004(j - 16))
                  ;
                *(_QWORD *)(v338 - 16) = v346;
                sub_18F623AB8((char **)(v338 - 24), (__int128 *)buf);
                v343 = *(std::__shared_weak_count **)&buf[8];
              }
            }
            if (v343)
            {
              v348 = (unint64_t *)&v343->__shared_owners_;
              do
                v349 = __ldaxr(v348);
              while (__stlxr(v349 - 1, v348));
              if (!v349)
              {
                ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                std::__shared_weak_count::__release_weak(v343);
              }
            }
          }
        }
      }
    }
  }
  *(_QWORD *)buf = v385;
  sub_18F62AB98((void ***)buf);
  v350 = v376;
  if (v376)
  {
    v351 = (unint64_t *)&v376->__shared_owners_;
    do
      v352 = __ldaxr(v351);
    while (__stlxr(v352 - 1, v351));
    if (!v352)
    {
      ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
      std::__shared_weak_count::__release_weak(v350);
    }
  }
}

void sub_18F6C631C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51)
{
  a51 = (void **)&a35;
  sub_18F62C498(&a51);
  sub_18F5D6004((uint64_t)&a26);
  a51 = (void **)&a43;
  sub_18F62AB98(&a51);
  sub_18F5D6004((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6C640C(uint64_t result, const std::string *a2)
{
  const std::string *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::string::size_type size;
  int v7;
  unsigned __int8 *i;
  NSObject *v9;
  uint64_t v10;
  const std::string *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **j;
  void **v18;
  char *v19;
  _BYTE buf[12];
  __int16 v21;
  const std::string *v22;
  uint64_t v23;

  v2 = a2;
  v3 = result;
  v23 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(result + 23);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(result + 23);
  else
    v5 = *(_QWORD *)(result + 8);
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v7 = (char)size;
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  if (v5 == size)
  {
    if (v7 < 0)
      a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    if ((v4 & 0x80) != 0)
    {
      result = memcmp(*(const void **)result, a2, *(_QWORD *)(result + 8));
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      if (!*(_BYTE *)(result + 23))
        return result;
      for (i = (unsigned __int8 *)result; *i == a2->__r_.__value_.__s.__data_[0]; ++i)
      {
        a2 = (const std::string *)((char *)a2 + 1);
        if (!--v4)
          return result;
      }
    }
  }
  if (qword_1EE172168 != -1)
    dispatch_once(&qword_1EE172168, &unk_1E2990890);
  v9 = qword_1EE172170;
  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
  {
    v10 = v3;
    if (*(char *)(v3 + 23) < 0)
      v10 = *(_QWORD *)v3;
    if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = v2;
    else
      v11 = (const std::string *)v2->__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v10;
    v21 = 2082;
    v22 = v11;
    _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_DEBUG, "CLTSP,reset routebuilder,prevTrip,%{public}s,newTrip,%{public}s", buf, 0x16u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990890);
    v19 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::reset(const std::string &)", "CoreLocation: %s\n", v19);
    if (v19 != buf)
      free(v19);
  }
  std::string::operator=((std::string *)v3, v2);
  v15 = *(_QWORD *)(v3 + 24);
  v16 = *(_QWORD *)(v3 + 32);
  while (v16 != v15)
  {
    v16 -= 24;
    *(_QWORD *)buf = v16;
    sub_18F62AB98((void ***)buf);
  }
  *(_QWORD *)(v3 + 32) = v15;
  v18 = *(void ***)(v3 + 48);
  for (j = *(void ***)(v3 + 56); j != v18; sub_18F6CA06C(v3 + 64, j))
    j -= 10;
  *(_QWORD *)(v3 + 56) = v18;
  *(_QWORD *)(v3 + 72) = 0;
  return objc_msgSend_removeAllObjects(*(void **)(v3 + 120), v12, v13, v14);
}

const char *sub_18F6C66F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  char *v17;
  NSObject *v18;
  char *v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend_standardUserDefaults(MEMORY[0x1E0C99EA0], a2, a3, a4);
  if (objc_msgSend_valueForKey_(v6, v7, a1, v8))
  {
    v12 = (void *)objc_msgSend_standardUserDefaults(MEMORY[0x1E0C99EA0], v9, v10, v11);
    v15 = objc_msgSend_BOOLForKey_(v12, v13, a1, v14);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990890);
    v16 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543874;
      v22 = a1;
      v23 = 1026;
      v24 = (int)a2;
      v25 = 1026;
      v26 = v15;
      _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_DEFAULT, "CLTSP,userDefaults read for key,%{public}@,defaultValue,%{public}d,readValue,%{public}d", buf, 0x18u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
      v17 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "static BOOL CLTripSegmentUtilities::getUserDefaultsBoolForKey(NSString * _Nonnull, const BOOL)", "CoreLocation: %s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
  }
  else
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990890);
    v18 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      v22 = a1;
      v23 = 1026;
      v24 = (int)a2;
      _os_log_impl(&dword_18F5B3000, v18, OS_LOG_TYPE_DEFAULT, "CLTSP,userDefaults not found for key,%{public}@,defaultValue,%{public}d", buf, 0x12u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
      v20 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "static BOOL CLTripSegmentUtilities::getUserDefaultsBoolForKey(NSString * _Nonnull, const BOOL)", "CoreLocation: %s\n", v20);
      if (v20 != (char *)buf)
        free(v20);
    }
    return a2;
  }
  return (const char *)v15;
}

uint64_t sub_18F6C6A64(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  int v10;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  NSObject *v32;
  char *v33;
  double v34;
  double v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  double v62;
  double v63;
  _BOOL4 v64;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  double v69;
  uint8_t buf[1640];
  uint64_t v71;

  v10 = a3;
  v71 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_count(a2, (const char *)a2, a3, a4) <= (unint64_t)(int)a3)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990890);
    v32 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v32, OS_LOG_TYPE_DEFAULT, "CLTSP,locationIndex over number of entries in sparseLocations", buf, 2u);
    }
    result = sub_18F5C4AE0(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
      v33 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentUtilities::CLGPSFixTracker::canUseThisFix(NSArray<CLTripSegmentLocation *> * _Nonnull, int, const double, const double, const double)", "CoreLocation: %s\n", v33);
      if (v33 != (char *)buf)
        free(v33);
      return 0;
    }
  }
  else
  {
    v15 = (void *)objc_msgSend_objectAtIndexedSubscript_(a2, v13, v10, v14);
    v19 = (void *)objc_msgSend_timestamp(v15, v16, v17, v18);
    objc_msgSend_timeIntervalSinceReferenceDate(v19, v20, v21, v22);
    v24 = v23;
    if (objc_msgSend_isGPSLocationType(v15, v25, v26, v27))
    {
      *(double *)a1 = v24;
      *(_QWORD *)(a1 + 8) = v15;
      return 1;
    }
    v34 = vabdd_f64(v24, *(double *)a1);
    if (*(double *)a1 > 0.0 && v34 < a5)
      return 0;
    if (*(double *)a1 > 0.0 && v34 >= 0.0 && v34 < a6)
    {
      objc_msgSend_distanceFromLocation_(v15, v28, *(_QWORD *)(a1 + 8), v30);
      if (v37 < a7)
        return 0;
    }
    LODWORD(v38) = v10 + 1;
    if (objc_msgSend_count(a2, v28, v29, v30) <= (unint64_t)(int)v38)
      return 1;
    v38 = (int)v38;
    while (1)
    {
      v41 = (void *)objc_msgSend_objectAtIndexedSubscript_(a2, v39, v38, v40);
      if (objc_msgSend_isGPSLocationType(v41, v42, v43, v44))
      {
        v48 = (void *)objc_msgSend_objectAtIndexedSubscript_(a2, v45, v38, v47);
        if (objc_msgSend_isGoodGPSFixWithGoodCourse(v48, v49, v50, v51))
          break;
      }
      if (objc_msgSend_count(a2, v45, v46, v47) <= (unint64_t)++v38)
        return 1;
    }
    v52 = (void *)objc_msgSend_objectAtIndexedSubscript_(a2, v45, v38, v47);
    v56 = (void *)objc_msgSend_timestamp(v52, v53, v54, v55);
    objc_msgSend_timeIntervalSinceReferenceDate(v56, v57, v58, v59);
    v63 = vabdd_f64(v24, v62);
    v64 = v63 < a5;
    if (v63 < a6 && v63 >= a5)
    {
      v66 = objc_msgSend_objectAtIndexedSubscript_(a2, v60, v38, v61);
      objc_msgSend_distanceFromLocation_(v15, v67, v66, v68);
      if (v69 < a7)
        v64 = 1;
    }
    return !v64;
  }
  return result;
}

void sub_18F6C6D58(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  double v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD **v20;
  _QWORD **v21;
  _QWORD *v22;
  uint64_t *ii;
  unint64_t **v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint8_t *v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  _BOOL4 v34;
  _BOOL4 v35;
  _OWORD *v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  NSObject *v40;
  char *v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  _BOOL4 v45;
  uint8_t *v46;
  uint8_t *v47;
  uint8_t *v48;
  NSObject *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  _QWORD *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  _QWORD **v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  BOOL v94;
  int v96;
  int v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  _QWORD **v104;
  _QWORD **v105;
  unint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  int v112;
  char *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t v132;
  uint64_t v133;
  _QWORD **v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  __n128 v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  double v156;
  double v157;
  _QWORD **v158;
  _QWORD **v159;
  NSObject *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  _BOOL4 v168;
  char *v169;
  unint64_t *v170;
  unint64_t v171;
  NSObject *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  NSObject *v178;
  unint64_t *v179;
  unint64_t v180;
  NSObject *v181;
  uint64_t v182;
  __n128 v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  double *v188;
  uint64_t v189;
  uint64_t *v190;
  NSObject *v191;
  uint64_t v192;
  uint64_t j;
  char *v194;
  _BOOL4 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  int64x2_t v205;
  unint64_t v206;
  uint64_t v207;
  void **v208;
  void **v209;
  void *v210;
  __int128 *v211;
  __int128 *v212;
  unint64_t v213;
  uint64_t v214;
  NSObject *v215;
  unint64_t v216;
  unint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void **n;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  uint64_t v227;
  unint64_t ****v228;
  unint64_t ****v229;
  char *v231;
  char *v232;
  unint64_t **v233;
  unint64_t *v234;
  uint64_t **v235;
  uint64_t k;
  unint64_t *v237;
  uint64_t v238;
  uint64_t **v239;
  uint64_t v240;
  unint64_t ***v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *m;
  uint64_t v246;
  unint64_t ***v247;
  unint64_t ***v248;
  double v249;
  double v250;
  unint64_t *v252;
  uint64_t v253;
  unint64_t ***v254;
  unint64_t *v256;
  uint64_t v257;
  unint64_t ***v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  uint64_t v267;
  char *v268;
  NSObject *v269;
  void **i;
  char *v271;
  uint64_t *v272;
  _BOOL4 v273;
  uint64_t *v275;
  int64x2_t *v276;
  uint64_t v278;
  uint64_t v279;
  unint64_t v281;
  uint64_t ***v282;
  uint64_t *v283;
  _QWORD *v284;
  char *v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  char *v290;
  char *v291;
  uint64_t v292;
  int64x2_t v293;
  unint64_t v294;
  __int128 v295;
  uint64_t v296;
  std::__shared_weak_count *v297;
  _QWORD *v298;
  std::__shared_weak_count *v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  __int128 v306[2];
  int v307;
  __int128 v308;
  __int128 v309;
  char *v310[4];
  _BYTE v311[40];
  uint64_t v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t v315;
  _QWORD *v316;
  uint8_t buf[48];
  _OWORD v318[99];
  uint64_t v319;

  v319 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3 == v4)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990890);
    v269 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = 0;
      _os_log_impl(&dword_18F5B3000, v269, OS_LOG_TYPE_ERROR, "CLTSP,generateAndCombineRoute called with 0 snaps,runIndex,%{public}d", buf, 8u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990890);
      *(_QWORD *)v311 = 67240192;
      v271 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void CLTripSegmentRouteBuilder::generateAndCombineRoute(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const BOOL, int)", "CoreLocation: %s\n", v271);
      if (v271 != (char *)buf)
        free(v271);
    }
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a1 + 72);
    if (0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3) > v6)
    {
      v276 = (int64x2_t *)(a1 + 48);
      v272 = (uint64_t *)(a1 + 64);
      v7 = 0xFFFFFFFFLL;
      while (1)
      {
        *(_DWORD *)(v5 + 72) = v6;
        v8 = (uint64_t **)(v3 + 24 * v6);
        v282 = (uint64_t ***)v8;
        v287 = (uint64_t *)(v8 + 1);
        if (*v8 == v8[1])
        {
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990890);
          v40 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)&buf[4] = 0;
            _os_log_impl(&dword_18F5B3000, v40, OS_LOG_TYPE_DEBUG, "CLTSP,generateAndCombineRoute,empty snap vector,runIndex,%{public}d", buf, 8u);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_459;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990890);
          *(_QWORD *)v311 = 67240192;
          v41 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::generateAndCombineRoute(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const BOOL, int)", "CoreLocation: %s\n", v41);
LABEL_66:
          if (v41 != (char *)buf)
            free(v41);
          goto LABEL_459;
        }
        v9 = **v8;
        if (!v9)
        {
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990890);
          v42 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)&buf[4] = 0;
            _os_log_impl(&dword_18F5B3000, v42, OS_LOG_TYPE_ERROR, "CLTSP,generateAndCombineRoute,null front snap,runIndex,%{public}d", buf, 8u);
          }
          if (!sub_18F5C4AE0(115, 0))
            goto LABEL_459;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990890);
          *(_QWORD *)v311 = 67240192;
          v41 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "void CLTripSegmentRouteBuilder::generateAndCombineRoute(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const BOOL, int)", "CoreLocation: %s\n", v41);
          goto LABEL_66;
        }
        if ((v7 & 0x80000000) == 0)
          break;
        v7 = v6;
LABEL_459:
        ++v6;
        v3 = *(_QWORD *)(v5 + 24);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 32) - v3) >> 3) <= v6)
          return;
      }
      v279 = v6;
      v10 = *(double *)(v9 + 16);
      v293 = 0uLL;
      v294 = 0;
      v290 = 0;
      v291 = 0;
      v292 = 0;
      v11 = (std::__shared_weak_count *)a2[1];
      v288 = *a2;
      v289 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
        if (v293.i64[1])
        {
          for (i = (void **)(v293.i64[1] - 80); ; i -= 10)
            sub_18F6CA06C((uint64_t)&v294, i);
        }
      }
      v14 = v3 + 24 * v7;
      v293.i64[1] = 0;
      v15 = (uint64_t **)(v14 + 8);
      v281 = v6;
      v286 = v14;
      v278 = v7;
      if (*(_QWORD *)v14 == *(_QWORD *)(v14 + 8))
      {
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990890);
        v43 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v10;
          _os_log_impl(&dword_18F5B3000, v43, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,generateRouteCandidatesForOneSegment,null or empty lastSnapVectorPointer", buf, 0xCu);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_81;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 == -1)
          goto LABEL_470;
      }
      else
      {
        if (*v8 != (uint64_t *)*v287)
        {
          v307 = 0;
          memset(v306, 0, sizeof(v306));
          v308 = 0u;
          v309 = 0u;
          if (!*(_BYTE *)(v5 + 128))
          {
LABEL_106:
            if (v290 == v291)
            {
              if (*(_BYTE *)(v5 + 128))
              {
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990890);
                v172 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 134349056;
                  *(double *)&buf[4] = v10;
                  _os_log_impl(&dword_18F5B3000, v172, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,generateRouteCandidatesForOneSegment,unable to generate route candidates using preferred snaps, generating using all", buf, 0xCu);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990890);
                  *(_DWORD *)v311 = 134349056;
                  *(double *)&v311[4] = v10;
                  v266 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::generateRouteCandidatesForOneSegment(const CFAbsoluteTime, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLRouteCandidateVector> &, std::vector<CLRouteCandidatePtr> &, std::vector<CLRouteCandidateVector> &)", "CoreLocation: %s\n", v266);
                  if (v266 != (char *)buf)
                    free(v266);
                  v5 = a1;
                  v6 = v281;
                  v14 = v286;
                }
              }
              v302 = v288;
              v303 = v289;
              if (v289)
              {
                v173 = (unint64_t *)&v289->__shared_owners_;
                do
                  v174 = __ldxr(v173);
                while (__stxr(v174 + 1, v173));
              }
              sub_18F6D35A4((uint64_t *)v306, &v302, (char **)v14, v282, &v290);
              v175 = v303;
              if (v303)
              {
                v176 = (unint64_t *)&v303->__shared_owners_;
                do
                  v177 = __ldaxr(v176);
                while (__stlxr(v177 - 1, v176));
                if (!v177)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
              }
            }
            v273 = v290 != v291;
            if (v290 == v291)
            {
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990890);
              v178 = qword_1EE172170;
              if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134349056;
                *(double *)&buf[4] = v10;
                _os_log_impl(&dword_18F5B3000, v178, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,generateRouteCandidatesForOneSegment,unable to generate route candidates", buf, 0xCu);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990890);
                *(_DWORD *)v311 = 134349056;
                *(double *)&v311[4] = v10;
                v265 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::generateRouteCandidatesForOneSegment(const CFAbsoluteTime, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLRouteCandidateVector> &, std::vector<CLRouteCandidatePtr> &, std::vector<CLRouteCandidateVector> &)", "CoreLocation: %s\n", v265);
                if (v265 != (char *)buf)
                  free(v265);
              }
            }
            else
            {
              v57 = *(uint64_t **)(v5 + 48);
              v56 = *(uint64_t **)(v5 + 56);
              if (v57 != v56)
              {
                v275 = *(uint64_t **)(v5 + 56);
                do
                {
                  v58 = (_QWORD *)v57[1];
                  if ((_QWORD *)*v57 != v58)
                  {
                    v59 = *(v58 - 2);
                    if (v59)
                    {
                      v61 = *(_QWORD *)(v59 + 48);
                      v60 = *(_QWORD *)(v59 + 56);
                      if (v61 != v60)
                      {
                        v300 = *(_QWORD *)(v60 - 16);
                        v62 = *(std::__shared_weak_count **)(v60 - 8);
                        v301 = v62;
                        if (v62)
                        {
                          v63 = (unint64_t *)&v62->__shared_owners_;
                          do
                            v64 = __ldxr(v63);
                          while (__stxr(v64 + 1, v63));
                        }
                        v66 = v290;
                        v65 = v291;
                        v283 = v57;
                        v285 = v291;
                        if (v290 != v291)
                        {
                          while (1)
                          {
                            v67 = *(_QWORD *)v66;
                            if (*(_QWORD *)v66)
                            {
                              v69 = *(_QWORD *)(v67 + 48);
                              v68 = *(_QWORD *)(v67 + 56);
                              if (v69 != v68)
                                break;
                            }
LABEL_227:
                            v66 += 16;
                            if (v66 == v65)
                            {
                              v62 = v301;
                              goto LABEL_270;
                            }
                          }
                          v71 = *(_QWORD **)v69;
                          v70 = *(std::__shared_weak_count **)(v69 + 8);
                          v298 = v71;
                          v299 = v70;
                          if (v70)
                          {
                            v72 = (unint64_t *)&v70->__shared_owners_;
                            do
                              v73 = __ldxr(v72);
                            while (__stxr(v73 + 1, v72));
                            v68 = *(_QWORD *)(v67 + 56);
                          }
                          v296 = *(_QWORD *)(v68 - 16);
                          v74 = *(std::__shared_weak_count **)(v68 - 8);
                          v297 = v74;
                          if (v74)
                          {
                            v75 = (unint64_t *)&v74->__shared_owners_;
                            do
                              v76 = __ldxr(v75);
                            while (__stxr(v76 + 1, v75));
                            v68 = *(_QWORD *)(v67 + 56);
                          }
                          v77 = *(_QWORD *)(v67 + 48);
                          v78 = (unint64_t)(v68 - v77) >> 4;
                          v79 = sub_18F6CC760(v57, v78);
                          v80 = *v57;
                          v81 = (v57[1] - *v57) >> 4;
                          if (v81 <= v79)
                          {
                            v96 = 0;
                          }
                          else
                          {
                            v82 = v79;
                            v83 = v57;
                            v84 = v82;
                            v85 = sub_18F6CC808(v83, v82)
                                - v78
                                + ((*(_QWORD *)(*(_QWORD *)(v80 + 16 * v82) + 56)
                                  - *(_QWORD *)(*(_QWORD *)(v80 + 16 * v82) + 48)) >> 4);
                            v86 = -1;
                            do
                            {
                              v87 = *(_QWORD *)(v80 + 16 * v84);
                              if (v87)
                              {
                                v89 = v87 + 48;
                                v88 = *(_QWORD ***)(v87 + 48);
                                v90 = *(_QWORD *)(v89 + 8) - (_QWORD)v88;
                                if ((int)(v90 >> 4) >= 1)
                                {
                                  v91 = 0;
                                  v92 = (v90 >> 4);
                                  while (1)
                                  {
                                    v93 = *v88;
                                    v94 = !*v88 || v71 == 0;
                                    if (!v94 && *v93 == *v71 && v93[1] == v71[1] && v91 >= v85)
                                      break;
                                    ++v91;
                                    v88 += 2;
                                    if (v92 == v91)
                                      goto LABEL_143;
                                  }
                                  v86 = v91;
                                }
LABEL_143:
                                v82 += v86 >> 31;
                                if (v86 < 0)
                                  v85 = 0;
                              }
                              ++v84;
                            }
                            while (v84 != v81);
                            v96 = 0;
                            if (v82 < 0)
                            {
                              v57 = v283;
                            }
                            else
                            {
                              v57 = v283;
                              if ((v86 & 0x80000000) == 0)
                              {
                                if (v81 <= v82)
                                {
                                  v96 = 0;
                                  goto LABEL_168;
                                }
                                v97 = 0;
                                v96 = 0;
                                v98 = v82;
                                v99 = 1;
                                do
                                {
                                  v100 = *(_QWORD *)(v80 + 16 * v98);
                                  if (v100)
                                  {
                                    v101 = *(_QWORD *)(v100 + 48);
                                    v102 = (unint64_t)(*(_QWORD *)(v100 + 56) - v101) >> 4;
                                    if (v86 < (int)v102)
                                    {
                                      v96 = v96 - v86 + v102;
                                      v103 = v97 - v86 + v102;
                                      v104 = (_QWORD **)(v77 + 16 * v97);
                                      v105 = (_QWORD **)(v101 + 16 * v86);
                                      v106 = (int)v102 - (unint64_t)v86;
                                      while (1)
                                      {
                                        v107 = *v105;
                                        if (!*v105)
                                          break;
                                        v108 = *v104;
                                        if (!*v104 || *v107 != *v108 || v107[1] != v108[1])
                                          break;
                                        ++v97;
                                        v104 += 2;
                                        v105 += 2;
                                        if (!--v106)
                                        {
                                          v97 = v103;
                                          goto LABEL_160;
                                        }
                                      }
                                      v99 = 0;
                                      v96 = 0;
                                    }
                                  }
LABEL_160:
                                  ++v98;
                                }
                                while (v98 != v81);
                                if ((v99 & 1) != 0)
                                {
LABEL_168:
                                  memset(v311, 0, 24);
                                  sub_18F6C9CD8(v311, (_QWORD *)*v57, (_QWORD *)v57[1], (v57[1] - *v57) >> 4);
                                  *(_QWORD *)&v311[24] = 0;
                                  *(_QWORD *)&v311[32] = 0;
                                  v312 = 0;
                                  sub_18F6C9D78(&v311[24], (_QWORD *)v57[3], (_QWORD *)v57[4], (v57[4] - v57[3]) >> 4);
                                  v313 = 0;
                                  v314 = 0;
                                  v315 = 0;
                                  sub_18F6C9D78((char *)&v313, (_QWORD *)v57[6], (_QWORD *)v57[7], (v57[7] - v57[6]) >> 4);
                                  v316 = (_QWORD *)v57[9];
                                  v109 = *(_QWORD *)v66;
                                  v110 = (char *)operator new(0x60uLL);
                                  v111 = v110;
                                  *((_QWORD *)v110 + 1) = 0;
                                  *((_QWORD *)v110 + 2) = 0;
                                  *(_QWORD *)v110 = &off_1E298DEB8;
                                  v112 = *(_DWORD *)(v109 + 8);
                                  *((_QWORD *)v110 + 3) = *(_QWORD *)v109;
                                  v113 = v110 + 24;
                                  *((_DWORD *)v110 + 8) = v112;
                                  *((_QWORD *)v110 + 5) = *(_QWORD *)(v109 + 16);
                                  v114 = *(_QWORD *)(v109 + 24);
                                  *((_QWORD *)v110 + 6) = v114;
                                  if (v114)
                                  {
                                    v115 = (unint64_t *)(v114 + 8);
                                    do
                                      v116 = __ldxr(v115);
                                    while (__stxr(v116 + 1, v115));
                                  }
                                  *((_QWORD *)v110 + 7) = *(_QWORD *)(v109 + 32);
                                  v117 = *(_QWORD *)(v109 + 40);
                                  *((_QWORD *)v110 + 8) = v117;
                                  if (v117)
                                  {
                                    v118 = (unint64_t *)(v117 + 8);
                                    do
                                      v119 = __ldxr(v118);
                                    while (__stxr(v119 + 1, v118));
                                  }
                                  *((_QWORD *)v110 + 9) = 0;
                                  *((_QWORD *)v110 + 10) = 0;
                                  *((_QWORD *)v110 + 11) = 0;
                                  sub_18F62AA84(v110 + 72, *(_QWORD **)(v109 + 48), *(_QWORD **)(v109 + 56), (uint64_t)(*(_QWORD *)(v109 + 56) - *(_QWORD *)(v109 + 48)) >> 4);
                                  *(_QWORD *)&v295 = v113;
                                  *((_QWORD *)&v295 + 1) = v111;
                                  if (v113 != (char *)v67)
                                  {
                                    sub_18F62C588((uint64_t)(v111 + 72), *(uint64_t **)(v67 + 48), *(uint64_t **)(v67 + 56), (uint64_t)(*(_QWORD *)(v67 + 56) - *(_QWORD *)(v67 + 48)) >> 4);
                                    v67 = v295;
                                  }
                                  if (v96)
                                  {
                                    v120 = *(_QWORD *)(v67 + 48);
                                    v121 = *(_QWORD *)(v67 + 56);
                                    v122 = v120 + 16 * v96;
                                    if (v122 == v121)
                                    {
                                      v124 = *(_QWORD *)(v67 + 48);
                                    }
                                    else
                                    {
                                      v123 = 16 * v96;
                                      v124 = *(_QWORD *)(v67 + 48);
                                      do
                                      {
                                        sub_18F62B3EC(v120, (__int128 *)(v120 + v123));
                                        v120 += 16;
                                        v124 += 16;
                                      }
                                      while (v120 + v123 != v121);
                                      v122 = *(_QWORD *)(v67 + 56);
                                      v57 = v283;
                                    }
                                    while (v122 != v124)
                                      v122 = sub_18F5D6004(v122 - 16);
                                    *(_QWORD *)(v67 + 56) = v124;
                                  }
                                  sub_18F6CC638((char **)v311, &v295);
                                  v125 = v293.i64[1];
                                  if (v293.i64[0] == v293.i64[1])
                                    goto LABEL_206;
                                  v126 = 0;
                                  v127 = 0;
                                  v128 = (v293.i64[1] - v293.i64[0]) / 80;
                                  if (v128 <= 1)
                                    v128 = 1;
                                  v129 = (uint64_t **)(v293.i64[0] + 8);
                                  while (1)
                                  {
                                    v130 = *(v129 - 1);
                                    if (v130 != *v129 && *(_QWORD *)v311 != *(_QWORD *)&v311[8])
                                    {
                                      v132 = *v130;
                                      if (*v130)
                                      {
                                        v133 = **(_QWORD **)v311;
                                        if (**(_QWORD **)v311)
                                        {
                                          v134 = *(_QWORD ***)(v132 + 48);
                                          if (v134 != *(_QWORD ***)(v132 + 56))
                                          {
                                            v135 = *(_QWORD *)(v133 + 48);
                                            if (v135 != *(_QWORD *)(v133 + 56))
                                            {
                                              v136 = *v134;
                                              if (*v136 == **(_QWORD **)v135
                                                && v136[1] == *(_QWORD *)(*(_QWORD *)v135 + 8))
                                              {
                                                v137 = *(*v129 - 2);
                                                if (v137)
                                                {
                                                  v138 = *(_QWORD *)(*(_QWORD *)&v311[8] - 16);
                                                  if (v138)
                                                  {
                                                    v140 = *(_QWORD *)(v137 + 48);
                                                    v139 = *(_QWORD *)(v137 + 56);
                                                    if (v140 != v139)
                                                    {
                                                      v142 = *(_QWORD *)(v138 + 48);
                                                      v141 = *(_QWORD *)(v138 + 56);
                                                      if (v142 != v141)
                                                      {
                                                        v143 = *(_QWORD **)(v139 - 16);
                                                        v144 = *(_QWORD **)(v141 - 16);
                                                        if (*v143 == *v144 && v143[1] == v144[1])
                                                          break;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    ++v127;
                                    v126 += 0x100000000;
                                    v129 += 10;
                                    if (v128 == v127)
                                      goto LABEL_206;
                                  }
                                  if ((_DWORD)v127 == -1)
                                  {
LABEL_206:
                                    if (v293.i64[1] >= v294)
                                    {
                                      v146 = sub_18F6CADE4(&v293, (uint64_t)v311);
                                    }
                                    else
                                    {
                                      v145.n128_f64[0] = sub_18F6CAF94(v293.i64[1], (uint64_t)v311);
                                      v146 = v125 + 80;
                                    }
                                    v293.i64[1] = v146;
                                  }
                                  else
                                  {
                                    v155 = v126 >> 32;
                                    v156 = sub_18F6CC5EC(v293.i64[0] + 80 * SHIDWORD(v126));
                                    v157 = *(double *)&v316;
                                    v158 = *(_QWORD ***)v311;
                                    v159 = *(_QWORD ***)&v311[8];
                                    while (v158 != v159)
                                    {
                                      if (*v158)
                                        v157 = v157 + sub_18F6CC33C(*v158);
                                      v158 += 2;
                                    }
                                    if (qword_1EE172168 != -1)
                                      dispatch_once(&qword_1EE172168, &unk_1E2990890);
                                    v160 = qword_1EE172170;
                                    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                                    {
                                      *(_DWORD *)buf = 134349568;
                                      *(double *)&buf[4] = v10;
                                      *(_WORD *)&buf[12] = 2050;
                                      *(double *)&buf[14] = v156;
                                      *(_WORD *)&buf[22] = 2050;
                                      *(double *)&buf[24] = v157;
                                      _os_log_impl(&dword_18F5B3000, v160, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,generateRouteCandidatesForOneSegment,route already present in current list,crntLength,%{public}.1lf,newLength,%{public}.1lf", buf, 0x20u);
                                    }
                                    if (sub_18F5C4AE0(115, 2))
                                    {
                                      bzero(buf, 0x65CuLL);
                                      if (qword_1EE172168 != -1)
                                        dispatch_once(&qword_1EE172168, &unk_1E2990890);
                                      LODWORD(v310[0]) = 134349568;
                                      *(char **)((char *)v310 + 4) = *(char **)&v10;
                                      WORD2(v310[1]) = 2050;
                                      *(char **)((char *)&v310[1] + 6) = *(char **)&v156;
                                      HIWORD(v310[2]) = 2050;
                                      v310[3] = *(char **)&v157;
                                      v169 = (char *)_os_log_send_and_compose_impl();
                                      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::generateRouteCandidatesForOneSegment(const CFAbsoluteTime, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLRouteCandidateVector> &, std::vector<CLRouteCandidatePtr> &, std::vector<CLRouteCandidateVector> &)", "CoreLocation: %s\n", v169);
                                      if (v169 != (char *)buf)
                                        free(v169);
                                      v57 = v283;
                                    }
                                    v145.n128_f64[0] = vabdd_f64(v156, v157);
                                    if (v145.n128_f64[0] >= v156 * 0.05)
                                    {
                                      if (v157 < v156)
                                      {
                                        v163 = v293.i64[0];
                                        v164 = (uint64_t *)(v293.i64[0] + 80 * (int)v155);
                                        if (v164 != (uint64_t *)v311)
                                        {
LABEL_263:
                                          sub_18F6C9E18(v164, *(uint64_t **)v311, *(uint64_t **)&v311[8], (uint64_t)(*(_QWORD *)&v311[8] - *(_QWORD *)v311) >> 4);
                                          sub_18F62C588(v163 + 80 * (int)v155 + 24, *(uint64_t **)&v311[24], *(uint64_t **)&v311[32], (uint64_t)(*(_QWORD *)&v311[32] - *(_QWORD *)&v311[24]) >> 4);
                                          sub_18F62C588(v163 + 80 * (int)v155 + 48, v313, v314, ((char *)v314 - (char *)v313) >> 4);
                                        }
LABEL_264:
                                        v145.n128_u64[0] = (unint64_t)v316;
                                        *(_QWORD *)(v163 + 80 * (int)v155 + 72) = v316;
                                      }
                                    }
                                    else
                                    {
                                      if (*(_QWORD *)v311 == *(_QWORD *)&v311[8])
                                      {
                                        v161 = 0;
                                      }
                                      else
                                      {
                                        v161 = 0;
                                        v162 = *(_QWORD *)v311;
                                        do
                                        {
                                          if (*(_QWORD *)v162)
                                            v161 += *(_DWORD *)(*(_QWORD *)v162 + 8);
                                          v162 += 16;
                                        }
                                        while (v162 != *(_QWORD *)&v311[8]);
                                      }
                                      v163 = v293.i64[0];
                                      v164 = (uint64_t *)(v293.i64[0] + 80 * (int)v155);
                                      v165 = *v164;
                                      v166 = v164[1];
                                      if (*v164 == v166)
                                      {
                                        v167 = 0;
                                      }
                                      else
                                      {
                                        v167 = 0;
                                        do
                                        {
                                          if (*(_QWORD *)v165)
                                            v167 += *(_DWORD *)(*(_QWORD *)v165 + 8);
                                          v165 += 16;
                                        }
                                        while (v165 != v166);
                                      }
                                      v168 = v161 == v167;
                                      if (v157 >= v156)
                                        v168 = 0;
                                      if (v161 < v167 || v168)
                                      {
                                        if (v164 != (uint64_t *)v311)
                                          goto LABEL_263;
                                        goto LABEL_264;
                                      }
                                    }
                                  }
                                  v147 = (std::__shared_weak_count *)*((_QWORD *)&v295 + 1);
                                  if (*((_QWORD *)&v295 + 1))
                                  {
                                    v148 = (unint64_t *)(*((_QWORD *)&v295 + 1) + 8);
                                    do
                                      v149 = __ldaxr(v148);
                                    while (__stlxr(v149 - 1, v148));
                                    if (!v149)
                                    {
                                      ((void (*)(std::__shared_weak_count *, __n128))v147->__on_zero_shared)(v147, v145);
                                      std::__shared_weak_count::__release_weak(v147);
                                    }
                                  }
                                  *(_QWORD *)buf = &v313;
                                  sub_18F62AB98((void ***)buf);
                                  *(_QWORD *)buf = &v311[24];
                                  sub_18F62AB98((void ***)buf);
                                  *(_QWORD *)buf = v311;
                                  sub_18F62AB98((void ***)buf);
                                  v74 = v297;
LABEL_216:
                                  v14 = v286;
                                  if (v74)
                                  {
                                    v150 = (unint64_t *)&v74->__shared_owners_;
                                    do
                                      v151 = __ldaxr(v150);
                                    while (__stlxr(v151 - 1, v150));
                                    if (!v151)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                                      std::__shared_weak_count::__release_weak(v74);
                                    }
                                  }
                                  v152 = v299;
                                  if (v299)
                                  {
                                    v153 = (unint64_t *)&v299->__shared_owners_;
                                    do
                                      v154 = __ldaxr(v153);
                                    while (__stlxr(v154 - 1, v153));
                                    if (!v154)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                                      std::__shared_weak_count::__release_weak(v152);
                                    }
                                  }
                                  v65 = v285;
                                  goto LABEL_227;
                                }
                              }
                            }
                          }
                          if (sub_18F627464(v288, &v300, (uint64_t)&v298, 0))
                            goto LABEL_168;
                          goto LABEL_216;
                        }
LABEL_270:
                        v5 = a1;
                        v6 = v281;
                        if (v62)
                        {
                          v170 = (unint64_t *)&v62->__shared_owners_;
                          do
                            v171 = __ldaxr(v170);
                          while (__stlxr(v171 - 1, v170));
                          if (!v171)
                          {
                            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                            std::__shared_weak_count::__release_weak(v62);
                          }
                        }
                        v56 = v275;
                      }
                    }
                  }
                  v57 += 10;
                }
                while (v57 != v56);
              }
            }
            *(_QWORD *)buf = v306;
            sub_18F62AB98((void ***)buf);
            v45 = v273;
            if (!v289)
              goto LABEL_302;
LABEL_298:
            v179 = (unint64_t *)&v289->__shared_owners_;
            do
              v180 = __ldaxr(v179);
            while (__stlxr(v180 - 1, v179));
            if (!v180)
            {
              v195 = v45;
              ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
              std::__shared_weak_count::__release_weak(v289);
              if (v195)
              {
LABEL_303:
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990890);
                v181 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                {
                  v182 = *(_QWORD *)(**(_QWORD **)v14 + 16);
                  *(_DWORD *)buf = 134349824;
                  *(double *)&buf[4] = v10;
                  *(_WORD *)&buf[12] = 1026;
                  *(_DWORD *)&buf[14] = 0;
                  *(_WORD *)&buf[18] = 2050;
                  *(_QWORD *)&buf[20] = v182;
                  *(_WORD *)&buf[28] = 2050;
                  *(_QWORD *)&buf[30] = (v291 - v290) >> 4;
                  _os_log_impl(&dword_18F5B3000, v181, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,generateAndCombineRoute,runIndex,%{public}d,prevTime,%{public}.1lf,numCandidates,%{public}lu", buf, 0x26u);
                }
                v5 = a1;
                v6 = v281;
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990890);
                  v260 = *(_QWORD *)(**(_QWORD **)v14 + 16);
                  *(_DWORD *)v311 = 134349824;
                  *(double *)&v311[4] = v10;
                  *(_WORD *)&v311[12] = 1026;
                  *(_DWORD *)&v311[14] = 0;
                  *(_WORD *)&v311[18] = 2050;
                  *(_QWORD *)&v311[20] = v260;
                  *(_WORD *)&v311[28] = 2050;
                  *(_QWORD *)&v311[30] = (v291 - v290) >> 4;
                  v261 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::generateAndCombineRoute(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const BOOL, int)", "CoreLocation: %s\n", v261);
                  if (v261 != (char *)buf)
                    free(v261);
                }
                if (*(_DWORD *)(a1 + 76) == 1 && v281 == 1)
                {
                  v184 = (uint64_t *)v290;
                  v185 = (uint64_t *)v291;
                  if (v290 != v291)
                  {
                    v186 = 0;
                    v187 = 0;
                    v306[0] = 0uLL;
                    do
                    {
                      v188 = (double *)*v184;
                      v189 = *(_QWORD *)(*v184 + 56);
                      if (*(_QWORD *)(*v184 + 48) != v189)
                      {
                        v190 = *(uint64_t **)(v189 - 16);
                        if (v190)
                        {
                          if (*(_QWORD *)&v306[0])
                          {
                            v183.n128_u64[0] = **(_QWORD **)&v306[0];
                            if (**(double **)&v306[0] > *v188)
                              sub_18F62D304(v306, (uint64_t)v188, v184[1]);
                            if (v186 != *v190 || v187 != v190[1])
                              goto LABEL_337;
                          }
                          else
                          {
                            v186 = *v190;
                            v187 = v190[1];
                            sub_18F62D304(v306, (uint64_t)v188, v184[1]);
                          }
                        }
                      }
                      v184 += 2;
                    }
                    while (v184 != v185);
                    if (*(_QWORD *)&v306[0])
                    {
                      if (qword_1EE172168 != -1)
                        dispatch_once(&qword_1EE172168, &unk_1E2990890);
                      v191 = qword_1EE172170;
                      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                      {
                        v192 = *(_QWORD *)(**(_QWORD **)v14 + 16);
                        *(_DWORD *)buf = 134349312;
                        *(double *)&buf[4] = v10;
                        *(_WORD *)&buf[12] = 2050;
                        *(_QWORD *)&buf[14] = v192;
                        _os_log_impl(&dword_18F5B3000, v191, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,generateAndCombineRoute,prevTime,%{public}.1lf,reduced size to 1 route", buf, 0x16u);
                      }
                      if (sub_18F5C4AE0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1EE172168 != -1)
                          dispatch_once(&qword_1EE172168, &unk_1E2990890);
                        v267 = *(_QWORD *)(**(_QWORD **)v286 + 16);
                        *(_DWORD *)v311 = 134349312;
                        *(double *)&v311[4] = v10;
                        *(_WORD *)&v311[12] = 2050;
                        *(_QWORD *)&v311[14] = v267;
                        v268 = (char *)_os_log_send_and_compose_impl();
                        sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::generateAndCombineRoute(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const BOOL, int)", "CoreLocation: %s\n", v268);
                        if (v268 != (char *)buf)
                          free(v268);
                        v5 = a1;
                        v6 = v281;
                      }
                      v194 = v290;
                      for (j = (uint64_t)v291; (char *)j != v194; j = sub_18F5D6004(j - 16))
                        ;
                      v291 = v194;
                      sub_18F623AB8(&v290, v306);
                    }
LABEL_337:
                    v202 = (std::__shared_weak_count *)*((_QWORD *)&v306[0] + 1);
                    if (*((_QWORD *)&v306[0] + 1))
                    {
                      v203 = (unint64_t *)(*((_QWORD *)&v306[0] + 1) + 8);
                      do
                        v204 = __ldaxr(v203);
                      while (__stlxr(v204 - 1, v203));
                      if (!v204)
                      {
                        ((void (*)(std::__shared_weak_count *, __n128))v202->__on_zero_shared)(v202, v183);
                        std::__shared_weak_count::__release_weak(v202);
                      }
                    }
                  }
                }
                v205 = v293;
                if (v293.i64[0] == v293.i64[1])
                {
                  v212 = (__int128 *)v290;
                  v211 = (__int128 *)v291;
                  while (v212 != v211)
                  {
                    if (*(_QWORD *)v212 && *(_QWORD *)(*(_QWORD *)v212 + 48) != *(_QWORD *)(*(_QWORD *)v212 + 56))
                    {
                      memset(v318, 0, 32);
                      memset(buf, 0, sizeof(buf));
                      sub_18F6CC638((char **)buf, v212);
                      v213 = *(_QWORD *)(v5 + 56);
                      if (v213 >= *(_QWORD *)(v5 + 64))
                      {
                        v214 = sub_18F6CADE4(v276, (uint64_t)buf);
                      }
                      else
                      {
                        sub_18F6CAF94(*(_QWORD *)(v5 + 56), (uint64_t)buf);
                        v214 = v213 + 80;
                        *(_QWORD *)(v5 + 56) = v213 + 80;
                      }
                      *(_QWORD *)(v5 + 56) = v214;
                      *(_QWORD *)v311 = v318;
                      sub_18F62AB98((void ***)v311);
                      *(_QWORD *)v311 = &buf[24];
                      sub_18F62AB98((void ***)v311);
                      *(_QWORD *)v311 = buf;
                      sub_18F62AB98((void ***)v311);
                    }
                    ++v212;
                  }
                  if (v6 != 1 || *(_QWORD *)(v5 + 48) == *(_QWORD *)(v5 + 56))
                    goto LABEL_387;
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990890);
                  v215 = qword_1EE172170;
                  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                  {
                    v216 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v5 + 56) - *(_QWORD *)(v5 + 48)) >> 4);
                    *(_DWORD *)buf = 134349568;
                    *(double *)&buf[4] = v10;
                    *(_WORD *)&buf[12] = 2050;
                    *(_QWORD *)&buf[14] = v216;
                    *(_WORD *)&buf[22] = 1026;
                    *(_DWORD *)&buf[24] = 0;
                    _os_log_impl(&dword_18F5B3000, v215, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,combined candidates initialized using routeCandidateVector,%{public}lu,runIndex,%{public}d", buf, 0x1Cu);
                  }
                  v5 = a1;
                  v6 = v281;
                  if (!sub_18F5C4AE0(115, 2))
                  {
LABEL_387:
                    v228 = *(unint64_t *****)(v5 + 24);
                    v229 = *(unint64_t *****)(v5 + 32);
                    if (-1 - 0x5555555555555555 * (v229 - v228) == v6 && a3 != 0)
                    {
                      v231 = v290;
                      v232 = v291;
                      *(_QWORD *)&buf[8] = 0;
                      *(_QWORD *)&buf[16] = 0;
                      *(_QWORD *)buf = &buf[8];
                      while (v231 != v232)
                      {
                        if (*(_QWORD *)v231)
                        {
                          v233 = *(unint64_t ***)(*(_QWORD *)v231 + 32);
                          if (v233)
                          {
                            v234 = *v233;
                            if (*v233)
                            {
                              *(_QWORD *)v311 = *v233;
                              *((_BYTE *)sub_18F62CB48((uint64_t **)buf, v234, (uint64_t)&unk_18F772428, (_OWORD **)v311)
                              + 48) = 1;
                            }
                          }
                        }
                        v231 += 16;
                      }
                      v235 = *v282;
LABEL_399:
                      for (k = *v287; v235 != (uint64_t **)k; k = (uint64_t)v239)
                      {
                        v237 = (unint64_t *)**v235;
                        if (v237)
                        {
                          if (sub_18F62A584((uint64_t)buf, v237))
                          {
                            v235 += 2;
                            goto LABEL_399;
                          }
                          k = *v287;
                        }
                        if (v235 + 2 == (uint64_t **)k)
                        {
                          v239 = v235;
                        }
                        else
                        {
                          v238 = (uint64_t)v235;
                          do
                          {
                            v239 = (uint64_t **)(v238 + 16);
                            sub_18F62B3EC(v238, (__int128 *)(v238 + 16));
                            v240 = v238 + 32;
                            v238 += 16;
                          }
                          while (v240 != k);
                          k = *v287;
                        }
                        while ((uint64_t **)k != v239)
                        {
                          k -= 16;
                          sub_18F5D6004(k);
                        }
                        *v287 = (uint64_t)v239;
                      }
                      sub_18F62C738((uint64_t)buf, *(_QWORD **)&buf[8]);
                      v228 = *(unint64_t *****)(v5 + 24);
                      v229 = *(unint64_t *****)(v5 + 32);
                    }
                    if (v228 == v229)
                    {
                      v7 = v279;
                    }
                    else
                    {
                      do
                      {
                        v241 = v228[1];
                        if (v241 != *v228)
                        {
                          v242 = (uint64_t)*(v241 - 2);
                          if (v242)
                          {
                            if (*(double *)(v242 + 16) >= v10)
                              break;
                            *(_QWORD *)&buf[8] = 0;
                            *(_QWORD *)&buf[16] = 0;
                            *(_QWORD *)buf = &buf[8];
                            v243 = *(_QWORD *)(v5 + 48);
                            v244 = *(_QWORD *)(v5 + 56);
                            if (v243 != v244)
                            {
                              do
                              {
                                for (m = *(uint64_t **)(v243 + 24); m != *(uint64_t **)(v243 + 32); m += 2)
                                {
                                  v246 = *m;
                                  if (*m)
                                  {
                                    v247 = *v228;
                                    v248 = v228[1];
                                    if (*v228 != v248)
                                    {
                                      v249 = -1.0;
                                      while (1)
                                      {
                                        if (*v247)
                                        {
                                          v250 = vabdd_f64(*(double *)(v246 + 16), *((double *)*v247 + 2));
                                          if (v250 < v249 || v249 < 0.0)
                                            v249 = v250;
                                          if (v249 < 0.0001)
                                            break;
                                        }
                                        v247 += 2;
                                        if (v247 == v248)
                                          goto LABEL_432;
                                      }
                                      v252 = *(unint64_t **)v246;
                                      if (*(_QWORD *)v246)
                                      {
                                        *(_QWORD *)v311 = *(_QWORD *)v246;
                                        *((_BYTE *)sub_18F62CB48((uint64_t **)buf, v252, (uint64_t)&unk_18F772428, (_OWORD **)v311)+ 48) = 1;
                                      }
                                      break;
                                    }
                                  }
LABEL_432:
                                  ;
                                }
                                v243 += 80;
                              }
                              while (v243 != v244);
                              if (*(_QWORD *)&buf[16])
                              {
                                v254 = *v228;
                                v253 = (uint64_t)v228[1];
                                if ((unint64_t ***)v253 != *v228
                                  && *(_QWORD *)&buf[16] != (v253 - (uint64_t)*v228) >> 4)
                                {
                                  while (1)
                                  {
                                    v256 = **v254;
                                    if (!v256)
                                      goto LABEL_445;
                                    if (!sub_18F62A584((uint64_t)buf, v256))
                                      break;
                                    v254 += 2;
                                    v253 = (uint64_t)v228[1];
LABEL_453:
                                    if (v254 == (unint64_t ***)v253)
                                      goto LABEL_454;
                                  }
                                  v253 = (uint64_t)v228[1];
LABEL_445:
                                  if (v254 + 2 == (unint64_t ***)v253)
                                  {
                                    v258 = v254;
                                  }
                                  else
                                  {
                                    v257 = (uint64_t)v254;
                                    do
                                    {
                                      v258 = (unint64_t ***)(v257 + 16);
                                      sub_18F62B3EC(v257, (__int128 *)(v257 + 16));
                                      v259 = v257 + 32;
                                      v257 += 16;
                                    }
                                    while (v259 != v253);
                                    v253 = (uint64_t)v228[1];
                                  }
                                  while ((unint64_t ***)v253 != v258)
                                  {
                                    v253 -= 16;
                                    sub_18F5D6004(v253);
                                  }
                                  v228[1] = v258;
                                  v253 = (uint64_t)v258;
                                  goto LABEL_453;
                                }
                              }
                            }
LABEL_454:
                            sub_18F62C738((uint64_t)buf, *(_QWORD **)&buf[8]);
                          }
                        }
                        v228 += 3;
                      }
                      while (v228 != v229);
                      v7 = v279;
                    }
                    goto LABEL_458;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990890);
                  v217 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4);
                  *(_DWORD *)v311 = 134349568;
                  *(double *)&v311[4] = v10;
                  *(_WORD *)&v311[12] = 2050;
                  *(_QWORD *)&v311[14] = v217;
                  *(_WORD *)&v311[22] = 1026;
                  *(_DWORD *)&v311[24] = 0;
                  v218 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::generateAndCombineRoute(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const BOOL, int)", "CoreLocation: %s\n", v218);
                  if (v218 != (char *)buf)
                    free(v218);
                  v5 = a1;
                }
                else
                {
                  if (v276 == &v293)
                    goto LABEL_387;
                  v206 = 0xCCCCCCCCCCCCCCCDLL * ((v293.i64[1] - v293.i64[0]) >> 4);
                  v207 = *v272;
                  v208 = (void **)v276->i64[0];
                  if (0xCCCCCCCCCCCCCCCDLL * ((*v272 - v276->i64[0]) >> 4) >= v206)
                  {
                    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v5 + 56) - (_QWORD)v208) >> 4) >= v206)
                    {
                      v221 = sub_18F6CB250(v293.i64[0], v293.i64[1], v276->i64[0]);
                      v5 = a1;
                      for (n = *(void ***)(a1 + 56); n != (void **)v221; sub_18F6CA06C((uint64_t)v272, n))
                        n -= 10;
                      *(_QWORD *)(a1 + 56) = v221;
                      goto LABEL_386;
                    }
                    v219 = v293.i64[0] + 16 * ((uint64_t)(*(_QWORD *)(v5 + 56) - (_QWORD)v208) >> 4);
                    sub_18F6CB250(v293.i64[0], v219, v276->i64[0]);
                    v5 = a1;
                    v220 = sub_18F6CB0E4((uint64_t)v272, v219, v205.i64[1], *(_QWORD *)(a1 + 56));
                  }
                  else
                  {
                    if (v208)
                    {
                      v209 = *(void ***)(v5 + 56);
                      v210 = (void *)v276->i64[0];
                      if (v209 != v208)
                      {
                        do
                        {
                          v209 -= 10;
                          sub_18F6CA06C((uint64_t)v272, v209);
                        }
                        while (v209 != v208);
                        v210 = (void *)v276->i64[0];
                      }
                      *(_QWORD *)(a1 + 56) = v208;
                      operator delete(v210);
                      v207 = 0;
                      v276->i64[0] = 0;
                      v276->i64[1] = 0;
                      v276[1].i64[0] = 0;
                    }
                    if (v206 > 0x333333333333333)
                      goto LABEL_499;
                    v223 = 0xCCCCCCCCCCCCCCCDLL * (v207 >> 4);
                    v224 = 2 * v223;
                    if (2 * v223 <= v206)
                      v224 = 0xCCCCCCCCCCCCCCCDLL * ((v205.i64[1] - v205.i64[0]) >> 4);
                    v225 = v223 >= 0x199999999999999 ? 0x333333333333333 : v224;
                    if (v225 > 0x333333333333333)
LABEL_499:
                      sub_18F5F7864();
                    v226 = (char *)sub_18F6CB050(v225);
                    v5 = a1;
                    *(_QWORD *)(a1 + 48) = v226;
                    *(_QWORD *)(a1 + 56) = v226;
                    *(_QWORD *)(a1 + 64) = &v226[80 * v227];
                    v220 = sub_18F6CB0E4((uint64_t)v272, v205.i64[0], v205.i64[1], (uint64_t)v226);
                  }
                  *(_QWORD *)(v5 + 56) = v220;
                }
LABEL_386:
                v6 = v281;
                goto LABEL_387;
              }
            }
            else
            {
LABEL_302:
              if (v45)
                goto LABEL_303;
            }
            v196 = *(_QWORD *)(v5 + 24);
            v197 = v196 + 24 * v6;
            v200 = *(_QWORD *)(v197 + 8);
            v199 = (_QWORD *)(v197 + 8);
            v198 = v200;
            v201 = *(_QWORD *)(v196 + 24 * v6);
            while (v198 != v201)
              v198 = sub_18F5D6004(v198 - 16);
            *v199 = v201;
            v7 = v278;
LABEL_458:
            *(_QWORD *)buf = &v290;
            sub_18F62AB98((void ***)buf);
            *(_QWORD *)buf = &v293;
            sub_18F6C9FE8((void ***)buf);
            goto LABEL_459;
          }
          memset(v310, 0, 24);
          v17 = *(_QWORD **)(v5 + 48);
          v16 = *(_QWORD **)(v5 + 56);
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)&buf[16] = 0;
          *(_QWORD *)buf = &buf[8];
          v284 = v16;
          if (v17 == v16)
          {
            v38 = 0;
          }
          else
          {
            do
            {
              v18 = v17[1];
              if (*v17 != v18)
              {
                v19 = *(_QWORD *)(v18 - 16);
                if (v19)
                {
                  v20 = *(_QWORD ***)(v19 + 48);
                  v21 = *(_QWORD ***)(v19 + 56);
                  while (v20 != v21)
                  {
                    v22 = *v20;
                    if (*v20)
                    {
                      for (ii = *(uint64_t **)v14; ii != *v15; ii += 2)
                      {
                        v24 = (unint64_t **)*ii;
                        if (*ii)
                        {
                          v25 = *v24;
                          if (*v24)
                          {
                            v26 = *v25;
                            if (*v25 == *v22)
                            {
                              v27 = v25[1];
                              if (v27 == v22[1])
                              {
                                v28 = &buf[8];
                                v29 = &buf[8];
                                if (*(_QWORD *)&buf[8])
                                {
                                  v30 = *(_QWORD *)&buf[8];
                                  while (1)
                                  {
                                    while (1)
                                    {
                                      v28 = (uint8_t *)v30;
                                      v31 = *(_QWORD *)(v30 + 32);
                                      v32 = *((_QWORD *)v28 + 5);
                                      v33 = v32 > v27;
                                      if (v31 != v26)
                                        v33 = v31 > v26;
                                      if (!v33)
                                        break;
                                      v30 = *(_QWORD *)v28;
                                      v29 = v28;
                                      if (!*(_QWORD *)v28)
                                        goto LABEL_39;
                                    }
                                    v34 = v32 < v27;
                                    v94 = v31 == v26;
                                    v35 = v31 < v26;
                                    if (v94)
                                      v35 = v34;
                                    if (!v35)
                                      break;
                                    v30 = *((_QWORD *)v28 + 1);
                                    if (!v30)
                                    {
                                      v29 = v28 + 8;
                                      goto LABEL_39;
                                    }
                                  }
                                  v36 = v28;
                                }
                                else
                                {
LABEL_39:
                                  v36 = operator new(0x40uLL);
                                  v36[2] = *(_OWORD *)v25;
                                  *((_QWORD *)v36 + 6) = 0;
                                  *((_QWORD *)v36 + 7) = 0;
                                  *(_QWORD *)v36 = 0;
                                  *((_QWORD *)v36 + 1) = 0;
                                  *((_QWORD *)v36 + 2) = v28;
                                  *(_QWORD *)v29 = v36;
                                  v37 = (uint64_t *)v36;
                                  if (**(_QWORD **)buf)
                                  {
                                    *(_QWORD *)buf = **(_QWORD **)buf;
                                    v37 = *(uint64_t **)v29;
                                  }
                                  sub_18F62A74C(*(uint64_t **)&buf[8], v37);
                                  ++*(_QWORD *)&buf[16];
                                }
                                v14 = v286;
                                sub_18F623A40((_QWORD *)v36 + 6, ii);
                                v16 = v284;
                                break;
                              }
                            }
                          }
                        }
                      }
                    }
                    v20 += 2;
                  }
                }
              }
              v17 += 10;
            }
            while (v17 != v16);
            v38 = v310[1];
            v39 = v310[0];
            if (v310[1] != v310[0])
            {
              v5 = a1;
              v6 = v281;
              do
                v38 = (char *)sub_18F5D6004((uint64_t)(v38 - 16));
              while (v38 != v39);
              v38 = v39;
              goto LABEL_84;
            }
          }
          v5 = a1;
          v6 = v281;
LABEL_84:
          v310[1] = v38;
          v46 = *(uint8_t **)buf;
          if (*(uint8_t **)buf != &buf[8])
          {
            do
            {
              sub_18F623AB8(v310, (__int128 *)v46 + 3);
              v47 = (uint8_t *)*((_QWORD *)v46 + 1);
              if (v47)
              {
                do
                {
                  v48 = v47;
                  v47 = *(uint8_t **)v47;
                }
                while (v47);
              }
              else
              {
                do
                {
                  v48 = (uint8_t *)*((_QWORD *)v46 + 2);
                  v94 = *(_QWORD *)v48 == (_QWORD)v46;
                  v46 = v48;
                }
                while (!v94);
              }
              v46 = v48;
            }
            while (v48 != &buf[8]);
          }
          sub_18F6CB2E8(*(_QWORD **)&buf[8]);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990890);
          v49 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
          {
            v50 = ((uint64_t)*v15 - *(_QWORD *)v14) >> 4;
            *(_DWORD *)buf = 134349568;
            *(double *)&buf[4] = v10;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v50;
            *(_WORD *)&buf[22] = 2050;
            *(_QWORD *)&buf[24] = (v310[1] - v310[0]) >> 4;
            _os_log_impl(&dword_18F5B3000, v49, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,generatedPreferredSnap,allCount,%{public}lu,preferredCount,%{public}lu", buf, 0x20u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990890);
            v262 = ((uint64_t)*v15 - *(_QWORD *)v14) >> 4;
            *(_DWORD *)v311 = 134349568;
            *(double *)&v311[4] = v10;
            *(_WORD *)&v311[12] = 2050;
            *(_QWORD *)&v311[14] = v262;
            *(_WORD *)&v311[22] = 2050;
            *(_QWORD *)&v311[24] = (v310[1] - v310[0]) >> 4;
            v263 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::generateRouteCandidatesForOneSegment(const CFAbsoluteTime, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLRouteCandidateVector> &, std::vector<CLRouteCandidatePtr> &, std::vector<CLRouteCandidateVector> &)", "CoreLocation: %s\n", v263);
            if (v263 != (char *)buf)
              free(v263);
          }
          if (v310[0] != v310[1])
          {
            v304 = v288;
            v305 = v289;
            if (v289)
            {
              v51 = (unint64_t *)&v289->__shared_owners_;
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
            }
            sub_18F6D35A4((uint64_t *)v306, &v304, v310, v282, &v290);
            v53 = v305;
            if (v305)
            {
              v54 = (unint64_t *)&v305->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
          }
          *(_QWORD *)buf = v310;
          sub_18F62AB98((void ***)buf);
          goto LABEL_106;
        }
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990890);
        v44 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v10;
          _os_log_impl(&dword_18F5B3000, v44, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,generateRouteCandidatesForOneSegment,null or empty crntSnapVectorPointer", buf, 0xCu);
        }
        if (!sub_18F5C4AE0(115, 2))
        {
LABEL_81:
          v45 = 0;
          goto LABEL_298;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 == -1)
        {
LABEL_470:
          *(_DWORD *)v311 = 134349056;
          *(double *)&v311[4] = v10;
          v264 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::generateRouteCandidatesForOneSegment(const CFAbsoluteTime, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLRouteCandidateVector> &, std::vector<CLRouteCandidatePtr> &, std::vector<CLRouteCandidateVector> &)", "CoreLocation: %s\n", v264);
          if (v264 != (char *)buf)
            free(v264);
          goto LABEL_81;
        }
      }
      dispatch_once(&qword_1EE172168, &unk_1E2990890);
      goto LABEL_470;
    }
  }
}

void sub_18F6C9424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a65;

  a65 = (void **)&a47;
  sub_18F62AB98(&a65);
  a65 = (void **)&a50;
  sub_18F6C9FE8(&a65);
  _Unwind_Resume(a1);
}

void **sub_18F6C9614(void **a1)
{
  void **v3;

  v3 = a1 + 6;
  sub_18F62AB98(&v3);
  v3 = a1 + 3;
  sub_18F62AB98(&v3);
  v3 = a1;
  sub_18F62AB98(&v3);
  return a1;
}

void sub_18F6C9668(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  char v13;

  v5 = *(uint64_t ***)(a1 + 24);
  v4 = *(uint64_t ***)(a1 + 32);
  if (v5 == v4)
  {
LABEL_7:
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    while (1)
    {
      v6 = *v5;
      if ((char *)v5[1] - (char *)*v5 == 16)
      {
        v7 = *v6;
        if (*v6)
        {
          v8 = *(double *)(v7 + 16);
          if (v8 > a3 + 1.0)
            goto LABEL_7;
          if (vabdd_f64(v8, a3) < 0.0001)
            break;
        }
      }
      v5 += 3;
      if (v5 == v4)
        goto LABEL_7;
    }
    sub_18F5D5990(__p, (char *)&unk_18F7CAD17);
    sub_18F67EDDC(v7, (uint64_t *)__p);
    if (v13 < 0)
      operator delete(__p[0]);
    v9 = (*v5)[1];
    *a2 = **v5;
    a2[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
}

void sub_18F6C9744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F6C9760(uint64_t a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;

  v11 = 0uLL;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v4 == v5)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    do
    {
      v7 = *(uint64_t **)v4;
      if (*(_QWORD *)(v4 + 8) - *(_QWORD *)v4 == 16 && *v7)
      {
        if (*(double *)(*v7 + 16) >= a3)
        {
          *(_OWORD *)a2 = v11;
          return;
        }
        sub_18F623A40(&v11, v7);
      }
      v4 += 24;
    }
    while (v4 != v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    *a2 = 0;
    a2[1] = 0;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

uint64_t sub_18F6C9830(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  double v11;
  uint64_t v12;
  uint64_t result;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  objc_msgSend_removeAllObjects(*(void **)(a1 + 120), a2, a3, a4);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32) - v7;
  if (v8)
  {
    v9 = v8 / 24;
    if (v9 <= 1)
      v9 = 1;
    v10 = (_QWORD *)(v7 + 8);
    v11 = -1.0;
    do
    {
      v12 = *(v10 - 1);
      if (*v10 != v12 && (unint64_t)(*v10 - v12) <= 0x10)
        v11 = *(double *)(*(_QWORD *)v12 + 16);
      v10 += 3;
      --v9;
    }
    while (v9);
  }
  else
  {
    v11 = -1.0;
  }
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v6, (uint64_t)&v27, (uint64_t)v31, 16);
  if (result)
  {
    v18 = result;
    v19 = *(_QWORD *)v28;
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v28 != v19)
          objc_enumerationMutation(a2);
        v21 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v20);
        v22 = (void *)objc_msgSend_timestamp(v21, v15, v16, v17);
        objc_msgSend_timeIntervalSinceReferenceDate(v22, v23, v24, v25);
        if (v26 > v11)
          objc_msgSend_addObject_(*(void **)(a1 + 120), v15, (uint64_t)v21, v17);
        ++v20;
      }
      while (v18 != v20);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v15, (uint64_t)&v27, (uint64_t)v31, 16);
      v18 = result;
    }
    while (result);
  }
  return result;
}

os_log_t sub_18F6C99A8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1EE172170 = (uint64_t)result;
  return result;
}

char *sub_18F6C99D4(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      sub_18F5F7864();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_18F610B1C(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_18F610B1C(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_18F6C9C14((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_18F6C9BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_18F6C9C14(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

char *sub_18F6C9CD8(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = sub_18F62AB24(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_18F6C9D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_18F62AB98(&a9);
  _Unwind_Resume(a1);
}

char *sub_18F6C9D78(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = sub_18F62AB24(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_18F6C9E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_18F62AB98(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6C9E18(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = a2;
  v8 = a1[2];
  v9 = (_QWORD *)*a1;
  if (a4 > (v8 - *a1) >> 4)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = v9;
      if ((_QWORD *)v10 != v9)
      {
        do
          v10 = sub_18F5D6004(v10 - 16);
        while ((_QWORD *)v10 != v9);
        v11 = (_QWORD *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      sub_18F5F7864();
    v12 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v12 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    result = (uint64_t)sub_18F62AB24(a1, v13);
    v15 = (uint64_t *)a1[1];
    while (v6 != a3)
    {
      v16 = v6[1];
      *v15 = *v6;
      v15[1] = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v6 += 2;
      v15 += 2;
    }
LABEL_29:
    a1[1] = v15;
    return result;
  }
  result = a1[1];
  v19 = (result - (uint64_t)v9) >> 4;
  if (v19 < a4)
  {
    v20 = &a2[2 * v19];
    if ((_QWORD *)result != v9)
    {
      do
      {
        v21 = *v6;
        v22 = v6[1];
        v6 += 2;
        result = (uint64_t)sub_18F62D304(v9, v21, v22);
        v9 += 2;
      }
      while (v6 != v20);
      v9 = (_QWORD *)a1[1];
    }
    v15 = v9;
    if (v20 != a3)
    {
      v15 = v9;
      do
      {
        v23 = v20[1];
        *v15 = *v20;
        v15[1] = v23;
        if (v23)
        {
          v24 = (unint64_t *)(v23 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v20 += 2;
        v15 += 2;
      }
      while (v20 != a3);
    }
    goto LABEL_29;
  }
  if (a2 == a3)
  {
    v26 = v9;
  }
  else
  {
    v26 = v9;
    do
    {
      v27 = *v6;
      v28 = v6[1];
      v6 += 2;
      sub_18F62D304(v9, v27, v28);
      v9 += 2;
      v26 += 2;
    }
    while (v6 != a3);
    result = a1[1];
  }
  while ((_QWORD *)result != v26)
    result = sub_18F5D6004(result - 16);
  a1[1] = v26;
  return result;
}

void sub_18F6C9FE8(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 10;
        sub_18F6CA06C((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18F6CA06C(uint64_t a1, void **a2)
{
  void **v3;

  v3 = a2 + 6;
  sub_18F62AB98(&v3);
  v3 = a2 + 3;
  sub_18F62AB98(&v3);
  v3 = a2;
  sub_18F62AB98(&v3);
}

_QWORD *sub_18F6CA0BC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD v33[5];

  v5 = (_QWORD *)a2;
  if (a5 < 1)
    return v5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *a1;
    v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60)
      sub_18F5F7864();
    v15 = (a2 - v13) >> 4;
    v16 = v10 - v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v33[4] = v9;
    if (v17)
      v18 = (char *)sub_18F62AB64(v9, v17);
    else
      v18 = 0;
    v26 = (uint64_t *)&v18[16 * v15];
    v33[0] = v18;
    v33[1] = v26;
    v33[3] = &v18[16 * v17];
    v27 = &v26[2 * a5];
    do
    {
      *v26 = *a3;
      v28 = a3[1];
      v26[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v26 += 2;
      a3 += 2;
    }
    while (v26 != v27);
    v33[2] = v27;
    v5 = (_QWORD *)sub_18F62C3FC(a1, v33, v5);
    sub_18F62C334((uint64_t)v33);
    return v5;
  }
  v19 = (uint64_t)(v12 - a2) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
LABEL_29:
    sub_18F62C380((uint64_t)a1, a2, v12, (char *)(a2 + 16 * a5));
    if (v20 != a3)
    {
      v31 = v5;
      do
      {
        sub_18F623A40(v31, a3);
        a3 += 2;
        v31 += 2;
      }
      while (a3 != v20);
    }
    return v5;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = *(uint64_t **)(v9 - 8);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = *(uint64_t **)(v9 - 8);
    do
    {
      *v22 = *v21;
      v23 = v21[1];
      v22[1] = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 2;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v12 - a2) >= 1)
    goto LABEL_29;
  return v5;
}

void sub_18F6CA294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F62C334((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6CA2A8(uint64_t *a1, _QWORD **a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  int64x2_t v14;
  char *v15;
  char *v17;
  int64x2_t v18;
  char *v19;
  _QWORD *v20;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_18F5F7864();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_18F5F689C();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  v19 = &v7[24 * v6];
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = 0;
  sub_18F6CA41C(v8, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v9 = v18.i64[0];
  v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  v12 = (_QWORD *)*a1;
  v11 = (_QWORD *)a1[1];
  if (v11 == (_QWORD *)*a1)
  {
    v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      v9 -= 24;
      *(_QWORD *)(v9 + 16) = 0;
      v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)v9 = v13;
      *(_QWORD *)(v9 + 16) = v11[2];
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    v14 = *(int64x2_t *)a1;
    v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  v18 = v14;
  v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  v19 = v15;
  v17 = (char *)v14.i64[0];
  sub_18F62CBD0((uint64_t)&v17);
  return v10;
}

void sub_18F6CA408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F62CBD0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_18F6CA41C(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = sub_18F62AB24(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_18F6CA4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_18F62AB98(&a9);
  _Unwind_Resume(a1);
}

char *sub_18F6CA4BC(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = sub_18F6C9D78((char *)v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_QWORD *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_18F6CA504(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_18F6CA50C(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_18F5F7864();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_18F5F6858(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_18F6C9D78(v11, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v15 += 24;
  sub_18F6CA620(a1, v14);
  v12 = a1[1];
  sub_18F6CA7B0(v14);
  return v12;
}

void sub_18F6CA60C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F6CA7B0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6CA620(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_18F6CA694((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_18F6CA694(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_18F6CA734((uint64_t)v11);
  return v9;
}

uint64_t sub_18F6CA734(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_18F6CA768(a1);
  return a1;
}

void sub_18F6CA768(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    sub_18F62AB98(&v3);
    v1 += 3;
  }
}

void **sub_18F6CA7B0(void **a1)
{
  sub_18F6CA7E0((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_18F6CA7E0(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    sub_18F62AB98(&v5);
  }
}

void **sub_18F6CA830(void **result, _QWORD *a2, uint64_t **a3, _QWORD **a4, uint64_t a5)
{
  uint64_t **v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t **v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26[2];
  char *v27;
  char *v28;
  uint64_t v29;

  if (a5 >= 1)
  {
    v6 = a3;
    v8 = (uint64_t *)result;
    v11 = result[2];
    v9 = (uint64_t)(result + 2);
    v10 = (uint64_t)v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = &a3[3 * a5];
      }
      else
      {
        v21 = &a3[(uint64_t)(v12 - (_QWORD)a2) >> 3];
        result = (void **)sub_18F6CAB50(v9, v21, a4, *(_QWORD *)(v9 - 8));
        v8[1] = (uint64_t)result;
        if (v20 < 1)
          return result;
      }
      sub_18F6CAA24((uint64_t)v8, a2, v12, (uint64_t)&a2[3 * a5]);
      return (void **)sub_18F6CACEC((uint64_t)v26, v6, v21, (uint64_t)a2);
    }
    v13 = *v8;
    v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *v8) >> 3);
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      sub_18F5F7864();
    v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= v14)
      v17 = v14;
    if (v16 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v17;
    v29 = v9;
    if (v18)
      v19 = (char *)sub_18F5F6858(v9, v18);
    else
      v19 = 0;
    v22 = &v19[24 * v15];
    v26[0] = v19;
    v26[1] = v22;
    v27 = v22;
    v28 = &v19[24 * v18];
    v23 = 3 * a5;
    v24 = &v22[24 * a5];
    v25 = 8 * v23;
    do
    {
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = 0;
      sub_18F6C9D78(v22, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
      v22 += 24;
      v6 += 3;
      v25 -= 24;
    }
    while (v25);
    v27 = v24;
    sub_18F6CAAA0(v8, v26, a2);
    return sub_18F6CA7B0(v26);
  }
  return result;
}

void sub_18F6CA9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18F6CAA24(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v11;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)((char *)a2 + v6 - a4);
  v8 = (_QWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD **)(a1 + 8);
    do
    {
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v8[2] = v9[2];
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v8 += 3;
      v9 += 3;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_18F6CAC7C((uint64_t)&v11, a2, v7, v6);
}

uint64_t sub_18F6CAAA0(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  sub_18F6CA694((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (_QWORD *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_18F6CAD58(v7, (uint64_t)a3, a1[1], (_QWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_18F6CAB50(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD **v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_18F6C9D78((char *)v4, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
      v4 = v11 + 24;
      v11 += 24;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_18F6CAC00((uint64_t)v8);
  return v4;
}

void sub_18F6CABEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F6CAC00((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6CAC00(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_18F6CAC34(a1);
  return a1;
}

void sub_18F6CAC34(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    sub_18F62AB98(&v3);
  }
}

_QWORD *sub_18F6CAC7C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = a4 - 24;
    v7 = a3;
    do
    {
      sub_18F62AC70((void **)v6);
      v8 = *(_OWORD *)(v7 - 3);
      v7 -= 3;
      *(_OWORD *)v6 = v8;
      *(_QWORD *)(v6 + 16) = v7[2];
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      v6 -= 24;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t **sub_18F6CACEC(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t **v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t **)a4)
        sub_18F62C588(a4, *v5, v5[1], ((char *)v5[1] - (char *)*v5) >> 4);
      v5 += 3;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *sub_18F6CAD58(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD v6[3];
  char v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v4[2] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7 = 1;
  sub_18F6CAC00((uint64_t)v6);
  return v4;
}

uint64_t sub_18F6CADE4(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int64x2_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64x2_t v16;
  unint64_t v17;
  unint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  uint64_t *v22;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333)
    sub_18F5F7864();
  v6 = a1 + 1;
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v3)
    v3 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x199999999999999)
    v7 = 0x333333333333333;
  else
    v7 = v3;
  v22 = (uint64_t *)v6;
  if (v7)
    v7 = (unint64_t)sub_18F6CB050(v7);
  else
    v8 = 0;
  v19 = v7;
  v20.i64[0] = v7 + 80 * v2;
  v21 = v7 + 80 * v8;
  sub_18F6CAF94(v20.i64[0], a2);
  v9 = v20.i64[0];
  v10 = v20.i64[0] + 80;
  v20.i64[1] = v20.i64[0] + 80;
  v12 = a1->i64[0];
  v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    v16 = vdupq_n_s64(v11);
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = v9 + v13;
      v15 = v11 + v13;
      *(_QWORD *)(v14 - 80) = 0;
      *(_QWORD *)(v14 - 72) = 0;
      *(_QWORD *)(v14 - 64) = 0;
      *(_OWORD *)(v14 - 80) = *(_OWORD *)(v11 + v13 - 80);
      *(_QWORD *)(v14 - 64) = *(_QWORD *)(v11 + v13 - 64);
      *(_QWORD *)(v15 - 80) = 0;
      *(_QWORD *)(v15 - 72) = 0;
      *(_QWORD *)(v15 - 64) = 0;
      *(_QWORD *)(v14 - 56) = 0;
      *(_QWORD *)(v14 - 48) = 0;
      *(_QWORD *)(v14 - 40) = 0;
      *(_OWORD *)(v14 - 56) = *(_OWORD *)(v11 + v13 - 56);
      *(_QWORD *)(v14 - 40) = *(_QWORD *)(v11 + v13 - 40);
      *(_QWORD *)(v15 - 56) = 0;
      *(_QWORD *)(v15 - 48) = 0;
      *(_QWORD *)(v15 - 40) = 0;
      *(_QWORD *)(v14 - 32) = 0;
      *(_QWORD *)(v14 - 24) = 0;
      *(_QWORD *)(v14 - 16) = 0;
      *(_OWORD *)(v14 - 32) = *(_OWORD *)(v11 + v13 - 32);
      *(_QWORD *)(v14 - 16) = *(_QWORD *)(v11 + v13 - 16);
      *(_QWORD *)(v15 - 32) = 0;
      *(_QWORD *)(v15 - 24) = 0;
      *(_QWORD *)(v15 - 16) = 0;
      *(_QWORD *)(v14 - 8) = *(_QWORD *)(v11 + v13 - 8);
      v13 -= 80;
    }
    while (v11 + v13 != v12);
    v16 = *a1;
    v10 = v20.i64[1];
    v9 += v13;
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  v20 = v16;
  v17 = a1[1].u64[0];
  a1[1].i64[0] = v21;
  v21 = v17;
  v19 = v16.i64[0];
  sub_18F6CB094((uint64_t)&v19);
  return v10;
}

void sub_18F6CAF80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F6CB094((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_18F6CAF94(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_18F6C9CD8((char *)a1, *(_QWORD **)a2, *(_QWORD **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_18F6C9D78((char *)(a1 + 24), *(_QWORD **)(a2 + 24), *(_QWORD **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 4);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_18F6C9D78((char *)(a1 + 48), *(_QWORD **)(a2 + 48), *(_QWORD **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 4);
  result = *(double *)(a2 + 72);
  *(double *)(a1 + 72) = result;
  return result;
}

void sub_18F6CB024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F62AB98((void ***)va);
  sub_18F62AB98((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_18F6CB050(unint64_t a1)
{
  if (a1 >= 0x333333333333334)
    sub_18F5F689C();
  return operator new(80 * a1);
}

uint64_t sub_18F6CB094(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = i - 80;
    sub_18F6CA06C(v4, (void **)(i - 80));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_18F6CB0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;

  v4 = a4;
  v8 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_18F6C9CD8((char *)v4, *(_QWORD **)v6, *(_QWORD **)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 4);
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 40) = 0;
      sub_18F6C9D78((char *)(v4 + 24), *(_QWORD **)(v6 + 24), *(_QWORD **)(v6 + 32), (uint64_t)(*(_QWORD *)(v6 + 32) - *(_QWORD *)(v6 + 24)) >> 4);
      *(_QWORD *)(v4 + 48) = 0;
      *(_QWORD *)(v4 + 56) = 0;
      *(_QWORD *)(v4 + 64) = 0;
      sub_18F6C9D78((char *)(v4 + 48), *(_QWORD **)(v6 + 48), *(_QWORD **)(v6 + 56), (uint64_t)(*(_QWORD *)(v6 + 56) - *(_QWORD *)(v6 + 48)) >> 4);
      *(_QWORD *)(v4 + 72) = *(_QWORD *)(v6 + 72);
      v4 = v8 + 80;
      v8 += 80;
      v6 += 80;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_18F6CB1B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v4 - 40) = v3;
  sub_18F62AB98((void ***)(v4 - 40));
  *(_QWORD *)(v4 - 40) = v2;
  sub_18F62AB98((void ***)(v4 - 40));
  sub_18F6CB1F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6CB1F0(uint64_t a1)
{
  void ***v2;
  void ***v3;
  void **v4;
  void **v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(void ****)(a1 + 8);
    v2 = *(void ****)(a1 + 16);
    v4 = *v2;
    v5 = *v3;
    if (*v2 != *v3)
    {
      v6 = *(_QWORD *)a1;
      do
      {
        v4 -= 10;
        sub_18F6CA06C(v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

uint64_t sub_18F6CB250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a3 + 48;
    do
    {
      if (v4 != v5 - 48)
      {
        sub_18F6C9E18((_QWORD *)(v5 - 48), *(uint64_t **)v4, *(uint64_t **)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 4);
        sub_18F62C588(v5 - 24, *(uint64_t **)(v4 + 24), *(uint64_t **)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 4);
        sub_18F62C588(v5, *(uint64_t **)(v4 + 48), *(uint64_t **)(v4 + 56), (uint64_t)(*(_QWORD *)(v4 + 56) - *(_QWORD *)(v4 + 48)) >> 4);
      }
      *(_QWORD *)(v5 + 24) = *(_QWORD *)(v4 + 72);
      v4 += 80;
      v5 += 80;
    }
    while (v4 != a2);
    return v5 - 48;
  }
  return a3;
}

void sub_18F6CB2E8(_QWORD *a1)
{
  if (a1)
  {
    sub_18F6CB2E8(*a1);
    sub_18F6CB2E8(a1[1]);
    sub_18F5D6004((uint64_t)(a1 + 6));
    operator delete(a1);
  }
}

void sub_18F6CB328(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298DEB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18F6CB338(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298DEB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194002D30);
}

uint64_t sub_18F6CB368(uint64_t a1)
{
  char v2;

  return sub_18F6CB390((uint64_t)&v2, a1 + 24);
}

uint64_t sub_18F6CB390(uint64_t a1, uint64_t a2)
{
  void **v4;

  v4 = (void **)(a2 + 48);
  sub_18F62AB98(&v4);
  sub_18F5D6004(a2 + 32);
  return sub_18F5D6004(a2 + 16);
}

uint64_t sub_18F6CB3D4(uint64_t a1, double *a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  double v10;
  char v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  double *v15;
  double *v16;
  double v17;
  int v18;
  uint64_t v19;
  double v20;
  NSObject *v21;
  NSObject *v22;
  double v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t result;
  NSObject *v27;
  char *v28;
  double *v29;
  uint64_t v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  NSObject *v44;
  double v45;
  double v46;
  double v47[2];
  double buf[205];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!*a3)
    return 0;
  sub_18F623A40((_QWORD *)a1, a3);
  v6 = *(_QWORD *)a1;
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v6)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v12 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_ERROR, "CLMM, NULL road", (uint8_t *)buf, 2u);
    }
    v10 = 0.0;
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_41;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
LABEL_88:
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    goto LABEL_15;
  }
  v9 = (*(_QWORD *)(v6 + 144) - *(_QWORD *)(v6 + 136)) >> 4;
  if ((int)v9 <= 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v14 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", (uint8_t *)buf, 2u);
    }
    v10 = 0.0;
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_41;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_85;
    goto LABEL_89;
  }
  v10 = 0.0;
  if ((_DWORD)v9 == 1)
  {
    v11 = 1;
    goto LABEL_42;
  }
  sub_18F7047B4(v6);
  if ((_DWORD)v9 - 1 != (uint64_t)(*(_QWORD *)(v6 + 168) - *(_QWORD *)(v6 + 160)) >> 3)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v22 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", (uint8_t *)buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_41;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_85;
    goto LABEL_89;
  }
  sub_18F7047B4(v6);
  v15 = *(double **)(v6 + 160);
  v16 = *(double **)(v6 + 168);
  if (v15 != v16)
  {
    v17 = 0.0;
    v18 = 2;
    v19 = 24;
    while (1)
    {
      v20 = *v15 / *(double *)(v6 + 40);
      if (vabdd_f64(0.5, v17 + v20) < 0.000001)
        break;
      if (v17 + v20 > 0.5)
      {
        v36 = (0.5 - v17) / v20;
        v37 = (double *)(*(_QWORD *)(v6 + 136) + v19);
        v38 = *(v37 - 2);
        v39 = *(v37 - 3);
        v40 = *v37;
        v41 = v38 + 360.0;
        if (v38 >= 0.0)
          v41 = *(v37 - 2);
        v42 = v40 + 360.0;
        if (v40 >= 0.0)
          v42 = *v37;
        v43 = v42 - v41;
        if (v43 <= 180.0)
        {
          if (v43 < -180.0)
            v43 = v43 + 360.0;
        }
        else
        {
          v43 = v43 + -360.0;
        }
        v45 = *(v37 - 1);
        v23 = fmod(v38 + v43 * v36, 360.0);
        if (v23 <= -180.0)
        {
          v23 = v23 + 360.0;
        }
        else if (v23 > 180.0)
        {
          v23 = v23 + -360.0;
        }
        v10 = v39 + (v45 - v39) * v36;
        v33 = a2;
        v34 = v39;
        v35 = v38;
        v31 = v45;
        v32 = v40;
LABEL_82:
        sub_18F5BD37C(v33, buf, v47, &v46, v34, v35, 0.0, v31, v32, 0.0);
        v11 = 1;
        if (v5)
          goto LABEL_43;
        goto LABEL_47;
      }
      ++v15;
      v19 += 16;
      ++v18;
      v17 = v17 + v20;
      if (v15 == v16)
        goto LABEL_29;
    }
    if (v18 < (int)v9)
    {
      v29 = (double *)(*(_QWORD *)(v6 + 136) + v19);
      v10 = *(v29 - 1);
      v23 = *v29;
      sub_18F5BD37C(a2, buf, v47, &v46, *(v29 - 3), *(v29 - 2), 0.0, v10, *v29, 0.0);
      v30 = *(_QWORD *)(v6 + 136) + v19;
      v31 = *(double *)(v30 + 8);
      v32 = *(double *)(v30 + 16);
      v33 = a2;
      v34 = v10;
      v35 = v23;
      goto LABEL_82;
    }
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v44 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_18F5B3000, v44, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", (uint8_t *)buf, 2u);
    }
    v10 = 0.0;
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_41;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      goto LABEL_88;
LABEL_15:
    LOWORD(v47[0]) = 0;
    v13 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v13);
    goto LABEL_86;
  }
LABEL_29:
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29908B0);
  v21 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_18F5B3000, v21, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", (uint8_t *)buf, 2u);
  }
  if (!sub_18F5C4AE0(115, 2))
    goto LABEL_41;
  bzero(buf, 0x65CuLL);
  if (qword_1EE172158 != -1)
LABEL_89:
    dispatch_once(&qword_1EE172158, &unk_1E29908B0);
LABEL_85:
  LOWORD(v47[0]) = 0;
  v13 = (char *)_os_log_send_and_compose_impl();
  sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v13);
LABEL_86:
  if (v13 != (char *)buf)
    free(v13);
LABEL_41:
  v11 = 0;
LABEL_42:
  v23 = 0.0;
  if (v5)
  {
LABEL_43:
    v24 = (unint64_t *)&v5->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_47:
  if ((v11 & 1) != 0)
  {
    *(double *)(a1 + 24) = v10;
    *(double *)(a1 + 32) = v23;
    return 1;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29908B0);
  v27 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_18F5B3000, v27, OS_LOG_TYPE_ERROR, "CLTSP,Unable to find mid-point", (uint8_t *)buf, 2u);
  }
  result = sub_18F5C4AE0(115, 0);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    LOWORD(v47[0]) = 0;
    v28 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLRouteRoad::initialize(CLDistanceCalc &, const CLMapRoadPtr)", "CoreLocation: %s\n", v28);
    if (v28 != (char *)buf)
      free(v28);
    return 0;
  }
  return result;
}

void sub_18F6CBDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F6CBDF4(uint64_t *a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v3 = *a2;
  if (!v3)
    return 0;
  result = *a1;
  if (result)
  {
    if (*(_BYTE *)(result + 117))
      return sub_18F705944(result, v3);
    if ((~*(_DWORD *)(result + 112) & 0x7FFFFFFF) == 0)
      return sub_18F705944(result, v3);
    v6 = *v3;
    if (*(_BYTE *)(*v3 + 116) || (~*(_DWORD *)(v6 + 108) & 0x7FFFFFFF) == 0 || *(_BYTE *)(v6 + 117))
    {
      return sub_18F705944(result, v3);
    }
    else
    {
      v7 = *(_DWORD *)(v6 + 112);
      result = sub_18F705944(result, v3);
      if ((_DWORD)result && (v7 & 0x7FFFFFFF) != 0x7FFFFFFF)
      {
        v8 = *(_DWORD *)(*a1 + 112);
        v9 = **a2;
        return v8 == *(_DWORD *)(v9 + 108) || v8 == *(_DWORD *)(v9 + 112);
      }
    }
  }
  return result;
}

double sub_18F6CBECC(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  signed int v7;
  double v8;

  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  if (v3 != a2)
  {
    v7 = 0;
    goto LABEL_5;
  }
  v5 = (*(_QWORD *)(v4 + 144) - *(_QWORD *)(v4 + 136)) >> 4;
  v6 = -1.0;
  v7 = v5 - 2;
  if ((int)v5 >= 2)
LABEL_5:
    v6 = sub_18F704B68(v4, v7);
  v8 = 180.0;
  if (*(_BYTE *)(a1 + 16))
    v8 = 0.0;
  return v6 - v8;
}

_QWORD *sub_18F6CBF38(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  if (*a2)
  {
    v2 = *(_QWORD *)*a2;
    if (v2)
    {
      v5 = *(_QWORD *)(v2 + 8);
      v4 = sub_18F6D7050((uint64_t)result, v5, (uint64_t *)&v5);
      return sub_18F62D304(v4 + 3, *a2, a2[1]);
    }
  }
  return result;
}

void sub_18F6CBF88(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  char v20;

  if (a2)
  {
    if (*(_QWORD *)a2)
    {
      v3 = a1[3];
      if (v3)
      {
        v4 = *(_QWORD *)(*(_QWORD *)a2 + 8);
        if (sub_18F6D74A8(a1, v4))
        {
          v5 = (int8x8_t)a1[1];
          if (v5)
          {
            v6 = (uint8x8_t)vcnt_s8(v5);
            v6.i16[0] = vaddlv_u8(v6);
            if (v6.u32[0] > 1uLL)
            {
              v7 = v4;
              if (*(_QWORD *)&v5 <= v4)
                v7 = v4 % *(_QWORD *)&v5;
            }
            else
            {
              v7 = (*(_QWORD *)&v5 - 1) & v4;
            }
            v8 = *a1;
            v9 = *(uint64_t ***)(*a1 + 8 * v7);
            if (v9)
            {
              v10 = *v9;
              if (v10)
              {
                v11 = *(_QWORD *)&v5 - 1;
                do
                {
                  v12 = v10[1];
                  if (v12 == v4)
                  {
                    if (v10[2] == v4)
                    {
                      if (v6.u32[0] > 1uLL)
                      {
                        if (v4 >= *(_QWORD *)&v5)
                          v4 %= *(_QWORD *)&v5;
                      }
                      else
                      {
                        v4 &= v11;
                      }
                      v13 = *(uint64_t **)(v8 + 8 * v4);
                      do
                      {
                        v14 = v13;
                        v13 = (uint64_t *)*v13;
                      }
                      while (v13 != v10);
                      if (v14 == a1 + 2)
                        goto LABEL_40;
                      v15 = v14[1];
                      if (v6.u32[0] > 1uLL)
                      {
                        if (v15 >= *(_QWORD *)&v5)
                          v15 %= *(_QWORD *)&v5;
                      }
                      else
                      {
                        v15 &= v11;
                      }
                      if (v15 != v4)
                      {
LABEL_40:
                        if (!*v10)
                          goto LABEL_41;
                        v16 = *(_QWORD *)(*v10 + 8);
                        if (v6.u32[0] > 1uLL)
                        {
                          if (v16 >= *(_QWORD *)&v5)
                            v16 %= *(_QWORD *)&v5;
                        }
                        else
                        {
                          v16 &= v11;
                        }
                        if (v16 != v4)
LABEL_41:
                          *(_QWORD *)(v8 + 8 * v4) = 0;
                      }
                      v17 = *v10;
                      if (*v10)
                      {
                        v18 = *(_QWORD *)(v17 + 8);
                        if (v6.u32[0] > 1uLL)
                        {
                          if (v18 >= *(_QWORD *)&v5)
                            v18 %= *(_QWORD *)&v5;
                        }
                        else
                        {
                          v18 &= v11;
                        }
                        if (v18 != v4)
                        {
                          *(_QWORD *)(*a1 + 8 * v18) = v14;
                          v17 = *v10;
                        }
                      }
                      *v14 = v17;
                      *v10 = 0;
                      a1[3] = v3 - 1;
                      v19[0] = v10;
                      v19[1] = a1 + 2;
                      v20 = 1;
                      sub_18F6D7464((uint64_t)v19);
                      return;
                    }
                  }
                  else
                  {
                    if (v6.u32[0] > 1uLL)
                    {
                      if (v12 >= *(_QWORD *)&v5)
                        v12 %= *(_QWORD *)&v5;
                    }
                    else
                    {
                      v12 &= v11;
                    }
                    if (v12 != v7)
                      return;
                  }
                  v10 = (uint64_t *)*v10;
                }
                while (v10);
              }
            }
          }
        }
      }
    }
  }
}

BOOL sub_18F6CC18C(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  double v8;
  uint64_t v9;
  double v10;

  v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v8 = -1.0;
    while (1)
    {
      v9 = v7[3];
      if (v8 >= 0.0)
      {
        if (!v9)
          goto LABEL_14;
        v10 = *(double *)(v9 + 56) + *(double *)(v9 + 64);
        if (v10 >= v8)
          goto LABEL_14;
      }
      else
      {
        v10 = *(double *)(v9 + 56) + *(double *)(v9 + 64);
      }
      sub_18F62D304(a2, v9, v7[4]);
      v8 = v10;
LABEL_14:
      v7 = (_QWORD *)*v7;
      if (!v7)
        return v8 >= 0.0;
    }
  }
  v8 = -1.0;
  return v8 >= 0.0;
}

_QWORD *sub_18F6CC268(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;

  v3 = result;
  if (a3 && *(_QWORD *)a3 && (v5 = *(_QWORD *)(*(_QWORD *)a3 + 8), (result = sub_18F6D74A8(a2, v5)) != 0))
  {
    v9 = v5;
    result = sub_18F6D7050((uint64_t)a2, v5, (uint64_t *)&v9);
    v6 = result[4];
    *v3 = result[3];
    v3[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

BOOL sub_18F6CC2F4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  return a1[6] != a1[7] && (v1 = (_QWORD *)a1[2]) != 0 && (v2 = (_QWORD *)a1[4]) != 0 && *v1 && *v2 != 0;
}

double sub_18F6CC33C(_QWORD *a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;

  v2 = 0.0;
  if (sub_18F6CC2F4(a1))
  {
    v3 = a1[6];
    v4 = a1[7] - v3;
    if (v4)
    {
      v5 = 0;
      v6 = 0;
      v7 = v4 >> 4;
      do
      {
        if (!v6
          && (v8 = a1[2], **(_QWORD **)v8 == **(_QWORD **)v3)
          && *(_QWORD *)(*(_QWORD *)v8 + 8) == *(_QWORD *)(*(_QWORD *)v3 + 8))
        {
          sub_18F6CC438(v8);
        }
        else
        {
          if (v6 != v7 - 1)
          {
            v11 = *(_QWORD *)(v3 + v5);
LABEL_13:
            sub_18F7047B4(v11);
            v9 = *(double *)(v11 + 40);
            goto LABEL_14;
          }
          v10 = a1[4];
          v11 = *(_QWORD *)(v3 + v5);
          if (**(_QWORD **)v10 != *(_QWORD *)v11 || *(_QWORD *)(*(_QWORD *)v10 + 8) != *(_QWORD *)(v11 + 8))
            goto LABEL_13;
          sub_18F6CC498(v10);
        }
LABEL_14:
        v2 = v2 + v9;
        ++v6;
        v3 = a1[6];
        v7 = (a1[7] - v3) >> 4;
        v5 += 16;
      }
      while (v7 > v6);
    }
  }
  return v2;
}

uint64_t sub_18F6CC438(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)result;
  if (*(_BYTE *)(result + 65))
  {
    if (!v1)
      return result;
  }
  else if (!v1)
  {
    return result;
  }
  return sub_18F7047B4(*(_QWORD *)result);
}

uint64_t sub_18F6CC498(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)result;
  if (*(_BYTE *)(result + 65))
  {
    if (!v1)
      return result;
  }
  else if (!v1)
  {
    return result;
  }
  return sub_18F7047B4(*(_QWORD *)result);
}

void sub_18F6CC4F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  *(_QWORD *)(a1 + 72) = 0;
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
    *(double *)(a1 + 72) = sub_18F6CC5EC(a1);
    v2 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v10 = *(_QWORD *)(v2 - 16);
    v3 = *(_QWORD *)(v2 - 8);
    *((_QWORD *)&v10 + 1) = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
      v2 = *(_QWORD *)(a1 + 8);
    }
    v6 = *(char **)a1;
    while ((char *)v2 != v6)
      v2 = sub_18F5D6004(v2 - 16);
    *(_QWORD *)(a1 + 8) = v6;
    sub_18F623AB8((char **)a1, &v10);
    *(double *)(a1 + 72) = *(double *)(a1 + 72) - sub_18F6CC33C((_QWORD *)v10);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
    if (*((_QWORD *)&v10 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_18F6CC5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_18F6CC5EC(uint64_t a1)
{
  double v1;
  _QWORD **v2;
  _QWORD **v3;

  v1 = *(double *)(a1 + 72);
  v2 = *(_QWORD ***)a1;
  v3 = *(_QWORD ***)(a1 + 8);
  while (v2 != v3)
  {
    if (*v2)
      v1 = v1 + sub_18F6CC33C(*v2);
    v2 += 2;
  }
  return v1;
}

BOOL sub_18F6CC638(char **a1, __int128 *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(v2 + 16) && *(_QWORD *)(v2 + 32))
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
      v11[0] = *(_QWORD *)a2;
      v11[1] = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      sub_18F6CC714((uint64_t)a1, (uint64_t)v11);
      if (v5)
      {
        v8 = (unint64_t *)&v5->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    if (sub_18F6CC2F4(*(_QWORD **)a2))
      sub_18F623AB8(a1, a2);
  }
  return v2 != 0;
}

void sub_18F6CC700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6CC714(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)a2)
  {
    v3 = result;
    sub_18F623AB8((char **)(result + 24), (__int128 *)(*(_QWORD *)a2 + 16));
    return sub_18F623AB8((char **)(v3 + 48), (__int128 *)(*(_QWORD *)a2 + 32));
  }
  return result;
}

unint64_t sub_18F6CC760(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  unsigned int i;
  BOOL v9;
  uint64_t v10;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = *a1;
    do
    {
      if (*(_QWORD *)v5)
        v4 += (*(_QWORD *)(*(_QWORD *)v5 + 56) - *(_QWORD *)(*(_QWORD *)v5 + 48)) >> 4;
      v5 += 16;
    }
    while (v5 != v3);
  }
  if (v4 < a2)
    return 0;
  result = (unint64_t)(v3 - v2) >> 4;
  v7 = (result & ((int)result >> 31)) - 1;
  for (i = result - 1; ; --i)
  {
    v9 = __OFSUB__((_DWORD)result, 1);
    result = (result - 1);
    if (((result & 0x80000000) != 0) != v9)
      break;
    v10 = *(_QWORD *)(v2 + 16 * i);
    if (v10)
      a2 -= (*(_QWORD *)(v10 + 56) - *(_QWORD *)(v10 + 48)) >> 4;
    if (a2 <= 0)
      return result;
  }
  return v7;
}

uint64_t sub_18F6CC808(uint64_t *a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = (a1[1] - *a1) >> 4;
  if (v3 <= a2 + 1)
    return 0;
  result = 0;
  v5 = ~(uint64_t)a2 + v3;
  v6 = v2 + 16 * a2 + 16;
  do
  {
    if (*(_QWORD *)v6)
      result = result
             + ((*(_QWORD *)(*(_QWORD *)v6 + 56) - *(_QWORD *)(*(_QWORD *)v6 + 48)) >> 4);
    v6 += 16;
    --v5;
  }
  while (v5);
  return result;
}

uint64_t sub_18F6CC868(uint64_t a1, double *a2, uint64_t *a3, _QWORD **a4, uint64_t *a5, double a6, double a7)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  NSObject *v43;
  NSObject *v44;
  NSObject *v46;
  NSObject *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  __objc2_class *v52;
  char v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  float64x2_t *v57;
  float64x2_t *v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t *v61;
  float64x2_t *v62;
  int32x2_t v63;
  NSObject *v64;
  NSObject *v65;
  float64x2_t v66;
  float64x2_t v67;
  int32x2_t v68;
  NSObject *v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  int v75;
  int v76;
  _QWORD *v77;
  void (__cdecl **v78)(std::__shared_weak_count *__hidden);
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  double Current;
  NSObject *v84;
  int v85;
  uint64_t v86;
  void (__cdecl **v87)(std::__shared_weak_count *__hidden);
  unint64_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  double v98;
  double v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  double v104;
  uint64_t *v105;
  uint64_t v106;
  double v107;
  double v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  double v113;
  uint64_t v114;
  double v115;
  double v116;
  double v117;
  NSObject *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  char v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint8x8_t v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  unint64_t v136;
  float v137;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  NSObject *v145;
  char *v146;
  NSObject *v147;
  double v148;
  double v149;
  float *v150;
  float v151;
  int v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t *v156;
  char *v157;
  double v158;
  double v159;
  uint64_t v160;
  double v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  char *v166;
  char *v167;
  double v168;
  NSObject *v169;
  int v170;
  int v171;
  char *v172;
  NSObject *v173;
  int v174;
  int v175;
  NSObject *v176;
  int v177;
  NSObject *v178;
  uint64_t v179;
  double v180;
  char v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  NSObject *v186;
  double v187;
  uint64_t v188;
  double v189;
  uint64_t v190;
  uint64_t *v191;
  int v192;
  unint64_t *v193;
  void *vtable;
  NSObject *v195;
  uint64_t v196;
  uint64_t *v197;
  double v198;
  uint64_t v199;
  uint64_t v200;
  NSObject *v201;
  uint64_t v202;
  double v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t *i;
  uint64_t v208;
  uint64_t v209;
  double v210;
  uint64_t v211;
  NSObject *v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  NSObject *v222;
  uint64_t v223;
  uint64_t *v224;
  double v225;
  uint64_t v226;
  double v227;
  NSObject *v228;
  NSObject *v229;
  NSObject *v230;
  uint64_t v231;
  uint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  NSObject *v244;
  int v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  double v255;
  uint64_t v256;
  char *v257;
  double v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  char *v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  int v273;
  char *v274;
  double v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  double v281;
  uint64_t v282;
  double v283;
  uint64_t v284;
  char *v285;
  char *v286;
  char *v287;
  uint64_t v288;
  char *v289;
  int v290;
  char *v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  int v297;
  void *context;
  char v299;
  int v300;
  double v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  uint64_t *v304;
  char *v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  __int128 v309;
  __int128 v310;
  int v311;
  __int128 v312;
  __int128 v313;
  int v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  std::__shared_weak_count *v317;
  std::__shared_weak_count *v318;
  _QWORD *v319;
  std::__shared_weak_count *v320;
  double *v321;
  std::__shared_weak_count *v322;
  _QWORD *v323;
  std::__shared_weak_count *v324;
  _QWORD *v325;
  std::__shared_weak_count *v326;
  _QWORD v327[2];
  _BYTE v328[44];
  _BYTE v329[10];
  _BYTE v330[10];
  int v331;
  __int16 v332;
  uint64_t v333;
  __int16 v334;
  uint64_t v335;
  __int16 v336;
  int v337;
  __int16 v338;
  uint64_t v339;
  __int16 v340;
  double v341;
  __int16 v342;
  int v343;
  __int16 v344;
  int v345;
  __int16 v346;
  int v347;
  _BYTE buf[44];
  _BYTE v349[10];
  _BYTE v350[10];
  int v351;
  __int16 v352;
  uint64_t v353;
  __int16 v354;
  uint64_t v355;
  __int16 v356;
  int v357;
  __int16 v358;
  uint64_t v359;
  __int16 v360;
  double v361;
  __int16 v362;
  int v363;
  __int16 v364;
  int v365;
  __int16 v366;
  int v367;
  uint64_t v368;

  v368 = *MEMORY[0x1E0C80C00];
  if (!*a5)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v44 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v44, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Unexpected,invalid geometry pointer,constructPedestrian", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_394;
    goto LABEL_485;
  }
  v8 = *a3;
  if (!*a3 || !*a4)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v43 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v43, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Unexpected,invalid snap pointers,constructPedestrian", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
    {
LABEL_394:
      *(_WORD *)v328 = 0;
      v246 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v246);
      if (v246 != buf)
        free(v246);
      return 0;
    }
LABEL_485:
    dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    goto LABEL_394;
  }
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(uint64_t **)a1;
  if (v15 != *(_QWORD *)a1)
  {
    do
      v15 = sub_18F5D6004(v15 - 16);
    while ((uint64_t *)v15 != v16);
    v8 = *a3;
  }
  *(_QWORD *)(a1 + 8) = v16;
  v17 = *(_QWORD **)v8;
  v18 = *(std::__shared_weak_count **)(v8 + 8);
  v325 = *(_QWORD **)v8;
  v326 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v22 = (_QWORD *)**a4;
  v21 = (std::__shared_weak_count *)(*a4)[1];
  v323 = v22;
  v324 = v21;
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = mach_continuous_time();
  v26 = sub_18F6BDF00(v25);
  if (!v17 || !v22)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v46 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = a6;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v17 != 0;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v22 != 0;
      _os_log_impl(&dword_18F5B3000, v46, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,aStarConstruct,invalid inputs,startRoad,%{public}d,destRoad,%{public}d", buf, 0x18u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      *(_DWORD *)v328 = 134349568;
      *(double *)&v328[4] = a6;
      *(_WORD *)&v328[12] = 1026;
      *(_DWORD *)&v328[14] = v17 != 0;
      *(_WORD *)&v328[18] = 1026;
      *(_DWORD *)&v328[20] = v22 != 0;
      v247 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v247);
      if (v247 != buf)
        free(v247);
    }
    v42 = 0;
    if (v21)
      goto LABEL_378;
    goto LABEL_382;
  }
  v27 = v26;
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29908B0);
  v28 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
  {
    v29 = *v17;
    v30 = *v22;
    *(_DWORD *)buf = 134349824;
    *(double *)&buf[4] = a6;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v29;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = v30;
    *(_WORD *)&buf[32] = 2050;
    *(double *)&buf[34] = a7;
    _os_log_impl(&dword_18F5B3000, v28, OS_LOG_TYPE_INFO, "CLTSP,%{public}.3lf,aStarConstruct,constructing between,start,%{public}lld,stop,%{public}lld,maxLength,%{public}.2lf", buf, 0x2Au);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v248 = *v17;
    v249 = *v22;
    *(_DWORD *)v328 = 134349824;
    *(double *)&v328[4] = a6;
    *(_WORD *)&v328[12] = 2050;
    *(_QWORD *)&v328[14] = v248;
    *(_WORD *)&v328[22] = 2050;
    *(_QWORD *)&v328[24] = v249;
    *(_WORD *)&v328[32] = 2050;
    *(double *)&v328[34] = a7;
    v250 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v250);
    if (v250 != buf)
      free(v250);
  }
  v31 = (std::__shared_weak_count *)operator new(0x68uLL);
  v31->__shared_owners_ = 0;
  v31->__shared_weak_owners_ = 0;
  v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FDA0;
  v31[1].__vftable = 0;
  v32 = (uint64_t)&v31[1];
  v31[1].__shared_owners_ = 0;
  v31[1].__shared_weak_owners_ = 0;
  LOBYTE(v31[1].__shared_weak_owners_) = 1;
  v31[2].std::__shared_count = 0u;
  *(_OWORD *)&v31[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v31[3].__shared_owners_ = 0u;
  v31[4].__vftable = 0;
  v321 = (double *)&v31[1];
  v322 = v31;
  v319 = v17;
  v320 = v18;
  if (v18)
  {
    v33 = (unint64_t *)&v18->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = sub_18F6CB3D4(v32, a2, (uint64_t *)&v319);
  v36 = v320;
  if (v320)
  {
    v37 = (unint64_t *)&v320->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if ((v35 & 1) == 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v47 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a6;
      _os_log_impl(&dword_18F5B3000, v47, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,aStarConstruct,unable to init startRouteRoad", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      *(_DWORD *)v328 = 134349056;
      *(double *)&v328[4] = a6;
      v251 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v251);
      if (v251 != buf)
        free(v251);
    }
    v42 = 0;
    goto LABEL_372;
  }
  v39 = v325;
  v40 = (uint64_t)v323;
  if (*v325 == *v323 && v325[1] == v323[1])
  {
    sub_18F6D0258(a1, (uint64_t)v321, (uint64_t)v322);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v41 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a6;
      _os_log_impl(&dword_18F5B3000, v41, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,constructed,start road is same as destination road", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      *(_DWORD *)v328 = 134349056;
      *(double *)&v328[4] = a6;
      v253 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v253);
      if (v253 != buf)
        free(v253);
    }
    v42 = 1;
    goto LABEL_372;
  }
  v48 = (std::__shared_weak_count *)operator new(0x68uLL);
  v48->__shared_owners_ = 0;
  v48->__shared_weak_owners_ = 0;
  v48->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FDA0;
  v48[1].__vftable = 0;
  v49 = (uint64_t)&v48[1];
  v48[1].__shared_owners_ = 0;
  v48[1].__shared_weak_owners_ = 0;
  LOBYTE(v48[1].__shared_weak_owners_) = 1;
  v48[2].std::__shared_count = 0u;
  *(_OWORD *)&v48[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v48[3].__shared_owners_ = 0u;
  v48[4].__vftable = 0;
  v317 = v48 + 1;
  v318 = v48;
  v315 = v40;
  v316 = v324;
  if (v324)
  {
    v50 = (unint64_t *)&v324->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = &OBJC_METACLASS___CLHeadingInternal;
  v53 = sub_18F6CB3D4(v49, a2, &v315);
  v54 = v316;
  if (v316)
  {
    v55 = (unint64_t *)&v316->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if ((v53 & 1) == 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v65 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a6;
      _os_log_impl(&dword_18F5B3000, v65, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,aStarConstruct,unable to init destinationRouteRoad", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      *(_DWORD *)v328 = 134349056;
      *(double *)&v328[4] = a6;
      v252 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v252);
      if (v252 != buf)
        free(v252);
    }
    v42 = 0;
    goto LABEL_367;
  }
  v58 = (float64x2_t *)v39[17];
  v57 = (float64x2_t *)v39[18];
  v59 = 0uLL;
  v60 = 0uLL;
  if (v57 != v58)
    v60 = v57[-1];
  v61 = *(float64x2_t **)(v40 + 136);
  v62 = *(float64x2_t **)(v40 + 144);
  if (v62 != v61)
    v59 = *v61;
  v63 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v60, v59)));
  if ((vand_s8((int8x8_t)v63, (int8x8_t)vdup_lane_s32(v63, 1)).u8[0] & 1) != 0)
  {
    sub_18F6D0258(a1, (uint64_t)v321, (uint64_t)v322);
    sub_18F6D0258(a1, (uint64_t)v317, (uint64_t)v318);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v64 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a6;
      _os_log_impl(&dword_18F5B3000, v64, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,constructed,start road and destination road are neighbors", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_101;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
    {
LABEL_419:
      *(_DWORD *)v328 = 134349056;
      *(double *)&v328[4] = a6;
      v254 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v254);
      if (v254 != buf)
        free(v254);
LABEL_101:
      v42 = 1;
      goto LABEL_367;
    }
LABEL_486:
    dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    goto LABEL_419;
  }
  v66 = 0uLL;
  v67 = 0uLL;
  if (v57 != v58)
    v67 = *v58;
  if (v62 != v61)
    v66 = v62[-1];
  v68 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v67, v66)));
  if ((vand_s8((int8x8_t)v68, (int8x8_t)vdup_lane_s32(v68, 1)).u8[0] & 1) != 0)
  {
    sub_18F6D0258(a1, (uint64_t)v317, (uint64_t)v318);
    sub_18F6D0258(a1, (uint64_t)v321, (uint64_t)v322);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v69 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a6;
      _os_log_impl(&dword_18F5B3000, v69, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,constructed,stop road is behind the start road and is connected to start road", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_101;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_419;
    goto LABEL_486;
  }
  v301 = v27;
  v70 = 0.0;
  v71 = 0.0;
  v72 = 0.0;
  if (v62 != v61)
  {
    v71 = v61->f64[0];
    v72 = v61->f64[1];
  }
  v73 = 0.0;
  if (v57 != v58)
  {
    v70 = v57[-1].f64[0];
    v73 = v57[-1].f64[1];
  }
  v74 = sub_18F5BD064(a2, v70, v73, v71, v72, 0.0);
  v75 = 10 * (int)v74;
  if (v75 >= 25000)
    v75 = 25000;
  if ((int)v74 >= 300)
    v76 = v75;
  else
    v76 = 3000;
  v300 = v76;
  v312 = 0u;
  v313 = 0u;
  v314 = 1065353216;
  v309 = 0u;
  v310 = 0u;
  v311 = 1065353216;
  v321[8] = v74;
  v77 = sub_18F6CBF38(&v312, (uint64_t *)&v321);
  v307 = 0;
  v308 = 0;
  context = (void *)MEMORY[0x1940032C4](v77);
  v299 = 0;
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 32) = 0;
  while (1)
  {
    if (v307)
    {
      if (v317)
      {
        v78 = (void (__cdecl **)(std::__shared_weak_count *__hidden))*v307;
        if (*v307)
        {
          if (*v78 == v317->~__shared_weak_count && v78[1] == v317->~__shared_weak_count_0)
          {
            v168 = v301;
            v181 = v299;
            goto LABEL_286;
          }
        }
      }
    }
    v79 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v79;
    if (v301 >= 0.0)
    {
      v80 = mach_continuous_time();
      if (vabdd_f64(sub_18F6BDF00(v80), v301) * 1000.0 > 240000.0)
      {
        ++*(_DWORD *)(a1 + 56);
        if (v52[8].vtable != (void *)-1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v168 = v301;
        v178 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          v179 = mach_continuous_time();
          v180 = sub_18F6BDF00(v179);
          *(_DWORD *)buf = 134349568;
          *(double *)&buf[4] = a6;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = vabdd_f64(v180, v301) * 1000.0;
          *(_WORD *)&buf[22] = 2050;
          *(_QWORD *)&buf[24] = 0x410D4C0000000000;
          _os_log_impl(&dword_18F5B3000, v178, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,aStarConstruct,processing time,%{public}.2lf,exceeded max,%{public}.2lf", buf, 0x20u);
        }
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_285;
        bzero(buf, 0x65CuLL);
        if (v52[8].vtable != (void *)-1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v280 = mach_continuous_time();
        v281 = sub_18F6BDF00(v280);
        *(_DWORD *)v328 = 134349568;
        *(double *)&v328[4] = a6;
        *(_WORD *)&v328[12] = 2050;
        *(double *)&v328[14] = vabdd_f64(v281, v301) * 1000.0;
        *(_WORD *)&v328[22] = 2050;
        *(_QWORD *)&v328[24] = 0x410D4C0000000000;
        v172 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v172);
LABEL_454:
        if (v172 != buf)
          free(v172);
        v181 = 1;
        goto LABEL_457;
      }
      v79 = *(_DWORD *)(a1 + 32);
    }
    if (v79 > v300)
    {
      ++*(_DWORD *)(a1 + 28);
      if (v52[8].vtable != (void *)-1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v168 = v301;
      v173 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        v174 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)buf = 134349568;
        *(double *)&buf[4] = a6;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v174;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v300;
        _os_log_impl(&dword_18F5B3000, v173, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,aStarConstruct,iterations,%{public}d,exceeded max,%{public}d", buf, 0x18u);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_285;
      bzero(buf, 0x65CuLL);
      if (v52[8].vtable != (void *)-1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v175 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)v328 = 134349568;
      *(double *)&v328[4] = a6;
      *(_WORD *)&v328[12] = 1026;
      *(_DWORD *)&v328[14] = v175;
      *(_WORD *)&v328[18] = 1026;
      *(_DWORD *)&v328[20] = v300;
      v172 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v172);
      goto LABEL_454;
    }
    v81 = *a5;
    v82 = *(_QWORD *)(*a5 + 304);
    if (v82 >= 0x3E9)
    {
      Current = CFAbsoluteTimeGetCurrent();
      sub_18F61F28C(v81 + 288, Current, 0.05, 0.05);
      if (v52[8].vtable != (void *)-1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v84 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v85 = *(_DWORD *)(a1 + 32);
        v86 = *(_QWORD *)(*a5 + 304);
        *(_DWORD *)buf = 134349824;
        *(double *)&buf[4] = a6;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v85;
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = v82;
        *(_WORD *)&buf[28] = 2050;
        *(_QWORD *)&buf[30] = v86;
        _os_log_impl(&dword_18F5B3000, v84, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,cleared road connection database,iterations,%{public}d,prevSize,%{public}lu,newSize,%{public}lu", buf, 0x26u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v52[8].vtable != (void *)-1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v152 = *(_DWORD *)(a1 + 32);
        v153 = *(_QWORD *)(*a5 + 304);
        *(_DWORD *)v328 = 134349824;
        *(double *)&v328[4] = a6;
        *(_WORD *)&v328[12] = 1026;
        *(_DWORD *)&v328[14] = v152;
        *(_WORD *)&v328[18] = 2050;
        *(_QWORD *)&v328[20] = v82;
        *(_WORD *)&v328[28] = 2050;
        *(_QWORD *)&v328[30] = v153;
        v154 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v154);
        if (v154 != buf)
          free(v154);
        v52 = &OBJC_METACLASS___CLHeadingInternal;
      }
    }
    if (!sub_18F6CC18C((uint64_t)&v312, &v307)
      || !v307
      || (v87 = (void (__cdecl **)(std::__shared_weak_count *__hidden))*v307) == 0)
    {
      if (v52[8].vtable != (void *)-1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v168 = v301;
      v169 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v170 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)buf = 134349568;
        *(double *)&buf[4] = a6;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v170;
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = *((_QWORD *)&v313 + 1);
        _os_log_impl(&dword_18F5B3000, v169, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,did not find best path,iterations,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v52[8].vtable != (void *)-1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v171 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)v328 = 134349568;
        *(double *)&v328[4] = a6;
        *(_WORD *)&v328[12] = 1026;
        *(_DWORD *)&v328[14] = v171;
        *(_WORD *)&v328[18] = 2050;
        *(_QWORD *)&v328[20] = *((_QWORD *)&v313 + 1);
        v172 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v172);
        goto LABEL_454;
      }
LABEL_285:
      v181 = 1;
      goto LABEL_286;
    }
    if (v317 && *v87 == v317->~__shared_weak_count && v87[1] == v317->~__shared_weak_count_0)
      break;
    v304 = 0;
    v305 = 0;
    v306 = 0;
    if ((sub_18F623BF8(*a5, v307, (char **)&v304, 1) & 1) == 0)
    {
      ++*(_DWORD *)(a1 + 60);
      if (v52[8].vtable != (void *)-1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v168 = v301;
      v176 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v177 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)buf = 134349568;
        *(double *)&buf[4] = a6;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v177;
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = *((_QWORD *)&v313 + 1);
        _os_log_impl(&dword_18F5B3000, v176, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,intersection query failed,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v52[8].vtable != (void *)-1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v273 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)v328 = 134349568;
        *(double *)&v328[4] = a6;
        *(_WORD *)&v328[12] = 1026;
        *(_DWORD *)&v328[14] = v273;
        *(_WORD *)&v328[18] = 2050;
        *(_QWORD *)&v328[20] = *((_QWORD *)&v313 + 1);
        v274 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v274);
        if (v274 != buf)
          free(v274);
        v52 = &OBJC_METACLASS___CLHeadingInternal;
        v168 = v301;
      }
      *(_QWORD *)buf = &v304;
      sub_18F62AB98((void ***)buf);
      goto LABEL_285;
    }
    HIDWORD(v88) = -1030792151 * *(_DWORD *)(a1 + 32) + 85899344;
    LODWORD(v88) = HIDWORD(v88);
    if ((v88 >> 2) <= 0x28F5C28)
    {
      if (v52[8].vtable != (void *)-1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v89 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
      {
        v90 = *v307;
        v91 = *(_QWORD *)(*v307 + 144);
        v92 = 0.0;
        v93 = 0;
        v94 = 0;
        if (v91 != *(_QWORD *)(*v307 + 136))
        {
          v93 = *(_QWORD *)(v91 - 16);
          v94 = *(_QWORD *)(v91 - 8);
        }
        v95 = *(_QWORD *)(v90 + 8);
        v97 = v304;
        v96 = v305;
        v98 = *((double *)v307 + 7);
        v99 = *((double *)v307 + 8);
        v292 = *(_DWORD *)(a1 + 32);
        v296 = *(_DWORD *)(v90 + 112);
        v294 = *(_QWORD *)(v90 + 128);
        if (v301 >= 0.0)
        {
          v100 = mach_continuous_time();
          v92 = vabdd_f64(sub_18F6BDF00(v100), v301) * 1000.0;
        }
        *(_DWORD *)buf = 134352641;
        *(double *)&buf[4] = a6;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v95;
        *(_WORD *)&buf[22] = 2050;
        *(_QWORD *)&buf[24] = (v96 - (char *)v97) >> 4;
        *(_WORD *)&buf[32] = 2050;
        *(double *)&buf[34] = v98;
        *(_WORD *)&buf[42] = 2050;
        *(double *)v349 = v99;
        *(_WORD *)&v349[8] = 2050;
        *(double *)v350 = v98 + v99;
        *(_WORD *)&v350[8] = 1026;
        v351 = v292;
        v352 = 2049;
        v353 = v93;
        v354 = 2049;
        v355 = v94;
        v356 = 1025;
        v357 = v296;
        v358 = 2049;
        v359 = v294;
        v360 = 2049;
        v361 = v92;
        v362 = 1026;
        v363 = DWORD2(v313);
        v364 = 1026;
        v365 = DWORD2(v310);
        v366 = 1026;
        v367 = v300;
        _os_log_impl(&dword_18F5B3000, v89, OS_LOG_TYPE_INFO, "CLTSP,%{public}.3lf,aStarConstruct,found neighbors for %{private}lld,size,%{public}lu,g,%{public}.2lf,h,%{public}.2lf,cost,%{public}.2lf,iterationCount,%{public}d,stopLL,%{private}.7lf,%{private}.7lf,stopJunction,%{private}d,stopAlt,%{private}.2lf,processingTime,%{private}.2lf,openSet,%{public}d,closedSet,%{public}d,iterationThreshold,%{public}d", buf, 0x84u);
        v52 = &OBJC_METACLASS___CLHeadingInternal;
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v52[8].vtable != (void *)-1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v155 = *v307;
        v295 = *(_QWORD *)(*v307 + 8);
        v156 = v304;
        v157 = v305;
        v159 = *((double *)v307 + 7);
        v158 = *((double *)v307 + 8);
        v297 = *(_DWORD *)(a1 + 32);
        v160 = *(_QWORD *)(*v307 + 144);
        v161 = 0.0;
        v162 = 0;
        v163 = 0;
        if (v160 != *(_QWORD *)(*v307 + 136))
        {
          v162 = *(_QWORD *)(v160 - 16);
          v163 = *(_QWORD *)(v160 - 8);
        }
        v164 = *(_DWORD *)(v155 + 112);
        v293 = *(_QWORD *)(v155 + 128);
        if (v301 >= 0.0)
        {
          v165 = mach_continuous_time();
          v161 = vabdd_f64(sub_18F6BDF00(v165), v301) * 1000.0;
        }
        *(_DWORD *)v328 = 134352641;
        *(double *)&v328[4] = a6;
        *(_WORD *)&v328[12] = 2049;
        *(_QWORD *)&v328[14] = v295;
        *(_WORD *)&v328[22] = 2050;
        *(_QWORD *)&v328[24] = (v157 - (char *)v156) >> 4;
        *(_WORD *)&v328[32] = 2050;
        *(double *)&v328[34] = v159;
        *(_WORD *)&v328[42] = 2050;
        *(double *)v329 = v158;
        *(_WORD *)&v329[8] = 2050;
        *(double *)v330 = v159 + v158;
        *(_WORD *)&v330[8] = 1026;
        v331 = v297;
        v332 = 2049;
        v333 = v162;
        v334 = 2049;
        v335 = v163;
        v336 = 1025;
        v337 = v164;
        v338 = 2049;
        v339 = v293;
        v340 = 2049;
        v341 = v161;
        v342 = 1026;
        v343 = DWORD2(v313);
        v344 = 1026;
        v345 = DWORD2(v310);
        v346 = 1026;
        v347 = v300;
        v166 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v166);
        if (v166 != buf)
          free(v166);
        v52 = &OBJC_METACLASS___CLHeadingInternal;
      }
    }
    sub_18F6CBF88((uint64_t *)&v312, (uint64_t)v307);
    v101 = v304;
    v102 = (uint64_t *)v305;
    while (1)
    {
      if (v101 == v102)
        goto LABEL_235;
      if (!*v101)
        break;
      v103 = *v307;
      sub_18F7047B4(*v307);
      v104 = *(double *)(v103 + 40);
      v105 = v307;
      if (v321)
      {
        v106 = *v307;
        if (*v307)
        {
          if (*(_QWORD *)v106 == **(_QWORD **)v321 && *(_QWORD *)(v106 + 8) == *(_QWORD *)(*(_QWORD *)v321 + 8))
          {
            sub_18F7047B4(*v307);
            v107 = *(double *)(v106 + 40);
            sub_18F6CC498(*a3);
            v104 = v107 - v108;
            v105 = v307;
          }
        }
      }
      v109 = *(_QWORD *)(*v101 + 144);
      if (v109 == *(_QWORD *)(*v101 + 136))
      {
        v110 = 0.0;
        v111 = 0.0;
      }
      else
      {
        v110 = *(double *)(v109 - 16);
        v111 = *(double *)(v109 - 8);
      }
      v112 = *((double *)v105 + 7);
      v113 = sub_18F5BD064(a2, v110, v111, v71, v72, 0.0);
      v114 = *v101;
      sub_18F7047B4(*v101);
      v115 = v113 + *(double *)(v114 + 40);
      if (*(_QWORD *)*v101 == *v323 && *(_QWORD *)(*v101 + 8) == v323[1])
        v115 = 0.0;
      v116 = v104 + v112;
      v117 = v116 + v115;
      if (a7 <= 0.0 || v117 <= a7)
      {
        v120 = operator new();
        *(_QWORD *)v120 = 0;
        *(_QWORD *)(v120 + 8) = 0;
        *(_BYTE *)(v120 + 16) = 1;
        *(_OWORD *)(v120 + 24) = 0u;
        *(_OWORD *)(v120 + 40) = 0u;
        *(_OWORD *)(v120 + 56) = 0u;
        *(_QWORD *)(v120 + 72) = 0;
        sub_18F6D75C4(v328, v120);
        v121 = *(_QWORD *)v328;
        v122 = v101[1];
        v302 = *v101;
        v303 = (std::__shared_weak_count *)v122;
        if (v122)
        {
          v123 = (unint64_t *)(v122 + 8);
          do
            v124 = __ldxr(v123);
          while (__stxr(v124 + 1, v123));
        }
        v125 = sub_18F6CB3D4(v121, a2, &v302);
        v126 = v303;
        if (v303)
        {
          v127 = (unint64_t *)&v303->__shared_owners_;
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        if ((v125 & 1) == 0)
        {
          if (v52[8].vtable != (void *)-1)
            dispatch_once(&qword_1EE172158, &unk_1E29908B0);
          v147 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134349056;
            *(double *)&buf[4] = a6;
            _os_log_impl(&dword_18F5B3000, v147, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,aStarConstruct,unable to init neighbor", buf, 0xCu);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (v52[8].vtable != (void *)-1)
              dispatch_once(&qword_1EE172158, &unk_1E29908B0);
            LODWORD(v327[0]) = 134349056;
            *(double *)((char *)v327 + 4) = a6;
            v167 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v167);
            if (v167 != buf)
              free(v167);
            v52 = &OBJC_METACLASS___CLHeadingInternal;
          }
          sub_18F5D6004((uint64_t)v328);
LABEL_234:
          v299 = 1;
          goto LABEL_235;
        }
        sub_18F6CC268(buf, &v312, *(uint64_t *)v328);
        v129 = *(_QWORD *)buf;
        if (!*(_QWORD *)buf)
        {
          v130 = *(_QWORD *)v328;
          if (!**(_QWORD **)v328 || !*((_QWORD *)&v309 + 1))
            goto LABEL_206;
          v131 = *(_QWORD *)(**(_QWORD **)v328 + 8);
          v132 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v309 + 8));
          v132.i16[0] = vaddlv_u8(v132);
          if (v132.u32[0] > 1uLL)
          {
            v133 = *(_QWORD *)(**(_QWORD **)v328 + 8);
            if (*((_QWORD *)&v309 + 1) <= v131)
              v133 = v131 % *((_QWORD *)&v309 + 1);
          }
          else
          {
            v133 = (*((_QWORD *)&v309 + 1) - 1) & v131;
          }
          v134 = *(_QWORD **)(v309 + 8 * v133);
          if (!v134)
            goto LABEL_206;
          v135 = (_QWORD *)*v134;
          if (!v135)
            goto LABEL_206;
          while (1)
          {
            v136 = v135[1];
            if (v136 == v131)
            {
              if (v135[2] == v131)
              {
                v327[0] = *(_QWORD *)(**(_QWORD **)v328 + 8);
                v137 = *((float *)sub_18F6D6A70((float *)&v309, v131, v327) + 6);
                if (v137 >= 0.0 && v117 >= v137)
                  goto LABEL_207;
                v130 = *(_QWORD *)v328;
LABEL_206:
                *(double *)(v130 + 56) = v116;
                *(double *)(v130 + 64) = v115;
                sub_18F62D304((_QWORD *)(v130 + 40), (uint64_t)v307, v308);
                sub_18F6CBF38(&v312, (uint64_t *)v328);
                goto LABEL_207;
              }
            }
            else
            {
              if (v132.u32[0] > 1uLL)
              {
                if (v136 >= *((_QWORD *)&v309 + 1))
                  v136 %= *((_QWORD *)&v309 + 1);
              }
              else
              {
                v136 &= *((_QWORD *)&v309 + 1) - 1;
              }
              if (v136 != v133)
                goto LABEL_206;
            }
            v135 = (_QWORD *)*v135;
            if (!v135)
              goto LABEL_206;
          }
        }
        if (*(double *)(*(_QWORD *)buf + 56) + *(double *)(*(_QWORD *)buf + 64) >= v117)
        {
          *(double *)(*(_QWORD *)buf + 56) = v116;
          *(double *)(v129 + 64) = v115;
          sub_18F62D304((_QWORD *)(v129 + 40), (uint64_t)v307, v308);
        }
LABEL_207:
        v139 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v140 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          if (!v141)
          {
            ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
            std::__shared_weak_count::__release_weak(v139);
          }
        }
        v142 = *(std::__shared_weak_count **)&v328[8];
        if (*(_QWORD *)&v328[8])
        {
          v143 = (unint64_t *)(*(_QWORD *)&v328[8] + 8);
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
      }
      else
      {
        if (v52[8].vtable != (void *)-1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v118 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349568;
          *(double *)&buf[4] = a6;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v116 + v115;
          *(_WORD *)&buf[22] = 2050;
          *(double *)&buf[24] = a7;
          _os_log_impl(&dword_18F5B3000, v118, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.2lf,route length exceeded max allowed,length,%{public}.1lf,maxLength,%{public}.1lf", buf, 0x20u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v52[8].vtable != (void *)-1)
            dispatch_once(&qword_1EE172158, &unk_1E29908B0);
          *(_DWORD *)v328 = 134349568;
          *(double *)&v328[4] = a6;
          *(_WORD *)&v328[12] = 2050;
          *(double *)&v328[14] = v116 + v115;
          *(_WORD *)&v328[22] = 2050;
          *(double *)&v328[24] = a7;
          v119 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v119);
          if (v119 != buf)
            free(v119);
          v52 = &OBJC_METACLASS___CLHeadingInternal;
        }
      }
      v101 += 2;
    }
    if (v52[8].vtable != (void *)-1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v145 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a6;
      _os_log_impl(&dword_18F5B3000, v145, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,aStarConstruct,neighbor road is nullptr", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_234;
    bzero(buf, 0x65CuLL);
    if (v52[8].vtable != (void *)-1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    *(_DWORD *)v328 = 134349056;
    *(double *)&v328[4] = a6;
    v146 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v146);
    if (v146 != buf)
      free(v146);
    v299 = 1;
    v52 = &OBJC_METACLASS___CLHeadingInternal;
LABEL_235:
    if (v307 && *v307)
    {
      v148 = *((double *)v307 + 7);
      v149 = *((double *)v307 + 8);
      *(_QWORD *)buf = *(_QWORD *)(*v307 + 8);
      v150 = (float *)sub_18F6D6A70((float *)&v309, *(unint64_t *)buf, buf);
      v151 = v148 + v149;
      v150[6] = v151;
    }
    *(_QWORD *)buf = &v304;
    sub_18F62AB98((void ***)buf);
  }
  if (v52[8].vtable != (void *)-1)
    dispatch_once(&qword_1EE172158, &unk_1E29908B0);
  v168 = v301;
  v244 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v245 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)buf = 134349568;
    *(double *)&buf[4] = a6;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v245;
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = *((_QWORD *)&v313 + 1);
    _os_log_impl(&dword_18F5B3000, v244, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,best path found is the destinationPath - search complete!,iterations,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
  }
  if (!sub_18F5C4AE0(115, 2))
  {
    v181 = 0;
    goto LABEL_286;
  }
  bzero(buf, 0x65CuLL);
  if (v52[8].vtable != (void *)-1)
    dispatch_once(&qword_1EE172158, &unk_1E29908B0);
  v290 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)v328 = 134349568;
  *(double *)&v328[4] = a6;
  *(_WORD *)&v328[12] = 1026;
  *(_DWORD *)&v328[14] = v290;
  *(_WORD *)&v328[18] = 2050;
  *(_QWORD *)&v328[20] = *((_QWORD *)&v313 + 1);
  v291 = (char *)_os_log_send_and_compose_impl();
  sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v291);
  if (v291 != buf)
    free(v291);
  v181 = 0;
LABEL_457:
  v52 = &OBJC_METACLASS___CLHeadingInternal;
  v168 = v301;
LABEL_286:
  objc_autoreleasePoolPop(context);
  v185 = *(void **)(*a5 + 88);
  if (v185)
    objc_msgSend_clearRoadTiles(v185, v182, v183, v184);
  if ((v181 & 1) != 0)
  {
    ++*(_DWORD *)(a1 + 52);
    if (v52[8].vtable != (void *)-1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v186 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
    {
      v187 = 0.0;
      if (v168 >= 0.0)
      {
        v188 = mach_continuous_time();
        v187 = vabdd_f64(sub_18F6BDF00(v188), v168) * 1000.0;
      }
      *(_DWORD *)buf = 134349313;
      *(double *)&buf[4] = a6;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = v187;
      _os_log_impl(&dword_18F5B3000, v186, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,aStarConstruct,search failed,processingTime,%{private}.2lf", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v52[8].vtable != (void *)-1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v255 = 0.0;
      if (v301 >= 0.0)
      {
        v256 = mach_continuous_time();
        v255 = vabdd_f64(sub_18F6BDF00(v256), v301) * 1000.0;
      }
      *(_DWORD *)v328 = 134349313;
      *(double *)&v328[4] = a6;
      *(_WORD *)&v328[12] = 2049;
      *(double *)&v328[14] = v255;
      v257 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v257);
      if (v257 != buf)
        free(v257);
      v168 = v301;
    }
    v189 = 0.0;
    if (v168 >= 0.0)
    {
      v190 = mach_continuous_time();
      v189 = vabdd_f64(sub_18F6BDF00(v190), v168) * 1000.0;
    }
    v42 = 0;
    *(double *)(a1 + 40) = v189;
    *(double *)(a1 + 64) = v189 + *(double *)(a1 + 64);
  }
  else
  {
    v305 = 0;
    v306 = 0;
    v304 = (uint64_t *)&v305;
    v191 = v307;
    if (v307)
    {
      v192 = 501;
      while (v191[5])
      {
        if (!--v192)
        {
          ++*(_DWORD *)(a1 + 24);
          if (v52[8].vtable != (void *)-1)
            dispatch_once(&qword_1EE172158, &unk_1E29908B0);
          v228 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134349568;
            *(double *)&buf[4] = a6;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = 501;
            *(_WORD *)&buf[18] = 1026;
            *(_DWORD *)&buf[20] = 500;
            _os_log_impl(&dword_18F5B3000, v228, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,aStarConstruct,search road count,%{public}d,exceeded max,%{public}d", buf, 0x18u);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (v52[8].vtable != (void *)-1)
              dispatch_once(&qword_1EE172158, &unk_1E29908B0);
            *(_DWORD *)v328 = 134349568;
            *(double *)&v328[4] = a6;
            *(_WORD *)&v328[12] = 1026;
            *(_DWORD *)&v328[14] = 501;
            *(_WORD *)&v328[18] = 1026;
            *(_DWORD *)&v328[20] = 500;
            v286 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v286);
            if (v286 != buf)
              free(v286);
            v168 = v301;
          }
          v227 = 0.0;
          if (v168 < 0.0)
            goto LABEL_364;
          goto LABEL_363;
        }
        v193 = (unint64_t *)*v191;
        if (!*v191)
        {
          if (v52[8].vtable != (void *)-1)
            dispatch_once(&qword_1EE172158, &unk_1E29908B0);
          v229 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134349056;
            *(double *)&buf[4] = a6;
            _os_log_impl(&dword_18F5B3000, v229, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,aStarConstruct,search null road", buf, 0xCu);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (v52[8].vtable != (void *)-1)
              dispatch_once(&qword_1EE172158, &unk_1E29908B0);
            *(_DWORD *)v328 = 134349056;
            *(double *)&v328[4] = a6;
            v287 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v287);
            if (v287 != buf)
              free(v287);
            v168 = v301;
          }
          v227 = 0.0;
          if (v168 < 0.0)
            goto LABEL_364;
          goto LABEL_363;
        }
        if (sub_18F62A584((uint64_t)&v304, (unint64_t *)*v191))
        {
          if (v52[8].vtable != (void *)-1)
            dispatch_once(&qword_1EE172158, &unk_1E29908B0);
          v230 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
          {
            v231 = *(_QWORD *)(*v307 + 8);
            *(_DWORD *)buf = 134349313;
            *(double *)&buf[4] = a6;
            *(_WORD *)&buf[12] = 2049;
            *(_QWORD *)&buf[14] = v231;
            _os_log_impl(&dword_18F5B3000, v230, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,aStarConstruct,search road already added,%{private}lld", buf, 0x16u);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (v52[8].vtable != (void *)-1)
              dispatch_once(&qword_1EE172158, &unk_1E29908B0);
            v288 = *(_QWORD *)(*v307 + 8);
            *(_DWORD *)v328 = 134349313;
            *(double *)&v328[4] = a6;
            *(_WORD *)&v328[12] = 2049;
            *(_QWORD *)&v328[14] = v288;
            v289 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v289);
            if (v289 != buf)
              free(v289);
            v168 = v301;
          }
          v227 = 0.0;
          if (v168 < 0.0)
            goto LABEL_364;
          goto LABEL_363;
        }
        sub_18F6D0258(a1, (uint64_t)v307, v308);
        *(_QWORD *)buf = v193;
        *((_BYTE *)sub_18F62CB48(&v304, v193, (uint64_t)&unk_18F772428, (_OWORD **)buf) + 48) = 1;
        sub_18F62D304(&v307, v307[5], v307[6]);
        v191 = v307;
        if (!v307)
          break;
      }
    }
    vtable = v52[8].vtable;
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    {
      if (vtable != (void *)-1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v222 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        v224 = *(uint64_t **)a1;
        v223 = *(_QWORD *)(a1 + 8);
        v225 = 0.0;
        if (v168 >= 0.0)
        {
          v226 = mach_continuous_time();
          v225 = vabdd_f64(sub_18F6BDF00(v226), v168) * 1000.0;
        }
        *(_DWORD *)buf = 134349569;
        *(double *)&buf[4] = a6;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = (v223 - (uint64_t)v224) >> 4;
        *(_WORD *)&buf[22] = 2049;
        *(double *)&buf[24] = v225;
        _os_log_impl(&dword_18F5B3000, v222, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,aStarConstruct,constructed route is empty,roadCount,%{private}lu,processingTime,%{private}.2lf", buf, 0x20u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v52[8].vtable != (void *)-1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v275 = 0.0;
        v277 = *(uint64_t **)a1;
        v276 = *(_QWORD *)(a1 + 8);
        if (v301 >= 0.0)
        {
          v278 = mach_continuous_time();
          v275 = vabdd_f64(sub_18F6BDF00(v278), v301) * 1000.0;
        }
        *(_DWORD *)v328 = 134349569;
        *(double *)&v328[4] = a6;
        *(_WORD *)&v328[12] = 2049;
        *(_QWORD *)&v328[14] = (v276 - (uint64_t)v277) >> 4;
        *(_WORD *)&v328[22] = 2049;
        *(double *)&v328[24] = v275;
        v279 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v279);
        if (v279 != buf)
          free(v279);
        v168 = v301;
      }
      v227 = 0.0;
      if (v168 >= 0.0)
      {
LABEL_363:
        v232 = mach_continuous_time();
        v227 = vabdd_f64(sub_18F6BDF00(v232), v168) * 1000.0;
      }
LABEL_364:
      v42 = 0;
      *(double *)(a1 + 40) = v227;
      *(double *)(a1 + 64) = v227 + *(double *)(a1 + 64);
    }
    else
    {
      if (vtable != (void *)-1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v195 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
      {
        v197 = *(uint64_t **)a1;
        v196 = *(_QWORD *)(a1 + 8);
        v198 = 0.0;
        if (v168 >= 0.0)
        {
          v199 = mach_continuous_time();
          v198 = vabdd_f64(sub_18F6BDF00(v199), v168) * 1000.0;
        }
        *(_DWORD *)buf = 134349569;
        *(double *)&buf[4] = a6;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = (v196 - (uint64_t)v197) >> 4;
        *(_WORD *)&buf[22] = 2049;
        *(double *)&buf[24] = v198;
        _os_log_impl(&dword_18F5B3000, v195, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,aStarConstruct,constructed,roadCount,%{private}lu,processingTime,%{private}.2lf", buf, 0x20u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v52[8].vtable != (void *)-1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v258 = 0.0;
        v260 = *(uint64_t **)a1;
        v259 = *(_QWORD *)(a1 + 8);
        if (v301 >= 0.0)
        {
          v261 = mach_continuous_time();
          v258 = vabdd_f64(sub_18F6BDF00(v261), v301) * 1000.0;
        }
        *(_DWORD *)v328 = 134349569;
        *(double *)&v328[4] = a6;
        *(_WORD *)&v328[12] = 2049;
        *(_QWORD *)&v328[14] = (v259 - (uint64_t)v260) >> 4;
        *(_WORD *)&v328[22] = 2049;
        *(double *)&v328[24] = v258;
        v262 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v262);
        if (v262 != buf)
          free(v262);
        v52 = &OBJC_METACLASS___CLHeadingInternal;
        v168 = v301;
      }
      v200 = (uint64_t)v321;
      if (!sub_18F62A584((uint64_t)&v304, *(unint64_t **)v321))
      {
        if (v52[8].vtable != (void *)-1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v201 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v202 = *(_QWORD *)(*(_QWORD *)v200 + 8);
          v203 = 0.0;
          if (v168 >= 0.0)
          {
            v204 = mach_continuous_time();
            v203 = vabdd_f64(sub_18F6BDF00(v204), v168) * 1000.0;
          }
          *(_DWORD *)buf = 134349569;
          *(double *)&buf[4] = a6;
          *(_WORD *)&buf[12] = 2049;
          *(_QWORD *)&buf[14] = v202;
          *(_WORD *)&buf[22] = 2049;
          *(double *)&buf[24] = v203;
          _os_log_impl(&dword_18F5B3000, v201, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,aStarConstruct,added first road,%{private}lld,processingTime,%{private}.2lf", buf, 0x20u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v52[8].vtable != (void *)-1)
            dispatch_once(&qword_1EE172158, &unk_1E29908B0);
          v282 = *(_QWORD *)(*(_QWORD *)v200 + 8);
          v283 = 0.0;
          if (v301 >= 0.0)
          {
            v284 = mach_continuous_time();
            v283 = vabdd_f64(sub_18F6BDF00(v284), v301) * 1000.0;
          }
          *(_DWORD *)v328 = 134349569;
          *(double *)&v328[4] = a6;
          *(_WORD *)&v328[12] = 2049;
          *(_QWORD *)&v328[14] = v282;
          *(_WORD *)&v328[22] = 2049;
          *(double *)&v328[24] = v283;
          v285 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v285);
          if (v285 != buf)
            free(v285);
          v52 = &OBJC_METACLASS___CLHeadingInternal;
          v168 = v301;
        }
        sub_18F6D0258(a1, v200, (uint64_t)v322);
      }
      v205 = *(uint64_t **)a1;
      v206 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)a1 != v206)
      {
        for (i = (uint64_t *)(v206 - 16); v205 < i; i -= 2)
        {
          v208 = *v205;
          *v205 = *i;
          *i = v208;
          v209 = v205[1];
          v205[1] = i[1];
          i[1] = v209;
          v205 += 2;
        }
      }
      v210 = 0.0;
      if (v168 >= 0.0)
      {
        v211 = mach_continuous_time();
        v210 = vabdd_f64(sub_18F6BDF00(v211), v168) * 1000.0;
      }
      *(double *)(a1 + 40) = v210;
      *(double *)(a1 + 64) = v210 + *(double *)(a1 + 64);
      if (v52[8].vtable != (void *)-1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v212 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEFAULT))
      {
        v213 = *(_DWORD *)(a1 + 48);
        v214 = *(_DWORD *)(a1 + 52);
        v215 = *(_DWORD *)(a1 + 24);
        v216 = *(_DWORD *)(a1 + 28);
        v217 = *(_DWORD *)(a1 + 32);
        v218 = *(_DWORD *)(a1 + 56);
        v219 = *(_DWORD *)(a1 + 60);
        v220 = *(_QWORD *)(a1 + 40);
        v221 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 67242240;
        *(_DWORD *)&buf[4] = v213;
        *(_WORD *)&buf[8] = 1026;
        *(_DWORD *)&buf[10] = v214;
        *(_WORD *)&buf[14] = 1026;
        *(_DWORD *)&buf[16] = v215;
        *(_WORD *)&buf[20] = 1026;
        *(_DWORD *)&buf[22] = v216;
        *(_WORD *)&buf[26] = 1026;
        *(_DWORD *)&buf[28] = v218;
        *(_WORD *)&buf[32] = 1026;
        *(_DWORD *)&buf[34] = v217;
        *(_WORD *)&buf[38] = 1026;
        *(_DWORD *)&buf[40] = v219;
        *(_WORD *)v349 = 2050;
        *(_QWORD *)&v349[2] = v220;
        *(_WORD *)v350 = 2050;
        *(_QWORD *)&v350[2] = v221;
        _os_log_impl(&dword_18F5B3000, v212, OS_LOG_TYPE_DEFAULT, "CLMM,CLTSP,AStar Analytics,attempts,%{public}d,failures,%{public}d,roadCountExceededMax,%{public}d,iterationsExceededMax,%{public}d,processingTimeExceededMax,%{public}d,iterations,%{public}d,roadConnectionsUnavailable,%{public}d,processingTimeMSec,%{public}.2lf,cumulativeProcessingTimeMSec,%{public}.2lf", buf, 0x40u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v52[8].vtable != (void *)-1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v263 = *(_DWORD *)(a1 + 48);
        v264 = *(_DWORD *)(a1 + 52);
        v265 = *(_DWORD *)(a1 + 24);
        v266 = *(_DWORD *)(a1 + 28);
        v267 = *(_DWORD *)(a1 + 32);
        v268 = *(_DWORD *)(a1 + 56);
        v269 = *(_DWORD *)(a1 + 60);
        v270 = *(_QWORD *)(a1 + 40);
        v271 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)v328 = 67242240;
        *(_DWORD *)&v328[4] = v263;
        *(_WORD *)&v328[8] = 1026;
        *(_DWORD *)&v328[10] = v264;
        *(_WORD *)&v328[14] = 1026;
        *(_DWORD *)&v328[16] = v265;
        *(_WORD *)&v328[20] = 1026;
        *(_DWORD *)&v328[22] = v266;
        *(_WORD *)&v328[26] = 1026;
        *(_DWORD *)&v328[28] = v268;
        *(_WORD *)&v328[32] = 1026;
        *(_DWORD *)&v328[34] = v267;
        *(_WORD *)&v328[38] = 1026;
        *(_DWORD *)&v328[40] = v269;
        *(_WORD *)v329 = 2050;
        *(_QWORD *)&v329[2] = v270;
        *(_WORD *)v330 = 2050;
        *(_QWORD *)&v330[2] = v271;
        v272 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::construct(CLDistanceCalc &, const CFAbsoluteTime, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const double)", "CoreLocation: %s\n", v272);
        if (v272 != buf)
          free(v272);
      }
      v42 = 1;
    }
    sub_18F62C738((uint64_t)&v304, v305);
  }
  sub_18F5D6004((uint64_t)&v307);
  sub_18F684A10((uint64_t)&v309);
  sub_18F6D6E5C((uint64_t)&v312);
LABEL_367:
  v233 = v318;
  if (v318)
  {
    v234 = (unint64_t *)&v318->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
LABEL_372:
  v236 = v322;
  if (v322)
  {
    v237 = (unint64_t *)&v322->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  v21 = v324;
  if (v324)
  {
LABEL_378:
    v239 = (unint64_t *)&v21->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
LABEL_382:
  v241 = v326;
  if (v326)
  {
    v242 = (unint64_t *)&v326->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  return v42;
}

void sub_18F6D00A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,char a59,uint64_t a60,char a61)
{
  sub_18F5D6004((uint64_t)&a37);
  sub_18F684A10((uint64_t)&a39);
  sub_18F6D6E5C((uint64_t)&a45);
  sub_18F5D6004((uint64_t)&a53);
  sub_18F5D6004((uint64_t)&a57);
  sub_18F5D6004((uint64_t)&a59);
  sub_18F5D6004((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void sub_18F6D0258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;

  v7 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v7 >= v6)
  {
    v11 = *(_QWORD **)a1;
    v12 = ((uint64_t)v7 - *(_QWORD *)a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_18F5F7864();
    v14 = v6 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15 >> 60)
      sub_18F5F689C();
    v16 = (char *)operator new(16 * v15);
    v17 = &v16[16 * v12];
    *(_QWORD *)v17 = a2;
    *((_QWORD *)v17 + 1) = a3;
    if (a3)
    {
      v18 = (unint64_t *)(a3 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v11 = *(_QWORD **)a1;
      v7 = *(_QWORD **)(a1 + 8);
    }
    if (v7 == v11)
    {
      v10 = v17 + 16;
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v17 + 16;
      *(_QWORD *)(a1 + 16) = &v16[16 * v15];
    }
    else
    {
      v20 = &v16[16 * v12];
      do
      {
        v21 = *((_OWORD *)v7 - 1);
        v7 -= 2;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *v7 = 0;
        v7[1] = 0;
      }
      while (v7 != v11);
      v11 = *(_QWORD **)a1;
      v22 = *(_QWORD *)(a1 + 8);
      v10 = v17 + 16;
      *(_QWORD *)a1 = v20;
      *(_QWORD *)(a1 + 8) = v17 + 16;
      *(_QWORD *)(a1 + 16) = &v16[16 * v15];
      while ((_QWORD *)v22 != v11)
      {
        v22 -= 16;
        sub_18F5D6004(v22);
      }
    }
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v7 = a2;
    v7[1] = a3;
    if (a3)
    {
      v8 = (unint64_t *)(a3 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = v7 + 2;
  }
  *(_QWORD *)(a1 + 8) = v10;
}

uint64_t sub_18F6D03A4(uint64_t a1, double *a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, double *a6, uint64_t a7, char a8, double a9, double a10, double a11)
{
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  double v24;
  double v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  char v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  NSObject *v50;
  _BOOL4 v51;
  _BOOL4 v52;
  char v53;
  NSObject *v54;
  NSObject *v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t *v63;
  float64x2_t *v64;
  uint64_t v65;
  int32x2_t v66;
  NSObject *v67;
  _BOOL4 v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  long double v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  uint64_t v80;
  int v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  _QWORD *v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unint64_t v92;
  void *v93;
  _QWORD *v94;
  uint64_t *v95;
  NSObject *v96;
  uint64_t v97;
  double v98;
  uint64_t *v99;
  char *v100;
  _QWORD *v101;
  int v102;
  uint64_t v103;
  double v104;
  double v105;
  int v106;
  uint64_t v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double *v112;
  double v113;
  double v114;
  double v115;
  uint64_t v116;
  double v117;
  uint64_t *v118;
  _QWORD *v119;
  int v120;
  uint64_t v121;
  double v122;
  double v123;
  double v124;
  double v125;
  NSObject *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  char v133;
  char v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  int v139;
  NSObject *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  char *v151;
  NSObject *v152;
  int v153;
  NSObject *v154;
  uint64_t *v155;
  uint64_t v156;
  double v157;
  char *v158;
  int v159;
  char *v160;
  char *v161;
  double v162;
  NSObject *v163;
  char *v164;
  char v165;
  NSObject *v166;
  void *v167;
  uint64_t *v168;
  double *v169;
  NSObject *v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  NSObject *v179;
  uint64_t v180;
  double v181;
  uint64_t v182;
  NSObject *v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  unint64_t *v194;
  NSObject *v195;
  double v196;
  NSObject *v197;
  NSObject *v198;
  uint64_t v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  NSObject *v207;
  int v208;
  _BOOL4 v209;
  _BOOL4 v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  char *v232;
  char *v233;
  char *v234;
  uint64_t v235;
  char *v236;
  int v237;
  char *v238;
  double v239;
  uint64_t *v240;
  int v241;
  char *v242;
  char v243;
  double v244;
  uint64_t v246;
  std::__shared_weak_count *v247;
  char *v248;
  uint64_t *v249;
  uint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  _OWORD v256[2];
  int v257;
  __int128 v258;
  __int128 v259;
  int v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  uint64_t *v263;
  std::__shared_weak_count *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  double *v267;
  std::__shared_weak_count *v268;
  __int128 v269;
  _BYTE v270[34];
  _BYTE v271[10];
  _BYTE v272[10];
  _BYTE v273[10];
  int v274;
  _BYTE buf[34];
  _BYTE v276[10];
  _BYTE v277[10];
  _BYTE v278[10];
  int v279;
  uint64_t v280;

  v280 = *MEMORY[0x1E0C80C00];
  if (!*a5)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v54 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v54, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Unexpected,invalid geometry pointer,constructPedestrian", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      *(_WORD *)v270 = 0;
      v212 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v212);
      if (v212 != buf)
        free(v212);
    }
    v53 = 0;
    return v53 & 1;
  }
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(uint64_t **)a1;
  while ((uint64_t *)v21 != v22)
    v21 = sub_18F5D6004(v21 - 16);
  *(_QWORD *)(a1 + 8) = v22;
  v23 = mach_continuous_time();
  v24 = sub_18F6BDF00(v23);
  ++*(_DWORD *)(a1 + 48);
  if (!*a3 || (v25 = v24, a10 > 1.0) || a10 < 0.0 || a11 > 1.0 || a11 < 0.0 || !*a4)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v50 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v51 = *a3 != 0;
      v52 = *a4 != 0;
      *(_DWORD *)buf = 134350080;
      *(double *)&buf[4] = a9;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v51;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v52;
      *(_WORD *)&buf[24] = 2048;
      *(double *)&buf[26] = a10;
      *(_WORD *)v276 = 2048;
      *(double *)&v276[2] = a11;
      _os_log_impl(&dword_18F5B3000, v50, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,routeConstructor,constructPedestrian,invalid inputs,startRoad,%{public}d,destRoad,%{public}d,startRoadProjection,%.1lf,destinationRoadProjection,%.1lf", buf, 0x2Cu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v209 = *a3 != 0;
      v210 = *a4 != 0;
      *(_DWORD *)v270 = 134350080;
      *(double *)&v270[4] = a9;
      *(_WORD *)&v270[12] = 1026;
      *(_DWORD *)&v270[14] = v209;
      *(_WORD *)&v270[18] = 1026;
      *(_DWORD *)&v270[20] = v210;
      *(_WORD *)&v270[24] = 2048;
      *(double *)&v270[26] = a10;
      *(_WORD *)v271 = 2048;
      *(double *)&v271[2] = a11;
      v211 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v211);
      if (v211 != buf)
        free(v211);
    }
    v53 = 0;
    ++*(_DWORD *)(a1 + 52);
    return v53 & 1;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29908B0);
  v26 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v27 = *(_QWORD *)(*a3 + 8);
    v28 = *(_QWORD *)(*a4 + 8);
    *(_DWORD *)buf = 134349568;
    *(double *)&buf[4] = a9;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v27;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = v28;
    _os_log_impl(&dword_18F5B3000, v26, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,constructing between,start,%{public}lld,stop,%{public}lld", buf, 0x20u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v213 = *(_QWORD *)(*a3 + 8);
    v214 = *(_QWORD *)(*a4 + 8);
    *(_DWORD *)v270 = 134349568;
    *(double *)&v270[4] = a9;
    *(_WORD *)&v270[12] = 2050;
    *(_QWORD *)&v270[14] = v213;
    *(_WORD *)&v270[22] = 2050;
    *(_QWORD *)&v270[24] = v214;
    v215 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v215);
    if (v215 != buf)
      free(v215);
  }
  v29 = (std::__shared_weak_count *)operator new(0x68uLL);
  v29->__shared_owners_ = 0;
  v29->__shared_weak_owners_ = 0;
  v29->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FDA0;
  v29[1].__vftable = 0;
  v30 = (uint64_t)&v29[1];
  v29[1].__shared_owners_ = 0;
  v29[1].__shared_weak_owners_ = 0;
  LOBYTE(v29[1].__shared_weak_owners_) = 1;
  v29[2].std::__shared_count = 0u;
  *(_OWORD *)&v29[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v29[3].__shared_owners_ = 0u;
  v29[4].__vftable = 0;
  v267 = (double *)&v29[1];
  v268 = v29;
  v31 = (std::__shared_weak_count *)a3[1];
  v265 = *a3;
  v266 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
  }
  v34 = sub_18F6CB3D4(v30, a2, &v265);
  v35 = v266;
  if (v266)
  {
    v36 = (unint64_t *)&v266->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if ((v34 & 1) == 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v56 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a9;
      _os_log_impl(&dword_18F5B3000, v56, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,unable to init startRouteRoad", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      *(_DWORD *)v270 = 134349056;
      *(double *)&v270[4] = a9;
      v216 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v216);
      if (v216 != buf)
        free(v216);
    }
    v53 = 0;
    ++*(_DWORD *)(a1 + 52);
    goto LABEL_342;
  }
  v38 = (std::__shared_weak_count *)operator new(0x68uLL);
  v38->__shared_owners_ = 0;
  v38->__shared_weak_owners_ = 0;
  v38->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FDA0;
  v38[1].__vftable = 0;
  v39 = (uint64_t)&v38[1];
  v38[1].__shared_owners_ = 0;
  v38[1].__shared_weak_owners_ = 0;
  LOBYTE(v38[1].__shared_weak_owners_) = 1;
  v38[2].std::__shared_count = 0u;
  *(_OWORD *)&v38[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v38[3].__shared_owners_ = 0u;
  v38[4].__vftable = 0;
  v263 = (uint64_t *)&v38[1];
  v264 = v38;
  v40 = a4[1];
  v261 = *a4;
  v262 = (std::__shared_weak_count *)v40;
  if (v40)
  {
    v41 = (unint64_t *)(v40 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = sub_18F6CB3D4(v39, a2, &v261);
  v44 = v262;
  if (v262)
  {
    v45 = (unint64_t *)&v262->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if ((v43 & 1) == 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v57 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a9;
      _os_log_impl(&dword_18F5B3000, v57, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,unable to init destinationRouteRoad", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      *(_DWORD *)v270 = 134349056;
      *(double *)&v270[4] = a9;
      v217 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v217);
      if (v217 != buf)
        free(v217);
    }
    v53 = 0;
    ++*(_DWORD *)(a1 + 52);
    goto LABEL_337;
  }
  v47 = *a3;
  v48 = *a4;
  if (*(_QWORD *)*a3 == *(_QWORD *)*a4 && *(_QWORD *)(v47 + 8) == *(_QWORD *)(v48 + 8))
  {
    sub_18F6D0258(a1, (uint64_t)v267, (uint64_t)v268);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v49 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a9;
      _os_log_impl(&dword_18F5B3000, v49, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,routeConstructor,start road is same as destination road", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_78;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
    {
LABEL_374:
      *(_DWORD *)v270 = 134349056;
      *(double *)&v270[4] = a9;
      v218 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v218);
      if (v218 != buf)
        free(v218);
LABEL_78:
      v53 = 1;
      goto LABEL_337;
    }
LABEL_417:
    dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    goto LABEL_374;
  }
  v60 = v47 + 136;
  v59 = *(_QWORD *)(v47 + 136);
  v58 = *(_QWORD *)(v60 + 8);
  v61 = 0uLL;
  v62 = 0uLL;
  if (v58 != v59)
    v62 = *(float64x2_t *)(v58 - 16);
  v65 = v48 + 136;
  v63 = *(float64x2_t **)(v48 + 136);
  v64 = *(float64x2_t **)(v65 + 8);
  if (v64 != v63)
    v61 = *v63;
  v66 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v62, v61)));
  if ((vand_s8((int8x8_t)v66, (int8x8_t)vdup_lane_s32(v66, 1)).u8[0] & 1) != 0)
  {
    sub_18F6D0258(a1, (uint64_t)v267, (uint64_t)v268);
    sub_18F6D0258(a1, (uint64_t)v263, (uint64_t)v264);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v67 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = a9;
      _os_log_impl(&dword_18F5B3000, v67, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,routeConstructor,start road and destination road are neighbors", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_78;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_374;
    goto LABEL_417;
  }
  v239 = v25;
  v68 = fabs(*a6) >= 0.00003;
  if (fabs(a6[1]) >= 0.00003)
    v68 = 1;
  v69 = 0.0;
  if (v68)
    v70 = a11;
  else
    v70 = 0.0;
  v244 = v70;
  if (v68)
    v71 = *a6;
  else
    v71 = 0.0;
  if (v68)
    v72 = a6[1];
  else
    v72 = 0.0;
  if (!v68 && v64 != v63)
  {
    v71 = v63->f64[0];
    v72 = v63->f64[1];
    v244 = 0.0;
  }
  v73 = 0.0;
  if (v58 != v59)
  {
    v69 = *(double *)(v58 - 16);
    v73 = *(double *)(v58 - 8);
  }
  v74 = sub_18F5BD064(a2, v69, v73, v71, v72, 0.0);
  v258 = 0u;
  v259 = 0u;
  v260 = 1065353216;
  memset(v256, 0, sizeof(v256));
  v257 = 1065353216;
  v267[8] = v74;
  sub_18F6CBF38(&v258, (uint64_t *)&v267);
  v243 = 0;
  v78 = 0;
  v254 = 0;
  v255 = 0;
  while (1)
  {
    if (v78 == 1500)
    {
      ++*(_DWORD *)(a1 + 28);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v162 = v239;
      v166 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349568;
        *(double *)&buf[4] = a9;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = 1501;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = 1500;
        _os_log_impl(&dword_18F5B3000, v166, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,A* Search iterations,%{public}d,exceeded max,%{public}d", buf, 0x18u);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_275;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      *(_DWORD *)v270 = 134349568;
      *(double *)&v270[4] = a9;
      *(_WORD *)&v270[12] = 1026;
      *(_DWORD *)&v270[14] = 1501;
      *(_WORD *)&v270[18] = 1026;
      *(_DWORD *)&v270[20] = 1500;
      v164 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v164);
LABEL_393:
      if (v164 != buf)
        free(v164);
      v165 = 1;
LABEL_396:
      v162 = v239;
      goto LABEL_276;
    }
    HIDWORD(v92) = -1775253149 * (unsigned __int16)++v78;
    LODWORD(v92) = HIDWORD(v92);
    if ((v92 >> 1) <= 0x1B4E81B)
    {
      v93 = *(void **)(*a5 + 88);
      if (v93)
        objc_msgSend_clearRoadTiles(v93, v75, v76, v77);
    }
    if (!sub_18F6CC18C((uint64_t)&v258, &v254))
      break;
    if (!v254)
      break;
    v94 = (_QWORD *)*v254;
    if (!*v254)
      break;
    if (v263 && *v94 == *(_QWORD *)*v263 && v94[1] == *(_QWORD *)(*v263 + 8))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v162 = v239;
      v207 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v208 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)buf = 134349568;
        *(double *)&buf[4] = a9;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v208;
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = *((_QWORD *)&v259 + 1);
        _os_log_impl(&dword_18F5B3000, v207, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstructPedestrian,best path found is the destinationPath - search complete!,iterations,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
      }
      if (!sub_18F5C4AE0(115, 2))
      {
        v165 = 0;
        goto LABEL_276;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v237 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)v270 = 134349568;
      *(double *)&v270[4] = a9;
      *(_WORD *)&v270[12] = 1026;
      *(_DWORD *)&v270[14] = v237;
      *(_WORD *)&v270[18] = 2050;
      *(_QWORD *)&v270[20] = *((_QWORD *)&v259 + 1);
      v238 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v238);
      if (v238 != buf)
        free(v238);
      v165 = 0;
      goto LABEL_396;
    }
    v251 = 0;
    v252 = 0;
    v253 = 0;
    sub_18F623BF8(*a5, v254, &v251, 1);
    v248 = 0;
    v249 = 0;
    v250 = 0;
    sub_18F624378(*a5, v254, &v248, 1);
    sub_18F6CA0BC((uint64_t *)&v251, (uint64_t)v252, (uint64_t *)v248, v249, ((char *)v249 - v248) >> 4);
    v95 = (uint64_t *)v251;
    v242 = v252;
    if (v251 != v252)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v96 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v97 = *(_QWORD *)(*v254 + 8);
        v98 = *((double *)v254 + 8);
        *(_QWORD *)v276 = v254[7];
        *(double *)v277 = v98;
        *(_DWORD *)buf = 134350593;
        *(double *)&buf[4] = a9;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v97;
        *(_WORD *)&buf[22] = 2050;
        *(_QWORD *)&buf[24] = (v252 - v251) >> 4;
        *(_WORD *)&buf[32] = 2050;
        *(_WORD *)&v276[8] = 2050;
        *(_WORD *)&v277[8] = 2050;
        *(double *)v278 = *(double *)v276 + v98;
        *(_WORD *)&v278[8] = 1026;
        v279 = v78;
        _os_log_impl(&dword_18F5B3000, v96, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,found neighbors for %{private}lld,size,%{public}lu,g,%{public}.2lf,h,%{public}.2lf,cost,%{public}.2lf,iterationCount,%{public}d", buf, 0x44u);
      }
      v241 = v78;
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v156 = *(_QWORD *)(*v254 + 8);
        v157 = *((double *)v254 + 8);
        *(_QWORD *)v271 = v254[7];
        *(double *)v272 = v157;
        *(_DWORD *)v270 = 134350593;
        *(double *)&v270[4] = a9;
        *(_WORD *)&v270[12] = 2049;
        *(_QWORD *)&v270[14] = v156;
        *(_WORD *)&v270[22] = 2050;
        *(_QWORD *)&v270[24] = (v252 - v251) >> 4;
        *(_WORD *)&v270[32] = 2050;
        *(_WORD *)&v271[8] = 2050;
        *(_WORD *)&v272[8] = 2050;
        *(double *)v273 = *(double *)v271 + v157;
        *(_WORD *)&v273[8] = 1026;
        v274 = v78;
        v158 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v158);
        if (v158 != buf)
          free(v158);
      }
      v240 = v95;
      sub_18F6CBF88((uint64_t *)&v258, (uint64_t)v254);
      v99 = (uint64_t *)v251;
      v100 = v252;
      while (1)
      {
        if (v99 == (uint64_t *)v100)
        {
LABEL_244:
          sub_18F6CBF38(v256, (uint64_t *)&v254);
          v78 = v241;
          v95 = v240;
          goto LABEL_245;
        }
        v101 = (_QWORD *)*v99;
        if (!*v99)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29908B0);
          v154 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134349056;
            *(double *)&buf[4] = a9;
            _os_log_impl(&dword_18F5B3000, v154, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,neighbor road is nullptr", buf, 0xCu);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29908B0);
            *(_DWORD *)v270 = 134349056;
            *(double *)&v270[4] = a9;
            v161 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v161);
            if (v161 != buf)
              free(v161);
          }
          v243 = 1;
          goto LABEL_244;
        }
        if (*v101 == *(_QWORD *)*a4 && v101[1] == *(_QWORD *)(*a4 + 8))
        {
          v102 = sub_18F705854(*v254, v99);
          v103 = *a4;
          if (v102)
          {
            sub_18F7047B4(*a4);
            v104 = *(double *)(v103 + 40);
            v105 = v244;
          }
          else
          {
            sub_18F7047B4(*a4);
            v104 = *(double *)(v103 + 40);
            v105 = 1.0 - v244;
          }
          v115 = v105 * v104;
        }
        else
        {
          v106 = sub_18F705854(*v254, v99);
          v107 = *(_QWORD *)(*v99 + 144);
          v108 = 0.0;
          v109 = 0.0;
          v110 = 0.0;
          if (v107 != *(_QWORD *)(*v99 + 136))
          {
            v109 = *(double *)(v107 - 16);
            v110 = *(double *)(v107 - 8);
          }
          v111 = sub_18F5BD064(a2, v109, v110, v71, v72, 0.0);
          v112 = *(double **)(*v99 + 136);
          v113 = 0.0;
          if (*(double **)(*v99 + 144) != v112)
          {
            v108 = *v112;
            v113 = v112[1];
          }
          v114 = sub_18F5BD064(a2, v108, v113, v71, v72, 0.0);
          if (v106)
            v115 = v111;
          else
            v115 = v114;
        }
        v116 = *v254;
        sub_18F7047B4(*v254);
        v117 = *(double *)(v116 + 40);
        v118 = v254;
        if (v267)
        {
          v119 = (_QWORD *)*v254;
          if (*v254)
          {
            if (*v119 == **(_QWORD **)v267 && v119[1] == *(_QWORD *)(*(_QWORD *)v267 + 8))
            {
              v120 = sub_18F7058F4((uint64_t)v119, v99);
              v121 = *v254;
              if (v120)
              {
                sub_18F7047B4(*v254);
                v122 = *(double *)(v121 + 40);
                v123 = a10;
              }
              else
              {
                sub_18F7047B4(*v254);
                v123 = *(double *)(v121 + 40);
                v122 = 1.0 - a10;
              }
              v117 = v123 * v122;
              v118 = v254;
            }
          }
        }
        v124 = v117 + *((double *)v118 + 7);
        v125 = v115 + v124;
        if (a8 && v125 > *(double *)&a7)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29908B0);
          v126 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134349568;
            *(double *)&buf[4] = a9;
            *(_WORD *)&buf[12] = 2050;
            *(double *)&buf[14] = v115 + v124;
            *(_WORD *)&buf[22] = 2050;
            *(_QWORD *)&buf[24] = a7;
            _os_log_impl(&dword_18F5B3000, v126, OS_LOG_TYPE_DEFAULT, "CLTSP,CLRS,%{public}.1lf,Warning,cost exceeds maximum tolerable cost,cost,%{public}.1lf,maxTolerableCostInMeters,%{public}.1lf", buf, 0x20u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29908B0);
            *(_DWORD *)v270 = 134349568;
            *(double *)&v270[4] = a9;
            *(_WORD *)&v270[12] = 2050;
            *(double *)&v270[14] = v115 + v124;
            *(_WORD *)&v270[22] = 2050;
            *(_QWORD *)&v270[24] = a7;
            v127 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v127);
            if (v127 != buf)
              free(v127);
          }
          goto LABEL_227;
        }
        v128 = operator new();
        *(_QWORD *)v128 = 0;
        *(_QWORD *)(v128 + 8) = 0;
        *(_BYTE *)(v128 + 16) = 1;
        *(_OWORD *)(v128 + 24) = 0u;
        *(_OWORD *)(v128 + 40) = 0u;
        *(_OWORD *)(v128 + 56) = 0u;
        *(_QWORD *)(v128 + 72) = 0;
        sub_18F6D75C4(v270, v128);
        v129 = *(_QWORD *)v270;
        v130 = v99[1];
        v246 = *v99;
        v247 = (std::__shared_weak_count *)v130;
        if (v130)
        {
          v131 = (unint64_t *)(v130 + 8);
          do
            v132 = __ldxr(v131);
          while (__stxr(v132 + 1, v131));
        }
        v133 = sub_18F6CB3D4(v129, a2, &v246);
        v134 = v133;
        v135 = v247;
        if (!v247)
          goto LABEL_194;
        v136 = (unint64_t *)&v247->__shared_owners_;
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
          if ((v134 & 1) != 0)
          {
LABEL_195:
            sub_18F6CC268(buf, &v258, *(uint64_t *)v270);
            v138 = *(_QWORD *)buf;
            if (*(_QWORD *)buf)
            {
              if (*(double *)(*(_QWORD *)buf + 56) + *(double *)(*(_QWORD *)buf + 64) < v125)
              {
                v139 = 77;
LABEL_215:
                v145 = *(std::__shared_weak_count **)&buf[8];
                if (*(_QWORD *)&buf[8])
                {
                  v146 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                  do
                    v147 = __ldaxr(v146);
                  while (__stlxr(v147 - 1, v146));
                  if (!v147)
                  {
                    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                    std::__shared_weak_count::__release_weak(v145);
                  }
                }
                goto LABEL_220;
              }
              *(double *)(*(_QWORD *)buf + 56) = v124;
              *(double *)(v138 + 64) = v115;
              sub_18F62D304((_QWORD *)(v138 + 40), (uint64_t)v254, v255);
            }
            else
            {
              sub_18F6CC268(&v269, v256, *(uint64_t *)v270);
              if (!(_QWORD)v269 || *(double *)(v269 + 56) + *(double *)(v269 + 64) > v125)
              {
                v141 = *(_QWORD *)v270;
                *(double *)(*(_QWORD *)v270 + 56) = v124;
                *(double *)(v141 + 64) = v115;
                sub_18F62D304((_QWORD *)(v141 + 40), (uint64_t)v254, v255);
                sub_18F6CBF38(&v258, (uint64_t *)v270);
              }
              v142 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
              if (*((_QWORD *)&v269 + 1))
              {
                v143 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
                do
                  v144 = __ldaxr(v143);
                while (__stlxr(v144 - 1, v143));
                if (!v144)
                {
                  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                  std::__shared_weak_count::__release_weak(v142);
                }
              }
            }
            v139 = 0;
            goto LABEL_215;
          }
        }
        else
        {
LABEL_194:
          if ((v133 & 1) != 0)
            goto LABEL_195;
        }
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v140 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = a9;
          _os_log_impl(&dword_18F5B3000, v140, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,unable to init neighbor", buf, 0xCu);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29908B0);
          LODWORD(v269) = 134349056;
          *(double *)((char *)&v269 + 4) = a9;
          v151 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v151);
          if (v151 != buf)
            free(v151);
        }
        v139 = 76;
        v243 = 1;
LABEL_220:
        v148 = *(std::__shared_weak_count **)&v270[8];
        if (*(_QWORD *)&v270[8])
        {
          v149 = (unint64_t *)(*(_QWORD *)&v270[8] + 8);
          do
            v150 = __ldaxr(v149);
          while (__stlxr(v150 - 1, v149));
          if (!v150)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
          }
        }
        if (v139 != 77 && v139)
          goto LABEL_244;
LABEL_227:
        v99 += 2;
      }
    }
    ++*(_DWORD *)(a1 + 60);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v152 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v153 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = a9;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v153;
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = *((_QWORD *)&v259 + 1);
      _os_log_impl(&dword_18F5B3000, v152, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,road connections not available,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v159 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)v270 = 134349568;
      *(double *)&v270[4] = a9;
      *(_WORD *)&v270[12] = 1026;
      *(_DWORD *)&v270[14] = v159;
      *(_WORD *)&v270[18] = 2050;
      *(_QWORD *)&v270[20] = *((_QWORD *)&v259 + 1);
      v160 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v160);
      if (v160 != buf)
        free(v160);
      v243 = 1;
    }
    else
    {
      v243 = 1;
    }
LABEL_245:
    *(_QWORD *)buf = &v248;
    sub_18F62AB98((void ***)buf);
    *(_QWORD *)buf = &v251;
    sub_18F62AB98((void ***)buf);
    if (v95 == (uint64_t *)v242)
    {
LABEL_269:
      v162 = v239;
      v165 = v243;
      goto LABEL_276;
    }
    v155 = v254;
    if (v254)
    {
      v79 = v263;
      if (v244 != 1.0)
        goto LABEL_106;
      if (v263)
      {
        v80 = *v254;
        if (*v254)
        {
          if (*(_BYTE *)(v80 + 116)
            || (~*(_DWORD *)(v80 + 108) & 0x7FFFFFFF) == 0
            || *(_BYTE *)(v80 + 117)
            || (~*(_DWORD *)(v80 + 112) & 0x7FFFFFFF) == 0
            || *(_BYTE *)(*v263 + 117))
          {
            LOBYTE(v81) = sub_18F7058A4(v80, v263);
          }
          else
          {
            v86 = *(_DWORD *)(*v263 + 112);
            v81 = sub_18F7058A4(v80, v263);
            if ((~v86 & 0x7FFFFFFF) != 0)
              v87 = v81;
            else
              v87 = 0;
            if (v87 == 1)
            {
              v88 = *(_DWORD *)(*v79 + 112);
              if (*(_DWORD *)(*v155 + 108) == v88 || *(_DWORD *)(*v155 + 112) == v88)
                goto LABEL_269;
              goto LABEL_106;
            }
          }
          if ((v81 & 1) != 0)
            goto LABEL_269;
        }
LABEL_106:
        if (v244 == 0.0)
        {
          if (v79)
          {
            v82 = v254;
            v83 = *v254;
            if (*v254)
            {
              if (*(_BYTE *)(v83 + 116)
                || (~*(_DWORD *)(v83 + 108) & 0x7FFFFFFF) == 0
                || *(_BYTE *)(v83 + 117)
                || (~*(_DWORD *)(v83 + 112) & 0x7FFFFFFF) == 0
                || *(_BYTE *)(*v79 + 116))
              {
                LOBYTE(v84) = sub_18F705854(v83, v79);
LABEL_115:
                if ((v84 & 1) != 0)
                  goto LABEL_269;
                goto LABEL_118;
              }
              v89 = *(_DWORD *)(*v79 + 108);
              v84 = sub_18F705854(v83, v79);
              if ((~v89 & 0x7FFFFFFF) != 0)
                v90 = v84;
              else
                v90 = 0;
              if (v90 != 1)
                goto LABEL_115;
              v91 = *(_DWORD *)(*v79 + 108);
              if (*(_DWORD *)(*v82 + 108) == v91 || *(_DWORD *)(*v82 + 112) == v91)
                goto LABEL_269;
LABEL_118:
              v85 = (_QWORD *)*v254;
              if (*v254 && *v85 == *(_QWORD *)*v79 && v85[1] == *(_QWORD *)(*v79 + 8))
                goto LABEL_269;
            }
          }
        }
        else if (v79)
        {
          goto LABEL_118;
        }
      }
    }
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29908B0);
  v162 = v239;
  v163 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349568;
    *(double *)&buf[4] = a9;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v78;
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = *((_QWORD *)&v259 + 1);
    _os_log_impl(&dword_18F5B3000, v163, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,did not find best path,iterations,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    *(_DWORD *)v270 = 134349568;
    *(double *)&v270[4] = a9;
    *(_WORD *)&v270[12] = 1026;
    *(_DWORD *)&v270[14] = v78;
    *(_WORD *)&v270[18] = 2050;
    *(_QWORD *)&v270[20] = *((_QWORD *)&v259 + 1);
    v164 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v164);
    goto LABEL_393;
  }
LABEL_275:
  v165 = 1;
LABEL_276:
  v167 = *(void **)(*a5 + 88);
  if (v167)
    objc_msgSend_clearRoadTiles(v167, v75, v76, v77);
  v252 = 0;
  v253 = 0;
  v251 = (char *)&v252;
  v168 = v254;
  if (!(v165 & 1 | (v254 == 0)))
  {
    v193 = 501;
    while (1)
    {
      if (!v168[5])
        goto LABEL_279;
      if (!--v193)
        break;
      v194 = (unint64_t *)*v168;
      if (!*v168)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v197 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = a9;
          _os_log_impl(&dword_18F5B3000, v197, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,A* Search null road", buf, 0xCu);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29908B0);
          *(_DWORD *)v270 = 134349056;
          *(double *)&v270[4] = a9;
          v234 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v234);
          if (v234 != buf)
            free(v234);
          v162 = v239;
        }
        v196 = 0.0;
        if (v162 < 0.0)
          goto LABEL_335;
        goto LABEL_334;
      }
      if (sub_18F62A584((uint64_t)&v251, (unint64_t *)*v168))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v198 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          v199 = *(_QWORD *)(*v254 + 8);
          *(_DWORD *)buf = 134349313;
          *(double *)&buf[4] = a9;
          *(_WORD *)&buf[12] = 2049;
          *(_QWORD *)&buf[14] = v199;
          _os_log_impl(&dword_18F5B3000, v198, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,A* Search road already added,%{private}lld", buf, 0x16u);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29908B0);
          v235 = *(_QWORD *)(*v254 + 8);
          *(_DWORD *)v270 = 134349313;
          *(double *)&v270[4] = a9;
          *(_WORD *)&v270[12] = 2049;
          *(_QWORD *)&v270[14] = v235;
          v236 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v236);
          if (v236 != buf)
            free(v236);
          v162 = v239;
        }
        v196 = 0.0;
        if (v162 >= 0.0)
          goto LABEL_334;
LABEL_335:
        v53 = 0;
        *(double *)(a1 + 40) = v196;
        *(double *)(a1 + 64) = v196 + *(double *)(a1 + 64);
        goto LABEL_336;
      }
      sub_18F6D0258(a1, (uint64_t)v254, v255);
      *(_QWORD *)buf = v194;
      *((_BYTE *)sub_18F62CB48((uint64_t **)&v251, v194, (uint64_t)&unk_18F772428, (_OWORD **)buf) + 48) = 1;
      sub_18F62D304(&v254, v254[5], v254[6]);
      v168 = v254;
      if (!v254)
        goto LABEL_279;
    }
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v195 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = a9;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = 501;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = 500;
      _os_log_impl(&dword_18F5B3000, v195, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,A* Search road count,%{public}d,exceeded max,%{public}d", buf, 0x18u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      *(_DWORD *)v270 = 134349568;
      *(double *)&v270[4] = a9;
      *(_WORD *)&v270[12] = 1026;
      *(_DWORD *)&v270[14] = 501;
      *(_WORD *)&v270[18] = 1026;
      *(_DWORD *)&v270[20] = 500;
      v233 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v233);
      if (v233 != buf)
        free(v233);
      v162 = v239;
    }
    v196 = 0.0;
    if (v162 < 0.0)
      goto LABEL_335;
LABEL_334:
    v200 = mach_continuous_time();
    v196 = vabdd_f64(sub_18F6BDF00(v200), v162) * 1000.0;
    goto LABEL_335;
  }
LABEL_279:
  v169 = v267;
  if (!sub_18F62A584((uint64_t)&v251, *(unint64_t **)v267))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v170 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v171 = *(_QWORD *)(*(_QWORD *)v169 + 8);
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = a9;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v171;
      _os_log_impl(&dword_18F5B3000, v170, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,added first road,%lld", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v229 = *(_QWORD *)(*(_QWORD *)v169 + 8);
      *(_DWORD *)v270 = 134349312;
      *(double *)&v270[4] = a9;
      *(_WORD *)&v270[12] = 2048;
      *(_QWORD *)&v270[14] = v229;
      v230 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v230);
      if (v230 != buf)
        free(v230);
      v162 = v239;
    }
    sub_18F6D0258(a1, (uint64_t)v169, (uint64_t)v268);
  }
  v172 = *(uint64_t **)a1;
  v173 = *(_QWORD *)(a1 + 8);
  v174 = (uint64_t *)(v173 - 16);
  if (*(_QWORD *)a1 != v173 && v174 > v172)
  {
    do
    {
      v176 = *v172;
      *v172 = *v174;
      *v174 = v176;
      v177 = v172[1];
      v172[1] = v174[1];
      v174[1] = v177;
      v172 += 2;
      v174 -= 2;
    }
    while (v172 < v174);
  }
  v178 = v263;
  if (!sub_18F62A584((uint64_t)&v251, (unint64_t *)*v263))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v179 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v180 = *(_QWORD *)(*v178 + 8);
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = a9;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v180;
      _os_log_impl(&dword_18F5B3000, v179, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,added last road,%lld", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v231 = *(_QWORD *)(*v178 + 8);
      *(_DWORD *)v270 = 134349312;
      *(double *)&v270[4] = a9;
      *(_WORD *)&v270[12] = 2048;
      *(_QWORD *)&v270[14] = v231;
      v232 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v232);
      if (v232 != buf)
        free(v232);
      v162 = v239;
    }
    sub_18F6D0258(a1, (uint64_t)v178, (uint64_t)v264);
  }
  *(_DWORD *)(a1 + 52) += v165 & 1;
  v181 = 0.0;
  if (v162 >= 0.0)
  {
    v182 = mach_continuous_time();
    v181 = vabdd_f64(sub_18F6BDF00(v182), v162) * 1000.0;
  }
  *(double *)(a1 + 40) = v181;
  *(double *)(a1 + 64) = v181 + *(double *)(a1 + 64);
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29908B0);
  v183 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEFAULT))
  {
    v184 = *(_DWORD *)(a1 + 48);
    v185 = *(_DWORD *)(a1 + 52);
    v186 = *(_DWORD *)(a1 + 24);
    v187 = *(_DWORD *)(a1 + 28);
    v188 = *(_DWORD *)(a1 + 32);
    v189 = *(_DWORD *)(a1 + 56);
    v190 = *(_DWORD *)(a1 + 60);
    v191 = *(_QWORD *)(a1 + 40);
    v192 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 67242240;
    *(_DWORD *)&buf[4] = v184;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v185;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v186;
    *(_WORD *)&buf[20] = 1026;
    *(_DWORD *)&buf[22] = v187;
    *(_WORD *)&buf[26] = 1026;
    *(_DWORD *)&buf[28] = v189;
    *(_WORD *)&buf[32] = 1026;
    *(_DWORD *)v276 = v188;
    *(_WORD *)&v276[4] = 1026;
    *(_DWORD *)&v276[6] = v190;
    *(_WORD *)v277 = 2050;
    *(_QWORD *)&v277[2] = v191;
    *(_WORD *)v278 = 2050;
    *(_QWORD *)&v278[2] = v192;
    _os_log_impl(&dword_18F5B3000, v183, OS_LOG_TYPE_DEFAULT, "CLTSP,AStar Pedestrian Analytics,attempts,%{public}d,failures,%{public}d,roadCountExceededMax,%{public}d,iterationsExceededMax,%{public}d,processingTimeExceededMax,%{public}d,iterations,%{public}d,roadConnectionsUnavailable,%{public}d,processingTimeMSec,%{public}.2lf,cumulativeProcessingTimeMSec,%{public}.2lf", buf, 0x40u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v219 = *(_DWORD *)(a1 + 48);
    v220 = *(_DWORD *)(a1 + 52);
    v221 = *(_DWORD *)(a1 + 24);
    v222 = *(_DWORD *)(a1 + 28);
    v223 = *(_DWORD *)(a1 + 32);
    v224 = *(_DWORD *)(a1 + 56);
    v225 = *(_DWORD *)(a1 + 60);
    v226 = *(_QWORD *)(a1 + 40);
    v227 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)v270 = 67242240;
    *(_DWORD *)&v270[4] = v219;
    *(_WORD *)&v270[8] = 1026;
    *(_DWORD *)&v270[10] = v220;
    *(_WORD *)&v270[14] = 1026;
    *(_DWORD *)&v270[16] = v221;
    *(_WORD *)&v270[20] = 1026;
    *(_DWORD *)&v270[22] = v222;
    *(_WORD *)&v270[26] = 1026;
    *(_DWORD *)&v270[28] = v224;
    *(_WORD *)&v270[32] = 1026;
    *(_DWORD *)v271 = v223;
    *(_WORD *)&v271[4] = 1026;
    *(_DWORD *)&v271[6] = v225;
    *(_WORD *)v272 = 2050;
    *(_QWORD *)&v272[2] = v226;
    *(_WORD *)v273 = 2050;
    *(_QWORD *)&v273[2] = v227;
    v228 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "CoreLocation: %s\n", v228);
    if (v228 != buf)
      free(v228);
  }
  v53 = v165 ^ 1;
LABEL_336:
  sub_18F62C738((uint64_t)&v251, v252);
  sub_18F5D6004((uint64_t)&v254);
  sub_18F6D6E5C((uint64_t)v256);
  sub_18F6D6E5C((uint64_t)&v258);
LABEL_337:
  v201 = v264;
  if (v264)
  {
    v202 = (unint64_t *)&v264->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
LABEL_342:
  v204 = v268;
  if (v268)
  {
    v205 = (unint64_t *)&v268->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  return v53 & 1;
}

void sub_18F6D3150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_18F5D6004((uint64_t)&a35);
  sub_18F6D6E5C((uint64_t)&a37);
  sub_18F6D6E5C((uint64_t)&a43);
  sub_18F5D6004((uint64_t)&a51);
  sub_18F5D6004((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_18F6D32C0(uint64_t *a1, double *a2)
{
  uint64_t v2;
  unint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;

  v2 = *a1;
  if ((unint64_t)(a1[1] - *a1) >= 0x11)
  {
    v5 = 1;
    while (1)
    {
      v6 = *(_OWORD *)(v2 + 16 * v5 - 16);
      v35 = v6;
      v33 = v6;
      if (*((_QWORD *)&v6 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
        v2 = *a1;
      }
      v9 = *(_OWORD *)(v2 + 16 * v5);
      v34 = v9;
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = (uint64_t *)v9;
      if (!(_QWORD)v9)
        goto LABEL_19;
      v14 = *(_QWORD *)v33;
      if (!*(_QWORD *)v33)
        goto LABEL_19;
      if (*(_BYTE *)(v14 + 116))
        break;
      if ((~*(_DWORD *)(v14 + 108) & 0x7FFFFFFF) == 0)
        break;
      v15 = *(_QWORD *)v9;
      if (*(_BYTE *)(*(_QWORD *)v9 + 116) || (~*(_DWORD *)(v15 + 108) & 0x7FFFFFFF) == 0 || *(_BYTE *)(v15 + 117))
        break;
      v30 = *(_DWORD *)(v15 + 112);
      v16 = sub_18F7058F4(v14, (uint64_t *)v9);
      if ((~v30 & 0x7FFFFFFF) != 0)
        v31 = v16;
      else
        v31 = 0;
      if (v31 != 1)
        goto LABEL_18;
      v32 = *(_DWORD *)(*(_QWORD *)v33 + 108);
      if (v32 == *(_DWORD *)(*v13 + 108) || v32 == *(_DWORD *)(*v13 + 112))
        goto LABEL_27;
LABEL_19:
      if ((sub_18F6CBDF4((uint64_t *)v33, (uint64_t **)&v34) & 1) == 0)
      {
        v18 = *(_QWORD *)v33;
        v19 = *v13;
        v20 = sub_18F5BD064(a2, **(double **)(v18 + 136), *(double *)(*(_QWORD *)(v18 + 136) + 8), **(double **)(*v13 + 136), *(double *)(*(_QWORD *)(*v13 + 136) + 8), 0.0);
        v21 = sub_18F5BD064(a2, **(double **)(v18 + 136), *(double *)(*(_QWORD *)(v18 + 136) + 8), *(double *)(*(_QWORD *)(v19 + 144) - 16), *(double *)(*(_QWORD *)(v19 + 144) - 8), 0.0);
        if (v21 >= v20)
          v22 = v20;
        else
          v22 = v21;
        v23 = sub_18F5BD064(a2, *(double *)(*(_QWORD *)(v18 + 144) - 16), *(double *)(*(_QWORD *)(v18 + 144) - 8), **(double **)(v19 + 136), *(double *)(*(_QWORD *)(v19 + 136) + 8), 0.0);
        v24 = sub_18F5BD064(a2, *(double *)(*(_QWORD *)(v18 + 144) - 16), *(double *)(*(_QWORD *)(v18 + 144) - 8), *(double *)(*(_QWORD *)(v19 + 144) - 16), *(double *)(*(_QWORD *)(v19 + 144) - 8), 0.0);
        if (v24 >= v23)
          v24 = v23;
        if (v22 >= v24)
          goto LABEL_29;
LABEL_27:
        v17 = 0;
        goto LABEL_28;
      }
      v17 = 1;
LABEL_28:
      *(_BYTE *)(v33 + 16) = v17;
LABEL_29:
      if (((a1[1] - *a1) >> 4) - 1 == v5 && sub_18F6CBDF4(v13, (uint64_t **)&v35))
        *((_BYTE *)v13 + 16) = 0;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      ++v5;
      v2 = *a1;
      if (v5 >= (a1[1] - *a1) >> 4)
        return;
    }
    LOBYTE(v16) = sub_18F7058F4(v14, (uint64_t *)v9);
LABEL_18:
    if ((v16 & 1) != 0)
      goto LABEL_27;
    goto LABEL_19;
  }
}

void sub_18F6D3588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F6D35A4(uint64_t *a1, uint64_t *a2, char **a3, uint64_t ***a4, char **a5)
{
  char *v5;
  uint64_t ***v6;
  uint64_t **v7;
  uint64_t **v8;
  int v11;
  int v12;
  __objc2_class *v13;
  double v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t j;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  NSObject *v29;
  char *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  char v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  double *v62;
  double v63;
  std::__shared_weak_count *v64;
  uint64_t *v65;
  double *v66;
  unint64_t *v67;
  unint64_t v68;
  char v69;
  char v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  double v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 **v86;
  __int128 **v87;
  uint64_t v88;
  double *v89;
  char *v90;
  char *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  char *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  NSObject *v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  NSObject *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  NSObject *v130;
  char *v131;
  NSObject *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  _QWORD *v146;
  char *v147;
  char *v148;
  __int128 v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  int v153;
  char *v156;
  uint64_t **i;
  __int128 v158;
  uint64_t *v159;
  std::__shared_weak_count *v160;
  double *v161;
  std::__shared_weak_count *v162;
  uint64_t v163[2];
  uint64_t v164[2];
  double *v165;
  std::__shared_weak_count *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  std::__shared_weak_count *v174;
  __int128 v175;
  uint64_t v176;
  _BYTE v177[24];
  _BYTE v178[10];
  _BYTE v179[10];
  double v180[2];
  uint8_t buf[24];
  _BYTE v182[10];
  _BYTE v183[10];
  _QWORD v184[202];

  *(_QWORD *)((char *)&v184[199] + 4) = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v156 = a3[1];
  if (*a3 == v156)
    return;
  v6 = a4;
  v7 = *a4;
  v8 = a4[1];
  if (*a4 == v8)
    return;
  v11 = 0;
  v170 = 0;
  v171 = 0;
  v169 = xmmword_18F771F40;
  v12 = ((unint64_t)((char *)v8 - (char *)v7) >> 4) * ((unint64_t)(v156 - v5) >> 4);
  v13 = &OBJC_METACLASS___CLHeadingInternal;
  v172 = 0x3FF0000000000000;
  v14 = -1.0;
  v153 = v12;
  do
  {
    if (*(_QWORD *)v5)
    {
      if (**(_QWORD **)v5)
      {
        v16 = *v6;
        v15 = v6[1];
        for (i = v15; ; v15 = i)
        {
          if (v16 == v15)
            goto LABEL_196;
          v18 = *a1;
          for (j = a1[1]; j != v18; j = sub_18F5D6004(j - 16))
            ;
          a1[1] = v18;
          v19 = (double *)*v16;
          if (*v16)
          {
            if (*(_QWORD *)v19)
            {
              if (v14 >= 0.0)
              {
                v34 = fmax(v14 * 0.25, 200.0);
                if (v34 < 300.0)
                  v34 = 300.0;
                v28 = v14 + v34;
              }
              else
              {
                v20 = *(_QWORD *)v5;
                v21 = *(double *)(*(_QWORD *)v5 + 24);
                v22 = v19[3];
                v23 = vabdd_f64(v19[2], *(double *)(*(_QWORD *)v5 + 16));
                v24 = *(_DWORD *)(*a2 + 152);
                v25 = 66.6;
                if (v24 == 3)
                  v25 = 30.0;
                if (v24 == 2)
                  v26 = 13.3;
                else
                  v26 = v25;
                *(_QWORD *)buf = 0;
                *(_QWORD *)v177 = 0;
                sub_18F71ACC4((double *)&v169, (double *)buf, (double *)v177, v21, *(double *)(v20 + 32), 0.0, *(double *)(v20 + 40), v22, v19[4]);
                v27 = (fabs(*(double *)buf) + fabs(*(double *)v177)) * 3.0;
                if (v27 >= v23 * v26)
                  v28 = v23 * v26;
                else
                  v28 = v27;
              }
              if (v13[8].vtable != (void *)-1)
                dispatch_once(&qword_1EE172158, &unk_1E29908B0);
              v35 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                ++v11;
                v36 = a1[5];
                v37 = a1[8];
                *(_DWORD *)buf = 67241472;
                *(_DWORD *)&buf[4] = v11;
                *(_WORD *)&buf[8] = 1026;
                *(_DWORD *)&buf[10] = v12;
                *(_WORD *)&buf[14] = 2050;
                *(double *)&buf[16] = v14;
                *(_WORD *)v182 = 2050;
                *(double *)&v182[2] = v28;
                *(_WORD *)v183 = 2050;
                *(_QWORD *)&v183[2] = v36;
                LOWORD(v184[0]) = 2050;
                *(_QWORD *)((char *)v184 + 2) = v37;
                _os_log_impl(&dword_18F5B3000, v35, OS_LOG_TYPE_DEBUG, "CLTSP,construcRouteCandidates,processing,%{public}d/%{public}d,minRouteLength,%{public}.1lf,maxRouteLength,%{public}.1lf,processingTimeMSec,%{public}.2lf,cumulativeProcessingTimeMSec,%{public}.2lf", buf, 0x36u);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (v13[8].vtable != (void *)-1)
                  dispatch_once(&qword_1EE172158, &unk_1E29908B0);
                ++v11;
                v123 = a1[5];
                v124 = a1[8];
                *(_DWORD *)v177 = 67241472;
                *(_DWORD *)&v177[4] = v11;
                *(_WORD *)&v177[8] = 1026;
                *(_DWORD *)&v177[10] = v12;
                *(_WORD *)&v177[14] = 2050;
                *(double *)&v177[16] = v14;
                *(_WORD *)v178 = 2050;
                *(double *)&v178[2] = v28;
                *(_WORD *)v179 = 2050;
                *(_QWORD *)&v179[2] = v123;
                LOWORD(v180[0]) = 2050;
                *(_QWORD *)((char *)v180 + 2) = v124;
                v125 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "void CLAStarRouteConstructor::constructRouteCandidates(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, std::vector<CLRouteCandidatePtr> &)", "CoreLocation: %s\n", v125);
                if (v125 != (char *)buf)
                  free(v125);
              }
              v38 = *a2;
              if (*(_DWORD *)(*a2 + 152) == 1)
              {
                v39 = *(double *)(*(_QWORD *)v5 + 16);
                v167 = *(_QWORD *)v5;
                v40 = (std::__shared_weak_count *)*((_QWORD *)v5 + 1);
                v168 = v40;
                if (v40)
                {
                  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
                  do
                    v42 = __ldxr(p_shared_owners);
                  while (__stxr(v42 + 1, p_shared_owners));
                }
                v43 = (std::__shared_weak_count *)v16[1];
                v165 = (double *)*v16;
                v166 = v43;
                if (v43)
                {
                  v44 = (unint64_t *)&v43->__shared_owners_;
                  do
                    v45 = __ldxr(v44);
                  while (__stxr(v45 + 1, v44));
                }
                v46 = (std::__shared_weak_count *)a2[1];
                v164[0] = *a2;
                v164[1] = (uint64_t)v46;
                if (v46)
                {
                  v47 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v48 = __ldxr(v47);
                  while (__stxr(v48 + 1, v47));
                }
                v49 = sub_18F6CC868((uint64_t)a1, (double *)&v169, &v167, (_QWORD **)&v165, v164, v39, v28);
                if (v46)
                {
                  v50 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v51 = __ldaxr(v50);
                  while (__stlxr(v51 - 1, v50));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                v52 = v166;
                if (v166)
                {
                  v53 = (unint64_t *)&v166->__shared_owners_;
                  do
                    v54 = __ldaxr(v53);
                  while (__stlxr(v54 - 1, v53));
                  if (!v54)
                  {
                    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                    std::__shared_weak_count::__release_weak(v52);
                  }
                }
                v55 = v168;
                if (!v168)
                  goto LABEL_70;
                v56 = (unint64_t *)&v168->__shared_owners_;
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                  if ((v49 & 1) != 0)
                    goto LABEL_88;
                }
                else
                {
LABEL_70:
                  if ((v49 & 1) != 0)
                    goto LABEL_88;
                }
                v13 = &OBJC_METACLASS___CLHeadingInternal;
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E29908B0);
                v58 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
                {
                  v59 = *(_QWORD *)(*(_QWORD *)v5 + 16);
                  *(_DWORD *)buf = 134349056;
                  *(_QWORD *)&buf[4] = v59;
                  _os_log_impl(&dword_18F5B3000, v58, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,constructRouteCandidates,unable to construct route", buf, 0xCu);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E29908B0);
                  v60 = *(_QWORD *)(*(_QWORD *)v5 + 16);
                  *(_DWORD *)v177 = 134349056;
                  *(_QWORD *)&v177[4] = v60;
                  v30 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "void CLAStarRouteConstructor::constructRouteCandidates(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, std::vector<CLRouteCandidatePtr> &)", "CoreLocation: %s\n", v30);
LABEL_177:
                  if (v30 != (char *)buf)
                    free(v30);
                }
              }
              else
              {
                v61 = *v16;
                *(_OWORD *)v177 = *(_OWORD *)(*v16 + 3);
                v62 = *(double **)v5;
                v63 = *(double *)(*(_QWORD *)v5 + 16);
                v64 = (std::__shared_weak_count *)a2[1];
                v163[0] = v38;
                v163[1] = (uint64_t)v64;
                v65 = v61;
                v66 = v62;
                if (v64)
                {
                  v67 = (unint64_t *)&v64->__shared_owners_;
                  do
                    v68 = __ldxr(v67);
                  while (__stxr(v68 + 1, v67));
                  v66 = *(double **)v5;
                  v65 = *v16;
                }
                v69 = sub_18F6D03A4((uint64_t)a1, (double *)&v169, v62, v61, v163, (double *)v177, *(uint64_t *)&v28, 1, v63, v66[6], *((double *)v65 + 6));
                v70 = v69;
                if (!v64)
                  goto LABEL_87;
                v71 = (unint64_t *)&v64->__shared_owners_;
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (!v72)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                  if ((v70 & 1) != 0)
                  {
LABEL_88:
                    v161 = *(double **)v5;
                    v73 = (std::__shared_weak_count *)*((_QWORD *)v5 + 1);
                    v162 = v73;
                    v13 = &OBJC_METACLASS___CLHeadingInternal;
                    if (v73)
                    {
                      v74 = (unint64_t *)&v73->__shared_owners_;
                      do
                        v75 = __ldxr(v74);
                      while (__stxr(v75 + 1, v74));
                    }
                    v76 = (std::__shared_weak_count *)v16[1];
                    v159 = *v16;
                    v160 = v76;
                    if (v76)
                    {
                      v77 = (unint64_t *)&v76->__shared_owners_;
                      do
                        v78 = __ldxr(v77);
                      while (__stxr(v78 + 1, v77));
                    }
                    v79 = sub_18F6D4B84(a1, (uint64_t *)&v161, (uint64_t *)&v159);
                    v80 = v160;
                    if (v160)
                    {
                      v81 = (unint64_t *)&v160->__shared_owners_;
                      do
                        v82 = __ldaxr(v81);
                      while (__stlxr(v82 - 1, v81));
                      if (!v82)
                      {
                        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                        std::__shared_weak_count::__release_weak(v80);
                      }
                    }
                    v83 = v162;
                    if (v162)
                    {
                      v84 = (unint64_t *)&v162->__shared_owners_;
                      do
                        v85 = __ldaxr(v84);
                      while (__stlxr(v85 - 1, v84));
                      if (!v85)
                      {
                        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                        std::__shared_weak_count::__release_weak(v83);
                      }
                    }
                    if (v79 >= 0.0)
                    {
                      v175 = 0uLL;
                      v176 = 0;
                      v86 = (__int128 **)*a1;
                      v87 = (__int128 **)a1[1];
                      while (v86 != v87)
                      {
                        sub_18F623AB8((char **)&v175, *v86);
                        v86 += 2;
                      }
                      v89 = *(double **)v5;
                      v88 = *((_QWORD *)v5 + 1);
                      v90 = (char *)operator new(0x60uLL);
                      v91 = v90;
                      *((_QWORD *)v90 + 1) = 0;
                      *((_QWORD *)v90 + 2) = 0;
                      *(_QWORD *)v90 = &off_1E298DEB8;
                      *(_QWORD *)v177 = v89;
                      *(_QWORD *)&v177[8] = v88;
                      if (v88)
                      {
                        v92 = (unint64_t *)(v88 + 8);
                        do
                          v93 = __ldxr(v92);
                        while (__stxr(v93 + 1, v92));
                      }
                      v94 = (std::__shared_weak_count *)v16[1];
                      v173 = *v16;
                      v174 = v94;
                      if (v94)
                      {
                        v95 = (unint64_t *)&v94->__shared_owners_;
                        do
                          v96 = __ldxr(v95);
                        while (__stxr(v96 + 1, v95));
                      }
                      *(_OWORD *)(v90 + 72) = 0u;
                      *(_OWORD *)(v90 + 40) = 0u;
                      *((_DWORD *)v90 + 8) = 0;
                      *(_OWORD *)(v90 + 56) = 0u;
                      *((_QWORD *)v90 + 11) = 0;
                      *((double *)v90 + 3) = v79;
                      sub_18F623A40((_QWORD *)v90 + 5, (uint64_t *)v177);
                      sub_18F623A40((_QWORD *)v91 + 7, (uint64_t *)&v173);
                      sub_18F62C588((uint64_t)(v91 + 72), (uint64_t *)v175, *((uint64_t **)&v175 + 1), (uint64_t)(*((_QWORD *)&v175 + 1) - v175) >> 4);
                      v97 = v91 + 24;
                      *((_DWORD *)v91 + 8) = 0;
                      if (sub_18F6CC2F4((_QWORD *)v91 + 3))
                      {
                        *(_QWORD *)buf = 0;
                        *(_QWORD *)&buf[8] = 0;
                        v98 = (uint64_t *)*((_QWORD *)v91 + 9);
                        v99 = (uint64_t *)*((_QWORD *)v91 + 10);
                        if (v98 != v99)
                        {
                          while (1)
                          {
                            sub_18F623A40(buf, v98);
                            v98 += 2;
                            if (v98 == v99)
                              break;
                            if (*(_QWORD *)buf)
                            {
                              v100 = *v98;
                              if (*v98)
                              {
                                v101 = (*(_QWORD *)(*(_QWORD *)buf + 144) - *(_QWORD *)(*(_QWORD *)buf + 136)) >> 4;
                                if ((int)v101 >= 2)
                                {
                                  v102 = sub_18F704B68(*(uint64_t *)buf, (int)v101 - 2);
                                  v100 = *v98;
                                }
                                else
                                {
                                  v102 = -1.0;
                                }
                                v103 = sub_18F704B68(v100, 0);
                                v104 = fmod(v102 - v103, 360.0);
                                if (v104 < 0.0)
                                  v104 = v104 + 360.0;
                                if (v104 > 180.0)
                                  v104 = v104 + -360.0;
                                if (fabs(v104) > 30.0)
                                  ++*((_DWORD *)v91 + 8);
                              }
                            }
                          }
                          v105 = *(std::__shared_weak_count **)&buf[8];
                          if (*(_QWORD *)&buf[8])
                          {
                            v106 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                            do
                              v107 = __ldaxr(v106);
                            while (__stlxr(v107 - 1, v106));
                            if (!v107)
                            {
                              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                              std::__shared_weak_count::__release_weak(v105);
                            }
                          }
                        }
                        v97 = v91 + 24;
                      }
                      v108 = v174;
                      v6 = a4;
                      v13 = &OBJC_METACLASS___CLHeadingInternal;
                      if (v174)
                      {
                        v109 = (unint64_t *)&v174->__shared_owners_;
                        do
                          v110 = __ldaxr(v109);
                        while (__stlxr(v110 - 1, v109));
                        if (!v110)
                        {
                          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                          std::__shared_weak_count::__release_weak(v108);
                        }
                      }
                      v111 = *(std::__shared_weak_count **)&v177[8];
                      if (*(_QWORD *)&v177[8])
                      {
                        v112 = (unint64_t *)(*(_QWORD *)&v177[8] + 8);
                        do
                          v113 = __ldaxr(v112);
                        while (__stlxr(v113 - 1, v112));
                        if (!v113)
                        {
                          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                          std::__shared_weak_count::__release_weak(v111);
                        }
                      }
                      *(_QWORD *)&v158 = v97;
                      *((_QWORD *)&v158 + 1) = v91;
                      sub_18F623AB8(a5, &v158);
                      v12 = v153;
                      if (v79 < v14 || v14 < 0.0)
                        v14 = v79;
                      if (qword_1EE172158 != -1)
                        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
                      v115 = off_1EE172160;
                      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
                      {
                        v116 = *(_QWORD *)(*(_QWORD *)v5 + 16);
                        v117 = (*v16)[2];
                        *(_DWORD *)buf = 134350080;
                        *(_QWORD *)&buf[4] = v116;
                        *(_WORD *)&buf[12] = 2050;
                        *(_QWORD *)&buf[14] = v117;
                        *(_WORD *)&buf[22] = 2050;
                        *(double *)v182 = v79;
                        *(_WORD *)&v182[8] = 2050;
                        *(double *)v183 = v14;
                        *(_WORD *)&v183[8] = 2050;
                        *(double *)v184 = v28;
                        _os_log_impl(&dword_18F5B3000, v115, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,construcRouteCandidates,dest,%{public}.1lf,route constructed,length,%{public}.2lf,minRouteLength,%{public}.2lf,maxRouteLength,%{public}.2lf", buf, 0x34u);
                      }
                      if (sub_18F5C4AE0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1EE172158 != -1)
                          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
                        v127 = *(_QWORD *)(*(_QWORD *)v5 + 16);
                        v128 = (*v16)[2];
                        *(_DWORD *)v177 = 134350080;
                        *(_QWORD *)&v177[4] = v127;
                        *(_WORD *)&v177[12] = 2050;
                        *(_QWORD *)&v177[14] = v128;
                        *(_WORD *)&v177[22] = 2050;
                        *(double *)v178 = v79;
                        *(_WORD *)&v178[8] = 2050;
                        *(double *)v179 = v14;
                        *(_WORD *)&v179[8] = 2050;
                        v180[0] = v28;
                        v129 = (char *)_os_log_send_and_compose_impl();
                        sub_18F5F2740("Generic", 1, 0, 2, "void CLAStarRouteConstructor::constructRouteCandidates(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, std::vector<CLRouteCandidatePtr> &)", "CoreLocation: %s\n", v129);
                        if (v129 != (char *)buf)
                          free(v129);
                      }
                      v118 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
                      if (*((_QWORD *)&v158 + 1))
                      {
                        v119 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
                        do
                          v120 = __ldaxr(v119);
                        while (__stlxr(v120 - 1, v119));
                        if (!v120)
                        {
                          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                          std::__shared_weak_count::__release_weak(v118);
                        }
                      }
                      *(_QWORD *)buf = &v175;
                      sub_18F62AB98((void ***)buf);
                    }
                    goto LABEL_169;
                  }
                }
                else
                {
LABEL_87:
                  if ((v69 & 1) != 0)
                    goto LABEL_88;
                }
                v13 = &OBJC_METACLASS___CLHeadingInternal;
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E29908B0);
                v121 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
                {
                  v122 = *(_QWORD *)(*(_QWORD *)v5 + 16);
                  *(_DWORD *)buf = 134349056;
                  *(_QWORD *)&buf[4] = v122;
                  _os_log_impl(&dword_18F5B3000, v121, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,constructPedestrianRouteCandidates,unable to construct route", buf, 0xCu);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E29908B0);
                  v126 = *(_QWORD *)(*(_QWORD *)v5 + 16);
                  LODWORD(v175) = 134349056;
                  *(_QWORD *)((char *)&v175 + 4) = v126;
                  v30 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "void CLAStarRouteConstructor::constructRouteCandidates(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, std::vector<CLRouteCandidatePtr> &)", "CoreLocation: %s\n", v30);
                  goto LABEL_177;
                }
              }
            }
            else
            {
              if (v13[8].vtable != (void *)-1)
                dispatch_once(&qword_1EE172158, &unk_1E29908B0);
              v31 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
              {
                v32 = (*v16)[2];
                *(_DWORD *)buf = 134349056;
                *(_QWORD *)&buf[4] = v32;
                _os_log_impl(&dword_18F5B3000, v31, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,construcRouteCandidates,dest road is null", buf, 0xCu);
              }
              if (sub_18F5C4AE0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (v13[8].vtable != (void *)-1)
                  dispatch_once(&qword_1EE172158, &unk_1E29908B0);
                v33 = (*v16)[2];
                *(_DWORD *)v177 = 134349056;
                *(_QWORD *)&v177[4] = v33;
                v30 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 0, "void CLAStarRouteConstructor::constructRouteCandidates(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, std::vector<CLRouteCandidatePtr> &)", "CoreLocation: %s\n", v30);
                goto LABEL_177;
              }
            }
          }
          else
          {
            if (v13[8].vtable != (void *)-1)
              dispatch_once(&qword_1EE172158, &unk_1E29908B0);
            v29 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F5B3000, v29, OS_LOG_TYPE_ERROR, "CLTSP,construcRouteCandidates,dest snap is null", buf, 2u);
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (v13[8].vtable != (void *)-1)
                dispatch_once(&qword_1EE172158, &unk_1E29908B0);
              *(_WORD *)v177 = 0;
              v30 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "void CLAStarRouteConstructor::constructRouteCandidates(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, std::vector<CLRouteCandidatePtr> &)", "CoreLocation: %s\n", v30);
              goto LABEL_177;
            }
          }
LABEL_169:
          v16 += 2;
        }
      }
      if (v13[8].vtable != (void *)-1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v132 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        v133 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v133;
        _os_log_impl(&dword_18F5B3000, v132, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,construcRouteCandidates,start road is null", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v13[8].vtable != (void *)-1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v134 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        *(_DWORD *)v177 = 134349056;
        *(_QWORD *)&v177[4] = v134;
        v131 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "void CLAStarRouteConstructor::constructRouteCandidates(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, std::vector<CLRouteCandidatePtr> &)", "CoreLocation: %s\n", v131);
LABEL_201:
        if (v131 != (char *)buf)
          free(v131);
      }
    }
    else
    {
      if (v13[8].vtable != (void *)-1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v130 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v130, OS_LOG_TYPE_ERROR, "CLTSP,construcRouteCandidates,start snap is null", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v13[8].vtable != (void *)-1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        *(_WORD *)v177 = 0;
        v131 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "void CLAStarRouteConstructor::constructRouteCandidates(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, std::vector<CLRouteCandidatePtr> &)", "CoreLocation: %s\n", v131);
        goto LABEL_201;
      }
    }
LABEL_196:
    v5 += 16;
  }
  while (v5 != v156);
  if ((char *)v6[1] - (char *)*v6 != 16)
  {
    memset(buf, 0, sizeof(buf));
    v136 = *a5;
    v135 = a5[1];
    if (*a5 != v135)
    {
      do
      {
        if (*(_QWORD *)(*(_QWORD *)v136 + 48) == *(_QWORD *)(*(_QWORD *)v136 + 56))
        {
          sub_18F623AB8((char **)buf, (__int128 *)v136);
        }
        else if (sub_18F6CC33C(*(_QWORD **)v136) >= 0.00001)
        {
          v137 = *a5;
          v138 = a5[1];
          if (*a5 != v138)
          {
            v139 = **(_QWORD ***)(*(_QWORD *)v136 + 48);
            v140 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v136 + 56) - 16);
            do
            {
              if (*(_QWORD *)v136 != *(_QWORD *)v137 && sub_18F6CC33C(*(_QWORD **)v137) != 0.0)
              {
                v141 = *(_QWORD *)v137;
                v142 = *(_QWORD *)(*(_QWORD *)v137 + 48);
                if (*v139 == **(_QWORD **)v142 && v139[1] == *(_QWORD *)(*(_QWORD *)v142 + 8))
                {
                  v143 = *(_QWORD *)(v141 + 56);
                  if (v142 != v143)
                  {
                    while (*v140 != **(_QWORD **)v142 || v140[1] != *(_QWORD *)(*(_QWORD *)v142 + 8))
                    {
                      v142 += 16;
                      if (v142 == v143)
                        goto LABEL_220;
                    }
                    if (*(double *)v141 > **(double **)v136)
                      sub_18F623AB8((char **)buf, (__int128 *)v137);
                  }
                }
              }
LABEL_220:
              v137 += 16;
            }
            while (v137 != v138);
          }
        }
        v136 += 16;
      }
      while (v136 != v135);
      v144 = *a5;
      v145 = (uint64_t)a5[1];
      while (v144 != (char *)v145)
      {
        v146 = *(_QWORD **)buf;
        if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
        {
LABEL_229:
          v144 += 16;
        }
        else
        {
          while (*(_QWORD *)v144 != *v146)
          {
            v146 += 2;
            if (v146 == *(_QWORD **)&buf[8])
              goto LABEL_229;
          }
          v147 = v144 + 16;
          v148 = v144;
          if (v144 + 16 != (char *)v145)
          {
            do
            {
              v149 = *(_OWORD *)v147;
              *(_QWORD *)v147 = 0;
              *((_QWORD *)v147 + 1) = 0;
              v150 = (std::__shared_weak_count *)*((_QWORD *)v148 + 1);
              *(_OWORD *)v148 = v149;
              if (v150)
              {
                v151 = (unint64_t *)&v150->__shared_owners_;
                do
                  v152 = __ldaxr(v151);
                while (__stlxr(v152 - 1, v151));
                if (!v152)
                {
                  ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                  std::__shared_weak_count::__release_weak(v150);
                }
              }
              v147 += 16;
              v148 += 16;
            }
            while (v147 != (char *)v145);
            v145 = (uint64_t)a5[1];
          }
          while ((char *)v145 != v148)
          {
            v145 -= 16;
            sub_18F5D6004(v145);
          }
          a5[1] = v148;
          v145 = (uint64_t)v148;
        }
      }
    }
    *(_QWORD *)v177 = buf;
    sub_18F62AB98((void ***)v177);
  }
}

void sub_18F6D4A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
  sub_18F5D6004((uint64_t)&a27);
  a61 = (void **)&a49;
  sub_18F62AB98(&a61);
  _Unwind_Resume(a1);
}

double sub_18F6D4B84(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  double v5;
  double v6;
  double v7;

  v5 = sub_18F6D6EB8(a1, 0.0);
  if (*a2)
  {
    sub_18F6CC498(*a2);
    v5 = v5 - v6;
  }
  if (*a3)
  {
    sub_18F6CC438(*a3);
    return v5 - v7;
  }
  return v5;
}

BOOL sub_18F6D4BDC(std::string::size_type ***a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string::size_type **v11;
  std::string::size_type **v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  double *v24;
  __int128 *i;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  void **v34;
  std::string::size_type *v35;
  double v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _BOOL8 v40;
  uint64_t v42[2];
  char *v43;
  __int128 *v44;
  uint64_t v45;
  char **v46;
  int64x2_t v47;
  uint64_t v48;
  uint64_t v49;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  v6 = (std::__shared_weak_count *)a3[1];
  v42[0] = *a3;
  v42[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_18F6D4F50(a1, &v43, v42);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v11 = *a1;
  v12 = a1[1];
  v13 = (char *)v12 - (char *)*a1;
  v14 = *(char **)a2;
  if (v13 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)a2) >> 4))
  {
    if (v13 < 0)
      sub_18F5F7864();
    v15 = *(_QWORD *)(a2 + 8);
    v49 = a2 + 16;
    v16 = (char *)sub_18F62AB64(a2 + 16, v13 >> 4);
    v19 = *(char **)a2;
    v18 = *(char **)(a2 + 8);
    if (v18 == *(char **)a2)
    {
      v22 = vdupq_n_s64((unint64_t)v18);
      v20 = &v16[v15 - (_QWORD)v14];
    }
    else
    {
      v20 = &v16[v15 - (_QWORD)v14];
      do
      {
        v21 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v18 + 1) = 0;
      }
      while (v18 != v19);
      v22 = *(int64x2_t *)a2;
    }
    *(_QWORD *)a2 = v20;
    *(_QWORD *)(a2 + 8) = &v16[v15 - (_QWORD)v14];
    v47 = v22;
    v23 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = &v16[16 * v17];
    v48 = v23;
    v46 = (char **)v22.i64[0];
    sub_18F62C334((uint64_t)&v46);
    v11 = *a1;
    v12 = a1[1];
  }
  for (; v11 != v12; v11 += 2)
  {
    v24 = (double *)*v11;
    if (*v11)
    {
      for (i = (__int128 *)v43; i != v44; ++i)
      {
        v26 = *(_QWORD *)i;
        if (*(_QWORD *)i)
        {
          v27 = *(double *)(v26 + 16);
          if (vabdd_f64(v27, *v24) < 0.001)
          {
            if (*(_BYTE *)(v26 + 64))
            {
              if (v27 > 0.0)
              {
                if (*(_QWORD *)v26)
                {
                  v29 = *(double *)(v26 + 24);
                  v28 = *(double *)(v26 + 32);
                  if ((fabs(v29) >= 0.00003 || fabs(v28) >= 0.00003)
                    && v28 >= -180.0
                    && v29 <= 90.0
                    && v29 >= -90.0
                    && v28 <= 180.0)
                  {
                    sub_18F623AB8((char **)a2, i);
                    goto LABEL_46;
                  }
                }
              }
            }
            break;
          }
        }
      }
      v30 = v24[4];
      v31 = v24[5];
      v32 = v24[3];
      if (v30 >= 0.0 && v32 > 0.0)
      {
        v33 = v32 + 10.0;
        if (v31 >= v32)
          v33 = v24[5];
        if (v33 <= 179.0)
          v31 = v33;
        else
          v31 = 179.0;
      }
      v46 = 0;
      v47.i64[0] = 0;
      if (sub_18F621014(*a3, (uint64_t *)&v46, 1, *v24, v24[1], v24[2], v30, v32, v31))
      {
        v34 = (void **)v46;
        if (v46)
        {
          v35 = *v11;
          v36 = -1.0;
          if (*((double *)*v11 + 7) > 0.0)
            v36 = *((double *)v35 + 6);
          *((double *)v46 + 13) = v36;
          *((_DWORD *)v34 + 30) = *((_DWORD *)v35 + 22);
          sub_18F623AB8((char **)a2, (__int128 *)&v46);
        }
      }
      v37 = (std::__shared_weak_count *)v47.i64[0];
      if (v47.i64[0])
      {
        v38 = (unint64_t *)(v47.i64[0] + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
LABEL_46:
    ;
  }
  v40 = *(_QWORD *)a2 != *(_QWORD *)(a2 + 8);
  v46 = &v43;
  sub_18F62AB98((void ***)&v46);
  return v40;
}

void sub_18F6D4F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a12;
  sub_18F62AB98(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6D4F50(std::string::size_type ***a1, char **a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  int v7;
  std::__shared_weak_count *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  _QWORD *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  NSObject *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::string::size_type **v52;
  char v53;
  uint64_t v54;
  double v55;
  NSObject *v61;
  char *v62;
  std::string::size_type *v63;
  double v64;
  double v65;
  double v66;
  std::string::size_type v67;
  uint64_t v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  _QWORD *v73;
  std::string *v74;
  void *v75;
  char v76;
  char v77;
  std::string *v78;
  void *v79;
  int v80;
  NSObject *v81;
  std::string::size_type v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  double v91;
  double v92;
  BOOL v93;
  double v94;
  uint64_t v95;
  char v96;
  double v97;
  double v98;
  char *v99;
  uint64_t v100;
  float v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::string::size_type *v106;
  double v107;
  double v108;
  std::string::size_type v109;
  std::string::size_type v110;
  double v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::string::size_type v115;
  std::string::size_type *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  NSObject *v123;
  std::string::size_type v124;
  char *v125;
  std::string::size_type v126;
  char *v127;
  NSObject *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  int v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  char **v149;
  int v150;
  void *v151;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  double v157;
  void *size;
  void *v159;
  __int128 v160;
  void *__src;
  int v163;
  std::string::size_type **v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172[2];
  _BYTE v173[7];
  char v174;
  void *__dst[2];
  _BYTE v176[7];
  char v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _DWORD v182[2];
  _DWORD v183[2];
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  std::string v194;
  uint64_t v195;
  _BYTE v196[24];
  __int128 v197;
  unint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  _BYTE v208[64];
  __int16 v209;
  uint64_t v210;
  int v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  _BYTE v215[27];
  __int128 v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  unint64_t v220;
  _BYTE __p[24];
  uint64_t v222;
  uint64_t v223;
  void *v224;
  char v225;
  _QWORD v226[192];

  v226[189] = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  if (*a3)
  {
    v6 = *a2;
    v5 = (uint64_t)a2[1];
    if ((char *)v5 != *a2)
    {
      do
        v5 = sub_18F5D6004(v5 - 16);
      while ((char *)v5 != v6);
      v3 = *a3;
    }
    a2[1] = v6;
    v193 = 0;
    v192 = 0;
    v7 = *(_DWORD *)(v3 + 152);
    if (v7 == 1)
    {
      v8 = (std::__shared_weak_count *)operator new(0xA70uLL);
      v8->__shared_owners_ = 0;
      v8->__shared_weak_owners_ = 0;
      v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FE48;
      v12 = sub_18F6EFC88((uint64_t)&v8[1], v9, v10, v11);
      v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E298F720;
      v192 = v12;
      v193 = v8;
      v13 = (std::__shared_weak_count *)a3[1];
      v190 = *a3;
      v191 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      sub_18F6EFFD0(v12, &v190);
      v16 = v191;
      if (v191)
      {
        v17 = (unint64_t *)&v191->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = (_QWORD *)operator new();
      v20 = v193;
      v195 = v192;
      *(_QWORD *)v196 = v193;
      if (v193)
      {
        v21 = (unint64_t *)&v193->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      sub_18F5D5990(__p, "CLQuickMapMatcher");
      sub_18F6993F8((uint64_t)v19, &v195, (__int128 *)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (v20)
      {
        v23 = (unint64_t *)&v20->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      (*(void (**)(_QWORD *, uint64_t))(*v19 + 104))(v19, 1);
      (*(void (**)(_QWORD *, _QWORD))(*v19 + 64))(v19, 0);
      (*(void (**)(_QWORD *, _QWORD))(*v19 + 72))(v19, 0);
      v149 = a2;
      v25 = 0;
      v19[504] = 0x3FFAB851EB851EB8;
    }
    else
    {
      if ((v7 & 0xFFFFFFFE) != 2)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v45 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__p = 0;
          _os_log_impl(&dword_18F5B3000, v45, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Unexpected,invalid mapmatcher pointer,matchOnRoadUsingParticleMapMatcher", __p, 2u);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29908B0);
          LOWORD(v195) = 0;
          v141 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "static BOOL CLMapMatcherWrapper::matchOnRoadUsingParticleMapMatcher(const std::vector<CLGeoMapLocationPtr> &, std::vector<CLGeoMapSnapDataPtr> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v141);
          if (v141 != __p)
            free(v141);
        }
        v27 = 0;
LABEL_205:
        v132 = v193;
        if (v193)
        {
          v133 = (unint64_t *)&v193->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
        return v27;
      }
      v28 = operator new(0xA78uLL);
      v28[1] = 0;
      v28[2] = 0;
      *v28 = &off_1E298DF60;
      v32 = sub_18F6EFC88((uint64_t)(v28 + 3), v29, v30, v31);
      v28[3] = &off_1E298DC00;
      *((_BYTE *)v28 + 2672) = v7 == 3;
      v192 = v32;
      v193 = (std::__shared_weak_count *)v28;
      v33 = (std::__shared_weak_count *)a3[1];
      v188 = *a3;
      v189 = v33;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      sub_18F6EFFD0(v32, &v188);
      v36 = v189;
      if (v189)
      {
        v37 = (unint64_t *)&v189->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = operator new();
      v25 = v39;
      v40 = v192;
      v41 = v193;
      v195 = v192;
      *(_QWORD *)v196 = v193;
      if (v193)
      {
        v42 = (unint64_t *)&v193->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        *(_QWORD *)__p = v40;
        *(_QWORD *)&__p[8] = v41;
        do
          v44 = __ldxr(v42);
        while (__stxr(v44 + 1, v42));
      }
      else
      {
        *(_QWORD *)__p = v192;
        *(_QWORD *)&__p[8] = 0;
      }
      sub_18F7252FC(v39, __p);
      v46 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v47 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      *(_QWORD *)v25 = &off_1E298DC88;
      *(_QWORD *)(v25 + 2232) = 0;
      *(_QWORD *)(v25 + 2224) = 0;
      *(_OWORD *)(v25 + 2208) = xmmword_18F771F40;
      *(_QWORD *)(v25 + 2240) = 0x3FF0000000000000;
      *(_QWORD *)(v25 + 2248) = 0;
      *(_QWORD *)(v25 + 2264) = 0;
      *(_QWORD *)(v25 + 2256) = 0;
      *(_QWORD *)(v25 + 2272) = 0xBFF0000000000000;
      v49 = *(std::__shared_weak_count **)v196;
      if (*(_QWORD *)v196)
      {
        v50 = (unint64_t *)(*(_QWORD *)v196 + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v149 = a2;
      v19 = 0;
      *(_BYTE *)(v25 + 8) = *(_BYTE *)(*a3 + 192);
      *(_BYTE *)(v25 + 12) = 1;
      *(_QWORD *)(v25 + 24) = 0x3FB999999999999ALL;
    }
    v185 = 0;
    v186 = 0;
    v184 = xmmword_18F771F40;
    v187 = 0x3FF0000000000000;
    *(_DWORD *)((char *)v183 + 3) = 0;
    v183[0] = 0;
    *(_DWORD *)((char *)v182 + 3) = 0;
    v182[0] = 0;
    v179 = 0;
    v180 = 0;
    v178 = xmmword_18F771F40;
    v181 = 0x3FF0000000000000;
    v52 = *a1;
    v164 = a1[1];
    v148 = v25;
    if (*a1 != v164)
    {
      v147 = 0;
      v163 = 0;
      __src = 0;
      size = 0;
      v159 = 0;
      v53 = 0;
      v54 = 0;
      v151 = 0;
      v145 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v146 = *MEMORY[0x1E0DE4F50];
      v144 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v142 = (uint64_t *)(v25 + 384);
      v55 = -1.0;
      __asm { FMOV            V0.2D, #-1.0 }
      v160 = _Q0;
      v143 = MEMORY[0x1E0DE4FB8] + 16;
      v150 = v7;
      while (1)
      {
        if (!*v52)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29908B0);
          v61 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)__p = 0;
            _os_log_impl(&dword_18F5B3000, v61, OS_LOG_TYPE_DEBUG, "CLTSP,CLMM,location is nullptr", __p, 2u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E29908B0);
            LOWORD(v195) = 0;
            v62 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "static BOOL CLMapMatcherWrapper::matchOnRoadUsingParticleMapMatcher(const std::vector<CLGeoMapLocationPtr> &, std::vector<CLGeoMapSnapDataPtr> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v62);
            if (v62 != __p)
              free(v62);
          }
          goto LABEL_177;
        }
        if (!*((_BYTE *)*v52 + 94))
          break;
        ++v163;
LABEL_177:
        v52 += 2;
        if (v52 == v164)
          goto LABEL_191;
      }
      *(_QWORD *)v196 = 0;
      v195 = 0;
      *(_OWORD *)&v196[8] = v160;
      v197 = 0uLL;
      v198 = 0xBFF0000000000000;
      v210 = 0;
      v211 = 0;
      memset(&v208[32], 0, 32);
      v209 = 0;
      v212 = 0u;
      v213 = 0u;
      v214 = 0u;
      memset(v215, 0, sizeof(v215));
      v216 = 0u;
      v217 = 0u;
      v218 = 0u;
      v207 = 0u;
      memset(v208, 0, 30);
      v205 = 0u;
      v206 = 0u;
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      v199 = 0u;
      v200 = 0u;
      v220 = 0xBFF0000000000000;
      v219 = 0;
      v63 = *v52;
      v199 = *(_OWORD *)(*v52 + 1);
      v197 = v199;
      *(_QWORD *)&v200 = v63[8];
      v64 = *((double *)v63 + 3);
      *((double *)&v200 + 1) = v64;
      v65 = *((double *)v63 + 4);
      *(double *)&v202 = v65;
      v66 = *((double *)v63 + 5);
      if (v64 > 0.0 && v65 >= 0.0)
      {
        if (v66 < v64)
          v66 = v64 + 10.0;
        if (v66 > 179.0)
          v66 = 179.0;
      }
      *((double *)&v207 + 1) = v66;
      *((_QWORD *)&v201 + 1) = v63[6];
      *(_QWORD *)&v207 = v63[7];
      v67 = *v63;
      DWORD1(v218) = *((_DWORD *)v63 + 22);
      v215[15] = *((_DWORD *)v63 + 24) == 2;
      *(_QWORD *)v196 = v67;
      *(_QWORD *)&v196[8] = v67;
      *(_QWORD *)&v196[16] = v67;
      *((_QWORD *)&v202 + 1) = -1;
      v68 = *((int *)v63 + 25);
      if (v68 < 7 && ((0x5Fu >> v68) & 1) != 0)
      {
        v70 = qword_18F7757F8[v68];
      }
      else
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        v69 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__p = 0;
          _os_log_impl(&dword_18F5B3000, v69, OS_LOG_TYPE_ERROR, "CLTSP,Unhandled CLClient signal environment type", __p, 2u);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29908B0);
          LOWORD(v194.__r_.__value_.__l.__data_) = 0;
          v125 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType convertCLClientSignalEnvironmentTypeToSignalEnvironment(const CLClientSignalEnvironmentType &)", "CoreLocation: %s\n", v125);
          if (v125 != __p)
            free(v125);
        }
        v70 = 0;
      }
      v219 = v70;
      if (v55 < 0.0)
      {
        v55 = *(double *)v196;
        sub_18F5F3F98((uint64_t)__p);
        v71 = sub_18F5F751C(&__p[16], (uint64_t)"cltspStart,", 11);
        v72 = *v71;
        *(_DWORD *)((char *)v71 + *(_QWORD *)(*v71 - 24) + 8) |= 4u;
        *(uint64_t *)((char *)v71 + *(_QWORD *)(v72 - 24) + 16) = 2;
        v73 = (_QWORD *)std::ostream::operator<<();
        sub_18F5F751C(v73, (uint64_t)",cltspEnd,", 10);
        std::ostream::operator<<();
        std::stringbuf::str();
        v74 = std::string::insert(&v194, 0, "aPriori,");
        v75 = (void *)v74->__r_.__value_.__r.__words[0];
        size = (void *)v74->__r_.__value_.__l.__size_;
        LODWORD(v171) = v74->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)&v171 + 3) = *(_DWORD *)((char *)&v74->__r_.__value_.__r.__words[2] + 3);
        v76 = HIBYTE(v74->__r_.__value_.__r.__words[2]);
        v74->__r_.__value_.__l.__size_ = 0;
        v74->__r_.__value_.__r.__words[2] = 0;
        v74->__r_.__value_.__r.__words[0] = 0;
        if (v53 < 0)
          operator delete(__src);
        v183[0] = v171;
        *(_DWORD *)((char *)v183 + 3) = *(_DWORD *)((char *)&v171 + 3);
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v194.__r_.__value_.__l.__data_);
        std::stringbuf::str();
        v77 = v54;
        v78 = std::string::insert(&v194, 0, "aPosteriori,");
        v79 = (void *)v78->__r_.__value_.__r.__words[0];
        v151 = (void *)v78->__r_.__value_.__l.__size_;
        LODWORD(v171) = v78->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)&v171 + 3) = *(_DWORD *)((char *)&v78->__r_.__value_.__r.__words[2] + 3);
        v54 = HIBYTE(v78->__r_.__value_.__r.__words[2]);
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        if (v77 < 0)
          operator delete(v159);
        v182[0] = v171;
        *(_DWORD *)((char *)v182 + 3) = *(_DWORD *)((char *)&v171 + 3);
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v194.__r_.__value_.__l.__data_);
        *(_QWORD *)__p = v146;
        *(_QWORD *)&__p[*(_QWORD *)(v146 - 24)] = v145;
        *(_QWORD *)&__p[16] = v144;
        v222 = v143;
        if (v225 < 0)
          operator delete(v224);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x194002CE8](v226);
        v159 = v79;
        v53 = v76;
        __src = v75;
        v7 = v150;
      }
      if (v53 < 0)
      {
        sub_18F5C6990(__dst, __src, (unint64_t)size);
      }
      else
      {
        __dst[0] = __src;
        __dst[1] = size;
        *(_DWORD *)v176 = v183[0];
        *(_DWORD *)&v176[3] = *(_DWORD *)((char *)v183 + 3);
        v177 = v53;
      }
      sub_18F60D580(&v195, (uint64_t *)__dst, -1.0);
      if (v177 < 0)
        operator delete(__dst[0]);
      v80 = *(_DWORD *)(*a3 + 152);
      if (v80 == 1)
      {
        if (v7 == 1 && ((*(uint64_t (**)(_QWORD *, uint64_t *))(*v19 + 32))(v19, &v195) & 1) == 0)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E29908B0);
          ++v147;
          v81 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            v82 = **v52;
            *(_DWORD *)__p = 134349312;
            *(_QWORD *)&__p[4] = v82;
            *(_WORD *)&__p[12] = 1026;
            *(_DWORD *)&__p[14] = v147;
            _os_log_impl(&dword_18F5B3000, v81, OS_LOG_TYPE_DEBUG, "CLTSP,CLMM,mapMatcher failed to provide solution,%{public}.1lf,numberOfMatchFailures,%{public}d", __p, 0x12u);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_175;
          bzero(__p, 0x65CuLL);
          if (qword_1EE172158 == -1)
          {
LABEL_187:
            v126 = **v52;
            LODWORD(v194.__r_.__value_.__l.__data_) = 134349312;
            *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 4) = v126;
            WORD2(v194.__r_.__value_.__r.__words[1]) = 1026;
            *(_DWORD *)((char *)&v194.__r_.__value_.__r.__words[1] + 6) = v147;
            v127 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "static BOOL CLMapMatcherWrapper::matchOnRoadUsingParticleMapMatcher(const std::vector<CLGeoMapLocationPtr> &, std::vector<CLGeoMapSnapDataPtr> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v127);
            if (v127 != __p)
              free(v127);
LABEL_175:
            if (SHIBYTE(v204) < 0)
              operator delete(*((void **)&v203 + 1));
            goto LABEL_177;
          }
LABEL_189:
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
          goto LABEL_187;
        }
      }
      else if ((v80 & 0xFFFFFFFE) == 2 && v25 && (sub_18F725E40() & 1) == 0)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E29908B0);
        ++v147;
        v123 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v124 = **v52;
          *(_DWORD *)__p = 134349312;
          *(_QWORD *)&__p[4] = v124;
          *(_WORD *)&__p[12] = 1026;
          *(_DWORD *)&__p[14] = v147;
          _os_log_impl(&dword_18F5B3000, v123, OS_LOG_TYPE_DEBUG, "CLTSP,CLMM,pedestrianMapMatcher failed to provide solution,%{public}.1lf,numberOfMatchFailures,%{public}d", __p, 0x12u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_175;
        bzero(__p, 0x65CuLL);
        if (qword_1EE172158 == -1)
          goto LABEL_187;
        goto LABEL_189;
      }
      if ((v54 & 0x80) != 0)
      {
        sub_18F5C6990(v172, v159, (unint64_t)v151);
      }
      else
      {
        v172[0] = v159;
        v172[1] = v151;
        *(_DWORD *)v173 = v182[0];
        *(_DWORD *)&v173[3] = *(_DWORD *)((char *)v182 + 3);
        v174 = v54;
      }
      sub_18F60D580(&v195, (uint64_t *)v172, -1.0);
      if (v174 < 0)
        operator delete(v172[0]);
      v170 = 0;
      v171 = 0;
      v169 = 0;
      v84 = *((_QWORD *)&v212 + 1);
      v83 = v212;
      sub_18F5BD37C((double *)&v184, (double *)&v171, (double *)&v170, (double *)&v169, *((double *)*v52 + 1), *((double *)*v52 + 2), *((double *)*v52 + 8), *(double *)&v212, *((double *)&v212 + 1), *((double *)*v52 + 8));
      *(_QWORD *)&__p[8] = 0;
      *(_QWORD *)__p = 0;
      if (v7 == 1)
      {
        if ((*((_QWORD *)&v202 + 1) & 0x8000000000000000) != 0)
        {
          v88 = 0;
        }
        else
        {
          (*(void (**)(std::string *__return_ptr))(*v19 + 160))(&v194);
          sub_18F623A40(__p, (uint64_t *)&v194);
          v85 = (std::__shared_weak_count *)v194.__r_.__value_.__l.__size_;
          if (v194.__r_.__value_.__l.__size_)
          {
            v86 = (unint64_t *)(v194.__r_.__value_.__l.__size_ + 8);
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
          v88 = *(_QWORD *)__p;
          v84 = *((_QWORD *)&v212 + 1);
          v83 = v212;
        }
        v93 = v88 != 0;
        v94 = *(double *)&v213;
        v89 = v213;
      }
      else
      {
        v84 = *((_QWORD *)&v199 + 1);
        v83 = v199;
        v89 = v202;
        if (v25)
        {
          sub_18F623A40(__p, v142);
          v90 = *(unsigned __int8 *)(v25 + 404);
          if ((_BYTE)v209 && !HIBYTE(v209) || *(double *)*v52 == *(double *)*(a1[1] - 2))
          {
            v92 = *((double *)&v205 + 1);
            v91 = *(double *)&v205;
            v167 = 0;
            v168 = 0;
            v93 = 1;
            v89 = v206;
            v94 = *(double *)&v213;
            v95 = v54;
            if (!v90)
            {
              v96 = 0;
              v97 = 0.0;
              v84 = *((_QWORD *)&v205 + 1);
              v83 = v205;
              goto LABEL_147;
            }
            v84 = *((_QWORD *)&v205 + 1);
            v83 = v205;
          }
          else
          {
            v93 = 0;
            v167 = 0;
            v168 = 0;
            v92 = *((double *)&v205 + 1);
            v91 = *(double *)&v205;
            v94 = *(double *)&v213;
            v95 = v54;
            if (!v90)
            {
              v97 = 0.0;
              v96 = 0;
              goto LABEL_147;
            }
          }
LABEL_146:
          v96 = 1;
          v97 = 180.0;
LABEL_147:
          v98 = fmod(v94 - v97 + 360.0, 360.0);
          sub_18F71ACC4((double *)&v178, (double *)&v168, (double *)&v167, v91, v92, 0.0, v98, *(double *)&v212, *((double *)&v212 + 1));
          v99 = (char *)operator new(0xC0uLL);
          v154 = v89;
          v155 = v84;
          v156 = v83;
          v157 = v55;
          *((_QWORD *)v99 + 1) = 0;
          *((_QWORD *)v99 + 2) = 0;
          *(_QWORD *)v99 = &off_1E298DE80;
          *(_OWORD *)(v99 + 24) = 0u;
          *(_OWORD *)(v99 + 40) = 0u;
          *(_OWORD *)(v99 + 56) = 0u;
          *(_OWORD *)(v99 + 72) = 0u;
          *(_OWORD *)(v99 + 88) = 0u;
          *(_OWORD *)(v99 + 104) = 0u;
          *(_OWORD *)(v99 + 120) = 0u;
          *(_OWORD *)(v99 + 136) = 0u;
          *(_OWORD *)(v99 + 152) = 0u;
          *(_OWORD *)(v99 + 168) = 0u;
          *((_QWORD *)v99 + 23) = 0;
          *((_QWORD *)v99 + 5) = 0xBFF0000000000000;
          *((_QWORD *)v99 + 6) = 0;
          *((_QWORD *)v99 + 7) = 0;
          *((_OWORD *)v99 + 4) = v160;
          v99[89] = 1;
          *((_QWORD *)v99 + 12) = 0;
          *((_QWORD *)v99 + 13) = 0;
          v99[120] = 0;
          *((_QWORD *)v99 + 14) = 0;
          *((_QWORD *)v99 + 16) = 0xBFF0000000000000;
          *((_DWORD *)v99 + 46) = 0;
          *(_OWORD *)(v99 + 168) = 0u;
          *(_OWORD *)(v99 + 152) = 0u;
          v194.__r_.__value_.__r.__words[0] = (std::string::size_type)(v99 + 24);
          v194.__r_.__value_.__l.__size_ = (std::string::size_type)v99;
          v100 = *(_QWORD *)v196;
          v153 = v210;
          v101 = *((float *)&v206 + 2);
          v165 = *(_QWORD *)__p;
          v166 = *(std::__shared_weak_count **)&__p[8];
          if (*(_QWORD *)&__p[8])
          {
            v102 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
            do
              v103 = __ldxr(v102);
            while (__stxr(v103 + 1, v102));
            v94 = *(double *)&v213;
          }
          v104 = v170;
          v105 = v171;
          v106 = *v52;
          v107 = *((double *)*v52 + 4);
          v108 = fmod(v107 - v94, 360.0);
          if (v108 < 0.0)
            v108 = v108 + 360.0;
          if (v108 > 180.0)
            v108 = v108 + -360.0;
          v109 = v106[1];
          v110 = v106[2];
          v111 = fabs(v108);
          *((_QWORD *)v99 + 5) = v100;
          *((_QWORD *)v99 + 6) = v156;
          *((_QWORD *)v99 + 7) = v155;
          *((_QWORD *)v99 + 8) = v154;
          *((_QWORD *)v99 + 9) = v153;
          *((double *)v99 + 10) = v101;
          sub_18F623A40((_QWORD *)v99 + 3, &v165);
          v99[88] = v93;
          v99[89] = v96;
          *((_QWORD *)v99 + 12) = v105;
          *((_QWORD *)v99 + 13) = v104;
          *((double *)v99 + 14) = v111;
          *((_QWORD *)v99 + 19) = v109;
          *((_QWORD *)v99 + 20) = v110;
          *((double *)v99 + 21) = v107;
          v112 = v166;
          v7 = v150;
          v54 = v95;
          v55 = v157;
          if (v166)
          {
            v113 = (unint64_t *)&v166->__shared_owners_;
            do
              v114 = __ldaxr(v113);
            while (__stlxr(v114 - 1, v113));
            if (!v114)
            {
              ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
              std::__shared_weak_count::__release_weak(v112);
            }
          }
          v115 = v194.__r_.__value_.__r.__words[0];
          *(_QWORD *)(v194.__r_.__value_.__r.__words[0] + 152) = v168;
          v116 = *v52;
          *(_QWORD *)(v115 + 104) = (*v52)[6];
          *(_DWORD *)(v115 + 120) = *((_DWORD *)v116 + 22);
          *(double *)(v115 + 112) = *((float *)&v206 + 3);
          *(_DWORD *)(v115 + 160) = *((_DWORD *)v116 + 25);
          sub_18F623AB8(v149, (__int128 *)&v194);
          v117 = (std::__shared_weak_count *)v194.__r_.__value_.__l.__size_;
          v25 = v148;
          if (v194.__r_.__value_.__l.__size_)
          {
            v118 = (unint64_t *)(v194.__r_.__value_.__l.__size_ + 8);
            do
              v119 = __ldaxr(v118);
            while (__stlxr(v119 - 1, v118));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          v120 = *(std::__shared_weak_count **)&__p[8];
          if (*(_QWORD *)&__p[8])
          {
            v121 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          goto LABEL_175;
        }
        v93 = 0;
        v94 = *(double *)&v213;
      }
      v95 = v54;
      v167 = 0;
      v168 = 0;
      v92 = *((double *)&v205 + 1);
      v91 = *(double *)&v205;
      goto LABEL_146;
    }
    v159 = 0;
    LOBYTE(v54) = 0;
    v53 = 0;
    __src = 0;
    v163 = 0;
    v147 = 0;
LABEL_191:
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v128 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
    {
      v129 = *(_DWORD *)(*a3 + 152);
      v130 = ((char *)a1[1] - (char *)*a1) >> 4;
      v131 = (v149[1] - *v149) >> 4;
      *(_DWORD *)__p = 67241216;
      *(_DWORD *)&__p[4] = v129;
      *(_WORD *)&__p[8] = 2050;
      *(_QWORD *)&__p[10] = v130;
      *(_WORD *)&__p[18] = 1026;
      *(_DWORD *)&__p[20] = v147;
      LOWORD(v222) = 1026;
      *(_DWORD *)((char *)&v222 + 2) = v163;
      HIWORD(v222) = 2050;
      v223 = v131;
      _os_log_impl(&dword_18F5B3000, v128, OS_LOG_TYPE_INFO, "CLTSP,CLMM,locations snapped using particleMM,dynamics,%{public}d,numLoc,%{public}lu,failures,%{public}d,skipped,%{public}d,snapped,%{public}lu", __p, 0x28u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v136 = *(_DWORD *)(*a3 + 152);
      v137 = ((char *)a1[1] - (char *)*a1) >> 4;
      v138 = (v149[1] - *v149) >> 4;
      LODWORD(v195) = 67241216;
      HIDWORD(v195) = v136;
      *(_WORD *)v196 = 2050;
      *(_QWORD *)&v196[2] = v137;
      *(_WORD *)&v196[10] = 1026;
      *(_DWORD *)&v196[12] = v147;
      *(_WORD *)&v196[16] = 1026;
      *(_DWORD *)&v196[18] = v163;
      *(_WORD *)&v196[22] = 2050;
      *(_QWORD *)&v197 = v138;
      v139 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "static BOOL CLMapMatcherWrapper::matchOnRoadUsingParticleMapMatcher(const std::vector<CLGeoMapLocationPtr> &, std::vector<CLGeoMapSnapDataPtr> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v139);
      if (v139 != __p)
        free(v139);
    }
    if ((v54 & 0x80) != 0)
      operator delete(v159);
    if (v53 < 0)
      operator delete(__src);
    if (v25)
      sub_18F6D7748(v25);
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
    v27 = 1;
    goto LABEL_205;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29908B0);
  v26 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__p = 0;
    _os_log_impl(&dword_18F5B3000, v26, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Unexpected,invalid geometry pointer,matchOnRoadUsingParticleMapMatcher", __p, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    LOWORD(v195) = 0;
    v140 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "static BOOL CLMapMatcherWrapper::matchOnRoadUsingParticleMapMatcher(const std::vector<CLGeoMapLocationPtr> &, std::vector<CLGeoMapSnapDataPtr> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v140);
    if (v140 != __p)
      free(v140);
  }
  return 0;
}

void sub_18F6D6828(_Unwind_Exception *a1)
{
  sub_18F5D6004((uint64_t)&STACK[0x230]);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6D6A3C(uint64_t a1)
{
  return a1 + 384;
}

os_log_t sub_18F6D6A44()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

_QWORD *sub_18F6D6A70(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  *((_DWORD *)v10 + 6) = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v14 = 1;
  if (v7 >= 3)
    v14 = (v7 & (v7 - 1)) != 0;
  v15 = v14 | (2 * v7);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_18F5F689C();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v5] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_18F6D6E48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6D6E5C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_18F5D6004((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

double sub_18F6D6EB8(uint64_t *a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  uint64_t *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;

  v3 = *a1;
  v2 = a1[1];
  if (v2 == *a1)
    return 0.0;
  v6 = 0;
  v7 = 0;
  v8 = (v2 - *a1) >> 4;
  v9 = 0.0;
  do
  {
    v10 = *(uint64_t **)(v3 + v6);
    if (v10)
    {
      if (a2 != 0.0 && v7 < v8 - 1 && *(_QWORD *)(v3 + v6 + 16))
      {
        v11 = sub_18F6CBECC((uint64_t)v10, 1);
        v12 = sub_18F6CBECC(*(_QWORD *)(v3 + v6 + 16), 0);
        v13 = fmod(v11 + -90.0 + 90.0 - v12 + 180.0, 360.0);
        if (v13 < 0.0)
          v13 = v13 + 360.0;
        v14 = v13 + -360.0;
        if (v13 <= 180.0)
          v14 = v13;
        v15 = fabs(v14);
        v16 = 0.0;
        if (v15 > 5.0 && v15 < 180.0)
          v16 = a2 / tan(v14 * 0.0174532925 * 0.5);
        v9 = v9 + v16 * -2.0;
        v10 = *(uint64_t **)(v3 + v6);
      }
      v17 = *v10;
      sub_18F7047B4(*v10);
      v9 = v9 + *(double *)(v17 + 40);
      v3 = *a1;
      v2 = a1[1];
    }
    ++v7;
    v8 = (v2 - v3) >> 4;
    v6 += 16;
  }
  while (v7 < v8);
  return v9;
}

_QWORD *sub_18F6D7050(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v35;
  _QWORD v36[2];
  char v37;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x28uLL);
  v36[0] = v13;
  v36[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v5;
  v14 = *a3;
  v13[3] = 0;
  v13[4] = 0;
  v13[2] = v14;
  v37 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v17 = 1;
  if (v7 >= 3)
    v17 = (v7 & (v7 - 1)) != 0;
  v18 = v17 | (2 * v7);
  v19 = vcvtps_u32_f32(v15 / v16);
  if (v18 <= v19)
    prime = (int8x8_t)v19;
  else
    prime = (int8x8_t)v18;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
    {
      v27 = std::__next_prime(v27);
    }
    else
    {
      v29 = 1 << -(char)__clz(v27 - 1);
      if (v27 >= 2)
        v27 = v29;
    }
    if (*(_QWORD *)&prime <= v27)
      prime = (int8x8_t)v27;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v35 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v35)
        operator delete(v35);
      v7 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_18F5F689C();
  v21 = operator new(8 * *(_QWORD *)&prime);
  v22 = *(void **)a1;
  *(_QWORD *)a1 = v21;
  if (v22)
    operator delete(v22);
  v23 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
  while (*(_QWORD *)&prime != v23);
  v24 = (_QWORD *)*v12;
  if (*v12)
  {
    v25 = v24[1];
    v26 = (uint8x8_t)vcnt_s8(prime);
    v26.i16[0] = vaddlv_u8(v26);
    if (v26.u32[0] > 1uLL)
    {
      if (v25 >= *(_QWORD *)&prime)
        v25 %= *(_QWORD *)&prime;
    }
    else
    {
      v25 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v12;
    v30 = (_QWORD *)*v24;
    if (*v24)
    {
      do
      {
        v31 = v30[1];
        if (v26.u32[0] > 1uLL)
        {
          if (v31 >= *(_QWORD *)&prime)
            v31 %= *(_QWORD *)&prime;
        }
        else
        {
          v31 &= *(_QWORD *)&prime - 1;
        }
        if (v31 != v25)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
            goto LABEL_56;
          }
          *v24 = *v30;
          *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
          v30 = v24;
        }
        v31 = v25;
LABEL_56:
        v24 = v30;
        v30 = (_QWORD *)*v30;
        v25 = v31;
      }
      while (v30);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  i = (_QWORD *)v36[0];
  if (v32)
  {
    *(_QWORD *)v36[0] = *v32;
LABEL_72:
    *v32 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v36[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = v12;
  if (*i)
  {
    v33 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7)
        v33 %= v7;
    }
    else
    {
      v33 &= v7 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  v36[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_18F6D7464((uint64_t)v36);
  return i;
}

void sub_18F6D7450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F6D7464((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F6D7464(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_18F5D6004((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

_QWORD *sub_18F6D74A8(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void sub_18F6D7558(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FDA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18F6D7568(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FDA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194002D30);
}

uint64_t sub_18F6D7598(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  sub_18F5D6004(a1 + 64);
  return sub_18F5D6004(v1);
}

_QWORD *sub_18F6D75C4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v6;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E298FF60;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  sub_18F6D76F8(&v6);
  return a1;
}

void sub_18F6D7630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F6D76F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_18F6D7648(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194002D30);
}

uint64_t sub_18F6D766C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    sub_18F5D6004(v1 + 40);
    sub_18F5D6004(v1);
    JUMPOUT(0x194002D30);
  }
  return result;
}

uint64_t sub_18F6D76B8(uint64_t a1, uint64_t a2)
{
  if (sub_18F64FAAC(a2, (uint64_t)&unk_1E298E1D8))
    return a1 + 24;
  else
    return 0;
}

uint64_t *sub_18F6D76F8(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    sub_18F5D6004(v1 + 40);
    sub_18F5D6004(v1);
    JUMPOUT(0x194002D30);
  }
  return result;
}

void sub_18F6D7748(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 2248);
  if (v2)
  {
    *(_QWORD *)(a1 + 2256) = v2;
    operator delete(v2);
  }
  sub_18F6D778C(a1);
  JUMPOUT(0x194002D30);
}

uint64_t sub_18F6D778C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v10;

  *(_QWORD *)a1 = off_1E298DD10;
  v2 = *(void **)(a1 + 2176);
  if (v2)
  {
    *(_QWORD *)(a1 + 2184) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 2088);
  *(_QWORD *)(a1 + 2088) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 2080);
  *(_QWORD *)(a1 + 2080) = 0;
  if (v4)
    sub_18F6D78E8(a1 + 2080, v4);
  v10 = (void **)(a1 + 1928);
  sub_18F6B2FEC(&v10);
  v10 = (void **)(a1 + 1904);
  sub_18F6B2FEC(&v10);
  v10 = (void **)(a1 + 1880);
  sub_18F6B2F7C(&v10);
  v5 = *(void **)(a1 + 1840);
  if (v5)
  {
    *(_QWORD *)(a1 + 1848) = v5;
    operator delete(v5);
  }
  sub_18F64F950((uint64_t *)(a1 + 1808));
  sub_18F64F950((uint64_t *)(a1 + 1784));
  if (*(char *)(a1 + 1431) < 0)
    operator delete(*(void **)(a1 + 1408));
  v6 = *(void **)(a1 + 1176);
  if (v6)
  {
    *(_QWORD *)(a1 + 1184) = v6;
    operator delete(v6);
  }
  sub_18F5D6004(a1 + 1088);
  sub_18F692F30((_QWORD *)(a1 + 1040));
  sub_18F5D6004(a1 + 992);
  if (*(char *)(a1 + 655) < 0)
    operator delete(*(void **)(a1 + 632));
  v7 = *(void **)(a1 + 472);
  if (v7)
  {
    *(_QWORD *)(a1 + 480) = v7;
    operator delete(v7);
  }
  sub_18F5D6004(a1 + 384);
  v8 = *(void **)(a1 + 352);
  if (v8)
  {
    *(_QWORD *)(a1 + 360) = v8;
    operator delete(v8);
  }
  sub_18F5D6004(a1 + 264);
  v10 = (void **)(a1 + 240);
  sub_18F6B2D54(&v10);
  sub_18F5D6004(a1 + 208);
  return a1;
}

void sub_18F6D78E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 232);
    sub_18F62AB98(&v4);
    v3 = sub_18F6D793C(a2);
    MEMORY[0x194002D30](v3, 0x10B2C406FD4C524);
  }
}

uint64_t sub_18F6D793C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  char *v6;
  uint8_t buf[1640];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 88))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908B0);
    v2 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "CLGCZ,destroy geocodec malloc zone,~CLGeoMapGeometry()", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908B0);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "CLGeoMapGeometry::~CLGeoMapGeometry()", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    GEOResetGeoCodecsAllocator();

    *(_QWORD *)(a1 + 88) = 0;
  }
  v3 = *(void **)(a1 + 96);
  if (v3)
  {

    *(_QWORD *)(a1 + 96) = 0;
  }
  v4 = *(void **)(a1 + 104);
  if (v4)
  {

    *(_QWORD *)(a1 + 104) = 0;
  }
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  sub_18F66AD0C(a1);
  return a1;
}

void sub_18F6D7B20(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_18F5D57A8(a1);
}

void sub_18F6D7B2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FE48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18F6D7B3C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FE48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194002D30);
}

uint64_t sub_18F6D7B6C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_18F6D7B7C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298DF60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18F6D7B8C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298DF60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194002D30);
}

uint64_t sub_18F6D7BBC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_18F6D7BCC()
{
  NSObject *v0;
  char *v1;
  uint8_t buf[1640];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v0 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_ERROR, "#Spi, Interrupted", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v1 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "-[CLLocationInternalClient connection]_block_invoke", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

uint64_t sub_18F6D7D50(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  char *v5;
  uint8_t buf[1640];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v2 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_ERROR, "#Spi, Invalidated", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "-[CLLocationInternalClient connection]_block_invoke", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  v3 = *(void **)(a1 + 32);
  objc_sync_enter(v3);

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = 0;
  return objc_sync_exit(v3);
}

void sub_18F6D7F08(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18F6D7F24(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  char *v4;
  uint8_t buf[4];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v3 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v6 = a2;
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_ERROR, "#Spi, Error with proxy, error: %@", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v4 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "-[CLLocationInternalClient synchronousRemoteObject]_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
}

void sub_18F6D818C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6D81A4(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6D8264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6D827C(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(_DWORD **)(result + 40) = a3;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_18F6D8344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6D835C(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6D840C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6D8424(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6D84C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6D84E0(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6D8628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

id sub_18F6D864C(uint64_t a1, void *a2, void *a3)
{
  id result;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = a2;
  result = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = result;
  return result;
}

void sub_18F6D87F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id sub_18F6D881C(uint64_t a1, void *a2)
{
  id result;

  result = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

void sub_18F6D88F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F6D8910(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 40) = a3;
    return *(id *)(*(_QWORD *)(result[4] + 8) + 40);
  }
  return result;
}

void sub_18F6D89D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F6D89EC(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 40) = a3;
    return *(id *)(*(_QWORD *)(result[4] + 8) + 40);
  }
  return result;
}

void sub_18F6D8AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F6D8AC8(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 40) = a3;
      return *(id *)(*(_QWORD *)(result[4] + 8) + 40);
    }
  }
  return result;
}

void sub_18F6D8B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F6D8B94(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24) = a3;
      return CFRetain(*(CFTypeRef *)(*(_QWORD *)(result[4] + 8) + 24));
    }
  }
  return result;
}

void sub_18F6D8C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F6D8C60(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24) = a3;
      return CFRetain(*(CFTypeRef *)(*(_QWORD *)(result[4] + 8) + 24));
    }
  }
  return result;
}

void sub_18F6D8E88(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  char *v3;
  uint8_t buf[1640];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v2 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_FAULT, "#Spi, Couldn't set location default!", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
      v3 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "-[CLLocationInternalClient setLocationDefaultForKey:value:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf)
        free(v3);
    }
  }
}

void sub_18F6D90F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18F6D910C(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v6;
  id result;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v6 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289282;
    v8[1] = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2114;
    v12 = a2;
    _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Spi, getLocationDefaultForKey, \", \"error\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
  }
  result = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_18F6D9368(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6D9380(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  const char *v6;
  uint64_t v7;

  if (!a2)
  {
    if (a3)
    {
      v4 = result;
      v5 = objc_alloc(MEMORY[0x1E0C99E80]);
      result = objc_msgSend_initWithName_(v5, v6, a3, v7);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8) + 40) = result;
    }
  }
  return result;
}

void sub_18F6D93F8(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  char *v3;
  uint8_t buf[1640];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v2 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_FAULT, "#Spi, setPrivateMode failed", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
      v3 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "-[CLLocationInternalClient setPrivateMode:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf)
        free(v3);
    }
  }
}

void sub_18F6D960C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6D9624(uint64_t result, uint64_t a2, char a3)
{
  if (!a2)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a3;
  return result;
}

void sub_18F6D96C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6D96E0(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6D974C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  char *v3;
  uint8_t buf[1640];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v2 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_FAULT, "#Spi, CLInternalSetLocationServicesEnabled failed", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
      v3 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "-[CLLocationInternalClient setLocationServicesEnabled:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf)
        free(v3);
    }
  }
}

void sub_18F6D9988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F6D99A0(_QWORD *result, void *a2)
{
  _QWORD *v3;
  NSObject *v4;
  char *v5;
  uint8_t buf[1640];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = result;
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v4 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_FAULT, "#Spi, CLInternalSetAuthorizationPromptMapDisplayEnabled failed", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "-[CLLocationInternalClient setAuthorizationPromptMapDisplayEnabled:]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
    result = a2;
    *(_QWORD *)(*(_QWORD *)(v3[4] + 8) + 40) = result;
  }
  return result;
}

void sub_18F6D9BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6D9BF4(uint64_t result, uint64_t a2, char a3)
{
  if (!a2)
  {
    **(_BYTE **)(result + 40) = a3;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_18F6D9D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6D9D64(uint64_t result, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = result;
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v4 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      v9 = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2114;
      v14 = a2;
      _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Spi, CLSetClientTransientAuthorizationInfo failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    }
    v5 = qword_1ECD8E750;
    if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
    {
      v9 = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2114;
      v14 = a2;
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Spi, CLSetClientTransientAuthorizationInfo failed", "{\"msg%{public}.0s\":\"#Spi, CLSetClientTransientAuthorizationInfo failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
    result = objc_msgSend_copy(a2, v6, v7, v8);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 40) = result;
  }
  return result;
}

void sub_18F6D9FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6D9FE8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  uint64_t result;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v7 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2114;
      v15 = a2;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Spi, CLGetClientTransientAuthorizationInfo failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    }
    v8 = qword_1ECD8E750;
    if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
    {
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2114;
      v15 = a2;
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Spi, CLGetClientTransientAuthorizationInfo failed", "{\"msg%{public}.0s\":\"#Spi, CLGetClientTransientAuthorizationInfo failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
    }
    if (*(_QWORD *)(a1 + 40))
      **(_QWORD **)(a1 + 40) = a2;
  }
  result = objc_msgSend_copy(a3, (const char *)a2, (uint64_t)a3, a4);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_18F6DA264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F6DA27C(uint64_t a1, uint64_t a2, double a3)
{
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v6 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a2;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Spi, CLInternalChangeClientAuthorizationTime failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    }
    v7 = qword_1ECD8E750;
    if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a2;
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Spi, CLInternalChangeClientAuthorizationTime failed", "{\"msg%{public}.0s\":\"#Spi, CLInternalChangeClientAuthorizationTime failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
  }
}

void sub_18F6DA4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F6DA4E0(_QWORD *result, void *a2)
{
  _QWORD *v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = result;
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v4 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      v6 = 68289282;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2114;
      v11 = a2;
      _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Spi, CLInternalTriggerExpiredAuthorizationPurge failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    }
    v5 = qword_1ECD8E750;
    if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
    {
      v6 = 68289282;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2114;
      v11 = a2;
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Spi, CLInternalTriggerExpiredAuthorizationPurge failed", "{\"msg%{public}.0s\":\"#Spi, CLInternalTriggerExpiredAuthorizationPurge failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
    }
    result = a2;
    *(_QWORD *)(*(_QWORD *)(v3[4] + 8) + 40) = result;
  }
  return result;
}

void sub_18F6DA6B4(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  char *v3;
  uint8_t buf[1640];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v2 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_FAULT, "#Spi, CLInternalSetGestureServiceEnabled failed", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
      v3 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "-[CLLocationInternalClient setGestureServiceEnabled:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf)
        free(v3);
    }
  }
}

void sub_18F6DA8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DA8E8(uint64_t result, uint64_t a2, char a3)
{
  if (!a2)
  {
    **(_BYTE **)(result + 40) = a3;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_18F6DA9B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DA9CC(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(_DWORD **)(result + 40) = a3;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_18F6DABEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DAC08(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DAE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DAE38(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_18F6DB048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DB064(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DB280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DB29C(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DB41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_18F6DB44C(_QWORD *a1, void *a2, char a3)
{
  id result;

  result = a2;
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40) = result;
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = a3;
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  return result;
}

void sub_18F6DB5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id sub_18F6DB610(uint64_t a1, void *a2)
{
  id result;

  result = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DB78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_18F6DB7B0(uint64_t a1, void *a2)
{
  id result;

  result = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DB918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id sub_18F6DB93C(uint64_t a1, void *a2)
{
  id result;

  result = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DBA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

id sub_18F6DBAB8(uint64_t a1, void *a2)
{
  id result;

  result = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DBBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DBBE8(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3;

  if (!a2)
  {
    v3 = result;
    result = objc_msgSend_getBytes_length_(a3, 0, *(_QWORD *)(result + 40), 156);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_18F6DBCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_18F6DBD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  __n128 result;
  __int128 v5;

  if (!a2)
  {
    v3 = *(_OWORD **)(a1 + 40);
    result = *(__n128 *)a3;
    v5 = *(_OWORD *)(a3 + 16);
    *v3 = *(_OWORD *)a3;
    v3[1] = v5;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_18F6DC0C8(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  char *v3;
  uint8_t buf[1640];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v2 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_ERROR, "#Spi,RouteHintError,Couldn't set map-matching route hint!", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
      v3 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "-[CLLocationInternalClient setMapMatchingRouteHint:count:routingType:stepType:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf)
        free(v3);
    }
  }
}

void sub_18F6DC414(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  char *v3;
  uint8_t buf[1640];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v2 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_ERROR, "#Spi,CLTR,TrackRunHintError,Couldn't set track run hint!", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
      v3 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "-[CLLocationInternalClient setTrackRunHint:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf)
        free(v3);
    }
  }
}

void sub_18F6DC7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F6DC7D0(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v4;
  char *v5;
  uint8_t buf[1640];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v4 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "#Spi,getAccessoryTypeBitSet,failed", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "-[CLLocationInternalClient getAccessoryTypeBitSet]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
    a3 = -1;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
}

void sub_18F6DCB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F6DCBAC(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v4;
  char *v5;
  uint8_t buf[1640];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v4 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "#Spi,getAccessoryPASCDTransmissionState,failed", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "-[CLLocationInternalClient getAccessoryPASCDTransmissionState]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
    a3 = 4;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a3;
}

void sub_18F6DCF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F6DCFB8(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v3;
  char *v4;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint8_t buf[4];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v3 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_ERROR, "#Spi,getOdometryBatchedLocations,returned with error", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "-[CLLocationInternalClient getOdometryBatchedLocations]_block_invoke", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  else
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v7 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      v16 = objc_msgSend_count(a3, v8, v9, v10);
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEBUG, "#Spi,getOdometryBatchedLocations,received data count,%{public}lu", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
      objc_msgSend_count(a3, v11, v12, v13);
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "-[CLLocationInternalClient getOdometryBatchedLocations]_block_invoke", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = a3;
  }
}

void sub_18F6DD4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DD4CC(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DD6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DD710(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DD7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F6DD7E4(uint64_t a1, uint64_t a2, char a3)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v4 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      v5 = *(int *)(a1 + 48);
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2050;
      v13 = v5;
      _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Getting status bar enabled for entity class failed\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    }
    v6 = qword_1ECD8E750;
    if (os_signpost_enabled((os_log_t)qword_1ECD8E750))
    {
      v7 = *(int *)(a1 + 48);
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2050;
      v13 = v7;
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Getting status bar enabled for entity class failed", "{\"msg%{public}.0s\":\"Getting status bar enabled for entity class failed\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    **(_BYTE **)(a1 + 40) = a3;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_18F6DDA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DDA34(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a3;
  return result;
}

void sub_18F6DDB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18F6DDB44(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  id result;

  if (a2)
    a3 = (void *)objc_msgSend_array(MEMORY[0x1E0C99D20], a2, (uint64_t)a3, a4);
  result = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_18F6DDC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DDC3C(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3;

  if (!a2)
  {
    v3 = result;
    result = objc_msgSend_getBytes_length_(a3, 0, *(_QWORD *)(result + 40), 320);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_18F6DDD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DDD64(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DDE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DDE80(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DDF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DDF3C(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DDFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DDFFC(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(_DWORD **)(result + 40) = a3;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_18F6DE0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DE0DC(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DE3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DE40C(uint64_t result, uint64_t a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double *v9;
  double *v10;
  double *v11;

  v9 = *(double **)(result + 48);
  **(double **)(result + 40) = a4;
  *v9 = a5;
  v10 = *(double **)(result + 64);
  **(double **)(result + 56) = a6;
  *v10 = a7;
  v11 = *(double **)(result + 80);
  **(double **)(result + 72) = a8;
  *v11 = a9;
  **(_DWORD **)(result + 88) = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a2;
  return result;
}

uint64_t sub_18F6DE448(uint64_t result, uint64_t a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double *v9;
  double *v10;
  double *v11;

  v9 = *(double **)(result + 48);
  **(double **)(result + 40) = a4;
  *v9 = a5;
  v10 = *(double **)(result + 64);
  **(double **)(result + 56) = a6;
  *v10 = a7;
  v11 = *(double **)(result + 80);
  **(double **)(result + 72) = a8;
  *v11 = a9;
  **(_DWORD **)(result + 88) = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a2;
  return result;
}

void sub_18F6DE530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DE548(uint64_t result, uint64_t a2, int a3, int a4)
{
  _DWORD *v4;

  v4 = *(_DWORD **)(result + 48);
  **(_DWORD **)(result + 40) = a3;
  *v4 = a4;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DE5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DE610(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DE6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F6DE6E0(_QWORD *result, void *a2)
{
  _QWORD *v2;

  if (a2)
  {
    v2 = result;
    result = a2;
    *(_QWORD *)(*(_QWORD *)(v2[4] + 8) + 40) = result;
  }
  return result;
}

void sub_18F6DE7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F6DE7D0(_QWORD *result, void *a2)
{
  _QWORD *v2;

  if (a2)
  {
    v2 = result;
    result = a2;
    *(_QWORD *)(*(_QWORD *)(v2[4] + 8) + 40) = result;
  }
  return result;
}

void sub_18F6DE8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F6DE8CC(_QWORD *result, void *a2, int a3, int a4)
{
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;

  v6 = result;
  if (a2)
  {
    result = a2;
    *(_QWORD *)(*(_QWORD *)(v6[4] + 8) + 40) = result;
  }
  v7 = (_DWORD *)v6[5];
  if (v7)
    *v7 = a3;
  v8 = (_DWORD *)v6[6];
  if (v8)
    *v8 = a4;
  return result;
}

void sub_18F6DE9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DE9C8(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_18F6DEA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18F6DEAA4(uint64_t a1, void *a2, void *a3)
{
  id result;

  result = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (a2)
  {
    result = a2;
    **(_QWORD **)(a1 + 40) = result;
  }
  return result;
}

void sub_18F6DEB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18F6DEBB0(uint64_t a1, void *a2, void *a3)
{
  id result;

  result = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (a2)
  {
    result = a2;
    **(_QWORD **)(a1 + 40) = result;
  }
  return result;
}

void sub_18F6DECC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18F6DECDC(uint64_t a1, void *a2)
{
  id result;

  result = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_18F6DEDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18F6DEDF4(uint64_t a1, void *a2)
{
  id result;

  result = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_18F6DEF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DEF24(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DEFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DF004(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DF0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DF0D8(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DF17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F6DF194(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24) = a3;
    return CFRetain(*(CFTypeRef *)(*(_QWORD *)(result[4] + 8) + 24));
  }
  return result;
}

void sub_18F6DF28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DF2A4(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DF350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DF368(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DF424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DF43C(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DF500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DF518(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DF5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DF5F4(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DF6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DF6D4(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_18F6DF77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DF794(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(_DWORD **)(result + 40) = a3;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_18F6DF858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F6DF870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v4;
  char *v5;
  uint8_t buf[1640];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v4 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_FAULT, "#Spi, TimeSyncWithReplyBlock failed", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "-[CLLocationInternalClient timeSyncMachTimeStamp:oscarTimeStamp:]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
  else
  {
    **(_QWORD **)(a1 + 40) = a3;
    **(_QWORD **)(a1 + 48) = a4;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
}

uint64_t sub_18F6DFAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  os_activity_scope_state_s v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = _os_activity_create(&dword_18F5B3000, "CL: CLInternalSetAuthorizationStatus", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v15.opaque[0] = 0;
  v15.opaque[1] = 0;
  os_activity_scope_enter(v6, &v15);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v7 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalSetAuthorizationStatus\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v11 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v8, v9, v10);
  v13 = objc_msgSend_setAuthorizationStatus_withCorrectiveCompensation_forBundleID_orBundlePath_(v11, v12, a3, 0, a1, a2);
  os_activity_scope_leave(&v15);
  return v13;
}

void sub_18F6DFC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DFC20(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v6, sel_reportLocationUtilityEvent_atDate_, a1, a2);
}

void sub_18F6DFC54(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = _os_activity_create(&dword_18F5B3000, "CL: CLClearLocationAuthorization", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v4, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v5 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289794;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    v18 = 2114;
    v19 = a1;
    v20 = 2114;
    v21 = a2;
    _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLClearLocationAuthorization\", \"event\":%{public, location:escape_only}s, \"bundleId\":%{public, location:escape_only}@, \"bundlePath\":%{public, location:escape_only}@}", buf, 0x30u);
  }
  v9 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v6, v7, v8);
  objc_msgSend_clearLocationAuthorizationForBundleId_orBundlePath_(v9, v10, a1, a2);
  os_activity_scope_leave(&v11);
}

void sub_18F6DFDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6DFDC4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v4, sel_clearLocationAuthorizations, v5, v6);
}

uint64_t CLCopyAppsUsingLocation()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLCopyAppsUsingLocation", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v0, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyAppsUsingLocation\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v2, v3, v4);
  v9 = objc_msgSend_copyAppsUsingLocation(v5, v6, v7, v8);
  os_activity_scope_leave(&v11);
  return v9;
}

void sub_18F6DFF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLCopyActiveClientsUsingLocation()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t active;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLCopyActiveClientsUsingLocation", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v0, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyActiveClientsUsingLocation\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v2, v3, v4);
  active = objc_msgSend_copyActiveClientsUsingLocation(v5, v6, v7, v8);
  os_activity_scope_leave(&v11);
  return active;
}

void sub_18F6E0064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLCopyInternalState()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLCopyInternalState", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v0, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyInternalState\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v2, v3, v4);
  v9 = objc_msgSend_copyInternalState(v5, v6, v7, v8);
  os_activity_scope_leave(&v11);
  return v9;
}

void sub_18F6E01B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void CLSetLocationDefault(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = _os_activity_create(&dword_18F5B3000, "CL: CLSetLocationDefault", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v4, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v5 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    v18 = 2114;
    v19 = a1;
    _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSetLocationDefault\", \"event\":%{public, location:escape_only}s, \"key\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  v9 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v6, v7, v8);
  objc_msgSend_setLocationDefaultForKey_value_(v9, v10, a1, a2);
  os_activity_scope_leave(&v11);
}

void sub_18F6E0318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLCopyMicroLocationInternalVersion()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLCopyMicroLocationInternalVersion", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v0, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyMicroLocationInternalVersion\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v2, v3, v4);
  v9 = objc_msgSend_copyMicroLocationInternalVersion(v5, v6, v7, v8);
  os_activity_scope_leave(&v11);
  return v9;
}

void sub_18F6E0464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLCopyZaxisStats()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLCopyZaxisStats", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v0, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyZaxisStats\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v2, v3, v4);
  v9 = objc_msgSend_copyZaxisStats(v5, v6, v7, v8);
  os_activity_scope_leave(&v11);
  return v9;
}

void sub_18F6E05B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLGetLocationDefault(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t LocationDefaultForKey;
  os_activity_scope_state_s v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = _os_activity_create(&dword_18F5B3000, "CL: CLGetLocationDefault", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v12.opaque[0] = 0;
  v12.opaque[1] = 0;
  os_activity_scope_enter(v2, &v12);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v3 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2082;
    v18 = "activity";
    v19 = 2114;
    v20 = a1;
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetLocationDefault\", \"event\":%{public, location:escape_only}s, \"key\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  v7 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v4, v5, v6);
  LocationDefaultForKey = objc_msgSend_getLocationDefaultForKey_(v7, v8, a1, v9);
  os_activity_scope_leave(&v12);
  return LocationDefaultForKey;
}

void sub_18F6E0710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLGetPipelinedCache()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t PipelinedCache;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLGetPipelinedCaches", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v0, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetPipelinedCaches\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v2, v3, v4);
  PipelinedCache = objc_msgSend_getPipelinedCache(v5, v6, v7, v8);
  os_activity_scope_leave(&v11);
  return PipelinedCache;
}

void sub_18F6E085C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLGetMotionSensorLogs()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t MotionSensorLogs;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLGetMotionSensorLogs", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v0, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetMotionSensorLogs\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v2, v3, v4);
  MotionSensorLogs = objc_msgSend_getMotionSensorLogs(v5, v6, v7, v8);
  os_activity_scope_leave(&v11);
  return MotionSensorLogs;
}

void sub_18F6E09A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLGetAccessoryMotionSensorLogs()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AccessoryMotionSensorLogs;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLGetAccessoryMotionSensorLogs", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v0, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetAccessoryMotionSensorLogs\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v2, v3, v4);
  AccessoryMotionSensorLogs = objc_msgSend_getAccessoryMotionSensorLogs(v5, v6, v7, v8);
  os_activity_scope_leave(&v11);
  return AccessoryMotionSensorLogs;
}

void sub_18F6E0AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLApplyArchivedAuthorizationDecisions(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  os_activity_scope_state_s v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = _os_activity_create(&dword_18F5B3000, "CL: CLApplyArchivedAuthorizationDecisions", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v12.opaque[0] = 0;
  v12.opaque[1] = 0;
  os_activity_scope_enter(v2, &v12);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v3 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2082;
    v18 = "activity";
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLApplyArchivedAuthorizationDecisions\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v7 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v4, v5, v6);
  v10 = objc_msgSend_applyArchivedAuthorizationDecisions_(v7, v8, a1, v9);
  os_activity_scope_leave(&v12);
  return v10;
}

void sub_18F6E0C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLGetArchivedAuthorizationDecisions(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t ArchivedAuthorizationDecisionsWithError;
  os_activity_scope_state_s v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = _os_activity_create(&dword_18F5B3000, "CL: CLGetArchivedAuthorizationDecisions", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v12.opaque[0] = 0;
  v12.opaque[1] = 0;
  os_activity_scope_enter(v2, &v12);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v3 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2082;
    v18 = "activity";
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetArchivedAuthorizationDecisions\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v7 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v4, v5, v6);
  ArchivedAuthorizationDecisionsWithError = objc_msgSend_getArchivedAuthorizationDecisionsWithError_(v7, v8, a1, v9);
  os_activity_scope_leave(&v12);
  return ArchivedAuthorizationDecisionsWithError;
}

void sub_18F6E0D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E0DB0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  os_activity_scope_state_s v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = _os_activity_create(&dword_18F5B3000, "CL: CLTimeZoneAtLocation", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v12.opaque[0] = 0;
  v12.opaque[1] = 0;
  os_activity_scope_enter(v2, &v12);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v3 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2082;
    v18 = "activity";
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLTimeZoneAtLocation\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v7 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v4, v5, v6);
  v10 = objc_msgSend_timeZoneAtLocation_(v7, v8, a1, v9);
  os_activity_scope_leave(&v12);
  return v10;
}

void sub_18F6E0EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLStartStopAdvertisingBeacon(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t started;
  os_activity_scope_state_s v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = _os_activity_create(&dword_18F5B3000, "CL: CLStartStopAdvertisingBeacon", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v13.opaque[0] = 0;
  v13.opaque[1] = 0;
  os_activity_scope_enter(v4, &v13);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v5 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289795;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = "activity";
    v20 = 2113;
    v21 = a1;
    v22 = 2114;
    v23 = a2;
    _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLStartStopAdvertisingBeacon\", \"event\":%{public, location:escape_only}s, \"region\":%{private, location:escape_only}@, \"power\":%{public, location:escape_only}@}", buf, 0x30u);
  }
  v9 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v6, v7, v8);
  started = objc_msgSend_startStopAdvertisingBeacon_power_(v9, v10, a1, a2);
  os_activity_scope_leave(&v13);
  return started;
}

void sub_18F6E106C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E1080(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v5, sel_setPrivateMode_, a1, v6);
}

uint64_t sub_18F6E10AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v4, sel_getPrivateMode, v5, v6);
}

uint64_t CLPingDaemon()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLPingDaemon", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v0, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPingDaemon\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v2, v3, v4);
  v9 = objc_msgSend_pingDaemon(v5, v6, v7, v8);
  os_activity_scope_leave(&v11);
  return v9;
}

void sub_18F6E1200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void CLPassKitNotifyPayment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  os_activity_scope_state_s v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = _os_activity_create(&dword_18F5B3000, "CL: CLPassKitNotifyPassUsage", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v13.opaque[0] = 0;
  v13.opaque[1] = 0;
  os_activity_scope_enter(v6, &v13);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v7 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = "activity";
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPassKitNotifyPassUsage\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v11 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v8, v9, v10);
  objc_msgSend_notifyPassKitPayment_transaction_info_(v11, v12, a1, a2, a3);
  os_activity_scope_leave(&v13);
}

void sub_18F6E1364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void CLWeatherNotifyForecast(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  const char *v20;
  void *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t j;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  void *v44;
  id obj;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  os_activity_scope_state_s state;
  _BYTE v56[128];
  _BYTE v57[128];
  uint64_t buf;
  __int16 v59;
  const char *v60;
  __int16 v61;
  const char *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v7 = _os_activity_create(&dword_18F5B3000, "CL: CLWeatherNotifyForecastUsage", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v7, &state);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v8 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289282;
    v59 = 2082;
    v60 = "";
    v61 = 2082;
    v62 = "activity";
    _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLWeatherNotifyForecastUsage\", \"event\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
  }
  v9 = (void *)MEMORY[0x1E0C99D20];
  v10 = objc_opt_class();
  v11 = objc_opt_class();
  v12 = objc_opt_class();
  v13 = objc_opt_class();
  v14 = objc_opt_class();
  v15 = objc_opt_class();
  v18 = (void *)objc_msgSend_arrayWithObjects_(v9, v16, v10, v17, v11, v12, v13, v14, v15, 0);
  v19 = objc_alloc(MEMORY[0x1E0C99E08]);
  v21 = (void *)objc_msgSend_initWithDictionary_copyItems_(v19, v20, (uint64_t)a1, 1);
  v44 = a5;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v22, (uint64_t)&v51, (uint64_t)v57, 16);
  if (v26)
  {
    obj = a1;
    v46 = *(_QWORD *)v52;
    do
    {
      for (i = 0; i != v26; ++i)
      {
        if (*(_QWORD *)v52 != v46)
          objc_enumerationMutation(obj);
        v28 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * i);
        v47 = 0u;
        v48 = 0u;
        v49 = 0u;
        v50 = 0u;
        v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v23, (uint64_t)&v47, (uint64_t)v56, 16);
        if (!v30)
          goto LABEL_18;
        v31 = 0;
        v32 = *(_QWORD *)v48;
        do
        {
          for (j = 0; j != v30; ++j)
          {
            if (*(_QWORD *)v48 != v32)
              objc_enumerationMutation(v18);
            objc_msgSend_objectForKeyedSubscript_(v21, v23, v28, v29);
            v31 |= objc_opt_isKindOfClass();
          }
          v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v23, (uint64_t)&v47, (uint64_t)v56, 16);
        }
        while (v30);
        if ((v31 & 1) == 0)
LABEL_18:
          objc_msgSend_removeObjectForKey_(v21, v23, v28, v29);
      }
      v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v23, (uint64_t)&v51, (uint64_t)v57, 16);
    }
    while (v26);
  }
  v34 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v23, v24, v25);
  objc_msgSend_coordinate(v44, v35, v36, v37);
  v39 = v38;
  objc_msgSend_coordinate(v44, v40, v41, v42);
  objc_msgSend_notifyWeatherForecast_airQualityConditions_hourlyForecasts_dailyForecasts_latitude_longitude_(v34, v43, (uint64_t)v21, MEMORY[0x1E0C9AA70], MEMORY[0x1E0C9AA60], MEMORY[0x1E0C9AA60], v39);

  os_activity_scope_leave(&state);
}

void sub_18F6E16E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E171C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v5, sel_setLocationServicesEnabled_, a1, v6);
}

uint64_t sub_18F6E1748(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v5, sel_getAuthorizationPromptMapDisplayEnabled_, a1, v6);
}

uint64_t CLGetClientTransientAuthorizationInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t TemporaryAuthorizationStatusForBundleId_orBundlePath_error;
  os_activity_scope_state_s v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = _os_activity_create(&dword_18F5B3000, "CL: CLGetClientTransientAuthorizationInfo", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v15.opaque[0] = 0;
  v15.opaque[1] = 0;
  os_activity_scope_enter(v6, &v15);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v7 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetClientTransientAuthorizationInfo\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v11 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v8, v9, v10);
  TemporaryAuthorizationStatusForBundleId_orBundlePath_error = objc_msgSend_getTemporaryAuthorizationStatusForBundleId_orBundlePath_error_(v11, v12, a1, a2, a3);
  os_activity_scope_leave(&v15);
  return TemporaryAuthorizationStatusForBundleId_orBundlePath_error;
}

void sub_18F6E18CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLSetClientTransientAuthorizationInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  os_activity_scope_state_s v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = _os_activity_create(&dword_18F5B3000, "CL: CLSetClientTransientAuthorizationInfo", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v15.opaque[0] = 0;
  v15.opaque[1] = 0;
  os_activity_scope_enter(v6, &v15);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v7 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSetClientTransientAuthorizationInfo\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v11 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v8, v9, v10);
  v13 = objc_msgSend_setTemporaryAuthorizationStatusForBundleId_orBundlePath_statusData_(v11, v12, a1, a2, a3);
  os_activity_scope_leave(&v15);
  return v13;
}

void sub_18F6E1A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E1A4C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v5, sel_setAuthorizationPromptMapDisplayEnabled_, a1, v6);
}

uint64_t sub_18F6E1A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t IncidentalUseMode_forBundleID_orBundlePath;
  os_activity_scope_state_s v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = _os_activity_create(&dword_18F5B3000, "CL: CLInternalGetIncidentalUseMode", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v15.opaque[0] = 0;
  v15.opaque[1] = 0;
  os_activity_scope_enter(v6, &v15);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v7 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalGetIncidentalUseMode\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v11 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v8, v9, v10);
  IncidentalUseMode_forBundleID_orBundlePath = objc_msgSend_getIncidentalUseMode_forBundleID_orBundlePath_(v11, v12, a3, a1, a2);
  os_activity_scope_leave(&v15);
  return IncidentalUseMode_forBundleID_orBundlePath;
}

void sub_18F6E1BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E1BE4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  void *v18;
  const char *v19;

  v18 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return objc_msgSend_registerCircularInterestZoneWithId_latitude_longitude_radius_serviceMaskOperator_provenanceType_forBundleId_orBundlePath_error_(v18, v19, a3, a4, a5, a1, a2, a6, a7, a8, a9);
}

uint64_t sub_18F6E1C74(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v14;
  const char *v15;

  v14 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return objc_msgSend_registerPhenolicInterestZoneWithId_phenolicLocation_serviceMaskOperator_provenanceType_forBundleId_orBundlePath_error_(v14, v15, a3, a4, a5, a6, a1, a2, a7);
}

uint64_t sub_18F6E1CF4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  void *v10;
  const char *v11;

  v6 = a4;
  v10 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return objc_msgSend_setRelevance_forInterestZoneWithId_registeredForBundleId_orBundlePath_error_(v10, v11, v6 != 0, a3, a1, a2, a5);
}

uint64_t sub_18F6E1D58(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  const char *v9;

  v8 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return objc_msgSend_deleteInterestZoneWithId_registeredForBundleId_orBundlePath_error_(v8, v9, a3, a1, a2, a4);
}

uint64_t CLInternalPerformMigration()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLInternalPerformMigration", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v0, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalPerformMigration\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v2, v3, v4);
  v9 = objc_msgSend_performMigration(v5, v6, v7, v8);
  os_activity_scope_leave(&v11);
  return v9;
}

void sub_18F6E1EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E1EF4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v4, sel_shutdownDaemon, v5, v6);
}

uint64_t CLClientDisplayStats_0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v4, sel_displayStatistics, v5, v6);
}

uint64_t sub_18F6E1F2C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v5, sel_dumpLogs_, a1, v6);
}

uint64_t sub_18F6E1F58(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v6, sel_setStatusBarIconEnabled_forEntityClass_, a2, a1);
}

uint64_t sub_18F6E1F8C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v6, sel_getStatusBarIconEnabled_forEntityClass_, a2, a1);
}

uint64_t CLGetStatusBarIconState()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t StatusBarIconState;
  NSObject *v10;
  char *v12;
  os_activity_scope_state_s state;
  int v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLGetStatusBarIconState", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v0, &state);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetStatusBarIconState\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v2, v3, v4);
  StatusBarIconState = objc_msgSend_getStatusBarIconState(v5, v6, v7, v8);
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v10 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v17 = StatusBarIconState;
    _os_log_impl(&dword_18F5B3000, v10, OS_LOG_TYPE_DEFAULT, "CLStatusBarIconState received an icon stateu of %d", buf, 8u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v14 = 67109120;
    v15 = StatusBarIconState;
    v12 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "CLStatusBarIconState CLGetStatusBarIconState()", "CoreLocation: %s\n", v12);
    if (v12 != (char *)buf)
      free(v12);
  }
  os_activity_scope_leave(&state);
  return StatusBarIconState;
}

void sub_18F6E2248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void CLSetMapMatchingRouteHint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  char *v16;
  os_activity_scope_state_s state;
  int v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  _BYTE v25[14];
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v8 = _os_activity_create(&dword_18F5B3000, "CL: CLSetMapMatchingRouteHint", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v8, &state);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v9 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v25 = 0;
    *(_WORD *)&v25[4] = 2082;
    *(_QWORD *)&v25[6] = "";
    v26 = 2082;
    v27 = "activity";
    _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSetMapMatchingRouteHint\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  }
  v10 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)v25 = (int)a4;
    *(_WORD *)&v25[8] = 1024;
    *(_DWORD *)&v25[10] = a1;
    v26 = 1024;
    LODWORD(v27) = a2;
    _os_log_impl(&dword_18F5B3000, v10, OS_LOG_TYPE_DEBUG, "RouteHints,CLSetRouteHintsForMapMatching,received,%lu,routeType,%d,stepType,%d", buf, 0x18u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v18 = 134218496;
    v19 = (int)a4;
    v20 = 1024;
    v21 = a1;
    v22 = 1024;
    v23 = a2;
    v16 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLSetMapMatchingRouteHint(CLClientLocationRouteHintType, CLClientLocationRouteHintType, CLMapsRouteHint *, int)", "CoreLocation: %s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
  }
  v14 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v11, v12, v13);
  objc_msgSend_setMapMatchingRouteHint_count_routingType_stepType_(v14, v15, a3, a4, a1, a2);
  os_activity_scope_leave(&state);
}

void sub_18F6E253C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void CLSetRouteHintsForMapMatching(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  char *v14;
  os_activity_scope_state_s state;
  int v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _BYTE v21[14];
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = _os_activity_create(&dword_18F5B3000, "CL: CLSetRouteHintsForMapMatching", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v6, &state);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v7 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v21 = 0;
    *(_WORD *)&v21[4] = 2082;
    *(_QWORD *)&v21[6] = "";
    v22 = 2082;
    v23 = "activity";
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSetRouteHintsForMapMatching\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  }
  v8 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)v21 = (int)a3;
    *(_WORD *)&v21[8] = 1024;
    *(_DWORD *)&v21[10] = a1;
    _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_DEBUG, "RouteHints,CLSetRouteHintsForMapMatching,received,%lu,routeType,%d", buf, 0x12u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v16 = 134218240;
    v17 = (int)a3;
    v18 = 1024;
    v19 = a1;
    v14 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLSetRouteHintsForMapMatching(CLClientLocationRouteHintType, CLMapsRouteHint *, int)", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
  }
  v12 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v9, v10, v11);
  objc_msgSend_setMapMatchingRouteHint_count_routingType_stepType_(v12, v13, a2, a3, a1, a1);
  os_activity_scope_leave(&state);
}

void sub_18F6E2818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void CLSetTrackRunHint(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char *v17;
  os_activity_scope_state_s state;
  int v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint8_t buf[4];
  _BYTE v26[14];
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = _os_activity_create(&dword_18F5B3000, "CL: CLSetTrackRunHint", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v2, &state);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v3 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v26 = 0;
    *(_WORD *)&v26[4] = 2082;
    *(_QWORD *)&v26[6] = "";
    v27 = 2082;
    v28 = "activity";
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSetTrackRunHint\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  }
  v4 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)a1;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)buf = 134349569;
    *(_QWORD *)v26 = v5;
    *(_WORD *)&v26[8] = 1025;
    *(_DWORD *)&v26[10] = v6;
    v27 = 1025;
    LODWORD(v28) = v7;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEFAULT, "TrackRunHint,CLSetTrackRunHint,received,MCTime,%{public}.1lf,lane,%{private}d,notification,%{private}d", buf, 0x18u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v14 = *(_QWORD *)a1;
    v15 = *(_DWORD *)(a1 + 8);
    v16 = *(_DWORD *)(a1 + 12);
    v19 = 134349569;
    v20 = v14;
    v21 = 1025;
    v22 = v15;
    v23 = 1025;
    v24 = v16;
    v17 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLSetTrackRunHint(CLTrackRunHint *)", "CoreLocation: %s\n", v17);
    if (v17 != (char *)buf)
      free(v17);
  }
  v11 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v8, v9, v10);
  objc_msgSend_setTrackRunHint_(v11, v12, a1, v13);
  os_activity_scope_leave(&state);
}

void sub_18F6E2AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t CLGetAccessoryTypeBitSet()
{
  NSObject *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  uint8_t buf[1640];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v0 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_DEBUG, "CLGetAccessoryTypeBitSet", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "int32_t CLGetAccessoryTypeBitSet()", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  v4 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v1, v2, v3);
  return objc_msgSend_getAccessoryTypeBitSet(v4, v5, v6, v7);
}

uint64_t CLGetAccessoryPASCDTransmissionState()
{
  NSObject *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  uint8_t buf[1640];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v0 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_DEBUG, "CLGetAccessoryPASCDTransmissionState", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "CLClientPASCDTransmissionState CLGetAccessoryPASCDTransmissionState()", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  v4 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v1, v2, v3);
  return objc_msgSend_getAccessoryPASCDTransmissionState(v4, v5, v6, v7);
}

uint64_t sub_18F6E2E30(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v6, sel_getLocationForBundleID_orBundlePath_dynamicAccuracyReductionEnabled_allowsAlteredAccessoryLocations_location_, a1, a2);
}

uint64_t CLGetOdometryBatchedLocations()
{
  NSObject *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  uint8_t buf[1640];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v0 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_DEFAULT, "CLGetOdometryBatchedLocations", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "NSDictionary *CLGetOdometryBatchedLocations()", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  v4 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v1, v2, v3);
  return objc_msgSend_getOdometryBatchedLocations(v4, v5, v6, v7);
}

uint64_t sub_18F6E3020(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v6, sel_getGroundAltitudeForBundleID_orBundlePath_location_groundAltitude_, a1, a2);
}

uint64_t sub_18F6E306C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v6, sel_checkAndExerciseAuthorizationForBundleID_orBundlePath_services_error_, a1, a2);
}

uint64_t CLGetControlPlaneStatusReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t ControlPlaneStatusReportClear_startTime_endTime_latitude_longitude_altitude_accuracy_status;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v16 = _os_activity_create(&dword_18F5B3000, "CL: CLGetControlPlaneStatusReport", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v16, &state);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v17 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v27 = 0;
    v28 = 2082;
    v29 = "";
    v30 = 2082;
    v31 = "activity";
    v32 = 1026;
    v33 = a1;
    _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetControlPlaneStatusReport\", \"event\":%{public, location:escape_only}s, \"clear\":%{public}d}", buf, 0x22u);
  }
  v21 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v18, v19, v20);
  ControlPlaneStatusReportClear_startTime_endTime_latitude_longitude_altitude_accuracy_status = objc_msgSend_getControlPlaneStatusReportClear_startTime_endTime_latitude_longitude_altitude_accuracy_status_(v21, v22, a1, a2, a3, a4, a5, a6, a7, a8);
  os_activity_scope_leave(&state);
  return ControlPlaneStatusReportClear_startTime_endTime_latitude_longitude_altitude_accuracy_status;
}

void sub_18F6E3258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t CLGetEmergencyLocationSettingsVersionInfo(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t EmergencyLocationSettingsCompatibilityVersion_andContentVersion;
  os_activity_scope_state_s v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = _os_activity_create(&dword_18F5B3000, "CL: CLGetEmergencyLocationSettingsVersion", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v13.opaque[0] = 0;
  v13.opaque[1] = 0;
  os_activity_scope_enter(v4, &v13);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v5 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = "activity";
    _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetEmergencyLocationSettingsVersion\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v9 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v6, v7, v8);
  EmergencyLocationSettingsCompatibilityVersion_andContentVersion = objc_msgSend_getEmergencyLocationSettingsCompatibilityVersion_andContentVersion_(v9, v10, a1, a2);
  os_activity_scope_leave(&v13);
  return EmergencyLocationSettingsCompatibilityVersion_andContentVersion;
}

void sub_18F6E33BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLDeleteCurrentEmergencyLocationAsset()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLDeleteCurrentEmergencyLocationAsset", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v0, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLDeleteCurrentEmergencyLocationAsset\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v2, v3, v4);
  v9 = objc_msgSend_deleteCurrentEmergencyLocationAsset(v5, v6, v7, v8);
  os_activity_scope_leave(&v11);
  return v9;
}

void sub_18F6E3508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLCopyNearbyAssetSettings()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLCopyNearbyAssetSettings", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v0, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyNearbyAssetSettings\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v2, v3, v4);
  v9 = objc_msgSend_copyNearbyAssetSettings(v5, v6, v7, v8);
  os_activity_scope_leave(&v11);
  return v9;
}

void sub_18F6E3654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLCopyNearbyAssetSettingsOfAccessoryFile(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = _os_activity_create(&dword_18F5B3000, "CL: CLCopyNearbyAssetSettingsOfAccessoryFile", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v2, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v3 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyNearbyAssetSettingsOfAccessoryFile\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (a1)
  {
    v7 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v4, v5, v6);
    a1 = objc_msgSend_copyNearbyAssetSettingsOfAccessoryFile_(v7, v8, a1, v9);
  }
  os_activity_scope_leave(&v11);
  return a1;
}

void sub_18F6E37AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLCopyRoutineAssetSettings(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  os_activity_scope_state_s v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = _os_activity_create(&dword_18F5B3000, "CL: CLCopyRoutineAssetSettings", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v13.opaque[0] = 0;
  v13.opaque[1] = 0;
  os_activity_scope_enter(v4, &v13);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v5 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = "activity";
    _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyRoutineAssetSettings\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v9 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v6, v7, v8);
  v11 = objc_msgSend_copyRoutineAssetSettingsWithCompatibilityVersion_contentVersion_(v9, v10, a1, a2);
  os_activity_scope_leave(&v13);
  return v11;
}

void sub_18F6E3910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLShouldDisplayEEDUI()
{
  NSObject *v0;
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t shouldDisplayEEDUI;
  os_activity_scope_state_s v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = _os_activity_create(&dword_18F5B3000, "CL: CLShouldDisplayEEDUI", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v11.opaque[0] = 0;
  v11.opaque[1] = 0;
  os_activity_scope_enter(v0, &v11);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v1 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = "activity";
    _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLShouldDisplayEEDUI\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v2, v3, v4);
  shouldDisplayEEDUI = objc_msgSend_shouldDisplayEEDUI(v5, v6, v7, v8);
  os_activity_scope_leave(&v11);
  return shouldDisplayEEDUI;
}

void sub_18F6E3A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t CLGetEEDCloakingKey(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v5, sel_getEEDCloakingKey_, a1, v6);
}

uint64_t CLGetEEDEmergencyContactNames(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v5, sel_getEEDEmergencyContactNames_, a1, v6);
}

uint64_t sub_18F6E3AC8(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  const char *v19;
  uint64_t v20;
  os_activity_scope_state_s v22;
  _BYTE buf[32];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v12 = _os_activity_create(&dword_18F5B3000, "CL: CLInternalSetTemporaryAuthorizationGranted", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v22.opaque[0] = 0;
  v22.opaque[1] = 0;
  os_activity_scope_enter(v12, &v22);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v13 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = "activity";
    _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalSetTemporaryAuthorizationGranted\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v17 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v14, v15, v16);
  v18 = a3[1];
  *(_OWORD *)buf = *a3;
  *(_OWORD *)&buf[16] = v18;
  v20 = objc_msgSend_setTemporaryAuthorizationGranted_forBundleID_orBundlePath_orAuditToken_byLocationButton_voiceInteractionEnabled_(v17, v19, a4, a1, a2, buf, a5, a6);
  os_activity_scope_leave(&v22);
  return v20;
}

void sub_18F6E3C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E3C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  os_activity_scope_state_s v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = _os_activity_create(&dword_18F5B3000, "CL: CLInternalSetTemporaryPreciseAuthorizationGranted", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v15.opaque[0] = 0;
  v15.opaque[1] = 0;
  os_activity_scope_enter(v6, &v15);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v7 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalSetTemporaryPreciseAuthorizationGranted\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v11 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v8, v9, v10);
  v13 = objc_msgSend_setTemporaryPreciseAuthorizationGranted_forBundleID_orBundlePath_(v11, v12, a3, a1, a2);
  os_activity_scope_leave(&v15);
  return v13;
}

void sub_18F6E3DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E3DD0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  os_activity_scope_state_s v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = _os_activity_create(&dword_18F5B3000, "CL: CLInternalTearDownLocationAuthPrompt", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v13.opaque[0] = 0;
  v13.opaque[1] = 0;
  os_activity_scope_enter(v4, &v13);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v5 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = "activity";
    _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalTearDownLocationAuthPrompt\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v9 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v6, v7, v8);
  v11 = objc_msgSend_tearDownLocationAuthPromptForBundleID_orBundlePath_(v9, v10, a1, a2);
  os_activity_scope_leave(&v13);
  return v11;
}

void sub_18F6E3F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E3F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  os_activity_scope_state_s v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = _os_activity_create(&dword_18F5B3000, "CL: CLInternalSetLocationButtonUseMode", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v15.opaque[0] = 0;
  v15.opaque[1] = 0;
  os_activity_scope_enter(v6, &v15);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v7 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalSetLocationButtonUseMode\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v11 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v8, v9, v10);
  v13 = objc_msgSend_setLocationButtonUseMode_forBundleID_orBundlePath_(v11, v12, a3, a1, a2);
  os_activity_scope_leave(&v15);
  return v13;
}

void sub_18F6E408C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E40A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  os_activity_scope_state_s v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v12 = _os_activity_create(&dword_18F5B3000, "CL: CLInternalSetAuthorizationStatusByType", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v21.opaque[0] = 0;
  v21.opaque[1] = 0;
  os_activity_scope_enter(v12, &v21);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v13 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68290818;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2114;
    v29 = a1;
    v30 = 2114;
    v31 = a2;
    v32 = 2114;
    v33 = a3;
    v34 = 2114;
    v35 = a4;
    v36 = 2050;
    v37 = a5;
    v38 = 2050;
    v39 = a6;
    _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalSetAuthorizationStatusByType\", \"event\":%{public, location:escape_only}s, \"bundleId\":%{public, location:escape_only}@, \"bundlePath\":%{public, location:escape_only}@, \"zoneId\":%{public, location:escape_only}@, \"subIdentityId\":%{public, location:escape_only}@, \"auth\":%{public, location:CLClientAuthorizationStatus}lld, \"compensation\":%{public, location:CLClientCorrectiveCompensation}lld}", buf, 0x58u);
  }
  v17 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v14, v15, v16);
  v19 = objc_msgSend_setAuthorizationStatusByType_withCorrectiveCompensation_andZoneIdentifier_andSubIdentityIdentifier_forBundleID_orBundlePath_(v17, v18, a5, a6, a3, a4, a1, a2);
  os_activity_scope_leave(&v21);
  return v19;
}

void sub_18F6E4260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E4274(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v5, sel_updatePillButtonChoiceForOutstandingPrompt_, a1, v6);
}

uint64_t sub_18F6E42D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  os_activity_scope_state_s v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = _os_activity_create(&dword_18F5B3000, "CL: CLInternalSetIncidentalUseMode", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  v15.opaque[0] = 0;
  v15.opaque[1] = 0;
  os_activity_scope_enter(v6, &v15);

  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DAB0);
  v7 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalSetIncidentalUseMode\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v11 = (void *)objc_msgSend_sharedServiceClient(CLLocationInternalClient, v8, v9, v10);
  v13 = objc_msgSend_setIncidentalUseMode_forBundleID_orBundlePath_(v11, v12, a3, a1, a2);
  os_activity_scope_leave(&v15);
  return v13;
}

void sub_18F6E442C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E4440(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = objc_msgSend_sharedServiceClient(CLLocationInternalClient, a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v6, sel_setBackgroundIndicatorForBundleID_orBundlePath_enabled_, a1, a2);
}

void sub_18F6E4484(uint64_t a1, uint64_t a2, int a3)
{
  double v6;
  double v7;
  BOOL v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v22;
  double v23;
  double v24;
  long double v25;
  double v26;
  double v27;
  long double v28;
  _BYTE v29[39];

  v7 = *(double *)(a2 + 192);
  v6 = *(double *)(a2 + 200);
  v9 = v7 >= 180.0 || *(double *)(a2 + 104) < 0.0 || v7 <= 0.0;
  v10 = -1.0;
  if (v9)
    v11 = -1.0;
  else
    v11 = v7 + 1.414;
  if (v6 > 0.0 && (v12 = *(double *)(a2 + 208), v12 > 0.0) && (v13 = *(double *)(a2 + 216), v13 >= 0.0))
  {
    memset(&v29[7], 0, 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)v29;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)&v29[16];
    *(_QWORD *)(a1 + 72) = 0;
    v15 = v6 / 2.45;
    v16 = v12 / 2.45;
    if (v13 > 0.0)
    {
      v25 = tan(v13 * -2.0 * 0.0174532925);
      v26 = sqrt((v15 * v15 - v16 * v16) * (v15 * v15 - v16 * v16) * 0.25 * (v25 * v25) / (v25 * v25 + 1.0));
      *(double *)(a1 + 16) = v26;
      v27 = v15 * v15 + v16 * v16;
      v28 = (v26 + v26) / v25;
      v16 = (v27 + v28) * 0.5;
      v15 = (v27 - v28) * 0.5;
    }
    *(double *)a1 = v16;
    *(double *)(a1 + 8) = v15;
    v10 = v11 * v11;
    if (v11 <= 0.0)
      v10 = -1.0;
    *(double *)(a1 + 24) = v10;
  }
  else
  {
    v14 = *(double *)(a2 + 80);
    memset(&v29[7], 0, 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)v29;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)&v29[16];
    *(_QWORD *)(a1 + 72) = 0;
    v15 = v14 * v14 * 0.5;
    *(double *)a1 = v15;
    *(double *)(a1 + 8) = v15;
    if (v11 > 0.0)
      v10 = v11 * v11;
    *(double *)(a1 + 24) = v10;
    v16 = v14 * v14 * 0.5;
  }
  v17 = *(double *)(a2 + 96);
  if (v17 > 19.4444444 && v15 + v16 < 25.0)
  {
    __asm { FMOV            V2.2D, #25.0 }
    *(_OWORD *)a1 = _Q2;
    *(_QWORD *)(a1 + 16) = 0;
    v15 = 25.0;
    v16 = 25.0;
  }
  if (v15 + v16 < 156.25)
  {
    *(int64x2_t *)a1 = vdupq_n_s64(0x4063880000000000uLL);
    *(_QWORD *)(a1 + 16) = 0;
  }
  if (a3 && v10 > 0.0)
  {
    v22 = 3.0;
    if (*(_BYTE *)(a2 + 228))
      v22 = 15.0;
    if (v17 == 0.0)
      v23 = 15.0;
    else
      v23 = v22;
    v24 = sqrt(v10);
    v10 = (v24 + v23) * (v24 + v23);
    *(double *)(a1 + 24) = v10;
  }
  if (v10 > 0.0 && v10 < 42.25)
    *(_QWORD *)(a1 + 24) = 0x4045200000000000;
  sub_18F6E4730(a1);
}

void sub_18F6E4730(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  NSObject *v13;
  double v14;
  double v15;
  NSObject *v16;
  char *v17;
  uint8_t buf[1640];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = *(double *)a1;
  if (*(double *)a1 <= 0.0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908F0);
    v5 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_FAULT, "fVarEast <= 0.0", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      goto LABEL_47;
    goto LABEL_45;
  }
  v2 = *(double *)(a1 + 8);
  if (v2 <= 0.0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908F0);
    v6 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_FAULT, "fVarNorth <= 0.0", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_45;
      goto LABEL_47;
    }
    return;
  }
  v3 = *(double *)(a1 + 16);
  if (v3 >= 0.0)
  {
    v7 = *(double *)(a1 + 24);
    if (v7 <= 0.0 || v7 >= 32400.0)
    {
      *(_QWORD *)(a1 + 24) = 0xBFF0000000000000;
      *(_BYTE *)(a1 + 40) = 0;
      v14 = -v3;
      v15 = v1 * v2 - v3 * v3;
      *(double *)(a1 + 32) = v15;
      *(double *)(a1 + 48) = v2;
      *(double *)(a1 + 56) = v14;
      *(double *)(a1 + 64) = v1;
      if (v15 != 0.0)
      {
        *(double *)(a1 + 48) = v2 / v15;
        *(double *)(a1 + 56) = v14 / v15;
        *(double *)(a1 + 64) = v1 / v15;
        return;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908F0);
      v16 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_FAULT, "CLMM, Unexpected determinant of 0", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 0))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        goto LABEL_47;
    }
    else
    {
      *(_BYTE *)(a1 + 40) = 1;
      v8 = v2 * v7;
      v9 = -(v7 * v3);
      *(double *)(a1 + 48) = v2 * v7;
      *(double *)(a1 + 56) = v9;
      v10 = v1 * v7;
      v11 = v1 * v2 - v3 * v3;
      *(double *)(a1 + 64) = v10;
      *(double *)(a1 + 72) = v11;
      v12 = v11 * v7;
      *(double *)(a1 + 32) = v11 * v7;
      if (v11 * v7 != 0.0)
      {
        *(double *)(a1 + 48) = v8 / v12;
        *(double *)(a1 + 56) = v9 / v12;
        *(double *)(a1 + 64) = v10 / v12;
        *(double *)(a1 + 72) = v11 / v12;
        return;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908F0);
      v13 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_FAULT, "CLMM, Unexpected determinant of 0", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 0))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        goto LABEL_47;
    }
LABEL_45:
    v17 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "void CLMapDataUtil::CovarInvDet::calcInvAndDet()", "CoreLocation: %s\n", v17);
    if (v17 != (char *)buf)
      free(v17);
    return;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E29908F0);
  v4 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_FAULT, "fVarEastNorth < 0.0", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_45;
LABEL_47:
    dispatch_once(&qword_1EE172158, &unk_1E29908F0);
    goto LABEL_45;
  }
}

void sub_18F6E4CD8(uint64_t a1, uint64_t a2)
{
  double v2;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  char *v11;
  long double v12;
  uint8_t buf[1640];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *(double *)(a1 + 32);
  if (v2 <= 0.0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E29908F0);
    v10 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v10, OS_LOG_TYPE_FAULT, "determinant <= 0.0", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E29908F0);
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void CLMapDataUtil::CovarInvDet::calculateScoreAndVarFactor(MapMatcherScore &) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  else
  {
    v4 = *(double *)(a1 + 48);
    v5 = *(double *)(a1 + 56);
    v6 = *(double *)(a1 + 64);
    if (*(_BYTE *)(a1 + 40))
    {
      v7 = v5 * ((*(double *)(a2 + 32) + *(double *)(a2 + 32)) * *(double *)(a2 + 40))
         + *(double *)(a2 + 32) * *(double *)(a2 + 32) * v4
         + *(double *)(a2 + 40) * *(double *)(a2 + 40) * v6
         + *(double *)(a2 + 56) * *(double *)(a2 + 56) * *(double *)(a1 + 72);
      v8 = v7 / 3.0;
      v9 = 248.050213;
    }
    else
    {
      v7 = v5 * ((*(double *)(a2 + 32) + *(double *)(a2 + 32)) * *(double *)(a2 + 40))
         + *(double *)(a2 + 32) * *(double *)(a2 + 32) * v4
         + *(double *)(a2 + 40) * *(double *)(a2 + 40) * v6;
      v8 = v7 * 0.5;
      v9 = 39.4784176;
    }
    v12 = exp(v7 * -0.5);
    *(double *)(a2 + 16) = v8;
    *(long double *)a2 = v12 / sqrt(v2 * v9);
  }
}

os_log_t sub_18F6E4F28()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

void sub_18F6E58F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD block[7];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F6E594C;
  block[3] = &unk_1E2992A50;
  v3 = *(NSObject **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  block[5] = a2;
  block[6] = v4;
  block[4] = a3;
  dispatch_async(v3, block);
}

uint64_t sub_18F6E594C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v7 = *(_QWORD *)(a1 + 48);
    v8 = 0;
  }
  else
  {
    v9 = (void *)objc_msgSend_geoAddress(*(void **)(a1 + 40), a2, 0, a4);
    v8 = objc_msgSend_formattedAddressLines(v9, v10, v11, v12);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v7 = v5;
    v4 = 0;
  }
  return v6(v7, v8, v4);
}

uint64_t sub_18F6E599C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_msgSend_geoAddress(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2, a3, a4);
  v9 = objc_msgSend_formattedAddressLines(v5, v6, v7, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v4 + 16))(v4, v9, 0);
}

uint64_t sub_18F6E5C94(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  result = objc_msgSend_length(a2, (const char *)a2, a3, a4);
  if (result)
  {
    if (objc_msgSend_length(*(void **)(a1 + 32), v7, v8, v9))
      objc_msgSend_appendString_(*(void **)(a1 + 32), v10, (uint64_t)CFSTR(", "), v11);
    return objc_msgSend_appendString_(*(void **)(a1 + 32), v10, (uint64_t)a2, v11);
  }
  return result;
}

uint64_t sub_18F6E5E68()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_1EE172C58 != -1)
    dispatch_once(&qword_1EE172C58, &unk_1E2992A98);
  v0 = (uint64_t *)dlsym((void *)qword_1EE172C60, "CNPostalAddressStreetKey");
  if (v0)
  {
    result = *v0;
    qword_1EE172C50 = result;
  }
  else
  {
    result = qword_1EE172C50;
  }
  off_1ECD8E760 = sub_18F6E5EE0;
  return result;
}

uint64_t sub_18F6E5EE0()
{
  return qword_1EE172C50;
}

void *sub_18F6E5EEC()
{
  void *result;

  result = dlopen("/System/Library/Frameworks/Contacts.framework/Contacts", 2);
  qword_1EE172C60 = (uint64_t)result;
  return result;
}

uint64_t sub_18F6E5F14()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_1EE172C58 != -1)
    dispatch_once(&qword_1EE172C58, &unk_1E2992A98);
  v0 = (uint64_t *)dlsym((void *)qword_1EE172C60, "CNPostalAddressSubLocalityKey");
  if (v0)
  {
    result = *v0;
    qword_1EE172C68 = result;
  }
  else
  {
    result = qword_1EE172C68;
  }
  off_1ECD8E768 = sub_18F6E5F8C;
  return result;
}

uint64_t sub_18F6E5F8C()
{
  return qword_1EE172C68;
}

uint64_t sub_18F6E5F98()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_1EE172C58 != -1)
    dispatch_once(&qword_1EE172C58, &unk_1E2992A98);
  v0 = (uint64_t *)dlsym((void *)qword_1EE172C60, "CNPostalAddressCityKey");
  if (v0)
  {
    result = *v0;
    qword_1EE172C70 = result;
  }
  else
  {
    result = qword_1EE172C70;
  }
  off_1ECD8E770 = sub_18F6E6010;
  return result;
}

uint64_t sub_18F6E6010()
{
  return qword_1EE172C70;
}

uint64_t sub_18F6E601C()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_1EE172C58 != -1)
    dispatch_once(&qword_1EE172C58, &unk_1E2992A98);
  v0 = (uint64_t *)dlsym((void *)qword_1EE172C60, "CNPostalAddressSubAdministrativeAreaKey");
  if (v0)
  {
    result = *v0;
    qword_1EE172C78 = result;
  }
  else
  {
    result = qword_1EE172C78;
  }
  off_1ECD8E778 = sub_18F6E6094;
  return result;
}

uint64_t sub_18F6E6094()
{
  return qword_1EE172C78;
}

uint64_t sub_18F6E60A0()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_1EE172C58 != -1)
    dispatch_once(&qword_1EE172C58, &unk_1E2992A98);
  v0 = (uint64_t *)dlsym((void *)qword_1EE172C60, "CNPostalAddressStateKey");
  if (v0)
  {
    result = *v0;
    qword_1EE172C80 = result;
  }
  else
  {
    result = qword_1EE172C80;
  }
  off_1ECD8E780 = sub_18F6E6118;
  return result;
}

uint64_t sub_18F6E6118()
{
  return qword_1EE172C80;
}

uint64_t sub_18F6E6124()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_1EE172C58 != -1)
    dispatch_once(&qword_1EE172C58, &unk_1E2992A98);
  v0 = (uint64_t *)dlsym((void *)qword_1EE172C60, "CNPostalAddressPostalCodeKey");
  if (v0)
  {
    result = *v0;
    qword_1EE172C88 = result;
  }
  else
  {
    result = qword_1EE172C88;
  }
  off_1ECD8E788 = sub_18F6E619C;
  return result;
}

uint64_t sub_18F6E619C()
{
  return qword_1EE172C88;
}

uint64_t sub_18F6E61A8()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_1EE172C58 != -1)
    dispatch_once(&qword_1EE172C58, &unk_1E2992A98);
  v0 = (uint64_t *)dlsym((void *)qword_1EE172C60, "CNPostalAddressCountryKey");
  if (v0)
  {
    result = *v0;
    qword_1EE172C90 = result;
  }
  else
  {
    result = qword_1EE172C90;
  }
  off_1ECD8E790 = sub_18F6E6220;
  return result;
}

uint64_t sub_18F6E6220()
{
  return qword_1EE172C90;
}

uint64_t sub_18F6E622C()
{
  uint64_t *v0;
  uint64_t result;

  if (qword_1EE172C58 != -1)
    dispatch_once(&qword_1EE172C58, &unk_1E2992A98);
  v0 = (uint64_t *)dlsym((void *)qword_1EE172C60, "CNPostalAddressISOCountryCodeKey");
  if (v0)
  {
    result = *v0;
    qword_1EE172C98 = result;
  }
  else
  {
    result = qword_1EE172C98;
  }
  off_1ECD8E798 = sub_18F6E62A4;
  return result;
}

uint64_t sub_18F6E62A4()
{
  return qword_1EE172C98;
}

Class sub_18F6E62B0()
{
  Class result;

  if (qword_1EE172C58 != -1)
    dispatch_once(&qword_1EE172C58, &unk_1E2992A98);
  result = objc_getClass("CNPostalAddress");
  qword_1EE172CA0 = (uint64_t)result;
  off_1ECD8E7A0 = sub_18F6E630C;
  return result;
}

uint64_t sub_18F6E630C()
{
  return qword_1EE172CA0;
}

os_log_t sub_18F6E6588()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "Position");
  qword_1EE172110 = (uint64_t)result;
  return result;
}

void sub_18F6E65B4(double *a1, long double *a2, double *a3, long double a4, long double a5, long double a6)
{
  double v9;
  double v10;
  double v11;
  double v12;
  unsigned int v13;
  double v14;
  double v15;
  __double2 v16;
  double v17;
  long double __y;

  v9 = sqrt(a5 * a5 + a4 * a4);
  *a2 = atan2(a5, a4) / 0.0174532925;
  v10 = v9 * 0.99330562;
  v11 = 0.0;
  v12 = 1.57079633;
  if (v9 * 0.99330562 != 0.0)
  {
    __y = a6;
    v13 = 0;
    v12 = 0.0;
    v14 = 0.0;
    do
    {
      v15 = v12;
      v12 = atan2(__y, v10);
      v16 = __sincos_stret(v12);
      v17 = 6378137.0 / sqrt(v16.__sinval * -0.00669437999 * v16.__sinval + 1.0);
      v11 = v9 / v16.__cosval - v17;
      if (vabdd_f64(v15, v12) >= 0.000001)
      {
        if (v13 > 8)
          goto LABEL_13;
      }
      else if (vabdd_f64(v14, v11) < 0.001 || v13 >= 9)
      {
        goto LABEL_13;
      }
      ++v13;
      v10 = v9 * (v17 / (v17 + v11) * -0.00669437999 + 1.0);
      v14 = v9 / v16.__cosval - v17;
    }
    while (v10 != 0.0);
    v12 = 1.57079633;
  }
LABEL_13:
  *a1 = v12 / 0.0174532925;
  *a3 = v11;
}

uint64_t sub_18F6E6B1C(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_didReceiveLocationPushPayload_completion_, a1[5], a1[6]);
}

uint64_t sub_18F6E6D30(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_serviceExtensionWillTerminate, v3, v4);
  return result;
}

os_log_t sub_18F6E7B80()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "Proximity");
  qword_1EE172120 = (uint64_t)result;
  return result;
}

void sub_18F6E7EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F6E8130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E815C(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  char *v3;
  uint8_t buf[1640];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24))
  {
    v1 = result;
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E298DA50);
    v2 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "#monitor dealloc destroying connection in a deferred way", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E298DA50);
      v3 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "-[CLMonitor dealloc]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf)
        free(v3);
    }
    return CLConnection::deferredDelete(*(CLConnection **)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24));
  }
  return result;
}

void sub_18F6E8484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_18F6E8554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E856C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = objc_msgSend_monitoredIdentifiers(*(void **)(a1 + 32), a2, a3, a4);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = result;
  return result;
}

void sub_18F6E8654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E866C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = objc_msgSend_allMonitoringRecordsByIdentifier(*(void **)(*(_QWORD *)(a1 + 32) + 24), a2, a3, a4);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = result;
  return result;
}

void sub_18F6E8D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F6E8E6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E8E80(uint64_t a1)
{
  id Weak;

  Weak = objc_loadWeak((id *)(a1 + 48));
  return MEMORY[0x1E0DE7D20](Weak, sel_addConditionForMonitoring_identifier_options_assumedState_, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_18F6E9328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F6E9440(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_18F6E9454(uint64_t a1)
{
  id Weak;
  const char *v3;
  uint64_t v4;

  Weak = objc_loadWeak((id *)(a1 + 40));
  return objc_msgSend_removeConditionFromMonitoringWithIdentifier_(Weak, v3, *(_QWORD *)(a1 + 32), v4);
}

void sub_18F6E9918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_18F5D6004((uint64_t)&a9);
  sub_18F5D6004((uint64_t)&a11);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F6EA058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  id *v25;

  sub_18F5D6004((uint64_t)&a10);
  sub_18F5D6004((uint64_t)&a12);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18F6EA104(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  id Weak;
  const char *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  CLConnectionMessage *v16;
  std::__shared_weak_count *v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD8E758 != -1)
    dispatch_once(&qword_1ECD8E758, &unk_1E298DA50);
  v4 = qword_1ECD8E750;
  if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
  {
    v5 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    if (*(char *)(v5 + 23) >= 0)
      v6 = v5;
    else
      v6 = *(_QWORD *)v5;
    *(_DWORD *)buf = 68289282;
    v19 = 0;
    v20 = 2082;
    v21 = "";
    v22 = 2082;
    v23 = v6;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#monitor Default handler invoked\", \"message\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  Weak = objc_loadWeak((id *)(a1 + 32));
  v10 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = *(CLConnectionMessage **)a2;
  v17 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  objc_msgSend_handleMessageMonitor_(Weak, v8, (uint64_t)&v16, v9);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_18F6EA270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6EA6F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  objc_msgSend_setIdentityToken_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
  objc_msgSend_setStorageToken_(*(void **)(a1 + 32), v5, *(_QWORD *)(a1 + 48), v6);
  return objc_msgSend_manageConnection(*(void **)(a1 + 32), v7, v8, v9);
}

void sub_18F6EAB20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18F6EABCC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id result;

  result = (id)objc_msgSend_set(MEMORY[0x1E0C99E20], a2, a3, a4);
  qword_1ECD8F8B0 = (uint64_t)result;
  return result;
}

os_log_t sub_18F6EAD28()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECD8E750 = (uint64_t)result;
  return result;
}

uint64_t sub_18F6EAD54(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *v7;
  __int128 v8;

  *(_QWORD *)a1 = off_1E298E7E8;
  v4 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (_BYTE *)(a1 + 24);
  if (*((char *)a3 + 23) < 0)
  {
    sub_18F5C6990(v7, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)(a1 + 48) = 0x600000006;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 80) = _Q0;
  *(_WORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 114) = 1;
  return a1;
}

void sub_18F6EADF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18F5D6004(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6EAE0C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E298E7E8;
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  sub_18F5D6004(a1 + 8);
  return a1;
}

uint64_t sub_18F6EAE68(uint64_t a1, char a2)
{
  uint64_t result;

  *(_BYTE *)(a1 + 112) = a2;
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t sub_18F6EAE84(uint64_t a1, int a2)
{
  uint64_t result;

  *(_BYTE *)(a1 + 113) = a2;
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 32))(result, a2 ^ 1u);
  return result;
}

uint64_t sub_18F6EAEA4(uint64_t a1, char *a2, void *a3, void *a4, _QWORD *a5)
{
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  void *Object;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  int64_t v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t **v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t **v50;
  NSObject *v51;
  _BYTE *v53;
  size_t v54;
  unint64_t v55;
  char *v56;
  void *v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  _QWORD *v64;
  const char *v65;
  uint64_t v66;
  char *v67;
  int v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t Index;
  const char *v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  __int128 v111;
  _BYTE *v112;
  _BYTE *v113;
  int64_t v114;
  char *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  int64_t v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  unint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  void *v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  double v148;
  double v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  double v158;
  unint64_t v159;
  const char *v160;
  void *v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  double v166;
  NSObject *v167;
  NSObject *v168;
  char *v169;
  unint64_t *v170;
  unint64_t *v171;
  _QWORD *v172;
  _BYTE *v173;
  unint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  _BYTE *v177;
  BOOL v178;
  uint64_t **v179;
  uint64_t **v180;
  uint64_t *v181;
  unint64_t v182;
  uint64_t *v183;
  int v184;
  unint64_t v185;
  void *v186;
  void *v187;
  double v188;
  double v189;
  double v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  _QWORD *v199;
  _BYTE *v200;
  _QWORD *v201;
  _BYTE *v202;
  unint64_t v203;
  void *v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  const char *v209;
  uint64_t v210;
  double v211;
  double v212;
  double v213;
  void *v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  const char *v219;
  uint64_t v220;
  double v221;
  double v222;
  const char *v223;
  uint64_t v224;
  uint64_t v225;
  const char *v226;
  const char *v227;
  uint64_t v228;
  uint64_t v229;
  const char *v230;
  uint64_t v231;
  int v232;
  int v233;
  unint64_t v234;
  _BOOL4 v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  void *v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  const char *v246;
  uint64_t v247;
  uint64_t v248;
  double v249;
  double v250;
  const char *v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  const char *v255;
  uint64_t v256;
  uint64_t v257;
  float v258;
  double v259;
  const char *v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  const char *v267;
  uint64_t v268;
  uint64_t v269;
  double v270;
  void *v271;
  const char *v272;
  uint64_t v273;
  uint64_t v274;
  _BOOL4 v275;
  const char *v276;
  uint64_t v277;
  uint64_t v278;
  void *v279;
  const char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  const char *v284;
  uint64_t v285;
  double v286;
  double v287;
  void *v288;
  const char *v289;
  uint64_t v290;
  uint64_t v291;
  void *v292;
  const char *v293;
  uint64_t v294;
  uint64_t v295;
  double v296;
  double v297;
  const char *v298;
  uint64_t v299;
  uint64_t v300;
  void *v301;
  const char *v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  double v306;
  double v307;
  double v308;
  int v309;
  int v310;
  int v311;
  double v312;
  uint64_t v313;
  double v314;
  char *v315;
  char *v316;
  char *v317;
  const char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  char *v323;
  double v324;
  double v325;
  double v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  double v331;
  double v332;
  double v333;
  _QWORD *v334;
  double v335;
  _QWORD *v336;
  double v337;
  unint64_t v338;
  char *v339;
  char *v340;
  _BYTE v341[32];
  void *__p;
  void *__dst;
  uint64_t v344;
  _BYTE buf[24];
  uint64_t v346;
  double v347;
  double v348;
  double v349;
  double v350;
  double v351;
  _QWORD *v352;
  double v353;
  double v354;
  double v355;
  double v356;
  double v357;
  double v358;
  double v359;
  double v360;
  int v361;
  int v362;
  int v363;
  int v364;
  char v365;
  uint64_t v366;

  v366 = *MEMORY[0x1E0C80C00];
  if (a2 && a3 && a4)
  {
    v10 = objc_msgSend_count(a3, a2, (uint64_t)a3, (uint64_t)a4);
    if (v10 <= 1)
    {
      v14 = v10;
      sub_18F60EF00((uint64_t)a2, a4);
      if (qword_1EE1720F8 != -1)
        dispatch_once(&qword_1EE1720F8, &unk_1E29909D0);
      v15 = qword_1EE172100;
      if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v14;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = 2;
        _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_DEFAULT, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothing] Returned true. Deep copy tripLocations to reconstructedLocations. inertialOdometryData array count, %{public}zu, expected minimum count, %{public}zu.", buf, 0x16u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE1720F8 != -1)
          dispatch_once(&qword_1EE1720F8, &unk_1E29909D0);
        *(_DWORD *)v341 = 134349312;
        *(_QWORD *)&v341[4] = v14;
        *(_WORD *)&v341[12] = 2050;
        *(_QWORD *)&v341[14] = 2;
        v316 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothing(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, double &)", "CoreLocation: %s\n", v316);
        if (v316 != buf)
          free(v316);
      }
      return 1;
    }
    Object = (void *)objc_msgSend_firstObject(a2, v11, v12, v13);
    objc_msgSend_latitude(Object, v19, v20, v21);
    v23 = v22;
    v27 = (void *)objc_msgSend_firstObject(a2, v24, v25, v26);
    objc_msgSend_longitude(v27, v28, v29, v30);
    *(_QWORD *)(a1 + 48) = v23;
    *(_QWORD *)(a1 + 56) = v31;
    *(_BYTE *)(a1 + 64) = 1;
    sub_18F60F8DC(a2, (const char *)5, v32, v33, (void **)&v339, 15.5, 60.0);
    v36 = v339;
    v37 = v340;
    v38 = v340 - v339;
    if ((unint64_t)(v340 - v339) <= 0xF)
    {
      if (qword_1EE1720F8 != -1)
        dispatch_once(&qword_1EE1720F8, &unk_1E29909D0);
      v39 = qword_1EE172100;
      if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
      {
        v43 = objc_msgSend_count(a2, v40, v41, v42);
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)&buf[4] = v43;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = (v340 - v339) >> 3;
        *(_WORD *)&buf[22] = 2050;
        v346 = 2;
        _os_log_impl(&dword_18F5B3000, v39, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothing] Returned false. tripLocation array count, %{public}zu, selected tripLocation count, %{public}zu expected minimum count, %{public}zu.", buf, 0x20u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE1720F8 != -1)
          dispatch_once(&qword_1EE1720F8, &unk_1E29909D0);
        v321 = objc_msgSend_count(a2, v318, v319, v320);
        *(_DWORD *)v341 = 134349568;
        *(_QWORD *)&v341[4] = v321;
        *(_WORD *)&v341[12] = 2050;
        *(_QWORD *)&v341[14] = (v340 - v339) >> 3;
        *(_WORD *)&v341[22] = 2050;
        *(_QWORD *)&v341[24] = 2;
        v322 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "std::vector<size_t> CLTrajectorySmoother::selectLocationSamplesBasedOnUncertainty(NSArray<CLTripSegmentLocation *> * _Nonnull, const double, const double, const size_t)", "CoreLocation: %s\n", v322);
        if (v322 != buf)
          free(v322);
      }
      v44 = v339;
      if (!v339)
        goto LABEL_32;
      v340 = v339;
      goto LABEL_31;
    }
    if (v339 == v340)
    {
      if (!v340)
      {
LABEL_32:
        v16 = 0;
LABEL_33:
        if (qword_1EE1720F8 != -1)
          dispatch_once(&qword_1EE1720F8, &unk_1E29909D0);
        v51 = qword_1EE172100;
        if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = v16;
          _os_log_impl(&dword_18F5B3000, v51, OS_LOG_TYPE_DEFAULT, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothing] Completed, returned %{public}u.", buf, 8u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE1720F8 != -1)
            dispatch_once(&qword_1EE1720F8, &unk_1E29909D0);
          *(_DWORD *)v341 = 67240192;
          *(_DWORD *)&v341[4] = v16;
          v317 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothing(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, double &)", "CoreLocation: %s\n", v317);
          if (v317 != buf)
            free(v317);
        }
        return v16;
      }
      v44 = v340;
LABEL_31:
      operator delete(v44);
      goto LABEL_32;
    }
    v45 = (uint64_t **)(a1 + 432);
    v46 = v38 >> 3;
    v47 = *(_QWORD *)(a1 + 448);
    v48 = (_QWORD *)a1;
    v49 = *(char **)(a1 + 432);
    v336 = v48;
    if (v38 >> 3 > (unint64_t)((v47 - (uint64_t)v49) >> 3))
    {
      if (v49)
      {
        v48[55] = v49;
        operator delete(v49);
        v47 = 0;
        v50 = v45;
        *v45 = 0;
        v45[1] = 0;
        v45[2] = 0;
      }
      else
      {
        v50 = v45;
      }
      if (v38 < 0)
        goto LABEL_186;
      v60 = v47 >> 2;
      if (v47 >> 2 <= v46)
        v60 = v38 >> 3;
      v61 = (unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v60;
      if (v61 >> 61)
LABEL_186:
        sub_18F5F7864();
      v59 = v336;
      v49 = (char *)sub_18F610B1C((uint64_t)(v336 + 56), v61);
      v336[54] = v49;
      v336[55] = v49;
      v336[56] = &v49[8 * v62];
      memmove(v49, v36, v38);
LABEL_56:
      v59[55] = &v49[v38];
      *(_WORD *)v59 = 257;
      *((_BYTE *)v59 + 2) = 1;
      v63 = sub_18F610848(v50, v34, v54, v35);
      v64 = v59;
      v67 = (char *)objc_msgSend_objectsAtIndexes_(a2, v65, (uint64_t)v63, v66);
      v68 = sub_18F67F568((unsigned __int8 *)v59, v67, a3, a4);
      v72 = v68;
      if (v36)
      {
        operator delete(v36);
        if ((v72 & 1) == 0)
          goto LABEL_32;
      }
      else if (!v68)
      {
        goto LABEL_32;
      }
      v73 = sub_18F610848(v50, v69, v70, v71);
      Index = objc_msgSend_firstIndex(v73, v74, v75, v76);
      v80 = (void *)objc_msgSend_objectAtIndex_(a2, v78, Index, v79);
      v84 = (void *)objc_msgSend_timestamp(v80, v81, v82, v83);
      objc_msgSend_timeIntervalSinceReferenceDate(v84, v85, v86, v87);
      *a5 = v88;
      v92 = (void *)objc_msgSend_lastObject(a4, v89, v90, v91);
      v96 = (void *)objc_msgSend_timestamp(v92, v93, v94, v95);
      v100 = (void *)objc_msgSend_firstObject(a4, v97, v98, v99);
      v104 = objc_msgSend_timestamp(v100, v101, v102, v103);
      objc_msgSend_timeIntervalSinceDate_(v96, v105, v104, v106);
      v333 = v110;
      v111 = *(_OWORD *)(v59 + 49);
      v334 = v59 + 47;
      *(_OWORD *)v341 = *(_OWORD *)(v59 + 47);
      *(_OWORD *)&v341[16] = v111;
      __dst = 0;
      v344 = 0;
      __p = 0;
      v113 = (_BYTE *)v59[51];
      v112 = (_BYTE *)v59[52];
      v114 = v112 - v113;
      if (v112 != v113)
      {
        sub_18F63684C(&__p, v114 >> 3);
        v115 = (char *)__dst;
        memmove(__dst, v113, v114);
        __dst = &v115[8 * (v114 >> 3)];
      }
      v119 = sub_18F6108AC(a4, v107, v108, v109);
      if (v119 <= 0.0)
      {
        if (qword_1EE1720F8 != -1)
          dispatch_once(&qword_1EE1720F8, &unk_1E29909D0);
        v167 = qword_1EE172100;
        if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v167, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[CA metrics] ptsPathLength is zero", buf, 2u);
        }
        v119 = -1.0;
        if (!sub_18F5C4AE0(115, 0))
        {
          v331 = -1.0;
          v332 = -1.0;
LABEL_89:
          if (__p)
          {
            __dst = __p;
            operator delete(__p);
          }
          v170 = (unint64_t *)v64[54];
          v171 = (unint64_t *)v64[55];
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)&buf[16] = 0;
          *(_QWORD *)buf = &buf[8];
          if (v170 == v171)
          {
LABEL_120:
            v184 = 0;
            v185 = 0;
            v186 = 0;
            v187 = 0;
            v188 = 0.0;
            v189 = 0.0;
            v335 = 0.0;
            v337 = 0.0;
            v190 = 0.0;
            while (v185 < objc_msgSend_count(a2, v128, v129, v130))
            {
              v194 = (void *)objc_msgSend_objectAtIndexedSubscript_(a2, v191, v185, v193);
              v198 = v194;
              v199 = *(_QWORD **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v200 = &buf[8];
                do
                {
                  v201 = v199;
                  v202 = v200;
                  v203 = v199[4];
                  if (v203 >= v185)
                    v200 = v199;
                  else
                    ++v199;
                  v199 = (_QWORD *)*v199;
                }
                while (v199);
                if (v200 != &buf[8])
                {
                  if (v203 < v185)
                    v201 = v202;
                  if (v185 >= v201[4])
                  {
                    if (v187)
                    {
                      v204 = (void *)objc_msgSend_timestamp(v194, v195, v196, v197);
                      v208 = objc_msgSend_timestamp(v187, v205, v206, v207);
                      objc_msgSend_timeIntervalSinceDate_(v204, v209, v208, v210);
                      v212 = v337;
                      if (v211 > v337)
                        v212 = v211;
                      v335 = v335 + v211;
                      v337 = v212;
                      if (v211 > 20.0)
                        ++v184;
                    }
                    objc_msgSend_horizontalAccuracy(v198, v195, v196, v197);
                    v188 = v188 + v213;
                    v187 = v198;
                  }
                }
              }
              if (v186)
              {
                v214 = (void *)objc_msgSend_timestamp(v198, v195, v196, v197);
                v218 = objc_msgSend_timestamp(v186, v215, v216, v217);
                objc_msgSend_timeIntervalSinceDate_(v214, v219, v218, v220);
                v190 = v190 + v221;
              }
              objc_msgSend_horizontalAccuracy(v198, v195, v196, v197);
              v189 = v189 + v222;
              ++v185;
              v186 = v198;
            }
            v329 = v64[54];
            v330 = v64[55];
            v328 = objc_msgSend_count(a2, v191, v192, v193);
            v327 = objc_msgSend_count(a2, v223, v224, v225);
            v325 = v188;
            v326 = v119;
            sub_18F6EC574(*(_QWORD **)&buf[8]);
            v324 = sub_18F61099C(a3, v226);
            v232 = 0;
            v233 = 0;
            if (objc_msgSend_count(a3, v227, v228, v229))
            {
              v234 = 0;
              v235 = 0;
              v236 = 0.0;
              v237 = 1.79769313e308;
              v238 = 0.0;
              v239 = 2.22507386e-308;
              v240 = 0.0;
              do
              {
                v241 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v230, v234, v231);
                v245 = (void *)objc_msgSend_deltaPosition_m(v241, v242, v243, v244);
                objc_msgSend_X(v245, v246, v247, v248);
                v250 = v249;
                v254 = (void *)objc_msgSend_deltaPosition_m(v241, v251, v252, v253);
                objc_msgSend_Y(v254, v255, v256, v257);
                v258 = v250;
                *(float *)&v259 = v259;
                *(float *)buf = v258;
                *(_DWORD *)&buf[4] = LODWORD(v259);
                v263 = (void *)objc_msgSend_deltaPosition_m(v241, v260, v261, v262);
                objc_msgSend_Z(v263, v264, v265, v266);
                v240 = v240 + v270;
                if (v240 > v239)
                  v239 = v240;
                if (v240 < v237)
                  v237 = v240;
                if (v234)
                {
                  v271 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v267, v234 - 1, v269);
                  v275 = objc_msgSend_staticFlag(v271, v272, v273, v274) == 1;
                  v279 = (void *)objc_msgSend_cfAbsTimestamp(v241, v276, v277, v278);
                  v283 = objc_msgSend_cfAbsTimestamp(v271, v280, v281, v282);
                  objc_msgSend_timeIntervalSinceDate_(v279, v284, v283, v285);
                  if (v275)
                    v287 = v286;
                  else
                    v287 = -0.0;
                  v238 = v238 + v287;
                  if (v275)
                    v286 = -0.0;
                  v236 = v236 + v286;
                  if (v234 >= 7)
                  {
                    v288 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v267, v234 - 6, v269);
                    v292 = (void *)objc_msgSend_deltaPosition_m(v288, v289, v290, v291);
                    objc_msgSend_X(v292, v293, v294, v295);
                    v297 = v296;
                    v301 = (void *)objc_msgSend_deltaPosition_m(v288, v298, v299, v300);
                    objc_msgSend_Y(v301, v302, v303, v304);
                    *(float *)&v305 = v297;
                    *(float *)&v306 = v306;
                    v339 = (char *)__PAIR64__(LODWORD(v306), v305);
                    sub_18F60F368((float *)&v339, (float *)buf);
                    v308 = fabs(v307);
                    v309 = !v235;
                    v235 = v308 > 1.30899693;
                    v310 = v235 & v309;
                    if (v308 > 2.44346093)
                      v311 = v310;
                    else
                      v311 = 0;
                    v232 += v311;
                    v233 += v310;
                  }
                }
                ++v234;
              }
              while (v234 < objc_msgSend_count(a3, v267, v268, v269));
              v312 = v239 - v237;
            }
            else
            {
              v238 = 0.0;
              v312 = -1.79769313e308;
              v236 = 0.0;
            }
            v313 = (v330 - v329) >> 3;
            v314 = v324 / v326;
            if (v326 <= 0.0)
              v314 = -1.0;
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[16] = sub_18F6EC1D4;
            v346 = (uint64_t)&unk_1E2992B30;
            v361 = v233;
            v362 = v232;
            v347 = v333 / 60.0;
            v348 = v326;
            v349 = v324;
            v350 = v314;
            v351 = v238 / (v238 + v236);
            v352 = v334;
            v353 = v325 / (double)(unint64_t)v313;
            v354 = v189 / (double)(unint64_t)v328;
            v355 = v335 / (double)(unint64_t)(v313 - 1);
            v356 = v337;
            v357 = v190 / (double)(unint64_t)(v327 - 1);
            v358 = v312;
            v359 = v332;
            v360 = v331;
            v363 = v184;
            v364 = 0;
            v365 = 0;
            AnalyticsSendEventLazy();
            v16 = 1;
            goto LABEL_33;
          }
          v172 = 0;
          v173 = &buf[8];
          while (1)
          {
            v174 = *v170;
            v175 = &buf[8];
            if (v173 == &buf[8])
              break;
            v176 = v172;
            v177 = &buf[8];
            if (v172)
            {
              do
              {
                v175 = v176;
                v176 = (_QWORD *)v176[1];
              }
              while (v176);
            }
            else
            {
              do
              {
                v175 = (_QWORD *)*((_QWORD *)v177 + 2);
                v178 = *v175 == (_QWORD)v177;
                v177 = v175;
              }
              while (v178);
            }
            if (v175[4] < v174)
              break;
            v180 = (uint64_t **)&buf[8];
            v179 = (uint64_t **)&buf[8];
            if (!v172)
              goto LABEL_115;
            v181 = v172;
            while (1)
            {
              while (1)
              {
                v179 = (uint64_t **)v181;
                v182 = v181[4];
                if (v182 <= v174)
                  break;
                v181 = *v179;
                v180 = v179;
                if (!*v179)
                  goto LABEL_115;
              }
              if (v182 >= v174)
                break;
              v181 = v179[1];
              if (!v181)
              {
                v180 = v179 + 1;
                goto LABEL_115;
              }
            }
LABEL_118:
            ++v170;
            v64 = v336;
            if (v170 == v171)
              goto LABEL_120;
            v173 = *(_BYTE **)buf;
            v172 = *(_QWORD **)&buf[8];
          }
          if (v172)
            v179 = (uint64_t **)v175;
          else
            v179 = (uint64_t **)&buf[8];
          if (v172)
          {
            v180 = (uint64_t **)(v175 + 1);
          }
          else
          {
            v175 = buf;
            v180 = (uint64_t **)&buf[8];
          }
          if (v175[1])
            goto LABEL_118;
LABEL_115:
          v183 = (uint64_t *)operator new(0x28uLL);
          v183[4] = v174;
          *v183 = 0;
          v183[1] = 0;
          v183[2] = (uint64_t)v179;
          *v180 = v183;
          if (**(_QWORD **)buf)
          {
            *(_QWORD *)buf = **(_QWORD **)buf;
            v183 = *v180;
          }
          sub_18F62A74C(*(uint64_t **)&buf[8], v183);
          ++*(_QWORD *)&buf[16];
          goto LABEL_118;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1EE1720F8 != -1)
          dispatch_once(&qword_1EE1720F8, &unk_1E29909D0);
        LOWORD(v339) = 0;
        v323 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "void CLTrajectorySmoother::computeReconstructedRouteMetrics(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, CLPedestrianRTSSmoother::RTSModelMetrics, double &, double &, double &)", "CoreLocation: %s\n", v323);
        if (v323 != buf)
          free(v323);
        v331 = -1.0;
        v332 = -1.0;
      }
      else
      {
        v339 = (char *)objc_msgSend_firstObject(a2, v116, v117, v118);
        v340 = (char *)objc_msgSend_lastObject(a2, v120, v121, v122);
        v124 = (void *)objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v123, (uint64_t)&v339, 2);
        v131 = sub_18F6108AC(v124, v125, v126, v127);
        v132 = ((_BYTE *)__dst - (_BYTE *)__p) >> 3;
        v133 = v59[54];
        v134 = v59[55] - v133;
        v332 = v131 / v119;
        if (v132 == (v134 >> 3) - 1)
        {
          *(_QWORD *)buf = 0;
          v338 = 0;
          v135 = 0.0;
          if (v134 != 8)
          {
            v136 = 0;
            do
            {
              v137 = (void *)objc_msgSend_objectAtIndexedSubscript_(a2, v128, *(_QWORD *)(v133 + 8 * v136 + 8), v130);
              v140 = (void *)objc_msgSend_objectAtIndexedSubscript_(a2, v138, (*v50)[v136], v139);
              v144 = (void *)objc_msgSend_timestamp(v137, v141, v142, v143);
              objc_msgSend_timeIntervalSinceReferenceDate(v144, v145, v146, v147);
              v149 = v148;
              v153 = (void *)objc_msgSend_timestamp(v140, v150, v151, v152);
              objc_msgSend_timeIntervalSinceReferenceDate(v153, v154, v155, v156);
              sub_18F60EE4C(a4, buf, &v338, v157, v158, v149);
              v159 = v338;
              v161 = (void *)objc_msgSend_subarrayWithRange_(a4, v160, *(uint64_t *)buf, v338 - *(_QWORD *)buf + 1);
              v165 = sub_18F6108AC(v161, v162, v163, v164);
              if (v165 <= 0.0)
                --v132;
              else
                v135 = v135 + *((double *)__p + v136) / v165;
              ++v136;
              *(_QWORD *)buf = v159;
              v133 = v64[54];
            }
            while (v136 < ((v64[55] - v133) >> 3) - 1);
          }
          if (v132)
            v166 = v135 / (double)(unint64_t)v132;
          else
            v166 = -1.0;
          v331 = v166;
          goto LABEL_89;
        }
        if (qword_1EE1720F8 != -1)
          dispatch_once(&qword_1EE1720F8, &unk_1E29909D0);
        v168 = qword_1EE172100;
        if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v168, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[CA metrics] fwdPropEndptError.size != consumedTripLocation.size", buf, 2u);
        }
        v331 = -1.0;
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_89;
        bzero(buf, 0x65CuLL);
        if (qword_1EE1720F8 != -1)
          dispatch_once(&qword_1EE1720F8, &unk_1E29909D0);
        LOWORD(v338) = 0;
        v169 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "void CLTrajectorySmoother::computeReconstructedRouteMetrics(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, CLPedestrianRTSSmoother::RTSModelMetrics, double &, double &, double &)", "CoreLocation: %s\n", v169);
        if (v169 != buf)
          free(v169);
      }
      v64 = v336;
      goto LABEL_89;
    }
    v53 = (_BYTE *)v48[55];
    v54 = v53 - v49;
    v55 = (v53 - v49) >> 3;
    if (v55 >= v46)
    {
      v57 = v49;
      v58 = v339;
    }
    else
    {
      v56 = &v339[8 * v55];
      if (v53 != v49)
      {
        memmove(v49, v339, v54);
        v49 = (char *)v336[55];
      }
      v38 = v37 - v56;
      if (v37 == v56)
        goto LABEL_46;
      v57 = v49;
      v58 = v56;
    }
    memmove(v57, v58, v38);
LABEL_46:
    v59 = v336;
    v50 = v45;
    goto LABEL_56;
  }
  if (qword_1EE1720F8 != -1)
    dispatch_once(&qword_1EE1720F8, &unk_1E29909D0);
  v17 = qword_1EE172100;
  if (os_log_type_enabled((os_log_t)qword_1EE172100, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&buf[4] = a2 == 0;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = a3 == 0;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = a4 == 0;
    _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothing] Returned false. isTripLocationsNil, %{public}u, isInertialOdometryDataNil, %{public}u, isReconstructedLocationsNil, %{public}u.", buf, 0x14u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720F8 != -1)
      dispatch_once(&qword_1EE1720F8, &unk_1E29909D0);
    *(_DWORD *)v341 = 67240704;
    *(_DWORD *)&v341[4] = a2 == 0;
    *(_WORD *)&v341[8] = 1026;
    *(_DWORD *)&v341[10] = a3 == 0;
    *(_WORD *)&v341[14] = 1026;
    *(_DWORD *)&v341[16] = a4 == 0;
    v315 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothing(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, double &)", "CoreLocation: %s\n", v315);
    if (v315 != buf)
      free(v315);
  }
  return 0;
}

void sub_18F6EC148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F6EC1D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  _QWORD v70[21];
  _QWORD v71[22];

  v71[21] = *MEMORY[0x1E0C80C00];
  v70[0] = CFSTR("Timespan");
  v71[0] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], a2, a3, a4, *(double *)(a1 + 32));
  v70[1] = CFSTR("NumberOfTurns");
  v71[1] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v5, *(unsigned int *)(a1 + 144), v6);
  v70[2] = CFSTR("NumberOfSuddenDirectionChanges");
  v71[2] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v7, *(unsigned int *)(a1 + 148), v8);
  v70[3] = CFSTR("NumberOfSegments");
  v71[3] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v9, *(unsigned int *)(a1 + 152), v10);
  v71[4] = &unk_1E29B5C20;
  v70[4] = CFSTR("NumberOfRoutes");
  v70[5] = CFSTR("PTSPathLength");
  if (*(double *)(a1 + 40) <= 0.0)
    v14 = objc_msgSend_null(MEMORY[0x1E0C99E38], v11, v12, v13);
  else
    v14 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v11, v12, v13);
  v71[5] = v14;
  v70[6] = CFSTR("IOPathLength");
  v71[6] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v15, v16, v17, *(double *)(a1 + 48));
  v70[7] = CFSTR("IOPathLengthOverPTSPathLength");
  if (*(double *)(a1 + 56) <= 0.0)
    v21 = objc_msgSend_null(MEMORY[0x1E0C99E38], v18, v19, v20);
  else
    v21 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v18, v19, v20);
  v71[7] = v21;
  v70[8] = CFSTR("PercentTimeIOStatic");
  v71[8] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v22, v23, v24, *(double *)(a1 + 64));
  v70[9] = CFSTR("AvgFrameAlignmentConsistency");
  v25 = (void *)MEMORY[0x1E0CB37E8];
  v26 = *(_QWORD *)(a1 + 72);
  v27 = *(_QWORD *)v26;
  v28 = 0.0;
  if (*(_QWORD *)v26)
    v28 = (*(double *)(v26 + 8) * *(double *)(v26 + 8) + *(double *)(v26 + 16) * *(double *)(v26 + 16))
        / (double)(v27 * v27);
  v32 = log(fmax(v28, 0.00000011920929));
  if (v32 >= 0.0)
    v33 = 0.0;
  else
    v33 = -v32;
  v34 = sqrt(v33);
  if (v27 < 2)
    v34 = 0.0;
  v71[9] = objc_msgSend_numberWithDouble_(v25, v29, v30, v31, v34);
  v70[10] = CFSTR("MaxFrameAlignmentConsistency");
  v71[10] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v35, v36, v37, *(double *)(*(_QWORD *)(a1 + 72) + 24));
  v70[11] = CFSTR("AvgConsumedGNSSUncertainty");
  v71[11] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v38, v39, v40, *(double *)(a1 + 80));
  v70[12] = CFSTR("AvgReceivedGNSSUncertainty");
  v71[12] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v41, v42, v43, *(double *)(a1 + 88));
  v70[13] = CFSTR("AvgPeriodConsumedGNSS");
  v71[13] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v44, v45, v46, *(double *)(a1 + 96));
  v70[14] = CFSTR("MaxPeriodConsumedGNSS");
  v71[14] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v47, v48, v49, *(double *)(a1 + 104));
  v70[15] = CFSTR("AvgPeriodReceivedGNSS");
  v71[15] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v50, v51, v52, *(double *)(a1 + 112));
  v70[16] = CFSTR("DeltaElevation");
  v71[16] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v53, v54, v55, *(double *)(a1 + 120));
  v70[17] = CFSTR("Straightness");
  if (*(double *)(a1 + 128) <= 0.0)
    v59 = objc_msgSend_null(MEMORY[0x1E0C99E38], v56, v57, v58);
  else
    v59 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v56, v57, v58);
  v71[17] = v59;
  v70[18] = CFSTR("AvgForwardPropEndpointDistanceError");
  if (*(double *)(a1 + 136) <= 0.0)
    v63 = objc_msgSend_null(MEMORY[0x1E0C99E38], v60, v61, v62);
  else
    v63 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v60, v61, v62);
  v71[18] = v63;
  v70[19] = CFSTR("RansacNumberOfIterations");
  v71[19] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v64, *(unsigned int *)(a1 + 156), v65);
  v70[20] = CFSTR("DidUseRansac");
  v71[20] = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v66, *(unsigned __int8 *)(a1 + 160), v67);
  return objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v68, (uint64_t)v71, (uint64_t)v70, 21);
}

os_log_t sub_18F6EC548()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "PedTrajectorySmoothing");
  qword_1EE172100 = (uint64_t)result;
  return result;
}

void sub_18F6EC574(_QWORD *a1)
{
  if (a1)
  {
    sub_18F6EC574(*a1);
    sub_18F6EC574(a1[1]);
    operator delete(a1);
  }
}

void sub_18F6EDAB8(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  uint8_t buf[1640];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172178 != -1)
    dispatch_once(&qword_1EE172178, &unk_1E298DA30);
  v2 = qword_1EE172180;
  if (os_log_type_enabled((os_log_t)qword_1EE172180, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "CLHarvester invalidation handler", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172178 != -1)
      dispatch_once(&qword_1EE172178, &unk_1E298DA30);
    v3 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLHarvester connect]_block_invoke", "CoreLocation: %s\n", v3);
    if (v3 != (char *)buf)
      free(v3);
  }

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = 0;
}

void sub_18F6EDC5C()
{
  NSObject *v0;
  char *v1;
  uint8_t buf[1640];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172178 != -1)
    dispatch_once(&qword_1EE172178, &unk_1E298DA30);
  v0 = qword_1EE172180;
  if (os_log_type_enabled((os_log_t)qword_1EE172180, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_ERROR, "CLHarvester interruption handler", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172178 != -1)
      dispatch_once(&qword_1EE172178, &unk_1E298DA30);
    v1 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "-[CLHarvester connect]_block_invoke", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

void sub_18F6EDEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F6EDEFC()
{
  NSObject *v0;
  char *v1;
  uint8_t buf[1640];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172178 != -1)
    dispatch_once(&qword_1EE172178, &unk_1E298DA30);
  v0 = qword_1EE172180;
  if (os_log_type_enabled((os_log_t)qword_1EE172180, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_DEFAULT, "CLHarvester synchronous remote proxy invalidated", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172178 != -1)
      dispatch_once(&qword_1EE172178, &unk_1E298DA30);
    v1 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLHarvester currentStateDictionary]_block_invoke", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

id sub_18F6EE080(uint64_t a1, void *a2)
{
  NSObject *v4;
  id result;
  char *v6;
  uint8_t buf[1640];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172178 != -1)
    dispatch_once(&qword_1EE172178, &unk_1E298DA30);
  v4 = qword_1EE172180;
  if (os_log_type_enabled((os_log_t)qword_1EE172180, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEFAULT, "CLHarvester fetchState reply block called", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172178 != -1)
      dispatch_once(&qword_1EE172178, &unk_1E298DA30);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLHarvester currentStateDictionary]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  result = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  return result;
}

os_log_t sub_18F6EE224()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Harvester");
  qword_1EE172180 = (uint64_t)result;
  return result;
}

BOOL sub_18F6EE974(uint64_t a1, uint64_t *a2, double *a3, double *a4, uint64_t *a5)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double *v20;
  void *v21;
  NSObject *v22;
  dispatch_time_t v23;
  intptr_t v24;
  NSObject *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  _BOOL4 v31;
  const char *v32;
  double *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  void *v39;
  const char *v40;
  uint64_t j;
  void *v42;
  int v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  unint64_t k;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  double *v82;
  double v83;
  double v84;
  double v85;
  double v86;
  uint64_t *v87;
  double v88;
  double v89;
  unint64_t v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  _BOOL4 v98;
  void *context;
  id obj;
  uint64_t v101;
  uint64_t v102;
  uint64_t i;
  id v104;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _QWORD v117[5];
  double v118[8];
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t);
  void (*v127)(uint64_t);
  dispatch_group_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  char v132;
  _BYTE v133[128];
  _BYTE v134[128];
  _BYTE v135[24];
  double *v136;
  int v137;
  uint64_t v138;
  uint8_t buf[16];
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  context = (void *)MEMORY[0x1940032C4]();
  if (objc_msgSend_allowNetworkTileLoad(*(void **)(a1 + 2600), v9, v10, v11)
    && sub_18F6F0624((_QWORD *)a1))
  {
    objc_msgSend_setAllowNetworkTileLoad_(*(void **)(a1 + 2600), v12, 0, v14);
  }
  v15 = *a3;
  v16 = *a4;
  v17 = objc_msgSend_array(MEMORY[0x1E0C99DE8], v12, v13, v14);
  v18 = MEMORY[0x1E0C809B0];
  v117[0] = MEMORY[0x1E0C809B0];
  v117[1] = 3221225472;
  v117[2] = sub_18F6EF47C;
  v117[3] = &unk_1E2992B78;
  obj = (id)v17;
  v117[4] = v17;
  v19 = *a5;
  v20 = (double *)operator new(0x30uLL);
  *(_QWORD *)v20 = &off_1E298DD98;
  *((_QWORD *)v20 + 1) = a1;
  v20[2] = v15;
  v20[3] = v16;
  *((_QWORD *)v20 + 4) = v19;
  *((_QWORD *)v20 + 5) = v117;
  v136 = v20;
  v129 = 0;
  v130 = &v129;
  v131 = 0x2020000000;
  v132 = 0;
  v123 = 0;
  v124 = &v123;
  v125 = 0x3052000000;
  v126 = sub_18F5CD85C;
  v127 = sub_18F5CD7C8;
  v128 = 0;
  v128 = dispatch_group_create();
  v119 = 0;
  v120 = &v119;
  v121 = 0x2020000000;
  v122 = 0;
  v118[0] = v18;
  *(_QWORD *)&v118[1] = 3221225472;
  *(_QWORD *)&v118[2] = sub_18F6EF520;
  *(_QWORD *)&v118[3] = &unk_1E2991CF0;
  *(_QWORD *)&v118[4] = &v129;
  *(_QWORD *)&v118[5] = &v123;
  *(_QWORD *)&v118[6] = &v119;
  dispatch_group_enter((dispatch_group_t)v124[5]);
  *(_QWORD *)buf = v118;
  if (!v136)
    sub_18F64F8F4();
  v21 = (void *)(*(uint64_t (**)(double *, uint8_t *))(*(_QWORD *)v136 + 48))(v136, buf);
  v22 = v124[5];
  v23 = dispatch_time(0, 100000000);
  v24 = dispatch_group_wait(v22, v23);
  v120[3] = v24;
  if (v24)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990A50);
    v25 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v26 = v120[3];
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v26;
      _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_DEBUG, "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990A50);
      v94 = v120[3];
      v137 = 134349056;
      v138 = v94;
      v95 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "CoreLocation: %s\n", v95);
      if (v95 != (char *)buf)
        free(v95);
    }
    objc_msgSend_cancel(v21, v27, v28, v29);
  }
  else if (v124[5])
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990A50);
    v30 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v30, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990A50);
      LOWORD(v137) = 0;
      v97 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "CoreLocation: %s\n", v97);
      if (v97 != (char *)buf)
        free(v97);
    }

    v124[5] = 0;
  }
  if (v120[3])
    v31 = 0;
  else
    v31 = *((_BYTE *)v130 + 24) == 0;
  _Block_object_dispose(&v119, 8);
  _Block_object_dispose(&v123, 8);
  _Block_object_dispose(&v129, 8);
  v33 = v136;
  if (v136 == (double *)v135)
  {
    v34 = 4;
    v33 = (double *)v135;
  }
  else
  {
    if (!v136)
      goto LABEL_27;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_27:
  v98 = v31;
  if (v31)
  {
    *(_DWORD *)(a1 + 40) = 0;
    v113 = 0u;
    v114 = 0u;
    v115 = 0u;
    v116 = 0u;
    v102 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v32, (uint64_t)&v113, (uint64_t)v134, 16);
    if (v102)
    {
      v101 = *(_QWORD *)v114;
      v38 = (double *)(a1 + 56);
      do
      {
        for (i = 0; i != v102; ++i)
        {
          if (*(_QWORD *)v114 != v101)
            objc_enumerationMutation(obj);
          v39 = *(void **)(*((_QWORD *)&v113 + 1) + 8 * i);
          v109 = 0u;
          v110 = 0u;
          v111 = 0u;
          v112 = 0u;
          v108 = v39;
          v104 = (id)objc_msgSend_sections(v39, v35, v36, v37);
          v107 = objc_msgSend_countByEnumeratingWithState_objects_count_(v104, v40, (uint64_t)&v109, (uint64_t)v133, 16);
          if (v107)
          {
            v106 = *(_QWORD *)v110;
            do
            {
              for (j = 0; j != v107; ++j)
              {
                if (*(_QWORD *)v110 != v106)
                  objc_enumerationMutation(v104);
                v42 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * j);
                v141 = 0u;
                v142 = 0u;
                *(_OWORD *)buf = 0u;
                v140 = 0u;
                v43 = objc_msgSend_tileSetStyle(v108, v35, v36, v37);
                if (!v43)
                {
                  objc_msgSend_height(v42, v44, v45, v46);
LABEL_44:
                  *(double *)buf = v56;
                  goto LABEL_45;
                }
                if (v43 == 1)
                {
                  if (objc_msgSend_hasTerrainElevation(v108, v44, v45, v46))
                  {
                    objc_msgSend_topHeight(v42, v47, v48, v49);
                    v51 = v50;
                    objc_msgSend_terrainElevation(v42, v52, v53, v54);
                    v56 = v51 - v55;
                  }
                  else
                  {
                    objc_msgSend_topHeight(v42, v47, v48, v49);
                  }
                  goto LABEL_44;
                }
LABEL_45:
                for (k = 0; objc_msgSend_coordinateCount(v42, v44, v45, v46) > k; ++k)
                {
                  v123 = 0;
                  v129 = 0;
                  v61 = *a3;
                  v62 = *a4;
                  v63 = *(double *)(objc_msgSend_coordinates(v42, v58, v59, v60) + 16 * k);
                  v67 = objc_msgSend_coordinates(v42, v64, v65, v66);
                  sub_18F5BD37C(v38, (double *)&v123, (double *)&v129, v118, v61, v62, 0.0, v63, *(double *)(v67 + 16 * k + 8), 0.0);
                  v68 = v129;
                  v69 = v123;
                  v70 = v140;
                  if ((unint64_t)v140 >= *((_QWORD *)&v140 + 1))
                  {
                    v72 = (uint64_t)(v140 - *(_QWORD *)&buf[8]) >> 4;
                    v73 = v72 + 1;
                    if ((unint64_t)(v72 + 1) >> 60)
                      sub_18F5F7864();
                    v74 = *((_QWORD *)&v140 + 1) - *(_QWORD *)&buf[8];
                    if ((uint64_t)(*((_QWORD *)&v140 + 1) - *(_QWORD *)&buf[8]) >> 3 > v73)
                      v73 = v74 >> 3;
                    if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
                      v75 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v75 = v73;
                    v76 = (char *)sub_18F62AB64((uint64_t)&v140 + 8, v75);
                    v77 = &v76[16 * v72];
                    *(_QWORD *)v77 = v68;
                    *((_QWORD *)v77 + 1) = v69;
                    v78 = (_QWORD *)v140;
                    v79 = *(_QWORD **)&buf[8];
                    v80 = v77;
                    while (v78 != v79)
                    {
                      v81 = *(v78 - 2);
                      v78 -= 2;
                      *((_QWORD *)v80 - 2) = v81;
                      v80 -= 16;
                      *((_QWORD *)v80 + 1) = v78[1];
                    }
                    v71 = v77 + 16;
                    *(_QWORD *)&buf[8] = v80;
                    *(_QWORD *)&v140 = v77 + 16;
                    *((_QWORD *)&v140 + 1) = &v76[16 * (_QWORD)v44];
                    if (v79)
                      operator delete(v79);
                  }
                  else
                  {
                    *(_QWORD *)v140 = v129;
                    *(_QWORD *)(v70 + 8) = v69;
                    v71 = (_QWORD *)(v70 + 16);
                  }
                  *(_QWORD *)&v140 = v71;
                }
                v82 = *(double **)&buf[8];
                if (*(_QWORD *)&buf[8] == (_QWORD)v140)
                {
                  v83 = 0.0;
                  v84 = 0.0;
                  v85 = 0.0;
                  v86 = 0.0;
                  v87 = a2;
                }
                else
                {
                  v83 = **(double **)&buf[8];
                  v84 = *(double *)(*(_QWORD *)&buf[8] + 8);
                  v85 = **(double **)&buf[8];
                  v86 = v84;
                  v87 = a2;
                  do
                  {
                    v88 = *v82;
                    v89 = v82[1];
                    v82 += 2;
                    if (v88 < v83)
                      v83 = v88;
                    if (v89 < v84)
                      v84 = v89;
                    if (v85 < v88)
                      v85 = v88;
                    if (v86 < v89)
                      v86 = v89;
                  }
                  while (v82 != (double *)v140);
                }
                *(double *)&v141 = v83;
                *((double *)&v141 + 1) = v84;
                *(double *)&v142 = v85;
                *((double *)&v142 + 1) = v86;
                v90 = v87[1];
                if (v90 >= v87[2])
                {
                  v91 = sub_18F62CC2C(v87, (uint64_t)buf);
                }
                else
                {
                  *(_QWORD *)v90 = *(_QWORD *)buf;
                  *(_QWORD *)(v90 + 16) = 0;
                  *(_QWORD *)(v90 + 24) = 0;
                  *(_QWORD *)(v90 + 8) = 0;
                  sub_18F62CD7C((char *)(v90 + 8), *(_QWORD **)&buf[8], (_QWORD *)v140, (uint64_t)(v140 - *(_QWORD *)&buf[8]) >> 4);
                  *(_OWORD *)(v90 + 32) = v141;
                  *(_OWORD *)(v90 + 48) = v142;
                  v91 = v90 + 64;
                  v87[1] = v90 + 64;
                }
                v87[1] = v91;
                if (*(_QWORD *)&buf[8])
                {
                  *(_QWORD *)&v140 = *(_QWORD *)&buf[8];
                  operator delete(*(void **)&buf[8]);
                }
              }
              v107 = objc_msgSend_countByEnumeratingWithState_objects_count_(v104, v35, (uint64_t)&v109, (uint64_t)v133, 16);
            }
            while (v107);
          }
        }
        v102 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v35, (uint64_t)&v113, (uint64_t)v134, 16);
      }
      while (v102);
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 40);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990A50);
    v92 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v92, OS_LOG_TYPE_ERROR, "CLMM,query failed (buildingsWithinDistance)", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990A50);
      LOWORD(v118[0]) = 0;
      v96 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoFeatureAccess3dBuildingGeometry::buildingsWithinDistance(ExtrudedFootprintsList &, const double &, const double &, const double &)", "CoreLocation: %s\n", v96);
      if (v96 != (char *)buf)
        free(v96);
    }
  }
  objc_autoreleasePoolPop(context);
  return v98;
}

void sub_18F6EF3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  unint64_t *v64;
  uint64_t v65;

  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a63, 8);
  v64 = (unint64_t *)STACK[0x2E8];
  if ((unint64_t *)STACK[0x2E8] == &STACK[0x2D0])
  {
    v65 = 4;
    v64 = &STACK[0x2D0];
  }
  else
  {
    if (!v64)
      goto LABEL_6;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_18F6EF47C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  const char *v11;
  uint64_t v12;

  v6 = (void *)objc_msgSend_sections(a2, (const char *)a2, a3, a4);
  result = objc_msgSend_count(v6, v7, v8, v9);
  if (result)
    return objc_msgSend_addObject_(*(void **)(a1 + 32), v11, (uint64_t)a2, v12);
  return result;
}

BOOL sub_18F6EF4C0(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  double v8;

  v8 = a4;
  v4 = *(_QWORD *)(a3 + 56);
  v6 = *(_QWORD *)(a3 + 64);
  v7 = v4;
  return sub_18F6EE974(a1, a2, (double *)&v7, (double *)&v6, (uint64_t *)&v8);
}

os_log_t sub_18F6EF4F4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

void sub_18F6EF520(_QWORD *a1, void *a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990A50);
    v4 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349571;
      v33 = objc_msgSend_code(a2, v5, v6, v7);
      v34 = 2114;
      v35 = objc_msgSend_domain(a2, v8, v9, v10);
      v36 = 2113;
      v37 = objc_msgSend_localizedDescription(a2, v11, v12, v13);
      _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEFAULT, "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990A50);
      objc_msgSend_code(a2, v19, v20, v21);
      objc_msgSend_domain(a2, v22, v23, v24);
      objc_msgSend_localizedDescription(a2, v25, v26, v27);
      v28 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v28);
      if (v28 != (char *)buf)
        free(v28);
    }
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990A50);
    v14 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
      v16 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
      *(_DWORD *)buf = 134349312;
      v33 = v15;
      v34 = 1026;
      LODWORD(v35) = v16;
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_DEBUG, "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d", buf, 0x12u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990A50);
      v29 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
    dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1[5] + 8) + 40));
  }
  if (*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990A50);
      v17 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup when time-out has happened", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990A50);
        v30 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v30);
        if (v30 != (char *)buf)
          free(v30);
      }

      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = 0;
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990A50);
      v18 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v18, OS_LOG_TYPE_ERROR, "CLMM,dispatchGroup is unexpectedly nil", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990A50);
        v31 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v31);
        if (v31 != (char *)buf)
          free(v31);
      }
    }
  }
}

void sub_18F6EFB90()
{
  JUMPOUT(0x194002D30);
}

__n128 sub_18F6EFBA4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E298DD98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_18F6EFBEC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E298DD98;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_18F6EFC1C(uint64_t a1, const char *a2)
{
  return objc_msgSend_findBuildingsNear_radius_tileSetStyle_handler_completionHandler_(*(void **)(*(_QWORD *)(a1 + 8) + 2600), a2, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 2648), *(_QWORD *)(a1 + 40), *(_QWORD *)a2, *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)(a1 + 32));
}

uint64_t sub_18F6EFC40(uint64_t a1, uint64_t a2)
{
  if (sub_18F64FAAC(a2, (uint64_t)&unk_1E298DBD0))
    return a1 + 8;
  else
    return 0;
}

void *sub_18F6EFC7C()
{
  return &unk_1E298DBD0;
}

uint64_t sub_18F6EFC88(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E298E8A8;
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_18F775AA0;
  *(_QWORD *)(a1 + 64) = 0x415854A640000000;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0x3FF0000000000000;
  v5 = 5489;
  v6 = 1;
  v7 = 25;
  *(_DWORD *)(a1 + 96) = 5489;
  do
  {
    v8 = 1812433253 * (v5 ^ (v5 >> 30));
    v5 = v8 + v6;
    *(_DWORD *)(a1 + 4 * v7) = v7 + v8 - 24;
    ++v6;
    ++v7;
  }
  while (v7 != 648);
  v9 = 0;
  *(_QWORD *)(a1 + 2632) = 0;
  *(_QWORD *)(a1 + 2624) = 0;
  *(_QWORD *)(a1 + 2592) = 0;
  *(_QWORD *)(a1 + 2608) = 0;
  *(_QWORD *)(a1 + 2600) = 0;
  *(_QWORD *)(a1 + 2616) = a1 + 2624;
  *(_QWORD *)(a1 + 2640) = 0xBFF0000000000000;
  v10 = 1;
  v11 = 25;
  *(_DWORD *)(a1 + 96) = 0;
  do
  {
    v12 = 1812433253 * (v9 ^ (v9 >> 30));
    v9 = v12 + v10;
    *(_DWORD *)(a1 + 4 * v11) = v11 + v12 - 24;
    ++v10;
    ++v11;
  }
  while (v11 != 648);
  *(_QWORD *)(a1 + 2592) = 0;
  sub_18F68F618(a1, a2, a3, a4);
  return a1;
}

void sub_18F6EFDA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  char **v3;

  sub_18F6F1E08(v2, *v3);
  sub_18F5D6004(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6EFDC4(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  char *v11;
  uint8_t buf[1640];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E298E8A8;
  if (!*(_BYTE *)(a1 + 33))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992B98);
    v2 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "CLMM,CLGCZ,destroy geocodec malloc zone,~CLGeoMapFeatureAccessGeometry()", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2992B98);
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "virtual CLMapGeometry::~CLMapGeometry()", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      sub_18F6F178C(v6);
    v7 = *(void **)(a1 + 2600);
    if (v7)
      objc_msgSend_clearAllTiles(v7, v3, v4, v5);
    v8 = *(void **)(a1 + 2608);
    if (v8)
    {

      *(_QWORD *)(a1 + 2608) = 0;
    }
    v9 = *(void **)(a1 + 2600);
    if (v9)
    {

      *(_QWORD *)(a1 + 2600) = 0;
    }
    GEOResetGeoCodecsAllocator();
  }
  sub_18F6F1E08(a1 + 2616, *(char **)(a1 + 2624));
  sub_18F5D6004(a1 + 16);
  return a1;
}

void sub_18F6EFFBC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_18F5D57A8(a1);
}

void sub_18F6EFFD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  NSObject *v17;
  char *v18;
  uint8_t buf[4];
  _QWORD *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 32) = 1;
  v3 = *a2;
  if (*a2)
  {
    *(_BYTE *)(a1 + 33) = 1;
    *(_BYTE *)(a1 + 34) = *(_BYTE *)(v3 + 169);
    v4 = a2[1];
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = *(std::__shared_weak_count **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 24) = v4;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992B98);
    v10 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(a1 + 16);
      v12 = (_QWORD *)(v11 + 128);
      if (*(char *)(v11 + 151) < 0)
        v12 = (_QWORD *)*v12;
      v13 = *(unsigned __int8 *)(v11 + 169);
      v14 = *(unsigned __int8 *)(v11 + 216);
      v15 = *(unsigned __int8 *)(v11 + 192);
      *(_DWORD *)buf = 136446978;
      v20 = v12;
      v21 = 1026;
      v22 = v13;
      v23 = 1026;
      v24 = v14;
      v25 = 1026;
      v26 = v15;
      _os_log_impl(&dword_18F5B3000, v10, OS_LOG_TYPE_DEFAULT, "CLMM,%{public}s,referenced maps buffer,xpc,%{public}d,waitForQueryComplete,%{public}d,allowNetworkTileDownload,%{public}d", buf, 0x1Eu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2992B98);
      v16 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLMapGeometry::initializeWithRoadBufferPointer(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992B98);
    v17 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_ERROR, "CLMM,RoadGeometry pointer provided is nullptr, using maps API in process", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2992B98);
      v18 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "void CLMapGeometry::initializeWithRoadBufferPointer(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
    *(_WORD *)(a1 + 33) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
}

double sub_18F6F03A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  std::string __p;

  v4 = *a2;
  if (*(char *)(*a2 + 71) < 0)
    sub_18F5C6990(&__p, *(void **)(v4 + 48), *(_QWORD *)(v4 + 56));
  else
    __p = *(std::string *)(v4 + 48);
  std::string::operator=((std::string *)(a1 + 128), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = *a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)*a2;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(v5 + 20);
  *(_OWORD *)(a1 + 152) = *((_OWORD *)a2 + 2);
  result = *((float *)a2 + 6);
  *(double *)(a1 + 168) = result;
  return result;
}

void sub_18F6F0440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F6F045C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  char *v5;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2992B98);
  v2 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 36);
    v4 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67240448;
    v7 = v3;
    v8 = 1026;
    v9 = v4;
    _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEBUG, "CLMM,MapsAPICallCount,%{public}d,MapsAPIQueryContinuousFailCount,%{public}d", buf, 0xEu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992B98);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLMapGeometry::logMapsAPICallCount() const", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
}

uint64_t sub_18F6F0624(_QWORD *a1)
{
  uint64_t v2;
  int *v3;
  int v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  NSObject *v9;
  int v10;
  int v11;
  const char *v12;
  uint64_t result;
  char *v14;
  NSObject *v15;
  int v16;
  int v17;
  const char *v18;
  char *v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  double v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a1 + 33) && (v2 = a1[2]) != 0)
    v3 = (int *)(v2 + 124);
  else
    v3 = (int *)(a1 + 5);
  v4 = *v3;
  if (*v3 < 6)
    goto LABEL_9;
  v5 = *((double *)a1 + 6);
  if (v5 < 0.0)
  {
    v6 = mach_continuous_time();
    v5 = sub_18F6BDF00(v6);
    *((double *)a1 + 6) = v5;
  }
  v7 = mach_continuous_time();
  v8 = vabdd_f64(v5, sub_18F6BDF00(v7));
  if (v8 < 60.0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992B98);
    v15 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
      v17 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
      v18 = "road";
      *(_DWORD *)buf = 67240962;
      v21 = v16;
      v22 = 2082;
      if (v17)
        v18 = "building";
      v23 = v18;
      v24 = 1026;
      v25 = v4;
      v26 = 2050;
      v27 = v8;
      _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_DEBUG, "CLMM,shouldBackOffFromNetworkAccess,1,geometryType,%{public}d,type,%{public}s,failCount,%{public}d,timeSinceLastFail,%{public}.1lf", buf, 0x22u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2992B98);
      (*(void (**)(_QWORD *))(*a1 + 16))(a1);
      (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLMapGeometry::shouldBackOffFromNetworkAccess()", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
    return 1;
  }
  else
  {
LABEL_9:
    a1[6] = 0xBFF0000000000000;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992B98);
    v9 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
      v12 = "road";
      *(_DWORD *)buf = 67240706;
      v21 = v10;
      if (v11)
        v12 = "building";
      v22 = 2082;
      v23 = v12;
      v24 = 1026;
      v25 = v4;
      _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_DEBUG, "CLMM,shouldBackOffFromNetworkAccess,0,geometryType,%{public}d,type,%{public}s,failCount,%{public}d", buf, 0x18u);
    }
    result = sub_18F5C4AE0(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2992B98);
      (*(void (**)(_QWORD *))(*a1 + 16))(a1);
      (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLMapGeometry::shouldBackOffFromNetworkAccess()", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
      return 0;
    }
  }
  return result;
}

uint64_t sub_18F6F0B04(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)result;
  if (*(_BYTE *)(result + 33))
  {
    v5 = *(_QWORD *)(result + 16);
    if (v5)
      *(_BYTE *)(v5 + 192) = (_BYTE)a2;
  }
  else
  {
    result = *(_QWORD *)(result + 2600);
    if (result)
    {
      if ((_DWORD)a2)
      {
        v6 = sub_18F6F0624(v4) ^ 1;
        result = v4[325];
      }
      else
      {
        v6 = 0;
      }
      return objc_msgSend_setAllowNetworkTileLoad_((void *)result, a2, v6, a4);
    }
  }
  return result;
}

uint64_t sub_18F6F0B68(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, double *a5, int a6)
{
  uint64_t v10;
  double v11;
  double v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  char v20;
  NSObject *v21;
  std::string *v22;
  NSObject *v23;
  uint64_t v24;
  double *v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  BOOL v38;
  double v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t result;
  std::string *v43;
  uint64_t v44;
  double *v45;
  double *v46;
  double v47;
  int v48;
  uint64_t v49;
  double v50;
  NSObject *v51;
  double *v52;
  double v53;
  double *v54;
  double v55;
  double v56;
  long double v57;
  long double v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double *v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  NSObject *v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double __y[2];
  std::string buf[68];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (!a6)
    return 0;
  v10 = 8 * a6;
  v11 = 0.0;
  do
  {
    v12 = *a5++;
    v11 = v11 + v12;
    v10 -= 8;
  }
  while (v10);
  v14 = *a3;
  v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = v11 / (double)a6;
  if (!v14)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992B98);
    v21 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_18F5B3000, v21, OS_LOG_TYPE_ERROR, "CLMM, NULL road", (uint8_t *)buf, 2u);
    }
    v19 = 0.0;
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_36;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
LABEL_115:
      dispatch_once(&qword_1EE172158, &unk_1E2992B98);
    goto LABEL_17;
  }
  v18 = (*(_QWORD *)(v14 + 144) - *(_QWORD *)(v14 + 136)) >> 4;
  if ((int)v18 <= 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992B98);
    v23 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_18F5B3000, v23, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", (uint8_t *)buf, 2u);
    }
    v19 = 0.0;
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_36;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_112;
    goto LABEL_116;
  }
  v19 = 0.0;
  if ((_DWORD)v18 == 1)
  {
    v20 = 1;
    goto LABEL_37;
  }
  sub_18F7047B4(v14);
  v24 = (uint64_t)(*(_QWORD *)(v14 + 168) - *(_QWORD *)(v14 + 160)) >> 3;
  if (v24 != (_DWORD)v18 - 1)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992B98);
    v35 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_18F5B3000, v35, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", (uint8_t *)buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_36;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_112;
    goto LABEL_116;
  }
  sub_18F7047B4(v14);
  v25 = (double *)(a1 + 56);
  if (v17 < 0.000001)
  {
    v26 = *(double **)(v14 + 136);
    v28 = *v26;
    v27 = v26[1];
    v29 = v26[2];
    v30 = v26[3];
    buf[0].__r_.__value_.__r.__words[0] = 0;
    __y[0] = 0.0;
    v31 = v25;
    v32 = v28;
    v33 = v27;
LABEL_28:
    sub_18F5BD37C(v31, (double *)buf, __y, &v77, v32, v33, 0.0, v29, v30, 0.0);
    v34 = atan2(__y[0], *(long double *)&buf[0].__r_.__value_.__l.__data_);
    if (v34 < 0.0)
      v34 = v34 + 6.28318531;
    v19 = v34 * 57.2957795;
LABEL_83:
    v20 = 1;
    if (!v13)
      goto LABEL_42;
    goto LABEL_38;
  }
  if (v17 >= 0.999999)
  {
    v52 = (double *)(*(_QWORD *)(v14 + 136) + 16 * v24);
    v28 = *v52;
    v27 = v52[1];
    v53 = sub_18F6F2084(v25, *(v52 - 2), *(v52 - 1), *v52, v27);
LABEL_82:
    v19 = v53;
    goto LABEL_83;
  }
  v45 = *(double **)(v14 + 160);
  v46 = *(double **)(v14 + 168);
  if (v45 == v46)
  {
LABEL_74:
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992B98);
    v51 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_18F5B3000, v51, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", (uint8_t *)buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_36;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_112;
LABEL_116:
    dispatch_once(&qword_1EE172158, &unk_1E2992B98);
LABEL_112:
    LOWORD(__y[0]) = 0;
    v22 = (std::string *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", (const char *)v22);
LABEL_113:
    if (v22 != buf)
      free(v22);
    goto LABEL_36;
  }
  v47 = 0.0;
  v48 = 2;
  v49 = 24;
  while (1)
  {
    v50 = *v45 / *(double *)(v14 + 40);
    if (vabdd_f64(v17, v47 + v50) < 0.000001)
      break;
    if (v47 + v50 > v17)
    {
      v65 = (double *)(*(_QWORD *)(v14 + 136) + v49);
      v66 = *(v65 - 2);
      v67 = *(v65 - 3);
      v68 = *v65;
      v69 = v66 + 360.0;
      if (v66 >= 0.0)
        v69 = *(v65 - 2);
      v70 = v68 + 360.0;
      if (v68 >= 0.0)
        v70 = *v65;
      v71 = v70 - v69;
      if (v71 <= 180.0)
      {
        if (v71 < -180.0)
          v71 = v71 + 360.0;
      }
      else
      {
        v71 = v71 + -360.0;
      }
      v75 = *(v65 - 1) - v67;
      v76 = *(v65 - 1);
      v73 = (v17 - v47) / v50;
      v74 = fmod(v66 + v71 * v73, 360.0);
      v27 = v74;
      if (v74 <= -180.0)
      {
        v27 = v74 + 360.0;
      }
      else if (v74 > 180.0)
      {
        v27 = v74 + -360.0;
      }
      v29 = v76;
      v28 = v67 + v75 * v73;
      buf[0].__r_.__value_.__r.__words[0] = 0;
      __y[0] = 0.0;
      v31 = v25;
      v32 = v67;
      v33 = v66;
      v30 = v68;
      goto LABEL_28;
    }
    ++v45;
    v49 += 16;
    ++v48;
    v47 = v47 + v50;
    if (v45 == v46)
      goto LABEL_74;
  }
  if (v48 < (int)v18)
  {
    v54 = (double *)(*(_QWORD *)(v14 + 136) + v49);
    v28 = *(v54 - 1);
    v27 = *v54;
    v55 = *(v54 - 3);
    v56 = *(v54 - 2);
    buf[0].__r_.__value_.__r.__words[0] = 0;
    __y[0] = 0.0;
    sub_18F5BD37C(v25, (double *)buf, __y, &v77, v55, v56, 0.0, v28, v27, 0.0);
    v57 = __y[0];
    v58 = *(double *)&buf[0].__r_.__value_.__l.__data_;
    v59 = *(_QWORD *)(v14 + 136) + v49;
    v60 = *(double *)(v59 + 8);
    v61 = *(double *)(v59 + 16);
    buf[0].__r_.__value_.__r.__words[0] = 0;
    __y[0] = 0.0;
    sub_18F5BD37C(v25, (double *)buf, __y, &v77, v28, v27, 0.0, v60, v61, 0.0);
    v62 = atan2(v57, v58);
    if (v62 < 0.0)
      v62 = v62 + 6.28318531;
    v63 = v62 * 57.2957795;
    v64 = atan2(__y[0], *(long double *)&buf[0].__r_.__value_.__l.__data_);
    if (v64 < 0.0)
      v64 = v64 + 6.28318531;
    sub_18F5F3E84(v63, v64 * 57.2957795);
    goto LABEL_82;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2992B98);
  v72 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_18F5B3000, v72, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", (uint8_t *)buf, 2u);
  }
  v19 = 0.0;
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      goto LABEL_115;
LABEL_17:
    LOWORD(__y[0]) = 0;
    v22 = (std::string *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", (const char *)v22);
    goto LABEL_113;
  }
LABEL_36:
  v20 = 0;
LABEL_37:
  v28 = 0.0;
  v27 = 0.0;
  if (!v13)
    goto LABEL_42;
LABEL_38:
  v36 = (unint64_t *)&v13->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_42:
  if ((v20 & 1) != 0)
  {
    if ((a4 & 1) == 0)
    {
      v38 = v19 >= 360.0 || v19 < 0.0;
      v39 = dbl_18F775AB0[v19 > 180.0];
      if (v38)
        v39 = -0.0;
      v19 = v19 + v39;
    }
    v40 = *a3;
    if (*(char *)(*a3 + 71) < 0)
      sub_18F5C6990(buf, *(void **)(v40 + 48), *(_QWORD *)(v40 + 56));
    else
      buf[0] = *(std::string *)(v40 + 48);
    std::string::operator=((std::string *)(a2 + 128), buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    v44 = *a3;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)*a3;
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(v44 + 20);
    *(double *)(a2 + 152) = v28;
    *(double *)(a2 + 160) = v27;
    *(double *)(a2 + 168) = v19;
    *(double *)(a2 + 272) = v17;
    return 1;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2992B98);
  v41 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_18F5B3000, v41, OS_LOG_TYPE_ERROR, "CLMM,interpolateOnRoad,interpolateProjections returned false", (uint8_t *)buf, 2u);
  }
  result = sub_18F5C4AE0(115, 0);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992B98);
    LOWORD(__y[0]) = 0;
    v43 = (std::string *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLMapGeometry::interpolateOnRoad(CLMapCrumb &, const CLMapRoadPtr &, BOOL, const double *, int) const", "CoreLocation: %s\n", (const char *)v43);
    if (v43 != buf)
      free(v43);
    return 0;
  }
  return result;
}

void sub_18F6F1758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F6F178C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = a1 + 248;
  v2 = *(_QWORD **)(a1 + 248);
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_18F6F1E9C(a1 + 240, v2);
  *(_QWORD *)(v3 - 8) = v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  sub_18F6F1E9C(v3 + 16, *(_QWORD **)(v3 + 24));
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = v3 + 24;
  sub_18F6F1E08(v3 + 40, *(char **)(v3 + 48));
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 40) = v3 + 48;
  *(_QWORD *)(v3 + 72) = 0;
  v6 = v3 + 80;
  v5 = *(_QWORD *)(v3 + 80);
  for (result = *(_QWORD *)(v6 + 8); result != v5; result = sub_18F5D6004(result - 16))
    ;
  *(_QWORD *)(a1 + 336) = v5;
  return result;
}

uint64_t sub_18F6F182C(uint64_t a1, uint64_t a2, double a3)
{
  return (*(uint64_t (**)(uint64_t, double, double, double))(*(_QWORD *)a1 + 40))(a1, *(double *)(a2 + 56), *(double *)(a2 + 64), a3);
}

void sub_18F6F1840(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  uint8_t buf[1640];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 33))
  {
    v5 = *(void **)(a1 + 2600);
    if (v5)
    {
      if (objc_msgSend_allowNetworkTileLoad(v5, a2, a3, a4))
      {
        ++*(_DWORD *)(a1 + 36);
        MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 2600), sel_preloadRoadTilesNear_radius_completionHandler_, &unk_1E2990A70, v6);
      }
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2992B98);
      v7 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_ERROR, "CLMM,provideCacheHint,fGEOMapFeatureAccess is unexpectedly nil", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2992B98);
        v8 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "virtual void CLMapGeometry::provideCacheHint(double, double, double)", "CoreLocation: %s\n", v8);
        if (v8 != (char *)buf)
          free(v8);
      }
    }
  }
}

void sub_18F6F1A54(uint64_t a1, void *a2)
{
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992B98);
    v3 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349571;
      v24 = objc_msgSend_code(a2, v4, v5, v6);
      v25 = 2114;
      v26 = objc_msgSend_domain(a2, v7, v8, v9);
      v27 = 2113;
      v28 = objc_msgSend_localizedDescription(a2, v10, v11, v12);
      _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_DEBUG, "CLMM,Warning,provideCacheHint reported error:%{public}lld (%{public}@) \"%{private}@\"", buf, 0x20u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2992B98);
      objc_msgSend_code(a2, v13, v14, v15);
      objc_msgSend_domain(a2, v16, v17, v18);
      objc_msgSend_localizedDescription(a2, v19, v20, v21);
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "virtual void CLMapGeometry::provideCacheHint(double, double, double)_block_invoke", "CoreLocation: %s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
  }
}

uint64_t sub_18F6F1C7C()
{
  NSObject *v0;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2992B98);
  v0 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v0, OS_LOG_TYPE_ERROR, "Base function called for moveOnRouteRoads", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992B98);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLMapGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
  return 0;
}

void sub_18F6F1E08(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    sub_18F6F1E08(a1, *(_QWORD *)a2);
    sub_18F6F1E08(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 80);
    sub_18F62AB98(&v4);
    v4 = (void **)(a2 + 56);
    sub_18F62AB98(&v4);
    operator delete(a2);
  }
}

os_log_t sub_18F6F1E70()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

void sub_18F6F1E9C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_18F6F1E9C(a1, *a2);
    sub_18F6F1E9C(a1, a2[1]);
    sub_18F5D6004((uint64_t)(a2 + 6));
    operator delete(a2);
  }
}

_QWORD *sub_18F6F1EE4@<X0>(const char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x178uLL);
  result = sub_18F6F1F3C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18F6F1F28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F6F1F3C(_QWORD *a1, const char *a2)
{
  uint64_t v3;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E298FE80;
  v3 = sub_18F61E900((uint64_t)(a1 + 3), a2);
  a1[34] = 0;
  a1[35] = 0;
  a1[32] = 0;
  a1[33] = a1 + 34;
  a1[36] = a1 + 37;
  a1[37] = 0;
  a1[40] = 0;
  a1[41] = 0;
  a1[38] = 0;
  a1[39] = a1 + 40;
  a1[42] = 0xBFF0000000000000;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  return a1;
}

void sub_18F6F1FA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F6F1FB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FE80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18F6F1FC4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E298FE80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194002D30);
}

uint64_t sub_18F6F1FF4(uint64_t a1)
{
  char v2;

  return sub_18F6F201C((uint64_t)&v2, a1 + 24);
}

uint64_t sub_18F6F201C(uint64_t a1, uint64_t a2)
{
  void **v4;

  v4 = (void **)(a2 + 328);
  sub_18F62AB98(&v4);
  sub_18F6F1E08(a2 + 288, *(char **)(a2 + 296));
  sub_18F6F1E9C(a2 + 264, *(_QWORD **)(a2 + 272));
  sub_18F6F1E9C(a2 + 240, *(_QWORD **)(a2 + 248));
  sub_18F67F384((id *)(a2 + 232));
  return sub_18F6D793C(a2);
}

double sub_18F6F2084(double *a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v7;
  long double __y;
  long double v9;

  v9 = 0.0;
  __y = 0.0;
  sub_18F5BD37C(a1, &v9, &__y, &v7, a2, a3, 0.0, a4, a5, 0.0);
  v5 = atan2(__y, v9);
  if (v5 < 0.0)
    v5 = v5 + 6.28318531;
  return v5 * 57.2957795;
}

BOOL sub_18F6F20F0(double a1, uint64_t a2, char *a3, int a4, unint64_t a5, void *a6, void *a7)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  double v15;
  double v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  double v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  void *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  double v121;
  const char *v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  double v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  double v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  double v146;
  double v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  double v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  BOOL v156;
  double v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  double v162;
  double v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  double v167;
  double v168;
  double v169;
  CLTripSegmentLocation *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  double v178;
  double v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  double v183;
  double v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  double v188;
  double v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  double v193;
  double v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  const char *v208;
  id v209;
  const char *v210;
  uint64_t v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  const char *v216;
  uint64_t v217;
  const char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  const char *v222;
  uint64_t v223;
  const char *v224;
  uint64_t v225;
  uint64_t v226;
  const char *v227;
  uint64_t v228;
  uint64_t v229;
  const char *v230;
  uint64_t v231;
  uint64_t v232;
  const char *v233;
  uint64_t v234;
  uint64_t v235;
  double v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  const char *v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  const char *v244;
  uint64_t v245;
  uint64_t v246;
  double v247;
  double v248;
  const char *v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  const char *v253;
  uint64_t v254;
  uint64_t v255;
  double v256;
  double v257;
  const char *v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  const char *v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  double v266;
  const char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  const char *v271;
  uint64_t v272;
  const char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  const char *v277;
  uint64_t v278;
  NSObject *v279;
  NSObject *v280;
  const char *v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  const char *v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  const char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  const char *v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  const char *v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  const char *v307;
  uint64_t v308;
  uint64_t v309;
  void *v310;
  const char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  const char *v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  const char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  const char *v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  const char *v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  char *v333;
  NSObject *v334;
  const char *v335;
  uint64_t v336;
  uint64_t v337;
  void *v338;
  const char *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  const char *v344;
  uint64_t v345;
  uint64_t v346;
  void *v347;
  const char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  const char *v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  const char *v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  const char *v361;
  uint64_t v362;
  uint64_t v363;
  void *v364;
  const char *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  const char *v370;
  uint64_t v371;
  uint64_t v372;
  void *v373;
  const char *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  const char *v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  const char *v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  NSObject *v387;
  const char *v388;
  uint64_t v389;
  uint64_t v390;
  int v391;
  const char *v392;
  uint64_t v393;
  uint64_t v394;
  int v395;
  const char *v396;
  uint64_t v397;
  uint64_t v398;
  double v399;
  double v400;
  NSObject *v401;
  const char *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  const char *v406;
  uint64_t v407;
  uint64_t v408;
  const char *v409;
  uint64_t v410;
  uint64_t v411;
  double v412;
  const char *v413;
  uint64_t v414;
  uint64_t v415;
  const char *v416;
  uint64_t v417;
  const char *v418;
  uint64_t v419;
  uint64_t v420;
  void *v421;
  const char *v422;
  uint64_t v423;
  uint64_t v424;
  double v425;
  double v426;
  const char *v427;
  uint64_t v428;
  uint64_t v429;
  void *v430;
  const char *v431;
  uint64_t v432;
  uint64_t v433;
  double v434;
  double v435;
  const char *v436;
  uint64_t v437;
  uint64_t v438;
  int v439;
  const char *v440;
  uint64_t v441;
  uint64_t v442;
  int v443;
  const char *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  const char *v448;
  uint64_t v449;
  uint64_t v450;
  double v451;
  double v452;
  const char *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  const char *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  const char *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  const char *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  const char *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  const char *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  const char *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  const char *v488;
  uint64_t v489;
  uint64_t v490;
  void *v491;
  const char *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  const char *v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  char *v500;
  const char *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  char *v505;
  uint64_t v506;
  double v509;
  double v512;
  double v513;
  double v514;
  double v515;
  uint64_t v516;
  uint64_t v517;
  double v518;
  double v519;
  uint64_t v520;
  double v521;
  uint64_t v522;
  double v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  int v528;
  _BYTE v529[10];
  _BYTE v530[10];
  _BYTE v531[10];
  __int16 v532;
  double v533;
  __int16 v534;
  uint64_t v535;
  __int16 v536;
  uint64_t v537;
  __int16 v538;
  uint64_t v539;
  __int16 v540;
  uint64_t v541;
  __int16 v542;
  uint64_t v543;
  __int16 v544;
  uint64_t v545;
  __int16 v546;
  uint64_t v547;
  __int16 v548;
  uint64_t v549;
  __int16 v550;
  int v551;
  uint8_t buf[4];
  _BYTE v553[10];
  _BYTE v554[10];
  _BYTE v555[10];
  __int16 v556;
  double v557;
  __int16 v558;
  uint64_t v559;
  __int16 v560;
  uint64_t v561;
  __int16 v562;
  uint64_t v563;
  __int16 v564;
  uint64_t v565;
  __int16 v566;
  uint64_t v567;
  __int16 v568;
  uint64_t v569;
  __int16 v570;
  uint64_t v571;
  __int16 v572;
  uint64_t v573;
  __int16 v574;
  int v575;
  _BYTE v576[128];
  uint64_t v577;

  v577 = *MEMORY[0x1E0C80C00];
  v524 = 0u;
  v525 = 0u;
  v526 = 0u;
  v527 = 0u;
  v517 = objc_msgSend_countByEnumeratingWithState_objects_count_(a6, a3, (uint64_t)&v524, (uint64_t)v576, 16);
  if (v517)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0.8;
    if (a5 == 1)
      v15 = 0.0;
    v509 = v15;
    v16 = 20.0;
    if (a5 == 3)
      v16 = 5.0;
    v516 = *(_QWORD *)v525;
    if (a5 == 2)
      v16 = 3.0;
    v512 = v16;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v525 != v516)
          objc_enumerationMutation(a6);
        v18 = *(void **)(*((_QWORD *)&v524 + 1) + 8 * v17);
        if (v18)
        {
          v19 = objc_msgSend_locType(*(void **)(*((_QWORD *)&v524 + 1) + 8 * v17), v10, v11, v12);
          if (v19 > 0xD || ((1 << v19) & 0x2E1A) == 0)
          {
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990A90);
            v387 = qword_1EE172170;
            if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
            {
              v391 = objc_msgSend_locType(v18, v388, v389, v390);
              *(_DWORD *)buf = 67240192;
              *(_DWORD *)v553 = v391;
              _os_log_impl(&dword_18F5B3000, v387, OS_LOG_TYPE_DEBUG, "CLTSP,LI,interpolator,unsupported location type skipped,%{public}d", buf, 8u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990A90);
              v395 = objc_msgSend_locType(v18, v392, v393, v394);
              v528 = 67240192;
              *(_DWORD *)v529 = v395;
LABEL_94:
              v333 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentLinearInterpolator::upsampleTripSegmentData(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const double) const", "CoreLocation: %s\n", v333);
              goto LABEL_95;
            }
          }
          else
          {
            v24 = (void *)objc_msgSend_timestamp(v18, v20, v21, v22);
            objc_msgSend_timeIntervalSinceReferenceDate(v24, v25, v26, v27);
            v29 = v28;
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990A90);
            v30 = qword_1EE172170;
            v523 = v29;
            if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend_latitude(v18, v31, v32, v33);
              v520 = v34;
              objc_msgSend_longitude(v18, v35, v36, v37);
              v39 = v38;
              objc_msgSend_altitude(v18, v40, v41, v42);
              v44 = v43;
              objc_msgSend_speed(v18, v45, v46, v47);
              v49 = v48;
              objc_msgSend_course(v18, v50, v51, v52);
              v54 = v53;
              objc_msgSend_horizontalAccuracy(v18, v55, v56, v57);
              v59 = v58;
              objc_msgSend_altitudeAccuracy(v18, v60, v61, v62);
              v64 = v63;
              objc_msgSend_speedAccuracy(v18, v65, v66, v67);
              v69 = v68;
              objc_msgSend_courseAccuracy(v18, v70, v71, v72);
              v74 = v73;
              v78 = (void *)objc_msgSend_UUIDString(a3, v75, v76, v77);
              v82 = objc_msgSend_UTF8String(v78, v79, v80, v81);
              v86 = objc_msgSend_locType(v18, v83, v84, v85);
              *(_DWORD *)buf = 67243523;
              *(_DWORD *)v553 = a5;
              *(_WORD *)&v553[4] = 1026;
              *(_DWORD *)&v553[6] = a4;
              *(_WORD *)v554 = 2050;
              *(double *)&v554[2] = v523;
              *(_WORD *)v555 = 2049;
              *(_QWORD *)&v555[2] = v520;
              v556 = 2049;
              v557 = v39;
              v558 = 2050;
              v559 = v44;
              v29 = v523;
              v560 = 2050;
              v561 = v49;
              v562 = 2050;
              v563 = v54;
              v564 = 2050;
              v565 = v59;
              v566 = 2050;
              v567 = v64;
              v568 = 2050;
              v569 = v69;
              v570 = 2050;
              v571 = v74;
              v572 = 2082;
              v573 = v82;
              v574 = 1026;
              v575 = v86;
              _os_log_impl(&dword_18F5B3000, v30, OS_LOG_TYPE_DEBUG, "CLTSP,LI,input,mode,%{public}d,final,%{public}d,time,%{public}.4lf,LL,%{private}.7lf,%{private}.7lf,altitude,%{public}.2lf,speed,%{public}.2lf,course,%{public}.2lf,hunc,%{public}.2lf,vunc,%{public}.2lf,sunc,%{public}.2lf,cunc,%{public}.2lf,id,%{public}s,type,%{public}d", buf, 0x82u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990A90);
              objc_msgSend_latitude(v18, v444, v445, v446);
              v522 = v447;
              objc_msgSend_longitude(v18, v448, v449, v450);
              v452 = v451;
              objc_msgSend_altitude(v18, v453, v454, v455);
              v457 = v456;
              objc_msgSend_speed(v18, v458, v459, v460);
              v462 = v461;
              objc_msgSend_course(v18, v463, v464, v465);
              v467 = v466;
              objc_msgSend_horizontalAccuracy(v18, v468, v469, v470);
              v472 = v471;
              objc_msgSend_altitudeAccuracy(v18, v473, v474, v475);
              v477 = v476;
              objc_msgSend_speedAccuracy(v18, v478, v479, v480);
              v482 = v481;
              objc_msgSend_courseAccuracy(v18, v483, v484, v485);
              v487 = v486;
              v491 = (void *)objc_msgSend_UUIDString(a3, v488, v489, v490);
              v495 = objc_msgSend_UTF8String(v491, v492, v493, v494);
              v499 = objc_msgSend_locType(v18, v496, v497, v498);
              v528 = 67243523;
              *(_DWORD *)v529 = a5;
              *(_WORD *)&v529[4] = 1026;
              *(_DWORD *)&v529[6] = a4;
              *(_WORD *)v530 = 2050;
              *(double *)&v530[2] = v523;
              *(_WORD *)v531 = 2049;
              *(_QWORD *)&v531[2] = v522;
              v532 = 2049;
              v533 = v452;
              v534 = 2050;
              v535 = v457;
              v536 = 2050;
              v537 = v462;
              v538 = 2050;
              v539 = v467;
              v540 = 2050;
              v541 = v472;
              v542 = 2050;
              v543 = v477;
              v544 = 2050;
              v545 = v482;
              v546 = 2050;
              v547 = v487;
              v548 = 2082;
              v549 = v495;
              v550 = 1026;
              v551 = v499;
              v500 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentLinearInterpolator::upsampleTripSegmentData(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const double) const", "CoreLocation: %s\n", v500);
              if (v500 != (char *)buf)
                free(v500);
              v29 = v523;
              if (!v14)
              {
LABEL_119:
                v13 = 1;
LABEL_120:
                v14 = v18;
                goto LABEL_121;
              }
            }
            else if (!v14)
            {
              goto LABEL_119;
            }
            v87 = (void *)objc_msgSend_timestamp(v18, v10, v11, v12);
            objc_msgSend_timeIntervalSinceReferenceDate(v87, v88, v89, v90);
            v92 = v91;
            v96 = (void *)objc_msgSend_timestamp(v14, v93, v94, v95);
            objc_msgSend_timeIntervalSinceReferenceDate(v96, v97, v98, v99);
            if (v92 <= v103)
            {
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990A90);
              v280 = qword_1EE172170;
              if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
              {
                v284 = (void *)objc_msgSend_timestamp(v18, v281, v282, v283);
                objc_msgSend_timeIntervalSinceReferenceDate(v284, v285, v286, v287);
                v289 = v288;
                v293 = (void *)objc_msgSend_timestamp(v14, v290, v291, v292);
                objc_msgSend_timeIntervalSinceReferenceDate(v293, v294, v295, v296);
                v298 = v297;
                v302 = objc_msgSend_locType(v18, v299, v300, v301);
                v306 = objc_msgSend_locType(v14, v303, v304, v305);
                *(_DWORD *)buf = 134349824;
                *(_QWORD *)v553 = v289;
                *(_WORD *)&v553[8] = 2050;
                *(_QWORD *)v554 = v298;
                *(_WORD *)&v554[8] = 1026;
                *(_DWORD *)v555 = v302;
                *(_WORD *)&v555[4] = 1026;
                *(_DWORD *)&v555[6] = v306;
                _os_log_impl(&dword_18F5B3000, v280, OS_LOG_TYPE_ERROR, "CLTSP,LI,timestamp moving back,time,%{public}.4lf,prevTime,%{public}.4lf,type,%{public}d,prevType,%{public}d", buf, 0x22u);
              }
              if (sub_18F5C4AE0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990A90);
                v310 = (void *)objc_msgSend_timestamp(v18, v307, v308, v309);
                objc_msgSend_timeIntervalSinceReferenceDate(v310, v311, v312, v313);
                v315 = v314;
                v319 = (void *)objc_msgSend_timestamp(v14, v316, v317, v318);
                objc_msgSend_timeIntervalSinceReferenceDate(v319, v320, v321, v322);
                v324 = v323;
                v328 = objc_msgSend_locType(v18, v325, v326, v327);
                v332 = objc_msgSend_locType(v14, v329, v330, v331);
                v528 = 134349824;
                *(_QWORD *)v529 = v315;
                *(_WORD *)&v529[8] = 2050;
                *(_QWORD *)v530 = v324;
                *(_WORD *)&v530[8] = 1026;
                *(_DWORD *)v531 = v328;
                *(_WORD *)&v531[4] = 1026;
                *(_DWORD *)&v531[6] = v332;
                goto LABEL_77;
              }
            }
            else
            {
              v104 = (void *)objc_msgSend_timestamp(v18, v100, v101, v102);
              v108 = objc_msgSend_timestamp(v14, v105, v106, v107);
              objc_msgSend_timeIntervalSinceDate_(v104, v109, v108, v110);
              v115 = v114;
              if (v114 > v509)
              {
                v116 = (void *)objc_msgSend_timestamp(v14, v111, v112, v113);
                objc_msgSend_timeIntervalSinceReferenceDate(v116, v117, v118, v119);
                v121 = v120;
                objc_msgSend_distanceFromLocation_(v18, v122, (uint64_t)v14, v123);
                v128 = v127;
                if (v115 <= 1.5)
                {
                  objc_msgSend_speed(v18, v124, v125, v126);
                  if (v115 > 0.0 && v399 < 0.0)
                  {
                    v400 = 53.6;
                    if (a5 <= 3)
                      v400 = dbl_18F775B48[a5];
                    if (v400 >= v128 / v115)
                      v400 = v128 / v115;
                    objc_msgSend_updateSpeed_andSpeedAccuracy_(v18, v396, v397, v398, v400, v512);
                  }
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990A90);
                  v401 = qword_1EE172170;
                  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                  {
                    objc_msgSend_speed(v18, v402, v403, v404);
                    *(_DWORD *)buf = 134218496;
                    *(double *)v553 = v115;
                    *(_WORD *)&v553[8] = 2048;
                    *(double *)v554 = v128;
                    *(_WORD *)&v554[8] = 2048;
                    *(_QWORD *)v555 = v405;
                    _os_log_impl(&dword_18F5B3000, v401, OS_LOG_TYPE_DEBUG, "CLTSP,LI,duration_since_previous_epoch,%.2lf,distance,%.2lf,speed,%.2lf", buf, 0x20u);
                  }
                  if (sub_18F5C4AE0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172168 != -1)
                      dispatch_once(&qword_1EE172168, &unk_1E2990A90);
                    objc_msgSend_speed(v18, v501, v502, v503);
                    v528 = 134218496;
                    *(double *)v529 = v115;
                    *(_WORD *)&v529[8] = 2048;
                    *(double *)v530 = v128;
                    *(_WORD *)&v530[8] = 2048;
                    *(_QWORD *)v531 = v504;
                    v505 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentLinearInterpolator::upsampleTripSegmentData(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const double) const", "CoreLocation: %s\n", v505);
                    if (v505 != (char *)buf)
                      free(v505);
                  }
                  if ((v13 & 1) != 0)
                  {
                    objc_msgSend_speed(v14, v406, v407, v408);
                    if (v412 < 0.0)
                    {
                      objc_msgSend_speed(v18, v409, v410, v411);
                      objc_msgSend_updateSpeed_andSpeedAccuracy_(v14, v413, v414, v415);
                    }
                    objc_msgSend_setLocationReconstructionType_(v14, v409, 1, v411);
                    objc_msgSend_addObject_(a7, v416, (uint64_t)v14, v417);
                    v421 = (void *)objc_msgSend_timestamp(v14, v418, v419, v420);
                    objc_msgSend_timeIntervalSinceReferenceDate(v421, v422, v423, v424);
                    v426 = v425;
                    v430 = (void *)objc_msgSend_timestamp(v14, v427, v428, v429);
                    objc_msgSend_timeIntervalSinceReferenceDate(v430, v431, v432, v433);
                    v435 = v434;
                    v439 = objc_msgSend_count(a7, v436, v437, v438);
                    sub_18F6F337C(v14, v439, a3, a5, v426, v435, -1.0, -1.0);
                  }
                  objc_msgSend_addObject_(a7, v406, (uint64_t)v18, v408);
                  v443 = objc_msgSend_count(a7, v440, v441, v442);
                  sub_18F6F337C(v18, v443, a3, a5, v29, v121, v29, -1.0);
                  v13 = 0;
                }
                else
                {
                  v518 = a1 / v115 * v127 / a1;
                  v513 = a1 / v115;
                  v514 = v121;
                  v129 = a1 / v115;
                  v515 = v115;
                  do
                  {
                    if (v129 >= 0.9999999)
                      break;
                    objc_msgSend_latitude(v14, v124, v125, v126);
                    v131 = v130;
                    objc_msgSend_longitude(v14, v132, v133, v134);
                    v136 = v135;
                    objc_msgSend_latitude(v18, v137, v138, v139);
                    v141 = v140;
                    objc_msgSend_longitude(v18, v142, v143, v144);
                    v146 = v136 + 360.0;
                    if (v136 >= 0.0)
                      v146 = v136;
                    if (v145 < 0.0)
                      v145 = v145 + 360.0;
                    v147 = v145 - v146;
                    if (v147 <= 180.0)
                    {
                      if (v147 < -180.0)
                        v147 = v147 + 360.0;
                    }
                    else
                    {
                      v147 = v147 + -360.0;
                    }
                    v151 = fmod(v136 + v147 * v129, 360.0);
                    if (v151 <= -180.0)
                    {
                      v151 = v151 + 360.0;
                    }
                    else if (v151 > 180.0)
                    {
                      v151 = v151 + -360.0;
                    }
                    objc_msgSend_speed(v14, v148, v149, v150);
                    v156 = v155 < 0.0;
                    v157 = v518;
                    if (!v156)
                    {
                      objc_msgSend_speed(v18, v152, v153, v154, v518);
                      v156 = v161 < 0.0;
                      v157 = v518;
                      if (!v156)
                      {
                        objc_msgSend_speed(v14, v158, v159, v160, v518);
                        v163 = v162;
                        objc_msgSend_speed(v18, v164, v165, v166);
                        v157 = v129 * v167 + v163 * (1.0 - v129);
                      }
                    }
                    v168 = 53.6;
                    if (a5 <= 3)
                      v168 = dbl_18F775B48[a5];
                    v169 = v131 + (v141 - v131) * v129;
                    if (v168 < v157)
                      v157 = v168;
                    v519 = v157;
                    v170 = [CLTripSegmentLocation alloc];
                    v521 = v121 + v129 * v115;
                    v174 = objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(MEMORY[0x1E0C99D68], v171, v172, v173, v521);
                    objc_msgSend_horizontalAccuracy(v18, v175, v176, v177);
                    v179 = v178;
                    objc_msgSend_course(v18, v180, v181, v182);
                    v184 = v183;
                    objc_msgSend_courseAccuracy(v18, v185, v186, v187);
                    v189 = v188;
                    objc_msgSend_altitude(v18, v190, v191, v192);
                    v194 = v193;
                    objc_msgSend_altitudeAccuracy(v18, v195, v196, v197);
                    v199 = v198;
                    v203 = objc_msgSend_locType(v18, v200, v201, v202);
                    v207 = objc_msgSend_referenceFrame(v18, v204, v205, v206);
                    v209 = (id)objc_msgSend_initWithTime_latitude_longitude_horizontalAccuracy_course_courseAccuracy_speed_speedAccuracy_altitude_altitudeAccuracy_locType_referenceFrame_(v170, v208, v174, v203, v207, v169, v151, v179, v184, v189, v519, v512, v194, v199);
                    objc_msgSend_setLocationReconstructionType_(v209, v210, 4, v211);
                    v215 = objc_msgSend_locType(v14, v212, v213, v214);
                    objc_msgSend_setStartLocationType_(v209, v216, v215, v217);
                    v221 = objc_msgSend_locType(v18, v218, v219, v220);
                    objc_msgSend_setStopLocationType_(v209, v222, v221, v223);
                    if (objc_msgSend_locType(v14, v224, v225, v226) == 13
                      || objc_msgSend_locType(v18, v227, v228, v229) == 13)
                    {
                      objc_msgSend_speed(v209, v227, v228, v229);
                      objc_msgSend_updateSpeed_andSpeedAccuracy_(v209, v230, v231, v232);
                    }
                    v115 = v515;
                    v121 = v514;
                    if ((v13 & 1) != 0)
                    {
                      objc_msgSend_speed(v14, v227, v228, v229);
                      if (v236 < 0.0)
                      {
                        objc_msgSend_speed(v209, v233, v234, v235);
                        objc_msgSend_updateSpeed_andSpeedAccuracy_(v14, v237, v238, v239);
                      }
                      objc_msgSend_addObject_(a7, v233, (uint64_t)v14, v235);
                      v243 = (void *)objc_msgSend_timestamp(v14, v240, v241, v242);
                      objc_msgSend_timeIntervalSinceReferenceDate(v243, v244, v245, v246);
                      v248 = v247;
                      v252 = (void *)objc_msgSend_timestamp(v14, v249, v250, v251);
                      objc_msgSend_timeIntervalSinceReferenceDate(v252, v253, v254, v255);
                      v257 = v256;
                      v261 = objc_msgSend_count(a7, v258, v259, v260);
                      sub_18F6F337C(v14, v261, a3, a5, v248, v257, -1.0, -1.0);
                    }
                    objc_msgSend_addObject_(a7, v227, (uint64_t)v209, v229);
                    v265 = objc_msgSend_count(a7, v262, v263, v264);
                    sub_18F6F337C(v209, v265, a3, a5, v521, v514, v523, v129);
                    v13 = 0;
                    v266 = v513 + v129;
                    if (v513 + v129 > 1.0)
                      v266 = 1.0;
                    if (v129 >= 1.0)
                      break;
                    v129 = v266;
                  }
                  while (v521 < v523);
                  if (a5 == 1)
                  {
                    objc_msgSend_setLocationReconstructionType_(v18, v124, 4, v126);
                    v270 = objc_msgSend_locType(v14, v267, v268, v269);
                    objc_msgSend_setStartLocationType_(v18, v271, v270, v272);
                    v276 = objc_msgSend_locType(v18, v273, v274, v275);
                    objc_msgSend_setStopLocationType_(v18, v277, v276, v278);
                  }
                  objc_msgSend_addObject_(a7, v124, (uint64_t)v18, v126);
                }
                goto LABEL_120;
              }
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990A90);
              v334 = qword_1EE172170;
              if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
              {
                v338 = (void *)objc_msgSend_timestamp(v18, v335, v336, v337);
                objc_msgSend_timeIntervalSinceReferenceDate(v338, v339, v340, v341);
                v343 = v342;
                v347 = (void *)objc_msgSend_timestamp(v14, v344, v345, v346);
                objc_msgSend_timeIntervalSinceReferenceDate(v347, v348, v349, v350);
                v352 = v351;
                v356 = objc_msgSend_locType(v18, v353, v354, v355);
                v360 = objc_msgSend_locType(v14, v357, v358, v359);
                *(_DWORD *)buf = 134350080;
                *(_QWORD *)v553 = v343;
                *(_WORD *)&v553[8] = 2050;
                *(_QWORD *)v554 = v352;
                *(_WORD *)&v554[8] = 1026;
                *(_DWORD *)v555 = v356;
                *(_WORD *)&v555[4] = 1026;
                *(_DWORD *)&v555[6] = v360;
                v556 = 2050;
                v557 = v115;
                _os_log_impl(&dword_18F5B3000, v334, OS_LOG_TYPE_DEBUG, "CLTSP,LI,duration_since_previous_epoch threshold not met,time,%{public}.4lf,prevTime,%{public}.4lf,type,%{public}d,prevType,%{public}d,duration_since_previous_epoch,%{public}.2lf", buf, 0x2Cu);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990A90);
                v364 = (void *)objc_msgSend_timestamp(v18, v361, v362, v363);
                objc_msgSend_timeIntervalSinceReferenceDate(v364, v365, v366, v367);
                v369 = v368;
                v373 = (void *)objc_msgSend_timestamp(v14, v370, v371, v372);
                objc_msgSend_timeIntervalSinceReferenceDate(v373, v374, v375, v376);
                v378 = v377;
                v382 = objc_msgSend_locType(v18, v379, v380, v381);
                v386 = objc_msgSend_locType(v14, v383, v384, v385);
                v528 = 134350080;
                *(_QWORD *)v529 = v369;
                *(_WORD *)&v529[8] = 2050;
                *(_QWORD *)v530 = v378;
                *(_WORD *)&v530[8] = 1026;
                *(_DWORD *)v531 = v382;
                *(_WORD *)&v531[4] = 1026;
                *(_DWORD *)&v531[6] = v386;
                v532 = 2050;
                v533 = v115;
                goto LABEL_94;
              }
            }
          }
        }
        else
        {
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990A90);
          v279 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v279, OS_LOG_TYPE_ERROR, "CLTSP,LI,interpolator,null location object skipped", buf, 2u);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990A90);
            LOWORD(v528) = 0;
LABEL_77:
            v333 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentLinearInterpolator::upsampleTripSegmentData(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const double) const", "CoreLocation: %s\n", v333);
LABEL_95:
            if (v333 != (char *)buf)
              free(v333);
          }
        }
LABEL_121:
        ++v17;
      }
      while (v17 != v517);
      v506 = objc_msgSend_countByEnumeratingWithState_objects_count_(a6, v10, (uint64_t)&v524, (uint64_t)v576, 16);
      v517 = v506;
    }
    while (v506);
  }
  return objc_msgSend_count(a7, v10, v11, v12) != 0;
}

void sub_18F6F337C(void *a1, int a2, void *a3, int a4, double a5, double a6, double a7, double a8)
{
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint8_t buf[4];
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  double v130;
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  __int16 v145;
  uint64_t v146;
  __int16 v147;
  uint64_t v148;
  __int16 v149;
  int v150;
  __int16 v151;
  double v152;
  __int16 v153;
  int v154;
  __int16 v155;
  uint64_t v156;
  __int16 v157;
  int v158;
  __int16 v159;
  int v160;
  __int16 v161;
  int v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  if (qword_1EE172168 != -1)
    dispatch_once(&qword_1EE172168, &unk_1E2990A90);
  v13 = qword_1EE172170;
  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend_latitude(a1, v14, v15, v16);
    v121 = v17;
    objc_msgSend_longitude(a1, v18, v19, v20);
    v120 = v21;
    objc_msgSend_course(a1, v22, v23, v24);
    v26 = v25;
    objc_msgSend_speed(a1, v27, v28, v29);
    v31 = v30;
    objc_msgSend_altitude(a1, v32, v33, v34);
    v36 = v35;
    objc_msgSend_horizontalAccuracy(a1, v37, v38, v39);
    v41 = v40;
    objc_msgSend_courseAccuracy(a1, v42, v43, v44);
    v46 = v45;
    objc_msgSend_speedAccuracy(a1, v47, v48, v49);
    v51 = v50;
    objc_msgSend_altitudeAccuracy(a1, v52, v53, v54);
    v56 = v55;
    v60 = a2;
    v61 = a4;
    v62 = objc_msgSend_locType(a1, v57, v58, v59);
    v66 = (void *)objc_msgSend_UUIDString(a3, v63, v64, v65);
    *(_DWORD *)buf = 134353667;
    v126 = a5;
    v127 = 2050;
    v128 = a6;
    v129 = 2050;
    v130 = a7;
    v131 = 2049;
    v132 = v121;
    v133 = 2049;
    v134 = v120;
    v135 = 2050;
    v136 = v26;
    v137 = 2050;
    v138 = v31;
    v139 = 2050;
    v140 = v36;
    v141 = 2050;
    v142 = v41;
    v143 = 2050;
    v144 = v46;
    v145 = 2050;
    v146 = v51;
    v147 = 2050;
    v148 = v56;
    v149 = 1026;
    v150 = v62;
    v151 = 2050;
    v152 = a8;
    v153 = 1026;
    v154 = v60;
    v155 = 2082;
    v156 = objc_msgSend_UTF8String(v66, v67, v68, v69);
    v157 = 1026;
    v158 = v61;
    v159 = 1026;
    v160 = objc_msgSend_reconstructionType(a1, v70, v71, v72);
    v161 = 1026;
    v162 = objc_msgSend_referenceFrame(a1, v73, v74, v75);
    _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_DEBUG, "CLTSP,LI,output,time,%{public}.4lf,start,%{public}.4lf,end,%{public}.4lf,LL,%{private}.7lf,%{private}.7lf,course,%{public}.2lf,speed,%{public}.2lf,alt,%{public}.2lf,hunc,%{public}.2lf,cunc,%{public}.2lf,sunc,%{public}.2lf,vunc,%{public}.2lf,type,%{public}d,projection,%{public}.5lf,count,%{public}d,id,%{public}s,mode,%{public}d,reconstructionType,%{public}d,refFrame,%{public}d", buf, 0xACu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990A90);
    objc_msgSend_latitude(a1, v76, v77, v78);
    objc_msgSend_longitude(a1, v79, v80, v81);
    objc_msgSend_course(a1, v82, v83, v84);
    objc_msgSend_speed(a1, v85, v86, v87);
    objc_msgSend_altitude(a1, v88, v89, v90);
    objc_msgSend_horizontalAccuracy(a1, v91, v92, v93);
    objc_msgSend_courseAccuracy(a1, v94, v95, v96);
    objc_msgSend_speedAccuracy(a1, v97, v98, v99);
    objc_msgSend_altitudeAccuracy(a1, v100, v101, v102);
    objc_msgSend_locType(a1, v103, v104, v105);
    v109 = (void *)objc_msgSend_UUIDString(a3, v106, v107, v108);
    objc_msgSend_UTF8String(v109, v110, v111, v112);
    objc_msgSend_reconstructionType(a1, v113, v114, v115);
    objc_msgSend_referenceFrame(a1, v116, v117, v118);
    v119 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void printOutputLogLine(CLTripSegmentLocation *, CFAbsoluteTime, CFAbsoluteTime, CFAbsoluteTime, double, int, NSUUID * _Nonnull, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v119);
    if (v119 != (char *)buf)
      free(v119);
  }
}

os_log_t sub_18F6F3840()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1EE172170 = (uint64_t)result;
  return result;
}

void sub_18F6F4224(uint64_t a1, const char *a2, void *a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *i;
  uint64_t v17;
  double v18;
  double v19;
  unint64_t *v20;
  unint64_t v21;
  char v22;
  char v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  __int128 *v28;
  int v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  unsigned int v33;
  double v34;
  BOOL v35;
  NSObject *v36;
  char *v37;
  NSObject *v38;
  const char *v39;
  int v40;
  NSObject *v41;
  __int128 *v42;
  __int128 *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t *v50;
  uint64_t j;
  double *v52;
  double v53;
  uint64_t *v54;
  _QWORD *v55;
  char v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void **v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  int v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void **v73;
  _QWORD *v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  NSObject *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t k;
  void *v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  char *m;
  char *v102;
  char *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  double v107;
  double v108;
  double v109;
  BOOL v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  __int128 v117;
  unint64_t *v118;
  unint64_t v119;
  NSObject *v120;
  uint64_t *v121;
  int v122;
  NSObject *v123;
  uint64_t *v124;
  uint64_t *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  NSObject *v139;
  uint64_t *v140;
  uint64_t v141;
  int v142;
  unint64_t v143;
  uint64_t v144;
  NSObject *v145;
  char *ii;
  char *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  char *v163;
  char *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t n;
  char *v169;
  uint64_t **v170;
  char **v171;
  unint64_t v172;
  int v173;
  int v174;
  int v175;
  char **v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t *v181;
  uint64_t **v182;
  int v183;
  uint64_t *v184;
  _DWORD *v185;
  BOOL v186;
  uint64_t v187;
  int v188;
  uint64_t *v189;
  int v190;
  char *v191;
  char *v192;
  uint64_t v193;
  int v194;
  int v195;
  int v196;
  NSObject *v197;
  _QWORD *v198;
  uint64_t v199;
  NSObject *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  char *v205;
  char *v206;
  _QWORD *v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  char v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t **v216;
  char *v219;
  char *v220;
  uint64_t v221;
  _QWORD *v222;
  std::__shared_weak_count *v223;
  _QWORD *v224;
  std::__shared_weak_count *v225;
  void **v226[3];
  void **v227;
  void **v228;
  uint64_t v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  __int128 v232;
  uint64_t v233;
  double *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  void ***v241;
  _OWORD v242[4];
  uint64_t v243;
  __int16 v244;
  uint64_t v245;
  __int16 v246;
  uint64_t v247;
  __int16 v248;
  uint64_t v249;
  __int16 v250;
  int v251;
  __int16 v252;
  int v253;
  uint8_t buf[24];
  uint64_t v255;
  __int16 v256;
  uint64_t v257;
  __int16 v258;
  uint64_t v259;
  __int16 v260;
  uint64_t v261;
  __int16 v262;
  uint64_t v263;
  __int16 v264;
  uint64_t v265;
  __int16 v266;
  uint64_t v267;
  __int16 v268;
  uint64_t v269;
  __int16 v270;
  int v271;
  __int16 v272;
  int v273;
  char *v274[6];

  v274[3] = *(char **)MEMORY[0x1E0C80C00];
  if (a4)
  {
    v6 = a5;
    v219 = 0;
    v220 = 0;
    v221 = 0;
    if (a5)
    {
      p_shared_owners = (unint64_t *)&a5->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    if (objc_msgSend_count(a3, a2, (uint64_t)a3, a4))
    {
      memset(v274, 0, 24);
      v242[1] = 0uLL;
      v242[0] = xmmword_18F771F40;
      *(_QWORD *)&v242[2] = 0x3FF0000000000000;
      memset((char *)&v242[2] + 8, 0, 24);
      if (sub_18F67EBBC((uint64_t)v242, a3, v13, v14))
      {
        v15 = (uint64_t *)*((_QWORD *)&v242[2] + 1);
        for (i = *(uint64_t **)&v242[3]; v15 != i; v15 += 2)
        {
          v17 = *v15;
          v18 = *(double *)(*v15 + 40);
          if (*(double *)(*v15 + 32) >= 0.0)
          {
            v19 = *(double *)(v17 + 24);
            if (v18 < v19)
              v18 = v19 + 10.0;
            if (v18 > 179.0)
              v18 = 135.0;
          }
          *(double *)(v17 + 40) = v18;
        }
        v239 = a4;
        v240 = v6;
        if (v6)
        {
          v20 = (unint64_t *)&v6->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = sub_18F6D4F50((std::string::size_type ***)&v242[2] + 1, v274, &v239);
        v23 = v22;
        v24 = v240;
        if (!v240)
          goto LABEL_21;
        v25 = (unint64_t *)&v240->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
          if ((v23 & 1) != 0)
            goto LABEL_22;
        }
        else
        {
LABEL_21:
          if ((v22 & 1) != 0)
          {
LABEL_22:
            memset(buf, 0, sizeof(buf));
            v28 = (__int128 *)v274[0];
            v27 = v274[1];
            if (v274[0] == v274[1])
            {
              v237 = 0;
              v238 = 0;
              v234 = 0;
              v235 = 0;
              v236 = 0;
              goto LABEL_169;
            }
            v29 = 0;
            v30 = -1;
            while (1)
            {
              v31 = *(uint64_t **)v28;
              if (*(_QWORD *)v28)
              {
                ++v29;
                if (*(_QWORD *)buf == *(_QWORD *)&buf[8] || v29 == (v274[1] - v274[0]) >> 4)
                {
                  sub_18F623AB8((char **)buf, v28);
                }
                else if (*((_BYTE *)v31 + 64))
                {
                  if (v30 == -1 || v30 > 1)
                  {
                    if (*((_BYTE *)v31 + 96) && (*((_DWORD *)v31 + 30) | 2) == 3)
                      goto LABEL_46;
                    v32 = *v31;
                    if (*v31 && (a6 != 1 || (*(_DWORD *)(v32 + 20) & 0xFFFFFFFE) != 8) && *(_DWORD *)(v32 + 76) != 2)
                    {
                      v33 = *(_DWORD *)(v32 + 20);
                      v34 = sqrt(*((double *)v31 + 9) * *((double *)v31 + 9)+ *((double *)v31 + 10) * *((double *)v31 + 10));
                      if (v34 >= 50.0 || *((double *)v31 + 11) >= 30.0)
                      {
                        v35 = !((v33 < 0xA) & (7u >> v33));
                        if (v34 >= 100.0)
                          v35 = 1;
                        if (v35 || *((double *)v31 + 11) >= 40.0)
                        {
                          v30 = 0;
                          goto LABEL_28;
                        }
                      }
LABEL_46:
                      sub_18F623AB8((char **)buf, v28);
                    }
                    v30 = -1;
                    goto LABEL_28;
                  }
                  ++v30;
                }
              }
LABEL_28:
              if (++v28 == (__int128 *)v27)
              {
                v43 = *(__int128 **)buf;
                v42 = *(__int128 **)&buf[8];
                v237 = 0;
                v238 = 0;
                v234 = 0;
                v235 = 0;
                v236 = 0;
                if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
                  goto LABEL_169;
                v44 = 0;
                while (1)
                {
                  v45 = *(_QWORD *)v43;
                  if (!*(_QWORD *)v43)
                    goto LABEL_159;
                  ++v44;
                  if (v219 == v220 || a6 == 1 && v44 == (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 4)
                  {
                    sub_18F623AB8(&v219, v43);
                    goto LABEL_159;
                  }
                  v46 = v237;
                  if (!v237)
                  {
                    sub_18F623A40(&v237, (uint64_t *)v43);
                    v45 = *(_QWORD *)v43;
                    v46 = v237;
                  }
                  v47 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 4;
                  if (*(double *)(v45 + 16) - *(double *)(v46 + 16) < 3.0 && v47 > v44)
                  {
                    sub_18F623AB8((char **)&v234, v43);
                    sub_18F623A40(&v237, (uint64_t *)v43);
                    goto LABEL_159;
                  }
                  v50 = (uint64_t *)v234;
                  v49 = (uint64_t)v235;
                  if ((unint64_t)(v235 - (char *)v234) <= 0x2F && v47 != v44)
                  {
                    sub_18F623A40(&v237, (uint64_t *)v43);
                    v52 = v234;
                    for (j = (uint64_t)v235; (double *)j != v52; j = sub_18F5D6004(j - 16))
                      ;
                    v235 = (char *)v52;
                    sub_18F623AB8((char **)&v234, v43);
                    goto LABEL_159;
                  }
                  v213 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 4;
                  v232 = 0uLL;
                  v233 = 0;
                  v230 = 0;
                  v231 = 0;
                  if (v234 == (double *)v235)
                    goto LABEL_151;
                  v53 = 0.0;
                  do
                  {
                    v54 = (uint64_t *)*v50;
                    if (!*v50)
                      goto LABEL_140;
                    if (!v230 || (v55 = *(_QWORD **)v230) == 0)
                    {
                      sub_18F623A40(&v230, v50);
                      sub_18F623AB8((char **)&v232, (__int128 *)v50);
                      goto LABEL_140;
                    }
                    if ((unint64_t)(v235 - (char *)v234) > 0x3C0
                      || *(_QWORD *)*v54 == *v55 && *(_QWORD *)(*v54 + 8) == v55[1])
                    {
                      goto LABEL_136;
                    }
                    v56 = a6 == 1 ? sub_18F705728((uint64_t)v55, v54) : sub_18F705994((uint64_t)v55, v54);
                    if ((v56 & 1) != 0)
                      goto LABEL_136;
                    v227 = 0;
                    v228 = 0;
                    v229 = 0;
                    memset(v226, 0, sizeof(v226));
                    v57 = *(std::__shared_weak_count **)(v230 + 8);
                    v224 = *(_QWORD **)v230;
                    v225 = v57;
                    if (v57)
                    {
                      v58 = (unint64_t *)&v57->__shared_owners_;
                      do
                        v59 = __ldxr(v58);
                      while (__stxr(v59 + 1, v58));
                    }
                    v60 = sub_18F624A40(a4, &v224, (uint64_t)&v227, (uint64_t)v226, 1, 1000.0);
                    v61 = v225;
                    if (v225)
                    {
                      v62 = (unint64_t *)&v225->__shared_owners_;
                      do
                        v63 = __ldaxr(v62);
                      while (__stlxr(v63 - 1, v62));
                      if (!v63)
                      {
                        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                        std::__shared_weak_count::__release_weak(v61);
                      }
                    }
                    if (v60)
                    {
                      v64 = v227;
                      if (v227 == v228)
                      {
LABEL_118:
                        v212 = 0;
                      }
                      else
                      {
                        v65 = *(_QWORD **)*v50;
                        while (*v65 != *(_QWORD *)*v64 || v65[1] != *((_QWORD *)*v64 + 1))
                        {
                          v64 += 2;
                          if (v64 == v228)
                            goto LABEL_118;
                        }
                        v212 = 1;
                      }
                    }
                    else
                    {
                      v212 = 0;
                    }
                    if (a6 != 1)
                    {
                      v66 = *(std::__shared_weak_count **)(v230 + 8);
                      v222 = *(_QWORD **)v230;
                      v223 = v66;
                      if (v66)
                      {
                        v67 = (unint64_t *)&v66->__shared_owners_;
                        do
                          v68 = __ldxr(v67);
                        while (__stxr(v68 + 1, v67));
                      }
                      v69 = sub_18F624A40(a4, &v222, (uint64_t)&v227, (uint64_t)v226, 0, 1000.0);
                      v70 = v223;
                      if (v223)
                      {
                        v71 = (unint64_t *)&v223->__shared_owners_;
                        do
                          v72 = __ldaxr(v71);
                        while (__stlxr(v72 - 1, v71));
                        if (!v72)
                        {
                          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                          std::__shared_weak_count::__release_weak(v70);
                        }
                      }
                      if (v69)
                      {
                        v73 = v227;
                        if (v227 != v228)
                        {
                          v74 = *(_QWORD **)*v50;
                          while (*v74 != *(_QWORD *)*v73 || v74[1] != *((_QWORD *)*v73 + 1))
                          {
                            v73 += 2;
                            if (v73 == v228)
                              goto LABEL_135;
                          }
                          v241 = v226;
                          sub_18F62AB98((void ***)&v241);
                          v226[0] = (void **)&v227;
                          sub_18F62AB98(v226);
LABEL_136:
                          v75 = sub_18F5BD064((double *)a1, *(double *)(*v50 + 24), *(double *)(*v50 + 32), *(double *)(v230 + 24), *(double *)(v230 + 32), 0.0);
                          sub_18F623AB8((char **)&v232, (__int128 *)v50);
                          v53 = v53 + v75;
                          v76 = *((_QWORD *)v235 - 2);
                          if (v76 && *(double *)(*v50 + 16) == *(double *)(v76 + 16))
                            sub_18F701134((uint64_t)&v232, &v219, a6, v53);
                          goto LABEL_139;
                        }
                      }
                    }
LABEL_135:
                    v241 = v226;
                    sub_18F62AB98((void ***)&v241);
                    v226[0] = (void **)&v227;
                    sub_18F62AB98(v226);
                    if ((v212 & 1) != 0)
                      goto LABEL_136;
                    sub_18F701134((uint64_t)&v232, &v219, a6, v53);
                    v77 = *((_QWORD *)&v232 + 1);
                    v78 = v232;
                    while (v77 != v78)
                      v77 = sub_18F5D6004(v77 - 16);
                    *((_QWORD *)&v232 + 1) = v78;
                    v53 = 0.0;
                    sub_18F623AB8((char **)&v232, (__int128 *)v50);
LABEL_139:
                    sub_18F623A40(&v230, v50);
LABEL_140:
                    v50 += 2;
                  }
                  while (v50 != (uint64_t *)v49);
                  v79 = v234;
                  v49 = (uint64_t)v235;
                  if (v235 != (char *)v234)
                  {
                    do
                    {
                      v49 -= 16;
                      sub_18F5D6004(v49);
                    }
                    while ((double *)v49 != v79);
                    v49 = (uint64_t)v79;
                  }
LABEL_151:
                  v235 = (char *)v49;
                  sub_18F623AB8((char **)&v234, v43);
                  sub_18F623A40(&v237, (uint64_t *)v43);
                  if (v213 == v44)
                    sub_18F623AB8(&v219, v43);
                  v80 = v231;
                  if (v231)
                  {
                    v81 = (unint64_t *)&v231->__shared_owners_;
                    do
                      v82 = __ldaxr(v81);
                    while (__stlxr(v82 - 1, v81));
                    if (!v82)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  v227 = (void **)&v232;
                  sub_18F62AB98(&v227);
LABEL_159:
                  if (++v43 == v42)
                  {
LABEL_169:
                    *(_QWORD *)&v232 = &v234;
                    sub_18F62AB98((void ***)&v232);
                    v84 = v238;
                    if (v238)
                    {
                      v85 = (unint64_t *)&v238->__shared_owners_;
                      do
                        v86 = __ldaxr(v85);
                      while (__stlxr(v86 - 1, v85));
                      if (!v86)
                      {
                        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                        std::__shared_weak_count::__release_weak(v84);
                      }
                    }
                    v234 = (double *)buf;
                    sub_18F62AB98((void ***)&v234);
                    v40 = 1;
                    goto LABEL_175;
                  }
                }
              }
            }
          }
        }
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
        v83 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v83, OS_LOG_TYPE_DEBUG, "CLTSP,snapUpsampledLocation,quickMapMatcher returned error", buf, 2u);
        }
        if (!sub_18F5C4AE0(115, 2))
        {
LABEL_167:
          v40 = 0;
          goto LABEL_175;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
      }
      else
      {
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
        v41 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v41, OS_LOG_TYPE_DEBUG, "CLTSP,snapUpsampledLocation,unable to initialize location array", buf, 2u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_167;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
      }
      LOWORD(v234) = 0;
      v211 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "static BOOL CLTripSegmentUtilities::snapUpsampledLocations(CLDistanceCalc &, NSArray<CLTripSegmentLocation *> * _Nonnull, std::vector<CLGeoMapSnapDataPtr> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const CLTripSegmentModeOfTransport, BOOL)", "CoreLocation: %s\n", v211);
      if (v211 != (char *)buf)
        free(v211);
      v40 = 0;
LABEL_175:
      *(_QWORD *)buf = (char *)&v242[2] + 8;
      sub_18F62AB98((void ***)buf);
      *(_QWORD *)buf = v274;
      sub_18F62AB98((void ***)buf);
      v6 = a5;
      if (!a5)
        goto LABEL_179;
    }
    else
    {
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
      v38 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v38, OS_LOG_TYPE_DEBUG, "CLTSP,snapUpsampledLocation,empty location array", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
        LOWORD(v242[0]) = 0;
        v210 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "static BOOL CLTripSegmentUtilities::snapUpsampledLocations(CLDistanceCalc &, NSArray<CLTripSegmentLocation *> * _Nonnull, std::vector<CLGeoMapSnapDataPtr> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const CLTripSegmentModeOfTransport, BOOL)", "CoreLocation: %s\n", v210);
        if (v210 != (char *)buf)
          free(v210);
      }
      v40 = 0;
      if (!v6)
      {
LABEL_179:
        if (!v40)
          goto LABEL_394;
        goto LABEL_180;
      }
    }
    v87 = (unint64_t *)&v6->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (v88)
      goto LABEL_179;
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v40)
    {
LABEL_180:
      memset(v242, 0, sizeof(v242));
      v92 = objc_msgSend_countByEnumeratingWithState_objects_count_(a3, v39, (uint64_t)v242, (uint64_t)buf, 16);
      if (v92)
      {
        v93 = **(_QWORD **)&v242[1];
        do
        {
          for (k = 0; k != v92; ++k)
          {
            if (**(_QWORD **)&v242[1] != v93)
              objc_enumerationMutation(a3);
            v95 = *(void **)(*((_QWORD *)&v242[0] + 1) + 8 * k);
            if (!objc_msgSend_isGPSLocationType(v95, v89, v90, v91)
              || (objc_msgSend_isOriginalLocationType(v95, v89, v90, v91) & 1) == 0)
            {
              v96 = (void *)objc_msgSend_timestamp(v95, v89, v90, v91);
              objc_msgSend_timeIntervalSinceReferenceDate(v96, v97, v98, v99);
              for (m = v219; ; m += 16)
              {
                if (m == v220)
                  goto LABEL_213;
                v102 = *(char **)m;
                if (*(_QWORD *)m)
                {
                  if (vabdd_f64(*((double *)v102 + 2), v100) < 0.001)
                    break;
                }
              }
              v274[0] = *(char **)m;
              v103 = (char *)*((_QWORD *)m + 1);
              v274[1] = v103;
              if (v103)
              {
                v104 = (unint64_t *)(v103 + 8);
                do
                  v105 = __ldxr(v104);
                while (__stxr(v105 + 1, v104));
              }
              v106 = *(_QWORD *)v102;
              if (*(_QWORD *)v102)
              {
                v108 = *(double *)(v106 + 120);
                v107 = *(double *)(v106 + 128);
                if (v108 > 0.0)
                {
                  v109 = *((double *)v102 + 6);
                  v110 = v109 < 0.0 || v109 > 1.0;
                  if (v110 || v107 <= 0.0)
                    v107 = *(double *)(v106 + 120);
                  else
                    v107 = v109 * v107 + v108 * (1.0 - v109);
                  goto LABEL_206;
                }
                if (v107 > 0.0)
                {
LABEL_206:
                  if (v107 > 0.0)
                    objc_msgSend_updateAltitude_andAltitudeAccuracy_(v95, v89, v90, v91);
                }
              }
              if (v103)
              {
                v111 = (unint64_t *)(v103 + 8);
                do
                  v112 = __ldaxr(v111);
                while (__stlxr(v112 - 1, v111));
                if (!v112)
                {
                  (*(void (**)(char *))(*(_QWORD *)v103 + 16))(v103);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v103);
                }
              }
              continue;
            }
LABEL_213:
            ;
          }
          v92 = objc_msgSend_countByEnumeratingWithState_objects_count_(a3, v89, (uint64_t)v242, (uint64_t)buf, 16);
        }
        while (v92);
      }
      v113 = *(_QWORD *)(a1 + 40);
      v214 = (uint64_t *)(a1 + 40);
      v114 = *(_QWORD *)(a1 + 48);
      while (v114 != v113)
      {
        v114 -= 24;
        *(_QWORD *)buf = v114;
        sub_18F62AB98((void ***)buf);
      }
      *(_QWORD *)(a1 + 48) = v113;
      v234 = 0;
      v235 = 0;
      memset(v274, 0, 24);
      v115 = v219;
      if (v220 == v219)
      {
LABEL_310:
        *(_QWORD *)buf = v274;
        sub_18F62AB98((void ***)buf);
        v165 = (std::__shared_weak_count *)v235;
        if (v235)
        {
          v166 = (unint64_t *)(v235 + 8);
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
            std::__shared_weak_count::__release_weak(v165);
          }
        }
        v169 = v219;
        for (n = (uint64_t)v220; (char *)n != v169; n = sub_18F5D6004(n - 16))
          ;
        v220 = v169;
        v170 = (uint64_t **)v242 + 1;
        *((_QWORD *)&v242[0] + 1) = 0;
        *(_QWORD *)&v242[1] = 0;
        *(_QWORD *)&v242[0] = (char *)v242 + 8;
        v171 = *(char ***)(a1 + 40);
        if (*(char ***)(a1 + 48) == v171)
          goto LABEL_393;
        v172 = 0;
        v173 = -1;
        v174 = 4;
        v175 = 4;
        do
        {
          v176 = &v171[3 * v172];
          if (*v176 != v176[1])
          {
            v177 = *(uint64_t **)*v176;
            if (v177)
            {
              v178 = *v177;
              if (v178)
              {
                v179 = *(int *)(v178 + 20);
                if (v179 > 9)
                  v180 = 4;
                else
                  v180 = dword_18F775BE0[v179];
                if (v175 == 4)
                {
                  v175 = v180;
                }
                else
                {
                  if (v174 != 4)
                  {
                    if (v180 == v175 || v180 != v174)
                    {
                      v181 = (uint64_t *)*((_QWORD *)&v242[0] + 1);
                      v182 = v170;
                      v216 = v170;
                      if (!*((_QWORD *)&v242[0] + 1))
                        goto LABEL_340;
                      do
                      {
                        while (1)
                        {
                          v170 = (uint64_t **)v181;
                          v183 = *((_DWORD *)v181 + 7);
                          if (v183 <= v173)
                            break;
                          v181 = *v170;
                          v182 = v170;
                          if (!*v170)
                            goto LABEL_340;
                        }
                        if (v183 >= v173)
                        {
                          v185 = v170;
                          goto LABEL_343;
                        }
                        v181 = v170[1];
                      }
                      while (v181);
                      v182 = v170 + 1;
LABEL_340:
                      v185 = operator new(0x28uLL);
                      v185[7] = v173;
                      *((_BYTE *)v185 + 32) = 0;
                      *(_QWORD *)v185 = 0;
                      *((_QWORD *)v185 + 1) = 0;
                      *((_QWORD *)v185 + 2) = v170;
                      *v182 = (uint64_t *)v185;
                      v184 = (uint64_t *)v185;
                      if (**(_QWORD **)&v242[0])
                      {
                        *(_QWORD *)&v242[0] = **(_QWORD **)&v242[0];
                        v184 = *v182;
                      }
                      sub_18F62A74C(*((uint64_t **)&v242[0] + 1), v184);
                      ++*(_QWORD *)&v242[1];
LABEL_343:
                      v170 = v216;
                      *((_BYTE *)v185 + 32) = 1;
                      v173 = -1;
                    }
                    else
                    {
                      v173 = -1;
                      v175 = v174;
                    }
                  }
                  v186 = v180 == v175;
                  if (v180 == v175)
                    v175 = v180;
                  else
                    v173 = v172;
                  if (v186)
                    v174 = 4;
                  else
                    v174 = v180;
                }
              }
            }
          }
          ++v172;
          v171 = *(char ***)(a1 + 40);
          v187 = *(_QWORD *)(a1 + 48);
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v187 - (uint64_t)v171) >> 3) > v172);
        if (v171 == (char **)v187)
          goto LABEL_393;
        v188 = 0;
LABEL_353:
        v189 = (uint64_t *)*((_QWORD *)&v242[0] + 1);
        if (!*((_QWORD *)&v242[0] + 1))
        {
LABEL_358:
          v171 += 3;
          goto LABEL_359;
        }
        while (1)
        {
          v190 = *((_DWORD *)v189 + 7);
          if (v188 >= v190)
          {
            if (v190 >= v188)
            {
              v191 = *v171;
              v192 = v171[1];
              if (*v171 != v192 && *(_QWORD *)v191 && (v193 = **(_QWORD **)v191) != 0)
              {
                v194 = *(_DWORD *)(v193 + 20);
                v195 = 0;
                v196 = 2;
                switch(v194)
                {
                  case 0:
                  case 1:
                  case 2:
                    goto LABEL_367;
                  case 3:
                    v195 = 1;
LABEL_367:
                    v196 = v195;
                    if ((unint64_t)(v192 - v191) > 0x90)
                      goto LABEL_371;
                    goto LABEL_370;
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                    goto LABEL_370;
                  case 8:
                  case 9:
                    v196 = 3;
                    goto LABEL_370;
                  default:
                    v196 = 4;
LABEL_370:
                    if ((unint64_t)(v192 - v191) < 0x1D1)
                      goto LABEL_377;
LABEL_371:
                    if (qword_1EE172168 != -1)
                      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                    v197 = qword_1EE172170;
                    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
                    {
                      v198 = *(_QWORD **)*v171;
                      v199 = v198[2];
                      LODWORD(v198) = *(_DWORD *)(*v198 + 20);
                      *(_DWORD *)buf = 134349568;
                      *(_QWORD *)&buf[4] = v199;
                      *(_WORD *)&buf[12] = 1026;
                      *(_DWORD *)&buf[14] = (_DWORD)v198;
                      *(_WORD *)&buf[18] = 1026;
                      *(_DWORD *)&buf[20] = v196;
                      _os_log_impl(&dword_18F5B3000, v197, OS_LOG_TYPE_INFO, "CLTSP,UpsampledLocFiltering,skip erasing major or secondary road snaps,%{public}.2lf,locFRC,%{public}d,clrc,%{public}d", buf, 0x18u);
                    }
                    if (sub_18F5C4AE0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1EE172168 != -1)
                        dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                      v207 = *(_QWORD **)*v171;
                      v208 = (char *)v207[2];
                      LODWORD(v207) = *(_DWORD *)(*v207 + 20);
                      LODWORD(v274[0]) = 134349568;
                      *(char **)((char *)v274 + 4) = v208;
                      WORD2(v274[1]) = 1026;
                      *(_DWORD *)((char *)&v274[1] + 6) = (_DWORD)v207;
                      WORD1(v274[2]) = 1026;
                      HIDWORD(v274[2]) = v196;
                      v209 = (char *)_os_log_send_and_compose_impl();
                      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLUpsampledTripLocationProcessor::processUpsampledLocations(const std::string &, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v209);
                      if (v209 != (char *)buf)
                        free(v209);
                    }
                    v171 += 3;
                    v187 = *(_QWORD *)(a1 + 48);
                    break;
                }
              }
              else
              {
LABEL_377:
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v200 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
                {
                  v201 = *(_QWORD **)*v171;
                  v202 = v201[2];
                  LODWORD(v201) = *(_DWORD *)(*v201 + 20);
                  *(_DWORD *)buf = 134349312;
                  *(_QWORD *)&buf[4] = v202;
                  *(_WORD *)&buf[12] = 1026;
                  *(_DWORD *)&buf[14] = (_DWORD)v201;
                  _os_log_impl(&dword_18F5B3000, v200, OS_LOG_TYPE_INFO, "CLTSP,UpsampledLocFiltering,erased,%{public}.2lf,locFRC,%{public}d", buf, 0x12u);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                  v204 = *(_QWORD **)*v171;
                  v205 = (char *)v204[2];
                  LODWORD(v204) = *(_DWORD *)(*v204 + 20);
                  LODWORD(v274[0]) = 134349312;
                  *(char **)((char *)v274 + 4) = v205;
                  WORD2(v274[1]) = 1026;
                  *(_DWORD *)((char *)&v274[1] + 6) = (_DWORD)v204;
                  v206 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLUpsampledTripLocationProcessor::processUpsampledLocations(const std::string &, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v206);
                  if (v206 != (char *)buf)
                    free(v206);
                }
                v187 = sub_18F701540((uint64_t)(v171 + 3), *(_QWORD *)(a1 + 48), (uint64_t)v171);
                v203 = *(_QWORD *)(a1 + 48);
                while (v203 != v187)
                {
                  v203 -= 24;
                  *(_QWORD *)buf = v203;
                  sub_18F62AB98((void ***)buf);
                }
                *(_QWORD *)(a1 + 48) = v187;
              }
LABEL_359:
              ++v188;
              if (v171 == (char **)v187)
              {
LABEL_393:
                sub_18F6EC574(*((_QWORD **)&v242[0] + 1));
                goto LABEL_394;
              }
              goto LABEL_353;
            }
            ++v189;
          }
          v189 = (uint64_t *)*v189;
          if (!v189)
            goto LABEL_358;
        }
      }
      v116 = 0;
      while (1)
      {
        v117 = *(_OWORD *)&v115[16 * v116];
        v232 = v117;
        if (*((_QWORD *)&v117 + 1))
        {
          v118 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
          do
            v119 = __ldxr(v118);
          while (__stxr(v119 + 1, v118));
        }
        if (!(_QWORD)v117 || !*(_QWORD *)v117)
        {
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
          v123 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
          {
            if (a2[23] >= 0)
              v124 = (uint64_t *)a2;
            else
              v124 = *(uint64_t **)a2;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = v124;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = v116;
            _os_log_impl(&dword_18F5B3000, v123, OS_LOG_TYPE_ERROR, "CLTSP,MI,snappedIILocationContinuous,road is nullptr,tripSegmentID,%{public}s,index,%{public}d", buf, 0x12u);
          }
          if (!sub_18F5C4AE0(115, 0))
            goto LABEL_289;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
          if (a2[23] >= 0)
            v125 = (uint64_t *)a2;
          else
            v125 = *(uint64_t **)a2;
LABEL_245:
          LODWORD(v242[0]) = 136446466;
          *(_QWORD *)((char *)v242 + 4) = v125;
          WORD6(v242[0]) = 1026;
          *(_DWORD *)((char *)v242 + 14) = v116;
          v126 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "void CLUpsampledTripLocationProcessor::makeSegments(const std::string &, const std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v126);
          if (v126 != (char *)buf)
            free(v126);
          goto LABEL_289;
        }
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
        v120 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
        {
          v121 = *(uint64_t **)a2;
          if (a2[23] >= 0)
            v121 = (uint64_t *)a2;
          if (*(_QWORD *)v232)
            v122 = *(_DWORD *)(*(_QWORD *)v232 + 20);
          else
            v122 = -1;
          v127 = *(_QWORD *)(v232 + 16);
          v128 = *(_QWORD *)(v232 + 24);
          v129 = *(_QWORD *)(v232 + 32);
          v130 = *(_QWORD *)(v232 + 40);
          v131 = *(_QWORD *)(v232 + 48);
          v132 = *(_QWORD *)(v232 + 56);
          v133 = *(_QWORD *)(v232 + 72);
          v134 = *(_QWORD *)(v232 + 80);
          v135 = *(_QWORD *)(v232 + 88);
          v136 = *(unsigned __int8 *)(v232 + 64);
          *(_DWORD *)buf = 136449027;
          *(_QWORD *)&buf[4] = v121;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v127;
          *(_WORD *)&buf[22] = 2049;
          v255 = v128;
          v256 = 2049;
          v257 = v129;
          v258 = 2049;
          v259 = v130;
          v260 = 2050;
          v261 = v131;
          v262 = 2050;
          v263 = v132;
          v264 = 2050;
          v265 = v134;
          v266 = 2050;
          v267 = v133;
          v268 = 2050;
          v269 = v135;
          v270 = 1026;
          v271 = v136;
          v272 = 1026;
          v273 = v122;
          _os_log_impl(&dword_18F5B3000, v120, OS_LOG_TYPE_DEBUG, "CLTSP,MI,snappedIILocationContinuous,id,%{public}s,time,%{public}.3lf,snapLL,%{private}.7lf,%{private}.7lf,rawCourse,%{private}.3lf,projection,%{public}.8lf,score,%{public}.12lf,dE,%{public}.2lf,dN,%{public}.2lf,dCourse,%{public}.2lf,valid,%{public}d,frc,%{public}d", buf, 0x72u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
          if (a2[23] >= 0)
            v151 = (uint64_t *)a2;
          else
            v151 = *(uint64_t **)a2;
          v152 = *(_QWORD *)(v232 + 16);
          v153 = *(_QWORD *)(v232 + 24);
          v155 = *(_QWORD *)(v232 + 32);
          v154 = *(_QWORD *)(v232 + 40);
          v157 = *(_QWORD *)(v232 + 48);
          v156 = *(_QWORD *)(v232 + 56);
          v158 = *(_QWORD *)(v232 + 72);
          v159 = *(_QWORD *)(v232 + 80);
          v160 = *(_QWORD *)(v232 + 88);
          v161 = *(unsigned __int8 *)(v232 + 64);
          if (*(_QWORD *)v232)
            v162 = *(_DWORD *)(*(_QWORD *)v232 + 20);
          else
            v162 = -1;
          LODWORD(v242[0]) = 136449027;
          *(_QWORD *)((char *)v242 + 4) = v151;
          WORD6(v242[0]) = 2050;
          *(_QWORD *)((char *)v242 + 14) = v152;
          WORD3(v242[1]) = 2049;
          *((_QWORD *)&v242[1] + 1) = v153;
          LOWORD(v242[2]) = 2049;
          *(_QWORD *)((char *)&v242[2] + 2) = v155;
          WORD5(v242[2]) = 2049;
          *(_QWORD *)((char *)&v242[2] + 12) = v154;
          WORD2(v242[3]) = 2050;
          *(_QWORD *)((char *)&v242[3] + 6) = v157;
          HIWORD(v242[3]) = 2050;
          v243 = v156;
          v244 = 2050;
          v245 = v159;
          v246 = 2050;
          v247 = v158;
          v248 = 2050;
          v249 = v160;
          v250 = 1026;
          v251 = v161;
          v252 = 1026;
          v253 = v162;
          v163 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "void CLUpsampledTripLocationProcessor::makeSegments(const std::string &, const std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v163);
          if (v163 != (char *)buf)
            free(v163);
        }
        if (!v234)
          break;
        if (!*(_QWORD *)v234)
        {
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
          v139 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
          {
            if (a2[23] >= 0)
              v140 = (uint64_t *)a2;
            else
              v140 = *(uint64_t **)a2;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = v140;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = v116;
            _os_log_impl(&dword_18F5B3000, v139, OS_LOG_TYPE_ERROR, "CLTSP,MI,snappedIILocationContinuous,prevLocation road is nullptr,tripSegmentID,%{public}s,index,%{public}d", buf, 0x12u);
          }
          if (!sub_18F5C4AE0(115, 0))
            goto LABEL_289;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
          if (a2[23] >= 0)
            v125 = (uint64_t *)a2;
          else
            v125 = *(uint64_t **)a2;
          goto LABEL_245;
        }
        if (vabdd_f64(*(double *)(v232 + 16), v234[2]) >= 3.0
          || ((v137 = *(int *)(*(_QWORD *)v232 + 20), v137 > 9)
            ? (v138 = 4)
            : (v138 = dword_18F775BE0[v137]),
              (v141 = *(int *)(*(_QWORD *)v234 + 20), v141 > 9)
            ? (v142 = 4)
            : (v142 = dword_18F775BE0[v141]),
              v138 != v142
           || (sub_18F623AB8(v274, &v232), sub_18F623A40(&v234, (uint64_t *)&v232), ((v220 - v219) >> 4) - 1 == v116)))
        {
          if (v274[1] != v274[0])
          {
            v143 = *(_QWORD *)(a1 + 48);
            if (v143 >= *(_QWORD *)(a1 + 56))
            {
              v144 = sub_18F6CA50C(v214, (_QWORD **)v274);
            }
            else
            {
              sub_18F6CA4BC((uint64_t)v214, (_QWORD **)v274);
              v144 = v143 + 24;
            }
            *(_QWORD *)(a1 + 48) = v144;
            sub_18F623A40(&v234, (uint64_t *)&v232);
            v147 = v274[0];
            for (ii = v274[1]; ii != v147; ii = (char *)sub_18F5D6004((uint64_t)(ii - 16)))
              ;
            v274[1] = v147;
            sub_18F623AB8(v274, &v232);
            goto LABEL_289;
          }
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
          v145 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v145, OS_LOG_TYPE_ERROR, "CLTSP,MI,unexpected,location chunk empty", buf, 2u);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
            LOWORD(v242[0]) = 0;
            v164 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "void CLUpsampledTripLocationProcessor::makeSegments(const std::string &, const std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v164);
            if (v164 != (char *)buf)
              free(v164);
          }
          goto LABEL_283;
        }
LABEL_289:
        v148 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
        if (*((_QWORD *)&v232 + 1))
        {
          v149 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
          do
            v150 = __ldaxr(v149);
          while (__stlxr(v150 - 1, v149));
          if (!v150)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
          }
        }
        ++v116;
        v115 = v219;
        if (v116 >= (v220 - v219) >> 4)
          goto LABEL_310;
      }
      sub_18F623AB8(v274, &v232);
LABEL_283:
      sub_18F623A40(&v234, (uint64_t *)&v232);
      goto LABEL_289;
    }
LABEL_394:
    *(_QWORD *)buf = &v219;
    sub_18F62AB98((void ***)buf);
  }
  else
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    v36 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v36, OS_LOG_TYPE_ERROR, "CLTSP,Unexpected,invalid geometry pointer,processUpsampledLocations", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
      LOWORD(v242[0]) = 0;
      v37 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLUpsampledTripLocationProcessor::processUpsampledLocations(const std::string &, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v37);
      if (v37 != (char *)buf)
        free(v37);
    }
  }
}

void sub_18F6F60D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void **a63)
{
  uint64_t v63;

  a63 = a13;
  sub_18F62AB98(&a63);
  a63 = (void **)(v63 - 160);
  sub_18F62AB98(&a63);
  sub_18F5D6004((uint64_t)&a18);
  *(_QWORD *)(v63 - 160) = &a20;
  sub_18F62AB98((void ***)(v63 - 160));
  _Unwind_Resume(a1);
}

void sub_18F6F6290(_QWORD *a1, const char *a2, char a3, void *a4, uint64_t **a5, __int128 ***a6, uint64_t *a7)
{
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char v45;
  char v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  NSObject *v54;
  char *v55;
  double **v56;
  double **v57;
  uint64_t v58;
  double *v59;
  double v60;
  NSObject *v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 *v73;
  __int128 *v74;
  uint64_t *v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  int v85;
  NSObject *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  _BOOL4 v98;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  char *v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  double v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 **v120;
  __int128 **v121;
  __int128 *v122;
  __int128 *v123;
  uint64_t v124;
  double v125;
  _BOOL4 v126;
  BOOL v127;
  NSObject *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  std::string::size_type **v158;
  char *v159;
  uint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t *v170;
  int v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  __int128 *v178;
  __int128 *v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  std::string::size_type **v185;
  std::string::size_type **v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  _BYTE v192[22];
  __int16 v193;
  uint64_t v194;
  __int16 v195;
  uint64_t v196;
  __int16 v197;
  uint64_t v198;
  __int16 v199;
  uint64_t v200;
  __int16 v201;
  uint64_t v202;
  __int16 v203;
  uint64_t v204;
  __int16 v205;
  uint64_t v206;
  __int16 v207;
  uint64_t v208;
  __int16 v209;
  int v210;
  __int16 v211;
  int v212;
  __int128 v213;
  uint64_t v214;
  uint8_t v215[128];
  _BYTE buf[22];
  __int16 v217;
  uint64_t v218;
  __int16 v219;
  uint64_t v220;
  __int16 v221;
  uint64_t v222;
  __int16 v223;
  uint64_t v224;
  __int16 v225;
  uint64_t v226;
  __int16 v227;
  uint64_t v228;
  __int16 v229;
  uint64_t v230;
  __int16 v231;
  uint64_t v232;
  __int16 v233;
  int v234;
  __int16 v235;
  int v236;
  uint64_t v237;

  v237 = *MEMORY[0x1E0C80C00];
  if (*a7)
  {
    v190 = 0u;
    v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(a4, a2, (uint64_t)&v188, (uint64_t)v215, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v189;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v189 != v17)
            objc_enumerationMutation(a4);
          v19 = *(void **)(*((_QWORD *)&v188 + 1) + 8 * i);
          objc_msgSend_course(v19, v13, v14, v15);
          objc_msgSend_courseAccuracy(v19, v20, v21, v22);
          objc_msgSend_horizontalAccuracy(v19, v23, v24, v25);
          objc_msgSend_course(v19, v26, v27, v28);
          objc_msgSend_updateCourse_andCourseAccuracy_(v19, v29, v30, v31);
        }
        v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(a4, v13, (uint64_t)&v188, (uint64_t)v215, 16);
      }
      while (v16);
    }
    v182 = 0;
    v183 = 0;
    v181 = xmmword_18F771F40;
    v184 = 0x3FF0000000000000;
    v185 = 0;
    v186 = 0;
    v187 = 0;
    sub_18F67EBBC((uint64_t)&v181, a4, v14, v15);
    v178 = 0;
    v179 = 0;
    v180 = 0;
    if ((char *)v186 - (char *)v185 == 16)
    {
      v32 = *((_DWORD *)*v185 + 22);
      v33 = v32 > 0xD;
      v34 = (1 << v32) & 0x2810;
      if (!v33 && v34 != 0)
      {
        v36 = *a5;
        v37 = a5[1];
        if (*a5 == v37)
        {
LABEL_18:
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)buf = 0;
        }
        else
        {
          while (1)
          {
            v38 = *v36;
            if (*v36)
            {
              if (vabdd_f64(*(double *)(v38 + 16), *(double *)*v185) < 0.001)
                break;
            }
            v36 += 2;
            if (v36 == v37)
              goto LABEL_18;
          }
          *(_QWORD *)buf = *v36;
          v70 = v36[1];
          *(_QWORD *)&buf[8] = v70;
          if (v70)
          {
            v71 = (unint64_t *)(v70 + 8);
            do
              v72 = __ldxr(v71);
            while (__stxr(v72 + 1, v71));
          }
          if (*(_QWORD *)v38)
            sub_18F623AB8((char **)&v178, (__int128 *)buf);
        }
        v39 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v40 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        if (v178 != v179)
          goto LABEL_87;
      }
    }
    if ((a3 & 1) != 0)
    {
      v42 = a7[1];
      v176 = *a7;
      v177 = (std::__shared_weak_count *)v42;
      if (v42)
      {
        v43 = (unint64_t *)(v42 + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = sub_18F6D4F50(&v185, (char **)&v178, &v176);
      v46 = v45;
      v47 = v177;
      if (!v177)
        goto LABEL_33;
      p_shared_owners = (unint64_t *)&v177->__shared_owners_;
      do
        v49 = __ldaxr(p_shared_owners);
      while (__stlxr(v49 - 1, p_shared_owners));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        if ((v46 & 1) != 0)
          goto LABEL_87;
      }
      else
      {
LABEL_33:
        if ((v45 & 1) != 0)
          goto LABEL_87;
      }
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
      v50 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
      {
        v51 = **v185;
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v51;
        _os_log_impl(&dword_18F5B3000, v50, OS_LOG_TYPE_ERROR, "CLTSP,MI,%{public}.1lf,unable to compute snap using particle mapmatcher", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
        v52 = **v185;
        *(_DWORD *)v192 = 134349056;
        *(_QWORD *)&v192[4] = v52;
        v53 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "void CLTripLocationFilter::processLocationChunk(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<std::vector<CLGeoMapSnapDataPtr>> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v53);
        if (v53 != buf)
          free(v53);
      }
LABEL_87:
      v213 = 0uLL;
      v214 = 0;
      v73 = v178;
      v74 = v179;
      v75 = &qword_18F775000;
      if (v178 == v179)
      {
        v112 = 0;
      }
      else
      {
        v76 = a1[6];
        v77 = -1.0;
        if (a1[5] != v76)
        {
          v79 = *(_QWORD *)(v76 - 24);
          v78 = *(_QWORD *)(v76 - 16);
          if (v79 != v78)
          {
            v80 = *(_QWORD *)(v78 - 16);
            if (v80)
              v77 = *(double *)(v80 + 16);
          }
        }
        do
        {
          v81 = *(_QWORD *)v73;
          if (*(_QWORD *)v73)
          {
            if (*(_BYTE *)(v81 + 64)
              && (v82 = *(double *)(v81 + 16), v82 > 0.0)
              && *(_QWORD *)v81
              && ((v84 = *(double *)(v81 + 24), v83 = *(double *)(v81 + 32), fabs(v84) >= 0.00003)
               || fabs(v83) >= 0.00003))
            {
              v98 = v77 < 0.0;
              if (v82 > v77)
                v98 = 1;
              v85 = -1;
              if (v83 >= -180.0 && v84 <= 90.0 && v84 >= -90.0 && v83 <= 180.0 && v98)
              {
                sub_18F623AB8((char **)&v213, v73);
                v85 = *(_DWORD *)(**(_QWORD **)v73 + 20);
              }
            }
            else
            {
              v85 = -1;
            }
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
            v86 = qword_1EE172170;
            if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
            {
              if (a2[23] >= 0)
                v87 = (uint64_t *)a2;
              else
                v87 = *(uint64_t **)a2;
              v88 = *(_QWORD *)(*(_QWORD *)v73 + 16);
              v89 = *(_QWORD *)(*(_QWORD *)v73 + 24);
              v90 = *(_QWORD *)(*(_QWORD *)v73 + 32);
              v91 = *(_QWORD *)(*(_QWORD *)v73 + 40);
              v92 = *(_QWORD *)(*(_QWORD *)v73 + 48);
              v93 = *(_QWORD *)(*(_QWORD *)v73 + 56);
              v95 = *(_QWORD *)(*(_QWORD *)v73 + 72);
              v94 = *(_QWORD *)(*(_QWORD *)v73 + 80);
              v96 = *(_QWORD *)(*(_QWORD *)v73 + 88);
              v97 = *(unsigned __int8 *)(*(_QWORD *)v73 + 64);
              *(_DWORD *)buf = 136449027;
              *(_QWORD *)&buf[4] = v87;
              *(_WORD *)&buf[12] = 2050;
              *(_QWORD *)&buf[14] = v88;
              v217 = 2049;
              v218 = v89;
              v219 = 2049;
              v220 = v90;
              v221 = 2049;
              v222 = v91;
              v223 = 2050;
              v224 = v92;
              v225 = 2050;
              v226 = v93;
              v227 = 2050;
              v228 = v94;
              v229 = 2050;
              v230 = v95;
              v231 = 2050;
              v232 = v96;
              v233 = 1026;
              v234 = v97;
              v235 = 1026;
              v236 = v85;
              _os_log_impl(&dword_18F5B3000, v86, OS_LOG_TYPE_DEBUG, "CLTSP,MI,snappedGPSLocation,id,%{public}s,time,%{public}.3lf,snapLL,%{private}.7lf,%{private}.7lf,rawCourse,%{private}.3lf,projection,%{public}.8lf,score,%{public}.12lf,dE,%{public}.2lf,dN,%{public}.2lf,dCourse,%{public}.2lf,valid,%{public}d,frc,%{public}d", buf, 0x72u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
              if (a2[23] >= 0)
                v100 = (uint64_t *)a2;
              else
                v100 = *(uint64_t **)a2;
              v101 = *(_QWORD *)(*(_QWORD *)v73 + 16);
              v102 = *(_QWORD *)(*(_QWORD *)v73 + 24);
              v103 = *(_QWORD *)(*(_QWORD *)v73 + 32);
              v104 = *(_QWORD *)(*(_QWORD *)v73 + 40);
              v105 = *(_QWORD *)(*(_QWORD *)v73 + 48);
              v106 = *(_QWORD *)(*(_QWORD *)v73 + 56);
              v108 = *(_QWORD *)(*(_QWORD *)v73 + 72);
              v107 = *(_QWORD *)(*(_QWORD *)v73 + 80);
              v109 = *(_QWORD *)(*(_QWORD *)v73 + 88);
              v110 = *(unsigned __int8 *)(*(_QWORD *)v73 + 64);
              *(_DWORD *)v192 = 136449027;
              *(_QWORD *)&v192[4] = v100;
              *(_WORD *)&v192[12] = 2050;
              *(_QWORD *)&v192[14] = v101;
              v193 = 2049;
              v194 = v102;
              v195 = 2049;
              v196 = v103;
              v197 = 2049;
              v198 = v104;
              v199 = 2050;
              v200 = v105;
              v201 = 2050;
              v202 = v106;
              v203 = 2050;
              v204 = v107;
              v205 = 2050;
              v206 = v108;
              v207 = 2050;
              v208 = v109;
              v209 = 1026;
              v210 = v110;
              v211 = 1026;
              v212 = v85;
              v111 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "void CLTripLocationFilter::processLocationChunk(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<std::vector<CLGeoMapSnapDataPtr>> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v111);
              if (v111 != buf)
                free(v111);
            }
          }
          ++v73;
        }
        while (v73 != v74);
        v112 = v213;
        if ((_QWORD)v213 != *((_QWORD *)&v213 + 1))
        {
          v113 = 0;
          v75 = &qword_18F775000;
          goto LABEL_132;
        }
        v75 = &qword_18F775000;
      }
      if (*a6 == a6[1])
      {
        v158 = v185;
        if (v186 != v185)
        {
          v159 = (char *)operator new(0xC0uLL);
          *((_QWORD *)v159 + 1) = 0;
          *((_QWORD *)v159 + 2) = 0;
          *(_QWORD *)v159 = &off_1E298DE80;
          *(_OWORD *)(v159 + 40) = 0u;
          *(_OWORD *)(v159 + 56) = 0u;
          *(_OWORD *)(v159 + 72) = 0u;
          *(_OWORD *)(v159 + 88) = 0u;
          *(_OWORD *)(v159 + 104) = 0u;
          *(_OWORD *)(v159 + 120) = 0u;
          *(_OWORD *)(v159 + 136) = 0u;
          *(_OWORD *)(v159 + 152) = 0u;
          *(_OWORD *)(v159 + 168) = 0u;
          *((_QWORD *)v159 + 23) = 0;
          *(_OWORD *)(v159 + 24) = 0u;
          *((_QWORD *)v159 + 6) = 0;
          *((_QWORD *)v159 + 7) = 0;
          __asm { FMOV            V1.2D, #-1.0 }
          *((_OWORD *)v159 + 4) = _Q1;
          v159[89] = 1;
          *((_QWORD *)v159 + 12) = 0;
          *((_QWORD *)v159 + 13) = 0;
          v159[120] = 0;
          *((_QWORD *)v159 + 14) = 0;
          *((_QWORD *)v159 + 16) = 0xBFF0000000000000;
          *((_DWORD *)v159 + 46) = 0;
          *(_OWORD *)(v159 + 168) = 0u;
          *(_OWORD *)(v159 + 152) = 0u;
          *(_QWORD *)buf = v159 + 24;
          *(_QWORD *)&buf[8] = v159;
          *((_QWORD *)v159 + 5) = **v158;
          sub_18F623AB8((char **)&v178, (__int128 *)buf);
          v164 = a1 + 5;
          v165 = a1[6];
          if (v165 >= a1[7])
          {
            v166 = sub_18F6CA50C(v164, (_QWORD **)&v178);
          }
          else
          {
            sub_18F6CA4BC((uint64_t)v164, (_QWORD **)&v178);
            v166 = v165 + 24;
          }
          a1[6] = v166;
          v167 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v168 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v169 = __ldaxr(v168);
            while (__stlxr(v169 - 1, v168));
            if (!v169)
            {
              ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
              std::__shared_weak_count::__release_weak(v167);
            }
          }
        }
        goto LABEL_178;
      }
      v113 = 1;
LABEL_132:
      v170 = a1 + 5;
      v114 = a1[6];
      v115 = -1.0;
      v116 = -1.0;
      if (a1[5] != v114)
      {
        v118 = *(_QWORD *)(v114 - 24);
        v117 = *(_QWORD *)(v114 - 16);
        if (v118 != v117)
        {
          v119 = *(_QWORD *)(v117 - 16);
          if (v119)
            v116 = *(double *)(v119 + 16);
        }
      }
      if ((v113 & 1) == 0)
        v115 = *(double *)(*(_QWORD *)v112 + 16);
      v121 = *a6;
      v120 = a6[1];
      if (*a6 != v120)
      {
        v172 = v75[368];
        do
        {
          v173 = 0;
          v174 = 0;
          v175 = 0;
          v123 = *v121;
          v122 = v121[1];
          if (*v121 != v122)
          {
            do
            {
              v124 = *(_QWORD *)v123;
              if (*(_QWORD *)v123 && *(_QWORD *)v124)
              {
                v125 = *(double *)(v124 + 16);
                v126 = v125 < v115 + -1.0 || v115 == -1.0;
                v127 = v125 > v116 + 1.0 || v116 == -1.0;
                if (v127 && v126)
                {
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                  v129 = qword_1EE172170;
                  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                  {
                    if (a2[23] >= 0)
                      v130 = (uint64_t *)a2;
                    else
                      v130 = *(uint64_t **)a2;
                    v131 = *(_QWORD *)(*(_QWORD *)v123 + 16);
                    v132 = *(_QWORD *)(*(_QWORD *)v123 + 24);
                    v133 = *(_QWORD *)(*(_QWORD *)v123 + 32);
                    v134 = *(_QWORD *)(*(_QWORD *)v123 + 40);
                    v135 = *(_QWORD *)(*(_QWORD *)v123 + 48);
                    v136 = *(_QWORD *)(*(_QWORD *)v123 + 56);
                    v138 = *(_QWORD *)(*(_QWORD *)v123 + 72);
                    v137 = *(_QWORD *)(*(_QWORD *)v123 + 80);
                    v139 = *(_QWORD *)(*(_QWORD *)v123 + 88);
                    v140 = *(unsigned __int8 *)(*(_QWORD *)v123 + 64);
                    v141 = *(_DWORD *)(**(_QWORD **)v123 + 20);
                    *(_DWORD *)buf = v172;
                    *(_QWORD *)&buf[4] = v130;
                    *(_WORD *)&buf[12] = 2050;
                    *(_QWORD *)&buf[14] = v131;
                    v217 = 2049;
                    v218 = v132;
                    v219 = 2049;
                    v220 = v133;
                    v221 = 2049;
                    v222 = v134;
                    v223 = 2050;
                    v224 = v135;
                    v225 = 2050;
                    v226 = v136;
                    v227 = 2050;
                    v228 = v137;
                    v229 = 2050;
                    v230 = v138;
                    v231 = 2050;
                    v232 = v139;
                    v233 = 1026;
                    v234 = v140;
                    v235 = 1026;
                    v236 = v141;
                    _os_log_impl(&dword_18F5B3000, v129, OS_LOG_TYPE_DEBUG, "CLTSP,MI,snappedIILocation,id,%{public}s,time,%{public}.3lf,snapLL,%{private}.7lf,%{private}.7lf,rawCourse,%{private}.3lf,projection,%{public}.8lf,score,%{public}.12lf,dE,%{public}.2lf,dN,%{public}.2lf,dCourse,%{public}.2lf,valid,%{public}d,frc,%{public}d", buf, 0x72u);
                  }
                  if (sub_18F5C4AE0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172168 != -1)
                      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                    if (a2[23] >= 0)
                      v142 = (uint64_t *)a2;
                    else
                      v142 = *(uint64_t **)a2;
                    v143 = *(_QWORD *)(*(_QWORD *)v123 + 16);
                    v144 = *(_QWORD *)(*(_QWORD *)v123 + 24);
                    v145 = *(_QWORD *)(*(_QWORD *)v123 + 32);
                    v146 = *(_QWORD *)(*(_QWORD *)v123 + 40);
                    v147 = *(_QWORD *)(*(_QWORD *)v123 + 48);
                    v148 = *(_QWORD *)(*(_QWORD *)v123 + 56);
                    v150 = *(_QWORD *)(*(_QWORD *)v123 + 72);
                    v149 = *(_QWORD *)(*(_QWORD *)v123 + 80);
                    v151 = *(_QWORD *)(*(_QWORD *)v123 + 88);
                    v152 = *(unsigned __int8 *)(*(_QWORD *)v123 + 64);
                    v153 = *(_DWORD *)(**(_QWORD **)v123 + 20);
                    *(_DWORD *)v192 = v172;
                    *(_QWORD *)&v192[4] = v142;
                    *(_WORD *)&v192[12] = 2050;
                    *(_QWORD *)&v192[14] = v143;
                    v193 = 2049;
                    v194 = v144;
                    v195 = 2049;
                    v196 = v145;
                    v197 = 2049;
                    v198 = v146;
                    v199 = 2050;
                    v200 = v147;
                    v201 = 2050;
                    v202 = v148;
                    v203 = 2050;
                    v204 = v149;
                    v205 = 2050;
                    v206 = v150;
                    v207 = 2050;
                    v208 = v151;
                    v209 = 1026;
                    v210 = v152;
                    v211 = 1026;
                    v212 = v153;
                    v154 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "void CLTripLocationFilter::processLocationChunk(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<std::vector<CLGeoMapSnapDataPtr>> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v154);
                    if (v154 != buf)
                      free(v154);
                  }
                  sub_18F623AB8((char **)&v173, v123);
                }
              }
              ++v123;
            }
            while (v123 != v122);
            if (v173 != v174)
            {
              v155 = *(v174 - 2);
              if (v155)
              {
                v116 = *(double *)(v155 + 16);
                v156 = a1[6];
                if (v156 >= a1[7])
                {
                  v157 = sub_18F6CA50C(v170, &v173);
                }
                else
                {
                  sub_18F6CA4BC((uint64_t)v170, &v173);
                  v157 = v156 + 24;
                }
                a1[6] = v157;
              }
            }
          }
          *(_QWORD *)buf = &v173;
          sub_18F62AB98((void ***)buf);
          v121 += 3;
        }
        while (v121 != v120);
      }
LABEL_178:
      *(_QWORD *)buf = &v213;
      sub_18F62AB98((void ***)buf);
      *(_QWORD *)buf = &v178;
      sub_18F62AB98((void ***)buf);
      *(_QWORD *)buf = &v185;
      sub_18F62AB98((void ***)buf);
      return;
    }
    v57 = (double **)v185;
    v56 = (double **)v186;
    if (v185 == v186)
      goto LABEL_87;
    while (1)
    {
      *(_QWORD *)v192 = 0;
      *(_QWORD *)&v192[8] = 0;
      if (!sub_18F621014(*a7, (uint64_t *)v192, 1, **v57, (*v57)[1], (*v57)[2], (*v57)[4], (*v57)[3], (*v57)[5]))
        break;
      v58 = *(_QWORD *)v192;
      if (!*(_QWORD *)v192)
      {
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
        v63 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
        {
          v64 = *(_QWORD *)*v57;
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v64;
          _os_log_impl(&dword_18F5B3000, v63, OS_LOG_TYPE_ERROR, "CLTSP,MI,%{public}.1lf,destination snap is nullptr", buf, 0xCu);
        }
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_70;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 == -1)
          goto LABEL_78;
LABEL_80:
        dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
LABEL_78:
        v68 = *(_QWORD *)*v57;
        LODWORD(v213) = 134349056;
        *(_QWORD *)((char *)&v213 + 4) = v68;
        v69 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "void CLTripLocationFilter::processLocationChunk(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<std::vector<CLGeoMapSnapDataPtr>> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v69);
        if (v69 != buf)
          free(v69);
        goto LABEL_70;
      }
      v59 = *v57;
      v60 = -1.0;
      if ((*v57)[7] > 0.0)
        v60 = v59[6];
      *(double *)(*(_QWORD *)v192 + 104) = v60;
      *(_DWORD *)(v58 + 120) = *((_DWORD *)v59 + 22);
      sub_18F623AB8((char **)&v178, (__int128 *)v192);
LABEL_70:
      v65 = *(std::__shared_weak_count **)&v192[8];
      if (*(_QWORD *)&v192[8])
      {
        v66 = (unint64_t *)(*(_QWORD *)&v192[8] + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v57 += 2;
      if (v57 == v56)
        goto LABEL_87;
    }
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    v61 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      v62 = *(_QWORD *)*v57;
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v62;
      _os_log_impl(&dword_18F5B3000, v61, OS_LOG_TYPE_ERROR, "CLTSP,MI,%{public}.1lf,unable to compute Snap", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_70;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      goto LABEL_80;
    goto LABEL_78;
  }
  if (qword_1EE172168 != -1)
    dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
  v54 = qword_1EE172170;
  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v54, OS_LOG_TYPE_ERROR, "CLTSP,Unexpected,invalid geometry pointer,processLocationChunk", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    *(_WORD *)v192 = 0;
    v55 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "void CLTripLocationFilter::processLocationChunk(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<std::vector<CLGeoMapSnapDataPtr>> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v55);
    if (v55 != buf)
      free(v55);
  }
}

void sub_18F6F7474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  STACK[0x220] = (unint64_t)&a22;
  sub_18F62AB98((void ***)&STACK[0x220]);
  STACK[0x220] = a12;
  sub_18F62AB98((void ***)&STACK[0x220]);
  _Unwind_Resume(a1);
}

BOOL sub_18F6F7538(uint64_t a1)
{
  double v1;
  double v2;
  _BOOL4 v4;

  if (!*(_BYTE *)(a1 + 64))
    return 0;
  if (*(double *)(a1 + 16) <= 0.0)
    return 0;
  if (!*(_QWORD *)a1)
    return 0;
  v2 = *(double *)(a1 + 24);
  v1 = *(double *)(a1 + 32);
  if (fabs(v2) < 0.00003 && fabs(v1) < 0.00003)
    return 0;
  v4 = v2 <= 90.0;
  if (v2 < -90.0)
    v4 = 0;
  if (v1 > 180.0)
    v4 = 0;
  return v1 >= -180.0 && v4;
}

BOOL sub_18F6F75C4(_QWORD *a1, const std::string *a2, uint64_t a3, uint64_t a4, char a5, int a6, void *a7, void *a8, uint64_t *a9, uint64_t *a10)
{
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  const char *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  double v43;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  unint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  const std::string *v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  double v123;
  double v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t **v127;
  unint64_t v128;
  uint64_t **v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  int64x2_t v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  const char *v159;
  const std::string *v160;
  void *v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  char *v215;
  double v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  __int128 **v220;
  __int128 **v221;
  double v222;
  __int128 *v223;
  __int128 *v224;
  uint64_t v225;
  double v226;
  NSObject *v228;
  const std::string *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  const std::string *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  int v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t **v257;
  NSObject *v258;
  _BOOL8 v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *p_shared_owners;
  unint64_t v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  const char *v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  unint64_t v273;
  void *v274;
  double v275;
  const char *v276;
  uint64_t v277;
  uint64_t v278;
  _BOOL4 v279;
  const char *v280;
  uint64_t v281;
  uint64_t v282;
  NSObject *v283;
  char *v284;
  double v285;
  double v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  double v290;
  double v291;
  const char *v292;
  const char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t i;
  void *v300;
  double v301;
  double v302;
  double v303;
  const char *v304;
  uint64_t v305;
  uint64_t v306;
  double v307;
  double v308;
  const char *v309;
  uint64_t v310;
  uint64_t v311;
  double v312;
  double v313;
  const char *v314;
  uint64_t v315;
  uint64_t v316;
  double v317;
  double v318;
  double v319;
  double v320;
  const char *v321;
  uint64_t v322;
  uint64_t v323;
  double v324;
  double v325;
  const char *v326;
  uint64_t v327;
  uint64_t v328;
  double v329;
  double v330;
  const char *v331;
  uint64_t v332;
  uint64_t v333;
  double v334;
  double v335;
  double v336;
  const char *v337;
  uint64_t v338;
  uint64_t v339;
  const char *v340;
  uint64_t v341;
  uint64_t v342;
  double v343;
  uint64_t v344;
  unsigned int v345;
  int v346;
  const char *v347;
  uint64_t v348;
  uint64_t v349;
  double v350;
  const char *v351;
  uint64_t v352;
  uint64_t v353;
  int v354;
  double v355;
  double v356;
  const char *v357;
  uint64_t v358;
  uint64_t v359;
  double v360;
  double v361;
  const char *v362;
  uint64_t v363;
  uint64_t v364;
  double v365;
  double v366;
  const char *v367;
  uint64_t v368;
  uint64_t v369;
  double v370;
  const char *v371;
  uint64_t v372;
  uint64_t v373;
  double v374;
  double v375;
  double v376;
  const char *v377;
  uint64_t v378;
  uint64_t v379;
  double v380;
  double v381;
  const char *v382;
  uint64_t v383;
  uint64_t v384;
  double v385;
  double v386;
  const char *v387;
  uint64_t v388;
  uint64_t v389;
  double v390;
  NSObject *v391;
  const std::string *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  const std::string *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  double v407;
  uint64_t v408;
  double v409;
  double v410;
  double v411;
  double v412;
  NSObject *v413;
  const std::string *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  _BOOL4 v425;
  int v426;
  double v427;
  _BOOL4 v428;
  const char *v429;
  uint64_t v430;
  uint64_t v431;
  const char *v432;
  uint64_t v433;
  const char *v434;
  uint64_t v435;
  uint64_t v436;
  void *Object;
  const char *v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  int v442;
  NSObject *v443;
  const std::string *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  const std::string *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  char *v482;
  const std::string *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  int v490;
  char *v491;
  id v492;
  const char *v493;
  const char *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  uint64_t v500;
  int v501;
  uint64_t v502;
  void *v503;
  const char *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  const char *v508;
  uint64_t v509;
  uint64_t v510;
  NSObject *v511;
  const char *v512;
  uint64_t v513;
  uint64_t v514;
  void *v515;
  const char *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  const char *v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  const char *v525;
  uint64_t v526;
  uint64_t v527;
  void *v528;
  const char *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  const char *v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  char *v538;
  uint64_t v539;
  const char *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  void *v546;
  NSObject *v547;
  const char *v548;
  uint64_t v549;
  uint64_t v550;
  void *v551;
  const char *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  const char *v557;
  uint64_t v558;
  uint64_t v559;
  int v560;
  const char *v561;
  uint64_t v562;
  uint64_t v563;
  void *v564;
  const char *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  const char *v570;
  uint64_t v571;
  uint64_t v572;
  int v573;
  char *v574;
  uint64_t v575;
  const char *v576;
  uint64_t v577;
  uint64_t v578;
  void *v579;
  unint64_t v580;
  void *v581;
  _QWORD *v582;
  const char *v583;
  uint64_t v584;
  void *v585;
  const char *v586;
  uint64_t v587;
  uint64_t v588;
  void *v589;
  const char *v590;
  uint64_t v591;
  uint64_t v592;
  const char *v593;
  uint64_t v594;
  uint64_t v595;
  void *v596;
  const char *v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  const char *v601;
  uint64_t v602;
  double v603;
  int v604;
  const char *v605;
  uint64_t v606;
  uint64_t v607;
  NSObject *v608;
  char *v609;
  NSObject *v610;
  const char *v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  const char *v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  std::__shared_weak_count *v619;
  unint64_t *v620;
  unint64_t v621;
  const char *v622;
  uint64_t v623;
  uint64_t v624;
  unint64_t *v625;
  unint64_t v626;
  const char *v627;
  uint64_t v628;
  const char *v629;
  uint64_t v630;
  uint64_t v631;
  int isGPSLocationType;
  NSObject *v633;
  const char *v634;
  uint64_t v635;
  uint64_t v636;
  int v637;
  const std::string *v638;
  uint64_t v639;
  const std::string *v640;
  const char *v641;
  uint64_t v642;
  uint64_t v643;
  int v644;
  const std::string *v645;
  uint64_t v646;
  const std::string *v647;
  char *v648;
  std::__shared_weak_count *v649;
  unint64_t *v650;
  unint64_t v651;
  const char *v652;
  uint64_t v653;
  uint64_t v654;
  unint64_t *v655;
  unint64_t v656;
  const char *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  const char *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  char *v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  __int128 **v670;
  __int128 **v671;
  double v672;
  __int128 *v673;
  __int128 *v674;
  uint64_t v675;
  unint64_t v676;
  uint64_t v677;
  NSObject *v678;
  const char *v679;
  uint64_t v680;
  uint64_t v681;
  const std::string *v682;
  uint64_t v683;
  const char *v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  unint64_t v688;
  int v689;
  int v690;
  NSObject *v691;
  const char *v692;
  uint64_t v693;
  uint64_t v694;
  int v695;
  const std::string *v696;
  uint64_t v697;
  const std::string *v698;
  unint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  void *v704;
  unint64_t v705;
  uint64_t v706;
  unint64_t v707;
  char *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t **v711;
  uint64_t v712;
  uint64_t v714;
  uint64_t v715;
  char *v716;
  const char *v717;
  uint64_t v718;
  uint64_t v719;
  const std::string *v720;
  uint64_t v721;
  const char *v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  unint64_t v726;
  int v727;
  int v728;
  char *v729;
  const char *v730;
  uint64_t v731;
  uint64_t v732;
  int v733;
  uint64_t *v734;
  uint64_t v735;
  const std::string *v736;
  char *v737;
  int v738;
  uint64_t v739;
  _QWORD *v741;
  uint64_t v742;
  void *v743;
  const std::string *v745;
  const std::string *v746;
  const char *v747;
  const char *v748;
  NSObject *loga;
  os_log_t logb;
  uint64_t v752;
  char *v753;
  char *v754;
  uint64_t *v756;
  uint64_t v758[2];
  uint64_t v759[2];
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  void *v770;
  _QWORD v771[2];
  __int128 v772;
  uint64_t v773;
  __int128 v774;
  uint64_t v775;
  uint64_t v776;
  std::__shared_weak_count *v777;
  uint64_t v778;
  std::__shared_weak_count *v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  uint64_t v784;
  std::__shared_weak_count *v785;
  __int128 v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  __int128 **v790;
  __int128 **v791;
  uint64_t v792;
  __int128 v793;
  uint64_t v794;
  uint64_t **v795;
  char *v796;
  unint64_t v797;
  _BYTE v798[128];
  _BYTE v799[128];
  _BYTE v800[164];
  _BYTE v801[6];
  int v802;
  _BYTE v803[128];
  _BYTE buf[164];
  _BYTE v805[6];
  int v806;
  uint64_t v807;

  v807 = *MEMORY[0x1E0C80C00];
  if (!*a9)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    v258 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v258, OS_LOG_TYPE_ERROR, "CLTSP,Unexpected,invalid geometry pointer,makeSegmentsForRouteConstruction", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
      *(_WORD *)v800 = 0;
      v716 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v716);
      if (v716 != buf)
        free(v716);
    }
    return 0;
  }
  v11 = a4;
  v12 = a1;
  v13 = a1[5];
  v756 = a1 + 5;
  v14 = a1[6];
  while (v14 != v13)
  {
    v14 -= 24;
    *(_QWORD *)buf = v14;
    sub_18F62AB98((void ***)buf);
  }
  v12[6] = v13;
  v788 = 0;
  v787 = 0;
  v786 = xmmword_18F771F40;
  v789 = 0x3FF0000000000000;
  v790 = 0;
  v792 = 0;
  v791 = 0;
  v741 = v12;
  if (a3 != 1)
  {
    v260 = *a9;
    v261 = (std::__shared_weak_count *)a9[1];
    v776 = *a9;
    v777 = v261;
    if (v261)
    {
      p_shared_owners = (unint64_t *)&v261->__shared_owners_;
      do
        v263 = __ldxr(p_shared_owners);
      while (__stxr(v263 + 1, p_shared_owners));
    }
    sub_18F6F4224((uint64_t)&v786, (const char *)a2, a8, v260, v261, a3);
    if (v261)
    {
      v267 = (unint64_t *)&v261->__shared_owners_;
      do
        v268 = __ldaxr(v267);
      while (__stlxr(v268 - 1, v267));
      if (!v268)
      {
        ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
        std::__shared_weak_count::__release_weak(v261);
      }
    }
    v272 = (void *)objc_msgSend_array(MEMORY[0x1E0C99DE8], v264, v265, v266);
    v273 = 0;
    v274 = 0;
    v796 = 0;
    v795 = 0;
    v275 = -1.0;
    v797 = 0;
    v793 = 0uLL;
    v794 = 0;
    v774 = 0uLL;
    v775 = 0;
    v772 = 0uLL;
    v773 = 0;
    v771[0] = 0xBFF0000000000000;
    v771[1] = 0;
    v743 = v272;
    while (1)
    {
      if (objc_msgSend_count(a7, v269, v270, v271) <= v273)
      {
        if (!objc_msgSend_count(v272, v276, v277, v278))
        {
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
          v691 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEFAULT))
          {
            v695 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
            v696 = (const std::string *)a2->__r_.__value_.__r.__words[0];
            v697 = objc_msgSend_count(a7, v692, v693, v694);
            if (v695 >= 0)
              v698 = a2;
            else
              v698 = v696;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = v698;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v697;
            _os_log_impl(&dword_18F5B3000, v691, OS_LOG_TYPE_DEFAULT, "CLTSP,MI,data not available for segment creation after filtering,id,%{public}s,count,%lu", buf, 0x16u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
            v733 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
            v734 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
            v735 = objc_msgSend_count(a7, v730, v731, v732);
            v736 = a2;
            if (v733 < 0)
              v736 = (const std::string *)v734;
            *(_DWORD *)v800 = 136446466;
            *(_QWORD *)&v800[4] = v736;
            *(_WORD *)&v800[12] = 2048;
            *(_QWORD *)&v800[14] = v735;
            v737 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v737);
            if (v737 != buf)
              free(v737);
          }
          v259 = 0;
          goto LABEL_500;
        }
        v492 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v766 = 0u;
        v767 = 0u;
        v764 = 0u;
        v765 = 0u;
        v497 = objc_msgSend_countByEnumeratingWithState_objects_count_(v272, v493, (uint64_t)&v764, (uint64_t)v799, 16);
        if (v497)
        {
          v498 = 0;
          v499 = -1;
          v500 = *(_QWORD *)v765;
          v501 = -1;
          do
          {
            v502 = 0;
            do
            {
              if (*(_QWORD *)v765 != v500)
                objc_enumerationMutation(v272);
              v503 = *(void **)(*((_QWORD *)&v764 + 1) + 8 * v502);
              if ((objc_msgSend_isGPSLocationType(v503, v494, v495, v496) & 1) == 0)
              {
                if (v499 < 0)
                {
                  v499 = objc_msgSend_mapsRoadClass(v503, v494, v495, v496);
                }
                else
                {
                  if (v501 != -1)
                  {
                    if (objc_msgSend_mapsRoadClass(v503, v494, v495, v496) == v499
                      || objc_msgSend_mapsRoadClass(v503, v504, v505, v506) != v501)
                    {
                      objc_msgSend_addObject_(v492, v504, v498, v506);
                      v498 = 0;
                    }
                    else
                    {
                      v498 = 0;
                      if (objc_msgSend_mapsRoadClass(v503, v504, v507, v506) == v501)
                        v499 = v501;
                    }
                  }
                  if (objc_msgSend_mapsRoadClass(v503, v494, v495, v496) == v499)
                  {
                    v501 = -1;
                  }
                  else
                  {
                    v501 = objc_msgSend_mapsRoadClass(v503, v508, v509, v510);
                    v498 = (uint64_t)v503;
                  }
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                  v511 = qword_1EE172170;
                  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
                  {
                    v515 = (void *)objc_msgSend_timestamp(v503, v512, v513, v514);
                    objc_msgSend_timeIntervalSinceReferenceDate(v515, v516, v517, v518);
                    v520 = v519;
                    v524 = objc_msgSend_mapsRoadClass(v503, v521, v522, v523);
                    *(_DWORD *)buf = 134349824;
                    *(_QWORD *)&buf[4] = v520;
                    *(_WORD *)&buf[12] = 1026;
                    *(_DWORD *)&buf[14] = v524;
                    *(_WORD *)&buf[18] = 1026;
                    *(_DWORD *)&buf[20] = v499;
                    *(_WORD *)&buf[24] = 1026;
                    *(_DWORD *)&buf[26] = v501;
                    _os_log_impl(&dword_18F5B3000, v511, OS_LOG_TYPE_INFO, "CLTSP,WiFiFiltering,%{public}.2lf,locFRC,%{public}d,currentFRC,%{public}d,outlierFRC,%{public}d", buf, 0x1Eu);
                  }
                  if (sub_18F5C4AE0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172168 != -1)
                      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                    v528 = (void *)objc_msgSend_timestamp(v503, v525, v526, v527);
                    objc_msgSend_timeIntervalSinceReferenceDate(v528, v529, v530, v531);
                    v533 = v532;
                    v537 = objc_msgSend_mapsRoadClass(v503, v534, v535, v536);
                    *(_DWORD *)v800 = 134349824;
                    *(_QWORD *)&v800[4] = v533;
                    *(_WORD *)&v800[12] = 1026;
                    *(_DWORD *)&v800[14] = v537;
                    *(_WORD *)&v800[18] = 1026;
                    *(_DWORD *)&v800[20] = v499;
                    *(_WORD *)&v800[24] = 1026;
                    *(_DWORD *)&v800[26] = v501;
                    v538 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v538);
                    if (v538 != buf)
                      free(v538);
                  }
                }
              }
              ++v502;
            }
            while (v497 != v502);
            v539 = objc_msgSend_countByEnumeratingWithState_objects_count_(v272, v494, (uint64_t)&v764, (uint64_t)v799, 16);
            v497 = v539;
          }
          while (v539);
        }
        v762 = 0u;
        v763 = 0u;
        v760 = 0u;
        v761 = 0u;
        v543 = objc_msgSend_countByEnumeratingWithState_objects_count_(v492, v494, (uint64_t)&v760, (uint64_t)v798, 16);
        if (v543)
        {
          v544 = *(_QWORD *)v761;
          do
          {
            v545 = 0;
            do
            {
              if (*(_QWORD *)v761 != v544)
                objc_enumerationMutation(v492);
              v546 = *(void **)(*((_QWORD *)&v760 + 1) + 8 * v545);
              objc_msgSend_removeObject_(v272, v540, (uint64_t)v546, v542);
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
              v547 = qword_1EE172170;
              if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
              {
                v551 = (void *)objc_msgSend_timestamp(v546, v548, v549, v550);
                objc_msgSend_timeIntervalSinceReferenceDate(v551, v552, v553, v554);
                v556 = v555;
                v560 = objc_msgSend_mapsRoadClass(v546, v557, v558, v559);
                *(_DWORD *)buf = 134349312;
                *(_QWORD *)&buf[4] = v556;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v560;
                _os_log_impl(&dword_18F5B3000, v547, OS_LOG_TYPE_INFO, "CLTSP,WiFiFiltering,erased,%{public}.2lf,locFRC,%{public}d", buf, 0x12u);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v564 = (void *)objc_msgSend_timestamp(v546, v561, v562, v563);
                objc_msgSend_timeIntervalSinceReferenceDate(v564, v565, v566, v567);
                v569 = v568;
                v573 = objc_msgSend_mapsRoadClass(v546, v570, v571, v572);
                *(_DWORD *)v800 = 134349312;
                *(_QWORD *)&v800[4] = v569;
                *(_WORD *)&v800[12] = 1026;
                *(_DWORD *)&v800[14] = v573;
                v574 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v574);
                if (v574 != buf)
                  free(v574);
              }
              ++v545;
            }
            while (v543 != v545);
            v575 = objc_msgSend_countByEnumeratingWithState_objects_count_(v492, v540, (uint64_t)&v760, (uint64_t)v798, 16);
            v543 = v575;
          }
          while (v575);
        }
        v579 = (void *)objc_msgSend_array(MEMORY[0x1E0C99DE8], v540, v541, v542);
        v580 = 0;
        v581 = 0;
        v582 = v741;
        while (2)
        {
          if (objc_msgSend_count(v272, v576, v577, v578) <= v580)
          {
            v666 = v741[6];
            if (v741[5] != v666)
            {
              v668 = *(_QWORD *)(v666 - 24);
              v667 = *(_QWORD *)(v666 - 16);
              if (v668 != v667)
              {
                v669 = *(_QWORD *)(v667 - 16);
                if (v669)
                {
                  v670 = v790;
                  v671 = v791;
                  if (v790 != v791)
                  {
                    v672 = *(double *)(v669 + 16);
                    do
                    {
                      memset(buf, 0, 24);
                      v673 = *v670;
                      v674 = v670[1];
                      if (*v670 != v674)
                      {
                        do
                        {
                          if (*(_QWORD *)v673 && *(double *)(*(_QWORD *)v673 + 16) > v672 + 1.0)
                            sub_18F623AB8((char **)buf, v673);
                          ++v673;
                        }
                        while (v673 != v674);
                        if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
                        {
                          v675 = *(_QWORD *)(*(_QWORD *)&buf[8] - 16);
                          if (v675)
                          {
                            v672 = *(double *)(v675 + 16);
                            v676 = v741[6];
                            if (v676 >= v741[7])
                            {
                              v677 = sub_18F6CA50C(v756, (_QWORD **)buf);
                            }
                            else
                            {
                              sub_18F6CA4BC((uint64_t)v756, (_QWORD **)buf);
                              v677 = v676 + 24;
                            }
                            v741[6] = v677;
                          }
                        }
                      }
                      *(_QWORD *)v800 = buf;
                      sub_18F62AB98((void ***)v800);
                      v670 += 3;
                    }
                    while (v670 != v671);
                  }
                }
              }
            }
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
            v678 = qword_1EE172170;
            if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
            {
              if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v682 = a2;
              else
                v682 = (const std::string *)a2->__r_.__value_.__r.__words[0];
              v683 = objc_msgSend_count(v743, v679, v680, v681);
              v687 = objc_msgSend_count(a7, v684, v685, v686);
              v688 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v741[6] - v741[5]) >> 3);
              v689 = *(_DWORD *)(*a9 + 116);
              v690 = *(_DWORD *)(*a9 + 152);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = v682;
              *(_WORD *)&buf[12] = 2050;
              *(_QWORD *)&buf[14] = v683;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = v687;
              *(_WORD *)&buf[32] = 2050;
              *(_QWORD *)&buf[34] = v688;
              *(_WORD *)&buf[42] = 1026;
              *(_DWORD *)&buf[44] = v689;
              *(_WORD *)&buf[48] = 1026;
              *(_DWORD *)&buf[50] = v690;
              _os_log_impl(&dword_18F5B3000, v678, OS_LOG_TYPE_INFO, "CLTSP,MI,makeSegmentsForRouteConstruction,id,%{public}s,filteredCount,%{public}lu,inputCount,%lu,segments,%{public}lu,mapsAPICalls,%{public}d,geometry,%{public}d", buf, 0x36u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
              if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v720 = a2;
              else
                v720 = (const std::string *)a2->__r_.__value_.__r.__words[0];
              v721 = objc_msgSend_count(v743, v717, v718, v719);
              v725 = objc_msgSend_count(a7, v722, v723, v724);
              v726 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v741[6] - v741[5]) >> 3);
              v727 = *(_DWORD *)(*a9 + 116);
              v728 = *(_DWORD *)(*a9 + 152);
              *(_DWORD *)v800 = 136447490;
              *(_QWORD *)&v800[4] = v720;
              *(_WORD *)&v800[12] = 2050;
              *(_QWORD *)&v800[14] = v721;
              *(_WORD *)&v800[22] = 2048;
              *(_QWORD *)&v800[24] = v725;
              *(_WORD *)&v800[32] = 2050;
              *(_QWORD *)&v800[34] = v726;
              *(_WORD *)&v800[42] = 1026;
              *(_DWORD *)&v800[44] = v727;
              *(_WORD *)&v800[48] = 1026;
              *(_DWORD *)&v800[50] = v728;
              v729 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v729);
              if (v729 != buf)
                free(v729);
              v582 = v741;
            }
            v259 = v582[5] != v582[6];
LABEL_500:
            *(_QWORD *)buf = &v772;
            sub_18F62AB98((void ***)buf);
            *(_QWORD *)buf = &v774;
            sub_18F62AB98((void ***)buf);
            *(_QWORD *)buf = &v793;
            sub_18F62AB98((void ***)buf);
            *(_QWORD *)buf = &v795;
            sub_18F62AB98((void ***)buf);
            goto LABEL_524;
          }
          v585 = (void *)objc_msgSend_objectAtIndexedSubscript_(v272, v583, v580, v584);
          v589 = v585;
          if (!v585)
          {
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
            v608 = qword_1EE172170;
            if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F5B3000, v608, OS_LOG_TYPE_ERROR, "CLTSP,CLTripLocationFilter,makeSegmentsForRouteConstruction,loc is nil", buf, 2u);
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
              *(_WORD *)v800 = 0;
              v609 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v609);
              if (v609 != buf)
                free(v609);
            }
            goto LABEL_460;
          }
          if (!v581)
          {
            objc_msgSend_addObject_(v579, v586, (uint64_t)v585, v588);
            v581 = v589;
            goto LABEL_460;
          }
          if (objc_msgSend_timestamp(v585, v586, v587, v588) && objc_msgSend_timestamp(v581, v590, v591, v592))
          {
            v596 = (void *)objc_msgSend_timestamp(v589, v593, v594, v595);
            v600 = objc_msgSend_timestamp(v581, v597, v598, v599);
            objc_msgSend_timeIntervalSinceDate_(v596, v601, v600, v602);
            v604 = 0;
            if (v603 >= 0.0 && v603 < 3.0)
            {
              objc_msgSend_addObject_(v579, v576, (uint64_t)v589, v578);
              if (objc_msgSend_count(v272, v605, v606, v607) - 1 == v580)
              {
                v604 = 1;
                goto LABEL_420;
              }
LABEL_459:
              v581 = v589;
              goto LABEL_460;
            }
          }
          else
          {
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
            v610 = qword_1EE172170;
            if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
            {
              v614 = objc_msgSend_timestamp(v589, v611, v612, v613);
              v618 = objc_msgSend_timestamp(v581, v615, v616, v617);
              *(_DWORD *)buf = 67240448;
              *(_DWORD *)&buf[4] = v614 == 0;
              *(_WORD *)&buf[8] = 1026;
              *(_DWORD *)&buf[10] = v618 == 0;
              _os_log_impl(&dword_18F5B3000, v610, OS_LOG_TYPE_ERROR, "CLTSP,CLTripLocationFilter,makeSegmentsForRouteConstruction,timeSincePrev cannot be set,loc.timestamp is nil,%{public}d,prevLocation.timestamp is nil,%{public}d", buf, 0xEu);
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
              v660 = objc_msgSend_timestamp(v589, v657, v658, v659);
              v664 = objc_msgSend_timestamp(v581, v661, v662, v663);
              *(_DWORD *)v800 = 67240448;
              *(_DWORD *)&v800[4] = v660 == 0;
              *(_WORD *)&v800[8] = 1026;
              *(_DWORD *)&v800[10] = v664 == 0;
              v665 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v665);
              if (v665 != buf)
                free(v665);
            }
            v604 = 0;
          }
LABEL_420:
          if (!objc_msgSend_count(v579, v576, v577, v578))
          {
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
            v633 = qword_1EE172170;
            if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
            {
              v637 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
              v638 = (const std::string *)a2->__r_.__value_.__r.__words[0];
              v639 = objc_msgSend_count(a7, v634, v635, v636);
              *(_DWORD *)buf = 136446466;
              if (v637 >= 0)
                v640 = a2;
              else
                v640 = v638;
              *(_QWORD *)&buf[4] = v640;
              *(_WORD *)&buf[12] = 2050;
              *(_QWORD *)&buf[14] = v639;
              _os_log_impl(&dword_18F5B3000, v633, OS_LOG_TYPE_ERROR, "CLTSP,MI,unexpected,location chunk empty,id,%{public}s,sparseCount,%{public}lu", buf, 0x16u);
              v272 = v743;
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
              v644 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
              v645 = (const std::string *)a2->__r_.__value_.__r.__words[0];
              v646 = objc_msgSend_count(a7, v641, v642, v643);
              *(_DWORD *)v800 = 136446466;
              if (v644 >= 0)
                v647 = a2;
              else
                v647 = v645;
              *(_QWORD *)&v800[4] = v647;
              *(_WORD *)&v800[12] = 2050;
              *(_QWORD *)&v800[14] = v646;
              v648 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v648);
              v272 = v743;
              if (v648 != buf)
                free(v648);
            }
            goto LABEL_459;
          }
          v619 = (std::__shared_weak_count *)a9[1];
          v759[0] = *a9;
          v759[1] = (uint64_t)v619;
          if (v619)
          {
            v620 = (unint64_t *)&v619->__shared_owners_;
            do
              v621 = __ldxr(v620);
            while (__stxr(v621 + 1, v620));
          }
          sub_18F6F6290(v741, (const char *)a2, a5, v579, (uint64_t **)&v772, &v790, v759);
          if (v619)
          {
            v625 = (unint64_t *)&v619->__shared_owners_;
            do
              v626 = __ldaxr(v625);
            while (__stlxr(v626 - 1, v625));
            if (!v626)
            {
              ((void (*)(std::__shared_weak_count *))v619->__on_zero_shared)(v619);
              std::__shared_weak_count::__release_weak(v619);
            }
          }
          objc_msgSend_removeAllObjects(v579, v622, v623, v624);
          objc_msgSend_addObject_(v579, v627, (uint64_t)v589, v628);
          isGPSLocationType = objc_msgSend_isGPSLocationType(v589, v629, v630, v631);
          if (((v604 | isGPSLocationType ^ 1) & 1) != 0)
          {
            if ((isGPSLocationType & 1) != 0)
              goto LABEL_459;
          }
          else if (objc_msgSend_count(v272, v576, v577, v578) - 1 != v580)
          {
            goto LABEL_459;
          }
          v581 = v589;
          if (objc_msgSend_count(v579, v576, v577, v578))
          {
            v649 = (std::__shared_weak_count *)a9[1];
            v758[0] = *a9;
            v758[1] = (uint64_t)v649;
            if (v649)
            {
              v650 = (unint64_t *)&v649->__shared_owners_;
              do
                v651 = __ldxr(v650);
              while (__stxr(v651 + 1, v650));
            }
            sub_18F6F6290(v741, (const char *)a2, a5, v579, (uint64_t **)&v772, &v790, v758);
            if (v649)
            {
              v655 = (unint64_t *)&v649->__shared_owners_;
              do
                v656 = __ldaxr(v655);
              while (__stlxr(v656 - 1, v655));
              if (!v656)
              {
                ((void (*)(std::__shared_weak_count *))v649->__on_zero_shared)(v649);
                std::__shared_weak_count::__release_weak(v649);
              }
            }
            objc_msgSend_removeAllObjects(v579, v652, v653, v654);
            v581 = 0;
          }
LABEL_460:
          ++v580;
          continue;
        }
      }
      v279 = !v273 || objc_msgSend_count(a7, v276, v277, v278) - 1 == v273;
      v770 = 0;
      v770 = (void *)objc_msgSend_objectAtIndexedSubscript_(a7, v276, v273, v278);
      if (v770)
        break;
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
      v283 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)&buf[4] = v273;
        *(_WORD *)&buf[8] = 1026;
        *(_DWORD *)&buf[10] = a3;
        _os_log_impl(&dword_18F5B3000, v283, OS_LOG_TYPE_ERROR, "CLTSP,MI,loc is unexpectedly nil,i,%{public}d,mode,%{public}d", buf, 0xEu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
        *(_DWORD *)v800 = 67240448;
        *(_DWORD *)&v800[4] = v273;
        *(_WORD *)&v800[8] = 1026;
        *(_DWORD *)&v800[10] = a3;
        v284 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v284);
        if (v284 != buf)
          free(v284);
      }
LABEL_331:
      ++v273;
    }
    if (v274)
    {
      if (!v273)
        goto LABEL_219;
    }
    else
    {
      v274 = (void *)objc_msgSend_objectAtIndexedSubscript_(a7, v280, v273, v282);
      if (!v273)
      {
LABEL_219:
        objc_msgSend_course(v770, v280, v281, v282);
        v286 = v285;
        objc_msgSend_courseAccuracy(v770, v287, v288, v289);
        v291 = v290;
        memset(v800, 0, 64);
        v296 = objc_msgSend_countByEnumeratingWithState_objects_count_(a7, v292, (uint64_t)v800, (uint64_t)buf, 16);
        if (!v296)
          goto LABEL_236;
        v297 = 0;
        v298 = **(_QWORD **)&v800[16];
        while (1)
        {
          for (i = 0; i != v296; ++i)
          {
            if (**(_QWORD **)&v800[16] != v298)
              objc_enumerationMutation(a7);
            v300 = *(void **)(*(_QWORD *)&v800[8] + 8 * i);
            if (!v297
              && (v297 = *(void **)(*(_QWORD *)&v800[8] + 8 * i),
                  (objc_msgSend_isCourseValid(v297, v293, v294, v295) & 1) != 0)
              || objc_msgSend_isGPSLocationType(v300, v293, v294, v295)
              && objc_msgSend_isCourseValid(v300, v293, v294, v295)
              && (objc_msgSend_courseAccuracy(v300, v293, v294, v295), v301 < 135.0))
            {
              objc_msgSend_course(v300, v293, v294, v295);
              v336 = v335;
              objc_msgSend_courseAccuracy(v300, v337, v338, v339);
              objc_msgSend_updateCourse_andCourseAccuracy_(v770, v340, v341, v342, v336, v343);
              goto LABEL_237;
            }
            objc_msgSend_latitude(v297, v293, v294, v295);
            v303 = v302;
            objc_msgSend_longitude(v297, v304, v305, v306);
            v308 = v307;
            objc_msgSend_latitude(v300, v309, v310, v311);
            v313 = v312;
            objc_msgSend_longitude(v300, v314, v315, v316);
            v318 = sub_18F5BD064((double *)v12, v303, v308, v313, v317, 0.0);
            if (v318 > 10.0)
            {
              objc_msgSend_latitude(v297, v293, v294, v295);
              v320 = v319;
              objc_msgSend_longitude(v297, v321, v322, v323);
              v325 = v324;
              objc_msgSend_latitude(v300, v326, v327, v328);
              v330 = v329;
              objc_msgSend_longitude(v300, v331, v332, v333);
              v286 = sub_18F71AF58((double *)v12, v320, v325, v330, v334);
              v291 = 90.0;
              if (v318 > 75.0)
              {
                v291 = 90.0;
                goto LABEL_236;
              }
            }
          }
          v296 = objc_msgSend_countByEnumeratingWithState_objects_count_(a7, v293, (uint64_t)v800, (uint64_t)buf, 16);
          if (!v296)
          {
LABEL_236:
            objc_msgSend_updateCourse_andCourseAccuracy_(v770, v293, v294, v295, v286, v291);
            break;
          }
        }
      }
    }
LABEL_237:
    sub_18F67F298(&v770, &v769);
    if ((sub_18F6C6A64((uint64_t)v771, a7, v273, v344, 1.5, 45.0, 25.0) & 1) == 0
      || (v345 = *(_DWORD *)(v769 + 88), v345 > 0xD))
    {
LABEL_326:
      v463 = (std::__shared_weak_count *)*((_QWORD *)&v769 + 1);
      if (*((_QWORD *)&v769 + 1))
      {
        v464 = (unint64_t *)(*((_QWORD *)&v769 + 1) + 8);
        do
          v465 = __ldaxr(v464);
        while (__stlxr(v465 - 1, v464));
        if (!v465)
        {
          ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
          std::__shared_weak_count::__release_weak(v463);
        }
      }
      goto LABEL_331;
    }
    v346 = 1 << v345;
    if ((v346 & 0x20A) == 0)
    {
      if ((v346 & 0x2810) != 0)
      {
        if (v279)
        {
          if (objc_msgSend_isCourseValid(v770, v269, v270, v271))
          {
            objc_msgSend_course(v770, v347, v348, v349);
            v275 = v350;
          }
        }
        else
        {
          objc_msgSend_latitude(v770, v269, v270, v271);
          v356 = v355;
          objc_msgSend_longitude(v770, v357, v358, v359);
          v361 = v360;
          objc_msgSend_latitude(v274, v362, v363, v364);
          v366 = v365;
          objc_msgSend_longitude(v274, v367, v368, v369);
          v374 = sub_18F5BD064((double *)v12, v356, v361, v366, v370, 0.0);
          if (v374 > 75.0 || v374 > 50.0 && (objc_msgSend_horizontalAccuracy(v770, v371, v372, v373), v407 <= 30.0))
          {
            objc_msgSend_latitude(v274, v371, v372, v373);
            v376 = v375;
            objc_msgSend_longitude(v274, v377, v378, v379);
            v381 = v380;
            objc_msgSend_latitude(v770, v382, v383, v384);
            v386 = v385;
            objc_msgSend_longitude(v770, v387, v388, v389);
            v275 = sub_18F71AF58((double *)v12, v376, v381, v386, v390);
            v274 = v770;
          }
        }
        v408 = v769;
        *(double *)(v769 + 32) = v275;
        v409 = *(double *)(v408 + 40);
        if (v275 >= 0.0)
        {
          v410 = *(double *)(v408 + 24);
          if (v409 < v410)
            v409 = v410 + 10.0;
          if (v409 > 179.0)
            v409 = 135.0;
        }
        *(double *)(v408 + 40) = fmax(v409, 60.0);
        sub_18F623AB8((char **)&v795, &v769);
        v768 = 0uLL;
        v411 = *(double *)(v769 + 32);
        if (v411 >= 0.0)
        {
          v412 = *(double *)(v769 + 40);
          if (v412 > 0.0
            && !sub_18F621014(*a9, (uint64_t *)&v768, *(_DWORD *)(v769 + 96), *(double *)v769, *(double *)(v769 + 8), *(double *)(v769 + 16), v411, *(double *)(v769 + 24), v412))
          {
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
            v413 = qword_1EE172170;
            if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
            {
              if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v414 = a2;
              else
                v414 = (const std::string *)a2->__r_.__value_.__r.__words[0];
              v415 = *(_QWORD *)v769;
              v416 = *(_QWORD *)(v769 + 8);
              v417 = *(_QWORD *)(v769 + 16);
              v418 = *(_QWORD *)(v769 + 24);
              v419 = *(_QWORD *)(v769 + 32);
              v420 = *(_QWORD *)(v769 + 40);
              v421 = *(_DWORD *)(v769 + 88);
              *(_DWORD *)buf = 136448259;
              *(_QWORD *)&buf[4] = v414;
              *(_WORD *)&buf[12] = 2050;
              *(_QWORD *)&buf[14] = v415;
              *(_WORD *)&buf[22] = 2049;
              *(_QWORD *)&buf[24] = v416;
              *(_WORD *)&buf[32] = 2049;
              *(_QWORD *)&buf[34] = v417;
              *(_WORD *)&buf[42] = 2049;
              *(_QWORD *)&buf[44] = v419;
              *(_WORD *)&buf[52] = 2049;
              *(_QWORD *)&buf[54] = v418;
              *(_WORD *)&buf[62] = 2049;
              *(_QWORD *)&buf[64] = v420;
              *(_WORD *)&buf[72] = 1026;
              *(_DWORD *)&buf[74] = a3;
              *(_WORD *)&buf[78] = 1026;
              *(_DWORD *)&buf[80] = v421;
              _os_log_impl(&dword_18F5B3000, v413, OS_LOG_TYPE_DEBUG, "CLTSP,MI,unable to snap WiFi or LOI location,id,%{public}s,time,%{public}.3lf,rawLL,%{private}.7lf,%{private}.7lf,rawCourse,%{private}.3lf,hunc,%{private}.3lf,cunc,%{private}.3lf,mode,%{public}d,type,%{public}d", buf, 0x54u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
              if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v483 = a2;
              else
                v483 = (const std::string *)a2->__r_.__value_.__r.__words[0];
              v484 = *(_QWORD *)v769;
              v485 = *(_QWORD *)(v769 + 8);
              v486 = *(_QWORD *)(v769 + 16);
              v487 = *(_QWORD *)(v769 + 24);
              v488 = *(_QWORD *)(v769 + 32);
              v489 = *(_QWORD *)(v769 + 40);
              v490 = *(_DWORD *)(v769 + 88);
              *(_DWORD *)v800 = 136448259;
              *(_QWORD *)&v800[4] = v483;
              *(_WORD *)&v800[12] = 2050;
              *(_QWORD *)&v800[14] = v484;
              *(_WORD *)&v800[22] = 2049;
              *(_QWORD *)&v800[24] = v485;
              *(_WORD *)&v800[32] = 2049;
              *(_QWORD *)&v800[34] = v486;
              *(_WORD *)&v800[42] = 2049;
              *(_QWORD *)&v800[44] = v488;
              *(_WORD *)&v800[52] = 2049;
              *(_QWORD *)&v800[54] = v487;
              *(_WORD *)&v800[62] = 2049;
              *(_QWORD *)&v800[64] = v489;
              *(_WORD *)&v800[72] = 1026;
              *(_DWORD *)&v800[74] = a3;
              *(_WORD *)&v800[78] = 1026;
              *(_DWORD *)&v800[80] = v490;
              v491 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v491);
              if (v491 != buf)
                free(v491);
              v12 = v741;
              v272 = v743;
            }
          }
          v422 = v768;
          if ((_QWORD)v768)
          {
            v423 = v769;
            *(_QWORD *)(v768 + 104) = *(_QWORD *)(v769 + 48);
            *(_DWORD *)(v422 + 120) = *(_DWORD *)(v423 + 88);
            if (*(_QWORD *)v422)
            {
              sub_18F623AB8((char **)&v774, &v768);
              v424 = *(_QWORD *)v768;
              v425 = (*(_DWORD *)(*(_QWORD *)v768 + 20) < 3u || (*(_DWORD *)(v424 + 24) - 1) <= 1)
                  && *(_DWORD *)(v424 + 76) != 2;
              v426 = *(_DWORD *)(v769 + 88) == 13 || v279;
            }
            else
            {
              v425 = 0;
              v426 = 0;
            }
            if ((sub_18F6C6A64((uint64_t)v771, a7, v273, v271, 60.0, 45.0, 25.0) | v426) == 1
              && ((v427 = *(double *)(v769 + 24), v427 < 50.0)
               || (v427 < 150.0 ? (v428 = v425) : (v428 = 0), (v428 | v426) == 1))
              && ((v426 & 1) != 0
               || (v440 = *(_QWORD *)v768) != 0
               && (*(_DWORD *)(v440 + 20) & 0xFFFFFFFE) != 8
               && (*(_DWORD *)(v440 + 24) & 0xFFFFFFFE) != 6
               && (*(double *)(v768 + 88) < 45.0 ? (v441 = 1) : (v441 = v425), v441 == 1)))
            {
              sub_18F623AB8((char **)&v793, &v769);
              sub_18F623AB8((char **)&v772, &v768);
              objc_msgSend_updateCourse_andCourseAccuracy_(v770, v429, v430, v431, *(double *)(v769 + 32), *(double *)(v769 + 40));
              objc_msgSend_addObject_(v743, v432, (uint64_t)v770, v433);
              Object = (void *)objc_msgSend_lastObject(v743, v434, v435, v436);
              if (*(_QWORD *)v768)
                objc_msgSend_setMapsRoadClass_(Object, v438, *(unsigned int *)(*(_QWORD *)v768 + 20), v439);
              else
                objc_msgSend_setMapsRoadClass_(Object, v438, 0xFFFFFFFFLL, v439);
              v442 = 1;
            }
            else
            {
              v442 = 0;
            }
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
            v443 = qword_1EE172170;
            if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
            {
              if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v444 = a2;
              else
                v444 = (const std::string *)a2->__r_.__value_.__r.__words[0];
              v445 = *(_QWORD *)v769;
              v446 = *(_QWORD *)(v769 + 8);
              v447 = *(_QWORD *)(v768 + 24);
              v448 = *(_QWORD *)(v768 + 32);
              v449 = *(_QWORD *)(v769 + 16);
              v450 = *(_QWORD *)(v769 + 24);
              v452 = *(_QWORD *)(v769 + 32);
              v451 = *(_QWORD *)(v769 + 40);
              v453 = *(_QWORD *)(v768 + 40);
              v454 = *(_QWORD *)(v768 + 48);
              v455 = *(_QWORD *)(v768 + 56);
              v457 = *(_QWORD *)(v768 + 72);
              v456 = *(_QWORD *)(v768 + 80);
              v458 = *(_QWORD *)(v768 + 88);
              v459 = *(_DWORD *)(v769 + 88);
              *(_DWORD *)buf = 67244547;
              *(_DWORD *)&buf[4] = v442;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = v444;
              *(_WORD *)&buf[18] = 2050;
              *(_QWORD *)&buf[20] = v445;
              *(_WORD *)&buf[28] = 2049;
              *(_QWORD *)&buf[30] = v446;
              *(_WORD *)&buf[38] = 2049;
              *(_QWORD *)&buf[40] = v449;
              *(_WORD *)&buf[48] = 2049;
              *(_QWORD *)&buf[50] = v452;
              *(_WORD *)&buf[58] = 2049;
              *(_QWORD *)&buf[60] = v447;
              *(_WORD *)&buf[68] = 2049;
              *(_QWORD *)&buf[70] = v448;
              *(_WORD *)&buf[78] = 2049;
              *(_QWORD *)&buf[80] = v453;
              *(_WORD *)&buf[88] = 2049;
              *(_QWORD *)&buf[90] = v450;
              *(_WORD *)&buf[98] = 2049;
              *(_QWORD *)&buf[100] = v451;
              *(_WORD *)&buf[108] = 2050;
              *(_QWORD *)&buf[110] = v454;
              *(_WORD *)&buf[118] = 2050;
              *(_QWORD *)&buf[120] = v455;
              *(_WORD *)&buf[128] = 2050;
              *(_QWORD *)&buf[130] = v456;
              *(_WORD *)&buf[138] = 2050;
              *(_QWORD *)&buf[140] = v457;
              *(_WORD *)&buf[148] = 2050;
              *(_QWORD *)&buf[150] = v458;
              *(_WORD *)&buf[158] = 1026;
              *(_DWORD *)&buf[160] = a3;
              *(_WORD *)v805 = 1026;
              *(_DWORD *)&v805[2] = v459;
              _os_log_impl(&dword_18F5B3000, v443, OS_LOG_TYPE_DEBUG, "CLTSP,MI,wifiLocation,filtered,%{public}d,id,%{public}s,time,%{public}.3lf,rawLL,%{private}.7lf,%{private}.7lf,rawCourse,%{private}.3lf,snapLL,%{private}.7lf,%{private}.7lf,snapCourse,%{private}.3lf,hunc,%{private}.3lf,cunc,%{private}.3lf,projection,%{public}.8lf,score,%{public}.12lf,dE,%{public}.2lf,dN,%{public}.2lf,dCourse,%{public}.2lf,mode,%{public}d,type,%{public}d", buf, 0xAAu);
            }
            v272 = v743;
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
              if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v466 = a2;
              else
                v466 = (const std::string *)a2->__r_.__value_.__r.__words[0];
              v467 = *(_QWORD *)v769;
              v468 = *(_QWORD *)(v769 + 8);
              v469 = *(_QWORD *)(v768 + 24);
              v470 = *(_QWORD *)(v768 + 32);
              v471 = *(_QWORD *)(v769 + 16);
              v472 = *(_QWORD *)(v769 + 24);
              v474 = *(_QWORD *)(v769 + 32);
              v473 = *(_QWORD *)(v769 + 40);
              v475 = *(_QWORD *)(v768 + 40);
              v476 = *(_QWORD *)(v768 + 48);
              v477 = *(_QWORD *)(v768 + 56);
              v479 = *(_QWORD *)(v768 + 72);
              v478 = *(_QWORD *)(v768 + 80);
              v480 = *(_QWORD *)(v768 + 88);
              v481 = *(_DWORD *)(v769 + 88);
              *(_DWORD *)v800 = 67244547;
              *(_DWORD *)&v800[4] = v442;
              *(_WORD *)&v800[8] = 2082;
              *(_QWORD *)&v800[10] = v466;
              *(_WORD *)&v800[18] = 2050;
              *(_QWORD *)&v800[20] = v467;
              *(_WORD *)&v800[28] = 2049;
              *(_QWORD *)&v800[30] = v468;
              *(_WORD *)&v800[38] = 2049;
              *(_QWORD *)&v800[40] = v471;
              *(_WORD *)&v800[48] = 2049;
              *(_QWORD *)&v800[50] = v474;
              *(_WORD *)&v800[58] = 2049;
              *(_QWORD *)&v800[60] = v469;
              *(_WORD *)&v800[68] = 2049;
              *(_QWORD *)&v800[70] = v470;
              *(_WORD *)&v800[78] = 2049;
              *(_QWORD *)&v800[80] = v475;
              *(_WORD *)&v800[88] = 2049;
              *(_QWORD *)&v800[90] = v472;
              *(_WORD *)&v800[98] = 2049;
              *(_QWORD *)&v800[100] = v473;
              *(_WORD *)&v800[108] = 2050;
              *(_QWORD *)&v800[110] = v476;
              *(_WORD *)&v800[118] = 2050;
              *(_QWORD *)&v800[120] = v477;
              *(_WORD *)&v800[128] = 2050;
              *(_QWORD *)&v800[130] = v478;
              *(_WORD *)&v800[138] = 2050;
              *(_QWORD *)&v800[140] = v479;
              *(_WORD *)&v800[148] = 2050;
              *(_QWORD *)&v800[150] = v480;
              *(_WORD *)&v800[158] = 1026;
              *(_DWORD *)&v800[160] = a3;
              *(_WORD *)v801 = 1026;
              *(_DWORD *)&v801[2] = v481;
              v482 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v482);
              if (v482 != buf)
                free(v482);
            }
          }
        }
        v460 = (std::__shared_weak_count *)*((_QWORD *)&v768 + 1);
        if (*((_QWORD *)&v768 + 1))
        {
          v461 = (unint64_t *)(*((_QWORD *)&v768 + 1) + 8);
          do
            v462 = __ldaxr(v461);
          while (__stlxr(v462 - 1, v461));
          if (!v462)
          {
            ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
            std::__shared_weak_count::__release_weak(v460);
          }
        }
      }
      goto LABEL_326;
    }
    if (objc_msgSend_isGoodGPSFixWithGoodCourse(v770, v269, v270, v271))
    {
      if (((objc_msgSend_isOriginalLocationType(v770, v351, v352, v353) | v279) & 1) == 0)
      {
LABEL_246:
        v354 = 0;
LABEL_251:
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
        v391 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
        {
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v392 = a2;
          else
            v392 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          v393 = *(_QWORD *)v769;
          v394 = *(_QWORD *)(v769 + 8);
          v395 = *(_QWORD *)(v769 + 16);
          v396 = *(_QWORD *)(v769 + 24);
          v398 = *(_QWORD *)(v769 + 32);
          v397 = *(_QWORD *)(v769 + 40);
          *(_DWORD *)buf = 67242243;
          *(_DWORD *)&buf[4] = v354;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = v392;
          *(_WORD *)&buf[18] = 2050;
          *(_QWORD *)&buf[20] = v393;
          *(_WORD *)&buf[28] = 2049;
          *(_QWORD *)&buf[30] = v394;
          *(_WORD *)&buf[38] = 2049;
          *(_QWORD *)&buf[40] = v395;
          *(_WORD *)&buf[48] = 2049;
          *(_QWORD *)&buf[50] = v398;
          *(_WORD *)&buf[58] = 2049;
          *(_QWORD *)&buf[60] = v396;
          *(_WORD *)&buf[68] = 2049;
          *(_QWORD *)&buf[70] = v397;
          *(_WORD *)&buf[78] = 1026;
          *(_DWORD *)&buf[80] = a3;
          _os_log_impl(&dword_18F5B3000, v391, OS_LOG_TYPE_DEBUG, "CLTSP,MI,gpsLocation,filtered,%{public}d,id,%{public}s,time,%{public}.3lf,rawLL,%{private}.7lf,%{private}.7lf,rawCourse,%{private}.3lf,hunc,%{private}.3lf,cunc,%{private}.3lf,mode,%{public}d", buf, 0x54u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v399 = a2;
          else
            v399 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          v400 = *(_QWORD *)v769;
          v401 = *(_QWORD *)(v769 + 8);
          v402 = *(_QWORD *)(v769 + 16);
          v403 = *(_QWORD *)(v769 + 24);
          v405 = *(_QWORD *)(v769 + 32);
          v404 = *(_QWORD *)(v769 + 40);
          *(_DWORD *)v800 = 67242243;
          *(_DWORD *)&v800[4] = v354;
          *(_WORD *)&v800[8] = 2082;
          *(_QWORD *)&v800[10] = v399;
          *(_WORD *)&v800[18] = 2050;
          *(_QWORD *)&v800[20] = v400;
          *(_WORD *)&v800[28] = 2049;
          *(_QWORD *)&v800[30] = v401;
          *(_WORD *)&v800[38] = 2049;
          *(_QWORD *)&v800[40] = v402;
          *(_WORD *)&v800[48] = 2049;
          *(_QWORD *)&v800[50] = v405;
          *(_WORD *)&v800[58] = 2049;
          *(_QWORD *)&v800[60] = v403;
          *(_WORD *)&v800[68] = 2049;
          *(_QWORD *)&v800[70] = v404;
          *(_WORD *)&v800[78] = 1026;
          *(_DWORD *)&v800[80] = a3;
          v406 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v406);
          if (v406 != buf)
            free(v406);
        }
        goto LABEL_326;
      }
    }
    else if (!v279)
    {
      goto LABEL_246;
    }
    v274 = v770;
    v275 = *(double *)(v769 + 32);
    objc_msgSend_addObject_(v272, v351, (uint64_t)v770, v353);
    v354 = 1;
    goto LABEL_251;
  }
  v738 = a6;
  v15 = a10;
  v16 = *a10;
  if (*a10)
  {
    v17 = (void *)objc_msgSend_mutableCopy(a7, (const char *)a2, a3, a4);
    v18 = a9[1];
    v784 = *a9;
    v785 = (std::__shared_weak_count *)v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    sub_18F6C49A8(v16, a2, 1, v11, v17, &v784);
    v22 = v785;
    if (v785)
    {
      v23 = (unint64_t *)&v785->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v782 = 0u;
    v783 = 0u;
    v780 = 0u;
    v781 = 0u;
    v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(a7, v21, (uint64_t)&v780, (uint64_t)v803, 16);
    if (v27)
    {
      v28 = 0;
      v739 = (uint64_t)(v12 + 7);
      v29 = *(_QWORD *)v781;
      v742 = *(_QWORD *)v781;
      do
      {
        v30 = 0;
        v752 = v27;
        do
        {
          if (*(_QWORD *)v781 != v29)
            objc_enumerationMutation(a7);
          v31 = *(void **)(*((_QWORD *)&v780 + 1) + 8 * v30);
          if (!v31)
          {
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
            v46 = qword_1EE172170;
            if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F5B3000, v46, OS_LOG_TYPE_ERROR, "CLTSP,MI,makeSegmentsForRouteConstruction,loc is unexpectedly nil", buf, 2u);
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
              *(_WORD *)v800 = 0;
              v47 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v47);
              if (v47 != buf)
                free(v47);
            }
            goto LABEL_61;
          }
          if (v31 != (void *)objc_msgSend_objectAtIndexedSubscript_(a7, v25, 0, v26))
            goto LABEL_22;
          v48 = *v15;
          v49 = (void *)objc_msgSend_timestamp(v31, v32, v33, v34);
          objc_msgSend_timeIntervalSinceReferenceDate(v49, v50, v51, v52);
          sub_18F6C9760(v48, &v774, v53);
          if (!(_QWORD)v774)
            goto LABEL_110;
          v796 = 0;
          v795 = 0;
          v797 = 0;
          sub_18F623AB8((char **)&v795, &v774);
          v54 = v12[6];
          if (v54 >= v12[7])
          {
            v58 = sub_18F6CA50C(v756, &v795);
          }
          else
          {
            sub_18F6CA4BC((uint64_t)v756, &v795);
            v58 = v54 + 24;
          }
          v12[6] = v58;
          v114 = (void *)objc_msgSend_firstObject(a8, v55, v56, v57);
          v118 = (void *)objc_msgSend_timestamp(v114, v115, v116, v117);
          objc_msgSend_timeIntervalSinceReferenceDate(v118, v119, v120, v121);
          v123 = v122;
          while (1)
          {
            v124 = *(double *)(v774 + 16);
            if (v124 <= v123)
              break;
            sub_18F6C9760(*v15, &v772, v124);
            v125 = v772;
            if ((_QWORD)v772)
            {
              v793 = 0uLL;
              v794 = 0;
              sub_18F623AB8((char **)&v793, &v772);
              v127 = (uint64_t **)v12[5];
              v126 = v12[6];
              v128 = v12[7];
              if (v126 < v128)
              {
                if (v127 == (uint64_t **)v126)
                {
                  sub_18F6CA4BC((uint64_t)v756, (_QWORD **)&v793);
                }
                else
                {
                  sub_18F6CAA24((uint64_t)v756, (_QWORD *)v12[5], v126, (uint64_t)(v127 + 3));
                  v129 = (uint64_t **)&v793;
                  if (v127 <= (uint64_t **)&v793)
                    v129 = (uint64_t **)&v793 + 3 * (v12[6] > (unint64_t)&v793);
                  if (v127 != v129)
                    sub_18F62C588((uint64_t)v127, *v129, v129[1], ((char *)v129[1] - (char *)*v129) >> 4);
                }
                goto LABEL_91;
              }
              v130 = 1 - 0x5555555555555555 * ((uint64_t)(v126 - (_QWORD)v127) >> 3);
              if (v130 > 0xAAAAAAAAAAAAAAALL)
                sub_18F5F7864();
              v131 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v128 - (_QWORD)v127) >> 3);
              if (2 * v131 > v130)
                v130 = 2 * v131;
              if (v131 >= 0x555555555555555)
                v132 = 0xAAAAAAAAAAAAAAALL;
              else
                v132 = v130;
              *(_QWORD *)&v800[32] = v739;
              if (v132)
              {
                v133 = (char *)sub_18F5F6858(v739, v132);
                *(_QWORD *)v800 = v133;
                *(_QWORD *)&v800[8] = v133;
                *(_QWORD *)&v800[16] = v133;
                *(_QWORD *)&v800[24] = &v133[24 * v134];
                if (!v134)
                {
LABEL_84:
                  *(_QWORD *)&buf[32] = v739;
                  v135 = sub_18F5F6858(v739, 1uLL);
                  v137 = *(_QWORD *)&v800[8];
                  if (*(_QWORD *)&v800[16] == *(_QWORD *)&v800[8])
                  {
                    v140 = vdupq_n_s64(*(unint64_t *)&v800[8]);
                    v138 = v135;
                  }
                  else
                  {
                    v138 = (_QWORD *)((char *)v135 + *(_QWORD *)&v800[16] - *(_QWORD *)&v800[8]);
                    v139 = v135;
                    do
                    {
                      *v139 = 0;
                      v139[1] = 0;
                      v139[2] = 0;
                      *(_OWORD *)v139 = *(_OWORD *)v137;
                      v139[2] = *(_QWORD *)(v137 + 16);
                      *(_QWORD *)v137 = 0;
                      *(_QWORD *)(v137 + 8) = 0;
                      *(_QWORD *)(v137 + 16) = 0;
                      v139 += 3;
                      v137 += 24;
                    }
                    while (v139 != v138);
                    v140 = *(int64x2_t *)&v800[8];
                  }
                  v141 = *(_QWORD *)v800;
                  v142 = *(_QWORD *)&v800[24];
                  *(_QWORD *)v800 = v135;
                  *(_QWORD *)&v800[8] = v135;
                  *(int64x2_t *)&buf[8] = v140;
                  *(_QWORD *)&v800[16] = v138;
                  *(_QWORD *)&v800[24] = &v135[3 * v136];
                  *(_QWORD *)buf = v141;
                  *(_QWORD *)&buf[24] = v142;
                  sub_18F6CA7B0((void **)buf);
                  v133 = *(char **)&v800[16];
                }
                *(_QWORD *)v133 = 0;
                *((_QWORD *)v133 + 1) = 0;
                *((_QWORD *)v133 + 2) = 0;
                sub_18F6C9D78(v133, (_QWORD *)v793, *((_QWORD **)&v793 + 1), (uint64_t)(*((_QWORD *)&v793 + 1) - v793) >> 4);
                *(_QWORD *)&v800[16] += 24;
                sub_18F6CAAA0(v756, v800, v127);
                sub_18F6CA7B0((void **)v800);
LABEL_91:
                sub_18F623A40(&v774, (uint64_t *)&v772);
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v143 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                {
                  v144 = *(_QWORD *)(v774 + 16);
                  *(_DWORD *)buf = 134349312;
                  *(double *)&buf[4] = v123;
                  *(_WORD *)&buf[12] = 2050;
                  *(_QWORD *)&buf[14] = v144;
                  _os_log_impl(&dword_18F5B3000, v143, OS_LOG_TYPE_DEBUG, "CLTSP,makeSegmentsForRouteConstruction,prior snap added,firstUpsampledTime,%{public}.1lf,snapTime,%{public}.1lf", buf, 0x16u);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                  v148 = *(_QWORD *)(v774 + 16);
                  *(_DWORD *)v800 = 134349312;
                  *(double *)&v800[4] = v123;
                  *(_WORD *)&v800[12] = 2050;
                  *(_QWORD *)&v800[14] = v148;
                  v149 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v149);
                  if (v149 != buf)
                    free(v149);
                }
                *(_QWORD *)buf = &v793;
                sub_18F62AB98((void ***)buf);
                goto LABEL_97;
              }
              memset(v800, 0, 32);
              goto LABEL_84;
            }
LABEL_97:
            v145 = (std::__shared_weak_count *)*((_QWORD *)&v772 + 1);
            if (!*((_QWORD *)&v772 + 1))
              goto LABEL_101;
            v146 = (unint64_t *)(*((_QWORD *)&v772 + 1) + 8);
            do
              v147 = __ldaxr(v146);
            while (__stlxr(v147 - 1, v146));
            if (!v147)
            {
              ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
              std::__shared_weak_count::__release_weak(v145);
              if (!v125)
                break;
            }
            else
            {
LABEL_101:
              if (!v125)
                break;
            }
          }
          *(_QWORD *)buf = &v795;
          sub_18F62AB98((void ***)buf);
          v27 = v752;
          v29 = v742;
LABEL_110:
          v150 = (std::__shared_weak_count *)*((_QWORD *)&v774 + 1);
          if (*((_QWORD *)&v774 + 1))
          {
            v151 = (unint64_t *)(*((_QWORD *)&v774 + 1) + 8);
            do
              v152 = __ldaxr(v151);
            while (__stlxr(v152 - 1, v151));
            if (!v152)
            {
              ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
              std::__shared_weak_count::__release_weak(v150);
            }
          }
LABEL_22:
          if ((objc_msgSend_isGPSLocationType(v31, v32, v33, v34) & 1) != 0
            || (objc_msgSend_isWiFiLocationType(v31, v25, v35, v26) & 1) != 0
            || objc_msgSend_isLoiLocationType(v31, v25, v35, v26))
          {
            v36 = *v15;
            v37 = (void *)objc_msgSend_timestamp(v31, v25, v35, v26);
            objc_msgSend_timeIntervalSinceReferenceDate(v37, v38, v39, v40);
            sub_18F6C9668(v36, (uint64_t *)&v793, v41);
            if (!v28
              || v31 == (void *)objc_msgSend_lastObject(a7, v25, v42, v26)
              || (objc_msgSend_distanceFromLocation_(v31, v25, v28, v26), v43 >= 10.0))
            {
              if ((_QWORD)v793)
              {
                v796 = 0;
                v795 = 0;
                v797 = 0;
                sub_18F623AB8((char **)&v795, &v793);
                v44 = v12[6];
                if (v44 >= v12[7])
                {
                  v45 = sub_18F6CA50C(v756, &v795);
                }
                else
                {
                  sub_18F6CA4BC((uint64_t)v756, &v795);
                  v45 = v44 + 24;
                }
                v12[6] = v45;
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v59 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                {
                  loga = v59;
                  if (objc_msgSend_isGPSLocationType(v31, v60, v61, v62))
                    v66 = "gps";
                  else
                    v66 = "wifi";
                  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v67 = a2;
                  else
                    v67 = (const std::string *)a2->__r_.__value_.__r.__words[0];
                  v745 = v67;
                  v747 = v66;
                  v68 = (void *)objc_msgSend_timestamp(v31, v63, v64, v65);
                  objc_msgSend_timeIntervalSinceReferenceDate(v68, v69, v70, v71);
                  v73 = v72;
                  objc_msgSend_latitude(v31, v74, v75, v76);
                  v78 = v77;
                  objc_msgSend_longitude(v31, v79, v80, v81);
                  v83 = v82;
                  objc_msgSend_course(v31, v84, v85, v86);
                  v88 = v87;
                  v89 = *(_QWORD *)(v793 + 24);
                  v90 = *(_QWORD *)(v793 + 32);
                  v91 = *(_QWORD *)(v793 + 40);
                  objc_msgSend_horizontalAccuracy(v31, v92, v93, v94);
                  v96 = v95;
                  objc_msgSend_courseAccuracy(v31, v97, v98, v99);
                  v101 = v100;
                  v103 = *(_QWORD *)(v793 + 48);
                  v102 = *(_QWORD *)(v793 + 56);
                  v105 = *(_QWORD *)(v793 + 72);
                  v104 = *(_QWORD *)(v793 + 80);
                  v106 = *(_QWORD *)(v793 + 88);
                  v110 = objc_msgSend_locType(v31, v107, v108, v109);
                  *(_DWORD *)buf = 136450563;
                  *(_QWORD *)&buf[4] = v747;
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v745;
                  *(_WORD *)&buf[22] = 2050;
                  *(_QWORD *)&buf[24] = v73;
                  *(_WORD *)&buf[32] = 2049;
                  *(_QWORD *)&buf[34] = v78;
                  *(_WORD *)&buf[42] = 2049;
                  *(_QWORD *)&buf[44] = v83;
                  *(_WORD *)&buf[52] = 2049;
                  *(_QWORD *)&buf[54] = v88;
                  *(_WORD *)&buf[62] = 2049;
                  *(_QWORD *)&buf[64] = v89;
                  *(_WORD *)&buf[72] = 2049;
                  *(_QWORD *)&buf[74] = v90;
                  *(_WORD *)&buf[82] = 2049;
                  *(_QWORD *)&buf[84] = v91;
                  *(_WORD *)&buf[92] = 2049;
                  *(_QWORD *)&buf[94] = v96;
                  *(_WORD *)&buf[102] = 2049;
                  *(_QWORD *)&buf[104] = v101;
                  *(_WORD *)&buf[112] = 2050;
                  *(_QWORD *)&buf[114] = v103;
                  *(_WORD *)&buf[122] = 2050;
                  *(_QWORD *)&buf[124] = v102;
                  *(_WORD *)&buf[132] = 2050;
                  *(_QWORD *)&buf[134] = v104;
                  *(_WORD *)&buf[142] = 2050;
                  *(_QWORD *)&buf[144] = v105;
                  *(_WORD *)&buf[152] = 2050;
                  *(_QWORD *)&buf[154] = v106;
                  *(_WORD *)&buf[162] = 1026;
                  *(_DWORD *)v805 = 1;
                  *(_WORD *)&v805[4] = 1026;
                  v806 = v110;
                  _os_log_impl(&dword_18F5B3000, loga, OS_LOG_TYPE_DEBUG, "CLTSP,MI,%{public}sLocation,filtered,1,id,%{public}s,time,%{public}.3lf,rawLL,%{private}.7lf,%{private}.7lf,rawCourse,%{private}.3lf,snapLL,%{private}.7lf,%{private}.7lf,snapCourse,%{private}.3lf,hunc,%{private}.3lf,cunc,%{private}.3lf,projection,%{public}.8lf,score,%{public}.12lf,dE,%{public}.2lf,dN,%{public}.2lf,dCourse,%{public}.2lf,mode,%{public}d,type,%{public}d", buf, 0xAEu);
                  v12 = v741;
                  v29 = v742;
                  v15 = a10;
                  v27 = v752;
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                  if (objc_msgSend_isGPSLocationType(v31, v153, v154, v155))
                    v159 = "gps";
                  else
                    v159 = "wifi";
                  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v160 = a2;
                  else
                    v160 = (const std::string *)a2->__r_.__value_.__r.__words[0];
                  v746 = v160;
                  v748 = v159;
                  v161 = (void *)objc_msgSend_timestamp(v31, v156, v157, v158);
                  objc_msgSend_timeIntervalSinceReferenceDate(v161, v162, v163, v164);
                  v166 = v165;
                  objc_msgSend_latitude(v31, v167, v168, v169);
                  v171 = v170;
                  objc_msgSend_longitude(v31, v172, v173, v174);
                  v176 = v175;
                  objc_msgSend_course(v31, v177, v178, v179);
                  v181 = v180;
                  v182 = *(_QWORD *)(v793 + 24);
                  v183 = *(_QWORD *)(v793 + 32);
                  v184 = *(_QWORD *)(v793 + 40);
                  objc_msgSend_horizontalAccuracy(v31, v185, v186, v187);
                  v189 = v188;
                  objc_msgSend_courseAccuracy(v31, v190, v191, v192);
                  v194 = v193;
                  v196 = *(_QWORD *)(v793 + 48);
                  v195 = *(_QWORD *)(v793 + 56);
                  v198 = *(_QWORD *)(v793 + 72);
                  v197 = *(_QWORD *)(v793 + 80);
                  v199 = *(_QWORD *)(v793 + 88);
                  v203 = objc_msgSend_locType(v31, v200, v201, v202);
                  *(_DWORD *)v800 = 136450563;
                  *(_QWORD *)&v800[4] = v748;
                  *(_WORD *)&v800[12] = 2082;
                  *(_QWORD *)&v800[14] = v746;
                  *(_WORD *)&v800[22] = 2050;
                  *(_QWORD *)&v800[24] = v166;
                  *(_WORD *)&v800[32] = 2049;
                  *(_QWORD *)&v800[34] = v171;
                  *(_WORD *)&v800[42] = 2049;
                  *(_QWORD *)&v800[44] = v176;
                  *(_WORD *)&v800[52] = 2049;
                  *(_QWORD *)&v800[54] = v181;
                  *(_WORD *)&v800[62] = 2049;
                  *(_QWORD *)&v800[64] = v182;
                  *(_WORD *)&v800[72] = 2049;
                  *(_QWORD *)&v800[74] = v183;
                  *(_WORD *)&v800[82] = 2049;
                  *(_QWORD *)&v800[84] = v184;
                  *(_WORD *)&v800[92] = 2049;
                  *(_QWORD *)&v800[94] = v189;
                  *(_WORD *)&v800[102] = 2049;
                  *(_QWORD *)&v800[104] = v194;
                  *(_WORD *)&v800[112] = 2050;
                  *(_QWORD *)&v800[114] = v196;
                  *(_WORD *)&v800[122] = 2050;
                  *(_QWORD *)&v800[124] = v195;
                  *(_WORD *)&v800[132] = 2050;
                  *(_QWORD *)&v800[134] = v197;
                  *(_WORD *)&v800[142] = 2050;
                  *(_QWORD *)&v800[144] = v198;
                  *(_WORD *)&v800[152] = 2050;
                  *(_QWORD *)&v800[154] = v199;
                  *(_WORD *)&v800[162] = 1026;
                  *(_DWORD *)v801 = 1;
                  *(_WORD *)&v801[4] = 1026;
                  v802 = v203;
                  v204 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v204);
                  v12 = v741;
                  v29 = v742;
                  v15 = a10;
                  v27 = v752;
                  if (v204 != buf)
                    free(v204);
                }
                *(_QWORD *)buf = &v795;
                sub_18F62AB98((void ***)buf);
                v28 = (uint64_t)v31;
              }
            }
            v111 = (std::__shared_weak_count *)*((_QWORD *)&v793 + 1);
            if (*((_QWORD *)&v793 + 1))
            {
              v112 = (unint64_t *)(*((_QWORD *)&v793 + 1) + 8);
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
          }
LABEL_61:
          ++v30;
        }
        while (v30 != v27);
        v205 = objc_msgSend_countByEnumeratingWithState_objects_count_(a7, v25, (uint64_t)&v780, (uint64_t)v803, 16);
        v27 = v205;
      }
      while (v205);
    }
  }
  if (v738)
  {
    v206 = *a9;
    v207 = (std::__shared_weak_count *)a9[1];
    v778 = *a9;
    v779 = v207;
    if (v207)
    {
      v208 = (unint64_t *)&v207->__shared_owners_;
      do
        v209 = __ldxr(v208);
      while (__stxr(v209 + 1, v208));
    }
    sub_18F6F4224((uint64_t)&v786, (const char *)a2, a8, v206, v207, 1);
    if (v207)
    {
      v210 = (unint64_t *)&v207->__shared_owners_;
      do
        v211 = __ldaxr(v210);
      while (__stlxr(v211 - 1, v210));
      if (!v211)
      {
        ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
        std::__shared_weak_count::__release_weak(v207);
      }
    }
  }
  v212 = (char *)v12[5];
  v213 = (char *)v12[6];
  if (v790 == v791)
    goto LABEL_523;
  v796 = 0;
  v795 = 0;
  v797 = 0;
  v214 = v213 - v212;
  if (v213 == v212)
  {
    v257 = 0;
    v215 = 0;
    goto LABEL_502;
  }
  logb = (os_log_t)(v213 - v212);
  v215 = 0;
  v216 = -1.0;
  v753 = v213;
  do
  {
    v217 = *(_QWORD **)v212;
    v218 = (_QWORD *)*((_QWORD *)v212 + 1);
    if (*(_QWORD **)v212 == v218)
      goto LABEL_184;
    if (v216 >= 0.0 || (v219 = *(v218 - 2)) == 0)
    {
      v754 = v212;
      v220 = v790;
      if (v790 != v791)
      {
        v221 = v791;
        v222 = *(double *)(*v217 + 16);
        do
        {
          v793 = 0uLL;
          v794 = 0;
          v224 = *v220;
          v223 = v220[1];
          if (*v220 != v223)
          {
            do
            {
              v225 = *(_QWORD *)v224;
              if (*(_QWORD *)v224 && *(_QWORD *)v225)
              {
                v226 = *(double *)(v225 + 16);
                if (v226 > v216 && v226 < v222)
                {
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                  v228 = qword_1EE172170;
                  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
                  {
                    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v229 = a2;
                    else
                      v229 = (const std::string *)a2->__r_.__value_.__r.__words[0];
                    v230 = *(_QWORD *)(*(_QWORD *)v224 + 16);
                    v231 = *(_QWORD *)(*(_QWORD *)v224 + 24);
                    v232 = *(_QWORD *)(*(_QWORD *)v224 + 32);
                    v233 = *(_QWORD *)(*(_QWORD *)v224 + 40);
                    v234 = *(_QWORD *)(*(_QWORD *)v224 + 48);
                    v235 = *(_QWORD *)(*(_QWORD *)v224 + 56);
                    v237 = *(_QWORD *)(*(_QWORD *)v224 + 72);
                    v236 = *(_QWORD *)(*(_QWORD *)v224 + 80);
                    v238 = *(_QWORD *)(*(_QWORD *)v224 + 88);
                    v239 = *(unsigned __int8 *)(*(_QWORD *)v224 + 64);
                    v240 = *(_DWORD *)(**(_QWORD **)v224 + 20);
                    *(_DWORD *)buf = 136449027;
                    *(_QWORD *)&buf[4] = v229;
                    *(_WORD *)&buf[12] = 2050;
                    *(_QWORD *)&buf[14] = v230;
                    *(_WORD *)&buf[22] = 2049;
                    *(_QWORD *)&buf[24] = v231;
                    *(_WORD *)&buf[32] = 2049;
                    *(_QWORD *)&buf[34] = v232;
                    *(_WORD *)&buf[42] = 2049;
                    *(_QWORD *)&buf[44] = v233;
                    *(_WORD *)&buf[52] = 2050;
                    *(_QWORD *)&buf[54] = v234;
                    *(_WORD *)&buf[62] = 2050;
                    *(_QWORD *)&buf[64] = v235;
                    *(_WORD *)&buf[72] = 2050;
                    *(_QWORD *)&buf[74] = v236;
                    *(_WORD *)&buf[82] = 2050;
                    *(_QWORD *)&buf[84] = v237;
                    *(_WORD *)&buf[92] = 2050;
                    *(_QWORD *)&buf[94] = v238;
                    *(_WORD *)&buf[102] = 1026;
                    *(_DWORD *)&buf[104] = v239;
                    *(_WORD *)&buf[108] = 1026;
                    *(_DWORD *)&buf[110] = v240;
                    _os_log_impl(&dword_18F5B3000, v228, OS_LOG_TYPE_DEBUG, "CLTSP,MI,snappedIILocation,id,%{public}s,time,%{public}.3lf,snapLL,%{private}.7lf,%{private}.7lf,rawCourse,%{private}.3lf,projection,%{public}.8lf,score,%{public}.12lf,dE,%{public}.2lf,dN,%{public}.2lf,dCourse,%{public}.2lf,valid,%{public}d,frc,%{public}d", buf, 0x72u);
                  }
                  if (sub_18F5C4AE0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172168 != -1)
                      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v241 = a2;
                    else
                      v241 = (const std::string *)a2->__r_.__value_.__r.__words[0];
                    v242 = *(_QWORD *)(*(_QWORD *)v224 + 16);
                    v243 = *(_QWORD *)(*(_QWORD *)v224 + 24);
                    v244 = *(_QWORD *)(*(_QWORD *)v224 + 32);
                    v245 = *(_QWORD *)(*(_QWORD *)v224 + 40);
                    v246 = *(_QWORD *)(*(_QWORD *)v224 + 48);
                    v247 = *(_QWORD *)(*(_QWORD *)v224 + 56);
                    v249 = *(_QWORD *)(*(_QWORD *)v224 + 72);
                    v248 = *(_QWORD *)(*(_QWORD *)v224 + 80);
                    v250 = *(_QWORD *)(*(_QWORD *)v224 + 88);
                    v251 = *(unsigned __int8 *)(*(_QWORD *)v224 + 64);
                    v252 = *(_DWORD *)(**(_QWORD **)v224 + 20);
                    *(_DWORD *)v800 = 136449027;
                    *(_QWORD *)&v800[4] = v241;
                    *(_WORD *)&v800[12] = 2050;
                    *(_QWORD *)&v800[14] = v242;
                    *(_WORD *)&v800[22] = 2049;
                    *(_QWORD *)&v800[24] = v243;
                    *(_WORD *)&v800[32] = 2049;
                    *(_QWORD *)&v800[34] = v244;
                    *(_WORD *)&v800[42] = 2049;
                    *(_QWORD *)&v800[44] = v245;
                    *(_WORD *)&v800[52] = 2050;
                    *(_QWORD *)&v800[54] = v246;
                    *(_WORD *)&v800[62] = 2050;
                    *(_QWORD *)&v800[64] = v247;
                    *(_WORD *)&v800[72] = 2050;
                    *(_QWORD *)&v800[74] = v248;
                    *(_WORD *)&v800[82] = 2050;
                    *(_QWORD *)&v800[84] = v249;
                    *(_WORD *)&v800[92] = 2050;
                    *(_QWORD *)&v800[94] = v250;
                    *(_WORD *)&v800[102] = 1026;
                    *(_DWORD *)&v800[104] = v251;
                    *(_WORD *)&v800[108] = 1026;
                    *(_DWORD *)&v800[110] = v252;
                    v253 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "void CLTripLocationFilter::insertUpsampledFilteredSnap(const std::string &, const std::vector<std::vector<CLGeoMapSnapDataPtr>> &)", "CoreLocation: %s\n", v253);
                    if (v253 != buf)
                      free(v253);
                  }
                  sub_18F623AB8((char **)&v793, v224);
                }
              }
              ++v224;
            }
            while (v224 != v223);
            if ((_QWORD)v793 != *((_QWORD *)&v793 + 1))
            {
              v216 = *(double *)(*(_QWORD *)(*((_QWORD *)&v793 + 1) - 16) + 16);
              v254 = v796;
              if ((unint64_t)v796 >= v797)
              {
                v255 = sub_18F6CA50C((uint64_t *)&v795, (_QWORD **)&v793);
              }
              else
              {
                *(_QWORD *)v796 = 0;
                *((_QWORD *)v254 + 1) = 0;
                *((_QWORD *)v254 + 2) = 0;
                sub_18F6C9D78(v254, (_QWORD *)v793, *((_QWORD **)&v793 + 1), (uint64_t)(*((_QWORD *)&v793 + 1) - v793) >> 4);
                v255 = (uint64_t)(v254 + 24);
              }
              v796 = (char *)v255;
            }
          }
          *(_QWORD *)buf = &v793;
          sub_18F62AB98((void ***)buf);
          v220 += 3;
        }
        while (v220 != v221);
        v215 = v796;
        v213 = v753;
      }
      v212 = v754;
      if ((unint64_t)v215 < v797)
        goto LABEL_179;
      v256 = sub_18F6CA50C((uint64_t *)&v795, (_QWORD **)v754);
LABEL_182:
      v215 = (char *)v256;
      goto LABEL_183;
    }
    v216 = *(double *)(v219 + 16);
    if ((unint64_t)v215 >= v797)
    {
      v256 = sub_18F6CA50C((uint64_t *)&v795, (_QWORD **)v212);
      goto LABEL_182;
    }
LABEL_179:
    *(_QWORD *)v215 = 0;
    *((_QWORD *)v215 + 1) = 0;
    *((_QWORD *)v215 + 2) = 0;
    sub_18F6C9D78(v215, *(_QWORD **)v212, *((_QWORD **)v212 + 1), (uint64_t)(*((_QWORD *)v212 + 1) - *(_QWORD *)v212) >> 4);
    v215 += 24;
LABEL_183:
    v796 = v215;
LABEL_184:
    v212 += 24;
  }
  while (v212 != v213);
  v257 = v795;
  v214 = (uint64_t)logb;
LABEL_502:
  if (v756 != (uint64_t *)&v795)
  {
    v699 = 0xAAAAAAAAAAAAAAABLL * ((v215 - (char *)v257) >> 3);
    if (v699 > 0xAAAAAAAAAAAAAAABLL * (v214 >> 3))
    {
      v701 = (uint64_t)(v741 + 7);
      v700 = v741[7];
      v702 = v741[5];
      if (0xAAAAAAAAAAAAAAABLL * ((v700 - v702) >> 3) >= v699)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((v741[6] - v702) >> 3) < v699)
        {
          v711 = &v257[(v741[6] - v702) >> 3];
          sub_18F6CACEC((uint64_t)v800, v257, v711, v741[5]);
          v710 = sub_18F6CAB50(v701, v711, (_QWORD **)v215, v741[6]);
          goto LABEL_520;
        }
        sub_18F6CACEC((uint64_t)v800, v257, (uint64_t **)v215, v741[5]);
        v712 = v714;
        v715 = v741[6];
        while (v715 != v712)
        {
          v715 -= 24;
          *(_QWORD *)buf = v715;
          sub_18F62AB98((void ***)buf);
        }
      }
      else
      {
        if (v702)
        {
          v703 = v741[6];
          v704 = (void *)v741[5];
          if (v703 != v702)
          {
            do
            {
              v703 -= 24;
              *(_QWORD *)buf = v703;
              sub_18F62AB98((void ***)buf);
            }
            while (v703 != v702);
            v704 = (void *)*v756;
          }
          v741[6] = v702;
          operator delete(v704);
          v700 = 0;
          *v756 = 0;
          v756[1] = 0;
          v756[2] = 0;
        }
        if (v699 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_548;
        v705 = 0xAAAAAAAAAAAAAAABLL * (v700 >> 3);
        v706 = 2 * v705;
        if (2 * v705 <= v699)
          v706 = 0xAAAAAAAAAAAAAAABLL * ((v215 - (char *)v257) >> 3);
        v707 = v705 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v706;
        if (v707 > 0xAAAAAAAAAAAAAAALL)
LABEL_548:
          sub_18F5F7864();
        v708 = (char *)sub_18F5F6858(v701, v707);
        v741[5] = v708;
        v741[6] = v708;
        v741[7] = &v708[24 * v709];
        v710 = sub_18F6CAB50(v701, v257, (_QWORD **)v215, (uint64_t)v708);
LABEL_520:
        v712 = v710;
      }
      v741[6] = v712;
    }
  }
  *(_QWORD *)buf = &v795;
  sub_18F62C498((void ***)buf);
  v212 = (char *)v741[5];
  v213 = (char *)v741[6];
LABEL_523:
  v259 = v212 != v213;
LABEL_524:
  *(_QWORD *)buf = &v790;
  sub_18F62C498((void ***)buf);
  return v259;
}

void sub_18F6FADB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void ****a63)
{
  void ***a65;
  void **a68;

  a63 = &a65;
  sub_18F62AB98((void ***)&a63);
  a65 = &a68;
  sub_18F62AB98((void ***)&a65);
  a68 = (void **)&STACK[0x2A0];
  sub_18F62AB98(&a68);
  STACK[0x2A0] = (unint64_t)&STACK[0x2B8];
  sub_18F62AB98((void ***)&STACK[0x2A0]);
  STACK[0x2B8] = a14;
  sub_18F62C498((void ***)&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6FB08C(uint64_t a1, const char *a2, void *a3, int a4)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __objc2_class *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double **i;
  double *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  CLTripSegmentLocation *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  double v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  id v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  double v98;
  const char *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  double v104;
  double v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  double v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  NSObject *v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  uint64_t *v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t *v186;
  unint64_t *v187;
  unint64_t v188;
  const char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _BOOL4 v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  uint64_t *v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t *v230;
  char *v231;
  uint64_t v234;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  double v241;
  uint64_t v242;
  double v243;
  std::__shared_weak_count *v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  int v249;
  double v250;
  __int16 v251;
  uint64_t v252;
  __int16 v253;
  uint64_t v254;
  __int16 v255;
  uint64_t v256;
  __int16 v257;
  uint64_t v258;
  __int16 v259;
  uint64_t v260;
  __int16 v261;
  uint64_t v262;
  __int16 v263;
  uint64_t v264;
  __int16 v265;
  uint64_t v266;
  __int16 v267;
  uint64_t v268;
  __int16 v269;
  uint64_t v270;
  __int16 v271;
  uint64_t v272;
  __int16 v273;
  uint64_t v274;
  __int16 v275;
  uint64_t v276;
  __int16 v277;
  _BOOL4 v278;
  __int16 v279;
  int v280;
  __int16 v281;
  uint64_t *v282;
  __int16 v283;
  int v284;
  __int16 v285;
  int v286;
  uint8_t buf[4];
  double v288;
  __int16 v289;
  uint64_t v290;
  __int16 v291;
  uint64_t v292;
  __int16 v293;
  uint64_t v294;
  __int16 v295;
  uint64_t v296;
  __int16 v297;
  uint64_t v298;
  __int16 v299;
  uint64_t v300;
  __int16 v301;
  uint64_t v302;
  __int16 v303;
  uint64_t v304;
  __int16 v305;
  uint64_t v306;
  __int16 v307;
  uint64_t v308;
  __int16 v309;
  uint64_t v310;
  __int16 v311;
  uint64_t v312;
  __int16 v313;
  uint64_t v314;
  __int16 v315;
  _BOOL4 v316;
  __int16 v317;
  int v318;
  __int16 v319;
  uint64_t *v320;
  __int16 v321;
  int v322;
  __int16 v323;
  int v324;
  _BYTE v325[128];
  uint64_t v326;

  v326 = *MEMORY[0x1E0C80C00];
  v245 = 0u;
  v246 = 0u;
  v247 = 0u;
  v248 = 0u;
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(a3, a2, (uint64_t)&v245, (uint64_t)v325, 16);
  v9 = result;
  if (result)
  {
    v10 = &OBJC_METACLASS___CLHeadingInternal;
    v234 = *(_QWORD *)v246;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v246 != v234)
          objc_enumerationMutation(a3);
        v12 = *(void **)(*((_QWORD *)&v245 + 1) + 8 * v11);
        v13 = (void *)objc_msgSend_timestamp(v12, v6, v7, v8);
        objc_msgSend_timeIntervalSinceReferenceDate(v13, v14, v15, v16);
        v21 = v20;
        for (i = *(double ***)(a1 + 48); ; i += 2)
        {
          if (i == *(double ***)(a1 + 56))
          {
            v244 = 0;
            v23 = 0;
            goto LABEL_12;
          }
          v23 = *i;
          if (*i)
          {
            if (vabdd_f64(v23[2], v20) < 0.001)
              break;
          }
        }
        v101 = (std::__shared_weak_count *)i[1];
        if (v101)
        {
          v244 = v101;
          p_shared_owners = (unint64_t *)&v101->__shared_owners_;
          do
            v103 = __ldxr(p_shared_owners);
          while (__stxr(v103 + 1, p_shared_owners));
        }
        else
        {
          v244 = 0;
        }
LABEL_12:
        objc_msgSend_latitude(v12, v17, v18, v19);
        v239 = v24;
        objc_msgSend_longitude(v12, v25, v26, v27);
        v238 = v28;
        objc_msgSend_course(v12, v29, v30, v31);
        v237 = v32;
        objc_msgSend_latitude(v12, v33, v34, v35);
        v242 = v36;
        objc_msgSend_longitude(v12, v37, v38, v39);
        v240 = v40;
        objc_msgSend_course(v12, v41, v42, v43);
        v47 = v46;
        if (v23 && *((_BYTE *)v23 + 64))
        {
          v48 = [CLTripSegmentLocation alloc];
          v52 = objc_msgSend_timestamp(v12, v49, v50, v51);
          v241 = v23[4];
          v243 = v23[3];
          objc_msgSend_horizontalAccuracy(v12, v53, v54, v55);
          v57 = v56;
          v58 = v23[5];
          objc_msgSend_courseAccuracy(v12, v59, v60, v61);
          v63 = v62;
          objc_msgSend_speed(v12, v64, v65, v66);
          v68 = v67;
          objc_msgSend_speedAccuracy(v12, v69, v70, v71);
          v73 = v72;
          objc_msgSend_altitude(v12, v74, v75, v76);
          v78 = v77;
          objc_msgSend_altitudeAccuracy(v12, v79, v80, v81);
          v83 = v82;
          v87 = objc_msgSend_locType(v12, v84, v85, v86);
          v91 = objc_msgSend_referenceFrame(v12, v88, v89, v90);
          v93 = (id)objc_msgSend_initWithTime_latitude_longitude_horizontalAccuracy_course_courseAccuracy_speed_speedAccuracy_altitude_altitudeAccuracy_locType_referenceFrame_(v48, v92, v52, v87, v91, v243, v241, v57, v58, v63, v68, v73, v78, v83);
          v97 = v93;
          v47 = *((_QWORD *)v23 + 5);
          v240 = *((_QWORD *)v23 + 4);
          v242 = *((_QWORD *)v23 + 3);
          v98 = *v23;
          if (*(_QWORD *)v23)
          {
            v236 = *(_QWORD *)(*(_QWORD *)&v98 + 8);
            objc_msgSend_setMapsRoadClass_(v93, v94, *(unsigned int *)(*(_QWORD *)&v98 + 20), v96);
            objc_msgSend_setMapsFormOfWay_(v97, v99, *(unsigned int *)(*(_QWORD *)v23 + 24), v100);
          }
          else
          {
            v236 = 0;
          }
          objc_msgSend_rawLatitude(v12, v94, v95, v96);
          v105 = v104;
          objc_msgSend_rawLongitude(v12, v106, v107, v108);
          v110 = v109;
          v114 = objc_msgSend_rawReferenceFrame(v12, v111, v112, v113);
          objc_msgSend_setRawLatitude_longitude_referenceFrame_(v97, v115, v114, v116, v105, v110);
          if (objc_msgSend_isOriginalLocationType(v12, v117, v118, v119))
            objc_msgSend_setLocationReconstructionType_(v97, v120, 1, v122);
          if (objc_msgSend_isInertialIntegrated(v12, v120, v121, v122))
            objc_msgSend_setLocationReconstructionType_(v97, v123, 2, v125);
          if (objc_msgSend_isLinearInterpolated(v12, v123, v124, v125))
            objc_msgSend_setLocationReconstructionType_(v97, v126, 4, v127);
          objc_msgSend_setLocationReconstructionType_(v97, v126, 8, v127);
          objc_msgSend_setSignalEnvironmentType_(v97, v128, *((unsigned int *)v23 + 40), v129);
          v133 = objc_msgSend_locTypeStart(v12, v130, v131, v132);
          objc_msgSend_setStartLocationType_(v97, v134, v133, v135);
          v139 = objc_msgSend_locTypeStop(v12, v136, v137, v138);
          objc_msgSend_setStopLocationType_(v97, v140, v139, v141);
          objc_msgSend_addObject_(*(void **)(a1 + 40), v142, (uint64_t)v97, v143);
        }
        else
        {
          objc_msgSend_addObject_(*(void **)(a1 + 40), v44, (uint64_t)v12, v45);
          v236 = 0;
        }
        if (v10[9].isa != (__objc2_class *)-1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
        v144 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
        {
          v148 = a1;
          objc_msgSend_horizontalAccuracy(v12, v145, v146, v147);
          v150 = v149;
          objc_msgSend_courseAccuracy(v12, v151, v152, v153);
          v155 = v154;
          objc_msgSend_speed(v12, v156, v157, v158);
          v160 = v159;
          objc_msgSend_speedAccuracy(v12, v161, v162, v163);
          v165 = v164;
          objc_msgSend_altitude(v12, v166, v167, v168);
          v170 = v169;
          objc_msgSend_altitudeAccuracy(v12, v171, v172, v173);
          v175 = v174;
          v179 = objc_msgSend_locType(v12, v176, v177, v178);
          v180 = a2[23];
          v181 = *(uint64_t **)a2;
          v185 = objc_msgSend_reconstructionType(v12, v182, v183, v184);
          *(_DWORD *)buf = 134353667;
          v186 = (uint64_t *)a2;
          if (v180 < 0)
            v186 = v181;
          v288 = v21;
          v289 = 2049;
          v290 = v242;
          v291 = 2049;
          v292 = v240;
          v293 = 2050;
          v294 = v47;
          v295 = 2049;
          v296 = v239;
          v297 = 2049;
          v298 = v238;
          v299 = 2050;
          v300 = v237;
          v301 = 2050;
          v302 = v150;
          v303 = 2050;
          v304 = v155;
          v305 = 2050;
          v306 = v160;
          v307 = 2050;
          v308 = v165;
          v309 = 2050;
          v310 = v170;
          v311 = 2050;
          v312 = v175;
          v313 = 2049;
          v314 = v236;
          v315 = 1026;
          v316 = v23 != 0;
          v317 = 1026;
          v318 = v179;
          v319 = 2082;
          v320 = v186;
          v321 = 1026;
          v322 = a4;
          v323 = 1026;
          v324 = v185;
          _os_log_impl(&dword_18F5B3000, v144, OS_LOG_TYPE_DEBUG, "CLTSP,MI,snapSolution,time,%{public}.1lf,snapLL,%{private}.7lf,%{private}.7lf,snapCourse,%{public}.2lf,rawLL,%{private}.7lf,%{private}.7lf,rawCourse,%{public}.2lf,hunc,%{public}.2lf,cunc,%{public}.2lf,speed,%{public}.2lf,sunc,%{public}.2lf,alt,%{public}.2lf,vunc,%{public}.2lf,roadID,%{private}lld,snapValid,%{public}d,type,%{public}d,id,%{public}s,mode,%{public}d,reconstructedType,%{public}d", buf, 0xB0u);
          a1 = v148;
          v10 = &OBJC_METACLASS___CLHeadingInternal;
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v10[9].isa != (__objc2_class *)-1)
            dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
          objc_msgSend_horizontalAccuracy(v12, v189, v190, v191);
          v193 = v192;
          objc_msgSend_courseAccuracy(v12, v194, v195, v196);
          v198 = v197;
          objc_msgSend_speed(v12, v199, v200, v201);
          v203 = v202;
          objc_msgSend_speedAccuracy(v12, v204, v205, v206);
          v208 = v207;
          objc_msgSend_altitude(v12, v209, v210, v211);
          v213 = v212;
          objc_msgSend_altitudeAccuracy(v12, v214, v215, v216);
          v218 = v217;
          v219 = v23 != 0;
          v223 = objc_msgSend_locType(v12, v220, v221, v222);
          v224 = a2[23];
          v225 = *(uint64_t **)a2;
          v229 = objc_msgSend_reconstructionType(v12, v226, v227, v228);
          v249 = 134353667;
          v230 = (uint64_t *)a2;
          if (v224 < 0)
            v230 = v225;
          v250 = v21;
          v251 = 2049;
          v252 = v242;
          v253 = 2049;
          v254 = v240;
          v255 = 2050;
          v256 = v47;
          v257 = 2049;
          v258 = v239;
          v259 = 2049;
          v260 = v238;
          v261 = 2050;
          v262 = v237;
          v263 = 2050;
          v264 = v193;
          v265 = 2050;
          v266 = v198;
          v267 = 2050;
          v268 = v203;
          v269 = 2050;
          v270 = v208;
          v271 = 2050;
          v272 = v213;
          v273 = 2050;
          v274 = v218;
          v275 = 2049;
          v276 = v236;
          v277 = 1026;
          v278 = v219;
          v279 = 1026;
          v280 = v223;
          v281 = 2082;
          v282 = v230;
          v283 = 1026;
          v284 = a4;
          v285 = 1026;
          v286 = v229;
          v231 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentMapIntegrationBase::updateOutputLocations(const std::string &, NSArray<CLTripSegmentLocation *> * _Nonnull, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v231);
          v10 = &OBJC_METACLASS___CLHeadingInternal;
          if (v231 != (char *)buf)
            free(v231);
        }
        if (v244)
        {
          v187 = (unint64_t *)&v244->__shared_owners_;
          do
            v188 = __ldaxr(v187);
          while (__stlxr(v188 - 1, v187));
          if (!v188)
          {
            ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
            std::__shared_weak_count::__release_weak(v244);
          }
        }
        ++v11;
      }
      while (v11 != v9);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(a3, v6, (uint64_t)&v245, (uint64_t)v325, 16);
      v9 = result;
    }
    while (result);
  }
  return result;
}

void sub_18F6FB898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_18F5D6004((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6FB8DC(double *a1, uint64_t **a2, uint64_t *a3, char **a4, double a5, double a6, double a7)
{
  double v7;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v18;
  uint64_t *v19;
  double **v20;
  double v21;
  double i;
  double *v23;
  int v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  NSObject *v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t **v61;
  double v62;
  char *v63;
  double *v64;
  uint64_t *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  double v74;
  uint64_t v75;
  double v76;
  char v77;
  NSObject *v78;
  char *v79;
  NSObject *v80;
  uint64_t v81;
  double *v82;
  double v83;
  double v84;
  double v85;
  double *v86;
  double v87;
  double v88;
  NSObject *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  NSObject *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  NSObject *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  double *v106;
  double *v107;
  double v108;
  int v109;
  uint64_t v110;
  double v111;
  NSObject *v112;
  double *v113;
  double v114;
  double *v115;
  double v116;
  double v117;
  long double v118;
  long double v119;
  uint64_t v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double *v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  NSObject *v132;
  char *v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  char *v143;
  uint64_t v144;
  char *v145;
  NSObject *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  NSObject *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  double v164;
  long double v165;
  double v166;
  long double v167;
  double v168;
  double *v169;
  char **v170;
  double v171;
  uint64_t **v172;
  unint64_t v174;
  double v175[3];
  __int128 v176;
  double v177;
  _BYTE __y[32];
  __int16 v179;
  int v180;
  __int128 v181;
  double v182;
  uint64_t v183;
  uint64_t v184;
  double **v185;
  double **v186;
  uint64_t v187;
  _BYTE buf[32];
  __int16 v189;
  int v190;
  uint64_t v191;

  v7 = a5;
  v9 = a2;
  v191 = *MEMORY[0x1E0C80C00];
  v10 = *a2;
  v11 = v9[1];
  if (v10 == v11 || a5 > 1.0 || ((v13 = *a3, v12 = a3[1], a5 >= 0.0) ? (_ZF = v13 == v12) : (_ZF = 1), _ZF))
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    v146 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      v147 = (unint64_t)((char *)v9[1] - (char *)*v9) >> 4;
      v148 = (unint64_t)(a3[1] - *a3) >> 4;
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = v147;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v148;
      *(_WORD *)&buf[14] = 2050;
      *(double *)&buf[16] = v7;
      _os_log_impl(&dword_18F5B3000, v146, OS_LOG_TYPE_ERROR, "CLTSP,MI,snapLocationsOnRoads,invalid input,inputLocations,%{public}d,roadVectors,%{public}d,firstSnapProjection,%{public}.3lf", buf, 0x18u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
      v156 = (unint64_t)((char *)v9[1] - (char *)*v9) >> 4;
      v157 = (unint64_t)(a3[1] - *a3) >> 4;
      LODWORD(v181) = 67240704;
      DWORD1(v181) = v156;
      WORD4(v181) = 1026;
      *(_DWORD *)((char *)&v181 + 10) = v157;
      HIWORD(v181) = 2050;
      v182 = v7;
      v158 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegrationBase::snapLocationsOnRoads(const std::vector<CLGeoMapLocationPtr> &, const std::vector<CLRouteRoadPtr> &, const double, std::vector<CLGeoMapSnapDataPtr> &, double, double) const", "CoreLocation: %s\n", v158);
      if (v158 != buf)
        free(v158);
    }
    return 0;
  }
  v182 = 0.0;
  v183 = 0;
  v181 = xmmword_18F771F40;
  v184 = 0x3FF0000000000000;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  if (&v185 != (double ***)v9)
  {
    sub_18F7015A8(&v185, v10, v11, ((char *)v11 - (char *)v10) >> 4);
    v13 = *a3;
    v12 = a3[1];
    v10 = *v9;
    v11 = v9[1];
  }
  if (v11 == v10)
  {
    v149 = 1;
    goto LABEL_230;
  }
  v169 = a1;
  v170 = a4;
  v18 = 0;
  v174 = (unint64_t)(v12 - v13) >> 4;
  v171 = v7;
  v172 = v9;
  while (1)
  {
    v19 = &v10[2 * v18];
    if (*v19)
    {
      if (*v10)
        break;
    }
LABEL_149:
    ++v18;
    v10 = *v9;
    if (v18 >= ((char *)v9[1] - (char *)*v9) >> 4)
    {
      v149 = 1;
      goto LABEL_230;
    }
  }
  v20 = v185;
  v21 = 0.0;
  for (i = 0.0; v20 != v186; v20 += 2)
  {
    v23 = *v20;
    if (*v20)
    {
      if (*v23 > *(double *)*v10 && *v23 <= *(double *)*v19)
        i = i + v23[10];
    }
  }
  v25 = 0;
  v26 = i * a6;
  v27 = v7;
  while (1)
  {
    v28 = *a3;
    if (v26 <= 0.0)
      break;
    v29 = *(uint64_t **)(v28 + 16 * v25);
    v31 = *v29;
    v30 = (std::__shared_weak_count *)v29[1];
    *(_QWORD *)&v176 = *v29;
    *((_QWORD *)&v176 + 1) = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
      v29 = *(uint64_t **)(*a3 + 16 * v25);
    }
    v34 = sub_18F6CBECC((uint64_t)v29, 1);
    v35 = v34;
    if (((a3[1] - *a3) >> 4) - 1 > (unint64_t)v25)
      v34 = sub_18F6CBECC(*(_QWORD *)(*a3 + 16 * v25 + 16), 0);
    v36 = 0.0;
    if (a7 != 0.0)
    {
      v37 = fmod(v35 + -90.0 + 90.0 - v34 + 180.0, 360.0);
      if (v37 < 0.0)
        v37 = v37 + 360.0;
      if (v37 > 180.0)
        v37 = v37 + -360.0;
      v38 = fabs(v37);
      if (v38 > 5.0 && v38 < 180.0)
        v36 = a7 / tan(v37 * 0.0174532925 * 0.5);
    }
    if (!v31)
    {
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
      v45 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
      {
        v46 = *(_QWORD *)*v19;
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)&buf[4] = v174;
        *(_WORD *)&buf[8] = 2050;
        *(_QWORD *)&buf[10] = v46;
        _os_log_impl(&dword_18F5B3000, v45, OS_LOG_TYPE_ERROR, "CLTSP,MI,road pointer invalid,count,%{public}d,locationTime,%{public}.3lf", buf, 0x12u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
        v51 = *(_QWORD *)*v19;
        *(_DWORD *)__y = 67240448;
        *(_DWORD *)&__y[4] = v174;
        *(_WORD *)&__y[8] = 2050;
        *(_QWORD *)&__y[10] = v51;
        v52 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegrationBase::snapLocationsOnRoads(const std::vector<CLGeoMapLocationPtr> &, const std::vector<CLRouteRoadPtr> &, const double, std::vector<CLGeoMapSnapDataPtr> &, double, double) const", "CoreLocation: %s\n", v52);
        if (v52 != buf)
          free(v52);
      }
      v44 = 1;
      if (!v30)
        goto LABEL_68;
      goto LABEL_65;
    }
    sub_18F7047B4(v31);
    v39 = *(double *)(v31 + 40);
    v40 = 1.0 - v27;
    if (!*(_BYTE *)(*(_QWORD *)(*a3 + 16 * v25) + 16))
      v40 = v27;
    v41 = v39 * v40;
    if (v26 <= v39 * v40 - v36 + 0.000000001)
    {
      v44 = 12;
      if (v30)
        goto LABEL_65;
LABEL_68:
      if (v44)
        goto LABEL_80;
    }
    else
    {
      v42 = v25 + 1;
      if (v25 + 1 >= (int)v174)
      {
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
        v47 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
        {
          v48 = *(_QWORD *)*v19;
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)&buf[4] = v174;
          *(_WORD *)&buf[8] = 2050;
          *(_QWORD *)&buf[10] = v48;
          _os_log_impl(&dword_18F5B3000, v47, OS_LOG_TYPE_ERROR, "CLTSP,currentRoadIndex over candidate road size,count,%{public}d,locationTime,%{public}.3lf", buf, 0x12u);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
          v53 = *(_QWORD *)*v19;
          *(_DWORD *)__y = 67240448;
          *(_DWORD *)&__y[4] = v174;
          *(_WORD *)&__y[8] = 2050;
          *(_QWORD *)&__y[10] = v53;
          v54 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegrationBase::snapLocationsOnRoads(const std::vector<CLGeoMapLocationPtr> &, const std::vector<CLRouteRoadPtr> &, const double, std::vector<CLGeoMapSnapDataPtr> &, double, double) const", "CoreLocation: %s\n", v54);
          if (v54 != buf)
            free(v54);
        }
        sub_18F7047B4(v31);
        v44 = 0;
        v21 = v36 / *(double *)(v31 + 40);
        if (*(_BYTE *)(*(_QWORD *)(*a3 + 16 * v25) + 16))
          v27 = 1.0 - v21;
        else
          v27 = v36 / *(double *)(v31 + 40);
        v26 = 0.0;
        if (!v30)
          goto LABEL_68;
      }
      else
      {
        v43 = **(_QWORD **)(*a3 + 16 * v42);
        sub_18F7047B4(v43);
        v44 = 0;
        v26 = v26 - v41;
        v21 = v36 / *(double *)(v43 + 40);
        if (*(_BYTE *)(*(_QWORD *)(*a3 + 16 * v42) + 16))
          v27 = v36 / *(double *)(v43 + 40);
        else
          v27 = 1.0 - v21;
        ++v25;
        if (!v30)
          goto LABEL_68;
      }
LABEL_65:
      v49 = (unint64_t *)&v30->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (v50)
        goto LABEL_68;
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      if (v44)
      {
LABEL_80:
        if (v44 != 12)
        {
          v7 = v171;
          v9 = v172;
          goto LABEL_148;
        }
        v28 = *a3;
        break;
      }
    }
  }
  v55 = v25;
  v56 = *(uint64_t **)(v28 + 16 * v25);
  v57 = *v56;
  v9 = v172;
  if (!*v56 || (sub_18F7047B4(*v56), *(double *)(v57 + 40) == 0.0))
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    v150 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      v151 = *(_QWORD *)*v19;
      v152 = *(uint64_t **)(*a3 + 16 * v55);
      v153 = *v152;
      if (*v152)
      {
        sub_18F7047B4(*v152);
        v154 = *(_QWORD *)(v153 + 40);
      }
      else
      {
        v154 = 0xBFF0000000000000;
      }
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = v174;
      *(_WORD *)&buf[8] = 2050;
      *(_QWORD *)&buf[10] = v151;
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v154;
      _os_log_impl(&dword_18F5B3000, v150, OS_LOG_TYPE_ERROR, "CLTSP,MI,road pointer invalid or zero length,count,%{public}d,locationTime,%{public}.3lf,roadLength,%{public}.2lf", buf, 0x1Cu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
      v159 = *(_QWORD *)*v19;
      v160 = *(uint64_t **)(*a3 + 16 * v55);
      v161 = *v160;
      if (*v160)
      {
        sub_18F7047B4(*v160);
        v162 = *(_QWORD *)(v161 + 40);
      }
      else
      {
        v162 = 0xBFF0000000000000;
      }
      *(_DWORD *)__y = 67240704;
      *(_DWORD *)&__y[4] = v174;
      *(_WORD *)&__y[8] = 2050;
      *(_QWORD *)&__y[10] = v159;
      *(_WORD *)&__y[18] = 2050;
      *(_QWORD *)&__y[20] = v162;
      v163 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegrationBase::snapLocationsOnRoads(const std::vector<CLGeoMapLocationPtr> &, const std::vector<CLRouteRoadPtr> &, const double, std::vector<CLGeoMapSnapDataPtr> &, double, double) const", "CoreLocation: %s\n", v163);
      if (v163 != buf)
        free(v163);
    }
    goto LABEL_229;
  }
  v58 = 16 * v55;
  v59 = **(_QWORD **)(*a3 + 16 * v55);
  sub_18F7047B4(v59);
  v60 = v21 + v26 / *(double *)(v59 + 40);
  v61 = (uint64_t **)(*a3 + 16 * v55);
  if (*((_BYTE *)*v61 + 16))
    v62 = v60;
  else
    v62 = -v60;
  v63 = (char *)operator new(0xC0uLL);
  v64 = (double *)v63;
  *((_QWORD *)v63 + 1) = 0;
  *((_QWORD *)v63 + 2) = 0;
  *(_QWORD *)v63 = &off_1E298DE80;
  *(_OWORD *)(v63 + 40) = 0u;
  *(_OWORD *)(v63 + 56) = 0u;
  *(_OWORD *)(v63 + 72) = 0u;
  *(_OWORD *)(v63 + 88) = 0u;
  *(_OWORD *)(v63 + 104) = 0u;
  *(_OWORD *)(v63 + 120) = 0u;
  *(_OWORD *)(v63 + 136) = 0u;
  *(_OWORD *)(v63 + 152) = 0u;
  *(_OWORD *)(v63 + 168) = 0u;
  *((_QWORD *)v63 + 23) = 0;
  *(_OWORD *)(v63 + 24) = 0u;
  *((_QWORD *)v63 + 5) = 0xBFF0000000000000;
  *((_QWORD *)v63 + 6) = 0;
  *((_QWORD *)v63 + 7) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)v63 + 4) = _Q0;
  v63[89] = 1;
  *((_QWORD *)v63 + 12) = 0;
  *((_QWORD *)v63 + 13) = 0;
  v63[120] = 0;
  *((_QWORD *)v63 + 14) = 0;
  *((_QWORD *)v63 + 16) = 0xBFF0000000000000;
  *((_DWORD *)v63 + 46) = 0;
  *(_OWORD *)(v63 + 168) = 0u;
  *(_OWORD *)(v63 + 152) = 0u;
  *(_QWORD *)&v176 = v63 + 24;
  *((_QWORD *)&v176 + 1) = v63;
  v69 = *v61;
  v70 = **v61;
  v71 = (std::__shared_weak_count *)v69[1];
  *(_QWORD *)&v175[1] = v70;
  *(_QWORD *)&v175[2] = v71;
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = v27 + v62;
  *((_QWORD *)v63 + 8) = 0;
  if (!v70)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992BE0);
    v78 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v78, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
    }
    v76 = 0.0;
    v9 = v172;
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2992BE0);
      *(_WORD *)__y = 0;
      v79 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v79);
      v9 = v172;
      if (v79 != buf)
        free(v79);
    }
    goto LABEL_119;
  }
  v75 = (*(_QWORD *)(v70 + 144) - *(_QWORD *)(v70 + 136)) >> 4;
  if ((int)v75 <= 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992BE0);
    v80 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v80, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", buf, 2u);
    }
    v76 = 0.0;
    v9 = v172;
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_119;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      goto LABEL_212;
    goto LABEL_208;
  }
  v76 = 0.0;
  if ((_DWORD)v75 == 1)
  {
    v77 = 1;
    goto LABEL_120;
  }
  sub_18F7047B4(v70);
  v81 = (uint64_t)(*(_QWORD *)(v70 + 168) - *(_QWORD *)(v70 + 160)) >> 3;
  if (v81 != (_DWORD)v75 - 1)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992BE0);
    v89 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v89, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", buf, 2u);
    }
    v9 = v172;
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_119;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      goto LABEL_212;
LABEL_208:
    *(_WORD *)__y = 0;
    v133 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v133);
    goto LABEL_209;
  }
  sub_18F7047B4(v70);
  if (v74 < 0.000001)
  {
    v82 = *(double **)(v70 + 136);
    v76 = *v82;
    v83 = v82[1];
    v84 = v82[2];
    v85 = v82[3];
    *(_QWORD *)buf = 0;
    *(_QWORD *)__y = 0;
    v86 = v169;
    v87 = v76;
    v88 = v83;
    goto LABEL_165;
  }
  if (v74 >= 0.999999)
  {
    v113 = (double *)(*(_QWORD *)(v70 + 136) + 16 * v81);
    v76 = *v113;
    v83 = v113[1];
    v87 = *(v113 - 2);
    v88 = *(v113 - 1);
    *(_QWORD *)buf = 0;
    *(_QWORD *)__y = 0;
    v86 = v169;
    v84 = v76;
    v85 = v83;
LABEL_165:
    sub_18F5BD37C(v86, (double *)buf, (double *)__y, &v177, v87, v88, 0.0, v84, v85, 0.0);
    v114 = atan2(*(long double *)__y, *(long double *)buf);
    if (v114 < 0.0)
      v114 = v114 + 6.28318531;
    v64[8] = v114 * 57.2957795;
    v77 = 1;
    goto LABEL_168;
  }
  v106 = *(double **)(v70 + 160);
  v107 = *(double **)(v70 + 168);
  v9 = v172;
  if (v106 == v107)
  {
LABEL_157:
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2992BE0);
    v112 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v112, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", buf, 2u);
    }
    v9 = v172;
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_119;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_208;
LABEL_212:
    dispatch_once(&qword_1EE172158, &unk_1E2992BE0);
    goto LABEL_208;
  }
  v108 = 0.0;
  v109 = 2;
  v110 = 24;
  while (1)
  {
    v111 = *v106 / *(double *)(v70 + 40);
    if (vabdd_f64(v74, v108 + v111) < 0.000001)
      break;
    if (v108 + v111 > v74)
    {
      v126 = (double *)(*(_QWORD *)(v70 + 136) + v110);
      v127 = *(v126 - 2);
      v128 = *v126;
      v129 = v127 + 360.0;
      if (v127 >= 0.0)
        v129 = *(v126 - 2);
      v130 = v128 + 360.0;
      if (v128 >= 0.0)
        v130 = *v126;
      v131 = v130 - v129;
      v168 = *v126;
      if (v131 <= 180.0)
      {
        if (v131 < -180.0)
          v131 = v131 + 360.0;
      }
      else
      {
        v131 = v131 + -360.0;
      }
      v134 = (v74 - v108) / v111;
      v166 = *(v126 - 3);
      v135 = *(v126 - 1);
      v83 = fmod(v127 + v131 * v134, 360.0);
      if (v83 <= -180.0)
      {
        v83 = v83 + 360.0;
        v136 = v168;
      }
      else
      {
        v136 = v168;
        if (v83 > 180.0)
          v83 = v83 + -360.0;
      }
      v137 = v135;
      v76 = v166 + (v135 - v166) * v134;
      *(_QWORD *)buf = 0;
      *(_QWORD *)__y = 0;
      sub_18F5BD37C(v169, (double *)buf, (double *)__y, &v177, v166, v127, 0.0, v137, v136, 0.0);
      v138 = atan2(*(long double *)__y, *(long double *)buf);
      if (v138 < 0.0)
        v138 = v138 + 6.28318531;
      v125 = v138 * 57.2957795;
LABEL_198:
      v64[8] = v125;
      v77 = 1;
      goto LABEL_121;
    }
    ++v106;
    v110 += 16;
    ++v109;
    v108 = v108 + v111;
    if (v106 == v107)
      goto LABEL_157;
  }
  if (v109 < (int)v75)
  {
    v115 = (double *)(*(_QWORD *)(v70 + 136) + v110);
    v76 = *(v115 - 1);
    v83 = *v115;
    v116 = *(v115 - 3);
    v117 = *(v115 - 2);
    *(_QWORD *)buf = 0;
    *(_QWORD *)__y = 0;
    sub_18F5BD37C(v169, (double *)buf, (double *)__y, &v177, v116, v117, 0.0, v76, v83, 0.0);
    v118 = *(double *)__y;
    v119 = *(double *)buf;
    v120 = *(_QWORD *)(v70 + 136) + v110;
    v121 = *(double *)(v120 + 8);
    v122 = *(double *)(v120 + 16);
    *(_QWORD *)buf = 0;
    *(_QWORD *)__y = 0;
    sub_18F5BD37C(v169, (double *)buf, (double *)__y, &v177, v76, v83, 0.0, v121, v122, 0.0);
    v165 = *(double *)__y;
    v167 = *(double *)buf;
    v123 = atan2(v118, v119);
    if (v123 < 0.0)
      v123 = v123 + 6.28318531;
    v164 = v123 * 57.2957795;
    v124 = atan2(v165, v167);
    if (v124 < 0.0)
      v124 = v124 + 6.28318531;
    sub_18F5F3E84(v164, v124 * 57.2957795);
    goto LABEL_198;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2992BE0);
  v132 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v132, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", buf, 2u);
  }
  v76 = 0.0;
  v9 = v172;
  if (!sub_18F5C4AE0(115, 0))
  {
LABEL_119:
    v77 = 0;
LABEL_120:
    v83 = 0.0;
    goto LABEL_121;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2992BE0);
  *(_WORD *)__y = 0;
  v133 = (char *)_os_log_send_and_compose_impl();
  sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v133);
LABEL_209:
  if (v133 != buf)
    free(v133);
  v77 = 0;
  v83 = 0.0;
LABEL_168:
  v9 = v172;
  if (!v71)
    goto LABEL_125;
LABEL_121:
  v90 = (unint64_t *)&v71->__shared_owners_;
  do
    v91 = __ldaxr(v90);
  while (__stlxr(v91 - 1, v90));
  if (!v91)
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
    if ((v77 & 1) == 0)
      goto LABEL_137;
LABEL_126:
    v92 = *(_QWORD *)(*a3 + v58);
    v93 = v176;
    if (!*(_BYTE *)(v92 + 16))
      *(long double *)(v93 + 40) = fmod(*(double *)(v176 + 40) + 180.0, 360.0);
    v177 = v76;
    v175[0] = v83;
    sub_18F623A40((_QWORD *)v93, (uint64_t *)v92);
    v94 = v176;
    *(_BYTE *)(v176 + 65) = *(_BYTE *)(*(_QWORD *)(*a3 + v58) + 16);
    if (a7 != 0.0)
    {
      sub_18F71AA00(v169, &v177, v175, v76, v83, 0.0, *(double *)(v94 + 40), a7);
      v76 = v177;
      v83 = v175[0];
    }
    v95 = (_QWORD *)*v19;
    *(_QWORD *)(v94 + 16) = *(_QWORD *)*v19;
    *(double *)(v94 + 24) = v76;
    *(double *)(v94 + 32) = v83;
    *(_QWORD *)(v94 + 104) = v95[6];
    *(double *)(v94 + 48) = v74;
    *(_BYTE *)(v94 + 64) = 1;
    *(_DWORD *)(v94 + 120) = *((_DWORD *)v95 + 22);
    *(_BYTE *)(v94 + 96) = *((_BYTE *)v95 + 92);
    *(_DWORD *)(v94 + 160) = *((_DWORD *)v95 + 25);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    v7 = v171;
    v96 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEBUG))
    {
      v97 = *(_QWORD *)(v176 + 16);
      v98 = *(_QWORD *)(v176 + 24);
      v99 = *(_QWORD *)(v176 + 32);
      v100 = *(unsigned __int8 *)(v176 + 64);
      *(_DWORD *)buf = 134349825;
      *(_QWORD *)&buf[4] = v97;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v98;
      *(_WORD *)&buf[22] = 2049;
      *(_QWORD *)&buf[24] = v99;
      v189 = 1026;
      v190 = v100;
      _os_log_impl(&dword_18F5B3000, v96, OS_LOG_TYPE_DEBUG, "CLTSP,MI,snapLocations,time,%{public}.1lf,snapLL,%{private}.7lf,%{private}.7lf,snapValid,%{public}d", buf, 0x26u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
      v139 = *(_QWORD *)(v176 + 16);
      v140 = *(_QWORD *)(v176 + 24);
      v141 = *(_QWORD *)(v176 + 32);
      v142 = *(unsigned __int8 *)(v176 + 64);
      *(_DWORD *)__y = 134349825;
      *(_QWORD *)&__y[4] = v139;
      *(_WORD *)&__y[12] = 2049;
      *(_QWORD *)&__y[14] = v140;
      *(_WORD *)&__y[22] = 2049;
      *(_QWORD *)&__y[24] = v141;
      v179 = 1026;
      v180 = v142;
      v143 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegrationBase::snapLocationsOnRoads(const std::vector<CLGeoMapLocationPtr> &, const std::vector<CLRouteRoadPtr> &, const double, std::vector<CLGeoMapSnapDataPtr> &, double, double) const", "CoreLocation: %s\n", v143);
      if (v143 != buf)
        free(v143);
    }
    sub_18F623AB8(v170, &v176);
    v44 = 0;
  }
  else
  {
LABEL_125:
    if ((v77 & 1) != 0)
      goto LABEL_126;
LABEL_137:
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    v7 = v171;
    v101 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      v102 = *(_QWORD *)*v19;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v174;
      *(_WORD *)&buf[8] = 2050;
      *(_QWORD *)&buf[10] = v102;
      _os_log_impl(&dword_18F5B3000, v101, OS_LOG_TYPE_ERROR, "CLTSP,MI,interpolateOnRoad,interpolateProjections returned false,count,%{public}d,locationTime,%{public}.3lf", buf, 0x12u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
      v144 = *(_QWORD *)*v19;
      *(_DWORD *)__y = 67240448;
      *(_DWORD *)&__y[4] = v174;
      *(_WORD *)&__y[8] = 2050;
      *(_QWORD *)&__y[10] = v144;
      v145 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegrationBase::snapLocationsOnRoads(const std::vector<CLGeoMapLocationPtr> &, const std::vector<CLRouteRoadPtr> &, const double, std::vector<CLGeoMapSnapDataPtr> &, double, double) const", "CoreLocation: %s\n", v145);
      if (v145 != buf)
        free(v145);
    }
    v44 = 1;
  }
  v103 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
  if (*((_QWORD *)&v176 + 1))
  {
    v104 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
LABEL_148:
  if (!v44)
    goto LABEL_149;
LABEL_229:
  v149 = 0;
LABEL_230:
  *(_QWORD *)buf = &v185;
  sub_18F62AB98((void ***)buf);
  return v149;
}

void sub_18F6FD338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35)
{
  a35 = a15;
  sub_18F62AB98(&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6FD3C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6, void *a7)
{
  uint64_t v14;
  double v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  BOOL v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::string *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t **v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t **v68;
  uint64_t **v69;
  uint64_t *v70;
  uint64_t **v71;
  uint64_t **v72;
  uint64_t **v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  NSObject *v79;
  NSObject *v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  std::string *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  double v96;
  double v97;
  double v98;
  double *v99;
  double v100;
  long double v101;
  uint64_t v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  char *v109;
  NSObject *v110;
  double *v111;
  double v112;
  double v113;
  unsigned int v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  NSObject *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  int v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t *v136;
  double *v137;
  uint64_t v138;
  uint64_t *v139;
  double *v140;
  unint64_t *v141;
  unint64_t v142;
  char v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  uint64_t v151;
  NSObject *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  _QWORD *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  char v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  __int128 **i;
  __int128 **v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t *v175;
  unint64_t *v176;
  unint64_t v177;
  int v178;
  NSObject *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  double Current;
  std::string *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  char *v214;
  char *v215;
  NSObject *v216;
  uint64_t v217;
  NSObject *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  std::string *p_p;
  const char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  std::string *v228;
  char *v229;
  NSObject *v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  double v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  std::string *v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  double v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  std::string *v246;
  char *v247;
  NSObject *v248;
  const char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  const char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  std::string *v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  uint64_t v262;
  NSObject *v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  double v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  std::string *v271;
  uint64_t v272;
  int v273;
  int v274;
  uint64_t v275;
  char *v276;
  const char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  const char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  std::string *v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  const char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  const char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  std::string *v299;
  char *v300;
  const char *v301;
  uint64_t v302;
  uint64_t v303;
  double v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  std::string *v308;
  uint64_t v309;
  int v310;
  int v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318[2];
  uint64_t v319;
  std::__shared_weak_count *v320;
  std::string __p;
  uint64_t *v322[2];
  uint64_t v323[2];
  char *v324[3];
  char *v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328[2];
  _QWORD *v329[2];
  uint64_t v330[2];
  uint64_t v331[2];
  __int128 v332;
  __int128 v333;
  int v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  _BYTE v341[24];
  int v342;
  unint64_t v343;
  __int16 v344;
  _BYTE v345[10];
  _BYTE v346[10];
  _BYTE v347[28];
  __int16 v348;
  double v349;
  __int16 v350;
  double v351;
  __int16 v352;
  double v353;
  _BYTE buf[24];
  _BYTE v355[10];
  _BYTE v356[28];
  __int16 v357;
  double v358;
  __int16 v359;
  double v360;
  __int16 v361;
  double v362;
  uint64_t v363;

  v363 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 136))
  {
    v14 = mach_continuous_time();
    v15 = sub_18F6BDF00(v14);
    v19 = (void *)objc_msgSend_UUIDString(a2, v16, v17, v18);
    v23 = (char *)objc_msgSend_UTF8String(v19, v20, v21, v22);
    sub_18F5D5990(&__p, v23);
    if (!objc_msgSend_count(a6, v24, v25, v26))
    {
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
      v218 = qword_1EE172170;
      if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
      {
        v222 = objc_msgSend_count(a7, v219, v220, v221);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 134349314;
        *(_QWORD *)&buf[4] = v222;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = p_p;
        _os_log_impl(&dword_18F5B3000, v218, OS_LOG_TYPE_INFO, "CLTSP,MI,integrateWithMapData,empty sparseLocations,upsampledLocations,%{public}lu,id,%{public}s", buf, 0x16u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
        v227 = objc_msgSend_count(a7, v224, v225, v226);
        v228 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v228 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v342 = 134349314;
        v343 = v227;
        v344 = 2082;
        *(_QWORD *)v345 = v228;
        v229 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::integrateWithMapData(NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, std::shared_ptr<CLTripSegmentRouteBuilder> &, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v229);
        if (v229 != buf)
          free(v229);
      }
      goto LABEL_275;
    }
    sub_18F61EAB4(*(_QWORD *)(a1 + 136));
    v27 = *(unsigned __int8 *)(a1 + 152);
    v28 = *(unsigned __int8 *)(a1 + 153);
    v29 = *(std::__shared_weak_count **)(a1 + 144);
    v319 = *(_QWORD *)(a1 + 136);
    v320 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(p_shared_owners);
      while (__stxr(v31 + 1, p_shared_owners));
    }
    v32 = *a5;
    v33 = (std::__shared_weak_count *)a5[1];
    v318[0] = v32;
    v318[1] = (uint64_t)v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = sub_18F6F75C4((_QWORD *)(a1 + 160), &__p, a3, a4, v27 != 0, v28 != 0, a6, a7, &v319, v318);
    if (v33)
    {
      v37 = (unint64_t *)&v33->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v39 = v320;
    if (!v320)
      goto LABEL_18;
    v40 = (unint64_t *)&v320->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if (v36)
        goto LABEL_19;
    }
    else
    {
LABEL_18:
      if (v36)
      {
LABEL_19:
        v43 = *(_QWORD *)(a1 + 200);
        v42 = *(_QWORD *)(a1 + 208);
        v44 = sub_18F747B94();
        *(_DWORD *)(v44 + 72) -= 1431655765 * ((unint64_t)(v42 - v43) >> 3);
        v48 = *(void **)(*(_QWORD *)(a1 + 136) + 88);
        if (v48)
          objc_msgSend_clearRoadTiles(v48, v45, v46, v47);
        if (sub_18F67EBBC(a1 + 72, a7, v46, v47) && **(_QWORD **)(a1 + 112))
        {
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
          v49 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEFAULT))
          {
            v54 = *(_QWORD *)(a1 + 200);
            v53 = *(_QWORD *)(a1 + 208);
            v55 = objc_msgSend_count(a6, v50, v51, v52);
            v59 = objc_msgSend_count(a7, v56, v57, v58);
            v60 = &__p;
            *(_DWORD *)buf = 134349826;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * ((v53 - v54) >> 3);
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v55;
            *(_WORD *)&buf[22] = 2050;
            *(_QWORD *)v355 = v59;
            *(_WORD *)&v355[8] = 2082;
            *(_QWORD *)v356 = v60;
            _os_log_impl(&dword_18F5B3000, v49, OS_LOG_TYPE_DEFAULT, "CLTSP,MI,integrateWithMapData,segments,%{public}lu,sparseLocations,%{public}lu,upsampledLocations,%{public}lu,id,%{public}s", buf, 0x2Au);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
            v293 = *(_QWORD *)(a1 + 200);
            v292 = *(_QWORD *)(a1 + 208);
            v294 = objc_msgSend_count(a6, v289, v290, v291);
            v298 = objc_msgSend_count(a7, v295, v296, v297);
            v299 = &__p;
            v342 = 134349826;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v299 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v343 = 0xAAAAAAAAAAAAAAABLL * ((v292 - v293) >> 3);
            v344 = 2050;
            *(_QWORD *)v345 = v294;
            *(_WORD *)&v345[8] = 2050;
            *(_QWORD *)v346 = v298;
            *(_WORD *)&v346[8] = 2082;
            *(_QWORD *)v347 = v299;
            v300 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::integrateWithMapData(NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, std::shared_ptr<CLTripSegmentRouteBuilder> &, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v300);
            if (v300 != buf)
              free(v300);
          }
          v64 = *(uint64_t ***)(a1 + 200);
          v65 = *(_QWORD *)(a1 + 208) - (_QWORD)v64;
          if (0xAAAAAAAAAAAAAAABLL * (v65 >> 3) >= 2)
          {
            v317 = a1 + 48;
            v66 = 1;
            *(double *)&v67 = 250.0;
            while (1)
            {
              v68 = &v64[3 * v66];
              v69 = v68 - 3;
              v71 = v68 - 2;
              v70 = *(v68 - 2);
              if (*(v68 - 3) == v70 || (v72 = &v64[3 * v66], v74 = v72[1], v73 = v72 + 1, *v68 == v74))
              {
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v81 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                {
                  v82 = ((char *)*v71 - (char *)*v69) >> 4;
                  v83 = ((char *)v64[3 * v66 + 1] - (char *)*v68) >> 4;
                  *(_DWORD *)buf = 134349312;
                  *(_QWORD *)&buf[4] = v82;
                  *(_WORD *)&buf[12] = 2050;
                  *(_QWORD *)&buf[14] = v83;
                  _os_log_impl(&dword_18F5B3000, v81, OS_LOG_TYPE_ERROR, "CLTSP,MI,constructSegment,invalid size,start,%{public}lu,end,%{public}lu", buf, 0x16u);
                }
                if (!sub_18F5C4AE0(115, 0))
                  goto LABEL_68;
                bzero(buf, 0x65CuLL);
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v84 = ((char *)*v71 - (char *)*v69) >> 4;
                v85 = ((char *)v64[3 * v66 + 1] - (char *)*v68) >> 4;
                v342 = 134349312;
                v343 = v84;
                v344 = 2050;
                *(_QWORD *)v345 = v85;
                v86 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::integrateWithMapData(NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, std::shared_ptr<CLTripSegmentRouteBuilder> &, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v86);
LABEL_186:
                if (v86 != buf)
                  free(v86);
                goto LABEL_68;
              }
              v75 = *(v70 - 2);
              if (!v75 || (v76 = **v68) == 0)
              {
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v87 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                {
                  v88 = ((char *)*v71 - (char *)*v69) >> 4;
                  v89 = ((char *)*v73 - (char *)*v68) >> 4;
                  *(_DWORD *)buf = 134349312;
                  *(_QWORD *)&buf[4] = v88;
                  *(_WORD *)&buf[12] = 2050;
                  *(_QWORD *)&buf[14] = v89;
                  _os_log_impl(&dword_18F5B3000, v87, OS_LOG_TYPE_ERROR, "CLTSP,MI,constructSegment,null pointers,start,%{public}lu,end,%{public}lu", buf, 0x16u);
                }
                if (!sub_18F5C4AE0(115, 0))
                {
LABEL_61:
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                  v90 = qword_1EE172170;
                  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                  {
                    v91 = &__p;
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v91 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = v91;
                    _os_log_impl(&dword_18F5B3000, v90, OS_LOG_TYPE_ERROR, "CLTSP,MI,integrateWithMapDataSparse,errorReported,id,%{public}s", buf, 0xCu);
                  }
                  if (!sub_18F5C4AE0(115, 0))
                    goto LABEL_68;
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                  v187 = &__p;
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v187 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  v342 = 136446210;
                  v343 = (unint64_t)v187;
                  v86 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::integrateWithMapData(NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, std::shared_ptr<CLTripSegmentRouteBuilder> &, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v86);
                  goto LABEL_186;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v188 = ((char *)*v71 - (char *)*v69) >> 4;
                v189 = ((char *)*v73 - (char *)*v68) >> 4;
                v342 = 134349312;
                v343 = v188;
                v344 = 2050;
                *(_QWORD *)v345 = v189;
                v109 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v109);
LABEL_191:
                if (v109 != buf)
                  free(v109);
                goto LABEL_61;
              }
              v77 = *(double *)(v75 + 16);
              v78 = *(double *)(v76 + 16);
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
              v79 = qword_1EE172170;
              if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 134349312;
                *(double *)&buf[4] = v77;
                *(_WORD *)&buf[12] = 2050;
                *(double *)&buf[14] = v78;
                _os_log_impl(&dword_18F5B3000, v79, OS_LOG_TYPE_INFO, "CLTSP,MI,constructSegment,start,%{public}.3lf,end,%{public}.3lf", buf, 0x16u);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v342 = 134349312;
                v343 = *(_QWORD *)&v77;
                v344 = 2050;
                *(double *)v345 = v78;
                v190 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v190);
                if (v190 != buf)
                  free(v190);
              }
              if (v78 - v77 < 1.5)
              {
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v80 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 134349312;
                  *(double *)&buf[4] = v77;
                  *(_WORD *)&buf[12] = 2050;
                  *(double *)&buf[14] = v78 - v77;
                  _os_log_impl(&dword_18F5B3000, v80, OS_LOG_TYPE_DEFAULT, "CLTSP,MI,%{public}.2lf,constructSegment,dT less that minimum interval,dT,%{public}.2lf", buf, 0x16u);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                  v342 = 134349312;
                  v343 = *(_QWORD *)&v77;
                  v344 = 2050;
                  *(double *)v345 = v78 - v77;
                  v191 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v191);
                  if (v191 != buf)
                    free(v191);
                }
                sub_18F701374(v317, *(_QWORD *)(a1 + 56), *v69, *v71, ((char *)*v71 - (char *)*v69) >> 4);
                sub_18F701374(v317, *(_QWORD *)(a1 + 56), *v68, *v73, ((char *)*v73 - (char *)*v68) >> 4);
                goto LABEL_68;
              }
              if (*v69 == *v71 || *v68 == *v73)
              {
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v108 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134349056;
                  *(double *)&buf[4] = v77;
                  _os_log_impl(&dword_18F5B3000, v108, OS_LOG_TYPE_ERROR, "CLTSP,MI,%{public}.1lf,start or stop snap road is empty", buf, 0xCu);
                }
                if (!sub_18F5C4AE0(115, 0))
                  goto LABEL_61;
                bzero(buf, 0x65CuLL);
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v342 = 134349056;
                v343 = *(_QWORD *)&v77;
                v109 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v109);
                goto LABEL_191;
              }
              v315 = *v71;
              v316 = *v68;
              v92 = (_QWORD *)*(*v71 - 2);
              if (!sub_18F6F7538((uint64_t)v92) || (v93 = (_QWORD *)*v316, !sub_18F6F7538(*v316)) || !*v92 || !*v93)
              {
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v110 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 134349056;
                  *(double *)&buf[4] = v77;
                  _os_log_impl(&dword_18F5B3000, v110, OS_LOG_TYPE_DEFAULT, "CLTSP,MI,%{public}.1lf,start or destination snap is not valid. Skipping constructing this segment", buf, 0xCu);
                }
                if (!sub_18F5C4AE0(115, 2))
                  goto LABEL_61;
                bzero(buf, 0x65CuLL);
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v342 = 134349056;
                v343 = *(_QWORD *)&v77;
                v109 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v109);
                goto LABEL_191;
              }
              v338 = 0;
              v339 = 0;
              v337 = xmmword_18F771F40;
              v340 = 0x3FF0000000000000;
              memset(v341, 0, sizeof(v341));
              v94 = v316;
              sub_18F67ED30(a1 + 72, (uint64_t)v341, 1, 0, *(double *)(*(v315 - 2) + 16), *(double *)(*v316 + 16));
              v95 = *(_QWORD *)(*(_QWORD *)*(v315 - 2) + 144);
              v96 = 0.0;
              v97 = 0.0;
              v98 = 0.0;
              if (v95 != *(_QWORD *)(*(_QWORD *)*(v315 - 2) + 136))
              {
                v97 = *(double *)(v95 - 16);
                v98 = *(double *)(v95 - 8);
              }
              v99 = *(double **)(*(_QWORD *)*v316 + 136);
              v100 = 0.0;
              if (*(double **)(*(_QWORD *)*v316 + 144) != v99)
              {
                v96 = *v99;
                v100 = v99[1];
              }
              v101 = sub_18F5BD064((double *)a1, v97, v98, v96, v100, 0.0);
              v102 = sub_18F747B94();
              ++*(_DWORD *)(v102 + 76);
              v334 = 0;
              v332 = 0u;
              v333 = 0u;
              v335 = 0u;
              v336 = 0u;
              if (a3 == 2)
              {
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v103 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
                {
                  v104 = *(_QWORD *)(*(_QWORD *)*(v315 - 2) + 144);
                  v105 = 0;
                  if (v104 == *(_QWORD *)(*(_QWORD *)*(v315 - 2) + 136))
                  {
                    v106 = 0;
                    v107 = 0;
                  }
                  else
                  {
                    v106 = *(_QWORD *)(v104 - 16);
                    v107 = *(_QWORD *)(v104 - 8);
                  }
                  v127 = *(_QWORD *)*v316;
                  v128 = *(uint64_t **)(v127 + 136);
                  if (*(uint64_t **)(v127 + 144) == v128)
                  {
                    v129 = 0;
                  }
                  else
                  {
                    v129 = *v128;
                    v105 = v128[1];
                  }
                  *(_DWORD *)buf = 134350593;
                  *(double *)&buf[4] = v77;
                  *(_WORD *)&buf[12] = 2049;
                  *(_QWORD *)&buf[14] = v106;
                  *(_WORD *)&buf[22] = 2049;
                  *(_QWORD *)v355 = v107;
                  *(_WORD *)&v355[8] = 2049;
                  *(_QWORD *)v356 = v129;
                  *(_WORD *)&v356[8] = 2049;
                  *(_QWORD *)&v356[10] = v105;
                  *(_WORD *)&v356[18] = 2050;
                  *(long double *)&v356[20] = v101;
                  v357 = 2050;
                  v358 = v78;
                  _os_log_impl(&dword_18F5B3000, v103, OS_LOG_TYPE_INFO, "CLTSP,MI,%{public}.3lf,constructing astar route between,startPoint,%{private}.7lf,%{private}.7lf,endPoint,%{private}.7lf,%{private}.7lf,distance,%{public}.3lf,endTime,%{public}.3lf", buf, 0x48u);
                }
                v133 = sub_18F5C4AE0(115, 2);
                v135 = v315;
                v134 = v316;
                if (v133)
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                  v192 = *(_QWORD *)(*(_QWORD *)*(v315 - 2) + 144);
                  v193 = 0;
                  if (v192 == *(_QWORD *)(*(_QWORD *)*(v315 - 2) + 136))
                  {
                    v194 = 0;
                    v195 = 0;
                  }
                  else
                  {
                    v194 = *(_QWORD *)(v192 - 16);
                    v195 = *(_QWORD *)(v192 - 8);
                  }
                  v208 = *(_QWORD *)*v316;
                  v209 = *(uint64_t **)(v208 + 136);
                  if (*(uint64_t **)(v208 + 144) == v209)
                  {
                    v210 = 0;
                  }
                  else
                  {
                    v210 = *v209;
                    v193 = v209[1];
                  }
                  v342 = 134350593;
                  v343 = *(_QWORD *)&v77;
                  v344 = 2049;
                  *(_QWORD *)v345 = v194;
                  *(_WORD *)&v345[8] = 2049;
                  *(_QWORD *)v346 = v195;
                  *(_WORD *)&v346[8] = 2049;
                  *(_QWORD *)v347 = v210;
                  *(_WORD *)&v347[8] = 2049;
                  *(_QWORD *)&v347[10] = v193;
                  *(_WORD *)&v347[18] = 2050;
                  *(long double *)&v347[20] = v101;
                  v348 = 2050;
                  v349 = v78;
                  v214 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v214);
                  if (v214 != buf)
                    free(v214);
                  v135 = v315;
                  v134 = v316;
                }
                *(_QWORD *)&buf[8] = 0;
                *(_QWORD *)buf = 0;
                v136 = (uint64_t *)*v134;
                *(_OWORD *)buf = *(_OWORD *)(*v134 + 24);
                v137 = (double *)*(v135 - 2);
                v138 = *(_QWORD *)(a1 + 144);
                v331[0] = *(_QWORD *)(a1 + 136);
                v331[1] = v138;
                v139 = v136;
                v140 = v137;
                if (v138)
                {
                  v141 = (unint64_t *)(v138 + 8);
                  do
                    v142 = __ldxr(v141);
                  while (__stxr(v142 + 1, v141));
                  v140 = (double *)*(v135 - 2);
                  v139 = (uint64_t *)*v134;
                }
                v143 = sub_18F6D03A4((uint64_t)&v332, (double *)a1, v137, v136, v331, (double *)buf, 0, 0, v77, v140[6], *((double *)v139 + 6));
                sub_18F5D6004((uint64_t)v331);
                if ((v143 & 1) != 0)
                  goto LABEL_160;
                goto LABEL_141;
              }
              v111 = (double *)*(v315 - 2);
              v112 = *v111;
              v113 = 53.0;
              if (*(_QWORD *)v111)
              {
                v114 = *(_DWORD *)(*(_QWORD *)&v112 + 20);
                v113 = 53.0;
                if (v114 >= 3)
                {
                  v113 = 53.0;
                  if (v114 != 3)
                  {
                    v113 = 53.0;
                    if ((*(_DWORD *)(*(_QWORD *)&v112 + 24) - 1) >= 2)
                      v113 = dbl_18F775B70[v114 - 5 < 2];
                  }
                }
              }
              v115 = v111[13];
              v116 = *(double *)(*v316 + 104);
              v117 = *(double *)&v67;
              if (v115 >= 0.0)
                break;
              v118 = v113;
              if (v116 >= 0.0)
                goto LABEL_113;
LABEL_114:
              if (v113 >= v118)
                v113 = v118;
              if (v118 >= 20.0)
                v119 = v113;
              else
                v119 = 20.0;
              v120 = fabs(v78 - v77) * v119;
              *(double *)&v314 = v117;
              if (v120 >= v117)
                v121 = v120;
              else
                v121 = v117;
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
              v122 = qword_1EE172170;
              if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
              {
                v123 = *(_QWORD *)(*(_QWORD *)*(v315 - 2) + 144);
                v124 = 0;
                if (v123 == *(_QWORD *)(*(_QWORD *)*(v315 - 2) + 136))
                {
                  v125 = 0;
                  v126 = 0;
                }
                else
                {
                  v125 = *(_QWORD *)(v123 - 16);
                  v126 = *(_QWORD *)(v123 - 8);
                }
                v130 = *(_QWORD *)*v316;
                v131 = *(uint64_t **)(v130 + 136);
                if (*(uint64_t **)(v130 + 144) == v131)
                {
                  v132 = 0;
                }
                else
                {
                  v132 = *v131;
                  v124 = v131[1];
                }
                *(_DWORD *)buf = 134351105;
                *(double *)&buf[4] = v77;
                *(_WORD *)&buf[12] = 2049;
                *(_QWORD *)&buf[14] = v125;
                *(_WORD *)&buf[22] = 2049;
                *(_QWORD *)v355 = v126;
                *(_WORD *)&v355[8] = 2049;
                *(_QWORD *)v356 = v132;
                *(_WORD *)&v356[8] = 2049;
                *(_QWORD *)&v356[10] = v124;
                *(_WORD *)&v356[18] = 2050;
                *(long double *)&v356[20] = v101;
                v357 = 2050;
                v358 = v78;
                v359 = 2050;
                v360 = v121;
                v361 = 2050;
                v362 = v119;
                _os_log_impl(&dword_18F5B3000, v122, OS_LOG_TYPE_INFO, "CLTSP,MI,%{public}.3lf,constructing astar route between,startPoint,%{private}.7lf,%{private}.7lf,endPoint,%{private}.7lf,%{private}.7lf,distance,%{public}.3lf,endTime,%{public}.3lf,maxDistance,%{public}.3lf,speed,%{public}.3lf", buf, 0x5Cu);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v196 = *(_QWORD *)(*(_QWORD *)*(v315 - 2) + 144);
                v197 = 0;
                if (v196 == *(_QWORD *)(*(_QWORD *)*(v315 - 2) + 136))
                {
                  v198 = 0;
                  v199 = 0;
                }
                else
                {
                  v198 = *(_QWORD *)(v196 - 16);
                  v199 = *(_QWORD *)(v196 - 8);
                }
                v211 = *(_QWORD *)*v316;
                v212 = *(uint64_t **)(v211 + 136);
                if (*(uint64_t **)(v211 + 144) == v212)
                {
                  v213 = 0;
                }
                else
                {
                  v213 = *v212;
                  v197 = v212[1];
                }
                v342 = 134351105;
                v343 = *(_QWORD *)&v77;
                v344 = 2049;
                *(_QWORD *)v345 = v198;
                *(_WORD *)&v345[8] = 2049;
                *(_QWORD *)v346 = v199;
                *(_WORD *)&v346[8] = 2049;
                *(_QWORD *)v347 = v213;
                *(_WORD *)&v347[8] = 2049;
                *(_QWORD *)&v347[10] = v197;
                *(_WORD *)&v347[18] = 2050;
                *(long double *)&v347[20] = v101;
                v348 = 2050;
                v349 = v78;
                v350 = 2050;
                v351 = v121;
                v352 = 2050;
                v353 = v119;
                v215 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v215);
                if (v215 != buf)
                  free(v215);
                v94 = v316;
              }
              v330[0] = *(v315 - 2);
              v157 = *(v315 - 1);
              v330[1] = v157;
              if (v157)
              {
                v158 = (unint64_t *)(v157 + 8);
                do
                  v159 = __ldxr(v158);
                while (__stxr(v159 + 1, v158));
              }
              v160 = (_QWORD *)v94[1];
              v329[0] = (_QWORD *)*v94;
              v329[1] = v160;
              v67 = v314;
              if (v160)
              {
                v161 = v160 + 1;
                do
                  v162 = __ldxr(v161);
                while (__stxr(v162 + 1, v161));
              }
              v163 = *(_QWORD *)(a1 + 144);
              v328[0] = *(_QWORD *)(a1 + 136);
              v328[1] = v163;
              if (v163)
              {
                v164 = (unint64_t *)(v163 + 8);
                do
                  v165 = __ldxr(v164);
                while (__stxr(v165 + 1, v164));
              }
              v166 = sub_18F6CC868((uint64_t)&v332, (double *)a1, v330, v329, v328, v77, v121);
              sub_18F5D6004((uint64_t)v328);
              sub_18F5D6004((uint64_t)v329);
              sub_18F5D6004((uint64_t)v330);
              if ((v166 & 1) != 0)
              {
LABEL_160:
                v167 = *(double *)&v335;
                v168 = sub_18F747B94();
                *(double *)(v168 + 96) = v167 + *(double *)(v168 + 96);
                v169 = sub_18F747B94();
                sub_18F6C0F18((char *)(v169 + 128), (double)v334);
                v325 = 0;
                v326 = 0;
                v327 = 0;
                memset(v324, 0, sizeof(v324));
                v171 = (__int128 **)*((_QWORD *)&v332 + 1);
                for (i = (__int128 **)v332; i != v171; i += 2)
                  sub_18F623AB8(v324, *i);
                if (a3 == 1)
                {
                  if ((sub_18F700898((double *)a1, (uint64_t *)&v332, &v325, v69, v68, (uint64_t)&v337) & 1) == 0)
                  {
LABEL_178:
                    v183 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 116);
                    v184 = sub_18F747B94();
                    *(_DWORD *)(v184 + 104) += v183;
                    v185 = *(_QWORD *)(a1 + 136);
                    Current = CFAbsoluteTimeGetCurrent();
                    sub_18F61F28C(v185 + 288, Current, 0.5, 0.5);
                    v156 = v325 != (char *)v326;
                    *(_QWORD *)buf = v324;
                    sub_18F62AB98((void ***)buf);
                    *(_QWORD *)buf = &v325;
                    sub_18F62AB98((void ***)buf);
                    goto LABEL_179;
                  }
                }
                else
                {
                  v323[0] = *(v315 - 2);
                  v172 = *(v315 - 1);
                  v323[1] = v172;
                  if (v172)
                  {
                    v173 = (unint64_t *)(v172 + 8);
                    do
                      v174 = __ldxr(v173);
                    while (__stxr(v174 + 1, v173));
                  }
                  v175 = (uint64_t *)v316[1];
                  v322[0] = (uint64_t *)*v316;
                  v322[1] = v175;
                  if (v175)
                  {
                    v176 = (unint64_t *)(v175 + 1);
                    do
                      v177 = __ldxr(v176);
                    while (__stxr(v177 + 1, v176));
                  }
                  v178 = sub_18F6FFE0C((double *)a1, (uint64_t *)&v332, &v325, v323, v322, (uint64_t)&v337);
                  sub_18F5D6004((uint64_t)v322);
                  sub_18F5D6004((uint64_t)v323);
                  if (!v178)
                    goto LABEL_178;
                }
                sub_18F701374(v317, *(_QWORD *)(a1 + 56), *v69, *v71, ((char *)*v71 - (char *)*v69) >> 4);
                sub_18F701374(v317, *(_QWORD *)(a1 + 56), (uint64_t *)v325, v326, ((char *)v326 - v325) >> 4);
                sub_18F701374(v317, *(_QWORD *)(a1 + 56), *v68, *v73, ((char *)*v73 - (char *)*v68) >> 4);
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v179 = qword_1EE172170;
                if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
                {
                  v180 = ((char *)*v71 - (char *)*v69) >> 4;
                  v181 = ((char *)*v73 - (char *)*v68) >> 4;
                  v182 = (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4;
                  *(_DWORD *)buf = 134350336;
                  *(double *)&buf[4] = v77;
                  *(_WORD *)&buf[12] = 2050;
                  *(double *)&buf[14] = v78;
                  *(_WORD *)&buf[22] = 2050;
                  *(_QWORD *)v355 = v180;
                  *(_WORD *)&v355[8] = 2050;
                  *(_QWORD *)v356 = ((char *)v326 - v325) >> 4;
                  *(_WORD *)&v356[8] = 2050;
                  *(_QWORD *)&v356[10] = v181;
                  *(_WORD *)&v356[18] = 2050;
                  *(_QWORD *)&v356[20] = v182;
                  _os_log_impl(&dword_18F5B3000, v179, OS_LOG_TYPE_INFO, "CLTSP,MI,added snap solutions,startTime,%{public}.3lf,endTime,%{public}.3lf,startSnap,%{public}lu,constructed,%{public}lu,endSnap,%{public}lu,total,%{public}lu", buf, 0x3Eu);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172168 != -1)
                    dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                  v204 = ((char *)*v71 - (char *)*v69) >> 4;
                  v205 = ((char *)*v73 - (char *)*v68) >> 4;
                  v206 = (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4;
                  v342 = 134350336;
                  v343 = *(_QWORD *)&v77;
                  v344 = 2050;
                  *(double *)v345 = v78;
                  *(_WORD *)&v345[8] = 2050;
                  *(_QWORD *)v346 = v204;
                  *(_WORD *)&v346[8] = 2050;
                  *(_QWORD *)v347 = ((char *)v326 - v325) >> 4;
                  *(_WORD *)&v347[8] = 2050;
                  *(_QWORD *)&v347[10] = v205;
                  *(_WORD *)&v347[18] = 2050;
                  *(_QWORD *)&v347[20] = v206;
                  v207 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v207);
                  if (v207 != buf)
                    free(v207);
                }
                goto LABEL_178;
              }
LABEL_141:
              v144 = sub_18F747B94();
              ++*(_DWORD *)(v144 + 80);
              v145 = DWORD2(v333);
              v146 = sub_18F747B94();
              *(_DWORD *)(v146 + 84) += v145;
              v147 = HIDWORD(v333);
              v148 = sub_18F747B94();
              *(_DWORD *)(v148 + 88) += v147;
              v149 = sub_18F747B94();
              sub_18F6C0F18((char *)(v149 + 128), (double)v334);
              v150 = *(double *)&v335;
              v151 = sub_18F747B94();
              *(double *)(v151 + 96) = v150 + *(double *)(v151 + 96);
              sub_18F701374(v317, *(_QWORD *)(a1 + 56), *v69, *v71, ((char *)*v71 - (char *)*v69) >> 4);
              sub_18F701374(v317, *(_QWORD *)(a1 + 56), *v68, *v73, ((char *)*v73 - (char *)*v68) >> 4);
              if (qword_1EE172168 != -1)
                dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
              v152 = qword_1EE172170;
              if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
              {
                v153 = ((char *)*v71 - (char *)*v69) >> 4;
                v154 = ((char *)*v73 - (char *)*v68) >> 4;
                v155 = (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4;
                *(_DWORD *)buf = 134350080;
                *(double *)&buf[4] = v77;
                *(_WORD *)&buf[12] = 2050;
                *(double *)&buf[14] = v78;
                *(_WORD *)&buf[22] = 2050;
                *(_QWORD *)v355 = v153;
                *(_WORD *)&v355[8] = 2050;
                *(_QWORD *)v356 = v154;
                *(_WORD *)&v356[8] = 2050;
                *(_QWORD *)&v356[10] = v155;
                _os_log_impl(&dword_18F5B3000, v152, OS_LOG_TYPE_INFO, "CLTSP,MI,unable to construct route,added snap solutions,startTime,%{public}.3lf,endTime,%{public}.3lf,startSnap,%{public}lu,constructed,0,endSnap,%{public}lu,total,%{public}lu", buf, 0x34u);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172168 != -1)
                  dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
                v200 = ((char *)*v71 - (char *)*v69) >> 4;
                v201 = ((char *)*v73 - (char *)*v68) >> 4;
                v202 = (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4;
                v342 = 134350080;
                v343 = *(_QWORD *)&v77;
                v344 = 2050;
                *(double *)v345 = v78;
                *(_WORD *)&v345[8] = 2050;
                *(_QWORD *)v346 = v200;
                *(_WORD *)&v346[8] = 2050;
                *(_QWORD *)v347 = v201;
                *(_WORD *)&v347[8] = 2050;
                *(_QWORD *)&v347[10] = v202;
                v203 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v203);
                if (v203 != buf)
                  free(v203);
              }
              v156 = 0;
LABEL_179:
              *(_QWORD *)buf = &v332;
              sub_18F62AB98((void ***)buf);
              *(_QWORD *)buf = v341;
              sub_18F62AB98((void ***)buf);
              if (!v156)
                goto LABEL_61;
LABEL_68:
              ++v66;
              v64 = *(uint64_t ***)(a1 + 200);
              v65 = *(_QWORD *)(a1 + 208) - (_QWORD)v64;
              if (0xAAAAAAAAAAAAAAABLL * (v65 >> 3) <= v66)
                goto LABEL_279;
            }
            if (v116 < 0.0)
            {
              v118 = v115 * 2.5;
              goto LABEL_114;
            }
            v116 = (v115 + v116) * 0.5;
LABEL_113:
            v118 = v116 * 2.5;
            goto LABEL_114;
          }
LABEL_279:
          if (v65 == 24)
            sub_18F701374(a1 + 48, *(_QWORD *)(a1 + 56), *v64, v64[1], ((char *)v64[1] - (char *)*v64) >> 4);
          v262 = *(_QWORD *)(a1 + 136);
          if (*(_QWORD *)(v262 + 88))
          {
            objc_msgSend_clearRoadTiles(*(void **)(v262 + 88), v61, v62, v63);
            v262 = *(_QWORD *)(a1 + 136);
          }
          sub_18F61EC64(v262);
          sub_18F6FB08C(a1, (const char *)&__p, a7, a3);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
          v263 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEFAULT))
          {
            v267 = 0.0;
            if (v15 >= 0.0)
            {
              v268 = mach_continuous_time();
              v267 = vabdd_f64(sub_18F6BDF00(v268), v15) * 1000.0;
            }
            v269 = objc_msgSend_count(a7, v264, v265, v266);
            v270 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4;
            v271 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v271 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v272 = *(_QWORD *)(a1 + 136);
            v274 = *(_DWORD *)(v272 + 112);
            v273 = *(_DWORD *)(v272 + 116);
            v275 = *(_QWORD *)(v272 + 320);
            LODWORD(v272) = *(_DWORD *)(v272 + 152);
            *(_DWORD *)buf = 134350850;
            *(double *)&buf[4] = v267;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = v269;
            *(_WORD *)&buf[18] = 1026;
            *(_DWORD *)&buf[20] = v270;
            *(_WORD *)v355 = 2082;
            *(_QWORD *)&v355[2] = v271;
            *(_WORD *)v356 = 1026;
            *(_DWORD *)&v356[2] = v273;
            *(_WORD *)&v356[6] = 1026;
            *(_DWORD *)&v356[8] = v274;
            *(_WORD *)&v356[12] = 2050;
            *(_QWORD *)&v356[14] = v275;
            *(_WORD *)&v356[22] = 1026;
            *(_DWORD *)&v356[24] = v272;
            _os_log_impl(&dword_18F5B3000, v263, OS_LOG_TYPE_DEFAULT, "CLTSP,MI,integrateWithMapDataSparse,timeTakenInMS,%{public}.3lf,inputLocations,%{public}d,snapLocations,%{public}d,id,%{public}s,mapsAPICalls,%{public}d,bufferCalls,%{public}d,connectionUsed,%{public}lu,geometry,%{public}d", buf, 0x3Eu);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
            v304 = 0.0;
            if (v15 >= 0.0)
            {
              v305 = mach_continuous_time();
              v304 = vabdd_f64(sub_18F6BDF00(v305), v15) * 1000.0;
            }
            v306 = objc_msgSend_count(a7, v301, v302, v303);
            v307 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4;
            v308 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v308 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v309 = *(_QWORD *)(a1 + 136);
            v311 = *(_DWORD *)(v309 + 112);
            v310 = *(_DWORD *)(v309 + 116);
            v312 = *(_QWORD *)(v309 + 320);
            LODWORD(v309) = *(_DWORD *)(v309 + 152);
            v342 = 134350850;
            v343 = *(_QWORD *)&v304;
            v344 = 1026;
            *(_DWORD *)v345 = v306;
            *(_WORD *)&v345[4] = 1026;
            *(_DWORD *)&v345[6] = v307;
            *(_WORD *)v346 = 2082;
            *(_QWORD *)&v346[2] = v308;
            *(_WORD *)v347 = 1026;
            *(_DWORD *)&v347[2] = v310;
            *(_WORD *)&v347[6] = 1026;
            *(_DWORD *)&v347[8] = v311;
            *(_WORD *)&v347[12] = 2050;
            *(_QWORD *)&v347[14] = v312;
            *(_WORD *)&v347[22] = 1026;
            *(_DWORD *)&v347[24] = v309;
            v313 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::integrateWithMapData(NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, std::shared_ptr<CLTripSegmentRouteBuilder> &, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v313);
            if (v313 != buf)
              free(v313);
          }
          sub_18F6F178C(*(_QWORD *)(a1 + 136));
          v217 = 1;
          goto LABEL_276;
        }
        sub_18F6FB08C(a1, (const char *)&__p, a7, a3);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
        v230 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
        {
          v234 = 0.0;
          if (v15 >= 0.0)
          {
            v235 = mach_continuous_time();
            v234 = vabdd_f64(sub_18F6BDF00(v235), v15) * 1000.0;
          }
          v236 = objc_msgSend_count(a7, v231, v232, v233);
          v237 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4;
          v238 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v238 = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 134349826;
          *(double *)&buf[4] = v234;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v236;
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)&buf[20] = v237;
          *(_WORD *)v355 = 2082;
          *(_QWORD *)&v355[2] = v238;
          _os_log_impl(&dword_18F5B3000, v230, OS_LOG_TYPE_ERROR, "CLTSP,MI,integrateWithMapDataSparse failed, tripLocations count not be initialized,timeTakenInMS,%{public}.3lf,inputLocations,%{public}d,snapLocations,%{public}d,id,%{public}s", buf, 0x22u);
        }
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_274;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
        v242 = 0.0;
        if (v15 >= 0.0)
        {
          v243 = mach_continuous_time();
          v242 = vabdd_f64(sub_18F6BDF00(v243), v15) * 1000.0;
        }
        v244 = objc_msgSend_count(a7, v239, v240, v241);
        v245 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4;
        v246 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v246 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v342 = 134349826;
        v343 = *(_QWORD *)&v242;
        v344 = 1026;
        *(_DWORD *)v345 = v244;
        *(_WORD *)&v345[4] = 1026;
        *(_DWORD *)&v345[6] = v245;
        *(_WORD *)v346 = 2082;
        *(_QWORD *)&v346[2] = v246;
        v247 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::integrateWithMapData(NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, std::shared_ptr<CLTripSegmentRouteBuilder> &, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v247);
        goto LABEL_302;
      }
    }
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    v248 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
    {
      v252 = objc_msgSend_count(a6, v249, v250, v251);
      v256 = objc_msgSend_count(a7, v253, v254, v255);
      v257 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v257 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v258 = *(_QWORD *)(a1 + 136);
      v259 = *(_DWORD *)(v258 + 116);
      v260 = *(_QWORD *)(v258 + 320);
      LODWORD(v258) = *(_DWORD *)(v258 + 152);
      *(_DWORD *)buf = 134350338;
      *(_QWORD *)&buf[4] = v252;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v256;
      *(_WORD *)&buf[22] = 2082;
      *(_QWORD *)v355 = v257;
      *(_WORD *)&v355[8] = 1026;
      *(_DWORD *)v356 = v259;
      *(_WORD *)&v356[4] = 2050;
      *(_QWORD *)&v356[6] = v260;
      *(_WORD *)&v356[14] = 1026;
      *(_DWORD *)&v356[16] = v258;
      _os_log_impl(&dword_18F5B3000, v248, OS_LOG_TYPE_INFO, "CLTSP,MI,integrateWithMapData,segments not available for reconstruction,sparseLocations,%{public}lu,upsampledLocations,%{public}lu,id,%{public}s,mapsAPICalls,%{public}d,connectionBufferUsedCount,%{public}lu,geometry,%{public}d", buf, 0x36u);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_274;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    v280 = objc_msgSend_count(a6, v277, v278, v279);
    v284 = objc_msgSend_count(a7, v281, v282, v283);
    v285 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v285 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v286 = *(_QWORD *)(a1 + 136);
    v287 = *(_DWORD *)(v286 + 116);
    v288 = *(_QWORD *)(v286 + 320);
    LODWORD(v286) = *(_DWORD *)(v286 + 152);
    v342 = 134350338;
    v343 = v280;
    v344 = 2050;
    *(_QWORD *)v345 = v284;
    *(_WORD *)&v345[8] = 2082;
    *(_QWORD *)v346 = v285;
    *(_WORD *)&v346[8] = 1026;
    *(_DWORD *)v347 = v287;
    *(_WORD *)&v347[4] = 2050;
    *(_QWORD *)&v347[6] = v288;
    *(_WORD *)&v347[14] = 1026;
    *(_DWORD *)&v347[16] = v286;
    v247 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::integrateWithMapData(NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, std::shared_ptr<CLTripSegmentRouteBuilder> &, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v247);
LABEL_302:
    if (v247 != buf)
      free(v247);
LABEL_274:
    sub_18F61EC64(*(_QWORD *)(a1 + 136));
LABEL_275:
    v217 = 0;
LABEL_276:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return v217;
  }
  if (qword_1EE172168 != -1)
    dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
  v216 = qword_1EE172170;
  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v216, OS_LOG_TYPE_ERROR, "CLTSP,MI,integrateWithMapData,geometry pointer is nullptr", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    LOWORD(v342) = 0;
    v276 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::integrateWithMapData(NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, std::shared_ptr<CLTripSegmentRouteBuilder> &, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v276);
    if (v276 != buf)
      free(v276);
  }
  return 0;
}

void sub_18F6FFCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a49 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_18F6FFE0C(double *a1, uint64_t *a2, char **a3, uint64_t *a4, uint64_t **a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  NSObject *v20;
  uint64_t result;
  char *v22;
  int v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t *v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double ***v42;
  double v43;
  uint64_t v44;
  _BOOL4 v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  NSObject *v52;
  char v53;
  char *v54;
  unint64_t v55;
  double **v56;
  double v57;
  double i;
  double *v59;
  __int128 *v61;
  NSObject *v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void **v68;
  char *v69;
  void **v70[2];
  __int128 v71;
  uint64_t v72;
  char *v73;
  char *v74;
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;
  uint8_t buf[16];
  double v83;
  _BYTE v84[32];
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v6 = *a4;
  if (*a4 && (v8 = *a5) != 0)
  {
    v10 = *a2;
    v11 = a2[1];
    if (v11 == *a2)
      return 1;
    v16 = *(unsigned __int8 *)(*(_QWORD *)v10 + 16);
    v17 = *(_QWORD *)(v11 - 16);
    v18 = *(unsigned __int8 *)(v17 + 16);
    if ((unint64_t)(v11 - *a2) < 0x11)
    {
      v19 = *((double *)v8 + 6) > *(double *)(v6 + 48);
      *(_BYTE *)(*(_QWORD *)v10 + 16) = v19;
    }
    else
    {
      sub_18F6D32C0(a2, a1);
      v10 = *a2;
      v11 = a2[1];
      v19 = *(unsigned __int8 *)(*(_QWORD *)*a2 + 16);
      v6 = *a4;
      v8 = *a5;
      v17 = *(_QWORD *)(v11 - 16);
    }
    v23 = *(unsigned __int8 *)(v17 + 16);
    v24 = *(double *)(v6 + 152);
    if (v19 != v16)
      v24 = -v24;
    *(double *)(v6 + 152) = v24;
    v25 = *((double *)v8 + 19);
    if (v23 != v18)
      v25 = -v25;
    *((double *)v8 + 19) = v25;
    if (v10 == v11)
      return 1;
    if (v19)
      v26 = *(double *)(v6 + 48);
    else
      v26 = 1.0 - *(double *)(v6 + 48);
    v27 = *(_QWORD *)v6;
    sub_18F7047B4(*(_QWORD *)v6);
    v28 = *(double *)(v27 + 40);
    v29 = *a5;
    if (*(_BYTE *)(*(_QWORD *)(a2[1] - 16) + 16))
      v30 = 1.0 - *((double *)*a5 + 6);
    else
      v30 = *((double *)*a5 + 6);
    v31 = *v29;
    sub_18F7047B4(*v29);
    v32 = v30 * *(double *)(v31 + 40) + v26 * v28;
    v33 = sub_18F6D6EB8(a2, *(double *)(*a4 + 152)) - v32;
    v34 = sub_18F6D6EB8(a2, *((double *)*a5 + 19)) - v32;
    v35 = *a4;
    v36 = *(double *)(*a4 + 104);
    v37 = *((double *)*a5 + 13);
    if (v36 <= 0.5)
    {
      v36 = -1.0;
      if (v37 > 0.5)
        v36 = *((double *)*a5 + 13);
    }
    else if (v37 > 0.5 && v36 < v37)
    {
      v36 = *((double *)*a5 + 13);
    }
    v38 = (v33 + v34) * 0.5;
    v39 = *((double *)*a5 + 2) - *(double *)(*a4 + 16);
    v40 = *(_QWORD *)(a6 + 40);
    v41 = *(_QWORD *)(a6 + 48);
    v42 = (double ***)(a6 + 40);
    v43 = 0.0;
    if (v40 != v41)
    {
      v44 = *(_QWORD *)(a6 + 40);
      do
      {
        if (*(_QWORD *)v44)
          v43 = v43 + *(double *)(*(_QWORD *)v44 + 80);
        v44 += 16;
      }
      while (v44 != v41);
    }
    v45 = 0;
    v46 = v38 / v39;
    if (v36 >= 0.0 && v46 > 0.0)
    {
      v47 = fabs(v39) * -0.0833333333 + 4.5;
      v48 = 4.0;
      if (v47 <= 4.0)
        v48 = v47;
      if (v47 >= 2.0)
        v49 = v48;
      else
        v49 = 2.0;
      v45 = v46 > v49 * v36;
    }
    v50 = v43 * 1.2;
    if (!v45 && v38 <= v50)
    {
      v51 = 0.0;
      while (v40 != v41)
      {
        if (*(_QWORD *)v40)
          v51 = v51 + *(double *)(*(_QWORD *)v40 + 80);
        v40 += 16;
      }
      v73 = 0;
      v74 = 0;
      v75 = 0.0;
      if ((sub_18F6FB8DC(a1, (uint64_t **)(a6 + 40), a2, &v73, *(double *)(v35 + 48), v33 / v51, *(double *)(v35 + 152)) & 1) != 0)
      {
        v71 = 0uLL;
        v72 = 0;
        v53 = sub_18F6FB8DC(a1, (uint64_t **)(a6 + 40), a2, (char **)&v71, *(double *)(*a4 + 48), v34 / v51, *((double *)*a5 + 19));
        if ((v53 & 1) != 0)
        {
          v83 = 0.0;
          *(_QWORD *)v84 = 0;
          *(_OWORD *)buf = xmmword_18F771F40;
          *(_QWORD *)&v84[8] = 0x3FF0000000000000;
          *(_QWORD *)&v84[16] = 0;
          *(_QWORD *)&v84[24] = 0;
          v85 = 0;
          if (buf != (uint8_t *)a6)
            sub_18F7015A8(&v84[16], *(uint64_t **)(a6 + 40), *(uint64_t **)(a6 + 48), (uint64_t)(*(_QWORD *)(a6 + 48) - *(_QWORD *)(a6 + 40)) >> 4);
          v54 = v73;
          if (v74 != v73)
          {
            v55 = 0;
            do
            {
              v56 = *(double ***)&v84[16];
              v57 = 0.0;
              for (i = 0.0; v56 != *(double ***)&v84[24]; v56 += 2)
              {
                v59 = *v56;
                if (*v56)
                {
                  if (*v59 > ***v42 && *v59 <= *(*v42)[2 * v55])
                    i = i + v59[10];
                }
              }
              if (v38 > 0.0)
                v57 = v33 / v51 * i / v33;
              v61 = (__int128 *)&v54[16 * v55];
              *(float64x2_t *)(*(_QWORD *)v61 + 24) = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)(v71 + 16 * v55) + 24), v57), *(float64x2_t *)(*(_QWORD *)v61 + 24), 1.0 - v57);
              sub_18F623AB8(a3, v61);
              ++v55;
              v54 = v73;
            }
            while (v55 < (v74 - v73) >> 4);
          }
          v70[0] = (void **)&v84[16];
          sub_18F62AB98(v70);
        }
        else
        {
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
          v64 = qword_1EE172170;
          if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
          {
            v65 = *(_QWORD *)(*a4 + 16);
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)&buf[4] = v65;
            _os_log_impl(&dword_18F5B3000, v64, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,unable to compute snap on constructed route", buf, 0xCu);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172168 != -1)
              dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
            v68 = *(void ***)(*a4 + 16);
            LODWORD(v70[0]) = 134349056;
            *(void ***)((char *)v70 + 4) = v68;
            v69 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::interpolateLocationsAlongSegmentPedestrian(CLAStarRouteConstructor &, std::vector<CLGeoMapSnapDataPtr> &, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, const CLGeoMapLocationArray &) const", "CoreLocation: %s\n", v69);
            if (v69 != (char *)buf)
              free(v69);
          }
        }
        *(_QWORD *)buf = &v71;
        sub_18F62AB98((void ***)buf);
        *(_QWORD *)buf = &v73;
        sub_18F62AB98((void ***)buf);
        if ((v53 & 1) != 0)
          return 1;
      }
      else
      {
        if (qword_1EE172168 != -1)
          dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
        v62 = qword_1EE172170;
        if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
        {
          v63 = *(_QWORD *)(*a4 + 16);
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v63;
          _os_log_impl(&dword_18F5B3000, v62, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,unable to compute snap on constructed route", buf, 0xCu);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172168 != -1)
            dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
          v66 = *(_QWORD *)(*a4 + 16);
          LODWORD(v71) = 134349056;
          *(_QWORD *)((char *)&v71 + 4) = v66;
          v67 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::interpolateLocationsAlongSegmentPedestrian(CLAStarRouteConstructor &, std::vector<CLGeoMapSnapDataPtr> &, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, const CLGeoMapLocationArray &) const", "CoreLocation: %s\n", v67);
          if (v67 != (char *)buf)
            free(v67);
        }
        *(_QWORD *)buf = &v73;
        sub_18F62AB98((void ***)buf);
      }
      return 0;
    }
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    v52 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110400;
      *(_DWORD *)&buf[4] = v45;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v38 > v50;
      *(_WORD *)&buf[14] = 2050;
      v83 = v46;
      *(_WORD *)v84 = 2050;
      *(double *)&v84[2] = v36;
      *(_WORD *)&v84[10] = 2048;
      *(double *)&v84[12] = (v33 + v34) * 0.5;
      *(_WORD *)&v84[20] = 2048;
      *(double *)&v84[22] = v43;
      _os_log_impl(&dword_18F5B3000, v52, OS_LOG_TYPE_DEFAULT, "CLTSP,Warning,cannot interpolate along route,speed_check_failed,%d,distance_check_failed,%d,route_speed_mps,%{public}.1lf,max_start_destination_speed_mps,%{public}.1lf,routeLength_m,%.1lf,li_distance_m,%.1lf", buf, 0x36u);
    }
    result = sub_18F5C4AE0(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
      LODWORD(v73) = 67110400;
      HIDWORD(v73) = v45;
      LOWORD(v74) = 1024;
      *(_DWORD *)((char *)&v74 + 2) = v38 > v50;
      HIWORD(v74) = 2050;
      v75 = v46;
      v76 = 2050;
      v77 = v36;
      v78 = 2048;
      v79 = (v33 + v34) * 0.5;
      v80 = 2048;
      v81 = v43;
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::interpolateLocationsAlongSegmentPedestrian(CLAStarRouteConstructor &, std::vector<CLGeoMapSnapDataPtr> &, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, const CLGeoMapLocationArray &) const", "CoreLocation: %s\n", v22);
LABEL_14:
      if (v22 != (char *)buf)
        free(v22);
      return 0;
    }
  }
  else
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    v20 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_ERROR, "CLTSP,MI,interpolateLocationsAlongSegmentPedestrian,null pointers", buf, 2u);
    }
    result = sub_18F5C4AE0(115, 0);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
      LOWORD(v73) = 0;
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::interpolateLocationsAlongSegmentPedestrian(CLAStarRouteConstructor &, std::vector<CLGeoMapSnapDataPtr> &, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, const CLGeoMapLocationArray &) const", "CoreLocation: %s\n", v22);
      goto LABEL_14;
    }
  }
  return result;
}

void sub_18F70083C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a13;
  sub_18F62AB98(&a25);
  a25 = (void **)&a17;
  sub_18F62AB98(&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_18F700898(double *a1, uint64_t *a2, char **a3, _QWORD *a4, uint64_t **a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  double v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  double v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  char *v41;
  NSObject *v42;
  __int128 **v43;
  __int128 **v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  int v55;
  char *v56;
  char *v57[4];
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  _BYTE buf[12];
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v8 = a4[1];
  if (*a4 == v8 || (v9 = *a5, *a5 == a5[1]))
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    v32 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      v33 = (uint64_t)(a4[1] - *a4) >> 4;
      v34 = ((char *)a5[1] - (char *)*a5) >> 4;
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v33;
      v63 = 2050;
      v64 = v34;
      _os_log_impl(&dword_18F5B3000, v32, OS_LOG_TYPE_ERROR, "CLTSP,MI,interpolateLocationsAlongSegmentVehicular,invalid size,start,%{public}lu,end,%{public}lu", buf, 0x16u);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 == -1)
      goto LABEL_57;
    goto LABEL_67;
  }
  if (!*(_QWORD *)(v8 - 16) || !*v9)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    v35 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      v36 = (uint64_t)(a4[1] - *a4) >> 4;
      v37 = ((char *)a5[1] - (char *)*a5) >> 4;
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v36;
      v63 = 2050;
      v64 = v37;
      _os_log_impl(&dword_18F5B3000, v35, OS_LOG_TYPE_ERROR, "CLTSP,MI,interpolateLocationsAlongSegmentVehicular,null pointers,start,%{public}lu,end,%{public}lu", buf, 0x16u);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 == -1)
    {
LABEL_57:
      v46 = (uint64_t)(a4[1] - *a4) >> 4;
      v47 = ((char *)a5[1] - (char *)*a5) >> 4;
      LODWORD(v57[0]) = 134349312;
      *(char **)((char *)v57 + 4) = (char *)v46;
      WORD2(v57[1]) = 2050;
      *(char **)((char *)&v57[1] + 6) = (char *)v47;
      v48 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::interpolateLocationsAlongSegmentVehicular(CLAStarRouteConstructor &, std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const CLGeoMapLocationArray &, BOOL)", "CoreLocation: %s\n", v48);
      if (v48 != buf)
        free(v48);
      return 0;
    }
LABEL_67:
    dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    goto LABEL_57;
  }
  v53 = *(_QWORD *)(v8 - 16);
  v14 = *(std::__shared_weak_count **)(v8 - 8);
  v54 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v9 = *a5;
  }
  v18 = *v9;
  v17 = (std::__shared_weak_count *)v9[1];
  v51 = v18;
  v52 = v17;
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = sub_18F6D4B84(a2, &v53, &v51);
  v22 = v52;
  if (v52)
  {
    v23 = (unint64_t *)&v52->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v54;
  if (v54)
  {
    v26 = (unint64_t *)&v54->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = *(_QWORD *)(a6 + 40);
  v29 = *(_QWORD *)(a6 + 48);
  v30 = (uint64_t **)(a6 + 40);
  v31 = 0.0;
  while (v28 != v29)
  {
    if (*(_QWORD *)v28)
      v31 = v31 + *(double *)(*(_QWORD *)v28 + 80);
    v28 += 16;
  }
  v40 = *(char **)(*(_QWORD *)(a4[1] - 16) + 16);
  v41 = *(char **)(**a5 + 16);
  if (qword_1EE172168 != -1)
    dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
  v42 = qword_1EE172170;
  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134350080;
    *(_QWORD *)&buf[4] = v40;
    v63 = 2050;
    v64 = (uint64_t)v41;
    v65 = 2050;
    v66 = v21;
    v67 = 2050;
    v68 = v31;
    v69 = 2050;
    v70 = v21 / v31;
    _os_log_impl(&dword_18F5B3000, v42, OS_LOG_TYPE_INFO, "CLTSP,MI,construct route distances,startTime,%{public}.3lf,endTime,%{public}.3lf,routeConstructed,%{public}.3lf,routeExpected,%{public}.3lf,distanceScale,%{public}.3lf", buf, 0x34u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    LODWORD(v57[0]) = 134350080;
    *(char **)((char *)v57 + 4) = v40;
    WORD2(v57[1]) = 2050;
    *(char **)((char *)&v57[1] + 6) = v41;
    HIWORD(v57[2]) = 2050;
    v57[3] = *(char **)&v21;
    v58 = 2050;
    v59 = v31;
    v60 = 2050;
    v61 = v21 / v31;
    v49 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::interpolateLocationsAlongSegmentVehicular(CLAStarRouteConstructor &, std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const CLGeoMapLocationArray &, BOOL)", "CoreLocation: %s\n", v49);
    if (v49 != buf)
      free(v49);
  }
  memset(v57, 0, 24);
  v43 = (__int128 **)*a2;
  v44 = (__int128 **)a2[1];
  while (v43 != v44)
  {
    sub_18F623AB8(v57, *v43);
    v43 += 2;
  }
  v38 = sub_18F6FB8DC(a1, v30, a2, a3, *(double *)(*(_QWORD *)(a4[1] - 16) + 48), v21 / v31, 0.0);
  if ((v38 & 1) == 0)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
    v45 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v40;
      _os_log_impl(&dword_18F5B3000, v45, OS_LOG_TYPE_ERROR, "CLTSP,MI,%{public}.1lf,unable to compute snap on constructed route", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2990AD0);
      v55 = 134349056;
      v56 = v40;
      v50 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::interpolateLocationsAlongSegmentVehicular(CLAStarRouteConstructor &, std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const CLGeoMapLocationArray &, BOOL)", "CoreLocation: %s\n", v50);
      if (v50 != buf)
        free(v50);
    }
  }
  *(_QWORD *)buf = v57;
  sub_18F62AB98((void ***)buf);
  return v38;
}

void sub_18F7010C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a17;
  sub_18F62AB98(&a25);
  _Unwind_Resume(a1);
}

os_log_t sub_18F701108()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1EE172170 = (uint64_t)result;
  return result;
}

void sub_18F701134(uint64_t a1, _QWORD *a2, uint64_t a3, double a4)
{
  __int128 *v4;
  double **v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  double *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  double v16;
  double v17;
  unint64_t *v18;
  unint64_t v19;
  double v20;
  double **v21;
  double *v22;
  double *v23;
  double v24;
  uint64_t *v25;
  uint64_t *v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  char **v30;

  v4 = *(__int128 **)a1;
  v5 = *(double ***)(a1 + 8);
  v6 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
  v7 = 3;
  if (a3 == 1)
    v7 = 14;
  if (v6 > v7 && (a3 != 1 || (double)(3 * v6) < a4))
  {
    v11 = a2[1];
    if (*a2 == v11)
    {
      v27 = 0;
      v28 = 0;
      v29 = 0;
    }
    else
    {
      v12 = *(double **)(v11 - 16);
      v13 = *(std::__shared_weak_count **)(v11 - 8);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = -1.0;
      if (v12)
      {
        v17 = *v12;
        if (*(_QWORD *)v12)
        {
          if (*(_DWORD *)(*(_QWORD *)&v17 + 20) < 3u || (*(_DWORD *)(*(_QWORD *)&v17 + 24) - 1) <= 1)
            v16 = v12[2];
        }
      }
      if (v13)
      {
        v18 = (unint64_t *)&v13->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v4 = *(__int128 **)a1;
      v5 = *(double ***)(a1 + 8);
      if (v16 > 0.0)
      {
        if (v4 != (__int128 *)v5)
        {
          v20 = 60.0;
          v21 = *(double ***)a1;
          while (1)
          {
            v22 = *v21;
            if (*v21)
            {
              v20 = v20 + 1.0;
              if ((*(_DWORD *)(*(_QWORD *)v22 + 20) & 0xFFFFFFFC) == 4
                && vabdd_f64(v16, v22[2]) < v20
                && v22[13] > 18.0)
              {
                goto LABEL_41;
              }
            }
            v21 += 2;
            if (v21 == v5)
              goto LABEL_30;
          }
        }
        goto LABEL_39;
      }
    }
LABEL_30:
    if (v4 != (__int128 *)v5)
    {
      do
      {
        v23 = *(double **)v4;
        if (*(_QWORD *)v4)
        {
          v24 = 0.0;
          if (a3 != 1 || (v24 = 3.0, !*(_QWORD *)v23) || (*(_DWORD *)(*(_QWORD *)v23 + 24) & 0xFFFFFFFE) != 6)
          {
            if (v23[13] >= v24)
              sub_18F623AB8(&v27, v4);
          }
        }
        ++v4;
      }
      while (v4 != (__int128 *)v5);
      v25 = (uint64_t *)v27;
      v26 = v28;
      goto LABEL_40;
    }
LABEL_39:
    v26 = 0;
    v25 = 0;
LABEL_40:
    sub_18F701374((uint64_t)a2, a2[1], v25, v26, ((char *)v26 - (char *)v25) >> 4);
LABEL_41:
    v30 = &v27;
    sub_18F62AB98((void ***)&v30);
  }
}

void sub_18F701354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_18F62AB98(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_18F701374(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD v30[5];

  if (a5 < 1)
    return result;
  v7 = (_QWORD *)a2;
  v8 = (uint64_t *)result;
  v10 = *(_QWORD *)(result + 16);
  result += 16;
  v9 = v10;
  v11 = *(_QWORD *)(result - 8);
  if (a5 > (uint64_t)(v10 - v11) >> 4)
  {
    v12 = *v8;
    v13 = a5 + ((uint64_t)(v11 - *v8) >> 4);
    if (v13 >> 60)
      sub_18F5F7864();
    v14 = (a2 - v12) >> 4;
    v15 = v9 - v12;
    if (v15 >> 3 > v13)
      v13 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v13;
    v30[4] = result;
    if (v16)
      v17 = (char *)sub_18F62AB64(result, v16);
    else
      v17 = 0;
    v25 = (uint64_t *)&v17[16 * v14];
    v30[0] = v17;
    v30[1] = v25;
    v30[3] = &v17[16 * v16];
    v26 = &v25[2 * a5];
    do
    {
      *v25 = *a3;
      v27 = a3[1];
      v25[1] = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v25 += 2;
      a3 += 2;
    }
    while (v25 != v26);
    v30[2] = v26;
    sub_18F62C3FC(v8, v30, v7);
    return sub_18F62C334((uint64_t)v30);
  }
  v18 = (uint64_t)(v11 - a2) >> 4;
  if (v18 >= a5)
  {
    v19 = &a3[2 * a5];
LABEL_29:
    for (result = sub_18F62C380((uint64_t)v8, a2, v11, (char *)(a2 + 16 * a5)); a3 != v19; v7 += 2)
    {
      result = (uint64_t)sub_18F623A40(v7, a3);
      a3 += 2;
    }
    return result;
  }
  v19 = &a3[2 * v18];
  if (v19 == a4)
  {
    v21 = *(uint64_t **)(result - 8);
  }
  else
  {
    v20 = &a3[2 * v18];
    v21 = *(uint64_t **)(result - 8);
    do
    {
      *v21 = *v20;
      v22 = v20[1];
      v21[1] = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v20 += 2;
      v21 += 2;
    }
    while (v20 != a4);
  }
  v8[1] = (uint64_t)v21;
  if ((uint64_t)(v11 - a2) >= 1)
    goto LABEL_29;
  return result;
}

uint64_t sub_18F701540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_18F62AC70((void **)a3);
      *(_OWORD *)a3 = *(_OWORD *)v5;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v5 + 16);
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      a3 += 24;
      v5 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_18F7015A8(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;

  v6 = a2;
  v8 = a1[2];
  v9 = (_QWORD *)*a1;
  if (a4 > (v8 - *a1) >> 4)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = v9;
      if ((_QWORD *)v10 != v9)
      {
        do
          v10 = sub_18F5D6004(v10 - 16);
        while ((_QWORD *)v10 != v9);
        v11 = (_QWORD *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      sub_18F5F7864();
    v12 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v12 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    result = (uint64_t)sub_18F62AB24(a1, v13);
    v15 = (uint64_t *)a1[1];
    while (v6 != a3)
    {
      v16 = v6[1];
      *v15 = *v6;
      v15[1] = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v6 += 2;
      v15 += 2;
    }
LABEL_30:
    a1[1] = v15;
    return result;
  }
  result = a1[1];
  v19 = (result - (uint64_t)v9) >> 4;
  if (v19 < a4)
  {
    v20 = &a2[2 * v19];
    if ((_QWORD *)result != v9)
    {
      v21 = 16 * v19;
      do
      {
        result = (uint64_t)sub_18F623A40(v9, v6);
        v6 += 2;
        v9 += 2;
        v21 -= 16;
      }
      while (v21);
      v9 = (_QWORD *)a1[1];
    }
    v15 = v9;
    if (v20 != a3)
    {
      v15 = v9;
      do
      {
        v22 = v20[1];
        *v15 = *v20;
        v15[1] = v22;
        if (v22)
        {
          v23 = (unint64_t *)(v22 + 8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v20 += 2;
        v15 += 2;
      }
      while (v20 != a3);
    }
    goto LABEL_30;
  }
  if (a2 == a3)
  {
    v25 = v9;
  }
  else
  {
    v25 = v9;
    do
    {
      sub_18F623A40(v9, v6);
      v6 += 2;
      v9 += 2;
      v25 += 2;
    }
    while (v6 != a3);
    result = a1[1];
  }
  while ((_QWORD *)result != v25)
    result = sub_18F5D6004(result - 16);
  a1[1] = v25;
  return result;
}

os_log_t sub_18F701784()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

void sub_18F70207C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_18F7020E4(uint64_t a1, uint64_t *a2)
{
  id Weak;
  const char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  Weak = objc_loadWeak((id *)(a1 + 32));
  v6 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  objc_msgSend_handleMessage_(Weak, v4, (uint64_t)&v12, v5);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18F702170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F5D6004((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F702184(uint64_t a1)
{
  id Weak;
  const char *v2;
  uint64_t v3;
  uint64_t v4;

  Weak = objc_loadWeak((id *)(a1 + 32));
  return objc_msgSend_handleInterruption(Weak, v2, v3, v4);
}

void sub_18F703480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F7037B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F703AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F703EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F704258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F7045C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

os_log_t sub_18F704640()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "Proximity");
  qword_1EE172120 = (uint64_t)result;
  return result;
}

void sub_18F70466C(_QWORD *a1, float64x2_t *a2, char a3)
{
  float64x2_t *v5;
  int32x2_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *f64;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  float64x2_t *v16;
  char *v17;
  float64x2_t *v18;
  float64x2_t *v19;

  if ((a3 & 1) != 0)
  {
    v5 = (float64x2_t *)a1[18];
    if ((float64x2_t *)a1[17] == v5)
    {
      v5 = (float64x2_t *)a1[17];
    }
    else
    {
      v6 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v5[-1], *a2)));
      if ((vand_s8((int8x8_t)v6, (int8x8_t)vdup_lane_s32(v6, 1)).u32[0] & 1) != 0)
        return;
    }
  }
  else
  {
    v5 = (float64x2_t *)a1[18];
  }
  v7 = (uint64_t)(a1 + 19);
  v8 = a1[19];
  if ((unint64_t)v5 >= v8)
  {
    v10 = a1[17];
    v11 = ((uint64_t)v5 - v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      sub_18F706298();
    v13 = v8 - v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)sub_18F62AB64(v7, v14);
    else
      v15 = 0;
    v16 = (float64x2_t *)&v15[16 * v11];
    v17 = &v15[16 * v14];
    *v16 = *a2;
    f64 = (_OWORD *)v16[1].f64;
    v19 = (float64x2_t *)a1[17];
    v18 = (float64x2_t *)a1[18];
    if (v18 != v19)
    {
      do
      {
        v16[-1] = v18[-1];
        --v16;
        --v18;
      }
      while (v18 != v19);
      v18 = (float64x2_t *)a1[17];
    }
    a1[17] = v16;
    a1[18] = f64;
    a1[19] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = *a2;
    f64 = (_OWORD *)v5[1].f64;
  }
  a1[18] = f64;
}

uint64_t sub_18F7047B4(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  double *v9;
  unint64_t v10;
  double v11;
  double v12;
  double *v13;
  double *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  double *v20;
  uint64_t v21;
  NSObject *v22;
  char *v23;
  uint8_t buf[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 160);
  v2 = (void **)(a1 + 160);
  if (v1 != *(_QWORD *)(a1 + 168))
    return 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 168) = v1;
  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 144);
  if (v5 != v6)
  {
    ++qword_1EE172F88;
    v25 = 0;
    v26 = 0;
    *(_OWORD *)buf = xmmword_18F771F40;
    v27 = 0x3FF0000000000000;
    sub_18F704AD4((void **)(a1 + 160), ((v6 - v5) >> 4) - 1);
    v7 = *(_QWORD *)(a1 + 136);
    if ((unint64_t)(*(_QWORD *)(a1 + 144) - v7) >= 0x11)
    {
      v8 = (_QWORD *)(a1 + 176);
      v9 = *(double **)(a1 + 168);
      v10 = 1;
      do
      {
        v11 = sub_18F5BD064((double *)buf, *(double *)(v7 + 16 * v10 - 16), *(double *)(v7 + 16 * v10 - 8), *(double *)(v7 + 16 * v10), *(double *)(v7 + 16 * v10 + 8), 0.0);
        v12 = v11;
        if ((unint64_t)v9 >= *v8)
        {
          v14 = (double *)*v2;
          v15 = ((char *)v9 - (_BYTE *)*v2) >> 3;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61)
            sub_18F5F7864();
          v17 = *v8 - (_QWORD)v14;
          if (v17 >> 2 > v16)
            v16 = v17 >> 2;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)sub_18F610B1C(a1 + 176, v18);
            v14 = *(double **)(a1 + 160);
            v9 = *(double **)(a1 + 168);
          }
          else
          {
            v19 = 0;
          }
          v20 = (double *)&v19[8 * v15];
          *v20 = v12;
          v13 = v20 + 1;
          while (v9 != v14)
          {
            v21 = *((_QWORD *)v9-- - 1);
            *((_QWORD *)v20-- - 1) = v21;
          }
          *(_QWORD *)(a1 + 160) = v20;
          *(_QWORD *)(a1 + 168) = v13;
          *(_QWORD *)(a1 + 176) = &v19[8 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v9 = v11;
          v13 = v9 + 1;
        }
        *(_QWORD *)(a1 + 168) = v13;
        *(double *)(a1 + 40) = v12 + *(double *)(a1 + 40);
        ++v10;
        v7 = *(_QWORD *)(a1 + 136);
        v9 = v13;
      }
      while (v10 < (*(_QWORD *)(a1 + 144) - v7) >> 4);
    }
    return 1;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990B30);
  v22 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_ERROR, "CLMM,computeSegmentLengthsAndHeading,CoordinateCount is 0", buf, 2u);
  }
  result = sub_18F5C4AE0(115, 0);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990B30);
    v23 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLMapRoad::computeSegmentDistances()", "CoreLocation: %s\n", v23);
    if (v23 != (char *)buf)
      free(v23);
    return 0;
  }
  return result;
}

void sub_18F704AD4(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_18F5F7864();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_18F610B1C(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

double sub_18F704B68(uint64_t a1, signed int a2)
{
  void **v4;
  uint64_t v5;
  double v6;
  NSObject *v7;
  double v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  uint64_t *v17;
  double v18;
  NSObject *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double *v25;
  double *v26;
  double *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  double *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  NSObject *v40;
  char *v41;
  double v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  double v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint8_t buf[4];
  double v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v4 = (void **)(a1 + 184);
  if (*(_QWORD *)(a1 + 184) == *(_QWORD *)(a1 + 192))
  {
    v10 = *(_QWORD *)(a1 + 136);
    v11 = *(_QWORD *)(a1 + 144);
    if (v10 == v11)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990B30);
      v40 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v40, OS_LOG_TYPE_ERROR, "CLMM,computeSegmentLengthsAndHeading,CoordinateCount is 0", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990B30);
        LOWORD(v48) = 0;
        v41 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLMapRoad::computeSegmentHeadings()", "CoreLocation: %s\n", v41);
        if (v41 != (char *)buf)
          free(v41);
      }
    }
    else
    {
      v45 = 0;
      v46 = 0;
      v44 = xmmword_18F771F40;
      v47 = 0x3FF0000000000000;
      sub_18F704AD4((void **)(a1 + 184), ((v11 - v10) >> 4) - 1);
      ++qword_1EE172F90;
      v12 = *(_QWORD *)(a1 + 136);
      if ((unint64_t)(*(_QWORD *)(a1 + 144) - v12) >= 0x11)
      {
        v13 = 1;
        do
        {
          v14 = (double *)(v12 + 16 * v13);
          v15 = v14 - 2;
          v16 = v14 - 1;
          v17 = (uint64_t *)(v14 + 1);
          v18 = sub_18F71AF58((double *)&v44, *(v14 - 2), *(v14 - 1), *v14, v14[1]);
          if (v18 < 0.0)
          {
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990B30);
            v19 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
            {
              v20 = *v14;
              v21 = *v17;
              v22 = *(_QWORD *)v15;
              v23 = *(_QWORD *)v16;
              *(_DWORD *)buf = 134284289;
              v57 = v20;
              v58 = 2049;
              v59 = v21;
              v60 = 2049;
              v61 = v22;
              v62 = 2049;
              v63 = v23;
              _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_ERROR, "CLMM,invalid heading for CLMapRoad coordinate,%{private}.7lf,%{private}.7lf,prev,%{private}.7lf,%{private}.7lf", buf, 0x2Au);
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990B30);
              v35 = *v14;
              v36 = *v17;
              v37 = *(_QWORD *)v15;
              v38 = *(_QWORD *)v16;
              v48 = 134284289;
              v49 = v35;
              v50 = 2049;
              v51 = v36;
              v52 = 2049;
              v53 = v37;
              v54 = 2049;
              v55 = v38;
              v39 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLMapRoad::computeSegmentHeadings()", "CoreLocation: %s\n", v39);
              if (v39 != (char *)buf)
                free(v39);
            }
          }
          v25 = *(double **)(a1 + 192);
          v24 = *(_QWORD *)(a1 + 200);
          if ((unint64_t)v25 >= v24)
          {
            v27 = (double *)*v4;
            v28 = ((char *)v25 - (_BYTE *)*v4) >> 3;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 61)
              sub_18F5F7864();
            v30 = v24 - (_QWORD)v27;
            if (v30 >> 2 > v29)
              v29 = v30 >> 2;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
              v31 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            if (v31)
            {
              v32 = (char *)sub_18F610B1C(a1 + 200, v31);
              v27 = *(double **)(a1 + 184);
              v25 = *(double **)(a1 + 192);
            }
            else
            {
              v32 = 0;
            }
            v33 = (double *)&v32[8 * v28];
            *v33 = v18;
            v26 = v33 + 1;
            while (v25 != v27)
            {
              v34 = *((_QWORD *)v25-- - 1);
              *((_QWORD *)v33-- - 1) = v34;
            }
            *(_QWORD *)(a1 + 184) = v33;
            *(_QWORD *)(a1 + 192) = v26;
            *(_QWORD *)(a1 + 200) = &v32[8 * v31];
            if (v27)
              operator delete(v27);
          }
          else
          {
            *v25 = v18;
            v26 = v25 + 1;
          }
          *(_QWORD *)(a1 + 192) = v26;
          ++v13;
          v12 = *(_QWORD *)(a1 + 136);
        }
        while (v13 < (*(_QWORD *)(a1 + 144) - v12) >> 4);
      }
    }
  }
  v5 = *(_QWORD *)(a1 + 184);
  if (a2 < (unint64_t)((*(_QWORD *)(a1 + 192) - v5) >> 3))
    return *(double *)(v5 + 8 * a2);
  v6 = -1.0;
  if (((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 4) - 1 > (unint64_t)a2)
  {
    v6 = sub_18F7051E8(a1, a2, a2 + 1);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990B30);
    v7 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v8 = *(double *)a1;
      *(_DWORD *)buf = 134283777;
      v57 = v8;
      v58 = 1026;
      LODWORD(v59) = a2;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_ERROR, "CLMM,getHeadingForSegment,stored bearing value unavailble,had to be calculated,%{private}lld,index,%{public}d", buf, 0x12u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990B30);
      v42 = *(double *)a1;
      v48 = 134283777;
      v49 = v42;
      v50 = 1026;
      LODWORD(v51) = a2;
      v43 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "double CLMapRoad::getHeadingForSegment(const int)", "CoreLocation: %s\n", v43);
      if (v43 != (char *)buf)
        free(v43);
    }
  }
  return v6;
}

double sub_18F7051E8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  double result;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = -1.0;
  if ((a2 & 0x80000000) == 0)
  {
    v4 = *(_QWORD *)(a1 + 136);
    v5 = (unint64_t)(*(_QWORD *)(a1 + 144) - v4) >> 4;
    if ((int)v5 > (int)a2 && (a3 & 0x80000000) == 0 && v4 && (int)v5 > (int)a3)
    {
      v7 = 0;
      v8 = 0;
      v6 = xmmword_18F771F40;
      v9 = 0x3FF0000000000000;
      return sub_18F71AF58((double *)&v6, *(double *)(v4 + 16 * a2), *(double *)(v4 + 16 * a2 + 8), *(double *)(v4 + 16 * a3), *(double *)(v4 + 16 * a3 + 8));
    }
  }
  return result;
}

uint64_t sub_18F70525C(uint64_t a1)
{
  uint64_t v1;
  signed int v3;
  uint64_t v4;
  int v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v1 = (*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 4;
  if ((int)v1 < 3)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = v1 - 1;
  v6 = -1.0;
  do
  {
    v7 = sub_18F704B68(a1, v3);
    if (v7 >= 0.0)
    {
      v8 = v7;
      if (v6 >= 0.0)
      {
        v9 = fmod(v7 - v6, 360.0);
        if (v9 < 0.0)
          v9 = v9 + 360.0;
        if (v9 > 180.0)
          v9 = v9 + -360.0;
        if (fabs(v9) <= 7.5)
          v4 = v4;
        else
          v4 = (v4 + 1);
      }
    }
    else
    {
      v8 = v6;
    }
    ++v3;
    v6 = v8;
  }
  while (v5 != v3);
  return v4;
}

BOOL sub_18F70534C(uint64_t a1, int a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  _BOOL8 result;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  signed int v24;
  double v25;
  double v26;
  double v27;
  double v28;

  if (((*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) & 0xFFFFFFFF0) == 0x20)
    return 0;
  sub_18F7047B4(a1);
  v8 = *(_QWORD *)(a1 + 160);
  v9 = *(_QWORD *)(a1 + 168) - v8;
  if (!v9)
    return 0;
  v10 = 0;
  v11 = v9 >> 3;
  v12 = *(double *)(a1 + 40) * a3;
  if (v11 <= 1)
    v11 = 1;
  while (1)
  {
    v12 = v12 - *(double *)(v8 + 8 * v10);
    if (v12 <= 0.0)
      break;
    if (v11 == ++v10)
      return 0;
  }
  if (!(_DWORD)v10)
  {
    v20 = sub_18F704B68(a1, 0);
    v21 = sub_18F704B68(a1, 1);
    v16 = v21;
    if (v20 >= 0.0 && v21 >= 0.0)
    {
      v22 = fmod(v20 - v21, 360.0);
      if (v22 < 0.0)
        v22 = v22 + 360.0;
      if (v22 > 180.0)
        v22 = v22 + -360.0;
      if (fabs(v22) > a4)
        return 1;
    }
    if (a2)
    {
      v23 = a1;
      v24 = 2;
      goto LABEL_39;
    }
    return 0;
  }
  v14 = sub_18F704B68(a1, (int)v10 - 1);
  v15 = sub_18F704B68(a1, v10);
  v16 = v15;
  if (v14 < 0.0 || v15 < 0.0)
  {
    if (a2)
    {
LABEL_31:
      v25 = sub_18F704B68(a1, (int)v10 - 2);
      if (v14 >= 0.0 && v25 >= 0.0)
      {
        v26 = fmod(v25 - v14, 360.0);
        if (v26 < 0.0)
          v26 = v26 + 360.0;
        if (v26 > 180.0)
          v26 = v26 + -360.0;
        if (fabs(v26) > a4)
          return 1;
      }
      v24 = v10 + 1;
      v23 = a1;
LABEL_39:
      v27 = sub_18F704B68(v23, v24);
      if (v16 >= 0.0 && v27 >= 0.0)
      {
        v28 = fmod(v16 - v27, 360.0);
        if (v28 < 0.0)
          v28 = v28 + 360.0;
        if (v28 > 180.0)
          v28 = v28 + -360.0;
        if (fabs(v28) > a4)
          return 1;
      }
    }
    return 0;
  }
  v17 = fmod(v14 - v15, 360.0);
  if (v17 < 0.0)
    v17 = v17 + 360.0;
  if (v17 > 180.0)
    v17 = v17 + -360.0;
  v18 = fabs(v17);
  result = v18 > a4;
  if (v18 <= a4 && a2 != 0)
    goto LABEL_31;
  return result;
}

uint64_t sub_18F7055CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  float64x2_t v14;
  uint64_t v15;
  int32x2_t v16;

  v2 = *a2;
  if (!*a2)
    return 0;
  result = sub_18F7056C4(a1, a2);
  if ((_DWORD)result)
  {
    result = sub_18F705728(a1, a2);
    if ((_DWORD)result)
    {
      v6 = *(_QWORD *)(a1 + 136);
      v7 = (unint64_t)(*(_QWORD *)(a1 + 144) - v6) >> 4;
      v8 = *(_QWORD *)(v2 + 136);
      v9 = *(_QWORD *)(v2 + 144) - v8;
      if ((_DWORD)v7 == ((unint64_t)v9 >> 4))
      {
        if ((int)v7 < 3)
          return 1;
        v10 = (v7 - 1);
        v11 = (int)(v9 >> 4);
        v12 = v7 - 2;
        v13 = 1;
        v14 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
        result = 1;
        while (1)
        {
          v15 = v13 + 1;
          if ((v12 & 0x80000000) == 0 && v13 < v11)
          {
            if (v6)
            {
              if ((int)v15 >= 1)
              {
                v16 = vmovn_s64(vcgtq_f64(v14, vabdq_f64(*(float64x2_t *)(v8 + 16 * v13), *(float64x2_t *)(v6 + 16 * v12))));
                if ((vand_s8((int8x8_t)v16, (int8x8_t)vdup_lane_s32(v16, 1)).u8[0] & 1) == 0)
                  break;
              }
            }
          }
          --v12;
          ++v13;
          if (v10 == v15)
            return result;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_18F7056C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float64x2_t *v3;
  float64x2_t v4;
  float64x2_t v5;
  uint64_t v6;
  int32x2_t v7;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(float64x2_t **)(a1 + 136);
    v4 = 0uLL;
    v5 = 0uLL;
    if (*(float64x2_t **)(a1 + 144) != v3)
      v5 = *v3;
    v6 = *(_QWORD *)(v2 + 144);
    if (v6 != *(_QWORD *)(v2 + 136))
      v4 = *(float64x2_t *)(v6 - 16);
    v7 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v5, v4)));
    LOBYTE(v2) = vand_s8((int8x8_t)v7, (int8x8_t)vdup_lane_s32(v7, 1)).u8[0];
  }
  return v2 & 1;
}

uint64_t sub_18F705728(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t *v6;
  uint64_t v7;
  int32x2_t v8;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(a1 + 144);
    v4 = 0uLL;
    v5 = 0uLL;
    if (v3 != *(_QWORD *)(a1 + 136))
      v5 = *(float64x2_t *)(v3 - 16);
    v7 = v2 + 136;
    v6 = *(float64x2_t **)(v2 + 136);
    if (*(float64x2_t **)(v7 + 8) != v6)
      v4 = *v6;
    v8 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v5, v4)));
    LOBYTE(v2) = vand_s8((int8x8_t)v8, (int8x8_t)vdup_lane_s32(v8, 1)).u8[0];
  }
  return v2 & 1;
}

uint64_t sub_18F70578C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float64x2_t *v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t *v6;
  uint64_t v7;
  int32x2_t v8;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(float64x2_t **)(a1 + 136);
    v4 = 0uLL;
    v5 = 0uLL;
    if (*(float64x2_t **)(a1 + 144) != v3)
      v5 = *v3;
    v7 = v2 + 136;
    v6 = *(float64x2_t **)(v2 + 136);
    if (*(float64x2_t **)(v7 + 8) != v6)
      v4 = *v6;
    v8 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v5, v4)));
    LOBYTE(v2) = vand_s8((int8x8_t)v8, (int8x8_t)vdup_lane_s32(v8, 1)).u8[0];
  }
  return v2 & 1;
}

uint64_t sub_18F7057F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  float64x2_t v4;
  float64x2_t v5;
  uint64_t v6;
  int32x2_t v7;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(a1 + 144);
    v4 = 0uLL;
    v5 = 0uLL;
    if (v3 != *(_QWORD *)(a1 + 136))
      v5 = *(float64x2_t *)(v3 - 16);
    v6 = *(_QWORD *)(v2 + 144);
    if (v6 != *(_QWORD *)(v2 + 136))
      v4 = *(float64x2_t *)(v6 - 16);
    v7 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v5, v4)));
    LOBYTE(v2) = vand_s8((int8x8_t)v7, (int8x8_t)vdup_lane_s32(v7, 1)).u8[0];
  }
  return v2 & 1;
}

uint64_t sub_18F705854(uint64_t a1, uint64_t *a2)
{
  if (!*a2)
    return 0;
  if ((sub_18F70578C(a1, a2) & 1) != 0)
    return 1;
  return sub_18F705728(a1, a2);
}

uint64_t sub_18F7058A4(uint64_t a1, uint64_t *a2)
{
  if (!*a2)
    return 0;
  if ((sub_18F7057F0(a1, a2) & 1) != 0)
    return 1;
  return sub_18F7056C4(a1, a2);
}

uint64_t sub_18F7058F4(uint64_t a1, uint64_t *a2)
{
  if (!*a2)
    return 0;
  if ((sub_18F70578C(a1, a2) & 1) != 0)
    return 1;
  return sub_18F7056C4(a1, a2);
}

uint64_t sub_18F705944(uint64_t a1, uint64_t *a2)
{
  if (!*a2)
    return 0;
  if ((sub_18F7057F0(a1, a2) & 1) != 0)
    return 1;
  return sub_18F705728(a1, a2);
}

uint64_t sub_18F705994(uint64_t a1, uint64_t *a2)
{
  if (!*a2)
    return 0;
  if ((sub_18F7058F4(a1, a2) & 1) != 0)
    return 1;
  return sub_18F705944(a1, a2);
}

uint64_t sub_18F7059E4(uint64_t a1)
{
  uint64_t v1;
  float64x2_t *v2;
  int32x2_t v3;
  uint64_t result;

  v2 = *(float64x2_t **)(a1 + 136);
  v1 = *(_QWORD *)(a1 + 144);
  if ((unint64_t)(v1 - (_QWORD)v2) >= 0x20)
  {
    if (v1 - (_QWORD)v2 != 32)
      return 1;
    v3 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(*(float64x2_t *)(v1 - 16), *v2)));
    if ((vand_s8((int8x8_t)v3, (int8x8_t)vdup_lane_s32(v3, 1)).u32[0] & 1) == 0)
      return 1;
  }
  result = 0;
  ++qword_1EE172C38;
  return result;
}

uint64_t sub_18F705A50(uint64_t *a1, const char *a2, void *a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  int v55;
  uint64_t result;
  _BYTE *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  void *v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  void *v127;
  const char *v128;
  uint64_t v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  void *v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  void *v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  char v159;
  char v160;
  BOOL v161;
  uint64_t v162;
  int v163;
  double *v164;
  double v165;
  BOOL v166;
  char v167;
  _OWORD *v168;
  unint64_t v169;
  NSObject *v170;
  uint64_t v171;
  unint64_t v172;
  char v173;
  int v174;
  _BYTE buf[1620];
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v174 = a4;
    if (objc_msgSend_valueForKey_(a3, a2, (uint64_t)CFSTR("roadID"), a4))
    {
      v8 = (void *)objc_msgSend_valueForKey_(a3, v6, (uint64_t)CFSTR("roadID"), v7);
      *a1 = objc_msgSend_longLongValue(v8, v9, v10, v11);
    }
    if (objc_msgSend_valueForKey_(a3, v6, (uint64_t)CFSTR("roadClass"), v7))
    {
      v14 = (void *)objc_msgSend_valueForKey_(a3, v12, (uint64_t)CFSTR("roadClass"), v13);
      *((_DWORD *)a1 + 5) = objc_msgSend_intValue(v14, v15, v16, v17);
    }
    if (objc_msgSend_valueForKey_(a3, v12, (uint64_t)CFSTR("formOfWay"), v13))
    {
      v20 = (void *)objc_msgSend_valueForKey_(a3, v18, (uint64_t)CFSTR("formOfWay"), v19);
      *((_DWORD *)a1 + 6) = objc_msgSend_intValue(v20, v21, v22, v23);
    }
    if (objc_msgSend_valueForKey_(a3, v18, (uint64_t)CFSTR("travelDirection"), v19))
    {
      v26 = (void *)objc_msgSend_valueForKey_(a3, v24, (uint64_t)CFSTR("travelDirection"), v25);
      *((_DWORD *)a1 + 18) = objc_msgSend_intValue(v26, v27, v28, v29);
    }
    if (objc_msgSend_valueForKey_(a3, v24, (uint64_t)CFSTR("rampType"), v25))
    {
      v32 = (void *)objc_msgSend_valueForKey_(a3, v30, (uint64_t)CFSTR("rampType"), v31);
      *((_DWORD *)a1 + 19) = objc_msgSend_intValue(v32, v33, v34, v35);
    }
    if (objc_msgSend_valueForKey_(a3, v30, (uint64_t)CFSTR("speedLimit"), v31))
    {
      v38 = (void *)objc_msgSend_valueForKey_(a3, v36, (uint64_t)CFSTR("speedLimit"), v37);
      *((double *)a1 + 4) = (double)(int)objc_msgSend_intValue(v38, v39, v40, v41);
    }
    if (objc_msgSend_valueForKey_(a3, v36, (uint64_t)CFSTR("isDrivable"), v37))
    {
      v44 = (void *)objc_msgSend_valueForKey_(a3, v42, (uint64_t)CFSTR("isDrivable"), v43);
      *((_BYTE *)a1 + 81) = objc_msgSend_BOOLValue(v44, v45, v46, v47);
    }
    if (objc_msgSend_valueForKey_(a3, v42, (uint64_t)CFSTR("isRoadPedestrianNavigable"), v43))
    {
      v50 = (void *)objc_msgSend_valueForKey_(a3, v48, (uint64_t)CFSTR("isRoadPedestrianNavigable"), v49);
      v173 = objc_msgSend_BOOLValue(v50, v51, v52, v53);
    }
    else
    {
      v173 = 0;
    }
    if (objc_msgSend_valueForKey_(a3, v48, (uint64_t)CFSTR("isTunnel"), v49))
    {
      v60 = (void *)objc_msgSend_valueForKey_(a3, v58, (uint64_t)CFSTR("isTunnel"), v59);
      *((_BYTE *)a1 + 18) = objc_msgSend_BOOLValue(v60, v61, v62, v63);
    }
    if (objc_msgSend_valueForKey_(a3, v58, (uint64_t)CFSTR("isBridge"), v59))
    {
      v66 = (void *)objc_msgSend_valueForKey_(a3, v64, (uint64_t)CFSTR("isBridge"), v65);
      *((_BYTE *)a1 + 19) = objc_msgSend_BOOLValue(v66, v67, v68, v69);
    }
    if (objc_msgSend_valueForKey_(a3, v64, (uint64_t)CFSTR("isRail"), v65))
    {
      v72 = (void *)objc_msgSend_valueForKey_(a3, v70, (uint64_t)CFSTR("isRail"), v71);
      *((_BYTE *)a1 + 17) = objc_msgSend_BOOLValue(v72, v73, v74, v75);
    }
    if (objc_msgSend_valueForKey_(a3, v70, (uint64_t)CFSTR("startJunction"), v71))
    {
      v78 = (void *)objc_msgSend_valueForKey_(a3, v76, (uint64_t)CFSTR("startJunction"), v77);
      *((_DWORD *)a1 + 27) = objc_msgSend_intValue(v78, v79, v80, v81);
    }
    if (objc_msgSend_valueForKey_(a3, v76, (uint64_t)CFSTR("stopJunction"), v77))
    {
      v84 = (void *)objc_msgSend_valueForKey_(a3, v82, (uint64_t)CFSTR("stopJunction"), v83);
      *((_DWORD *)a1 + 28) = objc_msgSend_intValue(v84, v85, v86, v87);
    }
    if (objc_msgSend_valueForKey_(a3, v82, (uint64_t)CFSTR("startTileBorder"), v83))
    {
      v90 = (void *)objc_msgSend_valueForKey_(a3, v88, (uint64_t)CFSTR("startTileBorder"), v89);
      *((_BYTE *)a1 + 116) = objc_msgSend_BOOLValue(v90, v91, v92, v93);
    }
    if (objc_msgSend_valueForKey_(a3, v88, (uint64_t)CFSTR("endTileBorder"), v89))
    {
      v96 = (void *)objc_msgSend_valueForKey_(a3, v94, (uint64_t)CFSTR("endTileBorder"), v95);
      *((_BYTE *)a1 + 117) = objc_msgSend_BOOLValue(v96, v97, v98, v99);
    }
    if (objc_msgSend_valueForKey_(a3, v94, (uint64_t)CFSTR("bikeableSide"), v95))
    {
      v102 = (void *)objc_msgSend_valueForKey_(a3, v100, (uint64_t)CFSTR("bikeableSide"), v101);
      *((_DWORD *)a1 + 22) = objc_msgSend_intValue(v102, v103, v104, v105);
    }
    if (objc_msgSend_valueForKey_(a3, v100, (uint64_t)CFSTR("walkableSide"), v101))
    {
      v108 = (void *)objc_msgSend_valueForKey_(a3, v106, (uint64_t)CFSTR("walkableSide"), v107);
      *((_DWORD *)a1 + 21) = objc_msgSend_intValue(v108, v109, v110, v111);
    }
    if (objc_msgSend_valueForKey_(a3, v106, (uint64_t)CFSTR("coordinateCount"), v107))
    {
      v114 = (void *)objc_msgSend_valueForKey_(a3, v112, (uint64_t)CFSTR("coordinateCount"), v113);
      v118 = objc_msgSend_intValue(v114, v115, v116, v117);
      if (v118 >= 1)
      {
        v119 = v118;
        v120 = 0;
        while (1)
        {
          v121 = (void *)MEMORY[0x1940032C4]();
          v124 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v122, (uint64_t)CFSTR("coord%i"), v123, v120);
          v127 = (void *)objc_msgSend_valueForKey_(a3, v125, v124, v126);
          v130 = (void *)objc_msgSend_componentsSeparatedByString_(v127, v128, (uint64_t)CFSTR(","), v129);
          if (objc_msgSend_count(v130, v131, v132, v133) != 3)
            break;
          v136 = (void *)objc_msgSend_objectAtIndexedSubscript_(v130, v134, 0, v135);
          objc_msgSend_doubleValue(v136, v137, v138, v139);
          v141 = v140;
          v144 = (void *)objc_msgSend_objectAtIndexedSubscript_(v130, v142, 1, v143);
          objc_msgSend_doubleValue(v144, v145, v146, v147);
          *(_QWORD *)buf = v141;
          *(_QWORD *)&buf[8] = v148;
          sub_18F70466C(a1, (float64x2_t *)buf, 1);
          v149 = (a1[18] - a1[17]) & 0xFFFFFFFF0;
          v152 = (void *)objc_msgSend_objectAtIndexedSubscript_(v130, v150, 2, v151);
          objc_msgSend_doubleValue(v152, v153, v154, v155);
          if (v149 == 16)
            v157 = 15;
          else
            v157 = 16;
          a1[v157] = v156;
          objc_autoreleasePoolPop(v121);
          v120 = (v120 + 1);
          if (v119 == (_DWORD)v120)
            goto LABEL_53;
        }
        objc_autoreleasePoolPop(v121);
        return 0;
      }
    }
LABEL_53:
    v158 = *((unsigned __int8 *)a1 + 17);
    v159 = v173;
    if ((*((_DWORD *)a1 + 21) - 1) < 3)
      v159 = 1;
    if (*((_BYTE *)a1 + 17))
      v159 = 0;
    *((_BYTE *)a1 + 80) = v159;
    if ((v159 & 1) != 0)
    {
      v160 = 1;
    }
    else
    {
      if (v158)
        v161 = 1;
      else
        v161 = (*((_DWORD *)a1 + 22) - 1) >= 3;
      v160 = !v161;
    }
    *((_BYTE *)a1 + 82) = v160;
    v162 = *((int *)a1 + 5);
    v163 = *((_DWORD *)a1 + 18);
    if (v162 > 7)
    {
      v165 = dbl_18F772340[v163 == 0];
    }
    else
    {
      v164 = (double *)&unk_18F775C88;
      if (!v163)
        v164 = (double *)&unk_18F775CC8;
      v165 = v164[v162];
    }
    *((double *)a1 + 12) = v165;
    if (v158)
      v166 = 1;
    else
      v166 = v163 == 0;
    v167 = !v166;
    *((_BYTE *)a1 + 16) = v167;
    v168 = (_OWORD *)a1[17];
    v169 = a1[18] - (_QWORD)v168;
    if (v174)
    {
      if ((int)(v169 >> 4) <= 1)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990B30);
        v170 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v171 = *a1;
          v172 = (unint64_t)(a1[18] - a1[17]) >> 4;
          *(_DWORD *)buf = 134283777;
          *(_QWORD *)&buf[4] = v171;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v172;
          _os_log_impl(&dword_18F5B3000, v170, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,id,%{private}lld,has less than two coordinate,%{public}d", buf, 0x12u);
        }
        result = sub_18F5C4AE0(115, 2);
        if ((_DWORD)result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990B30);
          v57 = (_BYTE *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLMapRoad::fillFromMapHelperNSDictionaryArray(CLDistanceCalc &, NSDictionary * _Nonnull, BOOL)", "CoreLocation: %s\n");
LABEL_86:
          if (v57 != buf)
            free(v57);
          return 0;
        }
        return result;
      }
    }
    else
    {
      result = 1;
      if (!v168 || (v169 & 0xFFFFFFFF0) != 0x10)
        return result;
      *(_OWORD *)buf = *v168;
      sub_18F70466C(a1, (float64x2_t *)buf, 0);
    }
    return 1;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990B30);
  v54 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v54, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionaryArray,array is null", buf, 2u);
  }
  v55 = sub_18F5C4AE0(115, 0);
  result = 0;
  if (v55)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990B30);
    v57 = (_BYTE *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLMapRoad::fillFromMapHelperNSDictionaryArray(CLDistanceCalc &, NSDictionary * _Nonnull, BOOL)", "CoreLocation: %s\n");
    goto LABEL_86;
  }
  return result;
}

os_log_t sub_18F70626C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

void sub_18F706298()
{
  sub_18F5D5A54("vector");
}

uint64_t sub_18F7062AC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = (void *)objc_msgSend_objectForKey_(a1, a2, (uint64_t)CFSTR("Authorization"), a4);
  if (v5)
  {
    v9 = objc_msgSend_integerValue(v5, v6, v7, v8);
    if (v9 < 5)
      return qword_18F775D80[v9];
    return 0;
  }
  v11 = (void *)objc_msgSend_objectForKey_(a1, v6, (uint64_t)CFSTR("Authorized"), v8);
  if (!v11)
  {
    v15 = (int)sub_18F706D64(a1, (const char *)1, v13, v14) - 3;
    if (v15 < 6)
      return qword_18F775DA8[v15];
    return 0;
  }
  if (objc_msgSend_BOOLValue(v11, v12, v13, v14))
    return 4;
  else
    return 1;
}

uint64_t sub_18F70634C(void *a1, const char *a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  double v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  double v19;
  double v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  _BOOL4 v25;
  BOOL v26;
  double v27;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;

  v7 = 0;
  v8 = 0;
  v9 = (uint64_t *)off_1E2992C98;
  do
  {
    v10 = dbl_18F775D08[v7];
    v11 = *v9;
    v12 = (void *)objc_msgSend_objectForKey_(a1, a2, *(v9 - 1), a5);
    v15 = objc_msgSend_objectForKey_(a1, v13, v11, v14);
    v17 = (void *)v15;
    if (v12)
      v18 = v15 == 0;
    else
      v18 = 1;
    if (!v18)
    {
      objc_msgSend_doubleValue(v12, a2, v16, a5);
      v20 = v19;
      objc_msgSend_doubleValue(v17, v21, v22, v23);
      if (v20 <= v24)
      {
        v25 = 1;
        goto LABEL_15;
      }
      v17 = 0;
    }
    v25 = v17 != 0;
    if (v12)
      v26 = v17 == 0;
    else
      v26 = 0;
    if (v26)
    {
LABEL_20:
      v8 = dword_18F775D58[v7] | v8;
      goto LABEL_21;
    }
LABEL_15:
    v27 = a3 - v10;
    if (v27 > 0.0 && v25)
    {
      v29 = (void *)objc_msgSend_date(MEMORY[0x1E0C99D68], a2, v16, a5);
      objc_msgSend_timeIntervalSinceReferenceDate(v29, v30, v31, v32);
      v34 = v33;
      objc_msgSend_doubleValue(v17, v35, v36, v37);
      if (v27 - vabdd_f64(v38, v34) > 0.0)
        goto LABEL_20;
    }
LABEL_21:
    ++v7;
    v9 += 2;
  }
  while (v7 != 10);
  return v8;
}

id sub_18F706480(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isKindOfClass;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  uint64_t v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v39 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v5 = (void *)objc_msgSend_allKeys(a1, v2, v3, v4);
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v40, (uint64_t)v50, 16);
  if (!v7)
    goto LABEL_31;
  v11 = v7;
  v12 = 0;
  v13 = *(_QWORD *)v41;
  *(_QWORD *)&v10 = 68289282;
  v38 = v10;
  do
  {
    v14 = 0;
    do
    {
      if (*(_QWORD *)v41 != v13)
        objc_enumerationMutation(v5);
      v15 = *(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * v14);
      objc_msgSend_objectForKeyedSubscript_(a1, v8, v15, v9, v38);
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      v19 = (void *)objc_msgSend_objectForKeyedSubscript_(a1, v17, v15, v18);
      if ((isKindOfClass & 1) != 0)
      {
        v22 = objc_msgSend_objectAtIndexedSubscript_(v19, v20, 1, v21);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend_setObject_forKeyedSubscript_(v39, v23, v22, v15);
        }
        else
        {
          if (qword_1ECD8E748 != -1)
            dispatch_once(&qword_1ECD8E748, &unk_1E2990B50);
          v28 = qword_1ECD8E740;
          if (os_log_type_enabled((os_log_t)qword_1ECD8E740, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = v38;
            v45 = 0;
            v46 = 2082;
            v47 = "";
            v48 = 2114;
            v49 = v22;
            _os_log_impl(&dword_18F5B3000, v28, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid RemoteUsageDictionary. Found NSArray value where index 1 is not a timestamp\", \"arr[1]\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_1ECD8E748 != -1)
              dispatch_once(&qword_1ECD8E748, &unk_1E2990B50);
          }
          v29 = qword_1ECD8E740;
          if (os_signpost_enabled((os_log_t)qword_1ECD8E740))
          {
            *(_DWORD *)buf = v38;
            v45 = 0;
            v46 = 2082;
            v47 = "";
            v48 = 2114;
            v49 = v22;
            _os_signpost_emit_with_name_impl(&dword_18F5B3000, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid RemoteUsageDictionary. Found NSArray value where index 1 is not a timestamp", "{\"msg%{public}.0s\":\"Invalid RemoteUsageDictionary. Found NSArray value where index 1 is not a timestamp\", \"arr[1]\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
        v12 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v26 = objc_msgSend_objectForKeyedSubscript_(a1, v24, v15, v25);
          objc_msgSend_setObject_forKeyedSubscript_(v39, v27, v26, v15);
        }
        else
        {
          if (qword_1ECD8E748 != -1)
            dispatch_once(&qword_1ECD8E748, &unk_1E2990B50);
          v30 = qword_1ECD8E740;
          if (os_log_type_enabled((os_log_t)qword_1ECD8E740, OS_LOG_TYPE_FAULT))
          {
            v33 = objc_msgSend_objectForKeyedSubscript_(a1, v31, v15, v32);
            *(_DWORD *)buf = v38;
            v45 = 0;
            v46 = 2082;
            v47 = "";
            v48 = 2114;
            v49 = v33;
            _os_log_impl(&dword_18F5B3000, v30, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid RemoteUsageDictionary. Found non-NSArray value which is not a timestamp\", \"value\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_1ECD8E748 != -1)
              dispatch_once(&qword_1ECD8E748, &unk_1E2990B50);
          }
          v34 = qword_1ECD8E740;
          if (os_signpost_enabled((os_log_t)qword_1ECD8E740))
          {
            v35 = objc_msgSend_objectForKeyedSubscript_(a1, v8, v15, v9);
            *(_DWORD *)buf = v38;
            v45 = 0;
            v46 = 2082;
            v47 = "";
            v48 = 2114;
            v49 = v35;
            _os_signpost_emit_with_name_impl(&dword_18F5B3000, v34, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid RemoteUsageDictionary. Found non-NSArray value which is not a timestamp", "{\"msg%{public}.0s\":\"Invalid RemoteUsageDictionary. Found non-NSArray value which is not a timestamp\", \"value\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
      }
      ++v14;
    }
    while (v11 != v14);
    v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v40, (uint64_t)v50, 16);
    v11 = v36;
  }
  while (v36);
  if ((v12 & 1) != 0)
    return v39;
LABEL_31:

  return a1;
}

uint64_t sub_18F7068E8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  char v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  int v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  id v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v4 = (int)a2;
  v6 = sub_18F7062AC(a1, a2, a3, a4);
  v10 = 60.0;
  if (v4 != 2)
    v10 = 0.0;
  if (v4 == 1)
    v10 = 10.0;
  if ((v6 & 6) != 0)
    v11 = v10;
  else
    v11 = -1.0;
  v12 = sub_18F70634C(a1, v7, v11, v8, v9);
  v15 = (void *)objc_msgSend_objectForKeyedSubscript_(a1, v13, 0x1E29976E8, v14);
  v16 = sub_18F706480(v15);
  if (v16)
    LODWORD(v16) = sub_18F70634C(v16, v17, v11, v18, v19);
  if (((v16 | v12) & 0x240) != 0)
    return 2;
  if (!(v16 | v12))
    return 0;
  v21 = (void *)objc_msgSend_objectForKeyedSubscript_(a1, v17, 0x1E2997208, v19);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v25 = objc_msgSend_intValue(v21, v22, v23, v24);
  else
    v25 = 0;
  v26 = (void *)objc_msgSend_objectForKeyedSubscript_(a1, v22, 0x1E29976C8, v24);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v30 = objc_msgSend_BOOLValue(v26, v27, v28, v29) ^ 1;
  else
    v30 = 1;
  if (v25)
    return 1;
  else
    return v30;
}

BOOL sub_18F706A28(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  __CFString *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;

  v5 = (void *)objc_msgSend_objectForKeyedSubscript_(a1, a2, 0x1E29976E8, a4);
  v6 = sub_18F706480(v5);
  if (objc_msgSend_objectForKey_(a1, v7, (uint64_t)CFSTR("FenceTimeStarted"), v8)
    || objc_msgSend_objectForKeyedSubscript_(v6, v9, (uint64_t)CFSTR("FenceTimeStarted"), v10))
  {
    return 1;
  }
  v14 = 0;
  do
  {
    v15 = v14;
    if (v14 == 11)
      break;
    v16 = off_1E2992C30[v14 + 1];
    if (objc_msgSend_objectForKey_(a1, v11, (uint64_t)v16, v12))
      break;
    v19 = objc_msgSend_objectForKeyedSubscript_(v6, v17, (uint64_t)v16, v18);
    v14 = v15 + 1;
  }
  while (!v19);
  return v15 < 0xB;
}

uint64_t sub_18F706AE4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (void *)objc_msgSend_objectForKey_(a1, a2, (uint64_t)CFSTR("SupportedAuthorizationMask"), a4);
  if (v4)
    return objc_msgSend_integerValue(v4, v5, v6, v7) & 7;
  else
    return 5;
}

BOOL sub_18F706B14(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (void *)objc_msgSend_objectForKey_(a1, a2, (uint64_t)CFSTR("CorrectiveCompensationEnabled"), a4);
  return objc_msgSend_integerValue(v4, v5, v6, v7) == 2;
}

void *sub_18F706B3C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *result;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  result = (void *)objc_msgSend_objectForKey_(a1, a2, (uint64_t)CFSTR("IncidentalUseMode"), a4);
  if (result)
  {
    result = (void *)objc_msgSend_integerValue(result, v5, v6, v7);
    if ((unint64_t)result >= 4)
      return 0;
  }
  return result;
}

uint64_t sub_18F706B68(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_objectForKey_(a1, a2, (uint64_t)CFSTR("InterestZones"), a4);
}

void *sub_18F706B74(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *result;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  result = (void *)objc_msgSend_objectForKey_(a1, a2, (uint64_t)CFSTR("Relevant"), a4);
  if (result)
    return (void *)objc_msgSend_BOOLValue(result, v5, v6, v7);
  return result;
}

uint64_t sub_18F706B9C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (void *)objc_msgSend_objectForKey_(a1, a2, (uint64_t)CFSTR("BackgroundIndicatorEnabled"), a4);
  if (v4)
    return objc_msgSend_BOOLValue(v4, v5, v6, v7);
  else
    return 1;
}

uint64_t sub_18F706BC8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = sub_18F706C2C(a1, a2, a3, a4);
  v8 = (void *)objc_msgSend_objectForKeyedSubscript_(a1, v6, 0x1E29976E8, v7);
  v9 = sub_18F706480(v8);
  if (v9)
  {
    v13 = sub_18F706C2C(v9, v10, v11, v12);
    if (v5)
      return MEMORY[0x1E0DE7D20](v5, sel_laterDate_, v13, v12);
  }
  else
  {
    v13 = 0;
    if (v5)
      return MEMORY[0x1E0DE7D20](v5, sel_laterDate_, v13, v12);
  }
  return v13;
}

uint64_t sub_18F706C2C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  char v6;
  double v7;
  unint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  BOOL v14;
  BOOL v15;
  double v16;
  double v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;

  v5 = 0;
  v6 = 0;
  v7 = 2.22507386e-308;
LABEL_2:
  v8 = v5;
  do
  {
    if ((v8 | 8) != 0xA)
    {
      v9 = (void *)objc_msgSend_objectForKey_(a1, a2, (uint64_t)off_1E2992C90[v8], a4);
      v12 = objc_msgSend_objectForKey_(a1, v10, *(uint64_t *)((char *)off_1E2992C90 + ((8 * v8) | 8)), v11);
      v13 = (void *)v12;
      if (v9)
        v14 = v12 == 0;
      else
        v14 = 1;
      if (!v14)
      {
        objc_msgSend_doubleValue(v9, a2, a3, a4);
        v17 = v16;
        objc_msgSend_doubleValue(v13, v18, v19, v20);
        if (v17 > v21)
          return objc_msgSend_date(MEMORY[0x1E0C99D68], a2, a3, a4);
LABEL_15:
        objc_msgSend_doubleValue(v13, a2, a3, a4);
        if (v22 > v7)
          v7 = v22;
        v5 = v8 + 2;
        v6 = 1;
        if (v8 > 0x11)
          return objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(MEMORY[0x1E0C99D68], a2, a3, a4, v7);
        goto LABEL_2;
      }
      if (v9)
        return objc_msgSend_date(MEMORY[0x1E0C99D68], a2, a3, a4);
      if (v12)
        goto LABEL_15;
    }
    v15 = v8 > 0x11;
    v8 += 2;
  }
  while (!v15);
  if ((v6 & 1) != 0)
    return objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(MEMORY[0x1E0C99D68], a2, a3, a4, v7);
  return 0;
}

uint64_t sub_18F706D64(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const __CFString *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t result;
  __CFString *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = (int)a2;
  v6 = objc_msgSend_objectForKey_(a1, a2, (uint64_t)CFSTR("BundleId"), a4);
  v9 = (const __CFString *)objc_msgSend_objectForKey_(a1, v7, (uint64_t)CFSTR("BundlePath"), v8);
  if (v6)
  {
    if (!v4)
      return 1;
    if (objc_msgSend_objectForKey_(a1, v10, (uint64_t)CFSTR("Registered"), v11))
      return 1;
    if (objc_msgSend_objectForKey_(a1, v12, (uint64_t)CFSTR("Authorized"), v13))
      return 1;
    result = objc_msgSend_objectForKey_(a1, v14, (uint64_t)CFSTR("Authorization"), v15);
    if (result)
      return 1;
  }
  else
  {
    v17 = (__CFString *)v9;
    if (v9)
    {
      if (sub_18F5F6020(v9))
      {
        return 4;
      }
      else if (sub_18F5F6144(v17))
      {
        return 5;
      }
      else if (sub_18F5F6198(v17))
      {
        return 7;
      }
      else if (sub_18F5F5E48(v17, v18, v19, v20))
      {
        return 8;
      }
      else if (sub_18F5F5DE4(v17, v21, v22, v23))
      {
        return 3;
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

os_log_t sub_18F706E6C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1ECD8E740 = (uint64_t)result;
  return result;
}

CFMutableDictionaryRef sub_18F706F48()
{
  uint64_t v0;
  CFMutableDictionaryRef result;

  v0 = operator new();
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  sub_18F5BB62C(v0 + 48, "CLBundleKeyValueCache", 1, 1);
  *(_QWORD *)v0 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(v0 + 8) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(v0 + 16) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(v0 + 24) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(v0 + 32) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  result = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(v0 + 40) = result;
  qword_1EE172AB0 = v0;
  return result;
}

void sub_18F707074(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194002D30](v1, 0xA0C4046E95B3FLL);
  _Unwind_Resume(a1);
}

BOOL sub_18F7070A8(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;
  const __CFBoolean *v5;
  const __CFBoolean *v6;
  _BOOL8 v7;

  v4 = a1 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v5 = (const __CFBoolean *)sub_18F707160(*(CFMutableDictionaryRef *)a1, a2, CFSTR("CLSystemService"));
  v6 = v5;
  if (v5)
  {
    v7 = CFBooleanGetValue(v5) != 0;
    CFRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v7;
}

void sub_18F70714C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_18F707160(CFMutableDictionaryRef theDict, const __CFString *key, const __CFString *a3)
{
  void *v6;
  void *v7;
  CFTypeID v8;
  void *value;

  value = 0;
  if (!key)
    goto LABEL_10;
  if (CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value))
  {
    if (value)
    {
      CFRetain(value);
      goto LABEL_7;
    }
LABEL_10:
    v7 = (void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(theDict, key, (const void *)*MEMORY[0x1E0C9AE40]);
    return v7;
  }
  v6 = (void *)sub_18F5F5D44(key, a3);
  value = v6;
  if (!v6)
    goto LABEL_10;
  CFDictionarySetValue(theDict, key, v6);
LABEL_7:
  v7 = value;
  if (!value)
    goto LABEL_10;
  v8 = CFGetTypeID(value);
  if (v8 != CFBooleanGetTypeID())
  {
    CFRelease(v7);
    goto LABEL_10;
  }
  return v7;
}

BOOL sub_18F70722C(uint64_t a1, const __CFString *a2)
{
  uint64_t v3;
  const __CFBoolean *v4;
  const __CFBoolean *v5;
  _BOOL8 v6;

  v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v4 = (const __CFBoolean *)sub_18F707160(*(CFMutableDictionaryRef *)(v3 - 32), a2, CFSTR("CLIsFindMyiPhone"));
  v5 = v4;
  if (v4)
  {
    v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return v6;
}

void sub_18F7072CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_18F7072E0(uint64_t a1, const __CFString *a2)
{
  uint64_t v3;
  const __CFBoolean *v4;
  const __CFBoolean *v5;
  _BOOL8 v6;

  v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v4 = (const __CFBoolean *)sub_18F707160(*(CFMutableDictionaryRef *)(v3 - 24), a2, CFSTR("CLIsCoreRoutine"));
  v5 = v4;
  if (v4)
  {
    v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return v6;
}

void sub_18F707380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_18F707394(uint64_t a1, const __CFString *a2)
{
  uint64_t v3;
  const __CFBoolean *v4;
  const __CFBoolean *v5;
  _BOOL8 v6;

  v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v4 = (const __CFBoolean *)sub_18F707160(*(CFMutableDictionaryRef *)(v3 - 8), a2, CFSTR("CLEmergencyService"));
  v5 = v4;
  if (v4)
  {
    v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return v6;
}

void sub_18F707434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F5CE240((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F70A784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18F70A7DC(uint64_t a1, CLConnectionMessage **a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *Dictionary;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  NSSet *v32;
  uint64_t v33;
  uint64_t DictionaryOfClasses;
  const char *v35;
  uint64_t v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    if (objc_msgSend__isKnownNonActionableMessage_(CLMiLoConnectionInternal, (const char *)a2, (uint64_t)*a2, a4))
    {
      if (qword_1EE1720B8 != -1)
        dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
      v6 = qword_1EE1720C0;
      if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEFAULT))
      {
        v7 = CLConnectionMessage::name(*a2);
        if (*(char *)(v7 + 23) >= 0)
          v8 = v7;
        else
          v8 = *(_QWORD *)v7;
        Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
        v13 = (void *)objc_msgSend_allKeys(Dictionary, v10, v11, v12);
        v16 = (void *)objc_msgSend_componentsJoinedByString_(v13, v14, (uint64_t)CFSTR(","), v15);
        *(_DWORD *)buf = 68289538;
        v38 = 0;
        v39 = 2082;
        v40 = "";
        v41 = 2082;
        v42 = v8;
        v43 = 2082;
        v44 = objc_msgSend_UTF8String(v16, v17, v18, v19);
        _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"DefaultMessageHandler, known non-actionable message\", \"MessageName\":%{public, location:escape_only}s, \"DictionaryKeys\":%{public, location:escape_only}s}", buf, 0x26u);
      }
    }
    else
    {
      if (qword_1EE1720B8 != -1)
        dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
      v22 = qword_1EE1720C0;
      if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEFAULT))
      {
        v23 = CLConnectionMessage::name(*a2);
        if (*(char *)(v23 + 23) >= 0)
          v24 = v23;
        else
          v24 = *(_QWORD *)v23;
        *(_DWORD *)buf = 68289282;
        v38 = 0;
        v39 = 2082;
        v40 = "";
        v41 = 2082;
        v42 = v24;
        _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"DefaultMessageHandler, message received\", \"MessageName\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      v25 = (void *)MEMORY[0x1E0C99E60];
      v26 = objc_opt_class();
      v27 = objc_opt_class();
      v28 = objc_opt_class();
      v29 = objc_opt_class();
      v32 = (NSSet *)objc_msgSend_setWithObjects_(v25, v30, v26, v31, v27, v28, v29, 0);
      if (*a2)
      {
        DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v32);
        objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v35, DictionaryOfClasses, v36);
      }
      else
      {
        objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), (const char *)v32, 0, v33);
      }
    }
  }
  else
  {
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
    v20 = qword_1EE1720C0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_ERROR, "DefaultMessageHandler, received null response", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE1720B8 != -1)
        dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
      v21 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "-[CLMiLoConnectionInternal initWithInfo:delegate:delegateQueue:]_block_invoke", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf)
        free(v21);
    }
  }
}

id sub_18F70AB78(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  CLMiLoConnectionStatus *v8;
  const char *v9;
  uint64_t v10;
  id v11;
  CLMiLoServiceStatus *v12;
  const char *v13;
  id v14;
  id result;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  const __CFString *v26;
  uint8_t buf[1640];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v2 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_ERROR, "CLMiLoConnection, connection to locationd interrupted", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
    v24 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "-[CLMiLoConnectionInternal initWithInfo:delegate:delegateQueue:]_block_invoke", "CoreLocation: %s\n", v24);
    if (v24 != (char *)buf)
      free(v24);
  }
  v4 = (void *)MEMORY[0x1E0CB35C8];
  v25 = *MEMORY[0x1E0CB2D50];
  v26 = CFSTR("Internal error");
  v5 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v3, (uint64_t)&v26, (uint64_t)&v25, 1);
  v7 = objc_msgSend_errorWithDomain_code_userInfo_(v4, v6, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v5);
  v8 = [CLMiLoConnectionStatus alloc];
  v11 = (id)objc_msgSend_initWithConnectionState_(v8, v9, 0, v10);
  v12 = [CLMiLoServiceStatus alloc];
  v14 = (id)objc_msgSend_initWithServiceState_suspendReasons_serviceDescriptor_currentLocationOfInterestUuid_currentLocationOfInterestType_error_serviceQualityInfo_places_metaInfo_(v12, v13, 2, 0, 0, 0, 0, v7, 0, 0, 0);
  result = objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    v18 = result;
    objc_msgSend__notifyClientDidUpdateMiLoConnectionStatus_(result, v16, (uint64_t)v11, v17);
    objc_msgSend__notifyClientDidUpdateServiceStatus_(v18, v19, (uint64_t)v14, v20);
    return (id)objc_msgSend__invalidateLocationClient(v18, v21, v22, v23);
  }
  return result;
}

const __CFString *sub_18F70ADE4(unint64_t a1)
{
  if (a1 > 0x24)
    return CFSTR("No error");
  else
    return off_1E2992DF8[a1];
}

void sub_18F70B33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F5D6004((uint64_t)&a9);
  sub_18F5D6004(v9 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_18F70B378(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  NSSet *v13;
  uint64_t DictionaryOfClasses;
  const char *v15;
  uint64_t v16;
  char *v18;
  uint8_t buf[1640];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEFAULT, "received service event callback kCLConnectionMessageMiLoServiceEvent", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
    v18 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLMiLoConnectionInternal _registerForMiLoServiceEvents]_block_invoke", "CoreLocation: %s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  v13 = (NSSet *)objc_msgSend_setWithObjects_(v5, v11, v6, v12, v7, v8, v9, v10, 0);
  DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v13);
  return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v15, DictionaryOfClasses, v16);
}

void sub_18F70B7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_18F5D6004((uint64_t)&a10);
  sub_18F5D6004((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_18F70B91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F70B940(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  char *v14;
  uint8_t buf[1640];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEFAULT, "received callback for kCLConnectionMessageMiLoPredictionEventUpdate", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
    v14 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLMiLoConnectionInternal _setHandlerForMiLoPredictionEvents]_block_invoke", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
  return objc_msgSend__handlePredictionUpdateEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
}

void sub_18F70BC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F70BD84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F70BDA8(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  char *v14;
  uint8_t buf[1640];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEFAULT, "received callback for kCLConnectionMessageMiLoServiceDebugResponse", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
    v14 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLMiLoConnectionInternal _registerForMiLoDebugResponseEvents]_block_invoke", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
  return objc_msgSend__handleDebugResponseEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
}

void sub_18F70C088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F70C1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F70C210(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  char *v14;
  uint8_t buf[1640];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEFAULT, "received callback for kCLConnectionMessageMiLoGenericEventResponse", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
    v14 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLMiLoConnectionInternal _registerForMiLoGenericEvents]_block_invoke", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
  return objc_msgSend__handleGenericEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
}

void sub_18F70C4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F70C714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F70C738(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  char *v14;
  uint8_t buf[1640];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEFAULT, "received callback for kCLConnectionMessageMiLoConnectionStatusEvent", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
    v14 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLMiLoConnectionInternal _registerForMiLoConnectionStatusEvents]_block_invoke", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
  return objc_msgSend__handleMiLoConnectionStatusEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
}

void sub_18F70CA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F70CAB4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), sel_miLoConnection_didUpdateMiLoConnectionStatus_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(a1 + 40));
}

uint64_t sub_18F70CB38(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), sel_miLoConnection_didUpdateServiceStatus_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(a1 + 40));
}

uint64_t sub_18F70CBBC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), sel_miLoConnection_didCreateServiceWithServiceIdentifier_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(a1 + 40));
}

uint64_t sub_18F70CC40(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), sel_miLoConnection_createServiceDidFailWithError_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(a1 + 40));
}

uint64_t sub_18F70CCD4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), sel_miLoConnection_deleteServiceDidFailForServiceWithIdentifier_withError_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(a1 + 40));
}

uint64_t sub_18F70CD60(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), sel_miLoConnection_didDeleteServiceWithServiceIdentifier_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(a1 + 40));
}

uint64_t sub_18F70CDE4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), sel_miLoConnection_didFindMyServicesWithServiceDescriptors_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(a1 + 40));
}

uint64_t sub_18F70CE78(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), sel_miLoConnection_connectServiceDidFailWithServiceIdentifier_withError_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(a1 + 40));
}

uint64_t sub_18F70CF04(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), sel_miLoConnection_didUpdatePrediction_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(a1 + 40));
}

uint64_t sub_18F70CF88(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), sel_miLoConnection_queryServiceDidFailWithError_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(a1 + 40));
}

uint64_t sub_18F70D01C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), sel_miLoConnection_disconnectServiceDidFailWithServiceIdentifier_withError_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(a1 + 40));
}

uint64_t sub_18F70D0B8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), sel_miLoConnection_didCompleteClientRequest_withError_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(a1 + 40));
}

uint64_t sub_18F70D144(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(_QWORD *)(v5 + 40);
  v8 = (void *)objc_msgSend_exportDatabaseTablesResult(*(void **)(a1 + 40), a2, a3, a4);
  v12 = objc_msgSend_exportDir(v8, v9, v10, v11);
  v16 = (void *)objc_msgSend_exportDatabaseTablesResult(*(void **)(a1 + 40), v13, v14, v15);
  objc_msgSend_fileName(v16, v17, v18, v19);
  v23 = (void *)objc_msgSend_exportDatabaseTablesResult(*(void **)(a1 + 40), v20, v21, v22);
  objc_msgSend_sandboxExtensionTok(v23, v24, v25, v26);
  return MEMORY[0x1E0DE7D20](v6, sel_miLoConnection_didExportMiLoDatabaseWithExportDir_withFileName_withSandboxExtensionToken_, v7, v12);
}

uint64_t sub_18F70D22C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(_QWORD *)(v5 + 40);
  v8 = objc_msgSend_eventType(*(void **)(a1 + 40), a2, a3, a4);
  objc_msgSend_genericEventDescription(*(void **)(a1 + 40), v9, v10, v11);
  objc_msgSend_error(*(void **)(a1 + 40), v12, v13, v14);
  return MEMORY[0x1E0DE7D20](v6, sel_miLoConnection_didGetGenericEventNotificationWithEventType_withDescription_withError_, v7, v8);
}

uint64_t sub_18F70D308(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), sel_miLoConnection_queryMiLoConnectionStatusDidFailWithError_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(a1 + 40));
}

uint64_t sub_18F70D38C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), sel_miLoConnection_didCompleteObservationWithMetaInformation_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(a1 + 40));
}

void sub_18F710D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004(v6 - 96);
  _Unwind_Resume(a1);
}

uint64_t sub_18F710D54(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v26 = 0;
    v27 = 2082;
    v28 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for creating a service\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
    if (DictionaryOfClasses)
      return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
  }
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v14 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v26 = 0;
    v27 = 2082;
    v28 = "";
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to create a service, empty response\"}", buf, 0x12u);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  }
  v15 = qword_1EE1720C0;
  if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
  {
    *(_DWORD *)buf = 68289026;
    v26 = 0;
    v27 = 2082;
    v28 = "";
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to create a service, empty response", "{\"msg%{public}.0s\":\"SPI request, failed to create a service, empty response\"}", buf, 0x12u);
  }
  v17 = (void *)MEMORY[0x1E0CB35C8];
  v23 = *MEMORY[0x1E0CB2D50];
  v24 = CFSTR("Internal error");
  v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v16, (uint64_t)&v24, (uint64_t)&v23, 1);
  v20 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v19, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v18);
  return objc_msgSend__notifyClientCreateServiceDidFailWithError_(*(void **)(a1 + 32), v21, v20, v22);
}

void sub_18F711360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004(v8 - 96);
  _Unwind_Resume(a1);
}

uint64_t sub_18F711384(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const __CFString *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for deleting a service\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
    if (DictionaryOfClasses)
      return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
  }
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v14 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to delete a service with empty response\"}", buf, 0x12u);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  }
  v15 = qword_1EE1720C0;
  if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to delete a service with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to delete a service with empty response\"}", buf, 0x12u);
  }
  v17 = (void *)MEMORY[0x1E0CB35C8];
  v22 = *MEMORY[0x1E0CB2D50];
  v23 = CFSTR("Internal error");
  v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v16, (uint64_t)&v23, (uint64_t)&v22, 1);
  v20 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v19, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v18);
  return objc_msgSend__notifyClientDeleteServiceDidFailWithServiceIdentifier_withError_(*(void **)(a1 + 32), v21, *(_QWORD *)(a1 + 40), v20);
}

void sub_18F711998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F7119E8(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v26 = 0;
    v27 = 2082;
    v28 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for query my services\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
    if (DictionaryOfClasses)
      return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
  }
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v14 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v26 = 0;
    v27 = 2082;
    v28 = "";
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to query my services with empty response\"}", buf, 0x12u);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  }
  v15 = qword_1EE1720C0;
  if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
  {
    *(_DWORD *)buf = 68289026;
    v26 = 0;
    v27 = 2082;
    v28 = "";
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to query my services with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to query my services with empty response\"}", buf, 0x12u);
  }
  v17 = (void *)MEMORY[0x1E0CB35C8];
  v23 = *MEMORY[0x1E0CB2D50];
  v24 = CFSTR("Internal error");
  v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v16, (uint64_t)&v24, (uint64_t)&v23, 1);
  v20 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v19, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v18);
  return objc_msgSend__notifyClientQueryServiceDidFailWithError_(*(void **)(a1 + 32), v21, v20, v22);
}

void sub_18F712094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F7120B8(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  NSObject *v14;
  const char *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  const __CFString *v25;
  uint8_t buf[1640];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEFAULT, "received response message for query MiLo connection status", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
    v22 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "-[CLMiLoConnectionInternal _queryMiLoConnectionStatus]_block_invoke", "CoreLocation: %s\n", v22);
    if (v22 != (char *)buf)
      free(v22);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
    if (DictionaryOfClasses)
      return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
  }
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v14 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "SPI request, failed to query MiLo connection status with empty response", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
    v23 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "-[CLMiLoConnectionInternal _queryMiLoConnectionStatus]_block_invoke", "CoreLocation: %s\n", v23);
    if (v23 != (char *)buf)
      free(v23);
  }
  v16 = (void *)MEMORY[0x1E0CB35C8];
  v24 = *MEMORY[0x1E0CB2D50];
  v25 = CFSTR("Internal error");
  v17 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v15, (uint64_t)&v25, (uint64_t)&v24, 1);
  v19 = objc_msgSend_errorWithDomain_code_userInfo_(v16, v18, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v17);
  return objc_msgSend__notifyClientQueryMiLoConnectionStatusDidFailWithError_(*(void **)(a1 + 32), v20, v19, v21);
}

void sub_18F7129A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004(v7 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_18F7129C8(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v25;
  NSObject *v26;
  const char *v27;
  void *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const __CFString *v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  const char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289026;
    v36 = 0;
    v37 = 2082;
    v38 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"received response message for connect to a service\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2 && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) != 0)
  {
    v13 = (uint64_t)DictionaryOfClasses;
    v14 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, 0x1E2997748, v12);
    if ((objc_msgSend_isEqualToNumber_(v14, v15, (uint64_t)&unk_1E29B5C38, v16) & 1) == 0)
    {
      if (qword_1EE1720B8 != -1)
        dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
      v19 = qword_1EE1720C0;
      if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289026;
        v36 = 0;
        v37 = 2082;
        v38 = "";
        _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"connect to service failed, set connectedServiceIdentifier to nil\"}", buf, 0x12u);
      }

      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = 0;
      if (qword_1EE1720B8 != -1)
        dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
      v20 = qword_1EE1720C0;
      if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289026;
        v36 = 0;
        v37 = 2082;
        v38 = "";
        _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"connect to service failed, unset handler for prediction updates\"}", buf, 0x12u);
      }
      objc_msgSend__unsetHandlerForMiLoPredictionEvents(*(void **)(a1 + 32), v21, v22, v23);
    }
    return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v17, v13, v18);
  }
  else
  {
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
    v25 = qword_1EE1720C0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v36 = 0;
      v37 = 2082;
      v38 = "";
      _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to connect to services with empty response\"}", buf, 0x12u);
      if (qword_1EE1720B8 != -1)
        dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
    }
    v26 = qword_1EE1720C0;
    if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
    {
      *(_DWORD *)buf = 68289026;
      v36 = 0;
      v37 = 2082;
      v38 = "";
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to connect to services with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to connect to services with empty response\"}", buf, 0x12u);
    }
    v28 = (void *)MEMORY[0x1E0CB35C8];
    v33 = *MEMORY[0x1E0CB2D50];
    v34 = CFSTR("Internal error");
    v29 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v27, (uint64_t)&v34, (uint64_t)&v33, 1);
    v31 = objc_msgSend_errorWithDomain_code_userInfo_(v28, v30, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v29);
    return objc_msgSend__notifyClientConnectServiceDidFailWithServiceIdentifier_withError_(*(void **)(a1 + 32), v32, *(_QWORD *)(a1 + 40), v31);
  }
}

void sub_18F713454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F7134AC(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v28;
  NSObject *v29;
  const char *v30;
  void *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const __CFString *v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  const char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289026;
    v39 = 0;
    v40 = 2082;
    v41 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"received response message for disconnecting to a service\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2 && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) != 0)
  {
    v13 = (uint64_t)DictionaryOfClasses;
    v14 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, 0x1E2997748, v12);
    if ((objc_msgSend_isEqualToNumber_(v14, v15, (uint64_t)&unk_1E29B5C38, v16) & 1) == 0)
    {
      if (qword_1EE1720B8 != -1)
        dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
      v19 = qword_1EE1720C0;
      if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289026;
        v39 = 0;
        v40 = 2082;
        v41 = "";
        _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"disconnect to service failed, recover connectedServiceIdentifier\"}", buf, 0x12u);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = objc_msgSend_copy(*(void **)(a1 + 40), v20, v21, v22);
      if (qword_1EE1720B8 != -1)
        dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
      v23 = qword_1EE1720C0;
      if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289026;
        v39 = 0;
        v40 = 2082;
        v41 = "";
        _os_log_impl(&dword_18F5B3000, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"disconnect to service failed, set handler for prediction updates\"}", buf, 0x12u);
      }
      objc_msgSend__setHandlerForMiLoPredictionEvents(*(void **)(a1 + 32), v24, v25, v26);
    }
    return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v17, v13, v18);
  }
  else
  {
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
    v28 = qword_1EE1720C0;
    if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v39 = 0;
      v40 = 2082;
      v41 = "";
      _os_log_impl(&dword_18F5B3000, v28, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to disconnect service with empty response\"}", buf, 0x12u);
      if (qword_1EE1720B8 != -1)
        dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
    }
    v29 = qword_1EE1720C0;
    if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
    {
      *(_DWORD *)buf = 68289026;
      v39 = 0;
      v40 = 2082;
      v41 = "";
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to disconnect service with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to disconnect service with empty response\"}", buf, 0x12u);
    }
    v31 = (void *)MEMORY[0x1E0CB35C8];
    v36 = *MEMORY[0x1E0CB2D50];
    v37 = CFSTR("Internal error");
    v32 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v30, (uint64_t)&v37, (uint64_t)&v36, 1);
    v34 = objc_msgSend_errorWithDomain_code_userInfo_(v31, v33, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v32);
    return objc_msgSend__notifyClientDisconnectServiceDidFailWithError_serviceIdentifier_(*(void **)(a1 + 32), v35, v34, *(_QWORD *)(a1 + 40));
  }
}

void sub_18F713DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F713E24(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const __CFString *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for requesting a MiLo prediction\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
    if (DictionaryOfClasses)
      return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
  }
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v14 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to request a single shot prediction with empty response\"}", buf, 0x12u);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  }
  v15 = qword_1EE1720C0;
  if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to request a single shot prediction with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to request a single shot prediction with empty response\"}", buf, 0x12u);
  }
  v17 = (void *)MEMORY[0x1E0CB35C8];
  v22 = *MEMORY[0x1E0CB2D50];
  v23 = CFSTR("Internal error");
  v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v16, (uint64_t)&v23, (uint64_t)&v22, 1);
  v20 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v19, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v18);
  return objc_msgSend__notifyClientDidCompleteClientRequest_withError_(*(void **)(a1 + 32), v21, *(_QWORD *)(a1 + 40), v20);
}

void sub_18F714630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F714680(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const __CFString *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for requesting an observation\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
    if (DictionaryOfClasses)
      return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
  }
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v14 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to request observation with empty response\"}", buf, 0x12u);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  }
  v15 = qword_1EE1720C0;
  if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to request observation with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to request observation with empty response\"}", buf, 0x12u);
  }
  v17 = (void *)MEMORY[0x1E0CB35C8];
  v22 = *MEMORY[0x1E0CB2D50];
  v23 = CFSTR("Internal error");
  v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v16, (uint64_t)&v23, (uint64_t)&v22, 1);
  v20 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v19, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v18);
  return objc_msgSend__notifyClientDidCompleteClientRequest_withError_(*(void **)(a1 + 32), v21, *(_QWORD *)(a1 + 40), v20);
}

void sub_18F714E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F714ED0(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const __CFString *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for labeling an observation\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
    if (DictionaryOfClasses)
      return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
  }
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v14 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to label an observation with empty response\"}", buf, 0x12u);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  }
  v15 = qword_1EE1720C0;
  if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to label an observation with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to label an observation with empty response\"}", buf, 0x12u);
  }
  v17 = (void *)MEMORY[0x1E0CB35C8];
  v22 = *MEMORY[0x1E0CB2D50];
  v23 = CFSTR("Internal error");
  v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v16, (uint64_t)&v23, (uint64_t)&v22, 1);
  v20 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v19, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v18);
  return objc_msgSend__notifyClientDidCompleteClientRequest_withError_(*(void **)(a1 + 32), v21, *(_QWORD *)(a1 + 40), v20);
}

void sub_18F7156E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F715734(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const __CFString *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for labeling observations between dates\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
    if (DictionaryOfClasses)
      return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
  }
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v14 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to label observations between dates with empty response\"}", buf, 0x12u);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  }
  v15 = qword_1EE1720C0;
  if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to label observations between dates with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to label observations between dates with empty response\"}", buf, 0x12u);
  }
  v17 = (void *)MEMORY[0x1E0CB35C8];
  v22 = *MEMORY[0x1E0CB2D50];
  v23 = CFSTR("Internal error");
  v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v16, (uint64_t)&v23, (uint64_t)&v22, 1);
  v20 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v19, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v18);
  return objc_msgSend__notifyClientDidCompleteClientRequest_withError_(*(void **)(a1 + 32), v21, *(_QWORD *)(a1 + 40), v20);
}

void sub_18F715F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F715F78(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const __CFString *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for removing labels\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
    if (DictionaryOfClasses)
      return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
  }
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v14 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to  remove labels with empty response\"}", buf, 0x12u);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  }
  v15 = qword_1EE1720C0;
  if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to  remove labels with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to  remove labels with empty response\"}", buf, 0x12u);
  }
  v17 = (void *)MEMORY[0x1E0CB35C8];
  v22 = *MEMORY[0x1E0CB2D50];
  v23 = CFSTR("Internal error");
  v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v16, (uint64_t)&v23, (uint64_t)&v22, 1);
  v20 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v19, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v18);
  return objc_msgSend__notifyClientDidCompleteClientRequest_withError_(*(void **)(a1 + 32), v21, *(_QWORD *)(a1 + 40), v20);
}

void sub_18F716734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004(v7 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_18F716758(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const __CFString *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for removing a custom LOI\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
    if (DictionaryOfClasses)
      return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
  }
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v14 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to  remove a custom LOI with empty response\"}", buf, 0x12u);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  }
  v15 = qword_1EE1720C0;
  if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to  remove a custom LOI with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to  remove a custom LOI with empty response\"}", buf, 0x12u);
  }
  v17 = (void *)MEMORY[0x1E0CB35C8];
  v22 = *MEMORY[0x1E0CB2D50];
  v23 = CFSTR("Internal error");
  v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v16, (uint64_t)&v23, (uint64_t)&v22, 1);
  v20 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v19, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v18);
  return objc_msgSend__notifyClientDidCompleteClientRequest_withError_(*(void **)(a1 + 32), v21, *(_QWORD *)(a1 + 40), v20);
}

void sub_18F716F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004(v7 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_18F716F38(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const __CFString *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for start updating MicroLocation\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
    if (DictionaryOfClasses)
      return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
  }
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v14 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to tart updating MicroLocation with empty response\"}", buf, 0x12u);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  }
  v15 = qword_1EE1720C0;
  if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to tart updating MicroLocation with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to tart updating MicroLocation with empty response\"}", buf, 0x12u);
  }
  v17 = (void *)MEMORY[0x1E0CB35C8];
  v22 = *MEMORY[0x1E0CB2D50];
  v23 = CFSTR("Internal error");
  v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v16, (uint64_t)&v23, (uint64_t)&v22, 1);
  v20 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v19, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v18);
  return objc_msgSend__notifyClientDidCompleteClientRequest_withError_(*(void **)(a1 + 32), v21, *(_QWORD *)(a1 + 40), v20);
}

void sub_18F7176E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004(v8 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_18F717704(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const __CFString *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for stop updating MicroLocation\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
    if (DictionaryOfClasses)
      return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
  }
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v14 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to stop updating MicroLocation with empty response\"}", buf, 0x12u);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  }
  v15 = qword_1EE1720C0;
  if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to stop updating MicroLocation with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to stop updating MicroLocation with empty response\"}", buf, 0x12u);
  }
  v17 = (void *)MEMORY[0x1E0CB35C8];
  v22 = *MEMORY[0x1E0CB2D50];
  v23 = CFSTR("Internal error");
  v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v16, (uint64_t)&v23, (uint64_t)&v22, 1);
  v20 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v19, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v18);
  return objc_msgSend__notifyClientDidCompleteClientRequest_withError_(*(void **)(a1 + 32), v21, *(_QWORD *)(a1 + 40), v20);
}

void sub_18F717EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004(v7 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_18F717ED4(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const __CFString *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for MicroLocation learning\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
    if (DictionaryOfClasses)
      return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
  }
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v14 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to request MicroLocation learning with empty response\"}", buf, 0x12u);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  }
  v15 = qword_1EE1720C0;
  if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to request MicroLocation learning with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to request MicroLocation learning with empty response\"}", buf, 0x12u);
  }
  v17 = (void *)MEMORY[0x1E0CB35C8];
  v22 = *MEMORY[0x1E0CB2D50];
  v23 = CFSTR("Internal error");
  v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v16, (uint64_t)&v23, (uint64_t)&v22, 1);
  v20 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v19, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v18);
  return objc_msgSend__notifyClientDidCompleteClientRequest_withError_(*(void **)(a1 + 32), v21, *(_QWORD *)(a1 + 40), v20);
}

void sub_18F7184E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004(v7 - 96);
  _Unwind_Resume(a1);
}

uint64_t sub_18F718508(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const __CFString *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for MicroLocation purge data\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
    if (DictionaryOfClasses)
      return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
  }
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v14 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to request Purge MiLo Data with empty response\"}", buf, 0x12u);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  }
  v15 = qword_1EE1720C0;
  if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to request Purge MiLo Data with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to request Purge MiLo Data with empty response\"}", buf, 0x12u);
  }
  v17 = (void *)MEMORY[0x1E0CB35C8];
  v22 = *MEMORY[0x1E0CB2D50];
  v23 = CFSTR("Internal error");
  v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v16, (uint64_t)&v23, (uint64_t)&v22, 1);
  v20 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v19, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v18);
  return objc_msgSend__notifyClientDidCompleteClientRequest_withError_(*(void **)(a1 + 32), v21, *(_QWORD *)(a1 + 40), v20);
}

void sub_18F718CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004(v8 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_18F718CD4(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const __CFString *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for Export MiLo Database\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
    if (DictionaryOfClasses)
      return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
  }
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v14 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to request Export MiLo Database with empty response\"}", buf, 0x12u);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  }
  v15 = qword_1EE1720C0;
  if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to request Export MiLo Database with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to request Export MiLo Database with empty response\"}", buf, 0x12u);
  }
  v17 = (void *)MEMORY[0x1E0CB35C8];
  v22 = *MEMORY[0x1E0CB2D50];
  v23 = CFSTR("Internal error");
  v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v16, (uint64_t)&v23, (uint64_t)&v22, 1);
  v20 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v19, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v18);
  return objc_msgSend__notifyClientDidCompleteClientRequest_withError_(*(void **)(a1 + 32), v21, *(_QWORD *)(a1 + 40), v20);
}

void sub_18F71947C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_18F5D6004((uint64_t)va);
  sub_18F5D6004(v8 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_18F7194A0(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSSet *v9;
  uint64_t DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const __CFString *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v4 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for enable MiLo at current location\"}", buf, 0x12u);
  }
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v5, v7, v6, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
    if (DictionaryOfClasses)
      return objc_msgSend__handleDaemonEvent_(*(void **)(a1 + 32), v11, DictionaryOfClasses, v12);
  }
  if (qword_1EE1720B8 != -1)
    dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  v14 = qword_1EE1720C0;
  if (os_log_type_enabled((os_log_t)qword_1EE1720C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to enable MiLo at current location with empty response\"}", buf, 0x12u);
    if (qword_1EE1720B8 != -1)
      dispatch_once(&qword_1EE1720B8, &unk_1E2990B90);
  }
  v15 = qword_1EE1720C0;
  if (os_signpost_enabled((os_log_t)qword_1EE1720C0))
  {
    *(_DWORD *)buf = 68289026;
    v25 = 0;
    v26 = 2082;
    v27 = "";
    _os_signpost_emit_with_name_impl(&dword_18F5B3000, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to enable MiLo at current location with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to enable MiLo at current location with empty response\"}", buf, 0x12u);
  }
  v17 = (void *)MEMORY[0x1E0CB35C8];
  v22 = *MEMORY[0x1E0CB2D50];
  v23 = CFSTR("Internal error");
  v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v16, (uint64_t)&v23, (uint64_t)&v22, 1);
  v20 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v19, (uint64_t)CFSTR("kCLErrorDomainPrivate"), 0, v18);
  return objc_msgSend__notifyClientDidCompleteClientRequest_withError_(*(void **)(a1 + 32), v21, *(_QWORD *)(a1 + 40), v20);
}

uint64_t sub_18F7197F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  objc_msgSend__registerForMiLoServiceEvents(*(void **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4);
  objc_msgSend__registerForMiLoDebugResponseEvents(*(void **)(*(_QWORD *)(a1 + 32) + 8), v5, v6, v7);
  objc_msgSend__registerForMiLoConnectionStatusEvents(*(void **)(*(_QWORD *)(a1 + 32) + 8), v8, v9, v10);
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel__registerForMiLoGenericEvents, v11, v12);
}

uint64_t sub_18F7198C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__teardown, a3, a4);
}

uint64_t sub_18F7199E8(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel__createServiceWithServiceType_locationTypes_, a1[6], a1[5]);
}

uint64_t sub_18F719AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__deleteServiceWithIdentifier_, *(_QWORD *)(a1 + 40), a4);
}

uint64_t sub_18F719B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__queryMyServices, a3, a4);
}

uint64_t sub_18F719B70(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__queryMiLoConnectionStatus(*(void **)(a1 + 32), a2, a3, a4);
}

uint64_t sub_18F719C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__connectServiceWithIdentifier_, *(_QWORD *)(a1 + 40), a4);
}

uint64_t sub_18F719CEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__disconnectServiceWithIdentifier_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
}

uint64_t sub_18F719D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__requestMiLoPredictionWithRequestIdentifier_, *(_QWORD *)(a1 + 40), a4);
}

uint64_t sub_18F719E04(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel__requestObservationWithRequestIdentifier_placeIdentifier_, a1[5], a1[6]);
}

uint64_t sub_18F719F24(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel__labelEventWithRequestIdentifier_placeIdentifier_observationIdentifier_, a1[5], a1[6]);
}

uint64_t sub_18F71A098(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel__labelEventsWithStartDate_endDate_placeIdentifier_requestIdentifier_, a1[5], a1[6]);
}

uint64_t sub_18F71A17C(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel__removeLabels_withRequestIdentifier_, a1[5], a1[6]);
}

uint64_t sub_18F71A258(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel__removeCustomLocationOfInterestFromMonitoringWithIdentifier_withRequestIdentifier_, a1[5], a1[6]);
}

uint64_t sub_18F71A334(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel__startUpdatingMicroLocationWithConfiguration_withRequestIdentifier_, a1[5], a1[6]);
}

uint64_t sub_18F71A3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__stopUpdatingMicroLocationWithRequestIdentifier_, *(_QWORD *)(a1 + 40), a4);
}

uint64_t sub_18F71A440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__requestModelLearningWithRequestIdentifier_, *(_QWORD *)(a1 + 40), a4);
}

uint64_t sub_18F71A4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__purgeAllMiLoDataWithRequestIdentifier_, *(_QWORD *)(a1 + 40), a4);
}

uint64_t sub_18F71A548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__requestExportDatabaseWithRequestIdentifier_, *(_QWORD *)(a1 + 40), a4);
}

uint64_t sub_18F71A5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__createCustomLocationOfInterestAtCurrentLocationWithRequestIdentifier_, *(_QWORD *)(a1 + 40), a4);
}

os_log_t sub_18F71A5E0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "Microlocation");
  qword_1EE1720C0 = (uint64_t)result;
  return result;
}

void sub_18F71A60C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v6;

  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E298FE10;
  sub_18F5D5990(__p, "kCLConnectionMessageMiLoServiceEvent");
  MEMORY[0x194002B44](v4 + 3, __p, *a2);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_18F71A690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_18F71A6C0(_QWORD *a1, char *a2, _QWORD *a3)
{
  _QWORD *v6;
  void *__p[2];
  char v8;

  v6 = operator new(0x70uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E298FE10;
  sub_18F5D5990(__p, a2);
  MEMORY[0x194002B44](v6 + 3, __p, *a3);
  if (v8 < 0)
    operator delete(__p[0]);
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_18F71A744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_18F71A774(_QWORD *a1, char *a2, _QWORD *a3)
{
  _QWORD *v6;
  void *__p[2];
  char v8;

  v6 = operator new(0x70uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E298FE10;
  sub_18F5D5990(__p, a2);
  MEMORY[0x194002B44](v6 + 3, __p, *a3);
  if (v8 < 0)
    operator delete(__p[0]);
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_18F71A7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_18F71A828(_QWORD *a1, char *a2, _QWORD *a3)
{
  _QWORD *v6;
  void *__p[2];
  char v8;

  v6 = operator new(0x70uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E298FE10;
  sub_18F5D5990(__p, a2);
  MEMORY[0x194002B44](v6 + 3, __p, *a3);
  if (v8 < 0)
    operator delete(__p[0]);
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_18F71A8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

long double sub_18F71A8DC(double a1, double a2, double a3, double a4)
{
  double v5;
  double v6;
  double v7;
  double v8;
  long double v9;
  long double v10;
  __double2 v11;
  long double v12;
  long double v13;
  double v14;
  double v15;
  long double v16;

  v5 = 360.0;
  if (a2 < 0.0)
    a2 = a2 + 360.0;
  if (a4 < 0.0)
    a4 = a4 + 360.0;
  v6 = a4 - a2;
  if (v6 <= 180.0)
  {
    if (v6 >= -180.0)
      goto LABEL_9;
  }
  else
  {
    v5 = -360.0;
  }
  v6 = v6 + v5;
LABEL_9:
  v7 = a1 * 0.0174532925;
  v8 = v6 * 0.0174532925;
  v9 = sin((a3 - a1) * 0.0174532925 * 0.5);
  v10 = v9 * v9;
  v11 = __sincos_stret(v7);
  v12 = v11.__cosval * cos(a3 * 0.0174532925);
  v13 = sin(v8 * 0.5);
  v14 = v10 + v12 * (v13 * v13);
  v15 = 1.0 - v14;
  if (v14 < 0.0)
    v14 = 0.0;
  if (v15 < 0.0)
    v15 = 0.0;
  v16 = atan2(sqrt(v14), sqrt(v15));
  return (fabs(v11.__sinval) * -21000.0 + 6378160.0) * (v16 + v16);
}

BOOL sub_18F71AA00(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8)
{
  _BOOL8 result;
  double v15;
  __double2 v16;
  double v17;

  result = 0;
  if (a7 >= 0.0 && a8 <= 50000.0)
  {
    v15 = fabs(a8);
    v16 = __sincos_stret((dbl_18F775E70[a8 < 0.0] + a7) * 0.0174532925);
    return sub_18F71AAC4(a1, a2, a3, &v17, a4, a5, a6, v15 * v16.__cosval, v15 * v16.__sinval, 0.0);
  }
  return result;
}

BOOL sub_18F71AAC4(double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v11;
  double cosval;
  __double2 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;

  v11 = sqrt(a9 * a9 + a8 * a8);
  if (v11 <= 70000.0)
  {
    if (vabdd_f64(a5, a1[3]) <= 0.005)
    {
      v25 = *a1;
      cosval = a1[4];
    }
    else
    {
      a1[2] = a5 * 0.0174532925;
      a1[3] = a5;
      v22 = __sincos_stret(a5 * 0.0174532925);
      cosval = v22.__cosval;
      v23 = v22.__sinval * -0.00669437999 * v22.__sinval + 1.0;
      v24 = sqrt(v23);
      v25 = 6335439.33 / (v23 * v24);
      *a1 = v25;
      a1[1] = 6378137.0 / v24;
      a1[4] = v22.__cosval;
    }
    v26 = v25 + a7;
    v27 = 0.0;
    v28 = a8 / v26;
    if (fabs(cosval) >= 0.0001)
      v27 = a9 / (cosval * (a1[1] + a7));
    *a2 = a5 + v28 * 57.2957795;
    *a3 = a6 + v27 * 57.2957795;
    *a4 = a7 + a10;
    v29 = *a2;
    if (*a2 > 90.0)
    {
      *a2 = 180.0 - v29;
      *a3 = *a3 + 180.0;
      v29 = *a2;
    }
    if (v29 >= -90.0)
    {
      v30 = *a3;
    }
    else
    {
      *a2 = -180.0 - v29;
      v30 = *a3 + 180.0;
      *a3 = v30;
    }
    if (v30 > -180.0)
    {
      if (v30 <= 180.0)
        return v11 <= 70000.0;
    }
    else
    {
      v30 = v30 + 360.0;
    }
    if (v30 > 180.0)
      v30 = v30 + -360.0;
    *a3 = v30;
  }
  return v11 <= 70000.0;
}

double sub_18F71ACC4(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v12;
  long double v13;
  __double2 v14;
  double result;
  double v16;
  double v17;
  double v18;

  v17 = 0.0;
  v18 = 0.0;
  sub_18F5BD37C(a1, &v18, &v17, &v16, a4, a5, a6, a8, a9, a6);
  v12 = sqrt(v17 * v17 + v18 * v18);
  v13 = atan2(v17, v18);
  v14 = __sincos_stret(v13 + a7 * -0.0174532925);
  *a3 = v12 * v14.__cosval;
  result = v12 * v14.__sinval;
  *a2 = v12 * v14.__sinval;
  return result;
}

void sub_18F71AD50(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v18;
  __double2 v19;
  double v20;
  double v21;
  double v22;
  __double2 v23;
  double v24;
  double v25;
  double v26;

  v18 = a1[3];
  if (v18 == 0.0 || vabdd_f64(a4, v18) > 0.005)
  {
    a1[2] = a4 * 0.0174532925;
    a1[3] = a4;
    v19 = __sincos_stret(a4 * 0.0174532925);
    v20 = v19.__sinval * -0.00669437999 * v19.__sinval + 1.0;
    v21 = sqrt(v20);
    *a1 = 6335439.33 / (v20 * v21);
    a1[1] = 6378137.0 / v21;
    a1[4] = v19.__cosval;
  }
  *a2 = a4;
  *a3 = a5;
  if (a4 < 90.0 && a4 > -90.0 && a7 > 0.0 && a8 > 0.0 && a9 >= 0.0)
  {
    v22 = a7 * a8;
    v23 = __sincos_stret(a9 * 0.0174532925);
    v24 = a5 * 0.0174532925 + v22 * v23.__sinval / ((a1[1] + a6) * a1[4]);
    *a2 = (a4 * 0.0174532925 + v22 * v23.__cosval / (*a1 + a6)) * 57.2957795;
    v25 = v24 * 57.2957795;
    *a3 = v25;
    v26 = *a2;
    if (*a2 > 90.0)
    {
      *a2 = 180.0 - v26;
      v25 = *a3 + 180.0;
      *a3 = v25;
      v26 = *a2;
    }
    if (v26 < -90.0)
    {
      *a2 = -180.0 - v26;
      v25 = *a3 + 180.0;
      *a3 = v25;
    }
    if (v25 > -180.0)
    {
      if (v25 <= 180.0)
        return;
    }
    else
    {
      v25 = v25 + 360.0;
    }
    if (v25 > 180.0)
      v25 = v25 + -360.0;
    *a3 = v25;
  }
}

double sub_18F71AF58(double *a1, double a2, double a3, double a4, double a5)
{
  NSObject *v5;
  int v6;
  double result;
  char *v8;
  _BOOL4 v9;
  double v10;
  double v11;
  long double __y[2];
  uint8_t buf[8];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (vabdd_f64(a2, a4) >= 0.00000001 || vabdd_f64(a3, a5) >= 0.00000001)
  {
    *(_QWORD *)buf = 0;
    __y[0] = 0.0;
    v9 = sub_18F5BD37C(a1, (double *)buf, __y, &v11, a2, a3, 0.0, a4, a5, 0.0);
    result = -1.0;
    if (v9)
    {
      v10 = atan2(__y[0], *(long double *)buf);
      if (v10 < 0.0)
        v10 = v10 + 6.28318531;
      return v10 * 57.2957795;
    }
  }
  else
  {
    if (qword_1ECD8E728 != -1)
      dispatch_once(&qword_1ECD8E728, &unk_1E2990BB0);
    v5 = off_1ECD8E720;
    if (os_log_type_enabled((os_log_t)off_1ECD8E720, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEFAULT, "#Warning, same coordinates input", buf, 2u);
    }
    v6 = sub_18F5C4AE0(115, 2);
    result = -1.0;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E728 != -1)
        dispatch_once(&qword_1ECD8E728, &unk_1E2990BB0);
      LOWORD(__y[0]) = 0;
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "double CLDistanceCalc::calculateAzimuth(double, double, double, double)", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
      return -1.0;
    }
  }
  return result;
}

BOOL sub_18F71B73C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  NSObject *v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t i;
  NSObject *v12;
  std::string::size_type v13;
  _BOOL8 v14;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  int v23;
  double *v24;
  NSObject *v25;
  std::string::size_type v26;
  uint64_t v27;
  std::string *v28;
  double v29;
  uint64_t v30;
  std::string *v31;
  uint64_t v32;
  double v33;
  int v34;
  uint64_t v35;
  std::string buf[68];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 120);
  if (!v2)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v6 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(a1 + 248);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349056;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v7;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid bestParticle road", (uint8_t *)buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
LABEL_56:
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    goto LABEL_54;
  }
  *(_DWORD *)(a1 + 520) = 1;
  v3 = *(_QWORD *)(a1 + 152);
  v4 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 392) = v3;
  *(_QWORD *)(a1 + 400) = v4;
  v5 = *(float *)(a1 + 144);
  *(double *)(a1 + 408) = v5;
  *(_QWORD *)(a1 + 528) = v3;
  *(_QWORD *)(a1 + 536) = v4;
  *(double *)(a1 + 544) = v5;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(v2 + 20);
  if (*(char *)(v2 + 71) < 0)
    sub_18F5C6990(buf, *(void **)(v2 + 48), *(_QWORD *)(v2 + 56));
  else
    buf[0] = *(std::string *)(v2 + 48);
  std::string::operator=((std::string *)(a1 + 368), buf);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  v8 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)v8;
  *(_BYTE *)(a1 + 601) = *(_BYTE *)(v8 + 19);
  LOBYTE(v8) = *(_BYTE *)(v8 + 18);
  v9 = *(_QWORD *)(a1 + 168);
  v10 = *(double *)(a1 + 176);
  *(float *)(a1 + 416) = v10;
  *(_BYTE *)(a1 + 602) = v8;
  *(_QWORD *)(a1 + 512) = v9;
  for (i = *(_QWORD *)(a1 + 208); i != *(_QWORD *)(a1 + 216); i += 72)
  {
    if (*(_DWORD *)(i + 64) == 1)
    {
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(i + 16);
      *(_QWORD *)(a1 + 480) = *(_QWORD *)(i + 56);
      if (*(_BYTE *)(a1 + 712))
        *(_QWORD *)(a1 + 408) = *(_QWORD *)(a1 + 344);
      *(_BYTE *)(a1 + 505) = *(_BYTE *)(a1 + 745);
      v32 = 0;
      v33 = 0.0;
      sub_18F71ACC4((double *)(a1 + 672), &v33, (double *)&v32, *(double *)(a1 + 152), *(double *)(a1 + 160), *(double *)(a1 + 312), *(float *)(a1 + 144), *(double *)(a1 + 296), *(double *)(a1 + 304));
      v16 = *(_QWORD *)(a1 + 120);
      v14 = v16 != 0;
      if (v16)
      {
        v17 = *(int *)(v16 + 20);
        v18 = 0.5;
        v19 = 1.0;
        if ((_DWORD)v17 == 9 || (v20 = *(_DWORD *)(v16 + 72), v20 == 6))
        {
          v21 = 1.0;
        }
        else
        {
          v21 = 1.0;
          if (v20 != 255)
          {
            v22 = *(double *)(v16 + 96);
            if (v22 < 0.000001)
            {
              v22 = 1.0;
              if ((v17 & 0xFFFFFFFE) != 8)
              {
                v23 = *(unsigned __int8 *)(v16 + 16);
                if (v17 > 7)
                {
                  v22 = dbl_18F772340[v23 == 0];
                }
                else
                {
                  if (v23)
                    v24 = (double *)&unk_18F775F58;
                  else
                    v24 = (double *)&unk_18F775F98;
                  v22 = v24[v17];
                }
              }
            }
            v21 = v22 + 1.0;
            v18 = v22 * 0.5 + 1.0;
          }
        }
        *(double *)(a1 + 664) = v21;
        if (v33 >= 0.0)
          v19 = -1.0;
        v29 = v33 + v19 * v18;
        *(_QWORD *)(a1 + 488) = v32;
        *(double *)(a1 + 496) = v29;
      }
      else
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v25 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          v26 = *(_QWORD *)(a1 + 248);
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349056;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v26;
          _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,unable to determine roadWidth when filling crumb", (uint8_t *)buf, 0xCu);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v27 = *(_QWORD *)(a1 + 248);
          v34 = 134349056;
          v35 = v27;
          v28 = (std::string *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMSnapData::fillCrumb()", "CoreLocation: %s\n", (const char *)v28);
          if (v28 != buf)
            free(v28);
        }
      }
      return v14;
    }
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v12 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    v13 = *(_QWORD *)(a1 + 248);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349056;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v13;
    _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,RawGPSScore not available", (uint8_t *)buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      goto LABEL_56;
LABEL_54:
    v30 = *(_QWORD *)(a1 + 248);
    v34 = 134349056;
    v35 = v30;
    v31 = (std::string *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMSnapData::fillCrumb()", "CoreLocation: %s\n", (const char *)v31);
    if (v31 != buf)
      free(v31);
  }
  return 0;
}

void sub_18F71BD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F71BDA0(uint64_t result, double *a2, double *a3)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  double v6;
  double v7;
  double *v8;

  if (result)
  {
    v3 = *(int *)(result + 20);
    if ((_DWORD)v3 == 9 || ((v4 = *(_DWORD *)(result + 72), v4 != 255) ? (v5 = v4 == 6) : (v5 = 1), v5))
    {
      *a2 = 1.0;
      v6 = 0.5;
    }
    else
    {
      v7 = *(double *)(result + 96);
      *a2 = v7;
      if (v7 < 0.000001)
      {
        v7 = 1.0;
        if ((v3 & 0xFFFFFFFE) != 8)
        {
          if (v3 > 7)
          {
            v7 = dbl_18F772340[*(_BYTE *)(result + 16) == 0];
          }
          else
          {
            if (*(_BYTE *)(result + 16))
              v8 = (double *)&unk_18F775F58;
            else
              v8 = (double *)&unk_18F775F98;
            v7 = v8[v3];
          }
        }
        *a2 = v7;
      }
      *a3 = v7 * 0.5;
      *a2 = *a2 + 1.0;
      v6 = *a3 + 1.0;
    }
  }
  else
  {
    *a2 = 0.0;
    v6 = 0.0;
  }
  *a3 = v6;
  return result;
}

BOOL sub_18F71BE74(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  double v8;
  char *v9;
  double v10;
  uint8_t buf[4];
  double v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (!a1[136])
      sub_18F623A40(a1 + 136, (uint64_t *)a2);
    v5 = a1[134];
    if (v5 >= a1[135])
    {
      v6 = sub_18F6B3118(a1 + 133, a2);
    }
    else
    {
      sub_18F6B323C((uint64_t)(a1 + 135), a1[134], a2);
      v6 = v5 + 112;
      a1[134] = v5 + 112;
    }
    a1[134] = v6;
    v10 = *(double *)(a2 + 48);
    if (v10 < *((double *)a1 + 129))
      *((double *)a1 + 129) = v10;
    if (v10 > *((double *)a1 + 20))
      *((double *)a1 + 20) = v10;
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v7 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v8 = *(double *)a1;
      *(_DWORD *)buf = 134349056;
      v13 = v8;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, null road when trying to add particles into candidate", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidate::addParticle(const CLParticleMapMatcherCommon::Particle &)", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  return v3 != 0;
}

void sub_18F71C0AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 1072) = v2;
  _Unwind_Resume(a1);
}

BOOL sub_18F71C0B8(uint64_t a1, int *a2)
{
  _BOOL8 v2;
  BOOL v3;
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _BOOL4 v18;
  double v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  _BOOL4 v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  double v46;
  double v47;
  _BOOL4 v48;
  double v50;
  NSObject *v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint8_t buf[4];
  uint64_t v66;
  __int16 v67;
  _BYTE v68[10];
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  _BYTE v73[10];
  _BYTE v74[14];
  __int16 v75;
  _BOOL4 v76;
  __int16 v77;
  _BOOL4 v78;
  __int16 v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v2 = *(_BYTE *)(a1 + 152) == 0;
  if (*(_BYTE *)(a1 + 152))
    v3 = *(_BYTE *)(a1 + 153) == 0;
  else
    v3 = 1;
  if (v3)
    return v2;
  if (*(_DWORD *)(a1 + 124) == *(_DWORD *)(a1 + 1104))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v6 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(a1 + 176);
      v8 = *(_DWORD *)(a1 + 124);
      v9 = *(_DWORD *)(a1 + 1104);
      v10 = *a2;
      *(_DWORD *)buf = 134349824;
      v66 = v7;
      v67 = 1026;
      *(_DWORD *)v68 = v8;
      *(_WORD *)&v68[4] = 1026;
      *(_DWORD *)&v68[6] = v9;
      LOWORD(v69) = 1026;
      *(_DWORD *)((char *)&v69 + 2) = v10;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,ambiguityCase,combined,%{public}d,secondBestCombined,%{public}d,sigEnv,%{public}d", buf, 0x1Eu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 1044) <= (signed int)(-1227133513 * ((*(_QWORD *)(a1 + 1072) - *(_QWORD *)(a1 + 1064)) >> 4)))
  {
    if (*(double *)(a1 + 360) <= 0.0)
      return 0;
    v21 = *(double *)(a1 + 272);
    if (v21 < 0.0 || (*a2 - 1) > 1)
      return 0;
    v22 = *(double *)(a1 + 768);
    v23 = *(double *)(a1 + 336);
    v24 = fmod(v22 - v23, 360.0);
    if (v24 < 0.0)
      v24 = v24 + 360.0;
    if (v24 > 180.0)
      v24 = v24 + -360.0;
    if (v24 > 75.0)
    {
      v25 = fmod(v23 + v24 * 0.5, 360.0);
      if (v25 >= 0.0)
        v26 = v25;
      else
        v26 = v25 + 360.0;
      v27 = fmod(v21 - v26, 360.0);
      if (v27 < 0.0)
        v27 = v27 + 360.0;
      if (v27 <= 180.0)
        v28 = v27;
      else
        v28 = v27 + -360.0;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v29 = fabs(v28);
      v30 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v31 = *(_QWORD *)(a1 + 176);
        v32 = *(_QWORD *)(a1 + 272);
        v33 = *(_QWORD *)(a1 + 336);
        v34 = *(_QWORD *)(a1 + 768);
        *(_DWORD *)buf = 134350592;
        v66 = v31;
        v67 = 2050;
        *(_QWORD *)v68 = v32;
        *(_WORD *)&v68[8] = 2050;
        v69 = v33;
        v70 = 2050;
        v71 = v34;
        v72 = 2050;
        *(double *)v73 = v26;
        *(_WORD *)&v73[8] = 2050;
        *(double *)v74 = v29;
        *(_WORD *)&v74[8] = 1026;
        *(_DWORD *)&v74[10] = v29 < 10.0;
        _os_log_impl(&dword_18F5B3000, v30, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,lowerOutgoingCountCase,course,%{public}.2lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf,approxCourseOfTurningRoad,%{public}.2lf,turningCourseDiff,%{public}.2lf,outgoingCondition,%{public}d", buf, 0x44u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v64 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "CoreLocation: %s\n", v64);
        if (v64 != (char *)buf)
          free(v64);
      }
      if (v29 < 10.0)
        return 1;
      v21 = *(double *)(a1 + 272);
      v22 = *(double *)(a1 + 768);
      v23 = *(double *)(a1 + 336);
    }
    v35 = fmod(v21 - v22, 360.0);
    if (v35 < 0.0)
      v35 = v35 + 360.0;
    if (v35 > 180.0)
      v35 = v35 + -360.0;
    v36 = fabs(v35);
    v37 = fmod(v21 - v23, 360.0);
    if (v37 < 0.0)
      v37 = v37 + 360.0;
    if (v37 > 180.0)
      v37 = v37 + -360.0;
    v38 = fabs(v37);
    v39 = v38 >= 15.0 && v36 < 15.0;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v40 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v41 = *(_QWORD *)(a1 + 176);
      v42 = *(_QWORD *)(a1 + 272);
      v43 = *(_QWORD *)(a1 + 336);
      v44 = *(_QWORD *)(a1 + 768);
      v45 = *a2;
      *(_DWORD *)buf = 134350848;
      v66 = v41;
      v67 = 2050;
      *(_QWORD *)v68 = v42;
      *(_WORD *)&v68[8] = 2050;
      v69 = v43;
      v70 = 2050;
      v71 = v44;
      v72 = 1026;
      *(_DWORD *)v73 = v36 < 15.0;
      *(_WORD *)&v73[4] = 1026;
      *(_DWORD *)&v73[6] = v38 < 15.0;
      *(_WORD *)v74 = 1026;
      *(_DWORD *)&v74[2] = v45;
      *(_WORD *)&v74[6] = 1026;
      *(_DWORD *)&v74[8] = v39;
      _os_log_impl(&dword_18F5B3000, v40, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,lowerOutgoingCountCase,course,%{public}.2lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf,isCrumbCourseAlignedWithOutgoing,%{public}d,isCrumbCourseAlignedWithIncoming,%{public}d,sigEnv,%{public}d,outgoingCondition,%{public}d", buf, 0x42u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v63 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "CoreLocation: %s\n", v63);
      if (v63 != (char *)buf)
        free(v63);
    }
    return v39;
  }
  v12 = *(double *)(a1 + 336);
  v13 = *(double *)(a1 + 768);
  v14 = fmod(v12 - v13, 360.0);
  if (v14 < 0.0)
    v14 = v14 + 360.0;
  if (v14 > 180.0)
    v14 = v14 + -360.0;
  v15 = fabs(v14);
  v16 = *(double *)(a1 + 360);
  if (v16 <= 0.0 || (v17 = *(double *)(a1 + 272), v17 < 0.0))
  {
    v18 = 0;
    goto LABEL_23;
  }
  v46 = fmod(v17 - v13, 360.0);
  if (v46 < 0.0)
    v46 = v46 + 360.0;
  if (v46 > 180.0)
    v46 = v46 + -360.0;
  v47 = fabs(v46);
  v48 = *(double *)(a1 + 1048) >= 7.5;
  v18 = v47 < 25.0;
  if (v47 < 25.0)
    v48 = 1;
  if (v48 && v15 >= 45.0 && v47 >= 25.0)
  {
    if (v16 < 20.0)
    {
      v50 = fmod(v17 - v12, 360.0);
      v18 = 0;
      if (v50 < 0.0)
        v50 = v50 + 360.0;
      if (v50 > 180.0)
        v50 = v50 + -360.0;
      if (fabs(v50) < 10.0)
      {
        v20 = 1;
        goto LABEL_91;
      }
      goto LABEL_23;
    }
    v18 = 0;
  }
  if (!v48)
  {
LABEL_90:
    v20 = 0;
    goto LABEL_91;
  }
LABEL_23:
  if (*(double *)(a1 + 352) > 0.0)
  {
    v19 = *(double *)(a1 + 264);
    if (v19 >= 0.0 && v19 < 0.001)
      goto LABEL_90;
  }
  v20 = 0;
  if (!*(_BYTE *)(a1 + 396))
  {
LABEL_101:
    v2 = 1;
    goto LABEL_102;
  }
LABEL_91:
  if (*(double *)(a1 + 264) == 0.0 && !*(_BYTE *)(a1 + 396) && (v16 <= 0.0 || *(double *)(a1 + 272) < 0.0))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v51 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v52 = *(_QWORD *)(a1 + 176);
      *(_DWORD *)buf = 134349056;
      v66 = v52;
      _os_log_impl(&dword_18F5B3000, v51, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,position dependent", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v62 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "CoreLocation: %s\n", v62);
      if (v62 != (char *)buf)
        free(v62);
    }
    goto LABEL_101;
  }
  v2 = 0;
LABEL_102:
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v53 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v54 = *(_QWORD *)(a1 + 176);
    v55 = *(_QWORD *)(a1 + 336);
    v56 = *(_QWORD *)(a1 + 768);
    v57 = *(_QWORD *)(a1 + 272);
    v58 = *(_QWORD *)(a1 + 1048);
    v59 = *(_QWORD *)(a1 + 360);
    *(_DWORD *)buf = 134351360;
    v66 = v54;
    v67 = 2050;
    *(_QWORD *)v68 = v55;
    *(_WORD *)&v68[8] = 2050;
    v69 = v56;
    v70 = 2050;
    v71 = v57;
    v72 = 2050;
    *(_QWORD *)v73 = v58;
    *(_WORD *)&v73[8] = 1026;
    *(_DWORD *)v74 = v2;
    *(_WORD *)&v74[4] = 2050;
    *(_QWORD *)&v74[6] = v59;
    v75 = 1026;
    v76 = v15 >= 45.0;
    v77 = 1026;
    v78 = v18;
    v79 = 1026;
    v80 = v20;
    _os_log_impl(&dword_18F5B3000, v53, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf, crumbCourse,%{public}.2lf, outgoingDistanceFromIntersection,%{public}.2lf,outgoingCondition,%{public}d,crumbCourseUnc,%{public}.2lf,significantCourseChange,%{public}d,isCrumbCourseAlignedWithOutgoing,%{public}d, isCrumbCourseAlignedWithIncoming,%{public}d", buf, 0x56u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v61 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "CoreLocation: %s\n", v61);
    if (v61 != (char *)buf)
      free(v61);
  }
  return v2;
}

_QWORD *sub_18F71CDA8(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  _QWORD *v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  char *v37;
  _QWORD v38[2];
  unsigned __int8 v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  int v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  _BYTE buf[22];
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (!a1[3])
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v20 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v21 = *a1;
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v21;
      _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly zero candidates,getAlternateBestCandidate", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v30 = *a1;
      v42 = 134349056;
      v43 = v30;
      v31 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidateVector::getBestAndAlternateBestCandidate(const MMCandidate *&, const MMCandidate *&) const", "CoreLocation: %s\n", v31);
      if (v31 != buf)
        free(v31);
    }
    goto LABEL_52;
  }
  v2 = (uint64_t *)a1[1];
  v3 = a1 + 2;
  if (v2 == a1 + 2)
    goto LABEL_52;
  v4 = 0;
  v5 = 0;
  v6 = (uint64_t *)a1[1];
  do
  {
    if (*((_DWORD *)v6 + 45) > v5)
    {
      v5 = *((_DWORD *)v6 + 45);
      v4 = v6 + 7;
    }
    v7 = (uint64_t *)v6[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (uint64_t *)v6[2];
        v9 = *v8 == (_QWORD)v6;
        v6 = v8;
      }
      while (!v9);
    }
    v6 = v8;
  }
  while (v8 != v3);
  if (!v4 || !v4[1])
  {
LABEL_52:
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v22 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v23 = *a1;
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v23;
      _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly unable to find candidates,getSolutionCandidate", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v28 = *a1;
    v42 = 134349056;
    v43 = v28;
    goto LABEL_70;
  }
  v10 = 0;
  v11 = 0;
  do
  {
    sub_18F69B170((uint64_t)(v4 + 1), (uint64_t)buf);
    if ((v2[4] != *(_QWORD *)buf || *((unsigned __int8 *)v2 + 48) != buf[16] || v2[5] != *(_QWORD *)&buf[8])
      && *((_DWORD *)v2 + 45) > v11)
    {
      v10 = v2 + 7;
      v11 = *((_DWORD *)v2 + 45);
    }
    v12 = (uint64_t *)v2[1];
    if (v12)
    {
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v13 = (uint64_t *)v2[2];
        v9 = *v13 == (_QWORD)v2;
        v2 = v13;
      }
      while (!v9);
    }
    v2 = v13;
  }
  while (v13 != v3);
  if (!v4[1])
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v25 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v26 = *a1;
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v26;
      _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly, best candidate is nullptr", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v27 = *a1;
    v42 = 134349056;
    v43 = v27;
LABEL_70:
    v29 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "const MMCandidate *const CLParticleMM::MMCandidateVector::getSolutionCandidate() const", "CoreLocation: %s\n", v29);
    if (v29 != buf)
      free(v29);
    return 0;
  }
  if (v10)
  {
    if (v10[1])
    {
      sub_18F69B170((uint64_t)(v4 + 1), (uint64_t)v40);
      sub_18F69B170((uint64_t)(v10 + 1), (uint64_t)v38);
      if (v38[0] == v40[0]
        && v39 != v41
        && *((_BYTE *)v10 + 153)
        && *((_BYTE *)v4 + 153)
        && *((_DWORD *)v10 + 31) == *((_DWORD *)v4 + 31)
        && v10[16] == v38[0]
        && *((unsigned __int8 *)v10 + 144) == v41
        && v10[17] == v40[1]
        && v4[16] == v38[0]
        && *((unsigned __int8 *)v4 + 144) == v39
        && v4[17] == v38[1]
        && 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10[134] - v10[133]) >> 4) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                           * ((uint64_t)(v4[134] - v4[133]) >> 4)))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v14 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v15 = *a1;
          v16 = -1227133513 * ((v4[134] - v4[133]) >> 4);
          v17 = -1227133513 * ((v10[134] - v10[133]) >> 4);
          v18 = *((_DWORD *)v4 + 31);
          v19 = *((_DWORD *)v10 + 31);
          *(_DWORD *)buf = 134350336;
          *(_QWORD *)&buf[4] = v15;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v40[0];
          v55 = 1026;
          v56 = v16;
          v57 = 1026;
          v58 = v17;
          v59 = 1026;
          v60 = v18;
          v61 = 1026;
          v62 = v19;
          _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,overrode bestCandidate with alternate,roadID,%{public}lld,bestIncoming,%{public}d,altBestIncoming,%{public}d,bestCombined,%{public}d,altBestCombined,%{public}d", buf, 0x2Eu);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v32 = *a1;
          v33 = -1227133513 * ((v4[134] - v4[133]) >> 4);
          v34 = -1227133513 * ((v10[134] - v10[133]) >> 4);
          v35 = *((_DWORD *)v4 + 31);
          v36 = *((_DWORD *)v10 + 31);
          v42 = 134350336;
          v43 = v32;
          v44 = 2050;
          v45 = v40[0];
          v46 = 1026;
          v47 = v33;
          v48 = 1026;
          v49 = v34;
          v50 = 1026;
          v51 = v35;
          v52 = 1026;
          v53 = v36;
          v37 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "const MMCandidate *const CLParticleMM::MMCandidateVector::getSolutionCandidate() const", "CoreLocation: %s\n", v37);
          if (v37 != buf)
            free(v37);
        }
        return v10;
      }
    }
  }
  return v4;
}

double sub_18F71D5EC(uint64_t *a1)
{
  _QWORD *v2;
  double v3;
  uint64_t v4;
  double *v5;
  uint64_t *v6;
  double v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  NSObject *v11;
  uint64_t v12;
  char *v14;
  __int128 buf;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1[3])
  {
    v2 = sub_18F71CDA8(a1);
    v3 = 0.0;
    if (v2)
    {
      v4 = (uint64_t)(v2 + 1);
      if (v2[1])
      {
        v5 = (double *)a1[1];
        v6 = a1 + 2;
        if (v5 != (double *)v6)
        {
          do
          {
            sub_18F69B170(v4, (uint64_t)&buf);
            if (*((_QWORD *)v5 + 4) == (_QWORD)buf && *((unsigned __int8 *)v5 + 48) == v16)
            {
              v7 = v5[15];
              if (v7 <= v3)
                v7 = v3;
              if (*((_QWORD *)v5 + 5) != *((_QWORD *)&buf + 1))
                v3 = v7;
            }
            else if (v5[15] > v3)
            {
              v3 = v5[15];
            }
            v8 = (uint64_t *)*((_QWORD *)v5 + 1);
            if (v8)
            {
              do
              {
                v9 = v8;
                v8 = (uint64_t *)*v8;
              }
              while (v8);
            }
            else
            {
              do
              {
                v9 = (uint64_t *)*((_QWORD *)v5 + 2);
                v10 = *v9 == (_QWORD)v5;
                v5 = (double *)v9;
              }
              while (!v10);
            }
            v5 = (double *)v9;
          }
          while (v9 != v6);
        }
      }
    }
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v11 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v12 = *a1;
      LODWORD(buf) = 134349056;
      *(_QWORD *)((char *)&buf + 4) = v12;
      _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly zero candidates,getSecondBestCandidate", (uint8_t *)&buf, 0xCu);
    }
    v3 = 0.0;
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "double CLParticleMM::MMCandidateVector::getBestParticleScoreForAlternateCandidate() const", "CoreLocation: %s\n", v14);
      if (v14 != (char *)&buf)
        free(v14);
    }
  }
  return v3;
}

void sub_18F71D87C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  v2 = (_QWORD *)(a1 + 16);
  sub_18F73D398(*(_QWORD **)(a1 + 16));
  v3 = v5;
  *(v2 - 1) = &v5;
  *v2 = v3;
  v4 = v6;
  v2[1] = v6;
  if (v4)
  {
    v3[2] = v2;
    v5 = 0;
    v6 = 0;
    v3 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v2;
  }
  sub_18F73D398(v3);
}

uint64_t sub_18F71D8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  __int128 v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_18F623A40((_QWORD *)(a1 + 8), (uint64_t *)(a2 + 8));
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 56) = v4;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 64) = v6;
  if (a1 != a2)
    sub_18F692DD0((char *)(a1 + 96), *(char **)(a2 + 96), *(_QWORD *)(a2 + 104), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
  v7 = *(_OWORD *)(a2 + 120);
  v8 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 120) = v7;
  v9 = *(_OWORD *)(a2 + 248);
  v10 = *(_OWORD *)(a2 + 264);
  v11 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = v10;
  *(_OWORD *)(a1 + 280) = v11;
  *(_OWORD *)(a1 + 248) = v9;
  v12 = *(_OWORD *)(a2 + 168);
  v13 = *(_OWORD *)(a2 + 184);
  v14 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 184) = v13;
  *(_OWORD *)(a1 + 168) = v12;
  std::string::operator=((std::string *)(a1 + 296), (const std::string *)(a2 + 296));
  memcpy((void *)(a1 + 320), (const void *)(a2 + 320), 0x118uLL);
  v15 = *(_OWORD *)(a2 + 648);
  v17 = *(_OWORD *)(a2 + 600);
  v16 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v15;
  *(_OWORD *)(a1 + 600) = v17;
  *(_OWORD *)(a1 + 616) = v16;
  v18 = *(_OWORD *)(a2 + 712);
  v20 = *(_OWORD *)(a2 + 664);
  v19 = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 712) = v18;
  *(_OWORD *)(a1 + 664) = v20;
  *(_OWORD *)(a1 + 680) = v19;
  std::string::operator=((std::string *)(a1 + 728), (const std::string *)(a2 + 728));
  memcpy((void *)(a1 + 752), (const void *)(a2 + 752), 0x118uLL);
  v21 = *(_OWORD *)(a2 + 1048);
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a2 + 1032);
  *(_OWORD *)(a1 + 1048) = v21;
  if (a1 != a2)
    sub_18F73DCBC(a1 + 1064, *(_QWORD *)(a2 + 1064), *(_QWORD *)(a2 + 1072), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 1072) - *(_QWORD *)(a2 + 1064)) >> 4));
  sub_18F623A40((_QWORD *)(a1 + 1088), (uint64_t *)(a2 + 1088));
  v22 = *(_DWORD *)(a2 + 1136);
  v23 = *(_OWORD *)(a2 + 1120);
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
  *(_OWORD *)(a1 + 1120) = v23;
  *(_DWORD *)(a1 + 1136) = v22;
  return a1;
}

uint64_t sub_18F71DA9C(uint64_t a1)
{
  void *v2;
  void **v4;

  sub_18F5D6004(a1 + 1088);
  v4 = (void **)(a1 + 1064);
  sub_18F6B2D54(&v4);
  if (*(char *)(a1 + 751) < 0)
    operator delete(*(void **)(a1 + 728));
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  sub_18F5D6004(a1 + 8);
  return a1;
}

char *sub_18F71DB14(char *result, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  _OWORD *v8;
  double v9;
  double v10;
  __int128 v11;

  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  *((_DWORD *)result + 4) = 0;
  *((_WORD *)result + 10) = 1;
  *((_DWORD *)result + 6) = 0;
  *((_QWORD *)result + 11) = 0;
  v3 = result + 88;
  *((_QWORD *)result + 12) = 0;
  *((_QWORD *)result + 13) = 0;
  *((_OWORD *)result + 2) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  result[80] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    v6 = result;
    v7 = result + 16;
    v8 = result + 56;
    v9 = 0.0;
    do
    {
      v10 = *(double *)(v5 + 56);
      if (v10 > v9)
      {
        result = (char *)sub_18F623A40(v6, (uint64_t *)v5);
        v11 = *(_OWORD *)(v5 + 32);
        *(_OWORD *)v7 = *(_OWORD *)(v5 + 16);
        *((_OWORD *)v7 + 1) = v11;
        *((_QWORD *)v7 + 4) = *(_QWORD *)(v5 + 48);
        *v8 = *(_OWORD *)(v5 + 56);
        *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)(v5 + 65);
        if ((_QWORD *)v5 != v6)
          result = sub_18F692DD0(v3, *(char **)(v5 + 88), *(_QWORD *)(v5 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v5 + 96) - *(_QWORD *)(v5 + 88)) >> 3));
        v9 = v10;
      }
      v5 += 112;
    }
    while (v5 != a3);
  }
  return result;
}

void sub_18F71DC20(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18F692600(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F71DC34(uint64_t *a1, uint64_t a2, double a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  NSObject *v12;
  uint64_t j;
  char *v14;
  uint64_t v15;
  __int128 buf;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)*a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v15 = a1[1];
    v10 = v15;
    return -1227133513 * ((unint64_t)(v4 - (_QWORD)v3) >> 4)
         + 1227133513 * ((unint64_t)(v10 - v15) >> 4);
  }
  v8 = (uint64_t)(a1 + 2);
  v9 = (_QWORD *)*a1;
  do
  {
    if (*v9)
    {
      sub_18F69B170((uint64_t)v9, (uint64_t)&buf);
      if ((_QWORD)buf != *(_QWORD *)a2 || v18 != *(_BYTE *)(a2 + 16) || *((_QWORD *)&buf + 1) != *(_QWORD *)(a2 + 8))
      {
        v9 += 14;
        v10 = a1[1];
        continue;
      }
      v10 = sub_18F73DEF0((uint64_t)(v9 + 14), a1[1], (uint64_t)v9);
      for (i = a1[1]; i != v10; sub_18F6B2DD8(v8, i))
        i -= 112;
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v12 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134349056;
        *(double *)((char *)&buf + 4) = a3;
        _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,particle road is null while eliminateParticlesWithRoadKey", (uint8_t *)&buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v14 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "int CLParticleMM::MMParticleVector::eliminateParticlesWithRoadKey(const CFAbsoluteTime, const CLParticleMapMatcherCommon::RoadKey)", "CoreLocation: %s\n", v14);
        if (v14 != (char *)&buf)
          free(v14);
      }
      v10 = sub_18F73DEF0((uint64_t)(v9 + 14), a1[1], (uint64_t)v9);
      for (j = a1[1]; j != v10; sub_18F6B2DD8(v8, j))
        j -= 112;
    }
    a1[1] = v10;
  }
  while (v9 != (_QWORD *)v10);
  v15 = *a1;
  return -1227133513 * ((unint64_t)(v4 - (_QWORD)v3) >> 4)
       + 1227133513 * ((unint64_t)(v10 - v15) >> 4);
}

uint64_t sub_18F71DF24(double **a1, double a2)
{
  double *v3;
  double *v4;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  long double v14;
  double *v15;
  double *v16;
  double *v17;
  double v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  BOOL v25;
  BOOL v26;
  char v27;
  char v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  long double v33;
  double v34;
  long double v35;
  uint64_t result;
  NSObject *v37;
  char *v38;
  uint8_t buf[4];
  double v40;
  __int16 v41;
  double v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v6 = 0.0;
  }
  else
  {
    v6 = 0.0;
    do
    {
      v3[7] = 0.0;
      v3[8] = 0.0;
      v3[9] = 0.0;
      v7 = *((_QWORD *)v3 + 11);
      v8 = *((_QWORD *)v3 + 12);
      v9 = 0.0;
      if (v7 != v8)
      {
        v10 = 0.0;
        do
        {
          if (*(_DWORD *)(v7 + 64) != 2)
          {
            v11 = *(double *)(v7 + 24);
            v12 = *(double *)v7 * v11;
            if (v9 > 0.0)
            {
              v13 = log(v9);
              v14 = log(v12);
              v12 = exp(v13 + v14);
            }
            v3[7] = v12;
            v10 = v10 + *(double *)(v7 + 16) * v11;
            v3[9] = v10;
            v9 = v12;
          }
          v7 += 72;
        }
        while (v7 != v8);
      }
      v6 = v6 + v9;
      v3 += 14;
    }
    while (v3 != v4);
    if (v6 > 0.0)
    {
      v16 = *a1;
      v15 = a1[1];
      if (v16 != v15)
      {
        v17 = v16;
        do
        {
          v17[8] = v17[7] / v6;
          v17 += 14;
        }
        while (v17 != v15);
        v18 = 0.0;
        v19 = v16;
        do
        {
          v20 = *((_QWORD *)v19 + 11);
          v21 = *((_QWORD *)v19 + 12);
          if (v20 == v21)
            goto LABEL_43;
          v22 = 0.0;
          v23 = *((_QWORD *)v19 + 11);
          do
          {
            v24 = *(double *)(v23 + 24);
            if (*(_DWORD *)(v23 + 64) != 2)
              v24 = -0.0;
            v22 = v22 + v24;
            v23 += 72;
          }
          while (v23 != v21);
          v25 = (*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
          v26 = ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
          if (v22 >= 0.0)
          {
            v26 = 0;
            v25 = 0;
          }
          if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFLL) == 0)
            v25 = 1;
          v27 = (*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v25;
          if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
            v27 = 1;
          v28 = v27 | v26;
          v29 = *((_QWORD *)v19 + 11);
          if ((v28 & 1) == 0)
          {
            do
            {
              if (*(_DWORD *)(v29 + 64) == 2)
                *(double *)(v29 + 24) = *(double *)(v29 + 24) / v22;
              v29 += 72;
            }
            while (v29 != v21);
          }
          if (v20 == v21)
            goto LABEL_43;
          v30 = 0.0;
          v31 = 0.0;
          do
          {
            if (*(_DWORD *)(v20 + 64) == 2)
            {
              v32 = *(double *)(v20 + 24);
              v31 = v31 + *(double *)v20 * v32;
              v30 = v30 + *(double *)(v20 + 16) * v32;
            }
            v20 += 72;
          }
          while (v20 != v21);
          if (v31 <= 0.0)
          {
LABEL_43:
            v31 = v19[7];
          }
          else
          {
            v33 = v19[7];
            if (v33 > 0.0)
            {
              v34 = log(v33);
              v35 = log(v31);
              v31 = exp(v35 + v34);
            }
            v19[7] = v31;
            v19[9] = v30 + v19[9];
          }
          v18 = v18 + v31;
          v19 += 14;
        }
        while (v19 != v15);
        if (v18 > 0.0)
        {
          do
          {
            v16[8] = v16[7] / v18;
            v16 += 14;
          }
          while (v16 != v15);
          return 1;
        }
      }
      return 0;
    }
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v37 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349312;
    v40 = a2;
    v41 = 2050;
    v42 = v6;
    _os_log_impl(&dword_18F5B3000, v37, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to normalizeLikelihoods, negative/zero totalScore after regular update,%{public}.8lf", buf, 0x16u);
  }
  result = sub_18F5C4AE0(115, 0);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v38 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::computeLikelihoods(const CFAbsoluteTime, BOOL)", "CoreLocation: %s\n", v38);
    if (v38 != (char *)buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_18F71E354(double *a1, uint64_t a2, double *a3, uint64_t a4)
{
  double v8;
  _BOOL8 v9;
  uint64_t v10;
  double v11;
  int v12;
  double v13;
  int v14;
  double *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v25;
  double v26;
  int v27;
  uint64_t v28;
  _BYTE buf[1632];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)buf = 0;
    sub_18F71ACC4(a1, (double *)buf, (double *)&v27, a3[4], a3[5], *(double *)(a2 + 96), *((float *)a3 + 6), *(double *)(a2 + 80), *(double *)(a2 + 88));
    v8 = *a3;
    v9 = *(_QWORD *)a3 != 0;
    if (*(_QWORD *)a3)
    {
      v10 = *(int *)(*(_QWORD *)&v8 + 20);
      v11 = 0.5;
      if ((_DWORD)v10 != 9)
      {
        v12 = *(_DWORD *)(*(_QWORD *)&v8 + 72);
        if (v12 != 6 && v12 != 255)
        {
          v13 = *(double *)(*(_QWORD *)&v8 + 96);
          if (v13 < 0.000001)
          {
            v13 = 1.0;
            if ((v10 & 0xFFFFFFFE) != 8)
            {
              v14 = *(unsigned __int8 *)(*(_QWORD *)&v8 + 16);
              if (v10 > 7)
              {
                v13 = dbl_18F772340[v14 == 0];
              }
              else
              {
                if (v14)
                  v15 = (double *)&unk_18F775F58;
                else
                  v15 = (double *)&unk_18F775F98;
                v13 = v15[v10];
              }
            }
          }
          v11 = v13 * 0.5 + 1.0;
        }
      }
      v20 = a3[4];
      v21 = a3[5];
      v25 = v21;
      v26 = v20;
      if (*(double *)buf < 0.0)
        v11 = -v11;
      sub_18F71AA00(a1, &v26, &v25, v20, v21, *(double *)(a2 + 96), *((float *)a3 + 6), v11);
      sub_18F5BD37C(a1, (double *)(a4 + 40), (double *)(a4 + 32), (double *)(a4 + 48), v26, v25, *(double *)(a2 + 96), *(double *)(a2 + 80), *(double *)(a2 + 88), *(double *)(a2 + 96));
      if (*(_BYTE *)(a2 + 40))
      {
        v22 = *(double *)(a2 + 104);
        if (v22 >= 0.0 && *(double *)(a2 + 120) > 0.0)
        {
          v23 = fmod(v22 - *((float *)a3 + 6), 360.0);
          if (v23 < 0.0)
            v23 = v23 + 360.0;
          if (v23 > 180.0)
            v23 = v23 + -360.0;
          *(double *)(a4 + 56) = fabs(v23);
        }
      }
      sub_18F6E4CD8(a2, a4);
    }
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v16 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_QWORD *)(a2 + 200);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v17;
      _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,NULL road when computing score", buf, 0xCu);
    }
    v9 = 0;
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v18 = *(_QWORD *)(a2 + 200);
      v27 = 134349056;
      v28 = v18;
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::calculateScoreAndVarFactor(const CLParticleMapMatcherCommon::CLMMMeasurementData &, const CLMapGeometry::DistanceQueryResult &, CLMapDataUtil::MapMatcherScore &)", "CoreLocation: %s\n", v19);
      if (v19 != buf)
        free(v19);
      return 0;
    }
  }
  return v9;
}

BOOL sub_18F71E6D0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4 == v3)
    return 0;
  while (1)
  {
    v31 = 0uLL;
    *(_QWORD *)&v32 = 0;
    *((_QWORD *)&v32 + 1) = 0x3FF0000000000000;
    v33 = 0u;
    v34 = 0u;
    LODWORD(v35) = 0;
    result = sub_18F71E354((double *)a1, a3, (double *)v3, (uint64_t)&v31);
    if (!result)
      break;
    LODWORD(v35) = a2;
    *((_QWORD *)&v32 + 1) = *(_QWORD *)(a3 + 128);
    v9 = *(_QWORD *)(v3 + 104);
    v10 = *(_QWORD *)(v3 + 96);
    if (v10 >= v9)
    {
      v15 = *(_QWORD *)(v3 + 88);
      v16 = 0x8E38E38E38E38E39 * ((uint64_t)(v10 - v15) >> 3);
      v17 = v16 + 1;
      if (v16 + 1 > 0x38E38E38E38E38ELL)
        sub_18F5F7864();
      v18 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v15) >> 3);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x1C71C71C71C71C7)
        v19 = 0x38E38E38E38E38ELL;
      else
        v19 = v17;
      if (v19)
        v20 = (char *)sub_18F692D88(v3 + 104, v19);
      else
        v20 = 0;
      v21 = &v20[72 * v16];
      *(_OWORD *)v21 = v31;
      v22 = v32;
      v23 = v33;
      v24 = v34;
      *((_QWORD *)v21 + 8) = v35;
      *((_OWORD *)v21 + 2) = v23;
      *((_OWORD *)v21 + 3) = v24;
      *((_OWORD *)v21 + 1) = v22;
      v26 = *(char **)(v3 + 88);
      v25 = *(char **)(v3 + 96);
      v27 = v21;
      if (v25 != v26)
      {
        do
        {
          *(_OWORD *)(v27 - 72) = *(_OWORD *)(v25 - 72);
          v28 = *(_OWORD *)(v25 - 56);
          v29 = *(_OWORD *)(v25 - 40);
          v30 = *(_OWORD *)(v25 - 24);
          *((_DWORD *)v27 - 2) = *((_DWORD *)v25 - 2);
          *(_OWORD *)(v27 - 24) = v30;
          *(_OWORD *)(v27 - 40) = v29;
          *(_OWORD *)(v27 - 56) = v28;
          v27 -= 72;
          v25 -= 72;
        }
        while (v25 != v26);
        v25 = *(char **)(v3 + 88);
      }
      v14 = v21 + 72;
      *(_QWORD *)(v3 + 88) = v27;
      *(_QWORD *)(v3 + 96) = v21 + 72;
      *(_QWORD *)(v3 + 104) = &v20[72 * v19];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_OWORD *)v10 = v31;
      v11 = v32;
      v12 = v33;
      v13 = v34;
      *(_QWORD *)(v10 + 64) = v35;
      *(_OWORD *)(v10 + 32) = v12;
      *(_OWORD *)(v10 + 48) = v13;
      *(_OWORD *)(v10 + 16) = v11;
      v14 = (char *)(v10 + 72);
    }
    *(_QWORD *)(v3 + 96) = v14;
    sub_18F6B21C0((double *)v3);
    v3 += 112;
    if (v3 == v4)
      return 1;
  }
  return result;
}

uint64_t sub_18F71E8F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double v3;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  unint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  float **v29;
  unint64_t v30;
  __objc2_class *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  float *v35;
  double v36;
  double v37;
  double v38;
  float v39;
  float *v40;
  float *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  float *v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t i;
  uint64_t v53;
  float *v54;
  float *v55;
  unint64_t v56;
  unint64_t v57;
  float *v58;
  float *v59;
  float v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  NSObject *v67;
  char *v68;
  NSObject *v69;
  NSObject *v70;
  NSObject *info;
  unint64_t v72;
  unint64_t v73;
  NSObject *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t *v90;
  _OWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  __int128 *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  double v113;
  double v114;
  double v115;
  uint64_t v116;
  double v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  double v136;
  double v137;
  double v138;
  int v139;
  uint64_t v140;
  double v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  int v152;
  BOOL v153;
  _QWORD *v155;
  uint64_t v156;
  uint64_t *v157;
  double v158;
  double v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  double v164;
  double v165;
  int v166;
  uint64_t v167;
  double v168;
  int v169;
  uint64_t v170;
  double v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  NSObject *v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  int v188;
  int v189;
  int v190;
  int v191;
  void *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  int v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  int v204;
  int v205;
  int v206;
  uint64_t v207;
  char *v208;
  NSObject *v209;
  NSObject *v210;
  char *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  NSObject *v218;
  NSObject *v219;
  char *v220;
  NSObject *v221;
  char *v222;
  NSObject *v223;
  char *v224;
  NSObject *v225;
  unint64_t *v226;
  unint64_t v227;
  NSObject *v228;
  NSObject *v229;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  __int128 v243;
  std::__shared_weak_count *v244;
  _OWORD *v245;
  char v246;
  _OWORD *v247;
  void *__src;
  std::string *__str;
  uint64_t v250;
  uint64_t **v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  double v259;
  void **v260[2];
  double v261;
  _BYTE __p[22];
  __int16 v263;
  int v264;
  __int16 v265;
  int v266;
  __int16 v267;
  uint64_t v268;
  __int16 v269;
  int v270;
  __int16 v271;
  int v272;
  __int16 v273;
  uint64_t v274;
  __int16 v275;
  int v276;
  __int16 v277;
  uint64_t v278;
  __int16 v279;
  int v280;
  __int16 v281;
  int v282;
  __int16 v283;
  int v284;
  __int16 v285;
  int v286;
  __int16 v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  _BYTE v291[24];
  _BYTE buf[24];
  int v293;
  __int16 v294;
  _BYTE v295[6];
  _BYTE v296[20];
  __int128 v297;
  __int128 v298;
  __int16 v299;
  int v300;
  __int16 v301;
  void *v302[4];
  __int128 v303;
  char v304;
  __int16 v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  __int128 v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  _BYTE v322[64];
  __int16 v323;
  uint64_t v324;
  int v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  _BYTE v329[80];
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  _BYTE v348[64];
  __int16 v349;
  uint64_t v350;
  int v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  _BYTE v355[80];
  uint64_t v356;
  __int128 v357;
  __int128 v358;
  _BYTE v359[32];
  __int128 v360;
  int v361;
  uint64_t v362;
  uint64_t v363;
  char v364;
  int v365;
  uint64_t v366;

  v366 = *MEMORY[0x1E0C80C00];
  v3 = *(double *)(a1 + 384);
  if (*a2)
  {
    v256 = 0;
    v257 = 0;
    v258 = 0;
    sub_18F69E014(&v256, 0x60uLL);
    v250 = a3;
    v254 = a1;
    if (*(double *)(a3 + 264) <= 0.0)
    {
      v14 = *(_QWORD *)(a1 + 40);
      v10 = 96;
      if (&v256 != (uint64_t *)(a1 + 40))
      {
        v15 = *(_QWORD *)(a1 + 48);
        v16 = 0x6DB6DB6DB6DB6DB7 * ((v15 - v14) >> 4);
        if (v16 <= 0x5F)
          sub_18F73DCBC((uint64_t)&v256, v14, v15, v16);
      }
LABEL_47:
      v25 = *(_QWORD *)(a1 + 40);
      *(_BYTE *)(a1 + 88) = 0;
      v26 = *(_QWORD *)(a1 + 48) - v25;
      if (!v26)
        goto LABEL_137;
      v27 = 0x6DB6DB6DB6DB6DB7 * (v26 >> 4);
      v29 = (float **)(a1 + 64);
      v28 = *(void **)(a1 + 64);
      v30 = v27;
      if (v28)
      {
        *(_QWORD *)(a1 + 72) = v28;
        operator delete(v28);
        v30 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 4);
      }
      *v29 = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      sub_18F6A4620((void **)(a1 + 64), v30);
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
      v31 = &OBJC_METACLASS___CLHeadingInternal;
      if ((sub_18F71DF24((double **)(a1 + 40), v3) & 1) != 0)
      {
        v32 = *(_QWORD *)(a1 + 40);
        v33 = *(_QWORD *)(a1 + 48);
        if (v32 == v33)
        {
          v36 = 0.0;
        }
        else
        {
          v34 = (_QWORD *)(a1 + 80);
          v35 = *(float **)(a1 + 72);
          v36 = 0.0;
          v37 = 0.0;
          do
          {
            v38 = *(double *)(v32 + 64);
            v37 = v37 + v38;
            v39 = v37;
            if ((unint64_t)v35 >= *v34)
            {
              v41 = *v29;
              v42 = v35 - *v29;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62)
                sub_18F5F7864();
              v44 = *v34 - (_QWORD)v41;
              if (v44 >> 1 > v43)
                v43 = v44 >> 1;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                v45 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (char *)sub_18F62C554((uint64_t)v34, v45);
                v41 = *(float **)(a1 + 64);
                v35 = *(float **)(a1 + 72);
              }
              else
              {
                v46 = 0;
              }
              v47 = (float *)&v46[4 * v42];
              *v47 = v39;
              v40 = v47 + 1;
              while (v35 != v41)
              {
                v48 = *((_DWORD *)v35-- - 1);
                *((_DWORD *)v47-- - 1) = v48;
              }
              *(_QWORD *)(a1 + 64) = v47;
              *(_QWORD *)(a1 + 72) = v40;
              *(_QWORD *)(a1 + 80) = &v46[4 * v45];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *v35 = v39;
              v40 = v35 + 1;
            }
            v36 = v36 + v38 * v38;
            *(_QWORD *)(a1 + 72) = v40;
            v32 += 112;
            v35 = v40;
          }
          while (v32 != v33);
          if (v36 > 0.0)
          {
            *(double *)(a1 + 96) = 1.0 / v36;
            v50 = v256;
            v49 = v257;
            *(_DWORD *)buf = 0;
            sub_18F6B355C(__p, v27, buf);
            v31 = &OBJC_METACLASS___CLHeadingInternal;
            v51 = 0x9249249249249249 * ((uint64_t)(v49 - v50) >> 4) + v10;
            if (v51)
            {
              for (i = 0; i != v51; ++i)
              {
                v53 = random();
                v54 = *(float **)(a1 + 64);
                v55 = *(float **)(a1 + 72);
                if (v55 != v54)
                {
                  v56 = v55 - v54;
                  v55 = *(float **)(a1 + 64);
                  do
                  {
                    v57 = v56 >> 1;
                    v58 = &v55[v56 >> 1];
                    v60 = *v58;
                    v59 = v58 + 1;
                    v56 += ~(v56 >> 1);
                    if (v60 < (float)((float)v53 * 4.6566e-10))
                      v55 = v59;
                    else
                      v56 = v57;
                  }
                  while (v56);
                }
                ++*(_DWORD *)(*(_QWORD *)__p + (((char *)v55 - (char *)v54) << 30 >> 30));
              }
            }
            v62 = *(_QWORD *)(a1 + 40);
            v61 = *(_QWORD *)(a1 + 48);
            if (v62 == v61)
            {
              v61 = *(_QWORD *)(a1 + 40);
            }
            else
            {
              v63 = 0;
              v64 = *(_QWORD *)__p;
              do
              {
                if (v63 >= (*(_QWORD *)&__p[8] - v64) >> 2)
                  break;
                if (*(int *)(v64 + 4 * v63) >= 1)
                {
                  v65 = 0;
                  v66 = v257;
                  do
                  {
                    if (v66 >= v258)
                    {
                      v66 = sub_18F6B3118(&v256, v62);
                    }
                    else
                    {
                      sub_18F6B323C((uint64_t)&v258, v66, v62);
                      v66 += 112;
                    }
                    v257 = v66;
                    ++v65;
                    v64 = *(_QWORD *)__p;
                  }
                  while (v65 < *(_DWORD *)(*(_QWORD *)__p + 4 * v63));
                  v61 = *(_QWORD *)(a1 + 48);
                }
                v62 += 112;
                ++v63;
              }
              while (v62 != v61);
            }
            v72 = v257;
            v73 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v257 - v256) >> 4);
            if (v73 <= v10)
            {
              v76 = *(_QWORD *)(a1 + 40);
              *(_QWORD *)(a1 + 40) = v256;
              *(_QWORD *)(a1 + 48) = v72;
              v256 = v76;
              v257 = v61;
              v77 = *(_QWORD *)(a1 + 56);
              *(_QWORD *)(a1 + 56) = v258;
              v258 = v77;
              *(_BYTE *)(a1 + 88) = 1;
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v78 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                v79 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)buf = 134349312;
                *(double *)&buf[4] = v3;
                *(_WORD *)&buf[12] = 2050;
                *(_QWORD *)&buf[14] = v79;
                _os_log_impl(&dword_18F5B3000, v78, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Resampled,Neff,%{public}lf", buf, 0x16u);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v241 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)v291 = 134349312;
                *(double *)&v291[4] = v3;
                *(_WORD *)&v291[12] = 2050;
                *(_QWORD *)&v291[14] = v241;
                v75 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMParticleVector::resample(const CFAbsoluteTime, const int, CLParticleMapMatcherCommon::ParticleVector &)", "CoreLocation: %s\n", v75);
                goto LABEL_406;
              }
            }
            else
            {
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v74 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134349312;
                *(double *)&buf[4] = v3;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v73;
                _os_log_impl(&dword_18F5B3000, v74, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected number of particles after resampling,%{public}d", buf, 0x12u);
              }
              if (sub_18F5C4AE0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                *(_DWORD *)v291 = 134349312;
                *(double *)&v291[4] = v3;
                *(_WORD *)&v291[12] = 1026;
                *(_DWORD *)&v291[14] = v73;
                v75 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::resample(const CFAbsoluteTime, const int, CLParticleMapMatcherCommon::ParticleVector &)", "CoreLocation: %s\n", v75);
LABEL_406:
                if (v75 != buf)
                  free(v75);
                v31 = &OBJC_METACLASS___CLHeadingInternal;
              }
            }
            if (*(_QWORD *)__p)
            {
              *(_QWORD *)&__p[8] = *(_QWORD *)__p;
              operator delete(*(void **)__p);
            }
            if (v73 <= v10)
            {
LABEL_137:
              sub_18F71D87C(a1 + 104);
              v80 = *(_QWORD *)(a1 + 40);
              v252 = *(_QWORD *)(a1 + 48);
              if (v80 != v252)
              {
                v251 = (uint64_t **)(a1 + 112);
                __asm { FMOV            V0.2D, #-1.0 }
                v243 = _Q0;
                do
                {
                  v85 = *(std::__shared_weak_count **)(v80 + 8);
                  *(_QWORD *)v291 = *(_QWORD *)v80;
                  *(_QWORD *)&v291[8] = v85;
                  if (v85)
                  {
                    p_shared_owners = (unint64_t *)&v85->__shared_owners_;
                    do
                      v87 = __ldxr(p_shared_owners);
                    while (__stxr(v87 + 1, p_shared_owners));
                  }
                  sub_18F68FFC8((uint64_t)__p, (uint64_t)v291, *(_BYTE *)(v80 + 20));
                  if (v85)
                  {
                    v88 = (unint64_t *)&v85->__shared_owners_;
                    do
                      v89 = __ldaxr(v88);
                    while (__stlxr(v89 - 1, v88));
                    if (!v89)
                    {
                      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                      std::__shared_weak_count::__release_weak(v85);
                    }
                  }
                  if (sub_18F73D9D8(*(_QWORD *)(a1 + 120), (uint64_t *)__p))
                  {
                    v90 = (uint64_t *)sub_18F73DA6C(v251, (uint64_t *)__p, (uint64_t)__p);
                    if (!sub_18F71BE74(v90 + 7, v80))
                      goto LABEL_309;
                  }
                  else
                  {
                    *(_QWORD *)buf = 0xBFF0000000000000;
                    *(_QWORD *)&buf[8] = 0;
                    *(_QWORD *)&buf[16] = 0;
                    v293 = 0;
                    v294 = 1;
                    *(_DWORD *)&v295[2] = 0;
                    *(_OWORD *)&v296[4] = 0u;
                    v297 = 0u;
                    v298 = 0u;
                    LOBYTE(v299) = 0;
                    memset(v302, 0, sizeof(v302));
                    v303 = 0u;
                    v304 = 1;
                    v305 = 0;
                    v307 = 0;
                    v308 = 0;
                    v306 = 0;
                    v309 = v243;
                    v310 = 0;
                    v311 = 0;
                    v312 = 0xBFF0000000000000;
                    v324 = 0;
                    v325 = 0;
                    memset(&v322[32], 0, 32);
                    v323 = 0;
                    v326 = 0u;
                    v327 = 0u;
                    v328 = 0u;
                    memset(v329, 0, 27);
                    memset(&v329[32], 0, 48);
                    v321 = 0u;
                    memset(v322, 0, 30);
                    v319 = 0u;
                    v320 = 0u;
                    v317 = 0u;
                    v318 = 0u;
                    v315 = 0u;
                    v316 = 0u;
                    v313 = 0u;
                    v314 = 0u;
                    v331 = 0xBFF0000000000000;
                    v330 = 0;
                    v332 = 0;
                    v333 = 0;
                    v334 = 0xBFF0000000000000;
                    v335 = 0xBFF0000000000000;
                    v336 = 0;
                    v337 = 0;
                    v338 = 0xBFF0000000000000;
                    v350 = 0;
                    v351 = 0;
                    v349 = 0;
                    memset(&v348[32], 0, 32);
                    v354 = 0u;
                    memset(v355, 0, 27);
                    v352 = 0u;
                    v353 = 0u;
                    memset(&v355[32], 0, 48);
                    v347 = 0u;
                    memset(v348, 0, 30);
                    v345 = 0u;
                    v346 = 0u;
                    v343 = 0u;
                    v344 = 0u;
                    v341 = 0u;
                    v342 = 0u;
                    v339 = 0u;
                    v340 = 0u;
                    v356 = 0;
                    v357 = xmmword_18F775EF0;
                    v362 = 0;
                    v363 = 0;
                    v361 = 0;
                    v360 = 0u;
                    v358 = 0u;
                    memset(v359, 0, sizeof(v359));
                    v364 = 1;
                    v365 = -1;
                    if (!sub_18F71BE74((uint64_t *)buf, v80))
                    {
                      v212 = (std::__shared_weak_count *)*((_QWORD *)&v360 + 1);
                      if (*((_QWORD *)&v360 + 1))
                      {
                        v213 = (unint64_t *)(*((_QWORD *)&v360 + 1) + 8);
                        do
                          v214 = __ldaxr(v213);
                        while (__stlxr(v214 - 1, v213));
                        if (!v214)
                        {
                          ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                          std::__shared_weak_count::__release_weak(v212);
                        }
                      }
                      v260[0] = (void **)&v359[8];
                      sub_18F6B2D54(v260);
                      if (SHIBYTE(v344) < 0)
                        operator delete(*((void **)&v343 + 1));
                      if (SHIBYTE(v318) < 0)
                        operator delete(*((void **)&v317 + 1));
                      if (v302[0])
                      {
                        v302[1] = v302[0];
                        operator delete(v302[0]);
                      }
                      v215 = *(std::__shared_weak_count **)&buf[16];
                      if (*(_QWORD *)&buf[16])
                      {
                        v216 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
                        do
                          v217 = __ldaxr(v216);
                        while (__stlxr(v217 - 1, v216));
                        if (!v217)
                        {
                          ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                          std::__shared_weak_count::__release_weak(v215);
                        }
                      }
LABEL_309:
                      if (qword_1EE172158 != -1)
                        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                      v218 = off_1EE172160;
                      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 134349056;
                        *(double *)&buf[4] = v3;
                        _os_log_impl(&dword_18F5B3000, v218, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,candidate update failed", buf, 0xCu);
                      }
                      if (sub_18F5C4AE0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1EE172158 == -1)
                          goto LABEL_401;
LABEL_420:
                        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
LABEL_401:
                        *(_DWORD *)__p = 134349056;
                        *(double *)&__p[4] = v3;
                        v240 = (char *)_os_log_send_and_compose_impl();
                        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "CoreLocation: %s\n", v240);
                        if (v240 != buf)
                          free(v240);
                      }
                      goto LABEL_374;
                    }
                    *(double *)buf = v3;
                    v91 = sub_18F73DA6C(v251, (uint64_t *)__p, (uint64_t)__p);
                    sub_18F71D8F4((uint64_t)v91 + 56, (uint64_t)buf);
                    v92 = (std::__shared_weak_count *)*((_QWORD *)&v360 + 1);
                    if (*((_QWORD *)&v360 + 1))
                    {
                      v93 = (unint64_t *)(*((_QWORD *)&v360 + 1) + 8);
                      do
                        v94 = __ldaxr(v93);
                      while (__stlxr(v94 - 1, v93));
                      if (!v94)
                      {
                        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                        std::__shared_weak_count::__release_weak(v92);
                      }
                    }
                    v260[0] = (void **)&v359[8];
                    sub_18F6B2D54(v260);
                    if (SHIBYTE(v344) < 0)
                      operator delete(*((void **)&v343 + 1));
                    if (SHIBYTE(v318) < 0)
                      operator delete(*((void **)&v317 + 1));
                    if (v302[0])
                    {
                      v302[1] = v302[0];
                      operator delete(v302[0]);
                    }
                    v95 = *(std::__shared_weak_count **)&buf[16];
                    if (*(_QWORD *)&buf[16])
                    {
                      v96 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
                      do
                        v97 = __ldaxr(v96);
                      while (__stlxr(v97 - 1, v96));
                      if (!v97)
                      {
                        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                        std::__shared_weak_count::__release_weak(v95);
                      }
                    }
                  }
                  v80 += 112;
                }
                while (v80 != v252);
              }
              *(double *)(a1 + 104) = v3;
              v98 = *a2;
              v99 = (std::__shared_weak_count *)a2[1];
              v255 = *a2;
              if (v99)
              {
                v100 = (unint64_t *)&v99->__shared_owners_;
                do
                  v101 = __ldxr(v100);
                while (__stxr(v101 + 1, v100));
              }
              v102 = a1;
              v103 = *(_QWORD *)(a1 + 384);
              if (v98)
              {
                v104 = v250;
                if (*(_QWORD *)(a1 + 128))
                {
                  v105 = *(uint64_t **)(a1 + 112);
                  v246 = 1;
                  v253 = (uint64_t *)(a1 + 120);
                  if (v105 == (uint64_t *)(a1 + 120))
                    goto LABEL_354;
                  v244 = v99;
                  v106 = (__int128 *)(a1 + 376);
                  __src = (void *)(a1 + 528);
                  __str = (std::string *)(a1 + 504);
                  while (v105[141] != v105[140])
                  {
                    v107 = v105[143];
                    sub_18F7047B4(v107);
                    v108 = v105 + 143;
                    if (*(double *)(v107 + 40) <= 0.0)
                    {
                      v114 = 0.0;
                      v115 = 1.0;
                    }
                    else
                    {
                      v109 = v105[141];
                      v110 = v105[140];
                      if (v109 == v110)
                      {
                        v113 = 0.0;
                      }
                      else
                      {
                        v111 = 0x6DB6DB6DB6DB6DB7 * ((v109 - v110) >> 4);
                        v112 = 0.0;
                        do
                        {
                          v112 = v112 + *(double *)(v110 + 48);
                          v110 += 112;
                        }
                        while (v110 != v109);
                        v113 = v112 / (double)(unint64_t)v111;
                      }
                      v116 = *v108;
                      sub_18F7047B4(*v108);
                      v117 = 40.0 / *(double *)(v116 + 40);
                      if (v117 > 1.0)
                        v117 = 1.0;
                      if (v113 - v117 >= 0.0)
                        v114 = v113 - v117;
                      else
                        v114 = 0.0;
                      v118 = v113 + v117;
                      if (v118 <= 1.0)
                        v115 = v118;
                      else
                        v115 = 1.0;
                    }
                    v119 = v105[140];
                    v120 = v105[141];
                    if (v119 == v120)
                    {
                      v126 = v105[140];
                    }
                    else
                    {
                      do
                      {
                        v121 = *(double *)(v119 + 48);
                        if (v121 >= v114 && v121 <= v115)
                        {
                          ++*((_DWORD *)v105 + 44);
                          if (*(double *)(v119 + 56) > *((double *)v105 + 15))
                          {
                            sub_18F623A40(v105 + 8, (uint64_t *)v119);
                            v123 = *(_QWORD *)(v119 + 48);
                            v124 = *(_OWORD *)(v119 + 32);
                            *((_OWORD *)v105 + 5) = *(_OWORD *)(v119 + 16);
                            *((_OWORD *)v105 + 6) = v124;
                            v105[14] = v123;
                            v125 = *(_OWORD *)(v119 + 56);
                            *(_OWORD *)((char *)v105 + 129) = *(_OWORD *)(v119 + 65);
                            *(_OWORD *)(v105 + 15) = v125;
                            if ((uint64_t *)v119 != v105 + 8)
                              sub_18F692DD0((char *)v105 + 152, *(char **)(v119 + 88), *(_QWORD *)(v119 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v119 + 96) - *(_QWORD *)(v119 + 88)) >> 3));
                          }
                        }
                        v119 += 112;
                      }
                      while (v119 != v120);
                      v126 = v105[141];
                      v119 = v105[140];
                      v104 = v250;
                      v102 = v254;
                      v108 = v105 + 143;
                    }
                    *((_DWORD *)v105 + 45) = -1227133513 * ((unint64_t)(v126 - v119) >> 4);
                    v127 = *v106;
                    v128 = *(_OWORD *)(v254 + 392);
                    v129 = *(_OWORD *)(v254 + 424);
                    *((_OWORD *)v105 + 16) = *(_OWORD *)(v254 + 408);
                    *((_OWORD *)v105 + 17) = v129;
                    *((_OWORD *)v105 + 14) = v127;
                    *((_OWORD *)v105 + 15) = v128;
                    v130 = *(_OWORD *)(v254 + 440);
                    v131 = *(_OWORD *)(v254 + 456);
                    v132 = *(_OWORD *)(v254 + 488);
                    *((_OWORD *)v105 + 20) = *(_OWORD *)(v254 + 472);
                    *((_OWORD *)v105 + 21) = v132;
                    *((_OWORD *)v105 + 18) = v130;
                    *((_OWORD *)v105 + 19) = v131;
                    std::string::operator=((std::string *)(v105 + 44), __str);
                    memcpy(v105 + 47, __src, 0x118uLL);
                    v133 = v105[141];
                    v134 = v105[140];
                    if (v133 == v134)
                    {
                      v137 = 0.0;
                    }
                    else
                    {
                      v135 = 0x6DB6DB6DB6DB6DB7 * ((v133 - v134) >> 4);
                      v136 = 0.0;
                      do
                      {
                        v136 = v136 + *(double *)(v134 + 48);
                        v134 += 112;
                      }
                      while (v134 != v133);
                      v137 = v136 / (double)(unint64_t)v135;
                    }
                    v261 = v137;
                    if ((sub_18F6F0B68(v255, (uint64_t)(v105 + 28), v108, *((_BYTE *)v105 + 48), &v261, 1) & 1) == 0)
                    {
                      if (qword_1EE172158 != -1)
                        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                      v99 = v244;
                      v221 = off_1EE172160;
                      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 134349056;
                        *(_QWORD *)&buf[4] = v103;
                        _os_log_impl(&dword_18F5B3000, v221, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,interpolateOnRoad returned false, determining mean road position", buf, 0xCu);
                      }
                      if (sub_18F5C4AE0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1EE172158 != -1)
                          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                        *(_DWORD *)__p = 134349056;
                        *(_QWORD *)&__p[4] = v103;
                        v222 = (char *)_os_log_send_and_compose_impl();
                        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "CoreLocation: %s\n", v222);
                        if (v222 != buf)
                          free(v222);
                        v104 = v250;
                        v102 = v254;
                        v99 = v244;
                      }
                      goto LABEL_353;
                    }
                    v138 = *((double *)v105 + 136);
                    v139 = *((unsigned __int8 *)v105 + 48);
                    v140 = v105[143];
                    sub_18F7047B4(v140);
                    v141 = 1.0 - v138;
                    if (!v139)
                      v141 = v138;
                    v142 = v141 * *(double *)(v140 + 40);
                    *(_QWORD *)v291 = v291;
                    *(_QWORD *)&v291[8] = v291;
                    *(_QWORD *)&v291[16] = 0;
                    if (v142 <= 40.0)
                    {
                      if (((*(uint64_t (**)(uint64_t, _BYTE *, uint64_t *, _QWORD, uint64_t, double, double))(*(_QWORD *)v255 + 72))(v255, v291, v108, *((unsigned __int8 *)v105 + 48), 1, v138, v142 + 1.0) & 1) == 0)
                      {
                        if (qword_1EE172158 != -1)
                          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                        v99 = v244;
                        v225 = off_1EE172160;
                        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 134349056;
                          *(_QWORD *)&buf[4] = v103;
                          _os_log_impl(&dword_18F5B3000, v225, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,roadsConnected returned false, searching for connected candidates", buf, 0xCu);
                        }
                        if (sub_18F5C4AE0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1EE172158 != -1)
                            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                          *(_DWORD *)__p = 134349056;
                          *(_QWORD *)&__p[4] = v103;
                          v224 = (char *)_os_log_send_and_compose_impl();
                          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "CoreLocation: %s\n", v224);
LABEL_412:
                          if (v224 != buf)
                            free(v224);
                          v104 = v250;
                          v102 = v254;
                          v99 = v244;
                        }
LABEL_352:
                        sub_18F677A18((uint64_t *)v291);
                        goto LABEL_353;
                      }
                      v143 = *(_QWORD *)&v291[8];
                      if (*(_BYTE **)&v291[8] != v291)
                      {
                        v144 = 0;
                        v145 = 0;
                        v247 = v105 + 146;
                        v245 = v105 + 23;
                        while (1)
                        {
                          v146 = *(std::__shared_weak_count **)(v143 + 40);
                          v260[0] = *(void ***)(v143 + 32);
                          v260[1] = (void **)&v146->__vftable;
                          if (v146)
                          {
                            v147 = (unint64_t *)&v146->__shared_owners_;
                            do
                              v148 = __ldxr(v147);
                            while (__stxr(v148 + 1, v147));
                          }
                          sub_18F68FFC8((uint64_t)__p, (uint64_t)v260, *(_BYTE *)(v143 + 24));
                          if (v146)
                          {
                            v149 = (unint64_t *)&v146->__shared_owners_;
                            do
                              v150 = __ldaxr(v149);
                            while (__stlxr(v150 - 1, v149));
                            if (!v150)
                            {
                              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                              std::__shared_weak_count::__release_weak(v146);
                            }
                          }
                          v151 = v105[4];
                          v152 = *((unsigned __int8 *)v105 + 48);
                          v153 = *(_QWORD *)__p == v151 && __p[16] == v152;
                          if (!v153 || *(_QWORD *)&__p[8] != v105[5])
                          {
                            if (v151 != *(_QWORD *)__p || __p[16] == v152)
                              ++v145;
                            if (sub_18F73D9D8(*v253, (uint64_t *)__p))
                            {
                              v155 = sub_18F73DA6C((uint64_t **)(v254 + 112), (uint64_t *)__p, (uint64_t)__p);
                              v156 = v155[143];
                              sub_18F7047B4(v156);
                              v157 = v155 + 143;
                              if (*(double *)(v156 + 40) >= 40.0)
                              {
                                v160 = *v157;
                                sub_18F7047B4(*v157);
                                v159 = 1.0 - 40.0 / *(double *)(v160 + 40);
                                if (__p[16])
                                {
                                  v159 = 0.0;
                                  v158 = 40.0 / *(double *)(v160 + 40);
                                }
                                else
                                {
                                  v158 = 1.0;
                                }
                              }
                              else
                              {
                                v158 = 1.0;
                                v159 = 0.0;
                              }
                              v161 = v155[140];
                              v162 = v155[141];
                              if (v161 != v162)
                              {
                                v163 = 0;
                                v164 = 0.0;
                                do
                                {
                                  v165 = *(double *)(v161 + 48);
                                  v166 = v165 >= v159 && v165 <= v158;
                                  if (v165 < v159 || v165 > v158)
                                    v165 = -0.0;
                                  v164 = v164 + v165;
                                  v163 += v166;
                                  v161 += 112;
                                }
                                while (v161 != v162);
                                if (v163)
                                {
                                  ++*((_DWORD *)v105 + 274);
                                  *((_BYTE *)v105 + 209) = 1;
                                  v167 = v163
                                       - 1227133513 * ((unint64_t)(v105[141] - v105[140]) >> 4);
                                  if ((int)v167 <= (int)v144)
                                  {
                                    if ((_DWORD)v167 == (_DWORD)v144 || (int)v167 > *((_DWORD *)v105 + 290))
                                    {
                                      *v247 = *(_OWORD *)__p;
                                      *((_BYTE *)v105 + 1184) = __p[16];
                                      *((_DWORD *)v105 + 290) = v167;
                                    }
                                    v167 = v144;
                                  }
                                  else
                                  {
                                    v168 = v164 / (double)v163;
                                    v259 = v168;
                                    *v247 = *v245;
                                    *((_BYTE *)v105 + 1184) = *((_BYTE *)v105 + 200);
                                    *v245 = *(_OWORD *)__p;
                                    v169 = __p[16];
                                    *((_BYTE *)v105 + 200) = __p[16];
                                    *((_DWORD *)v105 + 275) = v163;
                                    *((_DWORD *)v105 + 290) = *((_DWORD *)v105 + 45);
                                    *((_DWORD *)v105 + 45) = v167;
                                    *((double *)v105 + 139) = v168;
                                    v170 = *v157;
                                    sub_18F7047B4(*v157);
                                    v171 = 1.0 - v168;
                                    if (v169)
                                      v171 = v168;
                                    *((double *)v105 + 138) = v171 * *(double *)(v170 + 40);
                                    v172 = *(_OWORD *)(v254 + 488);
                                    v174 = *(_OWORD *)(v254 + 440);
                                    v173 = *(_OWORD *)(v254 + 456);
                                    *((_OWORD *)v105 + 47) = *(_OWORD *)(v254 + 472);
                                    *((_OWORD *)v105 + 48) = v172;
                                    *((_OWORD *)v105 + 45) = v174;
                                    *((_OWORD *)v105 + 46) = v173;
                                    v175 = *v106;
                                    v176 = *(_OWORD *)(v254 + 392);
                                    v177 = *(_OWORD *)(v254 + 424);
                                    *((_OWORD *)v105 + 43) = *(_OWORD *)(v254 + 408);
                                    *((_OWORD *)v105 + 44) = v177;
                                    *((_OWORD *)v105 + 41) = v175;
                                    *((_OWORD *)v105 + 42) = v176;
                                    std::string::operator=((std::string *)(v105 + 98), __str);
                                    memcpy(v105 + 101, __src, 0x118uLL);
                                    if ((sub_18F6F0B68(v255, (uint64_t)(v105 + 82), v157, __p[16], &v259, 1) & 1) == 0)
                                    {
                                      if (qword_1EE172158 != -1)
                                        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                                      v104 = v250;
                                      v102 = v254;
                                      v99 = v244;
                                      v223 = off_1EE172160;
                                      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                                      {
                                        *(_DWORD *)buf = 134349056;
                                        *(_QWORD *)&buf[4] = v103;
                                        _os_log_impl(&dword_18F5B3000, v223, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,interpolateOnRoad returned false, determining outgoing road position", buf, 0xCu);
                                      }
                                      if (sub_18F5C4AE0(115, 2))
                                      {
                                        bzero(buf, 0x65CuLL);
                                        if (qword_1EE172158 != -1)
                                          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                                        v289 = 134349056;
                                        v290 = v103;
                                        v224 = (char *)_os_log_send_and_compose_impl();
                                        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "CoreLocation: %s\n", v224);
                                        goto LABEL_412;
                                      }
                                      goto LABEL_352;
                                    }
                                  }
                                  v144 = v167;
                                }
                              }
                            }
                          }
                          v143 = *(_QWORD *)(v143 + 8);
                          if ((_BYTE *)v143 == v291)
                            goto LABEL_261;
                        }
                      }
                    }
                    v145 = 0;
                    LODWORD(v144) = 0;
LABEL_261:
                    *((_BYTE *)v105 + 208) = v145 > 1;
                    if (qword_1EE172158 != -1)
                      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                    v179 = off_1EE172160;
                    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                    {
                      v180 = v105[4];
                      v181 = *((unsigned __int8 *)v105 + 48);
                      v182 = v105[15];
                      v183 = *((unsigned __int8 *)v105 + 209);
                      v184 = *((unsigned __int8 *)v105 + 208);
                      v185 = v105[23];
                      v186 = *((unsigned __int8 *)v105 + 200);
                      v187 = 0x6DB6DB6DB6DB6DB7 * ((v105[141] - v105[140]) >> 4);
                      v188 = *((_DWORD *)v105 + 275);
                      v190 = *((_DWORD *)v105 + 44);
                      v189 = *((_DWORD *)v105 + 45);
                      v191 = *((_DWORD *)v105 + 290);
                      v192 = (void *)v105[146];
                      *(_DWORD *)buf = 134352641;
                      *(_QWORD *)&buf[4] = v103;
                      *(_WORD *)&buf[12] = 2049;
                      *(_QWORD *)&buf[14] = v180;
                      *(_WORD *)&buf[22] = 1026;
                      v293 = v181;
                      v294 = 1026;
                      *(_DWORD *)v295 = v190;
                      *(_WORD *)&v295[4] = 2050;
                      *(_QWORD *)v296 = v182;
                      *(_WORD *)&v296[8] = 1026;
                      *(_DWORD *)&v296[10] = v183;
                      *(_WORD *)&v296[14] = 1026;
                      *(_DWORD *)&v296[16] = v184;
                      LOWORD(v297) = 2049;
                      *(_QWORD *)((char *)&v297 + 2) = v185;
                      WORD5(v297) = 1026;
                      HIDWORD(v297) = v186;
                      LOWORD(v298) = 2050;
                      *(_QWORD *)((char *)&v298 + 2) = v187;
                      WORD5(v298) = 1026;
                      HIDWORD(v298) = v188;
                      v299 = 1026;
                      v300 = v189;
                      v301 = 1026;
                      LODWORD(v302[0]) = v144;
                      WORD2(v302[0]) = 1026;
                      *(_DWORD *)((char *)v302 + 6) = v191;
                      WORD1(v302[1]) = 2049;
                      *(void **)((char *)&v302[1] + 4) = v192;
                      _os_log_impl(&dword_18F5B3000, v179, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,candidate,ID,%{private}llu,fwd,%{public}d,countArndMean,%{public}d,bestParticleScore,%{public}.9lf,isCombined,%{public}d,isMulti,%{public}d,combinedWith,%{private}llu,fwd,%{public}d,incomingCnt,%{public}lu,outgoingCnt,%{public}d,combinedCnt,%{public}d,bestCombinedCnt,%{public}d,secondBestCombinedCnt,%{public}d,secondCombinedWith,%{private}llu", buf, 0x74u);
                    }
                    if (sub_18F5C4AE0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1EE172158 != -1)
                        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                      v195 = v105[4];
                      v196 = *((unsigned __int8 *)v105 + 48);
                      v197 = v105[15];
                      v198 = *((unsigned __int8 *)v105 + 209);
                      v199 = *((unsigned __int8 *)v105 + 208);
                      v200 = v105[23];
                      v201 = *((unsigned __int8 *)v105 + 200);
                      v202 = 0x6DB6DB6DB6DB6DB7 * ((v105[141] - v105[140]) >> 4);
                      v203 = *((_DWORD *)v105 + 275);
                      v205 = *((_DWORD *)v105 + 44);
                      v204 = *((_DWORD *)v105 + 45);
                      v206 = *((_DWORD *)v105 + 290);
                      v207 = v105[146];
                      *(_DWORD *)__p = 134352641;
                      *(_QWORD *)&__p[4] = v103;
                      *(_WORD *)&__p[12] = 2049;
                      *(_QWORD *)&__p[14] = v195;
                      v263 = 1026;
                      v264 = v196;
                      v265 = 1026;
                      v266 = v205;
                      v267 = 2050;
                      v268 = v197;
                      v269 = 1026;
                      v270 = v198;
                      v271 = 1026;
                      v272 = v199;
                      v273 = 2049;
                      v274 = v200;
                      v275 = 1026;
                      v276 = v201;
                      v277 = 2050;
                      v278 = v202;
                      v279 = 1026;
                      v280 = v203;
                      v281 = 1026;
                      v282 = v204;
                      v283 = 1026;
                      v284 = v144;
                      v285 = 1026;
                      v286 = v206;
                      v287 = 2049;
                      v288 = v207;
                      v208 = (char *)_os_log_send_and_compose_impl();
                      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "CoreLocation: %s\n", v208);
                      if (v208 != buf)
                        free(v208);
                    }
                    sub_18F677A18((uint64_t *)v291);
                    v193 = (uint64_t *)v105[1];
                    if (v193)
                    {
                      do
                      {
                        v194 = v193;
                        v193 = (uint64_t *)*v193;
                      }
                      while (v193);
                    }
                    else
                    {
                      do
                      {
                        v194 = (uint64_t *)v105[2];
                        _ZF = *v194 == (_QWORD)v105;
                        v105 = v194;
                      }
                      while (!_ZF);
                    }
                    v105 = v194;
                    v102 = v254;
                    v104 = v250;
                    if (v194 == v253)
                    {
                      v246 = 1;
LABEL_338:
                      v99 = v244;
                      goto LABEL_354;
                    }
                  }
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                  v99 = v244;
                  v219 = off_1EE172160;
                  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134349056;
                    *(_QWORD *)&buf[4] = v103;
                    _os_log_impl(&dword_18F5B3000, v219, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to determine best particle", buf, 0xCu);
                  }
                  if (sub_18F5C4AE0(115, 0))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172158 != -1)
                      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                    *(_DWORD *)__p = 134349056;
                    *(_QWORD *)&__p[4] = v103;
                    v220 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "CoreLocation: %s\n", v220);
                    if (v220 != buf)
                      free(v220);
                    v246 = 0;
                    v104 = v250;
                    v102 = v254;
                    goto LABEL_338;
                  }
LABEL_353:
                  v246 = 0;
LABEL_354:
                  if (v99)
                  {
                    v226 = (unint64_t *)&v99->__shared_owners_;
                    do
                      v227 = __ldaxr(v226);
                    while (__stlxr(v227 - 1, v226));
                    if (!v227)
                    {
                      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                      std::__shared_weak_count::__release_weak(v99);
                    }
                  }
                  if ((v246 & 1) == 0)
                  {
                    if (qword_1EE172158 != -1)
                      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                    v228 = off_1EE172160;
                    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 134349056;
                      *(double *)&buf[4] = v3;
                      _os_log_impl(&dword_18F5B3000, v228, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,assessCandidates failed", buf, 0xCu);
                    }
                    if (sub_18F5C4AE0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1EE172158 == -1)
                        goto LABEL_401;
                      goto LABEL_420;
                    }
                    goto LABEL_374;
                  }
                  if ((sub_18F721650(v102, v104) & 1) == 0)
                  {
                    if (qword_1EE172158 != -1)
                      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                    v229 = off_1EE172160;
                    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 134349056;
                      *(double *)&buf[4] = v3;
                      _os_log_impl(&dword_18F5B3000, v229, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,extractSolution failed", buf, 0xCu);
                    }
                    if (sub_18F5C4AE0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1EE172158 != -1)
                        goto LABEL_420;
                      goto LABEL_401;
                    }
                    goto LABEL_374;
                  }
                  v13 = 1;
LABEL_375:
                  *(_QWORD *)buf = &v256;
                  sub_18F6B2D54((void ***)buf);
                  return v13;
                }
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v210 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134349056;
                  *(_QWORD *)&buf[4] = v103;
                  _os_log_impl(&dword_18F5B3000, v210, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, zero candidates,assessCandidates", buf, 0xCu);
                }
                if (!sub_18F5C4AE0(115, 0))
                  goto LABEL_353;
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 == -1)
                {
LABEL_290:
                  *(_DWORD *)__p = 134349056;
                  *(_QWORD *)&__p[4] = v103;
                  v211 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)", "CoreLocation: %s\n", v211);
                  if (v211 != buf)
                    free(v211);
                  v246 = 0;
                  v104 = v250;
                  v102 = a1;
                  goto LABEL_354;
                }
              }
              else
              {
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v104 = v250;
                v209 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134349056;
                  *(_QWORD *)&buf[4] = v103;
                  _os_log_impl(&dword_18F5B3000, v209, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, geometry is null", buf, 0xCu);
                }
                if (!sub_18F5C4AE0(115, 0))
                  goto LABEL_353;
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 == -1)
                  goto LABEL_290;
              }
              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              goto LABEL_290;
            }
LABEL_112:
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
            info = v31[8].info;
            if (os_log_type_enabled(info, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349056;
              *(double *)&buf[4] = v3;
              _os_log_impl(&dword_18F5B3000, info, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,resample failed", buf, 0xCu);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                goto LABEL_420;
              goto LABEL_401;
            }
LABEL_374:
            v13 = 0;
            goto LABEL_375;
          }
          v31 = &OBJC_METACLASS___CLHeadingInternal;
        }
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v69 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349312;
          *(double *)&buf[4] = v3;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v36;
          _os_log_impl(&dword_18F5B3000, v69, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,invalid Neffsum,%{public}.3lf", buf, 0x16u);
        }
        if (!sub_18F5C4AE0(115, 0))
        {
LABEL_107:
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v70 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134349056;
            *(double *)&buf[4] = v3;
            _os_log_impl(&dword_18F5B3000, v70, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to compute likelihoods and csw vector", buf, 0xCu);
          }
          if (sub_18F5C4AE0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
            *(_DWORD *)__p = 134349056;
            *(double *)&__p[4] = v3;
            v232 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::resample(const CFAbsoluteTime, const int, CLParticleMapMatcherCommon::ParticleVector &)", "CoreLocation: %s\n", v232);
            if (v232 != buf)
              free(v232);
          }
          goto LABEL_112;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        *(_DWORD *)__p = 134349312;
        *(double *)&__p[4] = v3;
        *(_WORD *)&__p[12] = 2050;
        *(double *)&__p[14] = v36;
        v68 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::computeLikelihoodsAndCSWVector(const CFAbsoluteTime)", "CoreLocation: %s\n", v68);
      }
      else
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v67 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v3;
          _os_log_impl(&dword_18F5B3000, v67, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to computeLikelihoods", buf, 0xCu);
        }
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_107;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        *(_DWORD *)__p = 134349056;
        *(double *)&__p[4] = v3;
        v68 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::computeLikelihoodsAndCSWVector(const CFAbsoluteTime)", "CoreLocation: %s\n", v68);
      }
      if (v68 != buf)
        free(v68);
      goto LABEL_107;
    }
    if (*(_BYTE *)(a1 + 604))
      goto LABEL_4;
    if (*(double *)(a1 + 560) <= 0.0)
    {
      v10 = 96;
      v11 = 10;
    }
    else
    {
      v17 = *(double *)(a1 + 472);
      v10 = 96;
      v11 = 10;
      if (v17 >= 0.0 && v17 < 0.001)
      {
        if (*(double *)(a3 + 424) <= 0.0)
        {
          if (*(_BYTE *)(a3 + 468))
          {
LABEL_4:
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
            v6 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              v7 = *(_QWORD *)(a1 + 384);
              v8 = *(_QWORD *)(a1 + 472);
              v9 = *(unsigned __int8 *)(a1 + 604);
              *(_DWORD *)buf = 134349568;
              *(_QWORD *)&buf[4] = v7;
              *(_WORD *)&buf[12] = 2050;
              *(_QWORD *)&buf[14] = v8;
              *(_WORD *)&buf[22] = 1026;
              v293 = v9;
              _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Reducing particles to half,speed,%{public}.1lf,static,%{public}d", buf, 0x1Cu);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v233 = *(_QWORD *)(a1 + 384);
              v234 = *(_QWORD *)(a1 + 472);
              v235 = *(unsigned __int8 *)(a1 + 604);
              *(_DWORD *)__p = 134349568;
              *(_QWORD *)&__p[4] = v233;
              *(_WORD *)&__p[12] = 2050;
              *(_QWORD *)&__p[14] = v234;
              v263 = 1026;
              v264 = v235;
              v236 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "CoreLocation: %s\n", v236);
              if (v236 != buf)
                free(v236);
              v10 = 48;
              v11 = 5;
            }
            else
            {
              v10 = 48;
              v11 = 5;
            }
          }
        }
        else
        {
          v18 = *(double *)(a3 + 336);
          _ZF = (v18 >= 0.001 || v18 < 0.0) && *(_BYTE *)(a3 + 468) == 0;
          if (!_ZF)
            goto LABEL_4;
        }
      }
    }
    if (*(_BYTE *)(a3 + 504)
      && *(_BYTE *)(a3 + 232)
      && *(_QWORD *)(a3 + 120)
      && *(unsigned __int8 *)(a3 + 761) == *(unsigned __int8 *)(a1 + 897))
    {
      v21 = v257;
      do
      {
        if (v21 >= v258)
        {
          v21 = sub_18F6B3118(&v256, a3 + 120);
        }
        else
        {
          sub_18F6B323C((uint64_t)&v258, v21, a3 + 120);
          v21 += 112;
        }
        v257 = v21;
        --v11;
      }
      while (v11);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v22 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v23 = *(_QWORD *)(a1 + 384);
        v24 = *(_QWORD *)(a3 + 176);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v23;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v24;
        _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Added prior particle,score,%{public}.8lf", buf, 0x16u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v237 = *(_QWORD *)(a1 + 384);
        v238 = *(_QWORD *)(a3 + 176);
        *(_DWORD *)__p = 134349312;
        *(_QWORD *)&__p[4] = v237;
        *(_WORD *)&__p[12] = 2050;
        *(_QWORD *)&__p[14] = v238;
        v239 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "CoreLocation: %s\n", v239);
        if (v239 != buf)
          free(v239);
      }
    }
    goto LABEL_47;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v12 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    *(double *)&buf[4] = v3;
    _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, geometry is null", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    *(_DWORD *)__p = 134349056;
    *(double *)&__p[4] = v3;
    v231 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::prepareCandidates(CLMapGeometryPtr, const MMSnapData &)", "CoreLocation: %s\n", v231);
    if (v231 != buf)
      free(v231);
  }
  return 0;
}

void sub_18F721544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  sub_18F677A18(&a61);
  sub_18F5D6004((uint64_t)&a34);
  a59 = (uint64_t)&a36;
  sub_18F6B2D54((void ***)&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_18F721650(uint64_t a1, uint64_t a2)
{
  double v2;
  int *v5;
  uint64_t v6;
  BOOL v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t *v15;
  int v16;
  NSObject *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  NSObject *v61;
  double v62;
  _BOOL4 v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  int v72;
  char v73;
  int v74;
  _BOOL4 v75;
  NSObject *v76;
  int v77;
  double *v83;
  double *i;
  uint64_t v85;
  int v86;
  NSObject *v87;
  double v88;
  double v89;
  double v90;
  _BOOL4 v91;
  NSObject *v92;
  char *v93;
  uint64_t **v94;
  __int128 v95;
  char v96;
  _OWORD *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t **v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  void *v111;
  __int128 v112;
  std::__shared_weak_count *v113;
  unint64_t *p_shared_owners;
  unint64_t v115;
  char v116;
  double v118;
  double v119;
  float v120;
  NSObject *v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  double v125;
  uint64_t v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double *v132;
  double *v133;
  uint64_t v134;
  NSObject *v135;
  char *v136;
  NSObject *v137;
  NSObject *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  int v143;
  double v144;
  uint64_t v145;
  double v146;
  double v147;
  long double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  BOOL v157;
  double v158;
  NSObject *v159;
  NSObject *v160;
  char *v161;
  NSObject *v162;
  NSObject *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  double v172;
  double v173;
  double v174;
  NSObject *v175;
  char *v176;
  NSObject *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  double v182;
  int v183;
  char *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  NSObject *v189;
  char *v190;
  NSObject *v191;
  char *v192;
  uint64_t v193;
  double v194;
  char *v195;
  NSObject *v196;
  char *v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  NSObject *v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;
  double *v208;
  std::string *__str;
  uint64_t **v210;
  uint64_t *v211;
  uint64_t v212;
  _BYTE v213[24];
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  __int128 v219;
  int v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  __int128 v223;
  __int128 v224;
  double v225;
  _OWORD v226[2];
  void *__p;
  _BYTE *v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  char v232;
  unint64_t v233;
  _BYTE v234[22];
  __int16 v235;
  double v236;
  _QWORD v237[3];
  _BYTE v238[40];
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  unint64_t v244;
  char v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  _BYTE v249[22];
  __int16 v250;
  double v251;
  _BYTE v252[32];
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  _QWORD v261[35];
  uint8_t buf[112];
  __int128 v263;
  __int128 v264;
  unint64_t v265;
  char v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;

  v270 = *MEMORY[0x1E0C80C00];
  v2 = *(double *)(a1 + 384);
  if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 40))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v8 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl(&dword_18F5B3000, v8, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,particle count,0", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_331;
    goto LABEL_411;
  }
  if (!*(_QWORD *)(a1 + 128))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v9 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,candidate count,0", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_331;
    goto LABEL_411;
  }
  v5 = (int *)sub_18F71CDA8((uint64_t *)(a1 + 104));
  if (!v5)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v10 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl(&dword_18F5B3000, v10, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,bestCandidate is nullptr", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_331;
    goto LABEL_411;
  }
  v6 = (uint64_t)v5;
  if (v5[31] <= 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v11 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,particles in candidate,0", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_331;
    goto LABEL_411;
  }
  if (!*((_QWORD *)v5 + 1))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v12 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,best particle road in best candidate is nullptr", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
    {
LABEL_331:
      *(_DWORD *)v252 = 134349056;
      *(double *)&v252[4] = v2;
      v178 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v178);
      if (v178 != (char *)buf)
        free(v178);
      return 0;
    }
LABEL_411:
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    goto LABEL_331;
  }
  v212 = a2;
  if (*(_QWORD *)(a1 + 864))
  {
    sub_18F677990((_QWORD *)(a1 + 864));
    *(_BYTE *)(a1 + 880) = 0;
  }
  v211 = (uint64_t *)(v6 + 8);
  v210 = (uint64_t **)(a1 + 864);
  v232 = 0;
  v230 = 0u;
  v231 = 0u;
  v229 = 0u;
  v233 = 0xBFF0000000000000;
  if (&v229 != (__int128 *)(v6 + 1064))
    sub_18F73DCBC((uint64_t)&v229, *(_QWORD *)(v6 + 1064), *(_QWORD *)(v6 + 1072), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v6 + 1072) - *(_QWORD *)(v6 + 1064)) >> 4));
  if (*(_BYTE *)(v6 + 153))
  {
    if (*(_QWORD *)(a2 + 120))
    {
      v7 = *(_BYTE *)(a2 + 504)
        && (sub_18F69B170(a2 + 120, (uint64_t)buf), *(_QWORD *)buf == *(_QWORD *)(v6 + 128))
        && buf[16] == *(unsigned __int8 *)(v6 + 144)
        && *(_QWORD *)&buf[8] == *(_QWORD *)(v6 + 136);
      v15 = (uint64_t *)(v6 + 128);
      if (!sub_18F73D9D8(*(_QWORD *)(a1 + 120), (uint64_t *)(v6 + 128)))
        goto LABEL_96;
      if (v7)
      {
        v16 = 1;
LABEL_58:
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v17 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349312;
          *(double *)&buf[4] = v2;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v16;
          _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,extractSolution,using outgoing particles,previous,%{public}d", buf, 0x12u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          *(_DWORD *)v252 = 134349312;
          *(double *)&v252[4] = v2;
          *(_WORD *)&v252[12] = 1026;
          *(_DWORD *)&v252[14] = v16;
          v188 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v188);
          if (v188 != (char *)buf)
            free(v188);
        }
        *(_BYTE *)(a1 + 896) = 1;
        v18 = sub_18F73DA6C((uint64_t **)(a1 + 112), v15, (uint64_t)v15);
        v19 = *((_QWORD *)v18 + 140);
        v20 = *((_QWORD *)v18 + 141);
        if (v20 - v19 >= 1)
        {
          v21 = (v20 - v19) / 112;
          v22 = *((_QWORD *)&v229 + 1);
          if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v230 - *((_QWORD *)&v229 + 1)) >> 4) >= v21)
          {
            if (v21 <= 0)
            {
              v29 = *((_QWORD *)&v229 + 1);
              __str = (std::string *)(v19 + 112 * v21);
              v30 = *((_QWORD *)&v229 + 1) + 112 * v21;
              v31 = *((_QWORD *)&v229 + 1) - 112 * v21;
              v32 = *((_QWORD *)&v229 + 1);
              if (v31 < *((_QWORD *)&v229 + 1))
              {
                v33 = *((_QWORD *)&v229 + 1) - 112 * v21;
                v32 = *((_QWORD *)&v229 + 1);
                do
                {
                  *(_OWORD *)v32 = *(_OWORD *)v33;
                  *(_QWORD *)v33 = 0;
                  *(_QWORD *)(v33 + 8) = 0;
                  v34 = *(_OWORD *)(v33 + 16);
                  v35 = *(_OWORD *)(v33 + 32);
                  *(_QWORD *)(v32 + 48) = *(_QWORD *)(v33 + 48);
                  *(_OWORD *)(v32 + 16) = v34;
                  *(_OWORD *)(v32 + 32) = v35;
                  v36 = *(_OWORD *)(v33 + 56);
                  *(_OWORD *)(v32 + 65) = *(_OWORD *)(v33 + 65);
                  *(_OWORD *)(v32 + 56) = v36;
                  *(_QWORD *)(v32 + 96) = 0;
                  *(_QWORD *)(v32 + 104) = 0;
                  *(_QWORD *)(v32 + 88) = 0;
                  *(_OWORD *)(v32 + 88) = *(_OWORD *)(v33 + 88);
                  *(_QWORD *)(v32 + 104) = *(_QWORD *)(v33 + 104);
                  *(_QWORD *)(v33 + 88) = 0;
                  *(_QWORD *)(v33 + 96) = 0;
                  *(_QWORD *)(v33 + 104) = 0;
                  v32 += 112;
                  v33 += 112;
                }
                while (v33 < v22);
              }
              *((_QWORD *)&v229 + 1) = v32;
              if (v29 != v30)
              {
                v37 = 0;
                v38 = -16 * ((v29 - v30) >> 4);
                do
                {
                  v39 = v29 + v37;
                  sub_18F62B3EC(v29 + v37 - 112, (__int128 *)(v31 + v37 - 112));
                  v40 = *(_QWORD *)(v31 + v37 - 64);
                  v41 = *(_OWORD *)(v31 + v37 - 80);
                  *(_OWORD *)(v39 - 96) = *(_OWORD *)(v31 + v37 - 96);
                  *(_OWORD *)(v39 - 80) = v41;
                  *(_QWORD *)(v39 - 64) = v40;
                  v42 = *(_OWORD *)(v31 + v37 - 56);
                  *(_OWORD *)(v39 - 47) = *(_OWORD *)(v31 + v37 - 47);
                  *(_OWORD *)(v39 - 56) = v42;
                  sub_18F73D790(v29 + v37 - 24, (__n128 *)(v31 + v37 - 24));
                  v37 -= 112;
                }
                while (v38 != v37);
              }
              for (; (std::string *)v19 != __str; v22 += 112)
              {
                sub_18F623A40((_QWORD *)v22, (uint64_t *)v19);
                v43 = *(_QWORD *)(v19 + 48);
                v44 = *(_OWORD *)(v19 + 32);
                *(_OWORD *)(v22 + 16) = *(_OWORD *)(v19 + 16);
                *(_OWORD *)(v22 + 32) = v44;
                *(_QWORD *)(v22 + 48) = v43;
                v45 = *(_OWORD *)(v19 + 56);
                *(_OWORD *)(v22 + 65) = *(_OWORD *)(v19 + 65);
                *(_OWORD *)(v22 + 56) = v45;
                if (v22 != v19)
                  sub_18F692DD0((char *)(v22 + 88), *(char **)(v19 + 88), *(_QWORD *)(v19 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v19 + 96) - *(_QWORD *)(v19 + 88)) >> 3));
                v19 += 112;
              }
            }
            else
            {
              *(_QWORD *)v252 = *((_QWORD *)&v229 + 1);
              v237[0] = *((_QWORD *)&v229 + 1);
              *(_QWORD *)buf = &v230;
              *(_QWORD *)&buf[8] = v237;
              *(_QWORD *)&buf[16] = v252;
              buf[24] = 0;
              v27 = *((_QWORD *)&v229 + 1);
              if (v19 != v20)
              {
                v28 = v19;
                do
                {
                  sub_18F6B323C((uint64_t)&v230, v27, v28);
                  v28 += 112;
                  v27 = *(_QWORD *)v252 + 112;
                  *(_QWORD *)v252 += 112;
                }
                while (v28 != v20);
              }
              *((_QWORD *)&v229 + 1) = v27;
            }
          }
          else
          {
            v23 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v229 + 1) - v229) >> 4);
            v24 = v23 + v21;
            if ((unint64_t)(v23 + v21) > 0x249249249249249)
              sub_18F5F7864();
            if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v230 - v229) >> 4) > v24)
              v24 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v230 - v229) >> 4);
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v230 - v229) >> 4)) >= 0x124924924924924)
              v25 = 0x249249249249249;
            else
              v25 = v24;
            *(_QWORD *)&buf[32] = &v230;
            if (v25)
              v26 = (char *)sub_18F6B3350((uint64_t)&v230, v25);
            else
              v26 = 0;
            v46 = (uint64_t)&v26[112 * v23];
            *(_QWORD *)buf = v26;
            *(_QWORD *)&buf[8] = v46;
            *(_QWORD *)&buf[16] = v46;
            *(_QWORD *)&buf[24] = &v26[112 * v25];
            v47 = 112 * v21;
            v48 = v46 + 112 * v21;
            do
            {
              sub_18F6B323C(*(uint64_t *)&buf[32], v46, v19);
              v46 += 112;
              v19 += 112;
              v47 -= 112;
            }
            while (v47);
            *(_QWORD *)&buf[16] = v48;
            sub_18F6B3398((uint64_t)&v230, v22, v22, v229, v229, *(uint64_t *)&buf[8], *(uint64_t *)&buf[8]);
            *(_QWORD *)&buf[8] = v49;
            v50 = *((_QWORD *)&v229 + 1);
            v51 = *(_QWORD *)&buf[16];
            if (*((_QWORD *)&v229 + 1) != v22)
            {
              do
              {
                *(_OWORD *)v51 = *(_OWORD *)v22;
                *(_QWORD *)v22 = 0;
                *(_QWORD *)(v22 + 8) = 0;
                v52 = *(_OWORD *)(v22 + 16);
                v53 = *(_OWORD *)(v22 + 32);
                *(_QWORD *)(v51 + 48) = *(_QWORD *)(v22 + 48);
                *(_OWORD *)(v51 + 16) = v52;
                *(_OWORD *)(v51 + 32) = v53;
                v54 = *(_OWORD *)(v22 + 56);
                *(_OWORD *)(v51 + 65) = *(_OWORD *)(v22 + 65);
                *(_OWORD *)(v51 + 56) = v54;
                *(_QWORD *)(v51 + 96) = 0;
                *(_QWORD *)(v51 + 104) = 0;
                *(_QWORD *)(v51 + 88) = 0;
                *(_OWORD *)(v51 + 88) = *(_OWORD *)(v22 + 88);
                *(_QWORD *)(v51 + 104) = *(_QWORD *)(v22 + 104);
                *(_QWORD *)(v22 + 88) = 0;
                *(_QWORD *)(v22 + 96) = 0;
                *(_QWORD *)(v22 + 104) = 0;
                v51 += 112;
                v22 += 112;
              }
              while (v22 != v50);
              v49 = *(_QWORD *)&buf[8];
              v22 = *((_QWORD *)&v229 + 1);
            }
            v55 = v229;
            v56 = v230;
            *(_QWORD *)&v229 = v49;
            *((_QWORD *)&v229 + 1) = v51;
            *(_QWORD *)&v230 = *(_QWORD *)&buf[24];
            *(_QWORD *)&buf[16] = v22;
            *(_QWORD *)&buf[24] = v56;
            *(_QWORD *)&buf[8] = v55;
            *(_QWORD *)buf = v55;
            sub_18F6B34E8((void **)buf);
          }
        }
        goto LABEL_96;
      }
    }
    else
    {
      v15 = (uint64_t *)(v6 + 128);
      if (!sub_18F73D9D8(*(_QWORD *)(a1 + 120), (uint64_t *)(v6 + 128)))
        goto LABEL_96;
    }
    if (!sub_18F71C0B8(v6, (int *)(a1 + 792)))
      goto LABEL_96;
    v16 = 0;
    goto LABEL_58;
  }
LABEL_96:
  if (*((_QWORD *)&v229 + 1) == (_QWORD)v229)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v61 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl(&dword_18F5B3000, v61, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,solutionParticleVector has zero particles", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      *(_DWORD *)v252 = 134349056;
      *(double *)&v252[4] = v2;
      v185 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v185);
      if (v185 != (char *)buf)
        free(v185);
    }
    v13 = 0;
    goto LABEL_256;
  }
  v57 = *(_OWORD *)(v6 + 248);
  v255 = *(_OWORD *)(v6 + 232);
  v256 = v57;
  v58 = *(_OWORD *)(v6 + 184);
  *(_OWORD *)v252 = *(_OWORD *)(v6 + 168);
  *(_OWORD *)&v252[16] = v58;
  v59 = *(_OWORD *)(v6 + 216);
  v253 = *(_OWORD *)(v6 + 200);
  v254 = v59;
  v60 = *(_OWORD *)(v6 + 280);
  v257 = *(_OWORD *)(v6 + 264);
  v258 = v60;
  if (*(char *)(v6 + 319) < 0)
  {
    sub_18F5C6990(&v259, *(void **)(v6 + 296), *(_QWORD *)(v6 + 304));
  }
  else
  {
    v259 = *(_OWORD *)(v6 + 296);
    v260 = *(_QWORD *)(v6 + 312);
  }
  memcpy(v261, (const void *)(v6 + 320), sizeof(v261));
  v62 = *(double *)(v6 + 360);
  v63 = v62 < 19.0 && v62 > 0.0;
  v64 = v212;
  if (v63)
  {
    v261[5] = 0x4033000000000000;
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v65 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v66 = *(_QWORD *)(v6 + 360);
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = v2;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v66;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = 0x4033000000000000;
      _os_log_impl(&dword_18F5B3000, v65, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,deweightCourse,courseUnc,%{public}.1lf,deweightUnc,%{public}.1lf", buf, 0x20u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v186 = *(_QWORD *)(v6 + 360);
      LODWORD(v237[0]) = 134349568;
      *(double *)((char *)v237 + 4) = v2;
      WORD2(v237[1]) = 2050;
      *(_QWORD *)((char *)&v237[1] + 6) = v186;
      HIWORD(v237[2]) = 2050;
      *(_QWORD *)v238 = 0x4033000000000000;
      v187 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v187);
      if (v187 != (char *)buf)
        free(v187);
      v64 = v212;
    }
  }
  if (sub_18F70534C(*(_QWORD *)(v6 + 8), 0, *(double *)(v6 + 56), 7.5))
    goto LABEL_116;
  if ((*(_DWORD *)(*v211 + 20) & 0xFFFFFFFE) != 8)
    goto LABEL_139;
  if (*(_QWORD *)(v64 + 120)
    && ((sub_18F69B170((uint64_t)v211, (uint64_t)buf), sub_18F69B170(v64 + 120, (uint64_t)v237), *(_QWORD *)buf == v237[0])
     && buf[16] == LOBYTE(v237[2])
     && *(_QWORD *)&buf[8] == v237[1]
     || *(_BYTE *)(a1 + 896)
     && (sub_18F69B170(v64 + 120, (uint64_t)&v221), *(_QWORD *)(v6 + 128) == v221)
     && *(unsigned __int8 *)(v6 + 144) == v223
     && *(std::__shared_weak_count **)(v6 + 136) == v222))
  {
    v74 = 1;
    v75 = sub_18F70534C(*(_QWORD *)(v6 + 8), 1, *(double *)(v6 + 56), 3.75);
  }
  else
  {
    v74 = 0;
    v75 = 0;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v76 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349568;
    *(double *)&buf[4] = v2;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v75;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v74;
    _os_log_impl(&dword_18F5B3000, v76, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,invalidateCourse,particleIsOnSegmentsThatHasSmallCurves,%{public}d,particleInOnSameRoadAsPriorSnap,%{public}d", buf, 0x18u);
  }
  v64 = v212;
  v77 = v74 & v75;
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    LODWORD(v237[0]) = 134349568;
    *(double *)((char *)v237 + 4) = v2;
    WORD2(v237[1]) = 1026;
    *(_DWORD *)((char *)&v237[1] + 6) = v75;
    WORD1(v237[2]) = 1026;
    HIDWORD(v237[2]) = v74;
    v190 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v190);
    if (v190 != (char *)buf)
      free(v190);
    v64 = v212;
    if ((v77 & 1) != 0)
      goto LABEL_116;
LABEL_139:
    v73 = 0;
    if (!v63)
      goto LABEL_142;
    goto LABEL_140;
  }
  if (!v77)
    goto LABEL_139;
LABEL_116:
  *((_QWORD *)&v257 + 1) = 0xBFF0000000000000;
  v261[5] = 0xBFF0000000000000;
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v67 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v68 = *(_QWORD *)(v6 + 1088);
    v69 = *(_QWORD *)v68;
    v70 = *(double *)(v6 + 56);
    sub_18F7047B4(v68);
    v71 = *(double *)(v68 + 40);
    v72 = sub_18F70525C(*(_QWORD *)(v6 + 1088));
    *(_DWORD *)buf = 134349825;
    *(double *)&buf[4] = v2;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = v69;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&buf[24] = v70 * v71;
    *(_WORD *)&buf[32] = 1026;
    *(_DWORD *)&buf[34] = v72;
    _os_log_impl(&dword_18F5B3000, v67, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Particle is on a curved section of road,%{private}lld,projection,%{public}.2lf,deweightCourse,%{public}d", buf, 0x26u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v179 = *(_QWORD *)(v6 + 1088);
    v180 = *(_QWORD *)v179;
    v181 = *(double *)(v6 + 56);
    sub_18F7047B4(v179);
    v182 = *(double *)(v179 + 40);
    v183 = sub_18F70525C(*(_QWORD *)(v6 + 1088));
    LODWORD(v237[0]) = 134349825;
    *(double *)((char *)v237 + 4) = v2;
    WORD2(v237[1]) = 2049;
    *(_QWORD *)((char *)&v237[1] + 6) = v180;
    HIWORD(v237[2]) = 2050;
    *(double *)v238 = v181 * v182;
    *(_WORD *)&v238[8] = 1026;
    *(_DWORD *)&v238[10] = v183;
    v184 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v184);
    if (v184 != (char *)buf)
      free(v184);
    v73 = 1;
    v64 = v212;
  }
  else
  {
    v73 = 1;
  }
LABEL_140:
  memset(buf, 0, 24);
  *(_OWORD *)&buf[24] = xmmword_18F772330;
  buf[40] = 0;
  memset(&buf[48], 0, 32);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&buf[80] = _Q0;
  *(_OWORD *)&buf[96] = _Q0;
  v263 = _Q0;
  v264 = _Q0;
  v265 = 0xBFF0000000000000;
  v266 = 0;
  v267 = _Q0;
  v268 = _Q0;
  v269 = _Q0;
  sub_18F724F20((uint64_t)buf, (uint64_t)v252, 0);
  v83 = (double *)*((_QWORD *)&v229 + 1);
  for (i = (double *)v229; i != v83; i += 14)
  {
    memset(v237, 0, sizeof(v237));
    *(_QWORD *)v238 = 0x3FF0000000000000;
    memset(&v238[8], 0, 32);
    LODWORD(v239) = 0;
    sub_18F71E354((double *)a1, (uint64_t)buf, i, (uint64_t)v237);
    LODWORD(v239) = 1;
    *(_QWORD *)v238 = 0x3FF0000000000000;
    sub_18F724F78(i, (uint64_t)v237);
    sub_18F6B21C0(i);
  }
LABEL_142:
  sub_18F71DF24((double **)&v229, v2);
  sub_18F71DB14((char *)&v221, v229, *((uint64_t *)&v229 + 1));
  if ((v73 & 1) != 0)
    goto LABEL_143;
  if (!v221)
    goto LABEL_143;
  if (!*(_BYTE *)(v64 + 504))
    goto LABEL_143;
  if (!*(_QWORD *)(v64 + 120))
    goto LABEL_143;
  sub_18F69B170(v64 + 120, (uint64_t)buf);
  sub_18F69B170((uint64_t)&v221, (uint64_t)v237);
  if (*(_QWORD *)buf != v237[0] || buf[16] != LOBYTE(v237[2]) || *(_QWORD *)&buf[8] != v237[1])
    goto LABEL_143;
  v124 = v225;
  v125 = *(double *)(v64 + 168);
  v126 = v221;
  sub_18F7047B4(v221);
  v127 = *(double *)(v126 + 40);
  v128 = *(double *)(a1 + 856);
  sub_18F72513C((uint64_t)v249, (uint64_t)&v229);
  v129 = (v124 - v125) * v127;
  v130 = v128 * 5.0;
  if (v129 > v128 * 5.0)
  {
    memset(v237, 0, sizeof(v237));
    *(_OWORD *)v238 = xmmword_18F772330;
    v238[16] = 0;
    *(_OWORD *)&v238[24] = 0u;
    v239 = 0u;
    __asm { FMOV            V0.2D, #-1.0 }
    v240 = _Q0;
    v241 = _Q0;
    v242 = _Q0;
    v243 = _Q0;
    v244 = 0xBFF0000000000000;
    v245 = 0;
    v246 = _Q0;
    v247 = _Q0;
    v248 = _Q0;
    sub_18F724F20((uint64_t)v237, (uint64_t)v252, 0);
    *((_QWORD *)&v241 + 1) = 0xBFF0000000000000;
    *((_QWORD *)&v242 + 1) = 0xBFF0000000000000;
    v132 = *(double **)v249;
    v133 = *(double **)&v249[8];
    if (*(_QWORD *)v249 == *(_QWORD *)&v249[8])
    {
      v134 = *(_QWORD *)v249;
    }
    else
    {
      do
      {
        memset(buf, 0, 24);
        *(_QWORD *)&buf[24] = 0x3FF0000000000000;
        memset(&buf[32], 0, 36);
        sub_18F71E354((double *)a1, (uint64_t)v237, v132, (uint64_t)buf);
        *(_DWORD *)&buf[64] = 1;
        *(_QWORD *)&buf[24] = 0x3FF0000000000000;
        sub_18F724F78(v132, (uint64_t)buf);
        sub_18F6B21C0(v132);
        v132 += 14;
      }
      while (v132 != v133);
      v134 = *(_QWORD *)v249;
      v132 = *(double **)&v249[8];
    }
    sub_18F71DB14((char *)&v214, v134, (uint64_t)v132);
    v171 = v214;
    if (v214)
    {
      v172 = *(double *)&v219;
      v173 = *(double *)(v212 + 168);
      sub_18F7047B4(v214);
      v174 = (v172 - v173) * *(double *)(v171 + 40);
      if (v174 >= v130)
        goto LABEL_328;
      sub_18F72521C((uint64_t)&v229, (uint64_t)v249);
      sub_18F69B218((uint64_t)&v221, (uint64_t)&v214);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v175 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349568;
        *(double *)&buf[4] = v2;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v129;
        *(_WORD *)&buf[22] = 2050;
        *(double *)&buf[24] = v174;
        _os_log_impl(&dword_18F5B3000, v175, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,invalidated course and recomputed solution,changeInDistance,%{public}.2lf,newChangeInDistance,%{public}.2lf", buf, 0x20u);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_328;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      *(_DWORD *)v234 = 134349568;
      *(double *)&v234[4] = v2;
      *(_WORD *)&v234[12] = 2050;
      *(double *)&v234[14] = v129;
      v235 = 2050;
      v236 = v174;
      v176 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v176);
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v177 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v2;
        _os_log_impl(&dword_18F5B3000, v177, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,newParticle road is nullptr,1", buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_328;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      *(_DWORD *)v234 = 134349056;
      *(double *)&v234[4] = v2;
      v176 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v176);
    }
    if (v176 != (char *)buf)
      free(v176);
LABEL_328:
    sub_18F692600((uint64_t)&v214);
    v64 = v212;
  }
  sub_18F72528C((uint64_t)v249);
LABEL_143:
  if (!*(_BYTE *)(v64 + 504)
    || !*(_BYTE *)(v6 + 152)
    || !*(_BYTE *)(v6 + 153)
    || !v221
    || !*v211
    || (v85 = v212 + 120, !*(_QWORD *)(v212 + 120))
    || (sub_18F69B170(v212 + 120, (uint64_t)buf), sub_18F69B170((uint64_t)&v221, (uint64_t)v237), *(_QWORD *)buf == v237[0])
    && buf[16] == LOBYTE(v237[2])
    && *(_QWORD *)&buf[8] == v237[1]
    || (sub_18F69B170((uint64_t)&v221, (uint64_t)&v214), v214 != *(_QWORD *)(v6 + 128))
    || v216 != *(unsigned __int8 *)(v6 + 144)
    || v215 != *(_QWORD *)(v6 + 136)
    || (sub_18F69B170((uint64_t)v211, (uint64_t)v249),
        sub_18F69B170(v85, (uint64_t)v234),
        *(_QWORD *)v249 != *(_QWORD *)v234)
    || v249[16] != v234[16]
    || *(_QWORD *)&v249[8] != *(_QWORD *)&v234[8]
    || sub_18F7252D0((uint64_t)&v221, (double *)a1, v85) <= *(double *)(a1 + 856) * 5.0)
  {
    v91 = 0;
    goto LABEL_178;
  }
  sub_18F72513C((uint64_t)&v214, (uint64_t)&v229);
  sub_18F69B170((uint64_t)&v221, (uint64_t)v213);
  v86 = sub_18F71DC34(&v214, (uint64_t)v213, v2);
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v87 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    *(double *)&buf[4] = v2;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v86;
    _os_log_impl(&dword_18F5B3000, v87, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,eliminated outgoing roadKey for local solution,%{public}d", buf, 0x12u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    LODWORD(v237[0]) = 134349312;
    *(double *)((char *)v237 + 4) = v2;
    WORD2(v237[1]) = 1026;
    *(_DWORD *)((char *)&v237[1] + 6) = v86;
    v205 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v205);
    if (v205 != (char *)buf)
      free(v205);
  }
  if (v215 == v214)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v189 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v2;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v86;
      _os_log_impl(&dword_18F5B3000, v189, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Number of particles 0 after eliminating particles on combined road,%{public}d", buf, 0x12u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      LODWORD(v237[0]) = 134349312;
      *(double *)((char *)v237 + 4) = v2;
      WORD2(v237[1]) = 1026;
      *(_DWORD *)((char *)&v237[1] + 6) = v86;
      v206 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v206);
      if (v206 != (char *)buf)
        free(v206);
    }
    v91 = 0;
    goto LABEL_388;
  }
  sub_18F71DB14((char *)v237, v214, v215);
  if (!v237[0])
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v191 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl(&dword_18F5B3000, v191, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,newParticle road is nullptr,2", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_386;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    *(_DWORD *)v249 = 134349056;
    *(double *)&v249[4] = v2;
    v192 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v192);
    goto LABEL_427;
  }
  v88 = sub_18F7252D0((uint64_t)v237, (double *)a1, v85);
  if (*(double *)(a1 + 472) < 0.75)
    goto LABEL_168;
  v89 = *(double *)(a1 + 856);
  if (v88 > v89 * 0.8)
    goto LABEL_168;
  if (v88 < v89 && !*(_BYTE *)(a1 + 897))
  {
    v198 = *(double *)(a1 + 480);
    v199 = *(float *)v238;
    v200 = *((float *)&v223 + 2);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v201 = vabdd_f64(v198, v199);
    v202 = vabdd_f64(v198, v200);
    v203 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = v2;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v201;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = v202;
      _os_log_impl(&dword_18F5B3000, v203, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,use new particle, course check, crumbCourseDiffWithNewParticle,%{public}.1lf,crumbCourseDiffWithPreviousParticle,%{public}.1lf", buf, 0x20u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      *(_DWORD *)v249 = 134349568;
      *(double *)&v249[4] = v2;
      *(_WORD *)&v249[12] = 2050;
      *(double *)&v249[14] = v201;
      v250 = 2050;
      v251 = v202;
      v207 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v207);
      if (v207 != (char *)buf)
        free(v207);
    }
    if (v201 < 35.0 && v202 > 60.0)
    {
LABEL_168:
      v90 = vabdd_f64(*(double *)(a1 + 480), *((float *)&v223 + 2));
      v91 = v90 < 30.0;
      sub_18F69B218((uint64_t)&v221, (uint64_t)v237);
      sub_18F72521C((uint64_t)&v229, (uint64_t)&v214);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v92 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = v2;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v90 < 30.0;
        _os_log_impl(&dword_18F5B3000, v92, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,new particle without the outgoing road accepted,courseIsUnreliable,%{public}d", buf, 0x12u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        *(_DWORD *)v249 = 134349312;
        *(double *)&v249[4] = v2;
        *(_WORD *)&v249[12] = 1026;
        *(_DWORD *)&v249[14] = v90 < 30.0;
        v93 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v93);
        if (v93 != (char *)buf)
          free(v93);
      }
      goto LABEL_387;
    }
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v196 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    *(double *)&buf[4] = v2;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v86;
    _os_log_impl(&dword_18F5B3000, v196, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not using local solution without outgoing road,%{public}d", buf, 0x12u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    *(_DWORD *)v249 = 134349312;
    *(double *)&v249[4] = v2;
    *(_WORD *)&v249[12] = 1026;
    *(_DWORD *)&v249[14] = v86;
    v192 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v192);
LABEL_427:
    if (v192 != (char *)buf)
      free(v192);
  }
LABEL_386:
  v91 = 0;
LABEL_387:
  sub_18F692600((uint64_t)v237);
LABEL_388:
  sub_18F72528C((uint64_t)&v214);
LABEL_178:
  v94 = (uint64_t **)(a1 + 256);
  sub_18F623A40((_QWORD *)(a1 + 256), &v221);
  v95 = v224;
  *(_OWORD *)(a1 + 272) = v223;
  *(_OWORD *)(a1 + 288) = v95;
  *(double *)(a1 + 304) = v225;
  *(_OWORD *)(a1 + 312) = v226[0];
  *(_OWORD *)(a1 + 321) = *(_OWORD *)((char *)v226 + 9);
  if ((uint64_t *)(a1 + 256) != &v221)
    sub_18F692DD0((char *)(a1 + 344), (char *)__p, (uint64_t)v228, 0x8E38E38E38E38E39 * ((v228 - (_BYTE *)__p) >> 3));
  *(_BYTE *)(a1 + 882) = 1;
  v96 = *(_BYTE *)(v6 + 152);
  if (v96)
  {
    v96 = *(_BYTE *)(v6 + 153);
    if (v96)
      v96 = *(_DWORD *)(v6 + 1044) > (int)(-1227133513 * ((*(_QWORD *)(v6 + 1072) - *(_QWORD *)(v6 + 1064)) >> 4));
  }
  *(_BYTE *)(a1 + 368) = v96;
  if (!*(_QWORD *)(a1 + 256))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v135 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl(&dword_18F5B3000, v135, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,best particle road is nullptr", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_246;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    LODWORD(v237[0]) = 134349056;
    *(double *)((char *)v237 + 4) = v2;
    v136 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v136);
    goto LABEL_373;
  }
  v97 = (_OWORD *)(a1 + 376);
  v208 = (double *)(a1 + 312);
  if (*(_BYTE *)(a1 + 896)
    && (sub_18F69B170(a1 + 256, (uint64_t)buf), *(_QWORD *)(v6 + 128) == *(_QWORD *)buf)
    && *(unsigned __int8 *)(v6 + 144) == buf[16]
    && *(_QWORD *)(v6 + 136) == *(_QWORD *)&buf[8])
  {
    v98 = *(_OWORD *)(v6 + 600);
    v99 = *(_OWORD *)(v6 + 616);
    v100 = *(_OWORD *)(v6 + 648);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(v6 + 632);
    *(_OWORD *)(a1 + 424) = v100;
    *v97 = v98;
    *(_OWORD *)(a1 + 392) = v99;
    v101 = *(_OWORD *)(v6 + 664);
    v102 = *(_OWORD *)(v6 + 680);
    v103 = *(_OWORD *)(v6 + 712);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(v6 + 696);
    *(_OWORD *)(a1 + 488) = v103;
    *(_OWORD *)(a1 + 440) = v101;
    *(_OWORD *)(a1 + 456) = v102;
    std::string::operator=((std::string *)(a1 + 504), (const std::string *)(v6 + 728));
    memcpy((void *)(a1 + 528), (const void *)(v6 + 752), 0x118uLL);
    if (*(_QWORD *)(v6 + 8))
    {
      v104 = (uint64_t **)(a1 + 864);
      sub_18F623A40(v210, v211);
      *(_BYTE *)(a1 + 880) = *(_BYTE *)(v6 + 28);
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v162 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v2;
      }
      v104 = (uint64_t **)(a1 + 864);
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        LODWORD(v237[0]) = 134349056;
        *(double *)((char *)v237 + 4) = v2;
        v204 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v204);
        if (v204 != (char *)buf)
          free(v204);
        v104 = (uint64_t **)(a1 + 864);
      }
    }
    if (*v104)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v163 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v164 = **v104;
        v165 = *(_QWORD *)(v6 + 128);
        v166 = *(_QWORD *)v208;
        *(_DWORD *)buf = 134349825;
        *(double *)&buf[4] = v2;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v164;
        *(_WORD *)&buf[22] = 2049;
        *(_QWORD *)&buf[24] = v165;
        *(_WORD *)&buf[32] = 2050;
        *(_QWORD *)&buf[34] = v166;
        _os_log_impl(&dword_18F5B3000, v163, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Using outgoing,incomingID,%{private}lld,outgoingID,%{private}lld,score,%{public}.8lf", buf, 0x2Au);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v167 = **v210;
        v168 = *(_QWORD *)(v6 + 128);
        v169 = *(_QWORD *)v208;
        LODWORD(v237[0]) = 134349825;
        *(double *)((char *)v237 + 4) = v2;
        WORD2(v237[1]) = 2049;
        *(_QWORD *)((char *)&v237[1] + 6) = v167;
        HIWORD(v237[2]) = 2049;
        *(_QWORD *)v238 = v168;
        *(_WORD *)&v238[8] = 2050;
        *(_QWORD *)&v238[10] = v169;
        v170 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v170);
        if (v170 != (char *)buf)
          free(v170);
      }
    }
  }
  else
  {
    v105 = *(_OWORD *)(v6 + 168);
    v106 = *(_OWORD *)(v6 + 184);
    v107 = *(_OWORD *)(v6 + 216);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(v6 + 200);
    *(_OWORD *)(a1 + 424) = v107;
    *v97 = v105;
    *(_OWORD *)(a1 + 392) = v106;
    v108 = *(_OWORD *)(v6 + 232);
    v109 = *(_OWORD *)(v6 + 248);
    v110 = *(_OWORD *)(v6 + 280);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(v6 + 264);
    *(_OWORD *)(a1 + 488) = v110;
    *(_OWORD *)(a1 + 440) = v108;
    *(_OWORD *)(a1 + 456) = v109;
    std::string::operator=((std::string *)(a1 + 504), (const std::string *)(v6 + 296));
    memcpy((void *)(a1 + 528), (const void *)(v6 + 320), 0x118uLL);
  }
  *(_BYTE *)(a1 + 881) = 0;
  memset(buf, 0, sizeof(buf));
  buf[20] = 1;
  sub_18F62B3EC(a1 + 136, (__int128 *)buf);
  v111 = *(void **)(a1 + 224);
  v112 = *(_OWORD *)&buf[32];
  *(_OWORD *)(a1 + 152) = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 168) = v112;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)&buf[48];
  *(_OWORD *)(a1 + 192) = *(_OWORD *)&buf[56];
  *(_OWORD *)(a1 + 201) = *(_OWORD *)&buf[65];
  if (v111)
  {
    *(_QWORD *)(a1 + 232) = v111;
    operator delete(v111);
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
  }
  *(_OWORD *)(a1 + 224) = *(_OWORD *)&buf[88];
  v113 = *(std::__shared_weak_count **)&buf[8];
  *(_QWORD *)(a1 + 240) = *(_QWORD *)&buf[104];
  memset(&buf[88], 0, 24);
  if (v113)
  {
    p_shared_owners = (unint64_t *)&v113->__shared_owners_;
    do
      v115 = __ldaxr(p_shared_owners);
    while (__stlxr(v115 - 1, p_shared_owners));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  *(_QWORD *)(a1 + 248) = 0xBFF0000000000000;
  if (!*(_BYTE *)(a1 + 368) || *(double *)(a1 + 568) <= 0.0 || *(double *)(a1 + 480) < 0.0)
  {
    v116 = 1;
    goto LABEL_202;
  }
  v142 = *(_QWORD *)(a1 + 384);
  v143 = *(unsigned __int8 *)(a1 + 276);
  v144 = *(double *)(a1 + 304);
  v145 = *(_QWORD *)(a1 + 256);
  sub_18F7047B4(v145);
  if (v143)
    v146 = 1.0 - v144;
  else
    v146 = v144;
  v147 = *(double *)(v145 + 40);
  v148 = sub_18F5BD064((double *)a1, *(double *)(a1 + 432), *(double *)(a1 + 440), *(double *)(v212 + 296), *(double *)(v212 + 304), *(double *)(a1 + 448));
  v149 = *(double *)(v212 + 544);
  v150 = *(double *)(a1 + 480);
  v151 = -1.0;
  if (v149 >= 0.0)
  {
    v152 = fmod(v150 - v149, 360.0);
    if (v152 < 0.0)
      v152 = v152 + 360.0;
    if (v152 > 180.0)
      v152 = v152 + -360.0;
    v151 = fabs(v152);
  }
  v153 = v146 * v147;
  v154 = fmod(v150 - *(float *)(a1 + 280), 360.0);
  if (v154 < 0.0)
    v154 = v154 + 360.0;
  if (v154 > 180.0)
    v154 = v154 + -360.0;
  v155 = fabs(v154);
  v156 = *(double *)(a1 + 568);
  if (v156 > 0.0 && v156 < 45.0 && v155 > 30.0)
  {
    v157 = 0;
LABEL_279:
    v116 = 1;
    if (v153 >= 0.0 && v153 < 35.0 && !v157)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v159 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v142;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v153;
        _os_log_impl(&dword_18F5B3000, v159, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not snapping course,reason,distanceToIntersection,%{public}.1lf", buf, 0x16u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        LODWORD(v237[0]) = 134349312;
        *(_QWORD *)((char *)v237 + 4) = v142;
        WORD2(v237[1]) = 2050;
        *(double *)((char *)&v237[1] + 6) = v153;
        v197 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::shallUseSnapCourse(const MMSnapData &)", "CoreLocation: %s\n", v197);
        if (v197 != (char *)buf)
          free(v197);
      }
      v116 = 0;
    }
    goto LABEL_288;
  }
  v158 = *(double *)(v212 + 432);
  v116 = 1;
  if (v158 > 0.0 && v158 < 45.0)
  {
    v157 = v151 <= 30.0;
    goto LABEL_279;
  }
LABEL_288:
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v160 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134350080;
    *(_QWORD *)&buf[4] = v142;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v153;
    *(_WORD *)&buf[22] = 2050;
    *(long double *)&buf[24] = v148;
    *(_WORD *)&buf[32] = 2050;
    *(double *)&buf[34] = v155;
    *(_WORD *)&buf[42] = 2050;
    *(double *)&buf[44] = v151;
    _os_log_impl(&dword_18F5B3000, v160, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,distToNextMulti,%{public}.1lf,distFromPriorCrumb,%{public}.1lf,fabsCourseDiffWithSnap,%{public}.1lf,fabsCourseDiffWithPriorFullSnap,%{public}.1lf", buf, 0x34u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    LODWORD(v237[0]) = 134350080;
    *(_QWORD *)((char *)v237 + 4) = v142;
    WORD2(v237[1]) = 2050;
    *(double *)((char *)&v237[1] + 6) = v153;
    HIWORD(v237[2]) = 2050;
    *(long double *)v238 = v148;
    *(_WORD *)&v238[8] = 2050;
    *(double *)&v238[10] = v155;
    *(_WORD *)&v238[18] = 2050;
    *(double *)&v238[20] = v151;
    v161 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::shallUseSnapCourse(const MMSnapData &)", "CoreLocation: %s\n", v161);
    if (v161 != (char *)buf)
      free(v161);
  }
LABEL_202:
  *(_BYTE *)(a1 + 848) = v116 ^ 1;
  *(_QWORD *)(a1 + 888) = *(_QWORD *)(a1 + 96);
  memset(v237, 0, sizeof(v237));
  *(_OWORD *)v238 = xmmword_18F772330;
  v238[16] = 0;
  *(_OWORD *)&v238[24] = 0u;
  v239 = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  v240 = _Q0;
  v241 = _Q0;
  v242 = _Q0;
  v243 = _Q0;
  v244 = 0xBFF0000000000000;
  v245 = 0;
  v246 = _Q0;
  v247 = _Q0;
  v248 = _Q0;
  sub_18F724F20((uint64_t)v237, a1 + 376, *(unsigned __int8 *)(a1 + 904));
  if (v91)
  {
    *((_QWORD *)&v241 + 1) = 0xBFF0000000000000;
    *((_QWORD *)&v242 + 1) = 0xBFF0000000000000;
  }
  v214 = 0;
  v215 = 0;
  v216 = 0;
  v217 = 0x3FF0000000000000;
  v218 = 0u;
  v219 = 0u;
  v220 = 0;
  if (!sub_18F71E354((double *)a1, (uint64_t)v237, (double *)(a1 + 256), (uint64_t)&v214))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v137 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl(&dword_18F5B3000, v137, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,unable to calculate score", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_246;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_372;
    goto LABEL_423;
  }
  v220 = 1;
  v217 = 0x3FF0000000000000;
  sub_18F724F78((_QWORD *)(a1 + 256), (uint64_t)&v214);
  sub_18F6B21C0((double *)(a1 + 256));
  if (sub_18F71B73C(a1 + 136))
  {
    *(_DWORD *)(a1 + 556) = 0;
    v118 = sub_18F71D5EC((uint64_t *)(a1 + 104));
    if (v118 > 0.0)
    {
      v119 = *(double *)(a1 + 312) / v118;
      if (v119 > 1000000.0)
        v119 = 1000000.0;
      v120 = v119;
      *(float *)(a1 + 556) = v120;
    }
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v121 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v122 = **v94;
      v123 = *(_QWORD *)v208;
      *(_DWORD *)buf = 134349569;
      *(double *)&buf[4] = v2;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v122;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = v123;
      _os_log_impl(&dword_18F5B3000, v121, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,bestParticleRoadID,%{private}lld,score,%{public}.8lf", buf, 0x20u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v193 = **v94;
      v194 = *v208;
      *(_DWORD *)v249 = 134349569;
      *(double *)&v249[4] = v2;
      *(_WORD *)&v249[12] = 2049;
      *(_QWORD *)&v249[14] = v193;
      v250 = 2050;
      v251 = v194;
      v195 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v195);
      if (v195 != (char *)buf)
        free(v195);
    }
    v13 = 1;
    goto LABEL_247;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v138 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    *(double *)&buf[4] = v2;
    _os_log_impl(&dword_18F5B3000, v138, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,unable to fill crumb", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
    {
LABEL_372:
      *(_DWORD *)v249 = 134349056;
      *(double *)&v249[4] = v2;
      v136 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v136);
LABEL_373:
      if (v136 != (char *)buf)
        free(v136);
      goto LABEL_246;
    }
LABEL_423:
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    goto LABEL_372;
  }
LABEL_246:
  v13 = 0;
LABEL_247:
  if (__p)
  {
    v228 = __p;
    operator delete(__p);
  }
  v139 = v222;
  if (v222)
  {
    v140 = (unint64_t *)&v222->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  if (SHIBYTE(v260) < 0)
    operator delete((void *)v259);
LABEL_256:
  if (*((_QWORD *)&v230 + 1))
  {
    *(_QWORD *)&v231 = *((_QWORD *)&v230 + 1);
    operator delete(*((void **)&v230 + 1));
  }
  *(_QWORD *)buf = &v229;
  sub_18F6B2D54((void ***)buf);
  return v13;
}

void sub_18F724D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  sub_18F692600((uint64_t)&a61);
  sub_18F72528C((uint64_t)&a21);
  sub_18F692600((uint64_t)&a35);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  sub_18F72528C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

double sub_18F724F20(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 96);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 104) = v4;
  v7 = *(_QWORD *)(a2 + 184);
  v6 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 112) = v3;
  *(_QWORD *)(a1 + 120) = v6;
  *(_QWORD *)(a1 + 128) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 136) = v5;
  *(_QWORD *)(a1 + 144) = v7;
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 228);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 216);
  *(int8x16_t *)(a1 + 184) = vextq_s8(*(int8x16_t *)(a2 + 16), *(int8x16_t *)(a2 + 16), 8uLL);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 8);
  sub_18F6E4484(a1, a2, a3);
  return result;
}

void sub_18F724F78(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v5 = a1[11];
  v4 = a1[12];
  v6 = (void **)(a1 + 11);
  if (v5 == v4)
  {
LABEL_5:
    v8 = (uint64_t)(a1 + 13);
    v9 = a1[13];
    if (v4 >= v9)
    {
      v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - v5) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0x38E38E38E38E38ELL)
        sub_18F5F7864();
      v16 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v5) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x1C71C71C71C71C7)
        v17 = 0x38E38E38E38E38ELL;
      else
        v17 = v15;
      if (v17)
        v18 = (char *)sub_18F692D88(v8, v17);
      else
        v18 = 0;
      v22 = &v18[72 * v14];
      v23 = &v18[72 * v17];
      *(_OWORD *)v22 = *(_OWORD *)a2;
      v24 = *(_OWORD *)(a2 + 16);
      v25 = *(_OWORD *)(a2 + 32);
      v26 = *(_OWORD *)(a2 + 48);
      *((_QWORD *)v22 + 8) = *(_QWORD *)(a2 + 64);
      *((_OWORD *)v22 + 2) = v25;
      *((_OWORD *)v22 + 3) = v26;
      *((_OWORD *)v22 + 1) = v24;
      v13 = v22 + 72;
      v28 = (char *)a1[11];
      v27 = (char *)a1[12];
      if (v27 != v28)
      {
        do
        {
          *(_OWORD *)(v22 - 72) = *(_OWORD *)(v27 - 72);
          v29 = *(_OWORD *)(v27 - 56);
          v30 = *(_OWORD *)(v27 - 40);
          v31 = *(_OWORD *)(v27 - 24);
          *((_DWORD *)v22 - 2) = *((_DWORD *)v27 - 2);
          *(_OWORD *)(v22 - 24) = v31;
          *(_OWORD *)(v22 - 40) = v30;
          *(_OWORD *)(v22 - 56) = v29;
          v22 -= 72;
          v27 -= 72;
        }
        while (v27 != v28);
        v27 = (char *)*v6;
      }
      a1[11] = v22;
      a1[12] = v13;
      a1[13] = v23;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v10 = *(_OWORD *)(a2 + 16);
      v11 = *(_OWORD *)(a2 + 32);
      v12 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(v4 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(v4 + 32) = v11;
      *(_OWORD *)(v4 + 48) = v12;
      *(_OWORD *)(v4 + 16) = v10;
      v13 = (char *)(v4 + 72);
    }
    a1[12] = v13;
  }
  else
  {
    v7 = a1[11];
    while (*(_DWORD *)(v7 + 64) != *(_DWORD *)(a2 + 64))
    {
      v7 += 72;
      if (v7 == v4)
        goto LABEL_5;
    }
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v19 = *(_OWORD *)(a2 + 16);
    v20 = *(_OWORD *)(a2 + 32);
    v21 = *(_OWORD *)(a2 + 48);
    *(_DWORD *)(v7 + 64) = *(_DWORD *)(a2 + 64);
    *(_OWORD *)(v7 + 32) = v20;
    *(_OWORD *)(v7 + 48) = v21;
    *(_OWORD *)(v7 + 16) = v19;
  }
}

uint64_t sub_18F72513C(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_18F73D44C((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = *(_BYTE **)(a2 + 24);
  v4 = *(_BYTE **)(a2 + 32);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    sub_18F6B35DC((_QWORD *)(a1 + 24), v6 >> 2);
    v7 = *(char **)(a1 + 32);
    memmove(v7, v5, v6);
    *(_QWORD *)(a1 + 32) = &v7[4 * (v6 >> 2)];
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

void sub_18F7251F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 32) = v13;
    operator delete(v13);
  }
  a10 = (void **)v10;
  sub_18F6B2D54(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_18F72521C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_18F73DCBC(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
    sub_18F73D688((char *)(a1 + 24), *(char **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t sub_18F72528C(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v4 = (void **)a1;
  sub_18F6B2D54(&v4);
  return a1;
}

long double sub_18F7252D0(uint64_t a1, double *a2, uint64_t a3)
{
  if (*(_QWORD *)a3 && *(_QWORD *)a1)
    return sub_18F5BD064(a2, *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a3 + 32), *(double *)(a3 + 40), 0.0);
  else
    return -1.0;
}

uint64_t sub_18F7252FC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a1 = off_1E298DD10;
  *(_DWORD *)(a1 + 8) = 257;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_18F775250;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 168) = xmmword_18F771F40;
  *(_QWORD *)(a1 + 200) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 208) = *a2;
  v3 = a2[1];
  *(_QWORD *)(a1 + 216) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a1 + 240) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 224) = _Q1;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  *(_WORD *)(a1 + 284) = 1;
  *(_DWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_BYTE *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_QWORD *)(a1 + 376) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 0;
  *(_WORD *)(a1 + 404) = 1;
  *(_DWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_QWORD *)(a1 + 520) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 528) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_QWORD *)(a1 + 552) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 784) = 0;
  *(_WORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 851) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 718) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_QWORD *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 928) = xmmword_18F775AA0;
  *(_QWORD *)(a1 + 944) = 0x415854A640000000;
  *(_QWORD *)(a1 + 968) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 1007) = 0;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_DWORD *)(a1 + 1023) = 0;
  *(_QWORD *)(a1 + 1016) = 0;
  *(_BYTE *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1040) = a1 + 1040;
  *(_QWORD *)(a1 + 1048) = a1 + 1040;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1064) = 0;
  *(_DWORD *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_WORD *)(a1 + 1108) = 1;
  *(_DWORD *)(a1 + 1112) = 0;
  *(_BYTE *)(a1 + 1168) = 0;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_DWORD *)(a1 + 1200) = 0;
  *(_QWORD *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_DWORD *)(a1 + 1208) = 0;
  *(_BYTE *)(a1 + 1212) = 0;
  *(_QWORD *)(a1 + 1216) = 0;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1257) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = _Q1;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_QWORD *)(a1 + 1328) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_DWORD *)(a1 + 1560) = 0;
  *(_WORD *)(a1 + 1544) = 0;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1627) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1494) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_QWORD *)(a1 + 1704) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1696) = 0;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1712) = xmmword_18F771F40;
  *(_QWORD *)(a1 + 1744) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 1752) = -1;
  *(_DWORD *)(a1 + 1776) = 0;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_QWORD *)(a1 + 1784) = a1 + 1784;
  *(_QWORD *)(a1 + 1792) = a1 + 1784;
  *(_QWORD *)(a1 + 1800) = 0;
  *(_QWORD *)(a1 + 1808) = a1 + 1808;
  *(_QWORD *)(a1 + 1816) = a1 + 1808;
  *(_QWORD *)(a1 + 1824) = 0;
  *(_QWORD *)(a1 + 1832) = 0x600000006;
  *(_QWORD *)(a1 + 1848) = 0;
  *(_QWORD *)(a1 + 1840) = 0;
  *(_QWORD *)(a1 + 1856) = 0;
  *(_QWORD *)(a1 + 1864) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1872) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1944) = 0;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1952) = _Q1;
  *(_DWORD *)(a1 + 2072) = 0;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_QWORD *)(a1 + 2112) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 2120) = 180;
  *(_QWORD *)(a1 + 2136) = 0;
  *(_QWORD *)(a1 + 2128) = 0;
  *(_DWORD *)(a1 + 2144) = 0;
  *(_QWORD *)(a1 + 2200) = 0;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  sub_18F725768(a1);
  return a1;
}

void sub_18F725684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_object, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;

  v26 = *(void **)(v18 + 2176);
  if (v26)
  {
    *(_QWORD *)(v18 + 2184) = v26;
    operator delete(v26);
  }
  v27 = *(_QWORD *)(v18 + 2088);
  *(_QWORD *)(v18 + 2088) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *v24;
  *v24 = 0;
  if (v28)
    sub_18F6D78E8((uint64_t)v24, v28);
  a18 = v23;
  sub_18F6B2FEC((void ***)&a18);
  a18 = v19;
  sub_18F6B2FEC((void ***)&a18);
  sub_18F6B2F7C((void ***)&a18);
  v29 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 1848) = v29;
    operator delete(v29);
  }
  sub_18F64F950(v22);
  sub_18F64F950(v21);
  if (*(char *)(v18 + 1431) < 0)
    operator delete(*(void **)(v18 + 1408));
  sub_18F699ACC(a16);
  sub_18F692F30(v25);
  sub_18F725DDC(v18 + 264);
  sub_18F6B2D54((void ***)&a18);
  sub_18F5D6004(a17);
  _Unwind_Resume(a1);
}

double sub_18F725768(uint64_t a1)
{
  __int128 v7;
  void *v8;
  __int128 v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void **v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  double result;
  _BYTE v34[112];
  _BYTE v35[24];
  __int128 v36;
  __int128 v37;
  _QWORD v38[5];
  void *v39[2];
  uint64_t v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[104];
  _BYTE v46[296];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[27];
  void **v51;

  *(_QWORD *)(a1 + 224) = 0xBFF0000000000000;
  sub_18F73D96C((void **)(a1 + 240));
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  memset(v34, 0, 24);
  v51 = (void **)v34;
  sub_18F6B2D54(&v51);
  bzero(v34, 0x300uLL);
  v34[20] = 1;
  *(_DWORD *)&v34[24] = 0;
  memset(&v34[88], 0, 24);
  memset(&v34[32], 0, 49);
  *(_QWORD *)v35 = 0xBFF0000000000000;
  *(_OWORD *)&v35[8] = 0u;
  LODWORD(v36) = 0;
  BYTE4(v36) = 1;
  DWORD2(v36) = 0;
  v37 = 0u;
  memset(v38, 0, 33);
  v40 = 0;
  v41 = 0;
  *(_OWORD *)v39 = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  v42 = 0u;
  v43 = _Q0;
  v44 = 0u;
  *(_QWORD *)v45 = 0xBFF0000000000000;
  *(_DWORD *)&v46[128] = 0;
  memset(&v46[80], 0, 34);
  memset(&v46[136], 0, 75);
  memset(&v46[216], 0, 48);
  memset(v46, 0, 78);
  memset(&v45[8], 0, 96);
  *(_DWORD *)&v46[268] = 0;
  v47 = 0u;
  *(_OWORD *)&v46[272] = xmmword_18F775AA0;
  *(_QWORD *)&v46[288] = 0x415854A640000000;
  *(_QWORD *)&v48 = 0x3FF0000000000000;
  *(_DWORD *)&v50[7] = 0;
  *(_QWORD *)v50 = 0;
  v49 = 0u;
  *(_DWORD *)&v50[23] = 0;
  *(_QWORD *)&v50[16] = 0;
  sub_18F62B3EC(a1 + 264, (__int128 *)v34);
  v7 = *(_OWORD *)&v34[32];
  *(_OWORD *)(a1 + 280) = *(_OWORD *)&v34[16];
  *(_OWORD *)(a1 + 296) = v7;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)&v34[48];
  *(_OWORD *)(a1 + 320) = *(_OWORD *)&v34[56];
  *(_OWORD *)(a1 + 329) = *(_OWORD *)&v34[65];
  v8 = *(void **)(a1 + 352);
  if (v8)
  {
    *(_QWORD *)(a1 + 360) = v8;
    operator delete(v8);
  }
  *(_OWORD *)(a1 + 352) = *(_OWORD *)&v34[88];
  *(_QWORD *)(a1 + 368) = *(_QWORD *)&v34[104];
  memset(&v34[88], 0, 24);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)v35;
  sub_18F62B3EC(a1 + 384, (__int128 *)&v35[8]);
  v9 = v37;
  *(_OWORD *)(a1 + 400) = v36;
  *(_OWORD *)(a1 + 416) = v9;
  *(_QWORD *)(a1 + 432) = v38[0];
  *(_OWORD *)(a1 + 440) = *(_OWORD *)&v38[1];
  *(_OWORD *)(a1 + 449) = *(_OWORD *)((char *)&v38[2] + 1);
  v10 = *(void **)(a1 + 472);
  if (v10)
  {
    *(_QWORD *)(a1 + 480) = v10;
    operator delete(v10);
  }
  *(_OWORD *)(a1 + 472) = *(_OWORD *)v39;
  *(_QWORD *)(a1 + 488) = v40;
  v39[1] = 0;
  v40 = 0;
  v39[0] = 0;
  *(_BYTE *)(a1 + 496) = v41;
  v11 = *(_OWORD *)&v45[32];
  *(_OWORD *)(a1 + 568) = *(_OWORD *)&v45[16];
  *(_OWORD *)(a1 + 584) = v11;
  v12 = *(_OWORD *)&v45[64];
  *(_OWORD *)(a1 + 600) = *(_OWORD *)&v45[48];
  *(_OWORD *)(a1 + 616) = v12;
  v13 = v43;
  *(_OWORD *)(a1 + 504) = v42;
  *(_OWORD *)(a1 + 520) = v13;
  v14 = *(_OWORD *)v45;
  *(_OWORD *)(a1 + 536) = v44;
  *(_OWORD *)(a1 + 552) = v14;
  v15 = (void **)(a1 + 632);
  if (*(char *)(a1 + 655) < 0)
    operator delete(*v15);
  *(_OWORD *)v15 = *(_OWORD *)&v45[80];
  *(_QWORD *)(a1 + 648) = *(_QWORD *)&v45[96];
  v45[103] = 0;
  v45[80] = 0;
  memcpy((void *)(a1 + 656), v46, 0x118uLL);
  v16 = v47;
  *(_OWORD *)(a1 + 936) = *(_OWORD *)&v46[280];
  *(_OWORD *)(a1 + 952) = v16;
  *(_OWORD *)(a1 + 968) = v48;
  *(_QWORD *)(a1 + 984) = v49;
  sub_18F62B3EC(a1 + 992, (__int128 *)((char *)&v49 + 8));
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)&v50[8];
  *(_DWORD *)(a1 + 1023) = *(_DWORD *)&v50[23];
  v17 = *(std::__shared_weak_count **)v50;
  if (*(_QWORD *)v50)
  {
    v18 = (unint64_t *)(*(_QWORD *)v50 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if ((v45[103] & 0x80000000) != 0)
    operator delete(*(void **)&v45[80]);
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  v20 = *(std::__shared_weak_count **)&v35[16];
  if (*(_QWORD *)&v35[16])
  {
    v21 = (unint64_t *)(*(_QWORD *)&v35[16] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (*(_QWORD *)&v34[88])
  {
    *(_QWORD *)&v34[96] = *(_QWORD *)&v34[88];
    operator delete(*(void **)&v34[88]);
  }
  v23 = *(std::__shared_weak_count **)&v34[8];
  if (*(_QWORD *)&v34[8])
  {
    v24 = (unint64_t *)(*(_QWORD *)&v34[8] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_BYTE *)(a1 + 1032) = 0;
  sub_18F692F30((_QWORD *)(a1 + 1040));
  *(_DWORD *)(a1 + 1208) = 0;
  v34[0] = 0;
  memset(&v34[8], 0, 36);
  *(_WORD *)&v34[44] = 1;
  *(_DWORD *)&v34[48] = 0;
  memset(&v34[56], 0, 49);
  memset(v35, 0, sizeof(v35));
  LODWORD(v36) = 0;
  *(_QWORD *)(a1 + 1080) = 0;
  *(_OWORD *)(a1 + 1064) = *(_OWORD *)v34;
  sub_18F62B3EC(a1 + 1088, (__int128 *)&v34[24]);
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)&v34[40];
  *(_OWORD *)(a1 + 1120) = *(_OWORD *)&v34[56];
  *(_QWORD *)(a1 + 1136) = *(_QWORD *)&v34[72];
  *(_OWORD *)(a1 + 1144) = *(_OWORD *)&v34[80];
  *(_OWORD *)(a1 + 1153) = *(_OWORD *)&v34[89];
  v26 = *(void **)(a1 + 1176);
  if (v26)
  {
    *(_QWORD *)(a1 + 1184) = v26;
    operator delete(v26);
  }
  *(_OWORD *)(a1 + 1176) = *(_OWORD *)v35;
  *(_QWORD *)(a1 + 1192) = *(_QWORD *)&v35[16];
  memset(v35, 0, sizeof(v35));
  *(_DWORD *)(a1 + 1200) = v36;
  v27 = *(std::__shared_weak_count **)&v34[32];
  if (*(_QWORD *)&v34[32])
  {
    v28 = (unint64_t *)(*(_QWORD *)&v34[32] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_BYTE *)(a1 + 1212) = 0;
  *(_QWORD *)(a1 + 1216) = 0;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1257) = 0u;
  sub_18F692F90(a1 + 1280);
  *(_DWORD *)(a1 + 1752) = -1;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_DWORD *)(a1 + 1776) = 0;
  *(_QWORD *)v34 = v34;
  *(_QWORD *)&v34[8] = v34;
  *(_QWORD *)&v34[16] = 0;
  sub_18F73DF70((uint64_t *)(a1 + 1784), v34);
  sub_18F64F950((uint64_t *)v34);
  *(_QWORD *)v34 = v34;
  *(_QWORD *)&v34[8] = v34;
  *(_QWORD *)&v34[16] = 0;
  sub_18F73DF70((uint64_t *)(a1 + 1808), v34);
  sub_18F64F950((uint64_t *)v34);
  *(_QWORD *)(a1 + 1832) = 0x600000006;
  v30 = *(void **)(a1 + 1840);
  if (v30)
  {
    *(_QWORD *)(a1 + 1848) = v30;
    operator delete(v30);
  }
  *(_QWORD *)(a1 + 1840) = 0;
  *(_QWORD *)(a1 + 1848) = 0;
  *(_QWORD *)(a1 + 1856) = 0;
  *(_QWORD *)(a1 + 1864) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1872) = 0xBFF0000000000000;
  v31 = *(_QWORD *)(a1 + 1888);
  v32 = *(_QWORD *)(a1 + 1880);
  while (v31 != v32)
    v31 = sub_18F5D6004(v31 - 56);
  *(_QWORD *)(a1 + 1888) = v32;
  sub_18F6B3864((void **)(a1 + 1904));
  *(_QWORD *)(a1 + 1920) = 0;
  *(_OWORD *)(a1 + 1904) = 0u;
  memset(v34, 0, 24);
  v51 = (void **)v34;
  sub_18F6B2FEC(&v51);
  sub_18F6B3864((void **)(a1 + 1928));
  *(_QWORD *)(a1 + 1944) = 0;
  *(_OWORD *)(a1 + 1928) = 0u;
  memset(v34, 0, 24);
  v51 = (void **)v34;
  sub_18F6B2FEC(&v51);
  *(_DWORD *)(a1 + 2072) = 0;
  *(_QWORD *)(a1 + 2200) = 0;
  *(_QWORD *)(a1 + 1968) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2048) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_QWORD *)(a1 + 2037) = 0;
  *(_QWORD *)(a1 + 2056) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2064) = 0xBFF0000000000000;
  return result;
}

uint64_t sub_18F725DDC(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_18F5D6004(a1 + 728);
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  v2 = *(void **)(a1 + 208);
  if (v2)
  {
    *(_QWORD *)(a1 + 216) = v2;
    operator delete(v2);
  }
  sub_18F5D6004(a1 + 120);
  v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 96) = v3;
    operator delete(v3);
  }
  return sub_18F5D6004(a1);
}

uint64_t sub_18F725E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  NSObject *v15;
  char *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __n128 v40;
  __n128 v41;
  uint64_t v42;
  int v43;
  int v44;
  double v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t i;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  double v57;
  long double v58;
  long double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  uint64_t v76;
  double *v77;
  double v78;
  double v79;
  float v81;
  double v82;
  double v83;
  double v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  double *v90;
  NSObject *v91;
  char v92;
  char v93;
  double *v94;
  double *v95;
  double v96;
  double v97;
  double v98;
  double v100;
  double v101;
  double v103;
  NSObject *v104;
  float v105;
  double v106;
  double v107;
  double v108;
  NSObject *v109;
  char *v110;
  NSObject *v111;
  char *v112;
  NSObject *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  __objc2_class *v119;
  NSObject *v120;
  NSObject *v121;
  BOOL v122;
  NSObject *v123;
  char *v124;
  NSObject *v125;
  char v126;
  char v127;
  double v128;
  NSObject *v129;
  NSObject *v130;
  NSObject *v131;
  char *v132;
  NSObject *info;
  NSObject *v134;
  NSObject *v135;
  double v136;
  _BOOL4 v137;
  int v138;
  int v139;
  double v140;
  NSObject *v141;
  uint64_t v142;
  int v143;
  double v144;
  double v145;
  BOOL v146;
  double v147;
  double v148;
  double v149;
  double v150;
  int v151;
  NSObject *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  NSObject *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t *v176;
  uint64_t v177;
  NSObject *v178;
  char *v179;
  double v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  __int128 v184;
  uint64_t v185;
  int v186;
  int v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  __int128 v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  long double v195;
  double v196;
  double v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  double v202;
  double v203;
  double v204;
  NSObject *v205;
  double v206;
  NSObject *v207;
  unint64_t *v208;
  unint64_t v209;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  char *v227;
  char *v228;
  char *v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  BOOL v238;
  __int128 v239;
  double v240;
  uint64_t v241;
  uint64_t *v242;
  int v243;
  uint64_t v244;
  _OWORD v245[2];
  uint64_t v246;
  __int128 v247;
  void *__p[2];
  __int128 v249;
  char v250;
  __int128 v251;
  __int128 *v252;
  __int128 v253;
  __int128 v254;
  int v255;
  _BYTE v256[3];
  char v257;
  uint64_t v258;
  __int128 v259;
  _QWORD v260[5];
  void *v261[2];
  uint64_t v262;
  unint64_t v263;
  __int128 v264;
  int v265;
  _BYTE v266[3];
  char v267;
  uint64_t v268;
  __int128 v269;
  _BYTE v270[33];
  __int128 v271;
  uint64_t v272;
  char v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  _BYTE v277[88];
  __int128 v278;
  _BYTE v279[288];
  uint64_t v280;
  __int128 v281;
  uint64_t v282;
  uint64_t v283;
  __int128 v284;
  __int128 v285;
  _QWORD v286[2];
  char v287;
  _QWORD *v288;
  std::__shared_weak_count *v289;
  _QWORD v290[2];
  __int128 v291;
  __int128 v292;
  __int16 v293;
  char v294;
  __int16 v295;
  char v296;
  _OWORD v297[4];
  uint64_t v298;
  __int16 v299;
  double v300;
  __int16 v301;
  uint64_t v302;
  __int16 v303;
  uint64_t v304;
  __int16 v305;
  uint64_t v306;
  __int16 v307;
  double v308;
  __int16 v309;
  uint64_t v310;
  _BYTE v311[92];
  __int16 v312;
  _BYTE v313[18];
  __int128 *v314;
  __int128 v315;
  __int128 v316;
  int v317;
  __int16 v318;
  int v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  char v323;
  __int128 v324;
  uint64_t v325;
  unint64_t v326;
  __int128 v327;
  int v328;
  __int16 v329;
  float v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  char v334;
  __int128 v335;
  uint64_t v336;
  char v337;
  __int128 v338;
  unint64_t v339;
  unint64_t v340;
  __int128 v341;
  unint64_t v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  _BYTE v352[30];
  __int128 v353;
  __int128 v354;
  __int16 v355;
  uint64_t v356;
  int v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  _BYTE v361[27];
  __int128 v362;
  __int128 v363;
  __int128 v364;
  uint64_t v365;
  __int128 v366;
  uint64_t v367;
  __int128 v368;
  uint64_t v369;
  char v370;
  __int128 v371;
  _QWORD v372[2];
  _QWORD v373[2];
  char v374;
  _BYTE v375[53];
  _QWORD v376[2];
  double v377[3];
  _OWORD v378[4];
  _OWORD v379[4];
  uint8_t buf[1640];
  uint64_t v381;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v3 = v0;
  v381 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v0 + 1968) = 0xBFF0000000000000;
  *(_DWORD *)(v0 + 2048) = 0;
  *(_OWORD *)(v0 + 1976) = 0u;
  *(_OWORD *)(v0 + 1992) = 0u;
  *(_OWORD *)(v0 + 2008) = 0u;
  *(_OWORD *)(v0 + 2024) = 0u;
  *(_QWORD *)(v0 + 2037) = 0;
  *(_QWORD *)(v0 + 2056) = 0xBFF0000000000000;
  *(_QWORD *)(v0 + 2064) = 0xBFF0000000000000;
  v6 = *(_QWORD **)(v0 + 208);
  v5 = *(std::__shared_weak_count **)(v0 + 216);
  v288 = v6;
  v289 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v6)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v17 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(v2 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, mapMatch", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v86 = *(_QWORD *)(v2 + 8);
      *(_DWORD *)v311 = 134349056;
      *(_QWORD *)&v311[4] = v86;
      v16 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v16);
      goto LABEL_168;
    }
    goto LABEL_21;
  }
  sub_18F6F045C((uint64_t)v6);
  v6[1] = *(_QWORD *)(v2 + 8);
  (*(void (**)(_QWORD *))(*v6 + 96))(v6);
  v9 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 152) = v9;
  v10 = *(_QWORD *)(v2 + 64);
  v11 = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v2 + 160) = v10;
  *(_QWORD *)(v2 + 168) = v11;
  *(_QWORD *)(v2 + 288) = v9;
  *(_QWORD *)(v2 + 296) = v10;
  *(_QWORD *)(v2 + 304) = v11;
  *(_QWORD *)(v2 + 312) = v9;
  *(_QWORD *)(v2 + 320) = v10;
  *(_QWORD *)(v2 + 328) = v9;
  *(_QWORD *)(v2 + 336) = v10;
  *(_DWORD *)(v2 + 280) = 0;
  v12 = 0.0;
  if (*(double *)(v3 + 512) > 0.0)
  {
    v13 = *(double *)(v2 + 24);
    if (v13 < 0.0 || (v14 = *(double *)(v3 + 528), v14 < 0.0))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v15 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v4;
        _os_log_impl(&dword_18F5B3000, v15, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to compute timeDiff", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        *(_DWORD *)v311 = 134349056;
        *(_QWORD *)&v311[4] = v4;
        v16 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v16);
LABEL_168:
        if (v16 != (char *)buf)
          free(v16);
        goto LABEL_21;
      }
      goto LABEL_21;
    }
    if (v13 - v14 == 0.0)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v20 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v4;
        _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not matching, time betwen updates is 0.0", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        *(_DWORD *)v311 = 134349056;
        *(_QWORD *)&v311[4] = v4;
        v16 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v16);
        goto LABEL_168;
      }
LABEL_21:
      v19 = 0;
      if (!v5)
        return v19;
      goto LABEL_509;
    }
    v12 = vabdd_f64(v13, v14);
    if (v12 > 5.0)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v21 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v4;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v12;
        _os_log_impl(&dword_18F5B3000, v21, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, dT, %{public}.1lf", buf, 0x16u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        *(_DWORD *)v311 = 134349312;
        *(_QWORD *)&v311[4] = v4;
        *(_WORD *)&v311[12] = 2050;
        *(double *)&v311[14] = v12;
        v221 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v221);
        if (v221 != (char *)buf)
          free(v221);
      }
      sub_18F725768(v3);
      *(_QWORD *)(v3 + 2136) = 0;
      *(_QWORD *)(v3 + 2128) = 0;
      *(_DWORD *)(v3 + 2144) = 0;
      *(_QWORD *)(v3 + 2152) = 0;
      *(_QWORD *)(v3 + 2168) = 0;
      *(_QWORD *)(v3 + 2160) = 0;
      v9 = *(_QWORD *)(v2 + 56);
      v10 = *(_QWORD *)(v2 + 64);
      v11 = *(_QWORD *)(v2 + 104);
    }
  }
  *(_QWORD *)(v2 + 152) = v9;
  *(_QWORD *)(v2 + 160) = v10;
  *(_QWORD *)(v2 + 168) = v11;
  *(_QWORD *)(v2 + 288) = v9;
  *(_QWORD *)(v2 + 296) = v10;
  *(_QWORD *)(v2 + 304) = v11;
  *(_QWORD *)(v2 + 312) = v9;
  *(_QWORD *)(v2 + 320) = v10;
  *(_QWORD *)(v2 + 328) = v9;
  *(_QWORD *)(v2 + 336) = v10;
  *(_DWORD *)(v2 + 280) = 0;
  v244 = v3 + 264;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, v2) & 1) != 0)
  {
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, v2);
    (*(void (**)(_QWORD *, uint64_t))(*v6 + 32))(v6, v22);
    (*(void (**)(_QWORD *, uint64_t, double))(*v6 + 48))(v6, v2, 450.0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, v2, v244);
    v23 = *(_QWORD *)(v3 + 1888);
    v24 = *(_QWORD *)(v3 + 1880);
    while (v23 != v24)
      v23 = sub_18F5D6004(v23 - 56);
    *(_QWORD *)(v3 + 1888) = v24;
    if (*(_BYTE *)(v3 + 9))
    {
      v26 = *(_QWORD *)(v3 + 208);
      v27 = *(_QWORD *)(v3 + 216);
      *(_QWORD *)buf = v26;
      *(_QWORD *)&buf[8] = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        *(_QWORD *)&v311[8] = v27;
        do
          v30 = __ldxr(v28);
        while (__stxr(v30 + 1, v28));
      }
      else
      {
        *(_QWORD *)&v311[8] = 0;
      }
      *(_QWORD *)v311 = v26;
      sub_18F6B03A0(v2, v311, (double *)(v3 + 168), v3 + 1832, (uint64_t *)(v3 + 1880), 0, 100.0);
      v31 = *(std::__shared_weak_count **)&v311[8];
      if (*(_QWORD *)&v311[8])
      {
        v32 = (unint64_t *)(*(_QWORD *)&v311[8] + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v35 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
    v245[0] = xmmword_18F771F40;
    v245[1] = 0u;
    v246 = 0x3FF0000000000000;
    v247 = 0u;
    *(_OWORD *)__p = 0u;
    v249 = 0u;
    v250 = 0;
    __asm { FMOV            V1.2D, #-1.0 }
    v251 = _Q1;
    v253 = 0u;
    v252 = &v253;
    v254 = 0u;
    v255 = 0;
    *(_WORD *)v256 = 1;
    LODWORD(v258) = 0;
    *(_OWORD *)v261 = 0u;
    v259 = 0u;
    memset(v260, 0, 33);
    v262 = 0;
    v263 = 0xBFF0000000000000;
    v265 = 0;
    v264 = 0u;
    *(_WORD *)v266 = 1;
    LODWORD(v268) = 0;
    v271 = 0u;
    v269 = 0u;
    memset(v270, 0, sizeof(v270));
    v274 = 0u;
    v272 = 0;
    v273 = 0;
    v239 = _Q1;
    v275 = _Q1;
    v276 = 0u;
    *(_QWORD *)v277 = 0xBFF0000000000000;
    *(_QWORD *)&v279[120] = 0;
    memset(&v277[8], 0, 80);
    *(_DWORD *)&v279[128] = 0;
    memset(&v279[80], 0, 34);
    memset(&v279[136], 0, 75);
    memset(&v279[216], 0, 56);
    memset(v279, 0, 78);
    v278 = 0u;
    v281 = 0u;
    *(_OWORD *)&v279[272] = xmmword_18F775AA0;
    v280 = 0x415854A640000000;
    v282 = 0x3FF0000000000000;
    LOBYTE(v283) = 0;
    *(_DWORD *)((char *)&v285 + 7) = 0;
    v284 = 0u;
    *(_QWORD *)&v285 = 0;
    memset(v286, 0, 11);
    v287 = 0;
    v242 = (uint64_t *)(v3 + 240);
    if ((sub_18F72AAB0(v3, (uint64_t *)(v3 + 240), v244, v2, 1, 0, (uint64_t)v245) & 1) != 0)
      goto LABEL_346;
    v42 = *(_QWORD *)(v3 + 208);
    if (v42)
    {
      v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 104))(v42);
      v44 = BYTE1(v286[1]) ? v43 : 0;
      if (v44 == 1
        && *(_QWORD *)(v3 + 1912) != *(_QWORD *)(v3 + 1904)
        && BYTE10(v285)
        && (_QWORD)v264
        && *(_BYTE *)(v3 + 768)
        && *(_QWORD *)(v3 + 384))
      {
        v45 = *(double *)(v2 + 192);
        if (v45 > 25.0 || v45 <= 0.0 || *(double *)(v2 + 104) < 0.0)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v50 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            v51 = *(_QWORD *)(v2 + 8);
            v52 = *(_QWORD *)(v2 + 192);
            *(_DWORD *)buf = 134349312;
            *(_QWORD *)&buf[4] = v51;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v52;
            _os_log_impl(&dword_18F5B3000, v50, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,checkForUserDeviationFromRoute skipped,courseUnc,%{public}.2lf", buf, 0x16u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
            v53 = *(_QWORD *)(v2 + 8);
            v54 = *(_QWORD *)(v2 + 192);
            *(_DWORD *)v311 = 134349312;
            *(_QWORD *)&v311[4] = v53;
            *(_WORD *)&v311[12] = 2050;
            *(_QWORD *)&v311[14] = v54;
            v55 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForUserDeviationFromRoute(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v55);
            if (v55 != (char *)buf)
              free(v55);
          }
        }
        else
        {
          v46 = *(_QWORD *)(v2 + 8);
          *(_OWORD *)&v311[16] = 0u;
          *(_OWORD *)v311 = xmmword_18F771F40;
          *(_QWORD *)&v311[32] = 0x3FF0000000000000;
          memset(&v311[40], 0, 49);
          *(_OWORD *)&v313[2] = v239;
          v315 = 0u;
          v314 = &v315;
          v316 = 0u;
          v317 = 0;
          v318 = 1;
          v319 = 0;
          v324 = 0u;
          v320 = 0u;
          v321 = 0u;
          v322 = 0u;
          v323 = 0;
          v325 = 0;
          v326 = 0xBFF0000000000000;
          v328 = 0;
          v327 = 0u;
          v329 = 1;
          v330 = 0.0;
          v331 = 0u;
          v332 = 0u;
          v333 = 0u;
          v334 = 0;
          v338 = 0u;
          v335 = 0u;
          v336 = 0;
          v337 = 0;
          v339 = 0xBFF0000000000000;
          v340 = 0xBFF0000000000000;
          v341 = 0u;
          v342 = 0xBFF0000000000000;
          v356 = 0;
          v357 = 0;
          v354 = 0u;
          v353 = 0u;
          v355 = 0;
          v360 = 0u;
          memset(v361, 0, sizeof(v361));
          v358 = 0u;
          v359 = 0u;
          v363 = 0u;
          v364 = 0u;
          v362 = 0u;
          memset(v352, 0, sizeof(v352));
          v351 = 0u;
          v350 = 0u;
          v349 = 0u;
          v348 = 0u;
          v347 = 0u;
          v346 = 0u;
          v345 = 0u;
          v344 = 0u;
          v343 = 0u;
          v365 = 0;
          v368 = 0u;
          v366 = xmmword_18F775AA0;
          v367 = 0x415854A640000000;
          v369 = 0x3FF0000000000000;
          v370 = 0;
          v371 = 0u;
          memset(v372, 0, 11);
          *(_DWORD *)((char *)v373 + 7) = 0;
          v373[0] = 0;
          v374 = 0;
          v47 = sub_18F72AAB0(v3, v242, v244, v2, 0, 0, (uint64_t)v311);
          if (BYTE2(v372[1]))
            v48 = v47;
          else
            v48 = 1;
          if ((v48 & 1) == 0 && (_QWORD)v327)
          {
            for (i = v271; i != *((_QWORD *)&v271 + 1); i += 72)
            {
              if (*(_DWORD *)(i + 64) == 1)
                goto LABEL_101;
            }
            i = 0;
LABEL_101:
            v56 = v335;
            if ((_QWORD)v335 != *((_QWORD *)&v335 + 1))
            {
              while (*(_DWORD *)(v56 + 64) != 1)
              {
                v56 += 72;
                if (v56 == *((_QWORD *)&v335 + 1))
                  goto LABEL_127;
              }
              if (i && *(double *)i > 0.0)
              {
                v57 = *(double *)v56 / *(double *)i;
                v58 = sub_18F7252D0((uint64_t)&v264, (double *)(v3 + 168), v3 + 384);
                v59 = sub_18F7252D0((uint64_t)&v327, (double *)(v3 + 168), v3 + 384);
                v60 = fmod(*(double *)(v2 + 104) - v330, 360.0);
                if (v60 < 0.0)
                  v60 = v60 + 360.0;
                if (v60 <= 180.0)
                  v61 = v60;
                else
                  v61 = v60 + -360.0;
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v62 = fabs(v57);
                v63 = fabs(v61);
                v64 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                {
                  v65 = *(_QWORD *)v264;
                  v66 = *(_QWORD *)v327;
                  *(_DWORD *)buf = 134352129;
                  *(_QWORD *)&buf[4] = v46;
                  *(_WORD *)&buf[12] = 2050;
                  *(long double *)&buf[14] = v58;
                  *(_WORD *)&buf[22] = 2050;
                  *(long double *)&buf[24] = v59;
                  *(_WORD *)&buf[32] = 2050;
                  *(double *)&buf[34] = v63;
                  *(_WORD *)&buf[42] = 2050;
                  *(double *)&buf[44] = v62;
                  *(_WORD *)&buf[52] = 2049;
                  *(_QWORD *)&buf[54] = v269;
                  *(_WORD *)&buf[62] = 2049;
                  *(_QWORD *)&buf[64] = *((_QWORD *)&v269 + 1);
                  *(_WORD *)&buf[72] = 2050;
                  *(double *)&buf[74] = *(float *)&v268;
                  *(_WORD *)&buf[82] = 2049;
                  *(_QWORD *)&buf[84] = v65;
                  *(_WORD *)&buf[92] = 2049;
                  *(_QWORD *)&buf[94] = v331;
                  *(_WORD *)&buf[102] = 2049;
                  *(_QWORD *)&buf[104] = *((_QWORD *)&v331 + 1);
                  *(_WORD *)&buf[112] = 2050;
                  *(double *)&buf[114] = v330;
                  *(_WORD *)&buf[122] = 2049;
                  *(_QWORD *)&buf[124] = v66;
                  _os_log_impl(&dword_18F5B3000, v64, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf,courseDiffNewAndRawSolution,%{public}.2lf,factor,%{public}.5lf,bestParticle,%{private}.8lf,%{private}.8lf,%{public}.3lf,%{private}lld,newBestParticle,%{private}.8lf,%{private}.8lf,%{public}.3lf,%{private}lld", buf, 0x84u);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                  v233 = *(_QWORD *)v264;
                  v234 = *(_QWORD *)v327;
                  LODWORD(v297[0]) = 134352129;
                  *(_QWORD *)((char *)v297 + 4) = v46;
                  WORD6(v297[0]) = 2050;
                  *(long double *)((char *)v297 + 14) = v58;
                  WORD3(v297[1]) = 2050;
                  *((long double *)&v297[1] + 1) = v59;
                  LOWORD(v297[2]) = 2050;
                  *(double *)((char *)&v297[2] + 2) = v63;
                  WORD5(v297[2]) = 2050;
                  *(double *)((char *)&v297[2] + 12) = v62;
                  WORD2(v297[3]) = 2049;
                  *(_QWORD *)((char *)&v297[3] + 6) = v269;
                  HIWORD(v297[3]) = 2049;
                  v298 = *((_QWORD *)&v269 + 1);
                  v299 = 2050;
                  v300 = *(float *)&v268;
                  v301 = 2049;
                  v302 = v233;
                  v303 = 2049;
                  v304 = v331;
                  v305 = 2049;
                  v306 = *((_QWORD *)&v331 + 1);
                  v307 = 2050;
                  v308 = v330;
                  v309 = 2049;
                  v310 = v234;
                  v235 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForUserDeviationFromRoute(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v235);
                  if (v235 != (char *)buf)
                    free(v235);
                }
                if (v63 < 25.0 && v62 >= 2.0)
                {
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                  v68 = off_1EE172160;
                  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 134349568;
                    *(_QWORD *)&buf[4] = v46;
                    *(_WORD *)&buf[12] = 2050;
                    *(double *)&buf[14] = v62;
                    *(_WORD *)&buf[22] = 2050;
                    *(double *)&buf[24] = v63;
                    _os_log_impl(&dword_18F5B3000, v68, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter swapped with local filter without routeHints,local,factor,%{public}.5lf,courseDiffNewAndRawSolution,%{public}.2lf", buf, 0x20u);
                  }
                  if (sub_18F5C4AE0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172158 != -1)
                      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                    LODWORD(v297[0]) = 134349568;
                    *(_QWORD *)((char *)v297 + 4) = v46;
                    WORD6(v297[0]) = 2050;
                    *(double *)((char *)v297 + 14) = v62;
                    WORD3(v297[1]) = 2050;
                    *((double *)&v297[1] + 1) = v63;
                    v236 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForUserDeviationFromRoute(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v236);
                    if (v236 != (char *)buf)
                      free(v236);
                  }
                  sub_18F72E3A0((uint64_t)v245, (__int128 *)v311);
                }
              }
            }
          }
LABEL_127:
          sub_18F73D7E0((uint64_t)v311);
        }
      }
    }
    if (!BYTE10(v285) || !*(_BYTE *)(v3 + 768) || !*(_QWORD *)(v3 + 384))
      goto LABEL_331;
    v69 = *(_QWORD *)(v3 + 208);
    if (v69)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v69 + 104))(v69))
        v70 = 6.0;
      else
        v70 = 10.0;
    }
    else
    {
      v70 = 10.0;
    }
    v71 = v3 + 384;
    v72 = *(double *)(v2 + 24);
    v73 = -1.0;
    if (v72 >= 0.0)
    {
      v74 = *(double *)(v3 + 528);
      v75 = vabdd_f64(v72, v74);
      if (v74 >= 0.0)
        v73 = v75;
      else
        v73 = -1.0;
    }
    v76 = *(_QWORD *)(v2 + 8);
    v77 = (double *)(v3 + 168);
    v40.n128_f64[0] = sub_18F7252D0((uint64_t)&v264, (double *)(v3 + 168), v3 + 384);
    v41.n128_f64[0] = *(double *)&v284 * 0.2;
    if (*(double *)&v284 * 0.2 < 0.1)
      v41.n128_f64[0] = 0.1;
    if (v41.n128_f64[0] > 0.4)
      v41.n128_f64[0] = 0.4;
    v240 = v40.n128_f64[0];
    if (v40.n128_f64[0] < v41.n128_f64[0])
      goto LABEL_331;
    v78 = *(double *)(v3 + 1872);
    if (v78 >= 0.0 && (v41.n128_f64[0] = vabdd_f64(*((double *)&v275 + 1), v78), v41.n128_f64[0] <= 6.0)
      || ((v41.n128_u64[0] = 3.0, v79 = *(double *)&v284 * 3.0, v40.n128_f64[0] > *(double *)&v284 * 3.0)
        ? (_ZF = (_QWORD)v264 == 0)
        : (_ZF = 1),
          _ZF || BYTE9(v285)))
    {
LABEL_177:
      v40.n128_f64[0] = v240;
      if (v240 >= 0.0)
      {
        v40.n128_u64[0] = 3.0;
        if (v73 <= 3.0)
        {
          v40.n128_u64[0] = 15.0;
          v41.n128_f64[0] = v240;
          if (v240 >= 15.0)
          {
            v40.n128_f64[0] = v70 * *(double *)&v284;
            v41.n128_f64[0] = v240;
            if (v240 >= v70 * *(double *)&v284)
            {
              v237 = v71;
              v90 = v77;
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v91 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134349312;
                *(_QWORD *)&buf[4] = v76;
                *(_WORD *)&buf[12] = 2050;
                *(double *)&buf[14] = v240;
                _os_log_impl(&dword_18F5B3000, v91, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected, recomputing without course,solutionDiff,%{public}.2lf", buf, 0x16u);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                *(_DWORD *)v311 = 134349312;
                *(_QWORD *)&v311[4] = v76;
                *(_WORD *)&v311[12] = 2050;
                *(double *)&v311[14] = v240;
                v223 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v223);
                if (v223 != (char *)buf)
                  free(v223);
              }
              *(_OWORD *)&v311[16] = 0u;
              *(_OWORD *)v311 = xmmword_18F771F40;
              *(_QWORD *)&v311[32] = 0x3FF0000000000000;
              memset(&v311[40], 0, 49);
              *(_OWORD *)&v313[2] = v239;
              v315 = 0u;
              v314 = &v315;
              v316 = 0u;
              v317 = 0;
              v318 = 1;
              v319 = 0;
              v324 = 0u;
              v320 = 0u;
              v321 = 0u;
              v322 = 0u;
              v323 = 0;
              v325 = 0;
              v326 = 0xBFF0000000000000;
              v328 = 0;
              v327 = 0u;
              v329 = 1;
              v330 = 0.0;
              v331 = 0u;
              v332 = 0u;
              v333 = 0u;
              v334 = 0;
              v338 = 0u;
              v335 = 0u;
              v336 = 0;
              v337 = 0;
              v339 = 0xBFF0000000000000;
              v340 = 0xBFF0000000000000;
              v341 = 0u;
              v342 = 0xBFF0000000000000;
              v356 = 0;
              v357 = 0;
              v354 = 0u;
              v353 = 0u;
              v355 = 0;
              v360 = 0u;
              memset(v361, 0, sizeof(v361));
              v358 = 0u;
              v359 = 0u;
              v363 = 0u;
              v364 = 0u;
              v362 = 0u;
              memset(v352, 0, sizeof(v352));
              v351 = 0u;
              v350 = 0u;
              v349 = 0u;
              v348 = 0u;
              v347 = 0u;
              v346 = 0u;
              v345 = 0u;
              v344 = 0u;
              v343 = 0u;
              v365 = 0;
              v368 = 0u;
              v366 = xmmword_18F775AA0;
              v367 = 0x415854A640000000;
              v369 = 0x3FF0000000000000;
              v370 = 0;
              v371 = 0u;
              memset(v372, 0, 11);
              *(_DWORD *)((char *)v373 + 7) = 0;
              v373[0] = 0;
              v374 = 0;
              v92 = sub_18F72AAB0(v3, v242, v244, v2, 1, 1, (uint64_t)v311);
              if (BYTE2(v372[1]))
                v93 = v92;
              else
                v93 = 1;
              if ((v93 & 1) == 0)
              {
                v103 = sub_18F7252D0((uint64_t)&v327, v90, v237);
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v104 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 134349568;
                  *(_QWORD *)&buf[4] = v76;
                  *(_WORD *)&buf[12] = 2050;
                  *(double *)&buf[14] = v240;
                  *(_WORD *)&buf[22] = 2050;
                  *(double *)&buf[24] = v103;
                  _os_log_impl(&dword_18F5B3000, v104, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,course,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf", buf, 0x20u);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                  LODWORD(v297[0]) = 134349568;
                  *(_QWORD *)((char *)v297 + 4) = v76;
                  WORD6(v297[0]) = 2050;
                  *(double *)((char *)v297 + 14) = v240;
                  WORD3(v297[1]) = 2050;
                  *((double *)&v297[1] + 1) = v103;
                  v224 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v224);
                  if (v224 != (char *)buf)
                    free(v224);
                }
                if (v103 < v240 * 0.6)
                {
                  sub_18F72E3A0((uint64_t)v245, (__int128 *)v311);
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                  v113 = off_1EE172160;
                  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 134349056;
                    *(_QWORD *)&buf[4] = v76;
                    _os_log_impl(&dword_18F5B3000, v113, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter swapped with local filter without course, solutionDiffCheck", buf, 0xCu);
                  }
                  if (sub_18F5C4AE0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172158 != -1)
                      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                    LODWORD(v297[0]) = 134349056;
                    *(_QWORD *)((char *)v297 + 4) = v76;
                    v114 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v114);
                    if (v114 != (char *)buf)
                      free(v114);
                  }
                  goto LABEL_313;
                }
                if (vabdd_f64(v103, v240) < 2.0)
                {
                  sub_18F69B170((uint64_t)&v264, (uint64_t)buf);
                  sub_18F69B170((uint64_t)&v327, (uint64_t)v297);
                  if (*(_QWORD *)buf != *(_QWORD *)&v297[0]
                    || buf[16] != LOBYTE(v297[1])
                    || *(_QWORD *)&buf[8] != *((_QWORD *)&v297[0] + 1))
                  {
                    v105 = *(float *)(v3 + 408);
                    v106 = fmod((float)(v105 - *(float *)&v268), 360.0);
                    if (v106 < 0.0)
                      v106 = v106 + 360.0;
                    if (v106 > 180.0)
                      v106 = v106 + -360.0;
                    v107 = fabs(v106);
                    v108 = fmod((float)(v105 - v330), 360.0);
                    if (v108 < 0.0)
                      v108 = v108 + 360.0;
                    if (v108 > 180.0)
                      v108 = v108 + -360.0;
                    if (v107 > 60.0 && fabs(v108) < 10.0)
                    {
                      sub_18F72E3A0((uint64_t)v245, (__int128 *)v311);
                      if (qword_1EE172158 != -1)
                        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                      v109 = off_1EE172160;
                      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 134349056;
                        *(_QWORD *)&buf[4] = v76;
                        _os_log_impl(&dword_18F5B3000, v109, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter swapped with local filter without course, courseDiffCheck", buf, 0xCu);
                      }
                      if (sub_18F5C4AE0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1EE172158 != -1)
                          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                        LODWORD(v297[0]) = 134349056;
                        *(_QWORD *)((char *)v297 + 4) = v76;
                        v110 = (char *)_os_log_send_and_compose_impl();
                        sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v110);
                        if (v110 != (char *)buf)
                          free(v110);
                      }
                    }
                  }
                }
              }
              sub_18F73D7E0((uint64_t)v311);
              if (BYTE1(v286[1]))
              {
                v94 = *(double **)(v3 + 1904);
                v95 = *(double **)(v3 + 1912);
                if (v94 == v95)
                {
                  v97 = -1.0;
                  v96 = -1.0;
                }
                else
                {
                  v96 = -1.0;
                  v97 = -1.0;
                  do
                  {
                    v98 = sub_18F5BD064(v90, *(double *)(v3 + 416), *(double *)(v3 + 424), v94[10], v94[11], 0.0);
                    if (v98 < v96 || v96 < 0.0)
                      v96 = v98;
                    v100 = fmod(v94[13] - *(float *)(v3 + 408), 360.0);
                    if (v100 < 0.0)
                      v100 = v100 + 360.0;
                    if (v100 > 180.0)
                      v100 = v100 + -360.0;
                    v101 = fabs(v100);
                    if (v101 < v97 || v97 < 0.0)
                      v97 = v101;
                    v94 += 33;
                  }
                  while (v94 != v95);
                }
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v121 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 134349568;
                  *(_QWORD *)&buf[4] = v76;
                  *(_WORD *)&buf[12] = 2050;
                  *(double *)&buf[14] = v97;
                  *(_WORD *)&buf[22] = 2050;
                  *(double *)&buf[24] = v96;
                  _os_log_impl(&dword_18F5B3000, v121, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected,verifying routeHints,courseDiffBetweenPriorSolution,%{public}.2lf,distanceDiffBetweenPriorSolution,%{public}.2lf", buf, 0x20u);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                  *(_DWORD *)v311 = 134349568;
                  *(_QWORD *)&v311[4] = v76;
                  *(_WORD *)&v311[12] = 2050;
                  *(double *)&v311[14] = v97;
                  *(_WORD *)&v311[22] = 2050;
                  *(double *)&v311[24] = v96;
                  v225 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v225);
                  if (v225 != (char *)buf)
                    free(v225);
                }
                if (v97 >= 30.0
                  || (v96 >= 4.0 ? (v122 = v96 < *(double *)&v284 + *(double *)&v284) : (v122 = 1), !v122))
                {
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                  v125 = off_1EE172160;
                  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 134349312;
                    *(_QWORD *)&buf[4] = v76;
                    *(_WORD *)&buf[12] = 2050;
                    *(double *)&buf[14] = v240;
                    _os_log_impl(&dword_18F5B3000, v125, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected, recomputing without routeHints,solutionDiff,%{public}.2lf", buf, 0x16u);
                  }
                  if (sub_18F5C4AE0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172158 != -1)
                      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                    *(_DWORD *)v311 = 134349312;
                    *(_QWORD *)&v311[4] = v76;
                    *(_WORD *)&v311[12] = 2050;
                    *(double *)&v311[14] = v240;
                    v228 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v228);
                    if (v228 != (char *)buf)
                      free(v228);
                  }
                  sub_18F72A960((uint64_t)v311);
                  v126 = sub_18F72AAB0(v3, v242, v244, v2, 0, 1, (uint64_t)v311);
                  if (BYTE2(v372[1]))
                    v127 = v126;
                  else
                    v127 = 1;
                  if ((v127 & 1) == 0)
                  {
                    v128 = sub_18F7252D0((uint64_t)&v327, v90, v237);
                    if (qword_1EE172158 != -1)
                      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                    v129 = off_1EE172160;
                    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 134349568;
                      *(_QWORD *)&buf[4] = v76;
                      *(_WORD *)&buf[12] = 2050;
                      *(double *)&buf[14] = v240;
                      *(_WORD *)&buf[22] = 2050;
                      *(double *)&buf[24] = v128;
                      _os_log_impl(&dword_18F5B3000, v129, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,solutionDiff,%{public}.2lf,newSolutionDiff,%{public}.2lf", buf, 0x20u);
                    }
                    if (sub_18F5C4AE0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1EE172158 != -1)
                        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                      LODWORD(v297[0]) = 134349568;
                      *(_QWORD *)((char *)v297 + 4) = v76;
                      WORD6(v297[0]) = 2050;
                      *(double *)((char *)v297 + 14) = v240;
                      WORD3(v297[1]) = 2050;
                      *((double *)&v297[1] + 1) = v128;
                      v229 = (char *)_os_log_send_and_compose_impl();
                      sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v229);
                      if (v229 != (char *)buf)
                        free(v229);
                    }
                    if (v128 < *(double *)&v371 * 1.5 && v128 > *(double *)&v371 * 0.1)
                    {
                      sub_18F72E3A0((uint64_t)v245, (__int128 *)v311);
                      if (qword_1EE172158 != -1)
                        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                      v130 = off_1EE172160;
                      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 134349056;
                        *(_QWORD *)&buf[4] = v76;
                        _os_log_impl(&dword_18F5B3000, v130, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter swapped with local filter without routeHints", buf, 0xCu);
                      }
                      if (sub_18F5C4AE0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1EE172158 != -1)
                          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                        LODWORD(v297[0]) = 134349056;
                        *(_QWORD *)((char *)v297 + 4) = v76;
                        v231 = (char *)_os_log_send_and_compose_impl();
                        sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v231);
                        if (v231 != (char *)buf)
                          free(v231);
                      }
                    }
                  }
LABEL_313:
                  sub_18F73D7E0((uint64_t)v311);
                  goto LABEL_331;
                }
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v123 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 134349056;
                  *(_QWORD *)&buf[4] = v76;
                  _os_log_impl(&dword_18F5B3000, v123, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected,routeHints are OK, skipping recomputation", buf, 0xCu);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                  *(_DWORD *)v311 = 134349056;
                  *(_QWORD *)&v311[4] = v76;
                  v124 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v124);
                  if (v124 != (char *)buf)
                    free(v124);
                }
              }
              else
              {
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v111 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 134349056;
                  *(_QWORD *)&buf[4] = v76;
                  _os_log_impl(&dword_18F5B3000, v111, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solution jump detected,routeHints are not used", buf, 0xCu);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                  *(_DWORD *)v311 = 134349056;
                  *(_QWORD *)&v311[4] = v76;
                  v112 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v112);
                  if (v112 != (char *)buf)
                    free(v112);
                }
              }
            }
          }
        }
      }
LABEL_331:
      if (((*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, __n128, __n128))(*(_QWORD *)v3 + 72))(v3, v245, v244, v40, v41) & 1) != 0)
      {
        if (((*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v3 + 16))(v3, v245) & 1) != 0)
        {
          v243 = 0;
          goto LABEL_347;
        }
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v135 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v4;
          _os_log_impl(&dword_18F5B3000, v135, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, adjustSolutionforRoadWidth failed", buf, 0xCu);
        }
        if (!sub_18F5C4AE0(115, 2))
        {
LABEL_346:
          v243 = 1;
LABEL_347:
          v136 = *(double *)(v3 + 1872);
          v137 = v136 < 0.0;
          if (vabdd_f64(*((double *)&v275 + 1), v136) > 6.0)
            v137 = 1;
          v238 = v137;
          if (!v137)
          {
LABEL_388:
            if ((v243 & 1) != 0
              || (*(unsigned int (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v3 + 80))(v3, v245, v244))
            {
              v156 = *(_QWORD *)(v3 + 240);
              v241 = *(_QWORD *)(v3 + 248);
              sub_18F725768(v3);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v157 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134349312;
                *(_QWORD *)&buf[4] = v4;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v156 != v241;
                _os_log_impl(&dword_18F5B3000, v157, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset,shallReset,wasInitialized,%{public}d", buf, 0x12u);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                *(_DWORD *)v311 = 134349312;
                *(_QWORD *)&v311[4] = v4;
                *(_WORD *)&v311[12] = 1026;
                *(_DWORD *)&v311[14] = v156 != v241;
                v212 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v212);
                if (v212 != (char *)buf)
                  free(v212);
              }
              v250 = 0;
              sub_18F73D96C((void **)&v247);
              v247 = 0uLL;
              __p[0] = 0;
              memset(buf, 0, 24);
              *(_QWORD *)v311 = buf;
              sub_18F6B2D54((void ***)v311);
              if (__p[1])
              {
                *(void **)&v249 = __p[1];
                operator delete(__p[1]);
              }
              __p[1] = 0;
              v249 = 0uLL;
              *(_QWORD *)&v251 = 0xBFF0000000000000;
              sub_18F71D87C((uint64_t)&v251 + 8);
              v295 = 0;
              v296 = 0;
              v293 = 0;
              v294 = 0;
              memset(v377, 0, 23);
              memset(v375, 0, sizeof(v375));
              memset(v379, 0, 49);
              memset(v378, 0, 49);
              v292 = 0uLL;
              memset(v311, 0, 75);
              v298 = 0;
              memset(v297, 0, sizeof(v297));
              *(_QWORD *)((char *)v376 + 7) = 0;
              v376[0] = 0;
              memset(buf, 0, 128);
              v291 = 0uLL;
              *(_DWORD *)((char *)v290 + 7) = 0;
              v290[0] = 0;
              v158 = (std::__shared_weak_count *)*((_QWORD *)&v254 + 1);
              v254 = 0uLL;
              if (v158)
              {
                v159 = (unint64_t *)&v158->__shared_owners_;
                do
                  v160 = __ldaxr(v159);
                while (__stlxr(v160 - 1, v159));
                if (!v160)
                {
                  ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                  std::__shared_weak_count::__release_weak(v158);
                }
              }
              v255 = 0;
              v256[0] = 1;
              *(_WORD *)&v256[1] = v295;
              v257 = v296;
              v259 = v379[0];
              v258 = 0;
              v260[0] = *(_QWORD *)&v379[1];
              *(_OWORD *)&v260[1] = *(_OWORD *)((char *)&v379[1] + 8);
              *(_OWORD *)((char *)&v260[2] + 1) = *(_OWORD *)((char *)&v379[2] + 1);
              if (v261[0])
              {
                v261[1] = v261[0];
                operator delete(v261[0]);
              }
              v261[0] = 0;
              v261[1] = 0;
              v262 = 0;
              v161 = (std::__shared_weak_count *)*((_QWORD *)&v264 + 1);
              v264 = 0uLL;
              v263 = 0xBFF0000000000000;
              if (v161)
              {
                v162 = (unint64_t *)&v161->__shared_owners_;
                do
                  v163 = __ldaxr(v162);
                while (__stlxr(v163 - 1, v162));
                if (!v163)
                {
                  ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                  std::__shared_weak_count::__release_weak(v161);
                }
              }
              v265 = 0;
              v266[0] = 1;
              *(_WORD *)&v266[1] = v293;
              v267 = v294;
              v268 = 0;
              v269 = v378[0];
              *(_QWORD *)v270 = *(_QWORD *)&v378[1];
              *(_OWORD *)&v270[8] = *(_OWORD *)((char *)&v378[1] + 8);
              *(_OWORD *)&v270[17] = *(_OWORD *)((char *)&v378[2] + 1);
              if ((_QWORD)v271)
              {
                *((_QWORD *)&v271 + 1) = v271;
                operator delete((void *)v271);
              }
              v271 = 0uLL;
              v273 = 0;
              v272 = 0;
              v274 = *(_OWORD *)((char *)v377 + 7);
              v275 = v239;
              v276 = v292;
              *(_QWORD *)v277 = 0xBFF0000000000000;
              *(_OWORD *)&v277[40] = v297[2];
              *(_OWORD *)&v277[56] = v297[3];
              *(_QWORD *)&v277[72] = v298;
              *(_OWORD *)&v277[8] = v297[0];
              *(_OWORD *)&v277[24] = v297[1];
              if (SHIBYTE(v278) < 0)
                operator delete(*(void **)&v277[80]);
              *(_QWORD *)((char *)&v278 + 7) = *(_QWORD *)((char *)v376 + 7);
              *(_QWORD *)&v277[80] = 0;
              *(_QWORD *)&v278 = v376[0];
              HIBYTE(v278) = 0;
              *(_OWORD *)&v279[64] = *(_OWORD *)&buf[64];
              *(_OWORD *)&v279[80] = *(_OWORD *)&buf[80];
              *(_OWORD *)&v279[96] = *(_OWORD *)&buf[96];
              *(_OWORD *)&v279[112] = *(_OWORD *)&buf[112];
              *(_OWORD *)v279 = *(_OWORD *)buf;
              *(_OWORD *)&v279[16] = *(_OWORD *)&buf[16];
              *(_OWORD *)&v279[32] = *(_OWORD *)&buf[32];
              *(_OWORD *)&v279[48] = *(_OWORD *)&buf[48];
              *(_QWORD *)&v279[128] = 0;
              *(_OWORD *)&v279[168] = *(_OWORD *)&v311[32];
              *(_OWORD *)&v279[184] = *(_OWORD *)&v311[48];
              *(_OWORD *)&v279[195] = *(_OWORD *)&v311[59];
              *(_OWORD *)&v279[136] = *(_OWORD *)v311;
              *(_OWORD *)&v279[152] = *(_OWORD *)&v311[16];
              *(_OWORD *)&v279[211] = *(_OWORD *)v375;
              *(_OWORD *)&v279[227] = *(_OWORD *)&v375[16];
              *(_OWORD *)&v279[243] = *(_OWORD *)&v375[32];
              *(_QWORD *)&v279[256] = *(_QWORD *)&v375[45];
              *(_QWORD *)&v279[264] = 0;
              *(_OWORD *)&v279[272] = xmmword_18F775AA0;
              v280 = 0x415854A640000000;
              v281 = v291;
              v282 = 0x3FF0000000000000;
              v283 = 0;
              v284 = 0uLL;
              v164 = (std::__shared_weak_count *)v285;
              *(_QWORD *)&v285 = 0;
              if (v164)
              {
                v165 = (unint64_t *)&v164->__shared_owners_;
                do
                  v166 = __ldaxr(v165);
                while (__stlxr(v166 - 1, v165));
                if (!v166)
                {
                  ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                  std::__shared_weak_count::__release_weak(v164);
                }
              }
              *((_QWORD *)&v285 + 1) = 0;
              *(_DWORD *)((char *)v286 + 7) = *(_DWORD *)((char *)v290 + 7);
              v286[0] = v290[0];
              v167 = *(_OWORD *)(v2 + 80);
              *(_OWORD *)&v277[16] = *(_OWORD *)(v2 + 64);
              *(_OWORD *)&v277[32] = v167;
              v168 = *(_OWORD *)(v2 + 112);
              *(_OWORD *)&v277[48] = *(_OWORD *)(v2 + 96);
              *(_OWORD *)&v277[64] = v168;
              v169 = *(_OWORD *)(v2 + 16);
              v274 = *(_OWORD *)v2;
              v275 = v169;
              v170 = *(_OWORD *)(v2 + 48);
              v276 = *(_OWORD *)(v2 + 32);
              *(_OWORD *)v277 = v170;
              std::string::operator=((std::string *)&v277[80], (const std::string *)(v2 + 128));
              memcpy(v279, (const void *)(v2 + 152), 0x118uLL);
              if (v156 != v241
                && ((*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v3 + 24))(v3, v245) & 1) == 0)
              {
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v207 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134349056;
                  *(_QWORD *)&buf[4] = v4;
                  _os_log_impl(&dword_18F5B3000, v207, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to re-initialize filter", buf, 0xCu);
                }
                if (sub_18F5C4AE0(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                  *(_DWORD *)v311 = 134349056;
                  *(_QWORD *)&v311[4] = v4;
                  v219 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v219);
                  if (v219 != (char *)buf)
                    free(v219);
                  v19 = 0;
                }
                else
                {
                  v19 = 0;
                }
LABEL_508:
                sub_18F73D7E0((uint64_t)v245);
                if (!v5)
                  return v19;
                goto LABEL_509;
              }
            }
            if (BYTE10(v285))
            {
              if ((_QWORD)v264)
              {
                v171 = *(_QWORD *)v264;
                v172 = v266[0];
                v173 = *(_QWORD *)(v3 + 1056);
                v174 = *(_QWORD *)(v3 + 1048);
                if (!v173 || v171 != *(_QWORD *)(v174 + 16) || v266[0] != *(unsigned __int8 *)(v174 + 24))
                {
                  v175 = operator new(0x20uLL);
                  v175[1] = v174;
                  v175[2] = v171;
                  *((_BYTE *)v175 + 24) = v172;
                  *v175 = v3 + 1040;
                  *(_QWORD *)v174 = v175;
                  *(_QWORD *)(v3 + 1048) = v175;
                  *(_QWORD *)(v3 + 1056) = v173 + 1;
                  if ((int)v173 + 1 >= 51)
                  {
                    v176 = *(uint64_t **)(v3 + 1040);
                    v177 = *v176;
                    *(_QWORD *)(v177 + 8) = v176[1];
                    *(_QWORD *)v176[1] = v177;
                    *(_QWORD *)(v3 + 1056) = v173;
                    operator delete(v176);
                  }
                }
              }
            }
            if (*(_BYTE *)(v3 + 1010) && !*(_QWORD *)(v3 + 384))
              goto LABEL_429;
            if (BYTE10(v285))
            {
              if (!(_QWORD)v264)
              {
LABEL_429:
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v178 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134349056;
                  *(_QWORD *)&buf[4] = *((_QWORD *)&v274 + 1);
                  _os_log_impl(&dword_18F5B3000, v178, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, prior or current snap is valid but bestparticle road is null", buf, 0xCu);
                }
                if (sub_18F5C4AE0(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                  *(_DWORD *)v311 = 134349056;
                  *(_QWORD *)&v311[4] = *((_QWORD *)&v274 + 1);
                  v179 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 0, "void CLParticleMM::CLParticleMapMatcherFilterBase::updateIntersectionInfo(const MMFilterData &, const MMSnapData &, CLParticleMapMatcherCommon::IntersectionInfo &)", "CoreLocation: %s\n", v179);
                  if (v179 != (char *)buf)
                    free(v179);
                }
LABEL_469:
                if (!v238)
                {
                  if (v279[112])
                  {
                    if (!v279[113])
                    {
                      v202 = *(double *)&v277[32];
                      if (*(double *)&v277[32] < 400.0 && *(double *)&v277[32] > 0.0 && (!v273 || LOBYTE(v286[1])))
                      {
                        v203 = sub_18F5BD064((double *)(v3 + 168), *(double *)&v277[8], *(double *)&v277[16], *(double *)v279, *(double *)&v279[8], 0.0);
                        v204 = v203 / v202;
                        if (v204 > 1.5)
                        {
                          if (qword_1EE172158 != -1)
                            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                          v205 = off_1EE172160;
                          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)buf = 134351617;
                            *(_QWORD *)&buf[4] = *((_QWORD *)&v274 + 1);
                            *(_WORD *)&buf[12] = 2049;
                            *(_QWORD *)&buf[14] = *(_QWORD *)&v277[8];
                            *(_WORD *)&buf[22] = 2049;
                            *(_QWORD *)&buf[24] = *(_QWORD *)&v277[16];
                            *(_WORD *)&buf[32] = 2050;
                            *(_QWORD *)&buf[34] = *(_QWORD *)&v277[24];
                            *(_WORD *)&buf[42] = 2050;
                            *(_QWORD *)&buf[44] = *(_QWORD *)&v277[56];
                            *(_WORD *)&buf[52] = 2049;
                            *(_QWORD *)&buf[54] = *(_QWORD *)v279;
                            *(_WORD *)&buf[62] = 2049;
                            *(_QWORD *)&buf[64] = *(_QWORD *)&v279[8];
                            *(_WORD *)&buf[72] = 2050;
                            *(_QWORD *)&buf[74] = *(_QWORD *)&v279[16];
                            *(_WORD *)&buf[82] = 2050;
                            *(double *)&buf[84] = v203;
                            *(_WORD *)&buf[92] = 2050;
                            *(_QWORD *)&buf[94] = *(_QWORD *)&v277[32];
                            *(_WORD *)&buf[102] = 2050;
                            *(double *)&buf[104] = v204;
                            _os_log_impl(&dword_18F5B3000, v205, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf,alt,%{public}.2lf,course,%{public}.1lf,snapLat,%{private}.8lf,snapLon,%{private}.8lf,snapCourse,%{public}.1lf,horizontalError,%{public}.2lf,hunc,%{public}.2lf,ratio,%{public}.2lf", buf, 0x70u);
                          }
                          if (sub_18F5C4AE0(115, 2))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_1EE172158 != -1)
                              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                            *(_DWORD *)v311 = 134351617;
                            *(_QWORD *)&v311[4] = *((_QWORD *)&v274 + 1);
                            *(_WORD *)&v311[12] = 2049;
                            *(_QWORD *)&v311[14] = *(_QWORD *)&v277[8];
                            *(_WORD *)&v311[22] = 2049;
                            *(_QWORD *)&v311[24] = *(_QWORD *)&v277[16];
                            *(_WORD *)&v311[32] = 2050;
                            *(_QWORD *)&v311[34] = *(_QWORD *)&v277[24];
                            *(_WORD *)&v311[42] = 2050;
                            *(_QWORD *)&v311[44] = *(_QWORD *)&v277[56];
                            *(_WORD *)&v311[52] = 2049;
                            *(_QWORD *)&v311[54] = *(_QWORD *)v279;
                            *(_WORD *)&v311[62] = 2049;
                            *(_QWORD *)&v311[64] = *(_QWORD *)&v279[8];
                            *(_WORD *)&v311[72] = 2050;
                            *(_QWORD *)&v311[74] = *(_QWORD *)&v279[16];
                            *(_WORD *)&v311[82] = 2050;
                            *(double *)&v311[84] = v203;
                            v312 = 2050;
                            *(_QWORD *)v313 = *(_QWORD *)&v277[32];
                            *(_WORD *)&v313[8] = 2050;
                            *(double *)&v313[10] = v204;
                            v222 = (char *)_os_log_send_and_compose_impl();
                            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::modifyHorizontalUncertainty(MMFilterData &)", "CoreLocation: %s\n", v222);
                            if (v222 != (char *)buf)
                              free(v222);
                          }
                          v206 = v203 * 1.05;
                          if (v203 * 1.05 > 400.0)
                            v206 = 400.0;
                          *(double *)&v277[32] = v206;
                        }
                      }
                    }
                  }
                }
                if (v279[112])
                {
                  v196 = *((double *)&v275 + 1);
                  *(_QWORD *)(v3 + 232) = *((_QWORD *)&v275 + 1);
                  if (*(_BYTE *)(v3 + 10))
                  {
                    if (!BYTE9(v285))
                    {
                      if (*(_DWORD *)&v279[264] <= 6u && ((0x58u >> v279[264]) & 1) != 0 && *(_BYTE *)(v3 + 11)
                        || (v197 = *(double *)(v3 + 1872), v197 >= 0.0) && vabdd_f64(v196, v197) <= 6.0)
                      {
                        (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v3 + 96))(v3, v245, v244);
                      }
                    }
                  }
                }
                if (v242 != (uint64_t *)&v247)
                  sub_18F73DCBC((uint64_t)v242, v247, *((uint64_t *)&v247 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v247 + 1) - v247) >> 4));
                sub_18F72E23C(v244, (uint64_t)&v254);
                v198 = *(_OWORD *)&v277[32];
                *(_OWORD *)(v2 + 64) = *(_OWORD *)&v277[16];
                *(_OWORD *)(v2 + 80) = v198;
                v199 = *(_OWORD *)&v277[64];
                *(_OWORD *)(v2 + 96) = *(_OWORD *)&v277[48];
                *(_OWORD *)(v2 + 112) = v199;
                v200 = v275;
                *(_OWORD *)v2 = v274;
                *(_OWORD *)(v2 + 16) = v200;
                v201 = *(_OWORD *)v277;
                *(_OWORD *)(v2 + 32) = v276;
                *(_OWORD *)(v2 + 48) = v201;
                std::string::operator=((std::string *)(v2 + 128), (const std::string *)&v277[80]);
                memcpy((void *)(v2 + 152), v279, 0x118uLL);
                if (*(_BYTE *)(v2 + 264) && *(_BYTE *)(v2 + 265) && *(_DWORD *)(v2 + 280) == 3 && !*(_BYTE *)(v3 + 12))
                  *(_BYTE *)(v2 + 265) = 0;
                v19 = v243 ^ 1u;
                goto LABEL_508;
              }
              if (*(_BYTE *)(v3 + 1010))
              {
                v180 = sub_18F5BD064((double *)(v3 + 168), *(double *)(v3 + 416), *(double *)(v3 + 424), *(double *)&v269, *((double *)&v269 + 1), *(double *)&v277[24]);
                v181 = *(_QWORD *)(v3 + 392);
                *(_QWORD *)buf = *(_QWORD *)(v3 + 384);
                *(_QWORD *)&buf[8] = v181;
                if (v181)
                {
                  v182 = (unint64_t *)(v181 + 8);
                  do
                    v183 = __ldxr(v182);
                  while (__stxr(v183 + 1, v182));
                }
                v184 = *(_OWORD *)(v3 + 416);
                *(_OWORD *)&buf[16] = *(_OWORD *)(v3 + 400);
                *(_OWORD *)&buf[32] = v184;
                v185 = *(_QWORD *)(v3 + 432);
                *(_OWORD *)&buf[56] = *(_OWORD *)(v3 + 440);
                *(_OWORD *)&buf[65] = *(_OWORD *)(v3 + 449);
                *(_QWORD *)&buf[48] = v185;
                memset(&buf[88], 0, 24);
                sub_18F692CBC(&buf[88], *(const void **)(v3 + 472), *(_QWORD *)(v3 + 480), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v3 + 480) - *(_QWORD *)(v3 + 472)) >> 3));
                memset(v311, 0, 20);
                *(_WORD *)&v311[20] = 1;
                *(_DWORD *)&v311[24] = 0;
                memset(&v311[32], 0, 24);
                sub_18F623A40(v311, (uint64_t *)buf);
                v311[20] = buf[20];
                *(_QWORD *)&v311[48] = *(_QWORD *)&buf[48];
                *(_QWORD *)&v379[0] = 0;
                *(_QWORD *)&v378[0] = 0;
                *(_QWORD *)&v297[0] = v297;
                *((_QWORD *)&v297[0] + 1) = v297;
                *(_QWORD *)&v297[1] = 0;
                *(_QWORD *)v375 = v375;
                *(_QWORD *)&v375[8] = v375;
                *(_QWORD *)&v375[16] = 0;
                LODWORD(v377[0]) = 0;
                v186 = (*(uint64_t (**)(uint64_t, _BYTE *, double *, _OWORD *, _BYTE *, _OWORD *, _OWORD *, double))(*(_QWORD *)v3 + 88))(v3, v311, v377, v297, v375, v379, v378, v180);
                if (SLODWORD(v377[0]) > 1)
                  v187 = v186;
                else
                  v187 = 0;
                if ((v187 & 1) != 0)
                {
                  sub_18F623A40(buf, (uint64_t *)v311);
                  *(_QWORD *)&buf[48] = *(_QWORD *)&v311[48];
                  *(_OWORD *)&buf[16] = *(_OWORD *)&v311[16];
                  *(_QWORD *)&buf[32] = *(_QWORD *)&v379[0];
                  *(_QWORD *)&buf[40] = *(_QWORD *)&v378[0];
                }
                sub_18F64F950((uint64_t *)v375);
                sub_18F64F950((uint64_t *)v297);
                v188 = *(std::__shared_weak_count **)&v311[8];
                if (*(_QWORD *)&v311[8])
                {
                  v189 = (unint64_t *)(*(_QWORD *)&v311[8] + 8);
                  do
                    v190 = __ldaxr(v189);
                  while (__stlxr(v190 - 1, v189));
                  if (!v190)
                  {
                    ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                    std::__shared_weak_count::__release_weak(v188);
                  }
                }
                if (v187)
                {
                  *(_BYTE *)(v3 + 1064) = 1;
                  *(_DWORD *)(v3 + 1200) = LODWORD(v377[0]);
                  sub_18F623A40((_QWORD *)(v3 + 1088), (uint64_t *)buf);
                  v191 = *(_OWORD *)&buf[32];
                  *(_OWORD *)(v3 + 1104) = *(_OWORD *)&buf[16];
                  *(_OWORD *)(v3 + 1120) = v191;
                  *(_QWORD *)(v3 + 1136) = *(_QWORD *)&buf[48];
                  *(_OWORD *)(v3 + 1144) = *(_OWORD *)&buf[56];
                  *(_OWORD *)(v3 + 1153) = *(_OWORD *)&buf[65];
                  if ((uint8_t *)(v3 + 1088) != buf)
                    sub_18F692DD0((char *)(v3 + 1176), *(char **)&buf[88], *(uint64_t *)&buf[96], 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&buf[96] - *(_QWORD *)&buf[88]) >> 3));
                  *(_QWORD *)(v3 + 1080) = *(_QWORD *)(v3 + 512);
                }
                if (*(_QWORD *)&buf[88])
                {
                  *(_QWORD *)&buf[96] = *(_QWORD *)&buf[88];
                  operator delete(*(void **)&buf[88]);
                }
                v192 = *(std::__shared_weak_count **)&buf[8];
                if (*(_QWORD *)&buf[8])
                {
                  v193 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                  do
                    v194 = __ldaxr(v193);
                  while (__stlxr(v194 - 1, v193));
                  if (!v194)
                  {
                    ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                    std::__shared_weak_count::__release_weak(v192);
                  }
                }
              }
            }
            if (*(_BYTE *)(v3 + 1064))
            {
              if (!BYTE10(v285)
                || (v195 = sub_18F5BD064((double *)(v3 + 168), *(double *)(v3 + 1120), *(double *)(v3 + 1128), *(double *)v279, *(double *)&v279[8], *(double *)&v277[24]), *(long double *)(v3 + 1072) = v195, v195 > 450.0))
              {
                *(_BYTE *)(v3 + 1064) = 0;
              }
            }
            goto LABEL_469;
          }
          if ((v243 & 1) == 0)
          {
            v138 = sub_18F72B638(v3, (uint64_t)v245, v244);
            v139 = v138;
            if (v138)
            {
              v140 = 1.0;
              if (*(double *)(v3 + 512) > 0.0)
                v140 = v12;
              *(double *)(v3 + 2200) = *(double *)(v3 + 2200) + v140;
              LOBYTE(v283) = 1;
              *(_QWORD *)&v279[16] = *(_QWORD *)&v277[56];
            }
            else
            {
              *(_QWORD *)(v3 + 2200) = 0;
            }
            v279[113] = v138;
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
            v141 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              v142 = *(_QWORD *)(v3 + 2200);
              *(_DWORD *)buf = 134349568;
              *(_QWORD *)&buf[4] = v4;
              *(_WORD *)&buf[12] = 1026;
              *(_DWORD *)&buf[14] = v139;
              *(_WORD *)&buf[18] = 2050;
              *(_QWORD *)&buf[20] = v142;
              _os_log_impl(&dword_18F5B3000, v141, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,%{public}d,consecutiveAmbCount,%{public}.1lf", buf, 0x1Cu);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v217 = *(_QWORD *)(v3 + 2200);
              *(_DWORD *)v311 = 134349568;
              *(_QWORD *)&v311[4] = v4;
              *(_WORD *)&v311[12] = 1026;
              *(_DWORD *)&v311[14] = v139;
              *(_WORD *)&v311[18] = 2050;
              *(_QWORD *)&v311[20] = v217;
              v218 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v218);
              if (v218 != (char *)buf)
                free(v218);
            }
          }
          v143 = v279[112];
          if (v279[112])
          {
            if (!*(_BYTE *)(v3 + 768))
            {
              *(_QWORD *)(v3 + 2096) = 0;
              *(_QWORD *)(v3 + 2104) = 0;
              *(_QWORD *)(v3 + 2112) = 0x3FF0000000000000;
            }
          }
          else if (*(_BYTE *)(v3 + 768))
          {
            *(_OWORD *)(v3 + 2096) = xmmword_18F774730;
            *(_QWORD *)(v3 + 2112) = 0;
          }
          v144 = -0.1;
          if (*((double *)&v275 + 1) >= 0.0)
          {
            v145 = *(double *)(v3 + 528);
            if (v145 >= 0.0)
              v144 = vabdd_f64(*((double *)&v275 + 1), v145) * 0.1;
          }
          if (v143)
            v146 = v279[113] == 0;
          else
            v146 = 0;
          if (v146)
            v147 = v144;
          else
            v147 = -v144;
          v148 = *(double *)(v3 + 2104) + v147;
          if (v146)
            v144 = -v144;
          v149 = fmin(fmax(*(double *)(v3 + 2112) + v144, 0.0), 1.0);
          *(double *)(v3 + 2112) = v149;
          v150 = fmin(fmax(v148, 0.0), 1.0);
          *(double *)(v3 + 2104) = v150;
          *(double *)(v3 + 2096) = *(double *)(v3 + 2096) + 1.0;
          *(float64x2_t *)v279 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v277[8], v149), *(float64x2_t *)v279, v150);
          *(_OWORD *)&v279[176] = *(_OWORD *)v279;
          *(_DWORD *)&v279[128] = 3;
          if (v149 >= 1.0)
          {
            v151 = 0;
          }
          else
          {
            if (v150 < 1.0)
            {
LABEL_383:
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v152 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                v153 = *(_QWORD *)(v3 + 2112);
                v154 = *(_QWORD *)(v3 + 2104);
                v155 = *(_QWORD *)(v3 + 2096);
                *(_DWORD *)buf = 134350080;
                *(_QWORD *)&buf[4] = *((_QWORD *)&v274 + 1);
                *(_WORD *)&buf[12] = 2050;
                *(_QWORD *)&buf[14] = v153;
                *(_WORD *)&buf[22] = 2050;
                *(_QWORD *)&buf[24] = v154;
                *(_WORD *)&buf[32] = 2050;
                *(_QWORD *)&buf[34] = v155;
                *(_WORD *)&buf[42] = 1026;
                *(_DWORD *)&buf[44] = *(_DWORD *)&v279[128];
                _os_log_impl(&dword_18F5B3000, v152, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,fRawWeight,%{public}.2lf,fSnapWeight,%{public}.2lf,fTimeInMode,%{public}.2lf,snapType,%{public}d", buf, 0x30u);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v213 = *(_QWORD *)(v3 + 2112);
                v214 = *(_QWORD *)(v3 + 2104);
                v215 = *(_QWORD *)(v3 + 2096);
                *(_DWORD *)v311 = 134350080;
                *(_QWORD *)&v311[4] = *((_QWORD *)&v274 + 1);
                *(_WORD *)&v311[12] = 2050;
                *(_QWORD *)&v311[14] = v213;
                *(_WORD *)&v311[22] = 2050;
                *(_QWORD *)&v311[24] = v214;
                *(_WORD *)&v311[32] = 2050;
                *(_QWORD *)&v311[34] = v215;
                *(_WORD *)&v311[42] = 1026;
                *(_DWORD *)&v311[44] = *(_DWORD *)&v279[128];
                v216 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMM::MMPartialMatcher::getPartialMatchedSolution(MMSnapData &, const MMSnapData &)", "CoreLocation: %s\n", v216);
                if (v216 != (char *)buf)
                  free(v216);
              }
              goto LABEL_388;
            }
            v151 = 1;
          }
          *(_DWORD *)&v279[128] = v151;
          goto LABEL_383;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 == -1)
        {
LABEL_536:
          *(_DWORD *)v311 = 134349056;
          *(_QWORD *)&v311[4] = v4;
          v220 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v220);
          if (v220 != (char *)buf)
            free(v220);
          goto LABEL_346;
        }
      }
      else
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v134 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v4;
          _os_log_impl(&dword_18F5B3000, v134, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, assessMatch failed", buf, 0xCu);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_346;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 == -1)
          goto LABEL_536;
      }
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      goto LABEL_536;
    }
    v81 = *(float *)(v3 + 408);
    v82 = fmod((float)(v81 - *(float *)&v268), 360.0);
    if (v82 < 0.0)
      v82 = v82 + 360.0;
    if (v82 > 180.0)
      v82 = v82 + -360.0;
    v83 = fabs(v82);
    *(_QWORD *)&v378[0] = 0;
    v377[0] = 0.0;
    sub_18F71ACC4((double *)(v3 + 168), (double *)v378, v377, *(double *)&v269, *((double *)&v269 + 1), 0.0, v81, *(double *)(v3 + 416), *(double *)(v3 + 424));
    v84 = *(double *)(v3 + 2200);
    if (v84 <= 5.0)
    {
      if (v84 >= 10.0)
      {
        v85 = 1;
LABEL_170:
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v87 = v76;
        v88 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v89 = *(_QWORD *)(v3 + 2200);
          *(_DWORD *)buf = 134350849;
          *(_QWORD *)&buf[4] = v76;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v85;
          *(_WORD *)&buf[18] = 2050;
          *(_QWORD *)&buf[20] = v89;
          *(_WORD *)&buf[28] = 2050;
          *(_QWORD *)&buf[30] = fabs(*(double *)&v279[88]);
          *(_WORD *)&buf[38] = 2050;
          *(double *)&buf[40] = v83;
          *(_WORD *)&buf[48] = 2050;
          *(_QWORD *)&buf[50] = *(_QWORD *)&v378[0];
          *(_WORD *)&buf[58] = 2049;
          *(_QWORD *)&buf[60] = v269;
          *(_WORD *)&buf[68] = 2049;
          *(_QWORD *)&buf[70] = *((_QWORD *)&v269 + 1);
          _os_log_impl(&dword_18F5B3000, v88, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solutionJumpCheck,shouldNotPropagateFromLastSnap,%{public}d,consecutiveAmbiguityEpochCount,%{public}.1lf,deltaAz,%{public}.2lf,courseDiffWithPriorSolution,%{public}.2lf,acrossTrack,%{public}.2lf,bestLL,%{private}.7lf,%{private}.7lf", buf, 0x4Eu);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v226 = *(_QWORD *)(v3 + 2200);
          *(_DWORD *)v311 = 134350849;
          *(_QWORD *)&v311[4] = v76;
          *(_WORD *)&v311[12] = 1026;
          *(_DWORD *)&v311[14] = v85;
          *(_WORD *)&v311[18] = 2050;
          *(_QWORD *)&v311[20] = v226;
          *(_WORD *)&v311[28] = 2050;
          *(_QWORD *)&v311[30] = fabs(*(double *)&v279[88]);
          *(_WORD *)&v311[38] = 2050;
          *(double *)&v311[40] = v83;
          *(_WORD *)&v311[48] = 2050;
          *(_QWORD *)&v311[50] = *(_QWORD *)&v378[0];
          *(_WORD *)&v311[58] = 2049;
          *(_QWORD *)&v311[60] = v269;
          *(_WORD *)&v311[68] = 2049;
          *(_QWORD *)&v311[70] = *((_QWORD *)&v269 + 1);
          v227 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v227);
          if (v227 != (char *)buf)
            free(v227);
          v87 = v76;
        }
        v77 = (double *)(v3 + 168);
        if (!v85)
        {
          sub_18F692488((uint64_t)v311, v3 + 384);
          v115 = *(_QWORD *)(v3 + 208);
          v116 = *(_QWORD *)(v3 + 216);
          *(_QWORD *)v375 = v115;
          *(_QWORD *)&v375[8] = v116;
          if (v116)
          {
            v117 = (unint64_t *)(v116 + 8);
            do
              v118 = __ldxr(v117);
            while (__stxr(v118 + 1, v117));
          }
          v119 = &OBJC_METACLASS___CLHeadingInternal;
          if (v115)
          {
            LODWORD(v297[0]) = 0;
            *(_QWORD *)buf = buf;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0;
            (*(void (**)(uint64_t, _BYTE *, uint8_t *, _OWORD *, double, double))(*(_QWORD *)v115 + 56))(v115, v311, buf, v297, *(double *)&v311[48], *(double *)&v284);
            sub_18F64F950((uint64_t *)buf);
          }
          if (*(_QWORD *)v311)
          {
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
            v120 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134350337;
              *(_QWORD *)&buf[4] = v87;
              *(_WORD *)&buf[12] = 2050;
              *(double *)&buf[14] = v240;
              *(_WORD *)&buf[22] = 2049;
              *(_QWORD *)&buf[24] = v269;
              *(_WORD *)&buf[32] = 2049;
              *(_QWORD *)&buf[34] = *((_QWORD *)&v269 + 1);
              *(_WORD *)&buf[42] = 2049;
              *(_QWORD *)&buf[44] = *(_QWORD *)&v311[32];
              *(_WORD *)&buf[52] = 2049;
              *(_QWORD *)&buf[54] = *(_QWORD *)&v311[40];
              _os_log_impl(&dword_18F5B3000, v120, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,solutionJumpCheck,solution replaced with previous propagated solution,%{public}.2lf,bestLL,%{private}.7lf,%{private}.7lf,newLL,%{private}.7lf,%{private}.7lf", buf, 0x3Eu);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              LODWORD(v297[0]) = 134350337;
              *(_QWORD *)((char *)v297 + 4) = v76;
              WORD6(v297[0]) = 2050;
              *(double *)((char *)v297 + 14) = v240;
              WORD3(v297[1]) = 2049;
              *((_QWORD *)&v297[1] + 1) = v269;
              LOWORD(v297[2]) = 2049;
              *(_QWORD *)((char *)&v297[2] + 2) = *((_QWORD *)&v269 + 1);
              WORD5(v297[2]) = 2049;
              *(_QWORD *)((char *)&v297[2] + 12) = *(_QWORD *)&v311[32];
              WORD2(v297[3]) = 2049;
              *(_QWORD *)((char *)&v297[3] + 6) = *(_QWORD *)&v311[40];
              v230 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v230);
              if (v230 != (char *)buf)
                free(v230);
              v87 = v76;
              v119 = &OBJC_METACLASS___CLHeadingInternal;
            }
            sub_18F692488((uint64_t)v297, (uint64_t)&v264);
            sub_18F69B218((uint64_t)&v264, (uint64_t)v311);
            if (sub_18F71B73C((uint64_t)&v254))
            {
              BYTE9(v285) = 1;
              LOBYTE(v283) = 1;
            }
            else
            {
              sub_18F69B218((uint64_t)&v264, (uint64_t)v297);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              info = v119[8].info;
              if (os_log_type_enabled(info, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134349056;
                *(_QWORD *)&buf[4] = v87;
                _os_log_impl(&dword_18F5B3000, info, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,solutionJumpCheck,solution replacement failed as unable to fillCrumb", buf, 0xCu);
              }
              if (sub_18F5C4AE0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                LODWORD(v379[0]) = 134349056;
                *(_QWORD *)((char *)v379 + 4) = v76;
                v232 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 0, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v232);
                if (v232 != (char *)buf)
                  free(v232);
              }
            }
            sub_18F692600((uint64_t)v297);
          }
          else
          {
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
            v131 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134349056;
              *(_QWORD *)&buf[4] = v87;
              _os_log_impl(&dword_18F5B3000, v131, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,solutionJumpCheck,solution replacement failed as returned particle has invalid road", buf, 0xCu);
            }
            if (sub_18F5C4AE0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              LODWORD(v297[0]) = 134349056;
              *(_QWORD *)((char *)v297 + 4) = v76;
              v132 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "void CLParticleMM::CLParticleMapMatcherFilterBase::checkForSolutionJumpsAndRecomputeSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, MMFilterData &, CLMapCrumb &)", "CoreLocation: %s\n", v132);
              if (v132 != (char *)buf)
                free(v132);
            }
          }
          sub_18F5D6004((uint64_t)v375);
          sub_18F692600((uint64_t)v311);
          goto LABEL_331;
        }
        v71 = v3 + 384;
        goto LABEL_177;
      }
    }
    else
    {
      v85 = 1;
      if (v84 >= 10.0 || fabs(*(double *)&v279[88]) < 7.0)
        goto LABEL_170;
    }
    v85 = fabs(*(double *)v378) < v79 && v83 < 30.0;
    goto LABEL_170;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v25 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not matching", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    *(_DWORD *)v311 = 134349056;
    *(_QWORD *)&v311[4] = v4;
    v211 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::mapMatch(CLMapCrumb &)", "CoreLocation: %s\n", v211);
    if (v211 != (char *)buf)
      free(v211);
  }
  v19 = 1;
  if (v5)
  {
LABEL_509:
    v208 = (unint64_t *)&v5->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v19;
}

void sub_18F72A814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_18F73D7E0((uint64_t)&STACK[0x510]);
  sub_18F73D7E0((uint64_t)&a29);
  sub_18F5D6004((uint64_t)&STACK[0x438]);
  _Unwind_Resume(a1);
}

double sub_18F72A960(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_18F771F40;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 96) = _Q1;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 156) = 1;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_WORD *)(a1 + 276) = 1;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_BYTE *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 392) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 400) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 424) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 648) = 0;
  *(_DWORD *)(a1 + 656) = 0;
  *(_WORD *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 723) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 590) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_QWORD *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 800) = xmmword_18F775AA0;
  *(_QWORD *)(a1 + 816) = 0x415854A640000000;
  *(_QWORD *)(a1 + 840) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 848) = 0;
  *(_DWORD *)(a1 + 879) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_DWORD *)(a1 + 895) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_BYTE *)(a1 + 904) = 0;
  return result;
}

uint64_t sub_18F72AAB0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  __n128 v30;
  char v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  NSObject *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  char v49;
  unint64_t *v50;
  unint64_t v51;
  NSObject *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63[3];
  std::__shared_weak_count *v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  char v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77;
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint8_t buf[4];
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(a1 + 208);
  v13 = *(std::__shared_weak_count **)(a1 + 216);
  v63[2] = v14;
  v64 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if (!v14)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v32 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v33 = *(_QWORD *)(a4 + 8);
      *(_DWORD *)buf = 134349056;
      v83 = v33;
      _os_log_impl(&dword_18F5B3000, v32, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, prepareSolution", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_48;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v34 = *(_QWORD *)(a4 + 8);
    LODWORD(v67) = 134349056;
    *(_QWORD *)((char *)&v67 + 4) = v34;
    v35 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "CoreLocation: %s\n", v35);
LABEL_100:
    if (v35 != (char *)buf)
      free(v35);
    goto LABEL_48;
  }
  v17 = *(_QWORD *)(a4 + 8);
  if ((uint64_t *)(a7 + 40) != a2)
    sub_18F73DCBC(a7 + 40, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4));
  v18 = *(_OWORD *)a4;
  v19 = *(_OWORD *)(a4 + 16);
  v20 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a7 + 408) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a7 + 424) = v20;
  *(_OWORD *)(a7 + 376) = v18;
  *(_OWORD *)(a7 + 392) = v19;
  v21 = *(_OWORD *)(a4 + 64);
  v22 = *(_OWORD *)(a4 + 80);
  v23 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(a7 + 472) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(a7 + 488) = v23;
  *(_OWORD *)(a7 + 440) = v21;
  *(_OWORD *)(a7 + 456) = v22;
  std::string::operator=((std::string *)(a7 + 504), (const std::string *)(a4 + 128));
  memcpy((void *)(a7 + 528), (const void *)(a4 + 152), 0x118uLL);
  if (*(_QWORD *)(a7 + 48) != *(_QWORD *)(a7 + 40)
    || ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a7) & 1) != 0)
  {
    v24 = *(unsigned __int8 *)(a1 + 1032);
    v68 = 0;
    v67 = 0uLL;
    v69 = xmmword_18F772330;
    v70 = 0;
    v71 = 0u;
    v72 = 0u;
    __asm { FMOV            V0.2D, #-1.0 }
    v73 = _Q0;
    v74 = _Q0;
    v75 = _Q0;
    v76 = _Q0;
    v77 = 0xBFF0000000000000;
    v78 = 0;
    v79 = _Q0;
    v80 = _Q0;
    v81 = _Q0;
    v30.n128_f64[0] = sub_18F724F20((uint64_t)&v67, a4, v24);
    *(_BYTE *)(a7 + 904) = *(_BYTE *)(a1 + 1032);
    if (a6)
    {
      *((_QWORD *)&v74 + 1) = 0xBFF0000000000000;
      *((_QWORD *)&v75 + 1) = 0xBFF0000000000000;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 40))(a1, a4, a7, a3, v30) & 1) != 0)
    {
      if (sub_18F71E6D0(a7, 1, (uint64_t)&v67))
      {
        v31 = 0;
        goto LABEL_35;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v37 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        v83 = v17;
        _os_log_impl(&dword_18F5B3000, v37, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, update failed", buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 2))
      {
LABEL_34:
        v31 = 1;
LABEL_35:
        *(_BYTE *)(a7 + 897) = 0;
        if (!a5)
          goto LABEL_54;
        if (*(_BYTE *)(a1 + 9))
        {
          if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a7, a3) & 1) != 0)
          {
            v38 = *(_QWORD *)(a1 + 1904);
            v39 = *(_QWORD *)(a1 + 1912);
            if (v38 != v39)
            {
              v40 = 0;
              while (vabdd_f64(*(double *)(v38 + 184), *(double *)(a7 + 400)) <= 0.01)
              {
                v40 |= sub_18F71E6D0(a7, 2, v38);
                v38 += 264;
                if (v38 == v39)
                  goto LABEL_80;
              }
              v56 = *(_QWORD *)(a1 + 1912);
              v57 = *(_QWORD *)(a1 + 1904);
              if (v56 != v57)
              {
                do
                {
                  v58 = v56 - 264;
                  sub_18F5D6004(v56 - 56);
                  v56 = v58;
                }
                while (v58 != v57);
                *(_QWORD *)(a1 + 1912) = v57;
              }
LABEL_80:
              *(_BYTE *)(a7 + 897) = v40 & 1;
              if ((v40 & 1) != 0)
              {
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v59 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 134349056;
                  v83 = v17;
                  _os_log_impl(&dword_18F5B3000, v59, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,using route hints", buf, 0xCu);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                  v65 = 134349056;
                  v66 = v17;
                  v60 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "CoreLocation: %s\n", v60);
                  if (v60 != (char *)buf)
                    free(v60);
                }
              }
LABEL_54:
              if ((v31 & 1) == 0)
              {
                v63[0] = v14;
                v63[1] = (uint64_t)v13;
                if (v13)
                {
                  v46 = (unint64_t *)&v13->__shared_owners_;
                  do
                    v47 = __ldxr(v46);
                  while (__stxr(v47 + 1, v46));
                }
                v48 = sub_18F71E8F0(a7, v63, a3);
                v49 = v48;
                if (!v13)
                  goto LABEL_62;
                v50 = (unint64_t *)&v13->__shared_owners_;
                do
                  v51 = __ldaxr(v50);
                while (__stlxr(v51 - 1, v50));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                  std::__shared_weak_count::__release_weak(v13);
                  if ((v49 & 1) != 0)
                    goto LABEL_63;
                }
                else
                {
LABEL_62:
                  if ((v48 & 1) != 0)
                  {
LABEL_63:
                    v42 = 0;
                    goto LABEL_71;
                  }
                }
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v52 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 134349056;
                  v83 = v17;
                  _os_log_impl(&dword_18F5B3000, v52, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, prepareCandidates failed", buf, 0xCu);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                  v65 = 134349056;
                  v66 = v17;
                  v62 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "CoreLocation: %s\n", v62);
                  if (v62 != (char *)buf)
                    free(v62);
                }
              }
              v42 = 1;
LABEL_71:
              v13 = v64;
              if (!v64)
                return v42;
              goto LABEL_72;
            }
          }
          else
          {
            v43 = *(_QWORD *)(a1 + 1912);
            v44 = *(_QWORD *)(a1 + 1904);
            if (v43 != v44)
            {
              do
              {
                v45 = v43 - 264;
                sub_18F5D6004(v43 - 56);
                v43 = v45;
              }
              while (v45 != v44);
            }
            *(_QWORD *)(a1 + 1912) = v44;
          }
        }
        *(_BYTE *)(a7 + 897) = 0;
        goto LABEL_54;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
      {
LABEL_91:
        v65 = 134349056;
        v66 = v17;
        v61 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "CoreLocation: %s\n", v61);
        if (v61 != (char *)buf)
          free(v61);
        goto LABEL_34;
      }
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v36 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        v83 = v17;
        _os_log_impl(&dword_18F5B3000, v36, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filterReset, prediction failed", buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_34;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_91;
    }
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    goto LABEL_91;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v41 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    v83 = v17;
    _os_log_impl(&dword_18F5B3000, v41, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to initialize filter", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    LODWORD(v67) = 134349056;
    *(_QWORD *)((char *)&v67 + 4) = v17;
    v35 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::prepareSolution(const std::vector<CLParticleMapMatcherCommon::Particle> &, const MMSnapData &, CLMapCrumb &, BOOL, BOOL, MMFilterData &)", "CoreLocation: %s\n", v35);
    goto LABEL_100;
  }
LABEL_48:
  v42 = 0;
  if (!v13)
    return v42;
LABEL_72:
  v53 = (unint64_t *)&v13->__shared_owners_;
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v54 - 1, v53));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return v42;
}

void sub_18F72B5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F72B638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4;
  NSObject *v5;
  uint64_t v6;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double *v19;
  unint64_t v20;
  double v21;
  double *v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  int v34;
  double v35;
  _BOOL4 v36;
  _BOOL4 v37;
  double v38;
  double v39;
  int32x2_t v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  NSObject *v54;
  int v55;
  NSObject *v56;
  char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  double v62;
  unint64_t *v63;
  unint64_t v64;
  char v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  char v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  NSObject *v77;
  NSObject *v78;
  BOOL v79;
  NSObject *v80;
  NSObject *v81;
  NSObject *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  int v87;
  unint64_t *v88;
  unint64_t v89;
  double v90;
  double v91;
  double v92;
  double v93;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  double v99;
  BOOL v100;
  double *v101;
  double *v102;
  uint64_t v103;
  double v104;
  double v105;
  NSObject *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  int v111;
  int v112;
  NSObject *v113;
  NSObject *v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  NSObject *v121;
  char *v122;
  int v123;
  int v124;
  _QWORD *v125;
  _QWORD *v126;
  double v127;
  double v128;
  double v129;
  double v130;
  long double v131;
  long double v132;
  double v133;
  __double2 v134;
  long double v135;
  double v136;
  NSObject *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  long double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  BOOL v148;
  double v149;
  _BOOL4 v150;
  _BOOL4 v151;
  int v152;
  double v153;
  double v154;
  double v155;
  double v156;
  int v158;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  int v164;
  NSObject *v165;
  NSObject *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  double *v170;
  double *v171;
  unint64_t v172;
  double v173;
  double *v174;
  double v175;
  uint64_t v176;
  double v177;
  double v178;
  double *v179;
  double v180;
  double v181;
  uint64_t v182;
  double v183;
  double v184;
  double v185;
  int v186;
  double v187;
  _BOOL4 v188;
  _BOOL4 v189;
  char *v190;
  int v191;
  char *v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  double v203;
  int v204;
  char *v205;
  double v206;
  double v207;
  double v208;
  _QWORD v209[2];
  uint64_t v210[2];
  unint64_t v211;
  _QWORD v212[2];
  uint64_t *v213;
  uint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  _BYTE v218[84];
  __int16 v219;
  double v220;
  __int16 v221;
  double v222;
  __int16 v223;
  double v224;
  __int16 v225;
  _BOOL4 v226;
  __int16 v227;
  _BOOL4 v228;
  _BYTE buf[84];
  __int16 v230;
  double v231;
  __int16 v232;
  double v233;
  __int16 v234;
  double v235;
  __int16 v236;
  _BOOL4 v237;
  __int16 v238;
  _BOOL4 v239;
  uint64_t v240;

  v240 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 48) == *(_QWORD *)(a2 + 40))
    return 0;
  v4 = *(double *)(a2 + 384);
  if (*(_BYTE *)(a2 + 881))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v5 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v4;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous check,already ambiguous", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    *(_DWORD *)v218 = 134349056;
    *(double *)&v218[4] = v4;
    v57 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v57);
LABEL_155:
    if (v57 != buf)
      free(v57);
    return 1;
  }
  v9 = *(_DWORD *)(a2 + 792) - 2;
  v10 = 10.0;
  if (v9 <= 4)
    v10 = dbl_18F775F30[v9];
  v11 = *(double *)(a2 + 456) + *(double *)(a2 + 456);
  if (v11 >= v10)
    v11 = v10;
  if (v11 >= 7.0)
    v12 = v11;
  else
    v12 = 7.0;
  v13 = fabs(*(double *)(a2 + 632));
  if (*(_BYTE *)(a2 + 882))
  {
    sub_18F6C0F18((char *)(a1 + 2120), *(double *)(a2 + 608));
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v14 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_DWORD *)(a1 + 2144);
      v16 = *(_QWORD *)(a2 + 608);
      v17 = *(_QWORD *)(a1 + 2152);
      v18 = *(double **)(a1 + 2184);
      v19 = *(double **)(a1 + 2176);
      v20 = v18 - v19;
      v21 = 0.0;
      if (v18 == v19)
      {
        v32 = 0.0;
        v33 = 0.0;
      }
      else
      {
        v22 = *(double **)(a1 + 2176);
        do
        {
          v23 = *v22++;
          v21 = v21 + v23;
        }
        while (v22 != v18);
        v24 = 60;
        if (v20 < 0x3C)
          v24 = v20;
        v25 = 0.0;
        v26 = 0.0;
        if (v24)
        {
          v27 = *(double **)(a1 + 2176);
          do
          {
            v28 = *v27++;
            v26 = v26 + v28;
            --v24;
          }
          while (v24);
        }
        v29 = (double)v20;
        v30 = 30;
        if (v20 < 0x1E)
          v30 = v20;
        if (v30)
        {
          v25 = 0.0;
          do
          {
            v31 = *v19++;
            v25 = v25 + v31;
            --v30;
          }
          while (v30);
        }
        v32 = v21 / v29;
        v21 = v26 / v29;
        v33 = v25 / v29;
      }
      v34 = *(unsigned __int8 *)(a2 + 640);
      v35 = fabs(*(double *)(a2 + 616));
      v36 = *(_QWORD *)(a1 + 2088) != 0;
      v37 = *(_QWORD *)(a1 + 2080) != 0;
      *(_DWORD *)buf = 134352384;
      *(double *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v15;
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v16;
      *(_WORD *)&buf[28] = 2050;
      *(_QWORD *)&buf[30] = v17;
      *(_WORD *)&buf[38] = 2050;
      *(double *)&buf[40] = v32;
      *(_WORD *)&buf[48] = 2050;
      *(_QWORD *)&buf[50] = v20;
      *(_WORD *)&buf[58] = 2050;
      *(double *)&buf[60] = v21;
      *(_WORD *)&buf[68] = 2050;
      *(double *)&buf[70] = v33;
      *(_WORD *)&buf[78] = 1026;
      *(_DWORD *)&buf[80] = v34;
      v230 = 2050;
      v231 = v35;
      v232 = 2050;
      v233 = v13;
      v234 = 2050;
      v235 = v12;
      v236 = 1026;
      v237 = v36;
      v238 = 1026;
      v239 = v37;
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,AverageVarianceFactor,count,%{public}d,vf,%{public}.4lf,avf,%{public}.4lf,avfBuffer,%{public}.4lf,avfBufferCnt,%{public}zu,avfBuffer60,%{public}.4lf,avfBuffer30,%{public}.4lf,isUsable,%{public}d,deltaAz,%{public}.2lf,fabsAT,%{public}.2lf,threshold,%{public}.2lf,usingAPI,%{public}d,usingBuffer,%{public}d", buf, 0x7Eu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v167 = *(_DWORD *)(a1 + 2144);
      v168 = *(_QWORD *)(a2 + 608);
      v169 = *(_QWORD *)(a1 + 2152);
      v170 = *(double **)(a1 + 2184);
      v171 = *(double **)(a1 + 2176);
      v172 = v170 - v171;
      v173 = 0.0;
      if (v170 == v171)
      {
        v184 = 0.0;
        v185 = 0.0;
      }
      else
      {
        v174 = *(double **)(a1 + 2176);
        do
        {
          v175 = *v174++;
          v173 = v173 + v175;
        }
        while (v174 != v170);
        v176 = 60;
        if (v172 < 0x3C)
          v176 = v172;
        v177 = 0.0;
        v178 = 0.0;
        if (v176)
        {
          v179 = *(double **)(a1 + 2176);
          do
          {
            v180 = *v179++;
            v178 = v178 + v180;
            --v176;
          }
          while (v176);
        }
        v181 = (double)v172;
        v182 = 30;
        if (v172 < 0x1E)
          v182 = v172;
        if (v182)
        {
          v177 = 0.0;
          do
          {
            v183 = *v171++;
            v177 = v177 + v183;
            --v182;
          }
          while (v182);
        }
        v184 = v173 / v181;
        v173 = v178 / v181;
        v185 = v177 / v181;
      }
      v186 = *(unsigned __int8 *)(a2 + 640);
      v187 = fabs(*(double *)(a2 + 616));
      v188 = *(_QWORD *)(a1 + 2088) != 0;
      v189 = *(_QWORD *)(a1 + 2080) != 0;
      *(_DWORD *)v218 = 134352384;
      *(double *)&v218[4] = v4;
      *(_WORD *)&v218[12] = 1026;
      *(_DWORD *)&v218[14] = v167;
      *(_WORD *)&v218[18] = 2050;
      *(_QWORD *)&v218[20] = v168;
      *(_WORD *)&v218[28] = 2050;
      *(_QWORD *)&v218[30] = v169;
      *(_WORD *)&v218[38] = 2050;
      *(double *)&v218[40] = v184;
      *(_WORD *)&v218[48] = 2050;
      *(_QWORD *)&v218[50] = v172;
      *(_WORD *)&v218[58] = 2050;
      *(double *)&v218[60] = v173;
      *(_WORD *)&v218[68] = 2050;
      *(double *)&v218[70] = v185;
      *(_WORD *)&v218[78] = 1026;
      *(_DWORD *)&v218[80] = v186;
      v219 = 2050;
      v220 = v187;
      v221 = 2050;
      v222 = v13;
      v223 = 2050;
      v224 = v12;
      v225 = 1026;
      v226 = v188;
      v227 = 1026;
      v228 = v189;
      v190 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v190);
      if (v190 != buf)
        free(v190);
    }
  }
  if (!*(_QWORD *)(a1 + 2088) && !*(_QWORD *)(a1 + 2080))
    return 0;
  v38 = *(double *)(a1 + 1872);
  v39 = vabdd_f64(*(double *)(a2 + 400), v38);
  if (v38 >= 0.0 && v39 <= 6.0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v43 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v4;
      _os_log_impl(&dword_18F5B3000, v43, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,routeHintsAvailable,1", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_374;
    goto LABEL_409;
  }
  if (!*(_BYTE *)(a2 + 640))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v44 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v4;
      _os_log_impl(&dword_18F5B3000, v44, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,isSnapUsable,0", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_374;
    goto LABEL_409;
  }
  v41 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(*(float64x2_t *)(a2 + 432), *(float64x2_t *)(a2 + 528))));
  if ((vand_s8((int8x8_t)v41, (int8x8_t)vdup_lane_s32(v41, 1)).u8[0] & 1) != 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v42 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v4;
      _os_log_impl(&dword_18F5B3000, v42, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,sameAsRawGPS,1", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_374;
LABEL_409:
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
LABEL_374:
    *(_DWORD *)v218 = 134349056;
    *(double *)&v218[4] = v4;
    v98 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v98);
LABEL_375:
    if (v98 != buf)
      free(v98);
    return 0;
  }
  v46 = *(_QWORD *)(a2 + 384);
  *(_BYTE *)(a2 + 898) = 0;
  v47 = a2 + 256;
  v48 = fmod(*(double *)(a2 + 480) - *(float *)(a2 + 280), 360.0);
  if (v48 < 0.0)
    v48 = v48 + 360.0;
  if (v48 > 180.0)
    v48 = v48 + -360.0;
  if ((*(_DWORD *)(a2 + 792) - 1) >= 2)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v54 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v55 = *(_DWORD *)(a2 + 792);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v46;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v55;
      _os_log_impl(&dword_18F5B3000, v54, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,harshDigitizationCheck skipped,signalEnv,%{public}d", buf, 0x12u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v191 = *(_DWORD *)(a2 + 792);
      *(_DWORD *)v218 = 134349312;
      *(_QWORD *)&v218[4] = v46;
      *(_WORD *)&v218[12] = 1026;
      *(_DWORD *)&v218[14] = v191;
      v192 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v192);
      if (v192 != buf)
        free(v192);
    }
    if (!*(_BYTE *)(a2 + 898))
      goto LABEL_177;
    goto LABEL_89;
  }
  v49 = fabs(v48);
  if (v49 > 15.0 && fabs(*(double *)(a2 + 632)) >= 1.0)
  {
    if (!*(_QWORD *)v47)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v77 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v46;
        _os_log_impl(&dword_18F5B3000, v77, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid road pointer,isHarshDigitizationCaseAtTurns", buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_177;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      *(_DWORD *)v218 = 134349056;
      *(_QWORD *)&v218[4] = v46;
      v53 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v53);
      goto LABEL_81;
    }
    v58 = *(_QWORD *)(a1 + 208);
    v59 = *(std::__shared_weak_count **)(a1 + 216);
    v216 = v58;
    v217 = v59;
    if (v59)
    {
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldxr(p_shared_owners);
      while (__stxr(v61 + 1, p_shared_owners));
    }
    if (!v58)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v78 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v46;
        _os_log_impl(&dword_18F5B3000, v78, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer,isHarshDigitizationCaseAtTurns", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        *(_DWORD *)v218 = 134349056;
        *(_QWORD *)&v218[4] = v46;
        v197 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v197);
        if (v197 != buf)
          free(v197);
      }
      v79 = 0;
LABEL_171:
      if (v59)
      {
        v88 = (unint64_t *)&v59->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      if (!v79)
        goto LABEL_177;
LABEL_89:
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v56 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&buf[4] = v4;
        _os_log_impl(&dword_18F5B3000, v56, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,isHarshDigitizationCaseAtTurns,1", buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      *(_DWORD *)v218 = 134349056;
      *(double *)&v218[4] = v4;
      v57 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v57);
      goto LABEL_155;
    }
    v206 = v12;
    v62 = fmin(fmax(*(double *)(*(_QWORD *)v47 + 96) + *(double *)(*(_QWORD *)v47 + 96), 15.0), 45.0);
    v213 = (uint64_t *)&v213;
    v214 = (uint64_t *)&v213;
    v215 = 0;
    v212[0] = v58;
    v212[1] = v59;
    if (v59)
    {
      v63 = (unint64_t *)&v59->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    v65 = sub_18F730650(v212, (uint64_t *)(a2 + 256), *(_BYTE *)(a2 + 276), (uint64_t *)&v213, v62 + 0.5);
    if (v59)
    {
      v66 = (unint64_t *)&v59->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if ((v65 & 1) == 0)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v12 = v206;
      v80 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v46;
        _os_log_impl(&dword_18F5B3000, v80, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,findMultiOutboundIntersection returned false, searching for next connected candidates", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        *(_DWORD *)v218 = 134349056;
        *(_QWORD *)&v218[4] = v46;
        v198 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v198);
        if (v198 != buf)
          free(v198);
        v79 = 0;
        v12 = v206;
      }
      else
      {
        v79 = 0;
      }
      goto LABEL_170;
    }
    v210[0] = (uint64_t)v210;
    v210[1] = (uint64_t)v210;
    v211 = 0;
    v68 = v217;
    v209[0] = v216;
    v209[1] = v217;
    if (v217)
    {
      v69 = (unint64_t *)&v217->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v71 = sub_18F730650(v209, (uint64_t *)(a2 + 256), *(_BYTE *)(a2 + 276) == 0, v210, v62 + 0.5);
    if (v68)
    {
      v72 = (unint64_t *)&v68->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    if ((v71 & 1) != 0)
    {
      v74 = v215;
      v75 = v211;
      v76 = v215 > 1 || v211 > 1;
      if (v76
        || *(_BYTE *)(a3 + 762)
        && *(_QWORD *)(a3 + 120)
        && (sub_18F69B170(a2 + 256, (uint64_t)buf),
            sub_18F69B170(a3 + 120, (uint64_t)v218),
            *(_QWORD *)buf == *(_QWORD *)v218)
        && buf[16] == v218[16]
        && *(_QWORD *)&buf[8] == *(_QWORD *)&v218[8])
      {
        *(_BYTE *)(a2 + 898) = 1;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v82 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v83 = *(uint64_t **)(a2 + 256);
        v84 = *v83;
        v85 = v83[12];
        v86 = *(double *)(a2 + 632);
        v87 = *(unsigned __int8 *)(a2 + 898);
        *(_DWORD *)buf = 134351617;
        *(_QWORD *)&buf[4] = v46;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v84;
        *(_WORD *)&buf[22] = 1026;
        *(_DWORD *)&buf[24] = v74 > 1;
        *(_WORD *)&buf[28] = 1026;
        *(_DWORD *)&buf[30] = v75 > 1;
        *(_WORD *)&buf[34] = 2050;
        *(_QWORD *)&buf[36] = v215;
        *(_WORD *)&buf[44] = 2050;
        *(_QWORD *)&buf[46] = v211;
        *(_WORD *)&buf[54] = 2050;
        *(double *)&buf[56] = v62;
        *(_WORD *)&buf[64] = 2050;
        *(_QWORD *)&buf[66] = v85;
        *(_WORD *)&buf[74] = 2050;
        *(double *)&buf[76] = v49;
        v230 = 2050;
        v231 = v86;
        v232 = 1026;
        LODWORD(v233) = v87;
        _os_log_impl(&dword_18F5B3000, v82, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,harshDigitizationCheck,road,%{private}lld,isApproachingMulti,%{public}d,justCrossedMulti,%{public}d,nextList,%{public}lu,priorList,%{public}lu,threshold,%{public}.1lf,roadWidth,%{public}.1lf,courseDiff,%{public}.3lf,AT,%{public}.3lf,harshAmb,%{public}d", buf, 0x64u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v200 = *(uint64_t **)(a2 + 256);
        v201 = *v200;
        v202 = v200[12];
        v203 = *(double *)(a2 + 632);
        v204 = *(unsigned __int8 *)(a2 + 898);
        *(_DWORD *)v218 = 134351617;
        *(_QWORD *)&v218[4] = v46;
        *(_WORD *)&v218[12] = 2049;
        *(_QWORD *)&v218[14] = v201;
        *(_WORD *)&v218[22] = 1026;
        *(_DWORD *)&v218[24] = v74 > 1;
        *(_WORD *)&v218[28] = 1026;
        *(_DWORD *)&v218[30] = v75 > 1;
        *(_WORD *)&v218[34] = 2050;
        *(_QWORD *)&v218[36] = v215;
        *(_WORD *)&v218[44] = 2050;
        *(_QWORD *)&v218[46] = v211;
        *(_WORD *)&v218[54] = 2050;
        *(double *)&v218[56] = v62;
        *(_WORD *)&v218[64] = 2050;
        *(_QWORD *)&v218[66] = v202;
        *(_WORD *)&v218[74] = 2050;
        *(double *)&v218[76] = v49;
        v219 = 2050;
        v220 = v203;
        v221 = 1026;
        LODWORD(v222) = v204;
        v205 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v205);
        if (v205 != buf)
          free(v205);
      }
      v79 = *(_BYTE *)(a2 + 898) != 0;
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v12 = v206;
      v81 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v46;
        _os_log_impl(&dword_18F5B3000, v81, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,findMultiOutboundIntersection returned false, searching for prior connected candidates", buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 2))
      {
        v79 = 0;
LABEL_169:
        sub_18F677A18(v210);
LABEL_170:
        sub_18F677A18((uint64_t *)&v213);
        v59 = v217;
        goto LABEL_171;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      *(_DWORD *)v218 = 134349056;
      *(_QWORD *)&v218[4] = v46;
      v199 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v199);
      if (v199 != buf)
        free(v199);
      v79 = 0;
    }
    v12 = v206;
    goto LABEL_169;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v50 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v51 = *(_QWORD *)(a2 + 632);
    *(_DWORD *)buf = 134349568;
    *(_QWORD *)&buf[4] = v46;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v49;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = v51;
    _os_log_impl(&dword_18F5B3000, v50, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,harshDigitizationCheck skipped,courseDiff,%{public}.3lf,acrossTrack,%{public}.3lf", buf, 0x20u);
  }
  if (!sub_18F5C4AE0(115, 2))
    goto LABEL_177;
  bzero(buf, 0x65CuLL);
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v52 = *(_QWORD *)(a2 + 632);
  *(_DWORD *)v218 = 134349568;
  *(_QWORD *)&v218[4] = v46;
  *(_WORD *)&v218[12] = 2050;
  *(double *)&v218[14] = v49;
  *(_WORD *)&v218[22] = 2050;
  *(_QWORD *)&v218[24] = v52;
  v53 = (char *)_os_log_send_and_compose_impl();
  sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isHarshDigitizationCaseAtTurns(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v53);
LABEL_81:
  if (v53 != buf)
    free(v53);
LABEL_177:
  if (v13 <= v12)
  {
    v99 = *(double *)(a1 + 2200);
    v100 = v99 > 3.0 && v99 < 20.0;
    if (v100 && *(_BYTE *)(a3 + 505) && v13 > v12 * 0.85)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v114 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v115 = *(_QWORD *)(a1 + 2200);
        *(_DWORD *)buf = 134349824;
        *(double *)&buf[4] = v4;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v13;
        *(_WORD *)&buf[22] = 2050;
        *(double *)&buf[24] = v12 * 0.85;
        *(_WORD *)&buf[32] = 2050;
        *(_QWORD *)&buf[34] = v115;
        _os_log_impl(&dword_18F5B3000, v114, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1, previous solution was ambiguous and AT,%{public}.1lf,is over scaled threshold,%{public}.1lf,consecutiveAmbCnt,%{public}1lf", buf, 0x2Au);
      }
      if (!sub_18F5C4AE0(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v116 = *(_QWORD *)(a1 + 2200);
      *(_DWORD *)v218 = 134349824;
      *(double *)&v218[4] = v4;
      *(_WORD *)&v218[12] = 2050;
      *(double *)&v218[14] = v13;
      *(_WORD *)&v218[22] = 2050;
      *(double *)&v218[24] = v12 * 0.85;
      *(_WORD *)&v218[32] = 2050;
      *(_QWORD *)&v218[34] = v116;
      v57 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v57);
      goto LABEL_155;
    }
    if (!*(_BYTE *)(a2 + 640))
      goto LABEL_227;
    v101 = *(double **)(a1 + 2184);
    v102 = *(double **)(a1 + 2176);
    if (v101 == v102)
      goto LABEL_227;
    v103 = v101 - v102;
    v104 = 0.0;
    do
    {
      v105 = *v102++;
      v104 = v104 + v105;
    }
    while (v102 != v101);
    if (v104 / (double)(unint64_t)v103 <= 1.2)
    {
LABEL_227:
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v113 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349568;
        *(double *)&buf[4] = v4;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v13;
        *(_WORD *)&buf[22] = 2050;
        *(double *)&buf[24] = v12;
        _os_log_impl(&dword_18F5B3000, v113, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,lowAcrossTrack,%{public}.1lf,threshold,%{public}.2lf", buf, 0x20u);
      }
      if (!sub_18F5C4AE0(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      *(_DWORD *)v218 = 134349568;
      *(double *)&v218[4] = v4;
      *(_WORD *)&v218[12] = 2050;
      *(double *)&v218[14] = v13;
      *(_WORD *)&v218[22] = 2050;
      *(double *)&v218[24] = v12;
      v98 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v98);
      goto LABEL_375;
    }
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v106 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v107 = *(_DWORD *)(a1 + 2144);
      v108 = *(_QWORD *)(a2 + 608);
      v109 = *(_QWORD *)(a1 + 2152);
      *(_DWORD *)buf = 134349824;
      *(double *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v107;
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v108;
      *(_WORD *)&buf[28] = 2050;
      *(_QWORD *)&buf[30] = v109;
      _os_log_impl(&dword_18F5B3000, v106, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,averageVarianceFactor,count,%{public}d,vf,%{public}.4lf,avf,%{public}.4lf", buf, 0x26u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v193 = *(_DWORD *)(a1 + 2144);
      v194 = *(_QWORD *)(a2 + 608);
      v195 = *(_QWORD *)(a1 + 2152);
      *(_DWORD *)v218 = 134349824;
      *(double *)&v218[4] = v4;
      *(_WORD *)&v218[12] = 1026;
      *(_DWORD *)&v218[14] = v193;
      *(_WORD *)&v218[18] = 2050;
      *(_QWORD *)&v218[20] = v194;
      *(_WORD *)&v218[28] = 2050;
      *(_QWORD *)&v218[30] = v195;
      v196 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v196);
      if (v196 != buf)
        free(v196);
    }
    v6 = 1;
    if (!*(_BYTE *)(a3 + 504) || *(_BYTE *)(a3 + 505))
      return v6;
  }
  v207 = v12;
  if (*(double *)(a2 + 568) > 0.0)
  {
    v90 = *(double *)(a2 + 480);
    if (v90 >= 0.0)
    {
      v91 = fmod(*(double *)(a2 + 680) - v90, 360.0);
      if (v91 < 0.0)
        v91 = v91 + 360.0;
      if (v91 > 180.0)
        v91 = v91 + -360.0;
      if ((!*(_BYTE *)(a3 + 505) || *(double *)(a1 + 2200) < 5.0) && *(double *)(a2 + 456) < 10.0)
      {
        v92 = fabs(v91);
        v93 = v12 * 1.5;
        if (v92 < 18.0 && v13 <= v93)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v95 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            v96 = *(_QWORD *)(a2 + 456);
            *(_DWORD *)buf = 134350080;
            *(double *)&buf[4] = v4;
            *(_WORD *)&buf[12] = 2050;
            *(double *)&buf[14] = v92;
            *(_WORD *)&buf[22] = 2050;
            *(double *)&buf[24] = v13;
            *(_WORD *)&buf[32] = 2050;
            *(_QWORD *)&buf[34] = v96;
            *(_WORD *)&buf[42] = 2050;
            *(double *)&buf[44] = v93;
            _os_log_impl(&dword_18F5B3000, v95, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,0,overridden based on course matching,%{public}.2lf,AT,%{public}.2lf,hunc,%{public}.2lf,threshold,%{public}.2lf", buf, 0x34u);
          }
          if (!sub_18F5C4AE0(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v97 = *(_QWORD *)(a2 + 456);
          *(_DWORD *)v218 = 134350080;
          *(double *)&v218[4] = v4;
          *(_WORD *)&v218[12] = 2050;
          *(double *)&v218[14] = v92;
          *(_WORD *)&v218[22] = 2050;
          *(double *)&v218[24] = v13;
          *(_WORD *)&v218[32] = 2050;
          *(_QWORD *)&v218[34] = v97;
          *(_WORD *)&v218[42] = 2050;
          *(double *)&v218[44] = v93;
          v98 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v98);
          goto LABEL_375;
        }
      }
    }
  }
  if (*(_QWORD *)v47 && (*(_BYTE *)(a1 + 12) || (*(_DWORD *)(*(_QWORD *)v47 + 20) & 0xFFFFFFFE) == 8))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v110 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v111 = *(_DWORD *)(*(_QWORD *)v47 + 20);
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v111;
      _os_log_impl(&dword_18F5B3000, v110, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,skipping building checks for unknown roads,%{public}d", buf, 0x12u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v112 = *(_DWORD *)(*(_QWORD *)v47 + 20);
    *(_DWORD *)v218 = 134349312;
    *(double *)&v218[4] = v4;
    *(_WORD *)&v218[12] = 1026;
    *(_DWORD *)&v218[14] = v112;
    v57 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v57);
    goto LABEL_155;
  }
  if (*(double *)(a2 + 456) + 30.0 <= 45.0)
    v117 = *(double *)(a2 + 456) + 30.0;
  else
    v117 = 45.0;
  v213 = 0;
  v214 = 0;
  v215 = 0;
  v118 = *(_QWORD *)(a1 + 2080);
  if (v118)
  {
    memset(buf, 0, 24);
    sub_18F6282A0(v118, (uint64_t *)buf, *(double *)(a2 + 432), *(double *)(a2 + 440), v117);
    sub_18F73E020((uint64_t *)&v213, (uint64_t)v213, *(uint64_t *)buf, *(uint64_t *)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 6);
    sub_18F627514(*(_QWORD *)(a1 + 2080), 0, 1, v4, *(double *)(a2 + 432), *(double *)(a2 + 440), *(double *)(*(_QWORD *)(a1 + 2080) + 176));
    *(_QWORD *)v218 = buf;
    sub_18F73DFA8((void ***)v218);
  }
  else
  {
    sub_18F6EF4C0(*(_QWORD *)(a1 + 2088), (uint64_t *)&v213, a2 + 376, v117);
  }
  v119 = (uint64_t)v213;
  v120 = v214;
  if ((unint64_t)((char *)v214 - (char *)v213) < 0x80)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v121 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = (unint64_t)((char *)v214 - (char *)v213) >> 6;
      _os_log_impl(&dword_18F5B3000, v121, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,fewerThan2Buildings,%{public}d", buf, 0x12u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      *(_DWORD *)v218 = 134349312;
      *(double *)&v218[4] = v4;
      *(_WORD *)&v218[12] = 1026;
      *(_DWORD *)&v218[14] = (unint64_t)((char *)v214 - (char *)v213) >> 6;
      v122 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v122);
      goto LABEL_384;
    }
    goto LABEL_342;
  }
  if (v213 == v214)
  {
    v123 = 0;
    v124 = 0;
    goto LABEL_337;
  }
  v208 = v4;
  v123 = 0;
  v124 = 0;
  do
  {
    v126 = *(_QWORD **)(v119 + 8);
    v125 = *(_QWORD **)(v119 + 16);
    v127 = -1.0;
    if (v126 != v125)
    {
      v128 = 0.0;
      v129 = 0.0;
      v130 = 0.0;
      do
      {
        v131 = *(double *)v126;
        v132 = *((double *)v126 + 1);
        v126 += 2;
        v133 = atan2(v131, v132);
        if (v133 < 0.0)
          v133 = v133 + 6.28318531;
        v134 = __sincos_stret(v133);
        v128 = v128 + v134.__cosval;
        v129 = v129 + v134.__sinval;
        v130 = v130 + 1.0;
      }
      while (v126 != v125);
      if (v130 > 0.0)
      {
        v135 = atan2(v129 / v130, v128 / v130);
        v136 = fmod(v135 * 57.2957795, 360.0);
        if (v136 >= 0.0)
          v127 = v136;
        else
          v127 = v136 + 360.0;
      }
    }
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v137 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v138 = *(_QWORD *)(a2 + 432);
      v139 = *(_QWORD *)(a2 + 440);
      v140 = *(_QWORD *)(a2 + 480);
      *(_DWORD *)buf = 134351105;
      *(double *)&buf[4] = v208;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = (unint64_t)((char *)v214 - (char *)v213) >> 6;
      *(_WORD *)&buf[18] = 2049;
      *(_QWORD *)&buf[20] = v138;
      *(_WORD *)&buf[28] = 2049;
      *(_QWORD *)&buf[30] = v139;
      *(_WORD *)&buf[38] = 2050;
      *(_QWORD *)&buf[40] = v140;
      *(_WORD *)&buf[48] = 1026;
      *(_DWORD *)&buf[50] = v124;
      *(_WORD *)&buf[54] = 1026;
      *(_DWORD *)&buf[56] = v123;
      *(_WORD *)&buf[60] = 2050;
      *(double *)&buf[62] = v117;
      *(_WORD *)&buf[70] = 2050;
      *(double *)&buf[72] = v127;
      _os_log_impl(&dword_18F5B3000, v137, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,-1,buildingCount,%{public}d,latitude,%{private}.7lf,longitude,%{private}.7lf,course,%{public}.2lf,rightSideCount,%{public}d,leftSideCount,%{public}d,searchDistance,%{public}.2lf,averageBuildingDirection,%{public}.2lf", buf, 0x50u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v160 = *(_QWORD *)(a2 + 432);
      v161 = *(_QWORD *)(a2 + 440);
      v162 = *(_QWORD *)(a2 + 480);
      *(_DWORD *)v218 = 134351105;
      *(double *)&v218[4] = v208;
      *(_WORD *)&v218[12] = 1026;
      *(_DWORD *)&v218[14] = (unint64_t)((char *)v214 - (char *)v213) >> 6;
      *(_WORD *)&v218[18] = 2049;
      *(_QWORD *)&v218[20] = v160;
      *(_WORD *)&v218[28] = 2049;
      *(_QWORD *)&v218[30] = v161;
      *(_WORD *)&v218[38] = 2050;
      *(_QWORD *)&v218[40] = v162;
      *(_WORD *)&v218[48] = 1026;
      *(_DWORD *)&v218[50] = v124;
      *(_WORD *)&v218[54] = 1026;
      *(_DWORD *)&v218[56] = v123;
      *(_WORD *)&v218[60] = 2050;
      *(double *)&v218[62] = v117;
      *(_WORD *)&v218[70] = 2050;
      *(double *)&v218[72] = v127;
      v163 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v163);
      if (v163 != buf)
        free(v163);
    }
    v141 = *(double *)(a2 + 480);
    v142 = fmod(v127, 360.0);
    if (v142 >= 0.0)
      v143 = v142;
    else
      v143 = v142 + 360.0;
    v144 = fmod(v141, 360.0);
    if (v144 >= 0.0)
      v145 = v144;
    else
      v145 = v144 + 360.0;
    v146 = fmod(v141 + 90.0, 360.0);
    if (v146 >= 0.0)
      v147 = v146;
    else
      v147 = v146 + 360.0;
    if (v145 >= v147)
      v148 = v145 > v143 && v143 > v147;
    else
      v148 = v145 > v143 || v143 > v147;
    if (v148)
    {
      v149 = fmod(v141 + 180.0, 360.0);
      if (v149 < 0.0)
        v149 = v149 + 360.0;
      v150 = v147 <= v143;
      if (v143 <= v149)
        v150 = 1;
      v151 = v147 <= v143;
      if (v143 > v149)
        v151 = 0;
      if (v147 < v149)
        v152 = v151;
      else
        v152 = v150;
    }
    else
    {
      v152 = 1;
    }
    v153 = v141 + 270.0;
    v154 = fmod(v141 + 180.0, 360.0);
    if (v154 >= 0.0)
      v155 = v154;
    else
      v155 = v154 + 360.0;
    v156 = fmod(v153, 360.0);
    if (v156 < 0.0)
      v156 = v156 + 360.0;
    if (v155 >= v156)
    {
      if (v155 <= v143 || v143 <= v156)
      {
LABEL_322:
        v158 = 1;
        goto LABEL_325;
      }
    }
    else if (v155 <= v143 && v143 <= v156)
    {
      goto LABEL_322;
    }
    if (v156 >= v145)
    {
      v158 = v143 <= v145;
      if (v156 <= v143)
        v158 = 1;
    }
    else
    {
      v158 = v143 <= v145;
      if (v156 > v143)
        v158 = 0;
    }
LABEL_325:
    v124 += v152;
    v123 += v158;
    v119 += 64;
  }
  while ((uint64_t *)v119 != v120);
  if (v124)
  {
    v4 = v208;
    if (v123)
    {
      v164 = *(_DWORD *)(a2 + 792);
      if (v164 == 3)
      {
        v6 = 0;
        goto LABEL_343;
      }
      v6 = 0;
      if (v164 != 4 && v13 > v207 + v207)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v166 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134350080;
          *(double *)&buf[4] = v208;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v124;
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)&buf[20] = v123;
          *(_WORD *)&buf[24] = 2050;
          *(double *)&buf[26] = v13;
          *(_WORD *)&buf[34] = 2050;
          *(double *)&buf[36] = v207 + v207;
          _os_log_impl(&dword_18F5B3000, v166, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,buildingOnBothSides but AT too high,rightCount,%{public}d,leftCount,%{public}d,AT,%{public}.1lf,threshold,%{public}.1lf", buf, 0x2Cu);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          *(_DWORD *)v218 = 134350080;
          *(double *)&v218[4] = v208;
          *(_WORD *)&v218[12] = 1026;
          *(_DWORD *)&v218[14] = v124;
          *(_WORD *)&v218[18] = 1026;
          *(_DWORD *)&v218[20] = v123;
          *(_WORD *)&v218[24] = 2050;
          *(double *)&v218[26] = v13;
          *(_WORD *)&v218[34] = 2050;
          *(double *)&v218[36] = v207 + v207;
          v122 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v122);
          goto LABEL_384;
        }
        goto LABEL_342;
      }
      goto LABEL_343;
    }
  }
  else
  {
    v4 = v208;
  }
LABEL_337:
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v165 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349568;
    *(double *)&buf[4] = v4;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v124;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v123;
    _os_log_impl(&dword_18F5B3000, v165, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,buildingNotOnBothSides,rightCount,%{public}d,leftCount,%{public}d", buf, 0x18u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    *(_DWORD *)v218 = 134349568;
    *(double *)&v218[4] = v4;
    *(_WORD *)&v218[12] = 1026;
    *(_DWORD *)&v218[14] = v124;
    *(_WORD *)&v218[18] = 1026;
    *(_DWORD *)&v218[20] = v123;
    v122 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v122);
LABEL_384:
    if (v122 != buf)
      free(v122);
  }
LABEL_342:
  v6 = 1;
LABEL_343:
  *(_QWORD *)buf = &v213;
  sub_18F73DFA8((void ***)buf);
  return v6;
}

void sub_18F72E174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51)
{
  a51 = (void **)&a30;
  sub_18F73DFA8(&a51);
  _Unwind_Resume(a1);
}

uint64_t sub_18F72E23C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;

  sub_18F623A40((_QWORD *)a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 56) = v6;
  if (a1 != a2)
    sub_18F692DD0((char *)(a1 + 88), *(char **)(a2 + 88), *(_QWORD *)(a2 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3));
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  sub_18F623A40((_QWORD *)(a1 + 120), (uint64_t *)(a2 + 120));
  v7 = *(_QWORD *)(a2 + 168);
  v8 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v8;
  *(_QWORD *)(a1 + 168) = v7;
  v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  *(_OWORD *)(a1 + 176) = v9;
  if (a1 != a2)
    sub_18F692DD0((char *)(a1 + 208), *(char **)(a2 + 208), *(_QWORD *)(a2 + 216), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 3));
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v10 = *(_OWORD *)(a2 + 240);
  v11 = *(_OWORD *)(a2 + 256);
  v12 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v12;
  *(_OWORD *)(a1 + 240) = v10;
  *(_OWORD *)(a1 + 256) = v11;
  v13 = *(_OWORD *)(a2 + 304);
  v14 = *(_OWORD *)(a2 + 320);
  v15 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v15;
  *(_OWORD *)(a1 + 304) = v13;
  *(_OWORD *)(a1 + 320) = v14;
  std::string::operator=((std::string *)(a1 + 368), (const std::string *)(a2 + 368));
  memcpy((void *)(a1 + 392), (const void *)(a2 + 392), 0x118uLL);
  v17 = *(_OWORD *)(a2 + 688);
  v16 = *(_OWORD *)(a2 + 704);
  v18 = *(_OWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 688) = v17;
  *(_OWORD *)(a1 + 704) = v16;
  *(_OWORD *)(a1 + 672) = v18;
  sub_18F623A40((_QWORD *)(a1 + 728), (uint64_t *)(a2 + 728));
  v19 = *(_DWORD *)(a2 + 759);
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
  *(_DWORD *)(a1 + 759) = v19;
  return a1;
}

uint64_t sub_18F72E3A0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  BOOL v62;
  BOOL v63;
  _QWORD *v64;
  _QWORD *v65;
  _OWORD *v67;
  uint64_t *v68;
  uint64_t *v69;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  if ((__int128 *)a1 == a2)
    goto LABEL_78;
  sub_18F73DCBC(a1 + 40, *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 4));
  sub_18F73D688((char *)(a1 + 64), *((char **)a2 + 8), *((_QWORD *)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 2);
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  v6 = (_QWORD *)*((_QWORD *)a2 + 14);
  v7 = (_QWORD *)a2 + 15;
  if (!*(_QWORD *)(a1 + 128))
    goto LABEL_39;
  v9 = (uint64_t *)(a1 + 120);
  v8 = *(_QWORD *)(a1 + 120);
  v10 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  if (*(_QWORD *)(v10 + 8))
    v11 = *(uint64_t **)(v10 + 8);
  else
    v11 = (uint64_t *)v10;
  v67 = (_OWORD *)(a1 + 112);
  v68 = v11;
  v69 = v11;
  if (!v11 || (v68 = sub_18F73D888((uint64_t)v11), v6 == v7))
  {
    v22 = v6;
    goto LABEL_38;
  }
  do
  {
    v12 = *((_OWORD *)v6 + 2);
    *((_BYTE *)v11 + 48) = *((_BYTE *)v6 + 48);
    *((_OWORD *)v11 + 2) = v12;
    sub_18F71D8F4((uint64_t)(v11 + 7), (uint64_t)(v6 + 7));
    v13 = *v9;
    v14 = a1 + 120;
    v15 = (uint64_t **)(a1 + 120);
    if (!*v9)
      goto LABEL_27;
    v16 = v69[4];
    do
    {
      while (1)
      {
        v14 = v13;
        v17 = *(_QWORD *)(v13 + 32);
        if (v16 != v17)
        {
          if (v16 >= v17)
            goto LABEL_25;
          goto LABEL_22;
        }
        v18 = *(unsigned __int8 *)(v14 + 48);
        v19 = !*((_BYTE *)v69 + 48) || v18 == 0;
        if (v19)
          break;
        if ((unint64_t)v69[5] >= *(_QWORD *)(v14 + 40))
          goto LABEL_25;
LABEL_22:
        v13 = *(_QWORD *)v14;
        v15 = (uint64_t **)v14;
        if (!*(_QWORD *)v14)
          goto LABEL_27;
      }
      if (*((_BYTE *)v69 + 48))
        v20 = v18 == 0;
      else
        v20 = 0;
      if (v20)
        goto LABEL_22;
LABEL_25:
      v13 = *(_QWORD *)(v14 + 8);
    }
    while (v13);
    v15 = (uint64_t **)(v14 + 8);
LABEL_27:
    sub_18F62A6F8((uint64_t **)(a1 + 112), v14, v15, v69);
    v11 = v68;
    v69 = v68;
    if (v68)
      v68 = sub_18F73D888((uint64_t)v68);
    v21 = (_QWORD *)v6[1];
    if (v21)
    {
      do
      {
        v22 = v21;
        v21 = (_QWORD *)*v21;
      }
      while (v21);
    }
    else
    {
      do
      {
        v22 = (_QWORD *)v6[2];
        v19 = *v22 == (_QWORD)v6;
        v6 = v22;
      }
      while (!v19);
    }
    if (!v11)
      break;
    v6 = v22;
  }
  while (v22 != v7);
LABEL_38:
  sub_18F73D8DC((uint64_t)&v67);
  v6 = v22;
LABEL_39:
  if (v6 != v7)
  {
    v23 = (uint64_t *)(a1 + 120);
    while (1)
    {
      v24 = operator new(0x4B0uLL);
      v25 = v24;
      v67 = v24;
      v68 = (uint64_t *)(a1 + 120);
      LOBYTE(v69) = 0;
      v26 = v6[6];
      v24[2] = *((_OWORD *)v6 + 2);
      *((_QWORD *)v24 + 6) = v26;
      *((_QWORD *)v24 + 7) = v6[7];
      *((_QWORD *)v24 + 8) = v6[8];
      v27 = v6[9];
      *((_QWORD *)v24 + 9) = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = *((_OWORD *)v6 + 5);
      v31 = *((_OWORD *)v6 + 6);
      *((_QWORD *)v24 + 14) = v6[14];
      v24[5] = v30;
      v24[6] = v31;
      v32 = *(_OWORD *)(v6 + 15);
      v33 = *(_OWORD *)((char *)v6 + 129);
      *((_QWORD *)v24 + 19) = 0;
      *(_OWORD *)((char *)v24 + 129) = v33;
      *(_OWORD *)((char *)v24 + 120) = v32;
      *((_QWORD *)v24 + 20) = 0;
      *((_QWORD *)v24 + 21) = 0;
      sub_18F692CBC((_QWORD *)v24 + 19, (const void *)v6[19], v6[20], 0x8E38E38E38E38E39 * ((uint64_t)(v6[20] - v6[19]) >> 3));
      v34 = *((_OWORD *)v6 + 11);
      v35 = *((_OWORD *)v6 + 13);
      v25[12] = *((_OWORD *)v6 + 12);
      v25[13] = v35;
      v25[11] = v34;
      v36 = *((_OWORD *)v6 + 21);
      v38 = *((_OWORD *)v6 + 18);
      v37 = *((_OWORD *)v6 + 19);
      v25[20] = *((_OWORD *)v6 + 20);
      v25[21] = v36;
      v25[18] = v38;
      v25[19] = v37;
      v39 = *((_OWORD *)v6 + 14);
      v40 = *((_OWORD *)v6 + 15);
      v41 = *((_OWORD *)v6 + 17);
      v25[16] = *((_OWORD *)v6 + 16);
      v25[17] = v41;
      v25[14] = v39;
      v25[15] = v40;
      if (*((char *)v6 + 375) < 0)
      {
        sub_18F5C6990((_BYTE *)v25 + 352, (void *)v6[44], v6[45]);
      }
      else
      {
        v42 = *((_OWORD *)v6 + 22);
        *((_QWORD *)v25 + 46) = v6[46];
        v25[22] = v42;
      }
      memcpy((char *)v25 + 376, v6 + 47, 0x118uLL);
      v43 = *((_OWORD *)v6 + 41);
      v44 = *((_OWORD *)v6 + 42);
      v45 = *((_OWORD *)v6 + 44);
      v25[43] = *((_OWORD *)v6 + 43);
      v25[44] = v45;
      v25[41] = v43;
      v25[42] = v44;
      v46 = *((_OWORD *)v6 + 45);
      v47 = *((_OWORD *)v6 + 46);
      v48 = *((_OWORD *)v6 + 48);
      v25[47] = *((_OWORD *)v6 + 47);
      v25[48] = v48;
      v25[45] = v46;
      v25[46] = v47;
      if (*((char *)v6 + 807) < 0)
      {
        sub_18F5C6990((_BYTE *)v25 + 784, (void *)v6[98], v6[99]);
      }
      else
      {
        v49 = *((_OWORD *)v6 + 49);
        *((_QWORD *)v25 + 100) = v6[100];
        v25[49] = v49;
      }
      memcpy((char *)v25 + 808, v6 + 101, 0x118uLL);
      v50 = *((_OWORD *)v6 + 69);
      v25[68] = *((_OWORD *)v6 + 68);
      v25[69] = v50;
      *((_QWORD *)v25 + 140) = 0;
      *((_QWORD *)v25 + 142) = 0;
      *((_QWORD *)v25 + 141) = 0;
      sub_18F73D44C((_QWORD *)v25 + 140, v6[140], v6[141], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6[141] - v6[140]) >> 4));
      *((_QWORD *)v25 + 143) = v6[143];
      v51 = v6[144];
      *((_QWORD *)v25 + 144) = v51;
      if (v51)
      {
        v52 = (unint64_t *)(v51 + 8);
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      v54 = *(_OWORD *)(v6 + 145);
      v55 = *(_OWORD *)(v6 + 147);
      *((_DWORD *)v25 + 298) = *((_DWORD *)v6 + 298);
      *(_OWORD *)((char *)v25 + 1176) = v55;
      *(_OWORD *)((char *)v25 + 1160) = v54;
      LOBYTE(v69) = 1;
      v56 = *v23;
      v57 = a1 + 120;
      v58 = (uint64_t **)(a1 + 120);
      if (*v23)
        break;
LABEL_72:
      sub_18F62A6F8((uint64_t **)(a1 + 112), v57, v58, (uint64_t *)v25);
      v67 = 0;
      sub_18F73D928((uint64_t)&v67);
      v64 = (_QWORD *)v6[1];
      if (v64)
      {
        do
        {
          v65 = v64;
          v64 = (_QWORD *)*v64;
        }
        while (v64);
      }
      else
      {
        do
        {
          v65 = (_QWORD *)v6[2];
          v19 = *v65 == (_QWORD)v6;
          v6 = v65;
        }
        while (!v19);
      }
      v6 = v65;
      if (v65 == v7)
        goto LABEL_78;
    }
    v59 = *((_QWORD *)v25 + 4);
    while (1)
    {
      v57 = v56;
      v60 = *(_QWORD *)(v56 + 32);
      if (v59 == v60)
      {
        v61 = *(unsigned __int8 *)(v57 + 48);
        if (*((_BYTE *)v25 + 48))
          v62 = v61 == 0;
        else
          v62 = 1;
        if (v62)
        {
          if (*((_BYTE *)v25 + 48))
            v63 = v61 == 0;
          else
            v63 = 0;
          if (v63)
          {
LABEL_67:
            v56 = *(_QWORD *)v57;
            v58 = (uint64_t **)v57;
            if (!*(_QWORD *)v57)
              goto LABEL_72;
            continue;
          }
        }
        else if (*((_QWORD *)v25 + 5) < *(_QWORD *)(v57 + 40))
        {
          goto LABEL_67;
        }
      }
      else if (v59 < v60)
      {
        goto LABEL_67;
      }
      v56 = *(_QWORD *)(v57 + 8);
      if (!v56)
      {
        v58 = (uint64_t **)(v57 + 8);
        goto LABEL_72;
      }
    }
  }
LABEL_78:
  sub_18F72E23C(a1 + 136, (uint64_t)a2 + 136);
  *(_BYTE *)(a1 + 904) = *((_BYTE *)a2 + 904);
  return a1;
}

void sub_18F72E8AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 375) < 0)
    operator delete(*v4);
  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 160) = v6;
    operator delete(v6);
  }
  sub_18F5D6004(v2 + 64);
  sub_18F73D928((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F72E930(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, double *a5, double *a6, double a7)
{
  double v14;
  uint64_t result;
  NSObject *v16;
  uint64_t *v17;
  NSObject *v18;
  uint64_t *v19;
  char *v20;
  double v21;
  int v22;
  double v23;
  __int16 v24;
  uint64_t *v25;
  __int16 v26;
  double v27;
  uint8_t buf[4];
  double v29;
  __int16 v30;
  uint64_t *v31;
  __int16 v32;
  double v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v14 = a5[1];
  v21 = v14;
  if ((sub_18F72ECB8(a1, (double *)a4, v14, a7) & 1) == 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v16 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v17 = a2;
      if (*((char *)a2 + 23) < 0)
        v17 = (uint64_t *)*a2;
      *(_DWORD *)buf = 134349570;
      v29 = v14;
      v30 = 2082;
      v31 = v17;
      v32 = 2050;
      v33 = a7;
      _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,moveParticle,failed,%{public}s,moveDistance,%{public}.1lf", buf, 0x20u);
    }
    result = sub_18F5C4AE0(115, 2);
    if (!(_DWORD)result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v22 = 134349570;
    v23 = v14;
    v24 = 2082;
    v25 = a2;
    v26 = 2050;
    v27 = a7;
LABEL_29:
    v20 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::moveParticleAndCheckDivergence(const std::string, const std::string, CLParticleMapMatcherCommon::Particle &, const double, const CLMapCrumb &, double &)", "CoreLocation: %s\n", v20);
    if (v20 != (char *)buf)
      free(v20);
    return 0;
  }
  if ((sub_18F72F50C((uint64_t *)&v21, a5, (double *)(a1 + 168), a6, *(double *)(a4 + 32), *(double *)(a4 + 40), *(float *)(a4 + 24)) & 1) != 0)return 1;
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v18 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v19 = a3;
    if (*((char *)a3 + 23) < 0)
      v19 = (uint64_t *)*a3;
    *(_DWORD *)buf = 134349314;
    v29 = v14;
    v30 = 2082;
    v31 = v19;
    _os_log_impl(&dword_18F5B3000, v18, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT,%{public}s,location or course diverged", buf, 0x16u);
  }
  result = sub_18F5C4AE0(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    if (*((char *)a3 + 23) < 0)
      a3 = (uint64_t *)*a3;
    v22 = 134349314;
    v23 = v14;
    v24 = 2082;
    v25 = a3;
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_18F72ECB8(uint64_t a1, double *a2, double a3, double a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  char *v18;
  NSObject *v19;
  double v20;
  NSObject *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint8_t buf[4];
  double v30;
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  _QWORD *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  double v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 208);
  v9 = *(std::__shared_weak_count **)(a1 + 216);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (!v8)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v13 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v30 = a3;
      _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, moveParticle", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_47;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_56;
LABEL_59:
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    goto LABEL_56;
  }
  if (((*(uint64_t (**)(uint64_t, double *, uint64_t, double))(*(_QWORD *)v8 + 88))(v8, a2, a1 + 1040, a4) & 1) == 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v14 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v15 = **(_QWORD ***)a2;
      v16 = (_QWORD *)*((_QWORD *)a2 + 6);
      v17 = *((unsigned __int8 *)a2 + 20);
      *(_DWORD *)buf = 134350081;
      v30 = a3;
      v31 = 2049;
      v32 = v15;
      v33 = 2050;
      v34 = v16;
      v35 = 1026;
      v36 = v17;
      v37 = 2050;
      v38 = a4;
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,moveParticle,moveOnRoad returned false,roadID,%{private}lld,projection,%{public}.3lf,fwd,%{public}d,moveDistance,%{public}.2lf", buf, 0x30u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v18 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::moveParticle(CFAbsoluteTime, CLParticleMapMatcherCommon::Particle &, double) const", "CoreLocation: %s\n", v18);
      goto LABEL_57;
    }
    goto LABEL_47;
  }
  if (!*(_QWORD *)a2)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v19 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v30 = a3;
      _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,moveParticle,null road", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_47;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_56;
    goto LABEL_59;
  }
  if (fabs(a2[4]) < 0.00003 && fabs(a2[5]) < 0.00003)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v12 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v30 = a3;
      _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,moveParticle,unexpected particle with snapLat == snapLon == 0", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_56;
      goto LABEL_59;
    }
LABEL_47:
    v25 = 0;
    if (!v9)
      return v25;
    goto LABEL_48;
  }
  v20 = a2[6];
  if (v20 < 0.0 || v20 > 1.0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v22 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v23 = (_QWORD *)*((_QWORD *)a2 + 6);
      v24 = **(_QWORD ***)a2;
      *(_DWORD *)buf = 134349569;
      v30 = a3;
      v31 = 2050;
      v32 = v23;
      v33 = 2049;
      v34 = v24;
      _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,moveParticle,invalidProjection,%{public}.3lf,roadID,%{private}lld", buf, 0x20u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_47;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
    {
LABEL_56:
      v18 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::moveParticle(CFAbsoluteTime, CLParticleMapMatcherCommon::Particle &, double) const", "CoreLocation: %s\n", v18);
LABEL_57:
      if (v18 != (char *)buf)
        free(v18);
      goto LABEL_47;
    }
    goto LABEL_59;
  }
  v25 = 1;
  if (!v9)
    return v25;
LABEL_48:
  v26 = (unint64_t *)&v9->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v25;
}

void sub_18F72F4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F72F50C(uint64_t *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7)
{
  double v13;
  double v14;
  double v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  double v27;
  double v28;
  int v29;
  uint64_t v30;
  uint8_t buf[4];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v13 = a2[38];
  v14 = fmod(v13 - a7, 360.0);
  if (v14 < 0.0)
    v14 = v14 + 360.0;
  if (v14 > 180.0)
    v14 = v14 + -360.0;
  v15 = fabs(v14);
  if (v15 <= 8.0)
  {
    if (v15 > *a4)
    {
      *a4 = v15;
      v13 = a2[38];
    }
    v27 = 0.0;
    v28 = 0.0;
    sub_18F71ACC4(a3, &v28, &v27, a2[36], a2[37], a2[9], v13, a5, a6);
    if (fabs(v28) <= 5.0)
    {
      if (fabs(v27) <= 45.0)
        return 1;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v23 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v24 = *a1;
        *(_DWORD *)buf = 134349056;
        v32 = v24;
        _os_log_impl(&dword_18F5B3000, v23, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf, along track too large, not suitable DOT assistance", buf, 0xCu);
      }
      result = sub_18F5C4AE0(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v25 = *a1;
        v29 = 134349056;
        v30 = v25;
        goto LABEL_34;
      }
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v20 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v21 = *a1;
        *(_DWORD *)buf = 134349056;
        v32 = v21;
        _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf, across track too large, not suitable DOT assistance", buf, 0xCu);
      }
      result = sub_18F5C4AE0(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v22 = *a1;
        v29 = 134349056;
        v30 = v22;
        goto LABEL_34;
      }
    }
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v16 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v17 = *a1;
      *(_DWORD *)buf = 134349056;
      v32 = v17;
      _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf, no DOT, course is not aligned", buf, 0xCu);
    }
    result = sub_18F5C4AE0(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v19 = *a1;
      v29 = 134349056;
      v30 = v19;
LABEL_34:
      v26 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::checkDivergence(const CFAbsoluteTime &, double, double, double, const CLMapCrumb &, CLDistanceCalc &, double &)", "CoreLocation: %s\n", v26);
      if (v26 != (char *)buf)
        free(v26);
      return 0;
    }
  }
  return result;
}

uint64_t sub_18F72F988(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  char v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  const void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[2];
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _OWORD v49[2];
  void *__p;
  void *v51;
  uint64_t v52;

  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return 0;
  v9 = *(_BYTE *)(a2 + 20) ? 1.0 - *(double *)(a2 + 48) : *(double *)(a2 + 48);
  sub_18F7047B4(*(_QWORD *)a2);
  if (v9 * *(double *)(v4 + 40) > 18.0)
  {
    v10 = *(_BYTE *)(a2 + 20) ? *(double *)(a2 + 48) : 1.0 - *(double *)(a2 + 48);
    v11 = *(_QWORD *)a2;
    sub_18F7047B4(*(_QWORD *)a2);
    if (v10 * *(double *)(v11 + 40) > 36.0)
      return 0;
  }
  v13 = *(std::__shared_weak_count **)(a2 + 8);
  v44 = *(_QWORD *)a2;
  v45 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = *(_OWORD *)(a2 + 32);
  v46 = *(_OWORD *)(a2 + 16);
  v47 = v16;
  v17 = *(_QWORD *)(a2 + 48);
  v49[0] = *(_OWORD *)(a2 + 56);
  *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)(a2 + 65);
  v48 = v17;
  __p = 0;
  v51 = 0;
  v18 = *(const void **)(a2 + 88);
  v19 = *(_QWORD *)(a2 + 96);
  v52 = 0;
  sub_18F692CBC(&__p, v18, v19, 0x8E38E38E38E38E39 * ((v19 - (uint64_t)v18) >> 3));
  v20 = sub_18F72FC68(a1, (uint64_t)&v44, a3, 1, a4);
  if (__p)
  {
    v51 = __p;
    operator delete(__p);
  }
  v21 = v45;
  if (!v45)
    goto LABEL_20;
  v22 = (unint64_t *)&v45->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if ((v20 & 1) != 0)
      return 1;
  }
  else
  {
LABEL_20:
    if ((v20 & 1) != 0)
      return 1;
  }
  v43 = 0x4051800000000000;
  v24 = *(std::__shared_weak_count **)(a2 + 8);
  v34 = *(_QWORD *)a2;
  v35 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = *(_OWORD *)(a2 + 32);
  v36 = *(_OWORD *)(a2 + 16);
  v37 = v27;
  v38 = *(_QWORD *)(a2 + 48);
  v39[0] = *(_OWORD *)(a2 + 56);
  *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)(a2 + 65);
  v41 = 0;
  v42 = 0;
  v28 = *(const void **)(a2 + 88);
  v29 = *(_QWORD *)(a2 + 96);
  v40 = 0;
  sub_18F692CBC(&v40, v28, v29, 0x8E38E38E38E38E39 * ((v29 - (uint64_t)v28) >> 3));
  v12 = sub_18F72FC68(a1, (uint64_t)&v34, a3, 0, (double *)&v43);
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  v30 = v35;
  if (v35)
  {
    v31 = (unint64_t *)&v35->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v12;
}

void sub_18F72FC2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F692600((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F72FC68(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double *a5)
{
  BOOL v10;
  BOOL v11;
  char *v12;
  double v13;
  int v14;
  int v15;
  double v16;
  int v17;
  double v18;
  uint64_t v19;
  double v20;
  void **i;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  double v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  const void *v39;
  uint64_t v40;
  double v41;
  NSObject *v42;
  void *v43;
  void *v44;
  char *v45;
  double v46;
  double v47;
  double v48;
  NSObject *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  char *v54;
  NSObject *v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v64;
  char *v65;
  int v66;
  void *__p;
  void **p_p;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE v74[32];
  __int128 v75;
  uint64_t v76;
  _OWORD v77[2];
  void *v78;
  void *v79;
  uint64_t v80;
  _BYTE buf[22];
  __int16 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a2)
    return 0;
  v10 = *(_BYTE *)(a2 + 20) == 0;
  v11 = *(_BYTE *)(a2 + 20) != 0;
  if (a4)
    v12 = "next";
  else
    v12 = "prior";
  if (a4)
    v10 = v11;
  *(_BYTE *)(a2 + 20) = v10;
  if (*(_BYTE *)(a3 + 264))
  {
    v65 = v12;
    v13 = *a5;
    memset(buf, 0, 20);
    *(_WORD *)&buf[20] = 1;
    LODWORD(v83) = 0;
    v85 = 0;
    v84 = 0uLL;
    sub_18F623A40(buf, (uint64_t *)a2);
    buf[20] = *(_BYTE *)(a2 + 20);
    v85 = *(_QWORD *)(a2 + 48);
    v70 = 0;
    v71 = 0;
    *(_QWORD *)v72 = v72;
    *(_QWORD *)&v72[8] = v72;
    *(_QWORD *)&v72[16] = 0;
    __p = &__p;
    p_p = &__p;
    v69 = 0;
    v66 = 0;
    v14 = (*(uint64_t (**)(uint64_t, _BYTE *, int *, _BYTE *, void **, uint64_t *, uint64_t *, double))(*(_QWORD *)a1 + 88))(a1, buf, &v66, v72, &__p, &v71, &v70, v13);
    if (v66 > 0)
      v15 = v14;
    else
      v15 = 0;
    v16 = -1.0;
    if (v15 == 1)
    {
      v17 = *(unsigned __int8 *)(a2 + 20);
      v18 = *(double *)(a2 + 48);
      v19 = *(_QWORD *)a2;
      sub_18F7047B4(*(_QWORD *)a2);
      v20 = 1.0 - v18;
      if (!v17)
        v20 = v18;
      v16 = v20 * *(double *)(v19 + 40);
      for (i = p_p; i != &__p; i = (void **)i[1])
      {
        v23 = (uint64_t)i[2];
        v22 = (std::__shared_weak_count *)i[3];
        *(_QWORD *)v74 = v23;
        *(_QWORD *)&v74[8] = v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v25 = __ldxr(p_shared_owners);
          while (__stxr(v25 + 1, p_shared_owners));
        }
        *(_OWORD *)&v74[16] = *((_OWORD *)i + 2);
        LOBYTE(v75) = *((_BYTE *)i + 48);
        sub_18F7047B4(v23);
        v26 = *(double *)(v23 + 40);
        if (v22)
        {
          v27 = (unint64_t *)&v22->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v16 = v16 + v26;
      }
    }
    sub_18F64F950((uint64_t *)&__p);
    sub_18F64F950((uint64_t *)v72);
    v29 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v30 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v12 = v65;
  }
  else
  {
    v16 = -1.0;
  }
  v33 = *(double *)(a3 + 96);
  sub_18F5D5990(&__p, v12);
  v34 = *(double *)(a3 + 8);
  if (v16 < 0.0)
  {
    v35 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)v74 = *(_QWORD *)a2;
    *(_QWORD *)&v74[8] = v35;
    if (v35)
    {
      v36 = (unint64_t *)(v35 + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v38 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v74[16] = *(_OWORD *)(a2 + 16);
    v75 = v38;
    v76 = *(_QWORD *)(a2 + 48);
    v77[0] = *(_OWORD *)(a2 + 56);
    *(_OWORD *)((char *)v77 + 9) = *(_OWORD *)(a2 + 65);
    v79 = 0;
    v80 = 0;
    v39 = *(const void **)(a2 + 88);
    v40 = *(_QWORD *)(a2 + 96);
    v78 = 0;
    sub_18F692CBC(&v78, v39, v40, 0x8E38E38E38E38E39 * ((v40 - (uint64_t)v39) >> 3));
    if ((sub_18F72ECB8(a1, (double *)v74, v34, 24.0) & 1) != 0)
    {
      v41 = fmod(*(float *)&v74[24] - *(double *)(a3 + 104), 360.0);
      if (v41 < 0.0)
        v41 = v41 + 360.0;
      if (v41 > 180.0)
        v41 = v41 + -360.0;
      if (fabs(v41) <= 8.0)
      {
        if (v78)
        {
          v79 = v78;
          operator delete(v78);
        }
        v61 = *(std::__shared_weak_count **)&v74[8];
        if (*(_QWORD *)&v74[8])
        {
          v62 = (unint64_t *)(*(_QWORD *)&v74[8] + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v32 = 0;
        goto LABEL_88;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v42 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v43 = &__p;
        if (v69 < 0)
          v43 = __p;
        *(_DWORD *)buf = 134349314;
        *(double *)&buf[4] = v34;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v43;
        _os_log_impl(&dword_18F5B3000, v42, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,no DOT, too close to a %{public}s road with large direction change", buf, 0x16u);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_80;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v44 = &__p;
      if (v69 < 0)
        v44 = __p;
      *(_DWORD *)v72 = 134349314;
      *(double *)&v72[4] = v34;
      *(_WORD *)&v72[12] = 2082;
      *(_QWORD *)&v72[14] = v44;
      v45 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isCloseToMultiOutboundIntersection(CLParticleMapMatcherCommon::Particle, const CLMapCrumb &, const BOOL, double &) const", "CoreLocation: %s\n", v45);
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v55 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v56 = &__p;
        if (v69 < 0)
          v56 = __p;
        *(_DWORD *)buf = 134349570;
        *(double *)&buf[4] = v34;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v56;
        v82 = 2050;
        v83 = 0x4038000000000000;
        _os_log_impl(&dword_18F5B3000, v55, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,moveParticle failed for %{public}s particle,distance,%{public}.1lf", buf, 0x20u);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_80;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v64 = &__p;
      if (v69 < 0)
        v64 = __p;
      *(_DWORD *)v72 = 134349570;
      *(double *)&v72[4] = v34;
      *(_WORD *)&v72[12] = 2082;
      *(_QWORD *)&v72[14] = v64;
      *(_WORD *)&v72[22] = 2050;
      v73 = 0x4038000000000000;
      v45 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isCloseToMultiOutboundIntersection(CLParticleMapMatcherCommon::Particle, const CLMapCrumb &, const BOOL, double &) const", "CoreLocation: %s\n", v45);
    }
    if (v45 != buf)
      free(v45);
LABEL_80:
    if (v78)
    {
      v79 = v78;
      operator delete(v78);
    }
    v57 = *(std::__shared_weak_count **)&v74[8];
    if (*(_QWORD *)&v74[8])
    {
      v58 = (unint64_t *)(*(_QWORD *)&v74[8] + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    goto LABEL_87;
  }
  v46 = fabs(v33);
  if (v33 < 0.0)
    v46 = 3.0;
  v47 = v16 - v46;
  v48 = 36.0;
  if (a4)
    v48 = 18.0;
  if (v47 >= v48)
  {
    v32 = 0;
    *a5 = v16 + -1.0;
    goto LABEL_88;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v49 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v50 = &__p;
    if (v69 < 0)
      v50 = __p;
    v51 = *(_QWORD *)(a3 + 96);
    *(_DWORD *)buf = 134349826;
    *(double *)&buf[4] = v34;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v50;
    v82 = 2050;
    v83 = *(_QWORD *)&v47;
    LOWORD(v84) = 2050;
    *(_QWORD *)((char *)&v84 + 2) = v51;
    _os_log_impl(&dword_18F5B3000, v49, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,no DOT,too close to %{public}s intersection,dist,%{public}.2lf,speed,%{public}.2lf", buf, 0x2Au);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v52 = &__p;
    if (v69 < 0)
      v52 = __p;
    v53 = *(_QWORD *)(a3 + 96);
    *(_DWORD *)v74 = 134349826;
    *(double *)&v74[4] = v34;
    *(_WORD *)&v74[12] = 2082;
    *(_QWORD *)&v74[14] = v52;
    *(_WORD *)&v74[22] = 2050;
    *(double *)&v74[24] = v47;
    LOWORD(v75) = 2050;
    *(_QWORD *)((char *)&v75 + 2) = v53;
    v54 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isCloseToMultiOutboundIntersection(CLParticleMapMatcherCommon::Particle, const CLMapCrumb &, const BOOL, double &) const", "CoreLocation: %s\n", v54);
    if (v54 != buf)
      free(v54);
  }
LABEL_87:
  v32 = 1;
LABEL_88:
  if (SHIBYTE(v69) < 0)
    operator delete(__p);
  return v32;
}

void sub_18F7305D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  sub_18F692600((uint64_t)&a26);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_18F730650(_QWORD *a1, uint64_t *a2, char a3, uint64_t *a4, double a5)
{
  int v10;
  int v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint8_t buf[8];
  std::__shared_weak_count *v50;
  int v51;
  __int16 v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    *(_QWORD *)buf = 0;
    v50 = 0;
    v51 = 0;
    v52 = 1;
    v53 = 0;
    v55 = 0;
    v56 = 0;
    v54 = 0;
    sub_18F623A40(buf, a2);
    LOBYTE(v52) = a3;
    v56 = a2[6];
    v10 = 30;
    while (1)
    {
      v11 = v52;
      v12 = *(double *)&v56;
      v13 = *(_QWORD *)buf;
      sub_18F7047B4(*(uint64_t *)buf);
      v14 = 1.0 - v12;
      if (!v11)
        v14 = v12;
      v15 = v14 * *(double *)(v13 + 40);
      if (v15 > a5)
      {
LABEL_16:
        v18 = 1;
        goto LABEL_47;
      }
      a5 = a5 - v15;
      if ((_BYTE)v52)
        v16 = 1.0;
      else
        v16 = 0.0;
      sub_18F677A18(a4);
      if ((_BYTE)v52)
        v17 = 1.0;
      else
        v17 = 0.0;
      v56 = *(_QWORD *)&v17;
      v46 = (uint64_t)&v46;
      v47 = &v46;
      v48 = 0;
      v18 = (*(uint64_t (**)(_QWORD, uint64_t *, uint8_t *, double, double))(*(_QWORD *)*a1 + 72))(*a1, &v46, buf, v16, a5);
      if ((v18 & 1) == 0)
        goto LABEL_46;
      if (v48 >= 2)
        break;
      if (v48 != 1)
        goto LABEL_46;
      sub_18F623A40(buf, v47 + 4);
      LOBYTE(v52) = *((_BYTE *)v47 + 24);
      v56 = v47[6];
      sub_18F677A18(&v46);
      if (!--v10)
        goto LABEL_16;
    }
    if (&v46 != a4)
    {
      v20 = v47;
      v21 = (uint64_t *)a4[1];
      if (v47 != &v46 && v21 != a4)
      {
        do
        {
          v22 = v20[2];
          *((_WORD *)v21 + 12) = *((_WORD *)v20 + 12);
          v21[2] = v22;
          sub_18F623A40(v21 + 4, v20 + 4);
          v21[6] = v20[6];
          v20 = (uint64_t *)v20[1];
          v21 = (uint64_t *)v21[1];
        }
        while (v20 != &v46 && v21 != a4);
      }
      if (v21 == a4)
      {
        if (v20 != &v46)
        {
          v27 = (uint64_t *)operator new(0x38uLL);
          v28 = v27;
          *v27 = 0;
          v27[1] = 0;
          v29 = v20[2];
          *((_WORD *)v27 + 12) = *((_WORD *)v20 + 12);
          v27[2] = v29;
          v27[4] = v20[4];
          v30 = v20[5];
          v27[5] = v30;
          if (v30)
          {
            v31 = (unint64_t *)(v30 + 8);
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
          v27[6] = v20[6];
          v33 = v20[1];
          v34 = 1;
          if ((uint64_t *)v33 != &v46)
          {
            v35 = v27;
            do
            {
              v27 = (uint64_t *)operator new(0x38uLL);
              *v27 = (uint64_t)v35;
              v27[1] = 0;
              v36 = *(_QWORD *)(v33 + 16);
              *((_WORD *)v27 + 12) = *(_WORD *)(v33 + 24);
              v27[2] = v36;
              v27[4] = *(_QWORD *)(v33 + 32);
              v37 = *(_QWORD *)(v33 + 40);
              v27[5] = v37;
              if (v37)
              {
                v38 = (unint64_t *)(v37 + 8);
                do
                  v39 = __ldxr(v38);
                while (__stxr(v39 + 1, v38));
              }
              v27[6] = *(_QWORD *)(v33 + 48);
              v35[1] = (uint64_t)v27;
              ++v34;
              v33 = *(_QWORD *)(v33 + 8);
              v35 = v27;
            }
            while ((uint64_t *)v33 != &v46);
          }
          v40 = *a4;
          *(_QWORD *)(v40 + 8) = v28;
          *v28 = v40;
          *a4 = (uint64_t)v27;
          v27[1] = (uint64_t)a4;
          a4[2] += v34;
        }
      }
      else
      {
        v24 = *a4;
        v25 = *v21;
        *(_QWORD *)(v25 + 8) = *(_QWORD *)(*a4 + 8);
        **(_QWORD **)(v24 + 8) = v25;
        do
        {
          v26 = (uint64_t *)v21[1];
          --a4[2];
          sub_18F5D6004((uint64_t)(v21 + 4));
          operator delete(v21);
          v21 = v26;
        }
        while (v26 != a4);
      }
    }
LABEL_46:
    sub_18F677A18(&v46);
LABEL_47:
    v41 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v19 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,invalid geometry pointer, findMultiOutboundIntersection", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      LOWORD(v46) = 0;
      v45 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::findMultiOutboundIntersection(CLMapGeometryPtr, const CLMapGeometry::DistanceQueryResult &, BOOL, double, CLMapGeometry::ConnectedQueryResultList &)", "CoreLocation: %s\n", v45);
      if (v45 != (char *)buf)
        free(v45);
    }
    return 0;
  }
  return v18;
}

void sub_18F730B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_18F677A18((uint64_t *)va);
  sub_18F5D6004((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F730BA8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  __n128 v9;
  double v10;
  double v11;
  _DWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  char *v23;
  uint64_t v24;
  int v25;
  _BOOL4 v26;
  uint64_t v27;
  double v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  NSObject *v35;
  NSObject *v36;
  char *v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  unint64_t *v41;
  unint64_t v42;
  char *v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  void *__p;
  void *v60;
  uint64_t v61;
  __int128 buf;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)(a2 + 40);
  v2 = *(_QWORD *)(a2 + 40);
  a1[28] = *(_QWORD *)(a2 + 400);
  v4 = *(_QWORD *)(a2 + 384);
  if (*(_QWORD *)(a2 + 48) != v2)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v5 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134349056;
      *(_QWORD *)((char *)&buf + 4) = v4;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,initialized called on already initialized filter", (uint8_t *)&buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      LODWORD(v53) = 134349056;
      *(_QWORD *)((char *)&v53 + 4) = v4;
      v44 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "CoreLocation: %s\n", v44);
      if (v44 != (char *)&buf)
        free(v44);
    }
    return 0;
  }
  sub_18F73D96C((void **)(a2 + 40));
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  v63 = 0;
  buf = 0uLL;
  *(_QWORD *)&v53 = &buf;
  sub_18F6B2D54((void ***)&v53);
  v9.n128_u64[0] = *(_QWORD *)(a2 + 456);
  v10 = *(double *)(a2 + 576);
  if (v10 > 0.0)
  {
    v11 = *(double *)(a2 + 584);
    if (v11 > 0.0)
      v9.n128_f64[0] = sqrt(v11 / 2.45 * (v11 / 2.45) + v10 / 2.45 * (v10 / 2.45));
  }
  v48 = (uint64_t)&v48;
  v49 = &v48;
  v50 = 0;
  v12 = (_DWORD *)a1[26];
  v13 = (std::__shared_weak_count *)a1[27];
  v47 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (!v12)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v35 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134349056;
      *(_QWORD *)((char *)&buf + 4) = v4;
      _os_log_impl(&dword_18F5B3000, v35, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, initialize", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_94;
    bzero(&buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_111;
    goto LABEL_117;
  }
  v9.n128_f64[0] = v9.n128_f64[0] * 4.0;
  if (v9.n128_f64[0] < 75.0)
    v9.n128_f64[0] = 75.0;
  if (v9.n128_f64[0] > 250.0)
    v9.n128_f64[0] = 250.0;
  v12[9] = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t *, uint64_t *, uint64_t, __n128))(*(_QWORD *)v12 + 64))(v12, &v48, v3 + 42, 1, v9) & 1) == 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v36 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134349056;
      *(_QWORD *)((char *)&buf + 4) = v4;
      _os_log_impl(&dword_18F5B3000, v36, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,roadsWithinDistance returned false", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_94;
    bzero(&buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_74;
    goto LABEL_115;
  }
  if (!v50)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v39 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134349056;
      *(_QWORD *)((char *)&buf + 4) = v4;
      _os_log_impl(&dword_18F5B3000, v39, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,roadsWithinDistance returned 0 roads", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_94;
    bzero(&buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_74;
LABEL_115:
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
LABEL_74:
    LODWORD(v53) = 134349056;
    *(_QWORD *)((char *)&v53 + 4) = v4;
    v37 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "CoreLocation: %s\n", v37);
    goto LABEL_112;
  }
  v16 = v49;
  if (v49 != &v48)
  {
    v46 = a2 + 56;
    while (1)
    {
      v53 = 0uLL;
      LODWORD(v54) = 0;
      WORD2(v54) = 1;
      DWORD2(v54) = 0;
      v60 = 0;
      v61 = 0;
      __p = 0;
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v58 = 0;
      sub_18F623A40(&v53, v16 + 2);
      v17 = *((_OWORD *)v16 + 2);
      v18 = *((_OWORD *)v16 + 3);
      *(_QWORD *)&v56 = v16[8];
      v54 = v17;
      v55 = v18;
      v19 = v53;
      if ((_QWORD)v53)
        break;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v22 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134349056;
        *(_QWORD *)((char *)&buf + 4) = v4;
        _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, NULL road at initialization", (uint8_t *)&buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v51 = 134349056;
        v52 = v4;
        v23 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "CoreLocation: %s\n", v23);
        if (v23 != (char *)&buf)
          free(v23);
      }
LABEL_50:
      if (__p)
      {
        v60 = __p;
        operator delete(__p);
      }
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
      if (*((_QWORD *)&v53 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (!v19)
        goto LABEL_94;
      v16 = (uint64_t *)v16[1];
      if (v16 == &v48)
        goto LABEL_75;
    }
    v20 = *(_QWORD *)(a2 + 48);
    if (v20 >= *(_QWORD *)(a2 + 56))
    {
      v21 = sub_18F6B3118(v3, (uint64_t)&v53);
    }
    else
    {
      sub_18F6B323C(v46, *(_QWORD *)(a2 + 48), (uint64_t)&v53);
      v21 = v20 + 112;
      *(_QWORD *)(a2 + 48) = v20 + 112;
    }
    *(_QWORD *)(a2 + 48) = v21;
    v24 = a1[26];
    if (!v24)
    {
LABEL_44:
      BYTE4(v54) ^= 1u;
      v28 = fmod((float)(*((float *)&v54 + 2) + 180.0), 360.0);
      if (v28 < 0.0)
        v28 = v28 + 360.0;
      v29 = v28;
      *((float *)&v54 + 2) = v29;
      v30 = *(_QWORD *)(a2 + 48);
      if (v30 >= *(_QWORD *)(a2 + 56))
      {
        v31 = sub_18F6B3118(v3, (uint64_t)&v53);
      }
      else
      {
        sub_18F6B323C(v46, *(_QWORD *)(a2 + 48), (uint64_t)&v53);
        v31 = v30 + 112;
        *(_QWORD *)(a2 + 48) = v30 + 112;
      }
      *(_QWORD *)(a2 + 48) = v31;
      goto LABEL_50;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 104))(v24))
      goto LABEL_41;
    v25 = *(_DWORD *)(v53 + 88);
    if (v25 == 3)
    {
      v26 = 1;
      goto LABEL_42;
    }
    if (v25)
LABEL_41:
      v26 = 0;
    else
      v26 = *(unsigned __int8 *)(v53 + 80) != 0;
LABEL_42:
    v27 = a1[26];
    if (v27 && (v26 | (*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 104))(v27) ^ 1) != 1)
      goto LABEL_50;
    goto LABEL_44;
  }
LABEL_75:
  if (*(_QWORD *)(a2 + 48) != *(_QWORD *)(a2 + 40))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v38 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134349056;
      *(_QWORD *)((char *)&buf + 4) = v4;
      _os_log_impl(&dword_18F5B3000, v38, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,filter initialized", (uint8_t *)&buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      LODWORD(v53) = 134349056;
      *(_QWORD *)((char *)&v53 + 4) = v4;
      v45 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "CoreLocation: %s\n", v45);
      if (v45 != (char *)&buf)
        free(v45);
    }
    v6 = 1;
    goto LABEL_95;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v40 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 134349056;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl(&dword_18F5B3000, v40, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,zero particles at initialization", (uint8_t *)&buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
    {
LABEL_111:
      LODWORD(v53) = 134349056;
      *(_QWORD *)((char *)&v53 + 4) = v4;
      v37 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::initialize(MMFilterData &)", "CoreLocation: %s\n", v37);
LABEL_112:
      if (v37 != (char *)&buf)
        free(v37);
      goto LABEL_94;
    }
LABEL_117:
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    goto LABEL_111;
  }
LABEL_94:
  v6 = 0;
LABEL_95:
  if (v47)
  {
    v41 = (unint64_t *)&v47->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  sub_18F64F950(&v48);
  return v6;
}

void sub_18F73184C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va);
  sub_18F64F950((uint64_t *)va1);
  _Unwind_Resume(a1);
}

BOOL sub_18F7318AC(uint64_t a1, double *a2, uint64_t a3, __n128 a4)
{
  double v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  double v12;
  double v13;
  double v14;

  v5 = a2[12];
  a4.n128_u64[0] = *(_QWORD *)(a1 + 24);
  if (a4.n128_f64[0] >= 0.0)
    goto LABEL_20;
  v8 = *(_QWORD *)(a1 + 208);
  if (v8)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8);
    a4.n128_u64[0] = 0.75;
    if (v9)
      a4.n128_f64[0] = 2.5;
  }
  else
  {
    a4.n128_u64[0] = 0.75;
  }
  if (a2[3] - *(double *)(a1 + 232) < 900.0)
  {
    v10 = *(_QWORD *)(a1 + 208);
    if (v10)
    {
      v11 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v10 + 104))(v10, a4);
      a4.n128_u64[0] = 0.375;
      if (v11)
        a4.n128_f64[0] = 1.25;
    }
    else
    {
      a4.n128_u64[0] = 0.375;
    }
  }
  if (a2[23] > 0.0 && a2[12] >= 0.0
    || *(double *)(a3 + 424) <= 0.0
    || (v12 = *(double *)(a3 + 336), v12 < 0.0)
    || (v13 = a2[3], v13 >= 0.0) && (v14 = *(double *)(a3 + 264), v14 >= 0.0) && vabdd_f64(v13, v14) > 2.2)
  {
LABEL_20:
    v12 = v5;
  }
  return v12 > a4.n128_f64[0] || *(_BYTE *)(a3 + 504) != 0;
}

BOOL sub_18F7319D4(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  uint64_t v5;
  char *v7;
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v4 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 134349312;
    v9 = v5;
    v10 = 1026;
    v11 = v3;
    _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,allowsNetworkUsage,%{public}d", buf, 0x12u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallUseNetwork(const CLMapCrumb &)", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  return v3 != 0;
}

void sub_18F731BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  double v15;
  double v16;
  _BOOL4 v17;
  double v18;
  _BOOL4 v19;
  double v20;
  double v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  int v33;
  double v34;
  double v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  NSObject *v49;
  NSObject *v50;
  unint64_t *v51;
  unint64_t v52;
  double v53;
  double v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82[2];
  unint64_t v83;
  __int16 v84;
  _BYTE v85[22];
  __int16 v86;
  uint64_t v87;
  uint8_t buf[4];
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v6 = *(double *)(a2 + 104);
  if (v6 > 0.0 && *(double *)(a2 + 192) <= 0.0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v7 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(_QWORD *)(a2 + 104);
      v10 = *(_QWORD *)(a2 + 192);
      *(_DWORD *)buf = 134349568;
      v89 = v8;
      v90 = 2050;
      v91 = v9;
      v92 = 2050;
      v93 = v10;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_DEBUG, "CLMMPED,match,%{public}.1lf,course invalidated as courseUnc was invalid,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v65 = *(_QWORD *)(a2 + 8);
      v66 = *(_QWORD *)(a2 + 104);
      v67 = *(_QWORD *)(a2 + 192);
      *(_DWORD *)v85 = 134349568;
      *(_QWORD *)&v85[4] = v65;
      *(_WORD *)&v85[12] = 2050;
      *(_QWORD *)&v85[14] = v66;
      v86 = 2050;
      v87 = v67;
      v68 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "CoreLocation: %s\n", v68);
      if (v68 != (char *)buf)
        free(v68);
    }
    *(_QWORD *)(a2 + 104) = 0xBFF0000000000000;
    *(_QWORD *)(a2 + 192) = 0xBFF0000000000000;
    v6 = -1.0;
  }
  v11 = *(double *)(a3 + 264);
  if (v11 <= 0.0)
    return;
  v12 = *(double *)(a2 + 24);
  v13 = v12 < 0.0 || v11 < 0.0;
  v14 = vabdd_f64(v12, v11);
  if (v13)
    v15 = -1.0;
  else
    v15 = v14;
  v17 = *(double *)(a2 + 184) > 0.0 && (v16 = *(double *)(a2 + 96), v16 >= 0.0) && v16 < 0.001
     || *(_BYTE *)(a2 + 228) != 0;
  v18 = *(double *)(a2 + 192);
  v19 = v6 < 0.0;
  if (v18 <= 0.0)
    v19 = 1;
  if (v17 && v19 && v15 < 2.2)
  {
    v20 = *(double *)(a3 + 432);
    if (v20 < 90.0 && v20 > 0.0)
    {
      v21 = *(double *)(a3 + 344);
      if (v21 >= 0.0)
      {
        *(double *)(a2 + 104) = v21;
        *(double *)(a2 + 192) = v20;
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v22 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v23 = *(_QWORD *)(a2 + 8);
          v24 = *(_QWORD *)(a2 + 104);
          v25 = *(_QWORD *)(a2 + 192);
          *(_DWORD *)buf = 134349568;
          v89 = v23;
          v90 = 2050;
          v91 = v24;
          v92 = 2050;
          v93 = v25;
          _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_DEBUG, "CLMMPED,match,%{public}.1lf,invalidCourseInfoUpdatedUsingPreviousEpochInfo,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_57;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 == -1)
          goto LABEL_124;
LABEL_136:
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
LABEL_124:
        v69 = *(_QWORD *)(a2 + 8);
        v70 = *(_QWORD *)(a2 + 104);
        v71 = *(_QWORD *)(a2 + 192);
        *(_DWORD *)v85 = 134349568;
        *(_QWORD *)&v85[4] = v69;
        *(_WORD *)&v85[12] = 2050;
        *(_QWORD *)&v85[14] = v70;
        v86 = 2050;
        v87 = v71;
        v72 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "CoreLocation: %s\n", v72);
        if (v72 != (char *)buf)
          free(v72);
        goto LABEL_57;
      }
    }
  }
  if (v6 >= 0.0 && v18 > 179.9)
  {
    if (v15 >= 2.2
      || (v26 = *(double *)(a3 + 432), v26 >= 90.0)
      || v26 <= 0.0
      || *(double *)(a3 + 344) < 0.0
      || !*(_BYTE *)(a3 + 504)
      || (v27 = (uint64_t *)(a3 + 120), !*(_QWORD *)(a3 + 120)))
    {
      *(_QWORD *)(a2 + 104) = 0xBFF0000000000000;
      *(_QWORD *)(a2 + 192) = 0xBFF0000000000000;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v36 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v37 = *(_QWORD *)(a2 + 8);
        v38 = *(_QWORD *)(a2 + 104);
        v39 = *(_QWORD *)(a2 + 192);
        *(_DWORD *)buf = 134349568;
        v89 = v37;
        v90 = 2050;
        v91 = v38;
        v92 = 2050;
        v93 = v39;
        _os_log_impl(&dword_18F5B3000, v36, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseInvalidated,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_57;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_124;
      goto LABEL_136;
    }
    v82[0] = (uint64_t)v82;
    v82[1] = (uint64_t)v82;
    v83 = 0;
    v29 = *(_QWORD *)(a1 + 208);
    v28 = *(std::__shared_weak_count **)(a1 + 216);
    *(_QWORD *)v85 = v29;
    *(_QWORD *)&v85[8] = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v31 = __ldxr(p_shared_owners);
      while (__stxr(v31 + 1, p_shared_owners));
    }
    if (v29)
    {
      v32 = *v27;
      if (*v27)
      {
        v33 = *(unsigned __int8 *)(a3 + 140);
        v34 = *(double *)(a3 + 168);
        sub_18F7047B4(*v27);
        v35 = 1.0 - v34;
        if (!v33)
          v35 = v34;
        (*(void (**)(uint64_t, uint64_t *, uint64_t, BOOL, _QWORD, double, double))(*(_QWORD *)v29 + 72))(v29, v82, a3 + 120, v33 != 0, 0, v34, v35 * *(double *)(v32 + 40) + 5.0);
        goto LABEL_92;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v50 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v50, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,null road, getRoadsAtIntersection", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 0))
      {
LABEL_92:
        if (v28)
        {
          v51 = (unint64_t *)&v28->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v53 = *(double *)(a3 + 168);
        if ((v53 < 0.07 || v53 > 0.93) && v83 >= 2)
        {
          *(_QWORD *)(a2 + 104) = 0xBFF0000000000000;
          *(_QWORD *)(a2 + 192) = 0xBFF0000000000000;
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v61 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            v62 = *(_QWORD *)(a2 + 8);
            v63 = *(_QWORD *)(a2 + 104);
            v64 = *(_QWORD *)(a2 + 192);
            *(_DWORD *)buf = 134349568;
            v89 = v62;
            v90 = 2050;
            v91 = v63;
            v92 = 2050;
            v93 = v64;
            _os_log_impl(&dword_18F5B3000, v61, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseInvalidated,particle near multioutbound intersection,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_118;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
            goto LABEL_131;
        }
        else
        {
          *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 344);
          v56 = *(double *)(a3 + 432);
          if (v56 < 29.9)
            v56 = 29.9;
          *(double *)(a2 + 192) = v56;
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v57 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            v58 = *(_QWORD *)(a2 + 8);
            v59 = *(_QWORD *)(a2 + 104);
            v60 = *(_QWORD *)(a2 + 192);
            *(_DWORD *)buf = 134349568;
            v89 = v58;
            v90 = 2050;
            v91 = v59;
            v92 = 2050;
            v93 = v60;
            _os_log_impl(&dword_18F5B3000, v57, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,highCourseUncDataReplacedWithPreviousEpochInfo,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_118;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
          {
LABEL_131:
            v77 = *(_QWORD *)(a2 + 8);
            v78 = *(_QWORD *)(a2 + 104);
            v79 = *(_QWORD *)(a2 + 192);
            *(_DWORD *)v85 = 134349568;
            *(_QWORD *)&v85[4] = v77;
            *(_WORD *)&v85[12] = 2050;
            *(_QWORD *)&v85[14] = v78;
            v86 = 2050;
            v87 = v79;
            v80 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "CoreLocation: %s\n", v80);
            if (v80 != (char *)buf)
              free(v80);
LABEL_118:
            sub_18F677A18(v82);
            goto LABEL_57;
          }
        }
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        goto LABEL_131;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
      {
LABEL_134:
        v84 = 0;
        v81 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::getRoadsAtIntersection(const CFAbsoluteTime, const CLMapGeometry::DistanceQueryResult &, CLMapGeometry::ConnectedQueryResultList &)", "CoreLocation: %s\n", v81);
        if (v81 != (char *)buf)
          free(v81);
        goto LABEL_92;
      }
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v49 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v49, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,invalid geometry pointer, getRoadsAtIntersection", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_92;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_134;
    }
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    goto LABEL_134;
  }
LABEL_57:
  v40 = *(double *)(a2 + 192);
  v41 = *(double *)(a2 + 104);
  if (v40 > 0.0 && v41 >= 0.0)
  {
    if (v40 < 13.0)
    {
      *(_QWORD *)(a2 + 192) = 0x402A000000000000;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v42 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v43 = *(_QWORD *)(a2 + 8);
        v44 = *(_QWORD *)(a2 + 104);
        v45 = *(_QWORD *)(a2 + 192);
        *(_DWORD *)buf = 134349568;
        v89 = v43;
        v90 = 2050;
        v91 = v44;
        v92 = 2050;
        v93 = v45;
        _os_log_impl(&dword_18F5B3000, v42, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseUncFloorApplied,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v73 = *(_QWORD *)(a2 + 8);
        v74 = *(_QWORD *)(a2 + 104);
        v75 = *(_QWORD *)(a2 + 192);
        *(_DWORD *)v85 = 134349568;
        *(_QWORD *)&v85[4] = v73;
        *(_WORD *)&v85[12] = 2050;
        *(_QWORD *)&v85[14] = v74;
        v86 = 2050;
        v87 = v75;
        v76 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "CoreLocation: %s\n", v76);
        if (v76 != (char *)buf)
          free(v76);
      }
    }
    v40 = *(double *)(a2 + 192);
    v41 = *(double *)(a2 + 104);
  }
  if (v40 <= 0.0)
    goto LABEL_77;
  if (v41 < 0.0)
    goto LABEL_77;
  if (*(double *)(a3 + 432) <= 0.0)
    goto LABEL_77;
  v46 = *(double *)(a3 + 344);
  if (v46 < 0.0 || v15 >= 2.2)
    goto LABEL_77;
  v47 = fmod(v41 - v46, 360.0);
  if (v47 < 0.0)
    v47 = v47 + 360.0;
  if (v47 > 180.0)
    v47 = v47 + -360.0;
  v48 = fabs(v47);
  if (!*(_BYTE *)(a1 + 1032))
  {
    *(_BYTE *)(a1 + 1032) = v48 > 14.0;
    return;
  }
  if (v48 < 8.0)
LABEL_77:
    *(_BYTE *)(a1 + 1032) = 0;
}

void sub_18F732AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_18F5D6004((uint64_t)va1);
  sub_18F677A18((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_18F732B10(uint64_t a1, uint64_t a2, double *a3)
{
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  char *v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  unint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)(a2 + 24);
  if (v4 >= 0.0 && (v5 = a3[33], v5 >= 0.0))
  {
    v9 = (v4 - v5) * (v4 - v5);
    v10 = *(double *)(a2 + 184);
    v11 = 0.0;
    if (v10 <= 0.0 || (v12 = *(double *)(a2 + 96), v12 < 0.0) || (v13 = a3[53], v13 <= 0.0))
    {
      v15 = 0.0;
    }
    else
    {
      v14 = a3[42];
      v15 = 0.0;
      if (v14 >= 0.0)
      {
        v11 = v9 * ((v13 * v13 + v10 * v10) * 0.25);
        v15 = v9 * ((v12 + v14) * 0.5 * ((v12 + v14) * 0.5 * 0.25));
      }
    }
    return sqrt(v9 * 3.0 + v11 + v15);
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v6 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 134349312;
      v18 = v7;
      v19 = 2050;
      v20 = 0xBFF0000000000000;
      _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpected, negtive dT,%{public}.1lf", buf, 0x16u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v16 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual double CLParticleMM::CLPedestrianMapMatcherFilter::getProcessNoise(const CLMapCrumb &, const MMSnapData &)", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
    return 0.0;
  }
}

uint64_t sub_18F732DA0(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  int v7;
  __int128 *v8;
  _OWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  const void *v14;
  uint64_t v15;
  double v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  unsigned int v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];
  void *__p;
  void *v43;
  uint64_t v44;

  if (*(_BYTE *)(a3 + 746))
  {
    v35 = 0;
    v7 = 0;
    v31 = (uint64_t *)(a2 + 40);
    v8 = (__int128 *)(a3 + 136);
    v9 = (_OWORD *)(a3 + 176);
    v30 = a2 + 56;
    while (1)
    {
      v10 = *(std::__shared_weak_count **)(a3 + 128);
      v36 = *(_QWORD *)(a3 + 120);
      v37 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v13 = v8[1];
      v38 = *v8;
      v39 = v13;
      v40 = *((_QWORD *)v8 + 4);
      v41[0] = *v9;
      *(_OWORD *)((char *)v41 + 9) = *(_OWORD *)((char *)v9 + 9);
      v43 = 0;
      v44 = 0;
      v14 = *(const void **)(a3 + 208);
      v15 = *(_QWORD *)(a3 + 216);
      __p = 0;
      sub_18F692CBC(&__p, v14, v15, 0x8E38E38E38E38E39 * ((v15 - (uint64_t)v14) >> 3));
      if (v36)
      {
        BYTE4(v38) ^= 1u;
        v16 = fmod((float)(*((float *)&v38 + 2) + 180.0), 360.0);
        if (v16 < 0.0)
          v16 = v16 + 360.0;
        v17 = v16;
        *((float *)&v38 + 2) = v17;
        if (byte_1EE172810)
        {
          byte_1EE172810 = 0;
          v18 = *(float *)&dword_1EE172814;
        }
        else
        {
          do
          {
            v19 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
            v20 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
            v21 = (float)(v20 * v20) + (float)(v19 * v19);
          }
          while (v21 >= 1.0);
          v18 = 0.0;
          if (v21 != 0.0)
          {
            v22 = sqrtf((float)(logf((float)(v20 * v20) + (float)(v19 * v19)) * -2.0) / v21);
            *(float *)&dword_1EE172814 = v20 * v22;
            byte_1EE172810 = 1;
            v18 = v19 * v22;
          }
        }
        if ((sub_18F72ECB8(a1, (double *)&v36, *(double *)(a2 + 384), v18 * a4 + a5) & 1) != 0)
        {
          v23 = *(_QWORD *)(a2 + 48);
          if (v23 >= *(_QWORD *)(a2 + 56))
          {
            v24 = sub_18F6B3118(v31, (uint64_t)&v36);
          }
          else
          {
            sub_18F6B323C(v30, *(_QWORD *)(a2 + 48), (uint64_t)&v36);
            v24 = v23 + 112;
            *(_QWORD *)(a2 + 48) = v23 + 112;
          }
          v25 = 0;
          *(_QWORD *)(a2 + 48) = v24;
          ++v35;
        }
        else
        {
          v25 = 1;
        }
      }
      else
      {
        v25 = 4;
      }
      if (__p)
      {
        v43 = __p;
        operator delete(__p);
      }
      v26 = v37;
      if (v37)
      {
        v27 = (unint64_t *)&v37->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if ((v25 | 4) != 4)
        break;
      if (++v7 == 3)
        return v35;
    }
    return -1;
  }
  else
  {
    return 0;
  }
}

void sub_18F7330A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  *(_QWORD *)(v8 + 48) = v9;
  sub_18F692600((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F7330D4(_QWORD *a1, uint64_t a2)
{
  BOOL v2;
  uint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;

  if (*(_BYTE *)(a2 + 745))
    v2 = *(_QWORD *)a2 == 0;
  else
    v2 = 1;
  if (v2)
    return 0;
  v6 = a1 + 5;
  v7 = a1 + 7;
  v8 = a1[6];
  v9 = 4;
  do
  {
    if (v8 >= *v7)
    {
      v8 = sub_18F6B3118(v6, a2);
    }
    else
    {
      sub_18F6B323C((uint64_t)v7, v8, a2);
      v8 += 112;
      a1[6] = v8;
    }
    a1[6] = v8;
    --v9;
  }
  while (v9);
  return 4;
}

void sub_18F733178(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_18F733180(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4, __n128 **a5, _QWORD *a6, _QWORD *a7, double a8)
{
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  int v25;
  double v26;
  double v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  double v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  uint64_t *v37;
  __n128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __n128 *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  __n128 buf;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v15 = *(_QWORD *)(a1 + 208);
  v16 = *(std::__shared_weak_count **)(a1 + 216);
  v50 = v15;
  v51 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  if (v15)
  {
    *a6 = 0;
    *a7 = 0;
    *a3 = 0;
    v19 = *(unsigned __int8 *)(a2 + 20);
    v20 = *(double *)(a2 + 48);
    v21 = *(_QWORD *)a2;
    sub_18F7047B4(*(_QWORD *)a2);
    v22 = 1.0 - v20;
    if (!v19)
      v22 = v20;
    v23 = v22 * *(double *)(v21 + 40);
    v24 = 1;
    if (v23 <= a8)
    {
      v25 = 0;
      v26 = a8 - v23;
      if (*(_BYTE *)(a2 + 20))
        v27 = 1.0;
      else
        v27 = 0.0;
      while (1)
      {
        sub_18F64F950(a4);
        *a3 = 0;
        v29 = *(_QWORD **)(*(_QWORD *)a2 + 136);
        v28 = *(_QWORD **)(*(_QWORD *)a2 + 144);
        if (*(_BYTE *)(a2 + 20))
        {
          if (v28 == v29)
          {
            *a6 = 0;
            v30 = 0;
          }
          else
          {
            *a6 = *(v28 - 2);
            v30 = *(v28 - 1);
          }
          v31 = 1.0;
        }
        else if (v28 == v29)
        {
          *a6 = 0;
          v31 = 0.0;
          v30 = 0;
        }
        else
        {
          *a6 = *v29;
          v30 = v29[1];
          v31 = 0.0;
        }
        *a7 = v30;
        *(double *)(a2 + 48) = v31;
        v47 = (uint64_t)&v47;
        v48 = &v47;
        v49 = 0;
        v24 = (*(uint64_t (**)(double, double))(*(_QWORD *)v50 + 72))(v27, v26);
        if ((v24 & 1) == 0)
          break;
        if (v49 >= 2)
        {
          buf = 0uLL;
          v55 = 0;
          v37 = v48;
          if (v48 != &v47)
          {
            do
            {
              v53 = *((_BYTE *)v37 + 24);
              v54 = v37[6];
              sub_18F623A40(&buf, v37 + 4);
              v55 = 1;
              v38 = sub_18F64BD58((__n128 **)a4, &buf);
              ++*a3;
              v37 = (uint64_t *)v37[1];
            }
            while (v37 != &v47);
            v39 = (std::__shared_weak_count *)buf.n128_u64[1];
            if (buf.n128_u64[1])
            {
              v40 = (unint64_t *)(buf.n128_u64[1] + 8);
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v39->__on_zero_shared)(v39, v38);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
          }
          break;
        }
        if (v49 != 1)
          break;
        buf = 0uLL;
        v55 = 0;
        v53 = *((_BYTE *)v48 + 24);
        v54 = v48[6];
        sub_18F623A40(&buf, v48 + 4);
        v55 = 1;
        sub_18F64BD58(a5, &buf);
        sub_18F623A40((_QWORD *)a2, v48 + 4);
        v32 = v48;
        *(_BYTE *)(a2 + 20) = *((_BYTE *)v48 + 24);
        *(_QWORD *)(a2 + 48) = v32[6];
        v33 = (std::__shared_weak_count *)buf.n128_u64[1];
        if (buf.n128_u64[1])
        {
          v34 = (unint64_t *)(buf.n128_u64[1] + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        sub_18F677A18(&v47);
        if (++v25 == 30)
        {
          v24 = 1;
          goto LABEL_43;
        }
      }
      sub_18F677A18(&v47);
    }
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v36 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      buf.n128_u16[0] = 0;
      _os_log_impl(&dword_18F5B3000, v36, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,invalid geometry pointer, multiOutboundHelper", (uint8_t *)&buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      LOWORD(v47) = 0;
      v46 = (__n128 *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::multiOutboundHelper(CLMapGeometry::DistanceQueryResult &, int &, double, CLMapGeometry::IntersectionQueryResultList &, CLMapGeometry::IntersectionQueryResultList &, double &, double &) const", "CoreLocation: %s\n", (const char *)v46);
      if (v46 != &buf)
        free(v46);
    }
    v24 = 0;
  }
LABEL_43:
  v42 = v51;
  if (v51)
  {
    v43 = (unint64_t *)&v51->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  return v24;
}

void sub_18F733624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F733664(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v5;
  double v6;
  uint64_t v8;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  double v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  int v60;
  uint8_t buf[64];
  __int128 v62;
  char v63;
  void *__p;
  void *v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 9))
    return 0;
  v3 = *(_QWORD *)(a1 + 1880);
  if (v3 == *(_QWORD *)(a1 + 1888))
    return 0;
  v5 = *(double *)(a1 + 1872);
  v6 = vabdd_f64(*(double *)(a2 + 400), v5);
  if (v5 < 0.0 || v6 > 2.5)
    return 0;
  v8 = 0;
  v39 = *(_QWORD *)(a2 + 384);
  v42 = a2 + 56;
  v43 = (uint64_t *)(a2 + 40);
  v40 = *(_QWORD *)(a1 + 1888);
  while (2)
  {
    v10 = *(std::__shared_weak_count **)(v3 + 8);
    v44 = *(uint64_t **)v3;
    v45 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = *(_OWORD *)(v3 + 16);
    v14 = *(_OWORD *)(v3 + 32);
    v41 = v3;
    v48 = *(_QWORD *)(v3 + 48);
    v46 = v13;
    v47 = v14;
    v15 = 1;
    do
    {
      v16 = v15;
      memset(buf, 0, 20);
      *(_WORD *)&buf[20] = 1;
      *(_DWORD *)&buf[24] = 0;
      v65 = 0;
      v66 = 0;
      __p = 0;
      memset(&buf[32], 0, 32);
      v62 = 0u;
      v63 = 0;
      sub_18F623A40(buf, (uint64_t *)&v44);
      *(_OWORD *)&buf[16] = v46;
      *(_OWORD *)&buf[32] = v47;
      *(_QWORD *)&buf[48] = v48;
      if (byte_1EE172810)
      {
        byte_1EE172810 = 0;
        v17 = *(float *)&dword_1EE172814;
      }
      else
      {
        do
        {
          v18 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          v19 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          v20 = (float)(v19 * v19) + (float)(v18 * v18);
        }
        while (v20 >= 1.0);
        v17 = 0.0;
        if (v20 != 0.0)
        {
          v21 = sqrtf((float)(logf((float)(v19 * v19) + (float)(v18 * v18)) * -2.0) / v20);
          *(float *)&dword_1EE172814 = v19 * v21;
          byte_1EE172810 = 1;
          v17 = v18 * v21;
        }
      }
      v22 = sub_18F72ECB8(a1, (double *)buf, *(double *)(a2 + 384), v17);
      if ((v22 & 1) != 0)
      {
        v23 = *(_QWORD *)(a2 + 48);
        if (v23 >= *(_QWORD *)(a2 + 56))
        {
          v24 = sub_18F6B3118(v43, (uint64_t)buf);
        }
        else
        {
          sub_18F6B323C(v42, *(_QWORD *)(a2 + 48), (uint64_t)buf);
          v24 = v23 + 112;
          *(_QWORD *)(a2 + 48) = v23 + 112;
        }
        *(_QWORD *)(a2 + 48) = v24;
        v8 = (v8 + 1);
      }
      if (__p)
      {
        v65 = __p;
        operator delete(__p);
      }
      v25 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v26 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if ((v22 & 1) == 0)
      {
        v36 = v45;
        if (v45)
        {
          v37 = (unint64_t *)&v45->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        return 0xFFFFFFFFLL;
      }
      v15 = 0;
    }
    while ((v16 & 1) != 0);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v28 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v29 = *v44;
      *(_DWORD *)buf = 134350337;
      *(_QWORD *)&buf[4] = v39;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v47;
      *(_WORD *)&buf[22] = 2049;
      *(_QWORD *)&buf[24] = *((_QWORD *)&v47 + 1);
      *(_WORD *)&buf[32] = 2050;
      *(double *)&buf[34] = *((float *)&v46 + 2);
      *(_WORD *)&buf[42] = 2049;
      *(_QWORD *)&buf[44] = v29;
      *(_WORD *)&buf[52] = 1026;
      *(_DWORD *)&buf[54] = BYTE4(v46);
      _os_log_impl(&dword_18F5B3000, v28, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHint,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,rseg,%{private}lld,fwd,%{public}d", buf, 0x3Au);
    }
    v30 = v41;
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v34 = *v44;
      v49 = 134350337;
      v50 = v39;
      v51 = 2049;
      v52 = v47;
      v53 = 2049;
      v54 = *((_QWORD *)&v47 + 1);
      v55 = 2050;
      v56 = *((float *)&v46 + 2);
      v57 = 2049;
      v58 = v34;
      v59 = 1026;
      v60 = BYTE4(v46);
      v35 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "int CLParticleMM::CLPedestrianMapMatcherFilter::addRouteHintParticles(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v35);
      if (v35 != (char *)buf)
        free(v35);
      v30 = v41;
    }
    v31 = v45;
    if (v45)
    {
      v32 = (unint64_t *)&v45->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v3 = v30 + 56;
    if (v3 != v40)
      continue;
    break;
  }
  return v8;
}

void sub_18F733BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F733C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  double v11;
  double v12;
  double v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double *v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  double v25;
  double v26;
  double v27;
  double v28;
  BOOL v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  double v34;
  int v35;
  double v36;
  double v37;
  int v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  const void *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  NSObject *v53;
  char *v54;
  NSObject *v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  int v65;
  char v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  __int128 v89;
  const void *v90;
  uint64_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  unint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  int v102;
  int v103;
  int v104;
  int v105;
  _QWORD *v106;
  _QWORD *v107;
  NSObject *v108;
  int v109;
  double v110;
  NSObject *v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  NSObject *v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  int v127;
  char *v128;
  int v129;
  _QWORD *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t *v133;
  int v135;
  int v136;
  double v137;
  double v138;
  double v139;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  __n128 *v144;
  __n128 **v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE v150[48];
  _BYTE v151[10];
  __int16 v152;
  int v153;
  _BYTE buf[48];
  _QWORD v155[5];
  void *__p;
  void *v157;
  uint64_t v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  if (*(double *)(a4 + 264) <= 0.0)
    return 1;
  v4 = (double *)a4;
  v7 = *(_QWORD *)(a1 + 208);
  v8 = *(std::__shared_weak_count **)(a1 + 216);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (!v7)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v53 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v53, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,invalid geometry pointer, predict", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_218;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    *(_WORD *)v150 = 0;
    v54 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::predict(CLMapCrumb &, MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v54);
LABEL_81:
    if (v54 != buf)
      free(v54);
    goto LABEL_218;
  }
  v11 = *(double *)(a2 + 8);
  v12 = *(double *)(a2 + 24);
  v138 = v11;
  if (v12 < 0.0 || (v13 = *(double *)(a4 + 264), v13 < 0.0))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v14 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v15 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = 0xBFF0000000000000;
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpected, negtive dT,%{public}.1lf", buf, 0x16u);
    }
    v16 = sub_18F5C4AE0(115, 0);
    v139 = 0.0;
    if ((_DWORD)v16)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v123 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)v150 = 134349312;
      *(_QWORD *)&v150[4] = v123;
      *(_WORD *)&v150[12] = 2050;
      *(_QWORD *)&v150[14] = 0xBFF0000000000000;
      v124 = (char *)_os_log_send_and_compose_impl();
      v16 = sub_18F5F2740("Generic", 1, 0, 0, "double CLParticleMM::CLParticleMapMatcherFilterBase::getDistanceTravelled(const CLMapCrumb &, const MMSnapData &)", "CoreLocation: %s\n", v124);
      v4 = (double *)a4;
      if (v124 != buf)
        free(v124);
    }
    goto LABEL_13;
  }
  v56 = vabdd_f64(v12, v13);
  v57 = -1.0;
  v58 = -1.0;
  if (*(double *)(a2 + 184) > 0.0)
  {
    v59 = *(double *)(a2 + 96);
    if (v59 >= 0.0)
    {
      if (v56 >= 2.2 || *(double *)(a4 + 424) <= 0.0)
      {
        v58 = *(double *)(a2 + 96);
      }
      else
      {
        v60 = *(double *)(a4 + 336);
        v29 = v60 < 0.0;
        v61 = (v59 + v60) * 0.5;
        if (v29)
          v58 = *(double *)(a2 + 96);
        else
          v58 = v61;
      }
    }
  }
  if (v58 < 0.0)
    v110 = 0.0;
  else
    v110 = v56 * v58;
  if (v56 >= 2.2)
  {
    v139 = v110;
  }
  else
  {
    v139 = v110;
    if (*(double *)(a4 + 320) > 0.0)
    {
      v57 = sub_18F5BD064((double *)(a1 + 168), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a4 + 296), *(double *)(a4 + 304), *(double *)(a2 + 72));
      if (v57 > 300.0)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v111 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
        {
          v112 = *(_QWORD *)(a2 + 8);
          *(_DWORD *)buf = 134349568;
          *(_QWORD *)&buf[4] = v112;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v57;
          *(_WORD *)&buf[22] = 2050;
          *(double *)&buf[24] = v56;
          _os_log_impl(&dword_18F5B3000, v111, OS_LOG_TYPE_INFO, "#Warning,CLMMPED,%{public}.1lf,Position jump,%{public}.1lf,dT,%{public}.1lf", buf, 0x20u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_218;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v113 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)v150 = 134349568;
        *(_QWORD *)&v150[4] = v113;
        *(_WORD *)&v150[12] = 2050;
        *(double *)&v150[14] = v57;
        *(_WORD *)&v150[22] = 2050;
        *(double *)&v150[24] = v56;
        v54 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "double CLParticleMM::CLParticleMapMatcherFilterBase::getDistanceTravelled(const CLMapCrumb &, const MMSnapData &)", "CoreLocation: %s\n", v54);
        goto LABEL_81;
      }
      if (v58 <= 0.0 || v57 < 0.0 || *(_BYTE *)(a2 + 228))
      {
        if (*(_BYTE *)(a2 + 228))
          v114 = v110;
        else
          v114 = v57;
        if (v57 < 0.0)
          v114 = v110;
      }
      else
      {
        v114 = (v110 + v57) * 0.5;
      }
      v139 = v114;
    }
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v115 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v116 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 134349824;
    *(_QWORD *)&buf[4] = v116;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v139;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&buf[24] = v110;
    *(_WORD *)&buf[32] = 2050;
    *(double *)&buf[34] = v57;
    _os_log_impl(&dword_18F5B3000, v115, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,predictionAndUpdate, distance,%{public}.1lf,distBasedOnSpeed,%{public}.1lf,distBasedOnPos,%{public}.1lf", buf, 0x2Au);
  }
  v16 = sub_18F5C4AE0(115, 2);
  if ((_DWORD)v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v125 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)v150 = 134349824;
    *(_QWORD *)&v150[4] = v125;
    *(_WORD *)&v150[12] = 2050;
    *(double *)&v150[14] = v139;
    *(_WORD *)&v150[22] = 2050;
    *(double *)&v150[24] = v110;
    *(_WORD *)&v150[32] = 2050;
    *(double *)&v150[34] = v57;
    v126 = (char *)_os_log_send_and_compose_impl();
    v16 = sub_18F5F2740("Generic", 1, 0, 2, "double CLParticleMM::CLParticleMapMatcherFilterBase::getDistanceTravelled(const CLMapCrumb &, const MMSnapData &)", "CoreLocation: %s\n", v126);
    if (v126 != buf)
      free(v126);
    v4 = (double *)a4;
  }
  if (v139 < 0.0)
    goto LABEL_218;
LABEL_13:
  *(double *)(a3 + 856) = v139;
  if (*(_QWORD *)(a3 + 48) == *(_QWORD *)(a3 + 40))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v55 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v11;
      _os_log_impl(&dword_18F5B3000, v55, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,predict called with 0 particles", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_218;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    *(_DWORD *)v150 = 134349056;
    *(double *)&v150[4] = v11;
    v54 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::predict(CLMapCrumb &, MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v54);
    goto LABEL_81;
  }
  v131 = *(_QWORD *)(a3 + 48) - *(_QWORD *)(a3 + 40);
  v132 = v8;
  v137 = sub_18F732B10(v16, a2, v4);
  v18 = *(double **)(a3 + 40);
  v17 = *(double **)(a3 + 48);
  if (v18 != v17)
  {
    v19 = 0;
    do
    {
      if (byte_1EE172810)
      {
        byte_1EE172810 = 0;
        v20 = *(float *)&dword_1EE172814;
      }
      else
      {
        do
        {
          v21 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          v22 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          v23 = (float)(v22 * v22) + (float)(v21 * v21);
        }
        while (v23 >= 1.0);
        v20 = 0.0;
        if (v23 != 0.0)
        {
          v24 = sqrtf((float)(logf((float)(v22 * v22) + (float)(v21 * v21)) * -2.0) / v23);
          *(float *)&dword_1EE172814 = v22 * v24;
          byte_1EE172810 = 1;
          v20 = v21 * v24;
        }
      }
      v25 = v20;
      v11 = v138;
      v26 = v137 * v25;
      v27 = fabs(v25);
      if ((-252645135 * v19) <= 0xF0F0F0F)
        v26 = v27 * 34.0;
      v28 = v27 * 8.0;
      v29 = (-1171354717 * v19) <= 0x1745D174 && v137 < 8.0;
      if (!v29)
        v28 = v26;
      if ((sub_18F72ECB8(a1, v18, v138, v139 + v28) & 1) == 0)
        goto LABEL_83;
      ++v19;
      v18 += 14;
    }
    while (v18 != v17);
  }
  v30 = 0;
  v31 = (_QWORD *)a3;
  v133 = (uint64_t *)(a3 + 40);
  v32 = a4;
  v33 = *(unsigned __int8 *)(a4 + 504);
  if (*(_BYTE *)(a1 + 1064) && *(_BYTE *)(a4 + 504))
  {
    v34 = sub_18F5BD064((double *)(a1 + 168), *(double *)(a4 + 392), *(double *)(a4 + 400), *(double *)(a1 + 1120), *(double *)(a1 + 1128), *(double *)(a4 + 312));
    if (*(int *)(a1 + 1200) >= 1)
    {
      v35 = 0;
      v135 = 0;
      v36 = v139 + v34 + 0.0;
      if (v36 <= 0.0)
        v37 = 0.1;
      else
        v37 = v36;
LABEL_36:
      v129 = v35;
      v38 = 0;
      while (1)
      {
        v39 = *(_QWORD *)(a1 + 1096);
        *(_QWORD *)buf = *(_QWORD *)(a1 + 1088);
        *(_QWORD *)&buf[8] = v39;
        if (v39)
        {
          v40 = (unint64_t *)(v39 + 8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        v42 = *(_OWORD *)(a1 + 1120);
        *(_OWORD *)&buf[16] = *(_OWORD *)(a1 + 1104);
        *(_OWORD *)&buf[32] = v42;
        v155[0] = *(_QWORD *)(a1 + 1136);
        *(_OWORD *)&v155[1] = *(_OWORD *)(a1 + 1144);
        *(_OWORD *)((char *)&v155[2] + 1) = *(_OWORD *)(a1 + 1153);
        v157 = 0;
        v158 = 0;
        v43 = *(const void **)(a1 + 1176);
        v44 = *(_QWORD *)(a1 + 1184);
        __p = 0;
        sub_18F692CBC(&__p, v43, v44, 0x8E38E38E38E38E39 * ((v44 - (uint64_t)v43) >> 3));
        if (*(_QWORD *)buf)
        {
          if ((sub_18F72ECB8(a1, (double *)buf, v11, v37) & 1) != 0)
          {
            if (**(_QWORD **)(a1 + 1088) == **(_QWORD **)buf && *(unsigned __int8 *)(a1 + 1108) != buf[20])
            {
              v48 = 0;
            }
            else
            {
              v45 = *(_QWORD *)(a3 + 48);
              if (v45 >= *(_QWORD *)(a3 + 56))
              {
                v46 = sub_18F6B3118(v133, (uint64_t)buf);
                v47 = a3;
              }
              else
              {
                sub_18F6B323C(a3 + 56, *(_QWORD *)(a3 + 48), (uint64_t)buf);
                v46 = v45 + 112;
                v47 = a3;
                *(_QWORD *)(a3 + 48) = v45 + 112;
              }
              v48 = 0;
              *(_QWORD *)(v47 + 48) = v46;
              ++v135;
            }
          }
          else
          {
            v48 = 1;
          }
        }
        else
        {
          v48 = 7;
        }
        if (__p)
        {
          v157 = __p;
          operator delete(__p);
        }
        v49 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v50 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        if (v48 != 7 && v48)
          break;
        if (++v38 == 4)
        {
          v35 = v129 + 1;
          if (v129 + 1 < *(_DWORD *)(a1 + 1200))
            goto LABEL_36;
          v30 = v135;
          v8 = v132;
          v31 = (_QWORD *)a3;
          v32 = a4;
          if (v135 != -1)
            goto LABEL_95;
          goto LABEL_218;
        }
      }
LABEL_83:
      v52 = 0;
      goto LABEL_84;
    }
    v30 = 0;
LABEL_95:
    v33 = *(unsigned __int8 *)(v32 + 504);
  }
  v136 = v30;
  if (!v33)
  {
    v64 = 0;
    goto LABEL_174;
  }
  memset(v150, 0, 20);
  *(_WORD *)&v150[20] = 1;
  *(_DWORD *)&v150[24] = 0;
  *(_QWORD *)&v150[40] = 0;
  *(_QWORD *)v151 = 0;
  v62 = (_QWORD *)(v32 + 120);
  *(_QWORD *)&v150[32] = 0;
  sub_18F623A40(v150, (uint64_t *)(v32 + 120));
  v150[20] = *(_BYTE *)(v32 + 140);
  *(_QWORD *)v151 = *(_QWORD *)(v32 + 168);
  if (*(_QWORD *)v150)
  {
    v148 = 0;
    v149 = 0;
    v147 = 0;
    v144 = (__n128 *)&v144;
    v145 = &v144;
    v146 = 0;
    v141 = (uint64_t)&v141;
    v142 = &v141;
    v143 = 0;
    sub_18F733180(a1, (uint64_t)v150, &v147, &v141, &v144, &v149, &v148, 80.0);
    if ((uint64_t *)(a1 + 1808) != &v141)
      sub_18F64FCD8((uint64_t *)(a1 + 1808), (uint64_t)v142, (uint64_t)&v141);
    if ((__n128 **)(a1 + 1784) != &v144)
      sub_18F64FCD8((uint64_t *)(a1 + 1784), (uint64_t)v145, (uint64_t)&v144);
    v130 = (_QWORD *)(v32 + 120);
    v63 = (uint64_t)v145;
    if (v145 == &v144)
    {
      v64 = 0;
LABEL_124:
      v73 = (uint64_t)v142;
      if (v142 == &v141)
        goto LABEL_143;
LABEL_125:
      v74 = 0;
      while (1)
      {
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&buf[24] = 0;
        v157 = 0;
        v158 = 0;
        __p = 0;
        *(_OWORD *)&buf[32] = 0u;
        memset(v155, 0, 33);
        sub_18F623A40(buf, (uint64_t *)(v73 + 16));
        v155[0] = *(_QWORD *)(v73 + 40);
        buf[20] = *(_BYTE *)(v73 + 32);
        v75 = sub_18F72ECB8(a1, (double *)buf, v11, (double)((v64 + 1) % 6) * 3.5);
        if ((v75 & 1) != 0)
        {
          v76 = *(_QWORD *)(a3 + 48);
          if (v76 >= *(_QWORD *)(a3 + 56))
          {
            v77 = sub_18F6B3118(v133, (uint64_t)buf);
            v78 = a3;
          }
          else
          {
            sub_18F6B323C(a3 + 56, *(_QWORD *)(a3 + 48), (uint64_t)buf);
            v77 = v76 + 112;
            v78 = a3;
            *(_QWORD *)(a3 + 48) = v76 + 112;
          }
          *(_QWORD *)(v78 + 48) = v77;
          ++v64;
        }
        if (__p)
        {
          v157 = __p;
          operator delete(__p);
        }
        v79 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v80 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        if ((v75 & 1) == 0)
          break;
        if (++v74 == 6)
        {
          v73 = *(_QWORD *)(v73 + 8);
          if ((uint64_t *)v73 != &v141)
            goto LABEL_125;
          goto LABEL_143;
        }
      }
    }
    else
    {
      v64 = 0;
LABEL_104:
      v65 = 0;
      while (1)
      {
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&buf[24] = 0;
        v157 = 0;
        v158 = 0;
        __p = 0;
        *(_OWORD *)&buf[32] = 0u;
        memset(v155, 0, 33);
        sub_18F623A40(buf, (uint64_t *)(v63 + 16));
        v155[0] = *(_QWORD *)(v63 + 40);
        buf[20] = *(_BYTE *)(v63 + 32);
        v66 = sub_18F72ECB8(a1, (double *)buf, v11, (double)((v64 + 1) % 6) * 3.5);
        if ((v66 & 1) != 0)
        {
          v67 = *(_QWORD *)(a3 + 48);
          if (v67 >= *(_QWORD *)(a3 + 56))
          {
            v68 = sub_18F6B3118(v133, (uint64_t)buf);
            v69 = a3;
          }
          else
          {
            sub_18F6B323C(a3 + 56, *(_QWORD *)(a3 + 48), (uint64_t)buf);
            v68 = v67 + 112;
            v69 = a3;
            *(_QWORD *)(a3 + 48) = v67 + 112;
          }
          *(_QWORD *)(v69 + 48) = v68;
          ++v64;
        }
        if (__p)
        {
          v157 = __p;
          operator delete(__p);
        }
        v70 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v71 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        if ((v66 & 1) == 0)
          break;
        if (++v65 == 6)
        {
          v63 = *(_QWORD *)(v63 + 8);
          if ((__n128 **)v63 != &v144)
            goto LABEL_104;
          goto LABEL_124;
        }
      }
    }
    v64 = -1;
LABEL_143:
    sub_18F64F950(&v141);
    sub_18F64F950((uint64_t *)&v144);
    v8 = v132;
    v31 = (_QWORD *)a3;
    v32 = a4;
    v62 = v130;
    goto LABEL_144;
  }
  v64 = -1;
LABEL_144:
  v82 = *(std::__shared_weak_count **)&v150[8];
  if (*(_QWORD *)&v150[8])
  {
    v83 = (unint64_t *)(*(_QWORD *)&v150[8] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (v64 == -1)
    goto LABEL_218;
  if (*(_BYTE *)(v32 + 504))
  {
    if (*v62)
    {
      v85 = 0;
      while (1)
      {
        v86 = *(_QWORD *)(a4 + 128);
        *(_QWORD *)buf = *(_QWORD *)(a4 + 120);
        *(_QWORD *)&buf[8] = v86;
        if (v86)
        {
          v87 = (unint64_t *)(v86 + 8);
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
        v89 = *(_OWORD *)(v32 + 152);
        *(_OWORD *)&buf[16] = *(_OWORD *)(v32 + 136);
        *(_OWORD *)&buf[32] = v89;
        v155[0] = *(_QWORD *)(v32 + 168);
        *(_OWORD *)&v155[1] = *(_OWORD *)(v32 + 176);
        *(_OWORD *)((char *)&v155[2] + 1) = *(_OWORD *)(v32 + 185);
        v157 = 0;
        v158 = 0;
        v90 = *(const void **)(a4 + 208);
        v91 = *(_QWORD *)(a4 + 216);
        __p = 0;
        sub_18F692CBC(&__p, v90, v91, 0x8E38E38E38E38E39 * ((v91 - (uint64_t)v90) >> 3));
        if (byte_1EE172810)
        {
          byte_1EE172810 = 0;
          v92 = *(float *)&dword_1EE172814;
        }
        else
        {
          do
          {
            v93 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
            v94 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
            v95 = (float)(v94 * v94) + (float)(v93 * v93);
          }
          while (v95 >= 1.0);
          v92 = 0.0;
          if (v95 != 0.0)
          {
            v96 = sqrtf((float)(logf((float)(v94 * v94) + (float)(v93 * v93)) * -2.0) / v95);
            *(float *)&dword_1EE172814 = v94 * v96;
            byte_1EE172810 = 1;
            v92 = v93 * v96;
          }
        }
        v11 = v138;
        if ((sub_18F72ECB8(a1, (double *)buf, v138, v137 * v92 + 0.0) & 1) == 0)
          break;
        v97 = v31[6];
        if (v97 >= v31[7])
        {
          v98 = sub_18F6B3118(v133, (uint64_t)buf);
        }
        else
        {
          sub_18F6B323C((uint64_t)(v31 + 7), v31[6], (uint64_t)buf);
          v98 = v97 + 112;
          v31[6] = v97 + 112;
        }
        v31[6] = v98;
        if (__p)
        {
          v157 = __p;
          operator delete(__p);
        }
        v99 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v100 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        if (++v85 == 12)
        {
          v102 = 12;
          v8 = v132;
          v32 = a4;
          goto LABEL_175;
        }
      }
      if (__p)
      {
        v157 = __p;
        operator delete(__p);
      }
      v120 = *(std::__shared_weak_count **)&buf[8];
      v8 = v132;
      if (*(_QWORD *)&buf[8])
      {
        v121 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
    }
LABEL_218:
    v52 = 0;
    if (!v8)
      return v52;
    goto LABEL_219;
  }
LABEL_174:
  v102 = 0;
LABEL_175:
  v103 = sub_18F732DA0(a1, (uint64_t)v31, v32, v137, v139);
  if (v103 == -1)
    goto LABEL_218;
  v104 = sub_18F7330D4(v31, v32);
  v105 = sub_18F733664(a1, (uint64_t)v31);
  v8 = v132;
  if (v105 == -1)
    goto LABEL_218;
  v106 = *(_QWORD **)(a3 + 40);
  v107 = *(_QWORD **)(a3 + 48);
  while (v106 != v107)
  {
    v106[7] = 0;
    v106[8] = 0;
    v106[9] = 0;
    v106[12] = v106[11];
    v106 += 14;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v108 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v109 = -1227133513 * ((*(_QWORD *)(a3 + 48) - *(_QWORD *)(a3 + 40)) >> 4);
    *(_DWORD *)buf = 134351104;
    *(double *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v109;
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = 0x6DB6DB6DB6DB6DB7 * (v131 >> 4);
    *(_WORD *)&buf[28] = 1026;
    *(_DWORD *)&buf[30] = v136;
    *(_WORD *)&buf[34] = 1026;
    *(_DWORD *)&buf[36] = v64;
    *(_WORD *)&buf[40] = 1026;
    *(_DWORD *)&buf[42] = v102;
    *(_WORD *)&buf[46] = 1026;
    LODWORD(v155[0]) = v103;
    WORD2(v155[0]) = 1026;
    *(_DWORD *)((char *)v155 + 6) = v104;
    WORD1(v155[1]) = 1026;
    HIDWORD(v155[1]) = v105;
    _os_log_impl(&dword_18F5B3000, v108, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,prediction,%{public}d,NrParticles,%{public}lu,NrPriorIntersectionParticles,%{public}d,NrNewFwdIntersectionParticles,%{public}d,NrNewBiasedToPrior,%{public}d,NrNewBiasedToPriorOppositeDirection,%{public}d,NrNewAmbiguous,%{public}d,numNewRouteParticles,%{public}d", buf, 0x40u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v127 = -1227133513 * ((*(_QWORD *)(a3 + 48) - *(_QWORD *)(a3 + 40)) >> 4);
    *(_DWORD *)v150 = 134351104;
    *(double *)&v150[4] = v138;
    *(_WORD *)&v150[12] = 1026;
    *(_DWORD *)&v150[14] = v127;
    *(_WORD *)&v150[18] = 2050;
    *(_QWORD *)&v150[20] = 0x6DB6DB6DB6DB6DB7 * (v131 >> 4);
    *(_WORD *)&v150[28] = 1026;
    *(_DWORD *)&v150[30] = v136;
    *(_WORD *)&v150[34] = 1026;
    *(_DWORD *)&v150[36] = v64;
    *(_WORD *)&v150[40] = 1026;
    *(_DWORD *)&v150[42] = v102;
    *(_WORD *)&v150[46] = 1026;
    *(_DWORD *)v151 = v103;
    *(_WORD *)&v151[4] = 1026;
    *(_DWORD *)&v151[6] = v104;
    v152 = 1026;
    v153 = v105;
    v128 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::predict(CLMapCrumb &, MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v128);
    if (v128 != buf)
      free(v128);
  }
  v52 = 1;
LABEL_84:
  v8 = v132;
  if (!v132)
    return v52;
LABEL_219:
  v117 = (unint64_t *)&v8->__shared_owners_;
  do
    v118 = __ldaxr(v117);
  while (__stlxr(v118 - 1, v117));
  if (!v118)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v52;
}

void sub_18F735260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F735330(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __n128 *i;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _BOOL4 v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  int v41;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  NSObject *v47;
  char *v48;
  NSObject *v49;
  NSObject *v50;
  int v51;
  double v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  char v58;
  int v59;
  char v60;
  unint64_t v61;
  __n128 *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  NSObject *v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  NSObject *v83;
  uint64_t v84;
  double v85;
  __n128 v86;
  __n128 v87;
  uint64_t v88;
  double v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  NSObject *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  NSObject *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  __n128 **v103;
  uint64_t v104;
  unint64_t v105;
  double v106;
  uint64_t v109;
  NSObject *v110;
  uint64_t v111;
  uint64_t v112;
  _OWORD *v113;
  double *v114;
  double v115;
  double v116;
  double v117;
  double *v118;
  double *v119;
  BOOL v120;
  double v121;
  double v122;
  _BOOL8 v124;
  unint64_t v125;
  NSObject *v126;
  char *v127;
  double v128;
  unint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  NSObject *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  double v155;
  double v156;
  double v157;
  double v158;
  BOOL v159;
  double v161;
  NSObject *v162;
  double v163;
  uint64_t v164;
  int v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  _OWORD *v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  NSObject *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  double v189;
  uint64_t v190;
  int v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t *v196;
  unint64_t v197;
  NSObject *v198;
  uint64_t v199;
  int v200;
  char *v201;
  char *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  __int128 v206;
  uint64_t *v207;
  double *v208;
  double v209;
  _OWORD *v210;
  uint64_t v211;
  _QWORD *v212;
  double v213;
  int v214;
  int v215;
  __n128 *v216;
  __n128 **v217;
  unint64_t j;
  _QWORD v219[2];
  _QWORD v220[2];
  unsigned __int8 v221;
  _OWORD *v222;
  _OWORD *v223;
  unint64_t v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  int v227;
  uint64_t v228;
  __int16 v229;
  uint64_t v230;
  __int16 v231;
  uint64_t v232;
  __int16 v233;
  uint64_t v234;
  __int16 v235;
  uint64_t v236;
  __int16 v237;
  uint64_t v238;
  __int16 v239;
  uint64_t v240;
  _BYTE v241[64];
  _BYTE v242[32];
  __int128 v243;
  _OWORD v244[2];
  __int128 v245;
  __int128 v246;
  _OWORD v247[2];
  uint64_t v248;
  std::__shared_weak_count *v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  _BYTE v253[32];
  _BYTE v254[30];
  __int16 v255;
  uint64_t v256;
  __int16 v257;
  uint64_t v258;
  _BYTE buf[42];
  __int16 v260;
  double v261;
  __int16 v262;
  double v263;
  __int16 v264;
  double v265;
  __int16 v266;
  double v267;
  uint64_t v268;

  v5 = a1;
  v268 = *MEMORY[0x1E0C80C00];
  v6 = a1[239];
  v7 = a1[238];
  if (v6 != v7)
  {
    sub_18F6B361C((uint64_t)(a1 + 241), v7, v6, 0xF83E0F83E0F83E1 * ((v6 - v7) >> 3));
    v6 = v5[239];
    v8 = v5[238];
    if (v6 != v8)
    {
      do
      {
        v9 = v6 - 264;
        sub_18F5D6004(v6 - 56);
        v6 = v9;
      }
      while (v9 != v8);
      v6 = v8;
    }
  }
  v5[239] = v6;
  if (!*((_BYTE *)v5 + 9) || v5[235] == v5[236])
    return 0;
  v10 = *((double *)v5 + 234);
  v11 = vabdd_f64(*(double *)(a2 + 400), v10);
  v12 = v10 >= 0.0 && v11 <= 2.5;
  if (!v12 || vabdd_f64(v10, *((double *)v5 + 244)) < 60.0)
    return 0;
  v15 = *(_QWORD *)(a2 + 384);
  v16 = v5[26];
  v17 = (std::__shared_weak_count *)v5[27];
  v225 = v16;
  v226 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  if (!v16)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v29 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v15;
      _os_log_impl(&dword_18F5B3000, v29, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, generateRouteHint", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      *(_DWORD *)v241 = 134349056;
      *(_QWORD *)&v241[4] = v15;
      v201 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v201);
      if (v201 != buf)
        free(v201);
    }
    v13 = 0;
    goto LABEL_321;
  }
  v222 = 0;
  v223 = 0;
  v224 = 0;
  v212 = v5;
  if (!*(_BYTE *)(a3 + 504))
    goto LABEL_202;
  sub_18F69B170(a3 + 120, (uint64_t)v220);
  for (i = (__n128 *)v5[235]; ; i = (__n128 *)((char *)i + 56))
  {
    if (i == (__n128 *)v5[236])
      goto LABEL_202;
    v21 = (std::__shared_weak_count *)i->n128_u64[1];
    v219[0] = i->n128_u64[0];
    v219[1] = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    sub_18F68FFC8((uint64_t)buf, (uint64_t)v219, i[1].n128_i8[4]);
    v26 = v220[0] != *(_QWORD *)buf || v220[1] != *(_QWORD *)&buf[8] || v221 != (unint64_t)buf[16];
    if (v21)
    {
      v27 = (unint64_t *)&v21->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (!v26)
      break;
  }
  v30 = *(double *)(a2 + 400);
  v31 = -1.0;
  if (v30 >= 0.0)
  {
    v32 = *(double *)(a3 + 264);
    v33 = vabdd_f64(v30, v32);
    if (v32 >= 0.0)
      v31 = v33;
    else
      v31 = -1.0;
  }
  v34 = fmax(*(double *)(a2 + 856), 0.0) + (float)((float)random() * 4.6566e-10) * 0.25;
  if (v34 <= v31 * 6.0)
    v35 = v34;
  else
    v35 = v31 * 6.0;
  sub_18F692488((uint64_t)v253, a3 + 120);
  v216 = (__n128 *)&v216;
  v217 = &v216;
  for (j = 0; i != (__n128 *)v5[236]; i = (__n128 *)((char *)i + 56))
    sub_18F64A3C4(&v216, i);
  v215 = 0;
  if (((*(uint64_t (**)(uint64_t, _BYTE *, __n128 **, int *, double, double))(*(_QWORD *)v225 + 56))(v225, v253, &v216, &v215, *(double *)&v254[16], v35) & 1) == 0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v47 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v15;
      _os_log_impl(&dword_18F5B3000, v47, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,failed as not enough route roads are available", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_96;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    *(_DWORD *)v241 = 134349056;
    *(_QWORD *)&v241[4] = v15;
    v48 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v48);
    goto LABEL_345;
  }
  if (j <= v215)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v49 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v215;
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = j;
      _os_log_impl(&dword_18F5B3000, v49, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,route index,%{public}d,is more than number of route roads,%{public}ld", buf, 0x1Cu);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_96;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    *(_DWORD *)v241 = 134349568;
    *(_QWORD *)&v241[4] = v15;
    *(_WORD *)&v241[12] = 1026;
    *(_DWORD *)&v241[14] = v215;
    *(_WORD *)&v241[18] = 2050;
    *(_QWORD *)&v241[20] = j;
    v48 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v48);
    goto LABEL_345;
  }
  v36 = *(float *)&v253[24];
  v37 = 5.0;
  if (*(double *)&v254[16] <= 0.97 && *(double *)&v254[16] >= 0.03)
  {
    if (*(double *)(a2 + 568) <= 0.0 || (v38 = *(double *)(a2 + 480), v38 < 0.0))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v50 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = 0x403E000000000000;
        _os_log_impl(&dword_18F5B3000, v50, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,course deweighted,unc,%{public}.2lf", buf, 0x16u);
      }
      v37 = 30.0;
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        *(_DWORD *)v241 = 134349312;
        *(_QWORD *)&v241[4] = v15;
        *(_WORD *)&v241[12] = 2050;
        *(_QWORD *)&v241[14] = 0x403E000000000000;
        v205 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v205);
        if (v205 != buf)
          free(v205);
      }
    }
    else
    {
      v39 = fmod(v38 - v36, 360.0);
      if (v39 < 0.0)
        v39 = v39 + 360.0;
      if (v39 > 180.0)
        v39 = v39 + -360.0;
      v40 = fabs(v39);
      v41 = *((_DWORD *)v5 + 518);
      if (v40 >= 135.0)
      {
        *((_DWORD *)v5 + 518) = v41 + 1;
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v94 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v95 = *(_QWORD *)(a2 + 480);
          v96 = *((_DWORD *)v5 + 518);
          *(_DWORD *)buf = 134349824;
          *(_QWORD *)&buf[4] = v15;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v36;
          *(_WORD *)&buf[22] = 2050;
          *(_QWORD *)&buf[24] = v95;
          *(_WORD *)&buf[32] = 1026;
          *(_DWORD *)&buf[34] = v96;
          _os_log_impl(&dword_18F5B3000, v94, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", buf, 0x26u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_96;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 == -1)
          goto LABEL_174;
        goto LABEL_357;
      }
      if (v40 > 60.0 && v41 >= 1)
      {
        *((_DWORD *)v5 + 518) = v41 + 1;
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v198 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v199 = *(_QWORD *)(a2 + 480);
          v200 = *((_DWORD *)v5 + 518);
          *(_DWORD *)buf = 134349824;
          *(_QWORD *)&buf[4] = v15;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v36;
          *(_WORD *)&buf[22] = 2050;
          *(_QWORD *)&buf[24] = v199;
          *(_WORD *)&buf[32] = 1026;
          *(_DWORD *)&buf[34] = v200;
          _os_log_impl(&dword_18F5B3000, v198, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is different than crumb course,%{public}.1lf, and rejections are high,rejection,%{public}d", buf, 0x26u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_96;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 == -1)
          goto LABEL_174;
LABEL_357:
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
LABEL_174:
        v97 = *(_QWORD *)(a2 + 480);
        v98 = *((_DWORD *)v5 + 518);
        *(_DWORD *)v241 = 134349824;
        *(_QWORD *)&v241[4] = v15;
        *(_WORD *)&v241[12] = 2050;
        *(double *)&v241[14] = v36;
        *(_WORD *)&v241[22] = 2050;
        *(_QWORD *)&v241[24] = v97;
        *(_WORD *)&v241[32] = 1026;
        *(_DWORD *)&v241[34] = v98;
        v48 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v48);
LABEL_345:
        if (v48 != buf)
          free(v48);
LABEL_96:
        sub_18F64F950((uint64_t *)&v216);
        sub_18F692600((uint64_t)v253);
        goto LABEL_307;
      }
      if (v40 > 80.0)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v43 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v44 = *(_QWORD *)(a2 + 480);
          *(_DWORD *)buf = 134349568;
          *(_QWORD *)&buf[4] = v15;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v36;
          *(_WORD *)&buf[22] = 2050;
          *(_QWORD *)&buf[24] = v44;
          _os_log_impl(&dword_18F5B3000, v43, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,skipping,moveOnRouteRoads meas,routeCourse,%{public}.1lf,is somewhat different than crumb course,%{public}.1lf", buf, 0x20u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v45 = *(_QWORD *)(a2 + 480);
          *(_DWORD *)v241 = 134349568;
          *(_QWORD *)&v241[4] = v15;
          *(_WORD *)&v241[12] = 2050;
          *(double *)&v241[14] = v36;
          *(_WORD *)&v241[22] = 2050;
          *(_QWORD *)&v241[24] = v45;
          v46 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v46);
          if (v46 != buf)
            free(v46);
        }
        goto LABEL_201;
      }
    }
    v51 = v253[20];
    v52 = *(double *)&v254[16];
    v53 = *(_QWORD *)v253;
    sub_18F7047B4(*(uint64_t *)v253);
    v54 = 1.0 - v52;
    if (!v51)
      v54 = v52;
    if (v54 * *(double *)(v53 + 40) >= 15.0)
      goto LABEL_186;
  }
  if (*(double *)(a2 + 568) <= 0.0)
    goto LABEL_186;
  v55 = *(double *)(a2 + 480);
  if (v55 < 0.0)
    goto LABEL_186;
  v213 = v37;
  v56 = fmod(v55 - v36, 360.0);
  if (v56 < 0.0)
    v56 = v56 + 360.0;
  v57 = -360.0;
  if (v56 > 180.0)
    v56 = v56 + -360.0;
  v209 = fabs(v56);
  if (v209 <= 50.0)
  {
LABEL_185:
    v37 = v213;
    goto LABEL_186;
  }
  v58 = 0;
  v59 = 1;
  while (1)
  {
    v60 = v58;
    v61 = v215 + (uint64_t)v59;
    if (j <= v61)
      goto LABEL_158;
    v62 = (__n128 *)v217;
    if ((v61 & 0x80000000) != 0)
    {
      v64 = v215 + (uint64_t)v59;
      do
      {
        v62 = (__n128 *)v62->n128_u64[0];
        _CF = __CFADD__(v64++, 1);
      }
      while (!_CF);
    }
    else if ((_DWORD)v61)
    {
      v63 = v215 + (unint64_t)v59 + 1;
      do
      {
        v62 = (__n128 *)v62->n128_u64[1];
        --v63;
      }
      while (v63 > 1);
    }
    if (v62 == (__n128 *)&v216)
      break;
    v65 = (uint64_t *)&v62[1];
    v66 = v62[1].n128_i64[0];
    if (!v66)
      break;
    v67 = v62[2].n128_f32[2];
    v68 = fmod(v67 - v36, 360.0);
    if (v68 < 0.0)
      v68 = v68 + 360.0;
    if (v68 <= 180.0)
      v69 = v68;
    else
      v69 = v68 + v57;
    if (v69 >= 10.0)
      goto LABEL_138;
    sub_18F7047B4(v66);
    if (*(double *)(v66 + 40) >= 7.0)
    {
      v67 = v62[2].n128_f32[2];
LABEL_138:
      v73 = v36;
      v74 = fmod(v36 + v69 * 0.5, 360.0);
      if (v74 >= 0.0)
        v75 = v74;
      else
        v75 = v74 + 360.0;
      v76 = *(double *)(a2 + 480);
      v77 = fmod(v76 - v67, 360.0);
      if (v77 < 0.0)
        v77 = v77 + 360.0;
      if (v77 > 180.0)
        v77 = v77 + v57;
      v78 = v57;
      v79 = fabs(v77);
      v80 = fmod(v76 - v75, 360.0);
      if (v80 < 0.0)
        v80 = v80 + 360.0;
      v81 = v78;
      if (v80 > 180.0)
        v80 = v80 + v78;
      v82 = fabs(v80);
      if (v79 < 25.0 || v82 < 15.0)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v83 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v84 = *(_QWORD *)(a2 + 480);
          v85 = v62[2].n128_f32[2];
          *(_DWORD *)buf = 134350848;
          *(_QWORD *)&buf[4] = v15;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v84;
          *(_WORD *)&buf[22] = 2050;
          *(double *)&buf[24] = v85;
          *(_WORD *)&buf[32] = 2050;
          *(double *)&buf[34] = v73;
          v260 = 2050;
          v261 = v79;
          v262 = 2050;
          v263 = v75;
          v264 = 2050;
          v265 = v82;
          v266 = 2050;
          v267 = v209;
          _os_log_impl(&dword_18F5B3000, v83, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,skipping,moveOnRouteRoads meas,crumb close to intersection and gpsCourse,%{public}.1lf,is matching with next road on route,%{public}.1lf,course,%{public}.1lf,nextCourseDiff,%{public}.1lf,approxCourseOfTurningRoad,%{public}.1lf,turningCourseDiff,%{public}.1lf,courseDiff,%{public}.1lf", buf, 0x52u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v88 = *(_QWORD *)(a2 + 480);
          v89 = v62[2].n128_f32[2];
          *(_DWORD *)v241 = 134350848;
          *(_QWORD *)&v241[4] = v15;
          *(_WORD *)&v241[12] = 2050;
          *(_QWORD *)&v241[14] = v88;
          *(_WORD *)&v241[22] = 2050;
          *(double *)&v241[24] = v89;
          *(_WORD *)&v241[32] = 2050;
          *(double *)&v241[34] = v73;
          *(_WORD *)&v241[42] = 2050;
          *(double *)&v241[44] = v79;
          *(_WORD *)&v241[52] = 2050;
          *(double *)&v241[54] = v75;
          *(_WORD *)&v241[62] = 2050;
          *(double *)v242 = v82;
          *(_WORD *)&v242[8] = 2050;
          *(double *)&v242[10] = v209;
          v90 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v90);
          if (v90 != buf)
            free(v90);
        }
        sub_18F623A40(v253, (uint64_t *)&v62[1]);
        v86 = v62[2];
        v87 = v62[3];
        *(_QWORD *)&v254[16] = v62[4].n128_u64[0];
        *(__n128 *)&v253[16] = v86;
        *(__n128 *)v254 = v87;
        v86.n128_f64[0] = v62[2].n128_f32[2];
        v215 = v61;
        v57 = v81;
        v36 = v86.n128_f64[0];
      }
      else
      {
        v57 = v81;
        v36 = v73;
      }
      goto LABEL_158;
    }
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v70 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v71 = *v65;
      sub_18F7047B4(*v65);
      v72 = *(_QWORD *)(v71 + 40);
      *(_DWORD *)buf = 134349824;
      *(_QWORD *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v61;
      *(_WORD *)&buf[18] = 2050;
      *(double *)&buf[20] = v69;
      *(_WORD *)&buf[28] = 2050;
      *(_QWORD *)&buf[30] = v72;
      _os_log_impl(&dword_18F5B3000, v70, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,moving on to next route road,nextRouteRoadIndex,%{public}d,angleBetweenTwoRoads,%{public}.2lf,length,%{public}.2lf", buf, 0x26u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v91 = *v65;
      sub_18F7047B4(*v65);
      v92 = *(_QWORD *)(v91 + 40);
      *(_DWORD *)v241 = 134349824;
      *(_QWORD *)&v241[4] = v15;
      *(_WORD *)&v241[12] = 1026;
      *(_DWORD *)&v241[14] = v61;
      *(_WORD *)&v241[18] = 2050;
      *(double *)&v241[20] = v69;
      *(_WORD *)&v241[28] = 2050;
      *(_QWORD *)&v241[30] = v92;
      v93 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v93);
      if (v93 != buf)
        free(v93);
    }
LABEL_158:
    v59 = 2;
    v58 = 1;
    if ((v60 & 1) != 0)
    {
      v5 = v212;
      goto LABEL_185;
    }
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v5 = v212;
  v37 = v213;
  v99 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v15;
    _os_log_impl(&dword_18F5B3000, v99, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpected,routeHints,moving on to next route road,nullptr", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    *(_DWORD *)v241 = 134349056;
    *(_QWORD *)&v241[4] = v15;
    v100 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v100);
    if (v100 != buf)
      free(v100);
    v5 = v212;
    goto LABEL_185;
  }
LABEL_186:
  v101 = *(_QWORD *)v254;
  v102 = *(_QWORD *)&v254[8];
  v103 = v217;
  v104 = v215;
  if (v215 < 0)
  {
    do
    {
      v103 = (__n128 **)*v103;
      _CF = __CFADD__(v104++, 1);
    }
    while (!_CF);
  }
  else if (v215)
  {
    v105 = v215 + 1;
    do
    {
      v103 = (__n128 **)v103[1];
      --v105;
    }
    while (v105 > 1);
  }
  v106 = sub_18F5BD064((double *)v5 + 21, *(double *)v254, *(double *)&v254[8], *((double *)v103 + 6), *((double *)v103 + 7), 0.0);
  memset(v241, 0, 24);
  *(_OWORD *)&v241[24] = xmmword_18F772330;
  v241[40] = 0;
  *(_OWORD *)&v241[48] = 0u;
  *(_OWORD *)v242 = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  v246 = _Q1;
  *(_QWORD *)&v247[0] = 0xBFF0000000000000;
  v248 = 0;
  v249 = 0;
  LODWORD(v250) = 0;
  WORD2(v250) = 1;
  DWORD2(v250) = 0;
  v252 = 0;
  v251 = 0uLL;
  *(_QWORD *)&v242[16] = v101;
  *(_QWORD *)&v242[24] = v102;
  *(_QWORD *)&v243 = *(_QWORD *)(a2 + 448);
  *((double *)&v243 + 1) = v36;
  if (v106 < 8.0)
    v106 = 8.0;
  *(double *)v244 = v106;
  *((double *)v244 + 1) = v37;
  *(_QWORD *)&v244[1] = 0x3FF0000000000000;
  v109 = *(_QWORD *)(a2 + 560);
  *((_QWORD *)&v244[1] + 1) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)&v245 = v109;
  BYTE8(v245) = *(_BYTE *)(a2 + 604);
  *(int8x16_t *)((char *)v247 + 8) = vextq_s8(*(int8x16_t *)(a2 + 392), *(int8x16_t *)(a2 + 392), 8uLL);
  *((_QWORD *)&v247[1] + 1) = *(_QWORD *)(a2 + 384);
  sub_18F6B2010((uint64_t)v241, 0);
  sub_18F623A40(&v248, (uint64_t *)v253);
  v250 = *(_OWORD *)&v253[16];
  v251 = *(_OWORD *)v254;
  v252 = *(_QWORD *)&v254[16];
  sub_18F6B211C((uint64_t *)&v222, (uint64_t)v241);
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v110 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v111 = 0xF83E0F83E0F83E1 * ((uint64_t)(v5[239] - v5[238]) >> 3);
    *(_DWORD *)buf = 134350593;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = *(_QWORD *)&v242[16];
    *(_WORD *)&buf[22] = 2049;
    *(_QWORD *)&buf[24] = *(_QWORD *)&v242[24];
    *(_WORD *)&buf[32] = 2050;
    *(_QWORD *)&buf[34] = *((_QWORD *)&v243 + 1);
    v260 = 2050;
    v261 = *(double *)v244;
    v262 = 2050;
    v263 = *((double *)v244 + 1);
    v264 = 2050;
    v265 = *(double *)&v111;
    _os_log_impl(&dword_18F5B3000, v110, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,meas,moveOnRouteRoads,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu", buf, 0x48u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v203 = 0xF83E0F83E0F83E1 * ((uint64_t)(v212[239] - v212[238]) >> 3);
    v227 = 134350593;
    v228 = v15;
    v229 = 2049;
    v230 = *(_QWORD *)&v242[16];
    v231 = 2049;
    v232 = *(_QWORD *)&v242[24];
    v233 = 2050;
    v234 = *((_QWORD *)&v243 + 1);
    v235 = 2050;
    v236 = *(_QWORD *)&v244[0];
    v237 = 2050;
    v238 = *((_QWORD *)&v244[0] + 1);
    v239 = 2050;
    v240 = v203;
    v204 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v204);
    if (v204 != buf)
      free(v204);
    v5 = v212;
  }
  sub_18F5D6004((uint64_t)&v248);
LABEL_201:
  sub_18F64F950((uint64_t *)&v216);
  sub_18F692600((uint64_t)v253);
LABEL_202:
  v112 = (uint64_t)v222;
  v113 = v223;
  if (v223 != v222)
  {
LABEL_203:
    if (v113 != (_OWORD *)v112)
    {
      v207 = v5 + 238;
      v114 = (double *)(v5 + 21);
      *((_DWORD *)v5 + 518) = 0;
      v115 = -1.0;
      v116 = 0.0;
      v117 = -1.0;
      v210 = v113;
      do
      {
        v118 = (double *)v5[241];
        v119 = (double *)v5[242];
        if (v118 == v119)
          goto LABEL_229;
        v120 = 1;
        do
        {
          v121 = vabdd_f64(v118[23], *(double *)(v112 + 184));
          if (v115 < 0.0)
            v115 = v121;
          v122 = sub_18F5BD064(v114, *(double *)(v112 + 80), *(double *)(v112 + 88), v118[10], v118[11], 0.0);
          if (v122 < v117 || v117 < 0.0)
            v117 = v122;
          if (v122 < 0.001)
          {
            v124 = *(double *)(v112 + 256) >= 0.2;
            *(_QWORD *)v253 = v253;
            *(_QWORD *)&v253[8] = v253;
            *(_QWORD *)&v253[16] = 0;
            if ((*(unsigned int (**)(uint64_t, _BYTE *, uint64_t, _BOOL8, _QWORD))(*(_QWORD *)v225 + 72))(v225, v253, v112 + 208, v124, 0))
            {
              v125 = *(_QWORD *)&v253[16];
              v120 = *(_QWORD *)&v253[16] > 1uLL;
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v126 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134349568;
                *(_QWORD *)&buf[4] = v15;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v125 > 1;
                *(_WORD *)&buf[18] = 2050;
                *(_QWORD *)&buf[20] = *(_QWORD *)&v253[16];
                _os_log_impl(&dword_18F5B3000, v126, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,duplicate measurement check,measurementGood,%{public}d,vector,%{public}lu", buf, 0x1Cu);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                *(_DWORD *)v241 = 134349568;
                *(_QWORD *)&v241[4] = v15;
                *(_WORD *)&v241[12] = 1026;
                *(_DWORD *)&v241[14] = v125 > 1;
                *(_WORD *)&v241[18] = 2050;
                *(_QWORD *)&v241[20] = *(_QWORD *)&v253[16];
                v127 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v127);
                if (v127 != buf)
                  free(v127);
              }
            }
            sub_18F677A18((uint64_t *)v253);
          }
          v118 += 33;
        }
        while (v118 != v119);
        v113 = v210;
        if (v120)
        {
LABEL_229:
          v128 = *(double *)(v112 + 128);
          v5 = v212;
          v129 = v212[239];
          if (v129 >= v212[240])
          {
            v144 = sub_18F6B3A10(v207, v112);
          }
          else
          {
            *(_OWORD *)v129 = *(_OWORD *)v112;
            v130 = *(_OWORD *)(v112 + 16);
            v131 = *(_OWORD *)(v112 + 32);
            v132 = *(_OWORD *)(v112 + 64);
            *(_OWORD *)(v129 + 48) = *(_OWORD *)(v112 + 48);
            *(_OWORD *)(v129 + 64) = v132;
            *(_OWORD *)(v129 + 16) = v130;
            *(_OWORD *)(v129 + 32) = v131;
            v133 = *(_OWORD *)(v112 + 80);
            v134 = *(_OWORD *)(v112 + 96);
            v135 = *(_OWORD *)(v112 + 128);
            *(_OWORD *)(v129 + 112) = *(_OWORD *)(v112 + 112);
            *(_OWORD *)(v129 + 128) = v135;
            *(_OWORD *)(v129 + 80) = v133;
            *(_OWORD *)(v129 + 96) = v134;
            v136 = *(_OWORD *)(v112 + 144);
            v137 = *(_OWORD *)(v112 + 160);
            v138 = *(_OWORD *)(v112 + 192);
            *(_OWORD *)(v129 + 176) = *(_OWORD *)(v112 + 176);
            *(_OWORD *)(v129 + 192) = v138;
            *(_OWORD *)(v129 + 144) = v136;
            *(_OWORD *)(v129 + 160) = v137;
            *(_QWORD *)(v129 + 208) = *(_QWORD *)(v112 + 208);
            v139 = *(_QWORD *)(v112 + 216);
            *(_QWORD *)(v129 + 216) = v139;
            if (v139)
            {
              v140 = (unint64_t *)(v139 + 8);
              do
                v141 = __ldxr(v140);
              while (__stxr(v141 + 1, v140));
            }
            v142 = *(_OWORD *)(v112 + 224);
            v143 = *(_OWORD *)(v112 + 240);
            *(_QWORD *)(v129 + 256) = *(_QWORD *)(v112 + 256);
            *(_OWORD *)(v129 + 224) = v142;
            *(_OWORD *)(v129 + 240) = v143;
            v144 = v129 + 264;
          }
          v116 = v116 + v128;
          v212[239] = v144;
        }
        else
        {
          v5 = v212;
        }
        v112 += 264;
      }
      while ((_OWORD *)v112 != v113);
      if (v117 < 0.0 || v115 <= 0.0 || v115 >= 5.0 || v117 <= v115 * 6.0)
      {
        if (v116 > 0.0)
        {
          v193 = v5[238];
          v194 = v5[239];
          while (v193 != v194)
          {
            *(double *)(v193 + 128) = *(double *)(v193 + 128) / v116;
            v193 += 264;
          }
        }
        v13 = 1;
      }
      else
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v145 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)&buf[4] = v15;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v117;
          _os_log_impl(&dword_18F5B3000, v145, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,jump in route hint measurement,%{public}.3lf,rejecting", buf, 0x16u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          *(_DWORD *)v241 = 134349312;
          *(_QWORD *)&v241[4] = v15;
          *(_WORD *)&v241[12] = 2050;
          *(double *)&v241[14] = v117;
          v202 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v202);
          if (v202 != buf)
            free(v202);
          v5 = v212;
        }
        v146 = v5[239];
        v147 = v5[238];
        if (v146 != v147)
        {
          do
          {
            v148 = v146 - 264;
            sub_18F5D6004(v146 - 56);
            v146 = v148;
          }
          while (v148 != v147);
        }
        v13 = 0;
        v5[239] = v147;
      }
      goto LABEL_320;
    }
LABEL_307:
    v13 = 0;
    goto LABEL_320;
  }
  v149 = v5[235];
  v211 = v5[236];
  if (v149 == v211)
    goto LABEL_307;
  v214 = 0;
  v208 = (double *)(v5 + 21);
  __asm { FMOV            V0.2D, #-1.0 }
  v206 = _Q0;
  do
  {
    v151 = sub_18F5BD064(v208, *(double *)(v149 + 32), *(double *)(v149 + 40), *(double *)(a2 + 408), *(double *)(a2 + 416), 0.0);
    memset(v241, 0, 24);
    *(_OWORD *)&v241[24] = xmmword_18F772330;
    v241[40] = 0;
    *(_OWORD *)&v241[48] = 0u;
    *(_OWORD *)v242 = 0u;
    v246 = v206;
    *(_QWORD *)&v247[0] = 0xBFF0000000000000;
    LODWORD(v250) = 0;
    v248 = 0;
    v249 = 0;
    WORD2(v250) = 1;
    DWORD2(v250) = 0;
    v252 = 0;
    v251 = 0uLL;
    *(_OWORD *)&v242[16] = *(_OWORD *)(v149 + 32);
    *(_QWORD *)&v243 = *(_QWORD *)(a2 + 448);
    if (v151 < 8.0)
      v151 = 8.0;
    *((double *)&v243 + 1) = *(float *)(v149 + 24);
    *(double *)v244 = v151;
    *(_OWORD *)((char *)v244 + 8) = xmmword_18F775250;
    v152 = *(_QWORD *)(a2 + 560);
    *((_QWORD *)&v244[1] + 1) = *(_QWORD *)(a2 + 472);
    *(_QWORD *)&v245 = v152;
    BYTE8(v245) = *(_BYTE *)(a2 + 604);
    *(int8x16_t *)((char *)v247 + 8) = vextq_s8(*(int8x16_t *)(a2 + 392), *(int8x16_t *)(a2 + 392), 8uLL);
    *((_QWORD *)&v247[1] + 1) = *(_QWORD *)(a2 + 384);
    sub_18F6B2010((uint64_t)v241, 0);
    *(double *)&v244[1] = 1.0 / *((double *)v244 + 1);
    sub_18F623A40(&v248, (uint64_t *)v149);
    v153 = *(_QWORD *)(v149 + 48);
    v154 = *(_OWORD *)(v149 + 32);
    v250 = *(_OWORD *)(v149 + 16);
    v251 = v154;
    v252 = v153;
    if (*(double *)(a2 + 568) <= 0.0 || (v155 = *(double *)(a2 + 480), v155 < 0.0))
    {
      if (!*(_BYTE *)(a3 + 746))
        goto LABEL_274;
      v155 = *(double *)(a3 + 408);
      if (v155 < 0.0)
        goto LABEL_274;
    }
    v156 = fmod(v155 - *((double *)&v243 + 1), 360.0);
    if (v156 < 0.0)
      v156 = v156 + 360.0;
    v157 = v156 + -360.0;
    if (v156 <= 180.0)
      v157 = v156;
    v158 = fabs(v157);
    if (v158 < 135.0
      && (v158 > 60.0 ? (v159 = *((_DWORD *)v5 + 518) <= 0) : (v159 = 1),
          v159
       && (v158 > 80.0
         ? (_CF = (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5[236] - v5[235]) >> 3)) >= 2)
         : (_CF = 0),
           !_CF)))
    {
      if (v157 == 0.0)
        v161 = *(double *)&v244[1];
      else
        v161 = 1.0 / v158;
      *(double *)&v244[1] = v161;
      sub_18F6B2010((uint64_t)v241, 0);
      v169 = v223;
      if ((unint64_t)v223 >= v224)
      {
        v184 = sub_18F6B3A10((uint64_t *)&v222, (uint64_t)v241);
      }
      else
      {
        *v223 = *(_OWORD *)v241;
        v170 = *(_OWORD *)&v241[16];
        v171 = *(_OWORD *)&v241[32];
        v172 = *(_OWORD *)v242;
        v169[3] = *(_OWORD *)&v241[48];
        v169[4] = v172;
        v169[1] = v170;
        v169[2] = v171;
        v173 = *(_OWORD *)&v242[16];
        v174 = v243;
        v175 = v244[1];
        v169[7] = v244[0];
        v169[8] = v175;
        v169[5] = v173;
        v169[6] = v174;
        v176 = v245;
        v177 = v246;
        v178 = v247[1];
        v169[11] = v247[0];
        v169[12] = v178;
        v169[9] = v176;
        v169[10] = v177;
        *((_QWORD *)v169 + 26) = v248;
        v179 = v249;
        *((_QWORD *)v169 + 27) = v249;
        if (v179)
        {
          v180 = (unint64_t *)&v179->__shared_owners_;
          do
            v181 = __ldxr(v180);
          while (__stxr(v181 + 1, v180));
        }
        v182 = v250;
        v183 = v251;
        *((_QWORD *)v169 + 32) = v252;
        v169[14] = v182;
        v169[15] = v183;
        v184 = (uint64_t)v169 + 264;
      }
      v223 = (_OWORD *)v184;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v185 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v186 = 0xF83E0F83E0F83E1 * ((uint64_t)(v5[239] - v5[238]) >> 3);
        *(_DWORD *)buf = 134350849;
        *(_QWORD *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = *(_QWORD *)&v242[16];
        *(_WORD *)&buf[22] = 2049;
        *(_QWORD *)&buf[24] = *(_QWORD *)&v242[24];
        *(_WORD *)&buf[32] = 2050;
        *(_QWORD *)&buf[34] = *((_QWORD *)&v243 + 1);
        v260 = 2050;
        v261 = *(double *)v244;
        v262 = 2050;
        v263 = *((double *)v244 + 1);
        v264 = 2050;
        v265 = *(double *)&v186;
        v266 = 2050;
        v267 = *(double *)&v244[1];
        _os_log_impl(&dword_18F5B3000, v185, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,meas,projection,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu,confidence,%{public}.4lf", buf, 0x52u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v187 = 0xF83E0F83E0F83E1 * ((uint64_t)(v212[239] - v212[238]) >> 3);
        *(_DWORD *)v253 = 134350849;
        *(_QWORD *)&v253[4] = v15;
        *(_WORD *)&v253[12] = 2049;
        *(_QWORD *)&v253[14] = *(_QWORD *)&v242[16];
        *(_WORD *)&v253[22] = 2049;
        *(_QWORD *)&v253[24] = *(_QWORD *)&v242[24];
        *(_WORD *)v254 = 2050;
        *(_QWORD *)&v254[2] = *((_QWORD *)&v243 + 1);
        *(_WORD *)&v254[10] = 2050;
        *(_QWORD *)&v254[12] = *(_QWORD *)&v244[0];
        *(_WORD *)&v254[20] = 2050;
        *(_QWORD *)&v254[22] = *((_QWORD *)&v244[0] + 1);
        v255 = 2050;
        v256 = v187;
        v257 = 2050;
        v258 = *(_QWORD *)&v244[1];
        v188 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v188);
        if (v188 != buf)
          free(v188);
        v5 = v212;
      }
    }
    else
    {
LABEL_274:
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v162 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v163 = *(float *)(v149 + 24);
        v164 = *(_QWORD *)(a2 + 480);
        v165 = *((_DWORD *)v5 + 518);
        *(_DWORD *)buf = 134349824;
        *(_QWORD *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v163;
        *(_WORD *)&buf[22] = 2050;
        *(_QWORD *)&buf[24] = v164;
        *(_WORD *)&buf[32] = 1026;
        *(_DWORD *)&buf[34] = v165;
        _os_log_impl(&dword_18F5B3000, v162, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints, no meas, projection,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", buf, 0x26u);
      }
      ++v214;
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v189 = *(float *)(v149 + 24);
        v190 = *(_QWORD *)(a2 + 480);
        v191 = *((_DWORD *)v5 + 518);
        *(_DWORD *)v253 = 134349824;
        *(_QWORD *)&v253[4] = v15;
        *(_WORD *)&v253[12] = 2050;
        *(double *)&v253[14] = v189;
        *(_WORD *)&v253[22] = 2050;
        *(_QWORD *)&v253[24] = v190;
        *(_WORD *)v254 = 1026;
        *(_DWORD *)&v254[2] = v191;
        v192 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v192);
        if (v192 != buf)
          free(v192);
      }
    }
    v166 = v249;
    if (v249)
    {
      v167 = (unint64_t *)&v249->__shared_owners_;
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    v149 += 56;
  }
  while (v149 != v211);
  v112 = (uint64_t)v222;
  v113 = v223;
  if (v214 <= 0)
    goto LABEL_203;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5[236] - v5[235]) >> 3) != v214 || v223 != v222)
    goto LABEL_203;
  v13 = 0;
  ++*((_DWORD *)v5 + 518);
LABEL_320:
  *(_QWORD *)buf = &v222;
  sub_18F6B2FEC((void ***)buf);
  v17 = v226;
LABEL_321:
  if (v17)
  {
    v196 = (unint64_t *)&v17->__shared_owners_;
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v13;
}

void sub_18F737A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_18F64F950(&a32);
  sub_18F692600((uint64_t)&STACK[0x280]);
  STACK[0x2F0] = (unint64_t)&a40;
  sub_18F6B2FEC((void ***)&STACK[0x2F0]);
  sub_18F5D6004((uint64_t)&a43);
  _Unwind_Resume(a1);
}

uint64_t sub_18F737B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  double v11;
  _BOOL4 v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  int v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  int v23;
  uint64_t result;
  _BOOL4 v25;
  NSObject *v26;
  char v27;
  BOOL v28;
  uint64_t v29;
  double v30;
  double v31;
  int v32;
  double v33;
  int v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  BOOL v39;
  int v40;
  double v41;
  double v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  char v49;
  int v50;
  NSObject *v51;
  uint64_t v52;
  int v53;
  double v54;
  double v55;
  BOOL v56;
  int v57;
  double v58;
  NSObject *v59;
  uint64_t v60;
  int v61;
  double v62;
  double v63;
  double v64;
  double v65;
  char v66;
  NSObject *v67;
  uint64_t v68;
  int v69;
  int v70;
  double v71;
  BOOL v72;
  double v73;
  double v74;
  NSObject *v75;
  uint64_t v76;
  double v77;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  NSObject *v84;
  uint64_t v85;
  int v86;
  double v87;
  NSObject *v88;
  uint64_t v89;
  int v90;
  double v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  double v98;
  double v99;
  double v100;
  NSObject *v101;
  uint64_t v102;
  int v103;
  NSObject *v104;
  uint64_t v105;
  int v106;
  char v107;
  NSObject *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  char *v113;
  int v114;
  _BYTE *v115;
  NSObject *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  char v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  double v135;
  double v136;
  float v137;
  float v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  int v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  int v150;
  char *v151;
  uint64_t v152;
  int v153;
  char *v154;
  uint64_t v155;
  int v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  int v175;
  void **v176;
  char *v177;
  _BOOL4 v178;
  BOOL v179;
  void *__dst[2];
  uint64_t v181;
  _BYTE __p[34];
  _BYTE v183[30];
  uint64_t v184;
  __int16 v185;
  uint64_t v186;
  __int16 v187;
  uint64_t v188;
  __int16 v189;
  uint64_t v190;
  __int16 v191;
  double v192;
  __int16 v193;
  double v194;
  _BYTE buf[34];
  _BYTE v196[30];
  uint64_t v197;
  __int16 v198;
  uint64_t v199;
  __int16 v200;
  uint64_t v201;
  __int16 v202;
  uint64_t v203;
  __int16 v204;
  double v205;
  __int16 v206;
  double v207;
  uint64_t v208;

  v208 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 48) == *(_QWORD *)(a2 + 40))
    return 0;
  v6 = *(_QWORD *)(a2 + 384);
  v8 = *(_QWORD *)(a1 + 208);
  v7 = *(std::__shared_weak_count **)(a1 + 216);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v8)
  {
    v11 = *(double *)(a1 + 1872);
    v12 = vabdd_f64(*(double *)(a2 + 400), v11) > 6.0 || v11 < 0.0;
    if (!v12 || (v13 = *(_QWORD *)(a2 + 256)) == 0)
    {
      v178 = 0;
      v25 = 0;
      goto LABEL_53;
    }
    v14 = 15.0;
    v15 = 25.0;
    if (*(_BYTE *)(a1 + 12))
    {
      v15 = 15.0;
      v14 = 5.0;
    }
    if (*(double *)(v13 + 96) * 1.5 >= 0.0)
      v14 = *(double *)(v13 + 96) * 1.5;
    if (v15 >= v14)
      v16 = v14;
    else
      v16 = v15;
    v17 = *(unsigned __int8 *)(a2 + 276);
    v18 = *(double *)(a2 + 304);
    sub_18F7047B4(*(_QWORD *)(a2 + 256));
    v19 = 1.0 - v18;
    if (!v17)
      v19 = v18;
    v20 = *(unsigned __int8 *)(a2 + 276);
    v21 = *(double *)(a2 + 304);
    if (v19 * *(double *)(v13 + 40) >= v16)
    {
      v22 = 1.0 - v21;
      if (*(_BYTE *)(a2 + 276))
        v22 = *(double *)(a2 + 304);
      if (v22 < 0.99)
      {
        v178 = 0;
        v23 = 0;
LABEL_47:
        if (*(_BYTE *)(a1 + 12))
        {
          v34 = *(unsigned __int8 *)(a2 + 276);
          v35 = *(double *)(a2 + 304);
          v36 = *(_QWORD *)(a2 + 256);
          sub_18F7047B4(v36);
          v37 = 1.0 - v35;
          if (!v34)
            v37 = v35;
          if (v37 * *(double *)(v36 + 40) < v16)
            v23 = 1;
        }
        v25 = v23 != 0;
LABEL_53:
        v38 = *(double *)(a2 + 616);
        if (*(_BYTE *)(a2 + 896))
          v39 = 1;
        else
          v39 = *(_BYTE *)(a2 + 368) == 0;
        v40 = !v39;
        v41 = fabs(*(double *)(a3 + 480));
        if (*(_BYTE *)(a3 + 504))
          v42 = v41;
        else
          v42 = -1.0;
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v43 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v44 = *(_QWORD *)(a2 + 384);
          v45 = *(_QWORD *)(a2 + 608);
          v46 = *(_QWORD *)(a2 + 632);
          *(_DWORD *)buf = 134350592;
          *(_QWORD *)&buf[4] = v44;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v38;
          *(_WORD *)&buf[22] = 2050;
          *(double *)&buf[24] = v42;
          *(_WORD *)&buf[32] = 1026;
          *(_DWORD *)v196 = v40;
          *(_WORD *)&v196[4] = 2050;
          *(_QWORD *)&v196[6] = v45;
          *(_WORD *)&v196[14] = 2050;
          *(_QWORD *)&v196[16] = v46;
          *(_WORD *)&v196[24] = 1026;
          *(_DWORD *)&v196[26] = v25;
          _os_log_impl(&dword_18F5B3000, v43, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,evaluateMatch,oldOffRoadCount,fabsDeltaAz,%{public}.2lf,priorFabsDeltaAz,%{public}.2lf,atIntersection,%{public}d,varFactor,%{public}.2lf,acrossTrack,%{public}.2lf,isAmbiguous,%{public}d", buf, 0x40u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v139 = *(_QWORD *)(a2 + 384);
          v140 = *(_QWORD *)(a2 + 608);
          v141 = *(_QWORD *)(a2 + 632);
          *(_DWORD *)__p = 134350592;
          *(_QWORD *)&__p[4] = v139;
          *(_WORD *)&__p[12] = 2050;
          *(double *)&__p[14] = v38;
          *(_WORD *)&__p[22] = 2050;
          *(double *)&__p[24] = v42;
          *(_WORD *)&__p[32] = 1026;
          *(_DWORD *)v183 = v40;
          *(_WORD *)&v183[4] = 2050;
          *(_QWORD *)&v183[6] = v140;
          *(_WORD *)&v183[14] = 2050;
          *(_QWORD *)&v183[16] = v141;
          *(_WORD *)&v183[24] = 1026;
          *(_DWORD *)&v183[26] = v25;
          v142 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v142);
          if (v142 != buf)
            free(v142);
        }
        v47 = (int)*(double *)(a2 + 608);
        if (v38 < 25.0)
          v48 = 1;
        else
          v48 = v40;
        v179 = v25;
        if (v48 == 1)
        {
          v49 = 0;
          v50 = 0;
          switch(v47)
          {
            case 0:
            case 1:
            case 2:
              goto LABEL_75;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
              break;
            case 13:
              goto LABEL_76;
            case 14:
              goto LABEL_77;
            case 15:
            case 16:
              goto LABEL_73;
            case 17:
            case 18:
            case 19:
            case 20:
              goto LABEL_74;
            default:
              goto LABEL_78;
          }
        }
        else
        {
          v49 = 0;
          v50 = 0;
          switch(v47)
          {
            case 0:
            case 1:
            case 2:
LABEL_75:
              v49 = 0;
              v50 = -1;
              break;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
              break;
            case 8:
            case 9:
            case 10:
LABEL_76:
              v49 = 1;
              v50 = 1;
              break;
            case 11:
            case 12:
LABEL_77:
              v50 = 2;
              goto LABEL_79;
            case 13:
            case 14:
            case 15:
            case 16:
LABEL_73:
              v50 = 3;
              goto LABEL_79;
            case 17:
            case 18:
            case 19:
            case 20:
LABEL_74:
              v50 = 4;
              goto LABEL_79;
            default:
LABEL_78:
              v50 = 10;
LABEL_79:
              v49 = 1;
              break;
          }
        }
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v51 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v52 = *(_QWORD *)(a2 + 384);
          v53 = *(_DWORD *)(a1 + 1208);
          *(_DWORD *)buf = 134349568;
          *(_QWORD *)&buf[4] = v52;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v53;
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)&buf[20] = v53 + v50;
          _os_log_impl(&dword_18F5B3000, v51, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,varFactorCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0x18u);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v143 = *(_QWORD *)(a2 + 384);
          v144 = *(_DWORD *)(a1 + 1208);
          *(_DWORD *)__p = 134349568;
          *(_QWORD *)&__p[4] = v143;
          *(_WORD *)&__p[12] = 1026;
          *(_DWORD *)&__p[14] = v144;
          *(_WORD *)&__p[18] = 1026;
          *(_DWORD *)&__p[20] = v144 + v50;
          v145 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v145);
          if (v145 != buf)
            free(v145);
        }
        *(_DWORD *)(a1 + 1208) = (*(_DWORD *)(a1 + 1208) + v50) & ~((*(_DWORD *)(a1 + 1208) + v50) >> 31);
        v54 = *(double *)(a2 + 568);
        if (v54 <= 0.0
          || *(double *)(a2 + 480) < 0.0
          || *(double *)(a2 + 560) > 0.0
          && ((v55 = *(double *)(a2 + 472), v55 < 0.001) ? (v56 = v55 < 0.0) : (v56 = 1), !v56)
          || *(_BYTE *)(a2 + 604)
          || fabs(*(double *)(a2 + 632)) <= 25.0)
        {
LABEL_119:
          v62 = *(double *)(a2 + 456);
          v63 = *(double *)(a2 + 576);
          if (v63 > 0.0)
          {
            v64 = *(double *)(a2 + 584);
            if (v64 > 0.0)
              v62 = sqrt(v64 / 2.45 * (v64 / 2.45) + v63 / 2.45 * (v63 / 2.45));
          }
          if (v62 >= 10.0)
            v65 = v62;
          else
            v65 = 10.0;
          if (v65 >= 50.0)
            v66 = 1;
          else
            v66 = v49;
          if ((v66 & 1) == 0)
          {
            if (fabs(*(double *)(a2 + 632)) <= 75.0 && fabs(*(double *)(a2 + 624)) <= 150.0)
            {
              v49 = 0;
            }
            else
            {
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v67 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                v68 = *(_QWORD *)(a2 + 384);
                v69 = *(_DWORD *)(a1 + 1208);
                *(_DWORD *)buf = 134349568;
                *(_QWORD *)&buf[4] = v68;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v69;
                *(_WORD *)&buf[18] = 1026;
                *(_DWORD *)&buf[20] = v69 + 1;
                _os_log_impl(&dword_18F5B3000, v67, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0x18u);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v149 = *(_QWORD *)(a2 + 384);
                v150 = *(_DWORD *)(a1 + 1208);
                *(_DWORD *)__p = 134349568;
                *(_QWORD *)&__p[4] = v149;
                *(_WORD *)&__p[12] = 1026;
                *(_DWORD *)&__p[14] = v150;
                *(_WORD *)&__p[18] = 1026;
                *(_DWORD *)&__p[20] = v150 + 1;
                v151 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v151);
                if (v151 != buf)
                  free(v151);
              }
              ++*(_DWORD *)(a1 + 1208);
              v49 = 1;
            }
          }
          if (*(_BYTE *)(a2 + 737))
            v70 = v40;
          else
            v70 = 1;
          v71 = 40000.0;
          if (v70)
            v71 = 10000.0;
          if (*(_BYTE *)(a3 + 601))
            v72 = *(_BYTE *)(a3 + 504) == 0;
          else
            v72 = 1;
          if (v72)
            v73 = 10000.0;
          else
            v73 = v71;
          v74 = *(double *)(a2 + 632) * *(double *)(a2 + 632) + *(double *)(a2 + 624) * *(double *)(a2 + 624);
          if (v74 > v73)
          {
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
            v27 = v179;
            v75 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              v76 = *(_QWORD *)(a2 + 384);
              *(_DWORD *)buf = 134349568;
              *(_QWORD *)&buf[4] = v76;
              *(_WORD *)&buf[12] = 2050;
              *(_QWORD *)&buf[14] = sqrt(v73);
              *(_WORD *)&buf[22] = 1026;
              *(_DWORD *)&buf[24] = v40;
              _os_log_impl(&dword_18F5B3000, v75, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,stopSnapping,distance > %{public}.0lfm,Intersection,%{public}d", buf, 0x1Cu);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v147 = *(_QWORD *)(a2 + 384);
              *(_DWORD *)__p = 134349568;
              *(_QWORD *)&__p[4] = v147;
              *(_WORD *)&__p[12] = 2050;
              *(_QWORD *)&__p[14] = sqrt(v73);
              *(_WORD *)&__p[22] = 1026;
              *(_DWORD *)&__p[24] = v40;
              v148 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v148);
              if (v148 != buf)
                free(v148);
              v27 = v179;
            }
            v28 = 0;
            *(_BYTE *)(a1 + 1212) = 0;
            if (!v7)
              goto LABEL_260;
LABEL_256:
            v127 = (unint64_t *)&v7->__shared_owners_;
            do
              v128 = __ldaxr(v127);
            while (__stlxr(v128 - 1, v127));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
            goto LABEL_260;
          }
          v77 = *(double *)(a2 + 472);
          if (v77 >= 0.0 && *(double *)(a2 + 560) > 0.0)
            v77 = (v77 + *(double *)(a3 + 336)) * 0.5;
          v79 = *(double *)(a2 + 400);
          v80 = -1.0;
          if (v79 >= 0.0)
          {
            v81 = *(double *)(a3 + 264);
            if (v81 >= 0.0)
              v80 = vabdd_f64(v79, v81);
          }
          if (*(_BYTE *)(a3 + 504))
          {
            if (*(_BYTE *)(a1 + 1212))
            {
              if (*(double *)(a2 + 608) > 13.0)
              {
                v82 = v77 * v80;
                v83 = sub_18F5BD064((double *)(a1 + 168), *(double *)(a3 + 392), *(double *)(a3 + 400), *(double *)(a2 + 528), *(double *)(a2 + 536), *(double *)(a2 + 448))- v77 * v80;
                if (v83 > 100.0)
                {
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                  v84 = off_1EE172160;
                  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                  {
                    v85 = *(_QWORD *)(a2 + 384);
                    v86 = *(_DWORD *)(a1 + 1208);
                    *(_DWORD *)buf = 134350080;
                    *(_QWORD *)&buf[4] = v85;
                    *(_WORD *)&buf[12] = 2050;
                    *(double *)&buf[14] = v83;
                    *(_WORD *)&buf[22] = 2050;
                    *(double *)&buf[24] = v82;
                    *(_WORD *)&buf[32] = 1026;
                    *(_DWORD *)v196 = v86;
                    *(_WORD *)&v196[4] = 1026;
                    *(_DWORD *)&v196[6] = v86 + 18;
                    _os_log_impl(&dword_18F5B3000, v84, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,jumpDistanceCheck,%{public}.1lf,expectedDistanceTravelled,%{public}.1lf,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0x2Cu);
                  }
                  if (sub_18F5C4AE0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172158 != -1)
                      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                    v152 = *(_QWORD *)(a2 + 384);
                    v153 = *(_DWORD *)(a1 + 1208);
                    *(_DWORD *)__p = 134350080;
                    *(_QWORD *)&__p[4] = v152;
                    *(_WORD *)&__p[12] = 2050;
                    *(double *)&__p[14] = v83;
                    *(_WORD *)&__p[22] = 2050;
                    *(double *)&__p[24] = v82;
                    *(_WORD *)&__p[32] = 1026;
                    *(_DWORD *)v183 = v153;
                    *(_WORD *)&v183[4] = 1026;
                    *(_DWORD *)&v183[6] = v153 + 18;
                    v154 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v154);
                    if (v154 != buf)
                      free(v154);
                  }
                  *(_DWORD *)(a1 + 1208) += 18;
                  v49 = 1;
                }
              }
            }
          }
          if (v12 && v178)
          {
            v87 = *(_BYTE *)(a2 + 276) ? *(double *)(a2 + 304) : 1.0 - *(double *)(a2 + 304);
            if (v87 >= 0.99)
            {
              *(_DWORD *)(a1 + 1208) += (int)(v87 * 10.0);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v88 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                v89 = *(_QWORD *)(a2 + 384);
                v90 = *(_DWORD *)(a1 + 1208);
                *(_DWORD *)buf = 134349824;
                *(_QWORD *)&buf[4] = v89;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v90;
                *(_WORD *)&buf[18] = 2050;
                *(double *)&buf[20] = v87;
                *(_WORD *)&buf[28] = 1026;
                *(_DWORD *)&buf[30] = (int)(v87 * 10.0);
                _os_log_impl(&dword_18F5B3000, v88, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,evalauteMatch,offRoadCount,%{public}d,projection,%{public}.2lf,delta,%{public}d", buf, 0x22u);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v155 = *(_QWORD *)(a2 + 384);
                v156 = *(_DWORD *)(a1 + 1208);
                *(_DWORD *)__p = 134349824;
                *(_QWORD *)&__p[4] = v155;
                *(_WORD *)&__p[12] = 1026;
                *(_DWORD *)&__p[14] = v156;
                *(_WORD *)&__p[18] = 2050;
                *(double *)&__p[20] = v87;
                *(_WORD *)&__p[28] = 1026;
                *(_DWORD *)&__p[30] = (int)(v87 * 10.0);
                v157 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v157);
                if (v157 != buf)
                  free(v157);
              }
              v49 = 1;
            }
          }
          if (*(_BYTE *)(a1 + 1212))
          {
            v91 = *(double *)(a2 + 608);
            if (v91 > 70.0)
            {
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v92 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                v93 = *(_QWORD *)(a2 + 384);
                v94 = *(_QWORD *)(a2 + 608);
                *(_DWORD *)buf = 134349568;
                *(_QWORD *)&buf[4] = v93;
                *(_WORD *)&buf[12] = 2050;
                *(_QWORD *)&buf[14] = v94;
                *(_WORD *)&buf[22] = 2050;
                *(_QWORD *)&buf[24] = 0x4051800000000000;
                _os_log_impl(&dword_18F5B3000, v92, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,stopSnapping,varFactor,%{public}.1lf,threshold,%{public}.1lf", buf, 0x20u);
              }
              if (!sub_18F5C4AE0(115, 2))
                goto LABEL_215;
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v95 = *(_QWORD *)(a2 + 384);
              v96 = *(_QWORD *)(a2 + 608);
              *(_DWORD *)__p = 134349568;
              *(_QWORD *)&__p[4] = v95;
              *(_WORD *)&__p[12] = 2050;
              *(_QWORD *)&__p[14] = v96;
              *(_WORD *)&__p[22] = 2050;
              *(_QWORD *)&__p[24] = 0x4051800000000000;
              v97 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v97);
LABEL_328:
              if (v97 != buf)
                free(v97);
LABEL_215:
              *(_BYTE *)(a1 + 1212) = 0;
              goto LABEL_255;
            }
            if (*(int *)(a1 + 1208) >= 18)
            {
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v104 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                v105 = *(_QWORD *)(a2 + 384);
                v106 = *(_DWORD *)(a1 + 1208);
                *(_DWORD *)buf = 134349568;
                *(_QWORD *)&buf[4] = v105;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v106;
                *(_WORD *)&buf[18] = 1026;
                *(_DWORD *)&buf[20] = 18;
                _os_log_impl(&dword_18F5B3000, v104, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,stopSnapping,offRoadCount,%{public}d,threshold,%{public}d", buf, 0x18u);
              }
              if (!sub_18F5C4AE0(115, 2))
                goto LABEL_215;
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v167 = *(_QWORD *)(a2 + 384);
              v168 = *(_DWORD *)(a1 + 1208);
              *(_DWORD *)__p = 134349568;
              *(_QWORD *)&__p[4] = v167;
              *(_WORD *)&__p[12] = 1026;
              *(_DWORD *)&__p[14] = v168;
              *(_WORD *)&__p[18] = 1026;
              *(_DWORD *)&__p[20] = 18;
              v97 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v97);
              goto LABEL_328;
            }
            if (v91 >= 6.5)
              v107 = 1;
            else
              v107 = v49;
            if ((v107 & 1) == 0)
            {
              *(_DWORD *)(a1 + 1208) = 0;
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v108 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                v109 = *(_QWORD *)(a2 + 384);
                v110 = *(_DWORD *)(a1 + 1208);
                *(_DWORD *)buf = 134349312;
                *(_QWORD *)&buf[4] = v109;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v110;
                _os_log_impl(&dword_18F5B3000, v108, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,reseting offRoadCount,%{public}d", buf, 0x12u);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v111 = *(_QWORD *)(a2 + 384);
                v112 = *(_DWORD *)(a1 + 1208);
                *(_DWORD *)__p = 134349312;
                *(_QWORD *)&__p[4] = v111;
                *(_WORD *)&__p[12] = 1026;
                *(_DWORD *)&__p[14] = v112;
                v113 = (char *)_os_log_send_and_compose_impl();
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v113);
                if (v113 != buf)
                  free(v113);
              }
            }
LABEL_255:
            v28 = *(_BYTE *)(a1 + 1212) != 0;
            v27 = v179;
            if (!v7)
              goto LABEL_260;
            goto LABEL_256;
          }
          if ((v49 & 1) != 0)
            goto LABEL_255;
          v98 = 13.5;
          if (*(_BYTE *)(a2 + 724))
            v98 = 7.5;
          if (v62 > 7.5)
            v99 = 20.0;
          else
            v99 = v98;
          v100 = 30.0;
          if (v12)
          {
            if (*(_DWORD *)(a2 + 496) == 9)
            {
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v101 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                v102 = *(_QWORD *)(a2 + 384);
                v103 = *(_DWORD *)(a2 + 496);
                if (*(char *)(a2 + 527) < 0)
                {
                  sub_18F5C6990(__p, *(void **)(a2 + 504), *(_QWORD *)(a2 + 512));
                }
                else
                {
                  *(_OWORD *)__p = *(_OWORD *)(a2 + 504);
                  *(_QWORD *)&__p[16] = *(_QWORD *)(a2 + 520);
                }
                v115 = __p;
                if (__p[23] < 0)
                  v115 = *(_BYTE **)__p;
                *(_DWORD *)buf = 134349570;
                *(_QWORD *)&buf[4] = v102;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v103;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = v115;
                _os_log_impl(&dword_18F5B3000, v101, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,startSnapping,shouldStartSnappingOnfrc,frc,%{public}d,name,%{public}s,using tighter-threshold", buf, 0x1Cu);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
              }
              v99 = 5.0;
              v100 = 8.0;
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v174 = *(_QWORD *)(a2 + 384);
                v175 = *(_DWORD *)(a2 + 496);
                if (*(char *)(a2 + 527) < 0)
                {
                  sub_18F5C6990(__dst, *(void **)(a2 + 504), *(_QWORD *)(a2 + 512));
                }
                else
                {
                  *(_OWORD *)__dst = *(_OWORD *)(a2 + 504);
                  v181 = *(_QWORD *)(a2 + 520);
                }
                v176 = __dst;
                if (v181 < 0)
                  v176 = (void **)__dst[0];
                *(_DWORD *)__p = 134349570;
                *(_QWORD *)&__p[4] = v174;
                *(_WORD *)&__p[12] = 1026;
                *(_DWORD *)&__p[14] = v175;
                *(_WORD *)&__p[18] = 2082;
                *(_QWORD *)&__p[20] = v176;
                v177 = (char *)_os_log_send_and_compose_impl();
                if (SHIBYTE(v181) < 0)
                  operator delete(__dst[0]);
                sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v177);
                if (v177 != buf)
                  free(v177);
              }
            }
            else
            {
              v114 = *(_DWORD *)(a2 + 792);
              if (v114 != 3)
              {
                v100 = v114 == 4 ? 30.0 : 18.0;
                if (v114 != 4)
                  v99 = 6.0;
              }
            }
          }
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v116 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            v117 = *(_QWORD *)(a2 + 384);
            v118 = *(_QWORD *)(a2 + 632);
            v119 = *(_QWORD *)(a2 + 608);
            v120 = *(_QWORD *)(a3 + 472);
            v121 = *(_QWORD *)(a2 + 472);
            v122 = *(_QWORD *)(a2 + 480);
            v123 = *(_QWORD *)(a3 + 336);
            v124 = *(_QWORD *)(a3 + 344);
            *(_DWORD *)buf = 134351872;
            *(_QWORD *)&buf[4] = v117;
            *(_WORD *)&buf[12] = 2050;
            *(double *)&buf[14] = v74;
            *(_WORD *)&buf[22] = 2050;
            *(_QWORD *)&buf[24] = v118;
            *(_WORD *)&buf[32] = 2050;
            *(double *)v196 = v65;
            *(_WORD *)&v196[8] = 2050;
            *(_QWORD *)&v196[10] = v119;
            *(_WORD *)&v196[18] = 2048;
            *(_QWORD *)&v196[20] = v120;
            *(_WORD *)&v196[28] = 2050;
            v197 = v121;
            v198 = 2050;
            v199 = v123;
            v200 = 2050;
            v201 = v122;
            v202 = 2050;
            v203 = v124;
            v204 = 2050;
            v205 = v38;
            v206 = 2050;
            v207 = v42;
            _os_log_impl(&dword_18F5B3000, v116, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,startSnapping criteria,distance2,%{public}.1lf,acrossTrack,%{public}.2lf,drms,%{public}.1lf,currentVF,%{public}.3lf,prioVF{public},%.3lf,curSpeed,%{public}.2lf,priorSpeed,%{public}.2lf,curCourse,%{public}.2lf,priorCourse,%{public}.2lf,fabsDeltaAz,%{public}.2lf,priorFabsDeltaAz,%{public}.2lf", buf, 0x7Au);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
            v158 = *(_QWORD *)(a2 + 384);
            v159 = *(_QWORD *)(a2 + 632);
            v160 = *(_QWORD *)(a2 + 608);
            v161 = *(_QWORD *)(a3 + 472);
            v162 = *(_QWORD *)(a2 + 472);
            v163 = *(_QWORD *)(a2 + 480);
            v164 = *(_QWORD *)(a3 + 336);
            v165 = *(_QWORD *)(a3 + 344);
            *(_DWORD *)__p = 134351872;
            *(_QWORD *)&__p[4] = v158;
            *(_WORD *)&__p[12] = 2050;
            *(double *)&__p[14] = v74;
            *(_WORD *)&__p[22] = 2050;
            *(_QWORD *)&__p[24] = v159;
            *(_WORD *)&__p[32] = 2050;
            *(double *)v183 = v65;
            *(_WORD *)&v183[8] = 2050;
            *(_QWORD *)&v183[10] = v160;
            *(_WORD *)&v183[18] = 2048;
            *(_QWORD *)&v183[20] = v161;
            *(_WORD *)&v183[28] = 2050;
            v184 = v162;
            v185 = 2050;
            v186 = v164;
            v187 = 2050;
            v188 = v163;
            v189 = 2050;
            v190 = v165;
            v191 = 2050;
            v192 = v38;
            v193 = 2050;
            v194 = v42;
            v166 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v166);
            if (v166 != buf)
              free(v166);
          }
          if (*(_BYTE *)(a2 + 641))
            goto LABEL_248;
          if (v74 >= 400.0)
            goto LABEL_248;
          if (*(_BYTE *)(a3 + 505))
            goto LABEL_248;
          if (fabs(*(double *)(a2 + 632)) >= v99)
            goto LABEL_248;
          if (v65 >= 101.0)
            goto LABEL_248;
          v134 = *(double *)(a2 + 608);
          if (v134 >= 3.0)
            goto LABEL_248;
          v135 = *(double *)(a3 + 472);
          if (v135 >= 3.0
            || *(double *)(a2 + 472) <= 0.25
            || *(double *)(a3 + 336) <= 0.25
            || *(double *)(a2 + 480) < 0.0
            || *(double *)(a3 + 344) < 0.0
            || v38 >= v100
            || v42 >= v100)
          {
            goto LABEL_248;
          }
          v136 = *(double *)(a2 + 568);
          if (v136 >= 20.0 || v136 <= 0.0)
          {
            v137 = *(float *)(a2 + 556);
            v138 = 3.0;
          }
          else
          {
            if (v38 >= 40.0)
              goto LABEL_248;
            v137 = *(float *)(a2 + 556);
            v138 = 2.5;
          }
          if (v137 > v138 || v134 < 1.0 && v135 < 1.0 && (v137 == 0.0 || v137 > 1.1))
          {
            *(_BYTE *)(a1 + 1212) = 1;
LABEL_249:
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
            v125 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              v126 = *(_QWORD *)(a2 + 384);
              *(_DWORD *)buf = 134349056;
              *(_QWORD *)&buf[4] = v126;
              _os_log_impl(&dword_18F5B3000, v125, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,startSnapping", buf, 0xCu);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v172 = *(_QWORD *)(a2 + 384);
              *(_DWORD *)__p = 134349056;
              *(_QWORD *)&__p[4] = v172;
              v173 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v173);
              if (v173 != buf)
                free(v173);
            }
            *(_DWORD *)(a1 + 1208) = 0;
            goto LABEL_255;
          }
LABEL_248:
          if (!*(_BYTE *)(a1 + 1212))
            goto LABEL_255;
          goto LABEL_249;
        }
        if (v40)
        {
          if (v38 <= 67.5)
            goto LABEL_119;
          if (v54 >= 20.0)
          {
            v57 = 4;
LABEL_113:
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
            v59 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              v60 = *(_QWORD *)(a2 + 384);
              v61 = *(_DWORD *)(a1 + 1208);
              *(_DWORD *)buf = 134349568;
              *(_QWORD *)&buf[4] = v60;
              *(_WORD *)&buf[12] = 1026;
              *(_DWORD *)&buf[14] = v61;
              *(_WORD *)&buf[18] = 1026;
              *(_DWORD *)&buf[20] = v61 + v57;
              _os_log_impl(&dword_18F5B3000, v59, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0x18u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v169 = *(_QWORD *)(a2 + 384);
              v170 = *(_DWORD *)(a1 + 1208);
              *(_DWORD *)__p = 134349568;
              *(_QWORD *)&__p[4] = v169;
              *(_WORD *)&__p[12] = 1026;
              *(_DWORD *)&__p[14] = v170;
              *(_WORD *)&__p[18] = 1026;
              *(_DWORD *)&__p[20] = v170 + v57;
              v171 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v171);
              if (v171 != buf)
                free(v171);
            }
            *(_DWORD *)(a1 + 1208) += v57;
            v49 = 1;
            goto LABEL_119;
          }
          goto LABEL_106;
        }
        if (v54 >= 20.0)
        {
          if (v38 > 67.5)
            goto LABEL_106;
          if (v38 > 45.0)
            goto LABEL_109;
          v58 = 30.0;
        }
        else
        {
          if (v38 > 67.5)
          {
            v57 = 18;
            goto LABEL_113;
          }
          if (v38 > 45.0)
          {
LABEL_106:
            v57 = 6;
            goto LABEL_113;
          }
          if (v38 > 30.0)
          {
LABEL_109:
            v57 = 2;
            goto LABEL_113;
          }
          v58 = 20.0;
        }
        if (v38 <= v58)
          goto LABEL_119;
        v57 = 1;
        goto LABEL_113;
      }
    }
    v29 = *(_QWORD *)(a2 + 256);
    sub_18F7047B4(v29);
    v30 = 1.0 - v21;
    if (!v20)
      v30 = v21;
    v31 = v30 * *(double *)(v29 + 40);
    *(_QWORD *)buf = buf;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0;
    if (!(*(unsigned int (**)(uint64_t, _BYTE *, uint64_t, _QWORD, uint64_t, double, double))(*(_QWORD *)v8 + 72))(v8, buf, a2 + 256, *(unsigned __int8 *)(a2 + 276), 1, *(double *)(a2 + 304), v31 + 1.0))goto LABEL_41;
    if (*(_QWORD *)&buf[16])
    {
      if (*(_QWORD *)&buf[16] != 1
        || **(_QWORD **)(a2 + 256) != *(_QWORD *)(*(_QWORD *)&buf[8] + 16)
        || (v32 = *(unsigned __int8 *)(a2 + 276), v32 == *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 24)))
      {
LABEL_41:
        v178 = 0;
        v23 = 0;
LABEL_46:
        sub_18F677A18((uint64_t *)buf);
        goto LABEL_47;
      }
      v33 = *(double *)(a2 + 304);
    }
    else
    {
      v33 = *(double *)(a2 + 304);
      v32 = *(unsigned __int8 *)(a2 + 276);
    }
    if (!v32)
      v33 = 1.0 - v33;
    v178 = v33 >= 0.99;
    v23 = 1;
    goto LABEL_46;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v26 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v6;
    _os_log_impl(&dword_18F5B3000, v26, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, mapMatch", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    *(_DWORD *)__p = 134349056;
    *(_QWORD *)&__p[4] = v6;
    v146 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v146);
    if (v146 != buf)
      free(v146);
  }
  v27 = 0;
  v28 = 0;
  if (v7)
    goto LABEL_256;
LABEL_260:
  *(_BYTE *)(a2 + 640) = v28;
  if (*(_BYTE *)(a2 + 881))
    v129 = 1;
  else
    v129 = v27;
  *(_BYTE *)(a2 + 881) = v129;
  sub_18F692630(a1 + 1216, (__int128 *)(a2 + 376));
  v130 = sub_18F692854((uint64_t *)(a1 + 1216), 0);
  if (v130)
  {
    *(_BYTE *)(a2 + 640) = 0;
  }
  else if (v28)
  {
    return 1;
  }
  result = v130 ^ 1u;
  *(_DWORD *)(a2 + 656) = 0;
  v131 = *(_QWORD *)(a2 + 432);
  v132 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a2 + 528) = v131;
  *(_QWORD *)(a2 + 536) = v132;
  v133 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a2 + 544) = v133;
  *(_QWORD *)(a2 + 664) = v131;
  *(_QWORD *)(a2 + 672) = v132;
  *(_QWORD *)(a2 + 680) = v133;
  return result;
}

void sub_18F739B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F739CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t *v17;
  _BOOL8 v18;
  unsigned int v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v29;
  uint64_t i;
  double v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  float64x2_t *v45;
  float64x2_t *v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t *v49;
  float64x2_t *v50;
  uint64_t v51;
  int32x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  int32x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  int32x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  int32x2_t v61;
  int v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  float64x2_t *v72;
  float64x2_t *v73;
  uint64_t v74;
  float64x2_t v75;
  float64x2_t *v76;
  float64x2_t *v77;
  float64x2_t v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int32x2_t v84;
  unsigned __int8 v85;
  _BOOL4 v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  float64x2_t v113;
  float64x2_t v114;
  _QWORD v115[2];
  uint64_t *v116;
  uint64_t v117;
  _BYTE v118[42];
  __int16 v119;
  uint64_t v120;
  _BYTE buf[42];
  __int16 v122;
  uint64_t v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 640))
  {
    *(_DWORD *)(a1 + 1752) = 0;
    *(_OWORD *)(a1 + 1760) = 0u;
    if (fabs(*(double *)(a2 + 528)) < 0.00003 && fabs(*(double *)(a2 + 536)) < 0.00003)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v6 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_QWORD *)(a2 + 384);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v7;
        _os_log_impl(&dword_18F5B3000, v6, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,reset,snap coordinate is null island", buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v8 = *(_QWORD *)(a2 + 384);
      *(_DWORD *)v118 = 134349056;
      *(_QWORD *)&v118[4] = v8;
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallReset(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v9);
LABEL_161:
      if (v9 != buf)
        free(v9);
      return 1;
    }
    if (*(_BYTE *)(a2 + 882)
      && *(_BYTE *)(a3 + 746)
      && *(_QWORD *)(a3 + 120)
      && *(_QWORD *)(a2 + 256)
      && (sub_18F69B170(a3 + 120, (uint64_t)buf),
          sub_18F69B170(a2 + 256, (uint64_t)v118),
          *(_QWORD *)buf == *(_QWORD *)v118)
      && buf[16] == v118[16]
      && *(_QWORD *)&buf[8] == *(_QWORD *)&v118[8])
    {
      ++*(_DWORD *)(a1 + 1776);
    }
    else
    {
      *(_DWORD *)(a1 + 1776) = 0;
    }
    if (!*(_BYTE *)(a2 + 640))
      goto LABEL_38;
    if (!*(_BYTE *)(a3 + 504))
      goto LABEL_38;
    v15 = *(_QWORD *)(a2 + 488);
    if (v15 == *(_QWORD *)(a3 + 352))
      goto LABEL_38;
    v16 = fmod(*(double *)(a2 + 680) - *(double *)(a3 + 544), 360.0);
    if (v16 < 0.0)
      v16 = v16 + 360.0;
    if (v16 > 180.0)
      v16 = v16 + -360.0;
    if (fabs(v16) >= 45.0)
    {
      if (*(_QWORD *)(a1 + 1800) || (v36 = *(_QWORD *)(a1 + 1816), v36 == a1 + 1808))
      {
        v29 = 0;
      }
      else
      {
        do
        {
          v29 = v15 == **(_QWORD **)(v36 + 16);
          if (v15 == **(_QWORD **)(v36 + 16))
            break;
          v36 = *(_QWORD *)(v36 + 8);
        }
        while (v36 != a1 + 1808);
      }
      for (i = *(_QWORD *)(a1 + 1792); i != a1 + 1784; i = *(_QWORD *)(i + 8))
      {
        if (v15 == **(_QWORD **)(i + 16))
          goto LABEL_68;
      }
      if (v29)
        goto LABEL_68;
      v37 = *(_QWORD *)(a2 + 256);
      if (v37)
      {
        v38 = *(_QWORD *)(a3 + 120);
        if (v38)
        {
          v39 = *(_QWORD *)(a2 + 264);
          v116 = *(uint64_t **)(a2 + 256);
          v117 = v39;
          if (v39)
          {
            v40 = (unint64_t *)(v39 + 8);
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
            v38 = *(_QWORD *)(a3 + 120);
          }
          v42 = *(_QWORD *)(a3 + 128);
          v115[0] = v38;
          v115[1] = v42;
          if (v42)
          {
            v43 = (unint64_t *)(v42 + 8);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          v46 = *(float64x2_t **)(v37 + 136);
          v45 = *(float64x2_t **)(v37 + 144);
          v47 = 0uLL;
          v48 = 0uLL;
          if (v45 != v46)
            v48 = *v46;
          v51 = v38 + 136;
          v50 = *(float64x2_t **)(v38 + 136);
          v49 = *(float64x2_t **)(v51 + 8);
          if (v49 != v50)
            v47 = *v50;
          v52 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v48, v47)));
          if ((vand_s8((int8x8_t)v52, (int8x8_t)vdup_lane_s32(v52, 1)).u8[0] & 1) != 0)
            goto LABEL_111;
          v53 = 0uLL;
          v54 = 0uLL;
          if (v45 != v46)
            v54 = *v46;
          if (v49 != v50)
            v53 = v49[-1];
          v55 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v54, v53)));
          if ((vand_s8((int8x8_t)v55, (int8x8_t)vdup_lane_s32(v55, 1)).u8[0] & 1) != 0)
            goto LABEL_111;
          v56 = 0uLL;
          v57 = 0uLL;
          if (v45 != v46)
            v57 = v45[-1];
          if (v49 != v50)
            v56 = *v50;
          v58 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v57, v56)));
          if ((vand_s8((int8x8_t)v58, (int8x8_t)vdup_lane_s32(v58, 1)).u8[0] & 1) != 0)
            goto LABEL_111;
          v59 = 0uLL;
          v60 = 0uLL;
          if (v45 != v46)
            v60 = v45[-1];
          if (v49 != v50)
            v59 = v49[-1];
          v61 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v60, v59)));
          if ((vand_s8((int8x8_t)v61, (int8x8_t)vdup_lane_s32(v61, 1)).u8[0] & 1) != 0)
LABEL_111:
            v62 = 1;
          else
            v62 = 0;
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v63 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            v64 = *(_QWORD *)(a2 + 384);
            v65 = *v116;
            v66 = *(_QWORD *)v115[0];
            *(_DWORD *)buf = 134349825;
            *(_QWORD *)&buf[4] = v64;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = v62;
            *(_WORD *)&buf[18] = 2049;
            *(_QWORD *)&buf[20] = v65;
            *(_WORD *)&buf[28] = 2049;
            *(_QWORD *)&buf[30] = v66;
            _os_log_impl(&dword_18F5B3000, v63, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,hopping check,connecting roads,%{public}d, current road %{private}lld,prior road %{private}lld", buf, 0x26u);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
            v104 = *(_QWORD *)(a2 + 384);
            v105 = *v116;
            v106 = *(_QWORD *)v115[0];
            *(_DWORD *)v118 = 134349825;
            *(_QWORD *)&v118[4] = v104;
            *(_WORD *)&v118[12] = 1026;
            *(_DWORD *)&v118[14] = v62;
            *(_WORD *)&v118[18] = 2049;
            *(_QWORD *)&v118[20] = v105;
            *(_WORD *)&v118[28] = 2049;
            *(_QWORD *)&v118[30] = v106;
            v107 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::checkForSolutionHopping(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v107);
            if (v107 != buf)
              free(v107);
          }
          sub_18F5D6004((uint64_t)v115);
          sub_18F5D6004((uint64_t)&v116);
          if ((v62 & 1) != 0)
            goto LABEL_68;
        }
      }
      v67 = *(uint64_t **)(a3 + 120);
      if (v67)
      {
        v68 = *(_QWORD *)(a2 + 864);
        if (v68)
        {
          v69 = *(_QWORD *)(a3 + 128);
          v116 = *(uint64_t **)(a3 + 120);
          v117 = v69;
          if (v69)
          {
            v70 = (unint64_t *)(v69 + 8);
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
            v68 = *(_QWORD *)(a2 + 864);
          }
          v74 = v68 + 136;
          v72 = *(float64x2_t **)(v68 + 136);
          v73 = *(float64x2_t **)(v74 + 8);
          v113 = 0u;
          v114 = 0u;
          if (v73 != v72)
          {
            if (*(_BYTE *)(a2 + 880))
              v75 = *v72;
            else
              v75 = v73[-1];
            v113 = v75;
          }
          v77 = (float64x2_t *)v67[17];
          v76 = (float64x2_t *)v67[18];
          if (v76 != v77)
          {
            if (*(_BYTE *)(a3 + 140))
              v78 = v76[-1];
            else
              v78 = *v77;
            v114 = v78;
          }
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v79 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            v80 = *(_QWORD *)(a2 + 384);
            v81 = *v67;
            v82 = **(_QWORD **)(a2 + 864);
            v83 = **(_QWORD **)(a2 + 256);
            *(_DWORD *)buf = 134349825;
            *(_QWORD *)&buf[4] = v80;
            *(_WORD *)&buf[12] = 2049;
            *(_QWORD *)&buf[14] = v81;
            *(_WORD *)&buf[22] = 2049;
            *(_QWORD *)&buf[24] = v82;
            *(_WORD *)&buf[32] = 2049;
            *(_QWORD *)&buf[34] = v83;
            _os_log_impl(&dword_18F5B3000, v79, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,hopping check,prior road, %{private}lld, connected to the incoming road, %{private}lld, of the current solution road, %{private}lld", buf, 0x2Au);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
            v108 = *(_QWORD *)(a2 + 384);
            v109 = *v116;
            v110 = **(_QWORD **)(a2 + 864);
            v111 = **(_QWORD **)(a2 + 256);
            *(_DWORD *)v118 = 134349825;
            *(_QWORD *)&v118[4] = v108;
            *(_WORD *)&v118[12] = 2049;
            *(_QWORD *)&v118[14] = v109;
            *(_WORD *)&v118[22] = 2049;
            *(_QWORD *)&v118[24] = v110;
            *(_WORD *)&v118[32] = 2049;
            *(_QWORD *)&v118[34] = v111;
            v112 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::checkForSolutionHopping(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v112);
            if (v112 != buf)
              free(v112);
          }
          v84 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v113, v114)));
          v85 = vand_s8((int8x8_t)v84, (int8x8_t)vdup_lane_s32(v84, 1)).u8[0];
          sub_18F5D6004((uint64_t)&v116);
          if ((v85 & 1) != 0)
          {
LABEL_68:
            sub_18F64F950((uint64_t *)(a1 + 1784));
            v17 = (uint64_t *)(a1 + 1808);
            goto LABEL_39;
          }
        }
      }
      v86 = sub_18F5BD064((double *)(a1 + 168), *(double *)(a3 + 528), *(double *)(a3 + 536), *(double *)(a2 + 664), *(double *)(a2 + 672), *(double *)(a2 + 448)) > 35.0|| *(_DWORD *)(a1 + 1776) > 15;
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v87 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v88 = *(_QWORD *)(a2 + 384);
        v89 = *(_QWORD *)(a3 + 544);
        v90 = *(_QWORD *)(a2 + 680);
        v91 = *(_QWORD *)(a2 + 488);
        v92 = *(_QWORD *)(a3 + 352);
        *(_DWORD *)buf = 134350081;
        *(_QWORD *)&buf[4] = v88;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v89;
        *(_WORD *)&buf[22] = 2050;
        *(_QWORD *)&buf[24] = v90;
        *(_WORD *)&buf[32] = 2049;
        *(_QWORD *)&buf[34] = v91;
        v122 = 2049;
        v123 = v92;
        _os_log_impl(&dword_18F5B3000, v87, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,hopping between roads detected,priorfullSnapCourse,%{public}.1lf,currentFullSnapCourse,%{public}.1lf,priorId,%{private}llu,currentId,%{private}llu", buf, 0x34u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v98 = *(_QWORD *)(a2 + 384);
        v99 = *(_QWORD *)(a3 + 544);
        v100 = *(_QWORD *)(a2 + 680);
        v101 = *(_QWORD *)(a2 + 488);
        v102 = *(_QWORD *)(a3 + 352);
        *(_DWORD *)v118 = 134350081;
        *(_QWORD *)&v118[4] = v98;
        *(_WORD *)&v118[12] = 2050;
        *(_QWORD *)&v118[14] = v99;
        *(_WORD *)&v118[22] = 2050;
        *(_QWORD *)&v118[24] = v100;
        *(_WORD *)&v118[32] = 2049;
        *(_QWORD *)&v118[34] = v101;
        v119 = 2049;
        v120 = v102;
        v103 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::checkForSolutionHopping(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v103);
        if (v103 != buf)
          free(v103);
      }
      sub_18F64F950((uint64_t *)(a1 + 1784));
      sub_18F64F950((uint64_t *)(a1 + 1808));
      if (v86)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v93 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          v94 = *(_QWORD *)(a2 + 384);
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v94;
          _os_log_impl(&dword_18F5B3000, v93, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,reset,solution hopping detected", buf, 0xCu);
        }
        if (!sub_18F5C4AE0(115, 2))
          return 1;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v95 = *(_QWORD *)(a2 + 384);
        *(_DWORD *)v118 = 134349056;
        *(_QWORD *)&v118[4] = v95;
        v9 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallReset(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v9);
        goto LABEL_161;
      }
    }
    else
    {
LABEL_38:
      sub_18F64F950((uint64_t *)(a1 + 1808));
      v17 = (uint64_t *)(a1 + 1784);
LABEL_39:
      sub_18F64F950(v17);
    }
    return 0;
  }
  if (*(double *)(a2 + 608) > 70.0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v10 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_QWORD *)(a2 + 384);
      v12 = *(_QWORD *)(a2 + 608);
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)&buf[4] = v11;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v12;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = 0x4051800000000000;
      _os_log_impl(&dword_18F5B3000, v10, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Reseeding due to varFactor,%{public}.1lf,max,%{public}.1lf", buf, 0x20u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v13 = *(_QWORD *)(a2 + 384);
    v14 = *(_QWORD *)(a2 + 608);
    *(_DWORD *)v118 = 134349568;
    *(_QWORD *)&v118[4] = v13;
    *(_WORD *)&v118[12] = 2050;
    *(_QWORD *)&v118[14] = v14;
    *(_WORD *)&v118[22] = 2050;
    *(_QWORD *)&v118[24] = 0x4051800000000000;
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallReset(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v9);
    goto LABEL_161;
  }
  v19 = *(_DWORD *)(a1 + 1752);
  if ((v19 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 1752) = v19 + 1;
    if (v19 >= 0x1E)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v20 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v21 = *(_QWORD *)(a2 + 384);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v21;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = 30;
        _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Reseeding as unable to match,max,%{public}d", buf, 0x12u);
      }
      if (!sub_18F5C4AE0(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v22 = *(_QWORD *)(a2 + 384);
      *(_DWORD *)v118 = 134349312;
      *(_QWORD *)&v118[4] = v22;
      *(_WORD *)&v118[12] = 1026;
      *(_DWORD *)&v118[14] = 30;
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallReset(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v9);
      goto LABEL_161;
    }
  }
  if (!*(_BYTE *)(a3 + 746))
    return 0;
  *(double *)(a1 + 1760) = *(double *)(a2 + 856) + *(double *)(a1 + 1760);
  v23 = sub_18F5BD064((double *)(a1 + 168), *(double *)(a3 + 392), *(double *)(a3 + 400), *(double *)(a2 + 528), *(double *)(a2 + 536), *(double *)(a2 + 448))+ *(double *)(a1 + 1768);
  *(double *)(a1 + 1768) = v23;
  v24 = *(double *)(a1 + 1760);
  if (v24 <= 80.0)
    return 0;
  if (v23 < 0.001)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v25 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v26 = *(_QWORD *)(a2 + 384);
      v27 = *(_QWORD *)(a1 + 1768);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v26;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v27;
      _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,accumulated snap distance is ~0, %{public}.3lf", buf, 0x16u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v96 = *(_QWORD *)(a2 + 384);
    v97 = *(_QWORD *)(a1 + 1768);
    *(_DWORD *)v118 = 134349312;
    *(_QWORD *)&v118[4] = v96;
    *(_WORD *)&v118[12] = 2050;
    *(_QWORD *)&v118[14] = v97;
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallReset(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v9);
    goto LABEL_161;
  }
  v31 = v24 / v23;
  v18 = v24 / v23 > 5.0;
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
  v32 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
  {
    v33 = *(_QWORD *)(a2 + 384);
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = v33;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v31;
    _os_log_impl(&dword_18F5B3000, v32, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Reseeding due to stuck at dead-end while observations move away, ratioDist, %{public}.3lf", buf, 0x16u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v34 = *(_QWORD *)(a2 + 384);
    *(_DWORD *)v118 = 134349312;
    *(_QWORD *)&v118[4] = v34;
    *(_WORD *)&v118[12] = 2050;
    *(double *)&v118[14] = v31;
    v35 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallReset(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v35);
    if (v35 != buf)
      free(v35);
  }
  return v18;
}

void sub_18F73AFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F73B02C(double *a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  double v8;
  double v9;
  int v10;
  double v11;
  int v12;
  double *v13;
  NSObject *v14;
  double v15;
  double v16;
  NSObject *v17;
  double v18;
  NSObject *v19;
  double v20;
  double v21;
  char *v22;
  NSObject *v23;
  double v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  NSObject *v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v37;
  char *v38;
  double v39;
  uint64_t v40;
  int v41;
  char *v42;
  double v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  int v49;
  double v50;
  __int16 v51;
  _BYTE v52[10];
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  uint8_t buf[4];
  double v58;
  __int16 v59;
  _BYTE v60[10];
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 48) == *(_QWORD *)(a2 + 40))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    v14 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v15 = *(double *)(a2 + 384);
      *(_DWORD *)buf = 134349056;
      v58 = v15;
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,roadWithAdustment,number of particles are 0", buf, 0xCu);
    }
    v6 = 0;
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v16 = *(double *)(a2 + 384);
      v49 = 134349056;
      v50 = v16;
      goto LABEL_37;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 696) = 0;
    *(_QWORD *)(a2 + 688) = 0;
    if (*(_BYTE *)(a2 + 640))
    {
      if (*(_QWORD *)(a2 + 256))
      {
        v47 = 0;
        v48 = 0.0;
        v4 = a1 + 21;
        sub_18F71ACC4(a1 + 21, &v48, (double *)&v47, *(double *)(a2 + 664), *(double *)(a2 + 672), *(double *)(a2 + 448), *(double *)(a2 + 680), *(double *)(a2 + 432), *(double *)(a2 + 440));
        v5 = *(_QWORD *)(a2 + 256);
        v6 = v5 != 0;
        if (v5)
        {
          v7 = *(int *)(v5 + 20);
          v8 = 0.5;
          v9 = 1.0;
          if ((_DWORD)v7 != 9)
          {
            v10 = *(_DWORD *)(v5 + 72);
            if (v10 != 6 && v10 != 255)
            {
              v11 = *(double *)(v5 + 96);
              if (v11 < 0.000001)
              {
                v11 = 1.0;
                if ((v7 & 0xFFFFFFFE) != 8)
                {
                  v12 = *(unsigned __int8 *)(v5 + 16);
                  if (v7 > 7)
                  {
                    v11 = dbl_18F772340[v12 == 0];
                  }
                  else
                  {
                    if (v12)
                      v13 = (double *)&unk_18F775F58;
                    else
                      v13 = (double *)&unk_18F775F98;
                    v11 = v13[v7];
                  }
                }
              }
              v9 = v11 + 1.0;
              v8 = v11 * 0.5 + 1.0;
            }
          }
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v23 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            v24 = *(double *)(a2 + 384);
            v25 = *(_QWORD *)(a2 + 256);
            v26 = *(_DWORD *)(v25 + 20);
            LODWORD(v25) = *(unsigned __int8 *)(v25 + 16);
            *(_DWORD *)buf = 134350080;
            v58 = v24;
            v59 = 1026;
            *(_DWORD *)v60 = v26;
            *(_WORD *)&v60[4] = 1026;
            *(_DWORD *)&v60[6] = v25;
            v61 = 2050;
            v62 = v9;
            v63 = 2050;
            v64 = v48;
            _os_log_impl(&dword_18F5B3000, v23, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,frc,%{public}d,oneway,%{public}d,roadWidth,%{public}.1lf,acrossTrack,%{public}.3lf", buf, 0x2Cu);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
            v39 = *(double *)(a2 + 384);
            v40 = *(_QWORD *)(a2 + 256);
            v41 = *(_DWORD *)(v40 + 20);
            LODWORD(v40) = *(unsigned __int8 *)(v40 + 16);
            v49 = 134350080;
            v50 = v39;
            v51 = 1026;
            *(_DWORD *)v52 = v41;
            *(_WORD *)&v52[4] = 1026;
            *(_DWORD *)&v52[6] = v40;
            v53 = 2050;
            v54 = v9;
            v55 = 2050;
            v56 = v48;
            v42 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::adjustSolutionforRoadWidth(MMFilterData &)", "CoreLocation: %s\n", v42);
            if (v42 != (char *)buf)
              free(v42);
          }
          if (v9 >= 0.000001)
          {
            v27 = *(_QWORD *)(a2 + 528);
            v45 = *(_QWORD *)(a2 + 536);
            v46 = v27;
            v28 = a1[234];
            if (v28 < 0.0 || vabdd_f64(*(double *)(a2 + 400), v28) > 6.0)
            {
              v29 = *(_QWORD *)(a2 + 256);
              if (!v29 || (*(_DWORD *)(v29 + 20) & 0xFFFFFFFE) != 8)
              {
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                v30 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                {
                  v31 = v9 + a1[2];
                  *(_DWORD *)buf = 134349312;
                  v58 = v9;
                  v59 = 2050;
                  *(double *)v60 = v31;
                  _os_log_impl(&dword_18F5B3000, v30, OS_LOG_TYPE_DEBUG, "CLMMPED,Road width inflated from,%{public}.1lf,to,%{public}.1lf", buf, 0x16u);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                  v43 = v9 + a1[2];
                  v49 = 134349312;
                  v50 = v9;
                  v51 = 2050;
                  *(double *)v52 = v43;
                  v44 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::adjustSolutionforRoadWidth(MMFilterData &)", "CoreLocation: %s\n", v44);
                  if (v44 != (char *)buf)
                    free(v44);
                }
                v8 = v8 + a1[2] * 0.5;
              }
            }
            v32 = fabs(v48);
            if (v32 >= v8)
            {
              if (v48 >= 0.0)
                v35 = -(v32 - v8);
              else
                v35 = v32 - v8;
              sub_18F71AA00(v4, (double *)&v46, (double *)&v45, *(double *)(a2 + 432), *(double *)(a2 + 440), *(double *)(a2 + 448), *(double *)(a2 + 680), v35);
              *(_DWORD *)(a2 + 656) = 2;
              v34 = v45;
              v33 = v46;
              *(_QWORD *)(a2 + 688) = v46;
              *(_QWORD *)(a2 + 696) = v34;
            }
            else
            {
              v33 = *(_QWORD *)(a2 + 432);
              v34 = *(_QWORD *)(a2 + 440);
            }
            *(_QWORD *)(a2 + 528) = v33;
            *(_QWORD *)(a2 + 536) = v34;
          }
        }
        return v6;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v19 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        v20 = *(double *)(a2 + 384);
        *(_DWORD *)buf = 134349056;
        v58 = v20;
        _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,roadWithAdustment,road is nullptr", buf, 0xCu);
      }
      v6 = 0;
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v21 = *(double *)(a2 + 384);
        v49 = 134349056;
        v50 = v21;
LABEL_37:
        v22 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::adjustSolutionforRoadWidth(MMFilterData &)", "CoreLocation: %s\n", v22);
        if (v22 != (char *)buf)
          free(v22);
        return 0;
      }
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v17 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v18 = *(double *)(a2 + 384);
        *(_DWORD *)buf = 134349056;
        v58 = v18;
        _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,roadWithAdustment,snap invalid or frc = 9", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
        v37 = *(double *)(a2 + 384);
        v49 = 134349056;
        v50 = v37;
        v38 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::adjustSolutionforRoadWidth(MMFilterData &)", "CoreLocation: %s\n", v38);
        if (v38 != (char *)buf)
          free(v38);
      }
      return 1;
    }
  }
  return v6;
}

uint64_t sub_18F73B938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  double v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  double v32;
  NSObject *v33;
  char v34;
  char v35;
  BOOL v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  NSObject *v41;
  NSObject *v42;
  double v43;
  double v44;
  NSObject *v45;
  char *v46;
  char v47;
  double v48;
  double v49;
  char v50;
  double v51;
  double v52;
  BOOL v53;
  double v54;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  NSObject *v60;
  uint64_t v61;
  NSObject *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  void *v66[2];
  char v67;
  void *v68[2];
  char v69;
  void *v70[2];
  char v71;
  _BYTE v72[112];
  unint64_t v73;
  void *v74[2];
  char v75;
  void *v76[2];
  char v77;
  uint64_t v78[3];
  float v79;
  __int128 v80;
  void *v81[2];
  char v82;
  void *__p[2];
  char v84;
  void *v85[2];
  char v86;
  _BYTE v87[9];
  double v88;
  double v89;
  _BYTE v90[112];
  double v91;
  double v92;
  uint64_t v93;
  _BYTE v94[80];
  _BYTE v95[24];
  int v96;
  uint64_t v97;
  __int16 v98;
  _BYTE v99[18];
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  __int16 v122;
  int v123;
  __int16 v124;
  double v125;
  __int16 v126;
  int v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  double v131;
  __int16 v132;
  int v133;
  uint8_t buf[4];
  uint64_t v135;
  __int16 v136;
  _BYTE v137[18];
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  __int16 v152;
  uint64_t v153;
  __int16 v154;
  int v155;
  __int16 v156;
  int v157;
  __int16 v158;
  int v159;
  __int16 v160;
  int v161;
  __int16 v162;
  double v163;
  __int16 v164;
  int v165;
  __int16 v166;
  uint64_t v167;
  __int16 v168;
  double v169;
  __int16 v170;
  int v171;
  uint64_t v172;

  v3 = 0;
  v172 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 1968) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2056) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2064) = 0xBFF0000000000000;
  *(_QWORD *)v94 = 0xBFF0000000000000;
  v4 = a1 + 1968;
  *(_DWORD *)(a1 + 2048) = 0;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_QWORD *)(a1 + 2037) = 0;
  *(_DWORD *)v95 = 0;
  memset(&v94[8], 0, 69);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v95[8] = _Q0;
  if (*(double *)(a3 + 248) > 0.0)
  {
    v13 = (_QWORD *)(a2 + 256);
    v14 = *(_QWORD *)(a2 + 384);
    v93 = v14;
    v15 = *(double *)(a2 + 400);
    v16 = -1.0;
    if (v15 >= 0.0)
    {
      v17 = *(double *)(a3 + 264);
      _NF = v17 < 0.0;
      v16 = vabdd_f64(v15, v17);
      if (_NF)
        v16 = -1.0;
    }
    if (*v13)
    {
      if (v16 > 0.0)
      {
        if (v16 > 1.5)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v18 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            v135 = v14;
            _os_log_impl(&dword_18F5B3000, v18, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,timeDiff too large,DOT", buf, 0xCu);
          }
          if (!sub_18F5C4AE0(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
            goto LABEL_77;
LABEL_170:
          dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
LABEL_77:
          v96 = 134349056;
          v97 = v14;
          v31 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v31);
          goto LABEL_110;
        }
        if (!*(_BYTE *)(a2 + 640) || *(_BYTE *)(a2 + 641))
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v24 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            v135 = v14;
            _os_log_impl(&dword_18F5B3000, v24, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, currentCrumb invalid", buf, 0xCu);
          }
          if (!sub_18F5C4AE0(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
            goto LABEL_77;
          goto LABEL_170;
        }
        if (!*(_BYTE *)(a3 + 504) || *(_BYTE *)(a3 + 505))
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v25 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            v135 = v14;
            _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, priorCrumb invalid", buf, 0xCu);
          }
          if (!sub_18F5C4AE0(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
            goto LABEL_77;
          goto LABEL_170;
        }
        v22 = *(double *)(a1 + 2272);
        if (v22 > 0.0 && vabdd_f64(v15, v22 + -1.0) < 0.9)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v23 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            v135 = v14;
            _os_log_impl(&dword_18F5B3000, v23, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT,feedback interval check", buf, 0xCu);
          }
          if (!sub_18F5C4AE0(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
            goto LABEL_77;
          goto LABEL_170;
        }
        if (*(_BYTE *)(a1 + 1064) && *(double *)(a1 + 1072) < 36.0)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v26 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            v27 = *(unsigned __int8 *)(a1 + 1064);
            v28 = *(_QWORD *)(a1 + 1072);
            *(_DWORD *)buf = 134349568;
            v135 = v14;
            v136 = 1026;
            *(_DWORD *)v137 = v27;
            *(_WORD *)&v137[4] = 2050;
            *(_QWORD *)&v137[6] = v28;
            _os_log_impl(&dword_18F5B3000, v26, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, too close to prior intersection,transitiondetected,%{public}d,dist,%{public}.2lf", buf, 0x1Cu);
          }
          if (!sub_18F5C4AE0(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v29 = *(unsigned __int8 *)(a1 + 1064);
          v30 = *(_QWORD *)(a1 + 1072);
          v96 = 134349568;
          v97 = v14;
          v98 = 1026;
          *(_DWORD *)v99 = v29;
          *(_WORD *)&v99[4] = 2050;
          *(_QWORD *)&v99[6] = v30;
          v31 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v31);
          goto LABEL_110;
        }
        v32 = fmod(*(double *)(a2 + 544) - *(double *)(a2 + 680), 360.0);
        if (v32 < 0.0)
          v32 = v32 + 360.0;
        if (v32 > 180.0)
          v32 = v32 + -360.0;
        if (fabs(v32) > 1.0)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v33 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            v135 = v14;
            _os_log_impl(&dword_18F5B3000, v33, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, course not aligned to full snap", buf, 0xCu);
          }
          if (!sub_18F5C4AE0(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
            goto LABEL_77;
          goto LABEL_170;
        }
        v92 = -1.0;
        if ((sub_18F72F50C(&v93, (double *)(a2 + 376), (double *)(a1 + 168), &v92, *(double *)(a3 + 528), *(double *)(a3 + 536), *(double *)(a3 + 544)) & 1) == 0)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v41 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            v135 = v14;
            _os_log_impl(&dword_18F5B3000, v41, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, priorCrumb location or course diverged", buf, 0xCu);
          }
          if (!sub_18F5C4AE0(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v96 = 134349056;
          v97 = v14;
          v31 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v31);
          goto LABEL_110;
        }
        v91 = 70.0;
        sub_18F692488((uint64_t)v90, (uint64_t)v13);
        v34 = sub_18F72F988(a1, (uint64_t)v90, a2 + 376, &v91);
        sub_18F692600((uint64_t)v90);
        if ((v34 & 1) != 0)
          return 0;
        sub_18F692488((uint64_t)v87, (uint64_t)v13);
        sub_18F5D5990(v85, "lookBehindParticle");
        sub_18F5D5990(__p, "currentCrumb");
        v35 = sub_18F72E930(a1, (uint64_t *)v85, (uint64_t *)__p, (uint64_t)v87, (double *)(a2 + 376), &v92, -15.0);
        if (v84 < 0)
          operator delete(__p[0]);
        if (v86 < 0)
          operator delete(v85[0]);
        if ((v35 & 1) != 0)
        {
          sub_18F5D5990(v81, "Start");
          v36 = sub_18F60E900(a2 + 376, (double *)(a1 + 168), (uint64_t *)v81, (double *)&v94[8], (double *)&v94[16], v88, v89);
          if (v82 < 0)
            operator delete(v81[0]);
          if (v36)
          {
            v37 = sub_18F5BD064((double *)(a1 + 168), *(double *)(a2 + 288), *(double *)(a2 + 296), v88, v89, *(double *)(a2 + 448));
            sub_18F692488((uint64_t)v78, (uint64_t)v13);
            v38 = *(double *)(a2 + 472);
            if (v38 >= 0.0)
            {
              v40 = fabs(v38);
            }
            else
            {
              v39 = *(_QWORD *)(a1 + 208);
              if (v39)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v39 + 104))(v39))
                  v40 = 8.32;
                else
                  v40 = 3.0;
              }
              else
              {
                v40 = 3.0;
              }
            }
            v43 = v91;
            v44 = v91 - v40;
            if (v91 - v40 >= 18.0)
            {
              sub_18F5D5990(v76, "predictedParticle");
              sub_18F5D5990(v74, "currentCrumb");
              v47 = sub_18F72E930(a1, (uint64_t *)v76, (uint64_t *)v74, (uint64_t)v78, (double *)(a2 + 376), &v92, v40);
              if (v75 < 0)
                operator delete(v74[0]);
              if (v77 < 0)
                operator delete(v76[0]);
              if ((v47 & 1) == 0)
                goto LABEL_157;
              *(_OWORD *)&v94[24] = v80;
              v73 = 0xBFF0000000000000;
              sub_18F71BDA0(v78[0], (double *)&v94[64], (double *)&v73);
              v48 = fmax(*(double *)&v94[64], 15.0);
              if (v43 > v48 + 1.0)
              {
                sub_18F692488((uint64_t)v72, (uint64_t)v13);
                if (v43 - v48 >= v40 + 15.0)
                  v49 = v40 + 15.0;
                else
                  v49 = v43 - v48;
                sub_18F5D5990(v70, "lookAheadParticle");
                sub_18F5D5990(v68, "currentCrumb");
                v50 = sub_18F72E930(a1, (uint64_t *)v70, (uint64_t *)v68, (uint64_t)v72, (double *)(a2 + 376), &v92, v49);
                if (v69 < 0)
                  operator delete(v68[0]);
                if (v71 < 0)
                  operator delete(v70[0]);
                if ((v50 & 1) == 0)
                  goto LABEL_160;
                v51 = fmin(v37, 15.0);
                v52 = v92;
                if (v92 < 3.0)
                  v52 = 3.0;
                *(double *)&v94[40] = v51 + v49;
                *(double *)&v94[56] = v52;
                sub_18F5D5990(v66, "Predicted");
                v53 = sub_18F60E900(a2 + 376, (double *)(a1 + 168), (uint64_t *)v66, (double *)&v94[24], (double *)&v94[32], *(double *)&v94[24], *(double *)&v94[32]);
                if (v67 < 0)
                  operator delete(v66[0]);
                if (v53)
                {
                  v54 = *(double *)(a2 + 384) + 1.0;
                  *(double *)&v94[48] = v79;
                  *(double *)v94 = v54;
                  __asm { FMOV            V1.2D, #1.0 }
                  *(float64x2_t *)&v95[8] = vaddq_f64(*(float64x2_t *)(a2 + 392), _Q1);
                  v94[73] = 0;
                  v94[74] = *(_BYTE *)(v78[0] + 17);
                  v94[72] = *(_BYTE *)(v78[0] + 18);
                  v94[75] = *(_BYTE *)(v78[0] + 19);
                  v94[76] = *(_DWORD *)(a2 + 496) == 0;
                  *(_DWORD *)v95 = 2;
                  v56 = *(_QWORD *)(a1 + 208);
                  if (v56 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v56 + 104))(v56))
                    *(_DWORD *)v95 = 3;
                  v57 = *(_OWORD *)v95;
                  *(_OWORD *)(v4 + 64) = *(_OWORD *)&v94[64];
                  *(_OWORD *)(v4 + 80) = v57;
                  *(_QWORD *)(v4 + 96) = *(_QWORD *)&v95[16];
                  v58 = *(_OWORD *)&v94[16];
                  *(_OWORD *)v4 = *(_OWORD *)v94;
                  *(_OWORD *)(v4 + 16) = v58;
                  v59 = *(_OWORD *)&v94[48];
                  *(_OWORD *)(v4 + 32) = *(_OWORD *)&v94[32];
                  *(_OWORD *)(v4 + 48) = v59;
                  *(_QWORD *)(a1 + 2272) = *(_QWORD *)&v95[16];
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                  v60 = off_1EE172160;
                  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                  {
                    v61 = *(_QWORD *)(a2 + 472);
                    *(_DWORD *)buf = 134353921;
                    v135 = v14;
                    v136 = 2050;
                    *(_QWORD *)v137 = *(_QWORD *)v94;
                    *(_WORD *)&v137[8] = 2049;
                    *(_QWORD *)&v137[10] = *(_QWORD *)&v94[24];
                    v138 = 2049;
                    v139 = *(_QWORD *)&v94[32];
                    v140 = 2050;
                    v141 = *(_QWORD *)&v94[48];
                    v142 = 2050;
                    v143 = *(_QWORD *)&v94[56];
                    v144 = 2050;
                    v145 = *(_QWORD *)&v94[64];
                    v146 = 2049;
                    v147 = *(_QWORD *)&v94[8];
                    v148 = 2049;
                    v149 = *(_QWORD *)&v94[16];
                    v150 = 2050;
                    v151 = *(_QWORD *)&v94[40];
                    v152 = 2050;
                    v153 = v61;
                    v154 = 1026;
                    v155 = v94[73];
                    v156 = 1026;
                    v157 = v94[74];
                    v158 = 1026;
                    v159 = v94[72];
                    v160 = 1026;
                    v161 = v94[75];
                    v162 = 2050;
                    v163 = v48;
                    v164 = 1026;
                    v165 = v94[76];
                    v166 = 2050;
                    v167 = *(_QWORD *)&v95[16];
                    v168 = 2050;
                    v169 = v51;
                    v170 = 1026;
                    v171 = *(_DWORD *)v95;
                    _os_log_impl(&dword_18F5B3000, v60, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,DOT,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.1lf,courseUnc,%{public}.1lf,rw,%{public}.1lf,startLat,%{private}.7lf,startLon,%{private}.7lf,length,%{public}.1lf,speed,%{public}.3lf,isOneWay,%{public}d,isRailWay,%{public}d,isTunnel,%{public}d,isBridge,%{public}d,distFromIntersection,%{public}.1lf,isFreeway,%{public}d,machContTime,%{public}.3lf,lookBehindDist,%{public}.2lf,type,%{public}d", buf, 0xB2u);
                  }
                  if (sub_18F5C4AE0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE172158 != -1)
                      dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
                    v64 = *(_QWORD *)(a2 + 472);
                    v96 = 134353921;
                    v97 = v93;
                    v98 = 2050;
                    *(_QWORD *)v99 = *(_QWORD *)v94;
                    *(_WORD *)&v99[8] = 2049;
                    *(_QWORD *)&v99[10] = *(_QWORD *)&v94[24];
                    v100 = 2049;
                    v101 = *(_QWORD *)&v94[32];
                    v102 = 2050;
                    v103 = *(_QWORD *)&v94[48];
                    v104 = 2050;
                    v105 = *(_QWORD *)&v94[56];
                    v106 = 2050;
                    v107 = *(_QWORD *)&v94[64];
                    v108 = 2049;
                    v109 = *(_QWORD *)&v94[8];
                    v110 = 2049;
                    v111 = *(_QWORD *)&v94[16];
                    v112 = 2050;
                    v113 = *(_QWORD *)&v94[40];
                    v114 = 2050;
                    v115 = v64;
                    v116 = 1026;
                    v117 = v94[73];
                    v118 = 1026;
                    v119 = v94[74];
                    v120 = 1026;
                    v121 = v94[72];
                    v122 = 1026;
                    v123 = v94[75];
                    v124 = 2050;
                    v125 = v48;
                    v126 = 1026;
                    v127 = v94[76];
                    v128 = 2050;
                    v129 = *(_QWORD *)&v95[16];
                    v130 = 2050;
                    v131 = v51;
                    v132 = 1026;
                    v133 = *(_DWORD *)v95;
                    v65 = (char *)_os_log_send_and_compose_impl();
                    sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v65);
                    if (v65 != (char *)buf)
                      free(v65);
                  }
                  v3 = 1;
                }
                else
                {
LABEL_160:
                  v3 = 0;
                }
                sub_18F692600((uint64_t)v72);
                goto LABEL_158;
              }
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v62 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134349056;
                v135 = v14;
                _os_log_impl(&dword_18F5B3000, v62, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, current particle within the stopDistanceFromIntersection", buf, 0xCu);
              }
              if (!sub_18F5C4AE0(115, 2))
              {
LABEL_157:
                v3 = 0;
LABEL_158:
                sub_18F692600((uint64_t)v78);
                goto LABEL_159;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v96 = 134349056;
              v97 = v14;
              v46 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v46);
            }
            else
            {
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v45 = off_1EE172160;
              if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134349312;
                v135 = v14;
                v136 = 2050;
                *(double *)v137 = v44;
                _os_log_impl(&dword_18F5B3000, v45, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, predicted point is too close to intersection,dist,%{public}.2lf", buf, 0x16u);
              }
              if (!sub_18F5C4AE0(115, 2))
                goto LABEL_157;
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
              v96 = 134349312;
              v97 = v14;
              v98 = 2050;
              *(double *)v99 = v44;
              v46 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v46);
            }
            if (v46 != (char *)buf)
              free(v46);
            goto LABEL_157;
          }
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
          v42 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            v135 = v14;
            _os_log_impl(&dword_18F5B3000, v42, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, computeSnapCoordinatesFromRawGPSCoordinates lookBehind returned false", buf, 0xCu);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
            v96 = 134349056;
            v97 = v14;
            v63 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v63);
            if (v63 != (char *)buf)
              free(v63);
          }
        }
        v3 = 0;
LABEL_159:
        sub_18F692600((uint64_t)v87);
        return v3;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v20 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        v135 = v14;
        _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid timeDiff,DOT", buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 0))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
      {
LABEL_109:
        v96 = 134349056;
        v97 = v14;
        v31 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v31);
LABEL_110:
        if (v31 != (char *)buf)
          free(v31);
        return 0;
      }
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
      v19 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        v135 = v14;
        _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid bestParticle road,DOT", buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 0))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_109;
    }
    dispatch_once(&qword_1EE172158, &unk_1E2990BF0);
    goto LABEL_109;
  }
  return v3;
}

void sub_18F73D1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_18F692600((uint64_t)&a21);
  sub_18F692600((uint64_t)&a42);
  sub_18F692600((uint64_t)&a65);
  _Unwind_Resume(a1);
}

uint64_t sub_18F73D2F8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 2248);
  if (v2)
  {
    *(_QWORD *)(a1 + 2256) = v2;
    operator delete(v2);
  }
  return sub_18F6D778C(a1);
}

void sub_18F73D328(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 2248);
  if (v2)
  {
    *(_QWORD *)(a1 + 2256) = v2;
    operator delete(v2);
  }
  sub_18F6D778C(a1);
  JUMPOUT(0x194002D30);
}

os_log_t sub_18F73D36C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

void sub_18F73D398(_QWORD *a1)
{
  if (a1)
  {
    sub_18F73D398(*a1);
    sub_18F73D398(a1[1]);
    sub_18F73D3D8((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t sub_18F73D3D8(uint64_t a1)
{
  void *v2;
  void **v4;

  sub_18F5D6004(a1 + 1112);
  v4 = (void **)(a1 + 1088);
  sub_18F6B2D54(&v4);
  if (*(char *)(a1 + 775) < 0)
    operator delete(*(void **)(a1 + 752));
  if (*(char *)(a1 + 343) < 0)
    operator delete(*(void **)(a1 + 320));
  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  return sub_18F5D6004(a1 + 32);
}

_QWORD *sub_18F73D44C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_18F73D4D0(result, a4);
    result = (_QWORD *)sub_18F73D524((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_18F73D4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_18F6B2D54(&a9);
  _Unwind_Resume(a1);
}

char *sub_18F73D4D0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x24924924924924ALL)
    sub_18F5F7864();
  result = (char *)sub_18F6B3350((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

uint64_t sub_18F73D524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v15;

  v4 = a4;
  v15 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = *(_QWORD *)v6;
      v7 = *(_QWORD *)(v6 + 8);
      *(_QWORD *)(v4 + 8) = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = *(_OWORD *)(v6 + 16);
      v11 = *(_OWORD *)(v6 + 32);
      *(_QWORD *)(v4 + 48) = *(_QWORD *)(v6 + 48);
      *(_OWORD *)(v4 + 16) = v10;
      *(_OWORD *)(v4 + 32) = v11;
      v12 = *(_OWORD *)(v6 + 56);
      v13 = *(_OWORD *)(v6 + 65);
      *(_QWORD *)(v4 + 88) = 0;
      *(_OWORD *)(v4 + 65) = v13;
      *(_OWORD *)(v4 + 56) = v12;
      *(_QWORD *)(v4 + 96) = 0;
      *(_QWORD *)(v4 + 104) = 0;
      sub_18F692CBC((_QWORD *)(v4 + 88), *(const void **)(v6 + 88), *(_QWORD *)(v6 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v6 + 96) - *(_QWORD *)(v6 + 88)) >> 3));
      v6 += 112;
      v4 = v15 + 112;
      v15 += 112;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_18F73D60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F5D6004(v9);
  sub_18F73D628((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F73D628(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(uint64_t **)(a1 + 8);
    v2 = *(uint64_t **)(a1 + 16);
    v4 = *v2;
    v5 = *v3;
    if (*v2 != *v3)
    {
      v6 = *(_QWORD *)a1;
      do
      {
        v4 -= 112;
        sub_18F6B2DD8(v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

char *sub_18F73D688(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      sub_18F5F7864();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_18F6B35DC(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

__n128 sub_18F73D790(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_18F73D7E0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  sub_18F5D6004(a1 + 864);
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(_QWORD *)(a1 + 352) = v2;
    operator delete(v2);
  }
  sub_18F5D6004(a1 + 256);
  v3 = *(void **)(a1 + 224);
  if (v3)
  {
    *(_QWORD *)(a1 + 232) = v3;
    operator delete(v3);
  }
  sub_18F5D6004(a1 + 136);
  sub_18F73D398(*(_QWORD **)(a1 + 120));
  v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    operator delete(v4);
  }
  v6 = (void **)(a1 + 40);
  sub_18F6B2D54(&v6);
  return a1;
}

_QWORD *sub_18F73D888(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t sub_18F73D8DC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_18F73D398(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_18F73D398(v2);
  }
  return a1;
}

void sub_18F73D928(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_18F73D3D8((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void sub_18F73D96C(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 112;
        sub_18F6B2DD8((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_18F73D9D8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (result)
  {
    v2 = result;
    v3 = *a2;
    v4 = a2[1];
    result = 1;
    while (1)
    {
      v5 = *(_QWORD *)(v2 + 32);
      if (v3 == v5)
        break;
      if (v3 >= v5)
      {
        if (v5 >= v3)
          return result;
LABEL_21:
        v2 += 8;
      }
LABEL_22:
      v2 = *(_QWORD *)v2;
      if (!v2)
        return 0;
    }
    if (*((_BYTE *)a2 + 16) && *(_BYTE *)(v2 + 48))
    {
      if (v4 < *(_QWORD *)(v2 + 40))
        goto LABEL_22;
    }
    else
    {
      if (*(_BYTE *)(v2 + 48))
        v6 = 0;
      else
        v6 = *((_BYTE *)a2 + 16) != 0;
      if (v6)
        goto LABEL_22;
    }
    if (*(_BYTE *)(v2 + 48) && *((_BYTE *)a2 + 16))
    {
      if (*(_QWORD *)(v2 + 40) >= v4)
        return result;
    }
    else if (!*(_BYTE *)(v2 + 48) || *((_BYTE *)a2 + 16))
    {
      return result;
    }
    goto LABEL_21;
  }
  return result;
}

_OWORD *sub_18F73DA6C(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  _OWORD *v13;
  _QWORD v20[2];
  char v21;

  v6 = a1 + 1;
  v5 = (uint64_t)a1[1];
  v7 = a1 + 1;
  v8 = (uint64_t)(a1 + 1);
  if (!v5)
    goto LABEL_25;
  v9 = *a2;
  v10 = a2[1];
  do
  {
    while (1)
    {
      v8 = v5;
      v11 = *(_QWORD *)(v5 + 32);
      if (v9 != v11)
      {
        if (v9 >= v11)
        {
          if (v11 >= v9)
            return (_OWORD *)v8;
          goto LABEL_23;
        }
        goto LABEL_15;
      }
      if (!*((_BYTE *)a2 + 16) || !*(_BYTE *)(v8 + 48))
        break;
      if (v10 >= *(_QWORD *)(v8 + 40))
        goto LABEL_17;
LABEL_15:
      v5 = *(_QWORD *)v8;
      v7 = (uint64_t **)v8;
      if (!*(_QWORD *)v8)
        goto LABEL_25;
    }
    if (*(_BYTE *)(v8 + 48))
      v12 = 0;
    else
      v12 = *((_BYTE *)a2 + 16) != 0;
    if (v12)
      goto LABEL_15;
LABEL_17:
    if (*(_BYTE *)(v8 + 48) && *((_BYTE *)a2 + 16))
    {
      if (*(_QWORD *)(v8 + 40) >= v10)
        return (_OWORD *)v8;
    }
    else if (!*(_BYTE *)(v8 + 48) || *((_BYTE *)a2 + 16))
    {
      return (_OWORD *)v8;
    }
LABEL_23:
    v5 = *(_QWORD *)(v8 + 8);
  }
  while (v5);
  v7 = (uint64_t **)(v8 + 8);
LABEL_25:
  v13 = operator new(0x4B0uLL);
  v20[1] = v6;
  v13[2] = *(_OWORD *)a3;
  *((_QWORD *)v13 + 6) = *(_QWORD *)(a3 + 16);
  bzero(v13 + 5, 0x460uLL);
  *((_QWORD *)v13 + 7) = 0xBFF0000000000000;
  v13[4] = 0u;
  *((_DWORD *)v13 + 20) = 0;
  *((_BYTE *)v13 + 84) = 1;
  v13[6] = 0u;
  v13[7] = 0u;
  v13[8] = 0u;
  *((_BYTE *)v13 + 144) = 0;
  *(_OWORD *)((char *)v13 + 152) = 0u;
  *(_OWORD *)((char *)v13 + 168) = 0u;
  *(_OWORD *)((char *)v13 + 184) = 0u;
  *((_BYTE *)v13 + 200) = 1;
  *((_QWORD *)v13 + 27) = 0;
  v13[14] = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  v13[15] = _Q1;
  v13[16] = 0u;
  *((_QWORD *)v13 + 34) = 0xBFF0000000000000;
  *((_WORD *)v13 + 244) = 0;
  *(_OWORD *)((char *)v13 + 456) = 0u;
  *(_OWORD *)((char *)v13 + 472) = 0u;
  v13[32] = 0u;
  v13[33] = 0u;
  v13[34] = 0u;
  v13[35] = 0u;
  *(_OWORD *)((char *)v13 + 571) = 0u;
  v13[37] = 0u;
  v13[38] = 0u;
  v13[39] = 0u;
  *(_OWORD *)((char *)v13 + 280) = 0u;
  *(_OWORD *)((char *)v13 + 296) = 0u;
  *(_OWORD *)((char *)v13 + 312) = 0u;
  *(_OWORD *)((char *)v13 + 328) = 0u;
  *(_OWORD *)((char *)v13 + 344) = 0u;
  *(_OWORD *)((char *)v13 + 360) = 0u;
  *(_OWORD *)((char *)v13 + 376) = 0u;
  *(_OWORD *)((char *)v13 + 392) = 0u;
  *(_OWORD *)((char *)v13 + 408) = 0u;
  *(_OWORD *)((char *)v13 + 424) = 0u;
  *(_OWORD *)((char *)v13 + 438) = 0u;
  *((_QWORD *)v13 + 81) = 0xBFF0000000000000;
  v13[41] = 0u;
  v13[42] = _Q1;
  v13[43] = 0u;
  *((_QWORD *)v13 + 88) = 0xBFF0000000000000;
  *((_WORD *)v13 + 460) = 0;
  *(_OWORD *)((char *)v13 + 888) = 0u;
  *(_OWORD *)((char *)v13 + 904) = 0u;
  *(_OWORD *)((char *)v13 + 1003) = 0u;
  v13[61] = 0u;
  v13[62] = 0u;
  v13[59] = 0u;
  v13[60] = 0u;
  v13[66] = 0u;
  v13[65] = 0u;
  v13[64] = 0u;
  *(_OWORD *)((char *)v13 + 712) = 0u;
  *(_OWORD *)((char *)v13 + 728) = 0u;
  *(_OWORD *)((char *)v13 + 744) = 0u;
  *(_OWORD *)((char *)v13 + 760) = 0u;
  *(_OWORD *)((char *)v13 + 776) = 0u;
  *(_OWORD *)((char *)v13 + 792) = 0u;
  *(_OWORD *)((char *)v13 + 808) = 0u;
  *(_OWORD *)((char *)v13 + 824) = 0u;
  *(_OWORD *)((char *)v13 + 840) = 0u;
  *(_OWORD *)((char *)v13 + 856) = 0u;
  *(_OWORD *)((char *)v13 + 870) = 0u;
  *((_QWORD *)v13 + 135) = 0xBFF0000000000000;
  *((_QWORD *)v13 + 136) = 0x3FF0000000000000;
  v13[73] = 0u;
  *((_DWORD *)v13 + 290) = 0;
  *(_OWORD *)((char *)v13 + 1144) = 0u;
  *(_OWORD *)((char *)v13 + 1128) = 0u;
  *(_OWORD *)((char *)v13 + 1112) = 0u;
  *(_OWORD *)((char *)v13 + 1096) = 0u;
  *((_BYTE *)v13 + 1184) = 1;
  *((_DWORD *)v13 + 298) = -1;
  v21 = 1;
  sub_18F62A6F8(a1, v8, v7, (uint64_t *)v13);
  v20[0] = 0;
  sub_18F73D928((uint64_t)v20);
  return v13;
}

uint64_t sub_18F73DCBC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    sub_18F73D96C((void **)a1);
    if (a4 > 0x249249249249249)
      sub_18F5F7864();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)) >= 0x124924924924924)
      v11 = 0x249249249249249;
    else
      v11 = v10;
    sub_18F73D4D0((_QWORD *)a1, v11);
    result = sub_18F73D524(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = a2 + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4);
    sub_18F73DE4C(a2, v13, (uint64_t)v9);
    result = sub_18F73D524(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = sub_18F73DE4C(a2, a3, (uint64_t)v9);
  v14 = result;
  v15 = *(_QWORD *)(a1 + 8);
  if (v15 != result)
  {
    do
    {
      v15 -= 112;
      result = sub_18F6B2DD8(v8, v15);
    }
    while (v15 != v14);
  }
  *(_QWORD *)(a1 + 8) = v14;
  return result;
}

void sub_18F73DE3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_18F73DE44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_18F73DE4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_18F623A40((_QWORD *)a3, (uint64_t *)v5);
      v6 = *(_QWORD *)(v5 + 48);
      v7 = *(_OWORD *)(v5 + 32);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v5 + 16);
      *(_OWORD *)(a3 + 32) = v7;
      *(_QWORD *)(a3 + 48) = v6;
      v8 = *(_OWORD *)(v5 + 56);
      *(_OWORD *)(a3 + 65) = *(_OWORD *)(v5 + 65);
      *(_OWORD *)(a3 + 56) = v8;
      if (a3 != v5)
        sub_18F692DD0((char *)(a3 + 88), *(char **)(v5 + 88), *(_QWORD *)(v5 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v5 + 96) - *(_QWORD *)(v5 + 88)) >> 3));
      a3 += 112;
      v5 += 112;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_18F73DEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_18F62B3EC(a3, (__int128 *)v5);
      v6 = *(_QWORD *)(v5 + 48);
      v7 = *(_OWORD *)(v5 + 32);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v5 + 16);
      *(_OWORD *)(a3 + 32) = v7;
      *(_QWORD *)(a3 + 48) = v6;
      v8 = *(_OWORD *)(v5 + 56);
      *(_OWORD *)(a3 + 65) = *(_OWORD *)(v5 + 65);
      *(_OWORD *)(a3 + 56) = v8;
      sub_18F73D790(a3 + 88, (__n128 *)(v5 + 88));
      a3 += 112;
      v5 += 112;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_18F73DF70(uint64_t *a1, _QWORD *a2)
{
  sub_18F64F950(a1);
  return sub_18F650044((uint64_t)a1, a1, a2);
}

void sub_18F73DFA8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 7);
        if (v6)
        {
          *((_QWORD *)v4 - 6) = v6;
          operator delete(v6);
        }
        v4 -= 64;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 sub_18F73E020(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __n128 result;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void **v44;
  _QWORD *v45;
  char *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  __int128 *v59;
  __int128 v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t *v68;
  __int128 v69;
  char *v70;
  uint64_t *v71;
  _QWORD v72[3];
  char i;
  uint64_t v74;
  unint64_t v75;

  if (a5 < 1)
    return result;
  v6 = a3;
  v8 = *a1;
  v9 = a2 - *a1;
  v10 = v9 >> 6;
  v11 = *a1 + (v9 & 0xFFFFFFFFFFFFFFC0);
  v13 = (uint64_t)(a1 + 2);
  v12 = a1[2];
  v14 = a1[1];
  if (a5 <= (uint64_t)(v12 - v14) >> 6)
  {
    v19 = (uint64_t)(v14 - v11) >> 6;
    if (v19 >= a5)
    {
      v21 = a3 + (a5 << 6);
      v22 = a1[1];
    }
    else
    {
      v68 = a1 + 2;
      v72[0] = v14;
      v75 = v14;
      v21 = a3 + (v19 << 6);
      *(_QWORD *)&v69 = &v75;
      *((_QWORD *)&v69 + 1) = v72;
      LOBYTE(v70) = 0;
      if (v21 == a4)
      {
        v22 = v14;
      }
      else
      {
        v67 = v10;
        v22 = v14;
        v23 = a3 + (v19 << 6);
        do
        {
          sub_18F73E548(v22, v23);
          v23 += 64;
          v22 = v72[0] + 64;
          v72[0] += 64;
        }
        while (v23 != a4);
        v10 = v67;
      }
      LOBYTE(v70) = 1;
      sub_18F73E5AC((uint64_t)&v68);
      a1[1] = v22;
      if ((uint64_t)(v14 - v11) < 1)
        return result;
    }
    v34 = v11 + (a5 << 6);
    v35 = v22 - (a5 << 6);
    v36 = v22;
    if (v35 < v14)
    {
      v36 = v22;
      do
      {
        *(_QWORD *)v36 = *(_QWORD *)v35;
        *(_QWORD *)(v36 + 16) = 0;
        *(_QWORD *)(v36 + 24) = 0;
        *(_QWORD *)(v36 + 8) = 0;
        *(_OWORD *)(v36 + 8) = *(_OWORD *)(v35 + 8);
        *(_QWORD *)(v36 + 24) = *(_QWORD *)(v35 + 24);
        *(_QWORD *)(v35 + 8) = 0;
        *(_QWORD *)(v35 + 16) = 0;
        *(_QWORD *)(v35 + 24) = 0;
        *(_OWORD *)(v36 + 32) = *(_OWORD *)(v35 + 32);
        result = *(__n128 *)(v35 + 48);
        *(__n128 *)(v36 + 48) = result;
        v36 += 64;
        v35 += 64;
      }
      while (v35 < v14);
    }
    a1[1] = v36;
    if (v22 != v34)
    {
      v37 = 0;
      v38 = (v22 - v34) >> 6;
      v39 = v8 + (v10 << 6) + (v38 << 6);
      v40 = -64 * v38;
      do
      {
        v41 = v39 + v37;
        v42 = v22 + v37;
        v44 = (void **)(v22 + v37 - 56);
        v43 = *v44;
        *(_QWORD *)(v22 + v37 - 64) = *(_QWORD *)(v39 + v37 - 64);
        if (v43)
        {
          *(_QWORD *)(v42 - 48) = v43;
          operator delete(v43);
          *v44 = 0;
          *(_QWORD *)(v22 + v37 - 48) = 0;
          *(_QWORD *)(v22 + v37 - 40) = 0;
        }
        v45 = (_QWORD *)(v41 - 56);
        *(_OWORD *)v44 = *(_OWORD *)(v41 - 56);
        *(_QWORD *)(v42 - 40) = *(_QWORD *)(v41 - 40);
        *v45 = 0;
        v45[1] = 0;
        v45[2] = 0;
        *(_OWORD *)(v42 - 32) = *(_OWORD *)(v41 - 32);
        result = *(__n128 *)(v41 - 16);
        *(__n128 *)(v42 - 16) = result;
        v37 -= 64;
      }
      while (v40 != v37);
    }
    for (; v6 != v21; v11 += 64)
    {
      *(_QWORD *)v11 = *(_QWORD *)v6;
      if (v11 != v6)
      {
        v46 = *(char **)(v11 + 8);
        v48 = *(char **)(v6 + 8);
        v47 = *(char **)(v6 + 16);
        v49 = (v47 - v48) >> 4;
        v50 = *(_QWORD *)(v11 + 24);
        if (v49 <= (v50 - (uint64_t)v46) >> 4)
        {
          v53 = (_QWORD *)(v11 + 16);
          v54 = *(char **)(v11 + 16);
          v57 = (v54 - v46) >> 4;
          if (v57 >= v49)
          {
            v64 = *(_QWORD *)(v11 + 8);
            if (v48 != v47)
            {
              v65 = *(_OWORD **)(v11 + 8);
              do
              {
                v66 = *(_OWORD *)v48;
                v48 += 16;
                *v65++ = v66;
                v64 += 16;
              }
              while (v48 != v47);
            }
            v56 = (char *)(v64 - (_QWORD)v46);
            v54 = v46;
          }
          else
          {
            if (v54 != v46)
            {
              v58 = 16 * v57;
              v59 = *(__int128 **)(v6 + 8);
              do
              {
                v60 = *v59++;
                *(_OWORD *)v46 = v60;
                v46 += 16;
                v58 -= 16;
              }
              while (v58);
            }
            v61 = &v48[16 * v57];
            v62 = v54;
            if (v61 != v47)
            {
              v63 = v54;
              do
              {
                *(_QWORD *)v63 = *(_QWORD *)v61;
                *((_QWORD *)v63 + 1) = *((_QWORD *)v61 + 1);
                v62 += 16;
                v61 += 16;
                v63 += 16;
              }
              while (v61 != v47);
            }
            v56 = (char *)(v62 - v54);
          }
        }
        else
        {
          if (v46)
          {
            *(_QWORD *)(v11 + 16) = v46;
            operator delete(v46);
            v50 = 0;
            *(_QWORD *)(v11 + 8) = 0;
            *(_QWORD *)(v11 + 16) = 0;
            *(_QWORD *)(v11 + 24) = 0;
          }
          if (v47 - v48 < 0)
            sub_18F5F7864();
          v51 = v50 >> 3;
          if (v50 >> 3 <= v49)
            v51 = (v47 - v48) >> 4;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
            v52 = 0xFFFFFFFFFFFFFFFLL;
          else
            v52 = v51;
          sub_18F62AB24((_QWORD *)(v11 + 8), v52);
          v53 = (_QWORD *)(v11 + 16);
          v54 = *(char **)(v11 + 16);
          v55 = v54;
          if (v48 != v47)
          {
            v55 = *(char **)(v11 + 16);
            do
            {
              *(_QWORD *)v55 = *(_QWORD *)v48;
              *((_QWORD *)v55 + 1) = *((_QWORD *)v48 + 1);
              v55 += 16;
              v48 += 16;
            }
            while (v48 != v47);
          }
          v56 = (char *)(v55 - v54);
        }
        *v53 = &v56[(_QWORD)v54];
      }
      *(_OWORD *)(v11 + 32) = *(_OWORD *)(v6 + 32);
      result = *(__n128 *)(v6 + 48);
      *(__n128 *)(v11 + 48) = result;
      v6 += 64;
    }
  }
  else
  {
    v15 = a5 + ((uint64_t)(v14 - v8) >> 6);
    if (v15 >> 58)
      sub_18F5F7864();
    v16 = v12 - v8;
    if (v16 >> 5 > v15)
      v15 = v16 >> 5;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFC0)
      v17 = 0x3FFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    v71 = a1 + 2;
    if (v17)
      v18 = (uint64_t *)sub_18F62CE70((uint64_t)(a1 + 2), v17);
    else
      v18 = 0;
    v24 = (uint64_t)&v18[8 * v10];
    v68 = v18;
    *(_QWORD *)&v69 = v24;
    *((_QWORD *)&v69 + 1) = v24;
    v70 = (char *)&v18[8 * v17];
    v25 = a5 << 6;
    v26 = v24 + (a5 << 6);
    do
    {
      sub_18F73E548(v24, v6);
      v24 += 64;
      v6 += 64;
      v25 -= 64;
    }
    while (v25);
    *((_QWORD *)&v69 + 1) = v26;
    sub_18F62CEA4(v13, v11, v11, *a1, *a1, v69, v69);
    *(_QWORD *)&v69 = v27;
    v28 = a1[1];
    v29 = *((_QWORD *)&v69 + 1);
    v75 = *((_QWORD *)&v69 + 1);
    v74 = *((_QWORD *)&v69 + 1);
    v72[0] = v13;
    v72[1] = &v74;
    v72[2] = &v75;
    for (i = 0; v11 != v28; v75 += 64)
    {
      sub_18F62CD18(v13, v29, v11);
      v11 += 64;
      v29 = v75 + 64;
    }
    i = 1;
    sub_18F73E5AC((uint64_t)v72);
    v30 = *(_OWORD *)a1;
    v31 = (uint64_t)v70;
    *a1 = v69;
    a1[1] = v29;
    v69 = v30;
    v32 = a1[2];
    a1[2] = v31;
    v70 = (char *)v32;
    v68 = (uint64_t *)v30;
    sub_18F62CFE4((uint64_t)&v68);
  }
  return result;
}

void sub_18F73E504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_18F62CFE4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_18F73E548(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_18F62CD7C((char *)(a1 + 8), *(_QWORD **)(a2 + 8), *(_QWORD **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  result = *(double *)(a2 + 56);
  *(double *)(a1 + 56) = result;
  return result;
}

uint64_t sub_18F73E5AC(uint64_t a1)
{
  uint64_t v3;
  uint64_t i;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 64)
    {
      v5 = *(void **)(i - 56);
      if (v5)
      {
        *(_QWORD *)(i - 48) = v5;
        operator delete(v5);
      }
    }
  }
  return a1;
}

void sub_18F73FDAC(_QWORD *a1)
{
  NSObject *v1;
  char *v2;
  void *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  int v24;
  NSObject *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint8_t buf[4];
  _BYTE v34[14];
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a1[325])
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v1 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_INFO, "CLMM,Pedestrian,Maps API already initialized", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual void CLGeoMapFeatureAccessGeometryPedestrian::initializeMapsAPI()", "CoreLocation: %s\n", v2);
    if (v2 == (char *)buf)
      return;
LABEL_35:
    free(v2);
    return;
  }
  v3 = a1;
  a1[326] = dispatch_queue_create("cl_geo_access_map_feature_geometry_pedestrian_queue", 0);
  v4 = objc_alloc(MEMORY[0x1E0D27198]);
  v7 = (void *)objc_msgSend_initWithQueue_(v4, v5, *((_QWORD *)v3 + 326), v6);
  *((_QWORD *)v3 + 325) = v7;
  if (v7)
  {
    objc_msgSend_setAllowNetworkTileLoad_(v7, v8, 1, v9);
    objc_msgSend_setFlipNegativeTravelDirectionRoads_(*((void **)v3 + 325), v10, 1, v11);
    objc_msgSend_setVisitDoubleTravelDirectionRoadsTwice_(*((void **)v3 + 325), v12, 0, v13);
    objc_msgSend_setAllowStaleData_(*((void **)v3 + 325), v14, 1, v15);
    objc_msgSend_setAllowOfflineData_(*((void **)v3 + 325), v16, 1, v17);
    v18 = (const char *)&OBJC_METACLASS___CLHeadingInternal;
    if (qword_1EE172158 == -1)
      goto LABEL_13;
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v25 = off_1EE172160;
    v18 = "assert";
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v34 = 0;
      *(_WORD *)&v34[4] = 2082;
      *(_QWORD *)&v34[6] = "";
      v35 = 2082;
      v36 = "assert";
      v37 = 2081;
      v38 = "fGEOMapFeatureAccess != nullptr";
      _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    }
    v26 = off_1EE172160;
    if (os_signpost_enabled((os_log_t)off_1EE172160))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v34 = 0;
      *(_WORD *)&v34[4] = 2082;
      *(_QWORD *)&v34[6] = "";
      v35 = 2082;
      v36 = "assert";
      v37 = 2081;
      v38 = "fGEOMapFeatureAccess != nullptr";
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed,fGEOMapFeatureAccess==nil", "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    }
    v3 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v34 = 0;
      *(_WORD *)&v34[4] = 2082;
      *(_QWORD *)&v34[6] = "";
      v35 = 2082;
      v36 = "assert";
      v37 = 2081;
      v38 = "fGEOMapFeatureAccess != nullptr";
      _os_log_impl(&dword_18F5B3000, (os_log_t)v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    v31 = 50;
    v32 = "initializeMapsAPI";
    v30 = "/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Daemon/Positioning/MapMatching/CLGeoMapFeatureAcce"
          "ssGeometryPedestrian.mm";
    abort_report_np();
  }
  dispatch_once(&qword_1EE172158, &unk_1E2990C10);
LABEL_13:
  v19 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEFAULT))
  {
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v3 + 104))(v3))
      v23 = "Cycling";
    else
      v23 = "Pedestrian";
    v24 = objc_msgSend_allowStaleData(*((void **)v3 + 325), v20, v21, v22, v30, v31, v32);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)v34 = v23;
    *(_WORD *)&v34[8] = 1026;
    *(_DWORD *)&v34[10] = v24;
    _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_DEFAULT, "CLMMPED,%{public}s,using maps API,stale data,%{public}d", buf, 0x12u);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (*((_QWORD *)v18 + 43) != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    (*(uint64_t (**)(void *))(*(_QWORD *)v3 + 104))(v3);
    objc_msgSend_allowStaleData(*((void **)v3 + 325), v27, v28, v29, v30);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual void CLGeoMapFeatureAccessGeometryPedestrian::initializeMapsAPI()", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      goto LABEL_35;
  }
}

BOOL sub_18F740364(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  double v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t *v15;
  uint64_t *v16;
  double *v17;
  unint64_t v23;
  double *v24;
  unint64_t v25;
  uint64_t *v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  _BOOL4 v49;
  double v50;
  NSObject *v51;
  int v52;
  NSObject *v53;
  NSObject *v54;
  double v55;
  float v56;
  float v57;
  NSObject *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  NSObject *v65;
  char *v66;
  NSObject *v67;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  void *context;
  uint64_t *v74;
  __int128 v75;
  double v76;
  unint64_t v77;
  __n128 v78;
  float v79;
  __int16 v80;
  float v81;
  __int128 v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  double v87;
  double v88[2];
  double v89;
  _OWORD v90[2];
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[64];
  __int16 v104;
  uint64_t v105;
  int v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[80];
  uint64_t v111;
  unint64_t v112;
  uint8_t buf[1640];
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 32))
  {
    context = (void *)MEMORY[0x1940032C4]();
    v8 = *(double *)(a3 + 64);
    v76 = *(double *)(a3 + 56);
    v84 = 0;
    v85 = 0;
    v86 = 0;
    if (*(_BYTE *)(a1 + 33))
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        v65 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v65, OS_LOG_TYPE_ERROR, "CLMMPED,roadsWithinDistance,fRoadGeometryBuffer is unexpectedly nullptr", buf, 2u);
        }
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_106;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        LOWORD(v90[0]) = 0;
        v66 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v66);
        goto LABEL_121;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v9 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v10 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 336) - *(_QWORD *)(*(_QWORD *)(a1 + 16) + 328)) >> 4;
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v10;
        _os_log_impl(&dword_18F5B3000, v9, OS_LOG_TYPE_DEBUG, "CLMMPED,RoadBuffer,findRoadsNear fRoadBuffer.size,%{public}lu", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        v71 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 336) - *(_QWORD *)(*(_QWORD *)(a1 + 16) + 328)) >> 4;
        LODWORD(v90[0]) = 134349056;
        *(_QWORD *)((char *)v90 + 4) = v71;
        v72 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v72);
        if (v72 != (char *)buf)
          free(v72);
      }
      if ((sub_18F620640(*(_QWORD *)(a1 + 16), (uint64_t)&v84, 1, *(double *)(a3 + 56), *(double *)(a3 + 64), a4) & 1) == 0)
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        v11 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v11, OS_LOG_TYPE_DEBUG, "CLMMPED,Warning,RoadBuffer,findRoadsNear returned false", buf, 2u);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_106;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 == -1)
          goto LABEL_120;
LABEL_123:
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
LABEL_120:
        LOWORD(v90[0]) = 0;
        v66 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v66);
LABEL_121:
        if (v66 != (char *)buf)
          free(v66);
LABEL_106:
        v14 = 0;
        goto LABEL_107;
      }
    }
    else if (!sub_18F74137C(a1, (uint64_t)&v84, a3, a4))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v67 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v67, OS_LOG_TYPE_DEBUG, "CLMMPED,Warning,MapsAPI,findRoadsNear returned false", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_106;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_120;
      goto LABEL_123;
    }
    v15 = v84;
    v16 = v85;
    if (v84 == v85)
    {
      v14 = 1;
      goto LABEL_107;
    }
    v17 = (double *)(a1 + 56);
    __asm { FMOV            V0.2D, #-1.0 }
    v75 = _Q0;
    v74 = v85;
LABEL_26:
    v78 = 0uLL;
    v79 = 0.0;
    v80 = 1;
    v81 = 0.0;
    v83 = 0;
    v82 = 0uLL;
    sub_18F623A40(&v78, v15);
    v23 = v78.n128_u64[0];
    if (!v78.n128_u64[0])
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v51 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v51, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,roadsWithinDistance returned nullptr", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        LOWORD(v90[0]) = 0;
        v62 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v62);
        if (v62 != (char *)buf)
          free(v62);
      }
      sub_18F64F950(a2);
      v52 = 1;
      goto LABEL_73;
    }
    v90[0] = 0uLL;
    v90[1] = v75;
    v91 = 0;
    v92 = 0;
    v93 = 0xBFF0000000000000;
    v105 = 0;
    v106 = 0;
    memset(&v103[32], 0, 32);
    v104 = 0;
    v107 = 0u;
    v108 = 0u;
    v109 = 0u;
    memset(v110, 0, 27);
    memset(&v110[32], 0, 48);
    v102 = 0u;
    memset(v103, 0, 30);
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v112 = 0xBFF0000000000000;
    v111 = 0;
    v24 = *(double **)(v78.n128_u64[0] + 136);
    v25 = *(_QWORD *)(v78.n128_u64[0] + 144) - (_QWORD)v24;
    v77 = 0xBFF0000000000000;
    if ((int)(v25 >> 4) <= 1)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v53 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v53, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        LOWORD(v87) = 0;
        v63 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "CoreLocation: %s\n", v63);
        if (v63 != (char *)buf)
          free(v63);
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v54 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v54, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,findClosestPointOnRoad returned false", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_70;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_90;
      goto LABEL_92;
    }
    v26 = a2;
    v27 = *v24;
    v28 = v24[1];
    *(_OWORD *)buf = 0uLL;
    v29 = 0.0;
    sub_18F5BD37C(v17, (double *)buf, (double *)&buf[8], &v87, v76, v8, 0.0, v27, v28, 0.0);
    v30 = 0;
    v31 = *(double *)&buf[8];
    v32 = *(double *)buf;
    v33 = (v25 >> 4) - 1;
    v34 = -1.0;
    v35 = 0.0;
    while (1)
    {
      v36 = v32;
      v37 = v31;
      v38 = *(_QWORD *)(v23 + 136) + v30;
      v39 = *(double *)(v38 + 16);
      v40 = *(double *)(v38 + 24);
      v87 = 0.0;
      v88[0] = 0.0;
      sub_18F5BD37C(v17, &v87, v88, &v89, v76, v8, 0.0, v39, v40, 0.0);
      v32 = v87;
      v31 = v88[0];
      v41 = (v36 - v87) * (v36 - v87) + (v37 - v88[0]) * (v37 - v88[0]);
      v42 = 0.0 - v36;
      if (v41 >= 0.001)
      {
        v44 = ((0.0 - v37) * (v88[0] - v37) + v42 * (v87 - v36)) / v41;
        if (v44 < 0.0)
        {
          v46 = v42 * v42 + (0.0 - v37) * (0.0 - v37);
          v44 = 0.0;
          goto LABEL_36;
        }
        if (v44 > 1.0)
        {
          v46 = (0.0 - v87) * (0.0 - v87) + (0.0 - v88[0]) * (0.0 - v88[0]);
          v44 = 1.0;
          goto LABEL_36;
        }
        v43 = (0.0 - (v36 + (v87 - v36) * v44)) * (0.0 - (v36 + (v87 - v36) * v44));
        v45 = 0.0 - (v37 + (v88[0] - v37) * v44);
      }
      else
      {
        v43 = v42 * v42;
        v44 = 0.0;
        v45 = 0.0 - v37;
      }
      v46 = v43 + v45 * v45;
LABEL_36:
      v47 = sqrt(v41);
      v48 = sqrt(v46);
      v49 = v34 < 0.0;
      if (v48 < v34)
        v49 = 1;
      v50 = v35 + v47 * v44;
      if (v49)
      {
        v34 = v48;
        v29 = v50;
      }
      v35 = v35 + v47;
      v30 += 16;
      if (!--v33)
      {
        v55 = v29 / v35;
        if (v35 < 0.001)
          v55 = 0.0;
        v77 = *(_QWORD *)&v55;
        a2 = v26;
        v16 = v74;
        if ((sub_18F6F0B68(a1, (uint64_t)v90, (uint64_t *)&v78, 1, (double *)&v77, 1) & 1) == 0)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990C10);
          v58 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v58, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,interpolateOnRoad returned false", buf, 2u);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_70;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
          {
LABEL_90:
            LOWORD(v87) = 0;
            v64 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v64);
            if (v64 != (char *)buf)
              free(v64);
LABEL_70:
            v52 = 1;
            goto LABEL_71;
          }
LABEL_92:
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
          goto LABEL_90;
        }
        v56 = v34;
        v79 = v56;
        v82 = v100;
        v57 = *(double *)&v101;
        v81 = v57;
        v83 = v77;
        v80 = 1;
        sub_18F64A3C4((__n128 **)a2, &v78);
        v52 = 0;
LABEL_71:
        if (SHIBYTE(v99) < 0)
          operator delete(*((void **)&v98 + 1));
LABEL_73:
        v59 = (std::__shared_weak_count *)v78.n128_u64[1];
        if (v78.n128_u64[1])
        {
          v60 = (unint64_t *)(v78.n128_u64[1] + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v14 = v52 == 0;
        if (v52 || (v15 += 2, v15 == v16))
        {
LABEL_107:
          *(_QWORD *)buf = &v84;
          sub_18F62AB98((void ***)buf);
          objc_autoreleasePoolPop(context);
          return v14;
        }
        goto LABEL_26;
      }
    }
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990C10);
  v12 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    v13 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = v13;
    _os_log_impl(&dword_18F5B3000, v12, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v69 = *(_QWORD *)(a1 + 8);
    LODWORD(v90[0]) = 134349056;
    *(_QWORD *)((char *)v90 + 4) = v69;
    v70 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v70);
    if (v70 != (char *)buf)
      free(v70);
  }
  return 0;
}

void sub_18F741314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  a37 = &a30;
  sub_18F62AB98((void ***)&a37);
  _Unwind_Resume(a1);
}

BOOL sub_18F74137C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _OWORD *v13;
  char *v14;
  __int128 v15;
  void *v16;
  NSObject *v17;
  dispatch_time_t v18;
  intptr_t v19;
  NSObject *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  NSObject *v29;
  _BOOL8 v30;
  NSObject *v31;
  BOOL v32;
  const char *v33;
  _QWORD *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char isRoadPedestrianNavigable;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  char isRail;
  char v52;
  char v53;
  int v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  int v61;
  int v62;
  NSObject *v63;
  uint64_t i;
  char *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  NSObject *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  void *context;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[6];
  _QWORD *v85;
  __int128 v86;
  double v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  void (*v96)(uint64_t);
  dispatch_group_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  char v101;
  _BYTE v102[128];
  _BYTE v103[24];
  _BYTE *v104;
  _BYTE v105[24];
  _BYTE *v106;
  int v107;
  uint64_t v108;
  uint8_t buf[1632];
  __int128 v110;
  void (*v111)(_QWORD *, void *);
  void *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v87 = a4;
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v25 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v26 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v26;
      _os_log_impl(&dword_18F5B3000, v25, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v27 = *(_QWORD *)(a1 + 8);
    LODWORD(v110) = 134349056;
    *(_QWORD *)((char *)&v110 + 4) = v27;
    v28 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistanceLite(std::vector<CLMapRoadPtr> &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v28);
    goto LABEL_113;
  }
  if (*(_QWORD *)(a1 + 2600))
  {
    context = (void *)MEMORY[0x1940032C4]();
    v86 = *(_OWORD *)(a3 + 56);
    v10 = (void *)objc_msgSend_array(MEMORY[0x1E0C99DE8], v7, v8, v9);
    v11 = MEMORY[0x1E0C809B0];
    v84[0] = MEMORY[0x1E0C809B0];
    v84[1] = 3221225472;
    v84[2] = sub_18F7420CC;
    v84[3] = &unk_1E2992F48;
    v84[4] = v10;
    v84[5] = a1;
    v85 = v84;
    v12 = operator new(0x28uLL);
    *v12 = &off_1E298DDF0;
    v12[1] = a1;
    v13 = v12 + 1;
    v12[2] = &v86;
    v12[3] = &v87;
    v12[4] = &v85;
    v106 = v12;
    ++*(_DWORD *)(a1 + 36);
    v14 = (char *)operator new(0x28uLL);
    *(_QWORD *)v14 = &off_1E298DDF0;
    v15 = v13[1];
    *(_OWORD *)(v14 + 8) = *v13;
    *(_OWORD *)(v14 + 24) = v15;
    v104 = v14;
    v98 = 0;
    v99 = &v98;
    v100 = 0x2020000000;
    v101 = 0;
    v92 = 0;
    v93 = &v92;
    v94 = 0x3052000000;
    v95 = sub_18F5CD86C;
    v96 = sub_18F5CD7D4;
    v97 = 0;
    v97 = dispatch_group_create();
    v88 = 0;
    v89 = &v88;
    v90 = 0x2020000000;
    v91 = 0;
    *(_QWORD *)&v110 = v11;
    *((_QWORD *)&v110 + 1) = 3221225472;
    v111 = sub_18F7472E4;
    v112 = &unk_1E2991CF0;
    v113 = &v98;
    v114 = &v92;
    v115 = &v88;
    dispatch_group_enter((dispatch_group_t)v93[5]);
    *(_QWORD *)buf = &v110;
    if (!v104)
      sub_18F64F8F4();
    v16 = (void *)(*(uint64_t (**)(_BYTE *, uint8_t *))(*(_QWORD *)v104 + 48))(v104, buf);
    v17 = v93[5];
    v18 = dispatch_time(0, 100000000);
    v19 = dispatch_group_wait(v17, v18);
    v89[3] = v19;
    if (v19)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v20 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        v21 = v89[3];
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v21;
        _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_DEBUG, "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        v75 = v89[3];
        v107 = 134349056;
        v108 = v75;
        v76 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "CoreLocation: %s\n", v76);
        if (v76 != (char *)buf)
          free(v76);
      }
      objc_msgSend_cancel(v16, v22, v23, v24);
    }
    else if (v93[5])
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v31 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v31, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        LOWORD(v107) = 0;
        v78 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "CoreLocation: %s\n", v78);
        if (v78 != (char *)buf)
          free(v78);
      }

      v93[5] = 0;
    }
    if (v89[3])
      v32 = 0;
    else
      v32 = *((_BYTE *)v99 + 24) == 0;
    _Block_object_dispose(&v88, 8);
    _Block_object_dispose(&v92, 8);
    _Block_object_dispose(&v98, 8);
    v34 = v104;
    if (v104 == v103)
    {
      v35 = 4;
      v34 = v103;
    }
    else
    {
      if (!v104)
        goto LABEL_40;
      v35 = 5;
    }
    (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_40:
    if (v32)
    {
      *(_DWORD *)(a1 + 40) = 0;
      v80 = 0u;
      v81 = 0u;
      v82 = 0u;
      v83 = 0u;
      v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v33, (uint64_t)&v80, (uint64_t)v102, 16);
      if (v39)
      {
        v40 = *(_QWORD *)v81;
LABEL_43:
        v41 = 0;
        while (1)
        {
          if (*(_QWORD *)v81 != v40)
            objc_enumerationMutation(v10);
          v42 = *(void **)(*((_QWORD *)&v80 + 1) + 8 * v41);
          if (v42)
          {
            isRoadPedestrianNavigable = objc_msgSend_isRoadPedestrianNavigable(*(void **)(*((_QWORD *)&v80 + 1) + 8 * v41), v36, v37, v38);
            v47 = objc_msgSend_walkableSide(v42, v44, v45, v46);
            isRail = objc_msgSend_isRail(v42, v48, v49, v50);
            v52 = (v47 - 1) < 3 ? 1 : isRoadPedestrianNavigable;
            v53 = v52 & (isRail ^ 1);
          }
          else
          {
            v53 = 0;
          }
          if (*(_BYTE *)(a1 + 2648) || (v53 & 1) != 0)
          {
            if (!*(_BYTE *)(a1 + 2648))
              v53 = 1;
            if ((v53 & 1) != 0
              || v42
              && ((v54 = objc_msgSend_bikeableSide(v42, v36, v37, v38),
                   v58 = objc_msgSend_isRail(v42, v55, v56, v57),
                   (v54 - 4) < 0xFFFFFFFD)
                ? (v59 = 1)
                : (v59 = v58),
                  (v59 & 1) == 0))
            {
              sub_18F62516C(v42, 1, v38, (std::string **)&v110);
              v60 = v110;
              if ((_QWORD)v110)
              {
                v61 = *(_DWORD *)(v110 + 104);
                if (v61 >= 1)
                  *(double *)(v110 + 96) = (double)v61 * 3.70000005;
                if (sub_18F7059E4(v60))
                  sub_18F623AB8((char **)a2, &v110);
                v62 = 0;
              }
              else
              {
                if (qword_1EE172158 != -1)
                  dispatch_once(&qword_1EE172158, &unk_1E2990C10);
                v63 = off_1EE172160;
                if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_18F5B3000, v63, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,roadsWithinDistance returned nullptr", buf, 2u);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE172158 != -1)
                    dispatch_once(&qword_1EE172158, &unk_1E2990C10);
                  LOWORD(v92) = 0;
                  v69 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistanceLite(std::vector<CLMapRoadPtr> &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v69);
                  if (v69 != (char *)buf)
                    free(v69);
                }
                v65 = *(char **)a2;
                for (i = *(_QWORD *)(a2 + 8); (char *)i != v65; i = sub_18F5D6004(i - 16))
                  ;
                *(_QWORD *)(a2 + 8) = v65;
                v62 = 1;
              }
              v66 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
              if (*((_QWORD *)&v110 + 1))
              {
                v67 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                }
              }
              if (!v60)
                break;
            }
          }
          if (++v41 == v39)
          {
            v70 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v36, (uint64_t)&v80, (uint64_t)v102, 16);
            v39 = v70;
            if (v70)
              goto LABEL_43;
            goto LABEL_90;
          }
        }
      }
      else
      {
LABEL_90:
        v62 = 0;
      }
      v30 = v62 == 0;
    }
    else
    {
      ++*(_DWORD *)(a1 + 40);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v71 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v71, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED, query failed (roadsWithinDistance)", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        LOWORD(v110) = 0;
        v77 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistanceLite(std::vector<CLMapRoadPtr> &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v77);
        if (v77 != (char *)buf)
          free(v77);
      }
      v30 = 0;
    }
    v72 = v106;
    if (v106 == v105)
    {
      v73 = 4;
      v72 = v105;
    }
    else
    {
      if (!v106)
      {
LABEL_103:
        objc_autoreleasePoolPop(context);
        return v30;
      }
      v73 = 5;
    }
    (*(void (**)(void))(*v72 + 8 * v73))();
    goto LABEL_103;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990C10);
  v29 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v29, OS_LOG_TYPE_ERROR, "CLMMPED,roadsWithinDistanceLite,fGEOMapFeatureAccess is unexpectedly nil", buf, 2u);
  }
  if (sub_18F5C4AE0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    LOWORD(v110) = 0;
    v28 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistanceLite(std::vector<CLMapRoadPtr> &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v28);
LABEL_113:
    if (v28 != (char *)buf)
      free(v28);
  }
  return 0;
}

void sub_18F741FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char *a66;
  char a67;
  char *a70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  v71 = a66;
  if (a66 == &a63)
  {
    v72 = 4;
    v71 = &a63;
  }
  else
  {
    if (!a66)
      goto LABEL_6;
    v72 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v71 + 8 * v72))();
LABEL_6:
  v73 = a70;
  if (a70 == &a67)
  {
    v74 = 4;
    v73 = &a67;
  }
  else
  {
    if (!a70)
      goto LABEL_11;
    v74 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v73 + 8 * v74))();
LABEL_11:
  _Unwind_Resume(a1);
}

uint64_t sub_18F7420CC(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int isRoadPedestrianNavigable;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;

  if (a2)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 40);
    isRoadPedestrianNavigable = objc_msgSend_isRoadPedestrianNavigable(a2, (const char *)a2, a3, a4);
    v11 = objc_msgSend_walkableSide(a2, v8, v9, v10);
    result = objc_msgSend_isRail(a2, v12, v13, v14);
    if ((((v11 - 1) > 2) & ~isRoadPedestrianNavigable) == 0 && !(_DWORD)result)
      return objc_msgSend_addObject_(*(void **)(v5 + 32), v15, (uint64_t)a2, v17);
    if (*(_BYTE *)(v6 + 2648))
    {
      v18 = objc_msgSend_bikeableSide(a2, v15, v16, v17);
      result = objc_msgSend_isRail(a2, v19, v20, v21);
      if ((result & 1) == 0 && (v18 - 4) >= 0xFFFFFFFD)
        return objc_msgSend_addObject_(*(void **)(v5 + 32), v15, (uint64_t)a2, v17);
    }
  }
  return result;
}

uint64_t sub_18F742184(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int a5, double a6, double a7)
{
  uint64_t v9;
  double v12;
  double v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *i;
  uint64_t *v27;
  double v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t *v42[2];
  __int128 v43;
  uint64_t v44;
  _BYTE buf[12];
  uint64_t v46;
  std::__shared_weak_count *v47;
  double v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 32))
  {
    v9 = *a3;
    if (*a3)
    {
      v12 = a6;
      if (a4)
      {
        v15 = 1.0 - a6;
        sub_18F7047B4(*a3);
        v12 = *(double *)(v9 + 40);
      }
      else
      {
        sub_18F7047B4(*a3);
        v15 = *(double *)(v9 + 40);
      }
      if (v12 * v15 > a7)
        return 1;
      v43 = 0uLL;
      v44 = 0;
      v19 = (uint64_t *)*a3;
      v20 = (uint64_t *)a3[1];
      v42[0] = v19;
      v42[1] = v20;
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 1);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = sub_18F7426C4(a1, v42, a4, (uint64_t *)&v43, a5, a7 - v12 * v15);
      v18 = v23;
      if (!v20)
        goto LABEL_21;
      v24 = (unint64_t *)(v20 + 1);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        (*(void (**)(uint64_t *))(*v20 + 16))(v20);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
        if ((v18 & 1) != 0)
        {
LABEL_22:
          v27 = (uint64_t *)*((_QWORD *)&v43 + 1);
          for (i = (uint64_t *)v43; i != v27; i += 3)
          {
            *(_WORD *)&buf[8] = 1;
            v46 = 0;
            v47 = 0;
            *(_QWORD *)buf = *(_QWORD *)*i;
            sub_18F623A40(&v46, i);
            buf[8] = *((_BYTE *)i + 16);
            if (buf[8])
              v28 = 0.0;
            else
              v28 = 1.0;
            v48 = v28;
            v29 = operator new(0x38uLL);
            v29[2] = *(_QWORD *)buf;
            *((_WORD *)v29 + 12) = *(_WORD *)&buf[8];
            v30 = v47;
            v29[4] = v46;
            v29[5] = v30;
            if (v30)
            {
              p_shared_owners = (unint64_t *)&v30->__shared_owners_;
              do
                v32 = __ldxr(p_shared_owners);
              while (__stxr(v32 + 1, p_shared_owners));
              v28 = v48;
              v33 = v47;
            }
            else
            {
              v33 = 0;
            }
            *((double *)v29 + 6) = v28;
            v34 = *a2;
            *v29 = *a2;
            v29[1] = a2;
            *(_QWORD *)(v34 + 8) = v29;
            *a2 = (uint64_t)v29;
            ++a2[2];
            if (v33)
            {
              v35 = (unint64_t *)&v33->__shared_owners_;
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 - 1, v35));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
          }
LABEL_44:
          *(_QWORD *)buf = &v43;
          sub_18F747A3C((void ***)buf);
          return v18;
        }
      }
      else
      {
LABEL_21:
        if ((v23 & 1) != 0)
          goto LABEL_22;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v37 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v37, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED, findAllDigitizedRoads returned false", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        v41 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsConnected(ConnectedQueryResultList &, const CLMapRoadPtr &, BOOL, double, double, BOOL) const", "CoreLocation: %s\n", v41);
        if (v41 != buf)
          free(v41);
      }
      goto LABEL_44;
    }
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v16 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v17;
      _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v39 = *(_QWORD *)(a1 + 8);
      LODWORD(v43) = 134349056;
      *(_QWORD *)((char *)&v43 + 4) = v39;
      v40 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsConnected(ConnectedQueryResultList &, const CLMapRoadPtr &, BOOL, double, double, BOOL) const", "CoreLocation: %s\n", v40);
      if (v40 != buf)
        free(v40);
    }
  }
  return 0;
}

void sub_18F742680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a15;
  sub_18F747A3C(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_18F7426C4(uint64_t a1, uint64_t **a2, int a3, uint64_t *a4, int a5, double a6)
{
  uint64_t *v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  uint64_t v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  _OWORD *v61;
  __n128 v62;
  _OWORD *v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *i;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  __int128 v77;
  char *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  char v84;
  int v85;
  uint64_t v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  __int128 v93;
  char *v94;
  unint64_t *v95;
  unint64_t v96;
  NSObject *v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  double v109;
  uint64_t **v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  char **v134;
  char *v135;
  double *v136;
  double *v137;
  double v138;
  double v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  double v147;
  double v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  char **v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  char **v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  _BYTE *v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  int v186;
  char **v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  NSObject *v191;
  uint64_t v192;
  NSObject *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  double *v214;
  double v215;
  double v216;
  uint64_t *v217;
  _QWORD *v218;
  double *v219;
  double *v220;
  double v221;
  double v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  double v230;
  double v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  _QWORD *v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t *v262;
  NSObject *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  NSObject *v275;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  char *v298;
  char *v299;
  char *v300;
  uint64_t **v301;
  int v302;
  int v303;
  uint64_t v304;
  std::__shared_weak_count *v307;
  __int128 v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  uint64_t v311;
  std::__shared_weak_count *v312;
  __int128 v313;
  char *v314;
  char **v315;
  uint64_t v316;
  uint64_t v317[4];
  __int16 v318;
  uint64_t v319;
  __int16 v320;
  uint64_t v321;
  __int16 v322;
  uint64_t v323;
  __int16 v324;
  uint64_t v325;
  __int16 v326;
  uint64_t v327;
  __int16 v328;
  uint64_t v329;
  _BYTE v330[32];
  _BYTE v331[40];
  _DWORD v332[8];
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  _BYTE v339[64];
  __int16 v340;
  uint64_t v341;
  int v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  _BYTE v346[80];
  uint64_t v347;
  unint64_t v348;
  _BYTE buf[32];
  _BYTE v350[30];
  __int16 v351;
  uint64_t v352;
  __int16 v353;
  double v354;
  __int16 v355;
  double v356;
  uint64_t v357;

  v357 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v17 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v277 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)v330 = 134349056;
      *(_QWORD *)&v330[4] = v277;
      v278 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "CoreLocation: %s\n", v278);
      if (v278 != buf)
        free(v278);
    }
    return 0;
  }
  v10 = *a2;
  if (*(_BYTE *)(a1 + 33))
  {
    v11 = a2[1];
    *(_QWORD *)&v308 = *a2;
    *((_QWORD *)&v308 + 1) = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 1);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      if (!*(_BYTE *)(a1 + 32))
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        v32 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
        {
          v33 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v33;
          _os_log_impl(&dword_18F5B3000, v32, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
        }
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_51;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        v34 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)v330 = 134349056;
        *(_QWORD *)&v330[4] = v34;
        v35 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "CoreLocation: %s\n", v35);
        goto LABEL_446;
      }
    }
    v14 = *(_QWORD *)(a1 + 16);
    if (v14)
    {
      if (v10)
      {
        v317[0] = (uint64_t)v317;
        v317[1] = (uint64_t)v317;
        v317[2] = 0;
        v314 = 0;
        v315 = 0;
        v15 = a5 ^ 1;
        v316 = 0;
        if (a3)
        {
          if ((sub_18F623BF8(v14, (uint64_t *)&v308, &v314, v15) & 1) == 0)
          {
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990C10);
            v16 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_ERROR, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,findRoadsConnectedToEndOfThisRoad returned false", buf, 2u);
            }
            if (!sub_18F5C4AE0(115, 0))
              goto LABEL_133;
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 == -1)
            {
LABEL_453:
              *(_WORD *)v330 = 0;
              v287 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "CoreLocation: %s\n", v287);
              if (v287 != buf)
                free(v287);
LABEL_133:
              v19 = 0;
LABEL_425:
              *(_QWORD *)buf = &v314;
              sub_18F62AB98((void ***)buf);
              sub_18F64F950(v317);
              goto LABEL_426;
            }
LABEL_481:
            dispatch_once(&qword_1EE172158, &unk_1E2990C10);
            goto LABEL_453;
          }
        }
        else if ((sub_18F624378(v14, (uint64_t *)&v308, &v314, v15) & 1) == 0)
        {
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990C10);
          v97 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v97, OS_LOG_TYPE_ERROR, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,findRoadsConnectedToStartOfThisRoad returned false", buf, 2u);
          }
          if (!sub_18F5C4AE0(115, 0))
            goto LABEL_133;
          bzero(buf, 0x65CuLL);
          if (qword_1EE172158 == -1)
            goto LABEL_453;
          goto LABEL_481;
        }
        v302 = a3;
        v38 = v314;
        v39 = (char *)v315;
        if (v314 != (char *)v315)
        {
          do
          {
            v40 = *(_QWORD *)v38;
            v41 = *((_QWORD *)v38 + 1);
            *(_QWORD *)v330 = *(_QWORD *)v38;
            *(_QWORD *)&v330[8] = v41;
            if (v41)
            {
              v42 = (unint64_t *)(v41 + 8);
              do
                v43 = __ldxr(v42);
              while (__stxr(v43 + 1, v42));
            }
            if (v40)
            {
              memset(buf, 0, 20);
              *(_WORD *)&buf[20] = 1;
              *(_DWORD *)&buf[24] = 0;
              memset(v350, 0, 24);
              sub_18F623A40(buf, (uint64_t *)v330);
              v44 = operator new(0x48uLL);
              v45 = *(_QWORD *)&buf[8];
              v44[2] = *(_QWORD *)buf;
              v44[3] = v45;
              if (v45)
              {
                v46 = (unint64_t *)(v45 + 8);
                do
                  v47 = __ldxr(v46);
                while (__stxr(v47 + 1, v46));
                v48 = *(std::__shared_weak_count **)&buf[8];
              }
              else
              {
                v48 = 0;
              }
              v49 = *(_OWORD *)v350;
              *((_OWORD *)v44 + 2) = *(_OWORD *)&buf[16];
              *((_OWORD *)v44 + 3) = v49;
              v44[8] = *(_QWORD *)&v350[16];
              v50 = v317[0];
              *v44 = v317[0];
              v44[1] = v317;
              *(_QWORD *)(v50 + 8) = v44;
              v317[0] = (uint64_t)v44;
              ++v317[2];
              if (v48)
              {
                p_shared_owners = (unint64_t *)&v48->__shared_owners_;
                do
                  v52 = __ldaxr(p_shared_owners);
                while (__stlxr(v52 - 1, p_shared_owners));
                if (!v52)
                {
                  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                  std::__shared_weak_count::__release_weak(v48);
                }
              }
            }
            v53 = *(std::__shared_weak_count **)&v330[8];
            if (*(_QWORD *)&v330[8])
            {
              v54 = (unint64_t *)(*(_QWORD *)&v330[8] + 8);
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            v38 += 16;
          }
          while (v38 != v39);
        }
        if ((a5 & 1) != 0)
        {
          v57 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
          v56 = v308;
          v313 = v308;
          if (*((_QWORD *)&v308 + 1))
          {
            v58 = (unint64_t *)(*((_QWORD *)&v308 + 1) + 8);
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
            *(_QWORD *)&v330[8] = v57;
            do
              v60 = __ldxr(v58);
            while (__stxr(v60 + 1, v58));
          }
          else
          {
            *(_QWORD *)&v330[8] = 0;
          }
          *(_QWORD *)v330 = v56;
          v98 = v302 ^ 1;
          v330[16] = v302 ^ 1;
          v99 = a4[2];
          v100 = a4[1];
          if (v100 >= v99)
          {
            v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - *a4) >> 3);
            v105 = v104 + 1;
            if (v104 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_18F5F7864();
            v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - *a4) >> 3);
            if (2 * v106 > v105)
              v105 = 2 * v106;
            if (v106 >= 0x555555555555555)
              v107 = 0xAAAAAAAAAAAAAAALL;
            else
              v107 = v105;
            *(_QWORD *)v350 = a4 + 2;
            if (v107)
              v107 = (unint64_t)sub_18F65FE24(v107);
            else
              v108 = 0;
            v202 = (_QWORD *)(v107 + 24 * v104);
            *(_QWORD *)buf = v107;
            *(_QWORD *)&buf[8] = v202;
            *(_QWORD *)&buf[24] = v107 + 24 * v108;
            *v202 = v56;
            v202[1] = v57;
            if (v57)
            {
              v203 = (unint64_t *)&v57->__shared_owners_;
              do
                v204 = __ldxr(v203);
              while (__stxr(v204 + 1, v203));
            }
            *(_BYTE *)(v107 + 24 * v104 + 16) = v98;
            *(_QWORD *)&buf[16] = v202 + 3;
            sub_18F747AAC(a4, buf);
            v103 = a4[1];
            sub_18F747B48((uint64_t)buf);
            v57 = *(std::__shared_weak_count **)&v330[8];
          }
          else
          {
            *(_QWORD *)v100 = v56;
            *(_QWORD *)(v100 + 8) = v57;
            if (v57)
            {
              v101 = (unint64_t *)&v57->__shared_owners_;
              do
                v102 = __ldxr(v101);
              while (__stxr(v102 + 1, v101));
            }
            *(_BYTE *)(v100 + 16) = v98;
            v103 = v100 + 24;
          }
          a4[1] = v103;
          if (v57)
          {
            v205 = (unint64_t *)&v57->__shared_owners_;
            do
              v206 = __ldaxr(v205);
            while (__stlxr(v206 - 1, v205));
            if (!v206)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          v207 = (std::__shared_weak_count *)*((_QWORD *)&v313 + 1);
          if (*((_QWORD *)&v313 + 1))
          {
            v208 = (unint64_t *)(*((_QWORD *)&v313 + 1) + 8);
            do
              v209 = __ldaxr(v208);
            while (__stlxr(v209 - 1, v208));
            if (!v209)
            {
              ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
              std::__shared_weak_count::__release_weak(v207);
            }
          }
        }
        v210 = *(_QWORD *)(v308 + 136);
        v211 = *(_QWORD *)(v308 + 144);
        if (v302)
        {
          v212 = v211 - v210;
          if (v212)
          {
            v213 = (v212 >> 4) - 1;
            v214 = (double *)(v210 + 16 * v213);
LABEL_331:
            v215 = *v214;
            v216 = *(double *)(v210 + 16 * v213 + 8);
            goto LABEL_333;
          }
        }
        else if (v211 != v210)
        {
          v213 = 0;
          v214 = *(double **)(v308 + 136);
          goto LABEL_331;
        }
        v215 = 0.0;
        v216 = 0.0;
LABEL_333:
        v217 = (uint64_t *)v317[1];
        if ((uint64_t *)v317[1] == v317)
        {
LABEL_415:
          if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) == a5)
          {
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990C10);
            v263 = off_1EE172160;
            if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
            {
              v264 = *(_QWORD *)(a1 + 8);
              v265 = *(_QWORD *)v308;
              v266 = *(uint64_t **)(v308 + 136);
              v267 = *(uint64_t **)(v308 + 144);
              if (v267 == v266)
              {
                v270 = 0;
                v268 = 0;
                v269 = 0;
                v271 = 0;
              }
              else
              {
                v268 = *v266;
                v269 = v266[1];
                v270 = *(v267 - 2);
                v271 = *(v267 - 1);
              }
              *(_DWORD *)buf = 134351105;
              *(_QWORD *)&buf[4] = v264;
              *(_WORD *)&buf[12] = 2049;
              *(_QWORD *)&buf[14] = v265;
              *(_WORD *)&buf[22] = 2050;
              *(_QWORD *)&buf[24] = v317[2];
              *(_WORD *)v350 = 2049;
              *(_QWORD *)&v350[2] = v268;
              *(_WORD *)&v350[10] = 2049;
              *(_QWORD *)&v350[12] = v269;
              *(_WORD *)&v350[20] = 2049;
              *(_QWORD *)&v350[22] = v270;
              v351 = 2049;
              v352 = v271;
              v353 = 2049;
              v354 = v215;
              v355 = 2049;
              v356 = v216;
              _os_log_impl(&dword_18F5B3000, v263, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.2lf,CLGeoMapFeatureAccessGeometryPedestrian,ConnectedRoads found 0 roads in buffer, %{private}lld, totalResults,%{public}lu,roadStartLL,%{private}.7lf,%{private}.7lf,roadEndLL,%{private}.7lf,%{private}.7lf,searchCoordinate,%{private}.7lf,%{private}.7lf", buf, 0x5Cu);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE172158 != -1)
                dispatch_once(&qword_1EE172158, &unk_1E2990C10);
              v288 = *(_QWORD *)(a1 + 8);
              v289 = *(_QWORD *)v308;
              v290 = *(uint64_t **)(v308 + 136);
              v291 = *(uint64_t **)(v308 + 144);
              if (v291 == v290)
              {
                v294 = 0;
                v292 = 0;
                v293 = 0;
                v295 = 0;
              }
              else
              {
                v292 = *v290;
                v293 = v290[1];
                v294 = *(v291 - 2);
                v295 = *(v291 - 1);
              }
              *(_DWORD *)v330 = 134351105;
              *(_QWORD *)&v330[4] = v288;
              *(_WORD *)&v330[12] = 2049;
              *(_QWORD *)&v330[14] = v289;
              *(_WORD *)&v330[22] = 2050;
              *(_QWORD *)&v330[24] = v317[2];
              *(_WORD *)v331 = 2049;
              *(_QWORD *)&v331[2] = v292;
              *(_WORD *)&v331[10] = 2049;
              *(_QWORD *)&v331[12] = v293;
              *(_WORD *)&v331[20] = 2049;
              *(_QWORD *)&v331[22] = v294;
              *(_WORD *)&v331[30] = 2049;
              *(_QWORD *)&v331[32] = v295;
              LOWORD(v332[0]) = 2049;
              *(double *)((char *)v332 + 2) = v215;
              HIWORD(v332[2]) = 2049;
              *(double *)&v332[3] = v216;
              v299 = (char *)_os_log_send_and_compose_impl();
              sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "CoreLocation: %s\n", v299);
              if (v299 != buf)
                free(v299);
            }
          }
          v19 = 1;
          goto LABEL_425;
        }
        while (1)
        {
          v218 = (_QWORD *)v217[2];
          if (*v218 != *(_QWORD *)v308)
          {
            v220 = (double *)v218[17];
            v219 = (double *)v218[18];
            if (v219 == v220)
            {
              v222 = 0.0;
              v221 = 0.0;
            }
            else
            {
              v222 = *v220;
              v221 = v220[1];
            }
            if (vabdd_f64(v215, v222) < 0.0000001 && vabdd_f64(v216, v221) < 0.0000001)
            {
              v223 = (std::__shared_weak_count *)v217[3];
              v311 = v217[2];
              v312 = v223;
              if (v223)
              {
                v224 = (unint64_t *)&v223->__shared_owners_;
                do
                  v225 = __ldxr(v224);
                while (__stxr(v225 + 1, v224));
                *(_QWORD *)v330 = v218;
                *(_QWORD *)&v330[8] = v223;
                do
                  v226 = __ldxr(v224);
                while (__stxr(v226 + 1, v224));
                v330[16] = 1;
                v227 = a4[1];
                v228 = a4[2];
                if (v227 < v228)
                {
                  *(_QWORD *)v227 = v218;
                  *(_QWORD *)(v227 + 8) = v223;
                  do
                    v229 = __ldxr(v224);
                  while (__stxr(v229 + 1, v224));
LABEL_365:
                  *(_BYTE *)(v227 + 16) = 1;
                  v239 = v227 + 24;
LABEL_390:
                  a4[1] = v239;
                  if (v223)
                  {
                    v252 = (unint64_t *)&v223->__shared_owners_;
                    do
                      v253 = __ldaxr(v252);
                    while (__stlxr(v253 - 1, v252));
                    if (!v253)
                    {
                      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                      std::__shared_weak_count::__release_weak(v223);
                    }
                  }
                  v254 = v312;
                  if (!v312)
                    goto LABEL_414;
                  v255 = (unint64_t *)&v312->__shared_owners_;
                  do
                    v256 = __ldaxr(v255);
                  while (__stlxr(v256 - 1, v255));
LABEL_412:
                  if (!v256)
                  {
                    ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                    std::__shared_weak_count::__release_weak(v254);
                  }
                  goto LABEL_414;
                }
              }
              else
              {
                *(_QWORD *)v330 = v218;
                *(_QWORD *)&v330[8] = 0;
                v330[16] = 1;
                v227 = a4[1];
                v228 = a4[2];
                if (v227 < v228)
                {
                  *(_QWORD *)v227 = v218;
                  *(_QWORD *)(v227 + 8) = 0;
                  goto LABEL_365;
                }
              }
              v240 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v227 - *a4) >> 3);
              v241 = v240 + 1;
              if (v240 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_18F5F7864();
              if (0x5555555555555556 * ((uint64_t)(v228 - *a4) >> 3) > v241)
                v241 = 0x5555555555555556 * ((uint64_t)(v228 - *a4) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v228 - *a4) >> 3) >= 0x555555555555555)
                v242 = 0xAAAAAAAAAAAAAAALL;
              else
                v242 = v241;
              *(_QWORD *)v350 = a4 + 2;
              if (v242)
                v242 = (unint64_t)sub_18F65FE24(v242);
              else
                v243 = 0;
              v249 = (_QWORD *)(v242 + 24 * v240);
              *(_QWORD *)buf = v242;
              *(_QWORD *)&buf[8] = v249;
              *(_QWORD *)&buf[24] = v242 + 24 * v243;
              *v249 = v218;
              v249[1] = v223;
              if (v223)
              {
                v250 = (unint64_t *)&v223->__shared_owners_;
                do
                  v251 = __ldxr(v250);
                while (__stxr(v251 + 1, v250));
              }
              *(_BYTE *)(v242 + 24 * v240 + 16) = 1;
              *(_QWORD *)&buf[16] = v249 + 3;
              sub_18F747AAC(a4, buf);
              v239 = a4[1];
              sub_18F747B48((uint64_t)buf);
              goto LABEL_390;
            }
            if (v219 == v220)
            {
              v231 = 0.0;
              v230 = 0.0;
            }
            else
            {
              v231 = *(v219 - 2);
              v230 = *(v219 - 1);
            }
            if (vabdd_f64(v215, v231) < 0.0000001 && vabdd_f64(v216, v230) < 0.0000001)
              break;
          }
LABEL_414:
          v217 = (uint64_t *)v217[1];
          if (v217 == v317)
            goto LABEL_415;
        }
        v232 = (std::__shared_weak_count *)v217[3];
        v309 = v217[2];
        v310 = v232;
        if (v232)
        {
          v233 = (unint64_t *)&v232->__shared_owners_;
          do
            v234 = __ldxr(v233);
          while (__stxr(v234 + 1, v233));
          *(_QWORD *)v330 = v218;
          *(_QWORD *)&v330[8] = v232;
          do
            v235 = __ldxr(v233);
          while (__stxr(v235 + 1, v233));
          v330[16] = 0;
          v236 = a4[1];
          v237 = a4[2];
          if (v236 < v237)
          {
            *(_QWORD *)v236 = v218;
            *(_QWORD *)(v236 + 8) = v232;
            do
              v238 = __ldxr(v233);
            while (__stxr(v238 + 1, v233));
            goto LABEL_376;
          }
        }
        else
        {
          *(_QWORD *)v330 = v218;
          *(_QWORD *)&v330[8] = 0;
          v330[16] = 0;
          v236 = a4[1];
          v237 = a4[2];
          if (v236 < v237)
          {
            *(_QWORD *)v236 = v218;
            *(_QWORD *)(v236 + 8) = 0;
LABEL_376:
            *(_BYTE *)(v236 + 16) = 0;
            v244 = v236 + 24;
LABEL_404:
            a4[1] = v244;
            if (v232)
            {
              v260 = (unint64_t *)&v232->__shared_owners_;
              do
                v261 = __ldaxr(v260);
              while (__stlxr(v261 - 1, v260));
              if (!v261)
              {
                ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                std::__shared_weak_count::__release_weak(v232);
              }
            }
            v254 = v310;
            if (!v310)
              goto LABEL_414;
            v262 = (unint64_t *)&v310->__shared_owners_;
            do
              v256 = __ldaxr(v262);
            while (__stlxr(v256 - 1, v262));
            goto LABEL_412;
          }
        }
        v245 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v236 - *a4) >> 3);
        v246 = v245 + 1;
        if (v245 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_18F5F7864();
        if (0x5555555555555556 * ((uint64_t)(v237 - *a4) >> 3) > v246)
          v246 = 0x5555555555555556 * ((uint64_t)(v237 - *a4) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v237 - *a4) >> 3) >= 0x555555555555555)
          v247 = 0xAAAAAAAAAAAAAAALL;
        else
          v247 = v246;
        *(_QWORD *)v350 = a4 + 2;
        if (v247)
          v247 = (unint64_t)sub_18F65FE24(v247);
        else
          v248 = 0;
        v257 = (_QWORD *)(v247 + 24 * v245);
        *(_QWORD *)buf = v247;
        *(_QWORD *)&buf[8] = v257;
        *(_QWORD *)&buf[24] = v247 + 24 * v248;
        *v257 = v218;
        v257[1] = v232;
        if (v232)
        {
          v258 = (unint64_t *)&v232->__shared_owners_;
          do
            v259 = __ldxr(v258);
          while (__stxr(v259 + 1, v258));
        }
        *(_BYTE *)(v247 + 24 * v245 + 16) = 0;
        *(_QWORD *)&buf[16] = v257 + 3;
        sub_18F747AAC(a4, buf);
        v244 = a4[1];
        sub_18F747B48((uint64_t)buf);
        goto LABEL_404;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v37 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v37, OS_LOG_TYPE_ERROR, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,road is unexpectedly nullptr", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 0))
      {
LABEL_51:
        v19 = 0;
LABEL_426:
        v272 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
        if (*((_QWORD *)&v308 + 1))
        {
          v273 = (unint64_t *)(*((_QWORD *)&v308 + 1) + 8);
          do
            v274 = __ldaxr(v273);
          while (__stlxr(v274 - 1, v273));
          if (!v274)
          {
            ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
            std::__shared_weak_count::__release_weak(v272);
          }
        }
        return v19;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_445;
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v31 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v31, OS_LOG_TYPE_ERROR, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,fRoadGeometryBuffer is unexpectedly nullptr", buf, 2u);
      }
      if (!sub_18F5C4AE0(115, 0))
        goto LABEL_51;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_445;
    }
    dispatch_once(&qword_1EE172158, &unk_1E2990C10);
LABEL_445:
    *(_WORD *)v330 = 0;
    v35 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "CoreLocation: %s\n", v35);
LABEL_446:
    if (v35 != buf)
      free(v35);
    goto LABEL_51;
  }
  if (!v10)
    return 0;
  *(_QWORD *)v330 = 0;
  *(_QWORD *)&v330[8] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v330[16] = _Q0;
  *(_QWORD *)v331 = 0;
  *(_QWORD *)&v331[8] = 0;
  *(_QWORD *)&v331[16] = 0xBFF0000000000000;
  v341 = 0;
  v342 = 0;
  memset(&v339[32], 0, 32);
  v340 = 0;
  v343 = 0u;
  v344 = 0u;
  v345 = 0u;
  memset(v346, 0, 27);
  memset(&v346[32], 0, 48);
  memset(v339, 0, 30);
  v338 = 0u;
  v337 = 0u;
  v336 = 0u;
  v335 = 0u;
  v334 = 0u;
  v333 = 0u;
  memset(v332, 0, sizeof(v332));
  *(_OWORD *)&v331[24] = 0u;
  v348 = 0xBFF0000000000000;
  v347 = 0;
  v26 = v10[17];
  v27 = v10[18];
  if (a3)
  {
    v28 = v27 - v26;
    if (v28)
    {
      v29 = (v28 >> 4) - 1;
      v30 = (_QWORD *)(v26 + 16 * v29);
LABEL_45:
      *(_QWORD *)&v331[24] = *v30;
      v36 = *(_QWORD *)(v26 + 16 * v29 + 8);
      goto LABEL_82;
    }
  }
  else if (v27 != v26)
  {
    v29 = 0;
    v30 = (_QWORD *)v10[17];
    goto LABEL_45;
  }
  v36 = 0;
LABEL_82:
  *(_QWORD *)&v331[32] = v36;
  v314 = (char *)&v314;
  v315 = &v314;
  v316 = 0;
  v313 = *(_OWORD *)v10;
  v61 = sub_18F61EEBC((uint64_t **)(a1 + 2616), &v313, 0);
  v63 = v61;
  v301 = (uint64_t **)(a1 + 2616);
  v304 = a1;
  v303 = a3;
  if (!v61)
  {
    if (v316)
    {
      v84 = 0;
      goto LABEL_112;
    }
LABEL_113:
    memset(v317, 0, 24);
    v85 = a5;
    if (sub_18F74137C(a1, (uint64_t)v317, (uint64_t)v330, a6))
    {
      v87 = (uint64_t *)v317[0];
      v86 = v317[1];
      if (v317[1] != v317[0])
        goto LABEL_115;
      v109 = fmin(a6 * 4.0, 250.0);
      if (v109 <= a6)
      {
LABEL_151:
        *(_QWORD *)buf = v317;
        sub_18F62AB98((void ***)buf);
        v84 = 0;
        goto LABEL_152;
      }
      if (sub_18F74137C(a1, (uint64_t)v317, (uint64_t)v330, v109))
      {
        v87 = (uint64_t *)v317[0];
        v86 = v317[1];
LABEL_115:
        while (v87 != (uint64_t *)v86)
        {
          memset(buf, 0, 20);
          *(_WORD *)&buf[20] = 1;
          *(_DWORD *)&buf[24] = 0;
          memset(v350, 0, 24);
          sub_18F623A40(buf, v87);
          v88 = operator new(0x48uLL);
          v89 = *(_QWORD *)&buf[8];
          v88[2] = *(_QWORD *)buf;
          v88[3] = v89;
          if (v89)
          {
            v90 = (unint64_t *)(v89 + 8);
            do
              v91 = __ldxr(v90);
            while (__stxr(v91 + 1, v90));
            v92 = *(std::__shared_weak_count **)&buf[8];
          }
          else
          {
            v92 = 0;
          }
          v93 = *(_OWORD *)v350;
          *((_OWORD *)v88 + 2) = *(_OWORD *)&buf[16];
          *((_OWORD *)v88 + 3) = v93;
          v88[8] = *(_QWORD *)&v350[16];
          v94 = v314;
          *v88 = v314;
          v88[1] = &v314;
          *((_QWORD *)v94 + 1) = v88;
          v314 = (char *)v88;
          ++v316;
          if (v92)
          {
            v95 = (unint64_t *)&v92->__shared_owners_;
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }
          v87 += 2;
        }
        goto LABEL_151;
      }
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v275 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v275, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED, roadsWithinDistance returned false, expanded search", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        LOWORD(v311) = 0;
        v300 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "CoreLocation: %s\n", v300);
        if (v300 != buf)
          free(v300);
      }
    }
    *(_QWORD *)buf = v317;
    sub_18F62AB98((void ***)buf);
    v19 = 0;
    goto LABEL_437;
  }
  v64 = (_OWORD *)((char *)v61 + 8);
  v65 = 8;
  if (a3)
  {
    v65 = 32;
    v64 = v61 + 2;
  }
  v66 = *(uint64_t **)((char *)v61 + v65);
  for (i = (uint64_t *)*((_QWORD *)v64 + 1); v66 != i; v66 += 2)
  {
    v69 = *v66;
    v68 = v66[1];
    v317[0] = *v66;
    v317[1] = v68;
    if (v68)
    {
      v70 = (unint64_t *)(v68 + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    if (v69)
    {
      memset(buf, 0, 20);
      *(_WORD *)&buf[20] = 1;
      *(_DWORD *)&buf[24] = 0;
      memset(v350, 0, 24);
      sub_18F623A40(buf, v317);
      v72 = operator new(0x48uLL);
      v73 = *(_QWORD *)&buf[8];
      v72[2] = *(_QWORD *)buf;
      v72[3] = v73;
      if (v73)
      {
        v74 = (unint64_t *)(v73 + 8);
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
        v76 = *(std::__shared_weak_count **)&buf[8];
      }
      else
      {
        v76 = 0;
      }
      v62.n128_u64[1] = *(_QWORD *)&buf[24];
      v77 = *(_OWORD *)v350;
      *((_OWORD *)v72 + 2) = *(_OWORD *)&buf[16];
      *((_OWORD *)v72 + 3) = v77;
      v72[8] = *(_QWORD *)&v350[16];
      v78 = v314;
      *v72 = v314;
      v72[1] = &v314;
      *((_QWORD *)v78 + 1) = v72;
      v314 = (char *)v72;
      ++v316;
      if (v76)
      {
        v79 = (unint64_t *)&v76->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
    }
    else
    {
      sub_18F64F950((uint64_t *)&v314);
    }
    v81 = (std::__shared_weak_count *)v317[1];
    if (v317[1])
    {
      v82 = (unint64_t *)(v317[1] + 8);
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    if (!v69)
      break;
  }
  if (!v316)
    goto LABEL_113;
  *((_QWORD *)v63 + 7) = *(_QWORD *)(a1 + 8);
  v84 = 1;
LABEL_112:
  v85 = a5;
LABEL_152:
  v110 = a2;
  if (v85)
  {
    v111 = (uint64_t)*a2;
    v112 = (std::__shared_weak_count *)a2[1];
    v307 = v112;
    if (v112)
    {
      v113 = (unint64_t *)&v112->__shared_owners_;
      do
        v114 = __ldxr(v113);
      while (__stxr(v114 + 1, v113));
      v317[1] = (uint64_t)v112;
      do
        v115 = __ldxr(v113);
      while (__stxr(v115 + 1, v113));
    }
    else
    {
      v317[1] = 0;
    }
    v317[0] = v111;
    v116 = v303 ^ 1;
    LOBYTE(v317[2]) = v303 ^ 1;
    v117 = a4[2];
    v118 = a4[1];
    if (v118 >= v117)
    {
      v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v118 - *a4) >> 3);
      v123 = v122 + 1;
      if (v122 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_18F5F7864();
      v124 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v117 - *a4) >> 3);
      if (2 * v124 > v123)
        v123 = 2 * v124;
      if (v124 >= 0x555555555555555)
        v125 = 0xAAAAAAAAAAAAAAALL;
      else
        v125 = v123;
      *(_QWORD *)v350 = a4 + 2;
      if (v125)
        v125 = (unint64_t)sub_18F65FE24(v125);
      else
        v126 = 0;
      v127 = (uint64_t *)(v125 + 24 * v122);
      *(_QWORD *)buf = v125;
      *(_QWORD *)&buf[8] = v127;
      *(_QWORD *)&buf[24] = v125 + 24 * v126;
      *v127 = v111;
      v127[1] = (uint64_t)v112;
      if (v112)
      {
        v128 = (unint64_t *)&v112->__shared_owners_;
        do
          v129 = __ldxr(v128);
        while (__stxr(v129 + 1, v128));
      }
      *(_BYTE *)(v125 + 24 * v122 + 16) = v116;
      *(_QWORD *)&buf[16] = v127 + 3;
      sub_18F747AAC(a4, buf);
      v121 = a4[1];
      sub_18F747B48((uint64_t)buf);
      v112 = (std::__shared_weak_count *)v317[1];
    }
    else
    {
      *(_QWORD *)v118 = v111;
      *(_QWORD *)(v118 + 8) = v112;
      if (v112)
      {
        v119 = (unint64_t *)&v112->__shared_owners_;
        do
          v120 = __ldxr(v119);
        while (__stxr(v120 + 1, v119));
      }
      *(_BYTE *)(v118 + 16) = v116;
      v121 = v118 + 24;
    }
    a4[1] = v121;
    if (v112)
    {
      v130 = (unint64_t *)&v112->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    if (v307)
    {
      v132 = (unint64_t *)&v307->__shared_owners_;
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
        std::__shared_weak_count::__release_weak(v307);
      }
    }
    v110 = a2;
  }
  v134 = v315;
  if (v315 != &v314)
  {
    while (1)
    {
      v135 = v134[2];
      if (*(_QWORD *)v135 != **v110)
        break;
LABEL_271:
      v134 = (char **)v134[1];
      if (v134 == &v314)
        goto LABEL_272;
    }
    v137 = (double *)*((_QWORD *)v135 + 17);
    v136 = (double *)*((_QWORD *)v135 + 18);
    if (v136 == v137)
    {
      v139 = 0.0;
      v138 = 0.0;
    }
    else
    {
      v139 = *v137;
      v138 = v137[1];
    }
    v62.n128_u64[0] = *(_QWORD *)&v331[32];
    if (vabdd_f64(*(double *)&v331[24], v139) < 0.0000001 && vabdd_f64(*(double *)&v331[32], v138) < 0.0000001)
    {
      v140 = (std::__shared_weak_count *)v134[3];
      if (v140)
      {
        v141 = (unint64_t *)&v140->__shared_owners_;
        do
          v142 = __ldxr(v141);
        while (__stxr(v142 + 1, v141));
        v317[0] = (uint64_t)v135;
        v317[1] = (uint64_t)v140;
        do
          v143 = __ldxr(v141);
        while (__stxr(v143 + 1, v141));
        LOBYTE(v317[2]) = 1;
        v144 = a4[1];
        v145 = a4[2];
        if (v144 < v145)
        {
          *(_QWORD *)v144 = v135;
          *(_QWORD *)(v144 + 8) = v140;
          do
            v146 = __ldxr(v141);
          while (__stxr(v146 + 1, v141));
          goto LABEL_221;
        }
      }
      else
      {
        v317[0] = (uint64_t)v134[2];
        v317[1] = 0;
        LOBYTE(v317[2]) = 1;
        v144 = a4[1];
        v145 = a4[2];
        if (v144 < v145)
        {
          *(_QWORD *)v144 = v135;
          *(_QWORD *)(v144 + 8) = 0;
LABEL_221:
          *(_BYTE *)(v144 + 16) = 1;
          v155 = v144 + 24;
LABEL_246:
          a4[1] = v155;
          if (v140)
          {
            v168 = (unint64_t *)&v140->__shared_owners_;
            do
              v169 = __ldaxr(v168);
            while (__stlxr(v169 - 1, v168));
            if (!v169)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v140->__on_zero_shared)(v140, v62);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
          if (!v140)
            goto LABEL_270;
          v170 = (unint64_t *)&v140->__shared_owners_;
          do
            v171 = __ldaxr(v170);
          while (__stlxr(v171 - 1, v170));
LABEL_268:
          if (!v171)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v140->__on_zero_shared)(v140, v62);
            std::__shared_weak_count::__release_weak(v140);
          }
LABEL_270:
          v110 = a2;
          goto LABEL_271;
        }
      }
      v156 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v144 - *a4) >> 3);
      v157 = v156 + 1;
      if (v156 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_18F5F7864();
      if (0x5555555555555556 * ((uint64_t)(v145 - *a4) >> 3) > v157)
        v157 = 0x5555555555555556 * ((uint64_t)(v145 - *a4) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145 - *a4) >> 3) >= 0x555555555555555)
        v158 = 0xAAAAAAAAAAAAAAALL;
      else
        v158 = v157;
      *(_QWORD *)v350 = a4 + 2;
      if (v158)
        v158 = (unint64_t)sub_18F65FE24(v158);
      else
        v159 = 0;
      v165 = (char **)(v158 + 24 * v156);
      *(_QWORD *)buf = v158;
      *(_QWORD *)&buf[8] = v165;
      *(_QWORD *)&buf[24] = v158 + 24 * v159;
      *v165 = v135;
      v165[1] = (char *)v140;
      if (v140)
      {
        v166 = (unint64_t *)&v140->__shared_owners_;
        do
          v167 = __ldxr(v166);
        while (__stxr(v167 + 1, v166));
      }
      *(_BYTE *)(v158 + 24 * v156 + 16) = 1;
      *(_QWORD *)&buf[16] = v165 + 3;
      sub_18F747AAC(a4, buf);
      v155 = a4[1];
      sub_18F747B48((uint64_t)buf);
      goto LABEL_246;
    }
    if (v136 == v137)
    {
      v148 = 0.0;
      v147 = 0.0;
    }
    else
    {
      v148 = *(v136 - 2);
      v147 = *(v136 - 1);
    }
    if (vabdd_f64(*(double *)&v331[24], v148) >= 0.0000001)
      goto LABEL_271;
    v62.n128_f64[0] = vabdd_f64(*(double *)&v331[32], v147);
    if (v62.n128_f64[0] >= 0.0000001)
      goto LABEL_271;
    v140 = (std::__shared_weak_count *)v134[3];
    if (v140)
    {
      v149 = (unint64_t *)&v140->__shared_owners_;
      do
        v150 = __ldxr(v149);
      while (__stxr(v150 + 1, v149));
      v317[0] = (uint64_t)v135;
      v317[1] = (uint64_t)v140;
      do
        v151 = __ldxr(v149);
      while (__stxr(v151 + 1, v149));
      LOBYTE(v317[2]) = 0;
      v152 = a4[1];
      v153 = a4[2];
      if (v152 < v153)
      {
        *(_QWORD *)v152 = v135;
        *(_QWORD *)(v152 + 8) = v140;
        do
          v154 = __ldxr(v149);
        while (__stxr(v154 + 1, v149));
        goto LABEL_232;
      }
    }
    else
    {
      v317[0] = (uint64_t)v134[2];
      v317[1] = 0;
      LOBYTE(v317[2]) = 0;
      v152 = a4[1];
      v153 = a4[2];
      if (v152 < v153)
      {
        *(_QWORD *)v152 = v135;
        *(_QWORD *)(v152 + 8) = 0;
LABEL_232:
        *(_BYTE *)(v152 + 16) = 0;
        v160 = v152 + 24;
LABEL_260:
        a4[1] = v160;
        if (v140)
        {
          v175 = (unint64_t *)&v140->__shared_owners_;
          do
            v176 = __ldaxr(v175);
          while (__stlxr(v176 - 1, v175));
          if (!v176)
          {
            ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
            std::__shared_weak_count::__release_weak(v140);
          }
        }
        if (!v140)
          goto LABEL_270;
        v177 = (unint64_t *)&v140->__shared_owners_;
        do
          v171 = __ldaxr(v177);
        while (__stlxr(v171 - 1, v177));
        goto LABEL_268;
      }
    }
    v161 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v152 - *a4) >> 3);
    v162 = v161 + 1;
    if (v161 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_18F5F7864();
    if (0x5555555555555556 * ((uint64_t)(v153 - *a4) >> 3) > v162)
      v162 = 0x5555555555555556 * ((uint64_t)(v153 - *a4) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v153 - *a4) >> 3) >= 0x555555555555555)
      v163 = 0xAAAAAAAAAAAAAAALL;
    else
      v163 = v162;
    *(_QWORD *)v350 = a4 + 2;
    if (v163)
      v163 = (unint64_t)sub_18F65FE24(v163);
    else
      v164 = 0;
    v172 = (char **)(v163 + 24 * v161);
    *(_QWORD *)buf = v163;
    *(_QWORD *)&buf[8] = v172;
    *(_QWORD *)&buf[24] = v163 + 24 * v164;
    *v172 = v135;
    v172[1] = (char *)v140;
    if (v140)
    {
      v173 = (unint64_t *)&v140->__shared_owners_;
      do
        v174 = __ldxr(v173);
      while (__stxr(v174 + 1, v173));
    }
    *(_BYTE *)(v163 + 24 * v161 + 16) = 0;
    *(_QWORD *)&buf[16] = v172 + 3;
    sub_18F747AAC(a4, buf);
    v160 = a4[1];
    sub_18F747B48((uint64_t)buf);
    goto LABEL_260;
  }
LABEL_272:
  if ((v84 & 1) == 0 && a4[1] != *a4)
  {
    v178 = sub_18F61EEBC(v301, &v313, 1);
    v179 = v178;
    if (v178)
    {
      sub_18F61F000(v178, v303 ^ 1);
      *((_QWORD *)v179 + 7) = *(_QWORD *)(v304 + 8);
      v180 = *a4;
      v181 = a4[1];
      if (*a4 != v181)
      {
        do
        {
          v182 = *(_QWORD **)v180;
          v183 = *(_QWORD *)(v180 + 8);
          *(_QWORD *)buf = *(_QWORD *)v180;
          *(_QWORD *)&buf[8] = v183;
          if (v183)
          {
            v184 = (unint64_t *)(v183 + 8);
            do
              v185 = __ldxr(v184);
            while (__stxr(v185 + 1, v184));
          }
          buf[16] = *(_BYTE *)(v180 + 16);
          if (v182)
          {
            if (*v182 == **a2)
            {
              v186 = 27;
            }
            else
            {
              if ((v303 & 1) != 0)
              {
                *v179 = 1;
                v187 = (char **)(v179 + 32);
              }
              else
              {
                v179[1] = 1;
                v187 = (char **)(v179 + 8);
              }
              sub_18F623AB8(v187, (__int128 *)buf);
              v186 = 0;
            }
          }
          else
          {
            sub_18F61F000(v179, v303 ^ 1);
            *((_QWORD *)v179 + 7) = 0xBFF0000000000000;
            v186 = 26;
          }
          v188 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v189 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v190 = __ldaxr(v189);
            while (__stlxr(v190 - 1, v189));
            if (!v190)
            {
              ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
              std::__shared_weak_count::__release_weak(v188);
            }
          }
          if (v186 != 27 && v186)
            break;
          v180 += 24;
        }
        while (v180 != v181);
      }
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v191 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        v192 = *(_QWORD *)(v304 + 8);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v192;
        _os_log_impl(&dword_18F5B3000, v191, OS_LOG_TYPE_ERROR, "CLMM,%.1lf,Unexpected,RoadConnectionsEntry could not be created", buf, 0xCu);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        v297 = *(_QWORD *)(v304 + 8);
        LODWORD(v317[0]) = 134217984;
        *(uint64_t *)((char *)v317 + 4) = v297;
        v298 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "CoreLocation: %s\n", v298);
        if (v298 != buf)
          free(v298);
      }
    }
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) == a5)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v193 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v194 = *(_QWORD *)(v304 + 8);
      v195 = **a2;
      v196 = (uint64_t *)(*a2)[17];
      v197 = (uint64_t *)(*a2)[18];
      if (v197 == v196)
      {
        v200 = 0;
        v198 = 0;
        v199 = 0;
        v201 = 0;
      }
      else
      {
        v198 = *v196;
        v199 = v196[1];
        v200 = *(v197 - 2);
        v201 = *(v197 - 1);
      }
      *(_DWORD *)buf = 134351105;
      *(_QWORD *)&buf[4] = v194;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v195;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = v316;
      *(_WORD *)v350 = 2049;
      *(_QWORD *)&v350[2] = v198;
      *(_WORD *)&v350[10] = 2049;
      *(_QWORD *)&v350[12] = v199;
      *(_WORD *)&v350[20] = 2049;
      *(_QWORD *)&v350[22] = v200;
      v351 = 2049;
      v352 = v201;
      v353 = 2049;
      v354 = *(double *)&v331[24];
      v355 = 2049;
      v356 = *(double *)&v331[32];
      _os_log_impl(&dword_18F5B3000, v193, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.2lf,CLGeoMapFeatureAccessGeometryPedestrian,ConnectedRoads found 0 roads, %{private}lld, totalResults,%{public}lu,roadStartLL,%{private}.7lf,%{private}.7lf,roadEndLL,%{private}.7lf,%{private}.7lf,searchCoordinate,%{private}.7lf,%{private}.7lf", buf, 0x5Cu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v279 = *(_QWORD *)(v304 + 8);
      v280 = **a2;
      v281 = (uint64_t *)(*a2)[17];
      v282 = (uint64_t *)(*a2)[18];
      if (v282 == v281)
      {
        v285 = 0;
        v283 = 0;
        v284 = 0;
        v286 = 0;
      }
      else
      {
        v283 = *v281;
        v284 = v281[1];
        v285 = *(v282 - 2);
        v286 = *(v282 - 1);
      }
      LODWORD(v317[0]) = 134351105;
      *(uint64_t *)((char *)v317 + 4) = v279;
      WORD2(v317[1]) = 2049;
      *(uint64_t *)((char *)&v317[1] + 6) = v280;
      HIWORD(v317[2]) = 2050;
      v317[3] = v316;
      v318 = 2049;
      v319 = v283;
      v320 = 2049;
      v321 = v284;
      v322 = 2049;
      v323 = v285;
      v324 = 2049;
      v325 = v286;
      v326 = 2049;
      v327 = *(_QWORD *)&v331[24];
      v328 = 2049;
      v329 = *(_QWORD *)&v331[32];
      v296 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "CoreLocation: %s\n", v296);
      if (v296 != buf)
        free(v296);
    }
  }
  v19 = 1;
LABEL_437:
  sub_18F64F950((uint64_t *)&v314);
  if (SHIBYTE(v335) < 0)
    operator delete(*((void **)&v334 + 1));
  return v19;
}

void sub_18F744A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;

  STACK[0x2E0] = (unint64_t)&a35;
  sub_18F62AB98((void ***)&STACK[0x2E0]);
  sub_18F64F950(&a32);
  if (a68 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_18F744BF8(uint64_t a1)
{
  NSObject *v1;
  NSObject *v3;
  uint64_t v4;
  char *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 32))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v1 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_ERROR, "CLGeoMapFeatureAccessGeometryPedestrian::roadsAtIntersection - Code not implemented", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
      {
LABEL_16:
        v6 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "CoreLocation: %s\n", v6);
        if (v6 != (char *)buf)
          free(v6);
        return 0;
      }
LABEL_18:
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v3 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v8 = v4;
      _os_log_impl(&dword_18F5B3000, v3, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 == -1)
        goto LABEL_16;
      goto LABEL_18;
    }
  }
  return 0;
}

uint64_t sub_18F744E80(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, double a5, double a6)
{
  void *v12;
  uint64_t v13;
  double v14;
  uint64_t *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  NSObject *v23;
  double v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t *v31;
  unint64_t v32;
  char v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _QWORD *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  float v52;
  double v53;
  float v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  double v58;
  double v59;
  unint64_t v60;
  NSObject *v61;
  int v62;
  unsigned int v63;
  unint64_t v64;
  int v65;
  double v66;
  float v67;
  char *v68;
  char v69;
  uint64_t v70[2];
  double v71;
  __int128 v72;
  uint64_t *v73[2];
  uint64_t v74[4];
  _BYTE buf[12];
  __int16 v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v12 = (void *)MEMORY[0x1940032C4]();
  v13 = *a3;
  if (!*a3)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v22 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v22, OS_LOG_TYPE_ERROR, "#Warning,CLMMPED,input road is nullptr", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_24;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_128;
    goto LABEL_139;
  }
  sub_18F7047B4(*a3);
  v14 = *(double *)(v13 + 40);
  if (v14 <= 0.0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v23 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v23, OS_LOG_TYPE_ERROR, "#Warning,CLMMPED, road length is 0.0", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      goto LABEL_24;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_128;
LABEL_139:
    dispatch_once(&qword_1EE172158, &unk_1E2990C10);
LABEL_128:
    LOWORD(v74[0]) = 0;
    v21 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v21);
    goto LABEL_129;
  }
  v15 = (uint64_t *)*a3;
  if ((int)((*(_QWORD *)(*a3 + 144) - *(_QWORD *)(*a3 + 136)) >> 4) <= 1)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v16 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_QWORD *)*a3;
      v18 = (int)((uint64_t)(*(_QWORD *)(*a3 + 144) - *(_QWORD *)(*a3 + 136)) >> 4);
      *(_DWORD *)buf = 134283777;
      *(_QWORD *)&buf[4] = v17;
      v76 = 2050;
      v77 = v18;
      _os_log_impl(&dword_18F5B3000, v16, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", buf, 0x16u);
    }
    if (!sub_18F5C4AE0(115, 2))
      goto LABEL_24;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v19 = *(_QWORD *)*a3;
    v20 = (int)((uint64_t)(*(_QWORD *)(*a3 + 144) - *(_QWORD *)(*a3 + 136)) >> 4);
    LODWORD(v74[0]) = 134283777;
    *(uint64_t *)((char *)v74 + 4) = v19;
    WORD2(v74[1]) = 2050;
    *(uint64_t *)((char *)&v74[1] + 6) = v20;
    v21 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v21);
LABEL_129:
    if (v21 != buf)
      free(v21);
LABEL_24:
    objc_autoreleasePoolPop(v12);
    LOBYTE(v13) = 0;
    return v13 & 1;
  }
  v25 = fabs(a6);
  v26 = *((unsigned __int8 *)a3 + 20);
  v27 = 1.0 - a5;
  if (*((_BYTE *)a3 + 20))
  {
    if (a6 < 0.0)
      v27 = a5;
    v28 = v27 * v14;
    if (v27 * v14 <= v25)
    {
      v69 = 0;
      if (a6 < 0.0)
        v29 = 0.0;
      else
        v29 = 1.0;
      goto LABEL_42;
    }
  }
  else
  {
    if (a6 >= 0.0)
      v27 = a5;
    v28 = v27 * v14;
    if (v27 * v14 <= v25)
    {
      v69 = 0;
      if (a6 >= 0.0)
        v29 = 0.0;
      else
        v29 = 1.0;
      goto LABEL_42;
    }
  }
  v30 = a6 / v14;
  if (!*((_BYTE *)a3 + 20))
    v30 = -v30;
  v29 = v30 + a5;
  v69 = 1;
LABEL_42:
  memset(v74, 0, 24);
  if ((a4 & 0x80000000) == 0 && v28 <= v25)
  {
    v13 = a3[1];
    v73[0] = v15;
    v73[1] = (uint64_t *)v13;
    if (v13)
    {
      v31 = (unint64_t *)(v13 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v26 = *((unsigned __int8 *)a3 + 20);
    }
    v33 = sub_18F7426C4(a1, v73, v26 != 0, v74, 1, 10.0);
    if (v13)
    {
      v34 = (unint64_t *)(v13 + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
      }
    }
    if ((v33 & 1) == 0)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v13 = (uint64_t)off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, (os_log_t)v13, OS_LOG_TYPE_DEBUG, "CLMMPED,Warning,moveOnRoad,findAllDigitizedRoads returned false", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        LOWORD(v72) = 0;
        v13 = _os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", (const char *)v13);
        if ((_BYTE *)v13 != buf)
          free((void *)v13);
      }
    }
  }
  if (a6 >= 0.0 || (v36 = v74[0], v37 = v74[1], v74[0] == v74[1]))
  {
    v39 = -1;
  }
  else
  {
    v38 = 0;
    v39 = -1;
    do
    {
      v40 = *(_QWORD **)v36;
      v13 = *(_QWORD *)(v36 + 8);
      if (v13)
      {
        v41 = (unint64_t *)(v13 + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v43 = a2;
      while (1)
      {
        v43 = *(_QWORD *)(v43 + 8);
        if (v43 == a2)
          break;
        if (*(_QWORD *)(v43 + 16) == *v40 && (*(_BYTE *)(v43 + 24) & 1) == *(_BYTE *)(v36 + 16))
        {
          v39 = v38;
          break;
        }
      }
      if (v13)
      {
        v45 = (unint64_t *)(v13 + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
        }
      }
      if ((v39 & 0x80000000) == 0)
        break;
      ++v38;
      v36 += 24;
    }
    while (v36 != v37);
  }
  if ((v69 & 1) != 0
    || (a6 < 0.0 ? (v55 = v39 == -1) : (v55 = 0),
        !v55 ? (v56 = 0) : (v56 = 1),
        a4 < 0 || (v57 = v74[0], v74[1] == v74[0]) || v56))
  {
    v47 = (std::__shared_weak_count *)a3[1];
    v70[0] = *a3;
    v70[1] = (uint64_t)v47;
    v71 = 0.0;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(p_shared_owners);
      while (__stxr(v49 + 1, p_shared_owners));
    }
    LOBYTE(v13) = sub_18F7459D0((double *)(a1 + 56), v70, (double *)&v72, &v71, v29);
    if (v47)
    {
      v50 = (unint64_t *)&v47->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if ((v13 & 1) != 0)
    {
      *((double *)a3 + 6) = v29;
      *((_OWORD *)a3 + 2) = v72;
      v52 = v71;
      *((float *)a3 + 6) = v52;
      if (!*((_BYTE *)a3 + 20))
      {
        v53 = fmod((float)(v52 + 180.0), 360.0);
        if (v53 < 0.0)
          v53 = v53 + 360.0;
        v54 = v53;
        *((float *)a3 + 6) = v54;
      }
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v61 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v61, OS_LOG_TYPE_DEBUG, "#Warning CLMMPED,moveOnRoadInternal,interpolateProjections returned false", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        v68 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v68);
        if (v68 != buf)
          free(v68);
      }
    }
    v62 = 0;
    goto LABEL_125;
  }
  v58 = -v28;
  if (a6 < 0.0)
    v58 = v28;
  v59 = v58 + a6;
  if ((v39 & 0x80000000) != 0)
  {
    v63 = sub_18F64CB54(a1 + 96);
    v57 = v74[0];
    v60 = v63 % (0xAAAAAAAAAAAAAAABLL * ((v74[1] - v74[0]) >> 3));
    goto LABEL_117;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v74[1] - v74[0]) >> 3) > v39)
  {
    v60 = v39;
LABEL_117:
    v13 = 3 * v60;
    v64 = v57 + 24 * v60;
    v65 = *(unsigned __int8 *)(v64 + 16);
    sub_18F623A40(a3, (uint64_t *)v64);
    LOBYTE(v13) = *(_BYTE *)(v74[0] + 8 * v13 + 16);
    *((_BYTE *)a3 + 20) = v13;
    if (v65)
    {
      v29 = 0.0;
    }
    else
    {
      v66 = fmod((float)(*((float *)a3 + 6) + 180.0), 360.0);
      if (v66 < 0.0)
        v66 = v66 + 360.0;
      v67 = v66;
      *((float *)a3 + 6) = v67;
      v29 = 1.0;
    }
    if (a6 < 0.0)
      *((_BYTE *)a3 + 20) = v13 ^ 1;
  }
  v62 = 1;
  a6 = v59;
LABEL_125:
  *(_QWORD *)buf = v74;
  sub_18F747A3C((void ***)buf);
  objc_autoreleasePoolPop(v12);
  if (v62)
    LOBYTE(v13) = sub_18F744E80(a1, a2, a3, (a4 - 1), v29, a6);
  return v13 & 1;
}

void sub_18F745980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a19;
  sub_18F747A3C(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_18F7459D0(double *a1, uint64_t *a2, double *a3, double *a4, double a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  NSObject *v19;
  int v20;
  uint64_t result;
  uint8_t *v22;
  NSObject *v23;
  NSObject *v24;
  double *v25;
  double *v26;
  double v27;
  int v28;
  uint64_t v29;
  double v30;
  NSObject *v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  NSObject *v56;
  int v57;
  double v58;
  double v59;
  double __y[2];
  uint8_t buf[8];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  *a3 = 0.0;
  a3[1] = 0.0;
  *a4 = 0.0;
  v5 = (_QWORD *)*a2;
  if (*a2)
  {
    v6 = (v5[18] - v5[17]) >> 4;
    if ((int)v6 <= 0)
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v23 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v23, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", buf, 2u);
      }
      result = sub_18F5C4AE0(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      LOWORD(__y[0]) = 0;
    }
    else
    {
      if ((_DWORD)v6 == 1)
        return 1;
      sub_18F7047B4(*a2);
      v12 = (uint64_t)(v5[21] - v5[20]) >> 3;
      if (v12 == (_DWORD)v6 - 1)
      {
        v13 = *a2;
        sub_18F7047B4(v13);
        if (a5 < 0.000001)
        {
          *(_OWORD *)a3 = *(_OWORD *)*(_QWORD *)(v13 + 136);
          v14 = *a3;
          v15 = a3[1];
          v16 = *(_QWORD *)(v13 + 136);
          v17 = *(double *)(v16 + 16);
          v18 = *(double *)(v16 + 24);
LABEL_51:
          *(_QWORD *)buf = 0;
          __y[0] = 0.0;
          sub_18F5BD37C(a1, (double *)buf, __y, &v59, v14, v15, 0.0, v17, v18, 0.0);
          v33 = atan2(__y[0], *(long double *)buf);
          if (v33 < 0.0)
            v33 = v33 + 6.28318531;
          v34 = v33 * 57.2957795;
LABEL_54:
          *a4 = v34;
          return 1;
        }
        if (a5 >= 0.999999)
        {
          *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(v13 + 136) + 16 * v12);
          v32 = *(_QWORD *)(v13 + 136) + 16 * v12;
          v14 = *(double *)(v32 - 16);
          v15 = *(double *)(v32 - 8);
          v17 = *a3;
          v18 = a3[1];
          goto LABEL_51;
        }
        v25 = (double *)v5[20];
        v26 = (double *)v5[21];
        if (v25 != v26)
        {
          v27 = 0.0;
          v28 = 2;
          v29 = 24;
          while (1)
          {
            v30 = *v25 / *(double *)(v13 + 40);
            if (vabdd_f64(a5, v27 + v30) < 0.000001)
              break;
            if (v27 + v30 > a5)
            {
              v48 = (a5 - v27) / v30;
              v49 = *(_QWORD *)(v13 + 136);
              v50 = v49 + v29;
              v51 = *(double *)(v49 + v29 - 16);
              v52 = *(double *)(v49 + v29);
              *a3 = *(double *)(v49 + v29 - 24) + (*(double *)(v49 + v29 - 8) - *(double *)(v49 + v29 - 24)) * v48;
              v53 = v51 + 360.0;
              if (v51 >= 0.0)
                v53 = v51;
              v54 = v52 + 360.0;
              if (v52 >= 0.0)
                v54 = v52;
              v55 = v54 - v53;
              if (v55 <= 180.0)
              {
                if (v55 < -180.0)
                  v55 = v55 + 360.0;
              }
              else
              {
                v55 = v55 + -360.0;
              }
              v58 = fmod(v51 + v55 * v48, 360.0);
              if (v58 <= -180.0)
              {
                v58 = v58 + 360.0;
              }
              else if (v58 > 180.0)
              {
                v58 = v58 + -360.0;
              }
              a3[1] = v58;
              v14 = *(double *)(v50 - 24);
              v15 = *(double *)(v49 + v29 - 16);
              v17 = *(double *)(v50 - 8);
              v18 = *(double *)(v49 + v29);
              goto LABEL_51;
            }
            ++v25;
            v29 += 16;
            ++v28;
            v27 = v27 + v30;
            if (v25 == v26)
              goto LABEL_42;
          }
          if (v28 < (int)v6)
          {
            *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(v13 + 136) + v29 - 8);
            v35 = *(_QWORD *)(v13 + 136) + v29;
            v36 = *(double *)(v35 - 24);
            v37 = *(double *)(v35 - 16);
            v38 = *a3;
            v39 = a3[1];
            *(_QWORD *)buf = 0;
            __y[0] = 0.0;
            sub_18F5BD37C(a1, (double *)buf, __y, &v59, v36, v37, 0.0, v38, v39, 0.0);
            v40 = atan2(__y[0], *(long double *)buf);
            if (v40 < 0.0)
              v40 = v40 + 6.28318531;
            v41 = v40 * 57.2957795;
            v42 = *a3;
            v43 = a3[1];
            v44 = *(_QWORD *)(v13 + 136) + v29;
            v45 = *(double *)(v44 + 8);
            v46 = *(double *)(v44 + 16);
            *(_QWORD *)buf = 0;
            __y[0] = 0.0;
            sub_18F5BD37C(a1, (double *)buf, __y, &v59, v42, v43, 0.0, v45, v46, 0.0);
            v47 = atan2(__y[0], *(long double *)buf);
            if (v47 < 0.0)
              v47 = v47 + 6.28318531;
            sub_18F5F3E84(v41, v47 * 57.2957795);
            goto LABEL_54;
          }
          if (qword_1EE172158 != -1)
            dispatch_once(&qword_1EE172158, &unk_1E2990C10);
          v56 = off_1EE172160;
          if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F5B3000, v56, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", buf, 2u);
          }
          v57 = sub_18F5C4AE0(115, 0);
          result = 0;
          if (v57)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE172158 != -1)
              dispatch_once(&qword_1EE172158, &unk_1E2990C10);
            LOWORD(__y[0]) = 0;
LABEL_15:
            v22 = (uint8_t *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n");
LABEL_33:
            if (v22 != buf)
              free(v22);
            return 0;
          }
          return result;
        }
LABEL_42:
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        v31 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v31, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", buf, 2u);
        }
        result = sub_18F5C4AE0(115, 2);
        if (!(_DWORD)result)
          return result;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        LOWORD(__y[0]) = 0;
      }
      else
      {
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        v24 = off_1EE172160;
        if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F5B3000, v24, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", buf, 2u);
        }
        result = sub_18F5C4AE0(115, 2);
        if (!(_DWORD)result)
          return result;
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        LOWORD(__y[0]) = 0;
      }
    }
    v22 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n");
    goto LABEL_33;
  }
  if (qword_1EE172158 != -1)
    dispatch_once(&qword_1EE172158, &unk_1E2990C10);
  v19 = off_1EE172160;
  if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F5B3000, v19, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
  }
  v20 = sub_18F5C4AE0(115, 0);
  result = 0;
  if (v20)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    LOWORD(__y[0]) = 0;
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_18F746230(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v5;
  NSObject *v7;
  uint64_t v8;
  char *v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 32))
  {
    v5 = 1050.0;
    if (a4 <= 1050.0)
    {
      v5 = a4;
      if (a4 < -1050.0)
        v5 = -1050.0;
    }
    return sub_18F744E80(a1, a3, (uint64_t *)a2, 30, *(double *)(a2 + 48), v5);
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v7 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v11 = v8;
      _os_log_impl(&dword_18F5B3000, v7, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoad(struct CLMapGeometry::DistanceQueryResult &, double, const CLMapGeometry::RoadInfoList &) const", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
    return 0;
  }
}

uint64_t sub_18F74645C(uint64_t a1, uint64_t *a2, uint64_t *a3, int *a4, double a5, double a6)
{
  uint64_t v8;
  double v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  double v27;
  double v28;
  double v29;
  std::__shared_weak_count *v30;
  double v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  float v36;
  double v37;
  float v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  int v44;
  __n128 v45;
  float v46;
  NSObject *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  NSObject *v54;
  char *v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[2];
  double v60;
  _BYTE v61[28];
  uint8_t buf[4];
  uint64_t v63;
  __int16 v64;
  _WORD v65[817];

  *(_QWORD *)&v65[813] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v20 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v21 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v63 = v21;
      _os_log_impl(&dword_18F5B3000, v20, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v22 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)v61 = 134349056;
    *(_QWORD *)&v61[4] = v22;
    v19 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v19);
    goto LABEL_95;
  }
  v8 = *a2;
  if (!*a2)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v23 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v23, OS_LOG_TYPE_ERROR, "#Warning,CLMMPED,input road is nullptr", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_94;
    goto LABEL_97;
  }
  sub_18F7047B4(*a2);
  v13 = *(double *)(v8 + 40);
  if (v13 <= 0.0)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v24 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v24, OS_LOG_TYPE_ERROR, "#Warning,CLMMPED, road length is 0.0", buf, 2u);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 == -1)
      goto LABEL_94;
LABEL_97:
    dispatch_once(&qword_1EE172158, &unk_1E2990C10);
LABEL_94:
    *(_WORD *)v61 = 0;
    v19 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v19);
    goto LABEL_95;
  }
  if ((int)((*(_QWORD *)(*a2 + 144) - *(_QWORD *)(*a2 + 136)) >> 4) <= 1)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v14 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_QWORD *)*a2;
      v16 = (int)((uint64_t)(*(_QWORD *)(*a2 + 144) - *(_QWORD *)(*a2 + 136)) >> 4);
      *(_DWORD *)buf = 134283777;
      v63 = v15;
      v64 = 2050;
      *(_QWORD *)v65 = v16;
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", buf, 0x16u);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v17 = *(_QWORD *)*a2;
    v18 = (int)((uint64_t)(*(_QWORD *)(*a2 + 144) - *(_QWORD *)(*a2 + 136)) >> 4);
    *(_DWORD *)v61 = 134283777;
    *(_QWORD *)&v61[4] = v17;
    *(_WORD *)&v61[12] = 2050;
    *(_QWORD *)&v61[14] = v18;
    v19 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v19);
LABEL_95:
    if (v19 != (char *)buf)
      free(v19);
    return 0;
  }
  v27 = 1.0 - a5;
  if (!*((_BYTE *)a2 + 20))
    v27 = a5;
  v28 = v13 * v27;
  if (v13 * v27 > fabs(a6))
  {
    v29 = a6 / v13;
    if (!*((_BYTE *)a2 + 20))
      v29 = -v29;
    v30 = (std::__shared_weak_count *)a2[1];
    v31 = v29 + a5;
    v59[0] = *a2;
    v59[1] = (uint64_t)v30;
    v60 = 0.0;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
    }
    v25 = sub_18F7459D0((double *)(a1 + 56), v59, (double *)v61, &v60, v29 + a5);
    if (v30)
    {
      v34 = (unint64_t *)&v30->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if ((v25 & 1) != 0)
    {
      *((double *)a2 + 6) = v31;
      *((_OWORD *)a2 + 2) = *(_OWORD *)v61;
      v36 = v60;
      *((float *)a2 + 6) = v36;
      if (!*((_BYTE *)a2 + 20))
      {
        v37 = fmod((float)(v36 + 180.0), 360.0);
        if (v37 < 0.0)
          v37 = v37 + 360.0;
        v38 = v37;
        *((float *)a2 + 6) = v38;
      }
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v54 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v54, OS_LOG_TYPE_DEBUG, "#Warning CLMMPED,moveOnRouteRoads,interpolateProjections returned false", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        v55 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v55);
        if (v55 != (char *)buf)
          free(v55);
      }
    }
    return v25;
  }
  v39 = *a4;
  v40 = v39 + 1;
  *a4 = v39 + 1;
  if ((int)v39 > 9 || a3[2] <= v40)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v47 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v48 = *(_QWORD *)(a1 + 8);
      v49 = *a4;
      v50 = a3[2];
      *(_DWORD *)buf = 134218496;
      v63 = v48;
      v64 = 1024;
      *(_DWORD *)v65 = v49;
      v65[2] = 2048;
      *(_QWORD *)&v65[3] = v50;
      _os_log_impl(&dword_18F5B3000, v47, OS_LOG_TYPE_DEBUG, "CLMMPED,%.3lf, no more route roads available to cover the distance travelled,index,%d,size,%lu", buf, 0x1Cu);
    }
    if (!sub_18F5C4AE0(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v51 = *(_QWORD *)(a1 + 8);
    v52 = *a4;
    v53 = a3[2];
    *(_DWORD *)v61 = 134218496;
    *(_QWORD *)&v61[4] = v51;
    *(_WORD *)&v61[12] = 1024;
    *(_DWORD *)&v61[14] = v52;
    *(_WORD *)&v61[18] = 2048;
    *(_QWORD *)&v61[20] = v53;
    v19 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v19);
    goto LABEL_95;
  }
  v41 = (uint64_t *)a3[1];
  if ((int)v39 <= -2)
  {
    do
      v41 = (uint64_t *)*v41;
    while (!__CFADD__(v40++, 1));
  }
  else if ((_DWORD)v39 != -1)
  {
    v42 = v39 + 2;
    do
    {
      v41 = (uint64_t *)v41[1];
      --v42;
    }
    while (v42 > 1);
  }
  if (v41 == a3)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v56 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v57 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134217984;
      v63 = v57;
      _os_log_impl(&dword_18F5B3000, v56, OS_LOG_TYPE_ERROR, "CLMMPED,%.3lf, unexpectedly reached to the end of routeRoadList", buf, 0xCu);
    }
    if (!sub_18F5C4AE0(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v58 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)v61 = 134217984;
    *(_QWORD *)&v61[4] = v58;
    v19 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v19);
    goto LABEL_95;
  }
  v44 = *((unsigned __int8 *)v41 + 36);
  sub_18F623A40(a2, v41 + 2);
  *((_BYTE *)a2 + 20) = *((_BYTE *)v41 + 36);
  v45.n128_u64[0] = 0;
  if (!v44)
  {
    v45.n128_f64[0] = fmod((float)(*((float *)a2 + 6) + 180.0), 360.0);
    if (v45.n128_f64[0] < 0.0)
      v45.n128_f64[0] = v45.n128_f64[0] + 360.0;
    v46 = v45.n128_f64[0];
    *((float *)a2 + 6) = v46;
    v45.n128_u64[0] = 1.0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *, __n128, double))(*(_QWORD *)a1 + 56))(a1, a2, a3, a4, v45, a6 - v28);
}

void sub_18F74703C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_18F5D6004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F747058(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double Current;
  NSObject *v5;
  uint64_t v6;
  char *v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = v2 + 288;
      Current = CFAbsoluteTimeGetCurrent();
      sub_18F61F28C(v3, Current, 0.5, 0.5);
    }
    sub_18F61F28C(a1 + 2616, *(double *)(a1 + 8), 60.0, 60.0);
  }
  else
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v5 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134349056;
      v9 = v6;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v7 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "virtual void CLGeoMapFeatureAccessGeometryPedestrian::clearStoredStaleConnections()", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
  }
}

void sub_18F747278(uint64_t a1)
{
  sub_18F6EFDC4(a1);
  JUMPOUT(0x194002D30);
}

uint64_t sub_18F74729C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 2648))
    return 3;
  else
    return 2;
}

uint64_t sub_18F7472B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2648);
}

os_log_t sub_18F7472B8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1EE172160 = result;
  return result;
}

void sub_18F7472E4(_QWORD *a1, void *a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v4 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349571;
      v33 = objc_msgSend_code(a2, v5, v6, v7);
      v34 = 2114;
      v35 = objc_msgSend_domain(a2, v8, v9, v10);
      v36 = 2113;
      v37 = objc_msgSend_localizedDescription(a2, v11, v12, v13);
      _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_DEFAULT, "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      objc_msgSend_code(a2, v19, v20, v21);
      objc_msgSend_domain(a2, v22, v23, v24);
      objc_msgSend_localizedDescription(a2, v25, v26, v27);
      v28 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v28);
      if (v28 != (char *)buf)
        free(v28);
    }
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
  {
    if (qword_1EE172158 != -1)
      dispatch_once(&qword_1EE172158, &unk_1E2990C10);
    v14 = off_1EE172160;
    if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
      v16 = *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24);
      *(_DWORD *)buf = 134349312;
      v33 = v15;
      v34 = 1026;
      LODWORD(v35) = v16;
      _os_log_impl(&dword_18F5B3000, v14, OS_LOG_TYPE_DEBUG, "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d", buf, 0x12u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v29 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
    dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1[5] + 8) + 40));
  }
  if (*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v17 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v17, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup when time-out has happened", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        v30 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v30);
        if (v30 != (char *)buf)
          free(v30);
      }

      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = 0;
    }
    else
    {
      if (qword_1EE172158 != -1)
        dispatch_once(&qword_1EE172158, &unk_1E2990C10);
      v18 = off_1EE172160;
      if (os_log_type_enabled((os_log_t)off_1EE172160, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F5B3000, v18, OS_LOG_TYPE_ERROR, "CLMM,dispatchGroup is unexpectedly nil", buf, 2u);
      }
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE172158 != -1)
          dispatch_once(&qword_1EE172158, &unk_1E2990C10);
        v31 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "CoreLocation: %s\n", v31);
        if (v31 != (char *)buf)
          free(v31);
      }
    }
  }
}

void sub_18F747954()
{
  JUMPOUT(0x194002D30);
}

__n128 sub_18F747968(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E298DDF0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_18F7479A8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E298DDF0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_18F7479D0(uint64_t a1, const char *a2)
{
  return objc_msgSend_findRoadsNear_radius_handler_completionHandler_(*(void **)(*(_QWORD *)(a1 + 8) + 2600), a2, **(_QWORD **)(a1 + 32), *(_QWORD *)a2, **(double **)(a1 + 16), *(double *)(*(_QWORD *)(a1 + 16) + 8), **(double **)(a1 + 24));
}

uint64_t sub_18F7479F4(uint64_t a1, uint64_t a2)
{
  if (sub_18F64FAAC(a2, (uint64_t)&unk_1E298DBE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_18F747A30()
{
  return &unk_1E298DBE0;
}

void sub_18F747A3C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_18F5D6004(v4 - 24);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_18F747AAC(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v6 = a2[1];
  }
  else
  {
    v5 = result[1];
    v6 = a2[1];
    do
    {
      v7 = *(_QWORD *)(v5 - 24);
      v5 -= 24;
      *(_QWORD *)(v6 - 24) = v7;
      v6 -= 24;
      v8 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v6 + 8) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      *(_BYTE *)(v4 - 8) = *(_BYTE *)(v3 - 8);
      v3 = v5;
      v4 = v6;
    }
    while (v5 != v2);
  }
  a2[1] = v6;
  v11 = *result;
  *result = v6;
  a2[1] = v11;
  v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_18F747B48(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_18F5D6004(i - 24);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_18F747B94()
{
  if (qword_1ECD8F8C8 != -1)
    dispatch_once(&qword_1ECD8F8C8, &unk_1E2990C30);
  return qword_1ECD8F8C0;
}

double sub_18F747BD4()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_BYTE *)v0 = 1;
  *(_QWORD *)(v0 + 136) = 0;
  *(_QWORD *)(v0 + 144) = 0;
  *(_DWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 216) = 0;
  *(_QWORD *)(v0 + 224) = 0;
  *(_DWORD *)(v0 + 232) = 0;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_OWORD *)(v0 + 328) = 0u;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 116) = 0u;
  *(_DWORD *)(v0 + 208) = 0;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_DWORD *)(v0 + 288) = 0;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  qword_1ECD8F8C0 = v0;
  return result;
}

std::string *sub_18F747C8C(std::string *result, std::string *__str)
{
  uint64_t v3;
  std::string *v4;
  std::string::value_type v5;
  uint64_t v6;
  std::string::size_type size;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::value_type *v10;
  std::string *v11;

  if (result->__r_.__value_.__s.__data_[0])
  {
    v3 = (uint64_t)result;
    v4 = (std::string *)&result->__r_.__value_.__r.__words[1];
    v5 = result[1].__r_.__value_.__s.__data_[7];
    if (v5 < 0)
    {
      if (!result->__r_.__value_.__r.__words[2])
        return std::string::operator=(v4, __str);
    }
    else if (!result[1].__r_.__value_.__s.__data_[7])
    {
      return std::string::operator=(v4, __str);
    }
    v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    size = __str->__r_.__value_.__l.__size_;
    if ((v6 & 0x80u) == 0)
      v8 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      v8 = __str->__r_.__value_.__l.__size_;
    if (v5 >= 0)
      v9 = result[1].__r_.__value_.__s.__data_[7];
    else
      v9 = result->__r_.__value_.__r.__words[2];
    if (v8 == v9)
    {
      if (v5 >= 0)
        v10 = &result->__r_.__value_.__s.__data_[8];
      else
        v10 = (std::string::value_type *)v4->__r_.__value_.__r.__words[0];
      if ((v6 & 0x80) == 0)
      {
        if ((_DWORD)v6)
        {
          v11 = __str;
          while (v11->__r_.__value_.__s.__data_[0] == *v10)
          {
            v11 = (std::string *)((char *)v11 + 1);
            ++v10;
            if (!--v6)
              goto LABEL_25;
          }
          goto LABEL_23;
        }
        goto LABEL_25;
      }
      result = (std::string *)memcmp(__str->__r_.__value_.__l.__data_, v10, size);
      if (!(_DWORD)result)
      {
LABEL_25:
        ++*(_DWORD *)(v3 + 288);
        return result;
      }
    }
LABEL_23:
    sub_18F747DC8((_BYTE *)v3);
    MEMORY[0x194002BEC](v4, &unk_18F7D3073);
    *(_QWORD *)(v3 + 136) = 0;
    *(_QWORD *)(v3 + 144) = 0;
    *(_DWORD *)(v3 + 152) = 0;
    *(_QWORD *)(v3 + 168) = 0;
    *(_QWORD *)(v3 + 176) = 0;
    *(_QWORD *)(v3 + 160) = 0;
    *(_QWORD *)(v3 + 216) = 0;
    *(_QWORD *)(v3 + 224) = 0;
    *(_DWORD *)(v3 + 232) = 0;
    *(_QWORD *)(v3 + 248) = 0;
    *(_QWORD *)(v3 + 256) = 0;
    *(_QWORD *)(v3 + 240) = 0;
    *(_DWORD *)(v3 + 288) = 0;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
    return std::string::operator=(v4, __str);
  }
  return result;
}

void sub_18F747DC8(_BYTE *a1)
{
  NSObject *v1;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    AnalyticsSendEventLazy();
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2992F88);
    v1 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F5B3000, v1, OS_LOG_TYPE_DEFAULT, "CLTSP,Analytics Submitted", buf, 2u);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2992F88);
      v2 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentAnalytics::submitStats()", "CoreLocation: %s\n", v2);
      if (v2 != (char *)buf)
        free(v2);
    }
  }
}

void sub_18F747F94(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t i;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  double v63;
  double v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  double v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  double v96;
  double v97;
  double v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  double v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  double v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  double v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  void *Object;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  double v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  uint64_t v146;
  void *v147;
  double v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  char v153[8];
  uint64_t v154;
  uint64_t v155;
  int v156;
  __int128 v157;
  void *__p[2];
  __int128 v159;
  _BYTE v160[128];
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  if (a2 && *(_BYTE *)a1)
  {
    v6 = (void *)objc_msgSend_tripLocations(a2, (const char *)a2, a3, a4);
    *(_DWORD *)(a1 + 36) += objc_msgSend_count(v6, v7, v8, v9);
    objc_msgSend_distance_m(a2, v10, v11, v12);
    *(_DWORD *)(a1 + 44) += (int)v13;
    objc_msgSend_duration_s(a2, v14, v15, v16);
    *(_DWORD *)(a1 + 40) += (int)v17;
    *(_DWORD *)v153 = 0;
    v154 = 0;
    v155 = 0;
    v156 = 0;
    v157 = 0u;
    *(_OWORD *)__p = 0u;
    v159 = 0u;
    v149 = 0u;
    v150 = 0u;
    v151 = 0u;
    v152 = 0u;
    v21 = (void *)objc_msgSend_tripLocations(a2, v18, v19, v20);
    v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v21, v22, (uint64_t)&v149, (uint64_t)v160, 16);
    v147 = a2;
    if (v26)
    {
      v27 = 0;
      v28 = *(_QWORD *)v150;
      v148 = 0.0;
      v29 = 0.0;
      v30 = 0.0;
      do
      {
        for (i = 0; i != v26; ++i)
        {
          v32 = v27;
          if (*(_QWORD *)v150 != v28)
            objc_enumerationMutation(v21);
          v27 = *(void **)(*((_QWORD *)&v149 + 1) + 8 * i);
          objc_msgSend_speed(v27, v23, v24, v25, v147);
          if (v36 < 0.0
            || (objc_msgSend_speedAccuracy(v27, v33, v34, v35), v37 <= 0.0)
            || (objc_msgSend_speed(v27, v33, v34, v35), (v38 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            || (objc_msgSend_speedAccuracy(v27, v33, v34, v35), (v39 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000))
          {
            ++*(_DWORD *)(a1 + 112);
          }
          objc_msgSend_course(v27, v33, v34, v35);
          if (v43 < 0.0
            || (objc_msgSend_courseAccuracy(v27, v40, v41, v42), v44 <= 0.0)
            || (objc_msgSend_course(v27, v40, v41, v42), (v45 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            || (objc_msgSend_courseAccuracy(v27, v40, v41, v42), (v46 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000))
          {
            ++*(_DWORD *)(a1 + 116);
          }
          if (objc_msgSend_isOriginalLocationType(v27, v40, v41, v42))
            ++*(_DWORD *)(a1 + 56);
          if (objc_msgSend_isInertialIntegrated(v27, v47, v48, v49))
            ++*(_DWORD *)(a1 + 64);
          if (objc_msgSend_isLinearInterpolated(v27, v50, v51, v52))
            ++*(_DWORD *)(a1 + 60);
          if (objc_msgSend_isMapMatched(v27, v53, v54, v55))
            ++*(_DWORD *)(a1 + 68);
          if (v32)
          {
            v56 = (void *)objc_msgSend_timestamp(v27, v23, v24, v25);
            v60 = objc_msgSend_timestamp(v32, v57, v58, v59);
            objc_msgSend_timeIntervalSinceDate_(v56, v61, v60, v62);
            v64 = v63;
            sub_18F6C0F18((char *)(a1 + 208), v63);
            if (v64 > 0.0)
            {
              objc_msgSend_speed(v27, v23, v24, v25);
              v68 = 0.0;
              if (v69 >= 0.0)
              {
                objc_msgSend_speed(v32, v65, v66, v67);
                if (v70 >= 0.0)
                {
                  objc_msgSend_speed(v27, v65, v66, v67);
                  v72 = v71;
                  objc_msgSend_speed(v32, v73, v74, v75);
                  v68 = v72 - v76;
                }
              }
              objc_msgSend_altitude(v27, v65, v66, v67);
              v78 = v77;
              objc_msgSend_altitude(v32, v79, v80, v81);
              v83 = v82;
              objc_msgSend_speed(v32, v84, v85, v86);
              v88 = v87;
              objc_msgSend_speed(v32, v89, v90, v91);
              v96 = v88 * v95;
              if (v68 > 0.0)
              {
                objc_msgSend_speed(v27, v92, v93, v94);
                v98 = v97;
                objc_msgSend_speed(v27, v99, v100, v101);
                v148 = v148 + -(v96 - v98 * v102) * 0.5;
              }
              if (v78 - v83 <= 0.0)
                v103 = -0.0;
              else
                v103 = v78 - v83;
              objc_msgSend_speed(v32, v92, v93, v94);
              v105 = v104;
              objc_msgSend_speed(v32, v106, v107, v108);
              v110 = v109;
              sub_18F6C0F18(v153, v68 / v64);
              v29 = v29 + v103;
              v30 = v30 + (v96 * v105 + v96 * 1.5 * v68 + v110 * (v68 * v68) + v68 * (v68 * v68) * 0.25) * v64;
            }
          }
        }
        v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v21, v23, (uint64_t)&v149, (uint64_t)v160, 16);
      }
      while (v26);
    }
    else
    {
      v148 = 0.0;
      v29 = 0.0;
      v30 = 0.0;
    }
    v111 = v147;
    objc_msgSend_distance_m(v147, v23, v24, v25, v147);
    if (v115 > 0.0)
    {
      objc_msgSend_distance_m(v111, v112, v113, v114);
      *(double *)(a1 + 296) = v148 / v116;
      objc_msgSend_distance_m(v111, v117, v118, v119);
      *(double *)(a1 + 320) = sqrt(v30 / v120);
      v124 = (void *)objc_msgSend_tripLocations(v111, v121, v122, v123);
      Object = (void *)objc_msgSend_lastObject(v124, v125, v126, v127);
      objc_msgSend_altitude(Object, v129, v130, v131);
      v133 = v132;
      v137 = (void *)objc_msgSend_tripLocations(v111, v134, v135, v136);
      v141 = (void *)objc_msgSend_firstObject(v137, v138, v139, v140);
      objc_msgSend_altitude(v141, v142, v143, v144);
      *(double *)(a1 + 304) = v29;
      *(double *)(a1 + 312) = v133 - v145;
      v146 = v157;
      *(_QWORD *)(a1 + 328) = v154;
      *(_QWORD *)(a1 + 336) = v146;
    }
    if (__p[1])
    {
      *(void **)&v159 = __p[1];
      operator delete(__p[1]);
    }
  }
}

void sub_18F748428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F748464(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  double v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  double v33;
  double v34;
  double v35;
  BOOL v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  double v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  double v53;
  double v54;
  double v55;
  BOOL v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  double v61;
  BOOL v62;
  int v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  double v69;
  double v70;
  double v71;
  BOOL v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  double v77;
  BOOL v78;
  int v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  double v96;
  double v97;
  double v98;
  BOOL v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  double v110;
  BOOL v111;
  int v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  double v118;
  BOOL v119;
  double v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  _QWORD v147[32];
  _QWORD v148[33];

  v148[32] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v147[0] = CFSTR("modeOfTransport");
  v148[0] = objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], a2, *(_QWORD *)(v4 + 48), a4);
  v147[1] = CFSTR("breadcrumbCount");
  v148[1] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v5, *(unsigned int *)(v4 + 32), v6);
  v147[2] = CFSTR("tripSegmentDuration");
  v148[2] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v7, *(unsigned int *)(v4 + 40), v8);
  v147[3] = CFSTR("tripSegmentDistance");
  v148[3] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v9, *(unsigned int *)(v4 + 44), v10);
  v147[4] = CFSTR("tripSegmentReconstructedLocCount");
  v148[4] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v11, *(unsigned int *)(v4 + 36), v12);
  v147[5] = CFSTR("originalLocationPercentage");
  v16 = *(_DWORD *)(v4 + 36);
  v17 = 0.0;
  v18 = 0.0;
  if (v16)
  {
    v19 = (double)*(int *)(v4 + 56) / (double)v16 * 100.0;
    v20 = v19 > 1.0 || v19 <= 0.0;
    v18 = (double)(int)llround(v19);
    if (!v20)
      v18 = 1.0;
  }
  v148[5] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v13, v14, v15, v18);
  v147[6] = CFSTR("linearInterpolationPercentage");
  v24 = *(_DWORD *)(v4 + 36);
  if (!v24)
    goto LABEL_14;
  v25 = (double)*(int *)(v4 + 60) / (double)v24 * 100.0;
  v26 = v25 > 1.0 || v25 <= 0.0;
  v27 = llround(v25);
  if (v26)
  {
    v17 = (double)v27;
LABEL_14:
    v28 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v21, v22, v23, v17);
    goto LABEL_15;
  }
  v28 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v21, v22, v23, 1.0);
LABEL_15:
  v148[6] = v28;
  v147[7] = CFSTR("inertialIntegrationPercentgae");
  v32 = *(_DWORD *)(v4 + 36);
  v33 = 0.0;
  v34 = 0.0;
  if (v32)
  {
    v35 = (double)*(int *)(v4 + 64) / (double)v32 * 100.0;
    v36 = v35 > 1.0 || v35 <= 0.0;
    v34 = (double)(int)llround(v35);
    if (!v36)
      v34 = 1.0;
  }
  v148[7] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v29, v30, v31, v34);
  v147[8] = CFSTR("mapmatchedPercentage");
  v40 = *(_DWORD *)(v4 + 36);
  if (!v40)
    goto LABEL_28;
  v41 = (double)*(int *)(v4 + 68) / (double)v40 * 100.0;
  v42 = v41 > 1.0 || v41 <= 0.0;
  v43 = llround(v41);
  if (v42)
  {
    v33 = (double)v43;
LABEL_28:
    v44 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v37, v38, v39, v33);
    goto LABEL_29;
  }
  v44 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v37, v38, v39, 1.0);
LABEL_29:
  v148[8] = v44;
  v147[9] = CFSTR("mapmatcherSegmentCount");
  v148[9] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v45, *(unsigned int *)(v4 + 72), v46);
  v147[10] = CFSTR("aStarAttemptCount");
  v148[10] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v47, *(unsigned int *)(v4 + 76), v48);
  v147[11] = CFSTR("aStarRejectedPercentage");
  v52 = *(_DWORD *)(v4 + 76);
  v53 = 0.0;
  v54 = 0.0;
  if (v52)
  {
    v55 = (double)*(int *)(v4 + 92) / (double)v52 * 100.0;
    v56 = v55 > 1.0 || v55 <= 0.0;
    v54 = (double)(int)llround(v55);
    if (!v56)
      v54 = 1.0;
  }
  v148[11] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v49, v50, v51, v54);
  v147[12] = CFSTR("aStarFailurePercentage");
  v60 = *(_DWORD *)(v4 + 76);
  if (!v60)
    goto LABEL_42;
  v61 = (double)*(int *)(v4 + 80) / (double)v60 * 100.0;
  v62 = v61 > 1.0 || v61 <= 0.0;
  v63 = llround(v61);
  if (v62)
  {
    v53 = (double)v63;
LABEL_42:
    v64 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v57, v58, v59, v53);
    goto LABEL_43;
  }
  v64 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v57, v58, v59, 1.0);
LABEL_43:
  v148[12] = v64;
  v147[13] = CFSTR("astarRoadCountExceededMaxPercentage");
  v68 = *(_DWORD *)(v4 + 76);
  v69 = 0.0;
  v70 = 0.0;
  if (v68)
  {
    v71 = (double)*(int *)(v4 + 84) / (double)v68 * 100.0;
    v72 = v71 > 1.0 || v71 <= 0.0;
    v70 = (double)(int)llround(v71);
    if (!v72)
      v70 = 1.0;
  }
  v148[13] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v65, v66, v67, v70);
  v147[14] = CFSTR("astarIterationExceededMaxPercentage");
  v76 = *(_DWORD *)(v4 + 76);
  if (!v76)
    goto LABEL_56;
  v77 = (double)*(int *)(v4 + 88) / (double)v76 * 100.0;
  v78 = v77 > 1.0 || v77 <= 0.0;
  v79 = llround(v77);
  if (v78)
  {
    v69 = (double)v79;
LABEL_56:
    v80 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v73, v74, v75, v69);
    goto LABEL_57;
  }
  v80 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v73, v74, v75, 1.0);
LABEL_57:
  v148[14] = v80;
  v147[15] = CFSTR("astarMaxIterations");
  v148[15] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v81, v82, v83, *(double *)(v4 + 136));
  v147[16] = CFSTR("astarAvgIterations");
  v148[16] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v84, v85, v86, *(double *)(v4 + 160));
  v147[17] = CFSTR("aStarProcessingTime");
  v148[17] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v87, v88, v89, *(double *)(v4 + 96));
  v147[18] = CFSTR("mapDataQueryCount");
  v148[18] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v90, *(unsigned int *)(v4 + 104), v91);
  v147[19] = CFSTR("mapDataUnavailablePercentage");
  v95 = *(_DWORD *)(v4 + 104);
  v96 = 0.0;
  v97 = 0.0;
  if (v95)
  {
    v98 = (double)*(int *)(v4 + 108) / (double)v95 * 100.0;
    v99 = v98 > 1.0 || v98 <= 0.0;
    v97 = (double)(int)llround(v98);
    if (!v99)
      v97 = 1.0;
  }
  v148[19] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v92, v93, v94, v97);
  v147[20] = CFSTR("maxTimeBetweenEpochs");
  v148[20] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v100, v101, v102, *(double *)(v4 + 216));
  v147[21] = CFSTR("avgTimeBetweenEpochs");
  v148[21] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v103, v104, v105, *(double *)(v4 + 240));
  v147[22] = CFSTR("invalidSpeedPercentage");
  v109 = *(_DWORD *)(v4 + 36);
  if (v109)
  {
    v110 = (double)*(int *)(v4 + 112) / (double)v109 * 100.0;
    v111 = v110 > 1.0 || v110 <= 0.0;
    v112 = llround(v110);
    if (!v111)
    {
      v113 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v106, v107, v108, 1.0);
      goto LABEL_71;
    }
    v96 = (double)v112;
  }
  v113 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v106, v107, v108, v96);
LABEL_71:
  v148[22] = v113;
  v147[23] = CFSTR("invalidCoursePercentage");
  v117 = *(_DWORD *)(v4 + 36);
  if (!v117)
  {
    v120 = 0.0;
LABEL_79:
    v121 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v114, v115, v116, v120);
    goto LABEL_80;
  }
  v118 = (double)*(int *)(v4 + 112) / (double)v117 * 100.0;
  v119 = v118 > 1.0 || v118 <= 0.0;
  v120 = (double)(int)llround(v118);
  if (v119)
    goto LABEL_79;
  v121 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v114, v115, v116, 1.0);
LABEL_80:
  v148[23] = v121;
  v147[24] = CFSTR("tripChunksCount");
  v148[24] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v122, *(unsigned int *)(v4 + 288), v123);
  v147[25] = CFSTR("processingTime");
  v148[25] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v124, v125, v126, *(double *)(v4 + 120));
  v147[26] = CFSTR("kineticEnergyCycling");
  v148[26] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v127, v128, v129, *(double *)(v4 + 296));
  v147[27] = CFSTR("characteristicSpeed");
  v148[27] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v130, v131, v132, *(double *)(v4 + 320));
  v147[28] = CFSTR("netElevationGain");
  v148[28] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v133, v134, v135, *(double *)(v4 + 312));
  v147[29] = CFSTR("grossElevationGain");
  v148[29] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v136, v137, v138, *(double *)(v4 + 304));
  v147[30] = CFSTR("maxAcceleration");
  v148[30] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v139, v140, v141, *(double *)(v4 + 328));
  v147[31] = CFSTR("averageAcceleration");
  v148[31] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v142, v143, v144, *(double *)(v4 + 336));
  return objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v145, (uint64_t)v148, (uint64_t)v147, 32);
}

void sub_18F748B38(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  int v4;
  float64x2_t v5;
  __int128 v6;
  int64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  int v15;
  __int128 v16;
  int64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  int v24;
  double v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64x2_t v37;
  float64x2_t v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint8_t buf[4];
  _QWORD *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  float64_t v55;
  __int16 v56;
  float64_t v57;
  __int16 v58;
  float64_t v59;
  __int16 v60;
  float64_t v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  float64_t v67;
  __int16 v68;
  float64_t v69;
  __int16 v70;
  float64_t v71;
  __int16 v72;
  float64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  int v81;
  __int16 v82;
  double v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  float64_t v89;
  __int16 v90;
  float64_t v91;
  __int16 v92;
  int v93;
  __int16 v94;
  uint64_t v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a1)
  {
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2992F88);
    v2 = qword_1EE172170;
    if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEFAULT))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      v4 = *(_DWORD *)(a1 + 36);
      v5 = 0uLL;
      if (v4)
      {
        v6 = *(_OWORD *)(a1 + 56);
        v7.i64[0] = SDWORD2(v6);
        v7.i64[1] = SHIDWORD(v6);
        v8 = vcvtq_f64_s64(v7);
        v7.i64[0] = (int)v6;
        v7.i64[1] = SDWORD1(v6);
        v9 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v4), 0);
        v10 = vdivq_f64(vcvtq_f64_s64(v7), v9);
        v11 = vdivq_f64(v8, v9);
        v12 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
        v13 = vmulq_f64(v11, v12);
        v14 = vmulq_f64(v10, v12);
      }
      else
      {
        v14 = 0uLL;
        v13 = 0uLL;
      }
      v15 = *(_DWORD *)(a1 + 76);
      if (v15)
      {
        v16 = *(_OWORD *)(a1 + 80);
        v17.i64[0] = SDWORD2(v16);
        v17.i64[1] = SHIDWORD(v16);
        v18 = vcvtq_f64_s64(v17);
        v17.i64[0] = (int)v16;
        v17.i64[1] = SDWORD1(v16);
        v19 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v15), 0);
        v20 = vdivq_f64(vcvtq_f64_s64(v17), v19);
        v21 = vdivq_f64(v18, v19);
        v22 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
        v23 = vmulq_f64(v21, v22);
        v5 = vmulq_f64(v20, v22);
      }
      else
      {
        v23 = 0uLL;
      }
      v24 = *(_DWORD *)(a1 + 104);
      if (v24)
        v25 = (double)*(int *)(a1 + 108) / (double)v24 * 100.0;
      else
        v25 = 0.0;
      v26 = *(_DWORD *)(a1 + 44);
      v27 = *(_DWORD *)(a1 + 48);
      v28 = *(_DWORD *)(a1 + 32);
      v29 = *(_DWORD *)(a1 + 40);
      v30 = *(_DWORD *)(a1 + 72);
      v31 = *(_QWORD *)(a1 + 136);
      v32 = *(_QWORD *)(a1 + 160);
      v33 = *(_QWORD *)(a1 + 96);
      v34 = *(_QWORD *)(a1 + 216);
      v35 = *(_QWORD *)(a1 + 240);
      if (v4)
      {
        v36 = *(_QWORD *)(a1 + 112);
        v37.i64[0] = (int)v36;
        v37.i64[1] = SHIDWORD(v36);
        v38 = vmulq_f64(vdivq_f64(vcvtq_f64_s64(v37), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v4), 0)), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL));
      }
      else
      {
        v38 = 0uLL;
      }
      v39 = *(_DWORD *)(a1 + 288);
      v40 = *(_QWORD *)(a1 + 120);
      *(_DWORD *)buf = 136452866;
      v43 = v3;
      v44 = 1026;
      v45 = v27;
      v46 = 1026;
      v47 = v28;
      v48 = 1026;
      v49 = v29;
      v50 = 1026;
      v51 = v26;
      v52 = 1026;
      v53 = v4;
      v54 = 2050;
      v55 = v14.f64[0];
      v56 = 2050;
      v57 = v14.f64[1];
      v58 = 2050;
      v59 = v13.f64[0];
      v60 = 2050;
      v61 = v13.f64[1];
      v62 = 1026;
      v63 = v30;
      v64 = 1026;
      v65 = v15;
      v66 = 2050;
      v67 = v23.f64[1];
      v68 = 2050;
      v69 = v5.f64[0];
      v70 = 2050;
      v71 = v5.f64[1];
      v72 = 2050;
      v73 = v23.f64[0];
      v74 = 2050;
      v75 = v31;
      v76 = 2050;
      v77 = v32;
      v78 = 2050;
      v79 = v33;
      v80 = 1026;
      v81 = v24;
      v82 = 2050;
      v83 = v25;
      v84 = 2050;
      v85 = v34;
      v86 = 2050;
      v87 = v35;
      v88 = 2050;
      v89 = v38.f64[0];
      v90 = 2050;
      v91 = v38.f64[1];
      v92 = 1026;
      v93 = v39;
      v94 = 2050;
      v95 = v40;
      _os_log_impl(&dword_18F5B3000, v2, OS_LOG_TYPE_DEFAULT, "CLTSP,Analytics,tripID,%{public}s,modeOfTransport,%{public}d,bcCount,%{public}d,tripDuration,%{public}d,tripDistance,%{public}d,reconstructedCount,%{public}d,origPct,%{public}.2lf,liPct,%{public}.2lf,iiPct,%{public}.2lf,miPct,%{public}.2lf,miSegments,%{public}d,astarAttemptCount,%{public}d,miRouteRejectedPct,%{public}.2lf,astarFailPct,%{public}.2lf,astarIterationExceededMaxPct,%{public}.2lf,astarRoadCountExceededMaxPct,%{public}.2lf,astarMaxIterations,%{public}.2lf,astarAvgIterations,%{public}.2lf,astarProcessingTime,%{public}.2lf,mapQueryCount,%{public}d,mapFailPct,%{public}.2lf,maxTimeBetweenEpochs,%{public}.2lf,avgTimeBetweenEpochs,%{public}.2lf,invalidSpeedPct,%{public}.2lf,invalidCoursePct,%{public}.2lf,tripChunksCount,%{public}d,processingTime,%{public}.2lf", buf, 0xECu);
    }
    if (sub_18F5C4AE0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE172168 != -1)
        dispatch_once(&qword_1EE172168, &unk_1E2992F88);
      v41 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentAnalytics::debugLog()", "CoreLocation: %s\n", v41);
      if (v41 != (char *)buf)
        free(v41);
    }
  }
}

uint64_t sub_18F74911C()
{
  if (qword_1ECD8F8D8 != -1)
    dispatch_once(&qword_1ECD8F8D8, &unk_1E2992F68);
  return qword_1ECD8F8D0;
}

double sub_18F74915C()
{
  _BYTE *v0;
  double result;

  v0 = (_BYTE *)operator new();
  bzero(v0, 0x288uLL);
  *v0 = 1;
  result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *((_QWORD *)v0 + 7) = 0;
  *((_QWORD *)v0 + 10) = 0;
  *((_QWORD *)v0 + 11) = 0;
  *((_OWORD *)v0 + 4) = xmmword_18F771F40;
  *((_QWORD *)v0 + 12) = 0x3FF0000000000000;
  *((_QWORD *)v0 + 14) = 0;
  *((_QWORD *)v0 + 15) = 0;
  *((_DWORD *)v0 + 32) = 0;
  *((_QWORD *)v0 + 24) = 0;
  *((_QWORD *)v0 + 25) = 0;
  *((_DWORD *)v0 + 52) = 0;
  *((_QWORD *)v0 + 34) = 0;
  *((_QWORD *)v0 + 35) = 0;
  *((_DWORD *)v0 + 72) = 0;
  *((_QWORD *)v0 + 44) = 0;
  *((_QWORD *)v0 + 45) = 0;
  *((_DWORD *)v0 + 92) = 0;
  *((_DWORD *)v0 + 112) = 0;
  *((_QWORD *)v0 + 54) = 0;
  *((_QWORD *)v0 + 55) = 0;
  *((_DWORD *)v0 + 132) = 0;
  *((_QWORD *)v0 + 64) = 0;
  *((_QWORD *)v0 + 65) = 0;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 168) = 0u;
  *((_DWORD *)v0 + 46) = 0;
  *(_OWORD *)(v0 + 216) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 248) = 0u;
  *((_DWORD *)v0 + 66) = 0;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_OWORD *)(v0 + 328) = 0u;
  *((_DWORD *)v0 + 86) = 0;
  *((_DWORD *)v0 + 106) = 0;
  *(_OWORD *)(v0 + 392) = 0u;
  *(_OWORD *)(v0 + 408) = 0u;
  *(_OWORD *)(v0 + 376) = 0u;
  *((_DWORD *)v0 + 126) = 0;
  *(_OWORD *)(v0 + 472) = 0u;
  *(_OWORD *)(v0 + 488) = 0u;
  *(_OWORD *)(v0 + 456) = 0u;
  *(_OWORD *)(v0 + 568) = 0u;
  *(_OWORD *)(v0 + 584) = 0u;
  *(_OWORD *)(v0 + 536) = 0u;
  *(_OWORD *)(v0 + 552) = 0u;
  *((_QWORD *)v0 + 75) = 0xBFF0000000000000;
  *((_QWORD *)v0 + 77) = 0;
  *((_QWORD *)v0 + 79) = 0;
  qword_1ECD8F8D0 = (uint64_t)v0;
  return result;
}

void sub_18F749274(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, double a7)
{
  int v10;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  std::string::size_type size;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  std::string *p_s1;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t i;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  double v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t j;
  void *v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  double v88;
  double v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  double v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  double v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  double v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  double v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  double v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  double v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  double v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  double v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  double v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  double v158;
  double v159;
  double v160;
  double v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  double v174;
  uint64_t v175;
  NSObject *v176;
  uint64_t v177;
  _QWORD *v178;
  double v179;
  double v180;
  int v181;
  double v182;
  double v183;
  double v184;
  double v185;
  int v186;
  uint64_t v187;
  double v188;
  double v189;
  double v190;
  double v191;
  uint64_t v192;
  uint64_t v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  uint64_t v200;
  int v201;
  int v202;
  float64x2_t v203;
  double v204;
  int v205;
  BOOL v206;
  double v207;
  uint64_t v208;
  int64x2_t v209;
  float64x2_t v210;
  int8x16_t v216;
  int8x16_t v217;
  int v218;
  int v219;
  uint64_t v220;
  double v221;
  double v222;
  int v223;
  double v224;
  double v225;
  double v226;
  double v227;
  int v228;
  uint64_t v229;
  double v230;
  double v231;
  double v232;
  double v233;
  uint64_t v234;
  uint64_t v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  uint64_t v242;
  int v243;
  int v244;
  uint64_t v245;
  int64x2_t v246;
  float64x2_t v247;
  int8x16_t v249;
  int8x16_t v250;
  double v251;
  BOOL v252;
  double v253;
  int8x16_t v254;
  int v255;
  int v256;
  uint64_t v257;
  char *v258;
  _QWORD *v259;
  uint64_t *v260;
  double *v261;
  id obj;
  double v263;
  double v264;
  double v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  std::string __s1;
  _BYTE v275[12];
  __int16 v276;
  _QWORD *v277;
  __int16 v278;
  int v279;
  __int16 v280;
  uint64_t v281;
  __int16 v282;
  double v283;
  __int16 v284;
  double v285;
  __int16 v286;
  double v287;
  __int16 v288;
  double v289;
  __int16 v290;
  double v291;
  __int16 v292;
  double v293;
  __int16 v294;
  uint64_t v295;
  __int16 v296;
  double v297;
  __int16 v298;
  uint64_t v299;
  __int16 v300;
  double v301;
  __int16 v302;
  double v303;
  __int16 v304;
  double v305;
  __int16 v306;
  double v307;
  __int16 v308;
  double v309;
  __int16 v310;
  double v311;
  __int16 v312;
  double v313;
  __int16 v314;
  double v315;
  __int16 v316;
  double v317;
  __int16 v318;
  int v319;
  __int16 v320;
  uint64_t v321;
  __int16 v322;
  int v323;
  __int16 v324;
  uint64_t v325;
  __int16 v326;
  uint64_t v327;
  __int16 v328;
  double v329;
  __int16 v330;
  int v331;
  __int16 v332;
  int v333;
  __int16 v334;
  int v335;
  __int16 v336;
  uint64_t v337;
  _BYTE buf[12];
  __int16 v339;
  _QWORD *v340;
  __int16 v341;
  int v342;
  __int16 v343;
  uint64_t v344;
  __int16 v345;
  double v346;
  __int16 v347;
  double v348;
  __int16 v349;
  double v350;
  __int16 v351;
  double v352;
  __int16 v353;
  double v354;
  __int16 v355;
  double v356;
  __int16 v357;
  uint64_t v358;
  __int16 v359;
  double v360;
  __int16 v361;
  uint64_t v362;
  __int16 v363;
  double v364;
  __int16 v365;
  double v366;
  __int16 v367;
  double v368;
  __int16 v369;
  double v370;
  __int16 v371;
  double v372;
  __int16 v373;
  double v374;
  __int16 v375;
  double v376;
  __int16 v377;
  double v378;
  __int16 v379;
  double v380;
  __int16 v381;
  int v382;
  __int16 v383;
  uint64_t v384;
  __int16 v385;
  int v386;
  __int16 v387;
  double v388;
  __int16 v389;
  uint64_t v390;
  __int16 v391;
  uint64_t v392;
  __int16 v393;
  int v394;
  __int16 v395;
  int v396;
  __int16 v397;
  int v398;
  __int16 v399;
  uint64_t v400;
  _BYTE v401[128];
  _BYTE v402[128];
  uint64_t v403;

  v403 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)a1)
    return;
  v10 = a4;
  v13 = (void *)objc_msgSend_UUIDString(a2, (const char *)a2, (uint64_t)a3, a4);
  v17 = (char *)objc_msgSend_UTF8String(v13, v14, v15, v16);
  sub_18F5D5990(&__s1, v17);
  v18 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  v20 = *(unsigned __int8 *)(a1 + 39);
  v21 = (char)v20;
  if ((v20 & 0x80u) != 0)
    v20 = *(_QWORD *)(a1 + 24);
  if (size != v20)
    goto LABEL_18;
  if (v21 >= 0)
    v22 = (unsigned __int8 *)(a1 + 16);
  else
    v22 = *(unsigned __int8 **)(a1 + 16);
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__s1.__r_.__value_.__l.__data_, v22, __s1.__r_.__value_.__l.__size_))
    {
LABEL_18:
      if (*(int *)(a1 + 608) >= 1)
        sub_18F749F9C(a1);
    }
  }
  else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
  {
    p_s1 = &__s1;
    while (p_s1->__r_.__value_.__s.__data_[0] == *v22)
    {
      p_s1 = (std::string *)((char *)p_s1 + 1);
      ++v22;
      if (!--v18)
        goto LABEL_20;
    }
    goto LABEL_18;
  }
LABEL_20:
  ++*(_DWORD *)(a1 + 608);
  std::string::operator=((std::string *)(a1 + 16), &__s1);
  v27 = (void *)objc_msgSend_UUIDString(a3, v24, v25, v26);
  objc_msgSend_UTF8String(v27, v28, v29, v30);
  v259 = (_QWORD *)(a1 + 40);
  MEMORY[0x194002BEC]();
  *(double *)(a1 + 616) = *(double *)(a1 + 616) + a7;
  objc_msgSend_distance_m(a6, v31, v32, v33);
  *(double *)(a1 + 632) = v34 + *(double *)(a1 + 632);
  v38 = (void *)objc_msgSend_tripLocations(a6, v35, v36, v37);
  *(_DWORD *)(a1 + 640) += objc_msgSend_count(v38, v39, v40, v41);
  *(_DWORD *)(a1 + 624) += v10;
  v260 = (uint64_t *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = objc_msgSend_modeOfTransport(a6, v42, v43, v44);
  v270 = 0u;
  v271 = 0u;
  v272 = 0u;
  v273 = 0u;
  v48 = (void *)objc_msgSend_tripLocations(a6, v45, v46, v47);
  v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(v48, v49, (uint64_t)&v270, (uint64_t)v402, 16);
  if (v53)
  {
    v54 = *(_QWORD *)v271;
    v261 = (double *)(a1 + 64);
    obj = v48;
    do
    {
      for (i = 0; i != v53; ++i)
      {
        if (*(_QWORD *)v271 != v54)
          objc_enumerationMutation(obj);
        v56 = *(void **)(*((_QWORD *)&v270 + 1) + 8 * i);
        if (objc_msgSend_isMapMatched(v56, v50, v51, v52))
          ++*(_DWORD *)(a1 + 584);
        if (objc_msgSend_isInertialIntegrated(v56, v57, v58, v59))
          ++*(_DWORD *)(a1 + 588);
        if (objc_msgSend_isLinearInterpolated(v56, v60, v61, v62))
          ++*(_DWORD *)(a1 + 592);
        objc_msgSend_speed(v56, v63, v64, v65);
        if (v69 < 0.0)
          ++*(_DWORD *)(a1 + 596);
        if (*(double *)(a1 + 600) < 0.0 || (objc_msgSend_speed(v56, v66, v67, v68), v70 > *(double *)(a1 + 600)))
        {
          objc_msgSend_speed(v56, v66, v67, v68);
          *(_QWORD *)(a1 + 600) = v71;
        }
        if (objc_msgSend_isGPSLocationType(v56, v66, v67, v68))
        {
          if ((objc_msgSend_isOriginalLocationType(v56, v50, v51, v52) & 1) == 0)
          {
            v72 = (void *)objc_msgSend_timestamp(v56, v50, v51, v52);
            objc_msgSend_timeIntervalSinceReferenceDate(v72, v73, v74, v75);
            v77 = v76;
            v268 = 0u;
            v269 = 0u;
            v266 = 0u;
            v267 = 0u;
            v79 = objc_msgSend_countByEnumeratingWithState_objects_count_(a5, v78, (uint64_t)&v266, (uint64_t)v401, 16);
            if (v79)
            {
              v80 = *(_QWORD *)v267;
              while (2)
              {
                for (j = 0; j != v79; ++j)
                {
                  if (*(_QWORD *)v267 != v80)
                    objc_enumerationMutation(a5);
                  v82 = *(void **)(*((_QWORD *)&v266 + 1) + 8 * j);
                  if ((objc_msgSend_isGPSLocationType(v82, v50, v51, v52) & 1) != 0)
                  {
                    if (objc_msgSend_isOriginalLocationType(v82, v50, v51, v52))
                    {
                      v83 = (void *)objc_msgSend_timestamp(v82, v50, v51, v52);
                      objc_msgSend_timeIntervalSinceReferenceDate(v83, v84, v85, v86);
                      if (vabdd_f64(v87, v77) < 0.5)
                      {
                        if (v82)
                        {
                          *(_QWORD *)buf = 0;
                          *(_QWORD *)v275 = 0;
                          v263 = 0.0;
                          v264 = 0.0;
                          objc_msgSend_latitude(v56, v50, v51, v52);
                          v89 = v88;
                          objc_msgSend_longitude(v56, v90, v91, v92);
                          v94 = v93;
                          objc_msgSend_altitude(v56, v95, v96, v97);
                          v99 = v98;
                          objc_msgSend_latitude(v82, v100, v101, v102);
                          v104 = v103;
                          objc_msgSend_longitude(v82, v105, v106, v107);
                          v109 = v108;
                          objc_msgSend_altitude(v82, v110, v111, v112);
                          sub_18F5BD37C(v261, (double *)buf, (double *)v275, &v265, v89, v94, v99, v104, v109, v113);
                          objc_msgSend_latitude(v82, v114, v115, v116);
                          v118 = v117;
                          objc_msgSend_longitude(v82, v119, v120, v121);
                          v123 = v122;
                          objc_msgSend_altitude(v82, v124, v125, v126);
                          v128 = v127;
                          objc_msgSend_course(v82, v129, v130, v131);
                          v133 = v132;
                          objc_msgSend_latitude(v56, v134, v135, v136);
                          v138 = v137;
                          objc_msgSend_longitude(v56, v139, v140, v141);
                          sub_18F71ACC4(v261, &v263, &v264, v118, v123, v128, v133, v138, v142);
                          sub_18F6C0F18((char *)(a1 + 104), v263);
                          sub_18F6C0F18((char *)(a1 + 184), v264);
                          sub_18F6C0F18((char *)(a1 + 264), sqrt(*(double *)v275 * *(double *)v275 + *(double *)buf * *(double *)buf));
                          objc_msgSend_altitude(v56, v143, v144, v145);
                          v147 = v146;
                          objc_msgSend_altitude(v82, v148, v149, v150);
                          sub_18F6C0F18((char *)(a1 + 424), vabdd_f64(v147, v151));
                          objc_msgSend_speed(v56, v152, v153, v154);
                          if (v158 >= 0.0)
                          {
                            objc_msgSend_speed(v82, v155, v156, v157);
                            if (v159 >= 0.0)
                            {
                              objc_msgSend_speed(v56, v155, v156, v157);
                              v161 = v160;
                              objc_msgSend_speed(v82, v162, v163, v164);
                              sub_18F6C0F18((char *)(a1 + 344), vabdd_f64(v161, v165));
                            }
                          }
                          objc_msgSend_course(v56, v155, v156, v157);
                          if (v166 >= 0.0)
                          {
                            objc_msgSend_course(v82, v50, v51, v52);
                            if (v167 >= 0.0)
                            {
                              objc_msgSend_course(v56, v50, v51, v52);
                              v169 = v168;
                              objc_msgSend_course(v82, v170, v171, v172);
                              v174 = fmod(v169 - v173, 360.0);
                              if (v174 < 0.0)
                                v174 = v174 + 360.0;
                              if (v174 > 180.0)
                                v174 = v174 + -360.0;
                              sub_18F6C0F18((char *)(a1 + 504), fabs(v174));
                            }
                          }
                        }
                        goto LABEL_60;
                      }
                    }
                  }
                }
                v79 = objc_msgSend_countByEnumeratingWithState_objects_count_(a5, v50, (uint64_t)&v266, (uint64_t)v401, 16);
                if (v79)
                  continue;
                break;
              }
            }
          }
        }
LABEL_60:
        ;
      }
      v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v50, (uint64_t)&v270, (uint64_t)v402, 16);
    }
    while (v53);
  }
  if (qword_1EE172168 != -1)
    dispatch_once(&qword_1EE172168, &unk_1E2992F88);
  v175 = a1 + 16;
  v176 = qword_1EE172170;
  if (os_log_type_enabled((os_log_t)qword_1EE172170, OS_LOG_TYPE_DEFAULT))
  {
    v177 = a1 + 16;
    if (*(char *)(a1 + 39) < 0)
      v177 = *v260;
    v178 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v178 = (_QWORD *)*v259;
    v179 = 0.0;
    v180 = 0.0;
    if (*(_DWORD *)(a1 + 128))
      v180 = sqrt(*(double *)(a1 + 152));
    if (*(_DWORD *)(a1 + 208))
      v179 = sqrt(*(double *)(a1 + 232));
    v181 = *(_DWORD *)(a1 + 288);
    v182 = 0.0;
    v183 = 0.0;
    if (v181)
      v183 = sqrt(*(double *)(a1 + 312));
    if (*(_DWORD *)(a1 + 368))
      v182 = sqrt(*(double *)(a1 + 392));
    v184 = 0.0;
    v185 = 0.0;
    if (*(_DWORD *)(a1 + 448))
      v185 = sqrt(*(double *)(a1 + 472));
    if (*(_DWORD *)(a1 + 528))
      v184 = sqrt(*(double *)(a1 + 552));
    v186 = *(_DWORD *)(a1 + 8);
    v187 = *(_QWORD *)(a1 + 632);
    v188 = fabs(*(double *)(a1 + 112));
    v189 = fabs(*(double *)(a1 + 136));
    v190 = fabs(*(double *)(a1 + 192));
    v191 = fabs(*(double *)(a1 + 216));
    v192 = *(_QWORD *)(a1 + 272);
    v193 = *(_QWORD *)(a1 + 296);
    v194 = fabs(*(double *)(a1 + 352));
    v195 = fabs(*(double *)(a1 + 376));
    v196 = fabs(*(double *)(a1 + 432));
    v197 = fabs(*(double *)(a1 + 456));
    v198 = fabs(*(double *)(a1 + 512));
    v199 = fabs(*(double *)(a1 + 536));
    v200 = *(_QWORD *)(a1 + 600);
    v201 = *(_DWORD *)(a1 + 596);
    v202 = *(_DWORD *)(a1 + 640);
    if (v202)
    {
      v203 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
      v204 = (double)*(int *)(a1 + 584) / (double)v202 * 100.0;
      v205 = llround(v204);
      v206 = v204 > 1.0 || v204 <= 0.0;
      v207 = (double)v205;
      if (!v206)
        v207 = 1.0;
      v208 = *(_QWORD *)(a1 + 588);
      v209.i64[0] = (int)v208;
      v209.i64[1] = SHIDWORD(v208);
      v210 = vmulq_f64(vdivq_f64(vcvtq_f64_s64(v209), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v202), 0)), v203);
      __asm { FMOV            V26.2D, #1.0 }
      v216 = vandq_s8((int8x16_t)vcgtzq_f64(v210), (int8x16_t)vcgeq_f64(_Q26, v210));
      *(int32x2_t *)&v210.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(v210)));
      v209.i64[0] = SLODWORD(v210.f64[0]);
      v209.i64[1] = SHIDWORD(v210.f64[0]);
      v217 = vbslq_s8(v216, (int8x16_t)_Q26, (int8x16_t)vcvtq_f64_s64(v209));
    }
    else
    {
      v207 = 0.0;
      v217 = 0uLL;
    }
    v218 = *(_DWORD *)(a1 + 624);
    v219 = *(_DWORD *)(a1 + 608);
    v220 = *(_QWORD *)(a1 + 616);
    *(_DWORD *)buf = 136454146;
    *(_QWORD *)&buf[4] = v177;
    v339 = 2082;
    v340 = v178;
    v341 = 1026;
    v342 = v186;
    v343 = 2050;
    v344 = v187;
    v345 = 2050;
    v346 = v188;
    v347 = 2050;
    v348 = v180;
    v349 = 2050;
    v350 = v189;
    v351 = 2050;
    v352 = v190;
    v353 = 2050;
    v354 = v179;
    v355 = 2050;
    v356 = v191;
    v357 = 2050;
    v358 = v192;
    v359 = 2050;
    v360 = v183;
    v361 = 2050;
    v362 = v193;
    v363 = 2050;
    v364 = v194;
    v365 = 2050;
    v366 = v182;
    v367 = 2050;
    v368 = v195;
    v369 = 2050;
    v370 = v196;
    v371 = 2050;
    v372 = v185;
    v373 = 2050;
    v374 = v197;
    v375 = 2050;
    v376 = v198;
    v377 = 2050;
    v378 = v184;
    v379 = 2050;
    v380 = v199;
    v381 = 1026;
    v382 = v181;
    v383 = 2050;
    v384 = v200;
    v385 = 1026;
    v386 = v201;
    v387 = 2050;
    v388 = v207;
    v389 = 2050;
    v390 = v217.i64[0];
    v391 = 2050;
    v392 = v217.i64[1];
    v393 = 1026;
    v394 = v218;
    v395 = 1026;
    v396 = v202;
    v397 = 1026;
    v398 = v219;
    v399 = 2050;
    v400 = v220;
    _os_log_impl(&dword_18F5B3000, v176, OS_LOG_TYPE_DEFAULT, "CLTSP,AnalyticsSimulated submitted,tripID,%{public}s,simTripID,%{public}s,modeOfTransport,%{public}d,distance,%{public}.2lf,acrossTrackMaxRMSAvg,%{public}.2lf,%{public}.2lf,%{public}.2lf,alongTrackMaxRMSAvg,%{public}.2lf,%{public}.2lf,%{public}.2lf,horizontalMaxRMSAvg,%{public}.2lf,%{public}.2lf,%{public}.2lf,speedMaxRMSAvg,%{public}.2lf,%{public}.2lf,%{public}.2lf,altitudeMaxRMSAvg,%{public}.2lf,%{public}.2lf,%{public}.2lf,courseMaxRMSAvg,%{public}.2lf,%{public}.2lf,%{public}.2lf,count,%{public}d,maxSpeed,%{public}.2lf,invalidSpeed,%{public}d,mmPCT,%{public}.2lf,iiPCT,%{public}.2lf,liPCT,%{public}.2lf,sparseBreadCrumbCount,%{public}d,reconstructedCount,%{public}d,chunkCount,%{public}d,processingTimeMSec,%{public}.2lf", buf, 0x12Au);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172168 != -1)
      dispatch_once(&qword_1EE172168, &unk_1E2992F88);
    if (*(char *)(a1 + 39) < 0)
      v175 = *v260;
    if (*(char *)(a1 + 63) < 0)
      v259 = (_QWORD *)*v259;
    v221 = 0.0;
    v222 = 0.0;
    if (*(_DWORD *)(a1 + 128))
      v222 = sqrt(*(double *)(a1 + 152));
    if (*(_DWORD *)(a1 + 208))
      v221 = sqrt(*(double *)(a1 + 232));
    v223 = *(_DWORD *)(a1 + 288);
    v224 = 0.0;
    v225 = 0.0;
    if (v223)
      v225 = sqrt(*(double *)(a1 + 312));
    if (*(_DWORD *)(a1 + 368))
      v224 = sqrt(*(double *)(a1 + 392));
    v226 = 0.0;
    v227 = 0.0;
    if (*(_DWORD *)(a1 + 448))
      v227 = sqrt(*(double *)(a1 + 472));
    if (*(_DWORD *)(a1 + 528))
      v226 = sqrt(*(double *)(a1 + 552));
    v228 = *(_DWORD *)(a1 + 8);
    v229 = *(_QWORD *)(a1 + 632);
    v230 = fabs(*(double *)(a1 + 112));
    v231 = fabs(*(double *)(a1 + 136));
    v232 = fabs(*(double *)(a1 + 192));
    v233 = fabs(*(double *)(a1 + 216));
    v234 = *(_QWORD *)(a1 + 272);
    v235 = *(_QWORD *)(a1 + 296);
    v236 = fabs(*(double *)(a1 + 352));
    v237 = fabs(*(double *)(a1 + 376));
    v238 = fabs(*(double *)(a1 + 432));
    v239 = fabs(*(double *)(a1 + 456));
    v240 = fabs(*(double *)(a1 + 512));
    v241 = fabs(*(double *)(a1 + 536));
    v242 = *(_QWORD *)(a1 + 600);
    v243 = *(_DWORD *)(a1 + 596);
    v244 = *(_DWORD *)(a1 + 640);
    if (v244)
    {
      v245 = *(_QWORD *)(a1 + 584);
      v246.i64[0] = (int)v245;
      v246.i64[1] = SHIDWORD(v245);
      v247 = vmulq_f64(vdivq_f64(vcvtq_f64_s64(v246), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v244), 0)), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL));
      __asm { FMOV            V27.2D, #1.0 }
      v249 = vandq_s8((int8x16_t)vcgtzq_f64(v247), (int8x16_t)vcgeq_f64(_Q27, v247));
      *(int32x2_t *)&v247.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(v247)));
      v246.i64[0] = SLODWORD(v247.f64[0]);
      v246.i64[1] = SHIDWORD(v247.f64[0]);
      v250 = (int8x16_t)vcvtq_f64_s64(v246);
      v251 = (double)*(int *)(a1 + 592) / (double)v244 * 100.0;
      v252 = v251 > 1.0 || v251 <= 0.0;
      v253 = (double)(int)llround(v251);
      v254 = vbslq_s8(v249, (int8x16_t)_Q27, v250);
      if (!v252)
        v253 = 1.0;
    }
    else
    {
      v253 = 0.0;
      v254 = 0uLL;
    }
    v255 = *(_DWORD *)(a1 + 624);
    v256 = *(_DWORD *)(a1 + 608);
    v257 = *(_QWORD *)(a1 + 616);
    *(_DWORD *)v275 = 136454146;
    *(_QWORD *)&v275[4] = v175;
    v276 = 2082;
    v277 = v259;
    v278 = 1026;
    v279 = v228;
    v280 = 2050;
    v281 = v229;
    v282 = 2050;
    v283 = v230;
    v284 = 2050;
    v285 = v222;
    v286 = 2050;
    v287 = v231;
    v288 = 2050;
    v289 = v232;
    v290 = 2050;
    v291 = v221;
    v292 = 2050;
    v293 = v233;
    v294 = 2050;
    v295 = v234;
    v296 = 2050;
    v297 = v225;
    v298 = 2050;
    v299 = v235;
    v300 = 2050;
    v301 = v236;
    v302 = 2050;
    v303 = v224;
    v304 = 2050;
    v305 = v237;
    v306 = 2050;
    v307 = v238;
    v308 = 2050;
    v309 = v227;
    v310 = 2050;
    v311 = v239;
    v312 = 2050;
    v313 = v240;
    v314 = 2050;
    v315 = v226;
    v316 = 2050;
    v317 = v241;
    v318 = 1026;
    v319 = v223;
    v320 = 2050;
    v321 = v242;
    v322 = 1026;
    v323 = v243;
    v324 = 2050;
    v325 = v254.i64[0];
    v326 = 2050;
    v327 = v254.i64[1];
    v328 = 2050;
    v329 = v253;
    v330 = 1026;
    v331 = v255;
    v332 = 1026;
    v333 = v244;
    v334 = 1026;
    v335 = v256;
    v336 = 2050;
    v337 = v257;
    v258 = (char *)_os_log_send_and_compose_impl();
    sub_18F5F2740("Generic", 1, 0, 2, "void CLTripSegmentAnalyticsSimulatedTripSegment::comparseAndSubmitCoreAnalytics(NSUUID * _Nonnull, NSUUID * _Nonnull, const int, NSArray<CLTripSegmentLocation *> * _Nonnull, CLTripSegmentOutputData * _Nonnull, const double)", "CoreLocation: %s\n", v258);
    if (v258 != buf)
      free(v258);
  }
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
}

void sub_18F749F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_18F749F9C(uint64_t a1)
{
  double result;

  if (*(_BYTE *)a1)
  {
    AnalyticsSendEventLazy();
    MEMORY[0x194002BEC](a1 + 16, &unk_18F7D3073);
    MEMORY[0x194002BEC](a1 + 40, &unk_18F7D3073);
    result = 0.0;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_DWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_DWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_DWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_DWORD *)(a1 + 368) = 0;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_QWORD *)(a1 + 392) = 0;
    *(_DWORD *)(a1 + 448) = 0;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_QWORD *)(a1 + 472) = 0;
    *(_OWORD *)(a1 + 456) = 0u;
    *(_OWORD *)(a1 + 584) = 0u;
    *(_QWORD *)(a1 + 600) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 608) = 0;
    *(_QWORD *)(a1 + 616) = 0;
    *(_DWORD *)(a1 + 624) = 0;
    *(_QWORD *)(a1 + 632) = 0;
    *(_DWORD *)(a1 + 640) = 0;
  }
  return result;
}

uint64_t sub_18F74A0AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  double v76;
  BOOL v77;
  int v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  double v86;
  double v87;
  double v88;
  BOOL v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  double v94;
  BOOL v95;
  int v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  double v102;
  BOOL v103;
  double v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  _QWORD v113[34];
  _QWORD v114[35];

  v114[34] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v113[0] = CFSTR("modeOfTransport");
  v114[0] = objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], a2, *(_QWORD *)(v4 + 8), a4);
  v113[1] = CFSTR("acrossTrackMax");
  v114[1] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v5, v6, v7, fabs((double)(int)*(double *)(v4 + 112)));
  v113[2] = CFSTR("acrossTrackRMS");
  if (*(_DWORD *)(v4 + 128))
    v10 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v8, (int)sqrt(*(double *)(v4 + 152)), v9);
  else
    v10 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v8, 0, v9);
  v114[2] = v10;
  v113[3] = CFSTR("acrossTrackAvg");
  v114[3] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v11, v12, v13, fabs((double)(int)*(double *)(v4 + 136)));
  v113[4] = CFSTR("alongTrackMax");
  v114[4] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v14, v15, v16, fabs((double)(int)*(double *)(v4 + 192)));
  v113[5] = CFSTR("alongTrackRMS");
  if (*(_DWORD *)(v4 + 208))
    v19 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v17, (int)sqrt(*(double *)(v4 + 232)), v18);
  else
    v19 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v17, 0, v18);
  v114[5] = v19;
  v113[6] = CFSTR("alongTrackAvg");
  v114[6] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v20, v21, v22, fabs((double)(int)*(double *)(v4 + 216)));
  v113[7] = CFSTR("horizontalErrorMax");
  v114[7] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v23, (int)*(double *)(v4 + 272), v24);
  v113[8] = CFSTR("horizontalErrorRMS");
  if (*(_DWORD *)(v4 + 288))
    v27 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v25, (int)sqrt(*(double *)(v4 + 312)), v26);
  else
    v27 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v25, 0, v26);
  v114[8] = v27;
  v113[9] = CFSTR("horizontalErrorAvg");
  v114[9] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v28, (int)*(double *)(v4 + 296), v29);
  v113[10] = CFSTR("speedErrorMax");
  LODWORD(v30) = llround(fabs(*(double *)(v4 + 352)));
  v114[10] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v31, v30, v32);
  v113[11] = CFSTR("speedErrorRMS");
  if (*(_DWORD *)(v4 + 368))
    v36 = sqrt(*(double *)(v4 + 392));
  else
    v36 = 0.0;
  LODWORD(v34) = llround(v36);
  v114[11] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v33, v34, v35);
  v113[12] = CFSTR("speedErrorAvg");
  LODWORD(v37) = llround(fabs(*(double *)(v4 + 376)));
  v114[12] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v38, v37, v39);
  v113[13] = CFSTR("altitudeErrorMax");
  v114[13] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v40, (int)fabs(*(double *)(v4 + 432)), v41);
  v113[14] = CFSTR("altitudeErrorRMS");
  if (*(_DWORD *)(v4 + 448))
    v44 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v42, (int)sqrt(*(double *)(v4 + 472)), v43);
  else
    v44 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v42, 0, v43);
  v114[14] = v44;
  v113[15] = CFSTR("altitudeErrorAvg");
  v114[15] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v45, (int)fabs(*(double *)(v4 + 456)), v46);
  v113[16] = CFSTR("courseErrorMax");
  LODWORD(v47) = llround(fabs(*(double *)(v4 + 512)));
  v114[16] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v48, v47, v49);
  v113[17] = CFSTR("courseErrorRMS");
  v53 = 0.0;
  v54 = 0.0;
  if (*(_DWORD *)(v4 + 528))
    v54 = sqrt(*(double *)(v4 + 552));
  LODWORD(v51) = llround(v54);
  v114[17] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v50, v51, v52);
  v113[18] = CFSTR("courseErrorAvg");
  LODWORD(v55) = llround(fabs(*(double *)(v4 + 536)));
  v114[18] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v56, v55, v57);
  v113[19] = CFSTR("positionErrorCount");
  v114[19] = objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v58, *(unsigned int *)(v4 + 288), v59);
  v113[20] = CFSTR("speedErrorCount");
  v114[20] = objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v60, *(unsigned int *)(v4 + 368), v61);
  v113[21] = CFSTR("courseErrorCount");
  v114[21] = objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v62, *(unsigned int *)(v4 + 528), v63);
  v113[22] = CFSTR("maxSpeed");
  v114[22] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v64, (int)fabs(*(double *)(v4 + 600)), v65);
  v113[23] = CFSTR("distance");
  v114[23] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v66, (int)fabs(*(double *)(v4 + 632)), v67);
  v113[24] = CFSTR("invalidSpeed");
  v114[24] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v68, *(unsigned int *)(v4 + 596), v69);
  v113[25] = CFSTR("sparseBreadCrumbCount");
  v114[25] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v70, *(unsigned int *)(v4 + 624), v71);
  v113[26] = CFSTR("sparseBreadCrumbCountPercentage");
  v75 = *(_DWORD *)(v4 + 640);
  if (!v75)
    goto LABEL_25;
  v76 = (double)*(int *)(v4 + 624) / (double)v75 * 100.0;
  v77 = v76 > 1.0 || v76 <= 0.0;
  v78 = llround(v76);
  if (v77)
  {
    v53 = (double)v78;
LABEL_25:
    v79 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v72, v73, v74, v53);
    goto LABEL_26;
  }
  v79 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v72, v73, v74, 1.0);
LABEL_26:
  v114[26] = v79;
  v113[27] = CFSTR("reconstructedCount");
  v114[27] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v80, *(unsigned int *)(v4 + 640), v81);
  v113[28] = CFSTR("mapMatchedPercentage");
  v85 = *(_DWORD *)(v4 + 640);
  v86 = 0.0;
  v87 = 0.0;
  if (v85)
  {
    v88 = (double)*(int *)(v4 + 584) / (double)v85 * 100.0;
    v89 = v88 > 1.0 || v88 <= 0.0;
    v87 = (double)(int)llround(v88);
    if (!v89)
      v87 = 1.0;
  }
  v114[28] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v82, v83, v84, v87);
  v113[29] = CFSTR("inertialPercentage");
  v93 = *(_DWORD *)(v4 + 640);
  if (v93)
  {
    v94 = (double)*(int *)(v4 + 588) / (double)v93 * 100.0;
    v95 = v94 > 1.0 || v94 <= 0.0;
    v96 = llround(v94);
    if (!v95)
    {
      v97 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v90, v91, v92, 1.0);
      goto LABEL_40;
    }
    v86 = (double)v96;
  }
  v97 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v90, v91, v92, v86);
LABEL_40:
  v114[29] = v97;
  v113[30] = CFSTR("linearInterpolatedPercentage");
  v101 = *(_DWORD *)(v4 + 640);
  if (!v101)
  {
    v104 = 0.0;
LABEL_48:
    v105 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v98, v99, v100, v104);
    goto LABEL_49;
  }
  v102 = (double)*(int *)(v4 + 592) / (double)v101 * 100.0;
  v103 = v102 > 1.0 || v102 <= 0.0;
  v104 = (double)(int)llround(v102);
  if (v103)
    goto LABEL_48;
  v105 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v98, v99, v100, 1.0);
LABEL_49:
  v114[30] = v105;
  v113[31] = CFSTR("chunkCount");
  v114[31] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v106, *(unsigned int *)(v4 + 608), v107);
  v113[32] = CFSTR("processingTimeMSec");
  v110 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v108, (int)*(double *)(v4 + 616), v109);
  v113[33] = CFSTR("simulated");
  v114[32] = v110;
  v114[33] = &unk_1E29B5C50;
  return objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v111, (uint64_t)v114, (uint64_t)v113, 34);
}

os_log_t sub_18F74A6F0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1EE172170 = (uint64_t)result;
  return result;
}

uint64_t sub_18F74B968(double a1, double a2, uint64_t a3, const char *a4)
{
  _QWORD v5[2];

  *(double *)v5 = a1;
  *(double *)&v5[1] = a2;
  return objc_msgSend_valueWithBytes_objCType_(MEMORY[0x1E0CB3B18], a4, (uint64_t)v5, (uint64_t)"{CLLocationCoordinate2D=dd}");
}

void sub_18F74D3D4()
{
  __cxa_end_catch();
  JUMPOUT(0x18F74D45CLL);
}

void sub_18F74D3E4(void *a1, int a2)
{
  if (a2)
    sub_18F5D57A8(a1);
  JUMPOUT(0x18F74D4A0);
}

void sub_18F74D3F4()
{
  JUMPOUT(0x18F74D468);
}

void sub_18F74D3FC()
{
  JUMPOUT(0x18F74D488);
}

void sub_18F74D404()
{
  JUMPOUT(0x18F74D478);
}

void sub_18F74D41C()
{
  JUMPOUT(0x18F74D4A0);
}

void sub_18F74D4A8(uint64_t a1, uint64_t a2)
{
  id Weak;
  NSObject *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 24)))
  {
    Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 24));
    MEMORY[0x1E0DE7D20](Weak, sel_locationSelectorDidSelectLocation_, a2, v8);
  }
  else
  {
    if (qword_1ECD8E758 != -1)
      dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
    v5 = qword_1ECD8E750;
    if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138477827;
      v10 = v6;
      _os_log_impl(&dword_18F5B3000, v5, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelector,sendLocationCB,self:%{private}@,nil fDelegate,early return", buf, 0xCu);
    }
    if (sub_18F5C4AE0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
      v7 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "-[CLEmergencyLocationSelector initWithConfig:bundle:delegate:queue:]_block_invoke", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
  }
}

void sub_18F74EBC8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_18F5D57A8(a1);
  _Unwind_Resume(a1);
}

uint64_t **sub_18F74F570(const char *a1, int a2, const char *a3, NSObject *a4)
{
  NSObject *v4;
  const char *v5;
  const char *v6;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  const char *v11;
  uint64_t **result;
  NSObject *v13;
  NSObject *v14;
  _QWORD *v15;
  void **v16;
  char *v17;
  void *v18[2];
  char v19;
  int v20;
  _BYTE __p[12];
  __int16 v22;
  int v23;
  __int16 v24;
  void **v25;
  uint8_t buf[4];
  _BYTE v27[14];
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v20 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    v4 = a4;
    v5 = a3;
    LODWORD(v6) = a2;
    if (qword_1EE172128 == -1)
      goto LABEL_3;
  }
  else
  {
    if (qword_1EE172128 != -1)
      dispatch_once(&qword_1EE172128, &unk_1E2993038);
    v13 = qword_1EE172130;
    a1 = "";
    v6 = "assert";
    v5 = "h && \"invalid handler\"";
    if (os_log_type_enabled((os_log_t)qword_1EE172130, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v27 = 0;
      *(_WORD *)&v27[4] = 2082;
      *(_QWORD *)&v27[6] = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "h && \"invalid handler\"";
      _os_log_impl(&dword_18F5B3000, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EE172128 != -1)
        dispatch_once(&qword_1EE172128, &unk_1E2993038);
    }
    v14 = qword_1EE172130;
    if (os_signpost_enabled((os_log_t)qword_1EE172130))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v27 = 0;
      *(_WORD *)&v27[4] = 2082;
      *(_QWORD *)&v27[6] = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "h && \"invalid handler\"";
      _os_signpost_emit_with_name_impl(&dword_18F5B3000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EE172128 != -1)
        dispatch_once(&qword_1EE172128, &unk_1E2993038);
    }
    v4 = qword_1EE172130;
    if (os_log_type_enabled((os_log_t)qword_1EE172130, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v27 = 0;
      *(_WORD *)&v27[4] = 2082;
      *(_QWORD *)&v27[6] = "";
      v28 = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "h && \"invalid handler\"";
      _os_log_impl(&dword_18F5B3000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_1EE172128, &unk_1E2993038);
LABEL_3:
  v8 = qword_1EE172130;
  v9 = a1[120];
  if (os_log_type_enabled((os_log_t)qword_1EE172130, v9))
  {
    v10 = a1 + 96;
    if (a1[119] < 0)
      v10 = (_QWORD *)*v10;
    sub_18F5D5990(__p, off_1E2993080[(int)v6]);
    if (SBYTE3(v25) >= 0)
      v11 = __p;
    else
      v11 = *(const char **)__p;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)v27 = v10;
    *(_WORD *)&v27[8] = 1024;
    *(_DWORD *)&v27[10] = (_DWORD)v6;
    v28 = 2080;
    v29 = v11;
    _os_log_impl(&dword_18F5B3000, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v25) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_18F5C4AE0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE172128 != -1)
      dispatch_once(&qword_1EE172128, &unk_1E2993038);
    v15 = a1 + 96;
    if (a1[119] < 0)
      v15 = (_QWORD *)*v15;
    sub_18F754144(v18, (int)v6);
    if (v19 >= 0)
      v16 = v18;
    else
      v16 = (void **)v18[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v15;
    v22 = 1024;
    v23 = (int)v6;
    v24 = 2080;
    v25 = v16;
    v17 = (char *)_os_log_send_and_compose_impl();
    if (v19 < 0)
      operator delete(v18[0]);
    sub_18F5F2740("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyLocationSelectorInternal>::setStateHandler(State, StateHandler) [T = CLEmergencyLocationSelectorInternal]", "CoreLocation: %s\n", v17);
    if (v17 != (char *)buf)
      free(v17);
  }
  result = sub_18F759008((uint64_t **)a1 + 1, (int)v6, &v20);
  result[5] = (uint64_t *)v5;
  result[6] = (uint64_t *)v4;
  return result;
}

uint64_t sub_18F74FA10(void **a1, const char *a2, uint64_t a3, uint64_t a4)
{
  double v5;
  void *v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  char *LocationUsabilityCriteria;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  NSObject *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  char *v61;
  NSObject *v62;
  NSObject *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  NSObject *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  double v78;
  double v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  NSObject *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  NSObject *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  char *v110;
  uint8_t buf[4];
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  switch((int)a2)
  {
    case 0:
      objc_msgSend_firstLocationTimeout(*a1, a2, a3, a4);
      sub_18F754154((uint64_t)(a1 + 3), v5);
      return 0;
    case 1:
      sub_18F754C9C((uint64_t)(a1 + 3), 4);
      return 0;
    case 2:
      return 3;
    case 3:
      LocationUsabilityCriteria = (char *)objc_msgSend_firstLocationUsabilityCriteria(*a1, a2, a3, a4);
      if (!sub_18F75512C(a1, LocationUsabilityCriteria, a1[19], v19))
        return 0;

      a1[22] = a1[19];
      v23 = (void *)objc_msgSend_firstLocationUsabilityCriteria(*a1, v20, v21, v22);
      if (objc_msgSend_altitudeStitchingEnabled(v23, v24, v25, v26))
      {
        v30 = (char *)objc_msgSend_firstLocationUsabilityCriteria(*a1, v27, v28, v29);
        if (sub_18F755BD8(a1, v30, a1[19], v31))
        {

          a1[23] = a1[19];
        }
      }
      if (*a1)
      {
        v32 = a1[22];
        if (v32)
        {
          objc_msgSend_coordinate(v32, v27, v28, v29);
          if (v37 < -180.0 || v37 > 180.0 || v36 > 90.0 || v36 < -90.0)
          {
            if (qword_1ECD8E758 != -1)
              dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
            v70 = qword_1ECD8E750;
            if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
            {
              v74 = objc_msgSend_feature(*a1, v71, v72, v73);
              *(_DWORD *)buf = 138543362;
              v112 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v75, v74, v76);
              _os_log_impl(&dword_18F5B3000, v70, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendFirstLocationEarly,not sending,invalid coordinates", buf, 0xCu);
            }
            if (!sub_18F5C4AE0(115, 2))
              return 0;
            bzero(buf, 0x65CuLL);
            if (qword_1ECD8E758 == -1)
              goto LABEL_80;
          }
          else
          {
            if (!objc_msgSend_firstLocationEarlyReturnEnabled(*a1, v33, v34, v35))
              return 0;
            objc_msgSend_horizontalAccuracy(a1[22], v38, v39, v40);
            v42 = v41;
            objc_msgSend_firstLocationMaxEarlyReturnHunc(*a1, v43, v44, v45);
            if (v42 <= v49)
            {
              objc_msgSend_verticalAccuracy(a1[22], v46, v47, v48);
              v79 = v78;
              objc_msgSend_firstLocationMaxEarlyReturnVunc(*a1, v80, v81, v82);
              if (v79 <= v83)
              {
                if (qword_1ECD8E758 != -1)
                  dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
                v91 = qword_1ECD8E750;
                if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
                {
                  v95 = objc_msgSend_feature(*a1, v92, v93, v94);
                  *(_DWORD *)buf = 138543362;
                  v112 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v96, v95, v97);
                  _os_log_impl(&dword_18F5B3000, v91, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendFirstLocationEarly,can send first location early", buf, 0xCu);
                }
                if (sub_18F5C4AE0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1ECD8E758 != -1)
                    dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
                  v107 = objc_msgSend_feature(*a1, v104, v105, v106);
                  objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v108, v107, v109);
                  v110 = (char *)_os_log_send_and_compose_impl();
                  sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::shouldSendFirstLocationEarly()", "CoreLocation: %s\n", v110);
                  if (v110 != (char *)buf)
                    free(v110);
                }
                v11 = 1;
                *((_BYTE *)a1 + 209) = 1;
                v9 = (char *)objc_msgSend_firstLocationUsabilityCriteria(*a1, v98, v99, v100);
                goto LABEL_8;
              }
              if (qword_1ECD8E758 != -1)
                dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
              v84 = qword_1ECD8E750;
              if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
              {
                v88 = objc_msgSend_feature(*a1, v85, v86, v87);
                *(_DWORD *)buf = 138543362;
                v112 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v89, v88, v90);
                _os_log_impl(&dword_18F5B3000, v84, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendFirstLocationEarly,not sending,First location early return Vunc not satisfied", buf, 0xCu);
              }
              if (!sub_18F5C4AE0(115, 2))
                return 0;
              bzero(buf, 0x65CuLL);
              if (qword_1ECD8E758 == -1)
                goto LABEL_80;
            }
            else
            {
              if (qword_1ECD8E758 != -1)
                dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
              v50 = qword_1ECD8E750;
              if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
              {
                v54 = objc_msgSend_feature(*a1, v51, v52, v53);
                *(_DWORD *)buf = 138543362;
                v112 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v55, v54, v56);
                _os_log_impl(&dword_18F5B3000, v50, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendFirstLocationEarly,not sending,First location early return Hunc not satisfied", buf, 0xCu);
              }
              if (!sub_18F5C4AE0(115, 2))
                return 0;
              bzero(buf, 0x65CuLL);
              if (qword_1ECD8E758 == -1)
                goto LABEL_80;
            }
          }
        }
        else
        {
          if (qword_1ECD8E758 != -1)
            dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
          v63 = qword_1ECD8E750;
          if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
          {
            v67 = objc_msgSend_feature(*a1, v64, v65, v66);
            *(_DWORD *)buf = 138543362;
            v112 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v68, v67, v69);
            _os_log_impl(&dword_18F5B3000, v63, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendFirstLocationEarly,not sending,invalid cached location", buf, 0xCu);
          }
          if (!sub_18F5C4AE0(115, 2))
            return 0;
          bzero(buf, 0x65CuLL);
          if (qword_1ECD8E758 == -1)
            goto LABEL_80;
        }
        dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
LABEL_80:
        v101 = objc_msgSend_feature(*a1, v57, v58, v59);
        objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v102, v101, v103);
        v61 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::shouldSendFirstLocationEarly()", "CoreLocation: %s\n", v61);
        if (v61 == (char *)buf)
          return 0;
        goto LABEL_81;
      }
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
      v62 = qword_1ECD8E750;
      if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134283521;
        v112 = (uint64_t)a1;
        _os_log_impl(&dword_18F5B3000, v62, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,shouldSendFirstLocationEarly,this:%{private}p,nil fConfig,early return", buf, 0xCu);
      }
      v11 = 0;
      if (sub_18F5C4AE0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
        v61 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLEmergencyLocationSelectorInternal::shouldSendFirstLocationEarly()", "CoreLocation: %s\n", v61);
        goto LABEL_49;
      }
      return v11;
    case 4:
      v6 = *a1;
      if (*a1)
      {
        if (a1[22])
        {
          v7 = (void *)objc_msgSend_firstLocationUsabilityCriteria(v6, a2, a3, a4);
          if ((sub_18F756B84(a1, v7, (char *)a1[22], v8) & 1) == 0)
          {

            a1[22] = 0;
          }
        }
        *((_BYTE *)a1 + 209) = 0;
        v9 = (char *)objc_msgSend_firstLocationUsabilityCriteria(*a1, a2, a3, a4);
        v11 = 1;
LABEL_8:
        sub_18F756288((uint64_t)a1, v9, 1, v10);
        if ((objc_msgSend_firstUpdateEnabled(*a1, v12, v13, v14) & 1) == 0)
        {
          if (objc_msgSend_periodicUpdatesEnabled(*a1, v15, v16, v17))
            return 2;
          else
            return 3;
        }
      }
      else
      {
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
        v60 = qword_1ECD8E750;
        if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134283521;
          v112 = (uint64_t)a1;
          _os_log_impl(&dword_18F5B3000, v60, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,FirstLocation,SendLocationTimeout,this:%{private}p,nil fConfig,early return", buf, 0xCu);
        }
        v11 = 0;
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECD8E758 != -1)
            dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
          v61 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "CLEmergencyLocationSelectorInternal::State CLEmergencyLocationSelectorInternal::handler_FirstLocation(CLEmergencyLocationSelectorInternal::Event)", "CoreLocation: %s\n", v61);
LABEL_49:
          if (v61 != (char *)buf)
LABEL_81:
            free(v61);
          return 0;
        }
      }
      return v11;
    default:
      return 0;
  }
}

uint64_t sub_18F750550(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  double v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  char *updated;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  double v66;
  double v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  NSObject *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  _BYTE *v103;
  NSObject *v104;
  char *v105;
  NSObject *v106;
  NSObject *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  NSObject *v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  CLLocation *v165;
  const char *v166;
  void *v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  double v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  uint64_t v182;
  uint64_t v183;
  NSObject *v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  const char *v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  const char *v195;
  uint64_t v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  const char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  const char *v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  const char *v209;
  uint64_t v210;
  char *v211;
  _OWORD v212[8];
  _OWORD v213[5];
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  _OWORD v219[2];
  _BYTE buf[24];
  uint64_t v221;
  _BYTE v222[528];
  uint64_t v223;

  v223 = *MEMORY[0x1E0C80C00];
  switch((int)a2)
  {
    case 0:
      objc_msgSend_firstUpdateTimeout(*(void **)a1, a2, a3, a4);
      sub_18F754154(a1 + 24, v5);
      if (*(_QWORD *)(a1 + 160))
      {
        updated = (char *)objc_msgSend_locationUpdateUsabilityCriteria(*(void **)a1, v6, v7, v8);
        if (sub_18F757038((void **)a1, updated, *(void **)(a1 + 160), v10))
        {

          *(_QWORD *)(a1 + 192) = *(id *)(a1 + 160);
        }
        v14 = (char *)objc_msgSend_locationUpdateUsabilityCriteria(*(void **)a1, v11, v12, v13);
        if (sub_18F755BD8((void **)a1, v14, *(void **)(a1 + 160), v15))
        {

          *(_QWORD *)(a1 + 200) = *(id *)(a1 + 160);
        }
      }
      return 1;
    case 1:

      *(_QWORD *)(a1 + 192) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      sub_18F754C9C(a1 + 24, 4);
      return 1;
    case 2:
      return 3;
    case 3:
      v54 = (char *)objc_msgSend_locationUpdateUsabilityCriteria(*(void **)a1, a2, a3, a4);
      if (sub_18F757038((void **)a1, v54, *(void **)(a1 + 152), v55))
      {

        *(_QWORD *)(a1 + 192) = *(id *)(a1 + 152);
      }
      v59 = (char *)objc_msgSend_locationUpdateUsabilityCriteria(*(void **)a1, v56, v57, v58);
      if (!*(_QWORD *)a1)
      {
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
        v106 = qword_1ECD8E750;
        if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134283521;
          *(_QWORD *)&buf[4] = a1;
          _os_log_impl(&dword_18F5B3000, v106, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,isAltitudeUsableForFirstUpdate,this:%{private}p,nil fConfig,early return", buf, 0xCu);
        }
        if (!sub_18F5C4AE0(115, 0))
          goto LABEL_83;
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
        LODWORD(v213[2]) = 134283521;
        *(_QWORD *)((char *)&v213[2] + 4) = a1;
        v103 = (_BYTE *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLEmergencyLocationSelectorInternal::isAltitudeUsableForFirstUpdate(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n");
        goto LABEL_55;
      }
      v61 = *(void **)(a1 + 152);
      if (!sub_18F755BD8((void **)a1, v59, v61, v60))
        goto LABEL_83;
      v65 = *(void **)(a1 + 200);
      if (!v65)
      {
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
        v126 = qword_1ECD8E750;
        if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
        {
          v130 = objc_msgSend_feature(*(void **)a1, v127, v128, v129);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v131, v130, v132);
          _os_log_impl(&dword_18F5B3000, v126, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isAltitudeUsableForFirstUpdate,YES,FirstUpdateVerticalLocation being saved first time", buf, 0xCu);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_82;
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E758 == -1)
          goto LABEL_113;
        goto LABEL_121;
      }
      objc_msgSend_verticalAccuracy(v65, v62, v63, v64);
      v67 = v66;
      objc_msgSend_verticalAccuracy(v61, v68, v69, v70);
      if (v67 >= v74)
      {
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
        v136 = qword_1ECD8E750;
        if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
        {
          v140 = objc_msgSend_feature(*(void **)a1, v137, v138, v139);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v141, v140, v142);
          _os_log_impl(&dword_18F5B3000, v136, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isAltitudeUsableForFirstUpdate,YES,received Vunc better than cached Vunc", buf, 0xCu);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_82;
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E758 == -1)
          goto LABEL_113;
LABEL_121:
        dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
LABEL_113:
        v204 = objc_msgSend_feature(*(void **)a1, v133, v134, v135);
        LODWORD(v213[2]) = 138543362;
        *(_QWORD *)((char *)&v213[2] + 4) = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v205, v204, v206);
        goto LABEL_114;
      }
      objc_msgSend_ellipsoidalAltitude(*(void **)(a1 + 200), v71, v72, v73);
      v76 = v75;
      objc_msgSend_ellipsoidalAltitude(v61, v77, v78, v79);
      v81 = vabdd_f64(v76, v80);
      objc_msgSend_locationUpdateChangeInAltitudeToSendEarly(*(void **)a1, v82, v83, v84);
      if (v81 >= v88)
      {
        objc_msgSend_verticalAccuracy(v61, v85, v86, v87);
        if (v81 >= v89 * 0.5)
        {
          if (qword_1EE1720A0 != -1)
            dispatch_once(&qword_1EE1720A0, &unk_1E2993018);
          v184 = qword_1EE172098;
          if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_DEFAULT))
          {
            v188 = objc_msgSend_feature(*(void **)a1, v185, v186, v187);
            *(_DWORD *)buf = 138543618;
            *(_QWORD *)&buf[4] = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v189, v188, v190);
            *(_WORD *)&buf[12] = 2050;
            *(double *)&buf[14] = v81;
            _os_log_impl(&dword_18F5B3000, v184, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isAltitudeUsableForFirstUpdate,YES,altitude change significant,%{public}f", buf, 0x16u);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_82;
          bzero(buf, 0x65CuLL);
          if (qword_1EE1720A0 != -1)
            dispatch_once(&qword_1EE1720A0, &unk_1E2993018);
          v194 = objc_msgSend_feature(*(void **)a1, v191, v192, v193);
          LODWORD(v213[2]) = 138543618;
          *(_QWORD *)((char *)&v213[2] + 4) = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v195, v194, v196);
          WORD6(v213[2]) = 2050;
          *(double *)((char *)&v213[2] + 14) = v81;
LABEL_114:
          v207 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::isAltitudeUsableForFirstUpdate(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n", v207);
          if (v207 != buf)
            free(v207);
LABEL_82:

          *(_QWORD *)(a1 + 200) = *(id *)(a1 + 152);
          goto LABEL_83;
        }
      }
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
      v90 = qword_1ECD8E750;
      if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
      {
        v94 = objc_msgSend_feature(*(void **)a1, v91, v92, v93);
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v95, v94, v96);
        _os_log_impl(&dword_18F5B3000, v90, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isAltitudeUsableForFirstUpdate,NO", buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 2))
        goto LABEL_83;
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
      v100 = objc_msgSend_feature(*(void **)a1, v97, v98, v99);
      LODWORD(v213[2]) = 138543362;
      *(_QWORD *)((char *)&v213[2] + 4) = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v101, v100, v102);
      v103 = (_BYTE *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::isAltitudeUsableForFirstUpdate(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n");
LABEL_55:
      if (v103 != buf)
        free(v103);
LABEL_83:
      v143 = (char *)objc_msgSend_locationUpdateUsabilityCriteria(*(void **)a1, v62, v63, v64);
      if (sub_18F75512C((void **)a1, v143, *(void **)(a1 + 152), v144))
      {

        *(_QWORD *)(a1 + 176) = *(id *)(a1 + 152);
        v148 = (void *)objc_msgSend_locationUpdateUsabilityCriteria(*(void **)a1, v145, v146, v147);
        if (objc_msgSend_altitudeStitchingEnabled(v148, v149, v150, v151))
        {
          v155 = (char *)objc_msgSend_locationUpdateUsabilityCriteria(*(void **)a1, v152, v153, v154);
          if (sub_18F755BD8((void **)a1, v155, *(void **)(a1 + 152), v156))
          {

            *(_QWORD *)(a1 + 184) = *(id *)(a1 + 152);
          }
        }
      }
      return 1;
    case 4:
      if (!*(_QWORD *)a1)
      {
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
        v104 = qword_1ECD8E750;
        if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134283521;
          *(_QWORD *)&buf[4] = a1;
          _os_log_impl(&dword_18F5B3000, v104, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,FirstUpdate,SendLocationTimeout,this:%{private}p,nil fConfig,early return", buf, 0xCu);
        }
        if (sub_18F5C4AE0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECD8E758 != -1)
            dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
          LODWORD(v213[2]) = 134283521;
          *(_QWORD *)((char *)&v213[2] + 4) = a1;
          v105 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 0, "CLEmergencyLocationSelectorInternal::State CLEmergencyLocationSelectorInternal::handler_FirstUpdate(CLEmergencyLocationSelectorInternal::Event)", "CoreLocation: %s\n", v105);
          if (v105 != buf)
            free(v105);
        }
        return 1;
      }
      v16 = *(void **)(a1 + 192);
      if (!v16)
      {
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
        v107 = qword_1ECD8E750;
        if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
        {
          v111 = objc_msgSend_feature(*(void **)a1, v108, v109, v110);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v112, v111, v113);
          _os_log_impl(&dword_18F5B3000, v107, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,sendFirstUpdateLocation,send nil Location", buf, 0xCu);
        }
        if (sub_18F5C4AE0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECD8E758 != -1)
            dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
          v200 = objc_msgSend_feature(*(void **)a1, v197, v198, v199);
          LODWORD(v213[2]) = 138543362;
          *(_QWORD *)((char *)&v213[2] + 4) = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v201, v200, v202);
          v203 = (char *)_os_log_send_and_compose_impl();
          sub_18F5F2740("Generic", 1, 0, 2, "void CLEmergencyLocationSelectorInternal::sendFirstUpdateLocation()", "CoreLocation: %s\n", v203);
          if (v203 != buf)
            free(v203);
        }
        sub_18F7586E8(a1, 0);
        goto LABEL_97;
      }
      objc_msgSend_trustedTimestamp(v16, a2, a3, a4);
      v21 = v20;
      v218 = 0u;
      memset(v219, 0, 28);
      v216 = 0u;
      v217 = 0u;
      v214 = 0u;
      v215 = 0u;
      memset(&v213[2], 0, 48);
      v22 = *(void **)(a1 + 192);
      if (v22)
        objc_msgSend_clientLocation(v22, v17, v18, v19);
      v23 = *(void **)(a1 + 200);
      if (v23)
      {
        objc_msgSend_verticalAccuracy(v23, v17, v18, v19);
        v25 = v24;
        objc_msgSend_verticalAccuracy(*(void **)(a1 + 192), v26, v27, v28);
        if (v25 == v32)
        {
          if (qword_1ECD8E758 != -1)
            dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
          v157 = qword_1ECD8E750;
          if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
          {
            v161 = objc_msgSend_feature(*(void **)a1, v158, v159, v160);
            v164 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v162, v161, v163);
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v164;
            _os_log_impl(&dword_18F5B3000, v157, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,sendFirstUpdateLocation,FirstUpdateHorizontalLocation,as-is", buf, 0xCu);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_94;
          bzero(buf, 0x65CuLL);
          if (qword_1ECD8E758 == -1)
            goto LABEL_117;
        }
        else
        {
          objc_msgSend_altitude(*(void **)(a1 + 200), v29, v30, v31);
          *(_QWORD *)((char *)&v213[3] + 12) = v33;
          objc_msgSend_ellipsoidalAltitude(*(void **)(a1 + 200), v34, v35, v36);
          *(_QWORD *)&v219[1] = v37;
          objc_msgSend_verticalAccuracy(*(void **)(a1 + 200), v38, v39, v40);
          *(_QWORD *)((char *)&v213[4] + 4) = v41;
          if (qword_1ECD8E758 != -1)
            dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
          v42 = qword_1ECD8E750;
          if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
          {
            v46 = objc_msgSend_feature(*(void **)a1, v43, v44, v45);
            v49 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v47, v46, v48);
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v49;
            _os_log_impl(&dword_18F5B3000, v42, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,sendFirstUpdateLocation,FirstUpdateHorizontalLocation,with altitude stitching", buf, 0xCu);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_94;
          bzero(buf, 0x65CuLL);
          if (qword_1ECD8E758 == -1)
          {
LABEL_117:
            v208 = objc_msgSend_feature(*(void **)a1, v50, v51, v52);
            LODWORD(v212[0]) = 138543362;
            *(_QWORD *)((char *)v212 + 4) = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v209, v208, v210);
            v211 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "void CLEmergencyLocationSelectorInternal::sendFirstUpdateLocation()", "CoreLocation: %s\n", v211);
            if (v211 != buf)
              free(v211);
LABEL_94:
            v165 = [CLLocation alloc];
            v212[6] = v217;
            v212[7] = v218;
            v213[0] = v219[0];
            *(_OWORD *)((char *)v213 + 12) = *(_OWORD *)((char *)v219 + 12);
            v212[2] = v213[4];
            v212[3] = v214;
            v212[4] = v215;
            v212[5] = v216;
            v212[0] = v213[2];
            v212[1] = v213[3];
            *(_OWORD *)buf = xmmword_18F773410;
            *(_QWORD *)&buf[16] = 0xBFF0000000000000;
            v221 = v21;
            memcpy(v222, &unk_18F773430, sizeof(v222));
            v167 = (void *)objc_msgSend_initWithClientLocation_clientLocationPrivate_(v165, v166, (uint64_t)v212, (uint64_t)buf);
            sub_18F7586E8(a1, v167);
            if (v167)
            {
              *(_BYTE *)(a1 + 232) = 1;
              *(_DWORD *)(a1 + 248) = objc_msgSend_integrity(v167, v168, v169, v170);
              *(_DWORD *)(a1 + 236) = objc_msgSend_type(v167, v171, v172, v173);
              objc_msgSend_horizontalAccuracy(v167, v174, v175, v176);
              *(_DWORD *)(a1 + 240) = (int)v177;
              objc_msgSend_verticalAccuracy(v167, v178, v179, v180);
              *(_DWORD *)(a1 + 244) = (int)v181;
              *(_DWORD *)(a1 + 252) = (int)sub_18F757C18((void **)a1, (char *)v167, v182, v183);
            }

LABEL_97:
            if (objc_msgSend_periodicUpdatesEnabled(*(void **)a1, v114, v115, v116))
              return 2;
            else
              return 3;
          }
        }
      }
      else
      {
        *(_QWORD *)((char *)&v213[3] + 12) = 0;
        *(_QWORD *)&v219[1] = 0;
        objc_msgSend_verticalAccuracy(*(void **)(a1 + 184), v17, v18, v19);
        *(_QWORD *)((char *)&v213[4] + 4) = v117;
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
        v118 = qword_1ECD8E750;
        if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
        {
          v122 = objc_msgSend_feature(*(void **)a1, v119, v120, v121);
          v125 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v123, v122, v124);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v125;
          _os_log_impl(&dword_18F5B3000, v118, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,sendFirstUpdateLocation,FirstUpdateHorizontalLocation,with altitude cleared", buf, 0xCu);
        }
        if (!sub_18F5C4AE0(115, 2))
          goto LABEL_94;
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E758 == -1)
          goto LABEL_117;
      }
      dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
      goto LABEL_117;
    default:
      return 1;
  }
}

uint64_t sub_18F7516D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  char *updated;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  NSObject *v51;
  char *v52;
  NSObject *v53;
  NSObject *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  NSObject *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  double v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  double v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  double v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  double v118;
  char *v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  double v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  double v134;
  double v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  double v151;
  NSObject *v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  NSObject *v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  NSObject *v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  NSObject *v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  NSObject *v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  double v211;
  uint64_t v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  double v218;
  double v219;
  double v220;
  double v221;
  int v222;
  uint64_t v223;
  __int16 v224;
  double v225;
  __int16 v226;
  double v227;
  uint8_t buf[4];
  uint64_t v229;
  __int16 v230;
  double v231;
  __int16 v232;
  double v233;
  uint64_t v234;

  v234 = *MEMORY[0x1E0C80C00];
  switch((int)a2)
  {
    case 0:
      if (*(_QWORD *)(a1 + 176))
      {
        updated = (char *)objc_msgSend_locationUpdateUsabilityCriteria(*(void **)a1, a2, a3, a4);
        if ((sub_18F75512C((void **)a1, updated, *(void **)(a1 + 176), v6) & 1) == 0)
        {

          *(_QWORD *)(a1 + 176) = 0;
        }
      }
      if (*(_QWORD *)(a1 + 184))
      {
        v7 = (char *)objc_msgSend_locationUpdateUsabilityCriteria(*(void **)a1, a2, a3, a4);
        if (!sub_18F75512C((void **)a1, v7, *(void **)(a1 + 184), v8)
          || (v12 = (char *)objc_msgSend_locationUpdateUsabilityCriteria(*(void **)a1, v9, v10, v11),
              (sub_18F755BD8((void **)a1, v12, *(void **)(a1 + 184), v13) & 1) == 0))
        {

          *(_QWORD *)(a1 + 184) = 0;
        }
      }
      goto LABEL_112;
    case 1:
      sub_18F754C9C(a1 + 24, 4);
      return 2;
    case 2:
      return 3;
    case 3:
      v18 = (char *)objc_msgSend_locationUpdateUsabilityCriteria(*(void **)a1, a2, a3, a4);
      if (!sub_18F75512C((void **)a1, v18, *(void **)(a1 + 152), v19))
        return 2;

      *(_QWORD *)(a1 + 176) = *(id *)(a1 + 152);
      v23 = (void *)objc_msgSend_locationUpdateUsabilityCriteria(*(void **)a1, v20, v21, v22);
      if (objc_msgSend_altitudeStitchingEnabled(v23, v24, v25, v26))
      {
        v30 = (char *)objc_msgSend_locationUpdateUsabilityCriteria(*(void **)a1, v27, v28, v29);
        if (sub_18F755BD8((void **)a1, v30, *(void **)(a1 + 152), v31))
        {

          *(_QWORD *)(a1 + 184) = *(id *)(a1 + 152);
        }
      }
      if (!*(_QWORD *)a1)
      {
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
        v53 = qword_1ECD8E750;
        if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134283521;
          v229 = a1;
          _os_log_impl(&dword_18F5B3000, v53, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,shouldSendLocationUpdateEarly,this:%{private}p,nil fConfig,early return", buf, 0xCu);
        }
        if (!sub_18F5C4AE0(115, 0))
          return 2;
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
        v222 = 134283521;
        v223 = a1;
        v52 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 0, "BOOL CLEmergencyLocationSelectorInternal::shouldSendLocationUpdateEarly()", "CoreLocation: %s\n", v52);
LABEL_47:
        if (v52 == (char *)buf)
          return 2;
        goto LABEL_58;
      }
      if (*(_QWORD *)(a1 + 176))
      {
        if (!*(_QWORD *)(a1 + 160))
        {
          if (qword_1ECD8E758 != -1)
            dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
          v67 = qword_1ECD8E750;
          if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
          {
            v71 = objc_msgSend_feature(*(void **)a1, v68, v69, v70);
            *(_DWORD *)buf = 138543362;
            v229 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v72, v71, v73);
            _os_log_impl(&dword_18F5B3000, v67, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendLocationUpdateEarly,sending,first valid fix being sent after sending no fix or nil fix", buf, 0xCu);
          }
          if (sub_18F5C4AE0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1ECD8E758 != -1)
              dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
            v77 = objc_msgSend_feature(*(void **)a1, v74, v75, v76);
            v222 = 138543362;
            v223 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v78, v77, v79);
            goto LABEL_117;
          }
          goto LABEL_111;
        }
        v32 = mach_continuous_time();
        v33 = sub_18F6BDF00(v32) - *(double *)(a1 + 168);
        objc_msgSend_locationUpdateMinDelay(*(void **)a1, v34, v35, v36);
        if (v33 < v37)
        {
          if (qword_1ECD8E758 != -1)
            dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
          v38 = qword_1ECD8E750;
          if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
          {
            v42 = objc_msgSend_feature(*(void **)a1, v39, v40, v41);
            *(_DWORD *)buf = 138543618;
            v229 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v43, v42, v44);
            v230 = 2050;
            v231 = v33;
            _os_log_impl(&dword_18F5B3000, v38, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendLocationUpdateEarly,not sending,last send was too recent,tDiff,%{public}f", buf, 0x16u);
          }
          v17 = 2;
          if (!sub_18F5C4AE0(115, 2))
            return v17;
          bzero(buf, 0x65CuLL);
          if (qword_1ECD8E758 != -1)
            dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
          v48 = objc_msgSend_feature(*(void **)a1, v45, v46, v47);
          v222 = 138543618;
          v223 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v49, v48, v50);
          v224 = 2050;
          v225 = v33;
          goto LABEL_57;
        }
        v220 = 0.0;
        v221 = 0.0;
        sub_18F757FA4(*(_QWORD *)(a1 + 176), &v221, &v220);
        v218 = 0.0;
        v219 = 0.0;
        sub_18F757FA4(*(_QWORD *)(a1 + 160), &v219, &v218);
        v80 = v219;
        v81 = v221;
        v82 = v219 - v221;
        objc_msgSend_locationUpdateHuncReductionToSendEarly(*(void **)a1, v83, v84, v85);
        if (v82 >= v89)
        {
          if (qword_1EE1720A0 != -1)
            dispatch_once(&qword_1EE1720A0, &unk_1E2993018);
          v167 = qword_1EE172098;
          if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_DEFAULT))
          {
            v171 = objc_msgSend_feature(*(void **)a1, v168, v169, v170);
            v174 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v172, v171, v173);
            *(_DWORD *)buf = 138543874;
            v229 = v174;
            v230 = 2050;
            v231 = v80;
            v232 = 2050;
            v233 = v81;
            _os_log_impl(&dword_18F5B3000, v167, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendLocationUpdateEarly,sending,higher hunc reduction,previous,%{public}f,current,%{public}f", buf, 0x20u);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_111;
          bzero(buf, 0x65CuLL);
          if (qword_1EE1720A0 == -1)
            goto LABEL_116;
        }
        else
        {
          objc_msgSend_coordinate(*(void **)(a1 + 160), v86, v87, v88);
          v91 = v90;
          objc_msgSend_coordinate(*(void **)(a1 + 160), v92, v93, v94);
          v96 = v95;
          objc_msgSend_coordinate(*(void **)(a1 + 176), v97, v98, v99);
          v101 = v100;
          objc_msgSend_coordinate(*(void **)(a1 + 176), v102, v103, v104);
          v106 = sub_18F5BD12C(v91, v96, v101, v105);
          objc_msgSend_locationUpdateDistanceMovedToSendEarly(*(void **)a1, v107, v108, v109);
          if (v106 >= v113)
          {
            objc_msgSend_horizontalAccuracy(*(void **)(a1 + 160), v110, v111, v112);
            if (v106 >= v117 || (objc_msgSend_horizontalAccuracy(*(void **)(a1 + 176), v114, v115, v116), v106 >= v118))
            {
              if (qword_1EE1720A0 != -1)
                dispatch_once(&qword_1EE1720A0, &unk_1E2993018);
              v178 = qword_1EE172098;
              if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_DEFAULT))
              {
                v182 = objc_msgSend_feature(*(void **)a1, v179, v180, v181);
                v185 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v183, v182, v184);
                *(_DWORD *)buf = 138543618;
                v229 = v185;
                v230 = 2050;
                v231 = v106;
                _os_log_impl(&dword_18F5B3000, v178, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendLocationUpdateEarly,sending,location changed significantly,dist,%{public}f", buf, 0x16u);
              }
              if (sub_18F5C4AE0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE1720A0 == -1)
                  goto LABEL_83;
                goto LABEL_122;
              }
LABEL_111:
              v209 = (char *)objc_msgSend_locationUpdateUsabilityCriteria(*(void **)a1, a2, a3, a4);
              sub_18F756288(a1, v209, 0, v210);
LABEL_112:
              objc_msgSend_locationUpdateTimeout(*(void **)a1, a2, a3, a4);
              sub_18F754154(a1 + 24, v211);
              return 2;
            }
          }
          v119 = (char *)objc_msgSend_locationUpdateUsabilityCriteria(*(void **)a1, v110, v111, v112);
          if (!sub_18F755BD8((void **)a1, v119, *(void **)(a1 + 176), v120))
            return 2;
          v124 = (char *)objc_msgSend_locationUpdateUsabilityCriteria(*(void **)a1, v121, v122, v123);
          if ((sub_18F755BD8((void **)a1, v124, *(void **)(a1 + 160), v125) & 1) == 0)
          {
            if (qword_1EE1720A0 != -1)
              dispatch_once(&qword_1EE1720A0, &unk_1E2993018);
            v186 = qword_1EE172098;
            if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_DEFAULT))
            {
              v190 = objc_msgSend_feature(*(void **)a1, v187, v188, v189);
              v193 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v191, v190, v192);
              *(_DWORD *)buf = 138543362;
              v229 = v193;
              _os_log_impl(&dword_18F5B3000, v186, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendLocationUpdateEarly,sending,altitude is usable now", buf, 0xCu);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE1720A0 != -1)
                dispatch_once(&qword_1EE1720A0, &unk_1E2993018);
              v197 = objc_msgSend_feature(*(void **)a1, v194, v195, v196);
              v200 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v198, v197, v199);
              v222 = 138543362;
              v223 = v200;
              goto LABEL_117;
            }
            goto LABEL_111;
          }
          v80 = v218;
          v81 = v220;
          v129 = v218 - v220;
          objc_msgSend_locationUpdateVuncReductionToSendEarly(*(void **)a1, v126, v127, v128);
          if (v129 < v133)
          {
            objc_msgSend_ellipsoidalAltitude(*(void **)(a1 + 160), v130, v131, v132);
            v135 = v134;
            objc_msgSend_ellipsoidalAltitude(*(void **)(a1 + 176), v136, v137, v138);
            v106 = vabdd_f64(v135, v139);
            objc_msgSend_locationUpdateChangeInAltitudeToSendEarly(*(void **)a1, v140, v141, v142);
            if (v106 < v146)
              return 2;
            objc_msgSend_verticalAccuracy(*(void **)(a1 + 160), v143, v144, v145);
            if (v106 < v150 * 0.5)
            {
              objc_msgSend_verticalAccuracy(*(void **)(a1 + 176), v147, v148, v149);
              if (v106 < v151 * 0.5)
                return 2;
            }
            if (qword_1EE1720A0 != -1)
              dispatch_once(&qword_1EE1720A0, &unk_1E2993018);
            v152 = qword_1EE172098;
            if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_DEFAULT))
            {
              v156 = objc_msgSend_feature(*(void **)a1, v153, v154, v155);
              v159 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v157, v156, v158);
              *(_DWORD *)buf = 138543618;
              v229 = v159;
              v230 = 2050;
              v231 = v106;
              _os_log_impl(&dword_18F5B3000, v152, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendLocationUpdateEarly,sending,higher altitude change,%{public}f", buf, 0x16u);
            }
            if (sub_18F5C4AE0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE1720A0 == -1)
              {
LABEL_83:
                v163 = objc_msgSend_feature(*(void **)a1, v160, v161, v162);
                v166 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v164, v163, v165);
                v222 = 138543618;
                v223 = v166;
                v224 = 2050;
                v225 = v106;
                goto LABEL_117;
              }
LABEL_122:
              dispatch_once(&qword_1EE1720A0, &unk_1E2993018);
              goto LABEL_83;
            }
            goto LABEL_111;
          }
          if (qword_1EE1720A0 != -1)
            dispatch_once(&qword_1EE1720A0, &unk_1E2993018);
          v201 = qword_1EE172098;
          if (os_log_type_enabled((os_log_t)qword_1EE172098, OS_LOG_TYPE_DEFAULT))
          {
            v205 = objc_msgSend_feature(*(void **)a1, v202, v203, v204);
            v208 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v206, v205, v207);
            *(_DWORD *)buf = 138543874;
            v229 = v208;
            v230 = 2050;
            v231 = v80;
            v232 = 2050;
            v233 = v81;
            _os_log_impl(&dword_18F5B3000, v201, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendLocationUpdateEarly,sending,higher vunc reduction,previous,%{public}f,current,%{public}f", buf, 0x20u);
          }
          if (!sub_18F5C4AE0(115, 2))
            goto LABEL_111;
          bzero(buf, 0x65CuLL);
          if (qword_1EE1720A0 == -1)
          {
LABEL_116:
            v213 = objc_msgSend_feature(*(void **)a1, v175, v176, v177);
            v216 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v214, v213, v215);
            v222 = 138543874;
            v223 = v216;
            v224 = 2050;
            v225 = v80;
            v226 = 2050;
            v227 = v81;
LABEL_117:
            v217 = (char *)_os_log_send_and_compose_impl();
            sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::shouldSendLocationUpdateEarly()", "CoreLocation: %s\n", v217);
            if (v217 != (char *)buf)
              free(v217);
            goto LABEL_111;
          }
        }
        dispatch_once(&qword_1EE1720A0, &unk_1E2993018);
        goto LABEL_116;
      }
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
      v54 = qword_1ECD8E750;
      if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_DEFAULT))
      {
        v58 = objc_msgSend_feature(*(void **)a1, v55, v56, v57);
        *(_DWORD *)buf = 138543362;
        v229 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v59, v58, v60);
        _os_log_impl(&dword_18F5B3000, v54, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendLocationUpdateEarly,not sending,invalid cached location", buf, 0xCu);
      }
      v17 = 2;
      if (sub_18F5C4AE0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECD8E758 != -1)
          dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
        v64 = objc_msgSend_feature(*(void **)a1, v61, v62, v63);
        v222 = 138543362;
        v223 = objc_msgSend_featureString_(CLEmergencyLocationSelectorConfig, v65, v64, v66);
LABEL_57:
        v52 = (char *)_os_log_send_and_compose_impl();
        sub_18F5F2740("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::shouldSendLocationUpdateEarly()", "CoreLocation: %s\n", v52);
        if (v52 == (char *)buf)
          return 2;
LABEL_58:
        free(v52);
        return 2;
      }
      return v17;
    case 4:
      v14 = *(void **)a1;
      if (*(_QWORD *)a1)
      {
        if (*(_QWORD *)(a1 + 176))
        {
          v15 = (void *)objc_msgSend_locationUpdateUsabilityCriteria(v14, a2, a3, a4);
          if ((sub_18F756B84((void **)a1, v15, *(char **)(a1 + 176), v16) & 1) == 0)
          {

            *(_QWORD *)(a1 + 176) = 0;
          }
        }
        goto LABEL_111;
      }
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
      v51 = qword_1ECD8E750;
      if (os_log_type_enabled((os_log_t)qword_1ECD8E750, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134283521;
        v229 = a1;
        _os_log_impl(&dword_18F5B3000, v51, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,PeriodicUpdates,SendLocationTimeout,this:%{private}p,nil fConfig,early return", buf, 0xCu);
      }
      if (!sub_18F5C4AE0(115, 0))
        return 2;
      bzero(buf, 0x65CuLL);
      if (qword_1ECD8E758 != -1)
        dispatch_once(&qword_1ECD8E758, &unk_1E2990C70);
      v222 = 134283521;
      v223 = a1;
      v52 = (char *)_os_log_send_and_compose_impl();
      sub_18F5F2740("Generic", 1, 0, 0, "CLEmergencyLocationSelectorInternal::State CLEmergencyLocationSelectorInternal::handler_PeriodicUpdates(CLEmergencyLocationSelectorInternal::Event)", "CoreLocation: %s\n", v52);
      goto LABEL_47;
    default:
      return 2;
  }
}

