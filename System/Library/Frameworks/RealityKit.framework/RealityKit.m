id closure #1 in static ARKitRunner.runSession(_:configuration:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a1, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  v13 = a2 + OBJC_IVAR____TtC10RealityKitP33_98DEB876138878DC696D4005FE1B9B4811ARKitRunner_continuation;
  swift_beginAccess();
  outlined assign with take of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v10, v13);
  swift_endAccess();
  return objc_msgSend(a3, sel_runWithConfiguration_options_, a4, 0);
}

id ARKitRunner.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ARKitRunner();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(a2, a3);
}

uint64_t closure #1 in ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t Strong;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    *(_QWORD *)(Strong + 24) = a1;
    swift_bridgeObjectRetain();
    swift_release();
    Strong = swift_bridgeObjectRelease();
  }
  return a3(Strong);
}

uint64_t closure #2 in ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t Strong;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    *(_QWORD *)(Strong + 32) = a1;
    swift_bridgeObjectRetain();
    swift_release();
    Strong = swift_bridgeObjectRelease();
  }
  return a3(Strong);
}

uint64_t ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = type metadata accessor for SpatialTrackingSession.Configuration();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  type metadata accessor for MainActor();
  swift_retain();
  v12 = static MainActor.shared.getter();
  v13 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v14 = (char *)swift_allocObject();
  v15 = MEMORY[0x1E0DF06E8];
  *((_QWORD *)v14 + 2) = v12;
  *((_QWORD *)v14 + 3) = v15;
  *((_QWORD *)v14 + 4) = v2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v14[v13], v7, v4);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:), (uint64_t)v14);
  return swift_release();
}

uint64_t closure #1 in ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v8;

  v5[2] = type metadata accessor for MainActor();
  v5[3] = static MainActor.shared.getter();
  v8 = (_QWORD *)swift_task_alloc();
  v5[4] = v8;
  *v8 = v5;
  v8[1] = closure #1 in ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:);
  return ARSessionManager.runARKitSession(withSupportedCapabilities:)(a1, a5);
}

uint64_t closure #1 in ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:)()
{
  swift_task_dealloc();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTrackingSession.UnavailableCapabilities?);
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t key path getter for ARSessionManager.isRunningUserProvidedARSession : ARSessionManager@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 40);
  return result;
}

uint64_t key path setter for ARSessionManager.isRunningUserProvidedARSession : ARSessionManager(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 40) = v2;
  return result;
}

uint64_t ARSessionManager.isRunningUserProvidedARSession.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t ARSessionManager.isRunningUserProvidedARSession.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 40) = a1;
  return result;
}

uint64_t (*ARSessionManager.isRunningUserProvidedARSession.modify())()
{
  swift_beginAccess();
  return ARSessionManager.isRunningUserProvidedARSession.modify;
}

uint64_t ARSessionManager.__allocating_init(arView:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  v3 = a1 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  swift_beginAccess();
  *(_BYTE *)(v3 + 2) = 0;
  return v2;
}

uint64_t ARSessionManager.init(arView:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 16) = a1;
  v2 = a1 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  swift_beginAccess();
  *(_BYTE *)(v2 + 2) = 0;
  return v1;
}

uint64_t ARSessionManager.getSupportedCapabilities(for:)@<X0>(uint64_t a1@<X8>)
{
  return SpatialTrackingSession.Configuration.supportedConfiguration()(a1);
}

uint64_t ARSessionManager.configureViewUsingSession(_:supportedCapabilities:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t ARSessionManager.configureViewUsingSession(_:supportedCapabilities:)()
{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 40) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  swift_release();
  closure #1 in ARSessionManager.configureViewUsingSession(_:supportedCapabilities:)(v1, v2);
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in ARSessionManager.configureViewUsingSession(_:supportedCapabilities:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  id v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  char v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  char *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  char v40;
  int v41;
  int v42;

  v4 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = a1;
  v11 = *(char **)(a1 + 16);
  v12 = objc_msgSend(v11, sel_session);
  type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for ARSession);
  LOBYTE(a1) = static NSObject.== infix(_:_:)();

  if ((a1 & 1) == 0)
    objc_msgSend(v11, sel_setSession_, a2);
  v13 = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
  v14 = specialized Set.contains(_:)((uint64_t)v10, v13);
  swift_bridgeObjectRelease();
  v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  v16 = &v11[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
  swift_beginAccess();
  *v16 = v14 & 1;
  if ((v14 & 1) == 0)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)v16 + 2) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
    *((_QWORD *)v16 + 4) = specialized Dictionary.init(dictionaryLiteral:)(v17);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v36 + 24) = 0;
    swift_bridgeObjectRelease();
  }
  v18 = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
  v19 = specialized Set.contains(_:)((uint64_t)v10, v18);
  swift_bridgeObjectRelease();
  v15(v10, v7);
  v16[1] = v19 & 1;
  if ((v19 & 1) == 0)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)v16 + 3) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
    *((_QWORD *)v16 + 5) = specialized Dictionary.init(dictionaryLiteral:)(v20);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v36 + 32) = 0;
    swift_bridgeObjectRelease();
  }
  v21 = SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
  v22 = specialized Set.contains(_:)((uint64_t)v6, v21);
  swift_bridgeObjectRelease();
  v23 = v38;
  v24 = *(void (**)(char *, uint64_t))(v37 + 8);
  v24(v6, v38);
  v25 = SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
  v26 = specialized Set.contains(_:)((uint64_t)v6, v25);
  swift_bridgeObjectRelease();
  v24(v6, v23);
  if ((v26 & 1) != 0)
    v27 = v22 & 1 | 2;
  else
    v27 = v22 & 1;
  v28 = SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
  v29 = specialized Set.contains(_:)((uint64_t)v6, v28);
  swift_bridgeObjectRelease();
  v24(v6, v23);
  if ((v29 & 1) != 0)
    v27 |= 4u;
  v30 = SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
  v31 = specialized Set.contains(_:)((uint64_t)v6, v30);
  swift_bridgeObjectRelease();
  v24(v6, v23);
  if ((v31 & 1) != 0)
    v27 |= 0xCu;
  v32 = &v11[OBJC_IVAR____TtC10RealityKit6ARView_environment];
  swift_beginAccess();
  ARView.Environment.sceneUnderstanding.getter((uint64_t)&v39);
  v33 = v41;
  v41 = v27;
  v42 = v33;
  ARView.Environment.SceneUnderstanding.options.didset(&v42);
  v34 = v41;
  v35 = 0x100000000;
  if (!v40)
    v35 = 0;
  *(_QWORD *)v32 = v35 | v39;
  *((_DWORD *)v32 + 2) = v34;
  swift_endAccess();
  ARView.updateEnvironment()();
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  char v12;
  uint64_t v14;
  uint64_t v15;

  v3 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C78]), v6 = dispatch thunk of Hashable._rawHashValue(seed:)(), v7 = -1 << *(_BYTE *)(a2 + 32), v8 = v6 & ~v7, ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0))
  {
    v9 = ~v7;
    v10 = *(_QWORD *)(v15 + 72);
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    do
    {
      v11(v5, *(_QWORD *)(a2 + 48) + v10 * v8, v3);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C80]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  char v12;
  uint64_t v14;
  uint64_t v15;

  v3 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4CC0], MEMORY[0x1E0CD4CD0]), v6 = dispatch thunk of Hashable._rawHashValue(seed:)(), v7 = -1 << *(_BYTE *)(a2 + 32), v8 = v6 & ~v7, ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0))
  {
    v9 = ~v7;
    v10 = *(_QWORD *)(v15 + 72);
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    do
    {
      v11(v5, *(_QWORD *)(a2 + 48) + v10 * v8, v3);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4CC0], MEMORY[0x1E0CD4CD8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t ARSessionManager.runARKitSession(withSupportedCapabilities:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for SpatialTrackingSession.UnavailableCapabilities();
  v3[7] = v4;
  v3[8] = *(_QWORD *)(v4 - 8);
  v3[9] = swift_task_alloc();
  v5 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v3[10] = v5;
  v3[11] = *(_QWORD *)(v5 - 8);
  v3[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t ARSessionManager.runARKitSession(withSupportedCapabilities:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (unint64_t)SpatialTrackingSession.Configuration.arConfiguration()();
  *(_QWORD *)(v0 + 104) = v1;
  if (v1)
  {
    *(_QWORD *)(v0 + 112) = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16);
    *(_QWORD *)(v0 + 120) = type metadata accessor for MainActor();
    *(_QWORD *)(v0 + 128) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 64);
    v5 = *(_QWORD *)(v0 + 32);
    SpatialTrackingSession.UnavailableCapabilities.init()();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v5, 0, 1, v3);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 112);
  swift_release();
  *(_QWORD *)(v0 + 136) = objc_msgSend(v1, sel_session);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 144) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release();
  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (*(_QWORD *)(v0 + 152))
  {
    v2 = *(_QWORD *)(v0 + 88);
    v1 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 80);
    v4 = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
    v5 = specialized Set.contains(_:)(v1, v4);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    if ((v5 & 1) != 0)
      specialized static ARSessionManager.configureImageTracking(arConfiguration:arReferenceImages:)(*(void **)(v0 + 104), *(_QWORD *)(v0 + 152));
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v0 + 160) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release();
  *(_QWORD *)(v0 + 168) = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  Class isa;
  uint64_t v11;
  _QWORD *v12;

  if (v0[21])
  {
    v2 = v0[11];
    v1 = v0[12];
    v3 = v0[10];
    v4 = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
    v5 = specialized Set.contains(_:)(v1, v4);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    if ((v5 & 1) != 0)
    {
      objc_opt_self();
      v6 = swift_dynamicCastObjCClass();
      if (v6)
      {
        v7 = (void *)v6;
        v8 = (void *)v0[13];
        type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceObject);
        lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(&lazy protocol witness table cache variable for type ARReferenceObject and conformance NSObject, &lazy cache variable for type metadata for ARReferenceObject);
        v9 = v8;
        isa = Set._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v7, sel_setDetectionObjects_, isa);

      }
    }
    swift_bridgeObjectRelease();
  }
  v11 = v0[13];
  v12 = (_QWORD *)swift_task_alloc();
  v0[22] = v12;
  *v12 = v0;
  v12[1] = ARSessionManager.runARKitSession(withSupportedCapabilities:);
  v12[3] = v0[17];
  v12[4] = v11;
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void **)(v0 + 184);
  if (v1)
  {
    v2 = v1;
    SpatialTrackingSession.UnavailableCapabilities.init()();
    *(_QWORD *)(v0 + 24) = v2;
    type metadata accessor for related decl 'e' for ARErrorCode(0);
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
    _BridgedStoredNSError.code.getter();
    if (*(_QWORD *)(v0 + 16) == 103)
    {
      SpatialTrackingSession.UnavailableCapabilities.internalCameraUnauthorized.setter();
      SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
      SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedAnchorCapabilities.setter();
      SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
      SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedSceneUnderstandingCapabilities.setter();
    }
    else
    {
      SpatialTrackingSession.UnavailableCapabilities.internalCameraUnauthorized.setter();
      SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
      SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedAnchorCapabilities.setter();
      SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
      SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedSceneUnderstandingCapabilities.setter();
    }
    v4 = *(void **)(v0 + 136);
    v5 = *(void **)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 56);
    v9 = *(_QWORD *)(v0 + 32);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v9, v6, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 192) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release();
  closure #1 in ARSessionManager.configureViewUsingSession(_:supportedCapabilities:)(v2, v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 32);

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v4, 1, 1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ARSessionManager.runARKitSession(withSupportedCapabilities:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ARSessionManager.stop()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[5] = v0;
  v2 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v3 = type metadata accessor for SpatialTrackingSession.Configuration();
  v1[9] = v3;
  v1[10] = *(_QWORD *)(v3 - 8);
  v1[11] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;

  v0[12] = *(_QWORD *)(v0[5] + 16);
  v0[13] = type metadata accessor for MainActor();
  v0[14] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 96);
  swift_release();
  *(_QWORD *)(v0 + 120) = objc_msgSend(v1, sel_session);
  return swift_task_switch();
}

{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[7] + 104))(v0[8], *MEMORY[0x1E0CD4D00], v0[6]);
  SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)();
  v0[16] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 40);
  swift_release();
  closure #1 in ARSessionManager.configureViewUsingSession(_:supportedCapabilities:)(v2, v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  swift_beginAccess();
  if ((*(_BYTE *)(v1 + 40) & 1) == 0)
    objc_msgSend(*(id *)(v0 + 120), sel_pause);

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ARSessionManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ARSessionManager.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ARKitRunnable.configure(withRFServiceManager:onReferencesChanged:) in conformance ARSessionManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(a2, a3);
}

uint64_t protocol witness for ARKitRunnable.runARKitSession(withSupportedCapabilities:) in conformance ARSessionManager(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for ARKitRunnable.runARKitSession(withSupportedCapabilities:) in conformance ARSessionManager;
  return ARSessionManager.runARKitSession(withSupportedCapabilities:)(a1, a2);
}

uint64_t protocol witness for ARKitRunnable.runARKitSession(withSupportedCapabilities:) in conformance ARSessionManager()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t protocol witness for ARKitRunnable.runARKitSessionWithoutRequesting(withSupportedCapabilities:) in conformance ARSessionManager(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v3 = type metadata accessor for SpatialTrackingSession.Configuration();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  type metadata accessor for MainActor();
  swift_retain();
  v12 = static MainActor.shared.getter();
  v13 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v14 = (char *)swift_allocObject();
  v15 = MEMORY[0x1E0DF06E8];
  *((_QWORD *)v14 + 2) = v12;
  *((_QWORD *)v14 + 3) = v15;
  *((_QWORD *)v14 + 4) = v10;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v14[v13], v6, v3);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tgm5((uint64_t)v9, (uint64_t)&closure #1 in ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:)partial apply, (uint64_t)v14);
  return swift_release();
}

uint64_t protocol witness for ARKitRunnable.stop() in conformance ARSessionManager()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return ARSessionManager.stop()();
}

id protocol witness for _BridgedStoredNSError._nsError.getter in conformance related decl 'e' for ARErrorCode()
{
  id *v0;

  return *v0;
}

uint64_t protocol witness for _BridgedStoredNSError.init(_nsError:) in conformance related decl 'e' for ARErrorCode@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance ARErrorCode@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ARErrorCode(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIAccessibilityTraits()
{
  return UInt64._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance UIAccessibilityTraits(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = MEMORY[0x1DF0909DC](a1, &v6);
  v4 = v6;
  v5 = v7;
  if (v7)
    v4 = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UIAccessibilityTraits(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = static UInt64._conditionallyBridgeFromObjectiveC(_:result:)();
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UIAccessibilityTraits@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static UInt64._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RESyncPacketDeliveryMethodType(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance MTKTextureLoaderOption(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance MTKTextureLoaderOption(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MTKTextureLoaderOption()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MTKTextureLoaderOption()
{
  Swift::Int v0;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance MTKTextureLoaderOption(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance MTKTextureLoaderOption(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance MTKTextureLoaderOption(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance MTKTextureLoaderOption(uint64_t a1, id *a2)
{
  uint64_t result;

  result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance MTKTextureLoaderOption(uint64_t a1, id *a2)
{
  char v3;

  v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance MTKTextureLoaderOption@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = MEMORY[0x1DF090310](v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance related decl 'e' for ARErrorCode()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance related decl 'e' for ARErrorCode()
{
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance related decl 'e' for ARErrorCode()
{
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
  return _BridgedStoredNSError.errorUserInfo.getter();
}

uint64_t protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance related decl 'e' for ARErrorCode(void *a1)
{
  id v2;

  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
  v2 = a1;
  return _BridgedStoredNSError.init(_bridgedNSError:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance related decl 'e' for ARErrorCode()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance related decl 'e' for ARErrorCode()
{
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
  return _BridgedStoredNSError.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance related decl 'e' for ARErrorCode()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance RESyncPacketDeliveryMethodType@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RESyncPacketDeliveryMethodType(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MTKTextureLoaderOption()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t protocol witness for Error._domain.getter in conformance related decl 'e' for ARErrorCode()
{
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
  return Error<>._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance related decl 'e' for ARErrorCode()
{
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
  return Error<>._code.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance related decl 'e' for ARErrorCode()
{
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
  return _BridgedStoredNSError._getEmbeddedNSError()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance related decl 'e' for ARErrorCode()
{
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
  return static _BridgedStoredNSError.== infix(_:_:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ARErrorCode(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIAccessibilityTraits()
{
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UIAccessibilityTraits and conformance UIAccessibilityTraits, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTraits, (uint64_t)&protocol conformance descriptor for UIAccessibilityTraits);
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UIAccessibilityTraits and conformance UIAccessibilityTraits, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTraits, (uint64_t)&protocol conformance descriptor for UIAccessibilityTraits);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MTKTextureLoaderOption@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = MEMORY[0x1DF090310](*a1, a1[1]);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MTKTextureLoaderOption@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MTKTextureLoaderOption()
{
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption, (uint64_t (*)(uint64_t))type metadata accessor for MTKTextureLoaderOption, (uint64_t)&protocol conformance descriptor for MTKTextureLoaderOption);
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption, (uint64_t (*)(uint64_t))type metadata accessor for MTKTextureLoaderOption, (uint64_t)&protocol conformance descriptor for MTKTextureLoaderOption);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UIAccessibilityTraits()
{
  return UInt64.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance UIAccessibilityTraits()
{
  Swift::UInt64 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance UIAccessibilityTraits()
{
  return static Hasher._hash(seed:_:)();
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [(String, CGFloat)]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceImage>>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceObject>>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for (UUID, Entity), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, Entity>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, ModelEntity), &demangling cache variable for type metadata for _DictionaryStorage<UUID, ModelEntity>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for (UUID, __RKFaceMeshEntity), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, __RKFaceMeshEntity>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t result;
  char v14;
  unint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RKARSystem.HitTestScreenPoint, CollisionCastHit?));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (double *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RKARSystem.HitTestScreenPoint, CollisionCastHit?>);
    v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v8 = (uint64_t)v5 + *(int *)(v2 + 48);
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v9, (uint64_t)v5, &demangling cache variable for type metadata for (RKARSystem.HitTestScreenPoint, CollisionCastHit?));
      v11 = *v5;
      v12 = v5[1];
      result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v12);
      if ((v14 & 1) != 0)
        break;
      v15 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v16 = (double *)(v7[6] + 16 * result);
      *v16 = v11;
      v16[1] = v12;
      v17 = v7[7];
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
      result = outlined init with take of vImage_CGImageFormat?(v8, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v15, &demangling cache variable for type metadata for CollisionCastHit?);
      v19 = v7[2];
      v20 = __OFADD__(v19, 1);
      v21 = v19 + 1;
      if (v20)
        goto LABEL_10;
      v7[2] = v21;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tg5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

void specialized ARKitRunner.session(_:didChange:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  _QWORD v14[4];
  uint64_t v15;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  v3 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v14 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (os_unfair_lock_s *)(*(_QWORD *)(v1
                                       + OBJC_IVAR____TtC10RealityKitP33_98DEB876138878DC696D4005FE1B9B4811ARKitRunner_lock)
                           + 16);
  os_unfair_lock_lock(v12);
  v13 = v1 + OBJC_IVAR____TtC10RealityKitP33_98DEB876138878DC696D4005FE1B9B4811ARKitRunner_continuation;
  swift_beginAccess();
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v13, (uint64_t)v7, &demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v7, &demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    if ((a1 | 2) == 2)
    {
      type metadata accessor for related decl 'e' for ARErrorCode(0);
      v15 = 501;
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
      _BridgedStoredNSError.init(_:userInfo:)();
      v15 = v14[1];
      CheckedContinuation.resume(returning:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, 1, 1, v8);
      swift_beginAccess();
      outlined assign with take of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v5, v13);
      swift_endAccess();
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  os_unfair_lock_unlock(v12);
}

void specialized ARKitRunner.session(_:didUpdate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  _QWORD v13[3];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v13 - v5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC10RealityKitP33_98DEB876138878DC696D4005FE1B9B4811ARKitRunner_lock)
                           + 16);
  os_unfair_lock_lock(v11);
  v12 = v0 + OBJC_IVAR____TtC10RealityKitP33_98DEB876138878DC696D4005FE1B9B4811ARKitRunner_continuation;
  swift_beginAccess();
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v12, (uint64_t)v6, &demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v6, &demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    v13[0] = 0;
    CheckedContinuation.resume(returning:)();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v4, 1, 1, v7);
    swift_beginAccess();
    outlined assign with take of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v4, v12);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  os_unfair_lock_unlock(v11);
}

void specialized ARKitRunner.session(_:didFailWithError:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (os_unfair_lock_s *)(*(_QWORD *)(v1
                                       + OBJC_IVAR____TtC10RealityKitP33_98DEB876138878DC696D4005FE1B9B4811ARKitRunner_lock)
                           + 16);
  os_unfair_lock_lock(v13);
  v14 = v1 + OBJC_IVAR____TtC10RealityKitP33_98DEB876138878DC696D4005FE1B9B4811ARKitRunner_continuation;
  swift_beginAccess();
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v14, (uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    v18 = (uint64_t)a1;
    v15 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    type metadata accessor for related decl 'e' for ARErrorCode(0);
    if (swift_dynamicCast())
    {
      v18 = v19;
      v16 = (id)v19;
      CheckedContinuation.resume(returning:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v6, 1, 1, v9);
      swift_beginAccess();
      outlined assign with take of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v6, v14);
      swift_endAccess();

    }
    else
    {
      v19 = 501;
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
      _BridgedStoredNSError.init(_:userInfo:)();
      v19 = v18;
      CheckedContinuation.resume(returning:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v6, 1, 1, v9);
      swift_beginAccess();
      outlined assign with take of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v6, v14);
      swift_endAccess();
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  os_unfair_lock_unlock(v13);
}

uint64_t specialized static ARKitRunner.runSession(_:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_task_switch();
}

uint64_t specialized static ARKitRunner.runSession(_:configuration:)()
{
  uint64_t v0;
  objc_class *v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;

  v1 = (objc_class *)type metadata accessor for ARKitRunner();
  v6 = *(_OWORD *)(v0 + 24);
  v2 = objc_msgSend(objc_allocWithZone(v1), sel_init);
  *(_QWORD *)(v0 + 40) = v2;
  objc_msgSend((id)v6, sel__addObserver_, v2);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v6;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for related decl 'e' for ARErrorCode?);
  *v4 = v0;
  v4[1] = specialized static ARKitRunner.runSession(_:configuration:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 16);
  objc_msgSend(*(id *)(v0 + 24), sel__removeObserver_, v1);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t specialized ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = v2;
  v6 = *(_QWORD *)(v3 + 16);
  v7 = swift_allocObject();
  swift_weakInit();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v7;
  v8[3] = a1;
  v8[4] = a2;
  v9 = (_QWORD *)(v6 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents);
  swift_beginAccess();
  v10 = v9[8];
  v9[8] = partial apply for closure #1 in ARSessionManager.configure(withRFServiceManager:onReferencesChanged:);
  v9[9] = v8;
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v10);
  v11 = swift_allocObject();
  swift_weakInit();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v11;
  v12[3] = a1;
  v12[4] = a2;
  v13 = v9[6];
  v9[6] = partial apply for closure #2 in ARSessionManager.configure(withRFServiceManager:onReferencesChanged:);
  v9[7] = v12;
  swift_retain();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v13);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1DF091B7C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t partial apply for closure #1 in ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SpatialTrackingSession.Configuration() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:)(a1, v5, v6, v7, v8);
}

void type metadata accessor for related decl 'e' for ARErrorCode(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for related decl 'e' for ARErrorCode);
}

uint64_t lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = type metadata accessor for ARReferenceObject(255, a2);
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0DEFCF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

void specialized static ARSessionManager.configureImageTracking(arConfiguration:arReferenceImages:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Class v11;
  uint64_t v12;
  id v13;

  objc_opt_self();
  v4 = swift_dynamicCastObjCClass();
  if (v4)
  {
    v5 = (void *)v4;
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
    lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(&lazy protocol witness table cache variable for type ARReferenceImage and conformance NSObject, &lazy cache variable for type metadata for ARReferenceImage);
    v6 = a1;
    isa = Set._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v5, sel_setDetectionImages_, isa);

    if ((a2 & 0xC000000000000001) != 0)
      v8 = __CocoaSet.count.getter();
    else
      v8 = *(_QWORD *)(a2 + 16);
    objc_msgSend(v5, sel_setMaximumNumberOfTrackedImages_, v8);

  }
  objc_opt_self();
  v9 = swift_dynamicCastObjCClass();
  if (v9)
  {
    v10 = (void *)v9;
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
    lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(&lazy protocol witness table cache variable for type ARReferenceImage and conformance NSObject, &lazy cache variable for type metadata for ARReferenceImage);
    v13 = a1;
    v11 = Set._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v10, sel_setDetectionImages_, v11);

    if ((a2 & 0xC000000000000001) != 0)
      v12 = __CocoaSet.count.getter();
    else
      v12 = *(_QWORD *)(a2 + 16);
    objc_msgSend(v10, sel_setMaximumNumberOfTrackedImages_, v12);

  }
}

uint64_t ObjC metadata update function for ARKitRunner()
{
  return type metadata accessor for ARKitRunner();
}

uint64_t type metadata accessor for ARKitRunner()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ARKitRunner;
  if (!type metadata singleton initialization cache for ARKitRunner)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for ARKitRunner()
{
  unint64_t v0;

  type metadata accessor for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1DF091B88](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for ARSessionManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for ARSessionManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of ARSessionManager.isRunningUserProvidedARSession.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of ARSessionManager.isRunningUserProvidedARSession.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of ARSessionManager.isRunningUserProvidedARSession.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of ARSessionManager.__allocating_init(arView:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of ARSessionManager.getSupportedCapabilities(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of ARSessionManager.configureViewUsingSession(_:supportedCapabilities:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 216) + *(_QWORD *)(*(_QWORD *)v2 + 216));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v8(a1, a2);
}

uint64_t dispatch thunk of ARSessionManager.runARKitSession(withSupportedCapabilities:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 224) + *(_QWORD *)(*(_QWORD *)v2 + 224));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v8(a1, a2);
}

uint64_t dispatch thunk of ARSessionManager.stop()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 232) + *(_QWORD *)(*(_QWORD *)v0 + 232));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for UIInterfaceOrientation);
}

void type metadata accessor for UIAccessibilityCustomSystemRotorType(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for UIAccessibilityCustomSystemRotorType);
}

void type metadata accessor for UIAccessibilityCustomRotorDirection(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for UIAccessibilityCustomRotorDirection);
}

void type metadata accessor for CVMetalTextureCacheRef(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for CVMetalTextureCacheRef);
}

void type metadata accessor for CVBufferRef(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for CVBufferRef);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for CGPoint);
}

void type metadata accessor for CGBitmapInfo(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for CGBitmapInfo);
}

void type metadata accessor for CGColorSpaceRef(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for CGColorSpaceRef);
}

void type metadata accessor for REColorGamut(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for REColorGamut);
}

void type metadata accessor for UIAccessibilityTraits(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for UIAccessibilityTraits);
}

uint64_t initializeBufferWithCopyOfBuffer for UIEdgeInsets(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for UIEdgeInsets(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for UIEdgeInsets(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for UIEdgeInsets);
}

void type metadata accessor for CGColorRef(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for CGColorRef);
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for CGSize);
}

__n128 __swift_memcpy64_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_float4x4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for simd_float4x4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for simd_float4x4);
}

uint64_t base witness table accessor for Equatable in related decl 'e' for ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
}

uint64_t lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1DF091B94](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Error in related decl 'e' for ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
}

uint64_t base witness table accessor for RawRepresentable in UIAccessibilityTraits()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UIAccessibilityTraits and conformance UIAccessibilityTraits, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTraits, (uint64_t)&protocol conformance descriptor for UIAccessibilityTraits);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIAccessibilityTraits()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UIAccessibilityTraits and conformance UIAccessibilityTraits, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTraits, (uint64_t)&protocol conformance descriptor for UIAccessibilityTraits);
}

uint64_t base witness table accessor for Equatable in UIAccessibilityTraits()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UIAccessibilityTraits and conformance UIAccessibilityTraits, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTraits, (uint64_t)&protocol conformance descriptor for UIAccessibilityTraits);
}

uint64_t base witness table accessor for CustomNSError in related decl 'e' for ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
}

uint64_t base witness table accessor for _ObjectiveCBridgeableError in related decl 'e' for ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
}

uint64_t base witness table accessor for Hashable in related decl 'e' for ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : _ErrorCodeProtocol in related decl 'e' for ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type ARErrorCode and conformance ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for ARErrorCode, (uint64_t)&protocol conformance descriptor for ARErrorCode);
}

void type metadata accessor for ARErrorCode(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for ARErrorCode);
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : RawRepresentable in related decl 'e' for ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type ARErrorCode and conformance ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for ARErrorCode, (uint64_t)&protocol conformance descriptor for ARErrorCode);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type ARErrorCode and conformance ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for ARErrorCode, (uint64_t)&protocol conformance descriptor for ARErrorCode);
}

uint64_t associated type witness table accessor for _ErrorCodeProtocol._ErrorType : _BridgedStoredNSError in ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for ARErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for ARErrorCode);
}

uint64_t outlined assign with take of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for SpatialTrackingSession.Configuration();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1D9573790()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

id partial apply for closure #1 in static ARKitRunner.runSession(_:configuration:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static ARKitRunner.runSession(_:configuration:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t type metadata accessor for ARReferenceObject(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for ARKitRunnable.runARKitSession(withSupportedCapabilities:) in conformance ARSessionManager;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tg5Tu))(a1, v4);
}

uint64_t sub_1D95738D8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t objectdestroy_30Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

void type metadata accessor for RESyncPacketDeliveryMethodType(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for RESyncPacketDeliveryMethodType);
}

void type metadata accessor for RESyncChannelId(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for RESyncChannelId);
}

__n128 __swift_memcpy48_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RERay(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RERay(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for RERay(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for RERay);
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for vImage_CGImageFormat(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for vImage_CGImageFormat(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for vImage_CGImageFormat(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for vImage_CGImageFormat);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for os_unfair_lock_s);
}

void type metadata accessor for MTKTextureLoaderOption(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for MTKTextureLoaderOption);
}

uint64_t base witness table accessor for RawRepresentable in MTKTextureLoaderOption()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption, (uint64_t (*)(uint64_t))type metadata accessor for MTKTextureLoaderOption, (uint64_t)&protocol conformance descriptor for MTKTextureLoaderOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MTKTextureLoaderOption()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption, (uint64_t (*)(uint64_t))type metadata accessor for MTKTextureLoaderOption, (uint64_t)&protocol conformance descriptor for MTKTextureLoaderOption);
}

uint64_t base witness table accessor for Equatable in MTKTextureLoaderOption()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption, (uint64_t (*)(uint64_t))type metadata accessor for MTKTextureLoaderOption, (uint64_t)&protocol conformance descriptor for MTKTextureLoaderOption);
}

void type metadata accessor for CGColorRenderingIntent(uint64_t a1)
{
  type metadata accessor for related decl 'e' for ARErrorCode(a1, &lazy cache variable for type metadata for CGColorRenderingIntent);
}

void type metadata accessor for related decl 'e' for ARErrorCode(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t type metadata completion function for GroupActivitiesSynchronizationSession()
{
  return swift_initClassMetadata2();
}

uint64_t closure #1 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t PeerID;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    RESyncParticipantGetAddress();
    v2 = String.init(cString:)();
    v4 = v3;
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 16);
    swift_beginAccess();
    v6 = *(_QWORD *)(v5 + 16);
    if (v6 >> 62)
      goto LABEL_20;
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter())
    {
      v8 = 4;
      while (1)
      {
        v9 = v8 - 4;
        if ((v6 & 0xC000000000000001) == 0)
          break;
        v10 = MEMORY[0x1DF0906F4](v8 - 4, v6);
        v11 = __OFADD__(v9, 1);
        v12 = v8 - 3;
        if (v11)
          goto LABEL_19;
LABEL_10:
        v13 = (_QWORD *)(*(_QWORD *)(v10 + 16)
                       + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_address);
        v14 = *v13 == v2 && v13[1] == v4;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          PeerID = RESyncParticipantGetPeerID();
          swift_release();
          *(_QWORD *)(*(_QWORD *)(v10 + 16)
                    + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_peerID) = PeerID;
          return swift_release();
        }
        swift_release();
        ++v8;
        if (v12 == v7)
          goto LABEL_16;
      }
      v10 = *(_QWORD *)(v6 + 8 * v8);
      swift_retain();
      v11 = __OFADD__(v9, 1);
      v12 = v8 - 3;
      if (!v11)
        goto LABEL_10;
LABEL_19:
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain_n();
    }
LABEL_16:
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease_n();
  }
  return result;
}

uint64_t closure #2 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)()
{
  uint64_t Strong;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD aBlock[6];

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return 0;
  v1 = Strong;
  v2 = swift_allocObject();
  *(_BYTE *)(v2 + 16) = 1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = partial apply for closure #1 in closure #2 in GroupActivitiesSynchronizationSession.init(session:discoveryView:);
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned Bool);
  aBlock[3] = &block_descriptor_27;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  RESyncViewEnumerateObjects();
  swift_release();
  _Block_release(v4);
  swift_beginAccess();
  v5 = *(unsigned __int8 *)(v2 + 16);
  swift_release();
  return v5;
}

uint64_t closure #1 in closure #2 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (RENetGetEntityFromSyncObject() && (REEntityIsNonHiddenAndInHierarchy() & 1) != 0)
    return 1;
  swift_beginAccess();
  result = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t);

  v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a2) = v3(a2);
  swift_release();
  return a2 & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UInt64, @unowned OpaquePointer) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a4) = v7(a2, a3, a4);
  swift_release();
  return a4 & 1;
}

uint64_t closure #3 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v21[2];
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v2 = type metadata accessor for Participant();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for GroupSession.State();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (void **)((char *)v21 - v8);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(void **, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
    if ((*(unsigned int (**)(void **, uint64_t))(v7 + 88))(v9, v6) == *MEMORY[0x1E0CB4110])
    {
      (*(void (**)(void **, uint64_t))(v7 + 96))(v9, v6);
      v11 = *v9;
      if (one-time initialization token for groupActivities != -1)
        swift_once();
      v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.groupActivities);
      v13 = v11;
      v14 = v11;
      v15 = Logger.logObject.getter();
      v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v23 = v2;
        v17 = (uint8_t *)swift_slowAlloc();
        v22 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v17 = 138412290;
        v21[1] = v17 + 4;
        v18 = v11;
        v19 = _swift_stdlib_bridgeErrorToNSError();
        v24 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v20 = v22;
        *v22 = v19;
        v2 = v23;

        _os_log_impl(&dword_1D956D000, v15, v16, "Session invalidated due: %@", v17, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1DF091C54](v20, -1, -1);
        MEMORY[0x1DF091C54](v17, -1, -1);
      }
      else
      {

      }
      swift_retain();
      GroupSession.localParticipant.getter();
      GroupActivitiesSynchronizationDiscoveryView.remove(participant:)((uint64_t)v5);
      swift_release();
      swift_release();

      return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      swift_release();
      return (*(uint64_t (**)(void **, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  return result;
}

uint64_t closure #4 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[7];

  v4 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result;
    swift_bridgeObjectRetain();
    v7 = GroupSession.activeParticipants.getter();
    if (*(_QWORD *)(v7 + 16) <= *(_QWORD *)(v4 + 16) >> 3)
    {
      v10[6] = v4;
      specialized Set._subtract<A>(_:)(v7);
      v9 = swift_bridgeObjectRelease();
      v8 = v4;
    }
    else
    {
      v8 = specialized _NativeSet.subtracting<A>(_:)(v7, v4);
      v9 = swift_bridgeObjectRelease();
    }
    MEMORY[0x1E0C80A78](v9);
    v10[2] = v6;
    v10[3] = a3;
    specialized Sequence.forEach(_:)((void (*)(char *))partial apply for closure #1 in closure #4 in GroupActivitiesSynchronizationSession.init(session:discoveryView:), (uint64_t)v10, v8);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #4 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  _BYTE v13[16];
  uint64_t v14;

  v4 = type metadata accessor for Participant();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 16);
  swift_beginAccess();
  v9 = *(_QWORD *)(v8 + 16);
  v14 = a1;
  swift_bridgeObjectRetain();
  v10 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in Array<A>.first(with:), (uint64_t)v13, v9);
  swift_bridgeObjectRelease();
  result = swift_release();
  if (!v10)
  {
    swift_retain();
    GroupSession.localParticipant.getter();
    v12 = MEMORY[0x1DF08F710](v7, a1);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    GroupActivitiesSynchronizationDiscoveryView.add(participant:isLocal:)(a1, v12 & 1);
    return swift_release();
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  void (*v25)(char *);

  v25 = a1;
  v5 = type metadata accessor for Participant();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v23 - v10;
  v12 = *(_QWORD *)(a3 + 56);
  v23 = a3 + 56;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v24 = (unint64_t)(v13 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v17 = 0;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v6 + 72) * i, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    v25(v8);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return swift_release();
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if (v15)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v24)
      return swift_release();
    v21 = *(_QWORD *)(v23 + 8 * v17);
    if (!v21)
      break;
LABEL_17:
    v15 = (v21 - 1) & v21;
  }
  v22 = v17 + 1;
  if (v17 + 1 >= v24)
    return swift_release();
  v21 = *(_QWORD *)(v23 + 8 * v22);
  if (v21)
    goto LABEL_16;
  v22 = v17 + 2;
  if (v17 + 2 >= v24)
    return swift_release();
  v21 = *(_QWORD *)(v23 + 8 * v22);
  if (v21)
    goto LABEL_16;
  v22 = v17 + 3;
  if (v17 + 3 >= v24)
    return swift_release();
  v21 = *(_QWORD *)(v23 + 8 * v22);
  if (v21)
    goto LABEL_16;
  v22 = v17 + 4;
  if (v17 + 4 >= v24)
    return swift_release();
  v21 = *(_QWORD *)(v23 + 8 * v22);
  if (v21)
  {
LABEL_16:
    v17 = v22;
    goto LABEL_17;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v24)
      return swift_release();
    v21 = *(_QWORD *)(v23 + 8 * v17);
    ++v22;
    if (v21)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t GroupActivitiesSynchronizationSession.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  v1 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  if (MEMORY[0x1DF0912DC](v1))
    RESharedClockServiceSetSession();
  RESyncNetSessionRemoveObserver();
  RESyncRelease();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  result = REServiceLocatorGetNetworkSyncManager();
  if (result)
  {
    RESyncServiceStopSyncWithSession();
    RESyncRelease();
    MEMORY[0x1DF090D54](*(_QWORD *)(v0 + 16));
    RERelease();
    swift_release();
    swift_bridgeObjectRelease();
    return v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t GroupActivitiesSynchronizationSession.__deallocating_deinit()
{
  GroupActivitiesSynchronizationSession.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupActivitiesSynchronizationSession);
}

uint64_t specialized GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  void *v24;
  uint64_t (*v25)();
  id v26;
  void *v27;
  uint64_t result;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t aBlock;
  unint64_t v62;
  void *v63;
  void *v64;
  uint64_t (*v65)();
  _QWORD *v66;

  v3 = v2;
  v54 = a1;
  v5 = *v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  MEMORY[0x1E0C80A78](v6);
  v55 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v5 + 80);
  v58 = *(_QWORD *)(v5 + 88);
  v59 = v8;
  type metadata accessor for GroupSession.State();
  v9 = type metadata accessor for Published.Publisher();
  v52 = *(_QWORD *)(v9 - 8);
  v53 = v9;
  MEMORY[0x1E0C80A78](v9);
  v51 = (char *)&v51 - v10;
  v11 = type metadata accessor for __REECSManagerRef();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0DEE9D8];
  v3[5] = a2;
  v3[6] = v19;
  v60 = a2;
  swift_retain();
  v3[2] = REEntityCreate();
  aBlock = 0x746F6F52636E7953;
  v62 = 0xE90000000000002DLL;
  UUID.init()();
  v20 = UUID.uuidString.getter();
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  REEntitySetName();
  swift_release();
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.sceneService.getter();
  swift_release();
  v24 = v64;
  v25 = v65;
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v64);
  (*((void (**)(void *, uint64_t (*)()))v25 + 4))(v24, v25);
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  REECSManagerGetScene();
  RESceneAddEntity();
  RESyncNetSessionConfigurationCreate();
  RESyncNetSessionConfigurationSetIsLocal();
  v26 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v27 = (void *)MEMORY[0x1DF090310](0xD000000000000034, 0x80000001D95DC870);
  objc_msgSend(v26, sel_BOOLForKey_, v27);

  result = RESyncNetSessionConfigurationSetUnreliableSyncEnabled();
  if (!*(_QWORD *)(*(_QWORD *)(v60 + 24) + 16))
  {
    __break(1u);
    goto LABEL_8;
  }
  RESyncNetSessionConfigurationSetDiscoveryView();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  result = REServiceLocatorGetNetworkSyncManager();
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v3[3] = RESyncServiceCreateSessionAndStartSync();
  RESyncRelease();
  v3[4] = RESyncNetSessionObserverCreate();
  v29 = swift_allocObject();
  swift_weakInit();
  v30 = (_QWORD *)swift_allocObject();
  v32 = v58;
  v31 = v59;
  v30[2] = v59;
  v30[3] = v32;
  v30[4] = v29;
  v65 = partial apply for closure #1 in GroupActivitiesSynchronizationSession.init(session:discoveryView:);
  v66 = v30;
  v33 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v62 = 1107296256;
  v63 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer) -> ();
  v64 = &block_descriptor;
  v34 = _Block_copy(&aBlock);
  swift_release();
  RESyncNetSessionObserverOnParticipantJoin();
  _Block_release(v34);
  RESyncNetSessionAddObserver();
  result = RESyncServiceGetSyncSession();
  if (!result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v35 = swift_allocObject();
  swift_weakInit();
  v36 = (_QWORD *)swift_allocObject();
  v36[2] = v31;
  v36[3] = v32;
  v36[4] = v35;
  v65 = partial apply for closure #2 in GroupActivitiesSynchronizationSession.init(session:discoveryView:);
  v66 = v36;
  aBlock = v33;
  v62 = 1107296256;
  v63 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UInt64, @unowned OpaquePointer) -> (@unowned Bool);
  v64 = &block_descriptor_10;
  v37 = _Block_copy(&aBlock);
  swift_release();
  RESyncSessionSetViewFilterCB();
  _Block_release(v37);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_1D95E2170;
  v39 = v51;
  v40 = v54;
  GroupSession.$state.getter();
  v41 = swift_allocObject();
  swift_weakInit();
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = v41;
  *(_QWORD *)(v42 + 24) = v40;
  swift_retain();
  v43 = v53;
  MEMORY[0x1DF091B94](MEMORY[0x1E0C96190], v53);
  v44 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v43);
  *(_QWORD *)(v38 + 32) = v44;
  v45 = v55;
  GroupSession.$activeParticipants.getter();
  v46 = swift_allocObject();
  swift_weakInit();
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = v46;
  *(_QWORD *)(v47 + 24) = v40;
  lazy protocol witness table accessor for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher();
  swift_retain();
  v48 = v57;
  v49 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v45, v48);
  *(_QWORD *)(v38 + 40) = v49;
  aBlock = v38;
  specialized Array._endMutation()();
  v3[6] = aBlock;
  swift_bridgeObjectRelease();
  static __ServiceLocator.shared.getter();
  v50 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  if (MEMORY[0x1DF0912DC](v50))
    RESharedClockServiceSetSession();
  return (uint64_t)v3;
}

uint64_t specialized GroupActivitiesSynchronizationSession.__allocating_init(session:discoveryView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for GroupActivitiesSynchronizationSession(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a4);
  swift_allocObject();
  return specialized GroupActivitiesSynchronizationSession.init(session:discoveryView:)(a1, a2);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1D9575078()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1D957509C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)()
{
  return closure #1 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t partial apply for closure #2 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)()
{
  return closure #2 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)();
}

uint64_t partial apply for closure #3 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t a1)
{
  return closure #3 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(a1);
}

uint64_t partial apply for closure #4 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #4 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher;
  if (!lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0C96190], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #4 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #4 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in Array<A>.first(with:)(uint64_t a1)
{
  return closure #1 in Array<A>.first(with:)(a1) & 1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1D95751A0()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_13Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1DF091B34](a1, v6, a5);
}

unint64_t ARView.PostProcessContext.init(_:_:_:_:_:_:_:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, __n128 *a6@<X8>, __n128 a7@<Q0>, __n128 a8@<Q1>, __n128 a9@<Q2>, __n128 a10@<Q3>, double a11@<D4>)
{
  a6->n128_u64[0] = result;
  a6->n128_u64[1] = a2;
  a6[1].n128_u64[0] = a3;
  a6[1].n128_u64[1] = a4;
  a6[2].n128_u64[0] = a5;
  a6[3] = a7;
  a6[4] = a8;
  a6[5] = a9;
  a6[6] = a10;
  a6[7].n128_f64[0] = a11;
  return result;
}

uint64_t ARView.PostProcessContext.device.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ARView.PostProcessContext.device.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*ARView.PostProcessContext.device.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t ARView.PostProcessContext.commandBuffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ARView.PostProcessContext.commandBuffer.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*ARView.PostProcessContext.commandBuffer.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t ARView.PostProcessContext.sourceColorTexture.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ARView.PostProcessContext.sourceColorTexture.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*ARView.PostProcessContext.sourceColorTexture.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t ARView.PostProcessContext.sourceDepthTexture.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ARView.PostProcessContext.sourceDepthTexture.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*ARView.PostProcessContext.sourceDepthTexture.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t ARView.PostProcessContext.targetColorTexture.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ARView.PostProcessContext.targetColorTexture.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*ARView.PostProcessContext.targetColorTexture.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

__n128 ARView.PostProcessContext.projection.getter()
{
  __n128 *v0;

  return v0[3];
}

void ARView.PostProcessContext.projection.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  __n128 *v4;

  v4[3] = a1;
  v4[4] = a2;
  v4[5] = a3;
  v4[6] = a4;
}

uint64_t (*ARView.PostProcessContext.projection.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

double ARView.PostProcessContext.time.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 112);
}

void ARView.PostProcessContext.time.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 112) = a1;
}

uint64_t (*ARView.PostProcessContext.time.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t key path getter for ARView.RenderCallbacks.prepareWithDevice : ARView.RenderCallbacks@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed MTLDevice) -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v3);
}

uint64_t key path setter for ARView.RenderCallbacks.prepareWithDevice : ARView.RenderCallbacks(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed MTLDevice) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v3);
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v7);
  *a2 = (uint64_t)v6;
  a2[1] = v5;
  return result;
}

uint64_t ARView.RenderCallbacks.prepareWithDevice.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(*v0);
  return v1;
}

uint64_t ARView.RenderCallbacks.prepareWithDevice.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(*v2);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ARView.RenderCallbacks.prepareWithDevice.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t key path getter for ARView.RenderCallbacks.postProcess : ARView.RenderCallbacks@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = thunk for @escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ()partial apply;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v3);
}

uint64_t key path setter for ARView.RenderCallbacks.postProcess : ARView.RenderCallbacks(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = thunk for @escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ()partial apply;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v3);
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v7);
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

uint64_t ARView.RenderCallbacks.postProcess.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v1);
  return v1;
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t ARView.RenderCallbacks.postProcess.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(*(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ARView.RenderCallbacks.postProcess.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

double ARView.RenderCallbacks.init()@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t ARView.renderCallbacks.getter@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  __int128 v12;
  _OWORD v13[2];
  _QWORD v14[4];

  v3 = type metadata accessor for __SceneRef();
  v4 = *(_QWORD *)(v3 - 8);
  result = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    dispatch thunk of Scene.__coreScene.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v8 = (uint64_t (*)())(id)RESceneGetPrepareWithDeviceRenderCallback();
    if (v8)
    {
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = v8;
      v8 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned MTLDevice) -> ();
    }
    else
    {
      v9 = 0;
    }
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(0);
    if ((id)RESceneGetPostProcessRenderCallback())
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v13, 0, sizeof(v13));
    }
    outlined init with take of Any?((uint64_t)v13, (uint64_t)v14);
    if (v14[3])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
      if (swift_dynamicCast())
      {
        v10 = swift_allocObject();
        *(_OWORD *)(v10 + 16) = v12;
        v11 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> (@out ());
LABEL_13:
        result = outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(0);
        *a1 = v8;
        a1[1] = (uint64_t (*)())v9;
        a1[2] = v11;
        a1[3] = (uint64_t (*)())v10;
        return result;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v14);
    }
    v11 = 0;
    v10 = 0;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t key path setter for ARView.renderCallbacks : ARView(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[4];

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v5[0] = *a1;
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v5[0]);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v2);
  return ARView.renderCallbacks.setter(v5);
}

uint64_t ARView.renderCallbacks.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t active;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t aBlock;
  uint64_t v26;
  void *v27;
  void *v28;
  void (*v29)(uint64_t);
  _QWORD *v30;
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t v33;

  v2 = v1;
  v4 = type metadata accessor for __SceneRef();
  v5 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v11 = *a1;
  v10 = a1[1];
  v13 = a1[2];
  v12 = a1[3];
  swift_retain();
  dispatch thunk of Scene.__coreScene.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v14 = MEMORY[0x1E0C809B0];
  v15 = (_QWORD *)&unk_1D95E2000;
  if (!v13)
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ((_:))?);
    v31 = 0;
    v32 = 0;
    __swift_project_boxed_opaque_existential_1(&v31, v33);
    _bridgeAnythingToObjectiveC<A>(_:)();
    RESceneSetPostProcessRenderCallback();
    swift_unknownObjectRelease();
    REScenePostProcessRenderCallbackClearCameraViewHandles();
    if (v11)
    {
LABEL_14:
      swift_retain();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v11);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v13);
      v29 = (void (*)(uint64_t))v11;
      v30 = (_QWORD *)v10;
      aBlock = v14;
      v26 = v15[43];
      v27 = thunk for @escaping @callee_guaranteed (@guaranteed MTLDevice) -> ();
      v28 = &block_descriptor_0;
      v22 = _Block_copy(&aBlock);
      swift_release();
      goto LABEL_15;
    }
LABEL_8:
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(0);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v13);
    v22 = 0;
LABEL_15:
    RESceneSetPrepareWithDeviceRenderCallback();
    _Block_release(v22);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
  }
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v13;
  *(_QWORD *)(v16 + 24) = v12;
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ((_:))?);
  v31 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> (@out ());
  v32 = v16;
  __swift_project_boxed_opaque_existential_1(&v31, v33);
  swift_retain();
  _bridgeAnythingToObjectiveC<A>(_:)();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v11;
  v17[3] = v10;
  v17[4] = v13;
  v17[5] = v12;
  v29 = partial apply for closure #1 in ARView.renderCallbacks.setter;
  v30 = v17;
  aBlock = v14;
  v26 = 1107296256;
  v27 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
  v28 = &block_descriptor_12;
  v18 = _Block_copy(&aBlock);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v11);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v13);
  swift_release();
  RESceneSetPostProcessRenderCallback();
  _Block_release(v18);
  result = swift_unknownObjectRelease();
  if (!*(_QWORD *)(v2 + v9))
    goto LABEL_19;
  swift_retain();
  active = dispatch thunk of Scene.internalActiveCamera.getter();
  swift_release();
  result = swift_release();
  v20 = *(_QWORD *)(v2 + v9);
  v14 = MEMORY[0x1E0C809B0];
  if (active)
  {
    if (v20)
    {
      swift_retain();
      v21 = dispatch thunk of Scene.internalActiveCamera.getter();
      goto LABEL_11;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v20)
  {
    swift_retain();
    v21 = dispatch thunk of Scene.defaultCamera.getter();
LABEL_11:
    v23 = v21;
    v15 = &unk_1D95E2000;
    swift_release();
    if (!v23)
    {
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v11);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v13);
      static os_log_type_t.error.getter();
      type metadata accessor for OS_os_log();
      v24 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:type:_:)();

      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
    }
    swift_retain();
    Entity.coreEntity.getter();
    swift_release();
    RECameraViewDescriptorsComponentGetComponentType();
    result = REEntityGetComponentByClass();
    if (result)
    {
      RECameraViewDescriptorsComponentCameraViewDescriptorHandleByIndex();
      REScenePostProcessRenderCallbackAddCameraViewHandle();
      swift_release();
      if (v11)
        goto LABEL_14;
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

void closure #1 in ARView.renderCallbacks.setter(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *))
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[6];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  if (a4)
  {
    v5 = (id)RERenderCallbacksPostProcessGetDevice();
    v6 = (id)RERenderCallbacksPostProcessGetCommandBuffer();
    v7 = (id)RERenderCallbacksPostProcessGetSourceColorTexture();
    v8 = (id)RERenderCallbacksPostProcessGetSourceDepthTexture();
    v9 = (id)RERenderCallbacksPostProcessGetTargetColorTexture();
    RERenderCallbacksPostProcessGetProjection();
    v17 = v11;
    v18 = v10;
    v15 = v13;
    v16 = v12;
    RERenderCallbacksPostProcessGetSimulationTime();
    v19[0] = v5;
    v19[1] = v6;
    v19[2] = v7;
    v19[3] = v8;
    v19[4] = v9;
    v20 = v18;
    v21 = v17;
    v22 = v16;
    v23 = v15;
    v24 = v14;
    a4(v19);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed MTLDevice) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

void (*ARView.renderCallbacks.modify(uint64_t (***a1)()))(uint64_t **a1, char a2)
{
  uint64_t (*v1)();
  uint64_t (**v3)();

  v3 = (uint64_t (**)())malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  ARView.renderCallbacks.getter(v3);
  return ARView.renderCallbacks.modify;
}

void ARView.renderCallbacks.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[4];

  v3 = *a1;
  v4 = **a1;
  v5 = v3[1];
  v7 = v3[2];
  v6 = v3[3];
  v9[0] = v4;
  v9[1] = v5;
  v9[2] = v7;
  v9[3] = v6;
  if ((a2 & 1) != 0)
  {
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v4);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v7);
    ARView.renderCallbacks.setter(v9);
    v8 = v3[2];
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(*v3);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v8);
  }
  else
  {
    ARView.renderCallbacks.setter(v9);
  }
  free(v3);
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D9576008()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> (@out ())()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1D957604C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned MTLDevice) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_1D9576098()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ARView.renderCallbacks.setter(uint64_t a1)
{
  uint64_t v1;

  closure #1 in ARView.renderCallbacks.setter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD *))(v1 + 32));
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

double sub_1D957612C@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];

  ARView.renderCallbacks.getter((uint64_t (**)())v4);
  result = *(double *)v4;
  v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t destroy for ARView.PostProcessContext()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for ARView.PostProcessContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ARView.PostProcessContext(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

__n128 __swift_memcpy120_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ARView.PostProcessContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for ARView.PostProcessContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.PostProcessContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.PostProcessContext()
{
  return &type metadata for ARView.PostProcessContext;
}

_QWORD *destroy for ARView.RenderCallbacks(_QWORD *result)
{
  _QWORD *v1;

  v1 = result;
  if (*result)
    result = (_QWORD *)swift_release();
  if (v1[2])
    return (_QWORD *)swift_release();
  return result;
}

_QWORD *initializeWithCopy for ARView.RenderCallbacks(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = a2[2];
  if (v5)
  {
    v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  return a1;
}

_QWORD *assignWithCopy for ARView.RenderCallbacks(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (!a1[2])
  {
    if (v7)
    {
      v9 = a2[3];
      a1[2] = v7;
      a1[3] = v9;
      swift_retain();
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for ARView.RenderCallbacks(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (!a1[2])
  {
    if (v7)
    {
      v9 = a2[3];
      a1[2] = v7;
      a1[3] = v9;
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ARView.RenderCallbacks(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.RenderCallbacks(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.RenderCallbacks()
{
  return &type metadata for ARView.RenderCallbacks;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed MTLDevice) -> (@out ())(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed MTLDevice) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t Entity.ConfigurationCatalog.init(from:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for URL();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Entity.ConfigurationCatalog.init(from:)()
{
  uint64_t *v0;
  _QWORD *v1;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[5] + 16))(v0[6], v0[3], v0[4]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[7] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = Entity.ConfigurationCatalog.init(from:);
  return Entity.ConfigurationCatalog.init(fromURL:)(v0[2], v0[6]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Entity.ConfigurationCatalog.init(fromURL:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  v2[4] = swift_task_alloc();
  v2[5] = swift_task_alloc();
  v3 = type metadata accessor for Entity.ConfigurationCatalog();
  v2[6] = v3;
  v2[7] = *(_QWORD *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[10] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[11] = v4;
  v2[12] = *(_QWORD *)(v4 - 8);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Entity.ConfigurationCatalog.init(fromURL:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t Options;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  static Entity.ConfigurationCatalog.resolveRealityFileURL(_:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 88);
    v6 = *(_QWORD *)(v0 + 24);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(*(_QWORD *)(v0 + 80), &demangling cache variable for type metadata for URL?);
    type metadata accessor for ImportSession();
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
    v7(v4, v6, v5);
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    type metadata accessor for Entity();
    v8 = ImportSession.__allocating_init<A>(from:serviceLocator:pipelineVersion:threading:entityType:)();
    *(_QWORD *)(v0 + 128) = v8;
    if (v8)
    {
      v16 = *(_QWORD *)(v0 + 32);
      ImportSession.core.getter();
      Options = type metadata accessor for Entity.ConfigurationCatalog.LoadOptions();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Options - 8) + 56))(v16, 1, 1, Options);
      swift_retain();
      v18 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 152) = v18;
      *v18 = v0;
      v18[1] = Entity.ConfigurationCatalog.init(fromURL:);
      return Entity.ConfigurationCatalog.init(importSession:importSessionSwiftObject:options:)();
    }
    else
    {
      v19 = *(_QWORD *)(v0 + 88);
      v20 = *(_QWORD *)(v0 + 96);
      v21 = *(_QWORD *)(v0 + 24);
      v22 = type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
      lazy protocol witness table accessor for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError();
      swift_allocError();
      v24 = v23;
      v7(v23, v21, v19);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x1E0CD4478], v22);
      swift_willThrow();
      (*(void (**)(_QWORD, _QWORD))(v20 + 8))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 88));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 120);
    v10 = *(_QWORD *)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 88);
    v12 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 96) + 32))(v9, *(_QWORD *)(v0 + 80), v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v10, v9, v11);
    v13 = type metadata accessor for Entity.ConfigurationCatalog.LoadOptions();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v14;
    *v14 = v0;
    v14[1] = Entity.ConfigurationCatalog.init(fromURL:);
    return Entity.ConfigurationCatalog.init(realityFileUrl:options:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(_QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8);
  v1(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 88));
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 16);
  v1(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 88));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v5, v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release();
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 16);
  (*(void (**)(_QWORD, _QWORD))(v1 + 8))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 88));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v5, v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void (*v1)(_QWORD, _QWORD);

  v1 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8);
  v1(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 88));
  v1(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 88));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release();
  (*(void (**)(_QWORD, _QWORD))(v1 + 8))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 88));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError;
  if (!lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError)
  {
    v1 = type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0CD4488], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError);
  }
  return result;
}

uint64_t Entity.ConfigurationCatalog.init(from:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  v3[5] = swift_task_alloc();
  v3[6] = swift_task_alloc();
  v4 = type metadata accessor for Entity.ConfigurationCatalog();
  v3[7] = v4;
  v3[8] = *(_QWORD *)(v4 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v3[11] = swift_task_alloc();
  v5 = type metadata accessor for URL();
  v3[12] = v5;
  v3[13] = *(_QWORD *)(v5 - 8);
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Entity.ConfigurationCatalog.init(from:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  static Entity.ConfigurationCatalog.resolveRealityFileURL(_:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 120);
    v5 = *(_QWORD *)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 24);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(*(_QWORD *)(v0 + 88), &demangling cache variable for type metadata for URL?);
    type metadata accessor for ImportSession();
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
    v7(v4, v6, v5);
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    type metadata accessor for Entity();
    v8 = ImportSession.__allocating_init<A>(from:serviceLocator:pipelineVersion:threading:entityType:)();
    *(_QWORD *)(v0 + 136) = v8;
    v9 = *(_QWORD *)(v0 + 32);
    if (v8)
    {
      v17 = *(_QWORD *)(v0 + 40);
      ImportSession.core.getter();
      outlined init with copy of Entity.ConfigurationCatalog.LoadOptions?(v9, v17);
      swift_retain();
      v18 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 160) = v18;
      *v18 = v0;
      v18[1] = Entity.ConfigurationCatalog.init(from:options:);
      return Entity.ConfigurationCatalog.init(importSession:importSessionSwiftObject:options:)();
    }
    else
    {
      v19 = *(_QWORD *)(v0 + 96);
      v20 = *(_QWORD *)(v0 + 104);
      v21 = *(_QWORD *)(v0 + 24);
      v22 = type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
      lazy protocol witness table accessor for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError();
      swift_allocError();
      v24 = v23;
      v7(v23, v21, v19);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x1E0CD4478], v22);
      swift_willThrow();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v9, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
      (*(void (**)(_QWORD, _QWORD))(v20 + 8))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 96));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 112);
    v12 = *(_QWORD *)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 48);
    v14 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 104) + 32))(v10, *(_QWORD *)(v0 + 88), v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v11, v10, v12);
    outlined init with copy of Entity.ConfigurationCatalog.LoadOptions?(v14, v13);
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v15;
    *v15 = v0;
    v15[1] = Entity.ConfigurationCatalog.init(from:options:);
    return Entity.ConfigurationCatalog.init(realityFileUrl:options:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 24);
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(*(_QWORD *)(v0 + 32), &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v4(v3, v1);
  v5 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 16);
  v4(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 96));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v8, v5, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 32);
  swift_release();
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v2, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 16);
  (*(void (**)(_QWORD, _QWORD))(v1 + 8))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 96));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v6, v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 24);
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(*(_QWORD *)(v0 + 32), &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v4(v3, v1);
  v4(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 96));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 32);
  swift_release();
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v2, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  (*(void (**)(_QWORD, _QWORD))(v1 + 8))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 96));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t outlined init with copy of Entity.ConfigurationCatalog.LoadOptions?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void one-time initialization function for translationBeginWorldThresholdSq()
{
  static EntityTranslationGestureRecognizer.Constants.translationBeginWorldThresholdSq = 953267991;
}

void one-time initialization function for translationBeginScreenThresholdSq()
{
  static EntityTranslationGestureRecognizer.Constants.translationBeginScreenThresholdSq = 1120403456;
}

uint64_t key path setter for EntityTranslationGestureRecognizer.entity : EntityTranslationGestureRecognizer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = swift_retain();
  EntityTranslationGestureRecognizer.entity.willset(v5);
  v6 = (_QWORD *)(v4 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity);
  swift_beginAccess();
  *v6 = v2;
  v6[1] = v3;
  return swift_release();
}

id EntityTranslationGestureRecognizer.entity.willset(uint64_t a1)
{
  char *v1;
  char *v2;
  id result;
  char *v5;
  char v6;

  v2 = v1;
  result = objc_msgSend(v2, sel_isEnabled);
  if ((_DWORD)result)
  {
    v5 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity];
    result = (id)swift_beginAccess();
    if (*(_QWORD *)v5)
    {
      if (a1)
      {
        type metadata accessor for Entity();
        lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4648], MEMORY[0x1E0CD4660]);
        swift_retain_n();
        v6 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        result = (id)swift_release();
        if ((v6 & 1) != 0)
          return result;
      }
    }
    else if (!a1)
    {
      return result;
    }
    return objc_msgSend(v2, sel_setState_, 5);
  }
  return result;
}

uint64_t EntityTranslationGestureRecognizer.entity.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t EntityTranslationGestureRecognizer.entity.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;

  EntityTranslationGestureRecognizer.entity.willset(a1);
  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_release();
}

void (*EntityTranslationGestureRecognizer.entity.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  _OWORD *v5;

  v3 = (char *)malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity;
  *((_QWORD *)v3 + 5) = v1;
  *((_QWORD *)v3 + 6) = v4;
  v5 = (_OWORD *)(v1 + v4);
  swift_beginAccess();
  *(_OWORD *)(v3 + 24) = *v5;
  swift_retain();
  return EntityTranslationGestureRecognizer.entity.modify;
}

void EntityTranslationGestureRecognizer.entity.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48));
  if ((a2 & 1) != 0)
  {
    v6 = swift_retain();
    EntityTranslationGestureRecognizer.entity.willset(v6);
    *v5 = v3;
    v5[1] = v4;
    swift_release();
  }
  else
  {
    EntityTranslationGestureRecognizer.entity.willset(v3);
    *v5 = v3;
    v5[1] = v4;
  }
  swift_release();
  free(v2);
}

void EntityTranslationGestureRecognizer.touchesBegan(_:with:)(uint64_t a1, void *a2)
{
  void *v2;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char *v29;
  double *v30;
  double *v31;
  float32x4_t v32[5];
  _OWORD v33[2];
  __int128 v34;
  float32x4_t v35;
  char v36;

  v4 = v2;
  v5 = a2;
  v6 = swift_bridgeObjectRetain();
  v7 = specialized Set._Variant.filter(_:)(v6, v4, v5);

  v8 = &v4[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation];
  v9 = v4[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation + 16];
  v10 = (uint64_t)objc_msgSend(v4, sel_numberOfTouches);
  if (v9 != 1)
  {
    if ((v7 & 0xC000000000000001) != 0)
      v21 = __CocoaSet.count.getter();
    else
      v21 = *(_QWORD *)(v7 + 16);
    swift_release();
    if (v21 >= 1)
    {
      EntityTranslationGestureRecognizer.touchCentroidChanged()();
      if (v4[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_hasBegun] != 1)
        return;
      v22 = v4;
      v23 = 2;
      goto LABEL_16;
    }
    if (v10 > 0)
      return;
LABEL_15:
    v22 = v4;
    v23 = 5;
LABEL_16:
    objc_msgSend(v22, sel_setState_, v23);
    return;
  }
  swift_release();
  if (v10 < 1)
    goto LABEL_15;
  v11 = EntityTranslationGestureRecognizer.calcTouchHeight()();
  v12 = &v4[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight];
  *(_DWORD *)v12 = v11;
  v12[4] = BYTE4(v11) & 1;
  v13 = objc_msgSend(v4, sel_view);
  objc_msgSend(v4, sel_locationInView_, v13);
  v15 = v14;
  v17 = v16;

  v18 = objc_msgSend(v4, sel_view);
  if (!v18)
  {
LABEL_7:
    objc_msgSend(v4, sel_setState_, 5);
    return;
  }
  v19 = v18;
  type metadata accessor for ARView();
  if (!swift_dynamicCastClass()
    || (v20 = *(unsigned int *)v12,
        LOBYTE(v33[0]) = v12[4],
        specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(v20 | ((unint64_t)LOBYTE(v33[0]) << 32), &OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity, v32), outlined init with take of simd_float4x4?((uint64_t)v32, (uint64_t)v33), (v36 & 1) != 0))
  {

    goto LABEL_7;
  }
  v24 = ARView.unproject(_:ontoPlane:relativeToCamera:)(0, v15, v17, *(double *)v33, (float32x4_t)v33[1], *(double *)&v34, v35);
  v26 = v25;
  v28 = v27;

  if ((v28 & 1) != 0)
    goto LABEL_7;
  *(_QWORD *)v8 = v24;
  *((_QWORD *)v8 + 1) = v26;
  v8[16] = 0;
  v29 = &v4[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation];
  *(_QWORD *)v29 = v24;
  *((_QWORD *)v29 + 1) = v26;
  v29[16] = 0;
  v30 = (double *)&v4[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingScreenLocation];
  *v30 = v15;
  v30[1] = v17;
  *((_BYTE *)v30 + 16) = 0;
  v31 = (double *)&v4[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation];
  *v31 = v15;
  v31[1] = v17;
  *((_BYTE *)v31 + 16) = 0;
}

unint64_t EntityTranslationGestureRecognizer.calcTouchHeight()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;
  void *v15;
  unint64_t result;
  void *v17;
  id v18;
  uint64_t v19;
  unsigned __int8 v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25[5];
  char v26[16];
  float32x4_t v27;
  float32x4_t v28;
  char v29;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CollisionCastHit();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(v0, sel_view);
  objc_msgSend(v1, sel_locationInView_, v9);
  v11 = v10;
  v13 = v12;

  v14 = objc_msgSend(v1, sel_view);
  if (!v14)
    goto LABEL_8;
  v15 = v14;
  type metadata accessor for ARView();
  result = swift_dynamicCastClass();
  if (!result)
  {

LABEL_8:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_9;
  }
  v17 = *(void **)(result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v17)
  {
    v18 = v17;
    RKARSystem.cachedGestureHitTest(_:)((uint64_t)v4, v11, v13);

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
      v26[0] = 1;
      specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(0x100000000, &OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity, v25);
      outlined init with take of simd_float4x4?((uint64_t)v25, (uint64_t)v26);
      if (v29 != 1)
      {
        v24 = v27;
        v23 = v28;
        CollisionCastHit.position.getter();
        v21.i32[3] = 1.0;
        v22 = (int8x16_t)vmulq_f32(v24, vsubq_f32(v21, v23));
        *(float32x2_t *)v22.i8 = vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
        *(float32x2_t *)v22.i8 = vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1));
        v24 = (float32x4_t)v22;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        v20 = 0;
        v19 = v24.u32[0];
        goto LABEL_11;
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_10:
      v19 = 0;
      v20 = 1;
LABEL_11:
      v26[0] = v20;
      return v19 | ((unint64_t)v20 << 32);
    }
LABEL_9:
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v4, &demangling cache variable for type metadata for CollisionCastHit?);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void EntityTranslationGestureRecognizer.touchCentroidChanged()()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  unsigned int *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  __int128 v22;
  char *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  id v31[2];
  float32x4_t v32[5];
  _OWORD v33[2];
  __int128 v34;
  float32x4_t v35;
  char v36;

  v1 = v0;
  v2 = EntityTranslationGestureRecognizer.calcTouchHeight()();
  v3 = (unsigned int *)((char *)v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight);
  *v3 = v2;
  *((_BYTE *)v3 + 4) = BYTE4(v2) & 1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))(0);
  if ((v7 & 1) == 0)
  {
    v8 = v5;
    v9 = v6;
    v10 = objc_msgSend(v0, sel_view);
    objc_msgSend(v1, sel_locationInView_, v10);
    v12 = v11;
    v14 = v13;

    v15 = objc_msgSend(v1, sel_view);
    if (v15)
    {
      v30 = v15;
      type metadata accessor for ARView();
      if (swift_dynamicCastClass())
      {
        v16 = *v3;
        LOBYTE(v33[0]) = *((_BYTE *)v3 + 4);
        specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(v16 | ((unint64_t)LOBYTE(v33[0]) << 32), &OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity, v32);
        outlined init with take of simd_float4x4?((uint64_t)v32, (uint64_t)v33);
        if ((v36 & 1) != 0)
        {

        }
        else
        {
          v17 = ARView.unproject(_:ontoPlane:relativeToCamera:)(0, v12, v14, *(double *)v33, (float32x4_t)v33[1], *(double *)&v34, v35);
          v19 = v18;
          v21 = v20;

          if ((v21 & 1) == 0)
          {
            *(_QWORD *)&v22 = v8;
            *((_QWORD *)&v22 + 1) = v9;
            *(_OWORD *)v31 = v22;
            v23 = (char *)v1 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation;
            *(_QWORD *)v23 = v17;
            *((_QWORD *)v23 + 1) = v19;
            v23[16] = 0;
            v24 = objc_msgSend(v1, sel_view);
            objc_msgSend(v1, sel_locationInView_, v24);
            v26 = v25;
            v28 = v27;

            v29 = (char *)v1 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation;
            *(_QWORD *)v29 = v26;
            *((_QWORD *)v29 + 1) = v28;
            v29[16] = 0;
            (*(void (**)(_QWORD, __n128))((*v4 & *v1) + 0xC0))(0, *(__n128 *)v31);
          }
        }
      }
      else
      {

      }
    }
  }
}

void EntityTranslationGestureRecognizer.touchesEnded(_:with:)(uint64_t a1, void *a2)
{
  void *v2;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = v2;
  v6 = a2;
  specialized Sequence.forEach(_:)(a1, v5, (uint64_t)v6);

  if ((uint64_t)objc_msgSend(v5, sel_numberOfTouches) < 1)
  {
    v7 = v5;
    if (*((_BYTE *)v5 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_hasBegun) == 1)
      v8 = 3;
    else
      v8 = 5;
    goto LABEL_8;
  }
  EntityTranslationGestureRecognizer.touchCentroidChanged()();
  if (*((_BYTE *)v5 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_hasBegun) == 1)
  {
    v7 = v5;
    v8 = 2;
LABEL_8:
    objc_msgSend(v7, sel_setState_, v8);
  }
}

uint64_t @objc EntityTranslationGestureRecognizer.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, id))
{
  uint64_t v8;
  id v9;
  id v10;

  type metadata accessor for UITouch();
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for UITouch, MEMORY[0x1E0DEFCF8]);
  v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a4;
  v10 = a1;
  a5(v8, v9);

  return swift_bridgeObjectRelease();
}

uint64_t specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X8>)
{
  return specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(a1, &OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity, a2);
}

{
  return specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(a1, &OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity, a2);
}

uint64_t specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, float32x4_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int8 *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t result;
  __int128 v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x2_t v34;
  float32x2_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t active;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x2_t v59;
  int8x16_t v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x4_t v63;
  float32x4_t v64;
  __int128 v65;
  float32x4_t *v66;

  v7 = type metadata accessor for AnchoringComponent();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v62.i8[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = &v62.i8[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12);
  v16 = (uint64_t *)((char *)v62.i64 - v15);
  v17 = (_QWORD *)(v3 + *a2);
  result = swift_beginAccess();
  v20 = 0uLL;
  if (!*v17)
  {
    v27 = 1;
    v28 = 0uLL;
LABEL_22:
    a3->i64[0] = 0;
    a3->i64[1] = 0;
    a3[1] = v20;
    a3[2].i64[0] = 0;
    a3[2].i64[1] = 0;
    a3[3] = v28;
    a3[4].i8[0] = v27;
    return result;
  }
  v64.i64[0] = v3;
  v66 = a3;
  LODWORD(v19) = a1;
  if ((a1 & 0x100000000) != 0)
    *(float *)&v19 = 0.0;
  v65 = v19;
  swift_retain();
  v21 = Entity.anchor.getter();
  if (v21)
  {
    v23 = v21;
    v24 = v22;
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target));
    v63.i64[0] = v7;
    v26 = v25;
    v62.i64[0] = v8;
    *v16 = v23;
    v16[1] = v24;
    swift_retain();
    HasAnchoring.anchoring.getter();
    AnchoringComponent.target.getter();
    (*(void (**)(__int8 *, uint64_t))(v62.i64[0] + 8))(v10, v63.i64[0]);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v16, 0, 1, v26);
    swift_release();
  }
  else
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target));
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v16, 1, 1, v29);
  }
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v16, (uint64_t)v14, &demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target));
  if ((*(unsigned int (**)(__int8 *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v14, 1, v30) == 1)
  {
    HasTransform.transformMatrix(relativeTo:)();
    v63 = v31;
    v64 = v32;
    swift_release();
    v33 = (int8x16_t)vmulq_f32(v63, v63);
    *(float32x2_t *)v33.i8 = vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL));
    v33.i32[0] = vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.i8, 1)).u32[0];
    v34 = vrsqrte_f32((float32x2_t)v33.u32[0]);
    v35 = vmul_f32(v34, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(v34, v34)));
    v63 = vmulq_n_f32(v63, vmul_f32(v35, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(v35, v35))).f32[0]);
    result = outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v16, &demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
    v20 = v63;
LABEL_21:
    a3 = v66;
    v27 = 0;
    v28 = vaddq_f32(v64, vmulq_n_f32(v20, *(float *)&v65));
    goto LABEL_22;
  }
  v36 = &v14[*(int *)(v30 + 48)];
  v37 = type metadata accessor for AnchoringComponent.Target();
  v38 = *(_QWORD *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v38 + 88))(v36, v37) != *MEMORY[0x1E0CD3B68])
  {
    HasTransform.transformMatrix(relativeTo:)();
    v63 = v46;
    v64 = v47;
    swift_release();
    swift_release();
    v48 = (int8x16_t)vmulq_f32(v63, v63);
    *(float32x2_t *)v48.i8 = vadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL));
    v48.i32[0] = vadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1)).u32[0];
    v49 = vrsqrte_f32((float32x2_t)v48.u32[0]);
    v50 = vmul_f32(v49, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(v49, v49)));
    v63 = vmulq_n_f32(v63, vmul_f32(v50, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(v50, v50))).f32[0]);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v16, &demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
    result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v36, v37);
    v20 = v63;
    goto LABEL_21;
  }
  v39 = (uint64_t)v16;
  swift_release();
  v40 = objc_msgSend((id)v64.i64[0], sel_view);
  if (!v40)
  {
LABEL_18:
    swift_release();
    result = outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v39, &demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
    v27 = 1;
    v28 = 0uLL;
    a3 = v66;
    v20 = 0uLL;
    goto LABEL_22;
  }
  v41 = v40;
  type metadata accessor for ARView();
  result = swift_dynamicCastClass();
  if (!result)
  {

    goto LABEL_18;
  }
  if (*(_QWORD *)(result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    active = dispatch thunk of Scene.internalActiveCamera.getter();
    swift_release();
    if (active)
    {
      type metadata accessor for Entity();
      HasTransform.transformMatrix(relativeTo:)();
      Transform.init(matrix:)();
      v63 = v44;
      v64 = v43;
      v62 = v45;

      swift_release();
    }
    else
    {
      Transform.init()();
      v63 = v52;
      v64 = v51;
      v62 = v53;

    }
    specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v62.i64, v63);
    v63 = v54;
    v64 = v55;
    HasTransform.position(relativeTo:)();
    v62 = v56;
    swift_release();
    v57 = vsubq_f32((float32x4_t)0, v63);
    v58.i32[0] = vextq_s8(v62, v62, 8uLL).u32[0];
    v58.i32[1] = 1.0;
    v59 = vadd_f32(vmul_f32(vsub_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)v64.f32), *(float32x2_t *)v57.f32), vmul_f32(vsub_f32(v58, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL)));
    v60 = (int8x16_t)vmulq_f32(v57, v57);
    *(float32x2_t *)v60.i8 = vadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL));
    v61 = vaddq_f32(v64, vmulq_n_f32(v57, vadd_f32(v59, (float32x2_t)vdup_lane_s32((int32x2_t)v59, 1)).f32[0]));
    v59.i32[0] = vadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v60.i8, 1)).u32[0];
    *(float32x2_t *)v60.i8 = vrsqrte_f32((float32x2_t)v59.u32[0]);
    *(float32x2_t *)v60.i8 = vmul_f32(*(float32x2_t *)v60.i8, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8)));
    v63 = vmulq_n_f32(v57, vmul_f32(*(float32x2_t *)v60.i8, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8))).f32[0]);
    v64 = v61;
    result = outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v39, &demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
    v20 = vsubq_f32((float32x4_t)0, v63);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall EntityTranslationGestureRecognizer.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 16) = 1;
  v2 = v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 16) = 1;
  v3 = v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight;
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = (_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_velocity);
  *v4 = 0;
  v4[1] = 0;
  v5 = v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastTranslation;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 16) = 1;
  v6 = v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastFrameTime;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingScreenLocation;
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 16) = 1;
  v8 = v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 16) = 1;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_hasBegun) = 0;
}

Swift::Bool __swiftcall EntityTranslationGestureRecognizer.canPrevent(_:)(UIGestureRecognizer *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  UIGestureRecognizer *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t);
  UIGestureRecognizer *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  objc_super v16;

  v2 = v1;
  swift_getObjectType();
  v4 = swift_conformsToProtocol2();
  if (v4)
    v5 = v4;
  else
    v5 = 0;
  if (v4)
    v6 = a1;
  else
    v6 = 0;
  if (!v6)
    goto LABEL_12;
  v7 = (uint64_t *)&v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity];
  swift_beginAccess();
  v8 = *v7;
  if (!v8)
    goto LABEL_12;
  ObjectType = swift_getObjectType();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  v11 = a1;
  swift_retain();
  v12 = v10(ObjectType, v5);
  if (!v12)
  {

    swift_release();
LABEL_12:
    v16.receiver = v2;
    v16.super_class = (Class)type metadata accessor for EntityTranslationGestureRecognizer();
    v14 = -[UIGestureRecognizer canPreventGestureRecognizer:](&v16, sel_canPreventGestureRecognizer_, a1);
    return v14 & 1;
  }
  v13 = v12;
  swift_retain();
  v14 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v13, v8);

  swift_release();
  swift_release_n();
  return v14 & 1;
}

float32x2_t EntityTranslationGestureRecognizer.translation(in:)(uint64_t a1)
{
  uint64_t v1;
  float32x2_t *v2;
  _QWORD *v3;
  const double *v4;
  unsigned int v5;
  uint64_t v6;
  const double *v7;
  float32x2_t result;

  v2 = (float32x2_t *)(v1 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation + 16) & 1) == 0)
  {
    v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation);
    if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation + 16) & 1) == 0)
    {
      v4 = (const double *)(v3 + 1);
      v6 = *v3;
      v5 = *v3;
      v7 = (const double *)&v2[1];
      vld1q_dup_f64(v7);
      vld1q_dup_f64(v4);
      result = vsub_f32((float32x2_t)__PAIR64__(HIDWORD(v6), v5), *v2);
      if (a1)
      {
        type metadata accessor for Entity();
        HasTransform.convert(direction:from:)();
      }
    }
  }
  return result;
}

float32x4_t EntityTranslationGestureRecognizer.setTranslation(_:in:)(uint64_t a1, float32x4_t result)
{
  uint64_t v2;
  float32x4_t *v3;
  float32x4_t v4;
  uint64_t v5;
  float32x4_t v6;
  __int128 v7;
  uint64_t v8;
  float32x4_t *v9;
  unsigned __int8 v10;
  __n128 *v11;
  float32x4_t v12;
  float32x4_t v13;

  v3 = (float32x4_t *)(v2 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation);
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation + 16) & 1) == 0)
  {
    v4 = result;
    v5 = v3->i64[0];
    v6 = *v3;
    if (a1)
    {
      v12 = *v3;
      v13 = result;
      type metadata accessor for Entity();
      HasTransform.convert(direction:to:)();
      v6 = v12;
      v4 = v13;
    }
    *(float32x2_t *)&v7 = vsub_f32((float32x2_t)__PAIR64__(v6.u32[1], v5), *(float32x2_t *)result.f32);
    *((_QWORD *)&v7 + 1) = vsubq_f32(v6, result).u32[2];
    v8 = v2 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation;
    *(_OWORD *)v8 = v7;
    *(_BYTE *)(v8 + 16) = 0;
    v9 = (float32x4_t *)(v2 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastTranslation);
    *v9 = v4;
    v9[1].i8[0] = 0;
    v10 = *(_BYTE *)(v2 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation + 16);
    v11 = (__n128 *)(v2 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingScreenLocation);
    result = *(float32x4_t *)(v2 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation);
    *v11 = (__n128)result;
    v11[1].n128_u8[0] = v10;
  }
  return result;
}

__n128 EntityTranslationGestureRecognizer.velocity(in:)(uint64_t a1)
{
  uint64_t v1;
  __n128 result;

  if (a1)
  {
    type metadata accessor for Entity();
    HasTransform.convert(direction:from:)();
  }
  else
  {
    return *(__n128 *)(v1 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_velocity);
  }
  return result;
}

uint64_t EntityTranslationGestureRecognizer.location(in:)(uint64_t a1)
{
  char *v1;
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  float32x4_t v17[5];
  _OWORD v18[2];
  __int128 v19;
  float32x4_t v20;
  char v21;

  v3 = objc_msgSend(v1, sel_view);
  objc_msgSend(v1, sel_locationInView_, v3);
  v5 = v4;
  v7 = v6;

  v8 = objc_msgSend(v1, sel_view);
  if (!v8)
    return 0;
  v9 = v8;
  type metadata accessor for ARView();
  if (!swift_dynamicCastClass())
  {

    return 0;
  }
  v10 = *(unsigned int *)&v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight];
  LOBYTE(v18[0]) = v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight + 4];
  specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(v10 | ((unint64_t)LOBYTE(v18[0]) << 32), &OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity, v17);
  outlined init with take of simd_float4x4?((uint64_t)v17, (uint64_t)v18);
  if ((v21 & 1) != 0
    || (v11 = ARView.unproject(_:ontoPlane:relativeToCamera:)(0, v5, v7, *(double *)v18, (float32x4_t)v18[1], *(double *)&v19, v20), (v12 & 1) != 0))
  {

    return 0;
  }
  v13 = v11;
  if (a1)
  {
    type metadata accessor for Entity();
    HasTransform.convert(position:from:)();
    v16 = v14;

    return v16;
  }
  else
  {

  }
  return v13;
}

id EntityTranslationGestureRecognizer.__allocating_init(target:action:)(_QWORD *a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v13;

  v4 = a1[3];
  if (v4)
  {
    v6 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v7 = *(_QWORD *)(v4 - 8);
    MEMORY[0x1E0C80A78](v6);
    v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v7 + 16))(v9);
    v10 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v10 = 0;
  }
  v11 = objc_msgSend(objc_allocWithZone(v2), sel_initWithTarget_action_, v10, a2);
  swift_unknownObjectRelease();
  return v11;
}

id EntityTranslationGestureRecognizer.init(target:action:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _QWORD *v5;
  char *v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  objc_class *v20;
  id v21;
  objc_super v23;
  _QWORD v24[3];
  uint64_t v25;

  v5 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity];
  *v5 = 0;
  v5[1] = 0;
  v6 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v7 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 1;
  v8 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight];
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  v9 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_velocity];
  *v9 = 0;
  v9[1] = 0;
  v10 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastTranslation];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v11 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastFrameTime];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingScreenLocation];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v13 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_hasBegun] = 0;
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, (uint64_t)v24, &demangling cache variable for type metadata for Any?);
  v14 = v25;
  if (v25)
  {
    v15 = __swift_project_boxed_opaque_existential_1(v24, v25);
    v16 = *(_QWORD *)(v14 - 8);
    MEMORY[0x1E0C80A78](v15);
    v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v16 + 16))(v18);
    v19 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v19 = 0;
  }
  v20 = (objc_class *)type metadata accessor for EntityTranslationGestureRecognizer();
  v23.receiver = v2;
  v23.super_class = v20;
  v21 = objc_msgSendSuper2(&v23, sel_initWithTarget_action_, v19, a2);
  swift_unknownObjectRelease();
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, &demangling cache variable for type metadata for Any?);
  return v21;
}

id EntityTranslationGestureRecognizer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EntityTranslationGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void (*protocol witness for EntityGestureRecognizer.entity.modify in conformance EntityTranslationGestureRecognizer(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityTranslationGestureRecognizer.entity.modify(v2);
  return protocol witness for EntityGestureRecognizer.entity.modify in conformance EntityTranslationGestureRecognizer;
}

void protocol witness for EntityGestureRecognizer.entity.modify in conformance EntityTranslationGestureRecognizer(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t protocol witness for EntityGestureRecognizer.location(in:) in conformance EntityTranslationGestureRecognizer(uint64_t a1)
{
  return EntityTranslationGestureRecognizer.location(in:)(a1);
}

uint64_t specialized EntityGestureRecognizer.doesEntity(_:contain:)(uint64_t a1, uint64_t a2)
{
  return specialized EntityGestureRecognizer.doesEntity(_:contain:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized EntityGestureRecognizer.doesEntity(_:contain:));
}

uint64_t specialized EntityGestureRecognizer.doesEntity(_:contain:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if (!a2)
    return 0;
  type metadata accessor for Entity();
  swift_retain();
  v5 = HasHierarchy.parent.getter();
  if (v5 && (v6 = v5, swift_release(), v6 == a1))
  {
    swift_release();
    return 1;
  }
  else
  {
    v7 = HasHierarchy.parent.getter();
    v8 = a3(a1, v7);
    swift_release();
    swift_release();
    return v8 & 1;
  }
}

void specialized Sequence.forEach(_:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;

  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for UITouch();
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for UITouch, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v5 = v22;
    v21 = v23;
    v6 = v24;
    v7 = v25;
    v8 = v26;
  }
  else
  {
    v9 = -1 << *(_BYTE *)(a1 + 32);
    v21 = a1 + 56;
    v10 = ~v9;
    v11 = -v9;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v8 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v6 = v10;
    v7 = 0;
  }
  v20 = (unint64_t)(v6 + 64) >> 6;
  if (v5 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v8)
    {
      v13 = (v8 - 1) & v8;
      v14 = __clz(__rbit64(v8)) | (v7 << 6);
      v15 = v7;
      goto LABEL_29;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    if (v17 >= v20)
      goto LABEL_32;
    v18 = *(_QWORD *)(v21 + 8 * v17);
    v15 = v7 + 1;
    if (!v18)
    {
      v15 = v7 + 2;
      if (v7 + 2 >= v20)
        goto LABEL_32;
      v18 = *(_QWORD *)(v21 + 8 * v15);
      if (!v18)
      {
        v15 = v7 + 3;
        if (v7 + 3 >= v20)
          goto LABEL_32;
        v18 = *(_QWORD *)(v21 + 8 * v15);
        if (!v18)
        {
          v15 = v7 + 4;
          if (v7 + 4 >= v20)
            goto LABEL_32;
          v18 = *(_QWORD *)(v21 + 8 * v15);
          if (!v18)
          {
            v15 = v7 + 5;
            if (v7 + 5 >= v20)
              goto LABEL_32;
            v18 = *(_QWORD *)(v21 + 8 * v15);
            if (!v18)
            {
              v19 = v7 + 6;
              while (v20 != v19)
              {
                v18 = *(_QWORD *)(v21 + 8 * v19++);
                if (v18)
                {
                  v15 = v19 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of Set<UITouch>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v13 = (v18 - 1) & v18;
    v14 = __clz(__rbit64(v18)) + (v15 << 6);
LABEL_29:
    v16 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v14);
    if (!v16)
      goto LABEL_32;
    while (1)
    {
      objc_msgSend(a2, sel_ignoreTouch_forEvent_, v16, a3);

      v7 = v15;
      v8 = v13;
      if ((v5 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for UITouch();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v16 = v27;
        swift_unknownObjectRelease();
        v15 = v7;
        v13 = v8;
        if (v27)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  id v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  id v35;
  void *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  void (*v49)(char *, uint64_t);
  void (*v50)(char *, uint64_t);
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;

  v54 = a2;
  v63 = a5;
  v55 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CollisionCastHit();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v57 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v58 = (char *)&v53 - v14;
  v65 = a3;
  v15 = *(_QWORD *)(a3 + 56);
  v61 = a3 + 56;
  v16 = 1 << *(_BYTE *)(a3 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v64 = (uint64_t *)&a4[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity];
  swift_beginAccess();
  v56 = 0;
  v19 = 0;
  v62 = (unint64_t)(v16 + 63) >> 6;
  v60 = v9;
  while (1)
  {
    if (v18)
    {
      v66 = (v18 - 1) & v18;
      v67 = v19;
      v21 = __clz(__rbit64(v18)) | (v19 << 6);
      goto LABEL_22;
    }
    v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v22 >= v62)
      goto LABEL_37;
    v23 = *(_QWORD *)(v61 + 8 * v22);
    v24 = v19 + 1;
    if (!v23)
    {
      v24 = v19 + 2;
      if (v19 + 2 >= v62)
        goto LABEL_37;
      v23 = *(_QWORD *)(v61 + 8 * v24);
      if (!v23)
      {
        v24 = v19 + 3;
        if (v19 + 3 >= v62)
          goto LABEL_37;
        v23 = *(_QWORD *)(v61 + 8 * v24);
        if (!v23)
          break;
      }
    }
LABEL_21:
    v66 = (v23 - 1) & v23;
    v67 = v24;
    v21 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_22:
    v26 = *(void **)(*(_QWORD *)(v65 + 48) + 8 * v21);
    v27 = *v64;
    if (!*v64)
    {
      v20 = v26;
      goto LABEL_5;
    }
    v59 = v21;
    v28 = v26;
    swift_retain();
    v29 = objc_msgSend(a4, sel_view);
    v30 = v28;
    objc_msgSend(v28, sel_locationInView_, v29);
    v32 = v31;
    v34 = v33;

    v35 = objc_msgSend(a4, sel_view);
    if (!v35)
      goto LABEL_31;
    v36 = v35;
    type metadata accessor for ARView();
    v37 = swift_dynamicCastClass();
    if (!v37)
    {

LABEL_31:
      v42 = (uint64_t)v60;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v60, 1, 1, v10);
LABEL_32:
      swift_release();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v42, &demangling cache variable for type metadata for CollisionCastHit?);
      goto LABEL_5;
    }
    v38 = *(void **)(v37 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
    if (!v38)
      goto LABEL_40;
    v39 = a4;
    v40 = v38;
    v41 = (uint64_t)v60;
    RKARSystem.cachedGestureHitTest(_:)((uint64_t)v60, v32, v34);

    v42 = v41;
    v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v41, 1, v10);
    a4 = v39;
    if (v43 == 1)
      goto LABEL_32;
    v44 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v58, v42, v10);
    swift_retain();
    v45 = CollisionCastHit.entity.getter();
    swift_release();
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v57, v44, v10);
    if (v45 == v27)
    {
      swift_release();
      v50 = *(void (**)(char *, uint64_t))(v11 + 8);
      v50(v57, v10);
      v50(v58, v10);
LABEL_34:

      *(unint64_t *)((char *)v55 + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v59;
      v51 = __OFADD__(v56++, 1);
      v19 = v67;
      v18 = v66;
      if (v51)
      {
        __break(1u);
LABEL_37:
        v52 = v65;
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(v55, v54, v56, v52);
        return;
      }
    }
    else
    {
      v46 = v57;
      v47 = CollisionCastHit.entity.getter();
      v48 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v27, v47);
      swift_release();
      swift_release();
      v49 = *(void (**)(char *, uint64_t))(v11 + 8);
      v49(v46, v10);
      v49(v58, v10);
      if ((v48 & 1) != 0)
        goto LABEL_34;
LABEL_5:
      objc_msgSend(a4, sel_ignoreTouch_forEvent_, v26, v63);

      v19 = v67;
      v18 = v66;
    }
  }
  v25 = v19 + 4;
  if (v19 + 4 >= v62)
    goto LABEL_37;
  v23 = *(_QWORD *)(v61 + 8 * v25);
  if (v23)
  {
    v24 = v19 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v24 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v24 >= v62)
      goto LABEL_37;
    v23 = *(_QWORD *)(v61 + 8 * v24);
    ++v25;
    if (v23)
      goto LABEL_21;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  id v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  id v35;
  void *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  void (*v49)(char *, uint64_t);
  void (*v50)(char *, uint64_t);
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;

  v54 = a2;
  v63 = a5;
  v55 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CollisionCastHit();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v57 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v58 = (char *)&v53 - v14;
  v65 = a3;
  v15 = *(_QWORD *)(a3 + 56);
  v61 = a3 + 56;
  v16 = 1 << *(_BYTE *)(a3 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v64 = (uint64_t *)&a4[OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity];
  swift_beginAccess();
  v56 = 0;
  v19 = 0;
  v62 = (unint64_t)(v16 + 63) >> 6;
  v60 = v9;
  while (1)
  {
    if (v18)
    {
      v66 = (v18 - 1) & v18;
      v67 = v19;
      v21 = __clz(__rbit64(v18)) | (v19 << 6);
      goto LABEL_22;
    }
    v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v22 >= v62)
      goto LABEL_37;
    v23 = *(_QWORD *)(v61 + 8 * v22);
    v24 = v19 + 1;
    if (!v23)
    {
      v24 = v19 + 2;
      if (v19 + 2 >= v62)
        goto LABEL_37;
      v23 = *(_QWORD *)(v61 + 8 * v24);
      if (!v23)
      {
        v24 = v19 + 3;
        if (v19 + 3 >= v62)
          goto LABEL_37;
        v23 = *(_QWORD *)(v61 + 8 * v24);
        if (!v23)
          break;
      }
    }
LABEL_21:
    v66 = (v23 - 1) & v23;
    v67 = v24;
    v21 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_22:
    v26 = *(void **)(*(_QWORD *)(v65 + 48) + 8 * v21);
    v27 = *v64;
    if (!*v64)
    {
      v20 = v26;
      goto LABEL_5;
    }
    v59 = v21;
    v28 = v26;
    swift_retain();
    v29 = objc_msgSend(a4, sel_view);
    v30 = v28;
    objc_msgSend(v28, sel_locationInView_, v29);
    v32 = v31;
    v34 = v33;

    v35 = objc_msgSend(a4, sel_view);
    if (!v35)
      goto LABEL_31;
    v36 = v35;
    type metadata accessor for ARView();
    v37 = swift_dynamicCastClass();
    if (!v37)
    {

LABEL_31:
      v42 = (uint64_t)v60;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v60, 1, 1, v10);
LABEL_32:
      swift_release();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v42, &demangling cache variable for type metadata for CollisionCastHit?);
      goto LABEL_5;
    }
    v38 = *(void **)(v37 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
    if (!v38)
      goto LABEL_40;
    v39 = a4;
    v40 = v38;
    v41 = (uint64_t)v60;
    RKARSystem.cachedGestureHitTest(_:)((uint64_t)v60, v32, v34);

    v42 = v41;
    v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v41, 1, v10);
    a4 = v39;
    if (v43 == 1)
      goto LABEL_32;
    v44 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v58, v42, v10);
    swift_retain();
    v45 = CollisionCastHit.entity.getter();
    swift_release();
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v57, v44, v10);
    if (v45 == v27)
    {
      swift_release();
      v50 = *(void (**)(char *, uint64_t))(v11 + 8);
      v50(v57, v10);
      v50(v58, v10);
LABEL_34:

      *(unint64_t *)((char *)v55 + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v59;
      v51 = __OFADD__(v56++, 1);
      v19 = v67;
      v18 = v66;
      if (v51)
      {
        __break(1u);
LABEL_37:
        v52 = v65;
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(v55, v54, v56, v52);
        return;
      }
    }
    else
    {
      v46 = v57;
      v47 = CollisionCastHit.entity.getter();
      v48 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v27, v47);
      swift_release();
      swift_release();
      v49 = *(void (**)(char *, uint64_t))(v11 + 8);
      v49(v46, v10);
      v49(v58, v10);
      if ((v48 & 1) != 0)
        goto LABEL_34;
LABEL_5:
      objc_msgSend(a4, sel_ignoreTouch_forEvent_, v26, v63);

      v19 = v67;
      v18 = v66;
    }
  }
  v25 = v19 + 4;
  if (v19 + 4 >= v62)
    goto LABEL_37;
  v23 = *(_QWORD *)(v61 + 8 * v25);
  if (v23)
  {
    v24 = v19 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v24 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v24 >= v62)
      goto LABEL_37;
    v23 = *(_QWORD *)(v61 + 8 * v24);
    ++v25;
    if (v23)
      goto LABEL_21;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  id v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  id v35;
  void *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  void (*v49)(char *, uint64_t);
  void (*v50)(char *, uint64_t);
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;

  v54 = a2;
  v63 = a5;
  v55 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CollisionCastHit();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v57 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v58 = (char *)&v53 - v14;
  v65 = a3;
  v15 = *(_QWORD *)(a3 + 56);
  v61 = a3 + 56;
  v16 = 1 << *(_BYTE *)(a3 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v64 = (uint64_t *)&a4[OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity];
  swift_beginAccess();
  v56 = 0;
  v19 = 0;
  v62 = (unint64_t)(v16 + 63) >> 6;
  v60 = v9;
  while (1)
  {
    if (v18)
    {
      v66 = (v18 - 1) & v18;
      v67 = v19;
      v21 = __clz(__rbit64(v18)) | (v19 << 6);
      goto LABEL_22;
    }
    v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v22 >= v62)
      goto LABEL_37;
    v23 = *(_QWORD *)(v61 + 8 * v22);
    v24 = v19 + 1;
    if (!v23)
    {
      v24 = v19 + 2;
      if (v19 + 2 >= v62)
        goto LABEL_37;
      v23 = *(_QWORD *)(v61 + 8 * v24);
      if (!v23)
      {
        v24 = v19 + 3;
        if (v19 + 3 >= v62)
          goto LABEL_37;
        v23 = *(_QWORD *)(v61 + 8 * v24);
        if (!v23)
          break;
      }
    }
LABEL_21:
    v66 = (v23 - 1) & v23;
    v67 = v24;
    v21 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_22:
    v26 = *(void **)(*(_QWORD *)(v65 + 48) + 8 * v21);
    v27 = *v64;
    if (!*v64)
    {
      v20 = v26;
      goto LABEL_5;
    }
    v59 = v21;
    v28 = v26;
    swift_retain();
    v29 = objc_msgSend(a4, sel_view);
    v30 = v28;
    objc_msgSend(v28, sel_locationInView_, v29);
    v32 = v31;
    v34 = v33;

    v35 = objc_msgSend(a4, sel_view);
    if (!v35)
      goto LABEL_31;
    v36 = v35;
    type metadata accessor for ARView();
    v37 = swift_dynamicCastClass();
    if (!v37)
    {

LABEL_31:
      v42 = (uint64_t)v60;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v60, 1, 1, v10);
LABEL_32:
      swift_release();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v42, &demangling cache variable for type metadata for CollisionCastHit?);
      goto LABEL_5;
    }
    v38 = *(void **)(v37 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
    if (!v38)
      goto LABEL_40;
    v39 = a4;
    v40 = v38;
    v41 = (uint64_t)v60;
    RKARSystem.cachedGestureHitTest(_:)((uint64_t)v60, v32, v34);

    v42 = v41;
    v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v41, 1, v10);
    a4 = v39;
    if (v43 == 1)
      goto LABEL_32;
    v44 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v58, v42, v10);
    swift_retain();
    v45 = CollisionCastHit.entity.getter();
    swift_release();
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v57, v44, v10);
    if (v45 == v27)
    {
      swift_release();
      v50 = *(void (**)(char *, uint64_t))(v11 + 8);
      v50(v57, v10);
      v50(v58, v10);
LABEL_34:

      *(unint64_t *)((char *)v55 + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v59;
      v51 = __OFADD__(v56++, 1);
      v19 = v67;
      v18 = v66;
      if (v51)
      {
        __break(1u);
LABEL_37:
        v52 = v65;
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(v55, v54, v56, v52);
        return;
      }
    }
    else
    {
      v46 = v57;
      v47 = CollisionCastHit.entity.getter();
      v48 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v27, v47);
      swift_release();
      swift_release();
      v49 = *(void (**)(char *, uint64_t))(v11 + 8);
      v49(v46, v10);
      v49(v58, v10);
      if ((v48 & 1) != 0)
        goto LABEL_34;
LABEL_5:
      objc_msgSend(a4, sel_ignoreTouch_forEvent_, v26, v63);

      v19 = v67;
      v18 = v66;
    }
  }
  v25 = v19 + 4;
  if (v19 + 4 >= v62)
    goto LABEL_37;
  v23 = *(_QWORD *)(v61 + 8 * v25);
  if (v23)
  {
    v24 = v19 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v24 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v24 >= v62)
      goto LABEL_37;
    v23 = *(_QWORD *)(v61 + 8 * v24);
    ++v25;
    if (v23)
      goto LABEL_21;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t isStackAllocationSafe;
  void *v13;
  char *v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  id v21;
  uint64_t v22;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = a2;
  v10 = a3;
  v11 = v9;
  isStackAllocationSafe = (uint64_t)v10;
  v13 = (void *)isStackAllocationSafe;
  if (v7 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v14 = (char *)v24 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v14, 8 * v8);
    v15 = (char *)v11;
    v16 = v13;
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v14, v8, a1, v15, (uint64_t)v16);
    v18 = v17;
    swift_release();

    if (v3)
      swift_willThrow();

  }
  else
  {
    v19 = (void *)swift_slowAlloc();
    bzero(v19, 8 * v8);
    v20 = (char *)v11;
    v21 = v13;
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v19, v8, a1, v20, (uint64_t)v21);
    v18 = v22;
    swift_release();

    MEMORY[0x1DF091C54](v19, -1, -1);
  }

  return v18;
}

{
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t isStackAllocationSafe;
  void *v13;
  char *v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  id v21;
  uint64_t v22;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = a2;
  v10 = a3;
  v11 = v9;
  isStackAllocationSafe = (uint64_t)v10;
  v13 = (void *)isStackAllocationSafe;
  if (v7 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v14 = (char *)v24 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v14, 8 * v8);
    v15 = (char *)v11;
    v16 = v13;
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v14, v8, a1, v15, (uint64_t)v16);
    v18 = v17;
    swift_release();

    if (v3)
      swift_willThrow();

  }
  else
  {
    v19 = (void *)swift_slowAlloc();
    bzero(v19, 8 * v8);
    v20 = (char *)v11;
    v21 = v13;
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v19, v8, a1, v20, (uint64_t)v21);
    v18 = v22;
    swift_release();

    MEMORY[0x1DF091C54](v19, -1, -1);
  }

  return v18;
}

{
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t isStackAllocationSafe;
  void *v13;
  char *v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  id v21;
  uint64_t v22;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = a2;
  v10 = a3;
  v11 = v9;
  isStackAllocationSafe = (uint64_t)v10;
  v13 = (void *)isStackAllocationSafe;
  if (v7 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v14 = (char *)v24 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v14, 8 * v8);
    v15 = (char *)v11;
    v16 = v13;
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v14, v8, a1, v15, (uint64_t)v16);
    v18 = v17;
    swift_release();

    if (v3)
      swift_willThrow();

  }
  else
  {
    v19 = (void *)swift_slowAlloc();
    bzero(v19, 8 * v8);
    v20 = (char *)v11;
    v21 = v13;
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v19, v8, a1, v20, (uint64_t)v21);
    v18 = v22;
    swift_release();

    MEMORY[0x1DF091C54](v19, -1, -1);
  }

  return v18;
}

uint64_t specialized Set._Variant.filter(_:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  id v28;
  void *v29;
  uint64_t result;
  void *v31;
  id v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  void (*v40)(char *, uint64_t);
  id v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CollisionCastHit();
  v57 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v56 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  if ((a1 & 0xC000000000000001) == 0)
  {
    v53 = specialized _NativeSet.filter(_:)(a1, a2, a3);
    if (!v3)
      return v53;
    return v4;
  }
  v55 = (char *)&v54 - v14;
  v4 = MEMORY[0x1E0DEE9E8];
  v65 = MEMORY[0x1E0DEE9E8];
  v15 = a2;
  v58 = a3;
  v16 = __CocoaSet.makeIterator()();
  v61 = (uint64_t *)&v15[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity];
  swift_beginAccess();
  v62 = v16;
  v17 = __CocoaSet.Iterator.next()();
  if (!v17)
  {
LABEL_32:

    swift_release();
    return v4;
  }
  v18 = v17;
  v54 = v3;
  v60 = type metadata accessor for UITouch();
  v59 = MEMORY[0x1E0DEE9B0] + 8;
  v19 = v55;
  v20 = v57;
  while (1)
  {
    v63 = v18;
    swift_dynamicCast();
    v21 = v64;
    v22 = *v61;
    if (!*v61)
      goto LABEL_15;
    swift_retain();
    v23 = objc_msgSend(v15, sel_view);
    objc_msgSend(v21, sel_locationInView_, v23);
    v25 = v24;
    v27 = v26;

    v28 = objc_msgSend(v15, sel_view);
    if (!v28)
      goto LABEL_13;
    v29 = v28;
    type metadata accessor for ARView();
    result = swift_dynamicCastClass();
    if (!result)
    {

LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v10, 1, 1, v11);
LABEL_14:
      swift_release();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v10, &demangling cache variable for type metadata for CollisionCastHit?);
      goto LABEL_15;
    }
    v31 = *(void **)(result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
    if (!v31)
      break;
    v32 = v31;
    RKARSystem.cachedGestureHitTest(_:)((uint64_t)v10, v25, v27);

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v10, 1, v11) == 1)
      goto LABEL_14;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v19, v10, v11);
    swift_retain();
    v33 = CollisionCastHit.entity.getter();
    swift_release();
    swift_release();
    v34 = v56;
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v56, v19, v11);
    if (v33 == v22)
    {
      swift_release();
      v40 = *(void (**)(char *, uint64_t))(v20 + 8);
      v40(v34, v11);
      v40(v19, v11);
LABEL_19:
      v41 = v64;
      v42 = v65;
      v43 = *(_QWORD *)(v65 + 16);
      if (*(_QWORD *)(v65 + 24) <= v43)
      {
        specialized _NativeSet.resize(capacity:)(v43 + 1);
        v42 = v65;
      }
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v42 + 40));
      v44 = v42 + 56;
      v45 = -1 << *(_BYTE *)(v42 + 32);
      v46 = result & ~v45;
      v47 = v46 >> 6;
      if (((-1 << v46) & ~*(_QWORD *)(v42 + 56 + 8 * (v46 >> 6))) != 0)
      {
        v48 = __clz(__rbit64((-1 << v46) & ~*(_QWORD *)(v42 + 56 + 8 * (v46 >> 6)))) | v46 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v49 = 0;
        v50 = (unint64_t)(63 - v45) >> 6;
        do
        {
          if (++v47 == v50 && (v49 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          v51 = v47 == v50;
          if (v47 == v50)
            v47 = 0;
          v49 |= v51;
          v52 = *(_QWORD *)(v44 + 8 * v47);
        }
        while (v52 == -1);
        v48 = __clz(__rbit64(~v52)) + (v47 << 6);
      }
      *(_QWORD *)(v44 + ((v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v48;
      *(_QWORD *)(*(_QWORD *)(v42 + 48) + 8 * v48) = v41;
      ++*(_QWORD *)(v42 + 16);
      goto LABEL_16;
    }
    v35 = v34;
    v36 = CollisionCastHit.entity.getter();
    v37 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v22, v36);
    swift_release();
    swift_release();
    v38 = *(void (**)(char *, uint64_t))(v20 + 8);
    v39 = v35;
    v19 = v55;
    v38(v39, v11);
    v38(v19, v11);
    if ((v37 & 1) != 0)
      goto LABEL_19;
LABEL_15:
    objc_msgSend(v15, sel_ignoreTouch_forEvent_, v21, v58);

LABEL_16:
    v18 = __CocoaSet.Iterator.next()();
    if (!v18)
    {
      v4 = v65;
      goto LABEL_32;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  id v28;
  void *v29;
  uint64_t result;
  void *v31;
  id v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  void (*v40)(char *, uint64_t);
  id v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CollisionCastHit();
  v57 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v56 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  if ((a1 & 0xC000000000000001) == 0)
  {
    v53 = specialized _NativeSet.filter(_:)(a1, a2, a3);
    if (!v3)
      return v53;
    return v4;
  }
  v55 = (char *)&v54 - v14;
  v4 = MEMORY[0x1E0DEE9E8];
  v65 = MEMORY[0x1E0DEE9E8];
  v15 = a2;
  v58 = a3;
  v16 = __CocoaSet.makeIterator()();
  v61 = (uint64_t *)&v15[OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity];
  swift_beginAccess();
  v62 = v16;
  v17 = __CocoaSet.Iterator.next()();
  if (!v17)
  {
LABEL_32:

    swift_release();
    return v4;
  }
  v18 = v17;
  v54 = v3;
  v60 = type metadata accessor for UITouch();
  v59 = MEMORY[0x1E0DEE9B0] + 8;
  v19 = v55;
  v20 = v57;
  while (1)
  {
    v63 = v18;
    swift_dynamicCast();
    v21 = v64;
    v22 = *v61;
    if (!*v61)
      goto LABEL_15;
    swift_retain();
    v23 = objc_msgSend(v15, sel_view);
    objc_msgSend(v21, sel_locationInView_, v23);
    v25 = v24;
    v27 = v26;

    v28 = objc_msgSend(v15, sel_view);
    if (!v28)
      goto LABEL_13;
    v29 = v28;
    type metadata accessor for ARView();
    result = swift_dynamicCastClass();
    if (!result)
    {

LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v10, 1, 1, v11);
LABEL_14:
      swift_release();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v10, &demangling cache variable for type metadata for CollisionCastHit?);
      goto LABEL_15;
    }
    v31 = *(void **)(result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
    if (!v31)
      break;
    v32 = v31;
    RKARSystem.cachedGestureHitTest(_:)((uint64_t)v10, v25, v27);

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v10, 1, v11) == 1)
      goto LABEL_14;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v19, v10, v11);
    swift_retain();
    v33 = CollisionCastHit.entity.getter();
    swift_release();
    swift_release();
    v34 = v56;
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v56, v19, v11);
    if (v33 == v22)
    {
      swift_release();
      v40 = *(void (**)(char *, uint64_t))(v20 + 8);
      v40(v34, v11);
      v40(v19, v11);
LABEL_19:
      v41 = v64;
      v42 = v65;
      v43 = *(_QWORD *)(v65 + 16);
      if (*(_QWORD *)(v65 + 24) <= v43)
      {
        specialized _NativeSet.resize(capacity:)(v43 + 1);
        v42 = v65;
      }
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v42 + 40));
      v44 = v42 + 56;
      v45 = -1 << *(_BYTE *)(v42 + 32);
      v46 = result & ~v45;
      v47 = v46 >> 6;
      if (((-1 << v46) & ~*(_QWORD *)(v42 + 56 + 8 * (v46 >> 6))) != 0)
      {
        v48 = __clz(__rbit64((-1 << v46) & ~*(_QWORD *)(v42 + 56 + 8 * (v46 >> 6)))) | v46 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v49 = 0;
        v50 = (unint64_t)(63 - v45) >> 6;
        do
        {
          if (++v47 == v50 && (v49 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          v51 = v47 == v50;
          if (v47 == v50)
            v47 = 0;
          v49 |= v51;
          v52 = *(_QWORD *)(v44 + 8 * v47);
        }
        while (v52 == -1);
        v48 = __clz(__rbit64(~v52)) + (v47 << 6);
      }
      *(_QWORD *)(v44 + ((v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v48;
      *(_QWORD *)(*(_QWORD *)(v42 + 48) + 8 * v48) = v41;
      ++*(_QWORD *)(v42 + 16);
      goto LABEL_16;
    }
    v35 = v34;
    v36 = CollisionCastHit.entity.getter();
    v37 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v22, v36);
    swift_release();
    swift_release();
    v38 = *(void (**)(char *, uint64_t))(v20 + 8);
    v39 = v35;
    v19 = v55;
    v38(v39, v11);
    v38(v19, v11);
    if ((v37 & 1) != 0)
      goto LABEL_19;
LABEL_15:
    objc_msgSend(v15, sel_ignoreTouch_forEvent_, v21, v58);

LABEL_16:
    v18 = __CocoaSet.Iterator.next()();
    if (!v18)
    {
      v4 = v65;
      goto LABEL_32;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  id v28;
  void *v29;
  uint64_t result;
  void *v31;
  id v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  void (*v40)(char *, uint64_t);
  id v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CollisionCastHit();
  v57 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v56 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  if ((a1 & 0xC000000000000001) == 0)
  {
    v53 = specialized _NativeSet.filter(_:)(a1, a2, a3);
    if (!v3)
      return v53;
    return v4;
  }
  v55 = (char *)&v54 - v14;
  v4 = MEMORY[0x1E0DEE9E8];
  v65 = MEMORY[0x1E0DEE9E8];
  v15 = a2;
  v58 = a3;
  v16 = __CocoaSet.makeIterator()();
  v61 = (uint64_t *)&v15[OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity];
  swift_beginAccess();
  v62 = v16;
  v17 = __CocoaSet.Iterator.next()();
  if (!v17)
  {
LABEL_32:

    swift_release();
    return v4;
  }
  v18 = v17;
  v54 = v3;
  v60 = type metadata accessor for UITouch();
  v59 = MEMORY[0x1E0DEE9B0] + 8;
  v19 = v55;
  v20 = v57;
  while (1)
  {
    v63 = v18;
    swift_dynamicCast();
    v21 = v64;
    v22 = *v61;
    if (!*v61)
      goto LABEL_15;
    swift_retain();
    v23 = objc_msgSend(v15, sel_view);
    objc_msgSend(v21, sel_locationInView_, v23);
    v25 = v24;
    v27 = v26;

    v28 = objc_msgSend(v15, sel_view);
    if (!v28)
      goto LABEL_13;
    v29 = v28;
    type metadata accessor for ARView();
    result = swift_dynamicCastClass();
    if (!result)
    {

LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v10, 1, 1, v11);
LABEL_14:
      swift_release();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v10, &demangling cache variable for type metadata for CollisionCastHit?);
      goto LABEL_15;
    }
    v31 = *(void **)(result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
    if (!v31)
      break;
    v32 = v31;
    RKARSystem.cachedGestureHitTest(_:)((uint64_t)v10, v25, v27);

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v10, 1, v11) == 1)
      goto LABEL_14;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v19, v10, v11);
    swift_retain();
    v33 = CollisionCastHit.entity.getter();
    swift_release();
    swift_release();
    v34 = v56;
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v56, v19, v11);
    if (v33 == v22)
    {
      swift_release();
      v40 = *(void (**)(char *, uint64_t))(v20 + 8);
      v40(v34, v11);
      v40(v19, v11);
LABEL_19:
      v41 = v64;
      v42 = v65;
      v43 = *(_QWORD *)(v65 + 16);
      if (*(_QWORD *)(v65 + 24) <= v43)
      {
        specialized _NativeSet.resize(capacity:)(v43 + 1);
        v42 = v65;
      }
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v42 + 40));
      v44 = v42 + 56;
      v45 = -1 << *(_BYTE *)(v42 + 32);
      v46 = result & ~v45;
      v47 = v46 >> 6;
      if (((-1 << v46) & ~*(_QWORD *)(v42 + 56 + 8 * (v46 >> 6))) != 0)
      {
        v48 = __clz(__rbit64((-1 << v46) & ~*(_QWORD *)(v42 + 56 + 8 * (v46 >> 6)))) | v46 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v49 = 0;
        v50 = (unint64_t)(63 - v45) >> 6;
        do
        {
          if (++v47 == v50 && (v49 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          v51 = v47 == v50;
          if (v47 == v50)
            v47 = 0;
          v49 |= v51;
          v52 = *(_QWORD *)(v44 + 8 * v47);
        }
        while (v52 == -1);
        v48 = __clz(__rbit64(~v52)) + (v47 << 6);
      }
      *(_QWORD *)(v44 + ((v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v48;
      *(_QWORD *)(*(_QWORD *)(v42 + 48) + 8 * v48) = v41;
      ++*(_QWORD *)(v42 + 16);
      goto LABEL_16;
    }
    v35 = v34;
    v36 = CollisionCastHit.entity.getter();
    v37 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v22, v36);
    swift_release();
    swift_release();
    v38 = *(void (**)(char *, uint64_t))(v20 + 8);
    v39 = v35;
    v19 = v55;
    v38(v39, v11);
    v38(v19, v11);
    if ((v37 & 1) != 0)
      goto LABEL_19;
LABEL_15:
    objc_msgSend(v15, sel_ignoreTouch_forEvent_, v21, v58);

LABEL_16:
    v18 = __CocoaSet.Iterator.next()();
    if (!v18)
    {
      v4 = v65;
      goto LABEL_32;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t outlined init with take of simd_float4x4?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for simd_float4x4?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double specialized simd_float4x4.init(translation:rotation:scale:)(double a1, float32x4_t a2)
{
  double v3;

  v3 = simd_matrix4x4(a2);
  simd_float4x4.scale(_:)();
  SIMD4<>._xyz.getter();
  SIMD4<>._xyz.setter();
  return v3;
}

void specialized EntityTranslationGestureRecognizer.touchesMoved(_:with:)()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  float32x4_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  char *v33;
  float32x2_t *v34;
  double v35;
  float32x2_t v36;
  double v37;
  double v38;
  void (*v39)(char *, uint64_t);
  float32x4_t v40;
  double v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  float32x2_t v56;
  float v57;
  float64x2_t v58;
  float32x2_t v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t *v65;
  __int128 v66;
  __int128 v67;
  float32x4_t v68[5];
  float32x4_t v69[5];
  _OWORD v70[2];
  __int128 v71;
  float32x4_t v72;
  char v73;
  unsigned __int8 v74[16];
  float32x4_t v75;
  char v76;

  v1 = v0;
  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v61 - v7;
  v9 = objc_msgSend(v0, sel_view);
  objc_msgSend(v1, sel_locationInView_, v9);
  v66 = v11;
  v67 = v10;

  if ((uint64_t)objc_msgSend(v1, sel_numberOfTouches) >= 1)
  {
    v12 = &v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight];
    v13 = *(unsigned int *)&v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight];
    v74[0] = v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight + 4];
    specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(v13 | ((unint64_t)v74[0] << 32), &OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity, v68);
    outlined init with take of simd_float4x4?((uint64_t)v68, (uint64_t)v74);
    if ((v76 & 1) == 0)
    {
      v14 = (uint64_t *)&v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation];
      if ((v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation + 16] & 1) == 0)
      {
        v62.i64[0] = *v14;
        v15.i64[0] = v62.i64[0];
        v15.i64[1] = v14[1];
        v63 = v15;
        v64 = v75;
        v65 = (float32x4_t *)&v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation];
        v16 = objc_msgSend(v1, sel_view);
        if (v16)
        {
          v17 = v16;
          type metadata accessor for ARView();
          if (swift_dynamicCastClass()
            && (v18 = *(unsigned int *)v12,
                LOBYTE(v70[0]) = v12[4],
                specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(v18 | ((unint64_t)LOBYTE(v70[0]) << 32), &OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity, v69), outlined init with take of simd_float4x4?((uint64_t)v69, (uint64_t)v70), (v73 & 1) == 0))
          {
            v19 = ARView.unproject(_:ontoPlane:relativeToCamera:)(0, *(double *)&v67, *(double *)&v66, *(double *)v70, (float32x4_t)v70[1], *(double *)&v71, v72);
            v21 = v20;
            v23 = v22;

            if ((v23 & 1) == 0)
            {
              v26 = v63;
              v26.i32[0] = v62.i32[0];
              v25.i64[0] = v19;
              v61 = v26;
              v62 = v25;
              *(float32x2_t *)v24.f32 = vsub_f32(*(float32x2_t *)v26.f32, (float32x2_t)v19);
              v27 = v63.f32[2];
              v24.f32[2] = v63.f32[2] - *(float *)&v21;
              v63 = v24;
              v28 = v65;
              specialized SIMD.subscript.getter((__n128)xmmword_1D95E2280, COERCE_DOUBLE(2));
              v30 = vmulq_f32(v63, v29);
              v31 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1)));
              v32 = vmulq_laneq_f32(v31, v29, 2);
              *(float32x2_t *)v29.f32 = vsub_f32(*(float32x2_t *)v61.f32, vmul_n_f32(*(float32x2_t *)v29.f32, v31.f32[0]));
              v31.i64[1] = v62.i64[1];
              *(float32x2_t *)v31.f32 = vsub_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v29.f32);
              v29.f32[2] = v27 - v32.f32[0];
              v29.i32[3] = 0;
              v32.f32[0] = *(float *)&v21 - (float)(v27 - v32.f32[0]);
              v62 = v32;
              v63 = v31;
              v31.i64[1] = v32.u32[0];
              v64 = v31;
              v33 = &v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation];
              *(_QWORD *)v33 = v19;
              *((_QWORD *)v33 + 1) = v21;
              v33[16] = 0;
              *v28 = v29;
              v28[1].i8[0] = 0;
              v34 = (float32x2_t *)&v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastTranslation];
              if ((v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastTranslation + 16] & 1) == 0
                && (v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastFrameTime + 8] & 1) == 0)
              {
                v35 = *(double *)&v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastFrameTime];
                v36 = *v34;
                v65 = (float32x4_t *)v34[1];
                Date.init()();
                static Date.now.getter();
                Date.timeIntervalSince(_:)();
                v38 = v37;
                v39 = *(void (**)(char *, uint64_t))(v3 + 8);
                v39(v6, v2);
                v39(v8, v2);
                v41 = v38 - v35;
                if (v38 - v35 > 2.22044605e-16)
                {
                  *(float *)&v41 = v41;
                  *(float32x2_t *)v40.f32 = vdiv_f32(vsub_f32(*(float32x2_t *)v63.f32, v36), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v41, 0));
                  v40.f32[2] = (float)(v62.f32[0] - COERCE_FLOAT(vdupq_n_s64((unint64_t)v65).i32[2]))
                             / *(float *)&v41;
                  v42 = *(float32x4_t *)&v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_velocity];
                  v43 = vsubq_f32(v40, v42);
                  __asm { FMOV            V2.4S, #0.25 }
                  *(float32x4_t *)&v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_velocity] = vmlaq_f32(v42, _Q2, v43);
                }
              }
              Date.init()();
              static Date.now.getter();
              Date.timeIntervalSince(_:)();
              v50 = v49;
              v51 = *(void (**)(char *, uint64_t))(v3 + 8);
              v51(v6, v2);
              v51(v8, v2);
              v52 = &v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastFrameTime];
              *(_QWORD *)v52 = v50;
              v52[8] = 0;
              *(float32x4_t *)v34->f32 = v64;
              v34[2].i8[0] = 0;
              v53 = &v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation];
              v54 = v66;
              *(_QWORD *)v53 = v67;
              *((_QWORD *)v53 + 1) = v54;
              v53[16] = 0;
              v55 = OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_hasBegun;
              if (v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_hasBegun] == 1)
              {
                objc_msgSend(v1, sel_setState_, 2);
              }
              else
              {
                v56 = vmul_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32);
                v57 = (float)(v62.f32[0] * v62.f32[0]) + vaddv_f32(v56);
                if (one-time initialization token for translationBeginWorldThresholdSq != -1)
                  swift_once();
                v56.i32[0] = static EntityTranslationGestureRecognizer.Constants.translationBeginWorldThresholdSq;
                if (*(float *)&static EntityTranslationGestureRecognizer.Constants.translationBeginWorldThresholdSq < v57)
                  goto LABEL_23;
                if ((v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingScreenLocation + 16] & 1) == 0)
                {
                  *(_QWORD *)&v58.f64[0] = v67;
                  *(_QWORD *)&v58.f64[1] = v66;
                  v59 = vcvt_f32_f64(vsubq_f64(v58, *(float64x2_t *)&v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingScreenLocation]));
                  v56 = vmul_f32(v59, v59);
                  v60 = vaddv_f32(v56);
                  if (one-time initialization token for translationBeginScreenThresholdSq != -1)
                    swift_once();
                  v56.i32[0] = static EntityTranslationGestureRecognizer.Constants.translationBeginScreenThresholdSq;
                  if (*(float *)&static EntityTranslationGestureRecognizer.Constants.translationBeginScreenThresholdSq < v60)
                  {
LABEL_23:
                    objc_msgSend(v1, sel_setState_, 1, *(double *)&v56);
                    v1[v55] = 1;
                  }
                }
              }
            }
          }
          else
          {

          }
        }
      }
    }
  }
}

uint64_t type metadata accessor for EntityTranslationGestureRecognizer()
{
  return objc_opt_self();
}

uint64_t sub_1D957AC3C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  _OWORD *v3;

  v3 = (_OWORD *)(*a1 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t method lookup function for EntityTranslationGestureRecognizer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EntityTranslationGestureRecognizer.entity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of EntityTranslationGestureRecognizer.entity.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of EntityTranslationGestureRecognizer.entity.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of EntityTranslationGestureRecognizer.translation(in:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of EntityTranslationGestureRecognizer.setTranslation(_:in:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of EntityTranslationGestureRecognizer.velocity(in:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of EntityTranslationGestureRecognizer.location(in:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

double simd_matrix4x4(float32x4_t a1)
{
  float v10;
  double v11;

  _S3 = a1.i32[1];
  _S5 = a1.i32[2];
  __asm { FMLS            S1, S5, V0.S[2] }
  _S7 = a1.i32[3];
  __asm { FMLA            S1, S7, V0.S[3] }
  v10 = vmlas_n_f32(vmuls_lane_f32(a1.f32[2], a1, 3), a1.f32[1], a1.f32[0]);
  LODWORD(v11) = _S1;
  *((float *)&v11 + 1) = v10 + v10;
  __asm
  {
    FMLA            S6, S3, V0.S[1]
    FMLA            S6, S7, V0.S[3]
    FMLS            S6, S0, V0.S[0]
    FMLA            S18, S5, V0.S[1]
    FMLA            S17, S0, V0.S[2]
    FMLA            S16, S5, V0.S[1]
    FMLA            S7, S5, V0.S[2]
    FMLS            S7, S0, V0.S[0]
    FMLS            S7, S3, V0.S[1]
  }
  return v11;
}

unint64_t type metadata accessor for UITouch()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UITouch;
  if (!lazy cache variable for type metadata for UITouch)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  }
  return result;
}

uint64_t outlined consume of Set<UITouch>.Iterator._Variant()
{
  return swift_release();
}

double TextComponent.edgeInsets.getter()
{
  float v0;
  double v1;

  TextComponent.coreEdgeInsets.getter();
  v1 = v0;
  TextComponent.coreEdgeInsets.getter();
  TextComponent.coreEdgeInsets.getter();
  TextComponent.coreEdgeInsets.getter();
  return v1;
}

double key path getter for TextComponent.edgeInsets : TextComponent@<D0>(double *a1@<X8>)
{
  float v2;
  double v3;
  float v4;
  double v5;
  float v6;
  double v7;
  float v8;
  double result;

  TextComponent.coreEdgeInsets.getter();
  v3 = v2;
  TextComponent.coreEdgeInsets.getter();
  v5 = v4;
  TextComponent.coreEdgeInsets.getter();
  v7 = v6;
  TextComponent.coreEdgeInsets.getter();
  result = v8;
  *a1 = v3;
  a1[1] = v5;
  a1[2] = v7;
  a1[3] = v8;
  return result;
}

uint64_t key path setter for TextComponent.edgeInsets : TextComponent(double *a1)
{
  double v1;
  double v2;
  double v3;
  float v4;
  void (*v5)(_BYTE *, _QWORD);
  float *v6;
  void (*v7)(_BYTE *, _QWORD);
  uint64_t v8;
  void (*v9)(_BYTE *, _QWORD);
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, _QWORD);
  uint64_t v12;
  _BYTE v14[32];

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v4 = *a1;
  v5 = (void (*)(_BYTE *, _QWORD))TextComponent.coreEdgeInsets.modify();
  *v6 = v4;
  v5(v14, 0);
  v7 = (void (*)(_BYTE *, _QWORD))TextComponent.coreEdgeInsets.modify();
  *(float *)&v1 = v1;
  *(_DWORD *)(v8 + 4) = LODWORD(v1);
  v7(v14, 0);
  v9 = (void (*)(_BYTE *, _QWORD))TextComponent.coreEdgeInsets.modify();
  *(float *)&v1 = v2;
  *(_DWORD *)(v10 + 8) = LODWORD(v1);
  v9(v14, 0);
  v11 = (uint64_t (*)(_BYTE *, _QWORD))TextComponent.coreEdgeInsets.modify();
  *(float *)&v1 = v3;
  *(_DWORD *)(v12 + 12) = LODWORD(v1);
  return v11(v14, 0);
}

uint64_t TextComponent.edgeInsets.setter(double a1, double a2, double a3, double a4)
{
  float v7;
  void (*v8)(_BYTE *, _QWORD);
  float *v9;
  void (*v10)(_BYTE *, _QWORD);
  uint64_t v11;
  void (*v12)(_BYTE *, _QWORD);
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, _QWORD);
  uint64_t v15;
  _BYTE v17[32];

  v7 = a1;
  v8 = (void (*)(_BYTE *, _QWORD))TextComponent.coreEdgeInsets.modify();
  *v9 = v7;
  v8(v17, 0);
  v10 = (void (*)(_BYTE *, _QWORD))TextComponent.coreEdgeInsets.modify();
  *(float *)&a2 = a2;
  *(_DWORD *)(v11 + 4) = LODWORD(a2);
  v10(v17, 0);
  v12 = (void (*)(_BYTE *, _QWORD))TextComponent.coreEdgeInsets.modify();
  *(float *)&a3 = a3;
  *(_DWORD *)(v13 + 8) = LODWORD(a3);
  v12(v17, 0);
  v14 = (uint64_t (*)(_BYTE *, _QWORD))TextComponent.coreEdgeInsets.modify();
  *(float *)&a4 = a4;
  *(_DWORD *)(v15 + 12) = LODWORD(a4);
  return v14(v17, 0);
}

void (*TextComponent.edgeInsets.modify(double **a1))(uint64_t a1)
{
  uint64_t v1;
  double *v3;
  float v4;
  double v5;
  float v6;
  double v7;
  float v8;
  double v9;
  float v10;

  v3 = (double *)malloc(0x48uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 8) = v1;
  TextComponent.coreEdgeInsets.getter();
  v5 = v4;
  TextComponent.coreEdgeInsets.getter();
  v7 = v6;
  TextComponent.coreEdgeInsets.getter();
  v9 = v8;
  TextComponent.coreEdgeInsets.getter();
  *v3 = v5;
  v3[1] = v7;
  v3[2] = v9;
  v3[3] = v10;
  return TextComponent.edgeInsets.modify;
}

void TextComponent.edgeInsets.modify(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  double v3;
  float v4;
  float v5;
  float v6;
  void (*v7)(uint64_t, _QWORD);
  float *v8;
  void (*v9)(uint64_t, _QWORD);
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD);
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD);
  uint64_t v14;

  v1 = *(void **)a1;
  v2 = *(_QWORD *)a1 + 32;
  v3 = *(double *)(*(_QWORD *)a1 + 24);
  v4 = **(double **)a1;
  v5 = *(double *)(*(_QWORD *)a1 + 8);
  v6 = *(double *)(*(_QWORD *)a1 + 16);
  v7 = (void (*)(uint64_t, _QWORD))TextComponent.coreEdgeInsets.modify();
  *v8 = v4;
  v7(v2, 0);
  v9 = (void (*)(uint64_t, _QWORD))TextComponent.coreEdgeInsets.modify();
  *(float *)(v10 + 4) = v5;
  v9(v2, 0);
  v11 = (void (*)(uint64_t, _QWORD))TextComponent.coreEdgeInsets.modify();
  *(float *)(v12 + 8) = v6;
  v11(v2, 0);
  v13 = (void (*)(uint64_t, _QWORD))TextComponent.coreEdgeInsets.modify();
  *(float *)&v3 = v3;
  *(_DWORD *)(v14 + 12) = LODWORD(v3);
  v13(v2, 0);
  free(v1);
}

uint64_t TextComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  float v22;
  double v23;
  float v24;
  double v25;
  float v26;
  double v27;
  float v28;
  double v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  _QWORD v34[2];

  v34[1] = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TextComponent();
  MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1D95E2300;
  *(_QWORD *)(v12 + 32) = 1702521203;
  *(_QWORD *)(v12 + 40) = 0xE400000000000000;
  TextComponent.size.getter();
  v14 = v13;
  v16 = v15;
  type metadata accessor for CGSize(0);
  *(_QWORD *)(v12 + 48) = v14;
  *(_QWORD *)(v12 + 56) = v16;
  *(_QWORD *)(v12 + 72) = v17;
  *(_QWORD *)(v12 + 80) = 1954047348;
  *(_QWORD *)(v12 + 88) = 0xE400000000000000;
  *(_QWORD *)(v12 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v12 + 96));
  TextComponent.text.getter();
  *(_QWORD *)(v12 + 128) = 0x756F72676B636162;
  *(_QWORD *)(v12 + 136) = 0xEF726F6C6F43646ELL;
  v18 = TextComponent.backgroundColor.getter();
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGColorRef?);
  *(_QWORD *)(v12 + 144) = v18;
  *(_QWORD *)(v12 + 168) = v19;
  strcpy((char *)(v12 + 176), "cornerRadius");
  *(_BYTE *)(v12 + 189) = 0;
  *(_WORD *)(v12 + 190) = -5120;
  TextComponent.cornerRadius.getter();
  v20 = MEMORY[0x1E0DEB188];
  *(_DWORD *)(v12 + 192) = v21;
  *(_QWORD *)(v12 + 216) = v20;
  *(_QWORD *)(v12 + 224) = 0x65736E4965676465;
  *(_QWORD *)(v12 + 232) = 0xEA00000000007374;
  TextComponent.coreEdgeInsets.getter();
  v23 = v22;
  TextComponent.coreEdgeInsets.getter();
  v25 = v24;
  TextComponent.coreEdgeInsets.getter();
  v27 = v26;
  TextComponent.coreEdgeInsets.getter();
  v29 = v28;
  type metadata accessor for UIEdgeInsets(0);
  *(_QWORD *)(v12 + 264) = v30;
  v31 = (double *)swift_allocObject();
  *(_QWORD *)(v12 + 240) = v31;
  v31[2] = v23;
  v31[3] = v25;
  v31[4] = v27;
  v31[5] = v29;
  v32 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v8, 1, 1, v32);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEDFE8], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1D957B510()
{
  return swift_deallocObject();
}

uint64_t static ParticleEmitterComponent.Presets.impact.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(_QWORD *, _QWORD);
  void (*v26)(_QWORD *, _QWORD);
  void (*v27)(_QWORD *, _QWORD);
  void (*v28)(_QWORD *, _QWORD);
  void (*v29)(_QWORD *, _QWORD);
  void (*v30)(_QWORD *, _QWORD);
  void (*v31)(_QWORD *, _QWORD);
  void (*v32)(_QWORD *, _QWORD);
  void (*v33)(_QWORD *, _QWORD);
  void (*v34)(_QWORD *, _QWORD);
  void (*v35)(_QWORD *, _QWORD);
  void (*v36)(_QWORD *, _QWORD);
  void (*v37)(_QWORD *, _QWORD);
  void (*v38)(_QWORD *, _QWORD);
  void (*v39)(_QWORD *, _QWORD);
  void (*v40)(_QWORD *, _QWORD);
  void (*v41)(_QWORD *, _QWORD);
  void (*v42)(_QWORD *, _QWORD);
  void (*v43)(_QWORD *, _QWORD);
  void (*v44)(_QWORD *, _QWORD);
  void (*v45)(_QWORD *, _QWORD);
  void (*v46)(_QWORD *, _QWORD);
  void (*v47)(_QWORD *, _QWORD);
  void (*v48)(_QWORD *, _QWORD);
  void (*v49)(_QWORD *, _QWORD);
  void (*v50)(_QWORD *, _QWORD);
  void (*v51)(_QWORD *, _QWORD);
  void (*v52)(_QWORD *, _QWORD);
  void (*v53)(_QWORD *, _QWORD);
  void (*v54)(_QWORD *, _QWORD);
  void (*v55)(_QWORD *, _QWORD);
  void (*v56)(_QWORD *, _QWORD);
  void (*v57)(_QWORD *, _QWORD);
  void (*v58)(_QWORD *, _QWORD);
  void (*v59)(_QWORD *, _QWORD);
  void (*v60)(_QWORD *, _QWORD);
  void (*v61)(_QWORD *, _QWORD);
  void (*v62)(_QWORD *, _QWORD);
  void (*v63)(_QWORD *, _QWORD);
  char *v64;
  void (*v65)(_QWORD *, _QWORD);
  void *v66;
  id v67;
  void *v68;
  id v69;
  void (*v70)(_QWORD *, _QWORD);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  _QWORD v98[5];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence?);
  MEMORY[0x1E0C80A78](v0);
  v97 = (char *)&v72 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode();
  v95 = *(_QWORD *)(v2 - 8);
  v96 = v2;
  MEMORY[0x1E0C80A78](v2);
  v94 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder();
  v92 = *(_QWORD *)(v4 - 8);
  v93 = v4;
  MEMORY[0x1E0C80A78](v4);
  v91 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve();
  v89 = *(_QWORD *)(v6 - 8);
  v90 = v6;
  MEMORY[0x1E0C80A78](v6);
  v87 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode();
  v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86);
  v84 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode();
  v82 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  v81 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for ParticleEmitterComponent.SpawnOccasion();
  v79 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80);
  v78 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for ParticleEmitterComponent.SimulationSpace();
  v76 = *(_QWORD *)(v77 - 8);
  MEMORY[0x1E0C80A78](v77);
  v75 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for ParticleEmitterComponent.EmitterShape();
  v73 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74);
  v72 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ParticleEmitterComponent.BirthLocation();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ParticleEmitterComponent.BirthDirection();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParticleEmitterComponent.init()();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E0CD51C8], v17);
  ParticleEmitterComponent.birthDirection.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, *MEMORY[0x1E0CD5180], v13);
  ParticleEmitterComponent.birthLocation.setter();
  v88 = xmmword_1D95E2340;
  ParticleEmitterComponent.emissionDirection.setter();
  ParticleEmitterComponent.emissionDuration.setter();
  ParticleEmitterComponent.emissionDurationVariation.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v72, *MEMORY[0x1E0CD4EB8], v74);
  ParticleEmitterComponent.emitterShape.setter();
  ParticleEmitterComponent.emitterShapeSize.setter();
  ParticleEmitterComponent.idleDuration.setter();
  ParticleEmitterComponent.idleDurationVariation.setter();
  ParticleEmitterComponent.shouldLoop.setter();
  ParticleEmitterComponent.particlesInheritTransform.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v75, *MEMORY[0x1E0CD51F8], v77);
  ParticleEmitterComponent.fieldSimulationSpace.setter();
  ParticleEmitterComponent.spawnInheritsParentColor.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v78, *MEMORY[0x1E0CD5198], v80);
  ParticleEmitterComponent.spawnOccasion.setter();
  ParticleEmitterComponent.spawnSpreadFactor.setter();
  ParticleEmitterComponent.spawnSpreadFactorVariation.setter();
  ParticleEmitterComponent.spawnVelocityFactor.setter();
  ParticleEmitterComponent.speed.setter();
  ParticleEmitterComponent.speedVariation.setter();
  ParticleEmitterComponent.warmupDuration.setter();
  ParticleEmitterComponent.resetSimulation()();
  v25 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  v25(v98, 0);
  v26 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  v26(v98, 0);
  v27 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  v27(v98, 0);
  v28 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  v28(v98, 0);
  v29 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  v29(v98, 0);
  v30 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  v30(v98, 0);
  v31 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  v31(v98, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v82 + 104))(v81, *MEMORY[0x1E0CD4F38], v83);
  v32 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  v32(v98, 0);
  v33 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  v33(v98, 0);
  v34 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  v34(v98, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v84, *MEMORY[0x1E0CD50C8], v86);
  v35 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  v35(v98, 0);
  v36 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  v36(v98, 0);
  v37 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  v37(v98, 0);
  v38 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  v38(v98, 0);
  v39 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  v39(v98, 0);
  v40 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  v40(v98, 0);
  v41 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  v41(v98, 0);
  v42 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  v42(v98, 0);
  v43 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  v43(v98, 0);
  v44 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  v44(v98, 0);
  v45 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  v45(v98, 0);
  v46 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  v46(v98, 0);
  v47 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  v47(v98, 0);
  v48 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  v48(v98, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v87, *MEMORY[0x1E0CD4F00], v90);
  v49 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  v49(v98, 0);
  v50 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  v50(v98, 0);
  v51 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  v51(v98, 0);
  v52 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  v52(v98, 0);
  v53 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  v53(v98, 0);
  v54 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v54(v98, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v92 + 104))(v91, *MEMORY[0x1E0CD50E8], v93);
  v55 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  v55(v98, 0);
  v56 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  v56(v98, 0);
  v57 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  v57(v98, 0);
  v58 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  v58(v98, 0);
  CGColorCreateGenericRGB(255.0, 248.0, 228.0, 0.26);
  v59 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  v59(v98, 0);
  CGColorCreateGenericRGB(134.0, 134.0, 134.0, 0.07);
  v60 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  v60(v98, 0);
  v61 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  v61(v98, 0);
  v62 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  v62(v98, 0);
  v63 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  v63(v98, 0);
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v94, *MEMORY[0x1E0CD4F78], v96);
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.setter();
  v64 = v97;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v97, v24, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v64, 0, 1, v21);
  v65 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.imageSequence.setter();
  v65(v98, 0);
  type metadata accessor for TextureResource();
  v66 = (void *)MEMORY[0x1DF090310](0xD000000000000010, 0x80000001D95DCA10);
  v67 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v66);

  if (one-time initialization token for textureLoader != -1)
    swift_once();
  v68 = (void *)textureLoader;
  v98[3] = &type metadata for TextureLoader;
  v98[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v98[0] = v68;
  v69 = v68;
  static TextureResource.load(named:in:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);

  v70 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  v70(v98, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
}

unint64_t lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureLoader and conformance TextureLoader;
  if (!lazy protocol witness table cache variable for type TextureLoader and conformance TextureLoader)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for TextureLoader, &type metadata for TextureLoader);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureLoader and conformance TextureLoader);
  }
  return result;
}

uint64_t key path setter for EntityScaleGestureRecognizer.entity : EntityScaleGestureRecognizer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = swift_retain();
  EntityScaleGestureRecognizer.entity.willset(v5);
  v6 = (_QWORD *)(v4 + OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity);
  swift_beginAccess();
  *v6 = v2;
  v6[1] = v3;
  return swift_release();
}

id EntityScaleGestureRecognizer.entity.willset(uint64_t a1)
{
  char *v1;
  char *v2;
  id result;
  char *v5;
  char v6;

  v2 = v1;
  result = objc_msgSend(v2, sel_isEnabled);
  if ((_DWORD)result)
  {
    v5 = &v2[OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity];
    result = (id)swift_beginAccess();
    if (*(_QWORD *)v5)
    {
      if (a1)
      {
        type metadata accessor for Entity();
        lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4648], MEMORY[0x1E0CD4660]);
        swift_retain_n();
        v6 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        result = (id)swift_release();
        if ((v6 & 1) != 0)
          return result;
      }
    }
    else if (!a1)
    {
      return result;
    }
    return objc_msgSend(v2, sel_setState_, 5);
  }
  return result;
}

uint64_t EntityScaleGestureRecognizer.entity.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t EntityScaleGestureRecognizer.entity.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;

  EntityScaleGestureRecognizer.entity.willset(a1);
  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_release();
}

void (*EntityScaleGestureRecognizer.entity.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  _OWORD *v5;

  v3 = (char *)malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity;
  *((_QWORD *)v3 + 5) = v1;
  *((_QWORD *)v3 + 6) = v4;
  v5 = (_OWORD *)(v1 + v4);
  swift_beginAccess();
  *(_OWORD *)(v3 + 24) = *v5;
  swift_retain();
  return EntityScaleGestureRecognizer.entity.modify;
}

void EntityScaleGestureRecognizer.entity.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48));
  if ((a2 & 1) != 0)
  {
    v6 = swift_retain();
    EntityScaleGestureRecognizer.entity.willset(v6);
    *v5 = v3;
    v5[1] = v4;
    swift_release();
  }
  else
  {
    EntityScaleGestureRecognizer.entity.willset(v3);
    *v5 = v3;
    v5[1] = v4;
  }
  swift_release();
  free(v2);
}

void EntityScaleGestureRecognizer.touchesBegan(_:with:)(uint64_t a1, void *a2)
{
  void *v2;
  id v4;
  id v5;
  uint64_t v6;
  Class isa;
  objc_super v8;

  v4 = v2;
  v5 = a2;
  v6 = swift_bridgeObjectRetain();
  specialized Set._Variant.filter(_:)(v6, v4, v5);

  if (objc_msgSend(v4, sel_numberOfTouches))
  {
    type metadata accessor for UITouch();
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for UITouch, MEMORY[0x1E0DEFCF8]);
    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_release();
    v8.receiver = v4;
    v8.super_class = (Class)type metadata accessor for EntityScaleGestureRecognizer();
    objc_msgSendSuper2(&v8, sel_touchesBegan_withEvent_, isa, v5);

  }
  else
  {
    swift_release();
    objc_msgSend(v4, sel_setState_, 5);
  }
}

Swift::Bool __swiftcall EntityScaleGestureRecognizer.canPrevent(_:)(UIGestureRecognizer *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  UIGestureRecognizer *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t);
  UIGestureRecognizer *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  objc_super v16;

  v2 = v1;
  swift_getObjectType();
  v4 = swift_conformsToProtocol2();
  if (v4)
    v5 = v4;
  else
    v5 = 0;
  if (v4)
    v6 = a1;
  else
    v6 = 0;
  if (!v6)
    goto LABEL_12;
  v7 = (uint64_t *)&v2[OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity];
  swift_beginAccess();
  v8 = *v7;
  if (!v8)
    goto LABEL_12;
  ObjectType = swift_getObjectType();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  v11 = a1;
  swift_retain();
  v12 = v10(ObjectType, v5);
  if (!v12)
  {

    swift_release();
LABEL_12:
    v16.receiver = v2;
    v16.super_class = (Class)type metadata accessor for EntityScaleGestureRecognizer();
    v14 = -[UIGestureRecognizer canPreventGestureRecognizer:](&v16, sel_canPreventGestureRecognizer_, a1);
    return v14 & 1;
  }
  v13 = v12;
  swift_retain();
  v14 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v13, v8);

  swift_release();
  swift_release_n();
  return v14 & 1;
}

id EntityScaleGestureRecognizer.__allocating_init(target:action:)(_QWORD *a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v13;

  v4 = a1[3];
  if (v4)
  {
    v6 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v7 = *(_QWORD *)(v4 - 8);
    MEMORY[0x1E0C80A78](v6);
    v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v7 + 16))(v9);
    v10 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v10 = 0;
  }
  v11 = objc_msgSend(objc_allocWithZone(v2), sel_initWithTarget_action_, v10, a2);
  swift_unknownObjectRelease();
  return v11;
}

id EntityScaleGestureRecognizer.init(target:action:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  objc_class *v12;
  id v13;
  objc_super v15;
  _QWORD v16[3];
  uint64_t v17;

  v5 = &v2[OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  outlined init with copy of Any?(a1, (uint64_t)v16);
  v6 = v17;
  if (v17)
  {
    v7 = __swift_project_boxed_opaque_existential_1(v16, v17);
    v8 = *(_QWORD *)(v6 - 8);
    MEMORY[0x1E0C80A78](v7);
    v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v8 + 16))(v10);
    v11 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    v11 = 0;
  }
  v12 = (objc_class *)type metadata accessor for EntityScaleGestureRecognizer();
  v15.receiver = v2;
  v15.super_class = v12;
  v13 = objc_msgSendSuper2(&v15, sel_initWithTarget_action_, v11, a2);
  swift_unknownObjectRelease();
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, &demangling cache variable for type metadata for Any?);
  return v13;
}

id EntityScaleGestureRecognizer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EntityScaleGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void (*protocol witness for EntityGestureRecognizer.entity.modify in conformance EntityScaleGestureRecognizer(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityScaleGestureRecognizer.entity.modify(v2);
  return protocol witness for EntityGestureRecognizer.entity.modify in conformance EntityTranslationGestureRecognizer;
}

uint64_t type metadata accessor for EntityScaleGestureRecognizer()
{
  return objc_opt_self();
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D957D900@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  _OWORD *v3;

  v3 = (_OWORD *)(*a1 + OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t method lookup function for EntityScaleGestureRecognizer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EntityScaleGestureRecognizer.entity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of EntityScaleGestureRecognizer.entity.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of EntityScaleGestureRecognizer.entity.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t one-time initialization function for groupActivities()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.groupActivities);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.groupActivities);
  return Logger.init(subsystem:category:)();
}

uint64_t RESyncHandle.__deallocating_deinit()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    RESyncRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RESyncHandle()
{
  return objc_opt_self();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);
  return swift_release();
}

Swift::Void __swiftcall RKARSystem.updateCollaborationState()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  unsigned int v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;

  v1 = OBJC_IVAR____TtC10RealityKit10RKARSystem_session;
  v2 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session), sel_configuration);
  if (!v2)
  {
LABEL_5:
    v6 = objc_msgSend(*(id *)(v0 + v1), sel_configuration);
    if (!v6)
    {
      v5 = 0;
      goto LABEL_14;
    }
    v3 = v6;
    objc_opt_self();
    v7 = (void *)swift_dynamicCastObjCClass();
    if (v7)
    {
      v8 = objc_msgSend(v7, sel_templateConfiguration);
      if (v8)
      {
        v9 = v8;
        objc_opt_self();
        v10 = (void *)swift_dynamicCastObjCClass();
        if (v10)
        {
          v5 = objc_msgSend(v10, sel_isCollaborationEnabled);

          goto LABEL_13;
        }

      }
    }
    v5 = 0;
    goto LABEL_13;
  }
  v3 = v2;
  objc_opt_self();
  v4 = (void *)swift_dynamicCastObjCClass();
  if (!v4)
  {

    goto LABEL_5;
  }
  v5 = objc_msgSend(v4, sel_isCollaborationEnabled);
LABEL_13:

LABEL_14:
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_collaborationStarted) == 1)
  {
    if ((v5 & 1) == 0)
      RKARSystem.endCollaborativeMapBuilding()();
  }
  else if (v5)
  {
    RKARSystem.startCollaborativeMapBuilding()();
  }
}

Swift::Void __swiftcall RKARSystem.endCollaborativeMapBuilding()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = OBJC_IVAR____TtC10RealityKit10RKARSystem_collaborationStarted;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_collaborationStarted) == 1)
  {
    v2 = v0;
    v3 = MEMORY[0x1DF091D08](v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (v3)
    {
      v4 = (void *)v3;
      if (*(_QWORD *)(v3 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
      {
        swift_retain();

        v5 = dispatch thunk of Scene.synchronizationService.getter();
        swift_release();
        if (v5)
        {
          type metadata accessor for MultipeerConnectivityService();
          v6 = swift_dynamicCastClass();
          if (v6)
          {
            MEMORY[0x1DF090E2C](*(_QWORD *)(v6 + 24));
            v7 = OBJC_IVAR____TtC10RealityKit10RKARSystem_netSessionObserver;
            if (*(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_netSessionObserver))
            {
              RESyncNetSessionRemoveObserver();
              RERelease();
              *(_QWORD *)(v2 + v7) = 0;
            }
            v8 = (_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_connectedPeers);
            swift_beginAccess();
            *v8 = MEMORY[0x1E0DEE9D8];
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            *(_BYTE *)(v2 + v1) = 0;
          }
          else
          {
            swift_unknownObjectRelease();
          }
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void RKARSystem.startCollaborativeMapBuilding()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t (*v22)();
  uint64_t v23;

  v1 = OBJC_IVAR____TtC10RealityKit10RKARSystem_collaborationStarted;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_collaborationStarted) & 1) == 0)
  {
    v2 = v0;
    v3 = MEMORY[0x1DF091D08](v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (v3)
    {
      v4 = (void *)v3;
      if (*(_QWORD *)(v3 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
      {
        swift_retain();

        v5 = dispatch thunk of Scene.synchronizationService.getter();
        swift_release();
        if (v5)
        {
          type metadata accessor for MultipeerConnectivityService();
          v6 = swift_dynamicCastClass();
          if (v6)
          {
            MEMORY[0x1DF090E2C](*(_QWORD *)(v6 + 24));
            v7 = RESyncNetSessionObserverCreate();
            *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_netSessionObserver) = v7;
            if (v7)
            {
              v22 = ARView.PostProcessContext.device.modify;
              v23 = 0;
              v8 = MEMORY[0x1E0C809B0];
              v18 = MEMORY[0x1E0C809B0];
              v19 = 1107296256;
              v20 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
              v21 = &block_descriptor_1;
              v9 = _Block_copy(&v18);
              swift_release();
              RENetSessionObserverOnStart();
              _Block_release(v9);
              v10 = swift_allocObject();
              swift_unknownObjectWeakInit();
              v22 = (uint64_t (*)())partial apply for closure #2 in RKARSystem.startCollaborativeMapBuilding();
              v23 = v10;
              v18 = v8;
              v19 = 1107296256;
              v20 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer) -> ();
              v21 = &block_descriptor_6;
              v11 = _Block_copy(&v18);
              swift_release();
              RENetSessionObserverOnStop();
              _Block_release(v11);
              v12 = swift_allocObject();
              swift_unknownObjectWeakInit();
              v22 = (uint64_t (*)())partial apply for closure #3 in RKARSystem.startCollaborativeMapBuilding();
              v23 = v12;
              v18 = v8;
              v19 = 1107296256;
              v20 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer) -> ();
              v21 = &block_descriptor_10_0;
              v13 = _Block_copy(&v18);
              swift_release();
              RENetSessionObserverOnParticipantJoin();
              _Block_release(v13);
              v14 = swift_allocObject();
              swift_unknownObjectWeakInit();
              v22 = (uint64_t (*)())partial apply for closure #4 in RKARSystem.startCollaborativeMapBuilding();
              v23 = v14;
              v18 = v8;
              v19 = 1107296256;
              v20 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer, @unowned RENetParticipantError) -> ();
              v21 = &block_descriptor_14;
              v15 = _Block_copy(&v18);
              swift_release();
              RENetSessionObserverOnParticipantLeave();
              _Block_release(v15);
              v16 = swift_allocObject();
              swift_unknownObjectWeakInit();
              v22 = (uint64_t (*)())partial apply for closure #5 in RKARSystem.startCollaborativeMapBuilding();
              v23 = v16;
              v18 = v8;
              v19 = 1107296256;
              v20 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UInt64, @unowned UnsafeRawPointer, @unowned UInt32) -> ();
              v21 = &block_descriptor_18;
              v17 = _Block_copy(&v18);
              swift_release();
              RENetSessionObserverOnReceiveUserData();
              _Block_release(v17);
              RESyncNetSessionAddObserver();
            }
            swift_unknownObjectRelease();
            *(_BYTE *)(v2 + v1) = 1;
          }
          else
          {
            swift_unknownObjectRelease();
          }
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void closure #2 in RKARSystem.startCollaborativeMapBuilding()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = a3 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1DF091D08](v3);
  if (v4)
  {
    v5 = (void *)v4;
    RKARSystem.endCollaborativeMapBuilding()();

  }
}

void closure #3 in RKARSystem.startCollaborativeMapBuilding()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a3 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x1DF091D08](v4);
  if (v5)
  {
    v6 = (char *)v5;
    type metadata accessor for REARNetworkParticipant();
    *(_QWORD *)(swift_allocObject() + 16) = a2;
    RERetain();
    v7 = &v6[OBJC_IVAR____TtC10RealityKit10RKARSystem_connectedPeers];
    v8 = swift_beginAccess();
    MEMORY[0x1DF0903A0](v8);
    if (*(_QWORD *)((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFF8)
                                                                                + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

  }
}

uint64_t closure #4 in RKARSystem.startCollaborativeMapBuilding()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a4 + 16;
  swift_beginAccess();
  result = MEMORY[0x1DF091D08](v6);
  if (result)
  {
    v8 = (void *)result;
    v9 = (uint64_t *)(result + OBJC_IVAR____TtC10RealityKit10RKARSystem_connectedPeers);
    swift_beginAccess();
    v10 = *v9;
    swift_bridgeObjectRetain();

    if ((unint64_t)v10 >> 62)
      goto LABEL_19;
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    v12 = swift_bridgeObjectRetain();
    if (v11)
    {
      while (1)
      {
        v4 = v10 & 0xC000000000000001;
        if ((v10 & 0xC000000000000001) != 0)
          break;
        if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          if (*(_QWORD *)(*(_QWORD *)(v10 + 32) + 16) != a2)
            goto LABEL_7;
          goto LABEL_25;
        }
        __break(1u);
LABEL_30:
        v11 = v12;
        if (!v12)
          goto LABEL_8;
      }
      while (1)
      {
        v18 = *(_QWORD *)(MEMORY[0x1DF0906F4](0, v10) + 16);
        swift_unknownObjectRelease();
        if (v18 == a2)
          break;
LABEL_7:
        v13 = v11 - 1;
        if (v11 == 1)
          goto LABEL_8;
        v14 = 0;
        while (v13 != v14)
        {
          v16 = v14 + 1;
          if (v4)
          {
            v15 = *(_QWORD *)(MEMORY[0x1DF0906F4](v16, v10) + 16);
            swift_unknownObjectRelease();
            if (v15 == a2)
              goto LABEL_16;
          }
          else
          {
            if (v16 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_18;
            if (*(_QWORD *)(*(_QWORD *)(v10 + 8 * v14 + 40) + 16) == a2)
            {
LABEL_16:
              swift_bridgeObjectRelease();
              v17 = v14 + 1;
              goto LABEL_26;
            }
          }
          if (v13 == ++v14)
            goto LABEL_8;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        if (v10 < 0)
          v11 = v10;
        else
          v11 = v10 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v12 = _CocoaArrayWrapper.endIndex.getter();
        if ((v12 & 0x8000000000000000) == 0)
          goto LABEL_30;
        __break(1u);
      }
LABEL_25:
      swift_bridgeObjectRelease();
      v17 = 0;
LABEL_26:
      specialized Array.remove(at:)(v17);
      swift_release();
    }
    else
    {
LABEL_8:
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer, @unowned RENetParticipantError) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);
  return swift_release();
}

void closure #5 in RKARSystem.startCollaborativeMapBuilding()(int a1, int a2, _BYTE *__src, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;

  v5 = a5 + 16;
  if (a4)
  {
    v7 = a4;
    if (a4 <= 0xE)
    {
      v10 = specialized Data.InlineData.init(_:)(__src, &__src[a4]);
      v11 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      v8 = __DataStorage.init(bytes:length:)();
      v9 = v8;
      if (a4 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        v10 = swift_allocObject();
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)(v10 + 24) = v7;
        v11 = v9 | 0x8000000000000000;
      }
      else
      {
        v10 = v7 << 32;
        v11 = v8 | 0x4000000000000000;
      }
    }
  }
  else
  {
    v10 = 0;
    v11 = 0xC000000000000000;
  }
  swift_beginAccess();
  v13 = MEMORY[0x1DF091D08](v5);
  if (v13)
  {
    v14 = (char *)v13;
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARCollaborationData);
    v15 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
    v16 = (void *)v15;
    if (v15)
    {
      objc_msgSend(*(id *)&v14[OBJC_IVAR____TtC10RealityKit10RKARSystem_session], sel_updateWithCollaborationData_, v15);

    }
    outlined consume of Data._Representation(v10, v11);

  }
  else
  {
    outlined consume of Data._Representation(v10, v11);
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UInt64, @unowned UnsafeRawPointer, @unowned UInt32) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v9(a2, a3, a4, a5);
  return swift_release();
}

uint64_t RKARSystem.sendDataToPeers(_:sendUnreliably:)(void *a1, char a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_connectedPeers);
  swift_beginAccess();
  if ((unint64_t)*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
      return 0;
  }
  else if (!*(_QWORD *)((*v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  result = MEMORY[0x1DF091D08](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (!result)
    return 0;
  v7 = (void *)result;
  if (!*(_QWORD *)(result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    __break(1u);
    goto LABEL_14;
  }
  swift_retain();

  v8 = dispatch thunk of Scene.synchronizationService.getter();
  swift_release();
  if (!v8)
    return 0;
  type metadata accessor for MultipeerConnectivityService();
  v9 = swift_dynamicCastClass();
  v10 = v9 != 0;
  if (!v9)
  {
LABEL_9:
    swift_unknownObjectRelease();
    return v10;
  }
  v11 = MEMORY[0x1DF090E2C](*(_QWORD *)(v9 + 24));
  v12 = *v5;
  result = swift_weakLoadStrong();
  if (result)
  {
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v12;
    *(_BYTE *)(v13 + 24) = a2 & 1;
    *(_QWORD *)(v13 + 32) = v11;
    *(_QWORD *)(v13 + 40) = a1;
    swift_bridgeObjectRetain();
    v14 = a1;
    dispatch thunk of __Engine.asyncOnEngineQueue(_:)();
    swift_release();
    swift_release();
    goto LABEL_9;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t closure #1 in RKARSystem.sendDataToPeers(_:sendUnreliably:)(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t PeerID;
  id v11;
  id v12;
  id v13;

  if (!(a1 >> 62))
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v7 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v7 >= 1)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x1DF0906F4](i, a1);
      else
        swift_retain();
      PeerID = RESyncParticipantGetPeerID();
      v11 = objc_retainAutorelease(a4);
      v12 = objc_msgSend(v11, sel_bytes);
      v13 = objc_msgSend(v11, sel_length);
      if ((a2 & 1) != 0)
        MEMORY[0x1DF090EF8](a3, PeerID, v12, v13, 3);
      else
        MEMORY[0x1DF090EEC](a3, PeerID, v12, v13, 3);
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t REARNetworkParticipant.__deallocating_deinit()
{
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for REARNetworkParticipant()
{
  return objc_opt_self();
}

uint64_t sub_1D957E9A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RKARSystem.sendDataToPeers(_:sendUnreliably:)()
{
  uint64_t v0;

  return closure #1 in RKARSystem.sendDataToPeers(_:sendUnreliably:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_1D957E9FC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #2 in RKARSystem.startCollaborativeMapBuilding()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #2 in RKARSystem.startCollaborativeMapBuilding()(a1, a2, v2);
}

void partial apply for closure #3 in RKARSystem.startCollaborativeMapBuilding()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #3 in RKARSystem.startCollaborativeMapBuilding()(a1, a2, v2);
}

uint64_t partial apply for closure #4 in RKARSystem.startCollaborativeMapBuilding()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #4 in RKARSystem.startCollaborativeMapBuilding()(a1, a2, a3, v3);
}

void partial apply for closure #5 in RKARSystem.startCollaborativeMapBuilding()(int a1, int a2, _BYTE *a3, unsigned int a4)
{
  uint64_t v4;

  closure #5 in RKARSystem.startCollaborativeMapBuilding()(a1, a2, a3, a4, v4);
}

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

Swift::Void __swiftcall ARView.didMoveToWindow()()
{
  char *v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  objc_super v13;

  v13.receiver = v0;
  v13.super_class = (Class)type metadata accessor for ARView();
  objc_msgSendSuper2(&v13, sel_didMoveToWindow);
  v1 = *(id *)&v0[OBJC_IVAR____TtC10RealityKit6ARView_renderView];
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setFrame_);

  v2 = objc_msgSend(v0, sel_window);
  if (v2 && (v3 = v2, v4 = objc_msgSend(v2, sel_windowScene), v3, v4))
  {
    v5 = (uint64_t)objc_msgSend(v4, sel_interfaceOrientation);

  }
  else
  {
    v5 = 1;
  }
  *(_QWORD *)&v0[OBJC_IVAR____TtC10RealityKit6ARView_interfaceOrientation] = v5;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation] = v5;
  v6 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v7 = objc_msgSend(v0, sel_window);
  if (v7)
  {
    v8 = v7;
    v9 = (void *)MEMORY[0x1DF090310](0xD00000000000001ELL, 0x80000001D95DCB70);
    objc_msgSend(v6, sel_addObserver_selector_name_object_, v0, sel_windowWillRotateWithNotification_, v9, v8);

    v10 = (void *)MEMORY[0x1DF090310](0xD000000000000027, 0x80000001D95DCB90);
    objc_msgSend(v6, sel_addObserver_selector_name_object_, v0, sel_windowWillAnimateRotationWithNotification_, v10, v8);

    v11 = (void *)MEMORY[0x1DF090310](0xD00000000000001DLL, 0x80000001D95DCBC0);
    v12 = v8;
    objc_msgSend(v6, sel_addObserver_selector_name_object_, v0, sel_windowDidRotateWithNotification_, v11, v12);

  }
}

Swift::Void __swiftcall ARView.windowWillRotate(notification:)(NSNotification notification)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  void *v10;
  char v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  __int128 *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  char *v22;
  id v23;
  void *v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  BOOL v37;
  uint64_t v38;
  id v39;
  unint64_t v40;
  _QWORD v41[5];
  __int128 v42;
  __int128 v43;
  CGRect v44;
  CGRect v45;

  v2 = v1;
  v4 = type metadata accessor for __AssetRef();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (-[objc_class object](notification.super.isa, sel_object))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v42 = 0u;
    v43 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v42, (uint64_t)v41);
  if (!v41[3])
  {
    v17 = (__int128 *)v41;
LABEL_13:
    outlined destroy of Any?((uint64_t)v17);
    return;
  }
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for UIWindow);
  if ((swift_dynamicCast() & 1) == 0)
    return;
  v8 = v39;
  v9 = objc_msgSend(v1, sel_window);
  if (!v9)
  {

    goto LABEL_15;
  }
  v10 = v9;
  v8 = v8;
  v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
LABEL_15:

    return;
  }
  v12 = -[objc_class userInfo](notification.super.isa, sel_userInfo);
  if (!v12)
  {
    v42 = 0u;
    v43 = 0u;
LABEL_26:

    v17 = &v42;
    goto LABEL_13;
  }
  v13 = v12;
  v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v39 = (id)0xD000000000000021;
  v40 = 0x80000001D95DCC00;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v14 + 16) && (v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v41), (v16 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)&v42);
  }
  else
  {
    v42 = 0u;
    v43 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v41);
  if (!*((_QWORD *)&v43 + 1))
    goto LABEL_26;
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_15;
  v18 = OBJC_IVAR____TtC10RealityKit6ARView_interfaceOrientation;
  v19 = (void *)v41[0];
  *(_QWORD *)&v2[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation] = *(_QWORD *)&v2[OBJC_IVAR____TtC10RealityKit6ARView_interfaceOrientation];
  *(_QWORD *)&v2[v18] = objc_msgSend(v19, sel_integerValue);
  v20 = *(void **)&v2[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (!v20)
  {
    __break(1u);
    return;
  }
  v21 = v20;
  swift_retain();
  dispatch thunk of __RERenderGraphEmitter.__handle.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  RERenderGraphEmitterAssetSetRuntimeSettingBool();

  v22 = &v2[OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation];
  swift_beginAccess();
  if ((*v22 & 1) != 0 || (v23 = objc_msgSend(v2, sel_window)) == 0)
  {

    goto LABEL_15;
  }
  v24 = v23;
  objc_msgSend(v2, sel_frame);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  objc_msgSend(v24, sel_bounds);
  v45.origin.x = v33;
  v45.origin.y = v34;
  v45.size.width = v35;
  v45.size.height = v36;
  v44.origin.x = v26;
  v44.origin.y = v28;
  v44.size.width = v30;
  v44.size.height = v32;
  v37 = CGRectEqualToRect(v44, v45);

  if (v37)
    v2[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] = 1;
}

Swift::Void __swiftcall ARView.updateWindowRotation()()
{
  char *v0;
  uint64_t v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  _QWORD v8[6];

  v1 = OBJC_IVAR____TtC10RealityKit6ARView_updateAfterCounterRotation;
  if (v0[OBJC_IVAR____TtC10RealityKit6ARView_updateAfterCounterRotation] == 1)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.renderService.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
    type metadata accessor for RERenderManager();
    swift_dynamicCast();
    dispatch thunk of RERenderManager.waitUntilScheduled()();
    v2 = *(void **)&v0[OBJC_IVAR____TtC10RealityKit6ARView_renderView];
    v8[0] = 0x3FF0000000000000;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0x3FF0000000000000;
    v8[4] = 0;
    v8[5] = 0;
    objc_msgSend(v2, sel_setTransform_, v8);
    objc_msgSend(v0, sel_bounds);
    v4 = v3;
    v6 = v5;
    objc_msgSend(v0, sel_contentScaleFactor);
    ARView.resizeDrawable(size:scaleFactor:)(v4, v6, v7);
    swift_release();
    v0[v1] = 0;
  }
}

uint64_t specialized ARView.windowWillAnimateRotation(notification:)()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t result;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  _BOOL4 v21;
  id v22;
  uint64_t v23;
  double MidX;
  double MidY;
  uint64_t v29;
  BOOL v30;
  float v31;
  uint64_t v32;
  void *v36;
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  CGAffineTransform v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation];
  result = swift_beginAccess();
  if ((*v2 & 1) == 0 && v1[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] == 1)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.renderService.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
    type metadata accessor for RERenderManager();
    swift_dynamicCast();
    dispatch thunk of RERenderManager.waitUntilScheduled()();
    v4 = OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation;
    v5 = (float)ARCameraToDisplayRotation();
    v6 = ARCameraToDisplayRotation();
    v7 = SPAngleMakeWithDegrees((float)((float)v6 - v5));
    if (fabsf(fabsf(v7) + -3.1416) <= 0.00000011921)
    {
      v29 = *(_QWORD *)&v1[v4];
      v30 = v29 == 4 || v29 == 1;
      v31 = -0.00000023842;
      if (v30)
        v31 = 0.00000023842;
      if (v7 >= 0.0)
        v31 = -v31;
      v7 = v31 + v7;
      v22 = *(id *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_renderView];
      objc_msgSend(v1, sel_bounds);
      MidX = CGRectGetMidX(v44);
      objc_msgSend(v1, sel_bounds);
    }
    else
    {
      v8 = OBJC_IVAR____TtC10RealityKit6ARView_renderView;
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_renderView], sel_bounds);
      v10 = v9;
      v12 = v11;
      v14 = v13;
      v16 = v15;
      objc_msgSend(v1, sel_bounds);
      v45.origin.x = v17;
      v45.origin.y = v18;
      v45.size.width = v19;
      v45.size.height = v20;
      v42.origin.x = v10;
      v42.origin.y = v12;
      v42.size.width = v14;
      v42.size.height = v16;
      v21 = CGRectEqualToRect(v42, v45);
      v22 = *(id *)&v1[v8];
      objc_msgSend(v1, sel_bounds);
      if (v21)
      {
        MidX = CGRectGetMidY(*(CGRect *)&v23);
        objc_msgSend(v1, sel_bounds);
        MidY = CGRectGetMidX(v43);
LABEL_16:
        objc_msgSend(v22, sel_setCenter_, MidX, MidY);

        v36 = *(void **)&v1[OBJC_IVAR____TtC10RealityKit6ARView_renderView];
        CGAffineTransformMakeRotation(&v41, v7);
        v39 = *(_OWORD *)&v41.c;
        v40 = *(_OWORD *)&v41.a;
        v38 = *(_OWORD *)&v41.tx;
        v37 = v36;
        *(_OWORD *)&v41.a = v40;
        *(_OWORD *)&v41.c = v39;
        *(_OWORD *)&v41.tx = v38;
        objc_msgSend(v37, sel_setTransform_, &v41);

        return swift_release();
      }
      MidX = CGRectGetMidX(*(CGRect *)&v23);
      objc_msgSend(v1, sel_bounds);
    }
    MidY = CGRectGetMidY(*(CGRect *)&v32);
    goto LABEL_16;
  }
  return result;
}

double SPAngleMakeWithDegrees(double a1)
{
  return a1 / 180.0 * 3.14159265;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t static MeshResource.generateText(_:extrusionDepth:font:containerFrame:alignment:lineBreakMode:)()
{
  type metadata accessor for TextMeshResource();
  return static TextMeshResource.makeMeshResource(_:extrusionDepth:font:containerFrame:alignment:lineBreakMode:segmentDensity:)();
}

uint64_t static MeshResource.__generateText(_:extrusionDepth:font:containerFrame:alignment:lineBreakMode:segmentCount:)()
{
  type metadata accessor for TextMeshResource();
  return static TextMeshResource.makeMeshResource(_:extrusionDepth:font:containerFrame:alignment:lineBreakMode:segmentDensity:)();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  char v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[16];
  unint64_t v43;
  unint64_t v44;

  if ((SpatialTrackingSession.UnavailableCapabilities.anyUnavailableCapabilities.getter() & 1) == 0)
    return 0;
  v0 = *(_QWORD *)(SpatialTrackingSession.UnavailableCapabilities.anchor.getter() + 16);
  swift_bridgeObjectRelease();
  if (v0)
  {
    v43 = 0x203A726F68636E61;
    v44 = 0xE90000000000005BLL;
    v1 = SpatialTrackingSession.UnavailableCapabilities.anchor.getter();
    v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy17RealityFoundation22SpatialTrackingSessionC13ConfigurationV16AnchorCapabilityVG_SSs5NeverOTg504_s17d12Foundation22fgh57C23UnavailableCapabilitiesV0A3KitE11descriptionSSvgSSAC13i3V16jK54Vcfu_33_0e2f2957bef5a9ec78f2a038ea1e8673AKSSTf3nnnpk_nTf1cn_nTm(v1, (uint64_t)v42, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD4C68], (uint64_t (*)(uint64_t))specialized Set.startIndex.getter, MEMORY[0x1E0CD4C28], (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized _NativeSet.index(after:));
    swift_bridgeObjectRelease();
    v41 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v3 = BidirectionalCollection<>.joined(separator:)();
    v5 = v4;
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = v3;
    v6._object = v5;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 93;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    v8 = v43;
    v9 = v44;
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v12 = v10[2];
    v11 = v10[3];
    if (v12 >= v11 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
    v10[2] = v12 + 1;
    v13 = &v10[2 * v12];
    v13[4] = v8;
    v13[5] = v9;
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v15 = *(_QWORD *)(SpatialTrackingSession.UnavailableCapabilities.sceneUnderstanding.getter() + 16);
  isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
  if (v15)
  {
    v43 = 0;
    v44 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v43 = 0xD000000000000015;
    v44 = 0x80000001D95DCC50;
    v17 = SpatialTrackingSession.UnavailableCapabilities.sceneUnderstanding.getter();
    v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy17RealityFoundation22SpatialTrackingSessionC13ConfigurationV16AnchorCapabilityVG_SSs5NeverOTg504_s17d12Foundation22fgh57C23UnavailableCapabilitiesV0A3KitE11descriptionSSvgSSAC13i3V16jK54Vcfu_33_0e2f2957bef5a9ec78f2a038ea1e8673AKSSTf3nnnpk_nTf1cn_nTm(v17, (uint64_t)&v40, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD4CC0], (uint64_t (*)(uint64_t))specialized Set.startIndex.getter, MEMORY[0x1E0CD4C98], (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))specialized _NativeSet.index(after:));
    swift_bridgeObjectRelease();
    v41 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v19 = BidirectionalCollection<>.joined(separator:)();
    v21 = v20;
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = v19;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 93;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    v24 = v43;
    v25 = v44;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      v10 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v27 = v10[2];
    v26 = v10[3];
    if (v27 >= v26 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v10);
      v10 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v10[2] = v27 + 1;
    v28 = &v10[2 * v27];
    v28[4] = v24;
    v28[5] = v25;
  }
  v29 = MEMORY[0x1DF08FC20](isUniquelyReferenced_nonNull_native);
  if (v29 != 2)
  {
    v30 = v29;
    v43 = 0;
    v44 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v43 = 0xD00000000000001CLL;
    v44 = 0x80000001D95DCC70;
    if ((v30 & 1) != 0)
      v31 = 1702195828;
    else
      v31 = 0x65736C6166;
    if ((v30 & 1) != 0)
      v32 = 0xE400000000000000;
    else
      v32 = 0xE500000000000000;
    v33 = v32;
    String.append(_:)(*(Swift::String *)&v31);
    swift_bridgeObjectRelease();
    v34 = v43;
    v35 = v44;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    v37 = v10[2];
    v36 = v10[3];
    if (v37 >= v36 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v10);
    v10[2] = v37 + 1;
    v38 = &v10[2 * v37];
    v38[4] = v34;
    v38[5] = v35;
  }
  v43 = (unint64_t)v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v14 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy17RealityFoundation22SpatialTrackingSessionC13ConfigurationV16AnchorCapabilityVG_SSs5NeverOTg504_s17d12Foundation22fgh57C23UnavailableCapabilitiesV0A3KitE11descriptionSSvgSSAC13i3V16jK54Vcfu_33_0e2f2957bef5a9ec78f2a038ea1e8673AKSSTf3nnnpk_nTf1cn_nTm(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t), uint64_t (*a6)(uint64_t, uint64_t, _QWORD, uint64_t))
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t (*v43)(uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v44;

  v42 = a5;
  v43 = a6;
  v9 = a3(0);
  v40 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v39 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v38 = (char *)v35 - v12;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = MEMORY[0x1E0DEE9D8];
  if (!v13)
    return v14;
  v35[1] = v6;
  v44 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
  result = a4(a1);
  v16 = result;
  v18 = v17;
  v20 = v19 & 1;
  v36 = a1;
  v37 = a1 + 56;
  while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(v37 + (((unint64_t)v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      goto LABEL_15;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v18)
      goto LABEL_16;
    v21 = *(_QWORD *)(a1 + 48);
    v23 = v40;
    v22 = v41;
    v24 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v38, v21 + *(_QWORD *)(v40 + 72) * v16, v41);
    v25 = v39;
    v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v39, v24, v22);
    v27 = v42(v26);
    v29 = v28;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    v14 = v44;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1);
      v14 = v44;
    }
    v31 = *(_QWORD *)(v14 + 16);
    v30 = *(_QWORD *)(v14 + 24);
    if (v31 >= v30 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
      v14 = v44;
    }
    *(_QWORD *)(v14 + 16) = v31 + 1;
    v32 = v14 + 16 * v31;
    *(_QWORD *)(v32 + 32) = v27;
    *(_QWORD *)(v32 + 40) = v29;
    a1 = v36;
    result = v43(v16, v18, v20 & 1, v36);
    v16 = result;
    v18 = v33;
    v20 = v34 & 1;
    if (!--v13)
    {
      outlined consume of Set<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>.Index._Variant(result, v33, v34 & 1);
      return v14;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CGFloat)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EntityGestureRecognizer>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CollisionCastHit>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD3990]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AccessibilityComponent.RotorType>, type metadata accessor for AccessibilityComponent.RotorType);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PixelCastHit>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD4870]);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v12 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CGFloat));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityGestureRecognizer);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of Set<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t RKARTextureCache.init(device:)(id metalDevice)
{
  uint64_t v1;
  __CVMetalTextureCache *v2;
  uint64_t result;
  CVMetalTextureCacheRef cacheOut[2];

  cacheOut[1] = *(CVMetalTextureCacheRef *)MEMORY[0x1E0C80C00];
  *(_QWORD *)(v1 + 16) = 0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  cacheOut[0] = 0;
  if (CVMetalTextureCacheCreate(0, 0, metalDevice, 0, cacheOut) || !cacheOut[0])
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v2 = cacheOut[0];
    swift_unknownObjectRelease();
    *(_QWORD *)(v1 + 24) = v2;

    return v1;
  }
  return result;
}

uint64_t RKARTextureCache.extractTextures(from:requireBothPlanes:)(__CVBuffer *a1, char a2)
{
  _QWORD *v2;
  __CVMetalTextureCache *v5;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  CVReturn TextureFromImage;
  CVMetalTextureRef v9;
  size_t v11;
  size_t v12;
  CVReturn v13;
  CVMetalTextureRef v14;
  __CVBuffer *v15;
  void *v16;
  void *v17;
  CVMetalTextureRef textureOut[2];

  textureOut[1] = *(CVMetalTextureRef *)MEMORY[0x1E0C80C00];
  v5 = (__CVMetalTextureCache *)v2[3];
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  textureOut[0] = 0;
  TextureFromImage = CVMetalTextureCacheCreateTextureFromImage(0, v5, a1, 0, MTLPixelFormatR8Unorm, WidthOfPlane, HeightOfPlane, 0, textureOut);
  v9 = textureOut[0];
  if (TextureFromImage)
    goto LABEL_2;
  if (!textureOut[0])
    return 0;
  if (CVPixelBufferGetPlaneCount(a1) == 2)
  {
    v11 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    v12 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    textureOut[0] = 0;
    v13 = CVMetalTextureCacheCreateTextureFromImage(0, v5, a1, 0, MTLPixelFormatRG8Unorm, v11, v12, 1uLL, textureOut);
    v14 = textureOut[0];
    if (v13)
    {

    }
    else if (textureOut[0])
    {
      goto LABEL_12;
    }
  }
  if ((a2 & 1) == 0)
  {
    v15 = v9;
    v14 = v9;
LABEL_12:
    v16 = (void *)v2[4];
    v17 = (void *)v2[5];
    v2[4] = v9;
    v2[5] = v14;
    outlined consume of RKARTextureCache.CapturedImageCVTexturePair?(v16, v17);
    return 1;
  }
LABEL_2:

  return 0;
}

Swift::Void __swiftcall RKARTextureCache.extractTextures(from:)(ARFrame from)
{
  _QWORD *v1;
  void *v3;
  __CVBuffer *v4;
  char v5;
  __CVBuffer *v6;
  id v7;
  void *v8;
  __CVMetalTextureCache *v9;
  __CVBuffer *v10;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  CVMetalTextureRef v13;
  void *v14;
  id v15;
  __CVMetalTextureCache *v16;
  __CVBuffer *v17;
  size_t v18;
  size_t v19;
  CVMetalTextureRef v20;
  void *v21;
  CVMetalTextureRef textureOut[2];

  textureOut[1] = *(CVMetalTextureRef *)MEMORY[0x1E0C80C00];
  v3 = (void *)v1[2];
  if (!v3
    || (v4 = v3,
        v5 = RKARTextureCache.extractTextures(from:requireBothPlanes:)(v4, 0),
        v4,
        (v5 & 1) == 0))
  {
    v6 = (__CVBuffer *)-[objc_class capturedImage](from.super.isa, sel_capturedImage);
    RKARTextureCache.extractTextures(from:requireBothPlanes:)(v6, 1);

  }
  v7 = -[objc_class segmentationBuffer](from.super.isa, sel_segmentationBuffer);
  v8 = v7;
  if (v7)
  {
    v9 = (__CVMetalTextureCache *)v1[3];
    v10 = (__CVBuffer *)v7;
    WidthOfPlane = CVPixelBufferGetWidthOfPlane(v10, 0);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(v10, 0);
    textureOut[0] = 0;
    LODWORD(v9) = CVMetalTextureCacheCreateTextureFromImage(0, v9, v10, 0, MTLPixelFormatR8Unorm, WidthOfPlane, HeightOfPlane, 0, textureOut);
    v13 = textureOut[0];

    if (!(_DWORD)v9)
      goto LABEL_8;

  }
  v13 = 0;
LABEL_8:
  v14 = (void *)v1[6];
  v1[6] = v13;

  v15 = -[objc_class estimatedDepthData](from.super.isa, sel_estimatedDepthData);
  if (!v15)
  {

    goto LABEL_12;
  }
  v16 = (__CVMetalTextureCache *)v1[3];
  v17 = (__CVBuffer *)v15;
  v18 = CVPixelBufferGetWidthOfPlane(v17, 0);
  v19 = CVPixelBufferGetHeightOfPlane(v17, 0);
  textureOut[0] = 0;
  LODWORD(v16) = CVMetalTextureCacheCreateTextureFromImage(0, v16, v17, 0, MTLPixelFormatR32Float, v18, v19, 0, textureOut);
  v20 = textureOut[0];

  if ((_DWORD)v16)
  {

LABEL_12:
    v20 = 0;
  }
  v21 = (void *)v1[7];
  v1[7] = v20;

}

uint64_t RKARTextureCache.__deallocating_deinit()
{
  id *v0;

  outlined consume of RKARTextureCache.CapturedImageCVTexturePair?(v0[4], v0[5]);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RKARTextureCache()
{
  return objc_opt_self();
}

_QWORD *initializeBufferWithCopyOfBuffer for RKARTextureCache.CapturedImageCVTexturePair(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for RKARTextureCache.CapturedImageCVTexturePair(id *a1)
{

}

uint64_t assignWithCopy for RKARTextureCache.CapturedImageCVTexturePair(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for RKARTextureCache.CapturedImageCVTexturePair(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for RKARTextureCache.CapturedImageCVTexturePair(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RKARTextureCache.CapturedImageCVTexturePair(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for RKARTextureCache.CapturedImageCVTexturePair()
{
  return &unk_1E9F42600;
}

void outlined consume of RKARTextureCache.CapturedImageCVTexturePair?(void *a1, void *a2)
{
  if (a1)
  {

  }
}

Swift::Void __swiftcall RKARSystem.updateDebugVisualization(with:oldOptions:)(RealityKit::ARView::DebugOptions with, RealityKit::ARView::DebugOptions oldOptions)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v3 = *(_QWORD *)with.rawValue;
  v4 = *(_QWORD *)oldOptions.rawValue;
  if ((*(_QWORD *)with.rawValue & 4) != 0)
  {
    if ((v4 & 4) == 0)
      RKARSystem.activateWorldOriginVisualization()();
  }
  else if ((v4 & 4) != 0)
  {
    RKARSystem.deactivateWorldOriginVisualization()();
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0)
    {
      v5 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session), sel_currentFrame);
      if (!v5)
        return;
      v6 = v5;
      RKARSystem.createDebugVisualizationForAnchors(in:)(v5);

    }
  }
  else if ((v4 & 8) != 0)
  {
    RKARSystem.removeAllAnchorDebugVisualization()(&demangling cache variable for type metadata for (key: UUID, value: Entity), &OBJC_IVAR____TtC10RealityKit10RKARSystem_debugAnchorsByAnchorIdentifier, (uint64_t (*)(_QWORD))specialized Dictionary.init(dictionaryLiteral:));
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0)
    {
      v7 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session), sel_currentFrame);
      if (!v7)
        return;
      v8 = v7;
      RKARSystem.createDebugVisualizationForAnchorPlanes(in:)(v7);

    }
  }
  else if ((v4 & 0x10) != 0)
  {
    RKARSystem.removeAllAnchorDebugVisualization()(&demangling cache variable for type metadata for (key: UUID, value: ModelEntity), &OBJC_IVAR____TtC10RealityKit10RKARSystem_debugPlanesByAnchorIdentifier, (uint64_t (*)(_QWORD))specialized Dictionary.init(dictionaryLiteral:));
    RKARSystem.removeAllAnchorDebugVisualization()(&demangling cache variable for type metadata for (key: UUID, value: ModelEntity), &OBJC_IVAR____TtC10RealityKit10RKARSystem_debugProbesByAnchorIdentifier, (uint64_t (*)(_QWORD))specialized Dictionary.init(dictionaryLiteral:));
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0)
    {
      v16 = MEMORY[0x1DF091D08](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
      if (v16)
      {
        v17 = (void *)v16;
        v18 = (uint64_t *)(v16 + OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession);
        swift_beginAccess();
        v19 = *v18;
        swift_retain();

        if (v19)
        {
          v20 = dispatch thunk of RealityFusionSession.serviceManager.getter();
          if (!v20)
            goto LABEL_31;
          v21 = (void *)v20;
          v15 = (id)RFServiceManagerGetMeshReconstructionService();

          if (!v15)
            goto LABEL_31;
LABEL_30:
          RFMeshReconstructionServiceSetWireframeEnabled();

LABEL_31:
          swift_release();
        }
      }
    }
  }
  else if ((v4 & 0x40) != 0)
  {
    v9 = MEMORY[0x1DF091D08](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (v9)
    {
      v10 = (void *)v9;
      v11 = (uint64_t *)(v9 + OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession);
      swift_beginAccess();
      v12 = *v11;
      swift_retain();

      if (v12)
      {
        v13 = dispatch thunk of RealityFusionSession.serviceManager.getter();
        if (!v13)
          goto LABEL_31;
        v14 = (void *)v13;
        v15 = (id)RFServiceManagerGetMeshReconstructionService();

        if (!v15)
          goto LABEL_31;
        goto LABEL_30;
      }
    }
  }
}

void RKARSystem.activateWorldOriginVisualization()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v1 = type metadata accessor for Scene.AnchorCollection();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR____TtC10RealityKit10RKARSystem_worldOrigin;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_worldOrigin))
  {
    v6 = specialized RKARSystem.createDebugAxis()();
    Entity.turnIntoNinja()();
    v7 = MEMORY[0x1DF091D08](v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (v7)
    {
      v8 = (void *)v7;
      if (!*(_QWORD *)(v7 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
      {
        __break(1u);
        return;
      }
      swift_retain();

      dispatch thunk of Scene.anchors.getter();
      swift_release();
      Scene.AnchorCollection.appendNinja(_:)();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
    *(_QWORD *)(v0 + v5) = v6;
    swift_release();
  }
}

void RKARSystem.deactivateWorldOriginVisualization()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v1 = type metadata accessor for Scene.AnchorCollection();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = OBJC_IVAR____TtC10RealityKit10RKARSystem_worldOrigin;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_worldOrigin))
  {
    v7 = MEMORY[0x1DF091D08](v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView, v3);
    if (v7)
    {
      v8 = (void *)v7;
      if (!*(_QWORD *)(v7 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
      {
        __break(1u);
        return;
      }
      swift_retain();
      swift_retain();

      dispatch thunk of Scene.anchors.getter();
      swift_release();
      Scene.AnchorCollection.removeNinja(_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    }
    *(_QWORD *)(v0 + v6) = 0;
    swift_release();
  }
}

void RKARSystem.createDebugVisualizationForAnchors(in:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  unint64_t v33;
  id v34;
  unint64_t *v35;
  int isUniquelyReferenced_nonNull_native;
  char v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  char *v60;
  id v61;
  unint64_t v62;

  v2 = v1;
  v4 = type metadata accessor for Scene.AnchorCollection();
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  MEMORY[0x1E0C80A78](v4);
  v49 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v48 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v10 = MEMORY[0x1E0C80A78](v9).n128_u64[0];
  v12 = (char *)&v47 - v11;
  v13 = OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions) & 8) == 0)
    return;
  v14 = objc_msgSend(a1, sel_anchors, v10);
  type metadata accessor for ARAnchor();
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v15 >> 62)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16)
      goto LABEL_4;
LABEL_32:
    swift_bridgeObjectRelease();
    return;
  }
  v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v16)
    goto LABEL_32;
LABEL_4:
  v56 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  v58 = (unint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugAnchorsByAnchorIdentifier);
  v59 = v15 & 0xC000000000000001;
  v17 = 4;
  v55 = xmmword_1D95E24E0;
  v60 = v12;
  v53 = v15;
  v54 = v13;
  v52 = v16;
  while (1)
  {
    v18 = v17 - 4;
    if (v59)
    {
      v19 = (id)MEMORY[0x1DF0906F4](v17 - 4, v15);
      v20 = __OFADD__(v18, 1);
      v21 = v17 - 3;
      if (v20)
        goto LABEL_29;
    }
    else
    {
      v19 = *(id *)(v15 + 8 * v17);
      v20 = __OFADD__(v18, 1);
      v21 = v17 - 3;
      if (v20)
      {
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
    }
    if ((*(_BYTE *)(v2 + v13) & 8) != 0)
      break;

LABEL_6:
    ++v17;
    if (v21 == v16)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  v57 = v21;
  v22 = v2;
  v23 = v7;
  v24 = v6;
  v25 = v19;
  v26 = specialized RKARSystem.createDebugAxis()();
  type metadata accessor for Entity();
  HasTransform.position.setter();
  v61 = v25;
  v27 = v25;
  v28 = v24;
  v29 = v23;
  v2 = v22;
  objc_msgSend(v27, sel_transform);
  HasTransform.setTransformMatrix(_:relativeTo:)();
  Entity.turnIntoNinja()();
  v30 = MEMORY[0x1DF091D08](v56);
  if (!v30)
  {
LABEL_16:
    v33 = v29;
    v7 = v28;
    v34 = objc_msgSend(v61, sel_identifier);
    v12 = v60;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v35 = v58;
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v62 = *v35;
    v15 = v62;
    *v35 = 0x8000000000000000;
    v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
    v38 = *(_QWORD *)(v15 + 16);
    v39 = (v37 & 1) == 0;
    v40 = v38 + v39;
    if (__OFADD__(v38, v39))
      goto LABEL_30;
    v41 = v37;
    if (*(_QWORD *)(v15 + 24) < v40)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, isUniquelyReferenced_nonNull_native);
      v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v60);
      if ((v41 & 1) != (v43 & 1))
        goto LABEL_34;
      v6 = v42;
      v44 = v62;
      if ((v41 & 1) == 0)
        goto LABEL_25;
LABEL_23:
      v45 = *(_QWORD *)(v44 + 56);
      swift_release();
      *(_QWORD *)(v45 + 8 * v6) = v26;
      v12 = v60;
LABEL_26:
      *v58 = v44;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, unint64_t))(v33 + 8))(v12, v7);
      swift_endAccess();

      swift_release();
      v6 = v7;
      v7 = v33;
      v15 = v53;
      v13 = v54;
      v16 = v52;
      v21 = v57;
      goto LABEL_6;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v44 = v62;
      if ((v37 & 1) != 0)
        goto LABEL_23;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v44 = v62;
      if ((v41 & 1) != 0)
        goto LABEL_23;
    }
LABEL_25:
    v46 = v48;
    v12 = v60;
    (*(void (**)(char *, char *, unint64_t))(v33 + 16))(v48, v60, v7);
    specialized _NativeDictionary._insert(at:key:value:)(v6, v46, v26, v44);
    goto LABEL_26;
  }
  v31 = (void *)v30;
  if (*(_QWORD *)(v30 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();

    v32 = v49;
    dispatch thunk of Scene.anchors.getter();
    swift_release();
    Scene.AnchorCollection.appendNinja(_:)();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v32, v51);
    goto LABEL_16;
  }
  __break(1u);
LABEL_34:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void RKARSystem.createDebugVisualizationForAnchorPlanes(in:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  id v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v40;
  void *v41;
  char *v42;
  id v43;
  uint64_t *v44;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v46[5];
  char *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v2 = v1;
  v66 = *MEMORY[0x1E0C80C00];
  v49 = type metadata accessor for Scene.AnchorCollection();
  v48 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v47 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  *(_QWORD *)&v6 = MEMORY[0x1E0C80A78](v5).n128_u64[0];
  v53 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions) & 0x10) == 0)
    return;
  v9 = objc_msgSend(a1, sel_anchors, v6);
  type metadata accessor for ARAnchor();
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v10 >> 62)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_4;
LABEL_37:
    swift_bridgeObjectRelease();
    return;
  }
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
    goto LABEL_37;
LABEL_4:
  v51 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  v46[1] = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugProbesByAnchorIdentifier;
  v46[3] = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugPlanesByAnchorIdentifier;
  v12 = v10 & 0xC000000000000001;
  v13 = 4;
  v50 = xmmword_1D95E24F0;
  v46[2] = 0x80000001D95DCEF0;
  v46[4] = 0x80000001D95DCF60;
  v56 = v8;
  v57 = v10 & 0xC000000000000001;
  v58 = v11;
  while (1)
  {
    if (v12)
      v14 = (id)MEMORY[0x1DF0906F4](v13 - 4, v10);
    else
      v14 = *(id *)(v10 + 8 * v13);
    v15 = v14;
    v16 = v13 - 3;
    if (__OFADD__(v13 - 4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    objc_opt_self();
    v17 = swift_dynamicCastObjCClass();
    if (v17)
      break;
    objc_opt_self();
    v33 = swift_dynamicCastObjCClass();
    if (v33 && (*(_BYTE *)(v2 + v8) & 0x10) != 0)
    {
      v34 = (void *)v33;
      v19 = v15;
      objc_msgSend(v34, sel_extent);
      v52 = v35;
      type metadata accessor for __ServiceLocator();
      static __ServiceLocator.shared.getter();
      dispatch thunk of __ServiceLocator.assetService.getter();
      swift_release();
      v36 = v64;
      v37 = v65;
      __swift_project_boxed_opaque_existential_1(&v60, v64);
      (*(void (**)(uint64_t, uint64_t))(v37 + 32))(v36, v37);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
      v60 = 0x1000100010001;
      v61 = 0;
      v62 = v52;
      v63 = DWORD2(v52);
      LOWORD(v64) = 257;
      BYTE2(v64) = 1;
      if (REAssetManagerMeshMemoryAssetCreateBox())
      {
        type metadata accessor for MeshResource();
        swift_allocObject();
        MeshResource.init(_:)();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
        v38 = swift_allocObject();
        *(_OWORD *)(v38 + 16) = v50;
        *(_QWORD *)(v38 + 56) = type metadata accessor for UnlitMaterial();
        *(_QWORD *)(v38 + 64) = MEMORY[0x1E0CD36F0];
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v38 + 32));
        swift_retain();
        RKARSystem.debugProbeMaterial.getter((uint64_t)boxed_opaque_existential_0);
        type metadata accessor for ModelEntity();
        swift_allocObject();
        v26 = ModelEntity.init(mesh:materials:)();
        swift_retain();
        dispatch thunk of Entity.name.setter();
        swift_release();
        objc_msgSend(v34, sel_transform);
        HasTransform.setTransformMatrix(_:relativeTo:)();
        Entity.turnIntoNinja()();
        v40 = MEMORY[0x1DF091D08](v51);
        if (v40)
        {
          v41 = (void *)v40;
          if (!*(_QWORD *)(v40 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
            goto LABEL_39;
          swift_retain();

          v42 = v47;
          dispatch thunk of Scene.anchors.getter();
          swift_release();
          Scene.AnchorCollection.appendNinja(_:)();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v42, v49);
        }
        v43 = objc_msgSend(v34, sel_identifier);
        v31 = (uint64_t)v53;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v32 = &v67;
LABEL_27:
        v44 = (uint64_t *)*(v32 - 32);
        swift_beginAccess();
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v59 = *v44;
        *v44 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v26, v31, isUniquelyReferenced_nonNull_native);
        *v44 = v59;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v31, v55);
        swift_endAccess();

        swift_release();
        swift_release();
        v8 = v56;
LABEL_31:
        v12 = v57;
        v11 = v58;
        goto LABEL_6;
      }

LABEL_30:
      goto LABEL_31;
    }
LABEL_5:

LABEL_6:
    ++v13;
    if (v16 == v11)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  if ((*(_BYTE *)(v2 + v8) & 0x10) == 0)
    goto LABEL_5;
  v18 = (void *)v17;
  v19 = v15;
  v20 = objc_msgSend(v18, sel_geometry);
  if (*(_QWORD *)(ARPlaneGeometry.vertices.getter() + 16) >= 0x100uLL)
    goto LABEL_40;
  v21 = REGeomMeshCreateFromPolygon();
  swift_bridgeObjectRelease();
  if (!v21)
    goto LABEL_29;
  v59 = v21;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.assetService.getter();
  swift_release();
  v22 = v64;
  v23 = v65;
  __swift_project_boxed_opaque_existential_1(&v60, v64);
  (*(void (**)(uint64_t, uint64_t))(v23 + 32))(v22, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
  if (!REAssetManagerMeshMemoryAssetCreate())
  {
    RERelease();
    v8 = v56;
LABEL_29:

    goto LABEL_30;
  }
  type metadata accessor for MeshResource();
  swift_allocObject();
  MeshResource.init(_:)();
  RERelease();
  RERelease();

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = v50;
  *(_QWORD *)(v24 + 56) = type metadata accessor for UnlitMaterial();
  *(_QWORD *)(v24 + 64) = MEMORY[0x1E0CD36F0];
  v25 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v24 + 32));
  swift_retain();
  RKARSystem.debugAnchorPlaneMaterial.getter((uint64_t)v25);
  type metadata accessor for ModelEntity();
  swift_allocObject();
  v26 = ModelEntity.init(mesh:materials:)();
  swift_retain();
  dispatch thunk of Entity.name.setter();
  swift_release();
  objc_msgSend(v18, sel_transform);
  HasTransform.setTransformMatrix(_:relativeTo:)();
  Entity.turnIntoNinja()();
  v27 = MEMORY[0x1DF091D08](v51);
  if (!v27)
  {
LABEL_19:
    v30 = objc_msgSend(v18, sel_identifier);
    v31 = (uint64_t)v53;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v32 = &v68;
    goto LABEL_27;
  }
  v28 = (void *)v27;
  if (*(_QWORD *)(v27 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();

    v29 = v47;
    dispatch thunk of Scene.anchors.getter();
    swift_release();
    Scene.AnchorCollection.appendNinja(_:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v49);
    goto LABEL_19;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t RKARSystem.removeAllAnchorDebugVisualization()(uint64_t *a1, _QWORD *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t (*v36)(_QWORD);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;

  v36 = a3;
  v6 = type metadata accessor for Scene.AnchorCollection();
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  MEMORY[0x1E0C80A78](v6);
  v37 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a1;
  v44 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1E0C80A78](v44);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v34 - v11;
  v13 = (uint64_t *)(v3 + *a2);
  swift_beginAccess();
  v35 = v13;
  v14 = *v13;
  v15 = *(_QWORD *)(*v13 + 64);
  v40 = *v13 + 64;
  v16 = 1 << *(_BYTE *)(v14 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v43 = v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  v41 = (unint64_t)(v16 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v20 = 0;
  while (1)
  {
    if (v18)
    {
      v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v22 = v21 | (v20 << 6);
      goto LABEL_22;
    }
    v23 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v41)
      goto LABEL_25;
    v24 = *(_QWORD *)(v40 + 8 * v23);
    ++v20;
    if (!v24)
    {
      v20 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_25;
      v24 = *(_QWORD *)(v40 + 8 * v20);
      if (!v24)
      {
        v20 = v23 + 2;
        if (v23 + 2 >= v41)
          goto LABEL_25;
        v24 = *(_QWORD *)(v40 + 8 * v20);
        if (!v24)
          break;
      }
    }
LABEL_21:
    v18 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v20 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v14 + 48);
    v27 = type metadata accessor for UUID();
    v28 = *(_QWORD *)(v27 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v28 + 16))(v12, v26 + *(_QWORD *)(v28 + 72) * v22, v27);
    v29 = *(int *)(v44 + 48);
    v30 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v22);
    *(_QWORD *)&v12[v29] = v30;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v9, v12, v27);
    *(_QWORD *)&v9[v29] = v30;
    result = MEMORY[0x1DF091D08](v43);
    if (result)
    {
      v31 = (void *)result;
      if (!*(_QWORD *)(result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
        goto LABEL_28;
      swift_retain_n();
      swift_retain();

      v32 = v37;
      dispatch thunk of Scene.anchors.getter();
      swift_release();
      Scene.AnchorCollection.removeNinja(_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v32, v39);
    }
    else
    {
      swift_retain();
    }
    result = outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v9, v42);
  }
  v25 = v23 + 3;
  if (v25 >= v41)
  {
LABEL_25:
    swift_release();
    v33 = v36(MEMORY[0x1E0DEE9D8]);
    *v35 = v33;
    return swift_bridgeObjectRelease();
  }
  v24 = *(_QWORD *)(v40 + 8 * v25);
  if (v24)
  {
    v20 = v25;
    goto LABEL_21;
  }
  while (1)
  {
    v20 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v20 >= v41)
      goto LABEL_25;
    v24 = *(_QWORD *)(v40 + 8 * v20);
    ++v25;
    if (v24)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

void RKARSystem.removeAnchorDebugVisualization(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  void *v24;
  id v25;
  _QWORD v26[2];
  id v27;

  v2 = v1;
  v4 = type metadata accessor for Scene.AnchorCollection();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v13 = MEMORY[0x1E0C80A78](v12).n128_u64[0];
  v15 = (char *)v26 - v14;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions) & 8) != 0)
  {
    v27 = a1;
    v16 = objc_msgSend(a1, sel_identifier, v13);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v17 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugAnchorsByAnchorIdentifier);
    swift_beginAccess();
    v18 = *v17;
    if (*(_QWORD *)(*v17 + 16) && (v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15), (v20 & 1) != 0))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
      swift_endAccess();
      v22 = *(void (**)(char *, uint64_t))(v9 + 8);
      v26[1] = v21;
      swift_retain();
      v22(v15, v8);
      v23 = MEMORY[0x1DF091D08](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
      if (!v23)
      {
LABEL_7:
        v25 = objc_msgSend(v27, sel_identifier);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        swift_beginAccess();
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v11);
        swift_endAccess();
        swift_release();
        v22(v11, v8);
        swift_release();
        return;
      }
      v24 = (void *)v23;
      if (*(_QWORD *)(v23 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
      {
        swift_retain();

        dispatch thunk of Scene.anchors.getter();
        swift_release();
        Scene.AnchorCollection.removeNinja(_:)();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        goto LABEL_7;
      }
      __break(1u);
    }
    else
    {
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    }
  }
}

void RKARSystem.removePlaneDebugVisualization(for:)(void *a1)
{
  RKARSystem.removePlaneDebugVisualization(for:)(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem_debugPlanesByAnchorIdentifier);
}

void RKARSystem.removeProbeDebugVisualization(for:)(void *a1)
{
  RKARSystem.removePlaneDebugVisualization(for:)(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem_debugProbesByAnchorIdentifier);
}

void RKARSystem.removePlaneDebugVisualization(for:)(void *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void *v26;
  id v27;
  _QWORD v28[2];
  id v29;

  v4 = v2;
  v6 = type metadata accessor for Scene.AnchorCollection();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v15 = MEMORY[0x1E0C80A78](v14).n128_u64[0];
  v17 = (char *)v28 - v16;
  if ((*(_BYTE *)(v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions) & 0x10) != 0)
  {
    v29 = a1;
    v18 = objc_msgSend(a1, sel_identifier, v15);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v19 = (uint64_t *)(v4 + *a2);
    swift_beginAccess();
    v20 = *v19;
    if (*(_QWORD *)(*v19 + 16) && (v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v17), (v22 & 1) != 0))
    {
      v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
      swift_endAccess();
      v24 = *(void (**)(char *, uint64_t))(v11 + 8);
      v28[1] = v23;
      swift_retain();
      v24(v17, v10);
      v25 = MEMORY[0x1DF091D08](v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
      if (!v25)
      {
LABEL_7:
        v27 = objc_msgSend(v29, sel_identifier);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        swift_beginAccess();
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v13);
        swift_endAccess();
        swift_release();
        v24(v13, v10);
        swift_release();
        return;
      }
      v26 = (void *)v25;
      if (*(_QWORD *)(v25 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
      {
        swift_retain();

        dispatch thunk of Scene.anchors.getter();
        swift_release();
        Scene.AnchorCollection.removeNinja(_:)();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        goto LABEL_7;
      }
      __break(1u);
    }
    else
    {
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    }
  }
}

Swift::Void __swiftcall RKARSystem.updateFeaturePointDebugVisualization(for:)(ARFrame a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions) & 0x20) == 0)
    return;
  if (!swift_weakLoadStrong())
  {
    __break(1u);
    goto LABEL_12;
  }
  v3 = dispatch thunk of __Engine.services.getter();
  swift_release();
  if (!v3)
  {
LABEL_12:
    __break(1u);
    return;
  }
  dispatch thunk of __ServiceLocator.renderService.getter();
  swift_release();
  v4 = -[objc_class rawFeaturePoints](a1.super.isa, sel_rawFeaturePoints);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)(ARPointCloud.points.getter() + 16);
    if (v6)
    {
      v7 = 0;
      do
      {
        ++v7;
        v8 = v11;
        v9 = v12;
        __swift_project_boxed_opaque_existential_1(v10, v11);
        (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v8, v9);
        REDebugRendererDrawAxisWithWorldTransform();
      }
      while (v6 != v7);
    }

    swift_bridgeObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t specialized RKARSystem.createDebugAxis(with:position:color:)(void *a1, __n128 a2, __n128 a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v12;
  _OWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  v4 = type metadata accessor for UnlitMaterial();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnlitMaterial.init()();
  v8 = a1;
  UnlitMaterial.__tintColor.setter();
  type metadata accessor for MeshResource();
  static MeshResource.generateBox(size:cornerRadius:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1D95E24F0;
  v10 = MEMORY[0x1E0CD36F0];
  *(_QWORD *)(v9 + 56) = v4;
  *(_QWORD *)(v9 + 64) = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v9 + 32));
  (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 16))(boxed_opaque_existential_0, v7, v4);
  type metadata accessor for ModelEntity();
  swift_allocObject();
  v12 = ModelEntity.init(mesh:materials:)();
  HasTransform.position.setter();
  swift_retain();
  dispatch thunk of Entity.name.setter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v12;
}

uint64_t specialized RKARSystem.createDebugAxis()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::OpaquePointer v12;
  uint64_t v14;
  void *v15;

  v0 = type metadata accessor for Entity.ChildCollection();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  swift_allocObject();
  v4 = Entity.init()();
  type metadata accessor for CGColorRef(0);
  _CGColorInitTrampoline.init(_colorLiteralRed:green:blue:alpha:)();
  v5 = v15;
  v6 = specialized RKARSystem.createDebugAxis(with:position:color:)(v15, (__n128)xmmword_1D95E2500, (__n128)xmmword_1D95E2510);

  _CGColorInitTrampoline.init(_colorLiteralRed:green:blue:alpha:)();
  v7 = v15;
  v8 = specialized RKARSystem.createDebugAxis(with:position:color:)(v15, (__n128)xmmword_1D95E2520, (__n128)xmmword_1D95E2530);

  _CGColorInitTrampoline.init(_colorLiteralRed:green:blue:alpha:)();
  v9 = v15;
  v10 = specialized RKARSystem.createDebugAxis(with:position:color:)(v15, (__n128)xmmword_1D95E2540, (__n128)xmmword_1D95E2550);

  dispatch thunk of Entity.name.setter();
  HasHierarchy.children.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1D95E2560;
  *(_QWORD *)(v11 + 32) = v6;
  *(_QWORD *)(v11 + 40) = v8;
  *(_QWORD *)(v11 + 48) = v10;
  v15 = (void *)v11;
  specialized Array._endMutation()();
  v12._rawValue = v15;
  swift_retain();
  swift_retain();
  swift_retain();
  Entity.ChildCollection.append(contentsOf:preservingWorldTransforms:)(v12, 0);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  Entity.turnIntoNinja()();
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

unint64_t type metadata accessor for ARAnchor()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ARAnchor;
  if (!lazy cache variable for type metadata for ARAnchor)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
  }
  return result;
}

void ARView.Environment.sceneUnderstanding.getter(uint64_t a1@<X8>)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *v1;
  if ((*v1 & 0xFF00000000) == 0x200000000)
  {
    LODWORD(v2) = 0;
    LOBYTE(v3) = 0;
    v4 = 0;
    *v1 = 0;
    *((_DWORD *)v1 + 2) = 0;
  }
  else
  {
    v4 = *((_DWORD *)v1 + 2);
    v3 = HIDWORD(v2) & 1;
  }
  *(_DWORD *)a1 = v2;
  *(_BYTE *)(a1 + 4) = v3;
  *(_DWORD *)(a1 + 8) = v4;
}

void ARView.Environment.SceneUnderstanding.options.setter(_DWORD *a1)
{
  uint64_t v1;
  int v2;
  int v3;

  v2 = *(_DWORD *)(v1 + 8);
  *(_DWORD *)(v1 + 8) = *a1;
  v3 = v2;
  ARView.Environment.SceneUnderstanding.options.didset(&v3);
}

unsigned int *ARView.Environment.sceneUnderstanding.setter(unsigned int *result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;

  v2 = result[2];
  v3 = 0x100000000;
  if (!*((_BYTE *)result + 4))
    v3 = 0;
  *(_QWORD *)v1 = v3 | *result;
  *(_DWORD *)(v1 + 8) = v2;
  return result;
}

void static ARView.Environment.Background.cameraFeed(exposureCompensation:)(uint64_t a1@<X8>, unsigned int a2@<S0>)
{
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t static ARView.Environment.Background.skybox(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_BYTE *)(a2 + 8) = 1;
  return swift_retain();
}

id static ARView.Environment.Background.color(_:)@<X0>(id a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_BYTE *)(a2 + 8) = 2;
  return a1;
}

uint64_t ARView.Environment.ImageBasedLight.resource.getter()
{
  return swift_retain();
}

uint64_t ARView.Environment.ImageBasedLight.resource.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*ARView.Environment.ImageBasedLight.resource.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

float ARView.Environment.ImageBasedLight.intensityExponent.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void ARView.Environment.ImageBasedLight.intensityExponent.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*ARView.Environment.ImageBasedLight.intensityExponent.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

BOOL static ARView.Environment.Reverb.Preset.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ARView.Environment.Reverb.Preset.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ARView.Environment.Reverb.Preset.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ARView.Environment.Reverb.Preset(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ARView.Environment.Reverb.Preset()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ARView.Environment.Reverb.Preset()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ARView.Environment.Reverb.Preset()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void static ARView.Environment.Reverb.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t ARView.Environment.SceneUnderstanding.validateOptions()()
{
  _DWORD *v0;
  _DWORD *v1;
  int v2;
  int v3;
  int v4;
  void *v5;
  int v7;

  v1 = v0;
  v2 = v0[2];
  v3 = *v0;
  v4 = v2;
  if ((*v0 & v2) != 0)
  {
    static os_log_type_t.debug.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    v5 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    v4 = v2 & ~v3;
  }
  v1[2] = v4;
  v7 = v2;
  return ARView.Environment.SceneUnderstanding.options.didset(&v7);
}

uint64_t ARView.Environment.SceneUnderstanding.Options.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t ARView.Environment.SceneUnderstanding.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ARView.Environment.SceneUnderstanding.Options.occlusion.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ARView.Environment.SceneUnderstanding.Options.receivesLighting.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ARView.Environment.SceneUnderstanding.Options.collision.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static ARView.Environment.SceneUnderstanding.Options.physics.getter(_DWORD *a1@<X8>)
{
  *a1 = 12;
}

void static ARView.Environment.SceneUnderstanding.Options.__disableFeathering.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static ARView.Environment.SceneUnderstanding.Options.__disableGuidedFilterOcclusions.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static ARView.Environment.SceneUnderstanding.Options.enableDynamicLighting.getter(_DWORD *a1@<X8>)
{
  *a1 = 64;
}

void static ARView.Environment.SceneUnderstanding.Options.default.getter(_DWORD *a1@<X8>)
{
  *a1 = 0x80000000;
}

_DWORD *protocol witness for OptionSet.init(rawValue:) in conformance ARView.Environment.SceneUnderstanding.Options@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *protocol witness for SetAlgebra.union(_:) in conformance ARView.Environment.SceneUnderstanding.Options@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.intersection(_:) in conformance ARView.Environment.SceneUnderstanding.Options@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance ARView.Environment.SceneUnderstanding.Options@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *protocol witness for SetAlgebra.remove(_:) in conformance ARView.Environment.SceneUnderstanding.Options@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *protocol witness for SetAlgebra.update(with:) in conformance ARView.Environment.SceneUnderstanding.Options@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance ARView.Environment.SceneUnderstanding.Options@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance ARView.Environment.SceneUnderstanding.Options()
{
  _DWORD *v0;

  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance ARView.Environment.SceneUnderstanding.Options()
{
  return SetAlgebra.init<A>(_:)();
}

_DWORD *protocol witness for SetAlgebra.subtract(_:) in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t ARView.Environment.SceneUnderstanding.__InternalSettings.guidedFilterOcclusionUseSingleMTLEvent.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ARView.Environment.SceneUnderstanding.__InternalSettings.guidedFilterOcclusionUseSingleMTLEvent.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*ARView.Environment.SceneUnderstanding.__InternalSettings.guidedFilterOcclusionUseSingleMTLEvent.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

void ARView.Environment.SceneUnderstanding.__internalSettings.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 4);
}

uint64_t key path setter for ARView.Environment.SceneUnderstanding.__internalSettings : ARView.Environment.SceneUnderstanding(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  *(_BYTE *)(a2 + 4) = *a1;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  v2 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  result = MEMORY[0x1DF0912C4](v2);
  if (result)
    return RESceneUnderstandingServiceSetGuidedFilterOcclusionUseSingleMTLEvent();
  return result;
}

uint64_t ARView.Environment.SceneUnderstanding.__internalSettings.setter(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  *(_BYTE *)(v1 + 4) = *a1;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  v2 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  result = MEMORY[0x1DF0912C4](v2);
  if (result)
    return RESceneUnderstandingServiceSetGuidedFilterOcclusionUseSingleMTLEvent();
  return result;
}

void (*ARView.Environment.SceneUnderstanding.__internalSettings.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return ARView.Environment.SceneUnderstanding.__internalSettings.modify;
}

void ARView.Environment.SceneUnderstanding.__internalSettings.modify(uint64_t a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    v2 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
    swift_release();
    if (MEMORY[0x1DF0912C4](v2))
      RESceneUnderstandingServiceSetGuidedFilterOcclusionUseSingleMTLEvent();
  }
}

void ARView.Environment.SceneUnderstanding.options.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 8);
}

void ARView.Environment.SceneUnderstanding.options.didset(_DWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;

  v2 = v1;
  v3 = *(_DWORD *)(v1 + 8);
  if (*a1 != v3)
  {
    if ((objc_msgSend((id)objc_opt_self(), sel_supportsSceneReconstruction_, 1) & 1) != 0)
    {
      if (v3 < 0 && (v3 & 0x7FFFFFFF) != 0)
      {
        static os_log_type_t.debug.getter();
        type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        v4 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:type:_:)();

        *(_DWORD *)(v2 + 8) = 0x80000000;
      }
      ARView.Environment.SceneUnderstanding.validateOptions()();
      type metadata accessor for RealityFusionSession();
      if (static RealityFusionSession.sharedSession.getter())
      {
        v5 = (void *)dispatch thunk of RealityFusionSession.serviceManager.getter();
        swift_release();
        if (v5)
        {
          v6 = (id)RFServiceManagerGetMeshReconstructionService();

          if (v6)
          {
            RFMeshReconstructionServiceSetOcclusionEnabled();
            RFMeshReconstructionServiceSetPhysicsEnabled();
            RFMeshReconstructionServiceSetCollisionEnabled();
            RFMeshReconstructionServiceSetLightingEnabled();
            RFMeshReconstructionServiceSetDynamicLightingEnabled();

          }
        }
      }
      type metadata accessor for __ServiceLocator();
      static __ServiceLocator.shared.getter();
      v7 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
      swift_release();
      if (MEMORY[0x1DF0912C4](v7))
      {
        RESceneUnderstandingServiceSetDepthFeatheringEnabled();
        RESceneUnderstandingServiceSetGuidedFilterOcclusionSupportEnabled();
        RESceneUnderstandingServiceSetGuidedFilterOcclusionEnabled();
      }
    }
    else
    {
      static os_log_type_t.debug.getter();
      type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v8 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:type:_:)();

      *(_DWORD *)(v2 + 8) = 0;
    }
  }
}

void (*ARView.Environment.SceneUnderstanding.options.modify(uint64_t a1))(_DWORD *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 8);
  return ARView.Environment.SceneUnderstanding.options.modify;
}

void ARView.Environment.SceneUnderstanding.options.modify(_DWORD *a1, char a2)
{
  int v2;
  int *v3;
  int v4;
  int v5;

  v2 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  *(_DWORD *)(*(_QWORD *)a1 + 8) = a1[2];
  if ((a2 & 1) != 0)
  {
    v4 = v2;
    v3 = &v4;
  }
  else
  {
    v5 = v2;
    v3 = &v5;
  }
  ARView.Environment.SceneUnderstanding.options.didset(v3);
}

uint64_t *(*ARView.Environment.sceneUnderstanding.modify(_QWORD *a1))(uint64_t *result)
{
  uint64_t v1;

  *a1 = v1;
  ARView.Environment.sceneUnderstanding.getter((uint64_t)(a1 + 1));
  return ARView.Environment.sceneUnderstanding.modify;
}

uint64_t *ARView.Environment.sceneUnderstanding.modify(uint64_t *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *result;
  v2 = *((_DWORD *)result + 4);
  v3 = 0x100000000;
  if (!*((_BYTE *)result + 12))
    v3 = 0;
  *(_QWORD *)v1 = v3 | *((unsigned int *)result + 2);
  *(_DWORD *)(v1 + 8) = v2;
  return result;
}

id ARView.Environment.background.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  char v3;

  v2 = *(void **)(v1 + 16);
  *(_QWORD *)a1 = v2;
  v3 = *(_BYTE *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v3;
  return outlined copy of ARView.Environment.Background.Value(v2, v3);
}

id outlined copy of ARView.Environment.Background.Value(id result, char a2)
{
  if (a2 == 2)
    return result;
  if (a2 == 1)
    return (id)swift_retain();
  return result;
}

void ARView.Environment.background.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  outlined consume of ARView.Environment.Background.Value(*(void **)(v1 + 16), *(_BYTE *)(v1 + 24));
  *(_QWORD *)(v1 + 16) = v2;
  *(_BYTE *)(v1 + 24) = v3;
}

void outlined consume of ARView.Environment.Background.Value(void *a1, char a2)
{
  if (a2 == 2)
  {

  }
  else if (a2 == 1)
  {
    swift_release();
  }
}

uint64_t (*ARView.Environment.background.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t ARView.Environment.lighting.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_retain();
}

uint64_t ARView.Environment.lighting.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  result = swift_release();
  *(_QWORD *)(v1 + 32) = v2;
  *(_DWORD *)(v1 + 40) = v3;
  return result;
}

uint64_t (*ARView.Environment.lighting.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

void ARView.Environment.reverb.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 44);
}

_BYTE *ARView.Environment.reverb.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 44) = *result;
  return result;
}

uint64_t (*ARView.Environment.reverb.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

float ARView.Environment.init(background:lighting:reverb:)@<S0>(uint64_t *a1@<X0>, float *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  float result;
  char v8;

  v4 = *a1;
  v5 = *((_BYTE *)a1 + 8);
  v6 = *(_QWORD *)a2;
  result = a2[2];
  v8 = *a3;
  *(_QWORD *)a4 = 0x200000000;
  *(_DWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = v4;
  *(_BYTE *)(a4 + 24) = v5;
  *(_QWORD *)(a4 + 32) = v6;
  *(float *)(a4 + 40) = result;
  *(_BYTE *)(a4 + 44) = v8;
  return result;
}

void ARView.Environment.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x200000000;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 6;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
}

Swift::Void __swiftcall ARView.updateEnvironment()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, _QWORD);
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, _QWORD);
  id v25;
  void *v26;
  void *v27;
  id v28;
  char v29;
  id v30;
  id v31;
  CGColor *v32;
  double Alpha;
  _BOOL8 v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, _QWORD);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, _QWORD);
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, _QWORD);
  char *v57;
  void (*v58)(char *, _QWORD);
  uint64_t v59;
  void (*v60)(char *, _QWORD);
  uint64_t v61;
  uint64_t v62;
  uint64_t active;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  char *v70;
  char *v71;
  char v72[32];
  char v73[32];

  v1 = v0;
  v68 = type metadata accessor for ImageBasedLightComponent.Source();
  v67 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68);
  v69 = (uint64_t *)((char *)&v67 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageBasedLightComponent?);
  MEMORY[0x1E0C80A78](v3);
  v70 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for __SkyboxMaterial();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SkyboxComponent?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v0[OBJC_IVAR____TtC10RealityKit6ARView_environment];
  swift_beginAccess();
  v13 = (void *)*((_QWORD *)v12 + 2);
  v71 = v12;
  if (v12[24])
  {
    if (v12[24] == 1)
    {
      v14 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity];
      swift_beginAccess();
      if (!*(_QWORD *)v14)
      {
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      outlined copy of ARView.Environment.Background.Value(v13, 1);
      outlined copy of ARView.Environment.Background.Value(v13, 1);
      swift_retain();
      __SkyboxComponent.init(environment:)();
      v15 = type metadata accessor for __SkyboxComponent();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v11, 0, 1, v15);
      v16 = (void (*)(char *, _QWORD))dispatch thunk of Entity.components.modify();
      Entity.ComponentSet.subscript.setter();
      v16(v73, 0);
      swift_release();
      if (dispatch thunk of EnvironmentResource.coreSkyboxAsset.getter())
      {
        __SkyboxMaterial.init()();
        __SkyboxMaterial.__resource.getter();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        dispatch thunk of __MaterialResource.coreAsset.getter();
        swift_release();
        REMaterialAssetSetTextureFromAsset();
      }
      outlined consume of ARView.Environment.Background.Value(v13, 1);
      v17 = v71;
    }
    else
    {
      v22 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity];
      swift_beginAccess();
      if (!*(_QWORD *)v22)
      {
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      v23 = type metadata accessor for __SkyboxComponent();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v11, 1, 1, v23);
      swift_retain();
      v24 = (void (*)(char *, _QWORD))dispatch thunk of Entity.components.modify();
      Entity.ComponentSet.subscript.setter();
      v24(v73, 0);
      swift_release();
      v17 = v71;
    }
  }
  else
  {
    v18 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity];
    swift_beginAccess();
    if (!*(_QWORD *)v18)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    v19 = type metadata accessor for __SkyboxComponent();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v11, 1, 1, v19);
    swift_retain();
    v20 = (void (*)(char *, _QWORD))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v20(v73, 0);
    swift_release();
    v21 = *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
    v17 = v71;
    if (v21)
      *(_DWORD *)(v21 + OBJC_IVAR____TtC10RealityKit10RKARSystem___passthroughIntensityExponent) = (_DWORD)v13;
  }
  v25 = objc_msgSend(v1, sel_layer, v67, v68);
  if (v17[24] == 2)
  {
    v26 = (void *)*((_QWORD *)v17 + 2);
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    v27 = (void *)objc_opt_self();
    outlined copy of ARView.Environment.Background.Value(v26, 2);
    v28 = objc_msgSend(v27, sel_blackColor);
    v29 = static NSObject.== infix(_:_:)();

    if (v25)
    {
      v30 = v25;
      v31 = objc_msgSend(v26, sel_CGColor);
      objc_msgSend(v30, sel_setBackgroundColor_, v31);

    }
    v32 = (CGColor *)objc_msgSend(v26, sel_CGColor);
    Alpha = CGColorGetAlpha(v32);
    outlined consume of ARView.Environment.Background.Value(v26, 2);

    v34 = Alpha >= 1.0;
  }
  else
  {
    v29 = 1;
    v34 = 1;
  }
  objc_msgSend(v1, sel_setOpaque_, v34);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_renderView], sel_setOpaque_, v29 & 1);
  v35 = *((_QWORD *)v17 + 4);
  if (v35)
  {
    v36 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity];
    swift_beginAccess();
    if (!*(_QWORD *)v36)
      goto LABEL_49;
    v37 = v69;
    *v69 = v35;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v67 + 104))(v37, *MEMORY[0x1E0CD4E60], v68);
    swift_retain_n();
    swift_retain();
    v38 = v70;
    ImageBasedLightComponent.init(source:intensityExponent:global:)();
    v39 = type metadata accessor for ImageBasedLightComponent();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 0, 1, v39);
    v40 = (void (*)(char *, _QWORD))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v40(v73, 0);
    swift_release();
    swift_release();
    v1[OBJC_IVAR____TtC10RealityKit6ARView_currentIBL] = 1;
LABEL_33:
    v57 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity];
    swift_beginAccess();
    if (*(_QWORD *)v57)
    {
      swift_retain();
      v58 = (void (*)(char *, _QWORD))dispatch thunk of Entity.components.modify();
      v59 = type metadata accessor for ImageBasedLightComponent();
      v60 = (void (*)(char *, _QWORD))Entity.ComponentSet.subscript.modify();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 48))(v61, 1, v59))
        ImageBasedLightComponent.inheritsRotation.setter();
      v60(v72, 0);
      v58(v73, 0);
      swift_release();
      v73[0] = v17[44];
      ARView.updateEnvironmentReverb(_:)(v73);
      v62 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
      if (*(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView__scene])
      {
        swift_retain();
        active = dispatch thunk of Scene.internalActiveCamera.getter();
        swift_release();
        if (active)
          goto LABEL_40;
        if (*(_QWORD *)&v1[v62])
        {
          swift_retain();
          v64 = dispatch thunk of Scene.defaultCamera.getter();
          swift_release();
          if (!v64)
          {
LABEL_46:

            return;
          }
LABEL_40:
          Entity.coreEntity.getter();
          RECameraViewDescriptorsComponentGetComponentType();
          if (REEntityGetComponentByClass() && RECameraViewDescriptorsComponentCameraViewDescriptorCount() >= 1)
          {
            RECameraViewDescriptorsComponentCameraViewDescriptorHandleByIndex();
            v65 = RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct();
            RERenderGraphDataStructAddFloat4();
            v66 = v17[24];
            if (!v17[24])
              outlined copy of ARView.Environment.Background.Value(*((id *)v17 + 2), 0);
            MEMORY[0x1DF0910B4](v65, "forceHidePassthroughFeed", v66 != 0);
            RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct();
            RERelease();
          }
          swift_release();
          goto LABEL_46;
        }
        goto LABEL_50;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v17[24])
  {
    v41 = OBJC_IVAR____TtC10RealityKit6ARView_currentIBL;
    if (v1[OBJC_IVAR____TtC10RealityKit6ARView_currentIBL] == 2)
      goto LABEL_33;
    v42 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity];
    swift_beginAccess();
    if (!*(_QWORD *)v42)
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    goto LABEL_23;
  }
  v49 = *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (v49 && *(_BYTE *)(v49 + OBJC_IVAR____TtC10RealityKit10RKARSystem_isFaceSession) == 1)
  {
    v41 = OBJC_IVAR____TtC10RealityKit6ARView_currentIBL;
    if (v1[OBJC_IVAR____TtC10RealityKit6ARView_currentIBL] == 2)
      goto LABEL_33;
    v50 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity];
    swift_beginAccess();
    if (*(_QWORD *)v50)
    {
LABEL_23:
      type metadata accessor for EnvironmentResource();
      swift_retain();
      v43 = static EnvironmentResource.defaultObject()();
      v44 = v69;
      *v69 = v43;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v67 + 104))(v44, *MEMORY[0x1E0CD4E60], v68);
      v45 = v70;
      ImageBasedLightComponent.init(source:intensityExponent:global:)();
      v46 = type metadata accessor for ImageBasedLightComponent();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 0, 1, v46);
      v47 = (void (*)(char *, _QWORD))dispatch thunk of Entity.components.modify();
      Entity.ComponentSet.subscript.setter();
      v47(v73, 0);
      swift_release();
      v48 = 2;
LABEL_32:
      v1[v41] = v48;
      goto LABEL_33;
    }
    __break(1u);
  }
  v41 = OBJC_IVAR____TtC10RealityKit6ARView_currentIBL;
  if (v1[OBJC_IVAR____TtC10RealityKit6ARView_currentIBL] == 3)
    goto LABEL_33;
  v51 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity];
  swift_beginAccess();
  if (*(_QWORD *)v51)
  {
    type metadata accessor for EnvironmentResource();
    swift_retain();
    v52 = static EnvironmentResource.defaultAR()();
    v53 = v69;
    *v69 = v52;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v67 + 104))(v53, *MEMORY[0x1E0CD4E60], v68);
    v54 = v70;
    ImageBasedLightComponent.init(source:intensityExponent:global:)();
    v55 = type metadata accessor for ImageBasedLightComponent();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 0, 1, v55);
    v56 = (void (*)(char *, _QWORD))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v56(v73, 0);
    swift_release();
    v48 = 3;
    goto LABEL_32;
  }
LABEL_55:
  __break(1u);
}

char *ARView.updateEnvironmentReverb(_:)(char *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v3 = *result;
  swift_retain();
  dispatch thunk of Scene.applyReverbPreset(_:)();
  result = (char *)swift_release();
  v4 = *(_QWORD *)(v1 + v2);
  if (v3 == 6)
  {
    if (v4)
      goto LABEL_6;
    goto LABEL_8;
  }
  if (v4)
  {
LABEL_6:
    swift_retain();
    dispatch thunk of Scene.setReverbPresetPriority(_:)();
    return (char *)swift_release();
  }
LABEL_9:
  __break(1u);
  return result;
}

BOOL static ARView.Environment.Reverb.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 7)
    return v3 == 7;
  if (v2 == 6)
    return v3 == 6;
  if ((v3 & 0xFE) == 6)
    return 0;
  return v2 == v3;
}

void ARView.Environment.Reverb.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  if ((_DWORD)v1 == 6)
  {
    v1 = 0;
  }
  else if ((_DWORD)v1 == 7)
  {
    v1 = 2;
  }
  else
  {
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int ARView.Environment.Reverb.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 == 6)
  {
    v1 = 0;
  }
  else if ((_DWORD)v1 == 7)
  {
    v1 = 2;
  }
  else
  {
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ARView.Environment.Reverb(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 7)
    return v3 == 7;
  if (v2 == 6)
    return v3 == 6;
  if ((v3 & 0xFE) == 6)
    return 0;
  return v2 == v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ARView.Environment.Reverb()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 == 6)
  {
    v1 = 0;
  }
  else if ((_DWORD)v1 == 7)
  {
    v1 = 2;
  }
  else
  {
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ARView.Environment.Reverb()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  if ((_DWORD)v1 == 6)
  {
    v1 = 0;
  }
  else if ((_DWORD)v1 == 7)
  {
    v1 = 2;
  }
  else
  {
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ARView.Environment.Reverb()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 == 6)
  {
    v1 = 0;
  }
  else if ((_DWORD)v1 == 7)
  {
    v1 = 2;
  }
  else
  {
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *static ARView.Environment.Reverb.Preset.allCases.getter()
{
  return &outlined read-only object #0 of static ARView.Environment.Reverb.Preset.allCases.getter;
}

unint64_t lazy protocol witness table accessor for type ARView.Environment.Reverb.Preset and conformance ARView.Environment.Reverb.Preset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.Environment.Reverb.Preset and conformance ARView.Environment.Reverb.Preset;
  if (!lazy protocol witness table cache variable for type ARView.Environment.Reverb.Preset and conformance ARView.Environment.Reverb.Preset)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.Environment.Reverb.Preset, &type metadata for ARView.Environment.Reverb.Preset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.Environment.Reverb.Preset and conformance ARView.Environment.Reverb.Preset);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options;
  if (!lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.Environment.SceneUnderstanding.Options, &type metadata for ARView.Environment.SceneUnderstanding.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options;
  if (!lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.Environment.SceneUnderstanding.Options, &type metadata for ARView.Environment.SceneUnderstanding.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options;
  if (!lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.Environment.SceneUnderstanding.Options, &type metadata for ARView.Environment.SceneUnderstanding.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options;
  if (!lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.Environment.SceneUnderstanding.Options, &type metadata for ARView.Environment.SceneUnderstanding.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ARView.Environment.Reverb and conformance ARView.Environment.Reverb()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.Environment.Reverb and conformance ARView.Environment.Reverb;
  if (!lazy protocol witness table cache variable for type ARView.Environment.Reverb and conformance ARView.Environment.Reverb)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.Environment.Reverb, &type metadata for ARView.Environment.Reverb);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.Environment.Reverb and conformance ARView.Environment.Reverb);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ARView.Environment.Reverb.Preset] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ARView.Environment.Reverb.Preset] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ARView.Environment.Reverb.Preset] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ARView.Environment.Reverb.Preset]);
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ARView.Environment.Reverb.Preset] and conformance [A]);
  }
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ARView.Environment.Reverb.Preset(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ARView.Environment.Reverb.Preset.allCases.getter;
}

uint64_t sub_1D9584D28@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 4);
  return result;
}

uint64_t sub_1D9584D38@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 8);
  return result;
}

void sub_1D9584D44(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = *a1;
  v3 = v2;
  ARView.Environment.SceneUnderstanding.options.didset(&v3);
}

uint64_t destroy for ARView.Environment(uint64_t a1)
{
  outlined consume of ARView.Environment.Background.Value(*(void **)(a1 + 16), *(_BYTE *)(a1 + 24));
  return swift_release();
}

uint64_t initializeWithCopy for ARView.Environment(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(void **)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  outlined copy of ARView.Environment.Background.Value(v4, v5);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ARView.Environment(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  char v6;
  void *v7;
  char v8;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  v5 = (void *)a2[2];
  v6 = *((_BYTE *)a2 + 24);
  outlined copy of ARView.Environment.Background.Value(v5, v6);
  v7 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of ARView.Environment.Background.Value(v7, v8);
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  *(_BYTE *)(a1 + 44) = *((_BYTE *)a2 + 44);
  return a1;
}

__n128 __swift_memcpy45_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ARView.Environment(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  char v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of ARView.Environment.Background.Value(v5, v6);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for ARView.Environment(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 45))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.Environment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 45) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 45) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.Environment()
{
  return &type metadata for ARView.Environment;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ARView.Environment.Background()
{
  return &type metadata for ARView.Environment.Background;
}

uint64_t initializeBufferWithCopyOfBuffer for ARView.Environment.ImageBasedLight(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for ARView.Environment.ImageBasedLight()
{
  return swift_release();
}

uint64_t assignWithCopy for ARView.Environment.ImageBasedLight(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for ARView.Environment.ImageBasedLight(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ARView.Environment.ImageBasedLight(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 12))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.Environment.ImageBasedLight(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.Environment.ImageBasedLight()
{
  return &type metadata for ARView.Environment.ImageBasedLight;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ARView.Environment.Reverb(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
  {
    v6 = *a1;
    if (v6 >= 6)
      v7 = v6 - 5;
    else
      v7 = 0;
    if (v7 >= 3)
      return v7 - 2;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 7;
    if (a2 + 7 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1D9585224 + 4 * byte_1D95E2570[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for ARView.Environment.Reverb(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 7;
  if (a3 + 7 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF9)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1D95852D0 + 4 * byte_1D95E257A[v5]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1D9585304 + 4 * byte_1D95E2575[v5]))();
}

uint64_t sub_1D9585304(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D958530C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D9585314);
  return result;
}

uint64_t sub_1D9585320(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D9585328);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1D958532C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D9585334(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for ARView.Environment.Reverb(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 6)
    return v1 - 5;
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for ARView.Environment.Reverb(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 5;
  return result;
}

ValueMetadata *type metadata accessor for ARView.Environment.Reverb()
{
  return &type metadata for ARView.Environment.Reverb;
}

uint64_t getEnumTagSinglePayload for ARView.Environment.Reverb.Preset(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.Environment.Reverb.Preset(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1D9585450 + 4 * byte_1D95E2584[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1D9585484 + 4 * byte_1D95E257F[v4]))();
}

uint64_t sub_1D9585484(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D958548C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D9585494);
  return result;
}

uint64_t sub_1D95854A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D95854A8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1D95854AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D95854B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for ARView.Environment.Reverb.Preset(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for ARView.Environment.Reverb.Preset(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ARView.Environment.Reverb.Preset()
{
  return &type metadata for ARView.Environment.Reverb.Preset;
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ARView.Environment.SceneUnderstanding(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.Environment.SceneUnderstanding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.Environment.SceneUnderstanding()
{
  return &type metadata for ARView.Environment.SceneUnderstanding;
}

ValueMetadata *type metadata accessor for ARView.Environment.SceneUnderstanding.Options()
{
  return &type metadata for ARView.Environment.SceneUnderstanding.Options;
}

uint64_t getEnumTagSinglePayload for ARView.Environment.SceneUnderstanding.__InternalSettings(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.Environment.SceneUnderstanding.__InternalSettings(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D9585698 + 4 * byte_1D95E258E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D95856CC + 4 * byte_1D95E2589[v4]))();
}

uint64_t sub_1D95856CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D95856D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D95856DCLL);
  return result;
}

uint64_t sub_1D95856E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D95856F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D95856F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D95856FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ARView.Environment.SceneUnderstanding.__InternalSettings()
{
  return &type metadata for ARView.Environment.SceneUnderstanding.__InternalSettings;
}

uint64_t initializeBufferWithCopyOfBuffer for ARView.Environment.Background.Value(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of ARView.Environment.Background.Value(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for ARView.Environment.Background.Value(uint64_t a1)
{
  outlined consume of ARView.Environment.Background.Value(*(void **)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for ARView.Environment.Background(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of ARView.Environment.Background.Value(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of ARView.Environment.Background.Value(v5, v6);
  return a1;
}

uint64_t assignWithTake for ARView.Environment.Background.Value(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of ARView.Environment.Background.Value(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ARView.Environment.Background(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.Environment.Background(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ARView.Environment.Background.Value(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for ARView.Environment.Background.Value(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ARView.Environment.Background.Value()
{
  return &type metadata for ARView.Environment.Background.Value;
}

double ParticleEmitterComponent.ParticleEmitter.color.getter@<D0>(uint64_t a1@<X8>)
{
  char v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  char started;
  double result;
  char v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  char v14;

  v2 = ParticleEmitterComponent.ParticleEmitter.useEndColor.getter();
  v3 = (void *)ParticleEmitterComponent.ParticleEmitter.startColorA.getter();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v3);

  v5 = (void *)ParticleEmitterComponent.ParticleEmitter.startColorB.getter();
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v5);

  started = ParticleEmitterComponent.ParticleEmitter.useStartColorRange.getter();
  v9 = started;
  if ((v2 & 1) != 0)
  {
    if ((started & 1) == 0)
    {

      v6 = 0;
    }
    v10 = (void *)ParticleEmitterComponent.ParticleEmitter.endColorA.getter();
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v10);

    v12 = (void *)ParticleEmitterComponent.ParticleEmitter.endColorB.getter();
    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v12);

    v14 = ParticleEmitterComponent.ParticleEmitter.useEndColorRange.getter();
    if ((v14 & 1) == 0)
    {

      v13 = 0;
    }
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v9 & 1;
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v13;
    *(_BYTE *)(a1 + 40) = v14 & 1 | 0x80;
  }
  else
  {
    if ((started & 1) != 0)
    {
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 16) = 1;
    }
    else
    {

      *(_QWORD *)a1 = v4;
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
    }
    *(_BYTE *)(a1 + 40) = 0;
  }
  return result;
}

void key path setter for ParticleEmitterComponent.ParticleEmitter.color : ParticleEmitterComponent.ParticleEmitter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6[5];
  char v7;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v6[0] = *(_QWORD *)a1;
  v6[1] = v1;
  v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  v7 = v5;
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v6[0], v1, v2, v3, v4, v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  ParticleEmitterComponent.ParticleEmitter.color.setter((uint64_t)v6);
}

void ParticleEmitterComponent.ParticleEmitter.color.setter(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  int v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  char v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;

  v2 = *(void **)a1;
  v1 = *(void **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(void **)(a1 + 24);
  v5 = *(void **)(a1 + 32);
  v6 = *(char *)(a1 + 40);
  if ((v6 & 0x80000000) == 0)
  {
    outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(*(void **)a1, v1, v4 & 1);
    ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
    if ((v4 & 1) != 0)
    {
      v7 = v2;
      v8 = v1;
      v9 = objc_msgSend(v7, sel_CGColor);
      ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
      v10 = objc_msgSend(v8, sel_CGColor);
      ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
      ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();

      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v2, (uint64_t)v1, v4, (uint64_t)v3, (uint64_t)v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v2, (uint64_t)v1, v4, (uint64_t)v3, (uint64_t)v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
      return;
    }
    v18 = objc_msgSend(v2, sel_CGColor);
    ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
    ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v2, (uint64_t)v1, v4, (uint64_t)v3, (uint64_t)v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v2, (uint64_t)v1, v4, (uint64_t)v3, (uint64_t)v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
    v16 = v2;
    v17 = v1;
    goto LABEL_8;
  }
  outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(*(void **)a1, v1, v4 & 1);
  outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v3, v5, v6 & 1);
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  if ((v4 & 1) == 0)
  {
    v20 = objc_msgSend(v2, sel_CGColor);
    ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
    ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v2, v1, 0);
    if ((v6 & 1) == 0)
      goto LABEL_6;
LABEL_10:
    v21 = v3;
    v22 = v5;
    v23 = objc_msgSend(v21, (SEL)&stru_1E9F49BC0.attr);
    ParticleEmitterComponent.ParticleEmitter.endColorA.setter();
    v24 = objc_msgSend(v22, (SEL)&stru_1E9F49BC0.attr);
    ParticleEmitterComponent.ParticleEmitter.endColorB.setter();
    ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();

    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v2, v1, v4 & 1);
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v2, (uint64_t)v1, v4, (uint64_t)v3, (uint64_t)v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
    v16 = v3;
    v17 = v5;
    v19 = 1;
    goto LABEL_11;
  }
  v11 = v2;
  v12 = v1;
  v13 = objc_msgSend(v11, sel_CGColor);
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  v14 = objc_msgSend(v12, sel_CGColor);
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();

  if ((v6 & 1) != 0)
    goto LABEL_10;
LABEL_6:
  v15 = objc_msgSend(v3, sel_CGColor);
  ParticleEmitterComponent.ParticleEmitter.endColorA.setter();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v3, v5, 0);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v2, v1, v4 & 1);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v2, (uint64_t)v1, v4, (uint64_t)v3, (uint64_t)v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  v16 = v3;
  v17 = v5;
LABEL_8:
  v19 = 0;
LABEL_11:
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v16, v17, v19);
}

void (*ParticleEmitterComponent.ParticleEmitter.color.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  ParticleEmitterComponent.ParticleEmitter.color.getter((uint64_t)v3);
  return ParticleEmitterComponent.ParticleEmitter.color.modify;
}

void ParticleEmitterComponent.ParticleEmitter.color.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v10[5];
  char v11;

  v3 = *a1;
  v4 = **a1;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = *((_BYTE *)v3 + 40);
  v10[0] = v4;
  v10[1] = v5;
  v10[2] = v6;
  v10[3] = v7;
  v10[4] = v8;
  v11 = v9;
  if ((a2 & 1) != 0)
  {
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v4, v5, v6, v7, v8, v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
    ParticleEmitterComponent.ParticleEmitter.color.setter((uint64_t)v10);
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(*v3, v3[1], v3[2], v3[3], v3[4], *((_BYTE *)v3 + 40), (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  }
  else
  {
    ParticleEmitterComponent.ParticleEmitter.color.setter((uint64_t)v10);
  }
  free(v3);
}

double ParticleEmitterComponent.Timing.VariableDuration.duration.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t ParticleEmitterComponent.Timing.VariableDuration.variation.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ParticleEmitterComponent.Timing.VariableDuration.init(duration:variation:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(double *)a3 = a4;
  *(_QWORD *)(a3 + 8) = result;
  *(_BYTE *)(a3 + 16) = a2 & 1;
  return result;
}

BOOL static ParticleEmitterComponent.Timing.VariableDuration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  if (vabdd_f64(*(double *)a2, *(double *)a1) > 0.00001)
    return 0;
  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = v4 & v3;
  if ((v4 & 1) == 0 && (v3 & 1) == 0)
    return vabdd_f64(*(double *)(a2 + 8), *(double *)(a1 + 8)) <= 0.00001;
  return v5;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F69746169726176;
  else
    return 0x6E6F697461727564;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.Timing.VariableDuration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ParticleEmitterComponent.Timing.VariableDuration.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.Timing.VariableDuration.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ParticleEmitterComponent.Timing.VariableDuration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  char v14;
  _BYTE v15[16];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.Timing.VariableDuration.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v15[15] = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v10 = v9;
    v15[14] = 1;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v14 = v13;
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v12;
    *(_BYTE *)(a2 + 16) = v14 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ParticleEmitterComponent.Timing.VariableDuration(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  if (vabdd_f64(*(double *)a2, *(double *)a1) > 0.00001)
    return 0;
  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = v4 & v3;
  if ((v4 & 1) == 0 && (v3 & 1) == 0)
    return vabdd_f64(*(double *)(a2 + 8), *(double *)(a1 + 8)) <= 0.00001;
  return v5;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.Timing.VariableDuration@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ParticleEmitterComponent.Timing.VariableDuration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.Timing.VariableDuration(_QWORD *a1)
{
  return ParticleEmitterComponent.Timing.VariableDuration.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ParticleEmitterComponent.Timing.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.Timing.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E69746165706572;
  else
    return 1701015151;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.Timing.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.Timing.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.Timing.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.Timing.CodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.Timing.OnceCodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 1953066341;
  else
    return 0x70556D726177;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.Timing.OnceCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.Timing.OnceCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.Timing.OnceCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.Timing.OnceCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1953066341;
  if (*v0 != 1)
    v1 = 1701602409;
  if (*v0)
    return v1;
  else
    return 0x70556D726177;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ParticleEmitterComponent.Timing.RepeatingCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys()
{
  lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ParticleEmitterComponent.Timing.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int16 v36;
  char v37;

  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.Timing.RepeatingCodingKeys>);
  v21 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v25 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.Timing.OnceCodingKeys>);
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v28 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.Timing.CodingKeys>);
  v30 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v31 = v1[1];
  v32 = v8;
  v9 = (char *)v1[3];
  v22 = v1[2];
  v23 = v9;
  v10 = v1[5];
  v24 = v1[4];
  v11 = (char *)v1[6];
  v12 = *((__int16 *)v1 + 28);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v12 < 0)
  {
    LODWORD(v27) = v12;
    v28 = v11;
    v29 = v10;
    v16 = v21;
    LOBYTE(v34) = 1;
    lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys();
    v17 = v25;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    LOBYTE(v34) = 0;
    v18 = v26;
    v19 = v33;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    if (!v19)
    {
      v34 = v22;
      v35 = v23;
      LOBYTE(v36) = v24 & 1;
      v37 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v34 = v29;
      v35 = v28;
      v36 = v27 & 0x1FF;
      v37 = 2;
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v17, v18);
  }
  else
  {
    LOBYTE(v34) = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys();
    v13 = v28;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    LOBYTE(v34) = 0;
    v14 = v29;
    v15 = v33;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    if (!v15)
    {
      v34 = v22;
      v35 = v23;
      LOBYTE(v36) = v24 & 1;
      v37 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v7, v5);
}

uint64_t ParticleEmitterComponent.Timing.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  __int128 v36;
  unsigned int v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __int16 v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  __int128 v53;
  unsigned __int8 v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  unsigned int v59;
  char v60;

  v47 = a2;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.Timing.RepeatingCodingKeys>);
  v48 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v49 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.Timing.OnceCodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.Timing.CodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v51 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys();
  v13 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
    goto LABEL_7;
  v46 = v5;
  v14 = v4;
  v15 = v49;
  v16 = v50;
  v52 = v9;
  v17 = KeyedDecodingContainer.allKeys.getter();
  v18 = v8;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v23 = &type metadata for ParticleEmitterComponent.Timing;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x1E0DEC450], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v11, v8);
LABEL_7:
    v38 = (uint64_t)v51;
    return __swift_destroy_boxed_opaque_existential_1(v38);
  }
  v19 = v52;
  if ((*(_BYTE *)(v17 + 32) & 1) != 0)
  {
    v20 = v52;
    LOBYTE(v53) = 1;
    lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    LOBYTE(v53) = 0;
    v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LODWORD(v46) = v33;
    LOBYTE(v53) = 1;
    lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v44 = v56;
    v45 = v32;
    v39 = v11;
    v40 = v57;
    v59 = v58;
    v60 = 2;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v15, v16);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v39, v18);
    v36 = v53;
    if (v55)
      v41 = 256;
    else
      v41 = 0;
    v34 = v41 | v54 | 0x8000;
    v38 = (uint64_t)v51;
    v35 = v44;
    v28 = v45;
    v30 = v46;
    v37 = v59;
  }
  else
  {
    LOBYTE(v53) = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys();
    v24 = v7;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v25 = v19;
    LOBYTE(v53) = 0;
    v26 = v14;
    v27 = v24;
    v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v30 = v29;
    LOBYTE(v56) = 1;
    lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v27, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v18);
    v34 = 0;
    v40 = *((_QWORD *)&v53 + 1);
    v35 = v53;
    v36 = 0uLL;
    v37 = v54;
    v38 = (uint64_t)v51;
  }
  v42 = v47;
  *v47 = v28;
  v42[1] = v30 & 1;
  v42[2] = v35;
  v42[3] = v40;
  v42[4] = v37;
  *(_OWORD *)(v42 + 5) = v36;
  *((_WORD *)v42 + 28) = v34;
  return __swift_destroy_boxed_opaque_existential_1(v38);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.Timing@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ParticleEmitterComponent.Timing.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.Timing(_QWORD *a1)
{
  return ParticleEmitterComponent.Timing.encode(to:)(a1);
}

uint64_t ParticleEmitterComponent.timing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  __int16 v20;
  __int16 v21;

  ParticleEmitterComponent.warmupDuration.getter();
  v2 = 0;
  v4 = vabdd_f64(0.0, v3);
  v5 = 0;
  if (v4 > 0.00001)
  {
    ParticleEmitterComponent.warmupDuration.getter();
    v5 = v6;
  }
  ParticleEmitterComponent.emissionDuration.getter();
  v8 = v7;
  ParticleEmitterComponent.emissionDurationVariation.getter();
  v10 = vabdd_f64(0.0, v9);
  if (v10 > 0.00001)
  {
    ParticleEmitterComponent.emissionDurationVariation.getter();
    v2 = v11;
  }
  result = ParticleEmitterComponent.shouldLoop.getter();
  if ((result & 1) != 0)
  {
    result = ParticleEmitterComponent.idleDuration.getter();
    v13 = 0;
    if (vabdd_f64(0.0, v14) <= 0.00001)
    {
      v20 = 0;
      v21 = -32512;
      v18 = 0;
    }
    else
    {
      ParticleEmitterComponent.idleDuration.getter();
      v13 = v15;
      result = ParticleEmitterComponent.idleDurationVariation.getter();
      v17 = v16;
      v18 = 0;
      v19 = vabdd_f64(0.0, v17);
      if (v19 > 0.00001)
        result = ParticleEmitterComponent.idleDurationVariation.getter();
      v20 = v19 <= 0.00001;
      v21 = 0x8000;
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4 <= 0.00001;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v2;
    *(_QWORD *)(a1 + 32) = v10 <= 0.00001;
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v18;
    *(_WORD *)(a1 + 56) = v21 | v20;
  }
  else
  {
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4 <= 0.00001;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v2;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = v10 <= 0.00001;
    *(_WORD *)(a1 + 56) = 0;
  }
  return result;
}

double key path getter for ParticleEmitterComponent.timing : ParticleEmitterComponent@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int16 v3;
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;
  __int16 v9;

  ParticleEmitterComponent.timing.getter((uint64_t)v6);
  v2 = v8;
  v3 = v9;
  v4 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v4;
  result = *(double *)&v7;
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 48) = v2;
  *(_WORD *)(a1 + 56) = v3;
  return result;
}

uint64_t key path setter for ParticleEmitterComponent.timing : ParticleEmitterComponent()
{
  return ParticleEmitterComponent.timing.setter();
}

uint64_t ParticleEmitterComponent.timing.setter()
{
  ParticleEmitterComponent.shouldLoop.setter();
  ParticleEmitterComponent.warmupDuration.setter();
  ParticleEmitterComponent.emissionDuration.setter();
  ParticleEmitterComponent.emissionDurationVariation.setter();
  ParticleEmitterComponent.idleDuration.setter();
  return ParticleEmitterComponent.idleDurationVariation.setter();
}

void (*ParticleEmitterComponent.timing.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[8] = v1;
  ParticleEmitterComponent.timing.getter((uint64_t)v3);
  return ParticleEmitterComponent.timing.modify;
}

void ParticleEmitterComponent.timing.modify(void **a1)
{
  void *v1;

  v1 = *a1;
  ParticleEmitterComponent.timing.setter();
  free(v1);
}

BOOL specialized static ParticleEmitterComponent.Timing.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  int v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  unsigned int v11;
  double v12;
  double v13;
  BOOL v14;
  char v15;
  char v16;

  v3 = *(double *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(double *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(__int16 *)(a1 + 56);
  v7 = *(double *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(double *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(unsigned __int16 *)(a2 + 56);
  if ((v6 & 0x80000000) == 0)
  {
    if ((v11 & 0x8000) == 0)
    {
      if ((v2 & 1) != 0)
      {
        if ((v8 & 1) != 0)
          goto LABEL_13;
      }
      else if ((v8 & 1) == 0 && vabdd_f64(v7, v3) <= 0.00001)
      {
LABEL_13:
        v14 = vabdd_f64(v9, v4) > 0.00001;
        v15 = v14 | v5;
        v16 = (v14 ^ (v14 | v5)) & v10;
        if ((v15 & 1) == 0 && (v10 & 1) == 0)
        {
          v12 = *(double *)(a1 + 24);
          v13 = *(double *)(a2 + 24);
          return vabdd_f64(v13, v12) <= 0.00001;
        }
        return v16 & 1;
      }
    }
    return 0;
  }
  if ((v11 & 0x8000) == 0)
    return 0;
  v12 = *(double *)(a1 + 48);
  v13 = *(double *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    if ((v8 & 1) == 0)
      return 0;
  }
  else if ((v8 & 1) != 0 || vabdd_f64(v7, v3) > 0.00001)
  {
    return 0;
  }
  if (vabdd_f64(v9, v4) > 0.00001)
    return 0;
  if ((v5 & 1) != 0)
  {
    if ((v10 & 1) == 0)
      return 0;
  }
  else if ((v10 & 1) != 0 || vabdd_f64(*(double *)(a2 + 24), *(double *)(a1 + 24)) > 0.00001)
  {
    return 0;
  }
  if ((v6 & 0x100) == 0)
  {
    if ((v11 & 0x100) == 0 && vabdd_f64(*(double *)(a2 + 40), *(double *)(a1 + 40)) <= 0.00001)
    {
      if (((v6 | v11) & 1) == 0)
        return vabdd_f64(v13, v12) <= 0.00001;
      v16 = v6 & v11;
      return v16 & 1;
    }
    return 0;
  }
  return (v11 >> 8) & 1;
}

uint64_t specialized static ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  char v4;
  void *v5;
  void *v6;
  char v7;
  id v8;
  id v9;
  id v10;
  id v11;
  char v12;
  char v13;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(void **)a2;
  v6 = *(void **)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  if ((v4 & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
    {
      type metadata accessor for NSObject();
      outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v5, v6, 0);
      outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v2, v3, 0);
      v13 = static NSObject.== infix(_:_:)();
      v4 = 0;
      v7 = 0;
      goto LABEL_10;
    }
    goto LABEL_6;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
LABEL_6:
    outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(*(void **)a2, *(void **)(a2 + 8), v7);
    outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v2, v3, v4);
    v13 = 0;
    goto LABEL_10;
  }
  type metadata accessor for NSObject();
  outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v5, v6, 1);
  outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v2, v3, 1);
  v8 = v2;
  v9 = v5;
  v10 = v3;
  v11 = v6;
  v12 = static NSObject.== infix(_:_:)();

  if ((v12 & 1) != 0)
  {
    v13 = static NSObject.== infix(_:_:)();

  }
  else
  {

    v13 = 0;
  }
  v4 = 1;
  v7 = 1;
LABEL_10:
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v2, v3, v4);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v5, v6, v7);
  return v13 & 1;
}

uint64_t specialized static ParticleEmitterComponent.ParticleEmitter.ParticleColor.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *v25;
  char v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  int v40;
  void *v41;
  int v42;
  void *v43;
  void *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v41 = *(void **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(void **)(a2 + 24);
  v10 = *(void **)(a2 + 32);
  v42 = *(char *)(a2 + 40);
  v40 = *(char *)(a1 + 40);
  v39 = (void *)v2;
  if (v40 < 0)
  {
    if (v42 < 0)
    {
      v33 = *(_QWORD *)(a1 + 16) & 1;
      v25 = *(void **)(a1 + 32);
      v37 = *(_QWORD *)(a1 + 16);
      v46 = *(_QWORD *)a1;
      v47 = v2;
      v48 = v4 & 1;
      v43 = v6;
      v44 = v7;
      v45 = v8 & 1;
      v26 = v4;
      v27 = v5;
      v28 = (void *)v2;
      v29 = (void *)v3;
      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v3, v2, v26, (uint64_t)v41, v27, v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v6, (uint64_t)v7, v8, (uint64_t)v9, (uint64_t)v10, v42, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
      outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v29, v28, v33);
      outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v6, v7, v8 & 1);
      v30 = v25;
      v31 = v40 & 1;
      outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v41, v25, v40 & 1);
      v32 = v42 & 1;
      outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v9, v10, v42 & 1);
      if ((specialized static ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue.== infix(_:_:)((uint64_t)&v46, (uint64_t)&v43) & 1) != 0)
      {
        v46 = (uint64_t)v41;
        v47 = (uint64_t)v30;
        v48 = v40 & 1;
        v43 = v9;
        v44 = v10;
        v45 = v42 & 1;
        v35 = specialized static ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue.== infix(_:_:)((uint64_t)&v46, (uint64_t)&v43);
        outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v6, v7, v8 & 1);
        outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v29, v39, v37 & 1);
        outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v29, (uint64_t)v39, v37, (uint64_t)v41, (uint64_t)v30, v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
        outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v6, (uint64_t)v7, v8, (uint64_t)v9, (uint64_t)v10, v42, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
        outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v9, v10, v32);
        outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v41, v30, v31);
        v17 = v35;
        return v17 & 1;
      }
      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v9, v10, v32);
      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v41, v30, v31);
      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v6, v7, v8 & 1);
      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v29, v39, v37 & 1);
      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v29, (uint64_t)v39, v37, (uint64_t)v41, (uint64_t)v30, v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
      v18 = (uint64_t)v6;
      v19 = (uint64_t)v7;
      v20 = v8;
      v21 = (uint64_t)v9;
      v22 = (uint64_t)v10;
      v23 = v42;
      goto LABEL_6;
    }
LABEL_5:
    v38 = *(_QWORD *)a1;
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v3, v2, v4, (uint64_t)v41, v5, v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v6, (uint64_t)v7, v8, (uint64_t)v9, (uint64_t)v10, v42, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v38, (uint64_t)v39, v4, (uint64_t)v41, v5, v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
    v18 = (uint64_t)v6;
    v19 = (uint64_t)v7;
    v20 = v8;
    v21 = (uint64_t)v9;
    v22 = (uint64_t)v10;
    v23 = v42;
LABEL_6:
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v18, v19, v20, v21, v22, v23, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
    v17 = 0;
    return v17 & 1;
  }
  if (v42 < 0)
    goto LABEL_5;
  v46 = *(_QWORD *)a1;
  v47 = v2;
  v48 = v4 & 1;
  v43 = v6;
  v44 = v7;
  v45 = v8 & 1;
  v36 = (uint64_t)v9;
  v11 = (uint64_t)v9;
  v12 = (uint64_t)v10;
  v13 = v5;
  v14 = (uint64_t)v10;
  v15 = v2;
  v16 = v3;
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v6, (uint64_t)v7, v8, v11, v14, v42, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v16, v15, v4, (uint64_t)v41, v13, v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v16, v15, v4, (uint64_t)v41, v13, v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v6, (uint64_t)v7, v8, v36, v12, v42, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  v34 = specialized static ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue.== infix(_:_:)((uint64_t)&v46, (uint64_t)&v43);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v16, (uint64_t)v39, v4, (uint64_t)v41, v13, v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v6, (uint64_t)v7, v8, v36, v12, v42, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v6, (uint64_t)v7, v8, v36, v12, v42, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v16, (uint64_t)v39, v4, (uint64_t)v41, v13, v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  v17 = v34;
  return v17 & 1;
}

id outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(void *a1, void *a2, char a3)
{
  id v4;

  if ((a3 & 1) != 0)
  {
    v4 = a1;
    a1 = a2;
  }
  return a1;
}

void outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(void *a1, void *a2, char a3)
{

  if ((a3 & 1) != 0)
}

uint64_t outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;

  if ((a6 & 0x80) == 0)
    return a7(a1, a2, a3 & 1);
  v10 = a6 & 1;
  a7(a1, a2, a3 & 1);
  return a7(a4, a5, v10);
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.VariableDuration.CodingKeys, &unk_1E9F430A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.VariableDuration.CodingKeys, &unk_1E9F430A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.VariableDuration.CodingKeys, &unk_1E9F430A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.VariableDuration.CodingKeys, &unk_1E9F430A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.CodingKeys, &unk_1E9F42EF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.CodingKeys, &unk_1E9F42EF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.CodingKeys, &unk_1E9F42EF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.CodingKeys, &unk_1E9F42EF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.RepeatingCodingKeys, &unk_1E9F43018);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.RepeatingCodingKeys, &unk_1E9F43018);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.RepeatingCodingKeys, &unk_1E9F43018);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.RepeatingCodingKeys, &unk_1E9F43018);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.VariableDuration, &type metadata for ParticleEmitterComponent.Timing.VariableDuration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.VariableDuration, &type metadata for ParticleEmitterComponent.Timing.VariableDuration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.OnceCodingKeys, &unk_1E9F42F88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.OnceCodingKeys, &unk_1E9F42F88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.OnceCodingKeys, &unk_1E9F42F88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ParticleEmitterComponent.Timing.OnceCodingKeys, &unk_1E9F42F88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys);
  }
  return result;
}

double sub_1D9587C4C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  char v8;

  ParticleEmitterComponent.ParticleEmitter.color.getter((uint64_t)v6);
  v2 = v7;
  v3 = v8;
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 40) = v3;
  return result;
}

uint64_t destroy for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t a1)
{
  return outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40), (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
}

uint64_t initializeWithCopy for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(*(_QWORD *)a2, v4, v5, v6, v7, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(*(_QWORD *)a2, v4, v5, v6, v7, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v9, v10, v11, v12, v13, v14, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v3;
  v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v5, v7, v6, v8, v9, v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 16) = 2 * -a2;
      *(_BYTE *)(result + 40) = 0;
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40) >> 7;
}

uint64_t destructiveProjectEnumData for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t result)
{
  *(_BYTE *)(result + 40) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t result, char a2)
{
  char v2;

  v2 = *(_BYTE *)(result + 40) & 1 | (a2 << 7);
  *(_QWORD *)(result + 16) &= 1uLL;
  *(_BYTE *)(result + 40) = v2;
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ParticleColor()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.ParticleColor;
}

void destroy for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(uint64_t a1)
{
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(*(void **)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  char v5;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(*(void **)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(*(void **)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.Timing(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 58))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ParticleEmitterComponent.Timing(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_WORD *)(a1 + 56) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 58) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 2 * -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 42) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 58) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for ParticleEmitterComponent.Timing(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 56) >> 15;
}

uint64_t destructiveProjectEnumData for ParticleEmitterComponent.Timing(uint64_t result)
{
  *(_WORD *)(result + 56) &= ~0x8000u;
  return result;
}

uint64_t destructiveInjectEnumTag for ParticleEmitterComponent.Timing(uint64_t result, __int16 a2)
{
  uint64_t v2;
  __int16 v3;

  v2 = *(_QWORD *)(result + 32) & 1;
  v3 = *(_WORD *)(result + 56) & 0x1FF | (a2 << 15);
  *(_QWORD *)(result + 8) &= 1uLL;
  *(_QWORD *)(result + 32) = v2;
  *(_WORD *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.Timing()
{
  return &type metadata for ParticleEmitterComponent.Timing;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.Timing.VariableDuration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.Timing.VariableDuration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.Timing.VariableDuration()
{
  return &type metadata for ParticleEmitterComponent.Timing.VariableDuration;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.Presets()
{
  return &type metadata for ParticleEmitterComponent.Presets;
}

_BYTE *destructiveInjectEnumTag for ParticleEmitterComponent.Timing.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.Timing.CodingKeys()
{
  return &unk_1E9F42EF8;
}

void *type metadata accessor for ParticleEmitterComponent.Timing.OnceCodingKeys()
{
  return &unk_1E9F42F88;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.Timing.RepeatingCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.Timing.RepeatingCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D95883A0 + 4 * byte_1D95E2945[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D95883D4 + 4 * byte_1D95E2940[v4]))();
}

uint64_t sub_1D95883D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D95883DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D95883E4);
  return result;
}

uint64_t sub_1D95883F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D95883F8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D95883FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D9588404(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.Timing.RepeatingCodingKeys()
{
  return &unk_1E9F43018;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.Timing.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.Timing.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D95884FC + 4 * byte_1D95E294F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D9588530 + 4 * byte_1D95E294A[v4]))();
}

uint64_t sub_1D9588530(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D9588538(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D9588540);
  return result;
}

uint64_t sub_1D958854C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D9588554);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D9588558(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D9588560(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.Timing.VariableDuration.CodingKeys()
{
  return &unk_1E9F430A8;
}

uint64_t specialized ParticleEmitterComponent.Timing.VariableDuration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F69746169726176 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized ParticleEmitterComponent.Timing.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701015151 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69746165706572 && a2 == 0xE900000000000067)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized ParticleEmitterComponent.Timing.OnceCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x70556D726177 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1953066341 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized ParticleEmitterComponent.Timing.RepeatingCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x70556D726177 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1953066341 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701602409 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

double ARFrame.displayToCameraMatrix(for:viewportSize:)(uint64_t a1)
{
  void *v1;
  double result;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  simd_float4x4 v6;

  objc_msgSend(v1, sel_displayTransformForOrientation_viewportSize_, a1);
  v6.columns[0].i64[1] = *(_QWORD *)&v3.f64[1];
  v6.columns[1].i64[1] = *(_QWORD *)&v4.f64[1];
  *(float32x2_t *)v6.columns[0].f32 = vcvt_f32_f64(v3);
  *(float32x2_t *)v6.columns[1].f32 = vcvt_f32_f64(v4);
  *(float32x2_t *)v6.columns[3].f32 = vcvt_f32_f64(v5);
  v6.columns[3].i64[1] = 0x3F80000000000000;
  v6.columns[2] = (simd_float4)xmmword_1D95E2F60;
  *(_QWORD *)&result = (unint64_t)__invert_f4(v6);
  return result;
}

uint64_t key path setter for EntityRotationGestureRecognizer.entity : EntityRotationGestureRecognizer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = swift_retain();
  EntityRotationGestureRecognizer.entity.willset(v5);
  v6 = (_QWORD *)(v4 + OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity);
  swift_beginAccess();
  *v6 = v2;
  v6[1] = v3;
  return swift_release();
}

id EntityRotationGestureRecognizer.entity.willset(uint64_t a1)
{
  char *v1;
  char *v2;
  id result;
  char *v5;
  char v6;

  v2 = v1;
  result = objc_msgSend(v2, sel_isEnabled);
  if ((_DWORD)result)
  {
    v5 = &v2[OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity];
    result = (id)swift_beginAccess();
    if (*(_QWORD *)v5)
    {
      if (a1)
      {
        type metadata accessor for Entity();
        lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4648], MEMORY[0x1E0CD4660]);
        swift_retain_n();
        v6 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        result = (id)swift_release();
        if ((v6 & 1) != 0)
          return result;
      }
    }
    else if (!a1)
    {
      return result;
    }
    return objc_msgSend(v2, sel_setState_, 5);
  }
  return result;
}

uint64_t EntityRotationGestureRecognizer.entity.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t EntityRotationGestureRecognizer.entity.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;

  EntityRotationGestureRecognizer.entity.willset(a1);
  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_release();
}

void (*EntityRotationGestureRecognizer.entity.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  _OWORD *v5;

  v3 = (char *)malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity;
  *((_QWORD *)v3 + 5) = v1;
  *((_QWORD *)v3 + 6) = v4;
  v5 = (_OWORD *)(v1 + v4);
  swift_beginAccess();
  *(_OWORD *)(v3 + 24) = *v5;
  swift_retain();
  return EntityRotationGestureRecognizer.entity.modify;
}

void EntityRotationGestureRecognizer.entity.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48));
  if ((a2 & 1) != 0)
  {
    v6 = swift_retain();
    EntityRotationGestureRecognizer.entity.willset(v6);
    *v5 = v3;
    v5[1] = v4;
    swift_release();
  }
  else
  {
    EntityRotationGestureRecognizer.entity.willset(v3);
    *v5 = v3;
    v5[1] = v4;
  }
  swift_release();
  free(v2);
}

void EntityRotationGestureRecognizer.touchesBegan(_:with:)(uint64_t a1, void *a2)
{
  void *v2;
  id v4;
  id v5;
  uint64_t v6;
  Class isa;
  objc_super v8;

  v4 = v2;
  v5 = a2;
  v6 = swift_bridgeObjectRetain();
  specialized Set._Variant.filter(_:)(v6, v4, v5);

  if (objc_msgSend(v4, sel_numberOfTouches))
  {
    type metadata accessor for UITouch();
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for UITouch, MEMORY[0x1E0DEFCF8]);
    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_release();
    v8.receiver = v4;
    v8.super_class = (Class)type metadata accessor for EntityRotationGestureRecognizer();
    objc_msgSendSuper2(&v8, sel_touchesBegan_withEvent_, isa, v5);

  }
  else
  {
    swift_release();
    objc_msgSend(v4, sel_setState_, 5);
  }
}

Swift::Bool __swiftcall EntityRotationGestureRecognizer.canPrevent(_:)(UIGestureRecognizer *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  UIGestureRecognizer *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t);
  UIGestureRecognizer *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  objc_super v16;

  v2 = v1;
  swift_getObjectType();
  v4 = swift_conformsToProtocol2();
  if (v4)
    v5 = v4;
  else
    v5 = 0;
  if (v4)
    v6 = a1;
  else
    v6 = 0;
  if (!v6)
    goto LABEL_12;
  v7 = (uint64_t *)&v2[OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity];
  swift_beginAccess();
  v8 = *v7;
  if (!v8)
    goto LABEL_12;
  ObjectType = swift_getObjectType();
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  v11 = a1;
  swift_retain();
  v12 = v10(ObjectType, v5);
  if (!v12)
  {

    swift_release();
LABEL_12:
    v16.receiver = v2;
    v16.super_class = (Class)type metadata accessor for EntityRotationGestureRecognizer();
    v14 = -[UIGestureRecognizer canPreventGestureRecognizer:](&v16, sel_canPreventGestureRecognizer_, a1);
    return v14 & 1;
  }
  v13 = v12;
  swift_retain();
  v14 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v13, v8);

  swift_release();
  swift_release_n();
  return v14 & 1;
}

id EntityRotationGestureRecognizer.__allocating_init(target:action:)(_QWORD *a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v13;

  v4 = a1[3];
  if (v4)
  {
    v6 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v7 = *(_QWORD *)(v4 - 8);
    MEMORY[0x1E0C80A78](v6);
    v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v7 + 16))(v9);
    v10 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v10 = 0;
  }
  v11 = objc_msgSend(objc_allocWithZone(v2), sel_initWithTarget_action_, v10, a2);
  swift_unknownObjectRelease();
  return v11;
}

id EntityRotationGestureRecognizer.init(target:action:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  objc_class *v12;
  id v13;
  objc_super v15;
  _QWORD v16[3];
  uint64_t v17;

  v5 = &v2[OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  outlined init with copy of Any?(a1, (uint64_t)v16);
  v6 = v17;
  if (v17)
  {
    v7 = __swift_project_boxed_opaque_existential_1(v16, v17);
    v8 = *(_QWORD *)(v6 - 8);
    MEMORY[0x1E0C80A78](v7);
    v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v8 + 16))(v10);
    v11 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    v11 = 0;
  }
  v12 = (objc_class *)type metadata accessor for EntityRotationGestureRecognizer();
  v15.receiver = v2;
  v15.super_class = v12;
  v13 = objc_msgSendSuper2(&v15, sel_initWithTarget_action_, v11, a2);
  swift_unknownObjectRelease();
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, &demangling cache variable for type metadata for Any?);
  return v13;
}

id EntityRotationGestureRecognizer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EntityRotationGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void (*protocol witness for EntityGestureRecognizer.entity.modify in conformance EntityRotationGestureRecognizer(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityRotationGestureRecognizer.entity.modify(v2);
  return protocol witness for EntityGestureRecognizer.entity.modify in conformance EntityTranslationGestureRecognizer;
}

uint64_t type metadata accessor for EntityRotationGestureRecognizer()
{
  return objc_opt_self();
}

uint64_t sub_1D958A284@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  _OWORD *v3;

  v3 = (_OWORD *)(*a1 + OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t method lookup function for EntityRotationGestureRecognizer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EntityRotationGestureRecognizer.entity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of EntityRotationGestureRecognizer.entity.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of EntityRotationGestureRecognizer.entity.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t static MeshResource.__generateFace(from:fillMesh:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  _QWORD v9[2];

  v2 = type metadata accessor for __AnyARKitObject();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[1] = a1;
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARFaceGeometry);
  v6 = a1;
  __AnyARKitObject.init<A>(_:)();
  v7 = static MeshResource.__generateFace(from:fillMesh:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

uint64_t AnchorEntity.__allocating_init(anchor:)(void *a1)
{
  return AnchorEntity.__allocating_init(anchor:)(a1, (unint64_t *)&lazy cache variable for type metadata for ARAnchor, 0x1E0C89568, MEMORY[0x1E0CD3500]);
}

uint64_t AnchorEntity.__allocating_init(raycastResult:)(void *a1)
{
  return AnchorEntity.__allocating_init(anchor:)(a1, &lazy cache variable for type metadata for ARRaycastResult, 0x1E0C895F0, MEMORY[0x1E0CD34F0]);
}

uint64_t AnchorEntity.__allocating_init(anchor:)(void *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  _QWORD v13[2];

  v7 = type metadata accessor for __AnyARKitObject();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = a1;
  type metadata accessor for ARReferenceObject(0, a2);
  v10 = a1;
  __AnyARKitObject.init<A>(_:)();
  v11 = a4(v9);

  return v11;
}

void AnchoringComponent.init(_:)(void *a1)
{
  uint64_t v2;
  id v3;

  v2 = type metadata accessor for __AnyARKitObject();
  MEMORY[0x1E0C80A78](v2);
  type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
  v3 = a1;
  __AnyARKitObject.init<A>(_:)();
  AnchoringComponent.init(_:)();

}

ARReferenceObject_optional __swiftcall __ARReferenceProviding.fetchReferenceObject(group:name:)(Swift::String group, Swift::String name)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Bool v7;
  objc_class *v8;
  _QWORD v9[2];
  ARReferenceObject_optional result;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __AnyARKitObject?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of __ARReferenceProviding.__fetchReferenceObject(group:name:)();
  v5 = type metadata accessor for __AnyARKitObject();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of __AnyARKitObject?((uint64_t)v4);
    v8 = 0;
  }
  else
  {
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceObject);
    __AnyARKitObject.as<A>(type:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v8 = (objc_class *)v9[1];
  }
  result.value.super.isa = v8;
  result.is_nil = v7;
  return result;
}

uint64_t outlined destroy of __AnyARKitObject?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __AnyARKitObject?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __ARReferenceProviding.fetchReferenceImage(group:name:physicalWidth:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __AnyARKitObject?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of __ARReferenceProviding.__fetchReferenceImage(group:name:physicalWidth:)();
  v3 = type metadata accessor for __AnyARKitObject();
  v4 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    outlined destroy of __AnyARKitObject?((uint64_t)v2);
    return 0;
  }
  else
  {
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
    __AnyARKitObject.as<A>(type:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
    return v6[1];
  }
}

Swift::Bool __swiftcall __REAnchoringType.isEqualToARAnchor(anchor:)(ARAnchor *anchor)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  ARAnchor *v6;
  _QWORD v8[2];

  v2 = type metadata accessor for __AnyARKitObject();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = anchor;
  type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
  v6 = anchor;
  __AnyARKitObject.init<A>(_:)();
  LOBYTE(anchor) = __REAnchoringType.isEqualToARAnchor(anchor:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return anchor & 1;
}

uint64_t static ShapeResource.generateStaticMesh(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for __AnyARKitObject();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 72) = v1;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 + 48) + 8))(*(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 40));
  if (v1)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t static ShapeResource.generateStaticMesh(from:)()
{
  _QWORD *v0;
  void *v1;
  id v2;
  _QWORD *v3;

  v1 = (void *)v0[3];
  v0[2] = v1;
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARMeshAnchor);
  v2 = v1;
  __AnyARKitObject.init<A>(_:)();
  v3 = (_QWORD *)swift_task_alloc();
  v0[8] = v3;
  *v3 = v0;
  v3[1] = static ShapeResource.generateStaticMesh(from:);
  return static ShapeResource.generateStaticMesh(from:)();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  return MEMORY[0x1E0CD36A0]();
}

void __swiftcall EntityGestureRecognizer.planeForUnprojection(heightOffset:)(simd_float4x4_optional *__return_ptr retstr, Swift::Float_optional *heightOffset)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int8 *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  __int128 v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Bool v30;
  float32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x2_t v37;
  float32x2_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t active;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  int8x16_t v64;
  int8x16_t v65;
  float32x4_t v66;
  __int128 v67;
  id v68[3];
  simd_float4x4_optional *v69;

  v5 = v3;
  v6 = v2;
  v9 = type metadata accessor for AnchoringComponent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = &v65.i8[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = &v65.i8[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14);
  v18 = (uint64_t *)((char *)v65.i64 - v17);
  v19 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  v68[0] = (id)v4;
  v20 = v19(v6, v5);
  v22 = 0uLL;
  if (!v20)
  {
    v30 = 1;
    v31 = 0uLL;
LABEL_19:
    retstr->value.columns[0].i64[0] = 0;
    retstr->value.columns[0].i64[1] = 0;
    retstr->value.columns[1] = (simd_float4)v22;
    retstr->value.columns[2].i64[0] = 0;
    retstr->value.columns[2].i64[1] = 0;
    retstr->value.columns[3] = (simd_float4)v31;
    retstr->is_nil = v30;
    return;
  }
  v23 = v20;
  v69 = retstr;
  LODWORD(v21) = (_DWORD)heightOffset;
  if (((unint64_t)heightOffset & 0x100000000) != 0)
    *(float *)&v21 = 0.0;
  v67 = v21;
  v24 = Entity.anchor.getter();
  if (v24)
  {
    v26 = v24;
    v27 = v25;
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target));
    v29 = *(int *)(v28 + 48);
    v66.i64[0] = v23;
    v65.i64[0] = (uint64_t)v18 + v29;
    *v18 = v26;
    v18[1] = v27;
    swift_retain();
    HasAnchoring.anchoring.getter();
    AnchoringComponent.target.getter();
    (*(void (**)(__int8 *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v18, 0, 1, v28);
    swift_release();
  }
  else
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target));
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v18, 1, 1, v32);
  }
  outlined init with copy of (HasAnchoring, AnchoringComponent.Target)?((uint64_t)v18, (uint64_t)v16);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target));
  if ((*(unsigned int (**)(__int8 *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v16, 1, v33) == 1)
  {
    HasTransform.transformMatrix(relativeTo:)();
    v66 = v34;
    *(float32x4_t *)v68 = v35;
    swift_release();
    v36 = (int8x16_t)vmulq_f32(v66, v66);
    *(float32x2_t *)v36.i8 = vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
    v36.i32[0] = vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1)).u32[0];
    v37 = vrsqrte_f32((float32x2_t)v36.u32[0]);
    v38 = vmul_f32(v37, vrsqrts_f32((float32x2_t)v36.u32[0], vmul_f32(v37, v37)));
    v66 = vmulq_n_f32(v66, vmul_f32(v38, vrsqrts_f32((float32x2_t)v36.u32[0], vmul_f32(v38, v38))).f32[0]);
    outlined destroy of (HasAnchoring, AnchoringComponent.Target)?((uint64_t)v18);
LABEL_17:
    v22 = v66;
LABEL_18:
    retstr = v69;
    v30 = 0;
    v31 = vaddq_f32(*(float32x4_t *)v68, vmulq_n_f32(v22, *(float *)&v67));
    goto LABEL_19;
  }
  v39 = &v16[*(int *)(v33 + 48)];
  v40 = type metadata accessor for AnchoringComponent.Target();
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v41 + 88))(v39, v40) != *MEMORY[0x1E0CD3B68])
  {
    HasTransform.transformMatrix(relativeTo:)();
    v66 = v50;
    *(float32x4_t *)v68 = v51;
    swift_release();
    swift_release();
    v52 = (int8x16_t)vmulq_f32(v66, v66);
    *(float32x2_t *)v52.i8 = vadd_f32(*(float32x2_t *)v52.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL));
    v52.i32[0] = vadd_f32(*(float32x2_t *)v52.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.i8, 1)).u32[0];
    v53 = vrsqrte_f32((float32x2_t)v52.u32[0]);
    v54 = vmul_f32(v53, vrsqrts_f32((float32x2_t)v52.u32[0], vmul_f32(v53, v53)));
    v66 = vmulq_n_f32(v66, vmul_f32(v54, vrsqrts_f32((float32x2_t)v52.u32[0], vmul_f32(v54, v54))).f32[0]);
    outlined destroy of (HasAnchoring, AnchoringComponent.Target)?((uint64_t)v18);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v40);
    goto LABEL_17;
  }
  v42 = (uint64_t)v18;
  swift_release();
  v43 = objc_msgSend(v68[0], sel_view);
  if (!v43)
  {
LABEL_21:
    swift_release();
    outlined destroy of (HasAnchoring, AnchoringComponent.Target)?(v42);
    v30 = 1;
    v31 = 0uLL;
    retstr = v69;
    v22 = 0uLL;
    goto LABEL_19;
  }
  v44 = v43;
  type metadata accessor for ARView();
  v45 = swift_dynamicCastClass();
  if (!v45)
  {

    goto LABEL_21;
  }
  if (*(_QWORD *)(v45 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    active = dispatch thunk of Scene.internalActiveCamera.getter();
    swift_release();
    if (active)
    {
      type metadata accessor for Entity();
      HasTransform.transformMatrix(relativeTo:)();
      Transform.init(matrix:)();
      *(float32x4_t *)v68 = v47;
      v65 = v49;
      v66 = v48;

      swift_release();
    }
    else
    {
      Transform.init()();
      *(float32x4_t *)v68 = v55;
      v65 = v57;
      v66 = v56;

    }
    specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v65.i64, v66);
    v66 = v58;
    *(float32x4_t *)v68 = v59;
    HasTransform.position(relativeTo:)();
    v65 = v60;
    swift_release();
    v61 = vsubq_f32((float32x4_t)0, v66);
    v62.i32[0] = vextq_s8(v65, v65, 8uLL).u32[0];
    v62.i32[1] = 1.0;
    v63 = vadd_f32(vmul_f32(vsub_f32(*(float32x2_t *)v65.i8, (float32x2_t)v68[0]), *(float32x2_t *)v61.f32), vmul_f32(vsub_f32(v62, (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v68, *(int8x16_t *)v68, 8uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL)));
    v64 = (int8x16_t)vmulq_f32(v61, v61);
    *(float32x2_t *)v64.i8 = vadd_f32(*(float32x2_t *)v64.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL));
    *(float32x4_t *)v68 = vaddq_f32(*(float32x4_t *)v68, vmulq_n_f32(v61, vadd_f32(v63, (float32x2_t)vdup_lane_s32((int32x2_t)v63, 1)).f32[0]));
    v63.i32[0] = vadd_f32(*(float32x2_t *)v64.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v64.i8, 1)).u32[0];
    *(float32x2_t *)v64.i8 = vrsqrte_f32((float32x2_t)v63.u32[0]);
    *(float32x2_t *)v64.i8 = vmul_f32(*(float32x2_t *)v64.i8, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8)));
    v66 = vmulq_n_f32(v61, vmul_f32(*(float32x2_t *)v64.i8, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8))).f32[0]);
    outlined destroy of (HasAnchoring, AnchoringComponent.Target)?(v42);
    v22 = vsubq_f32((float32x4_t)0, v66);
    goto LABEL_18;
  }
  __break(1u);
}

uint64_t EntityGestureRecognizer.location(in:)(uint64_t a1)
{
  void *v1;
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  id v8;
  void *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  simd_float4x4_optional v16;
  _OWORD v17[2];
  __int128 v18;
  float32x4_t v19;
  char v20;

  v3 = objc_msgSend(v1, sel_view);
  objc_msgSend(v1, sel_locationInView_, v3);
  v5 = v4;
  v7 = v6;

  v8 = objc_msgSend(v1, sel_view);
  if (!v8)
    return 0;
  v9 = v8;
  type metadata accessor for ARView();
  if (!swift_dynamicCastClass()
    || (LOBYTE(v17[0]) = 1,
        EntityGestureRecognizer.planeForUnprojection(heightOffset:)(&v16, (Swift::Float_optional *)0x100000000),
        outlined init with take of simd_float4x4?((uint64_t)&v16, (uint64_t)v17),
        v20 == 1)
    || (v10 = ARView.unproject(_:ontoPlane:relativeToCamera:)(0, v5, v7, *(double *)v17, (float32x4_t)v17[1], *(double *)&v18, v19), (v11 & 1) != 0))
  {

    return 0;
  }
  v12 = v10;
  if (a1)
  {
    type metadata accessor for Entity();
    HasTransform.convert(position:from:)();
    v15 = v13;

    return v15;
  }
  else
  {

  }
  return v12;
}

{
  return EntityGestureRecognizer.location(in:)(a1);
}

uint64_t dispatch thunk of EntityGestureRecognizer.entity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of EntityGestureRecognizer.entity.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of EntityGestureRecognizer.entity.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of EntityGestureRecognizer.location(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t outlined init with copy of (HasAnchoring, AnchoringComponent.Target)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (HasAnchoring, AnchoringComponent.Target)?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id PointLightComponent.color.getter()
{
  void *v0;
  id v1;

  v0 = (void *)PointLightComponent.__color.getter();
  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v0);

  return v1;
}

void key path getter for PointLightComponent.color : PointLightComponent(_QWORD *a1@<X8>)
{
  void *v2;
  id v3;

  v2 = (void *)PointLightComponent.__color.getter();
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v2);

  *a1 = v3;
}

void key path setter for PointLightComponent.color : PointLightComponent(id *a1)
{
  id v1;
  id v2;

  v2 = *a1;
  v1 = objc_msgSend(v2, sel_CGColor);
  PointLightComponent.__color.setter();

}

void PointLightComponent.color.setter(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, sel_CGColor);
  PointLightComponent.__color.setter();

}

void (*PointLightComponent.color.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  void *v3;
  id v4;

  a1[1] = v1;
  v3 = (void *)PointLightComponent.__color.getter();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return PointLightComponent.color.modify;
}

void PointLightComponent.color.modify(void **a1, char a2)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;

  v2 = *a1;
  v6 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    v4 = objc_msgSend(v3, sel_CGColor);
    PointLightComponent.__color.setter();

  }
  else
  {
    v5 = objc_msgSend(v2, sel_CGColor);
    PointLightComponent.__color.setter();
  }

}

void PointLightComponent.init(color:intensity:attenuationRadius:)(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, sel_CGColor);
  PointLightComponent.init(cgColor:intensity:attenuationRadius:)();

}

void PointLightComponent.init(color:intensity:attenuationRadius:attenuationFalloffExponent:)(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, sel_CGColor);
  PointLightComponent.init(cgColor:intensity:attenuationRadius:attenuationFalloffExponent:)();

}

uint64_t PointLightComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  _QWORD v22[2];

  v22[1] = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PointLightComponent();
  MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1D95E3000;
  *(_QWORD *)(v12 + 32) = 0x726F6C6F63;
  *(_QWORD *)(v12 + 40) = 0xE500000000000000;
  v13 = (void *)PointLightComponent.__color.getter();
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v13);

  v15 = type metadata accessor for UIColor();
  *(_QWORD *)(v12 + 48) = v14;
  *(_QWORD *)(v12 + 72) = v15;
  *(_QWORD *)(v12 + 80) = 0x7469736E65746E69;
  *(_QWORD *)(v12 + 88) = 0xE900000000000079;
  PointLightComponent.intensity.getter();
  v16 = MEMORY[0x1E0DEB188];
  *(_DWORD *)(v12 + 96) = v17;
  *(_QWORD *)(v12 + 120) = v16;
  *(_QWORD *)(v12 + 128) = 0xD000000000000011;
  *(_QWORD *)(v12 + 136) = 0x80000001D95DD130;
  PointLightComponent.attenuationRadius.getter();
  *(_DWORD *)(v12 + 144) = v18;
  *(_QWORD *)(v12 + 168) = v16;
  *(_QWORD *)(v12 + 176) = 0xD00000000000001ALL;
  *(_QWORD *)(v12 + 184) = 0x80000001D95DD150;
  PointLightComponent.attenuationFalloffExponent.getter();
  *(_QWORD *)(v12 + 216) = v16;
  *(_DWORD *)(v12 + 192) = v19;
  v20 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v8, 1, 1, v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEDFE8], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

unint64_t type metadata accessor for UIColor()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIColor;
  if (!lazy cache variable for type metadata for UIColor)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  }
  return result;
}

uint64_t ARView.RenderOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ARView.RenderOptions.disableCameraGrain.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ARView.RenderOptions.disableAutomaticLighting.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ARView.RenderOptions.disableGroundingShadows.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static ARView.RenderOptions.disableMotionBlur.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static ARView.RenderOptions.disableDepthOfField.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static ARView.RenderOptions.disableHDR.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static ARView.RenderOptions.disableFaceOcclusions.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void static ARView.RenderOptions.disablePersonOcclusion.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

void static ARView.RenderOptions.disableAREnvironmentLighting.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

void static ARView.RenderOptions.__disableLocalizedProbes.getter(_QWORD *a1@<X8>)
{
  *a1 = 512;
}

void static ARView.RenderOptions.disableFaceMesh.getter(_QWORD *a1@<X8>)
{
  *a1 = 1024;
}

uint64_t ARView.RenderOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance ARView.RenderOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance ARView.RenderOptions(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *protocol witness for SetAlgebra.union(_:) in conformance ARView.RenderOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance ARView.RenderOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance ARView.RenderOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance ARView.RenderOptions(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *protocol witness for SetAlgebra.remove(_:) in conformance ARView.RenderOptions@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance ARView.RenderOptions@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance ARView.RenderOptions(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance ARView.RenderOptions(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance ARView.RenderOptions(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance ARView.RenderOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance ARView.RenderOptions(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance ARView.RenderOptions(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance ARView.RenderOptions(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance ARView.RenderOptions()
{
  _QWORD *v0;

  return *v0 == 0;
}

_QWORD *protocol witness for SetAlgebra.subtract(_:) in conformance ARView.RenderOptions(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

void ARView.renderOptions.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
    *a1 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions);
  else
    __break(1u);
}

void ARView.renderOptions.setter(_QWORD *a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = *(char **)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    v3 = *(_QWORD *)&v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions] = *a1;
    v5 = v3;
    v4 = v2;
    RKARSystem.renderOptions.didset(&v5);

  }
  else
  {
    __break(1u);
  }
}

_QWORD *ARView.renderOptions.modify(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  result[1] = v1;
  result[2] = v2;
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    *result = *(_QWORD *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions);
    return ARView.renderOptions.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.renderOptions.modify(_QWORD *a1, char a2)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = *(char **)(a1[1] + a1[2]);
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
LABEL_5:
      v3 = *(_QWORD *)&v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions];
      *(_QWORD *)&v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions] = *a1;
      v5 = v3;
      v4 = v2;
      RKARSystem.renderOptions.didset(&v5);

      return;
    }
    __break(1u);
  }
  if (v2)
    goto LABEL_5;
  __break(1u);
}

BOOL static ARView.__RenderQuality.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ARView.__RenderQuality.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ARView.__RenderQuality.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void ARView.__renderQuality.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
    *a1 = *(_BYTE *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem___renderQuality);
  else
    __break(1u);
}

_BYTE *ARView.__renderQuality.setter(_BYTE *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
    *(_BYTE *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem___renderQuality) = *result;
  else
    __break(1u);
  return result;
}

uint64_t (*ARView.__renderQuality.modify(uint64_t (*result)(uint64_t result, char a2)))(uint64_t result, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  *(_QWORD *)result = v1;
  *((_QWORD *)result + 1) = v2;
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    *((_BYTE *)result + 16) = *(_BYTE *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem___renderQuality);
    return ARView.__renderQuality.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.__renderQuality.modify(uint64_t result, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)result + *(_QWORD *)(result + 8));
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
LABEL_5:
      *(_BYTE *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem___renderQuality) = *(_BYTE *)(result + 16);
      return result;
    }
    __break(1u);
  }
  if (v2)
    goto LABEL_5;
  __break(1u);
  return result;
}

void *one-time initialization function for gpuClass()
{
  void *result;
  void *v1;
  char v2;
  unsigned int v3;

  result = MTLCreateSystemDefaultDevice();
  if (result)
  {
    v1 = result;
    if (objc_msgSend(result, sel_supportsFamily_, 1005))
    {
      result = (void *)swift_unknownObjectRelease();
      v2 = 3;
    }
    else if ((objc_msgSend(v1, sel_supportsFamily_, 1004) & 1) != 0)
    {
      result = (void *)swift_unknownObjectRelease();
      v2 = 2;
    }
    else if (objc_msgSend(v1, sel_supportsFamily_, 1003))
    {
      result = (void *)swift_unknownObjectRelease();
      v2 = 1;
    }
    else
    {
      v3 = objc_msgSend(v1, sel_supportsFamily_, 1002);
      result = (void *)swift_unknownObjectRelease();
      if (v3)
        v2 = 0;
      else
        v2 = 4;
    }
  }
  else
  {
    v2 = 4;
  }
  static RKARSystem.gpuClass = v2;
  return result;
}

{
  void *result;
  void *v1;
  char v2;
  unsigned int v3;

  result = MTLCreateSystemDefaultDevice();
  if (result)
  {
    v1 = result;
    if (objc_msgSend(result, sel_supportsFamily_, 1005))
    {
      result = (void *)swift_unknownObjectRelease();
      v2 = 3;
    }
    else if ((objc_msgSend(v1, sel_supportsFamily_, 1004) & 1) != 0)
    {
      result = (void *)swift_unknownObjectRelease();
      v2 = 2;
    }
    else if (objc_msgSend(v1, sel_supportsFamily_, 1003))
    {
      result = (void *)swift_unknownObjectRelease();
      v2 = 1;
    }
    else
    {
      v3 = objc_msgSend(v1, sel_supportsFamily_, 1002);
      result = (void *)swift_unknownObjectRelease();
      if (v3)
        v2 = 0;
      else
        v2 = 4;
    }
  }
  else
  {
    v2 = 4;
  }
  static RealityFusionSession.gpuClass = v2;
  return result;
}

void one-time initialization function for socIdentifier()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v0 = MTLCreateSystemDefaultDevice();
  if (v0)
  {
    v1 = objc_msgSend(v0, sel_name);
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v4 = v3;
    swift_unknownObjectRelease();

  }
  else
  {
    v2 = 0;
    v4 = 0xE000000000000000;
  }
  static RKARSystem.socIdentifier = v2;
  unk_1F01D2600 = v4;
}

void one-time initialization function for nonARKitModelIdentifiers()
{
  static RKARSystem.nonARKitModelIdentifiers = (uint64_t)&outlined read-only object #0 of one-time initialization function for nonARKitModelIdentifiers;
}

uint64_t one-time initialization function for modelIdentifier()
{
  uint64_t result;
  uint64_t v1;

  result = specialized static RKARSystem.__queryModelIdentifier()();
  static RKARSystem.modelIdentifier = result;
  unk_1F01D2610 = v1;
  return result;
}

Swift::Void __swiftcall RKARSystem.setDefaultRenderSettings()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for __AssetRef();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0) + 24;
  if (swift_weakLoadStrong())
  {
    v6 = dispatch thunk of __Engine.services.getter();
    swift_release();
    if (v6)
    {
      dispatch thunk of __ServiceLocator.renderService.getter();
      swift_release();
      v7 = v13;
      v8 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
      v9 = OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions;
      RERenderManagerSetEnableProbeLighting();
      RKARSystem.showGroundingShadow(_:)((*(_QWORD *)(v1 + v9) & 4) == 0);
      swift_retain();
      dispatch thunk of __RERenderGraphEmitter.__handle.getter();
      swift_release();
      __AssetRef.__as<A>(_:)();
      v10 = *(void (**)(char *, uint64_t))(v3 + 8);
      v10(v5, v2);
      RERenderGraphEmitterAssetSetRuntimeSettingBool();
      swift_retain();
      dispatch thunk of __RERenderGraphEmitter.__handle.getter();
      swift_release();
      __AssetRef.__as<A>(_:)();
      v10(v5, v2);
      RERenderGraphEmitterAssetSetRuntimeSettingBool();
      swift_retain();
      dispatch thunk of __RERenderGraphEmitter.__handle.getter();
      swift_release();
      __AssetRef.__as<A>(_:)();
      v10(v5, v2);
      RERenderGraphEmitterAssetSetRuntimeSettingBool();
      if (one-time initialization token for gpuClass != -1)
        swift_once();
      __asm { BR              X10 }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  JUMPOUT(0x1D958C30CLL);
}

Swift::Void __swiftcall RKARSystem.showGroundingShadow(_:)(Swift::Bool a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_groundingShadowMode) & 1) != 0)
  {
    v2 = MEMORY[0x1DF091D08](v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (v2)
    {
      v5 = (id)v2;
      if (*(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
      {
        swift_retain();
        Scene.coreScene.getter();
        swift_release();
        RERayTracedShadowReceiverSetVisibleForScene();

        return;
      }
      goto LABEL_11;
    }
  }
  else
  {
    if (!swift_weakLoadStrong())
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return;
    }
    v3 = dispatch thunk of __Engine.services.getter();
    swift_release();
    if (v3)
    {
      v4 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
      swift_release();
      if (MEMORY[0x1DF0912D0](v4))
        REShadowManagerSetEnabled();
    }
  }
}

unint64_t lazy protocol witness table accessor for type ARView.RenderOptions and conformance ARView.RenderOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions;
  if (!lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.RenderOptions, &type metadata for ARView.RenderOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions;
  if (!lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.RenderOptions, &type metadata for ARView.RenderOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions;
  if (!lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.RenderOptions, &type metadata for ARView.RenderOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions;
  if (!lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.RenderOptions, &type metadata for ARView.RenderOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ARView.__RenderQuality and conformance ARView.__RenderQuality()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.__RenderQuality and conformance ARView.__RenderQuality;
  if (!lazy protocol witness table cache variable for type ARView.__RenderQuality and conformance ARView.__RenderQuality)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.__RenderQuality, &type metadata for ARView.__RenderQuality);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.__RenderQuality and conformance ARView.__RenderQuality);
  }
  return result;
}

_QWORD *sub_1D958C5A0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
    *a2 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions);
  else
    __break(1u);
  return result;
}

void sub_1D958C5D4(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  ARView.renderOptions.setter(&v1);
}

_QWORD *sub_1D958C608@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
    *a2 = *(_BYTE *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem___renderQuality);
  else
    __break(1u);
  return result;
}

_BYTE *sub_1D958C63C(_BYTE *result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
    *(_BYTE *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem___renderQuality) = *result;
  else
    __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for ARView.RenderOptions()
{
  return &type metadata for ARView.RenderOptions;
}

uint64_t getEnumTagSinglePayload for ARView.__RenderQuality(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.__RenderQuality(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1D958C75C + 4 * byte_1D95E3045[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1D958C790 + 4 * byte_1D95E3040[v4]))();
}

uint64_t sub_1D958C790(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D958C798(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D958C7A0);
  return result;
}

uint64_t sub_1D958C7AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D958C7B4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1D958C7B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D958C7C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ARView.__RenderQuality()
{
  return &type metadata for ARView.__RenderQuality;
}

uint64_t storeEnumTagSinglePayload for RKARSystem.GroundingShadowMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D958C828 + 4 * byte_1D95E304F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D958C85C + 4 * byte_1D95E304A[v4]))();
}

uint64_t sub_1D958C85C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D958C864(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D958C86CLL);
  return result;
}

uint64_t sub_1D958C878(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D958C880);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D958C884(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D958C88C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RKARSystem.GroundingShadowMode()
{
  return &type metadata for RKARSystem.GroundingShadowMode;
}

unint64_t lazy protocol witness table accessor for type RKARSystem.GroundingShadowMode and conformance RKARSystem.GroundingShadowMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RKARSystem.GroundingShadowMode and conformance RKARSystem.GroundingShadowMode;
  if (!lazy protocol witness table cache variable for type RKARSystem.GroundingShadowMode and conformance RKARSystem.GroundingShadowMode)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for RKARSystem.GroundingShadowMode, &type metadata for RKARSystem.GroundingShadowMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RKARSystem.GroundingShadowMode and conformance RKARSystem.GroundingShadowMode);
  }
  return result;
}

uint64_t specialized static RKARSystem.__queryModelIdentifier()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  uint64_t result;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unsigned __int8 v38;
  utsname v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  _OWORD v43[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v0 = type metadata accessor for Mirror();
  v35 = *(_QWORD *)(v0 - 8);
  v36 = v0;
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(&v39, 0x500uLL);
  uname(&v39);
  v28 = *(_OWORD *)&v39.machine[16];
  v29 = *(_OWORD *)v39.machine;
  v26 = *(_OWORD *)&v39.machine[48];
  v27 = *(_OWORD *)&v39.machine[32];
  v37 = *(_OWORD *)&v39.machine[64];
  v33 = *(_OWORD *)&v39.machine[96];
  v34 = *(_OWORD *)&v39.machine[80];
  v31 = *(_OWORD *)&v39.machine[128];
  v32 = *(_OWORD *)&v39.machine[112];
  v30 = *(_OWORD *)&v39.machine[144];
  *((_QWORD *)&v45 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, In);
  v3 = (_OWORD *)swift_allocObject();
  *(_QWORD *)&v44 = v3;
  v4 = v28;
  v3[1] = v29;
  v3[2] = v4;
  v5 = v26;
  v3[3] = v27;
  v3[4] = v5;
  v6 = *(_OWORD *)&v39.machine[160];
  v7 = *(_OWORD *)&v39.machine[176];
  v8 = *(_OWORD *)&v39.machine[192];
  v9 = *(_OWORD *)&v39.machine[208];
  v10 = *(_OWORD *)&v39.machine[224];
  v11 = *(_OWORD *)&v39.machine[240];
  v12 = v34;
  v3[5] = v37;
  v3[6] = v12;
  v13 = v32;
  v3[7] = v33;
  v3[8] = v13;
  v14 = v30;
  v3[9] = v31;
  v3[10] = v14;
  v3[11] = v6;
  v3[12] = v7;
  v3[13] = v8;
  v3[14] = v9;
  v3[15] = v10;
  v3[16] = v11;
  Mirror.init(reflecting:)();
  *(_QWORD *)&v34 = v2;
  *(_QWORD *)&v33 = Mirror.children.getter();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((_QWORD *)&v46 + 1))
  {
    v15 = 0;
    v16 = &v41;
    v17 = 0xE000000000000000;
    v18 = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      v42 = v44;
      v43[0] = v45;
      v43[1] = v46;
      v40 = v44;
      outlined init with copy of Any((uint64_t)v43, (uint64_t)v16);
      if (swift_dynamicCast() && v38)
      {
        if ((v38 & 0x80) != 0)
        {
          result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        v20 = v16;
        v21 = v18;
        *(_QWORD *)&v40 = v38;
        *(_QWORD *)&v37 = MEMORY[0x1DF090358](&v40, 1);
        v23 = v22;
        *(_QWORD *)&v40 = v15;
        *((_QWORD *)&v40 + 1) = v17;
        swift_bridgeObjectRetain();
        v24._countAndFlagsBits = v37;
        v24._object = v23;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v19 = *((_QWORD *)&v40 + 1);
        v15 = v40;
        v18 = v21;
        v16 = v20;
      }
      else
      {
        swift_bridgeObjectRetain();
        v19 = v17;
      }
      outlined destroy of (label: String?, value: Any)((uint64_t)&v42);
      swift_bridgeObjectRelease();
      dispatch thunk of _AnyIteratorBoxBase.next()();
      v17 = v19;
      if (!*((_QWORD *)&v46 + 1))
        goto LABEL_10;
    }
  }
  v15 = 0;
LABEL_10:
  swift_release();
  swift_release();
  (*(void (**)(_QWORD, uint64_t))(v35 + 8))(v34, v36);
  return v15;
}

uint64_t sub_1D958CC54()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of (label: String?, value: Any)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String?, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

void specialized SIMD.subscript.getter(__n128 a1, double a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = a1.n128_u8[0] & 3;
  if (a1.n128_i64[0] <= 0)
    v2 = -(-a1.n128_u64[0] & 3);
  v3 = a1.n128_u8[8] & 3;
  if (a1.n128_i64[1] <= 0)
    v3 = -(-a1.n128_u64[1] & 3);
  v4 = LOBYTE(a2) & 3;
  if (*(uint64_t *)&a2 <= 0)
    v4 = -(-*(_QWORD *)&a2 & 3);
  if (((v2 | v4 | v3) & 0x8000000000000000) != 0)
    __break(1u);
}

uint64_t ARView.unproject(_:ontoPlane:)(double a1, double a2, double a3, float32x4_t a4, double a5, float32x4_t a6)
{
  return ARView.unproject(_:ontoPlane:relativeToCamera:)(0, a1, a2, a3, a4, a5, a6);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t ARView.project(_:)(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
    return ARView.project(_:isAR:)((*(_BYTE *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode) & 1) == 0, a1);
  __break(1u);
  return result;
}

uint64_t ARView.project(_:isAR:)(uint64_t result, double a2)
{
  char *v2;
  char *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t active;
  id v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  float v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  simd_float4x4 v22;

  v3 = v2;
  if ((result & 1) == 0)
  {
    if (!*(_QWORD *)&v2[OBJC_IVAR____TtC10RealityKit6ARView__scene])
    {
      __break(1u);
      goto LABEL_21;
    }
    swift_retain();
    active = dispatch thunk of Scene.internalActiveCamera.getter();
    swift_release();
    if (!active)
      return 0;
    Entity.coreEntity.getter();
    REPerspectiveCameraComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      objc_msgSend(v3, sel_bounds);
      REPerspectiveCameraComponentCalculateProjectionWithAspectRatio();
      objc_msgSend(v3, sel_bounds);
      REPerspectiveCameraComponentAdjustProjectionAspect();
    }
    else
    {
      Entity.coreEntity.getter();
      RECustomMatrixCameraComponentGetComponentType();
      if (!REEntityGetComponentByClass())
      {
        v14 = 1;
        goto LABEL_14;
      }
      RECustomMatrixCameraComponentCalculateProjection();
      objc_msgSend(v3, sel_bounds);
      RECustomMatrixCameraComponentAdjustProjectionAspect();
    }
    REConvertProjectionToMatrix4x4();
    v14 = 0;
LABEL_14:
    Entity.coreEntity.getter();
    RETransformComponentGetComponentType();
    if (!REEntityGetComponentByClass())
    {
      swift_release();
      return 0;
    }
    RETransformComponentGetWorldMatrix4x4F();
    __invert_f4(v22);
    result = simd_float4x4.transform(position:)();
    if ((v14 & 1) == 0)
    {
      REProjectionProjectPoint();
      v16 = (float)((float)(v15 + 1.0) * 0.5);
      objc_msgSend(v3, sel_bounds);
      v18 = v17 * v16;
      objc_msgSend(v3, sel_bounds);
      objc_msgSend(v3, sel_bounds);
      v20 = v18 + v19;
      objc_msgSend(v3, sel_bounds);
      swift_release();
      return *(_QWORD *)&v20;
    }
LABEL_21:
    __break(1u);
    return result;
  }
  v4 = objc_msgSend(v2, sel_session);
  v5 = objc_msgSend(v4, sel_currentFrame);

  if (!v5)
    return 0;
  v6 = objc_msgSend(v5, sel_camera);
  if (v3[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] == 1)
  {
    v7 = *(id *)&v3[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation];
  }
  else
  {
    v9 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
    v7 = objc_msgSend(v9, sel_statusBarOrientation);

  }
  objc_msgSend(v3, sel_bounds);
  objc_msgSend(v6, sel_projectPoint_orientation_viewportSize_, v7, a2, v10, v11);
  v13 = v12;

  return v13;
}

uint64_t ARView.unproject(_:viewport:)()
{
  uint64_t v0;
  uint64_t active;
  uint64_t v2;
  uint64_t v4;

  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
    __break(1u);
  swift_retain();
  active = dispatch thunk of Scene.internalActiveCamera.getter();
  swift_release();
  v4 = 0;
  if (active)
  {
    Entity.coreEntity.getter();
    REPerspectiveCameraComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      REPerspectiveCameraComponentCalculateProjectionWithAspectRatio();
      REPerspectiveCameraComponentAdjustProjectionAspect();
      REProjectionClipSpaceNearZ();
    }
    else
    {
      Entity.coreEntity.getter();
      RECustomMatrixCameraComponentGetComponentType();
      if (!REEntityGetComponentByClass())
      {
        swift_release();
        return v4;
      }
      RECustomMatrixCameraComponentCalculateProjection();
      RECustomMatrixCameraComponentAdjustProjectionAspect();
      REProjectionClipSpaceNearZ();
    }
    REConvertProjectionToMatrix4x4();
    REProjectionUnprojectPoint();
    v4 = v2;
    swift_release();
  }
  return v4;
}

uint64_t ARView.unproject(_:ontoPlane:relativeToCamera:)(uint64_t result, double a2, double a3, double a4, float32x4_t a5, double a6, float32x4_t a7)
{
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  uint64_t active;
  uint64_t v12;
  char v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x2_t v23;
  float32x2_t v24;
  int32x4_t v25;
  int32x4_t v26;
  float32x2_t v27;
  float32x2_t v33;
  id v34;
  id v35;
  id v36;
  __int128 v37;
  __int128 v38;
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x2_t v48;
  float32x2_t v50;

  v8 = *(_QWORD *)&v7[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (v8)
  {
    v9 = v7;
    v10 = result;
    if ((*(_BYTE *)(v8 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode) & 1) == 0)
    {
      v34 = objc_msgSend(v7, sel_session);
      v35 = objc_msgSend(v34, sel_currentFrame);

      if (v35)
      {
        if ((v10 & 1) != 0)
        {
          v36 = objc_msgSend(v35, sel_camera);
          objc_msgSend(v36, sel_transform);
          v41 = v37;
          v42 = v38;

        }
        v39 = objc_msgSend(v35, sel_camera, v41, v42);
        if (v9[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] != 1)
        {
          v40 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
          objc_msgSend(v40, sel_statusBarOrientation);

        }
        objc_msgSend(v9, sel_bounds);
        v12 = ARCamera.unprojectPoint(_:ontoPlane:orientation:viewportSize:)();

        return v12;
      }
      return 0;
    }
    if (*(_QWORD *)&v7[OBJC_IVAR____TtC10RealityKit6ARView__scene])
    {
      swift_retain();
      active = dispatch thunk of Scene.internalActiveCamera.getter();
      swift_release();
      if (active)
      {
        objc_msgSend(v7, sel_bounds);
        v12 = ARView.unproject(_:viewport:)();
        if ((v13 & 1) != 0)
        {
          swift_release();
          return v12;
        }
        Entity.coreEntity.getter();
        RETransformComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          RETransformComponentGetWorldMatrix4x4F();
          v43 = v14;
          v44 = v15;
          v45 = v16;
          v46 = v17;
          simd_float4x4.transform(position:)();
          v19 = a5;
          v20 = a7;
          if ((v10 & 1) != 0)
          {
            v20 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, a7.f32[0]), v44, *(float32x2_t *)a7.f32, 1), v45, a7, 2), v46, a7, 3);
            v19 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, a5.f32[0]), v44, *(float32x2_t *)a5.f32, 1), v45, a5, 2), v46, a5, 3);
          }
          v21 = vsubq_f32(v18, v46);
          v22 = (int32x4_t)vmulq_f32(v21, v21);
          v22.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v22, 2), vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1))).u32[0];
          v23 = vrsqrte_f32((float32x2_t)v22.u32[0]);
          v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v23, v23)));
          v25 = (int32x4_t)vmulq_n_f32(v21, vmul_f32(v24, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v24, v24))).f32[0]);
          v26 = (int32x4_t)vsubq_f32(v20, v46);
          v27 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 0);
          v27.i32[0] = v26.i32[1];
          v48 = *(float32x2_t *)v25.i8;
          v50 = vadd_f32(vmul_laneq_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v26, v25), v19, 2), vadd_f32(vmul_f32(v27, (float32x2_t)vrev64_s32(*(int32x2_t *)v19.f32)), vmul_f32((float32x2_t)__PAIR64__(v25.u32[1], v26.u32[0]), *(float32x2_t *)v19.f32)));
          swift_release();
          if (v50.f32[1] <= -0.00000011921 || v50.f32[1] >= 0.00000011921)
          {
            __asm { FMOV            V1.2S, #1.0 }
            v33 = (float32x2_t)vand_s8(vbsl_s8((int8x8_t)0x8000000080000000, _D1, (int8x8_t)v50), vorr_s8((int8x8_t)vcltz_f32(v50), (int8x8_t)vcgtz_f32(v50)));
            if ((vceq_f32(v33, (float32x2_t)vdup_lane_s32((int32x2_t)v33, 1)).u32[0] & 1) != 0)
              return (uint64_t)vadd_f32(*(float32x2_t *)v46.f32, vmul_n_f32(v48, v50.f32[0] / v50.f32[1]));
          }
        }
        else
        {
          swift_release();
        }
      }
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void ARView.ray(through:)(float32x4_t *a1@<X8>)
{
  char *v1;
  uint64_t active;
  float32x4_t v4;
  char v5;
  float32x4_t v6;
  float32x4_t v7;
  char v8;
  float32x4_t v9;
  int32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;

  if (*(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView__scene])
  {
    swift_retain();
    active = dispatch thunk of Scene.internalActiveCamera.getter();
    swift_release();
    v4 = 0uLL;
    if (!active)
    {
      v8 = 1;
      v13 = 0uLL;
LABEL_8:
      *a1 = v4;
      a1[1] = v13;
      a1[2].i8[0] = v8;
      return;
    }
    objc_msgSend(v1, sel_bounds);
    ARView.unproject(_:viewport:)();
    if ((v5 & 1) == 0)
    {
      Entity.coreEntity.getter();
      RETransformComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        RETransformComponentGetWorldMatrix4x4F();
        v14 = v6;
        simd_float4x4.transform(position:)();
        v15 = v7;
        swift_release();
        v4 = v14;
        v8 = 0;
        v9 = vsubq_f32(v15, v14);
        v4.i32[3] = 0;
        v10 = (int32x4_t)vmulq_f32(v9, v9);
        v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
        v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
        v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)));
        v13 = vmulq_n_f32(v9, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]);
      }
      else
      {
        swift_release();
        v8 = 1;
        v13 = 0uLL;
        v4 = 0uLL;
      }
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t ARView.hitTest(_:query:mask:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  float32x4_t v3[3];
  __int128 v4;
  char v5;

  ARView.ray(through:)(v3);
  result = outlined init with take of (origin: SIMD3<Float>, direction: SIMD3<Float>)?((uint64_t)v3, (uint64_t)&v4);
  if ((v5 & 1) != 0)
    return MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    v2 = Scene.raycast(origin:direction:length:query:mask:relativeTo:)();
    swift_release();
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t ARView.hitTest(_:requireInputTarget:query:mask:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, unint64_t, uint64_t);
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float32x4_t v52[3];
  _OWORD v53[2];
  char v54;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputTargetComponent?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for Entity.ComponentSet();
  v46 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for InputTargetComponent();
  v48 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v47 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CollisionCastHit();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = ((uint64_t (*)(uint64_t))MEMORY[0x1E0C80A78])(v8);
  v35 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v34 - v12;
  ARView.ray(through:)(v52);
  result = outlined init with take of (origin: SIMD3<Float>, direction: SIMD3<Float>)?((uint64_t)v52, (uint64_t)v53);
  if ((v54 & 1) != 0)
  {
    v15 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
      goto LABEL_44;
    v45 = v53[1];
    v44 = v53[0];
    swift_retain();
    v15 = Scene.raycast(origin:direction:length:query:mask:relativeTo:)();
    result = swift_release();
  }
  v42 = *(_QWORD *)(v15 + 16);
  if (!v42)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v16 = 0;
  v34 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v40 = v15 + v34;
  v36 = MEMORY[0x1E0DEE9D8];
  v39 = v8;
  v38 = v9;
  v41 = v13;
  v37 = v15;
  while (v16 < *(_QWORD *)(v15 + 16))
  {
    v17 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)&v45 = v16 + 1;
    *(_QWORD *)&v44 = v17;
    v43 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    v43(v13, v40 + v17 * v16, v8);
    v18 = CollisionCastHit.entity.getter();
    swift_getKeyPath();
    v19 = (char *)MEMORY[0x1E0DEE9D8];
    swift_retain();
    while (1)
    {
      dispatch thunk of Entity.components.getter();
      Entity.ComponentSet.subscript.getter();
      v21 = *(void (**)(char *, uint64_t))(v46 + 8);
      v21(v5, v49);
      v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
      if (v22(v3, 1, v6) == 1)
        break;
LABEL_17:
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v47, v3, v6);
      v23 = InputTargetComponent.isEnabled.getter();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
      v25 = *((_QWORD *)v19 + 2);
      v24 = *((_QWORD *)v19 + 3);
      if (v25 >= v24 >> 1)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v19);
      *((_QWORD *)v19 + 2) = v25 + 1;
      v19[v25 + 32] = v23 & 1;
      swift_release();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v6);
      v50 = v18;
      swift_retain();
      swift_getAtKeyPath();
      swift_release();
      v20 = v51;
      swift_retain();
      swift_release();
      if (!v20)
        goto LABEL_22;
      v18 = v20;
    }
    while (1)
    {
      swift_release();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v3, &demangling cache variable for type metadata for InputTargetComponent?);
      v50 = v18;
      swift_retain();
      swift_getAtKeyPath();
      swift_release();
      v18 = v51;
      swift_retain();
      swift_release();
      if (!v18)
        break;
      dispatch thunk of Entity.components.getter();
      Entity.ComponentSet.subscript.getter();
      v21(v5, v49);
      if (v22(v3, 1, v6) != 1)
        goto LABEL_17;
    }
LABEL_22:
    result = swift_release();
    v26 = *((_QWORD *)v19 + 2);
    v13 = v41;
    if (v26)
    {
      v8 = v39;
      v9 = v38;
      if (v19[32] == 1)
      {
        if (v26 != 1)
        {
          v27 = 33;
          do
          {
            v28 = v27 - 31;
            if (__OFADD__(v27 - 32, 1))
            {
              __break(1u);
              goto LABEL_43;
            }
            v29 = v19[v27++];
          }
          while (v29 == 1 && v28 != v26);
          if (!v29)
            goto LABEL_7;
        }
        swift_bridgeObjectRelease();
        v43(v35, (unint64_t)v13, v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v15 = v37;
          v16 = v45;
          v31 = v36;
        }
        else
        {
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
          v15 = v37;
          v16 = v45;
        }
        v33 = *(_QWORD *)(v31 + 16);
        v32 = *(_QWORD *)(v31 + 24);
        if (v33 >= v32 >> 1)
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v31);
        *(_QWORD *)(v31 + 16) = v33 + 1;
        v36 = v31;
        (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v31 + v34 + v33 * v44, v35, v8);
        goto LABEL_9;
      }
LABEL_7:
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v8 = v39;
      v9 = v38;
    }
    v15 = v37;
    v16 = v45;
LABEL_9:
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    if (v16 == v42)
    {
      swift_bridgeObjectRelease();
      return v36;
    }
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t ARView.entity(at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Type;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  float32x4_t v21[3];
  _OWORD v22[2];
  char v23;

  v1 = type metadata accessor for CollisionGroup();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Type = type metadata accessor for CollisionCastQueryType();
  v6 = *(_QWORD *)(Type - 8);
  MEMORY[0x1E0C80A78](Type);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v6 + 104))(v8, *MEMORY[0x1E0CD3F10], Type, v10);
  static CollisionGroup.all.getter();
  ARView.ray(through:)(v21);
  result = outlined init with take of (origin: SIMD3<Float>, direction: SIMD3<Float>)?((uint64_t)v21, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v14 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
    {
      __break(1u);
      return result;
    }
    v20[0] = v22[0];
    v20[1] = v22[1];
    swift_retain();
    v14 = Scene.raycast(origin:direction:length:query:mask:relativeTo:)();
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, Type);
  v15 = *(_QWORD *)(v14 + 16);
  v16 = type metadata accessor for CollisionCastHit();
  v17 = *(_QWORD *)(v16 - 8);
  if (v15)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v12, v14 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), v16);
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v12, v18, 1, v16);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v12, &demangling cache variable for type metadata for CollisionCastHit?);
    return 0;
  }
  else
  {
    v19 = CollisionCastHit.entity.getter();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v16);
  }
  return v19;
}

uint64_t ARView.entities(at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Type;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24[3];
  _OWORD v25[2];
  char v26;

  v1 = type metadata accessor for CollisionCastHit();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CollisionGroup();
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Type = type metadata accessor for CollisionCastQueryType();
  v9 = *(_QWORD *)(Type - 8);
  v10 = MEMORY[0x1E0C80A78](Type);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v9 + 104))(v12, *MEMORY[0x1E0CD3F08], Type, v10);
  static CollisionGroup.all.getter();
  ARView.ray(through:)(v24);
  result = outlined init with take of (origin: SIMD3<Float>, direction: SIMD3<Float>)?((uint64_t)v24, (uint64_t)v25);
  v14 = MEMORY[0x1E0DEE9D8];
  if ((v26 & 1) == 0)
  {
    if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
    {
      __break(1u);
      return result;
    }
    v21[0] = v25[0];
    v21[1] = v25[1];
    swift_retain();
    v14 = Scene.raycast(origin:direction:length:query:mask:relativeTo:)();
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v22);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, Type);
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v23 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v16 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v22 = v14;
    v17 = v14 + v16;
    v18 = *(_QWORD *)(v2 + 72);
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
    do
    {
      v19(v4, v17, v1);
      CollisionCastHit.entity.getter();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v17 += v18;
      --v15;
    }
    while (v15);
    v20 = v23;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return v20;
}

uint64_t ARView.hitTest(_:types:)(uint64_t a1, double a2, double a3)
{
  void *v3;
  void *v4;
  id v8;
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  id v15;
  id v16;
  CGPoint v17;
  id v18;
  CGAffineTransform v20;
  CGPoint v21;

  v4 = v3;
  v8 = objc_msgSend(v3, sel_session);
  v9 = objc_msgSend(v8, sel_currentFrame);

  if (!v9)
    return MEMORY[0x1E0DEE9D8];
  objc_msgSend(v4, sel_bounds);
  v11 = a2 / v10;
  v13 = a3 / v12;
  if (*((_BYTE *)v4 + OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating) != 1)
  {
    v15 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
    objc_msgSend(v15, sel_statusBarOrientation);

  }
  v16 = objc_msgSend(v9, sel_camera);
  objc_msgSend(v16, sel_imageResolution);

  ARViewToCameraImageTransform();
  v21.x = v11;
  v21.y = v13;
  v17 = CGPointApplyAffineTransform(v21, &v20);
  v18 = objc_msgSend(v9, sel_hitTest_types_, a1, v17.x, v17.y);
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARHitTestResult);
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v14;
}

ARRaycastQuery_optional __swiftcall ARView.makeRaycastQuery(from:allowing:alignment:)(CGPoint from, ARRaycastTarget allowing, ARRaycastTargetAlignment alignment)
{
  void *v3;
  void *v4;
  double y;
  double x;
  id v9;
  id v10;
  Swift::Bool v11;
  double v12;
  double v13;
  double v14;
  double v15;
  objc_class *v16;
  id v17;
  id v18;
  CGPoint v19;
  objc_class *v20;
  CGAffineTransform v21;
  ARRaycastQuery_optional result;
  CGPoint v23;

  v4 = v3;
  y = from.y;
  x = from.x;
  v9 = objc_msgSend(v4, sel_session);
  v10 = objc_msgSend(v9, sel_currentFrame);

  if (v10)
  {
    objc_msgSend(v4, sel_bounds);
    v13 = x / v12;
    v15 = y / v14;
    if (*((_BYTE *)v4 + OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating) != 1)
    {
      v17 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
      objc_msgSend(v17, sel_statusBarOrientation);

    }
    v18 = objc_msgSend(v10, sel_camera);
    objc_msgSend(v18, sel_imageResolution);

    ARViewToCameraImageTransform();
    v23.x = v13;
    v23.y = v15;
    v19 = CGPointApplyAffineTransform(v23, &v21);
    v16 = (objc_class *)objc_msgSend(v10, sel_raycastQueryFromPoint_allowingTarget_alignment_, allowing, alignment, v19.x, v19.y);

  }
  else
  {
    v16 = 0;
  }
  v20 = v16;
  result.value.super.isa = v20;
  result.is_nil = v11;
  return result;
}

id ARView.trackedRaycast(from:allowing:alignment:updateHandler:)(ARRaycastTarget a1, ARRaycastTargetAlignment a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  void *v6;
  unint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  _QWORD v15[6];

  v9 = (unint64_t)ARView.makeRaycastQuery(from:allowing:alignment:)((CGPoint)__PAIR128__(*(unint64_t *)&a6, *(unint64_t *)&a5), a1, a2);
  if (!v9)
    return 0;
  v10 = (void *)v9;
  v11 = objc_msgSend(v6, sel_session);
  v15[4] = a3;
  v15[5] = a4;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed (@guaranteed [ARRaycastResult]) -> ();
  v15[3] = &block_descriptor_2;
  v12 = _Block_copy(v15);
  swift_retain();
  swift_release();
  v13 = objc_msgSend(v11, sel_trackedRaycast_updateHandler_, v10, v12);
  _Block_release(v12);

  return v13;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [ARRaycastResult]) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARRaycastResult);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t ARView.raycast(from:allowing:alignment:)(ARRaycastTarget a1, ARRaycastTargetAlignment a2, double a3, double a4)
{
  void *v4;
  unint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;

  v5 = (unint64_t)ARView.makeRaycastQuery(from:allowing:alignment:)((CGPoint)__PAIR128__(*(unint64_t *)&a4, *(unint64_t *)&a3), a1, a2);
  if (!v5)
    return MEMORY[0x1E0DEE9D8];
  v6 = (void *)v5;
  v7 = objc_msgSend(v4, sel_session);
  v8 = objc_msgSend(v7, sel_raycast_, v6);

  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARRaycastResult);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v9;
}

uint64_t outlined init with take of (origin: SIMD3<Float>, direction: SIMD3<Float>)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (origin: SIMD3<Float>, direction: SIMD3<Float>)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D958EFB8()
{
  return MEMORY[0x1E0CD4628];
}

uint64_t sub_1D958EFC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for Entity();
  result = HasHierarchy.parent.getter();
  *a1 = result;
  return result;
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t GroupActivitiesSynchronizationIdentity.State.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_participant;
  v2 = type metadata accessor for Participant();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void GroupActivitiesSynchronizationIdentity.init(participant:isLocal:)(char *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t, __n128);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  uint64_t aBlock;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  void *v36;
  void *v37;
  uint64_t v38;

  v3 = v2;
  v32 = a2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Participant();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  v31 = a1;
  v14(v13, (uint64_t)a1, v9, v11);
  type metadata accessor for GroupActivitiesSynchronizationIdentity.State();
  v15 = swift_allocObject();
  *(_QWORD *)(v15
            + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_peerID) = 0;
  ((void (*)(uint64_t, char *, uint64_t))v14)(v15+ OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_participant, v13, v9);
  Participant.id.getter();
  v16 = UUID.uuidString.getter();
  v18 = v17;
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v13, v9);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v20 = (uint64_t *)(v15
                  + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_address);
  *v20 = v16;
  v20[1] = v18;
  *(_BYTE *)(v15
           + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_isLocal) = v32;
  *(_QWORD *)(v3 + 16) = v15;
  v21 = RESyncDiscoveryIdentityObserverCreate();
  v22 = *(_QWORD *)(v3 + 16);
  v37 = partial apply for closure #1 in GroupActivitiesSynchronizationIdentity.init(participant:isLocal:);
  v38 = v22;
  v23 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v34 = 1107296256;
  v35 = thunk for @escaping @callee_guaranteed () -> (@unowned UnsafePointer<Int8>);
  v36 = &block_descriptor_3;
  v24 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  RESyncDiscoveryIdentityObserverOnGetDisplayName();
  _Block_release(v24);
  if (v21)
  {
    v25 = *(_QWORD *)(v3 + 16);
    v37 = partial apply for closure #1 in GroupActivitiesSynchronizationIdentity.init(participant:isLocal:);
    v38 = v25;
    aBlock = v23;
    v34 = 1107296256;
    v35 = thunk for @escaping @callee_guaranteed () -> (@unowned UnsafePointer<Int8>);
    v36 = &block_descriptor_3;
    v26 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RESyncDiscoveryIdentityObserverOnGetAddress();
    _Block_release(v26);
    v27 = *(_QWORD *)(v3 + 16);
    v37 = partial apply for closure #3 in GroupActivitiesSynchronizationIdentity.init(participant:isLocal:);
    v38 = v27;
    aBlock = v23;
    v34 = 1107296256;
    v35 = thunk for @escaping @callee_guaranteed () -> (@unowned Bool);
    v36 = &block_descriptor_6_0;
    v28 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RESyncDiscoveryIdentityObserverOnIsLocal();
    _Block_release(v28);
    v29 = RESyncIdentityCreateWithObserver();
    RESyncRelease();
    v19(v31, v9);
    type metadata accessor for RESyncHandle();
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = v29;
    *(_QWORD *)(v3 + 24) = v30;
  }
  else
  {
    __break(1u);
  }
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned UnsafePointer<Int8>)(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  return v3;
}

id closure #1 in GroupActivitiesSynchronizationIdentity.init(participant:isLocal:)(uint64_t a1)
{
  void *v1;
  id v2;
  id result;

  v1 = (void *)MEMORY[0x1DF090310](*(_QWORD *)(a1+ OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_address), *(_QWORD *)(a1+ OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_address+ 8));
  v2 = objc_msgSend(v1, sel_UTF8String);
  result = v1;
  if (v2)
    return v2;
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Bool)(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  LOBYTE(v1) = v1(v2);
  swift_release();
  return v1 & 1;
}

uint64_t GroupActivitiesSynchronizationIdentity.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationIdentity()
{
  return objc_opt_self();
}

uint64_t ObjC metadata update function for GroupActivitiesSynchronizationIdentity.State()
{
  return type metadata accessor for GroupActivitiesSynchronizationIdentity.State();
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationIdentity.State()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GroupActivitiesSynchronizationIdentity.State;
  if (!type metadata singleton initialization cache for GroupActivitiesSynchronizationIdentity.State)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for GroupActivitiesSynchronizationIdentity.State()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Participant();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

id partial apply for closure #1 in GroupActivitiesSynchronizationIdentity.init(participant:isLocal:)()
{
  uint64_t v0;

  return closure #1 in GroupActivitiesSynchronizationIdentity.init(participant:isLocal:)(v0);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t partial apply for closure #3 in GroupActivitiesSynchronizationIdentity.init(participant:isLocal:)()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_isLocal);
}

uint64_t static ParticleEmitterComponent.Presets.snow.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(_QWORD *, _QWORD);
  void (*v23)(_QWORD *, _QWORD);
  void (*v24)(_QWORD *, _QWORD);
  void (*v25)(_QWORD *, _QWORD);
  void (*v26)(_QWORD *, _QWORD);
  void (*v27)(_QWORD *, _QWORD);
  void (*v28)(_QWORD *, _QWORD);
  void (*v29)(_QWORD *, _QWORD);
  void (*v30)(_QWORD *, _QWORD);
  void (*v31)(_QWORD *, _QWORD);
  void (*v32)(_QWORD *, _QWORD);
  void (*v33)(_QWORD *, _QWORD);
  void (*v34)(_QWORD *, _QWORD);
  void (*v35)(_QWORD *, _QWORD);
  void (*v36)(_QWORD *, _QWORD);
  void (*v37)(_QWORD *, _QWORD);
  void (*v38)(_QWORD *, _QWORD);
  void (*v39)(_QWORD *, _QWORD);
  void (*v40)(_QWORD *, _QWORD);
  void (*v41)(_QWORD *, _QWORD);
  void (*v42)(_QWORD *, _QWORD);
  void (*v43)(_QWORD *, _QWORD);
  void (*v44)(_QWORD *, _QWORD);
  void (*v45)(_QWORD *, _QWORD);
  void (*v46)(_QWORD *, _QWORD);
  void (*v47)(_QWORD *, _QWORD);
  void (*v48)(_QWORD *, _QWORD);
  void (*v49)(_QWORD *, _QWORD);
  void (*v50)(_QWORD *, _QWORD);
  void (*v51)(_QWORD *, _QWORD);
  void (*v52)(_QWORD *, _QWORD);
  void (*v53)(_QWORD *, _QWORD);
  void (*v54)(_QWORD *, _QWORD);
  void (*v55)(_QWORD *, _QWORD);
  void (*v56)(_QWORD *, _QWORD);
  void (*v57)(_QWORD *, _QWORD);
  void (*v58)(_QWORD *, _QWORD);
  void (*v59)(_QWORD *, _QWORD);
  void (*v60)(_QWORD *, _QWORD);
  void (*v61)(_QWORD *, _QWORD);
  void (*v62)(_QWORD *, _QWORD);
  void *v63;
  id v64;
  void *v65;
  id v66;
  uint64_t (*v67)(_QWORD *, _QWORD);
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[6];

  v0 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder();
  v86 = *(_QWORD *)(v0 - 8);
  v87 = v0;
  MEMORY[0x1E0C80A78](v0);
  v85 = (char *)&v69 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve();
  v83 = *(_QWORD *)(v2 - 8);
  v84 = v2;
  MEMORY[0x1E0C80A78](v2);
  v82 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode();
  v80 = *(_QWORD *)(v4 - 8);
  v81 = v4;
  MEMORY[0x1E0C80A78](v4);
  v79 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode();
  v77 = *(_QWORD *)(v6 - 8);
  v78 = v6;
  MEMORY[0x1E0C80A78](v6);
  v76 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for ParticleEmitterComponent.SpawnOccasion();
  v74 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75);
  v73 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for ParticleEmitterComponent.SimulationSpace();
  v71 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v70 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ParticleEmitterComponent.EmitterShape();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ParticleEmitterComponent.BirthLocation();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ParticleEmitterComponent.BirthDirection();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParticleEmitterComponent.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E0CD51C0], v18);
  ParticleEmitterComponent.birthDirection.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x1E0CD5180], v14);
  ParticleEmitterComponent.birthLocation.setter();
  ParticleEmitterComponent.emissionDirection.setter();
  ParticleEmitterComponent.emissionDuration.setter();
  ParticleEmitterComponent.emissionDurationVariation.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0CD4EA0], v10);
  ParticleEmitterComponent.emitterShape.setter();
  ParticleEmitterComponent.emitterShapeSize.setter();
  ParticleEmitterComponent.idleDuration.setter();
  ParticleEmitterComponent.idleDurationVariation.setter();
  ParticleEmitterComponent.shouldLoop.setter();
  ParticleEmitterComponent.particlesInheritTransform.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, *MEMORY[0x1E0CD51F8], v72);
  ParticleEmitterComponent.fieldSimulationSpace.setter();
  ParticleEmitterComponent.spawnInheritsParentColor.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v73, *MEMORY[0x1E0CD51A0], v75);
  ParticleEmitterComponent.spawnOccasion.setter();
  ParticleEmitterComponent.spawnSpreadFactor.setter();
  ParticleEmitterComponent.spawnSpreadFactorVariation.setter();
  ParticleEmitterComponent.spawnVelocityFactor.setter();
  ParticleEmitterComponent.speed.setter();
  ParticleEmitterComponent.speedVariation.setter();
  ParticleEmitterComponent.warmupDuration.setter();
  ParticleEmitterComponent.resetSimulation()();
  v22 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  v22(v88, 0);
  v23 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  v23(v88, 0);
  v24 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  v24(v88, 0);
  v25 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  v25(v88, 0);
  v26 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  v26(v88, 0);
  v27 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  v27(v88, 0);
  v28 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  v28(v88, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v76, *MEMORY[0x1E0CD4F38], v78);
  v29 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  v29(v88, 0);
  v30 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  v30(v88, 0);
  v31 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  v31(v88, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v80 + 104))(v79, *MEMORY[0x1E0CD50C8], v81);
  v32 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  v32(v88, 0);
  v33 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  v33(v88, 0);
  v34 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  v34(v88, 0);
  v35 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  v35(v88, 0);
  v36 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  v36(v88, 0);
  v37 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  v37(v88, 0);
  v38 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  v38(v88, 0);
  v39 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  v39(v88, 0);
  v40 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  v40(v88, 0);
  v41 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  v41(v88, 0);
  v42 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  v42(v88, 0);
  v43 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  v43(v88, 0);
  v44 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  v44(v88, 0);
  v45 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  v45(v88, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v83 + 104))(v82, *MEMORY[0x1E0CD4F08], v84);
  v46 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  v46(v88, 0);
  v47 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  v47(v88, 0);
  v48 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  v48(v88, 0);
  v49 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  v49(v88, 0);
  v50 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  v50(v88, 0);
  v51 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v51(v88, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v86 + 104))(v85, *MEMORY[0x1E0CD50F0], v87);
  v52 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  v52(v88, 0);
  v53 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  v53(v88, 0);
  v54 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  v54(v88, 0);
  v55 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  v55(v88, 0);
  CGColorCreateGenericRGB(255.0, 255.0, 255.0, 1.0);
  v56 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  v56(v88, 0);
  CGColorCreateGenericRGB(255.0, 255.0, 255.0, 1.0);
  v57 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  v57(v88, 0);
  CGColorCreateGenericRGB(255.0, 255.0, 255.0, 1.0);
  v58 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.endColorA.setter();
  v58(v88, 0);
  CGColorCreateGenericRGB(255.0, 255.0, 255.0, 1.0);
  v59 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.endColorB.setter();
  v59(v88, 0);
  v60 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  v60(v88, 0);
  v61 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  v61(v88, 0);
  v62 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  v62(v88, 0);
  type metadata accessor for TextureResource();
  v63 = (void *)MEMORY[0x1DF090310](0xD000000000000010, 0x80000001D95DCA10);
  v64 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v63);

  if (one-time initialization token for textureLoader != -1)
    swift_once();
  v65 = (void *)textureLoader;
  v88[3] = &type metadata for TextureLoader;
  v88[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v88[0] = v65;
  v66 = v65;
  static TextureResource.load(named:in:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v88);

  v67 = (uint64_t (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  return v67(v88, 0);
}

uint64_t SpatialTrackingSession.Configuration.supportedConfiguration()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void (*v17)(_BYTE *, _QWORD);
  uint64_t v18;
  _BYTE v19[32];

  v3 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  MEMORY[0x1E0C80A78](v3);
  v4 = type metadata accessor for SpatialTrackingSession.Configuration();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = (unint64_t)SpatialTrackingSession.Configuration.arConfiguration()();
  if (!v8)
  {
    SpatialTrackingSession.Configuration.camera.getter();
    return SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)();
  }
  v9 = (void *)v8;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v1, v4);
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v10 = (void *)objc_opt_self();
    v11 = v9;
    if ((objc_msgSend(v10, sel_supportsSceneReconstruction_, 1) & 1) != 0)
    {
      v12 = MEMORY[0x1E0DEE9E8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
      type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_1D95E3000;
      static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
      static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
      static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
      static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
      v12 = specialized Set.init(_nonEmptyArrayLiteral:)(v18);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
    }
    v17 = (void (*)(_BYTE *, _QWORD))SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.modify();
    specialized Set._subtract<A>(_:)(v12, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD4CC0], (void (*)(char *))specialized Set._Variant.remove(_:));
  }
  else
  {
    objc_opt_self();
    if (!swift_dynamicCastObjCClass())
    {
      objc_opt_self();
      if (!swift_dynamicCastObjCClass())
        goto LABEL_12;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
    type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1D95E3000;
    v15 = v9;
    static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
    v16 = specialized Set.init(_nonEmptyArrayLiteral:)(v14);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v17 = (void (*)(_BYTE *, _QWORD))SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.modify();
    specialized Set._subtract<A>(_:)(v16, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD4CC0], (void (*)(char *))specialized Set._Variant.remove(_:));
  }
  swift_bridgeObjectRelease();
  v17(v19, 0);

LABEL_12:
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))(a1, v7, v4);
}

ARConfiguration_optional __swiftcall SpatialTrackingSession.Configuration.arConfiguration()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void (*v10)(char *, uint64_t);
  Swift::Bool v11;
  int v12;
  objc_class *v13;
  uint64_t v14;
  ARConfiguration_optional result;

  v0 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v14 - v5;
  v7 = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
  v8 = SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
  SpatialTrackingSession.Configuration.camera.getter();
  v9 = convertAnchorCapabilitiesToARConfiguration(anchorCapabilitySet:sceneUnderstandingCapabilities:camera:)(v7, v8, (uint64_t)v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v6, v0);
  if (v9)
  {
    SpatialTrackingSession.Configuration.camera.getter();
    v12 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v4, v0);
    if (v12 == *MEMORY[0x1E0CD4D00])
    {
      objc_msgSend(v9, sel_setCameraPosition_, 1);
    }
    else if (v12 == *MEMORY[0x1E0CD4D08])
    {
      objc_msgSend(v9, sel_setCameraPosition_, 2);
    }
    else
    {
      v10(v4, v0);
    }
  }
  v13 = (objc_class *)v9;
  result.value.super.isa = v13;
  result.is_nil = v11;
  return result;
}

uint64_t specialized static CapabilitySupportable.supports(anchorCapabilities:sceneUnderstandingCapabilities:camera:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARBodyTrackingConfiguration);
  if (!objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_isSupported))
    goto LABEL_12;
  if (one-time initialization token for supportingCamera != -1)
    swift_once();
  v8 = __swift_project_value_buffer(v4, (uint64_t)static ARBodyTrackingConfiguration.supportingCamera);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.Camera and conformance SpatialTrackingSession.Configuration.Camera, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4D10], MEMORY[0x1E0CD4D18]);
  v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) == 0)
    goto LABEL_12;
  v25 = a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
  type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v24 = v10;
  v11 = swift_allocObject();
  v23 = xmmword_1D95E3410;
  *(_OWORD *)(v11 + 16) = xmmword_1D95E3410;
  swift_bridgeObjectRetain();
  static SpatialTrackingSession.Configuration.AnchorCapability.body.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
  v12 = specialized Set.init(_nonEmptyArrayLiteral:)(v11);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (*(_QWORD *)(v12 + 16) <= *(_QWORD *)(a1 + 16) >> 3)
  {
    v26 = a1;
    specialized Set._subtract<A>(_:)(v12, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD4C68], (void (*)(char *))specialized Set._Variant.remove(_:));
    swift_bridgeObjectRelease();
    v13 = v26;
  }
  else
  {
    v13 = specialized _NativeSet.subtracting<A>(_:)(v12, a1);
    swift_bridgeObjectRelease();
  }
  v14 = *(_QWORD *)(v13 + 16);
  swift_bridgeObjectRelease();
  if (v14)
    goto LABEL_12;
  v15 = v25;
  v26 = v25;
  swift_bridgeObjectRetain();
  specialized Set._subtract<A>(_:)(MEMORY[0x1E0DEE9E8], &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD4CC0], (void (*)(char *))specialized Set._Variant.remove(_:));
  v16 = *(_QWORD *)(v26 + 16);
  swift_bridgeObjectRelease();
  if (v16)
    goto LABEL_12;
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = v23;
  static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
  v18 = specialized Set.init(_nonEmptyArrayLiteral:)(v17);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  LOBYTE(v17) = specialized Set.isDisjoint(with:)(v18, a1);
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
    type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1D95E3000;
    static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
    v20 = specialized Set.init(_nonEmptyArrayLiteral:)(v19);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v21 = specialized Set.isDisjoint(with:)(v20, v15);
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_12:
    v21 = 0;
  }
  return v21 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARFaceTrackingConfiguration);
  if (!objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_isSupported))
    goto LABEL_12;
  if (one-time initialization token for supportingCamera != -1)
    swift_once();
  v8 = __swift_project_value_buffer(v4, (uint64_t)static ARFaceTrackingConfiguration.supportingCamera);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.Camera and conformance SpatialTrackingSession.Configuration.Camera, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4D10], MEMORY[0x1E0CD4D18]);
  v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) == 0)
    goto LABEL_12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
  type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1D95E24F0;
  swift_bridgeObjectRetain();
  static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
  v11 = specialized Set.init(_nonEmptyArrayLiteral:)(v10);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (*(_QWORD *)(v11 + 16) <= *(_QWORD *)(a1 + 16) >> 3)
  {
    v22 = a1;
    specialized Set._subtract<A>(_:)(v11, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD4C68], (void (*)(char *))specialized Set._Variant.remove(_:));
    swift_bridgeObjectRelease();
    v12 = v22;
  }
  else
  {
    v12 = specialized _NativeSet.subtracting<A>(_:)(v11, a1);
    swift_bridgeObjectRelease();
  }
  v13 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRelease();
  if (v13)
    goto LABEL_12;
  v22 = a2;
  swift_bridgeObjectRetain();
  specialized Set._subtract<A>(_:)(MEMORY[0x1E0DEE9E8], &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD4CC0], (void (*)(char *))specialized Set._Variant.remove(_:));
  v14 = *(_QWORD *)(v22 + 16);
  swift_bridgeObjectRelease();
  if (v14)
    goto LABEL_12;
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1D95E2300;
  static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.body.getter();
  v16 = specialized Set.init(_nonEmptyArrayLiteral:)(v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  LOBYTE(v15) = specialized Set.isDisjoint(with:)(v16, a1);
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
    type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1D95E3000;
    static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
    v18 = specialized Set.init(_nonEmptyArrayLiteral:)(v17);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v19 = specialized Set.isDisjoint(with:)(v18, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_12:
    v19 = 0;
  }
  return v19 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARWorldTrackingConfiguration);
  v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_isSupported);
  if (v8)
  {
    if (one-time initialization token for supportingCamera != -1)
      swift_once();
    v9 = __swift_project_value_buffer(v4, (uint64_t)static ARWorldTrackingConfiguration.supportingCamera);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.Camera and conformance SpatialTrackingSession.Configuration.Camera, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4D10], MEMORY[0x1E0CD4D18]);
    v10 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if ((v10 & 1) == 0)
      goto LABEL_15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
    type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1D95E3420;
    swift_bridgeObjectRetain();
    static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.camera.getter();
    v12 = specialized Set.init(_nonEmptyArrayLiteral:)(v11);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    if (*(_QWORD *)(v12 + 16) <= *(_QWORD *)(a1 + 16) >> 3)
    {
      v23 = a1;
      specialized Set._subtract<A>(_:)(v12, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD4C68], (void (*)(char *))specialized Set._Variant.remove(_:));
      swift_bridgeObjectRelease();
      v13 = v23;
    }
    else
    {
      v13 = specialized _NativeSet.subtracting<A>(_:)(v12, a1);
      swift_bridgeObjectRelease();
    }
    v14 = *(_QWORD *)(v13 + 16);
    swift_bridgeObjectRelease();
    if (v14)
      goto LABEL_15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
    type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1D95E3000;
    swift_bridgeObjectRetain();
    static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
    v16 = specialized Set.init(_nonEmptyArrayLiteral:)(v15);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    if (*(_QWORD *)(v16 + 16) <= *(_QWORD *)(a2 + 16) >> 3)
    {
      v23 = a2;
      specialized Set._subtract<A>(_:)(v16, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD4CC0], (void (*)(char *))specialized Set._Variant.remove(_:));
      swift_bridgeObjectRelease();
      v17 = v23;
    }
    else
    {
      v17 = specialized _NativeSet.subtracting<A>(_:)(v16, a2);
      swift_bridgeObjectRelease();
    }
    v18 = *(_QWORD *)(v17 + 16);
    swift_bridgeObjectRelease();
    if (v18
      || (v19 = specialized static ARWorldTrackingConfiguration.unsupportedAnchorCapabilities.getter(),
          v20 = specialized Set.isDisjoint(with:)(v19, a1),
          swift_bridgeObjectRelease(),
          (v20 & 1) == 0))
    {
LABEL_15:
      LOBYTE(v8) = 0;
    }
    else
    {
      LOBYTE(v8) = specialized Set.isDisjoint(with:)(MEMORY[0x1E0DEE9E8], a2);
    }
  }
  return v8 & 1;
}

uint64_t specialized Set.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  int64_t i;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  _QWORD v38[2];
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)v38 - v10;
  MEMORY[0x1E0C80A78](v9);
  v44 = (char *)v38 - v12;
  v13 = *(_QWORD *)(a2 + 16);
  if (!v13)
    return 1;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    return 1;
  if (v13 >= v14)
    v15 = a1;
  else
    v15 = a2;
  if (v13 >= v14)
    a1 = a2;
  v16 = *(_QWORD *)(v15 + 56);
  v40 = v15 + 56;
  v17 = -1 << *(_BYTE *)(v15 + 32);
  v38[1] = ~v17;
  if (-v17 < 64)
    v18 = ~(-1 << -(char)v17);
  else
    v18 = -1;
  v19 = v18 & v16;
  v39 = (unint64_t)(63 - v17) >> 6;
  v47 = a1 + 56;
  v43 = v15;
  swift_bridgeObjectRetain();
  v48 = a1;
  result = swift_bridgeObjectRetain();
  for (i = 0; ; i = v46)
  {
    v41 = v19;
    v42 = i;
    if (!v19)
      break;
    v45 = (v19 - 1) & v19;
    v46 = i;
    v22 = __clz(__rbit64(v19)) | (i << 6);
LABEL_29:
    v27 = v44;
    v28 = *(_QWORD *)(v5 + 72);
    v29 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v29(v44, *(_QWORD *)(v43 + 48) + v28 * v22, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, v27, v4);
    if (*(_QWORD *)(v48 + 16))
    {
      v30 = v48;
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C78]);
      v31 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v32 = -1 << *(_BYTE *)(v30 + 32);
      v33 = v31 & ~v32;
      if (((*(_QWORD *)(v47 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) != 0)
      {
        v34 = ~v32;
        while (1)
        {
          v29(v8, *(_QWORD *)(v48 + 48) + v33 * v28, v4);
          lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C80]);
          v35 = dispatch thunk of static Equatable.== infix(_:_:)();
          v36 = *(void (**)(char *, uint64_t))(v5 + 8);
          v36(v8, v4);
          if ((v35 & 1) != 0)
            break;
          v33 = (v33 + 1) & v34;
          if (((*(_QWORD *)(v47 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
            goto LABEL_12;
        }
        swift_bridgeObjectRelease();
        v36(v11, v4);
        v37 = 0;
        goto LABEL_37;
      }
    }
LABEL_12:
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    v19 = v45;
  }
  v23 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v23 >= v39)
    goto LABEL_39;
  v24 = *(_QWORD *)(v40 + 8 * v23);
  v25 = i + 1;
  if (v24)
    goto LABEL_28;
  v25 = i + 2;
  if (i + 2 >= v39)
    goto LABEL_39;
  v24 = *(_QWORD *)(v40 + 8 * v25);
  if (v24)
    goto LABEL_28;
  v25 = i + 3;
  if (i + 3 >= v39)
    goto LABEL_39;
  v24 = *(_QWORD *)(v40 + 8 * v25);
  if (v24)
  {
LABEL_28:
    v45 = (v24 - 1) & v24;
    v46 = v25;
    v22 = __clz(__rbit64(v24)) + (v25 << 6);
    goto LABEL_29;
  }
  v26 = i + 4;
  if (i + 4 >= v39)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    v37 = 1;
LABEL_37:
    outlined consume of Set<UITouch>.Iterator._Variant();
    return v37;
  }
  v24 = *(_QWORD *)(v40 + 8 * v26);
  if (v24)
  {
    v25 = i + 4;
    goto LABEL_28;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v39)
      goto LABEL_39;
    v24 = *(_QWORD *)(v40 + 8 * v25);
    ++v26;
    if (v24)
      goto LABEL_28;
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  int64_t i;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  _QWORD v38[2];
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)v38 - v10;
  MEMORY[0x1E0C80A78](v9);
  v44 = (char *)v38 - v12;
  v13 = *(_QWORD *)(a2 + 16);
  if (!v13)
    return 1;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    return 1;
  if (v13 >= v14)
    v15 = a1;
  else
    v15 = a2;
  if (v13 >= v14)
    a1 = a2;
  v16 = *(_QWORD *)(v15 + 56);
  v40 = v15 + 56;
  v17 = -1 << *(_BYTE *)(v15 + 32);
  v38[1] = ~v17;
  if (-v17 < 64)
    v18 = ~(-1 << -(char)v17);
  else
    v18 = -1;
  v19 = v18 & v16;
  v39 = (unint64_t)(63 - v17) >> 6;
  v47 = a1 + 56;
  v43 = v15;
  swift_bridgeObjectRetain();
  v48 = a1;
  result = swift_bridgeObjectRetain();
  for (i = 0; ; i = v46)
  {
    v41 = v19;
    v42 = i;
    if (!v19)
      break;
    v45 = (v19 - 1) & v19;
    v46 = i;
    v22 = __clz(__rbit64(v19)) | (i << 6);
LABEL_29:
    v27 = v44;
    v28 = *(_QWORD *)(v5 + 72);
    v29 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v29(v44, *(_QWORD *)(v43 + 48) + v28 * v22, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, v27, v4);
    if (*(_QWORD *)(v48 + 16))
    {
      v30 = v48;
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4CC0], MEMORY[0x1E0CD4CD0]);
      v31 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v32 = -1 << *(_BYTE *)(v30 + 32);
      v33 = v31 & ~v32;
      if (((*(_QWORD *)(v47 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) != 0)
      {
        v34 = ~v32;
        while (1)
        {
          v29(v8, *(_QWORD *)(v48 + 48) + v33 * v28, v4);
          lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4CC0], MEMORY[0x1E0CD4CD8]);
          v35 = dispatch thunk of static Equatable.== infix(_:_:)();
          v36 = *(void (**)(char *, uint64_t))(v5 + 8);
          v36(v8, v4);
          if ((v35 & 1) != 0)
            break;
          v33 = (v33 + 1) & v34;
          if (((*(_QWORD *)(v47 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
            goto LABEL_12;
        }
        swift_bridgeObjectRelease();
        v36(v11, v4);
        v37 = 0;
        goto LABEL_37;
      }
    }
LABEL_12:
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    v19 = v45;
  }
  v23 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v23 >= v39)
    goto LABEL_39;
  v24 = *(_QWORD *)(v40 + 8 * v23);
  v25 = i + 1;
  if (v24)
    goto LABEL_28;
  v25 = i + 2;
  if (i + 2 >= v39)
    goto LABEL_39;
  v24 = *(_QWORD *)(v40 + 8 * v25);
  if (v24)
    goto LABEL_28;
  v25 = i + 3;
  if (i + 3 >= v39)
    goto LABEL_39;
  v24 = *(_QWORD *)(v40 + 8 * v25);
  if (v24)
  {
LABEL_28:
    v45 = (v24 - 1) & v24;
    v46 = v25;
    v22 = __clz(__rbit64(v24)) + (v25 << 6);
    goto LABEL_29;
  }
  v26 = i + 4;
  if (i + 4 >= v39)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    v37 = 1;
LABEL_37:
    outlined consume of Set<UITouch>.Iterator._Variant();
    return v37;
  }
  v24 = *(_QWORD *)(v40 + 8 * v26);
  if (v24)
  {
    v25 = i + 4;
    goto LABEL_28;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v39)
      goto LABEL_39;
    v24 = *(_QWORD *)(v40 + 8 * v25);
    ++v26;
    if (v24)
      goto LABEL_28;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t one-time initialization function for supportingCamera(uint64_t a1)
{
  return one-time initialization function for supportingCamera(a1, static ARWorldTrackingConfiguration.supportingCamera, MEMORY[0x1E0CD4D00]);
}

{
  return one-time initialization function for supportingCamera(a1, static ARFaceTrackingConfiguration.supportingCamera, MEMORY[0x1E0CD4D08]);
}

{
  return one-time initialization function for supportingCamera(a1, static ARBodyTrackingConfiguration.supportingCamera, MEMORY[0x1E0CD4D00]);
}

uint64_t one-time initialization function for supportingCamera(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  __swift_allocate_value_buffer(v5, a2);
  v6 = __swift_project_value_buffer(v5, (uint64_t)a2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v6, *a3, v5);
}

uint64_t ARWorldTrackingConfiguration.filterConfiguration(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *);
  void (*v26)(char *, uint64_t);
  uint64_t result;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *i;
  char *v34;
  void (*v35)(char *, _QWORD);
  char *v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, unint64_t, uint64_t);
  uint64_t (*v48)(char *, uint64_t);
  char v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  char *v54;
  _QWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int64_t v62;
  id v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char v68[32];

  v58 = a2;
  v3 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v66 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v61 = (char *)v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v55 - v6;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v55 - v9;
  MEMORY[0x1E0C80A78](v11);
  v67 = (char *)v55 - v12;
  MEMORY[0x1E0C80A78](v13);
  v65 = (char *)v55 - v14;
  v15 = type metadata accessor for SpatialTrackingSession.Configuration();
  v56 = *(_QWORD *)(v15 - 8);
  v57 = v15;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)v55 - v23;
  v55[1] = a1;
  SpatialTrackingSession.Configuration.camera.getter();
  v25 = *(void (**)(char *))(v19 + 104);
  LODWORD(v64) = *MEMORY[0x1E0CD4D00];
  v25(v21);
  LOBYTE(a1) = static SpatialTrackingSession.Configuration.Camera.== infix(_:_:)();
  v26 = *(void (**)(char *, uint64_t))(v19 + 8);
  v26(v21, v18);
  v26(v24, v18);
  if ((a1 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56))(v58, 1, 1, v57);
  ((void (*)(char *, _QWORD, uint64_t))v25)(v24, v64, v18);
  v60 = v17;
  SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)();
  result = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
  v28 = 0;
  v29 = *(_QWORD *)(result + 56);
  v59 = result + 56;
  v64 = result;
  v30 = 1 << *(_BYTE *)(result + 32);
  v31 = -1;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  v32 = v31 & v29;
  v62 = (unint64_t)(v30 + 63) >> 6;
  for (i = v67; ; result = v48(i, v3))
  {
    if (v32)
    {
      v37 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      v38 = v37 | (v28 << 6);
      goto LABEL_24;
    }
    v39 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
      return result;
    }
    v41 = v57;
    v40 = v58;
    v42 = v56;
    if (v39 >= v62)
      goto LABEL_35;
    v43 = *(_QWORD *)(v59 + 8 * v39);
    ++v28;
    if (!v43)
    {
      v28 = v39 + 1;
      if (v39 + 1 >= v62)
        goto LABEL_35;
      v43 = *(_QWORD *)(v59 + 8 * v28);
      if (!v43)
      {
        v28 = v39 + 2;
        if (v39 + 2 >= v62)
          goto LABEL_35;
        v43 = *(_QWORD *)(v59 + 8 * v28);
        if (!v43)
          break;
      }
    }
LABEL_23:
    v32 = (v43 - 1) & v43;
    v38 = __clz(__rbit64(v43)) + (v28 << 6);
LABEL_24:
    v45 = v65;
    v46 = v66;
    v47 = *(void (**)(char *, unint64_t, uint64_t))(v66 + 16);
    v47(v65, *(_QWORD *)(v64 + 48) + *(_QWORD *)(v66 + 72) * v38, v3);
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(i, v45, v3);
    v47(v10, (unint64_t)i, v3);
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C80]);
    LOBYTE(v45) = dispatch thunk of static Equatable.== infix(_:_:)();
    v48 = *(uint64_t (**)(char *, uint64_t))(v46 + 8);
    v48(v7, v3);
    if ((v45 & 1) != 0)
    {
      v48(v10, v3);
      if (objc_msgSend(v63, sel_planeDetection))
        goto LABEL_6;
    }
    else
    {
      static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
      v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      v48(v7, v3);
      if ((v49 & 1) != 0)
      {
        v48(v10, v3);
        if (objc_msgSend(v63, sel_userFaceTrackingEnabled))
          goto LABEL_6;
      }
      else
      {
        static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
        v50 = dispatch thunk of static Equatable.== infix(_:_:)();
        v48(v7, v3);
        if ((v50 & 1) != 0
          || (static SpatialTrackingSession.Configuration.AnchorCapability.object.getter(),
              v51 = dispatch thunk of static Equatable.== infix(_:_:)(),
              v48(v7, v3),
              (v51 & 1) != 0))
        {
          v48(v10, v3);
LABEL_6:
          v34 = v61;
          v47(v61, (unint64_t)v67, v3);
          v35 = (void (*)(char *, _QWORD))SpatialTrackingSession.Configuration.anchorCapabilitySet.modify();
          v36 = v34;
          i = v67;
          specialized Set._Variant.insert(_:)((uint64_t)v7, v36);
          v48(v7, v3);
          v35(v68, 0);
          continue;
        }
        static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
        v52 = dispatch thunk of static Equatable.== infix(_:_:)();
        v48(v7, v3);
        v48(v10, v3);
        if ((v52 & 1) != 0)
          goto LABEL_6;
      }
    }
  }
  v44 = v39 + 3;
  if (v44 < v62)
  {
    v43 = *(_QWORD *)(v59 + 8 * v44);
    if (!v43)
    {
      while (1)
      {
        v28 = v44 + 1;
        if (__OFADD__(v44, 1))
          goto LABEL_39;
        if (v28 >= v62)
          goto LABEL_35;
        v43 = *(_QWORD *)(v59 + 8 * v28);
        ++v44;
        if (v43)
          goto LABEL_23;
      }
    }
    v28 = v44;
    goto LABEL_23;
  }
LABEL_35:
  swift_release();
  v53 = *(_QWORD *)(SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter() + 16);
  swift_bridgeObjectRelease();
  v54 = v60;
  if (v53)
  {
    SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
    SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.setter();
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v40, v54, v41);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v40, 0, 1, v41);
}

id protocol witness for ARConfigurationBuilder.createConfigure(requestingAnchorCapabilities:sceneUnderstandingCapabilities:camera:) in conformance ARFaceTrackingConfigurationBuilder(uint64_t a1, uint64_t a2)
{
  if ((specialized static CapabilitySupportable.supports(anchorCapabilities:sceneUnderstandingCapabilities:camera:)(a1, a2) & 1) != 0)return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C895B0]), sel_init);
  else
    return 0;
}

uint64_t ARFaceTrackingConfiguration.filterConfiguration(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, _QWORD, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  void (*v24)(char *, _QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36[32];

  v35 = a1;
  v1 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v31 = *(_QWORD *)(v1 - 8);
  v32 = v1;
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v30 - v5;
  v7 = type metadata accessor for SpatialTrackingSession.Configuration();
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v30 - v15;
  SpatialTrackingSession.Configuration.camera.getter();
  v17 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 104);
  v17(v13, *MEMORY[0x1E0CD4D08], v10);
  v18 = static SpatialTrackingSession.Configuration.Camera.== infix(_:_:)();
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  v19(v16, v10);
  if ((v18 & 1) != 0)
  {
    v17(v16, *MEMORY[0x1E0CD4D00], v10);
    SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)();
    v20 = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
    v21 = specialized Set.contains(_:)((uint64_t)v6, v20);
    swift_bridgeObjectRelease();
    v22 = v32;
    v23 = *(void (**)(char *, uint64_t))(v31 + 8);
    v23(v6, v32);
    if ((v21 & 1) != 0)
    {
      static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
      v24 = (void (*)(char *, _QWORD))SpatialTrackingSession.Configuration.anchorCapabilitySet.modify();
      specialized Set._Variant.insert(_:)((uint64_t)v6, v3);
      v23(v6, v22);
      v24(v36, 0);
    }
    v26 = v33;
    v25 = v34;
    v27 = v35;
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v35, v9, v34);
    v28 = 0;
  }
  else
  {
    v28 = 1;
    v25 = v34;
    v27 = v35;
    v26 = v33;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v27, v28, 1, v25);
}

uint64_t ARBodyTrackingConfiguration.filterConfiguration(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *);
  void (*v25)(char *, uint64_t);
  uint64_t result;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *i;
  char *v34;
  void (*v35)(char *, _QWORD);
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  int64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, unint64_t, uint64_t);
  void (*v48)(char *, uint64_t);
  id v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  int64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char v66[32];

  v55 = a2;
  v3 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v62 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v59 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v52 - v6;
  MEMORY[0x1E0C80A78](v8);
  v64 = (char *)&v52 - v9;
  MEMORY[0x1E0C80A78](v10);
  v63 = (char *)&v52 - v11;
  MEMORY[0x1E0C80A78](v12);
  v61 = (char *)&v52 - v13;
  v14 = type metadata accessor for SpatialTrackingSession.Configuration();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v65 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v52 - v22;
  v60 = a1;
  SpatialTrackingSession.Configuration.camera.getter();
  v24 = *(void (**)(char *))(v18 + 104);
  LODWORD(v58) = *MEMORY[0x1E0CD4D00];
  v24(v20);
  LOBYTE(a1) = static SpatialTrackingSession.Configuration.Camera.== infix(_:_:)();
  v25 = *(void (**)(char *, uint64_t))(v18 + 8);
  v25(v20, v17);
  v25(v23, v17);
  if ((a1 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v55, 1, 1, v14);
  v53 = v15;
  v54 = v14;
  ((void (*)(char *, _QWORD, uint64_t))v24)(v23, v58, v17);
  SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)();
  result = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
  v27 = 0;
  v28 = *(_QWORD *)(result + 56);
  v57 = result + 56;
  v60 = result;
  v29 = 1 << *(_BYTE *)(result + 32);
  v30 = -1;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  v31 = v30 & v28;
  v58 = (unint64_t)(v29 + 63) >> 6;
  v32 = v63;
  for (i = v64; ; i = v64)
  {
    if (v31)
    {
      v36 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      v37 = v36 | (v27 << 6);
      goto LABEL_24;
    }
    v38 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    v40 = v54;
    v39 = v55;
    v41 = v53;
    v42 = v65;
    if (v38 >= v58)
      goto LABEL_31;
    v43 = *(_QWORD *)(v57 + 8 * v38);
    ++v27;
    if (!v43)
    {
      v27 = v38 + 1;
      if (v38 + 1 >= v58)
        goto LABEL_31;
      v43 = *(_QWORD *)(v57 + 8 * v27);
      if (!v43)
      {
        v27 = v38 + 2;
        if (v38 + 2 >= v58)
          goto LABEL_31;
        v43 = *(_QWORD *)(v57 + 8 * v27);
        if (!v43)
          break;
      }
    }
LABEL_23:
    v31 = (v43 - 1) & v43;
    v37 = __clz(__rbit64(v43)) + (v27 << 6);
LABEL_24:
    v45 = v61;
    v46 = v62;
    v47 = *(void (**)(char *, unint64_t, uint64_t))(v62 + 16);
    v47(v61, *(_QWORD *)(v60 + 48) + *(_QWORD *)(v62 + 72) * v37, v3);
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v32, v45, v3);
    v47(i, (unint64_t)v32, v3);
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C80]);
    LOBYTE(v45) = dispatch thunk of static Equatable.== infix(_:_:)();
    v48 = *(void (**)(char *, uint64_t))(v46 + 8);
    v48(v7, v3);
    if ((v45 & 1) != 0)
    {
      v48(i, v3);
      v49 = objc_msgSend(v56, sel_planeDetection);
      v32 = v63;
      if (v49)
        goto LABEL_6;
    }
    else
    {
      static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
      v50 = dispatch thunk of static Equatable.== infix(_:_:)();
      v48(v7, v3);
      if ((v50 & 1) != 0)
      {
        v48(i, v3);
        v32 = v63;
LABEL_6:
        v34 = v59;
        v47(v59, (unint64_t)v32, v3);
        v35 = (void (*)(char *, _QWORD))SpatialTrackingSession.Configuration.anchorCapabilitySet.modify();
        specialized Set._Variant.insert(_:)((uint64_t)v7, v34);
        v48(v7, v3);
        v35(v66, 0);
        goto LABEL_7;
      }
      static SpatialTrackingSession.Configuration.AnchorCapability.body.getter();
      v51 = dispatch thunk of static Equatable.== infix(_:_:)();
      v48(v7, v3);
      v48(i, v3);
      v32 = v63;
      if ((v51 & 1) != 0)
        goto LABEL_6;
    }
LABEL_7:
    result = ((uint64_t (*)(char *, uint64_t))v48)(v32, v3);
  }
  v44 = v38 + 3;
  if (v44 >= v58)
  {
LABEL_31:
    swift_release();
    (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v39, v42, v40);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v39, 0, 1, v40);
  }
  v43 = *(_QWORD *)(v57 + 8 * v44);
  if (v43)
  {
    v27 = v44;
    goto LABEL_23;
  }
  while (1)
  {
    v27 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v27 >= v58)
      goto LABEL_31;
    v43 = *(_QWORD *)(v57 + 8 * v27);
    ++v44;
    if (v43)
      goto LABEL_23;
  }
LABEL_33:
  __break(1u);
  return result;
}

id convertAnchorCapabilitiesToARConfiguration(anchorCapabilitySet:sceneUnderstandingCapabilities:camera:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ARConfigurationBuilder>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D95E3410;
  *(_QWORD *)(inited + 56) = &unk_1E9F435A8;
  *(_QWORD *)(inited + 64) = &protocol witness table for ARWorldTrackingConfigurationBuilder;
  *(_QWORD *)(inited + 96) = &unk_1E9F43588;
  *(_QWORD *)(inited + 104) = &protocol witness table for ARFaceTrackingConfigurationBuilder;
  *(_QWORD *)(inited + 136) = &unk_1E9F43568;
  *(_QWORD *)(inited + 144) = &protocol witness table for ARBodyTrackingConfigurationBuilder;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(inited + 32), (uint64_t)&unk_1E9F435A8);
  v7 = specialized ARWorldTrackingConfigurationBuilder.createConfigure(requestingAnchorCapabilities:sceneUnderstandingCapabilities:camera:)(a1, a2);
  if (!v7)
  {
    v8 = *(_QWORD *)(inited + 96);
    v9 = *(_QWORD *)(inited + 104);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(inited + 72), v8);
    v7 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(a1, a2, a3, v8, v9);
    if (!v7)
    {
      v10 = *(_QWORD *)(inited + 136);
      v11 = *(_QWORD *)(inited + 144);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(inited + 112), v10);
      v7 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(a1, a2, a3, v10, v11);
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

void SpatialTrackingSession.Configuration.filteredBy(arConfiguration:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v5 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  MEMORY[0x1E0C80A78](v5);
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v7 = a1;
    ARWorldTrackingConfiguration.filterConfiguration(_:)(v2, a2);
LABEL_7:

    return;
  }
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v7 = a1;
    ARBodyTrackingConfiguration.filterConfiguration(_:)(v2, a2);
    goto LABEL_7;
  }
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v7 = a1;
    ARFaceTrackingConfiguration.filterConfiguration(_:)(a2);
    goto LABEL_7;
  }
  SpatialTrackingSession.Configuration.camera.getter();
  SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)();
  v6 = type metadata accessor for SpatialTrackingSession.Configuration();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, 0, 1, v6);
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t a1)
{
  return specialized Set._subtract<A>(_:)(a1, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD4CC0], (void (*)(char *))specialized Set._Variant.remove(_:));
}

{
  return specialized Set._subtract<A>(_:)(a1, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD4C68], (void (*)(char *))specialized Set._Variant.remove(_:));
}

{
  return specialized Set._subtract<A>(_:)(a1, &demangling cache variable for type metadata for Participant?, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB4250], (void (*)(char *))specialized Set._Variant.remove(_:));
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), void (*a4)(char *))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void (*v32)(char *);

  v32 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a3(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v29 - v17;
  if (!*(_QWORD *)(*(_QWORD *)v4 + 16))
    return result;
  v19 = *(_QWORD *)(a1 + 56);
  v30 = a1 + 56;
  v20 = 1 << *(_BYTE *)(a1 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v31 = (unint64_t)(v20 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v23 = 0;
  while (1)
  {
    if (v22)
    {
      v24 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v25 = v24 | (v23 << 6);
      goto LABEL_6;
    }
    v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v31)
      return swift_release();
    v27 = *(_QWORD *)(v30 + 8 * v26);
    ++v23;
    if (!v27)
    {
      v23 = v26 + 1;
      if (v26 + 1 >= v31)
        return swift_release();
      v27 = *(_QWORD *)(v30 + 8 * v23);
      if (!v27)
      {
        v23 = v26 + 2;
        if (v26 + 2 >= v31)
          return swift_release();
        v27 = *(_QWORD *)(v30 + 8 * v23);
        if (!v27)
        {
          v23 = v26 + 3;
          if (v26 + 3 >= v31)
            return swift_release();
          v27 = *(_QWORD *)(v30 + 8 * v23);
          if (!v27)
            break;
        }
      }
    }
LABEL_23:
    v22 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v18, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v12 + 72) * v25, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v18, v11);
    v32(v15);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v10, a2);
    result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  v28 = v26 + 4;
  if (v28 >= v31)
    return swift_release();
  v27 = *(_QWORD *)(v30 + 8 * v28);
  if (v27)
  {
    v23 = v28;
    goto LABEL_23;
  }
  while (1)
  {
    v23 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v23 >= v31)
      return swift_release();
    v27 = *(_QWORD *)(v30 + 8 * v23);
    ++v28;
    if (v27)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
    v10 = static _SetStorage.allocate(capacity:)();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C78]);
      v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C80]);
          v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
    v10 = static _SetStorage.allocate(capacity:)();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4CC0], MEMORY[0x1E0CD4CD0]);
      v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4CC0], MEMORY[0x1E0CD4CD8]);
          v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

void *type metadata accessor for ARBodyTrackingConfigurationBuilder()
{
  return &unk_1E9F43568;
}

void *type metadata accessor for ARFaceTrackingConfigurationBuilder()
{
  return &unk_1E9F43588;
}

void *type metadata accessor for ARWorldTrackingConfigurationBuilder()
{
  return &unk_1E9F435A8;
}

id specialized ARBodyTrackingConfigurationBuilder.createConfigure(requestingAnchorCapabilities:sceneUnderstandingCapabilities:camera:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  char v9;
  void (*v10)(char *, uint64_t);
  char v11;
  uint64_t v13;

  v4 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = 0;
  if ((specialized static CapabilitySupportable.supports(anchorCapabilities:sceneUnderstandingCapabilities:camera:)(a1, a2) & 1) != 0)
  {
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C89578]), sel_init);
    static SpatialTrackingSession.Configuration.AnchorCapability.body.getter();
    v9 = specialized Set.contains(_:)((uint64_t)v7, a1);
    v10 = *(void (**)(char *, uint64_t))(v5 + 8);
    v10(v7, v4);
    if ((v9 & 1) != 0)
      objc_msgSend(v8, sel_setAutomaticSkeletonScaleEstimationEnabled_, 1);
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    v11 = specialized Set.contains(_:)((uint64_t)v7, a1);
    v10(v7, v4);
    if ((v11 & 1) != 0)
    {
      objc_msgSend(v8, sel_setPlaneDetection_, (unint64_t)objc_msgSend(v8, sel_planeDetection) | 1);
      objc_msgSend(v8, sel_setPlaneDetection_, (unint64_t)objc_msgSend(v8, sel_planeDetection) | 2);
    }
  }
  return v8;
}

uint64_t specialized static ARWorldTrackingConfiguration.unsupportedAnchorCapabilities.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v0 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v9 - v5;
  v10 = MEMORY[0x1E0DEE9E8];
  static SpatialTrackingSession.Configuration.AnchorCapability.body.getter();
  specialized Set._Variant.insert(_:)((uint64_t)v6, v4);
  v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v6, v0);
  if ((objc_msgSend((id)objc_opt_self(), sel_supportsUserFaceTracking) & 1) == 0)
  {
    static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
    specialized Set._Variant.insert(_:)((uint64_t)v6, v4);
    v7(v6, v0);
  }
  return v10;
}

id specialized ARWorldTrackingConfigurationBuilder.createConfigure(requestingAnchorCapabilities:sceneUnderstandingCapabilities:camera:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  char v9;
  void (*v10)(char *, uint64_t);
  char v11;
  uint64_t v13;

  v4 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = 0;
  if ((specialized static CapabilitySupportable.supports(anchorCapabilities:sceneUnderstandingCapabilities:camera:)(a1, a2) & 1) != 0)
  {
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C89620]), sel_init);
    objc_msgSend(v8, sel_setEnvironmentTexturing_, 2);
    static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
    v9 = specialized Set.contains(_:)((uint64_t)v7, a1);
    v10 = *(void (**)(char *, uint64_t))(v5 + 8);
    v10(v7, v4);
    objc_msgSend(v8, sel_setUserFaceTrackingEnabled_, v9 & 1);
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    v11 = specialized Set.contains(_:)((uint64_t)v7, a1);
    v10(v7, v4);
    if ((v11 & 1) != 0)
    {
      objc_msgSend(v8, sel_setPlaneDetection_, (unint64_t)objc_msgSend(v8, sel_planeDetection) | 1);
      objc_msgSend(v8, sel_setPlaneDetection_, (unint64_t)objc_msgSend(v8, sel_planeDetection) | 2);
    }
    if (*(_QWORD *)(a2 + 16) && objc_msgSend((id)objc_opt_self(), sel_supportsSceneReconstruction_, 1))
      objc_msgSend(v8, sel_setSceneReconstruction_, (unint64_t)objc_msgSend(v8, sel_sceneReconstruction) | 1);
  }
  return v8;
}

id SpotLightComponent.color.getter()
{
  void *v0;
  id v1;

  v0 = (void *)SpotLightComponent.__color.getter();
  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v0);

  return v1;
}

void key path getter for SpotLightComponent.color : SpotLightComponent(_QWORD *a1@<X8>)
{
  void *v2;
  id v3;

  v2 = (void *)SpotLightComponent.__color.getter();
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v2);

  *a1 = v3;
}

void key path setter for SpotLightComponent.color : SpotLightComponent(id *a1)
{
  id v1;
  id v2;

  v2 = *a1;
  v1 = objc_msgSend(v2, sel_CGColor);
  SpotLightComponent.__color.setter();

}

void SpotLightComponent.color.setter(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, sel_CGColor);
  SpotLightComponent.__color.setter();

}

void (*SpotLightComponent.color.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  void *v3;
  id v4;

  a1[1] = v1;
  v3 = (void *)SpotLightComponent.__color.getter();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return SpotLightComponent.color.modify;
}

void SpotLightComponent.color.modify(void **a1, char a2)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;

  v2 = *a1;
  v6 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    v4 = objc_msgSend(v3, sel_CGColor);
    SpotLightComponent.__color.setter();

  }
  else
  {
    v5 = objc_msgSend(v2, sel_CGColor);
    SpotLightComponent.__color.setter();
  }

}

void SpotLightComponent.init(color:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:)(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, sel_CGColor);
  SpotLightComponent.init(cgColor:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:)();

}

void SpotLightComponent.init(color:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:attenuationFalloffExponent:)(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, sel_CGColor);
  SpotLightComponent.init(cgColor:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:attenuationFalloffExponent:)();

}

uint64_t SpotLightComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  _QWORD v25[2];

  v25[1] = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SpotLightComponent();
  v10 = MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v9, v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1D95E3420;
  *(_QWORD *)(v13 + 32) = 0x726F6C6F63;
  *(_QWORD *)(v13 + 40) = 0xE500000000000000;
  v14 = (void *)SpotLightComponent.__color.getter();
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v14);

  v16 = type metadata accessor for UIColor();
  *(_QWORD *)(v13 + 48) = v15;
  *(_QWORD *)(v13 + 72) = v16;
  *(_QWORD *)(v13 + 80) = 0x7469736E65746E69;
  *(_QWORD *)(v13 + 88) = 0xE900000000000079;
  SpotLightComponent.intensity.getter();
  v17 = MEMORY[0x1E0DEB188];
  *(_DWORD *)(v13 + 96) = v18;
  *(_QWORD *)(v13 + 120) = v17;
  *(_QWORD *)(v13 + 128) = 0xD000000000000013;
  *(_QWORD *)(v13 + 136) = 0x80000001D95DD320;
  SpotLightComponent.innerAngleInDegrees.getter();
  *(_DWORD *)(v13 + 144) = v19;
  *(_QWORD *)(v13 + 168) = v17;
  *(_QWORD *)(v13 + 176) = 0xD000000000000013;
  *(_QWORD *)(v13 + 184) = 0x80000001D95DD340;
  SpotLightComponent.outerAngleInDegrees.getter();
  *(_DWORD *)(v13 + 192) = v20;
  *(_QWORD *)(v13 + 216) = v17;
  *(_QWORD *)(v13 + 224) = 0xD000000000000011;
  *(_QWORD *)(v13 + 232) = 0x80000001D95DD130;
  SpotLightComponent.attenuationRadius.getter();
  *(_DWORD *)(v13 + 240) = v21;
  *(_QWORD *)(v13 + 264) = v17;
  *(_QWORD *)(v13 + 272) = 0xD00000000000001ALL;
  *(_QWORD *)(v13 + 280) = 0x80000001D95DD150;
  SpotLightComponent.attenuationFalloffExponent.getter();
  *(_QWORD *)(v13 + 312) = v17;
  *(_DWORD *)(v13 + 288) = v22;
  v23 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v8, 1, 1, v23);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEDFE8], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void RealityFusionSession.update(scene:with:by:)(int a1, char *a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  char *v34;
  void *v35;
  id Camera;
  id v37;
  id v38;

  specialized RealityFusionSession.getCameraTransform(arView:)(a2);
  Camera = (id)RFAnchorCreateCamera();
  v3 = dispatch thunk of RealityFusionSession.serviceManager.getter();
  if (v3)
  {
    v4 = (void *)v3;
    v5 = (id)RFServiceManagerGetAnchorDataProvider();

    if (v5)
    {
      RFAnchorDataProviderUpdateLocalAnchor();

    }
  }
  v6 = dispatch thunk of RealityFusionSession.serviceManager.getter();
  if (!v6)
  {
    __break(1u);
    goto LABEL_45;
  }
  v7 = (void *)v6;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  if (!REServiceLocatorGetECSService())
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  RFServiceManagerUpdate();

  v8 = dispatch thunk of RealityFusionSession.serviceManager.getter();
  if (v8)
  {
    v9 = (void *)v8;
    v10 = (id)RFServiceManagerGetMeshReconstructionService();

    if (v10)
    {
      RFMeshReconstructionServiceUpdateByDeltaTime();

    }
  }
  v11 = dispatch thunk of RealityFusionSession.serviceManager.getter();
  if (v11)
  {
    v12 = (void *)v11;
    v13 = (id)RFServiceManagerGetAnchorManagementService();

    if (v13)
    {
      RFAnchorManagementServiceUpdateByDeltaTime();

    }
  }
  v14 = dispatch thunk of RealityFusionSession.serviceManager.getter();
  if (v14)
  {
    v15 = (void *)v14;
    v16 = (id)RFServiceManagerGetLoggingService();

    if (v16)
    {
      RFLoggingServiceUpdateByDeltaTime();

    }
  }
  v17 = dispatch thunk of RealityFusionSession.serviceManager.getter();
  if (v17)
  {
    v18 = (void *)v17;
    v19 = (id)RFServiceManagerGetDebugService();

    if (v19)
    {
      RFDebugServiceUpdateByDeltaTime();

    }
  }
  v20 = dispatch thunk of RealityFusionSession.serviceManager.getter();
  if (v20)
  {
    v21 = (void *)v20;
    v22 = (id)RFServiceManagerGetSyntheticEnvironmentService();

    if (v22)
    {
      RFSyntheticEnvironmentServiceUpdateByDeltaTime();

    }
  }
  v23 = dispatch thunk of RealityFusionSession.serviceManager.getter();
  if (v23)
  {
    v24 = (void *)v23;
    v25 = (id)RFServiceManagerGetAtmospherePlacementService();

    if (v25)
    {
      RFAtmospherePlacementServiceUpdateByDeltaTime();

    }
  }
  v26 = objc_msgSend(a2, sel_session, Camera);
  v38 = objc_msgSend(v26, sel_configuration);

  if (!v38)
  {
    v35 = v37;
LABEL_42:

    return;
  }
  objc_opt_self();
  v27 = (void *)swift_dynamicCastObjCClass();
  if ((!v27 || objc_msgSend(v27, sel_environmentTexturing) != (id)1)
    && ((objc_opt_self(), (v28 = (void *)swift_dynamicCastObjCClass()) == 0)
     || objc_msgSend(v28, sel_environmentTexturing) != (id)1)
    && ((objc_opt_self(), (v29 = (void *)swift_dynamicCastObjCClass()) == 0)
     || objc_msgSend(v29, sel_environmentTexturing) != (id)1)
    || (v30 = dispatch thunk of RealityFusionSession.serviceManager.getter()) == 0)
  {
LABEL_41:

    v35 = v38;
    goto LABEL_42;
  }
  v31 = (void *)v30;
  v32 = (id)RFServiceManagerGetEnvironmentProbePlacementService();
  if (!v32)
  {

    goto LABEL_41;
  }
  v33 = v32;
  if (one-time initialization token for gpuClass != -1)
    swift_once();
  if (static RealityFusionSession.gpuClass != 3
    && (v34 = &a2[OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes], swift_beginAccess(), *v34 != 1)
    || *(_QWORD *)&a2[OBJC_IVAR____TtC10RealityKit6ARView_arSystem])
  {
    swift_beginAccess();
    RFEnvironmentProbePlacementServiceSetLocalizedProbeEnabled();
    RFEnvironmentProbePlacementServiceSetBackgroundParallaxEnabled();
    RFEnvironmentProbePlacementServiceUpdateByDeltaTime();

    return;
  }
LABEL_46:
  __break(1u);
}

__n128 specialized RealityFusionSession.getCameraTransform(arView:)(char *a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;
  __n128 result;
  simd_float4 v14;
  simd_float4 v15;
  simd_float4 v16;
  simd_float4 v17;
  simd_float4x4 v18;

  if (a1[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] == 1)
  {
    v2 = *(_QWORD *)&a1[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation];
  }
  else
  {
    v3 = objc_msgSend(a1, sel_window);
    if (v3
      && (v4 = v3, v5 = objc_msgSend(v3, sel_windowScene), v4, v5))
    {
      v2 = (uint64_t)objc_msgSend(v5, sel_interfaceOrientation);

      if (!v2)
        v2 = 3;
    }
    else
    {
      v2 = 3;
    }
  }
  v6 = objc_msgSend(a1, sel_session);
  v7 = objc_msgSend(v6, sel_currentFrame);

  if (v7)
  {
    v8 = objc_msgSend(v7, sel_camera);

    objc_msgSend(v8, sel_viewMatrixForOrientation_, v2);
    v16 = v10;
    v17 = v9;
    v14 = v12;
    v15 = v11;

    v18.columns[1] = v16;
    v18.columns[0] = v17;
    v18.columns[3] = v14;
    v18.columns[2] = v15;
    result.n128_u64[0] = (unint64_t)__invert_f4(v18);
  }
  else
  {
    return *(__n128 *)MEMORY[0x1E0C83FF0];
  }
  return result;
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)(v5 + 16) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in Array<A>.first(with:)(uint64_t a1)
{
  return MEMORY[0x1DF08F710](*(_QWORD *)(*(_QWORD *)a1 + 16)+ OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_participant) & 1;
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;

  if (a3 >> 62)
    goto LABEL_14;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v7 = 0;
  if (v6)
  {
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        v8 = MEMORY[0x1DF0906F4](v7, a3);
      }
      else
      {
        v8 = *(_QWORD *)(a3 + 8 * v7 + 32);
        swift_retain();
      }
      v12 = v8;
      v9 = a1(&v12);
      swift_release();
      if (v3 || (v9 & 1) != 0)
        break;
      v10 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        v6 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v7 = 0;
        if (!v6)
          return v7;
      }
      else
      {
        ++v7;
        if (v10 == v6)
          return 0;
      }
    }
  }
  return v7;
}

uint64_t GroupActivitiesSynchronizationDiscoveryView.State.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

void GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)();
  void *v19;
  void *v20;
  uint64_t v21;

  type metadata accessor for GroupActivitiesSynchronizationDiscoveryView.State();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v1 + 16) = v3;
  swift_retain();
  v4 = RESyncDiscoveryViewObserverCreate();
  v5 = *(_QWORD *)(v1 + 16);
  v20 = partial apply for closure #1 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:);
  v21 = v5;
  v6 = MEMORY[0x1E0C809B0];
  v16 = MEMORY[0x1E0C809B0];
  v17 = 1107296256;
  v18 = thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  v19 = &block_descriptor_4;
  v7 = _Block_copy(&v16);
  swift_retain();
  swift_release();
  RESyncDiscoveryViewObserverOnGetIdentitiesCount();
  _Block_release(v7);
  if (v4)
  {
    v8 = *(_QWORD *)(v1 + 16);
    v20 = partial apply for closure #2 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:);
    v21 = v8;
    v16 = v6;
    v17 = 1107296256;
    v18 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@unowned Int) -> (@unowned OpaquePointer);
    v19 = &block_descriptor_3_0;
    v9 = _Block_copy(&v16);
    swift_retain();
    swift_release();
    RESyncDiscoveryViewObserverOnGetIdentityAtIndex();
    _Block_release(v9);
    v20 = closure #3 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:);
    v21 = 0;
    v16 = v6;
    v17 = 1644167168;
    v18 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@unowned RESyncAuthData);
    v19 = &block_descriptor_6_1;
    v10 = _Block_copy(&v16);
    RESyncDiscoveryViewObserverOnGetAuthData();
    _Block_release(v10);
    v20 = closure #4 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:);
    v21 = 0;
    v16 = v6;
    v17 = 1107296256;
    v18 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @unowned UnsafePointer<RESyncAuthData>) -> (@unowned OpaquePointer?);
    v19 = &block_descriptor_9;
    v11 = _Block_copy(&v16);
    RESyncDiscoveryViewObserverOnRequestIdentity();
    _Block_release(v11);
    v12 = *(_QWORD *)(v1 + 16);
    v20 = partial apply for closure #5 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:);
    v21 = v12;
    v16 = v6;
    v17 = 1107296256;
    v18 = thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    v19 = &block_descriptor_12_0;
    v13 = _Block_copy(&v16);
    swift_retain();
    swift_release();
    RESyncDiscoveryViewObserverOnCreateProtocolLayer();
    _Block_release(v13);
    v14 = RESyncDiscoveryViewCreateWithObserver();
    swift_release();
    RESyncRelease();
    type metadata accessor for RESyncHandle();
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v14;
    *(_QWORD *)(v1 + 24) = v15;
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  swift_beginAccess();
  v2 = *(_QWORD *)(a1 + 16);
  if (!(v2 >> 62))
    return *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t closure #2 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = swift_beginAccess();
  v5 = *(_QWORD *)(a2 + 16);
  if ((v5 & 0xC000000000000001) == 0)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      v6 = *(_QWORD *)(v5 + 8 * a1 + 32);
      swift_retain();
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v6 = MEMORY[0x1DF0906F4](a1, v5);
  swift_bridgeObjectRelease();
LABEL_5:
  v7 = *(_QWORD *)(v6 + 24);
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(v7 + 16);
  result = swift_release();
  if (v8)
    return v8;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int) -> (@unowned OpaquePointer)(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  v4 = v3(a2);
  swift_release();
  return v4;
}

uint64_t closure #3 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)()
{
  return 1;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned RESyncAuthData)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v4 = swift_retain();
  LODWORD(v3) = v3(v4);
  v6 = v5;
  v8 = v7;
  result = swift_release();
  *(_DWORD *)a2 = (_DWORD)v3;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v8;
  return result;
}

void closure #4 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(35);
  v0._object = (void *)0x80000001D95DD510;
  v0._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafePointer<Int8>);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @unowned UnsafePointer<RESyncAuthData>) -> (@unowned OpaquePointer?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v6 = v5(a2, a3);
  swift_release();
  return v6;
}

uint64_t GroupActivitiesSynchronizationDiscoveryView.add(participant:isLocal:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v3 = v2;
  v6 = type metadata accessor for Participant();
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v10 + 16))(v9, a1, v7);
  type metadata accessor for GroupActivitiesSynchronizationIdentity();
  swift_allocObject();
  GroupActivitiesSynchronizationIdentity.init(participant:isLocal:)(v9, a2);
  v12 = v11;
  v13 = *(_QWORD *)(v3 + 16);
  swift_beginAccess();
  swift_retain();
  v14 = swift_retain();
  MEMORY[0x1DF0903A0](v14);
  if (*(_QWORD *)((*(_QWORD *)(v13 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v13 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  swift_release();
  if ((a2 & 1) != 0)
    return swift_release();
  swift_retain();
  GroupActivitiesSynchronizationProtocolLayer.add(participant:)(a1);
  swift_release();
  result = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16);
  if (result)
  {
    if (*(_QWORD *)(*(_QWORD *)(v12 + 24) + 16))
    {
      RESyncDiscoveryViewNotifyJoin();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t GroupActivitiesSynchronizationDiscoveryView.remove(participant:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[5];

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  swift_beginAccess();
  v5 = *(_QWORD *)(v4 + 16);
  v12[2] = a1;
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = specialized Collection.firstIndex(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in Array<A>.remove(with:), (uint64_t)v12, v5);
  v8 = v7;
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    swift_endAccess();
    return swift_release();
  }
  v9 = specialized Array.remove(at:)(v6);
  swift_endAccess();
  swift_release();
  v10 = *(_QWORD *)(v9 + 24);
  swift_retain();
  swift_release();
  result = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16);
  if (result)
  {
    if (*(_QWORD *)(v10 + 16))
    {
      RESyncDiscoveryViewNotifyLeave();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationDiscoveryView()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationDiscoveryView.State()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in Array<A>.remove(with:)(uint64_t a1)
{
  uint64_t v1;

  return MEMORY[0x1DF08F710](*(_QWORD *)(*(_QWORD *)a1 + 16)+ OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_participant, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t partial apply for closure #1 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)()
{
  uint64_t v0;

  return closure #1 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)(v0);
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t partial apply for closure #2 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)(unint64_t a1)
{
  uint64_t v1;

  return closure #2 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)(a1, v1);
}

uint64_t partial apply for closure #5 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 24) + 16);
  if (v1)
  {
    RESyncRetain();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x1DF090700);
}

uint64_t AccessibilityEvents.RotorNavigation.rotorType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AccessibilityComponent.RotorType(v1, a1);
}

uint64_t outlined init with copy of AccessibilityComponent.RotorType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessibilityComponent.RotorType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AccessibilityComponent.RotorType(uint64_t a1)
{
  return type metadata accessor for AccessibilityComponent.RotorType(a1, (uint64_t *)&type metadata singleton initialization cache for AccessibilityComponent.RotorType);
}

uint64_t AccessibilityEvents.RotorNavigation.hostEntity.getter()
{
  return AccessibilityEvents.RotorNavigation.hostEntity.getter((void (*)(_QWORD))type metadata accessor for AccessibilityEvents.RotorNavigation);
}

uint64_t type metadata accessor for AccessibilityEvents.RotorNavigation(uint64_t a1)
{
  return type metadata accessor for AccessibilityComponent.RotorType(a1, (uint64_t *)&type metadata singleton initialization cache for AccessibilityEvents.RotorNavigation);
}

uint64_t AccessibilityEvents.RotorNavigation.currentItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AccessibilityEvents.RotorNavigation(0);
  return outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v1 + *(int *)(v3 + 24), a1, &demangling cache variable for type metadata for Any?);
}

uint64_t AccessibilityEvents.RotorNavigation.searchDirection.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AccessibilityEvents.RotorNavigation(0) + 28));
}

uint64_t AccessibilityEvents.RotorNavigation.resultHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AccessibilityEvents.RotorNavigation(0) + 32));
  swift_retain();
  return v1;
}

uint64_t AccessibilityEvents.RotorNavigation.init(rotorType:hostEntity:currentItem:searchDirection:resultHandler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int *v13;
  uint64_t result;
  _QWORD *v15;

  outlined init with take of AccessibilityComponent.RotorType(a1, a7);
  v13 = (int *)type metadata accessor for AccessibilityEvents.RotorNavigation(0);
  *(_QWORD *)(a7 + v13[5]) = a2;
  result = outlined init with take of Any?(a3, a7 + v13[6]);
  *(_QWORD *)(a7 + v13[7]) = a4;
  v15 = (_QWORD *)(a7 + v13[8]);
  *v15 = a5;
  v15[1] = a6;
  return result;
}

uint64_t outlined init with take of AccessibilityComponent.RotorType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessibilityComponent.RotorType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AccessibilityEvents.Activate.entity.getter()
{
  return swift_retain();
}

uint64_t AccessibilityEvents.Activate.entity.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*AccessibilityEvents.Activate.entity.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t AccessibilityEvents.Activate.init(entity:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t (*AccessibilityEvents.Increment.entity.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t (*AccessibilityEvents.Decrement.entity.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t AccessibilityEvents.CustomAction.key.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for LocalizedStringResource();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AccessibilityEvents.CustomAction.key.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for LocalizedStringResource();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*AccessibilityEvents.CustomAction.key.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t AccessibilityEvents.CustomAction.entity.getter()
{
  return AccessibilityEvents.RotorNavigation.hostEntity.getter((void (*)(_QWORD))type metadata accessor for AccessibilityEvents.CustomAction);
}

uint64_t AccessibilityEvents.RotorNavigation.hostEntity.getter(void (*a1)(_QWORD))
{
  a1(0);
  return swift_retain();
}

uint64_t type metadata accessor for AccessibilityEvents.CustomAction(uint64_t a1)
{
  return type metadata accessor for AccessibilityComponent.RotorType(a1, (uint64_t *)&type metadata singleton initialization cache for AccessibilityEvents.CustomAction);
}

uint64_t type metadata accessor for AccessibilityComponent.RotorType(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AccessibilityEvents.CustomAction.entity.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AccessibilityEvents.CustomAction(0) + 20);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AccessibilityEvents.CustomAction.entity.modify())()
{
  type metadata accessor for AccessibilityEvents.CustomAction(0);
  return ARView.PostProcessContext.device.modify;
}

uint64_t AccessibilityEvents.CustomAction.init(key:entity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  result = type metadata accessor for AccessibilityEvents.CustomAction(0);
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t (*AccessibilityComponent.traits.modify(uint64_t *a1))()
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = AccessibilityComponent.traitsRawValue.getter();
  return AccessibilityComponent.traits.modify;
}

uint64_t AccessibilityComponent.traits.modify()
{
  return AccessibilityComponent.traitsRawValue.setter();
}

unint64_t AccessibilityComponent.customRotors.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *, char *, uint64_t);
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void (*v36)(_QWORD *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent.RotorType?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (uint64_t *)((char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for AccessibilityComponent.RotorType(0);
  v33 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v38 = (uint64_t)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v32 = (uint64_t)&v29 - v6;
  v7 = type metadata accessor for AccessibilityComponent.RotorTypeInternal();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v29 - v12;
  v14 = AccessibilityComponent.customRotorsRawValue.getter();
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v29 = v14;
  v17 = v14 + v16;
  v18 = *(_QWORD *)(v8 + 72);
  v35 = v8;
  v36 = *(void (**)(_QWORD *, char *, uint64_t))(v8 + 16);
  v37 = v18;
  v34 = *MEMORY[0x1E0CD4BA8];
  v30 = *MEMORY[0x1E0CD4BA0];
  v19 = MEMORY[0x1E0DEE9D8];
  v31 = v3;
  v20 = v33;
  do
  {
    v21 = v36;
    v36(v13, (char *)v17, v7);
    v21(v10, v13, v7);
    v22 = v35;
    v23 = (*(uint64_t (**)(_QWORD *, uint64_t))(v35 + 88))(v10, v7);
    if (v23 == v34)
    {
      (*(void (**)(_QWORD *, uint64_t))(v22 + 96))(v10, v7);
      *v2 = *v10;
LABEL_9:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v2, 0, 1, v3);
      goto LABEL_11;
    }
    if (v23 == v30)
    {
      (*(void (**)(_QWORD *, uint64_t))(v22 + 96))(v10, v7);
      v24 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v2, v10, v24);
      goto LABEL_9;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v2, 1, 1, v3);
    (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(v10, v7);
LABEL_11:
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v7);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v2, 1, v3) == 1)
    {
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v2, &demangling cache variable for type metadata for AccessibilityComponent.RotorType?);
    }
    else
    {
      v25 = v32;
      outlined init with take of AccessibilityComponent.RotorType((uint64_t)v2, v32);
      outlined init with take of AccessibilityComponent.RotorType(v25, v38);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
      v27 = *(_QWORD *)(v19 + 16);
      v26 = *(_QWORD *)(v19 + 24);
      if (v27 >= v26 >> 1)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v19);
      *(_QWORD *)(v19 + 16) = v27 + 1;
      v20 = v33;
      outlined init with take of AccessibilityComponent.RotorType(v38, v19+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v33 + 72) * v27);
      v3 = v31;
    }
    v17 += v37;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t AccessibilityComponent.customRotors.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v22[3];
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = type metadata accessor for AccessibilityComponent.RotorType(0);
  v3 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v5 = (_QWORD *)((char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v22 - v7;
  v25 = type metadata accessor for AccessibilityComponent.RotorTypeInternal();
  v9 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v11 = (_QWORD *)((char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v22[2] = v1;
    v28 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    v13 = *(unsigned __int8 *)(v3 + 80);
    v22[1] = a1;
    v14 = a1 + ((v13 + 32) & ~v13);
    v26 = *(_QWORD *)(v3 + 72);
    v24 = *MEMORY[0x1E0CD4BA8];
    v23 = *MEMORY[0x1E0CD4BA0];
    v15 = v25;
    do
    {
      outlined init with copy of AccessibilityComponent.RotorType(v14, (uint64_t)v8);
      outlined init with copy of AccessibilityComponent.RotorType((uint64_t)v8, (uint64_t)v5);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v16 = type metadata accessor for LocalizedStringResource();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v11, v5, v16);
        v17 = v23;
      }
      else
      {
        *v11 = *v5;
        v17 = v24;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 104))(v11, v17, v15);
      outlined destroy of AccessibilityComponent.RotorType((uint64_t)v8);
      v18 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v15 = v25;
        v18 = v28;
      }
      v20 = *(_QWORD *)(v18 + 16);
      v19 = *(_QWORD *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v15 = v25;
        v18 = v28;
      }
      *(_QWORD *)(v18 + 16) = v20 + 1;
      (*(void (**)(unint64_t, _QWORD *, uint64_t))(v9 + 32))(v18+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v20, v11, v15);
      v28 = v18;
      v14 += v26;
      --v12;
    }
    while (v12);
  }
  swift_bridgeObjectRelease();
  return AccessibilityComponent.customRotorsRawValue.setter();
}

uint64_t (*AccessibilityComponent.customRotors.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  unint64_t v1;

  a1[1] = v1;
  *a1 = AccessibilityComponent.customRotors.getter();
  return AccessibilityComponent.customRotors.modify;
}

uint64_t AccessibilityComponent.customRotors.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return AccessibilityComponent.customRotors.setter(*a1);
  v2 = swift_bridgeObjectRetain();
  AccessibilityComponent.customRotors.setter(v2);
  return swift_bridgeObjectRelease();
}

uint64_t Entity.accessibilityComponent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v16;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Entity.ComponentSet();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v16 - v10;
  dispatch thunk of Entity.components.getter();
  v12 = type metadata accessor for AccessibilityComponent();
  Entity.ComponentSet.subscript.getter();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v11, v5);
  v14 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v12) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a1, v4, v12);
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v4, &demangling cache variable for type metadata for AccessibilityComponent?);
  AccessibilityComponent.init()();
  dispatch thunk of Entity.components.getter();
  Entity.ComponentSet.set<A>(_:)();
  return ((uint64_t (*)(char *, uint64_t))v13)(v8, v5);
}

uint64_t Entity.accessibilityLabelKey.getter()
{
  return Entity.accessibilityLabelKey.getter((void (*)(uint64_t))MEMORY[0x1E0CD4BD0]);
}

uint64_t Entity.accessibilityLabelKey.setter(uint64_t a1)
{
  return Entity.accessibilityLabelKey.setter(a1, MEMORY[0x1E0CD4BD8]);
}

void (*Entity.accessibilityLabelKey.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  size_t v8;
  void (*v9)(void *, uint64_t);

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[8] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  v3[9] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v5 = type metadata accessor for AccessibilityComponent();
  v3[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[11] = v6;
  v7 = malloc(*(_QWORD *)(v6 + 64));
  v3[12] = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?)
                             - 8)
                 + 64);
  v3[13] = malloc(v8);
  v3[14] = malloc(v8);
  v3[15] = malloc(v8);
  Entity.accessibilityComponent.getter((uint64_t)v7);
  AccessibilityComponent.label.getter();
  v9 = *(void (**)(void *, uint64_t))(v6 + 8);
  v3[16] = v9;
  v9(v7, v5);
  return Entity.accessibilityLabelKey.modify;
}

void Entity.accessibilityLabelKey.modify(uint64_t a1, char a2)
{
  Entity.accessibilityLabelKey.modify(a1, a2, MEMORY[0x1E0CD4BD8]);
}

uint64_t Entity.accessibilityValue.getter()
{
  return Entity.accessibilityLabelKey.getter((void (*)(uint64_t))MEMORY[0x1E0CD4BE0]);
}

uint64_t key path setter for Entity.accessibilityLabelKey : Entity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, (uint64_t)v9, &demangling cache variable for type metadata for LocalizedStringResource?);
  return a5(v9);
}

uint64_t Entity.accessibilityValue.setter(uint64_t a1)
{
  return Entity.accessibilityLabelKey.setter(a1, MEMORY[0x1E0CD4BE8]);
}

uint64_t Entity.accessibilityLabelKey.setter(uint64_t a1, void (*a2)(_BYTE *))
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void (*v14)(_BYTE *, _QWORD);
  _BYTE v16[32];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for AccessibilityComponent();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x1E0C80A78](v11);
  v13 = &v16[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, (uint64_t)v13, &demangling cache variable for type metadata for LocalizedStringResource?);
  Entity.accessibilityComponent.getter((uint64_t)v10);
  a2(v13);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v6, v10, v7);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  v14 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v14(v16, 0);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  return outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, &demangling cache variable for type metadata for LocalizedStringResource?);
}

void (*Entity.accessibilityValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  size_t v8;
  void (*v9)(void *, uint64_t);

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[8] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  v3[9] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v5 = type metadata accessor for AccessibilityComponent();
  v3[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[11] = v6;
  v7 = malloc(*(_QWORD *)(v6 + 64));
  v3[12] = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?)
                             - 8)
                 + 64);
  v3[13] = malloc(v8);
  v3[14] = malloc(v8);
  v3[15] = malloc(v8);
  Entity.accessibilityComponent.getter((uint64_t)v7);
  AccessibilityComponent.value.getter();
  v9 = *(void (**)(void *, uint64_t))(v6 + 8);
  v3[16] = v9;
  v9(v7, v5);
  return Entity.accessibilityValue.modify;
}

void Entity.accessibilityValue.modify(uint64_t a1, char a2)
{
  Entity.accessibilityLabelKey.modify(a1, a2, MEMORY[0x1E0CD4BE8]);
}

void Entity.accessibilityLabelKey.modify(uint64_t a1, char a2, void (*a3)(uint64_t))
{
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void (*v12)(_QWORD *, _QWORD);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *, _QWORD);
  void (*v16)(void *, uint64_t);
  void (*v17)(void *, uint64_t);
  void *v18;
  void *v19;

  v5 = *(_QWORD **)a1;
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(*(_QWORD *)(*(_QWORD *)a1 + 120), *(_QWORD *)(*(_QWORD *)a1 + 112), &demangling cache variable for type metadata for LocalizedStringResource?);
  if ((a2 & 1) != 0)
  {
    v16 = (void (*)(void *, uint64_t))v5[16];
    v6 = (void *)v5[14];
    v19 = (void *)v5[15];
    v7 = (void *)v5[12];
    v8 = v5[13];
    v10 = v5[10];
    v9 = v5[11];
    v11 = (void *)v5[9];
    outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v6, v8, &demangling cache variable for type metadata for LocalizedStringResource?);
    Entity.accessibilityComponent.getter((uint64_t)v7);
    v18 = (void *)v8;
    a3(v8);
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v11, v7, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v10);
    v12 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v12(v5, 0);
    v16(v7, v10);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v6, &demangling cache variable for type metadata for LocalizedStringResource?);
  }
  else
  {
    v6 = (void *)v5[14];
    v19 = (void *)v5[15];
    v7 = (void *)v5[12];
    v17 = (void (*)(void *, uint64_t))v5[16];
    v18 = (void *)v5[13];
    v14 = v5[10];
    v13 = v5[11];
    v11 = (void *)v5[9];
    Entity.accessibilityComponent.getter((uint64_t)v7);
    a3((uint64_t)v6);
    (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v11, v7, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v14);
    v15 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v15(v5 + 4, 0);
    v17(v7, v14);
  }
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v19, &demangling cache variable for type metadata for LocalizedStringResource?);
  free(v19);
  free(v6);
  free(v18);
  free(v7);
  free(v11);
  free(v5);
}

uint64_t Entity.accessibilityTraits.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for AccessibilityComponent();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Entity.accessibilityComponent.getter((uint64_t)v3);
  v4 = AccessibilityComponent.traitsRawValue.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t key path getter for Entity.accessibilityTraits : Entity@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = type metadata accessor for AccessibilityComponent();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Entity.accessibilityComponent.getter((uint64_t)v5);
  v6 = AccessibilityComponent.traitsRawValue.getter();
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  return result;
}

uint64_t key path setter for Entity.accessibilityTraits : Entity()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  void (*v7)(_BYTE *, _QWORD);
  _BYTE v9[32];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  MEMORY[0x1E0C80A78](v0);
  v2 = &v9[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for AccessibilityComponent();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Entity.accessibilityComponent.getter((uint64_t)v6);
  AccessibilityComponent.traitsRawValue.setter();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v2, v6, v3);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  v7 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v7(v9, 0);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t Entity.accessibilityTraits.setter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  void (*v7)(_BYTE *, _QWORD);
  _BYTE v9[32];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  MEMORY[0x1E0C80A78](v0);
  v2 = &v9[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for AccessibilityComponent();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Entity.accessibilityComponent.getter((uint64_t)v6);
  AccessibilityComponent.traitsRawValue.setter();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v2, v6, v3);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  v7 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v7(v9, 0);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

void (*Entity.accessibilityTraits.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);

  v3 = malloc(0x78uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  v3[10] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v5 = type metadata accessor for AccessibilityComponent();
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[12] = v6;
  v7 = malloc(*(_QWORD *)(v6 + 64));
  v3[13] = v7;
  Entity.accessibilityComponent.getter((uint64_t)v7);
  v8 = AccessibilityComponent.traitsRawValue.getter();
  v9 = *(void (**)(void *, uint64_t))(v6 + 8);
  v3[14] = v9;
  v9(v7, v5);
  v3[8] = v8;
  return Entity.accessibilityTraits.modify;
}

void Entity.accessibilityTraits.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void (*v9)(void *, uint64_t);
  void *v10;
  uint64_t v11;
  void (*v12)(_QWORD *, _QWORD);
  void (*v13)(void *, uint64_t);
  uint64_t v14;
  void (*v15)(_QWORD *, _QWORD);

  v3 = *(_QWORD **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  Entity.accessibilityComponent.getter(v4);
  AccessibilityComponent.traitsRawValue.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, v4, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v6);
  if ((a2 & 1) != 0)
  {
    v8 = (void *)v3[13];
    v9 = (void (*)(void *, uint64_t))v3[14];
    v10 = (void *)v3[10];
    v11 = v3[11];
    v12 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v12(v3, 0);
    v9(v8, v11);
  }
  else
  {
    v8 = (void *)v3[13];
    v13 = (void (*)(void *, uint64_t))v3[14];
    v10 = (void *)v3[10];
    v14 = v3[11];
    v15 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v15(v3 + 4, 0);
    v13(v8, v14);
  }
  free(v8);
  free(v10);
  free(v3);
}

uint64_t Entity.accessibilityCustomContent.getter()
{
  return Entity.accessibilityCustomContent.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0CD4B58]);
}

uint64_t Entity.accessibilityCustomContent.setter(uint64_t a1)
{
  return Entity.accessibilityCustomContent.setter(a1, MEMORY[0x1E0CD4B60]);
}

void (*Entity.accessibilityCustomContent.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);

  v3 = malloc(0x78uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  v3[10] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v5 = type metadata accessor for AccessibilityComponent();
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[12] = v6;
  v7 = malloc(*(_QWORD *)(v6 + 64));
  v3[13] = v7;
  Entity.accessibilityComponent.getter((uint64_t)v7);
  v8 = AccessibilityComponent.customContent.getter();
  v9 = *(void (**)(void *, uint64_t))(v6 + 8);
  v3[14] = v9;
  v9(v7, v5);
  v3[8] = v8;
  return Entity.accessibilityCustomContent.modify;
}

void Entity.accessibilityCustomContent.modify(uint64_t a1, char a2)
{
  Entity.accessibilityCustomContent.modify(a1, a2, MEMORY[0x1E0CD4B60]);
}

uint64_t Entity.accessibilityCustomRotors.getter()
{
  return Entity.accessibilityCustomContent.getter((uint64_t (*)(uint64_t))AccessibilityComponent.customRotors.getter);
}

uint64_t Entity.accessibilityCustomRotors.setter(uint64_t a1)
{
  return Entity.accessibilityCustomContent.setter(a1, (void (*)(uint64_t))AccessibilityComponent.customRotors.setter);
}

void (*Entity.accessibilityCustomRotors.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  void (*v9)(void *, uint64_t);

  v3 = malloc(0x78uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  v3[10] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v5 = type metadata accessor for AccessibilityComponent();
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[12] = v6;
  v7 = malloc(*(_QWORD *)(v6 + 64));
  v3[13] = v7;
  Entity.accessibilityComponent.getter((uint64_t)v7);
  v8 = AccessibilityComponent.customRotors.getter();
  v9 = *(void (**)(void *, uint64_t))(v6 + 8);
  v3[14] = v9;
  v9(v7, v5);
  v3[8] = v8;
  return Entity.accessibilityCustomRotors.modify;
}

void Entity.accessibilityCustomRotors.modify(uint64_t a1, char a2)
{
  Entity.accessibilityCustomContent.modify(a1, a2, (void (*)(uint64_t))AccessibilityComponent.customRotors.setter);
}

uint64_t Entity.accessibilitySystemActions.getter()
{
  return Entity.accessibilityLabelKey.getter((void (*)(uint64_t))MEMORY[0x1E0CD4B68]);
}

uint64_t Entity.accessibilityLabelKey.getter(void (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for AccessibilityComponent();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = Entity.accessibilityComponent.getter((uint64_t)v5);
  a1(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t key path getter for Entity.accessibilityLabelKey : Entity(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = type metadata accessor for AccessibilityComponent();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = Entity.accessibilityComponent.getter((uint64_t)v8);
  a4(v9);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t key path setter for Entity.accessibilitySystemActions : Entity(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for AccessibilityComponent.SupportedActions();
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  return Entity.accessibilitySystemActions.setter((uint64_t)v5);
}

uint64_t Entity.accessibilitySystemActions.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  void (*v13)(_BYTE *, _QWORD);
  _BYTE v15[32];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  MEMORY[0x1E0C80A78](v2);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for AccessibilityComponent();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for AccessibilityComponent.SupportedActions();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v10 + 16))(&v15[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v9, v11);
  Entity.accessibilityComponent.getter((uint64_t)v8);
  AccessibilityComponent.systemActions.setter();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v4, v8, v5);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  v13 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v13(v15, 0);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
}

void (*Entity.accessibilitySystemActions.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void (*v11)(void *, uint64_t);

  v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[8] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  v3[9] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v5 = type metadata accessor for AccessibilityComponent();
  v3[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[11] = v6;
  v7 = malloc(*(_QWORD *)(v6 + 64));
  v3[12] = v7;
  v8 = type metadata accessor for AccessibilityComponent.SupportedActions();
  v3[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[14] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v3[15] = malloc(v10);
  v3[16] = malloc(v10);
  v3[17] = malloc(v10);
  Entity.accessibilityComponent.getter((uint64_t)v7);
  AccessibilityComponent.systemActions.getter();
  v11 = *(void (**)(void *, uint64_t))(v6 + 8);
  v3[18] = v11;
  v11(v7, v5);
  return Entity.accessibilitySystemActions.modify;
}

void Entity.accessibilitySystemActions.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(void *, void *, uint64_t);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void (*v13)(void *, _QWORD, uint64_t, uint64_t);
  void *v14;
  void (*v15)(_QWORD *, _QWORD);
  void (*v16)(void *, uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void *, _QWORD, uint64_t, uint64_t);
  void (*v21)(_QWORD *, _QWORD);
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void *, uint64_t);
  void (*v27)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(void *, void *, uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 112) + 16);
  v4(*(void **)(*(_QWORD *)a1 + 128), (void *)v3[17], v3[13]);
  if ((a2 & 1) != 0)
  {
    v5 = (void *)v3[16];
    v22 = (void *)v3[17];
    v6 = (void *)v3[15];
    v24 = v3[14];
    v26 = (void (*)(void *, uint64_t))v3[18];
    v7 = (void *)v3[12];
    v8 = v3[13];
    v10 = v3[10];
    v9 = v3[11];
    v11 = (void *)v3[9];
    v4(v6, v5, v8);
    v12 = v6;
    Entity.accessibilityComponent.getter((uint64_t)v7);
    AccessibilityComponent.systemActions.setter();
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v11, v7, v10);
    v13 = *(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56);
    v14 = v22;
    v13(v11, 0, 1, v10);
    v15 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v15(v3, 0);
    v26(v7, v10);
    v16 = *(void (**)(void *, uint64_t))(v24 + 8);
    v16(v5, v8);
    v16(v22, v8);
  }
  else
  {
    v14 = (void *)v3[17];
    v17 = (void *)v3[15];
    v5 = (void *)v3[16];
    v23 = v3[14];
    v7 = (void *)v3[12];
    v25 = v3[13];
    v27 = (void (*)(void *, uint64_t))v3[18];
    v19 = v3[10];
    v18 = v3[11];
    v11 = (void *)v3[9];
    Entity.accessibilityComponent.getter((uint64_t)v7);
    AccessibilityComponent.systemActions.setter();
    (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v11, v7, v19);
    v20 = *(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56);
    v12 = v17;
    v20(v11, 0, 1, v19);
    v21 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v21(v3 + 4, 0);
    v27(v7, v19);
    (*(void (**)(void *, uint64_t))(v23 + 8))(v14, v25);
  }
  free(v14);
  free(v5);
  free(v12);
  free(v7);
  free(v11);
  free(v3);
}

uint64_t Entity.accessibilityCustomActions.getter()
{
  return Entity.accessibilityCustomContent.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0CD4B48]);
}

uint64_t Entity.accessibilityCustomContent.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = type metadata accessor for AccessibilityComponent();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = Entity.accessibilityComponent.getter((uint64_t)v5);
  v7 = a1(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

uint64_t key path getter for Entity.accessibilityCustomContent : Entity@<X0>(uint64_t (*a1)(uint64_t)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v4 = type metadata accessor for AccessibilityComponent();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = Entity.accessibilityComponent.getter((uint64_t)v7);
  v9 = a1(v8);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a2 = v9;
  return result;
}

uint64_t key path setter for Entity.accessibilityCustomContent : Entity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  void (*v15)(_BYTE *, _QWORD);
  _BYTE v17[32];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  MEMORY[0x1E0C80A78](v7);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for AccessibilityComponent();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = &v17[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *a1;
  swift_bridgeObjectRetain();
  Entity.accessibilityComponent.getter((uint64_t)v13);
  a5(v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v9, v13, v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  v15 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v15(v17, 0);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t Entity.accessibilityCustomActions.setter(uint64_t a1)
{
  return Entity.accessibilityCustomContent.setter(a1, MEMORY[0x1E0CD4B50]);
}

uint64_t Entity.accessibilityCustomContent.setter(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  void (*v11)(_BYTE *, _QWORD);
  _BYTE v13[32];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for AccessibilityComponent();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Entity.accessibilityComponent.getter((uint64_t)v10);
  a2(a1);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v6, v10, v7);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  v11 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v11(v13, 0);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
}

void (*Entity.accessibilityCustomActions.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);

  v3 = malloc(0x78uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  v3[10] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v5 = type metadata accessor for AccessibilityComponent();
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[12] = v6;
  v7 = malloc(*(_QWORD *)(v6 + 64));
  v3[13] = v7;
  Entity.accessibilityComponent.getter((uint64_t)v7);
  v8 = AccessibilityComponent.customActions.getter();
  v9 = *(void (**)(void *, uint64_t))(v6 + 8);
  v3[14] = v9;
  v9(v7, v5);
  v3[8] = v8;
  return Entity.accessibilityCustomActions.modify;
}

void Entity.accessibilityCustomActions.modify(uint64_t a1, char a2)
{
  Entity.accessibilityCustomContent.modify(a1, a2, MEMORY[0x1E0CD4B50]);
}

void Entity.accessibilityCustomContent.modify(uint64_t a1, char a2, void (*a3)(uint64_t))
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void (*v7)(void *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void (*v11)(_QWORD *, _QWORD);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *, _QWORD);
  void (*v15)(void *, uint64_t);

  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if ((a2 & 1) != 0)
  {
    v6 = (void *)v4[13];
    v7 = (void (*)(void *, uint64_t))v4[14];
    v8 = v4[11];
    v9 = v4[12];
    v10 = (void *)v4[10];
    swift_bridgeObjectRetain();
    Entity.accessibilityComponent.getter((uint64_t)v6);
    a3(v5);
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v10, v6, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v10, 0, 1, v8);
    v11 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v11(v4, 0);
    v7(v6, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = (void *)v4[13];
    v15 = (void (*)(void *, uint64_t))v4[14];
    v12 = v4[11];
    v13 = v4[12];
    v10 = (void *)v4[10];
    Entity.accessibilityComponent.getter((uint64_t)v6);
    a3(v5);
    (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v6, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    v14 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v14(v4 + 4, 0);
    v15(v6, v12);
  }
  free(v6);
  free(v10);
  free(v4);
}

uint64_t AccessibilityComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v25[2];

  v25[1] = a1;
  v25[0] = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v25[0] - 8);
  MEMORY[0x1E0C80A78](v25[0]);
  v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccessibilityComponent();
  v9 = MEMORY[0x1E0C80A78](v8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))((char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v8, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1D95E3660;
  *(_QWORD *)(v12 + 32) = 0xD000000000000016;
  *(_QWORD *)(v12 + 40) = 0x80000001D95DD540;
  v13 = AccessibilityComponent.isAccessibilityElement.getter();
  v14 = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(v12 + 48) = v13 & 1;
  *(_QWORD *)(v12 + 72) = v14;
  *(_QWORD *)(v12 + 80) = 0x6C6562616CLL;
  *(_QWORD *)(v12 + 88) = 0xE500000000000000;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  *(_QWORD *)(v12 + 120) = v15;
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v12 + 96));
  AccessibilityComponent.label.getter();
  *(_QWORD *)(v12 + 128) = 0x65756C6176;
  *(_QWORD *)(v12 + 136) = 0xE500000000000000;
  *(_QWORD *)(v12 + 168) = v15;
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v12 + 144));
  AccessibilityComponent.value.getter();
  *(_QWORD *)(v12 + 176) = 0x737469617274;
  *(_QWORD *)(v12 + 184) = 0xE600000000000000;
  v16 = AccessibilityComponent.traitsRawValue.getter();
  type metadata accessor for UIAccessibilityTraits(0);
  *(_QWORD *)(v12 + 192) = v16;
  *(_QWORD *)(v12 + 216) = v17;
  strcpy((char *)(v12 + 224), "systemActions");
  *(_WORD *)(v12 + 238) = -4864;
  *(_QWORD *)(v12 + 264) = type metadata accessor for AccessibilityComponent.SupportedActions();
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v12 + 240));
  AccessibilityComponent.systemActions.getter();
  strcpy((char *)(v12 + 272), "customActions");
  *(_WORD *)(v12 + 286) = -4864;
  v18 = AccessibilityComponent.customActions.getter();
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LocalizedStringResource]);
  *(_QWORD *)(v12 + 288) = v18;
  *(_QWORD *)(v12 + 312) = v19;
  strcpy((char *)(v12 + 320), "customContent");
  *(_WORD *)(v12 + 334) = -4864;
  v20 = AccessibilityComponent.customContent.getter();
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AccessibilityComponent.CustomContent]);
  *(_QWORD *)(v12 + 336) = v20;
  *(_QWORD *)(v12 + 360) = v21;
  strcpy((char *)(v12 + 368), "customRotors");
  *(_BYTE *)(v12 + 381) = 0;
  *(_WORD *)(v12 + 382) = -5120;
  v22 = AccessibilityComponent.customRotors.getter();
  *(_QWORD *)(v12 + 408) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AccessibilityComponent.RotorType]);
  *(_QWORD *)(v12 + 384) = v22;
  v23 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v7, 1, 1, v23);
  (*(void (**)(char *, _QWORD, _QWORD))(v2 + 104))(v4, *MEMORY[0x1E0DEDFE8], v25[0]);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AccessibilityComponent.RotorTypeInternal>);
  v10 = *(_QWORD *)(type metadata accessor for AccessibilityComponent.RotorTypeInternal() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for AccessibilityComponent.RotorTypeInternal() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Material);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UUID, ARAnchor)>);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID, ARAnchor))
                  - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID, ARAnchor))
                  - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static AccessibilityComponent.RotorType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v4 = type metadata accessor for LocalizedStringResource();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccessibilityComponent.RotorType(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (uint64_t *)((char *)&v22 - v12);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AccessibilityComponent.RotorType, AccessibilityComponent.RotorType));
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = &v16[*(int *)(v17 + 48)];
  outlined init with copy of AccessibilityComponent.RotorType(a1, (uint64_t)v16);
  outlined init with copy of AccessibilityComponent.RotorType(a2, (uint64_t)v18);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of AccessibilityComponent.RotorType((uint64_t)v16, (uint64_t)v13);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v19 = *v13 == *(_QWORD *)v18;
      goto LABEL_6;
    }
LABEL_8:
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v16, &demangling cache variable for type metadata for (AccessibilityComponent.RotorType, AccessibilityComponent.RotorType));
    v19 = 0;
    return v19 & 1;
  }
  outlined init with copy of AccessibilityComponent.RotorType((uint64_t)v16, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v18, v4);
  v19 = MEMORY[0x1DF08E81C](v10, v7);
  v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v7, v4);
  v20(v10, v4);
LABEL_6:
  outlined destroy of AccessibilityComponent.RotorType((uint64_t)v16);
  return v19 & 1;
}

uint64_t outlined destroy of AccessibilityComponent.RotorType(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AccessibilityComponent.RotorType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_UNKNOWN **base witness table accessor for Event in AccessibilityEvents.Activate()
{
  return &protocol witness table for AccessibilityEvents.Activate;
}

_UNKNOWN **base witness table accessor for Event in AccessibilityEvents.Increment()
{
  return &protocol witness table for AccessibilityEvents.Increment;
}

_UNKNOWN **base witness table accessor for Event in AccessibilityEvents.Decrement()
{
  return &protocol witness table for AccessibilityEvents.Decrement;
}

_UNKNOWN **base witness table accessor for Event in AccessibilityEvents.CustomAction()
{
  return &protocol witness table for AccessibilityEvents.CustomAction;
}

_UNKNOWN **base witness table accessor for Event in AccessibilityEvents.RotorNavigation()
{
  return &protocol witness table for AccessibilityEvents.RotorNavigation;
}

uint64_t sub_1D9598418@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = AccessibilityComponent.traitsRawValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1D9598440()
{
  return AccessibilityComponent.traitsRawValue.setter();
}

unint64_t sub_1D9598464@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = AccessibilityComponent.customRotors.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1D959848C()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return AccessibilityComponent.customRotors.setter(v0);
}

uint64_t sub_1D95984B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Entity.accessibilityLabelKey : Entity(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x1E0CD4BD0]);
}

uint64_t sub_1D95984D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Entity.accessibilityLabelKey : Entity(a1, a2, a3, a4, (uint64_t (*)(char *))Entity.accessibilityLabelKey.setter);
}

uint64_t sub_1D95984EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Entity.accessibilityLabelKey : Entity(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x1E0CD4BE0]);
}

uint64_t sub_1D9598508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Entity.accessibilityLabelKey : Entity(a1, a2, a3, a4, (uint64_t (*)(char *))Entity.accessibilityValue.setter);
}

uint64_t sub_1D959852C@<X0>(uint64_t *a1@<X8>)
{
  return key path getter for Entity.accessibilityCustomContent : Entity((uint64_t (*)(uint64_t))MEMORY[0x1E0CD4B58], a1);
}

uint64_t sub_1D9598548(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Entity.accessibilityCustomContent : Entity(a1, a2, a3, a4, MEMORY[0x1E0CD4B60]);
}

uint64_t sub_1D9598564@<X0>(uint64_t *a1@<X8>)
{
  return key path getter for Entity.accessibilityCustomContent : Entity((uint64_t (*)(uint64_t))AccessibilityComponent.customRotors.getter, a1);
}

uint64_t sub_1D9598580(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Entity.accessibilityCustomContent : Entity(a1, a2, a3, a4, (void (*)(uint64_t))AccessibilityComponent.customRotors.setter);
}

uint64_t sub_1D959859C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Entity.accessibilityLabelKey : Entity(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x1E0CD4B68]);
}

uint64_t sub_1D95985BC@<X0>(uint64_t *a1@<X8>)
{
  return key path getter for Entity.accessibilityCustomContent : Entity((uint64_t (*)(uint64_t))MEMORY[0x1E0CD4B48], a1);
}

uint64_t sub_1D95985D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Entity.accessibilityCustomContent : Entity(a1, a2, a3, a4, MEMORY[0x1E0CD4B50]);
}

ValueMetadata *type metadata accessor for AccessibilityEvents()
{
  return &type metadata for AccessibilityEvents;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityEvents.RotorNavigation(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for AccessibilityComponent.RotorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v10 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v11 = (char *)a1 + v10;
    v12 = (_OWORD *)((char *)a2 + v10);
    v13 = *(uint64_t *)((char *)a2 + v10 + 24);
    swift_retain();
    if (v13)
    {
      *((_QWORD *)v11 + 3) = v13;
      (**(void (***)(char *, _OWORD *, uint64_t))(v13 - 8))(v11, v12, v13);
    }
    else
    {
      v14 = v12[1];
      *(_OWORD *)v11 = *v12;
      *((_OWORD *)v11 + 1) = v14;
    }
    v15 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AccessibilityEvents.RotorNavigation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for AccessibilityComponent.RotorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  swift_release();
  v5 = a1 + *(int *)(a2 + 24);
  if (*(_QWORD *)(v5 + 24))
    __swift_destroy_boxed_opaque_existential_1(v5);
  return swift_release();
}

char *initializeWithCopy for AccessibilityEvents.RotorNavigation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for AccessibilityComponent.RotorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a2[v8 + 24];
  swift_retain();
  if (v11)
  {
    *((_QWORD *)v9 + 3) = v11;
    (**(void (***)(char *, char *, uint64_t))(v11 - 8))(v9, v10, v11);
  }
  else
  {
    v12 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v12;
  }
  v13 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  swift_retain();
  return a1;
}

char *assignWithCopy for AccessibilityEvents.RotorNavigation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  if (a1 != a2)
  {
    outlined destroy of AccessibilityComponent.RotorType((uint64_t)a1);
    v6 = type metadata accessor for AccessibilityComponent.RotorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  swift_retain();
  swift_release();
  v8 = a3[6];
  v9 = (uint64_t)&a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a2[v8 + 24];
  if (!*(_QWORD *)&a1[v8 + 24])
  {
    if (v11)
    {
      *(_QWORD *)(v9 + 24) = v11;
      (**(void (***)(uint64_t, char *))(v11 - 8))(v9, v10);
      goto LABEL_12;
    }
LABEL_11:
    v12 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 16) = v12;
    goto LABEL_12;
  }
  if (!v11)
  {
    __swift_destroy_boxed_opaque_existential_1(v9);
    goto LABEL_11;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v9, (uint64_t *)v10);
LABEL_12:
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v13 = a3[8];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

char *initializeWithTake for AccessibilityEvents.RotorNavigation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;

  v6 = type metadata accessor for AccessibilityComponent.RotorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  v12 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  return a1;
}

char *assignWithTake for AccessibilityEvents.RotorNavigation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of AccessibilityComponent.RotorType((uint64_t)a1);
    v6 = type metadata accessor for AccessibilityComponent.RotorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  swift_release();
  v8 = a3[6];
  v9 = &a1[v8];
  if (*(_QWORD *)&a1[v8 + 24])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a1[v8]);
  v10 = *(_OWORD *)&a2[v8 + 16];
  *(_OWORD *)v9 = *(_OWORD *)&a2[v8];
  *((_OWORD *)v9 + 1) = v10;
  v11 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityEvents.RotorNavigation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D9598D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for AccessibilityComponent.RotorType);
}

uint64_t storeEnumTagSinglePayload for AccessibilityEvents.RotorNavigation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D9598D6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for AccessibilityComponent.RotorType);
}

uint64_t type metadata completion function for AccessibilityEvents.RotorNavigation()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AccessibilityComponent.RotorType(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityEvents.Activate()
{
  return &type metadata for AccessibilityEvents.Activate;
}

ValueMetadata *type metadata accessor for AccessibilityEvents.Increment()
{
  return &type metadata for AccessibilityEvents.Increment;
}

ValueMetadata *type metadata accessor for AccessibilityEvents.Decrement()
{
  return &type metadata for AccessibilityEvents.Decrement;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityEvents.CustomAction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AccessibilityEvents.CustomAction(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityEvents.CustomAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityEvents.CustomAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AccessibilityEvents.CustomAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for AccessibilityEvents.CustomAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityEvents.CustomAction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D95990A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CAF9F8]);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v7 = a4(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, a2, v7);
  v10 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityEvents.CustomAction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D959913C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CAF9F8]);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v10;

  result = a5(0);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for AccessibilityEvents.CustomAction()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for LocalizedStringResource();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityComponent.RotorType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for AccessibilityComponent.RotorType(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = type metadata accessor for LocalizedStringResource();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for AccessibilityComponent.RotorType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithCopy for AccessibilityComponent.RotorType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of AccessibilityComponent.RotorType((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *initializeWithTake for AccessibilityComponent.RotorType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for AccessibilityComponent.RotorType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of AccessibilityComponent.RotorType((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityComponent.RotorType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AccessibilityComponent.RotorType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for AccessibilityComponent.RotorType()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for AccessibilityComponent.RotorType()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for LocalizedStringResource();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

id HoverEffectComponent.SpotlightHoverEffectStyle.color.getter()
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.color.getter(MEMORY[0x1E0CD4A10]);
}

void HoverEffectComponent.SpotlightHoverEffectStyle.color.setter(void *a1)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.setter(a1, MEMORY[0x1E0CD4A18]);
}

void (*HoverEffectComponent.SpotlightHoverEffectStyle.color.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  void *v3;
  id v4;

  a1[1] = v1;
  v3 = (void *)HoverEffectComponent.HighlightHoverEffectStyle._color.getter();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return HoverEffectComponent.SpotlightHoverEffectStyle.color.modify;
}

void HoverEffectComponent.SpotlightHoverEffectStyle.color.modify(void **a1, char a2)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.modify(a1, a2, MEMORY[0x1E0CD4A18]);
}

uint64_t HoverEffectComponent.SpotlightHoverEffectStyle.init(color:strength:opacityFunction:)(void *a1, uint64_t a2, float a3)
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.init(color:strength:opacityFunction:)(a1, a2, MEMORY[0x1E0CD4A08], a3);
}

void HoverEffectComponent.SpotlightHoverEffectStyle.init(color:strength:)(void *a1, float a2)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.init(color:strength:)(a1, MEMORY[0x1E0CD4A08], a2);
}

id HoverEffectComponent.HighlightHoverEffectStyle.color.getter()
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.color.getter(MEMORY[0x1E0CD49E0]);
}

id HoverEffectComponent.SpotlightHoverEffectStyle.color.getter(uint64_t (*a1)(void))
{
  void *v1;
  id v2;

  v1 = (void *)a1();
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v1);

  return v2;
}

void key path getter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(uint64_t (*a1)(void)@<X3>, _QWORD *a2@<X8>)
{
  void *v3;
  id v4;

  v3 = (void *)a1();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v3);

  *a2 = v4;
}

void key path setter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(id))
{
  id v6;

  v6 = *a1;
  a5(objc_msgSend(v6, sel_CGColor));

}

void HoverEffectComponent.HighlightHoverEffectStyle.color.setter(void *a1)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.setter(a1, MEMORY[0x1E0CD49E8]);
}

void HoverEffectComponent.SpotlightHoverEffectStyle.color.setter(void *a1, void (*a2)(id))
{
  a2(objc_msgSend(a1, sel_CGColor));

}

void (*HoverEffectComponent.HighlightHoverEffectStyle.color.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  void *v3;
  id v4;

  a1[1] = v1;
  v3 = (void *)HoverEffectComponent.HighlightHoverEffectStyle._color.getter();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return HoverEffectComponent.HighlightHoverEffectStyle.color.modify;
}

void HoverEffectComponent.HighlightHoverEffectStyle.color.modify(void **a1, char a2)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.modify(a1, a2, MEMORY[0x1E0CD49E8]);
}

void HoverEffectComponent.SpotlightHoverEffectStyle.color.modify(void **a1, char a2, void (*a3)(id))
{
  void *v4;
  id v5;
  id v6;

  v4 = *a1;
  v6 = *a1;
  if ((a2 & 1) != 0)
  {
    v5 = v4;
    a3(objc_msgSend(v5, sel_CGColor));

  }
  else
  {
    a3(objc_msgSend(v4, sel_CGColor));
  }

}

uint64_t HoverEffectComponent.HighlightHoverEffectStyle.init(color:strength:opacityFunction:)(void *a1, uint64_t a2, float a3)
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.init(color:strength:opacityFunction:)(a1, a2, MEMORY[0x1E0CD49D8], a3);
}

uint64_t HoverEffectComponent.SpotlightHoverEffectStyle.init(color:strength:opacityFunction:)(void *a1, uint64_t a2, void (*a3)(id, char *, float), float a4)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v15;

  v8 = type metadata accessor for HoverEffectComponent.OpacityFunction();
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)&v10 = MEMORY[0x1E0C80A78](v8).n128_u64[0];
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
    v13 = objc_msgSend(a1, sel_CGColor, v10);
  else
    v13 = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  a3(v13, v12, a4);

  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
}

void HoverEffectComponent.HighlightHoverEffectStyle.init(color:strength:)(void *a1, float a2)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.init(color:strength:)(a1, MEMORY[0x1E0CD49D8], a2);
}

void HoverEffectComponent.SpotlightHoverEffectStyle.init(color:strength:)(void *a1, void (*a2)(id, char *, float), float a3)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;

  v6 = type metadata accessor for HoverEffectComponent.OpacityFunction();
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v8 = MEMORY[0x1E0C80A78](v6).n128_u64[0];
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
    v11 = objc_msgSend(a1, sel_CGColor, v8);
  else
    v11 = 0;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E0CD4A40], v6);
  a2(v11, v10, a3);

}

uint64_t HoverEffectComponent.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for HoverEffectComponent();
  v9 = MEMORY[0x1E0C80A78](v8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v0, v8, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1D95E24F0;
  *(_QWORD *)(v12 + 32) = 0x6666457265766F68;
  *(_QWORD *)(v12 + 40) = 0xEB00000000746365;
  *(_QWORD *)(v12 + 72) = type metadata accessor for HoverEffectComponent.HoverEffect();
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v12 + 48));
  HoverEffectComponent.hoverEffect.getter();
  v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v7, 1, 1, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEDFE8], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance HoverEffectComponent(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v10);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))((char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1, v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1D95E24F0;
  *(_QWORD *)(v14 + 32) = 0x6666457265766F68;
  *(_QWORD *)(v14 + 40) = 0xEB00000000746365;
  *(_QWORD *)(v14 + 72) = type metadata accessor for HoverEffectComponent.HoverEffect();
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v14 + 48));
  HoverEffectComponent.hoverEffect.getter();
  v15 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v9, 1, 1, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEDFE8], v3);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t HoverEffectComponent.SpotlightHoverEffectStyle.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.customMirror.getter(MEMORY[0x1E0CD4A28], MEMORY[0x1E0CD4A10], MEMORY[0x1E0CD4A20], a1);
}

uint64_t HoverEffectComponent.HighlightHoverEffectStyle.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.customMirror.getter(MEMORY[0x1E0CD49F8], MEMORY[0x1E0CD49E0], MEMORY[0x1E0CD49F0], a1);
}

uint64_t HoverEffectComponent.SpotlightHoverEffectStyle.customMirror.getter@<X0>(uint64_t (*a1)(_QWORD, __n128)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  unint64_t v22;
  float v23;
  uint64_t v24;
  _QWORD v26[2];

  v26[0] = a3;
  v26[1] = a4;
  v7 = type metadata accessor for Mirror.AncestorRepresentation();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1(0, v12);
  v16 = MEMORY[0x1E0C80A78](v15);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))((char *)v26 - v18, v4, v15, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1D95E38B0;
  *(_QWORD *)(v19 + 32) = 0x726F6C6F63;
  *(_QWORD *)(v19 + 40) = 0xE500000000000000;
  v20 = (void *)a2();
  v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v20);

  v22 = type metadata accessor for UIColor();
  *(_QWORD *)(v19 + 48) = v21;
  *(_QWORD *)(v19 + 72) = v22;
  *(_QWORD *)(v19 + 80) = 0x6874676E65727473;
  *(_QWORD *)(v19 + 88) = 0xE800000000000000;
  v23 = ((float (*)(void))v26[0])();
  *(_QWORD *)(v19 + 120) = MEMORY[0x1E0DEB188];
  *(float *)(v19 + 96) = v23;
  v24 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v14, 1, 1, v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEDFE8], v7);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t HoverEffectComponent.ShaderHoverEffectInputs.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for HoverEffectComponent.ShaderHoverEffectInputs();
  v9 = MEMORY[0x1E0C80A78](v8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v0, v8, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1D95E38B0;
  strcpy((char *)(v12 + 32), "fadeInDuration");
  *(_BYTE *)(v12 + 47) = -18;
  HoverEffectComponent.ShaderHoverEffectInputs.fadeInDuration.getter();
  v13 = MEMORY[0x1E0DEB070];
  *(_QWORD *)(v12 + 48) = v14;
  *(_QWORD *)(v12 + 72) = v13;
  *(_QWORD *)(v12 + 80) = 0x4474754F65646166;
  *(_QWORD *)(v12 + 88) = 0xEF6E6F6974617275;
  HoverEffectComponent.ShaderHoverEffectInputs.fadeOutDuration.getter();
  *(_QWORD *)(v12 + 120) = v13;
  *(_QWORD *)(v12 + 96) = v15;
  v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v7, 1, 1, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEDFE8], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void sub_1D959A2A8(_QWORD *a1@<X8>)
{
  key path getter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(MEMORY[0x1E0CD4A10], a1);
}

void sub_1D959A2C4(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(a1, a2, a3, a4, MEMORY[0x1E0CD4A18]);
}

void sub_1D959A2E0(_QWORD *a1@<X8>)
{
  key path getter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(MEMORY[0x1E0CD49E0], a1);
}

void sub_1D959A2FC(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(a1, a2, a3, a4, MEMORY[0x1E0CD49E8]);
}

uint64_t static ParticleEmitterComponent.Presets.sparks.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(_QWORD *, _QWORD);
  void (*v25)(_QWORD *, _QWORD);
  void (*v26)(_QWORD *, _QWORD);
  void (*v27)(_QWORD *, _QWORD);
  void (*v28)(_QWORD *, _QWORD);
  void (*v29)(_QWORD *, _QWORD);
  void (*v30)(_QWORD *, _QWORD);
  void (*v31)(_QWORD *, _QWORD);
  void (*v32)(_QWORD *, _QWORD);
  void (*v33)(_QWORD *, _QWORD);
  void (*v34)(_QWORD *, _QWORD);
  void (*v35)(_QWORD *, _QWORD);
  void (*v36)(_QWORD *, _QWORD);
  void (*v37)(_QWORD *, _QWORD);
  void (*v38)(_QWORD *, _QWORD);
  void (*v39)(_QWORD *, _QWORD);
  void (*v40)(_QWORD *, _QWORD);
  void (*v41)(_QWORD *, _QWORD);
  void (*v42)(_QWORD *, _QWORD);
  void (*v43)(_QWORD *, _QWORD);
  void (*v44)(_QWORD *, _QWORD);
  void (*v45)(_QWORD *, _QWORD);
  void (*v46)(_QWORD *, _QWORD);
  void (*v47)(_QWORD *, _QWORD);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void (*v51)(_QWORD *, _QWORD);
  void (*v52)(_QWORD *, _QWORD);
  void (*v53)(_QWORD *, _QWORD);
  void (*v54)(_QWORD *, _QWORD);
  void (*v55)(_QWORD *, _QWORD);
  void (*v56)(_QWORD *, _QWORD);
  void (*v57)(char *, _QWORD, uint64_t);
  char *v58;
  uint64_t v59;
  void (*v60)(_QWORD *, _QWORD);
  void (*v61)(_QWORD *, _QWORD);
  void (*v62)(_QWORD *, _QWORD);
  void (*v63)(_QWORD *, _QWORD);
  void (*v64)(_QWORD *, _QWORD);
  void (*v65)(_QWORD *, _QWORD);
  void (*v66)(_QWORD *, _QWORD);
  void (*v67)(_QWORD *, _QWORD);
  void (*v68)(_QWORD *, _QWORD);
  void (*v69)(_QWORD *, _QWORD);
  void (*v70)(_QWORD *, _QWORD);
  void *v71;
  id v72;
  void *v73;
  id v74;
  void (*v75)(_QWORD *, _QWORD);
  char *v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[6];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter?);
  MEMORY[0x1E0C80A78](v0);
  v102 = (char *)&v83 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder();
  *(_QWORD *)&v97 = *(_QWORD *)(v98 - 8);
  MEMORY[0x1E0C80A78](v98);
  v96 = (char *)&v83 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve();
  v94 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95);
  v93 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode();
  v90 = *(_QWORD *)(v106 - 8);
  MEMORY[0x1E0C80A78](v106);
  v103 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode();
  v92 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105);
  v104 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for ParticleEmitterComponent.SpawnOccasion();
  v89 = *(_QWORD *)(v91 - 8);
  MEMORY[0x1E0C80A78](v91);
  v88 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for ParticleEmitterComponent.SimulationSpace();
  v86 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87);
  v85 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for ParticleEmitterComponent.EmitterShape();
  v8 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84);
  v10 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ParticleEmitterComponent.BirthLocation();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ParticleEmitterComponent.BirthDirection();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter();
  v100 = *(_QWORD *)(v19 - 8);
  v101 = v19;
  MEMORY[0x1E0C80A78](v19);
  v99 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v83 - v22;
  ParticleEmitterComponent.init()();
  ParticleEmitterComponent.ParticleEmitter.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E0CD51C0], v15);
  ParticleEmitterComponent.birthDirection.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E0CD5180], v11);
  ParticleEmitterComponent.birthLocation.setter();
  ParticleEmitterComponent.emissionDirection.setter();
  ParticleEmitterComponent.emissionDuration.setter();
  ParticleEmitterComponent.emissionDurationVariation.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0CD4EA8], v84);
  ParticleEmitterComponent.emitterShape.setter();
  ParticleEmitterComponent.emitterShapeSize.setter();
  ParticleEmitterComponent.idleDuration.setter();
  ParticleEmitterComponent.idleDurationVariation.setter();
  ParticleEmitterComponent.shouldLoop.setter();
  ParticleEmitterComponent.particlesInheritTransform.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v86 + 104))(v85, *MEMORY[0x1E0CD51F8], v87);
  ParticleEmitterComponent.fieldSimulationSpace.setter();
  ParticleEmitterComponent.spawnInheritsParentColor.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v88, *MEMORY[0x1E0CD5190], v91);
  ParticleEmitterComponent.spawnOccasion.setter();
  ParticleEmitterComponent.spawnSpreadFactor.setter();
  ParticleEmitterComponent.spawnSpreadFactorVariation.setter();
  ParticleEmitterComponent.spawnVelocityFactor.setter();
  ParticleEmitterComponent.speed.setter();
  ParticleEmitterComponent.speedVariation.setter();
  ParticleEmitterComponent.warmupDuration.setter();
  ParticleEmitterComponent.resetSimulation()();
  v24 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  v24(v107, 0);
  v25 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  v25(v107, 0);
  v26 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  v26(v107, 0);
  v27 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  v27(v107, 0);
  v28 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  v28(v107, 0);
  v29 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  v29(v107, 0);
  v30 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  v30(v107, 0);
  LODWORD(v91) = *MEMORY[0x1E0CD4F38];
  v92 = *(_QWORD *)(v92 + 104);
  ((void (*)(char *))v92)(v104);
  v31 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  v31(v107, 0);
  v32 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  v32(v107, 0);
  v33 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  v33(v107, 0);
  LODWORD(v89) = *MEMORY[0x1E0CD50D0];
  v90 = *(_QWORD *)(v90 + 104);
  ((void (*)(char *))v90)(v103);
  v34 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  v34(v107, 0);
  v35 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  v35(v107, 0);
  v36 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  v36(v107, 0);
  v37 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  v37(v107, 0);
  v38 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  v38(v107, 0);
  v39 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  v39(v107, 0);
  v40 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  v40(v107, 0);
  v41 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  v41(v107, 0);
  v42 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  v42(v107, 0);
  v43 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  v43(v107, 0);
  v44 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  v44(v107, 0);
  v45 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  v45(v107, 0);
  v46 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  v46(v107, 0);
  v47 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  v47(v107, 0);
  v48 = *MEMORY[0x1E0CD4F08];
  v94 = *(_QWORD *)(v94 + 104);
  v49 = v93;
  v50 = v95;
  ((void (*)(char *, uint64_t, uint64_t))v94)(v93, v48, v95);
  v51 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  v51(v107, 0);
  v52 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  v52(v107, 0);
  v53 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  v53(v107, 0);
  v54 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  v54(v107, 0);
  v55 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  v55(v107, 0);
  v56 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v56(v107, 0);
  v57 = *(void (**)(char *, _QWORD, uint64_t))(v97 + 104);
  v58 = v96;
  v59 = v98;
  v57(v96, *MEMORY[0x1E0CD50F0], v98);
  v60 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  v60(v107, 0);
  v61 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  v61(v107, 0);
  v62 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  v97 = xmmword_1D95E2340;
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  v62(v107, 0);
  v63 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  v63(v107, 0);
  CGColorCreateGenericRGB(242.0, 243.0, 250.0, 1.0);
  v64 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  v64(v107, 0);
  CGColorCreateGenericRGB(214.0, 215.0, 241.0, 1.0);
  v65 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  v65(v107, 0);
  CGColorCreateGenericRGB(255.0, 155.0, 0.0, 1.0);
  v66 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.endColorA.setter();
  v66(v107, 0);
  CGColorCreateGenericRGB(255.0, 216.0, 75.0, 1.0);
  v67 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.endColorB.setter();
  v67(v107, 0);
  v68 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  v68(v107, 0);
  v69 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  v69(v107, 0);
  v70 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  v70(v107, 0);
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  ((void (*)(char *, _QWORD, uint64_t))v92)(v104, v91, v105);
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  ((void (*)(char *, _QWORD, uint64_t))v90)(v103, v89, v106);
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  ((void (*)(char *, _QWORD, uint64_t))v94)(v49, *MEMORY[0x1E0CD4F10], v50);
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v57(v58, *MEMORY[0x1E0CD50E0], v59);
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  CGColorCreateGenericRGB(244.0, 210.0, 134.0, 1.0);
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  CGColorCreateGenericRGB(97.0, 184.0, 26.0, 1.0);
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  type metadata accessor for TextureResource();
  v71 = (void *)MEMORY[0x1DF090310](0xD000000000000010, 0x80000001D95DCA10);
  v72 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v71);

  if (one-time initialization token for textureLoader != -1)
    swift_once();
  v73 = (void *)textureLoader;
  v107[3] = &type metadata for TextureLoader;
  v107[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v107[0] = v73;
  v74 = v73;
  static TextureResource.load(named:in:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);

  v75 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  v75(v107, 0);
  v76 = v99;
  ParticleEmitterComponent.mainEmitter.getter();
  ParticleEmitterComponent.ParticleEmitter.image.getter();
  v77 = v100;
  v78 = *(void (**)(char *, uint64_t))(v100 + 8);
  v79 = v76;
  v80 = v101;
  v78(v79, v101);
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  v81 = v102;
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v102, v23, v80);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v81, 0, 1, v80);
  ParticleEmitterComponent.spawnedEmitter.setter();
  return ((uint64_t (*)(char *, uint64_t))v78)(v23, v80);
}

uint64_t specialized Sequence.first(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v12;
  uint64_t v14;

  if (a3 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      v7 = 4;
      do
      {
        v8 = v7 - 4;
        if ((a3 & 0xC000000000000001) != 0)
        {
          v9 = MEMORY[0x1DF0906F4](v7 - 4, a3);
          v10 = __OFADD__(v8, 1);
          v11 = v7 - 3;
          if (v10)
            goto LABEL_16;
        }
        else
        {
          v9 = *(_QWORD *)(a3 + 8 * v7);
          swift_retain();
          v10 = __OFADD__(v8, 1);
          v11 = v7 - 3;
          if (v10)
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        v14 = v9;
        v12 = a1(&v14);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return v9;
        }
        if ((v12 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
        swift_release();
        ++v7;
      }
      while (v11 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t GroupActivitiesSynchronizationComponent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v15 = a2;
  v17 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v16 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GroupActivitiesSynchronizationComponent.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GroupActivitiesSynchronizationComponent(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v16, v17);
    outlined init with take of GroupActivitiesSynchronizationPeer((uint64_t)v11, v15, type metadata accessor for GroupActivitiesSynchronizationComponent);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GroupActivitiesSynchronizationComponent.CodingKeys()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GroupActivitiesSynchronizationComponent.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance GroupActivitiesSynchronizationComponent.CodingKeys()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupActivitiesSynchronizationComponent.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GroupActivitiesSynchronizationComponent.CodingKeys()
{
  return 0x496E6F6973736573;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GroupActivitiesSynchronizationComponent.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x496E6F6973736573 && a2 == 0xE900000000000044)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GroupActivitiesSynchronizationComponent.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupActivitiesSynchronizationComponent.CodingKeys()
{
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GroupActivitiesSynchronizationComponent.CodingKeys()
{
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance GroupActivitiesSynchronizationComponent@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GroupActivitiesSynchronizationComponent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupActivitiesSynchronizationComponent(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GroupActivitiesSynchronizationComponent.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for static Component.componentName.getter in conformance GroupActivitiesSynchronizationComponent()
{
  uint64_t v0;

  v0 = static GroupActivitiesSynchronizationComponent.componentName;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t GroupActivitiesSynchronizationPeer.participant.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Participant();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t GroupActivitiesSynchronizationPeer.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for Participant();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t GroupActivitiesSynchronizationPeer.hash(into:)()
{
  type metadata accessor for Participant();
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB4250], MEMORY[0x1E0CB4260]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int GroupActivitiesSynchronizationPeer.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for Participant();
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB4250], MEMORY[0x1E0CB4260]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

BOOL static GroupActivitiesSynchronizationService.SynchronizationError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void GroupActivitiesSynchronizationService.SynchronizationError.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int GroupActivitiesSynchronizationService.SynchronizationError.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GroupActivitiesSynchronizationPeer()
{
  Hasher.init(_seed:)();
  type metadata accessor for Participant();
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB4250], MEMORY[0x1E0CB4260]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupActivitiesSynchronizationPeer()
{
  type metadata accessor for Participant();
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB4250], MEMORY[0x1E0CB4260]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupActivitiesSynchronizationPeer()
{
  Hasher.init(_seed:)();
  type metadata accessor for Participant();
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB4250], MEMORY[0x1E0CB4260]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GroupActivitiesSynchronizationService<A>.SynchronizationError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static GroupActivitiesSynchronizationService.SynchronizationError.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GroupActivitiesSynchronizationService<A>.SynchronizationError()
{
  char *v0;

  return GroupActivitiesSynchronizationService.SynchronizationError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance GroupActivitiesSynchronizationService<A>.SynchronizationError(uint64_t a1)
{
  char *v1;

  GroupActivitiesSynchronizationService.SynchronizationError.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupActivitiesSynchronizationService<A>.SynchronizationError()
{
  char *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  GroupActivitiesSynchronizationService.SynchronizationError.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t GroupActivitiesSynchronizationService.synchronizationSession.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t GroupActivitiesSynchronizationService.discoveryView.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_release();
}

uint64_t GroupActivitiesSynchronizationService.session.getter()
{
  return swift_retain();
}

uint64_t key path getter for GroupActivitiesSynchronizationService.entities : <A>GroupActivitiesSynchronizationService<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = GroupActivitiesSynchronizationService.entities.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for GroupActivitiesSynchronizationService.entities : <A>GroupActivitiesSynchronizationService<A>()
{
  swift_bridgeObjectRetain();
  return GroupActivitiesSynchronizationService.entities.setter();
}

uint64_t GroupActivitiesSynchronizationService.entities.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1D959BE84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = GroupActivitiesSynchronizationService.entities.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1D959BEAC()
{
  swift_bridgeObjectRetain();
  return GroupActivitiesSynchronizationService.entities.setter();
}

uint64_t sub_1D959BED4()
{
  return 16;
}

__n128 sub_1D959BEE0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t GroupActivitiesSynchronizationService.entities.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t key path setter for GroupActivitiesSynchronizationService.$entities : <A>GroupActivitiesSynchronizationService<A>(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Entity>>.Publisher);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  return GroupActivitiesSynchronizationService.$entities.setter((uint64_t)v5);
}

uint64_t GroupActivitiesSynchronizationService.$entities.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Entity>>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t GroupActivitiesSynchronizationService.$entities.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Entity>>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Entity>>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t GroupActivitiesSynchronizationService.__allocating_init(session:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  GroupActivitiesSynchronizationService.init(session:)(a1);
  return v2;
}

_QWORD *GroupActivitiesSynchronizationService.init(session:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t aBlock;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v32;

  v2 = v1;
  v4 = *v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Entity>>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[4] = 0;
  v2[5] = 0;
  v9 = (char *)v2 + direct field offset for GroupActivitiesSynchronizationService._entities;
  v11 = *(_QWORD *)(v4 + 80);
  v10 = *(_QWORD *)(v4 + 88);
  aBlock = MEMORY[0x1E0DEE9E8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Entity>);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v8, v5);
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  v12 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  v13 = MEMORY[0x1DF0912A0](v12);
  if (v13)
  {
    v2[6] = a1;
    v2[2] = v13;
    swift_retain();
    v2[3] = RENetworkSystemObserverCreateEx();
    v15 = swift_allocObject();
    swift_weakInit();
    v16 = (_QWORD *)swift_allocObject();
    v16[2] = v11;
    v16[3] = v10;
    v16[4] = v15;
    v31 = partial apply for closure #1 in GroupActivitiesSynchronizationService.init(session:);
    v32 = v16;
    v17 = MEMORY[0x1E0C809B0];
    aBlock = MEMORY[0x1E0C809B0];
    v28 = 1107296256;
    v29 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
    v30 = &block_descriptor_5;
    v18 = _Block_copy(&aBlock);
    swift_release();
    RENetworkSystemObserverOnEntityWillDestroy();
    _Block_release(v18);
    v19 = swift_allocObject();
    swift_weakInit();
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = v11;
    v20[3] = v10;
    v20[4] = v19;
    v31 = partial apply for closure #2 in GroupActivitiesSynchronizationService.init(session:);
    v32 = v20;
    aBlock = v17;
    v28 = 1107296256;
    v29 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @unowned UnsafePointer<RESyncAuthData>) -> (@unowned OpaquePointer?);
    v30 = &block_descriptor_11;
    v21 = _Block_copy(&aBlock);
    swift_release();
    RENetworkSystemObserverOnTopLevelEntityDidCreate();
    _Block_release(v21);
    type metadata accessor for GroupActivitiesSynchronizationComponent(0);
    static Component.registerComponent()();
    swift_release();
  }
  else
  {
    v22 = type metadata accessor for GroupActivitiesSynchronizationService.SynchronizationError(0, v11, v10, v14);
    MEMORY[0x1DF091B94](&protocol conformance descriptor for GroupActivitiesSynchronizationService<A>.SynchronizationError, v22);
    swift_allocError();
    *v23 = 0;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))((uint64_t)v2 + direct field offset for GroupActivitiesSynchronizationService._entities, v5);
    type metadata accessor for GroupActivitiesSynchronizationService(0, v11, v10, v24);
    swift_deallocPartialClassInstance();
  }
  return v2;
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationService.SynchronizationError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupActivitiesSynchronizationService.SynchronizationError);
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupActivitiesSynchronizationService);
}

uint64_t sub_1D959C4C0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t closure #1 in GroupActivitiesSynchronizationService.init(session:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t KeyPath;
  void (*v3)(_BYTE *, _QWORD);
  _BYTE v4[32];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    type metadata accessor for Entity();
    v1 = static Entity.fromCore(_:ignoringEntityInfo:)();
    MEMORY[0x1E0C80A78](v1);
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath);
    swift_getKeyPath();
    v3 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify();
    specialized Set._Variant.remove(_:)();
    swift_release();
    v3(v4, 0);
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1D959C62C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupActivitiesSynchronizationService.init(session:)()
{
  return closure #1 in GroupActivitiesSynchronizationService.init(session:)();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t closure #2 in GroupActivitiesSynchronizationService.init(session:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  void (*v44)(char *, _QWORD);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char v56[32];
  uint64_t v57;

  v45 = a4;
  v46 = a5;
  v55 = a1;
  v5 = type metadata accessor for UUID();
  v52 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v47 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1E0C80A78](v51);
  v53 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GroupActivitiesSynchronizationComponent(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v48 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupActivitiesSynchronizationComponent?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Entity.ComponentSet();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v18);
  v50 = (uint64_t)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v45 - v21;
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v45 - v24;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  v54 = result;
  if (result)
  {
    type metadata accessor for Entity();
    v49 = static Entity.fromCore(_:ignoringEntityInfo:)();
    dispatch thunk of Entity.components.getter();
    Entity.ComponentSet.subscript.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    {
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v13, &demangling cache variable for type metadata for GroupActivitiesSynchronizationComponent?);
      v27 = v52;
      v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56);
      v28(v25, 1, 1, v5);
    }
    else
    {
      v29 = v48;
      outlined init with copy of GroupActivitiesSynchronizationComponent((uint64_t)v13, v48);
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v13, &demangling cache variable for type metadata for GroupActivitiesSynchronizationComponent?);
      v27 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v25, v29, v5);
      v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
      v28(v25, 0, 1, v5);
    }
    v31 = (uint64_t)v53;
    v30 = v54;
    GroupSession.id.getter();
    v28(v22, 0, 1, v5);
    v32 = v31 + *(int *)(v51 + 48);
    outlined init with copy of UUID?((uint64_t)v25, v31);
    outlined init with copy of UUID?((uint64_t)v22, v32);
    v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
    if (v33(v31, 1, v5) == 1)
    {
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v25, &demangling cache variable for type metadata for UUID?);
      if (v33(v32, 1, v5) == 1)
      {
        outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v31, &demangling cache variable for type metadata for UUID?);
        goto LABEL_12;
      }
    }
    else
    {
      v34 = v50;
      outlined init with copy of UUID?(v31, v50);
      if (v33(v32, 1, v5) != 1)
      {
        v35 = v34;
        v36 = v47;
        (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v47, v32, v5);
        lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
        v37 = dispatch thunk of static Equatable.== infix(_:_:)();
        v38 = *(void (**)(char *, uint64_t))(v27 + 8);
        v38(v36, v5);
        outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
        outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v25, &demangling cache variable for type metadata for UUID?);
        v38((char *)v35, v5);
        outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v31, &demangling cache variable for type metadata for UUID?);
        if ((v37 & 1) != 0)
        {
LABEL_12:
          if (*(_QWORD *)(v30 + 32))
          {
            swift_retain();
            v39 = REEntitySetParent();
            MEMORY[0x1E0C80A78](v39);
            v41 = v45;
            v40 = v46;
            *(&v45 - 2) = v45;
            *(&v45 - 1) = v40;
            KeyPath = swift_getKeyPath();
            MEMORY[0x1E0C80A78](KeyPath);
            *(&v45 - 2) = v41;
            *(&v45 - 1) = v40;
            swift_getKeyPath();
            v43 = v49;
            swift_retain();
            v44 = (void (*)(char *, _QWORD))static Published.subscript.modify();
            specialized Set._Variant.insert(_:)(&v57, v43);
            swift_release();
            v44(v56, 0);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            return 1;
          }
        }
LABEL_14:
        swift_release();
        swift_release();
        return 0;
      }
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v25, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v34, v5);
    }
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v31, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_14;
  }
  return result;
}

uint64_t partial apply for closure #2 in GroupActivitiesSynchronizationService.init(session:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return closure #2 in GroupActivitiesSynchronizationService.init(session:)(a1, a2, v2[4], v2[2], v2[3]);
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationComponent(uint64_t a1)
{
  return type metadata accessor for AccessibilityComponent.RotorType(a1, (uint64_t *)&type metadata singleton initialization cache for GroupActivitiesSynchronizationComponent);
}

uint64_t GroupActivitiesSynchronizationService.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  RESyncRelease();
  swift_release();
  swift_release();
  swift_release();
  v1 = v0 + direct field offset for GroupActivitiesSynchronizationService._entities;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Entity>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t GroupActivitiesSynchronizationService.__deallocating_deinit()
{
  GroupActivitiesSynchronizationService.deinit();
  return swift_deallocClassInstance();
}

uint64_t GroupActivitiesSynchronizationService.entity(for:)()
{
  uint64_t result;

  result = RENetworkSystemFindEntityWithGuid();
  if (result)
  {
    type metadata accessor for Entity();
    return static Entity.fromCore(_:ignoringEntityInfo:)();
  }
  return result;
}

void GroupActivitiesSynchronizationService.owner(of:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v3 = type metadata accessor for Participant();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v26 - v8;
  v10 = *(_QWORD *)(v1 + 40);
  if (v10)
  {
    swift_retain();
    Entity.coreEntity.getter();
    RENetworkComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      v26 = v4;
      v11 = RENetworkComponentOwnerPeerID();
      v12 = *(_QWORD *)(v10 + 16);
      swift_beginAccess();
      v13 = *(_QWORD *)(v12 + 16);
      v27 = v9;
      v28 = v3;
      if (v13 >> 62)
        goto LABEL_22;
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      for (; v14; v14 = _CocoaArrayWrapper.endIndex.getter())
      {
        if ((v13 & 0xC000000000000001) != 0)
        {
          v15 = 0;
          while (1)
          {
            v16 = MEMORY[0x1DF0906F4](v15, v13);
            v17 = v15 + 1;
            if (__OFADD__(v15, 1))
              break;
            v18 = v16;
            if (*(_QWORD *)(*(_QWORD *)(v16 + 16)
                           + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_peerID) == v11)
              goto LABEL_19;
            swift_unknownObjectRelease();
            ++v15;
            if (v17 == v14)
              goto LABEL_16;
          }
          __break(1u);
        }
        else
        {
          v19 = 0;
          while (1)
          {
            v20 = v19 + 1;
            if (__OFADD__(v19, 1))
              break;
            v18 = *(_QWORD *)(v13 + 8 * v19 + 32);
            if (*(_QWORD *)(*(_QWORD *)(v18 + 16)
                           + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_peerID) == v11)
            {
              swift_retain();
LABEL_19:
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v21 = v26;
              v22 = v28;
              (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v6, *(_QWORD *)(v18 + 16)+ OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_participant, v28);
              swift_release();
              v23 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
              v24 = v27;
              v23(v27, v6, v22);
              *(_QWORD *)(a1 + 24) = type metadata accessor for GroupActivitiesSynchronizationPeer(0);
              *(_QWORD *)(a1 + 32) = &protocol witness table for GroupActivitiesSynchronizationPeer;
              boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a1);
              v23((char *)boxed_opaque_existential_0, v24, v22);
              return;
            }
            ++v19;
            if (v20 == v14)
              goto LABEL_16;
          }
        }
        __break(1u);
LABEL_22:
        swift_bridgeObjectRetain_n();
      }
LABEL_16:
      swift_release();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_release();
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
}

uint64_t GroupActivitiesSynchronizationService.giveOwnership(of:toPeer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t ComponentByClass;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _BYTE v23[40];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupActivitiesSynchronizationPeer?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for GroupActivitiesSynchronizationPeer(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of SynchronizationPeerID(a2, (uint64_t)v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SynchronizationPeerID);
  v11 = swift_dynamicCast();
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (v11)
  {
    v12(v6, 0, 1, v7);
    outlined init with take of GroupActivitiesSynchronizationPeer((uint64_t)v6, (uint64_t)v10, type metadata accessor for GroupActivitiesSynchronizationPeer);
    v13 = *(_QWORD *)(v2 + 40);
    if (v13)
    {
      swift_retain();
      Entity.coreEntity.getter();
      RENetworkComponentGetComponentType();
      ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass)
      {
        v15 = ComponentByClass;
        if ((RENetworkComponentIsAuthoritative() & 1) != 0)
        {
          v16 = *(_QWORD *)(v13 + 16);
          v17 = swift_beginAccess();
          v18 = *(_QWORD *)(v16 + 16);
          MEMORY[0x1E0C80A78](v17);
          *(&v22 - 2) = (uint64_t)v10;
          swift_bridgeObjectRetain();
          v19 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in Array<A>.first(with:), (uint64_t)(&v22 - 4), v18);
          swift_bridgeObjectRelease();
          if (v19)
          {
            v20 = *(_QWORD *)(*(_QWORD *)(v19 + 16)
                            + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_peerID);
            swift_release();
            MEMORY[0x1DF090F10](v15, v20);
            swift_release();
            outlined destroy of GroupActivitiesSynchronizationPeer((uint64_t)v10);
            return 1;
          }
        }
      }
      outlined destroy of GroupActivitiesSynchronizationPeer((uint64_t)v10);
      swift_release();
    }
    else
    {
      outlined destroy of GroupActivitiesSynchronizationPeer((uint64_t)v10);
    }
  }
  else
  {
    v12(v6, 1, 1, v7);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v6, &demangling cache variable for type metadata for GroupActivitiesSynchronizationPeer?);
  }
  return 0;
}

uint64_t GroupActivitiesSynchronizationService.__fromCore(peerID:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v3 = type metadata accessor for Participant();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v26 - v8;
  result = __PeerIDRef.__as<A>(_:)();
  v11 = *(_QWORD *)(v1 + 40);
  if (v11)
  {
    v12 = v29;
    v13 = *(_QWORD *)(v11 + 16);
    swift_beginAccess();
    v14 = *(_QWORD *)(v13 + 16);
    v27 = v9;
    v28 = v3;
    if (v14 >> 62)
      goto LABEL_20;
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    for (; v15; v15 = _CocoaArrayWrapper.endIndex.getter())
    {
      if ((v14 & 0xC000000000000001) != 0)
      {
        v16 = 0;
        while (1)
        {
          v17 = MEMORY[0x1DF0906F4](v16, v14);
          v18 = v16 + 1;
          if (__OFADD__(v16, 1))
            break;
          v19 = v17;
          if (*(_QWORD *)(*(_QWORD *)(v17 + 16)
                         + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_peerID) == v12)
            goto LABEL_17;
          swift_unknownObjectRelease();
          ++v16;
          if (v18 == v15)
            goto LABEL_14;
        }
        __break(1u);
      }
      else
      {
        v20 = 0;
        while (1)
        {
          v21 = v20 + 1;
          if (__OFADD__(v20, 1))
            break;
          v19 = *(_QWORD *)(v14 + 32 + 8 * v20);
          if (*(_QWORD *)(*(_QWORD *)(v19 + 16)
                         + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_peerID) == v12)
          {
            swift_retain();
LABEL_17:
            swift_bridgeObjectRelease_n();
            v22 = v28;
            (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v19 + 16)+ OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_participant, v28);
            swift_release();
            v23 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
            v24 = v27;
            v23(v27, v6, v22);
            *(_QWORD *)(a1 + 24) = type metadata accessor for GroupActivitiesSynchronizationPeer(0);
            *(_QWORD *)(a1 + 32) = &protocol witness table for GroupActivitiesSynchronizationPeer;
            boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a1);
            return ((uint64_t (*)(uint64_t *, char *, uint64_t))v23)(boxed_opaque_existential_0, v24, v22);
          }
          ++v20;
          if (v21 == v15)
            goto LABEL_14;
        }
      }
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain_n();
    }
LABEL_14:
    result = swift_bridgeObjectRelease_n();
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t GroupActivitiesSynchronizationService.__toCore(peerID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  void (*v11)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  _QWORD v20[3];
  uint64_t v21;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupActivitiesSynchronizationPeer?);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for GroupActivitiesSynchronizationPeer(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of SynchronizationPeerID(a1, (uint64_t)v20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SynchronizationPeerID);
  v10 = swift_dynamicCast();
  v11 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  if ((v10 & 1) == 0)
  {
    v11(v5, 1, 1, v6);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v5, &demangling cache variable for type metadata for GroupActivitiesSynchronizationPeer?);
LABEL_7:
    v21 = MEMORY[0x1E0DEE190];
    v20[0] = 0;
    static __PeerIDRef.__fromCore(_:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  v11(v5, 0, 1, v6);
  outlined init with take of GroupActivitiesSynchronizationPeer((uint64_t)v5, (uint64_t)v9, type metadata accessor for GroupActivitiesSynchronizationPeer);
  v12 = *(_QWORD *)(v1 + 40);
  if (!v12)
    goto LABEL_6;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = swift_beginAccess();
  v15 = *(_QWORD *)(v13 + 16);
  MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)&v19[-16] = v9;
  swift_bridgeObjectRetain();
  v16 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))closure #1 in Array<A>.first(with:)partial apply, (uint64_t)&v19[-32], v15);
  swift_bridgeObjectRelease();
  if (!v16)
  {
LABEL_6:
    outlined destroy of GroupActivitiesSynchronizationPeer((uint64_t)v9);
    goto LABEL_7;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 16)
                  + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_peerID);
  swift_release();
  v21 = MEMORY[0x1E0DEE190];
  v20[0] = v17;
  static __PeerIDRef.__fromCore(_:)();
  outlined destroy of GroupActivitiesSynchronizationPeer((uint64_t)v9);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

Swift::Void __swiftcall GroupActivitiesSynchronizationService.startSync()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!v0[4])
  {
    v1 = v0;
    v2 = *v0;
    RENetworkSystemAddObserver();
    type metadata accessor for GroupActivitiesSynchronizationProtocolLayer();
    v3 = v0[6];
    v4 = swift_retain();
    GroupActivitiesSynchronizationProtocolLayer.__allocating_init<A>(session:)(v4);
    type metadata accessor for GroupActivitiesSynchronizationDiscoveryView();
    swift_allocObject();
    v5 = swift_retain();
    GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)(v5);
    v7 = v6;
    v0[5] = v6;
    swift_retain();
    swift_release();
    type metadata accessor for GroupActivitiesSynchronizationSession(0, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v8);
    swift_retain();
    swift_retain();
    v11 = specialized GroupActivitiesSynchronizationSession.__allocating_init(session:discoveryView:)(v3, v7, v9, v10);
    swift_release();
    swift_release();
    v1[4] = v11;
    swift_release();
    swift_release();
    swift_release();
  }
}

Swift::Void __swiftcall GroupActivitiesSynchronizationService.stopSync()()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
  {
    RENetworkSystemRemoveObserver();
    *(_QWORD *)(v0 + 40) = 0;
    swift_release();
    *(_QWORD *)(v0 + 32) = 0;
    swift_release();
  }
}

uint64_t GroupActivitiesSynchronizationService.add(entity:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  void (*v9)(_QWORD *, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  void (*v15)(_QWORD *, _QWORD);
  uint64_t v17;
  _BYTE *v18;
  _QWORD v19[4];
  uint64_t v20;

  v3 = *v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupActivitiesSynchronizationComponent?);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v1[4])
  {
    swift_retain();
    GroupSession.id.getter();
    v8 = type metadata accessor for GroupActivitiesSynchronizationComponent(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
    v9 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v9(v19, 0);
    Entity.coreEntity.getter();
    RENetworkComponentGetComponentType();
    v10 = REEntityGetOrAddComponentByClass();
    MEMORY[0x1DF090F34](v10, 3);
    v11 = REEntitySetParent();
    MEMORY[0x1E0C80A78](v11);
    v12 = *(_QWORD *)(v3 + 80);
    v13 = *(_QWORD *)(v3 + 88);
    v19[-2] = v12;
    v19[-1] = v13;
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath);
    v19[-2] = v12;
    v19[-1] = v13;
    swift_getKeyPath();
    swift_retain();
    v15 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify();
    specialized Set._Variant.insert(_:)(&v20, a1);
    swift_release();
    v15(v19, 0);
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    v17 = type metadata accessor for GroupActivitiesSynchronizationService.SynchronizationError(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v5);
    MEMORY[0x1DF091B94](&protocol conformance descriptor for GroupActivitiesSynchronizationService<A>.SynchronizationError, v17);
    swift_allocError();
    *v18 = 1;
    return swift_willThrow();
  }
}

void GroupActivitiesSynchronizationService.remove(entity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;
  void (*v7)(_BYTE *, _QWORD);
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE v11[32];

  if (v4[4])
  {
    type metadata accessor for Entity();
    v5 = HasSynchronization.isOwner.getter();
    if ((v5 & 1) != 0)
    {
      MEMORY[0x1E0C80A78](v5);
      KeyPath = swift_getKeyPath();
      MEMORY[0x1E0C80A78](KeyPath);
      swift_getKeyPath();
      v7 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify();
      v8 = specialized Set._Variant.remove(_:)();
      v7(v11, 0);
      swift_release();
      swift_release();
      swift_release();
      if (v8)
        HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
    }
  }
  else
  {
    v9 = type metadata accessor for GroupActivitiesSynchronizationService.SynchronizationError(0, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 88), a4);
    MEMORY[0x1DF091B94](&protocol conformance descriptor for GroupActivitiesSynchronizationService<A>.SynchronizationError, v9);
    swift_allocError();
    *v10 = 1;
    swift_willThrow();
  }
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, v11, MEMORY[0x1E0CD4CD0]);
  swift_bridgeObjectRetain();
  v29 = a1;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a2;
    v15 = ~v13;
    v16 = *(_QWORD *)(v7 + 72);
    v30 = v7;
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v18 = v16 * v14;
      v17(v9, *(_QWORD *)(v10 + 48) + v16 * v14, v6);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4CC0], MEMORY[0x1E0CD4CD8]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v20 = 1;
        a2 = v28;
        v7 = v30;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v21 = v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v21;
    v31 = *v21;
    *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v23 = v31;
    }
    v24 = *(_QWORD *)(v23 + 48) + v18;
    v7 = v30;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 32))(v28, v24, v6);
    specialized _NativeSet._delete(at:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4CC0], &lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x1E0CD4CD0]);
    *v21 = v31;
    swift_bridgeObjectRelease();
    v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, v11, MEMORY[0x1E0CD4C78]);
  swift_bridgeObjectRetain();
  v29 = a1;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a2;
    v15 = ~v13;
    v16 = *(_QWORD *)(v7 + 72);
    v30 = v7;
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v18 = v16 * v14;
      v17(v9, *(_QWORD *)(v10 + 48) + v16 * v14, v6);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C80]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v20 = 1;
        a2 = v28;
        v7 = v30;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v21 = v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v21;
    v31 = *v21;
    *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v23 = v31;
    }
    v24 = *(_QWORD *)(v23 + 48) + v18;
    v7 = v30;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 32))(v28, v24, v6);
    specialized _NativeSet._delete(at:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], &lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E0CD4C78]);
    *v21 = v31;
    swift_bridgeObjectRelease();
    v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for Participant();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type Participant and conformance Participant, v11, MEMORY[0x1E0CB4260]);
  swift_bridgeObjectRetain();
  v29 = a1;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a2;
    v15 = ~v13;
    v16 = *(_QWORD *)(v7 + 72);
    v30 = v7;
    v17 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v18 = v16 * v14;
      v17(v9, *(_QWORD *)(v10 + 48) + v16 * v14, v6);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB4250], MEMORY[0x1E0CB4268]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v20 = 1;
        a2 = v28;
        v7 = v30;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v21 = v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v21;
    v31 = *v21;
    *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v23 = v31;
    }
    v24 = *(_QWORD *)(v23 + 48) + v18;
    v7 = v30;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 32))(v28, v24, v6);
    specialized _NativeSet._delete(at:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB4250], &lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x1E0CB4260]);
    *v21 = v31;
    swift_bridgeObjectRelease();
    v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
}

uint64_t specialized Set._Variant.remove(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;

  v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    v2 = __CocoaSet.contains(_:)();
    swift_release();
    if ((v2 & 1) != 0)
    {
      v3 = specialized Set._Variant._migrateToNative(_:removing:)();
      swift_bridgeObjectRelease();
      return v3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  type metadata accessor for Entity();
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4648], MEMORY[0x1E0CD4658]);
  swift_bridgeObjectRetain();
  v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v5 = -1 << *(_BYTE *)(v1 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    goto LABEL_8;
  v7 = ~v5;
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4648], MEMORY[0x1E0CD4660]);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    v6 = (v6 + 1) & v7;
    if (((*(_QWORD *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *v0;
  v11 = *v0;
  *v0 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _NativeSet.copy()();
    v10 = v11;
  }
  v3 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v6);
  specialized _NativeSet._delete(at:)(v6);
  *v0 = v11;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized Set._Variant.remove(_:)(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  void (*v14)(char *, uint64_t);
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t *v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v26 - v10;
  v12 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  v28 = a1;
  v13 = objc_msgSend(a1, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UUID and conformance UUID, v5, MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v11, v4);
  v15 = Hasher._finalize()();
  v16 = -1 << *(_BYTE *)(v12 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v12 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v26 = v2;
    v27 = ~v16;
    while (1)
    {
      v18 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v17);
      v19 = objc_msgSend(v18, sel_identifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v20 = objc_msgSend(v28, sel_identifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v20) = static UUID.== infix(_:_:)();
      v14(v8, v4);
      v14(v11, v4);

      if ((v20 & 1) != 0)
        break;
      v17 = (v17 + 1) & v27;
      if (((*(_QWORD *)(v12 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    v22 = v26;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = *v22;
    v29 = *v22;
    *v22 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v24 = v29;
    }
    v21 = *(_QWORD *)(*(_QWORD *)(v24 + 48) + 8 * v17);
    specialized _NativeSet._delete(at:)(v17);
    *v22 = v29;
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v21;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  swift_bridgeObjectRelease();
  v1 = __CocoaSet.count.getter();
  v2 = swift_unknownObjectRetain();
  v3 = specialized _NativeSet.init(_:capacity:)(v2, v1);
  v10 = v3;
  type metadata accessor for Entity();
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4648], MEMORY[0x1E0CD4658]);
  swift_retain();
  v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v7 = ~v5;
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4648], MEMORY[0x1E0CD4660]);
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      v6 = (v6 + 1) & v7;
      if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
    specialized _NativeSet._delete(at:)(v6);
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
      *v0 = v10;
      return v8;
    }
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet._delete(at:)(int64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void (*v31)(char *, unint64_t, uint64_t);
  unint64_t v32;
  uint64_t (*v33)(uint64_t);
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a3;
  v35 = a4;
  v33 = a2;
  v6 = a2(0);
  v36 = *(_QWORD *)(v6 - 8);
  result = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v29 - v8;
  v10 = *v4;
  v11 = *v4 + 56;
  v12 = -1 << *(_BYTE *)(*v4 + 32);
  v13 = (a1 + 1) & ~v12;
  if (((1 << v13) & *(_QWORD *)(v11 + 8 * (v13 >> 6))) != 0)
  {
    v30 = v4;
    v14 = ~v12;
    swift_retain();
    v15 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v11 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
    {
      v32 = (v15 + 1) & v14;
      v16 = *(_QWORD *)(v36 + 72);
      v31 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      do
      {
        v17 = v11;
        v18 = v16;
        v19 = v16 * v13;
        v31(v9, *(_QWORD *)(v10 + 48) + v16 * v13, v6);
        lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(v34, v33, v35);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v6);
        v21 = v20 & v14;
        if (a1 >= (uint64_t)v32)
        {
          if (v21 >= v32 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v16 = v18;
            v24 = v18 * a1;
            if (v18 * a1 < v19
              || *(_QWORD *)(v10 + 48) + v18 * a1 >= (unint64_t)(*(_QWORD *)(v10 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v13;
            }
            else
            {
              a1 = v13;
              if (v24 != v19)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v13;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v32 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v16 = v18;
LABEL_5:
        v13 = (v13 + 1) & v14;
        v11 = v17;
      }
      while (((*(_QWORD *)(v17 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
    }
    *(_QWORD *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release();
    v4 = v30;
  }
  else
  {
    *(_QWORD *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v25 = *v4;
  v26 = *(_QWORD *)(*v4 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v25 + 16) = v28;
    ++*(_DWORD *)(v25 + 36);
  }
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      type metadata accessor for Entity();
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4648], MEMORY[0x1E0CD4658]);
      do
      {
        v10 = dispatch thunk of Hashable._rawHashValue(seed:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v10 >= v9 && v2 >= v10)
          {
LABEL_16:
            v13 = *(_QWORD *)(v3 + 48);
            v14 = (_QWORD *)(v13 + 8 * v2);
            v15 = (_QWORD *)(v13 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v14 >= v15 + 1))
            {
              *v14 = *v15;
              v2 = v6;
            }
          }
        }
        else if (v10 >= v9 || v2 >= v10)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void specialized _NativeSet._delete(at:)(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  id v15;
  Swift::Int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v3 = type metadata accessor for UUID();
  v27 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = *v1 + 56;
  v8 = -1 << *(_BYTE *)(*v1 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    v26 = v1;
    v10 = ~v8;
    swift_retain();
    v11 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v12 = (v11 + 1) & v10;
      do
      {
        v13 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v9);
        Hasher.init(_seed:)();
        v14 = v13;
        v15 = objc_msgSend(v14, sel_identifier);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v3);
        v16 = Hasher._finalize()();

        v17 = v16 & v10;
        if ((uint64_t)a1 >= (uint64_t)v12)
        {
          if (v17 < v12)
            goto LABEL_5;
        }
        else if (v17 >= v12)
        {
          goto LABEL_11;
        }
        if ((uint64_t)a1 >= (uint64_t)v17)
        {
LABEL_11:
          v18 = *(_QWORD *)(v6 + 48);
          v19 = (_QWORD *)(v18 + 8 * a1);
          v20 = (_QWORD *)(v18 + 8 * v9);
          if (a1 != v9 || (a1 = v9, v19 >= v20 + 1))
          {
            *v19 = *v20;
            a1 = v9;
          }
        }
LABEL_5:
        v9 = (v9 + 1) & v10;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    *(_QWORD *)(v7 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release();
    v1 = v26;
  }
  else
  {
    *(_QWORD *)(v7 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v21 = *v1;
  v22 = *(_QWORD *)(*v1 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v21 + 16) = v24;
    ++*(_DWORD *)(v21 + 36);
  }
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Entity>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v15 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for Entity();
      v3 = MEMORY[0x1E0CD4658];
      do
      {
        swift_dynamicCast();
        v2 = v15;
        if (*(_QWORD *)(v15 + 24) <= *(_QWORD *)(v15 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v15;
        }
        lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4648], v3);
        result = dispatch thunk of Hashable._rawHashValue(seed:)();
        v5 = v2 + 56;
        v6 = -1 << *(_BYTE *)(v2 + 32);
        v7 = result & ~v6;
        v8 = v7 >> 6;
        if (((-1 << v7) & ~*(_QWORD *)(v2 + 56 + 8 * (v7 >> 6))) != 0)
        {
          v9 = __clz(__rbit64((-1 << v7) & ~*(_QWORD *)(v2 + 56 + 8 * (v7 >> 6)))) | v7 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v10 = 0;
          v11 = (unint64_t)(63 - v6) >> 6;
          do
          {
            if (++v8 == v11 && (v10 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v12 = v8 == v11;
            if (v8 == v11)
              v8 = 0;
            v10 |= v12;
            v13 = *(_QWORD *)(v5 + 8 * v8);
          }
          while (v13 == -1);
          v9 = __clz(__rbit64(~v13)) + (v8 << 6);
        }
        *(_QWORD *)(v5 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v9) = v14;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, void (*a6)(unint64_t))
{
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    v8 = static _SetStorage.convert(_:capacity:)();
    v21 = v8;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for ARReferenceObject(0, a4);
      do
      {
        swift_dynamicCast();
        v8 = v21;
        v15 = *(_QWORD *)(v21 + 16);
        if (*(_QWORD *)(v21 + 24) <= v15)
        {
          a6(v15 + 1);
          v8 = v21;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
        v10 = v8 + 56;
        v11 = -1 << *(_BYTE *)(v8 + 32);
        v12 = result & ~v11;
        v13 = v12 >> 6;
        if (((-1 << v12) & ~*(_QWORD *)(v8 + 56 + 8 * (v12 >> 6))) != 0)
        {
          v14 = __clz(__rbit64((-1 << v12) & ~*(_QWORD *)(v8 + 56 + 8 * (v12 >> 6)))) | v12 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v16 = 0;
          v17 = (unint64_t)(63 - v11) >> 6;
          do
          {
            if (++v13 == v17 && (v16 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v18 = v13 == v17;
            if (v13 == v17)
              v13 = 0;
            v16 |= v18;
            v19 = *(_QWORD *)(v10 + 8 * v13);
          }
          while (v19 == -1);
          v14 = __clz(__rbit64(~v19)) + (v13 << 6);
        }
        *(_QWORD *)(v10 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
        *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14) = v20;
        ++*(_QWORD *)(v8 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v8;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  type metadata accessor for Entity();
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4648], MEMORY[0x1E0CD4658]);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, _QWORD *a2)
{
  unint64_t result;

  NSObject._rawHashValue(seed:)(a2[5]);
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(_QWORD *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, v11, MEMORY[0x1E0CD4C78]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C80]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for Entity();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v16 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v20 = v16;
    if (*(_QWORD *)(v16 + 24) <= *(_QWORD *)(v16 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      v17 = v20;
    }
    else
    {
      v17 = v16;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v17);
    *v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  type metadata accessor for Entity();
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4648], MEMORY[0x1E0CD4658]);
  swift_bridgeObjectRetain();
  v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v11 = -1 << *(_BYTE *)(v6 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *v2;
    *v2 = 0x8000000000000000;
    v15 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v15, v12, isUniquelyReferenced_nonNull_native);
    *v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  v13 = ~v11;
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4648], MEMORY[0x1E0CD4660]);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    v12 = (v12 + 1) & v13;
    if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      goto LABEL_11;
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  unint64_t v23;
  _QWORD *v24;
  id v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1, &demangling cache variable for type metadata for _SetStorage<ARReferenceImage>, &lazy cache variable for type metadata for ARReferenceImage, 0x1E0C89600, (void (*)(unint64_t))specialized _NativeSet.resize(capacity:));
    v30 = (_QWORD *)v22;
    v23 = *(_QWORD *)(v22 + 16);
    if (*(_QWORD *)(v22 + 24) <= v23)
    {
      v27 = v23 + 1;
      v28 = v8;
      specialized _NativeSet.resize(capacity:)(v27);
      v24 = v30;
    }
    else
    {
      v24 = (_QWORD *)v22;
      v25 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v24);
    *v3 = (uint64_t)v24;
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain();
    v12 = NSObject._rawHashValue(seed:)(v11);
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
      v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
      v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v20 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        v21 = v20;
        return 0;
      }
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  unint64_t v23;
  _QWORD *v24;
  id v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceObject);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1, &demangling cache variable for type metadata for _SetStorage<ARReferenceObject>, &lazy cache variable for type metadata for ARReferenceObject, 0x1E0C89608, (void (*)(unint64_t))specialized _NativeSet.resize(capacity:));
    v30 = (_QWORD *)v22;
    v23 = *(_QWORD *)(v22 + 16);
    if (*(_QWORD *)(v22 + 24) <= v23)
    {
      v27 = v23 + 1;
      v28 = v8;
      specialized _NativeSet.resize(capacity:)(v27);
      v24 = v30;
    }
    else
    {
      v24 = (_QWORD *)v22;
      v25 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v24);
    *v3 = (uint64_t)v24;
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain();
    v12 = NSObject._rawHashValue(seed:)(v11);
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceObject);
      v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
      v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v20 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        v21 = v20;
        return 0;
      }
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v12 = *v3;
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C78]);
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C80]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  type metadata accessor for Entity();
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4648], MEMORY[0x1E0CD4658]);
  result = dispatch thunk of Hashable._rawHashValue(seed:)();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = ~v9;
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4648], MEMORY[0x1E0CD4660]);
    do
    {
      result = dispatch thunk of static Equatable.== infix(_:_:)();
      if ((result & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v10;
    }
    while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v11 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * a2) = v5;
  v12 = *(_QWORD *)(v11 + 16);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (!v13)
  {
    *(_QWORD *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8);
  }
  v9 = *v3;
  v10 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
    v12 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * a2);
    v13 = static NSObject.== infix(_:_:)();

    if ((v13 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v15 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * a2);
        v16 = static NSObject.== infix(_:_:)();

        if ((v16 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v17 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * a2) = a1;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    *(_QWORD *)(v17 + 16) = v20;
}

{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8);
  }
  v9 = *v3;
  v10 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceObject);
    v12 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * a2);
    v13 = static NSObject.== infix(_:_:)();

    if ((v13 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v15 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * a2);
        v16 = static NSObject.== infix(_:_:)();

        if ((v16 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v17 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * a2) = a1;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    *(_QWORD *)(v17 + 16) = v20;
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationPeer(uint64_t a1)
{
  return type metadata accessor for AccessibilityComponent.RotorType(a1, (uint64_t *)&type metadata singleton initialization cache for GroupActivitiesSynchronizationPeer);
}

uint64_t outlined init with copy of SynchronizationPeerID(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of GroupActivitiesSynchronizationPeer(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GroupActivitiesSynchronizationPeer(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t base witness table accessor for Equatable in GroupActivitiesSynchronizationPeer()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationPeer and conformance GroupActivitiesSynchronizationPeer, type metadata accessor for GroupActivitiesSynchronizationPeer, (uint64_t)&protocol conformance descriptor for GroupActivitiesSynchronizationPeer);
}

uint64_t sub_1D95A0734()
{
  return 16;
}

__n128 sub_1D95A0740(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1D95A074C()
{
  return GroupActivitiesSynchronizationService.$entities.getter();
}

uint64_t sub_1D95A0770()
{
  return 16;
}

__n128 sub_1D95A077C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for GroupActivitiesSynchronizationPeer(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB4250]);
}

uint64_t destroy for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2)
{
  return destroy for GroupActivitiesSynchronizationPeer(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB4250]);
}

uint64_t initializeWithCopy for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for GroupActivitiesSynchronizationPeer(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB4250]);
}

uint64_t assignWithCopy for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for GroupActivitiesSynchronizationPeer(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB4250]);
}

uint64_t initializeWithTake for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for GroupActivitiesSynchronizationPeer(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB4250]);
}

uint64_t assignWithTake for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for GroupActivitiesSynchronizationPeer(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB4250]);
}

uint64_t getEnumTagSinglePayload for GroupActivitiesSynchronizationPeer()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D95A07DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB4250]);
}

uint64_t storeEnumTagSinglePayload for GroupActivitiesSynchronizationPeer()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D95A07F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB4250]);
}

uint64_t type metadata completion function for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for GroupActivitiesSynchronizationPeer(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB4250]);
}

void type metadata completion function for GroupActivitiesSynchronizationService()
{
  unint64_t v0;

  type metadata accessor for Published<Set<Entity>>();
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

uint64_t method lookup function for GroupActivitiesSynchronizationService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.entities.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.$entities.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.__allocating_init(session:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.entity(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.owner(of:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.giveOwnership(of:toPeer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.__fromCore(peerID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.__toCore(peerID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.startSync()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.stopSync()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

void type metadata accessor for Published<Set<Entity>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<Set<Entity>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<Entity>);
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Set<Entity>>);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for GroupActivitiesSynchronizationPeer(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t initializeBufferWithCopyOfBuffer for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1, a2, v6);
}

uint64_t destroy for GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2)
{
  return destroy for GroupActivitiesSynchronizationPeer(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t destroy for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;

  v4 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t initializeWithCopy for GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for GroupActivitiesSynchronizationPeer(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t initializeWithCopy for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  return a1;
}

uint64_t assignWithCopy for GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for GroupActivitiesSynchronizationPeer(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t assignWithCopy for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  return a1;
}

uint64_t initializeWithTake for GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for GroupActivitiesSynchronizationPeer(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t initializeWithTake for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  return a1;
}

uint64_t assignWithTake for GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for GroupActivitiesSynchronizationPeer(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t assignWithTake for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupActivitiesSynchronizationComponent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D95A0B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for GroupActivitiesSynchronizationComponent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D95A0BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;

  v7 = a5(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t type metadata completion function for GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for GroupActivitiesSynchronizationPeer(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
}

uint64_t type metadata completion function for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata instantiation function for GroupActivitiesSynchronizationService.SynchronizationError()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t storeEnumTagSinglePayload for GroupActivitiesSynchronizationService.SynchronizationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D95A0CC8 + 4 * byte_1D95E39E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D95A0CFC + 4 * byte_1D95E39E0[v4]))();
}

uint64_t sub_1D95A0CFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D95A0D04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D95A0D0CLL);
  return result;
}

uint64_t sub_1D95A0D18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D95A0D20);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D95A0D24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D95A0D2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in GroupActivitiesSynchronizationService<A>.SynchronizationError()
{
  JUMPOUT(0x1DF091B94);
}

_UNKNOWN **base witness table accessor for Component in GroupActivitiesSynchronizationComponent()
{
  return &protocol witness table for GroupActivitiesSynchronizationComponent;
}

unint64_t lazy protocol witness table accessor for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for GroupActivitiesSynchronizationComponent.CodingKeys, &unk_1E9F43C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for GroupActivitiesSynchronizationComponent.CodingKeys, &unk_1E9F43C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for GroupActivitiesSynchronizationComponent.CodingKeys, &unk_1E9F43C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for GroupActivitiesSynchronizationComponent.CodingKeys, &unk_1E9F43C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys);
  }
  return result;
}

uint64_t outlined init with take of GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GroupActivitiesSynchronizationComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for GroupActivitiesSynchronizationComponent.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for GroupActivitiesSynchronizationComponent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D95A0EFC + 4 * byte_1D95E39EA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D95A0F1C + 4 * byte_1D95E39EF[v4]))();
}

_BYTE *sub_1D95A0EFC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D95A0F1C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D95A0F24(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D95A0F2C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D95A0F34(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D95A0F3C(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTag for GroupActivitiesSynchronizationComponent.CodingKeys()
{
  return 0;
}

void *type metadata accessor for GroupActivitiesSynchronizationComponent.CodingKeys()
{
  return &unk_1E9F43C48;
}

uint64_t closure #1 in Array<A>.first(with:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in Array<A>.first(with:)(a1) & 1;
}

uint64_t static ParticleEmitterComponent.Presets.magic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(_QWORD *, _QWORD);
  void (*v30)(_QWORD *, _QWORD);
  void (*v31)(_QWORD *, _QWORD);
  void (*v32)(_QWORD *, _QWORD);
  void (*v33)(_QWORD *, _QWORD);
  void (*v34)(_QWORD *, _QWORD);
  void (*v35)(_QWORD *, _QWORD);
  void (*v36)(_QWORD *, _QWORD);
  void (*v37)(_QWORD *, _QWORD);
  void (*v38)(_QWORD *, _QWORD);
  void (*v39)(_QWORD *, _QWORD);
  void (*v40)(_QWORD *, _QWORD);
  void (*v41)(_QWORD *, _QWORD);
  void (*v42)(_QWORD *, _QWORD);
  void (*v43)(_QWORD *, _QWORD);
  void (*v44)(_QWORD *, _QWORD);
  void (*v45)(_QWORD *, _QWORD);
  void (*v46)(_QWORD *, _QWORD);
  void (*v47)(_QWORD *, _QWORD);
  void (*v48)(_QWORD *, _QWORD);
  void (*v49)(_QWORD *, _QWORD);
  void (*v50)(_QWORD *, _QWORD);
  void (*v51)(_QWORD *, _QWORD);
  void (*v52)(_QWORD *, _QWORD);
  void (*v53)(_QWORD *, _QWORD);
  void (*v54)(_QWORD *, _QWORD);
  void (*v55)(_QWORD *, _QWORD);
  void (*v56)(_QWORD *, _QWORD);
  void (*v57)(_QWORD *, _QWORD);
  void (*v58)(_QWORD *, _QWORD);
  void (*v59)(char *, _QWORD, uint64_t);
  char *v60;
  uint64_t v61;
  void (*v62)(_QWORD *, _QWORD);
  void (*v63)(_QWORD *, _QWORD);
  void (*v64)(_QWORD *, _QWORD);
  void (*v65)(_QWORD *, _QWORD);
  void (*v66)(_QWORD *, _QWORD);
  void (*v67)(_QWORD *, _QWORD);
  void (*v68)(_QWORD *, _QWORD);
  void (*v69)(_QWORD *, _QWORD);
  void (*v70)(_QWORD *, _QWORD);
  void (*v71)(_QWORD *, _QWORD);
  void (*v72)(_QWORD *, _QWORD);
  void (*v73)(char *, _QWORD, uint64_t);
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  void *v79;
  id v80;
  void *v81;
  id v82;
  void (*v83)(_QWORD *, _QWORD);
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, _QWORD, uint64_t, uint64_t);
  char *v94;
  void (*v95)(_QWORD *, _QWORD);
  char *v96;
  void (*v97)(char *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t);
  char *v132;
  _QWORD v133[5];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter?);
  MEMORY[0x1E0C80A78](v2);
  v124 = (char *)&v99 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence?);
  MEMORY[0x1E0C80A78](v4);
  v123 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode();
  v116 = *(_QWORD *)(v117 - 8);
  MEMORY[0x1E0C80A78](v117);
  v115 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder();
  *(_QWORD *)&v113 = *(_QWORD *)(v114 - 8);
  MEMORY[0x1E0C80A78](v114);
  v112 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = (void (*)(char *, uint64_t))type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve();
  v111 = *((_QWORD *)v131 - 1);
  MEMORY[0x1E0C80A78](v131);
  v127 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode();
  v108 = *(_QWORD *)(v130 - 8);
  MEMORY[0x1E0C80A78](v130);
  v125 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode();
  v110 = *(_QWORD *)(v129 - 8);
  MEMORY[0x1E0C80A78](v129);
  v126 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for ParticleEmitterComponent.SpawnOccasion();
  v107 = *(_QWORD *)(v109 - 8);
  MEMORY[0x1E0C80A78](v109);
  v106 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for ParticleEmitterComponent.SimulationSpace();
  v104 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105);
  v103 = (char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for ParticleEmitterComponent.EmitterShape();
  v101 = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102);
  v14 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for ParticleEmitterComponent.BirthLocation();
  v15 = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v100);
  v17 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ParticleEmitterComponent.BirthDirection();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v99 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence();
  v121 = *(_QWORD *)(v122 - 8);
  MEMORY[0x1E0C80A78](v122);
  v128 = (char *)&v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v132 = (char *)&v99 - v24;
  v120 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter();
  v119 = *(_QWORD *)(v120 - 8);
  MEMORY[0x1E0C80A78](v120);
  v118 = (char *)&v99 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v99 - v27;
  ParticleEmitterComponent.init()();
  ParticleEmitterComponent.ParticleEmitter.init()();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.init()();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E0CD51C8], v18);
  ParticleEmitterComponent.birthDirection.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x1E0CD5180], v100);
  ParticleEmitterComponent.birthLocation.setter();
  ParticleEmitterComponent.emissionDirection.setter();
  ParticleEmitterComponent.emissionDuration.setter();
  ParticleEmitterComponent.emissionDurationVariation.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v14, *MEMORY[0x1E0CD4EB0], v102);
  ParticleEmitterComponent.emitterShape.setter();
  ParticleEmitterComponent.emitterShapeSize.setter();
  ParticleEmitterComponent.idleDuration.setter();
  ParticleEmitterComponent.idleDurationVariation.setter();
  ParticleEmitterComponent.shouldLoop.setter();
  ParticleEmitterComponent.particlesInheritTransform.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v104 + 104))(v103, *MEMORY[0x1E0CD51F8], v105);
  ParticleEmitterComponent.fieldSimulationSpace.setter();
  ParticleEmitterComponent.spawnInheritsParentColor.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v107 + 104))(v106, *MEMORY[0x1E0CD51A0], v109);
  ParticleEmitterComponent.spawnOccasion.setter();
  ParticleEmitterComponent.spawnSpreadFactor.setter();
  ParticleEmitterComponent.spawnSpreadFactorVariation.setter();
  ParticleEmitterComponent.spawnVelocityFactor.setter();
  ParticleEmitterComponent.speed.setter();
  ParticleEmitterComponent.speedVariation.setter();
  ParticleEmitterComponent.warmupDuration.setter();
  ParticleEmitterComponent.resetSimulation()();
  v29 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  v29(v133, 0);
  v30 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  v30(v133, 0);
  v31 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  v31(v133, 0);
  v32 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  v32(v133, 0);
  v33 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  v33(v133, 0);
  v34 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  v34(v133, 0);
  v35 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  v35(v133, 0);
  LODWORD(v109) = *MEMORY[0x1E0CD4F38];
  v110 = *(_QWORD *)(v110 + 104);
  ((void (*)(char *))v110)(v126);
  v36 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  v36(v133, 0);
  v37 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  v37(v133, 0);
  v38 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  v38(v133, 0);
  LODWORD(v107) = *MEMORY[0x1E0CD50D0];
  v108 = *(_QWORD *)(v108 + 104);
  ((void (*)(char *))v108)(v125);
  v39 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  v39(v133, 0);
  v40 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  v40(v133, 0);
  v41 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  v41(v133, 0);
  v42 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  v42(v133, 0);
  v43 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  v43(v133, 0);
  v44 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  v44(v133, 0);
  v45 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  v45(v133, 0);
  v46 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  v46(v133, 0);
  v47 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  v47(v133, 0);
  v48 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  v48(v133, 0);
  v49 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  v49(v133, 0);
  v50 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  v50(v133, 0);
  v51 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  v51(v133, 0);
  v52 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  v52(v133, 0);
  LODWORD(v106) = *MEMORY[0x1E0CD4F08];
  v111 = *(_QWORD *)(v111 + 104);
  ((void (*)(char *))v111)(v127);
  v53 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  v53(v133, 0);
  v54 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  v54(v133, 0);
  v55 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  v55(v133, 0);
  v56 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  v56(v133, 0);
  v57 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  v57(v133, 0);
  v58 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v58(v133, 0);
  v59 = *(void (**)(char *, _QWORD, uint64_t))(v113 + 104);
  v60 = v112;
  v61 = v114;
  v59(v112, *MEMORY[0x1E0CD50F0], v114);
  v62 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  v62(v133, 0);
  v63 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  v63(v133, 0);
  v64 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  v113 = xmmword_1D95E2340;
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  v64(v133, 0);
  v65 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  v65(v133, 0);
  CGColorCreateGenericRGB(255.0, 0.0, 116.0, 1.0);
  v66 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  v66(v133, 0);
  CGColorCreateGenericRGB(255.0, 216.0, 0.0, 1.0);
  v67 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  v67(v133, 0);
  CGColorCreateGenericRGB(120.0, 0.0, 255.0, 1.0);
  v68 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.endColorA.setter();
  v68(v133, 0);
  CGColorCreateGenericRGB(0.0, 255.0, 136.0, 1.0);
  v69 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.endColorB.setter();
  v69(v133, 0);
  v70 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  v70(v133, 0);
  v71 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  v71(v133, 0);
  v72 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  v72(v133, 0);
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.setter();
  v73 = *(void (**)(char *, _QWORD, uint64_t))(v116 + 104);
  v74 = v115;
  v75 = v117;
  v73(v115, *MEMORY[0x1E0CD4F70], v117);
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.setter();
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  ((void (*)(char *, _QWORD, uint64_t))v110)(v126, v109, v129);
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  ((void (*)(char *, _QWORD, uint64_t))v108)(v125, v107, v130);
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  v76 = v128;
  ((void (*)(char *, _QWORD, void (*)(char *, uint64_t)))v111)(v127, v106, v131);
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v59(v60, *MEMORY[0x1E0CD50E0], v61);
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  CGColorCreateGenericRGB(88.0, 0.0, 255.0, 0.04);
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  CGColorCreateGenericRGB(0.0, 255.0, 97.0, 0.04);
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  CGColorCreateGenericRGB(0.0, 130.0, 255.0, 1.0);
  ParticleEmitterComponent.ParticleEmitter.endColorA.setter();
  CGColorCreateGenericRGB(255.0, 0.0, 47.0, 1.0);
  ParticleEmitterComponent.ParticleEmitter.endColorB.setter();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  v77 = v28;
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.setter();
  v73(v74, *MEMORY[0x1E0CD4F68], v75);
  v78 = v76;
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.setter();
  type metadata accessor for TextureResource();
  v79 = (void *)MEMORY[0x1DF090310](0xD000000000000010, 0x80000001D95DCA10);
  v80 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v79);

  if (one-time initialization token for textureLoader != -1)
    swift_once();
  v81 = (void *)textureLoader;
  v133[3] = &type metadata for TextureLoader;
  v133[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v133[0] = v81;
  v82 = v81;
  static TextureResource.load(named:in:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);

  v83 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  v83(v133, 0);
  v84 = v118;
  ParticleEmitterComponent.mainEmitter.getter();
  ParticleEmitterComponent.ParticleEmitter.image.getter();
  v130 = a1;
  v85 = v119;
  v131 = *(void (**)(char *, uint64_t))(v119 + 8);
  v86 = v120;
  v131(v84, v120);
  v87 = v77;
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  v88 = v121;
  v89 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
  v90 = v123;
  v91 = v78;
  v92 = v122;
  v89(v123, v91, v122);
  v93 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56);
  v93(v90, 0, 1, v92);
  ParticleEmitterComponent.ParticleEmitter.imageSequence.setter();
  v94 = v132;
  v89(v90, v132, v92);
  v93(v90, 0, 1, v92);
  v95 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.imageSequence.setter();
  v95(v133, 0);
  v96 = v124;
  (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v124, v87, v86);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v96, 0, 1, v86);
  ParticleEmitterComponent.spawnedEmitter.setter();
  v97 = *(void (**)(char *, uint64_t))(v88 + 8);
  v97(v128, v92);
  v97(v94, v92);
  return ((uint64_t (*)(char *, uint64_t))v131)(v87, v86);
}

Swift::Bool __swiftcall RKARProbePlacementManager.removeProbe(for:)(ARAnchor *a1)
{
  ARAnchor *v1;
  ARAnchor *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  ARAnchor *v23;
  id v24;
  ARAnchor *v25;
  uint64_t *v26;
  ARAnchor *v27;
  ARAnchor *v28;
  unint64_t v29;
  uint64_t v30;
  ARAnchor *v31;
  NSUUID *v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Bool v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  int v42;
  __objc2_ivar *v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  char v46;
  void *v47;
  id v48;
  uint64_t v49;
  char v50;
  char *v51;
  unint64_t v52;
  char v53;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v55;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  ARAnchor *v61;
  void (*v62)(char *, uint64_t);
  id v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69[48];

  v2 = v1;
  v4 = type metadata accessor for Scene.AnchorCollection();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1E0C80A78](v66);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v10);
  v65 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v67 = (uint64_t)&v57 - v13;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v57 - v15;
  v17 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_opt_self();
  v21 = swift_dynamicCastObjCClass();
  if (v21)
  {
    v64 = v9;
    v58 = v7;
    v59 = v5;
    v60 = v4;
    v22 = (void *)v21;
    v23 = a1;
    v24 = objc_msgSend(v22, sel_identifier);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v20, (uint64_t)v69);
    swift_endAccess();
    v62 = *(void (**)(char *, uint64_t))(v18 + 8);
    v62(v20, v17);
    swift_beginAccess();
    v25 = v23;
    v63 = v22;
    v26 = (uint64_t *)specialized MutableCollection._halfStablePartition(isSuffixElement:)(v2->_anon_30, v22);
    v27 = v25;

    v28 = v2;
    v29 = *(_QWORD *)v2->_anon_30;
    if (v29 >> 62)
    {
      swift_bridgeObjectRetain();
      v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v30 >= (uint64_t)v26)
      {
LABEL_4:
        v31 = v28;
        specialized Array.replaceSubrange<A>(_:with:)((uint64_t)v26, v30);
        swift_endAccess();
        v32 = -[ARAnchor identifier](v27, sel_identifier);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v33 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56);
        v34 = 1;
        v33(v16, 0, 1, v17);
        v35 = *(void **)&v28->_anon_30[8];
        v61 = v27;
        if (v35)
        {
          v36 = objc_msgSend(v35, sel_identifier);
          v37 = v67;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          v34 = 0;
          v38 = (uint64_t)v64;
        }
        else
        {
          v38 = (uint64_t)v64;
          v37 = v67;
        }
        v33((char *)v37, v34, 1, v17);
        v40 = v38 + *(int *)(v66 + 48);
        outlined init with copy of UUID?((uint64_t)v16, v38);
        outlined init with copy of UUID?(v37, v40);
        v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
        if (v41(v38, 1, v17) == 1)
        {
          outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v37, &demangling cache variable for type metadata for UUID?);
          outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
          v42 = v41(v40, 1, v17);
          v43 = &stru_1E9F49000;
          v28 = v61;
          v44 = (void (*)(uint64_t, uint64_t))v62;
          if (v42 == 1)
          {
            outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v38, &demangling cache variable for type metadata for UUID?);
LABEL_15:
            v47 = *(void **)&v31->_anon_30[8];
            *(_QWORD *)&v31->_anon_30[8] = 0;

            *(_OWORD *)&v31->_anon_30[16] = 0u;
            *(_OWORD *)&v31->_anon_30[32] = 0u;
            v31->_anon_30[48] = 1;
            goto LABEL_16;
          }
        }
        else
        {
          v45 = v65;
          outlined init with copy of UUID?(v38, v65);
          if (v41(v40, 1, v17) != 1)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v20, v40, v17);
            lazy protocol witness table accessor for type UUID and conformance UUID();
            v46 = dispatch thunk of static Equatable.== infix(_:_:)();
            v44 = (void (*)(uint64_t, uint64_t))v62;
            v62(v20, v17);
            outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v67, &demangling cache variable for type metadata for UUID?);
            outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
            v44(v45, v17);
            outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v38, &demangling cache variable for type metadata for UUID?);
            v43 = &stru_1E9F49000;
            v28 = v61;
            if ((v46 & 1) != 0)
              goto LABEL_15;
LABEL_16:
            v48 = objc_msgSend(v63, (SEL)v43[121].offs);
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            v49 = UUID.hashValue.getter();
            v44((uint64_t)v20, v17);
            v26 = (uint64_t *)&v31->_anon_30[56];
            swift_beginAccess();
            if (!*(_QWORD *)(*(_QWORD *)&v31->_anon_30[56] + 16)
              || (specialized __RawDictionaryStorage.find<A>(_:)(v49), (v50 & 1) == 0))
            {
              swift_endAccess();
              v39 = 0;
              goto LABEL_23;
            }
            swift_endAccess();
            swift_unownedRetainStrong();
            swift_retain();
            v51 = v58;
            dispatch thunk of Scene.anchors.getter();
            swift_release();
            Scene.AnchorCollection.removeNinja(_:)();
            (*(void (**)(char *, uint64_t))(v59 + 8))(v51, v60);
            swift_beginAccess();
            v52 = specialized __RawDictionaryStorage.find<A>(_:)(v49);
            if ((v53 & 1) == 0)
            {
LABEL_21:
              swift_endAccess();
              swift_release();
              v39 = 1;
LABEL_23:

              return v39;
            }
            v18 = v52;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v55 = *v26;
            v68 = *v26;
            *v26 = 0x8000000000000000;
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
LABEL_20:
              specialized _NativeDictionary._delete(at:)(v18, v55);
              *v26 = v55;
              swift_release();
              swift_bridgeObjectRelease();
              goto LABEL_21;
            }
LABEL_27:
            specialized _NativeDictionary.copy()();
            v55 = v68;
            goto LABEL_20;
          }
          outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v67, &demangling cache variable for type metadata for UUID?);
          outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
          v44 = (void (*)(uint64_t, uint64_t))v62;
          v62((char *)v45, v17);
          v43 = &stru_1E9F49000;
          v28 = v61;
        }
        outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v38, &demangling cache variable for type metadata for (UUID?, UUID?));
        goto LABEL_16;
      }
    }
    else
    {
      v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v30 >= (uint64_t)v26)
        goto LABEL_4;
    }
    __break(1u);
    goto LABEL_27;
  }
  return 0;
}

uint64_t RKARProbePlacementManager.__deallocating_deinit()
{
  uint64_t v0;

  swift_unownedRelease();
  swift_unownedRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RKARProbePlacementManager()
{
  return objc_opt_self();
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  _QWORD v21[2];
  unint64_t v22;
  uint64_t v23;
  id v24;

  v3 = v2;
  v24 = a2;
  v5 = type metadata accessor for UUID();
  v23 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v21 - v10;
  if (!(a1 >> 62))
  {
    v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_3;
    return 0;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12)
    return 0;
LABEL_3:
  v13 = 0;
  v21[1] = v3;
  v22 = a1 & 0xC000000000000001;
  v14 = (id *)a1;
  while (1)
  {
    v15 = v22 ? (id)MEMORY[0x1DF0906F4](v13, a1, v9) : *(id *)(a1 + 8 * v13 + 32);
    v16 = v15;
    v17 = objc_msgSend(v15, sel_identifier);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v18 = objc_msgSend(v24, sel_identifier);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v3 = static UUID.== infix(_:_:)();
    a1 = *(_QWORD *)(v23 + 8);
    ((void (*)(char *, uint64_t))a1)(v7, v5);
    ((void (*)(char *, uint64_t))a1)(v11, v5);

    if ((v3 & 1) != 0)
      return v13;
    v19 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    ++v13;
    a1 = (unint64_t)v14;
    if (v19 == v12)
      return 0;
  }
}

uint64_t specialized RKARProbePlacementManager.init(engine:scene:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  *(_DWORD *)(v2 + 32) = 0;
  v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 40) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v2 + 48) = v5;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_QWORD *)(v2 + 88) = 0;
  *(_BYTE *)(v2 + 96) = 1;
  *(_QWORD *)(v2 + 104) = specialized Dictionary.init(dictionaryLiteral:)(v5);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  swift_unownedRetain();
  swift_unownedRetain();
  return v2;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(_QWORD *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  unint64_t v26;
  void (*v27)(unint64_t, uint64_t);
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void *v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v42;
  _QWORD v43[2];
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;

  v5 = type metadata accessor for UUID();
  v47 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (unint64_t)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v43 - v9;
  v11 = swift_bridgeObjectRetain();
  v12 = specialized Collection.firstIndex(where:)(v11, a2);
  v14 = v13;
  swift_bridgeObjectRelease();
  if (!v2)
  {
    v46 = v10;
    v43[1] = 0;
    if ((v14 & 1) != 0)
    {
      if (*a1 >> 62)
      {
        swift_bridgeObjectRetain();
        v12 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        return *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
    }
    else
    {
      v15 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_55;
      if (*a1 >> 62)
      {
LABEL_56:
        swift_bridgeObjectRetain();
        v42 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v15 != v42)
          goto LABEL_6;
      }
      else if (v15 != *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_6:
        v15 = v12 + 5;
        v44 = v7;
        v45 = v5;
        v5 = (uint64_t)v46;
        v48 = a1;
        while (1)
        {
          v16 = v15 - 4;
          v17 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            v19 = v12;
            v18 = (char *)(v15 - 4);
            v20 = (id)MEMORY[0x1DF0906F4]();
          }
          else
          {
            if ((v16 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_46:
              __break(1u);
LABEL_47:
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              __break(1u);
              goto LABEL_56;
            }
            if (v16 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_46;
            v18 = (char *)(v15 - 4);
            v19 = v12;
            v20 = *(id *)(v17 + 8 * v15);
          }
          v21 = v20;
          v22 = objc_msgSend(v20, sel_identifier);
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          v23 = v5;
          v24 = a2;
          v25 = objc_msgSend(a2, sel_identifier);
          v26 = v44;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          LOBYTE(v25) = static UUID.== infix(_:_:)();
          v27 = *(void (**)(unint64_t, uint64_t))(v47 + 8);
          v28 = v26;
          v29 = v45;
          v27(v28, v45);
          v27(v23, v29);

          if ((v25 & 1) != 0)
          {
            a2 = v24;
            v12 = v19;
            v5 = (uint64_t)v46;
            v7 = (unint64_t)v18;
            a1 = v48;
            goto LABEL_33;
          }
          v7 = (unint64_t)v18;
          a2 = v24;
          v12 = v19;
          v5 = (uint64_t)v46;
          if (v18 != (char *)v19)
            break;
LABEL_32:
          v39 = __OFADD__(v12++, 1);
          a1 = v48;
          if (v39)
            goto LABEL_48;
LABEL_33:
          if (__OFADD__(v7, 1))
            goto LABEL_47;
          if (*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            v40 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v40 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          ++v15;
          if (v7 + 1 == v40)
            return v12;
        }
        a1 = v48;
        v30 = *v48;
        if ((*v48 & 0xC000000000000001) != 0)
        {
          v31 = (id)MEMORY[0x1DF0906F4](v19, *v48);
          v30 = *a1;
          if ((*a1 & 0xC000000000000001) == 0)
          {
LABEL_18:
            if ((v7 & 0x8000000000000000) != 0)
              goto LABEL_51;
            if (v7 >= *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_52;
            v32 = *(id *)(v30 + 8 * v15);
            goto LABEL_21;
          }
        }
        else
        {
          if ((v19 & 0x8000000000000000) != 0)
            goto LABEL_49;
          if (v19 >= *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_50;
          v31 = *(id *)(v30 + 8 * v19 + 32);
          if ((v30 & 0xC000000000000001) == 0)
            goto LABEL_18;
        }
        v32 = (id)MEMORY[0x1DF0906F4](v7, v30);
        v30 = *a1;
LABEL_21:
        isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v30;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v30 < 0 || (v30 & 0x4000000000000000) != 0)
          specialized _ArrayBuffer._consumeAndCreateNew()(v30);
        v34 = *(void **)((v30 & 0xFFFFFFFFFFFFFF8) + 8 * v12 + 0x20);
        *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 8 * v12 + 0x20) = v32;

        specialized Array._endMutation()();
        a1 = v48;
        v35 = *v48;
        v36 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v35;
        if (!v36 || v35 < 0 || (v35 & 0x4000000000000000) != 0)
          specialized _ArrayBuffer._consumeAndCreateNew()(v35);
        if ((v7 & 0x8000000000000000) != 0)
          goto LABEL_53;
        v37 = v35 & 0xFFFFFFFFFFFFFF8;
        if (v7 >= *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_54;
        v38 = *(void **)(v37 + 8 * v15);
        *(_QWORD *)(v37 + 8 * v15) = v31;

        specialized Array._endMutation()();
        goto LABEL_32;
      }
    }
  }
  return v12;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!(*v3 >> 62))
    {
      if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v19 < v2)
    goto LABEL_31;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v9 = v8 + v6;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v5 = *v3;
  if (*v3 >> 62)
    goto LABEL_34;
  v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  v9 = v8 - v7;
  if (__OFADD__(v8, v6))
    goto LABEL_36;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if (v5 >> 62)
    goto LABEL_37;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain();
  v5 = MEMORY[0x1DF090700](v8, v12, 1, v5);
  swift_bridgeObjectRelease();
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  type metadata accessor for AREnvironmentProbeAnchor();
  swift_arrayDestroy();
  if (!v6)
    return specialized Array._endMutation()();
  if (!(v5 >> 62))
  {
    v13 = *(_QWORD *)(v11 + 16);
    v14 = v13 - v2;
    if (!__OFSUB__(v13, v2))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v14 = v20 - v2;
  if (__OFSUB__(v20, v2))
    goto LABEL_40;
LABEL_21:
  if ((v14 & 0x8000000000000000) == 0)
  {
    v15 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v15 + 8 * v14)
      memmove((void *)(v11 + 32 + 8 * v4), v15, 8 * v14);
    if (!(v5 >> 62))
    {
      v16 = *(_QWORD *)(v11 + 16);
      v17 = v16 + v6;
      if (!__OFADD__(v16, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v17;
        return specialized Array._endMutation()();
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v17 = v21 + v6;
    if (!__OFADD__(v21, v6))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0CB09D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

unint64_t type metadata accessor for AREnvironmentProbeAnchor()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AREnvironmentProbeAnchor;
  if (!lazy cache variable for type metadata for AREnvironmentProbeAnchor)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AREnvironmentProbeAnchor);
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v10 = static _DictionaryStorage.allocate(capacity:)();
  v11 = (_QWORD *)v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  v13 = *(int *)(v6 + 48);
  v14 = v10 + 64;
  v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26[1] = a1;
  v16 = a1 + v15;
  v17 = *(_QWORD *)(v7 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v16, (uint64_t)v9, a2);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
    if ((v19 & 1) != 0)
      break;
    v20 = result;
    *(_QWORD *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v21 = v11[6];
    v22 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v20, v9, v22);
    *(_QWORD *)(v11[7] + 8 * v20) = *(_QWORD *)&v9[v13];
    v23 = v11[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v11[2] = v25;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void ARView.resizeDrawable(size:scaleFactor:)(double a1, double a2, double a3)
{
  char *v3;
  char *v4;
  id v8;
  float v9;
  float v10;
  float v11;
  float v12;
  void *v14;
  uint64_t v15;
  int v16;
  void *v17;

  if ((v3[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] & 1) == 0)
  {
    v4 = v3;
    v8 = *(id *)&v3[OBJC_IVAR____TtC10RealityKit6ARView_renderView];
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v8, sel_setFrame_);

    if (v4[OBJC_IVAR____TtC10RealityKit6ARView_useCAMetalLayer] == 1)
    {
      type metadata accessor for __ServiceLocator();
      static __ServiceLocator.shared.getter();
      dispatch thunk of __ServiceLocator.renderService.getter();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
      type metadata accessor for RERenderManager();
      swift_dynamicCast();
      dispatch thunk of RERenderManager.getLayerSize(_:)();
      v10 = a1 * a3;
      v11 = a2 * a3;
      if (v12 != v10 || v9 != v11)
      {
        dispatch thunk of RERenderManager.waitUntilScheduled()();
        v14 = *(void **)&v4[OBJC_IVAR____TtC10RealityKit6ARView_backingLayer];
        if (!v14)
          goto LABEL_17;
        v15 = OBJC_IVAR____TtC10RealityKit6ARView_enablePresentsWithTransaction;
        objc_msgSend(v14, sel_setPresentsWithTransaction_, v4[OBJC_IVAR____TtC10RealityKit6ARView_enablePresentsWithTransaction]);
        if (v4[v15])
          v16 = 2;
        else
          v16 = 0;
        *(_DWORD *)&v4[OBJC_IVAR____TtC10RealityKit6ARView_presentsWithTransactionFrames] = v16;
        dispatch thunk of RERenderManager.setLayerSize(_:_:_:)();
      }
      swift_release();
    }
    v17 = *(void **)&v4[OBJC_IVAR____TtC10RealityKit6ARView_backingLayer];
    if (v17)
    {
      objc_msgSend(v17, sel_setContentsScale_, a3);
      return;
    }
    __break(1u);
LABEL_17:
    __break(1u);
  }
}

uint64_t ARView.__services.getter()
{
  type metadata accessor for __ServiceLocator();
  return static __ServiceLocator.shared.getter();
}

uint64_t ARView._lastHitEntityForGestures.getter()
{
  return ARView._lastHitEntityForGestures.getter();
}

{
  swift_beginAccess();
  return swift_retain();
}

uint64_t ARView._lastHitEntityForGestures.setter(uint64_t a1)
{
  return ARView._lastHitEntityForGestures.setter(a1, &OBJC_IVAR____TtC10RealityKit6ARView__lastHitEntityForGestures);
}

uint64_t (*ARView._lastHitEntityForGestures.modify())()
{
  swift_beginAccess();
  return ARView._lastHitEntityForGestures.modify;
}

uint64_t ARView.scene.getter()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene);
  if (result)
    return swift_retain();
  __break(1u);
  return result;
}

uint64_t ARView.__delegatePrivate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate;
  swift_beginAccess();
  return MEMORY[0x1DF091D08](v1);
}

uint64_t ARView.__delegatePrivate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ARView.__delegatePrivate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF091D08](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ARView.__delegatePrivate.modify;
}

void ARView.__delegatePrivate.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

_QWORD *key path getter for ARView.__automaticallyInvokesStartTrigger : ARView@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  char v6;

  if (*(_QWORD *)(*result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    dispatch thunk of Scene.__interactionService.getter();
    v4 = v3;
    swift_release();
    ObjectType = swift_getObjectType();
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 80))(ObjectType, v4);
    result = (_QWORD *)swift_unknownObjectRelease();
    *a2 = v6 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unsigned __int8 *key path setter for ARView.__automaticallyInvokesStartTrigger : ARView(unsigned __int8 *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  if (*(_QWORD *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    v2 = *result;
    swift_retain();
    dispatch thunk of Scene.__interactionService.getter();
    v4 = v3;
    swift_release();
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 88))(v2, ObjectType, v4);
    return (unsigned __int8 *)swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.__automaticallyInvokesStartTrigger.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    dispatch thunk of Scene.__interactionService.getter();
    v2 = v1;
    swift_release();
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 80))(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t ARView.__automaticallyInvokesStartTrigger.setter(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    v2 = result;
    swift_retain();
    dispatch thunk of Scene.__interactionService.getter();
    v4 = v3;
    swift_release();
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v4 + 88))(v2 & 1, ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*ARView.__automaticallyInvokesStartTrigger.modify(uint64_t (*result)(uint64_t result, char a2)))(uint64_t result, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  char v7;

  v2 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  *(_QWORD *)result = v1;
  *((_QWORD *)result + 1) = v2;
  if (*(_QWORD *)(v1 + v2))
  {
    v3 = (char *)result + 16;
    swift_retain();
    dispatch thunk of Scene.__interactionService.getter();
    v5 = v4;
    swift_release();
    ObjectType = swift_getObjectType();
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 80))(ObjectType, v5);
    swift_unknownObjectRelease();
    *v3 = v7 & 1;
    return ARView.__automaticallyInvokesStartTrigger.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.__automaticallyInvokesStartTrigger.modify(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;

  v2 = *(_QWORD *)(*(_QWORD *)result + *(_QWORD *)(result + 8));
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
LABEL_5:
      v3 = *(unsigned __int8 *)(result + 16);
      swift_retain();
      dispatch thunk of Scene.__interactionService.getter();
      v5 = v4;
      swift_release();
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 88))(v3, ObjectType, v5);
      return swift_unknownObjectRelease();
    }
    __break(1u);
  }
  if (v2)
    goto LABEL_5;
  __break(1u);
  return result;
}

void ARView.debugOptions.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
    *a1 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions);
  else
    __break(1u);
}

void ARView.debugOptions.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (!v3)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  v4 = *a1;
  if ((((unint64_t)*a1 >> 1) & 1) == ((*(_BYTE *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions) & 2) == 0))
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
    swift_release();
    if (REServiceLocatorGetFrameStatisticsHUD())
    {
      MEMORY[0x1DF090D9C]();
      REFrameStatisticsHUDSetRenderLayer();
    }
  }
  v5 = *(char **)(v1 + v2);
  if (!v5)
    goto LABEL_10;
  v6 = *(_QWORD *)&v5[OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions];
  *(_QWORD *)&v5[OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions] = v4;
  if (v4 != v6)
  {
    v8 = v6;
    v9 = v4;
    v7 = v5;
    RKARSystem.updateDebugVisualization(with:oldOptions:)((RealityKit::ARView::DebugOptions)&v9, (RealityKit::ARView::DebugOptions)&v8);

  }
}

void (*ARView.debugOptions.modify(void (*result)(uint64_t *a1)))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  *((_QWORD *)result + 1) = v1;
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    *(_QWORD *)result = *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions);
    return ARView.debugOptions.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.debugOptions.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  ARView.debugOptions.setter(&v1);
}

uint64_t key path getter for ARView.environment : ARView@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  int v7;
  char v8;
  char v9;

  v3 = *a1 + OBJC_IVAR____TtC10RealityKit6ARView_environment;
  swift_beginAccess();
  v4 = *(_DWORD *)(v3 + 8);
  v5 = *(void **)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 32);
  v7 = *(_DWORD *)(v3 + 40);
  v8 = *(_BYTE *)(v3 + 44);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_DWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  v9 = *(_BYTE *)(v3 + 24);
  *(_BYTE *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = v6;
  *(_DWORD *)(a2 + 40) = v7;
  *(_BYTE *)(a2 + 44) = v8;
  outlined copy of ARView.Environment.Background.Value(v5, v9);
  return swift_retain();
}

void key path setter for ARView.environment : ARView(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  void *v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  void *v10;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  v4 = (void *)a1[2];
  v5 = a1[4];
  v6 = *((_DWORD *)a1 + 10);
  v7 = *((_BYTE *)a1 + 44);
  v8 = *a2 + OBJC_IVAR____TtC10RealityKit6ARView_environment;
  v9 = *((_BYTE *)a1 + 24);
  swift_beginAccess();
  v10 = *(void **)(v8 + 16);
  *(_QWORD *)v8 = v2;
  *(_DWORD *)(v8 + 8) = v3;
  *(_QWORD *)(v8 + 16) = v4;
  LOBYTE(v2) = *(_BYTE *)(v8 + 24);
  *(_BYTE *)(v8 + 24) = v9;
  *(_QWORD *)(v8 + 32) = v5;
  *(_DWORD *)(v8 + 40) = v6;
  *(_BYTE *)(v8 + 44) = v7;
  outlined copy of ARView.Environment.Background.Value(v4, v9);
  swift_retain();
  outlined consume of ARView.Environment.Background.Value(v10, v2);
  swift_release();
  ARView.updateEnvironment()();
}

uint64_t ARView.environment.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  int v7;
  char v8;
  char v9;

  v3 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_environment;
  swift_beginAccess();
  v4 = *(_DWORD *)(v3 + 8);
  v5 = *(void **)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 32);
  v7 = *(_DWORD *)(v3 + 40);
  v8 = *(_BYTE *)(v3 + 44);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v9 = *(_BYTE *)(v3 + 24);
  *(_BYTE *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 44) = v8;
  outlined copy of ARView.Environment.Background.Value(v5, v9);
  return swift_retain();
}

void ARView.environment.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  void *v10;
  char v11;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v5 = *((_BYTE *)a1 + 24);
  v6 = a1[4];
  v7 = *((_DWORD *)a1 + 10);
  v8 = *((_BYTE *)a1 + 44);
  v9 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_environment;
  swift_beginAccess();
  v10 = *(void **)(v9 + 16);
  *(_QWORD *)v9 = v2;
  *(_DWORD *)(v9 + 8) = v3;
  *(_QWORD *)(v9 + 16) = v4;
  v11 = *(_BYTE *)(v9 + 24);
  *(_BYTE *)(v9 + 24) = v5;
  *(_QWORD *)(v9 + 32) = v6;
  *(_DWORD *)(v9 + 40) = v7;
  *(_BYTE *)(v9 + 44) = v8;
  outlined consume of ARView.Environment.Background.Value(v10, v11);
  swift_release();
  ARView.updateEnvironment()();
}

void (*ARView.environment.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return ARView.environment.modify;
}

void ARView.environment.modify(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
    ARView.updateEnvironment()();
}

void ARView.cameraTransform.getter()
{
  uint64_t v0;
  uint64_t active;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    active = dispatch thunk of Scene.internalActiveCamera.getter();
    swift_release();
    if (active)
    {
      type metadata accessor for Entity();
      HasTransform.transformMatrix(relativeTo:)();
      Transform.init(matrix:)();
      swift_release();
    }
    else
    {
      Transform.init()();
    }
  }
  else
  {
    __break(1u);
  }
}

_QWORD *key path getter for ARView.audioListener : ARView@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  if (*(_QWORD *)(*result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    v3 = dispatch thunk of Scene.__audioListener.getter();
    result = (_QWORD *)swift_release();
    *a2 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path setter for ARView.audioListener : ARView(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (*(_QWORD *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    swift_retain();
    dispatch thunk of Scene.__audioListener.setter();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.audioListener.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    dispatch thunk of Scene.__audioListener.getter();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t ARView.audioListener.setter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    dispatch thunk of Scene.__audioListener.setter();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*ARView.audioListener.modify(uint64_t (*result)(uint64_t result, char a2)))(uint64_t result, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  *((_QWORD *)result + 1) = v1;
  *((_QWORD *)result + 2) = v2;
  if (*(_QWORD *)(v1 + v2))
  {
    v3 = (uint64_t *)result;
    swift_retain();
    v4 = dispatch thunk of Scene.__audioListener.getter();
    swift_release();
    *v3 = v4;
    return ARView.audioListener.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.audioListener.modify(uint64_t result, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + *(_QWORD *)(result + 16));
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
      swift_retain();
      swift_retain();
      dispatch thunk of Scene.__audioListener.setter();
      swift_release();
      return swift_release();
    }
    __break(1u);
  }
  else if (v2)
  {
    swift_retain();
    dispatch thunk of Scene.__audioListener.setter();
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t ARView.__environmentEntity.getter()
{
  return ARView._lastHitEntityForGestures.getter();
}

uint64_t ARView.__environmentEntity.setter(uint64_t a1)
{
  return ARView._lastHitEntityForGestures.setter(a1, &OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity);
}

uint64_t (*ARView.__environmentEntity.modify())()
{
  swift_beginAccess();
  return ARView._lastHitEntityForGestures.modify;
}

uint64_t ARView.__enableAutomaticFrameRate.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate);
  swift_beginAccess();
  return *v1;
}

uint64_t ARView.__enableAutomaticFrameRate.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ARView.__enableAutomaticFrameRate.modify())()
{
  swift_beginAccess();
  return ARView._lastHitEntityForGestures.modify;
}

float ARView.__preferredFrameRate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t ARView.__preferredFrameRate.setter(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ARView.__preferredFrameRate.modify())()
{
  swift_beginAccess();
  return ARView._lastHitEntityForGestures.modify;
}

id ARView.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id ARView.init(coder:)(void *a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  id v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  objc_class *v22;
  id v23;
  id v24;
  char *v25;
  id v26;
  void *v27;
  unsigned __int8 v28;
  void *v29;
  unsigned int v30;
  void *v31;
  unsigned int v32;
  id v33;
  id result;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  objc_super v38;

  v3 = type metadata accessor for __AssetRef();
  v37 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView__lastHitEntityForGestures] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView__scene] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate + 8] = 0;
  swift_unknownObjectWeakInit();
  v1[OBJC_IVAR____TtC10RealityKit6ARView_initialized] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView_currentIBL] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView__enableGroundingShadowsByDefault] = 2;
  v6 = &v1[OBJC_IVAR____TtC10RealityKit6ARView_environment];
  *(_QWORD *)v6 = 0x200000000;
  *((_DWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 4) = 0;
  *((_DWORD *)v6 + 10) = 0;
  v6[44] = 6;
  *((_QWORD *)v6 + 2) = 0;
  v6[24] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate] = 1;
  *(_DWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_singleTapGesture] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView_engineWasRunningWhenLastInTheForeground] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_backingLayer] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView_useCAMetalLayer] = 1;
  v1[OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput] = 0;
  v7 = &v1[OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy];
  *(_DWORD *)v7 = 0;
  v7[4] = 2;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView___parallaxBackgroundProbe] = 1;
  *(_DWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_layerHandle] = 0;
  v8 = &v1[OBJC_IVAR____TtC10RealityKit6ARView_updateSubscription];
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_QWORD *)v8 + 4) = 0;
  v9 = &v1[OBJC_IVAR____TtC10RealityKit6ARView_renderSubscription];
  *((_QWORD *)v9 + 4) = 0;
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_arSystem] = 0;
  v10 = OBJC_IVAR____TtC10RealityKit6ARView_renderView;
  v11 = objc_allocWithZone((Class)type metadata accessor for ARRenderView());
  v12 = v1;
  *(_QWORD *)&v1[v10] = objc_msgSend(v11, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit6ARView_interfaceOrientation] = 1;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation] = 1;
  v12[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] = 0;
  v12[OBJC_IVAR____TtC10RealityKit6ARView_updateAfterCounterRotation] = 0;
  v13 = &v12[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
  v14 = MEMORY[0x1E0DEE9D8];
  v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8], &demangling cache variable for type metadata for _DictionaryStorage<String, [(String, CGFloat)]>);
  v16 = specialized Dictionary.init(dictionaryLiteral:)(v14, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  v17 = specialized Dictionary.init(dictionaryLiteral:)(v14, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceImage>>);
  v18 = specialized Dictionary.init(dictionaryLiteral:)(v14, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceObject>>);
  *(_DWORD *)v13 = 0x10000;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = v15;
  *((_QWORD *)v13 + 3) = v16;
  *((_QWORD *)v13 + 4) = v17;
  *((_QWORD *)v13 + 5) = v18;
  *((_OWORD *)v13 + 3) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  v12[OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation] = 0;
  v12[OBJC_IVAR____TtC10RealityKit6ARView___disableComposition] = 0;
  v12[OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices] = 0;
  v12[OBJC_IVAR____TtC10RealityKit6ARView_enablePresentsWithTransaction] = 1;
  *(_DWORD *)&v12[OBJC_IVAR____TtC10RealityKit6ARView_presentsWithTransactionFrames] = 0;
  v19 = &v12[OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode];
  v20 = *MEMORY[0x1E0CD4920];
  v21 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v19, v20, v21);
  *(_DWORD *)&v12[OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions] = 545;
  v12[OBJC_IVAR____TtC10RealityKit6ARView___disableStatisticsRendering] = 0;

  v22 = (objc_class *)type metadata accessor for ARView();
  v38.receiver = v12;
  v38.super_class = v22;
  v23 = objc_msgSendSuper2(&v38, sel_initWithCoder_, a1);
  v24 = v23;
  if (!v23)
    goto LABEL_11;
  v25 = (char *)v23;
  specialized ARView.commonInit(_:)();
  v26 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v27 = (void *)MEMORY[0x1DF090310](0xD000000000000022, 0x80000001D95DD6F0);
  v28 = objc_msgSend(v26, sel_BOOLForKey_, v27);

  if ((v28 & 1) == 0
    && ((v29 = (void *)MEMORY[0x1DF090310](0xD000000000000016, 0x80000001D95DD720),
         v30 = objc_msgSend(a1, sel_containsValueForKey_, v29),
         v29,
         !v30)
     || (v31 = (void *)MEMORY[0x1DF090310](0xD000000000000016, 0x80000001D95DD720),
         v32 = objc_msgSend(a1, sel_decodeBoolForKey_, v31),
         v31,
         !v32))
    || (v33 = MTLCreateSystemDefaultDevice()) == 0)
  {
LABEL_10:

LABEL_11:
    return v24;
  }
  result = objc_msgSend(v33, sel_supportsFamily_, 1004);
  if (!(_DWORD)result)
  {
LABEL_9:
    swift_unknownObjectRelease();
    goto LABEL_10;
  }
  v35 = *(_BYTE **)&v25[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (v35)
  {
    v35[OBJC_IVAR____TtC10RealityKit10RKARSystem_groundingShadowMode] = 1;
    swift_retain();
    v36 = v35;
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v3);
    RERenderGraphEmitterAssetSetRuntimeSettingBool();
    RERenderGraphEmitterAssetSetRuntimeSettingBool();

    type metadata accessor for RKARSystemCore();
    static RKARSystemCore.generateDecimatedMeshes.setter();
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

id ARView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

id ARView.init(frame:)(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  id v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  objc_super v27;

  *(_QWORD *)&v4[OBJC_IVAR____TtC10RealityKit6ARView__lastHitEntityForGestures] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC10RealityKit6ARView__scene] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate + 8] = 0;
  swift_unknownObjectWeakInit();
  v4[OBJC_IVAR____TtC10RealityKit6ARView_initialized] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView_currentIBL] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView__enableGroundingShadowsByDefault] = 2;
  v9 = &v4[OBJC_IVAR____TtC10RealityKit6ARView_environment];
  *(_QWORD *)v9 = 0x200000000;
  *((_DWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 4) = 0;
  *((_DWORD *)v9 + 10) = 0;
  v9[44] = 6;
  *((_QWORD *)v9 + 2) = 0;
  v9[24] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate] = 1;
  *(_DWORD *)&v4[OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC10RealityKit6ARView_singleTapGesture] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView_engineWasRunningWhenLastInTheForeground] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC10RealityKit6ARView_backingLayer] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView_useCAMetalLayer] = 1;
  v4[OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput] = 0;
  v10 = &v4[OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy];
  *(_DWORD *)v10 = 0;
  v10[4] = 2;
  *(_QWORD *)&v4[OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView___parallaxBackgroundProbe] = 1;
  *(_DWORD *)&v4[OBJC_IVAR____TtC10RealityKit6ARView_layerHandle] = 0;
  v11 = &v4[OBJC_IVAR____TtC10RealityKit6ARView_updateSubscription];
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_QWORD *)v11 + 4) = 0;
  v12 = &v4[OBJC_IVAR____TtC10RealityKit6ARView_renderSubscription];
  *((_QWORD *)v12 + 4) = 0;
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *(_QWORD *)&v4[OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC10RealityKit6ARView_arSystem] = 0;
  v13 = OBJC_IVAR____TtC10RealityKit6ARView_renderView;
  v14 = objc_allocWithZone((Class)type metadata accessor for ARRenderView());
  v15 = v4;
  *(_QWORD *)&v4[v13] = objc_msgSend(v14, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v15[OBJC_IVAR____TtC10RealityKit6ARView_interfaceOrientation] = 1;
  *(_QWORD *)&v15[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation] = 1;
  v15[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] = 0;
  v15[OBJC_IVAR____TtC10RealityKit6ARView_updateAfterCounterRotation] = 0;
  v16 = &v15[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
  v17 = MEMORY[0x1E0DEE9D8];
  v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8], &demangling cache variable for type metadata for _DictionaryStorage<String, [(String, CGFloat)]>);
  v19 = specialized Dictionary.init(dictionaryLiteral:)(v17, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  v20 = specialized Dictionary.init(dictionaryLiteral:)(v17, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceImage>>);
  v21 = specialized Dictionary.init(dictionaryLiteral:)(v17, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceObject>>);
  *(_DWORD *)v16 = 0x10000;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = v18;
  *((_QWORD *)v16 + 3) = v19;
  *((_QWORD *)v16 + 4) = v20;
  *((_QWORD *)v16 + 5) = v21;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  v15[OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation] = 0;
  v15[OBJC_IVAR____TtC10RealityKit6ARView___disableComposition] = 0;
  v15[OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices] = 0;
  v15[OBJC_IVAR____TtC10RealityKit6ARView_enablePresentsWithTransaction] = 1;
  *(_DWORD *)&v15[OBJC_IVAR____TtC10RealityKit6ARView_presentsWithTransactionFrames] = 0;
  v22 = &v15[OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode];
  v23 = *MEMORY[0x1E0CD4920];
  v24 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v22, v23, v24);
  *(_DWORD *)&v15[OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions] = 545;
  v15[OBJC_IVAR____TtC10RealityKit6ARView___disableStatisticsRendering] = 0;

  v27.receiver = v15;
  v27.super_class = (Class)type metadata accessor for ARView();
  v25 = objc_msgSendSuper2(&v27, sel_initWithFrame_, a1, a2, a3, a4);
  specialized ARView.commonInit(_:)();

  return v25;
}

char *ARView.__allocating_init(frame:cameraMode:)(char *a1, double a2, double a3, double a4, double a5)
{
  objc_class *v5;
  char v6;
  char *result;
  _BYTE *v8;
  char *v9;
  _BYTE *v10;
  unsigned __int8 v11;

  v6 = *a1;
  result = (char *)objc_msgSend(objc_allocWithZone(v5), sel_initWithFrame_, a2, a3, a4, a5);
  v8 = *(_BYTE **)&result[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (v8)
  {
    v11 = v8[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode];
    v8[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode] = v6;
    v9 = result;
    v10 = v8;
    RKARSystem.cameraMode.didset(&v11);

    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.__allocating_init(frame:cameraMode:automaticallyConfigureSession:)(char *a1, char a2, double a3, double a4, double a5, double a6)
{
  objc_class *v6;
  id v13;

  v13 = objc_allocWithZone(v6);
  ARView.init(frame:cameraMode:automaticallyConfigureSession:)(a1, a2, a3, a4, a5, a6);
}

void ARView.init(frame:cameraMode:automaticallyConfigureSession:)(char *a1, char a2, double a3, double a4, double a5, double a6)
{
  _BYTE *v6;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  id v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _BYTE *v28;
  unsigned __int8 v29;
  _BYTE *v30;
  char *v31;
  char v32;
  unsigned __int8 v34[24];
  objc_super v35;

  v32 = *a1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10RealityKit6ARView__lastHitEntityForGestures] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10RealityKit6ARView__scene] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate + 8] = 0;
  swift_unknownObjectWeakInit();
  v6[OBJC_IVAR____TtC10RealityKit6ARView_initialized] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView_currentIBL] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView__enableGroundingShadowsByDefault] = 2;
  v11 = &v6[OBJC_IVAR____TtC10RealityKit6ARView_environment];
  *(_QWORD *)v11 = 0x200000000;
  *((_DWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_DWORD *)v11 + 10) = 0;
  v11[44] = 6;
  *((_QWORD *)v11 + 2) = 0;
  v11[24] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate] = 1;
  *(_DWORD *)&v6[OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10RealityKit6ARView_singleTapGesture] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView_engineWasRunningWhenLastInTheForeground] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10RealityKit6ARView_backingLayer] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView_useCAMetalLayer] = 1;
  v6[OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput] = 0;
  v12 = &v6[OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy];
  *(_DWORD *)v12 = 0;
  v12[4] = 2;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView___parallaxBackgroundProbe] = 1;
  *(_DWORD *)&v6[OBJC_IVAR____TtC10RealityKit6ARView_layerHandle] = 0;
  v13 = &v6[OBJC_IVAR____TtC10RealityKit6ARView_updateSubscription];
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((_QWORD *)v13 + 4) = 0;
  v14 = &v6[OBJC_IVAR____TtC10RealityKit6ARView_renderSubscription];
  *((_QWORD *)v14 + 4) = 0;
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10RealityKit6ARView_arSystem] = 0;
  v15 = OBJC_IVAR____TtC10RealityKit6ARView_renderView;
  v16 = objc_allocWithZone((Class)type metadata accessor for ARRenderView());
  v17 = v6;
  *(_QWORD *)&v6[v15] = objc_msgSend(v16, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v17[OBJC_IVAR____TtC10RealityKit6ARView_interfaceOrientation] = 1;
  *(_QWORD *)&v17[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation] = 1;
  v17[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] = 0;
  v17[OBJC_IVAR____TtC10RealityKit6ARView_updateAfterCounterRotation] = 0;
  v18 = &v17[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
  v19 = MEMORY[0x1E0DEE9D8];
  v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8], &demangling cache variable for type metadata for _DictionaryStorage<String, [(String, CGFloat)]>);
  v21 = specialized Dictionary.init(dictionaryLiteral:)(v19, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  v22 = specialized Dictionary.init(dictionaryLiteral:)(v19, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceImage>>);
  v23 = specialized Dictionary.init(dictionaryLiteral:)(v19, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceObject>>);
  *(_DWORD *)v18 = 0x10000;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = v20;
  *((_QWORD *)v18 + 3) = v21;
  *((_QWORD *)v18 + 4) = v22;
  *((_QWORD *)v18 + 5) = v23;
  *((_OWORD *)v18 + 3) = 0u;
  *((_OWORD *)v18 + 4) = 0u;
  v17[OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation] = 0;
  v17[OBJC_IVAR____TtC10RealityKit6ARView___disableComposition] = 0;
  v17[OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices] = 0;
  v17[OBJC_IVAR____TtC10RealityKit6ARView_enablePresentsWithTransaction] = 1;
  *(_DWORD *)&v17[OBJC_IVAR____TtC10RealityKit6ARView_presentsWithTransactionFrames] = 0;
  v24 = &v17[OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode];
  v25 = *MEMORY[0x1E0CD4920];
  v26 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v24, v25, v26);
  *(_DWORD *)&v17[OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions] = 545;
  v17[OBJC_IVAR____TtC10RealityKit6ARView___disableStatisticsRendering] = 0;

  v35.receiver = v17;
  v35.super_class = (Class)type metadata accessor for ARView();
  v27 = (char *)objc_msgSendSuper2(&v35, sel_initWithFrame_, a3, a4, a5, a6);
  specialized ARView.commonInit(_:)();
  v28 = *(_BYTE **)&v27[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (v28)
  {
    v29 = v28[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode];
    v28[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode] = v32;
    v34[0] = v29;
    v30 = v28;
    RKARSystem.cameraMode.didset(v34);

    v31 = &v27[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
    swift_beginAccess();
    v31[2] = a2 & 1;
  }
  else
  {
    __break(1u);
  }
}

_BYTE *ARView.__allocating_init(frame:forRealityView:)(char a1, double a2, double a3, double a4, double a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  return ARView.init(frame:forRealityView:)(a1, a2, a3, a4, a5);
}

_BYTE *ARView.init(frame:forRealityView:)(char a1, double a2, double a3, double a4, double a5)
{
  _BYTE *v5;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  id v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  objc_super v30;

  *(_QWORD *)&v5[OBJC_IVAR____TtC10RealityKit6ARView__lastHitEntityForGestures] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10RealityKit6ARView__scene] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate + 8] = 0;
  swift_unknownObjectWeakInit();
  v5[OBJC_IVAR____TtC10RealityKit6ARView_initialized] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView_currentIBL] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView__enableGroundingShadowsByDefault] = 2;
  v11 = &v5[OBJC_IVAR____TtC10RealityKit6ARView_environment];
  *(_QWORD *)v11 = 0x200000000;
  *((_DWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_DWORD *)v11 + 10) = 0;
  v11[44] = 6;
  *((_QWORD *)v11 + 2) = 0;
  v11[24] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate] = 1;
  *(_DWORD *)&v5[OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10RealityKit6ARView_singleTapGesture] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView_engineWasRunningWhenLastInTheForeground] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10RealityKit6ARView_backingLayer] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView_useCAMetalLayer] = 1;
  v5[OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput] = 0;
  v12 = &v5[OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy];
  *(_DWORD *)v12 = 0;
  v12[4] = 2;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView___parallaxBackgroundProbe] = 1;
  *(_DWORD *)&v5[OBJC_IVAR____TtC10RealityKit6ARView_layerHandle] = 0;
  v13 = &v5[OBJC_IVAR____TtC10RealityKit6ARView_updateSubscription];
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((_QWORD *)v13 + 4) = 0;
  v14 = &v5[OBJC_IVAR____TtC10RealityKit6ARView_renderSubscription];
  *((_QWORD *)v14 + 4) = 0;
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC10RealityKit6ARView_arSystem] = 0;
  v15 = OBJC_IVAR____TtC10RealityKit6ARView_renderView;
  v16 = objc_allocWithZone((Class)type metadata accessor for ARRenderView());
  v17 = v5;
  *(_QWORD *)&v5[v15] = objc_msgSend(v16, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v17[OBJC_IVAR____TtC10RealityKit6ARView_interfaceOrientation] = 1;
  *(_QWORD *)&v17[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation] = 1;
  v17[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] = 0;
  v17[OBJC_IVAR____TtC10RealityKit6ARView_updateAfterCounterRotation] = 0;
  v18 = &v17[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
  v19 = MEMORY[0x1E0DEE9D8];
  v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8], &demangling cache variable for type metadata for _DictionaryStorage<String, [(String, CGFloat)]>);
  v21 = specialized Dictionary.init(dictionaryLiteral:)(v19, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  v22 = specialized Dictionary.init(dictionaryLiteral:)(v19, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceImage>>);
  v23 = specialized Dictionary.init(dictionaryLiteral:)(v19, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceObject>>);
  *(_DWORD *)v18 = 0x10000;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = v20;
  *((_QWORD *)v18 + 3) = v21;
  *((_QWORD *)v18 + 4) = v22;
  *((_QWORD *)v18 + 5) = v23;
  *((_OWORD *)v18 + 3) = 0u;
  *((_OWORD *)v18 + 4) = 0u;
  v17[OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation] = 0;
  v17[OBJC_IVAR____TtC10RealityKit6ARView___disableComposition] = 0;
  v17[OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices] = 0;
  v17[OBJC_IVAR____TtC10RealityKit6ARView_enablePresentsWithTransaction] = 1;
  *(_DWORD *)&v17[OBJC_IVAR____TtC10RealityKit6ARView_presentsWithTransactionFrames] = 0;
  v24 = &v17[OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode];
  v25 = *MEMORY[0x1E0CD4920];
  v26 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v24, v25, v26);
  *(_DWORD *)&v17[OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions] = 545;
  v17[OBJC_IVAR____TtC10RealityKit6ARView___disableStatisticsRendering] = 0;

  v30.receiver = v17;
  v30.super_class = (Class)type metadata accessor for ARView();
  v27 = objc_msgSendSuper2(&v30, sel_initWithFrame_, a2, a3, a4, a5);
  if (v27[OBJC_IVAR____TtC10RealityKit6ARView__enableGroundingShadowsByDefault] == 2)
    v27[OBJC_IVAR____TtC10RealityKit6ARView__enableGroundingShadowsByDefault] = (a1 & 1) == 0;
  v28 = v27;
  specialized ARView.commonInit(_:)();

  return v28;
}

float closure #1 in ARView.extendedDynamicRangeOutput.didset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _BYTE *v4;
  float v5;
  id v6;
  void *v7;
  id v8;
  double v9;
  double v10;
  float *v11;
  float v12;
  int v13;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF091D08](v1);
  if (!v2)
    return 1.0;
  v3 = (char *)v2;
  v4 = (_BYTE *)(v2 + OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput);
  swift_beginAccess();
  v5 = 1.0;
  if (*v4 == 1)
  {
    v6 = objc_msgSend(v3, sel_window);
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(v6, sel_screen);

      objc_msgSend(v8, sel_currentEDRHeadroom);
      v10 = v9;

      v5 = v10;
    }
  }
  v11 = (float *)&v3[OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy];
  swift_beginAccess();
  v12 = *v11;
  v13 = *((unsigned __int8 *)v11 + 4);

  if (v13)
  {
    if (v13 == 1)
    {
      v5 = 1.0;
      if (v12 > 1.0)
      {
        if (v12 <= 16.0)
          return v12;
        else
          return 16.0;
      }
    }
  }
  else if (v12 <= 1.0)
  {
    if (v5 > 1.0)
      return 1.0;
  }
  else if (v5 > v12)
  {
    return v12;
  }
  return v5;
}

float thunk for @escaping @callee_guaranteed () -> (@unowned Float)(uint64_t a1)
{
  float (*v1)(uint64_t);
  uint64_t v2;
  float v3;

  v1 = *(float (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  return v3;
}

uint64_t ARView.extendedDynamicRangeOutput.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput);
  swift_beginAccess();
  return *v1;
}

void ARView.extendedDynamicRangeOutput.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = a1 & 1;
  v5 = (_BYTE *)(v2 + OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a1;
  if (v6 != v4)
  {
    ARView.setupMetalLayer()();
    v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit6ARView__scene);
    if ((*v5 & 1) != 0)
    {
      if (v7)
      {
        swift_retain();
        Scene.coreScene.getter();
        swift_release();
        RESceneAddEDRColorManagementComponent();
        v8 = swift_allocObject();
        swift_unknownObjectWeakInit();
        aBlock[4] = partial apply for closure #1 in ARView.extendedDynamicRangeOutput.didset;
        aBlock[5] = v8;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@unowned Float);
        aBlock[3] = &block_descriptor_6;
        v9 = _Block_copy(aBlock);
        swift_release();
        REEDRColorManagementComponentSetHeadroomCallback();
        _Block_release(v9);
        return;
      }
      __break(1u);
      goto LABEL_9;
    }
    if (!v7)
    {
LABEL_9:
      __break(1u);
      return;
    }
    swift_retain();
    Scene.coreScene.getter();
    swift_release();
    RESceneRemoveEDRColorManagementComponent();
  }
}

void (*ARView.extendedDynamicRangeOutput.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE *v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = (_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput);
  swift_beginAccess();
  *((_BYTE *)v3 + 32) = *v4;
  return ARView.extendedDynamicRangeOutput.modify;
}

void ARView.extendedDynamicRangeOutput.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  ARView.extendedDynamicRangeOutput.setter(*(_BYTE *)(*(_QWORD *)a1 + 32));
  free(v1);
}

uint64_t ARView.edrHeadroomPolicy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy;
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 4);
  *(_DWORD *)a1 = *(_DWORD *)v3;
  *(_BYTE *)(a1 + 4) = v5;
  return result;
}

uint64_t ARView.edrHeadroomPolicy.setter(int *a1)
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 4);
  v4 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy;
  result = swift_beginAccess();
  *(_DWORD *)v4 = v2;
  *(_BYTE *)(v4 + 4) = v3;
  return result;
}

uint64_t (*ARView.edrHeadroomPolicy.modify())()
{
  swift_beginAccess();
  return ARView._lastHitEntityForGestures.modify;
}

uint64_t ARView.__renderGraphEmitter.getter()
{
  return ARView._lastHitEntityForGestures.getter();
}

uint64_t ARView.__renderGraphEmitter.setter(uint64_t a1)
{
  specialized ARView.__renderGraphEmitter.setter(a1);
  return swift_release();
}

void (*ARView.__renderGraphEmitter.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = (_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter);
  swift_beginAccess();
  v3[3] = *v4;
  swift_retain();
  return ARView.__renderGraphEmitter.modify;
}

void ARView.__renderGraphEmitter.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    v4 = swift_retain();
    specialized ARView.__renderGraphEmitter.setter(v4);
    swift_release();
  }
  else
  {
    specialized ARView.__renderGraphEmitter.setter(v3);
  }
  swift_release();
  free(v2);
}

Swift::Void __swiftcall ARView.__setWireframeMode(displayWireframe:)(Swift::Bool displayWireframe)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter);
  swift_beginAccess();
  if (*v2)
  {
    swift_retain();
    dispatch thunk of __RERenderGraphEmitter.setWireframeMode(displayWireframe:)();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t ARView.__forceLocalizedProbes.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes);
  swift_beginAccess();
  return *v1;
}

uint64_t ARView.__forceLocalizedProbes.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ARView.__forceLocalizedProbes.modify())()
{
  swift_beginAccess();
  return ARView._lastHitEntityForGestures.modify;
}

uint64_t ARView.__parallaxBackgroundProbe.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView___parallaxBackgroundProbe);
  swift_beginAccess();
  return *v1;
}

uint64_t ARView.__parallaxBackgroundProbe.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___parallaxBackgroundProbe);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ARView.__parallaxBackgroundProbe.modify())()
{
  swift_beginAccess();
  return ARView._lastHitEntityForGestures.modify;
}

uint64_t ARView.__targetIdentifier.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_layerHandle);
}

uint64_t key path setter for ARView._lastHitEntityForGestures : ARView(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = *a1;
  v6 = (_QWORD *)(*a2 + *a5);
  swift_beginAccess();
  *v6 = v5;
  swift_retain();
  return swift_release();
}

uint64_t ARView.realityFusionSession.getter()
{
  return ARView._lastHitEntityForGestures.getter();
}

uint64_t ARView.realityFusionSession.setter(uint64_t a1)
{
  return ARView._lastHitEntityForGestures.setter(a1, &OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession);
}

uint64_t ARView._lastHitEntityForGestures.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_release();
}

uint64_t (*ARView.realityFusionSession.modify())()
{
  swift_beginAccess();
  return ARView._lastHitEntityForGestures.modify;
}

uint64_t ARView.__interfaceOrientation.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_interfaceOrientation);
}

uint64_t static ARView.__nonARKitModelIdentifiers.getter()
{
  if (one-time initialization token for nonARKitModelIdentifiers != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t ARView.__disableCounterRotation.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation);
  swift_beginAccess();
  return *v1;
}

uint64_t ARView.__disableCounterRotation.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ARView.__disableCounterRotation.modify())()
{
  swift_beginAccess();
  return ARView._lastHitEntityForGestures.modify;
}

uint64_t ARView.__disableComposition.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView___disableComposition);
  swift_beginAccess();
  return *v1;
}

uint64_t ARView.__disableComposition.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___disableComposition);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ARView.__disableComposition.modify())()
{
  swift_beginAccess();
  return ARView._lastHitEntityForGestures.modify;
}

uint64_t ARView.__nonARKitDevices.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices);
  swift_beginAccess();
  return *v1;
}

uint64_t ARView.__nonARKitDevices.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ARView.__nonARKitDevices.modify())()
{
  swift_beginAccess();
  return ARView._lastHitEntityForGestures.modify;
}

dispatch_semaphore_t one-time initialization function for uniqueTokenGenerator()
{
  dispatch_semaphore_t result;

  result = dispatch_semaphore_create(1);
  static ARView.uniqueTokenGenerator = 0;
  qword_1F01D31B8 = (uint64_t)result;
  return result;
}

uint64_t closure #1 in ARView.commonInit(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  result = MEMORY[0x1DF091D08](v2);
  if (result)
  {
    v4 = (void *)result;
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.engine.getter();
    swift_release();
    ARView.commonRenderCallback()();

    return swift_release();
  }
  return result;
}

uint64_t closure #2 in ARView.commonInit(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  double v6;

  v2 = a2 + 16;
  swift_beginAccess();
  result = MEMORY[0x1DF091D08](v2);
  if (result)
  {
    v4 = (void *)result;
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    v5 = dispatch thunk of __ServiceLocator.engine.getter();
    swift_release();
    SceneEvents.Update.deltaTime.getter();
    *(float *)&v6 = v6;
    ARView.doUpdateCallback(engine:deltaTime:)(v5, *(float *)&v6);

    return swift_release();
  }
  return result;
}

uint64_t ARView.doUpdateCallback(engine:deltaTime:)(uint64_t a1, float a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *AllEntitiesArray;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  int v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ComponentByClass;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  char *v55;
  uint64_t v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  char v61;
  id v62;
  id v63;
  char *v64;
  uint64_t v65;
  void *v66;
  id v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t ObjectType;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  id v87;
  unsigned __int8 v88;
  uint64_t v89;

  v3 = v2;
  v83 = a1;
  v89 = *MEMORY[0x1E0C80C00];
  v78 = type metadata accessor for __AnyARKitObject();
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78);
  v76 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Scene.AnchorCollection();
  v81 = *(_QWORD *)(v6 - 8);
  v82 = v6;
  MEMORY[0x1E0C80A78](v6);
  v79 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v80 = (char *)&v76 - v9;
  v10 = type metadata accessor for AntialiasingMode();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _Proto_AntialiasingMode_v1();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v76 - v19;
  v21 = type metadata accessor for OSSignpostID();
  MEMORY[0x1E0C80A78](v21);
  static __REOSLog.UpdateLoop.getter();
  static __RESignpostID.UpdateLoop.getter();
  type metadata accessor for __REOSSignpostScope();
  swift_allocObject();
  __REOSSignpostScope.init(osLog:signpostID:name:)();
  swift_release();
  v84 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  if (!*(_QWORD *)&v2[OBJC_IVAR____TtC10RealityKit6ARView__scene])
  {
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  swift_retain();
  Scene.coreScene.getter();
  swift_release();
  AllEntitiesArray = (char *)RESceneGetAllEntitiesArray();
  v24 = specialized _copyCollectionToContiguousArray<A>(_:)(AllEntitiesArray, v23);
  v86 = v3;
  v25 = &v3[OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v25, v10);
  v26 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (v26 == *MEMORY[0x1E0CD4928])
  {
    v27 = *MEMORY[0x1E0CD52A8];
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 104);
    v28(v20, v27, v14);
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 104);
    if (v26 == *MEMORY[0x1E0CD4920])
    {
      v28(v20, *MEMORY[0x1E0CD5298], v14);
      v27 = *MEMORY[0x1E0CD52A8];
    }
    else
    {
      v27 = *MEMORY[0x1E0CD52A8];
      v28(v20, v27, v14);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
  }
  v28(v17, v27, v14);
  v29 = MEMORY[0x1DF0901B4](v20, v17);
  v30 = *(void (**)(char *, uint64_t))(v15 + 8);
  v30(v17, v14);
  v30(v20, v14);
  v31 = *(_QWORD *)(v24 + 16);
  if (v31)
  {
    v85 = OBJC_IVAR____TtC10RealityKit6ARView_layerHandle;
    swift_retain();
    v32 = 0;
    v33 = 0;
    while (1)
    {
      RECustomMatrixCameraComponentGetComponentType();
      ComponentByClass = REEntityGetComponentByClass();
      REPerspectiveCameraComponentGetComponentType();
      v37 = REEntityGetComponentByClass();
      REOrthographicCameraComponentGetComponentType();
      v38 = REEntityGetComponentByClass();
      v39 = !ComponentByClass && v37 == 0;
      if (!v39 || v38 != 0)
      {
        RECameraViewDescriptorsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        if (RECameraViewDescriptorsComponentCameraViewDescriptorCount())
        {
          RECameraViewDescriptorsComponentCameraViewDescriptorHandleByIndex();
          v41 = RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct();
          v88 = v29 & 1;
          if (!RERenderGraphDataStructGetBool() || ((v29 ^ v88) & 1) != 0)
          {
            MEMORY[0x1DF0910B4](v41, "disableAA", v29 & 1);
            RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct();
          }
        }
        else
        {
          RECameraViewDescriptorsComponentAddViewDescriptor();
          RECameraViewDescriptorsComponentAddSpecifyCommandFromLayer();
          v34 = RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct();
          RERenderGraphDataStructAddFloat4();
          MEMORY[0x1DF0910B4](v34, "disableAA", v29 & 1);
          RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct();
        }
        RERelease();
        if (__OFADD__(v33++, 1))
          break;
      }
      if (v31 == ++v32)
      {
        swift_release();
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_72;
  }
  v33 = 0;
LABEL_25:
  swift_release();
  v42 = v86;
  v43 = v84;
  if (!*(_QWORD *)&v86[v84])
    goto LABEL_73;
  swift_retain();
  v44 = dispatch thunk of Scene.defaultCamera.getter();
  swift_release();
  if (!v44)
  {
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
  }
  v45 = dispatch thunk of Entity.scene.getter();
  swift_release();
  result = swift_release();
  if (v45 && v33 >= 2)
  {
    if (*(_QWORD *)&v42[v43])
    {
      swift_retain();
      v47 = v80;
      dispatch thunk of Scene.anchors.getter();
      result = swift_release();
      if (*(_QWORD *)&v42[v43])
      {
        swift_retain();
        v48 = dispatch thunk of Scene.defaultCamera.getter();
        result = swift_release();
        if (v48)
        {
          Scene.AnchorCollection.removeNinja(_:)();
LABEL_40:
          swift_release();
          (*(void (**)(char *, uint64_t))(v81 + 8))(v47, v82);
          goto LABEL_41;
        }
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_79;
  }
  if (!v33)
  {
    if (!*(_QWORD *)&v42[v43])
    {
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    swift_retain();
    v49 = dispatch thunk of Scene.defaultCamera.getter();
    result = swift_release();
    v47 = v79;
    if (!v49)
    {
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    Entity.turnIntoNinja()();
    result = swift_release();
    if (!*(_QWORD *)&v42[v43])
    {
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    swift_retain();
    dispatch thunk of Scene.anchors.getter();
    result = swift_release();
    if (!*(_QWORD *)&v42[v43])
    {
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    swift_retain();
    v50 = dispatch thunk of Scene.defaultCamera.getter();
    result = swift_release();
    if (!v50)
    {
LABEL_88:
      __break(1u);
      return result;
    }
    Scene.AnchorCollection.appendNinja(_:)();
    goto LABEL_40;
  }
LABEL_41:
  ARView.updateWindowRotation()();
  objc_msgSend(*(id *)&v42[OBJC_IVAR____TtC10RealityKit6ARView_renderView], sel_bounds);
  v52 = v51;
  v54 = v53;
  ARView.updateARSession(restartIfPaused:)(0);
  v55 = &v42[OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession];
  swift_beginAccess();
  if (*(_QWORD *)v55)
  {
    swift_retain();
    v56 = dispatch thunk of RealityFusionSession.sharedCount.getter();
    swift_release();
    if (v56 == 1)
    {
      if (*(_QWORD *)v55)
      {
        swift_retain();
        v57 = (void *)dispatch thunk of RealityFusionSession.serviceManager.getter();
        swift_release();
        if (v57)
        {
          v58 = (id)RFServiceManagerGetARKitDataProvider();

          if (v58)
          {
            v59 = (id)RFARKitDataProviderGetARSession();
            v60 = objc_msgSend(v42, sel_session);
            type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for ARSession);
            v61 = static NSObject.== infix(_:_:)();

            if ((v61 & 1) == 0)
            {
              v62 = objc_msgSend(v42, sel_session);
              v63 = v62;
              if (*(_QWORD *)v55)
              {
                v87 = v62;
                swift_retain();
                v63 = v63;
                v64 = v76;
                __AnyARKitObject.init<A>(_:)();
                RealityFusionSession.configure(with:)();
                swift_release();
                (*(void (**)(char *, uint64_t))(v77 + 8))(v64, v78);
              }

              v58 = v63;
            }

          }
        }
      }
    }
  }
  v65 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  v66 = *(void **)&v42[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (!v66)
    goto LABEL_75;
  v67 = v66;
  RKARSystem.update(engine:viewportSize:)(v83, v52, v54);

  if (!*(_QWORD *)&v42[v43])
    goto LABEL_76;
  swift_retain();
  v68 = Scene.coreScene.getter();
  swift_release();
  if (*(_QWORD *)v55)
  {
    swift_retain();
    RealityFusionSession.update(scene:with:by:)(v68, v42);
    swift_release();
  }
  ARView.checkProximity()();
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  v69 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  result = REPhysicsDebugRendererIsEnabled();
  if ((result & 1) == 0)
  {
    v70 = *(_QWORD *)&v42[v65];
    if (v70)
    {
      if ((*(_BYTE *)(v70 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions) & 1) != 0
        && MEMORY[0x1DF0912B8](v69)
        && REServiceLocatorGetCollisionWorld())
      {
        REDebugRendererDrawCollisionWorld();
      }
      goto LABEL_61;
    }
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
LABEL_61:
  result = REPhysicsDebugRendererIsEnabled();
  if (!(_DWORD)result)
    goto LABEL_68;
  v71 = *(_QWORD *)&v42[v65];
  if (!v71)
    goto LABEL_81;
  v72 = *(_QWORD *)&v42[v43];
  if ((*(_BYTE *)(v71 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions) & 1) == 0)
  {
    if (v72)
    {
      swift_retain();
      Scene.coreScene.getter();
      swift_release();
      RESceneRemovePhysicsDebugComponent();
      goto LABEL_68;
    }
    goto LABEL_82;
  }
  if (!v72)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  swift_retain();
  Scene.coreScene.getter();
  swift_release();
  RESceneSetPhysicsDebugDrawLevel();
LABEL_68:
  v73 = &v42[OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate];
  swift_beginAccess();
  result = MEMORY[0x1DF091D08](v73);
  if (result)
  {
    v74 = *((_QWORD *)v73 + 1);
    ObjectType = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t, float))(v74 + 32))(v42, ObjectType, v74, a2);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ARView.shutdownEngine()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void (*v3)(uint64_t *, _QWORD);
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_useCAMetalLayer) == 1)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.renderService.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
    type metadata accessor for RERenderManager();
    swift_dynamicCast();
    dispatch thunk of RERenderManager.unregisterRenderLayer(_:)();
    swift_release();
  }
  specialized ARView.__renderGraphEmitter.setter(0);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession);
  swift_beginAccess();
  if (*v2)
  {
    swift_retain();
    v3 = (void (*)(uint64_t *, _QWORD))dispatch thunk of RealityFusionSession.sharedCount.modify();
    if (__OFSUB__(*v4, 1))
    {
      __break(1u);
      return;
    }
    --*v4;
    v3(&v6, 0);
    swift_release();
  }
  v5 = OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView) == 1)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.engine.getter();
    swift_release();
    dispatch thunk of __Engine.__stop()();
    swift_release();
    *(_BYTE *)(v1 + v5) = 0;
  }
}

id ARView.__deallocating_deinit()
{
  char *v0;
  char *v1;
  char *v2;
  id result;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  objc_super v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput];
  result = (id)swift_beginAccess();
  if (*v2 == 1)
  {
    if (!*(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView__scene])
    {
LABEL_11:
      __break(1u);
      return result;
    }
    swift_retain();
    Scene.coreScene.getter();
    swift_release();
    RESceneRemoveEDRColorManagementComponent();
  }
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.sceneService.getter();
  swift_release();
  v4 = v13;
  v5 = v14;
  result = __swift_project_boxed_opaque_existential_1(v12, v13);
  if (!*(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView__scene])
  {
    __break(1u);
    goto LABEL_11;
  }
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v7 = swift_retain();
  v6(v7, v4, v5);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  v8 = *(void **)&v1[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_arSystem] = 0;

  v9 = (uint64_t)&v1[OBJC_IVAR____TtC10RealityKit6ARView_updateSubscription];
  swift_beginAccess();
  if (*(_QWORD *)(v9 + 24))
  {
    outlined init with copy of SynchronizationPeerID(v9, (uint64_t)v12);
    __swift_project_boxed_opaque_existential_1(v12, v13);
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  v10 = (uint64_t)&v1[OBJC_IVAR____TtC10RealityKit6ARView_renderSubscription];
  swift_beginAccess();
  if (*(_QWORD *)(v10 + 24))
  {
    outlined init with copy of SynchronizationPeerID(v10, (uint64_t)v12);
    __swift_project_boxed_opaque_existential_1(v12, v13);
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  ARView.shutdownEngine()();
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for ARView();
  return objc_msgSendSuper2(&v11, sel_dealloc);
}

Swift::Void __swiftcall ARView.onDrawingManagerCreated()()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  char *AllEntitiesArray;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ComponentByClass;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char *v20;

  v1 = v0;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.renderService.getter();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
  type metadata accessor for RERenderManager();
  swift_dynamicCast();
  v2 = *(void **)&v0[OBJC_IVAR____TtC10RealityKit6ARView_backingLayer];
  if (!v2)
  {
    __break(1u);
    goto LABEL_18;
  }
  v3 = v2;
  v4 = dispatch thunk of RERenderManager.registerRenderLayer(_:)();

  *(_DWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_layerHandle] = v4;
  objc_msgSend(v1, sel_bounds);
  v6 = v5;
  v8 = v7;
  objc_msgSend(v1, sel_contentScaleFactor);
  ARView.resizeDrawable(size:scaleFactor:)(v6, v8, v9);
  if (!*(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView__scene])
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  swift_retain();
  Scene.coreScene.getter();
  swift_release();
  AllEntitiesArray = (char *)RESceneGetAllEntitiesArray();
  v12 = specialized _copyCollectionToContiguousArray<A>(_:)(AllEntitiesArray, v11);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v14 = v12 + 32;
    do
    {
      RECustomMatrixCameraComponentGetComponentType();
      ComponentByClass = REEntityGetComponentByClass();
      REPerspectiveCameraComponentGetComponentType();
      v16 = REEntityGetComponentByClass();
      REOrthographicCameraComponentGetComponentType();
      v17 = REEntityGetComponentByClass();
      if (ComponentByClass)
        v18 = 0;
      else
        v18 = v16 == 0;
      if (!v18 || v17 != 0)
      {
        RECameraViewDescriptorsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        RECameraViewDescriptorsComponentClearCameraViewDescriptors();
      }
      v14 += 8;
      --v13;
    }
    while (v13);
  }
  swift_release();
  v20 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter];
  swift_beginAccess();
  if (!*(_QWORD *)v20)
    goto LABEL_19;
  swift_retain();
  dispatch thunk of __RERenderGraphEmitter.unsetup(mgr:)();
  swift_release();
  if (*(_QWORD *)v20)
  {
    swift_retain();
    dispatch thunk of __RERenderGraphEmitter.setup(mgr:)();
    swift_release();
    swift_release();
    return;
  }
LABEL_20:
  __break(1u);
}

uint64_t ARView.commonRenderCallback()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  float v4;
  float v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  void *v11;
  id v12;

  v1 = v0;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  v2 = dispatch thunk of __Engine.hasRenderedThisFrame.getter();
  result = swift_release();
  if ((v2 & 1) == 0)
  {
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.engine.getter();
    swift_release();
    dispatch thunk of __Engine.hasRenderedThisFrame.setter();
    swift_release();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.renderService.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
    type metadata accessor for RERenderManager();
    swift_dynamicCast();
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_useCAMetalLayer) != 1
      || (dispatch thunk of RERenderManager.getLayerSize(_:)(), v5 != 0.0) && v4 != 0.0)
    {
      static __ServiceLocator.shared.getter();
      dispatch thunk of __ServiceLocator.engine.getter();
      swift_release();
      __Engine.coreEngine.getter();
      swift_release();
      REEngineGetCurrentTime();
      dispatch thunk of RERenderManager.createRenderFrameSettings()();
      dispatch thunk of RERenderFrameSettings.setTotalTime(_:)();
      dispatch thunk of RERenderManager.createRenderFrameWorkload()();
      dispatch thunk of RERenderFrameWorkload.configure(_:)();
      v6 = (_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter);
      result = swift_beginAccess();
      if (!*v6)
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      swift_retain();
      dispatch thunk of __RERenderGraphEmitter.execute(mgr:)();
      swift_release();
      specialized static ARView.fulfillPixelCastRequest(renderManager:)();
      specialized static ARView.fulfillPixelCastArrayRequest(renderManager:)();
      v7 = OBJC_IVAR____TtC10RealityKit6ARView_presentsWithTransactionFrames;
      if (*(_DWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_presentsWithTransactionFrames)
        && *(_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_enablePresentsWithTransaction) == 1)
      {
        result = dispatch thunk of RERenderFrameWorkload.commitWithImmediatePresent()();
        v8 = *(_DWORD *)(v1 + v7);
        v9 = v8 != 0;
        v10 = v8 - 1;
        if (!v9)
        {
          __break(1u);
          goto LABEL_17;
        }
        *(_DWORD *)(v1 + v7) = v10;
        if (!v10)
        {
          v11 = *(void **)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_backingLayer);
          if (!v11)
          {
LABEL_18:
            __break(1u);
            return result;
          }
          v12 = v11;
          objc_msgSend(v12, sel_setPresentsWithTransaction_, 0);

        }
      }
      else
      {
        dispatch thunk of RERenderFrameWorkload.commit()();
      }
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t key path getter for ARView.__proto_antialiasingMode_v1 : ARView@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, _QWORD, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for AntialiasingMode();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v9 == *MEMORY[0x1E0CD4928])
  {
    v10 = *MEMORY[0x1E0CD52A8];
    v11 = type metadata accessor for _Proto_AntialiasingMode_v1();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(a2, v10, v11);
  }
  else
  {
    v13 = v9;
    v14 = *MEMORY[0x1E0CD4920];
    v15 = type metadata accessor for _Proto_AntialiasingMode_v1();
    v16 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104);
    if (v13 == v14)
    {
      return v16(a2, *MEMORY[0x1E0CD5298], v15);
    }
    else
    {
      v16(a2, *MEMORY[0x1E0CD52A8], v15);
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
}

uint64_t key path setter for ARView.__proto_antialiasingMode_v1 : ARView(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for _Proto_AntialiasingMode_v1();
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  return ARView.__proto_antialiasingMode_v1.setter((uint64_t)v5);
}

uint64_t ARView.__proto_antialiasingMode_v1.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, _QWORD, uint64_t);
  uint64_t v16;

  v3 = type metadata accessor for AntialiasingMode();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v8 == *MEMORY[0x1E0CD4928])
  {
    v9 = *MEMORY[0x1E0CD52A8];
    v10 = type metadata accessor for _Proto_AntialiasingMode_v1();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(a1, v9, v10);
  }
  else
  {
    v12 = v8;
    v13 = *MEMORY[0x1E0CD4920];
    v14 = type metadata accessor for _Proto_AntialiasingMode_v1();
    v15 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104);
    if (v12 == v13)
    {
      return v15(a1, *MEMORY[0x1E0CD5298], v14);
    }
    else
    {
      v15(a1, *MEMORY[0x1E0CD52A8], v14);
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
  }
}

uint64_t ARView.__proto_antialiasingMode_v1.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  int v12;
  void (*v13)(char *, _QWORD, uint64_t);
  uint64_t v14;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;

  v3 = type metadata accessor for AntialiasingMode();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for _Proto_AntialiasingMode_v1();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v11, a1, v7, v9);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  if (v12 == *MEMORY[0x1E0CD52A8])
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0CD4928], v3);
LABEL_5:
    v14 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v14, v6, v3);
    swift_endAccess();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  }
  v13 = *(void (**)(char *, _QWORD, uint64_t))(v4 + 104);
  if (v12 == *MEMORY[0x1E0CD5298])
  {
    v13(v6, *MEMORY[0x1E0CD4920], v3);
    goto LABEL_5;
  }
  v13(v6, *MEMORY[0x1E0CD4928], v3);
  v16 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v16, v6, v3);
  swift_endAccess();
  v17 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v17(a1, v7);
  return ((uint64_t (*)(char *, uint64_t))v17)(v11, v7);
}

void (*ARView.__proto_antialiasingMode_v1.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  void (*v13)(void *, _QWORD, uint64_t);

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = type metadata accessor for AntialiasingMode();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = malloc(*(_QWORD *)(v5 + 64));
  v3[4] = v6;
  v7 = type metadata accessor for _Proto_AntialiasingMode_v1();
  v3[5] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[6] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v3[7] = malloc(v9);
  v10 = malloc(v9);
  v3[8] = v10;
  v11 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
  swift_beginAccess();
  (*(void (**)(void *, uint64_t, uint64_t))(v5 + 16))(v6, v11, v4);
  v12 = (*(uint64_t (**)(void *, uint64_t))(v5 + 88))(v6, v4);
  if (v12 == *MEMORY[0x1E0CD4928])
  {
    (*(void (**)(void *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0CD52A8], v7);
  }
  else
  {
    v13 = *(void (**)(void *, _QWORD, uint64_t))(v8 + 104);
    if (v12 == *MEMORY[0x1E0CD4920])
    {
      v13(v10, *MEMORY[0x1E0CD5298], v7);
    }
    else
    {
      v13(v10, *MEMORY[0x1E0CD52A8], v7);
      (*(void (**)(void *, uint64_t))(v5 + 8))(v6, v4);
    }
  }
  return ARView.__proto_antialiasingMode_v1.modify;
}

void ARView.__proto_antialiasingMode_v1.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 56);
  v4 = *(void **)(*(_QWORD *)a1 + 64);
  if ((a2 & 1) != 0)
  {
    v5 = v2[5];
    v6 = v2[6];
    v7 = (void *)v2[4];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 56), v4, v5);
    ARView.__proto_antialiasingMode_v1.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    v7 = (void *)v2[4];
    ARView.__proto_antialiasingMode_v1.setter(*(_QWORD *)(*(_QWORD *)a1 + 64));
  }
  free(v4);
  free(v3);
  free(v7);
  free(v2);
}

uint64_t key path getter for ARView.antialiasingMode : ARView@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
  swift_beginAccess();
  v4 = type metadata accessor for AntialiasingMode();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t key path setter for ARView.antialiasingMode : ARView(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v4 = type metadata accessor for AntialiasingMode();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  v9 = *a2 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v9, v8, v4);
  return swift_endAccess();
}

uint64_t ARView.antialiasingMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
  swift_beginAccess();
  v4 = type metadata accessor for AntialiasingMode();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ARView.antialiasingMode.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
  swift_beginAccess();
  v4 = type metadata accessor for AntialiasingMode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*ARView.antialiasingMode.modify())()
{
  swift_beginAccess();
  return ARSessionManager.isRunningUserProvidedARSession.modify;
}

void ARView.checkProximity()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t active;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;

  v1 = type metadata accessor for __RKEntityProximityTrigger.ExitType();
  MEMORY[0x1E0C80A78](v1);
  v36 = (char *)v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  swift_retain();
  v4 = dispatch thunk of Scene.__interactionService.getter();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  v5 = swift_dynamicCastClass();
  if (!v5)
    goto LABEL_37;
  v6 = v5;
  if ((dispatch thunk of __RKEntityInteractionManager.proximityEnabled.getter() & 1) == 0)
    goto LABEL_37;
  if (*(_QWORD *)(v0 + v3))
  {
    swift_retain();
    active = dispatch thunk of Scene.internalActiveCamera.getter();
    swift_release();
    v34 = active;
    if (active)
    {
      v30[1] = v4;
      v31 = v0;
      v33 = v6;
      v8 = dispatch thunk of __RKEntityInteractionManager.__interactions.getter();
      v9 = v8;
      v10 = MEMORY[0x1E0DEE9D8];
      v38 = MEMORY[0x1E0DEE9D8];
      if (v8 >> 62)
        goto LABEL_41;
      v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      while (v11)
      {
        v12 = 0;
        *(_QWORD *)&v37 = v9 & 0xC000000000000001;
        v32 = v9 + 32;
        v35 = v9;
        while (1)
        {
          if (!(_QWORD)v37)
          {
            v13 = *(_QWORD *)(v32 + 8 * v12);
            swift_retain();
            v14 = __OFADD__(v12++, 1);
            if (v14)
              break;
            goto LABEL_16;
          }
          v13 = MEMORY[0x1DF0906F4](v12, v9);
          v14 = __OFADD__(v12++, 1);
          if (v14)
            break;
LABEL_16:
          dispatch thunk of __RKEntityInteraction.trigger.getter();
          type metadata accessor for __RKEntityTriggerGroup();
          if (swift_dynamicCastClass())
          {
            v10 = dispatch thunk of __RKEntityTriggerGroup.triggers.getter();
            if (v10 >> 62)
            {
              v15 = _CocoaArrayWrapper.endIndex.getter();
              if (v15)
              {
LABEL_19:
                v9 = 4;
                do
                {
                  v16 = v9 - 4;
                  if ((v10 & 0xC000000000000001) != 0)
                  {
                    MEMORY[0x1DF0906F4](v9 - 4, v10);
                    v14 = __OFADD__(v16, 1);
                    v17 = v9 - 3;
                    if (v14)
                      goto LABEL_39;
                  }
                  else
                  {
                    swift_retain();
                    v14 = __OFADD__(v16, 1);
                    v17 = v9 - 3;
                    if (v14)
                    {
LABEL_39:
                      __break(1u);
                      goto LABEL_40;
                    }
                  }
                  type metadata accessor for __RKEntityProximityTrigger();
                  if (swift_dynamicCastClass())
                  {
                    swift_release();
                    swift_bridgeObjectRelease();
                    v9 = v35;
                    goto LABEL_31;
                  }
                  swift_release();
                  ++v9;
                }
                while (v17 != v15);
              }
            }
            else
            {
              v15 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
              if (v15)
                goto LABEL_19;
            }
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            v9 = v35;
          }
          else
          {
            swift_release();
            v10 = v13;
            dispatch thunk of __RKEntityInteraction.trigger.getter();
            type metadata accessor for __RKEntityProximityTrigger();
            if (swift_dynamicCastClass())
            {
              swift_release();
              dispatch thunk of __RKEntityInteraction.trigger.getter();
LABEL_31:
              v18 = swift_release();
              v10 = (unint64_t)&v38;
              MEMORY[0x1DF0903A0](v18);
              if (*(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
            else
            {
              swift_release();
              swift_release();
            }
          }
          if (v12 == v11)
          {
            swift_bridgeObjectRelease();
            v19 = v38;
            v10 = MEMORY[0x1E0DEE9D8];
            goto LABEL_43;
          }
        }
LABEL_40:
        __break(1u);
LABEL_41:
        swift_bridgeObjectRetain();
        v11 = _CocoaArrayWrapper.endIndex.getter();
      }
      swift_bridgeObjectRelease();
      v19 = MEMORY[0x1E0DEE9D8];
LABEL_43:
      swift_bridgeObjectRelease();
      v39 = v10;
      if (v19 >> 62)
      {
        swift_bridgeObjectRetain();
        v20 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v20)
          goto LABEL_45;
      }
      else
      {
        v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v20)
        {
LABEL_45:
          if (v20 >= 1)
          {
            v21 = 0;
            v35 = v20;
            do
            {
              if ((v19 & 0xC000000000000001) != 0)
                MEMORY[0x1DF0906F4](v21, v19);
              else
                swift_retain();
              type metadata accessor for __RKEntityProximityTrigger();
              if (swift_dynamicCastClass() && dispatch thunk of __RKEntityProximityTrigger.__targetEntity.getter())
              {
                type metadata accessor for Entity();
                HasTransform.position(relativeTo:)();
                v37 = v22;
                HasTransform.position(relativeTo:)();
                dispatch thunk of __RKEntityProximityTrigger.__targetEntity.getter();
                dispatch thunk of __RKEntityProximityTrigger.type.getter();
                swift_allocObject();
                __RKEntityProximityTrigger.init(targetEntity:distance:type:)();
                if ((dispatch thunk of __RKEntityInteractionManager.__performInteractions(matching:on:)() & 1) != 0
                  && dispatch thunk of __RKEntityProximityTrigger.targetEntity.getter())
                {
                  v23 = swift_retain();
                  MEMORY[0x1DF0903A0](v23);
                  if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                  swift_release();
                  swift_release();
                }
                else
                {
                  swift_release();
                }
                swift_release();
                v20 = v35;
              }
              ++v21;
              swift_release();
            }
            while (v20 != v21);
            swift_bridgeObjectRelease();
            v24 = v39;
LABEL_63:
            v25 = v31;
            if (v24 >> 62)
            {
              swift_bridgeObjectRetain();
              v29 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v29)
                goto LABEL_68;
            }
            else if (!*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_68;
            }
            v26 = v25 + OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate;
            swift_beginAccess();
            if (MEMORY[0x1DF091D08](v26))
            {
              v27 = *(_QWORD *)(v26 + 8);
              ObjectType = swift_getObjectType();
              (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v27 + 24))(v25, v24, ObjectType, v27);
              swift_release();
              swift_unknownObjectRelease();
LABEL_69:
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              return;
            }
LABEL_68:
            swift_release();
            goto LABEL_69;
          }
          __break(1u);
          goto LABEL_71;
        }
      }
      swift_bridgeObjectRelease();
      v24 = MEMORY[0x1E0DEE9D8];
      goto LABEL_63;
    }
LABEL_37:
    swift_unknownObjectRelease();
    return;
  }
LABEL_72:
  __break(1u);
}

Swift::Void __swiftcall ARView.handleTapAtPoint(point:)(CGPoint point)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Type;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _OWORD v38[2];
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t v47[3];
  _OWORD v48[2];
  char v49;

  v2 = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x1E0C80A78](v3);
  v42 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CollisionCastHit();
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  MEMORY[0x1E0C80A78](v5);
  v39 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for CollisionGroup();
  v40 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Type = type metadata accessor for CollisionCastQueryType();
  v10 = *(_QWORD *)(Type - 8);
  v45 = Type;
  v46 = v10;
  MEMORY[0x1E0C80A78](Type);
  v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Scene.AnchorCollection();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v1 + OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate;
  swift_beginAccess();
  if (MEMORY[0x1DF091D08](v17))
  {
    v18 = *(_QWORD *)(v17 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 8))(v1, ObjectType, v18);
    swift_unknownObjectRelease();
  }
  v20 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_retain();
  dispatch thunk of Scene.anchors.getter();
  swift_release();
  lazy protocol witness table accessor for type Scene.AnchorCollection and conformance Scene.AnchorCollection();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  v21 = dispatch thunk of Collection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if (v21 < 1)
    goto LABEL_14;
  if (!*(_QWORD *)(v2 + v20))
    goto LABEL_29;
  swift_retain();
  Scene.coreScene.getter();
  swift_release();
  if (!RESceneFindFirstCameraComponent())
    goto LABEL_14;
  if (!*(_QWORD *)(v2 + v20))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  swift_retain();
  dispatch thunk of Scene.__interactionService.getter();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  if (swift_dynamicCastClass())
  {
    if ((dispatch thunk of __RKEntityInteractionManager.areInteractionsEnabled.getter() & 1) != 0)
    {
      v22 = dispatch thunk of __RKEntityInteractionManager.__interactions.getter();
      v23 = specialized ARView.hasTapInteractions(_:)(v22);
      swift_bridgeObjectRelease();
      if ((v23 & 1) != 0)
      {
        v24 = v45;
        (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v12, *MEMORY[0x1E0CD3F10], v45);
        static CollisionGroup.all.getter();
        ARView.ray(through:)(v47);
        outlined init with take of vImage_CGImageFormat?((uint64_t)v47, (uint64_t)v48, &demangling cache variable for type metadata for (origin: SIMD3<Float>, direction: SIMD3<Float>)?);
        if ((v49 & 1) != 0)
        {
          v25 = MEMORY[0x1E0DEE9D8];
          v26 = v41;
          v27 = v40;
LABEL_20:
          (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v26);
          (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v24);
          if (*(_QWORD *)(v25 + 16))
          {
            v30 = (uint64_t)v42;
            v31 = v43;
            v32 = v44;
            (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v42, v25 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80)), v44);
            v33 = 0;
          }
          else
          {
            v33 = 1;
            v31 = v43;
            v32 = v44;
            v30 = (uint64_t)v42;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v30, v33, 1, v32);
          swift_bridgeObjectRelease();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v30, 1, v32) != 1)
          {
            v36 = v39;
            (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v39, v30, v32);
            v37 = CollisionCastHit.entity.getter();
            ARView.handleTapForEntity(_:shouldNotifyDelegateAlways:)(v37, 1);
            swift_unknownObjectRelease();
            swift_release();
            (*(void (**)(char *, uint64_t))(v31 + 8))(v36, v32);
            return;
          }
          outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v30, &demangling cache variable for type metadata for CollisionCastHit?);
          if (MEMORY[0x1DF091D08](v17))
          {
            v34 = *(_QWORD *)(v17 + 8);
            v35 = swift_getObjectType();
            (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v34 + 16))(v2, 0, 0, v35, v34);
            swift_unknownObjectRelease();
          }
          goto LABEL_16;
        }
        if (*(_QWORD *)(v2 + v20))
        {
          v38[1] = v48[1];
          v38[0] = v48[0];
          swift_retain();
          v25 = Scene.raycast(origin:direction:length:query:mask:relativeTo:)();
          swift_release();
          v26 = v41;
          v27 = v40;
          v24 = v45;
          goto LABEL_20;
        }
LABEL_31:
        __break(1u);
        return;
      }
    }
  }
  swift_unknownObjectRelease();
LABEL_14:
  if (!MEMORY[0x1DF091D08](v17))
    return;
  v28 = *(_QWORD *)(v17 + 8);
  v29 = swift_getObjectType();
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v28 + 16))(v2, 0, 0, v29, v28);
LABEL_16:
  swift_unknownObjectRelease();
}

void ARView.handleTapForEntity(_:shouldNotifyDelegateAlways:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    __break(1u);
    return;
  }
  swift_retain();
  dispatch thunk of Scene.__interactionService.getter();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  if (!swift_dynamicCastClass())
    goto LABEL_13;
  swift_retain();
  if (a1)
  {
    while (1)
    {
      swift_retain();
      Entity.__interactionIdentifier.getter();
      v10 = type metadata accessor for UUID();
      v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10);
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
      if (v11 != 1)
      {
        type metadata accessor for __RKEntityTapTrigger();
        swift_allocObject();
        swift_retain();
        __RKEntityTapTrigger.init(targetEntity:reversible:)();
        v12 = dispatch thunk of __RKEntityInteractionManager.__performInteractions(matching:on:)();
        swift_release();
        if ((v12 & 1) != 0)
          break;
      }
      type metadata accessor for Entity();
      v9 = HasHierarchy.parent.getter();
      swift_release_n();
      a1 = v9;
      if (!v9)
        goto LABEL_9;
    }
    swift_release();
    v13 = 1;
    goto LABEL_11;
  }
LABEL_9:
  if ((a2 & 1) == 0)
  {
LABEL_13:
    swift_unknownObjectRelease();
    return;
  }
  a1 = 0;
  v13 = 0;
LABEL_11:
  v14 = v3 + OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate;
  swift_beginAccess();
  if (MEMORY[0x1DF091D08](v14))
  {
    v15 = *(_QWORD *)(v14 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 16))(v3, v13, a1, ObjectType, v15);
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  swift_release();
}

uint64_t ARView.DebugOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static ARView.DebugOptions.none.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

RealityKit::ARView::DebugOptions __swiftcall ARView.DebugOptions.init(rawValue:)(RealityKit::ARView::DebugOptions rawValue)
{
  RealityKit::ARView::DebugOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static ARView.DebugOptions.showPhysics.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ARView.DebugOptions.showStatistics.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ARView.DebugOptions.showWorldOrigin.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static ARView.DebugOptions.showAnchorOrigins.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static ARView.DebugOptions.showAnchorGeometry.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static ARView.DebugOptions.showFeaturePoints.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static ARView.DebugOptions.showSceneUnderstanding.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

uint64_t key path setter for ARView.__statisticsOptions : ARView(int *a1, _QWORD *a2)
{
  int v2;
  int *v3;
  int v4;
  int v6;

  v2 = *a1;
  v3 = (int *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v6 = v4;
  return ARView.__statisticsOptions.didset(&v6);
}

uint64_t ARView.__statisticsOptions.didset(int *a1)
{
  uint64_t v1;
  int v2;
  _DWORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions);
  result = swift_beginAccess();
  if (*v3 != v2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
    swift_release();
    result = REServiceLocatorGetFrameStatisticsHUD();
    if (result)
      return REFrameStatisticsHUDSetStatisticsOptions();
  }
  return result;
}

uint64_t ARView.__statisticsOptions.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  _DWORD *v3;
  uint64_t result;

  v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t ARView.__statisticsOptions.setter(int *a1)
{
  uint64_t v1;
  int v2;
  int *v3;
  int v4;
  int v6;

  v2 = *a1;
  v3 = (int *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v6 = v4;
  return ARView.__statisticsOptions.didset(&v6);
}

void (*ARView.__statisticsOptions.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions;
  v3[3] = v1;
  v3[4] = v4;
  v5 = (_DWORD *)(v1 + v4);
  swift_beginAccess();
  *((_DWORD *)v3 + 10) = *v5;
  return ARView.__statisticsOptions.modify;
}

void ARView.__statisticsOptions.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int *v6;
  int v7;
  int v8;

  v2 = *(void **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_DWORD *)(v4 + v3);
  *(_DWORD *)(v4 + v3) = *(_DWORD *)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    v7 = v5;
    v6 = &v7;
  }
  else
  {
    v8 = v5;
    v6 = &v8;
  }
  ARView.__statisticsOptions.didset(v6);
  free(v2);
}

Swift::Void __swiftcall ARView.__frameProfilerAddCustomStatistic(_:_:)(Swift::String a1, Swift::Float a2)
{
  uint64_t FrameStatisticsHUD;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  FrameStatisticsHUD = REServiceLocatorGetFrameStatisticsHUD();
  if (FrameStatisticsHUD)
  {
    v4 = FrameStatisticsHUD;
    v5 = String.utf8CString.getter();
    MEMORY[0x1DF090D78](v4, v5 + 32, a2);
    swift_release();
  }
}

uint64_t ARView.__disableStatisticsRendering.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView___disableStatisticsRendering);
  swift_beginAccess();
  return *v1;
}

uint64_t ARView.__disableStatisticsRendering.setter(char a1)
{
  uint64_t v1;
  int v3;
  _BYTE *v4;
  uint64_t result;
  int v6;

  v3 = a1 & 1;
  v4 = (_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___disableStatisticsRendering);
  result = swift_beginAccess();
  v6 = *v4;
  *v4 = a1;
  if (v6 != v3)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
    swift_release();
    result = REServiceLocatorGetFrameStatisticsHUD();
    if (result)
      return REFrameStatisticsHUDSetDisableRendering();
  }
  return result;
}

void (*ARView.__disableStatisticsRendering.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC10RealityKit6ARView___disableStatisticsRendering;
  v3[3] = v1;
  v3[4] = v4;
  v5 = (_BYTE *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 40) = *v5;
  return ARView.__disableStatisticsRendering.modify;
}

void ARView.__disableStatisticsRendering.modify(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;

  v1 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + 40);
  v5 = *(unsigned __int8 *)(v3 + v2);
  *(_BYTE *)(v3 + v2) = v4;
  if (((v4 ^ v5) & 1) != 0)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
    swift_release();
    if (REServiceLocatorGetFrameStatisticsHUD())
      REFrameStatisticsHUDSetDisableRendering();
  }
  free(v1);
}

uint64_t ARView.__getStatisticsStringForSingleOption(statisticOption:)()
{
  uint64_t result;

  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  result = REServiceLocatorGetFrameStatisticsHUD();
  if (result)
  {
    REFrameStatisticsHUDGetStatisticsForOption();
    return String.init(cString:)();
  }
  return result;
}

uint64_t ARView.__StatisticsOptions.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t ARView.__StatisticsOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ARView.__StatisticsOptions.frameTimeStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ARView.__StatisticsOptions.animationStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ARView.__StatisticsOptions.assetPipelineStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static ARView.__StatisticsOptions.audioStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static ARView.__StatisticsOptions.ecsStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static ARView.__StatisticsOptions.meshStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static ARView.__StatisticsOptions.networkStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 64;
}

void static ARView.__StatisticsOptions.physicsStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 128;
}

void static ARView.__StatisticsOptions.renderingStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 256;
}

void static ARView.__StatisticsOptions.memoryStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 512;
}

void static ARView.__StatisticsOptions.thermalStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 1024;
}

void static ARView.__StatisticsOptions.sceneUnderstandingStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 2048;
}

void static ARView.__StatisticsOptions.mtlCounterAPIStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 4096;
}

void static ARView.__StatisticsOptions.customStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 0x2000;
}

void static ARView.__StatisticsOptions.attributionStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 0x4000;
}

void static ARView.__StatisticsOptions.vfxStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 0x20000;
}

uint64_t type metadata accessor for ARView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ARView;
  if (!type metadata singleton initialization cache for ARView)
    return swift_getSingletonMetadata();
  return result;
}

Swift::Void __swiftcall ARView.__setProfilerUpdateInterval(newInterval:)(Swift::Float newInterval)
{
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  if (REServiceLocatorGetFrameStatisticsHUD())
    JUMPOUT(0x1DF090DC0);
}

Swift::Float __swiftcall ARView.__frameTime()()
{
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  if (REServiceLocatorGetFrameStatisticsHUD())
    JUMPOUT(0x1DF090DCCLL);
  return 0.0;
}

void ARView.snapshot(saveToHDR:completion:)(int a1, void (*a2)(_QWORD), uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t active;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  double v23;
  double v24;
  float v25;
  double v26;
  float v27;
  float v28;
  double v29;
  double v30;
  void *v31;
  float v32;
  float v33;
  id v34;
  uint64_t v35;
  void *v36;
  void (*v37)();
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int WorkingColorGamut;
  int TargetDisplayColorGamut;
  void *LDRColorSpaceForColorGamut;
  void *v45;
  void *v46;
  id v47;
  id v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t);
  char *v64;
  char v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  id v71;
  uint64_t (*v72)();
  uint64_t (*v73)(uint64_t);
  uint64_t v74;
  void *v75;
  char *v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  int v82;
  uint64_t RenderGraphDataStruct;
  id v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(_QWORD);
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t (*aBlock[2])();
  uint64_t (*v97)(uint64_t);
  void *v98;
  void (*v99)();
  uint64_t v100;
  uint64_t v101;

  v4 = v3;
  v95 = a1;
  v101 = *MEMORY[0x1E0C80C00];
  v7 = type metadata accessor for __SceneRef();
  v87 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v86 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AntialiasingMode();
  v89 = *(_QWORD *)(v9 - 8);
  v90 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for _Proto_AntialiasingMode_v1();
  v91 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v88 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v77 - v15;
  v17 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  if (!*(_QWORD *)&v3[OBJC_IVAR____TtC10RealityKit6ARView__scene])
LABEL_49:
    __break(1u);
  swift_retain();
  active = dispatch thunk of Scene.internalActiveCamera.getter();
  swift_release();
  swift_release();
  v19 = *(_QWORD *)&v3[v17];
  if (active)
  {
    if (!v19)
    {
      __break(1u);
      goto LABEL_51;
    }
    swift_retain();
    v20 = dispatch thunk of Scene.internalActiveCamera.getter();
  }
  else
  {
    if (!v19)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    swift_retain();
    v20 = dispatch thunk of Scene.defaultCamera.getter();
  }
  v21 = v20;
  swift_release();
  if (!v21)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    v45 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    a2(0);
    return;
  }
  v22 = objc_msgSend(v4, sel_layer);
  objc_msgSend(v22, sel_contentsScale);
  v24 = v23;

  v25 = v24;
  objc_msgSend(v4, sel_frame);
  v27 = v26;
  v28 = v25 * v27;
  objc_msgSend(v4, sel_frame);
  v30 = v29;
  v31 = (void *)objc_opt_self();
  if (v28 <= -9.2234e18)
  {
    __break(1u);
    goto LABEL_45;
  }
  if (v28 >= 9.2234e18)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if ((LODWORD(v28) & 0x7F800000) == 0x7F800000)
    goto LABEL_46;
  v32 = v30;
  v33 = v25 * v32;
  if ((LODWORD(v33) & 0x7F800000) == 0x7F800000)
    goto LABEL_46;
  if (v33 <= -9.2234e18)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v33 >= 9.2234e18)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v85 = v7;
  v92 = a2;
  v93 = a3;
  v94 = v21;
  v34 = objc_msgSend(v31, sel_texture2DDescriptorWithPixelFormat_width_height_mipmapped_, 115, (uint64_t)v28, (uint64_t)v33, 0);
  objc_msgSend(v34, sel_setUsage_, 22);
  objc_msgSend(v34, sel_setStorageMode_, 0);
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  v35 = dispatch thunk of __Engine.services.getter();
  swift_release();
  if (!v35)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  dispatch thunk of __ServiceLocator.renderService.getter();
  swift_release();
  v36 = v98;
  v37 = v99;
  __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v98);
  v38 = objc_msgSend((id)(*((uint64_t (**)(void *, void (*)()))v37 + 1))(v36, v37), sel_newTextureWithDescriptor_, v34);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  if (!v38)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    v46 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    v92(0);
LABEL_28:
    swift_release();
    return;
  }
  static __ServiceLocator.shared.getter();
  v39 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  v40 = MEMORY[0x1DF091270](v39);
  if (!v40
    || ((v41 = v40,
         v84 = v38,
         WorkingColorGamut = REColorManagerGetWorkingColorGamut(),
         TargetDisplayColorGamut = REColorManagerGetTargetDisplayColorGamut(),
         (v95 & 1) == 0)
      ? (LDRColorSpaceForColorGamut = (void *)REColorManagerGetLDRColorSpaceForColorGamut())
      : (LDRColorSpaceForColorGamut = (void *)REColorManagerGetWorkingColorSpace()),
        (v47 = LDRColorSpaceForColorGamut) == 0))
  {
    static os_log_type_t.error.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    v53 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    v92(0);
    swift_unknownObjectRelease();
    goto LABEL_28;
  }
  v48 = v47;
  LODWORD(RenderGraphDataStruct) = WorkingColorGamut;
  v82 = TargetDisplayColorGamut;
  swift_retain();
  Entity.coreEntity.getter();
  swift_release();
  RECameraViewDescriptorsComponentGetComponentType();
  v81 = REEntityGetOrAddComponentByClass();
  v49 = *(char **)&v4[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (!v49)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v50 = *(_QWORD *)&v49[OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions];
  v51 = v49;
  if ((v50 & 0x20) != 0)
    v52 = RKARSystem.postProcessingCombinedRenderGraph.getter();
  else
    v52 = RKARSystem.postProcessingCombinedHDRRenderGraph.getter();
  v54 = v52;

  if ((v95 & 1) != 0)
  {
    LOBYTE(aBlock[0]) = 0;
    RERenderGraphAssetSetRuntimeNodeSetting();
    REColorManagerSetTargetDisplayColorGamut();
  }
  v79 = v54;
  RenderGraphDataStruct = RERenderGraphCreateRenderGraphDataStruct();
  RERenderGraphDataStructAddFloat4();
  v55 = &v4[OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode];
  swift_beginAccess();
  v56 = v89;
  v57 = v55;
  v58 = v90;
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v11, v57, v90);
  v59 = (*(uint64_t (**)(char *, uint64_t))(v56 + 88))(v11, v58);
  v60 = v59 == *MEMORY[0x1E0CD4928];
  v80 = v48;
  v78 = v34;
  if (v60)
  {
    v61 = *MEMORY[0x1E0CD52A8];
    v62 = v91;
    v63 = *(void (**)(char *, uint64_t, uint64_t))(v91 + 104);
    v63(v16, v61, v12);
  }
  else
  {
    v63 = *(void (**)(char *, uint64_t, uint64_t))(v91 + 104);
    if (v59 == *MEMORY[0x1E0CD4920])
    {
      v63(v16, *MEMORY[0x1E0CD5298], v12);
      v61 = *MEMORY[0x1E0CD52A8];
    }
    else
    {
      v61 = *MEMORY[0x1E0CD52A8];
      v63(v16, v61, v12);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v11, v90);
    }
    v62 = v91;
  }
  v64 = v88;
  v63(v88, v61, v12);
  v65 = MEMORY[0x1DF0901B4](v16, v64);
  v66 = *(void (**)(char *, uint64_t))(v62 + 8);
  v66(v64, v12);
  v66(v16, v12);
  MEMORY[0x1DF0910B4](RenderGraphDataStruct, "disableAA", v65 & 1);
  v67 = swift_allocObject();
  *(_QWORD *)(v67 + 16) = v84;
  *(_QWORD *)(v67 + 24) = 16;
  v68 = v93;
  *(_QWORD *)(v67 + 32) = v92;
  *(_QWORD *)(v67 + 40) = v68;
  *(_BYTE *)(v67 + 48) = v95 & 1;
  *(_QWORD *)(v67 + 56) = v79;
  *(_QWORD *)(v67 + 64) = 0xD000000000000015;
  *(_QWORD *)(v67 + 72) = 0x80000001D95DD840;
  *(_QWORD *)(v67 + 80) = v41;
  *(_BYTE *)(v67 + 88) = v82;
  v69 = v80;
  *(_QWORD *)(v67 + 96) = v80;
  *(_DWORD *)(v67 + 104) = 4353;
  *(_QWORD *)(v67 + 112) = v4;
  v99 = partial apply for closure #1 in ARView.snapshot(saveToHDR:completion:);
  v100 = v67;
  aBlock[0] = (uint64_t (*)())MEMORY[0x1E0C809B0];
  aBlock[1] = (uint64_t (*)())1107296256;
  v97 = thunk for @escaping @callee_guaranteed () -> ();
  v98 = &block_descriptor_6_2;
  v70 = _Block_copy(aBlock);
  swift_retain();
  v4;
  swift_unknownObjectRetain();
  v71 = v69;
  swift_release();
  RECameraViewDescriptorsComponentSnapshotNextFrameWithSettingsAndReturnHandle();
  _Block_release(v70);
  ARView.renderCallbacks.getter(aBlock);
  v72 = aBlock[0];
  v73 = v97;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?((uint64_t)v97);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?((uint64_t)v72);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?((uint64_t)v73);
  if (!v73)
  {
    v75 = v78;
    goto LABEL_43;
  }
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?((uint64_t)v73);
  v74 = *(_QWORD *)&v4[v17];
  v75 = v78;
  if (v74)
  {
    swift_retain();
    v76 = v86;
    dispatch thunk of Scene.__coreScene.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v87 + 8))(v76, v85);
    REScenePostProcessRenderCallbackAddOneOffCameraViewHandle();
LABEL_43:
    RERelease();
    swift_release();

    swift_unknownObjectRelease();
    return;
  }
LABEL_54:
  __break(1u);
}

void closure #1 in ARView.snapshot(saveToHDR:completion:)(void *a1, int64_t a2, void (*a3)(id), uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, CGColorSpace *a11, uint32_t a12, uint64_t a13)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void *v35;
  CGContext *v36;
  CGContext *v37;
  CGImageRef Image;
  void *v39;
  uint64_t v40;
  void *v41;
  CGImage *v42;
  id v43;
  CGFloat v44;
  CGColor *v45;
  CGImageRef v46;
  char *v47;
  uint64_t v48;
  id v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  int v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  void (*v82)(id);
  void *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  char v95[40];
  _OWORD v96[2];
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;

  *(_QWORD *)&v84 = a8;
  v85 = a6;
  LODWORD(v87) = a5;
  v101 = *MEMORY[0x1E0C80C00];
  v17 = type metadata accessor for vImage.Size();
  MEMORY[0x1E0C80A78](v17);
  v76 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for vImage.PixelBuffer<vImage.Interleaved8x4>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for vImage.PixelBuffer<vImage.Interleaved16Fx4>?);
  MEMORY[0x1E0C80A78](v23);
  v77 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for vImage.PixelBuffer<vImage.Interleaved16Fx4>);
  v81 = *(_QWORD *)(v79 - 8);
  *(_QWORD *)&v25 = MEMORY[0x1E0C80A78](v79).n128_u64[0];
  v80 = (char *)&v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = (int64_t)objc_msgSend(a1, sel_width, v25);
  if ((unint64_t)(v27 - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_33;
  }
  v28 = 4 * v27 * a2;
  if ((unsigned __int128)(4 * v27 * (__int128)a2) >> 64 != v28 >> 63)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v74 = v20;
  v75 = v22;
  v29 = v28 / 8;
  v30 = (uint64_t)objc_msgSend(a1, sel_height);
  if ((unsigned __int128)(v30 * (__int128)v29) >> 64 != (v30 * v29) >> 63)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v31 = malloc(v30 * v29);
  if (!v31)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    v51 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    a3(0);
    return;
  }
  v73 = v19;
  v82 = a3;
  v83 = v31;
  v86 = a4;
  v78 = a10;
  MTLRegionMake2D((uint64_t)objc_msgSend(a1, sel_width), (uint64_t)objc_msgSend(a1, sel_height), &v91);
  v32 = v91;
  v33 = v92;
  v34 = v93;
  if ((v87 & 1) != 0)
  {
    LOBYTE(v91) = 1;
    v84 = v32;
    v71 = v93;
    v72 = v92;
    String.utf8CString.getter();
    RERenderGraphAssetSetRuntimeNodeSetting();
    swift_release();
    REColorManagerSetTargetDisplayColorGamut();
    v34 = v71;
    v33 = v72;
    v32 = v84;
  }
  v91 = v32;
  v92 = v33;
  v93 = v34;
  v35 = v83;
  objc_msgSend(a1, sel_getBytes_bytesPerRow_fromRegion_mipmapLevel_, v83, v29, &v91, 0);
  v36 = CGBitmapContextCreate(v35, (size_t)objc_msgSend(a1, sel_width), (size_t)objc_msgSend(a1, sel_height), a2, v29, a11, a12);
  if (!v36)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    v52 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    v82(0);
LABEL_25:
    v57 = v35;
    goto LABEL_26;
  }
  v37 = v36;
  Image = CGBitmapContextCreateImage(v36);
  if (!Image)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    v53 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    v82(0);
LABEL_22:

    goto LABEL_25;
  }
  v39 = Image;
  v40 = a13 + OBJC_IVAR____TtC10RealityKit6ARView_environment;
  swift_beginAccess();
  if (*(_BYTE *)(v40 + 24) != 2)
    goto LABEL_12;
  v41 = *(void **)(v40 + 16);
  v42 = v39;
  outlined copy of ARView.Environment.Background.Value(v41, 2);
  v43 = objc_msgSend(a1, sel_width);
  v44 = (double)(uint64_t)objc_msgSend(a1, sel_height);
  v102.origin.x = 0.0;
  v102.origin.y = 0.0;
  v102.size.width = (double)(uint64_t)v43;
  v102.size.height = v44;
  CGContextClearRect(v37, v102);
  v45 = (CGColor *)objc_msgSend(v41, sel_CGColor);
  CGContextSetFillColorWithColor(v37, v45);

  v103.origin.x = 0.0;
  v103.origin.y = 0.0;
  v103.size.width = (double)(uint64_t)v43;
  v103.size.height = v44;
  CGContextFillRect(v37, v103);
  v104.origin.x = 0.0;
  v104.origin.y = 0.0;
  v104.size.width = (double)(uint64_t)v43;
  v104.size.height = v44;
  CGContextRef.draw(_:in:byTiling:)(v42, v104, 0);

  v46 = CGBitmapContextCreateImage(v37);
  if (!v46)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    v58 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    v82(0);
    outlined consume of ARView.Environment.Background.Value(v41, 2);
    goto LABEL_22;
  }
  v39 = v46;

  outlined consume of ARView.Environment.Background.Value(v41, 2);
LABEL_12:
  v47 = v80;
  v48 = v81;
  if ((v87 & 1) != 0)
  {
LABEL_13:
    v49 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_initWithCGImage_, v39);
    v50 = v49;
    v82(v49);

LABEL_24:
    goto LABEL_25;
  }
  v54 = (id)REColorManagerGetSRGBLDRColorSpaceForColorGamut();
  if (!v54)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    v59 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    v82(0);
    goto LABEL_24;
  }
  if ((unint64_t)(a2 - 0x2000000000000000) >> 62 != 3)
LABEL_35:
    __break(1u);
  v55 = v54;
  vImage_CGImageFormat.init(bitsPerComponent:bitsPerPixel:colorSpace:bitmapInfo:renderingIntent:)();
  outlined init with take of vImage_CGImageFormat?((uint64_t)&v94, (uint64_t)&v91, &demangling cache variable for type metadata for vImage_CGImageFormat?);
  if (*((_QWORD *)&v91 + 1) != 1)
  {
    v88 = v91;
    v89 = v92;
    v90 = v93;
    type metadata accessor for vImage.Interleaved16Fx4();
    v60 = v39;
    v61 = v77;
    vImage.PixelBuffer<>.init(cgImage:cgImageFormat:pixelFormat:)();
    v87 = v60;
    v62 = v61;
    v63 = v61;
    v64 = v79;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v62, 0, 1, v79);
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v47, v63, v64);
    vImage.PixelBuffer.size.getter();
    type metadata accessor for vImage.Interleaved8x4();
    v65 = v75;
    vImage.PixelBuffer<>.init(size:pixelFormat:)();
    vImage.PixelBuffer<>.convert(to:)();
    v66 = v55;
    vImage_CGImageFormat.init(bitsPerComponent:bitsPerPixel:colorSpace:bitmapInfo:renderingIntent:)();
    outlined init with take of vImage_CGImageFormat?((uint64_t)v95, (uint64_t)v96, &demangling cache variable for type metadata for vImage_CGImageFormat?);
    if (*((_QWORD *)&v96[0] + 1) == 1)
    {
      static os_log_type_t.error.getter();
      type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v67 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:type:_:)();

      v82(0);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v65, v73);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v64);
      v57 = v83;
      goto LABEL_26;
    }
    v98 = v96[0];
    v99 = v96[1];
    v100 = v97;
    v68 = v73;
    v69 = vImage.PixelBuffer<>.makeCGImage(cgImageFormat:)();
    v35 = v83;
    if (!v69)
    {
      static os_log_type_t.error.getter();
      type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v70 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:type:_:)();

      v82(0);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v65, v68);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v47, v79);
      goto LABEL_25;
    }
    v39 = (void *)v69;

    (*(void (**)(char *, uint64_t))(v74 + 8))(v65, v68);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v47, v79);
    goto LABEL_13;
  }
  static os_log_type_t.error.getter();
  type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  v56 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:type:_:)();

  v82(0);
  v57 = v83;
LABEL_26:
  free(v57);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

Swift::Void __swiftcall ARView.__startAudioEngine()()
{
  ARView.__startAudioEngine()(MEMORY[0x1E0D179C0]);
}

Swift::Void __swiftcall ARView.__stopAudioEngine()()
{
  ARView.__startAudioEngine()(MEMORY[0x1E0D179C8]);
}

uint64_t ARView.__startAudioEngine()(uint64_t (*a1)(void))
{
  uint64_t result;

  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  __Engine.coreEngine.getter();
  swift_release();
  REEngineGetServiceLocator();
  result = REServiceLocatorGetAudioService();
  if (result)
    return a1();
  return result;
}

void ARView.entityAccessibilityWrappers.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for Scene.AnchorCollection();
  MEMORY[0x1E0C80A78](v1);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.ChildCollection.IndexingIterator<Scene.AnchorCollection>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    dispatch thunk of Scene.anchors.getter();
    swift_release();
    Scene.AnchorCollection.makeIterator()();
    Entity.ChildCollection.IndexingIterator.next()();
    while (v8)
    {
      swift_retain();
      v6 = Entity.__accessibilityWrappers(rootEntityWrapper:)(0);
      swift_release();
      specialized Array.append<A>(contentsOf:)(v6);
      swift_release();
      Entity.ChildCollection.IndexingIterator.next()();
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    __break(1u);
  }
}

uint64_t ARView.__distanceInMetersFromEntity(_:)()
{
  uint64_t v0;
  uint64_t active;
  uint64_t result;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    active = dispatch thunk of Scene.internalActiveCamera.getter();
    result = swift_release();
    if (active)
    {
      type metadata accessor for Entity();
      HasTransform.position(relativeTo:)();
      HasTransform.position(relativeTo:)();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::UInt32 __swiftcall ARView.getLayerHandle()()
{
  uint64_t v0;

  return *(_DWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_layerHandle);
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2)
    return MEMORY[0x1E0DEE9D8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    v4 = 8 * a2;
    v5 = (char *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 25;
    *((_QWORD *)v5 + 2) = a2;
    *((_QWORD *)v5 + 3) = 2 * (v7 >> 3);
    v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 8 * a2);
      return (uint64_t)v5;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ARView.__renderGraphEmitter.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter);
  swift_beginAccess();
  if (*v3)
  {
    type metadata accessor for __ServiceLocator();
    swift_retain();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.renderService.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
    type metadata accessor for RERenderManager();
    swift_dynamicCast();
    dispatch thunk of __RERenderGraphEmitter.unsetup(mgr:)();
    swift_release();
    swift_release();
  }
  *v3 = a1;
  swift_retain();
  result = swift_release();
  if (*v3)
  {
    type metadata accessor for __ServiceLocator();
    swift_retain();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.renderService.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
    type metadata accessor for RERenderManager();
    swift_dynamicCast();
    dispatch thunk of __RERenderGraphEmitter.setup(mgr:)();
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Entity>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v5 = a1[4];
  v4 = a1[5];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v8 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v5;
    *(_QWORD *)(v3[7] + v9) = v4;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v3[2] = v12;
    if (!--v1)
      goto LABEL_8;
    v13 = v8 + 2;
    v5 = *(v8 - 1);
    v14 = *v8;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    v8 = v13;
    v4 = v14;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

void specialized ARView.commonInit(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t HaveSharedSimulationByDefault;
  void *v25;
  id v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD v59[2];
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v67[3];
  uint64_t v68;
  uint64_t v69;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __AnyARKitObject?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for __AssetRef();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Scene.AnchorCollection();
  v62 = *(_QWORD *)(v9 - 8);
  v63 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  REShadowsSetEnableDefaultShadows();
  v12 = objc_msgSend(v0, sel_renderLayer);
  objc_opt_self();
  v13 = swift_dynamicCastObjCClass();
  if (!v13)
  {

    v13 = 0;
  }
  v14 = OBJC_IVAR____TtC10RealityKit6ARView_backingLayer;
  v15 = *(void **)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_backingLayer);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_backingLayer) = v13;

  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D80]), sel_initWithTarget_action_, v1, sel_handleSingleTapWithRecognizer_);
  v17 = OBJC_IVAR____TtC10RealityKit6ARView_singleTapGesture;
  v18 = *(void **)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_singleTapGesture);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_singleTapGesture) = v16;

  v19 = *(void **)((char *)v1 + v17);
  if (!v19)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v61 = v8;
  objc_msgSend(v19, sel_setDelegate_, v1);
  if (!*(_QWORD *)((char *)v1 + v17))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  objc_msgSend(v1, sel_addGestureRecognizer_);
  *((_BYTE *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_enablePresentsWithTransaction) = 1;
  objc_msgSend(v1, sel_setBackgroundColor_, 0);
  objc_msgSend(v1, sel_setMultipleTouchEnabled_, 0);
  v20 = OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground;
  if ((*((_BYTE *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground) & 1) == 0)
  {
    v21 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    objc_msgSend(v21, sel_addObserver_selector_name_object_, v1, sel_willResignActiveWithNotification_, *MEMORY[0x1E0DC4868], 0);
    objc_msgSend(v21, sel_addObserver_selector_name_object_, v1, sel_restartEngineWithNotification_, *MEMORY[0x1E0DC4750], 0);

    *((_BYTE *)v1 + v20) = 1;
  }
  ARView.setupMetalLayer()();
  type metadata accessor for __ServiceLocator();
  v22 = static __ServiceLocator.shared.getter();
  static __ServiceLocator.shared.getter();
  v23 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  HaveSharedSimulationByDefault = MEMORY[0x1DF0912AC](v23);
  if (HaveSharedSimulationByDefault)
    HaveSharedSimulationByDefault = REPhysicsSimulationServiceSetAnchorShouldHaveSharedSimulationByDefault();
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x390))(HaveSharedSimulationByDefault);
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_useCAMetalLayer) != 1)
  {
LABEL_12:
    if (one-time initialization token for uniqueTokenGenerator != -1)
      swift_once();
    swift_beginAccess();
    OS_dispatch_semaphore.wait()();
    v28 = static ARView.uniqueTokenGenerator + 1;
    if (!__OFADD__(static ARView.uniqueTokenGenerator, 1))
    {
      v60 = v6;
      v29 = v5;
      ++static ARView.uniqueTokenGenerator;
      OS_dispatch_semaphore.signal()();
      swift_endAccess();
      type metadata accessor for Scene();
      strcpy((char *)v67, "ARView.scene-");
      HIWORD(v67[1]) = -4864;
      *(_QWORD *)&v64 = v28;
      v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = MEMORY[0x1DF08F314](v67[0], v67[1]);
      v32 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
      *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView__scene) = v31;
      swift_release();
      v59[1] = v22;
      dispatch thunk of __ServiceLocator.sceneService.getter();
      v33 = v68;
      v34 = v69;
      __swift_project_boxed_opaque_existential_1(v67, v68);
      if (*(_QWORD *)((char *)v1 + v32))
      {
        v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
        v36 = swift_retain();
        v35(v36, v33, v34);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
        if (*(_QWORD *)((char *)v1 + v32))
        {
          type metadata accessor for SceneEvents.Render();
          v66 = 0;
          v64 = 0u;
          v65 = 0u;
          swift_allocObject();
          swift_unknownObjectWeakInit();
          swift_retain();
          Scene.subscribe<A>(to:on:_:)();
          swift_release();
          swift_release();
          outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)&v64, &demangling cache variable for type metadata for EventSource?);
          v37 = (uint64_t)v1 + OBJC_IVAR____TtC10RealityKit6ARView_renderSubscription;
          swift_beginAccess();
          outlined assign with take of Cancellable?((uint64_t)v67, v37);
          swift_endAccess();
          if (*(_QWORD *)((char *)v1 + v32))
          {
            v38 = v29;
            type metadata accessor for SceneEvents.Update();
            v66 = 0;
            v64 = 0u;
            v65 = 0u;
            swift_allocObject();
            swift_unknownObjectWeakInit();
            swift_retain();
            Scene.subscribe<A>(to:on:_:)();
            swift_release();
            swift_release();
            outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)&v64, &demangling cache variable for type metadata for EventSource?);
            v39 = (uint64_t)v1 + OBJC_IVAR____TtC10RealityKit6ARView_updateSubscription;
            swift_beginAccess();
            outlined assign with take of Cancellable?((uint64_t)v67, v39);
            swift_endAccess();
            *((_BYTE *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_initialized) = 1;
            v40 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
            objc_msgSend(v40, sel_nativeScale);
            v42 = v41;

            objc_msgSend(v1, sel_setContentScaleFactor_, v42);
            objc_msgSend(v1, sel_bounds);
            v44 = v43;
            v46 = v45;
            objc_msgSend(v1, sel_contentScaleFactor);
            ARView.resizeDrawable(size:scaleFactor:)(v44, v46, v47);
            type metadata accessor for Entity();
            swift_allocObject();
            v48 = Entity.init()();
            v49 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity);
            swift_beginAccess();
            *v49 = v48;
            swift_release();
            v50 = v60;
            if (*v49)
            {
              swift_retain();
              dispatch thunk of Entity.name.setter();
              swift_release();
              if (*v49)
              {
                swift_retain();
                Entity.turnIntoNinja()();
                swift_release();
                if (*(_QWORD *)((char *)v1 + v32))
                {
                  swift_retain();
                  dispatch thunk of Scene.anchors.getter();
                  swift_release();
                  if (*v49)
                  {
                    swift_retain();
                    Scene.AnchorCollection.appendNinja(_:)();
                    swift_release();
                    (*(void (**)(char *, uint64_t))(v62 + 8))(v11, v63);
                    ARView.updateEnvironment()();
                    ARView.setupAR()();
                    v51 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
                    if (*(_QWORD *)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem))
                    {
                      v52 = swift_retain();
                      specialized ARView.__renderGraphEmitter.setter(v52);
                      swift_release();
                      v53 = *(_BYTE **)((char *)v1 + v51);
                      if (v53)
                      {
                        v53[OBJC_IVAR____TtC10RealityKit10RKARSystem_groundingShadowMode] = 0;
                        swift_retain();
                        v54 = v53;
                        v55 = v61;
                        dispatch thunk of __RERenderGraphEmitter.__handle.getter();
                        swift_release();
                        __AssetRef.__as<A>(_:)();
                        (*(void (**)(char *, uint64_t))(v50 + 8))(v55, v38);
                        RERenderGraphEmitterAssetSetRuntimeSettingBool();
                        RERenderGraphEmitterAssetSetRuntimeSettingBool();

                        type metadata accessor for RKARSystemCore();
                        static RKARSystemCore.generateDecimatedMeshes.setter();
                        type metadata accessor for RealityFusionSession();
                        *(_QWORD *)&v64 = objc_msgSend(v1, sel_session);
                        type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for ARSession);
                        __AnyARKitObject.init<A>(_:)();
                        v56 = type metadata accessor for __AnyARKitObject();
                        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v4, 0, 1, v56);
                        v57 = MEMORY[0x1DF08F74C](v4);
                        outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v4, &demangling cache variable for type metadata for __AnyARKitObject?);
                        v58 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession);
                        swift_beginAccess();
                        *v58 = v57;
                        swift_release();
                        swift_release();
                        return;
                      }
                      goto LABEL_36;
                    }
LABEL_35:
                    __break(1u);
LABEL_36:
                    __break(1u);
                    goto LABEL_37;
                  }
LABEL_34:
                  __break(1u);
                  goto LABEL_35;
                }
LABEL_33:
                __break(1u);
                goto LABEL_34;
              }
LABEL_32:
              __break(1u);
              goto LABEL_33;
            }
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    __break(1u);
    goto LABEL_26;
  }
  dispatch thunk of __ServiceLocator.renderService.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
  type metadata accessor for RERenderManager();
  swift_dynamicCast();
  v25 = *(void **)((char *)v1 + v14);
  if (v25)
  {
    v26 = v25;
    v27 = dispatch thunk of RERenderManager.registerRenderLayer(_:)();

    swift_release();
    *(_DWORD *)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_layerHandle) = v27;
    goto LABEL_12;
  }
LABEL_37:
  __break(1u);
}

uint64_t sub_1D95AC7FC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

float partial apply for closure #1 in ARView.extendedDynamicRangeOutput.didset()
{
  uint64_t v0;

  return closure #1 in ARView.extendedDynamicRangeOutput.didset(v0);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_1D95AC840()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in ARView.snapshot(saveToHDR:completion:)()
{
  uint64_t v0;

  closure #1 in ARView.snapshot(saveToHDR:completion:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(id))(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88), *(CGColorSpace **)(v0 + 96), *(_DWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
}

unint64_t lazy protocol witness table accessor for type ARView.DebugOptions and conformance ARView.DebugOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions;
  if (!lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.DebugOptions, &type metadata for ARView.DebugOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions;
  if (!lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.DebugOptions, &type metadata for ARView.DebugOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions;
  if (!lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.DebugOptions, &type metadata for ARView.DebugOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions;
  if (!lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.DebugOptions, &type metadata for ARView.DebugOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions;
  if (!lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.__StatisticsOptions, &type metadata for ARView.__StatisticsOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions;
  if (!lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.__StatisticsOptions, &type metadata for ARView.__StatisticsOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions;
  if (!lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.__StatisticsOptions, &type metadata for ARView.__StatisticsOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions;
  if (!lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.__StatisticsOptions, &type metadata for ARView.__StatisticsOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions);
  }
  return result;
}

uint64_t sub_1D95ACB18@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC10RealityKit6ARView__lastHitEntityForGestures, a2);
}

uint64_t sub_1D95ACB24(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ARView._lastHitEntityForGestures : ARView(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView__lastHitEntityForGestures);
}

uint64_t sub_1D95ACB40@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1 + OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate;
  swift_beginAccess();
  result = MEMORY[0x1DF091D08](v3);
  v5 = *(_QWORD *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1D95ACB98(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2 + OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate;
  swift_beginAccess();
  *(_QWORD *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

_QWORD *sub_1D95ACC00@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
    *a2 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions);
  else
    __break(1u);
  return result;
}

void sub_1D95ACC30(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  ARView.debugOptions.setter(&v1);
}

uint64_t sub_1D95ACC74@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity, a2);
}

uint64_t sub_1D95ACC80(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ARView._lastHitEntityForGestures : ARView(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity);
}

uint64_t sub_1D95ACC9C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_19Tm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate, a2);
}

uint64_t sub_1D95ACCA8(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_20Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate);
}

float sub_1D95ACCB4@<S0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  float *v3;
  float result;

  v3 = (float *)(*a1 + OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate);
  swift_beginAccess();
  result = *v3;
  *a2 = *(_DWORD *)v3;
  return result;
}

uint64_t sub_1D95ACD04(int *a1, _QWORD *a2)
{
  int v2;
  _DWORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_DWORD *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t sub_1D95ACD58@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_19Tm(a1, &OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput, a2);
}

void sub_1D95ACD64(char *a1)
{
  ARView.extendedDynamicRangeOutput.setter(*a1);
}

uint64_t sub_1D95ACD88@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1 + OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy;
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 4);
  *(_DWORD *)a2 = *(_DWORD *)v3;
  *(_BYTE *)(a2 + 4) = v5;
  return result;
}

uint64_t sub_1D95ACDE0(int *a1, _QWORD *a2)
{
  int v2;
  char v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 4);
  v4 = *a2 + OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy;
  result = swift_beginAccess();
  *(_DWORD *)v4 = v2;
  *(_BYTE *)(v4 + 4) = v3;
  return result;
}

uint64_t sub_1D95ACE3C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter, a2);
}

uint64_t sub_1D95ACE48()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized ARView.__renderGraphEmitter.setter(v0);
  return swift_release();
}

uint64_t sub_1D95ACE78@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_19Tm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes, a2);
}

uint64_t sub_1D95ACE84(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_20Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes);
}

uint64_t sub_1D95ACE90@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_19Tm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___parallaxBackgroundProbe, a2);
}

uint64_t sub_1D95ACE9C(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_20Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView___parallaxBackgroundProbe);
}

uint64_t sub_1D95ACEA8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession, a2);
}

uint64_t keypath_getTm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)(*a1 + *a2);
  swift_beginAccess();
  *a3 = *v4;
  return swift_retain();
}

uint64_t sub_1D95ACF04(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ARView._lastHitEntityForGestures : ARView(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession);
}

uint64_t sub_1D95ACF20@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_19Tm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation, a2);
}

uint64_t sub_1D95ACF2C(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_20Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation);
}

uint64_t sub_1D95ACF38@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_19Tm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___disableComposition, a2);
}

uint64_t sub_1D95ACF44(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_20Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView___disableComposition);
}

uint64_t sub_1D95ACF50@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_19Tm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices, a2);
}

uint64_t sub_1D95ACF5C(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_20Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices);
}

uint64_t keypath_set_20Tm(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char v5;
  _BYTE *v6;
  uint64_t result;

  v5 = *a1;
  v6 = (_BYTE *)(*a2 + *a5);
  result = swift_beginAccess();
  *v6 = v5;
  return result;
}

uint64_t sub_1D95ACFC0@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;

  v3 = (_DWORD *)(*a1 + OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_1D95AD014@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_19Tm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___disableStatisticsRendering, a2);
}

uint64_t keypath_get_19Tm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t result;

  v4 = (_BYTE *)(*a1 + *a2);
  result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_1D95AD06C(char *a1)
{
  return ARView.__disableStatisticsRendering.setter(*a1);
}

uint64_t dispatch thunk of __ARViewDelegatePrivate.viewWillProcessTapInteraction(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of __ARViewDelegatePrivate.view(_:performedTapInteraction:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of __ARViewDelegatePrivate.view(_:performedProximityInteractionsForEntities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of __ARViewDelegatePrivate.update(_:deltaTime:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t ObjC metadata update function for ARView()
{
  return type metadata accessor for ARView();
}

uint64_t type metadata completion function for ARView()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AntialiasingMode();
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

uint64_t method lookup function for ARView()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ARView.__services.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of ARView._lastHitEntityForGestures.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of ARView._lastHitEntityForGestures.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of ARView._lastHitEntityForGestures.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of ARView.scene.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of ARView.__delegatePrivate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of ARView.__delegatePrivate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of ARView.__delegatePrivate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of ARView.__automaticallyInvokesStartTrigger.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of ARView.__automaticallyInvokesStartTrigger.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of ARView.__automaticallyInvokesStartTrigger.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of ARView.debugOptions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of ARView.debugOptions.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of ARView.debugOptions.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of ARView.environment.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of ARView.environment.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of ARView.environment.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of ARView.cameraTransform.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of ARView.audioListener.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of ARView.audioListener.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of ARView.audioListener.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of ARView.__environmentEntity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of ARView.__environmentEntity.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of ARView.__environmentEntity.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of ARView.__enableAutomaticFrameRate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of ARView.__enableAutomaticFrameRate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of ARView.__enableAutomaticFrameRate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of ARView.__preferredFrameRate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of ARView.__preferredFrameRate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of ARView.__preferredFrameRate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of ARView.__allocating_init(frame:cameraMode:automaticallyConfigureSession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 752))();
}

uint64_t dispatch thunk of ARView.__allocating_init(frame:forRealityView:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 760))();
}

uint64_t dispatch thunk of ARView.extendedDynamicRangeOutput.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x300))();
}

uint64_t dispatch thunk of ARView.extendedDynamicRangeOutput.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x308))();
}

uint64_t dispatch thunk of ARView.extendedDynamicRangeOutput.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x310))();
}

uint64_t dispatch thunk of ARView.edrHeadroomPolicy.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x320))();
}

uint64_t dispatch thunk of ARView.edrHeadroomPolicy.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x328))();
}

uint64_t dispatch thunk of ARView.edrHeadroomPolicy.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x330))();
}

uint64_t dispatch thunk of ARView.__renderGraphEmitter.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x338))();
}

uint64_t dispatch thunk of ARView.__renderGraphEmitter.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x340))();
}

uint64_t dispatch thunk of ARView.__renderGraphEmitter.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x348))();
}

uint64_t dispatch thunk of ARView.__setWireframeMode(displayWireframe:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x350))();
}

uint64_t dispatch thunk of ARView.__forceLocalizedProbes.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x358))();
}

uint64_t dispatch thunk of ARView.__forceLocalizedProbes.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x360))();
}

uint64_t dispatch thunk of ARView.__forceLocalizedProbes.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x368))();
}

uint64_t dispatch thunk of ARView.__parallaxBackgroundProbe.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x370))();
}

uint64_t dispatch thunk of ARView.__parallaxBackgroundProbe.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x378))();
}

uint64_t dispatch thunk of ARView.__parallaxBackgroundProbe.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380))();
}

uint64_t dispatch thunk of ARView.__targetIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of ARView.__didInitializeEngine()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x390))();
}

uint64_t dispatch thunk of ARView.realityFusionSession.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x398))();
}

uint64_t dispatch thunk of ARView.realityFusionSession.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of ARView.realityFusionSession.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of ARView.__interfaceOrientation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of ARView.__disableCounterRotation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B8))();
}

uint64_t dispatch thunk of ARView.__disableCounterRotation.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C0))();
}

uint64_t dispatch thunk of ARView.__disableCounterRotation.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of ARView.__disableComposition.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3D0))();
}

uint64_t dispatch thunk of ARView.__disableComposition.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3D8))();
}

uint64_t dispatch thunk of ARView.__disableComposition.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of ARView.__nonARKitDevices.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of ARView.__nonARKitDevices.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of ARView.__nonARKitDevices.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of ARView.onDrawingManagerCreated()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x400))();
}

uint64_t dispatch thunk of ARView.__proto_antialiasingMode_v1.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x438))();
}

uint64_t dispatch thunk of ARView.__proto_antialiasingMode_v1.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x440))();
}

uint64_t dispatch thunk of ARView.__proto_antialiasingMode_v1.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x448))();
}

uint64_t dispatch thunk of ARView.antialiasingMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x450))();
}

uint64_t dispatch thunk of ARView.antialiasingMode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x458))();
}

uint64_t dispatch thunk of ARView.antialiasingMode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x460))();
}

uint64_t dispatch thunk of ARView.__handleTapAtPoint(point:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x468))();
}

uint64_t dispatch thunk of ARView.__statisticsOptions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x478))();
}

uint64_t dispatch thunk of ARView.__statisticsOptions.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x480))();
}

uint64_t dispatch thunk of ARView.__statisticsOptions.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x488))();
}

uint64_t dispatch thunk of ARView.__frameProfilerAddCustomStatistic(_:_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x490))();
}

uint64_t dispatch thunk of ARView.__disableStatisticsRendering.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x498))();
}

uint64_t dispatch thunk of ARView.__disableStatisticsRendering.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4A0))();
}

uint64_t dispatch thunk of ARView.__disableStatisticsRendering.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4A8))();
}

uint64_t dispatch thunk of ARView.__getStatisticsStringForSingleOption(statisticOption:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4B0))();
}

uint64_t dispatch thunk of ARView.__setProfilerUpdateInterval(newInterval:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4B8))();
}

uint64_t dispatch thunk of ARView.__frameTime()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C0))();
}

uint64_t dispatch thunk of ARView.snapshot(saveToHDR:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C8))();
}

uint64_t dispatch thunk of ARView.__startAudioEngine()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4D0))();
}

uint64_t dispatch thunk of ARView.__stopAudioEngine()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4D8))();
}

uint64_t dispatch thunk of ARView.__distanceInMetersFromEntity(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4E8))();
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ARView.EDRHeadroomPolicy(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.EDRHeadroomPolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ARView.EDRHeadroomPolicy(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) <= 1u)
    return *(unsigned __int8 *)(a1 + 4);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for ARView.EDRHeadroomPolicy(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ARView.EDRHeadroomPolicy()
{
  return &type metadata for ARView.EDRHeadroomPolicy;
}

ValueMetadata *type metadata accessor for ARView.DebugOptions()
{
  return &type metadata for ARView.DebugOptions;
}

ValueMetadata *type metadata accessor for ARView.__StatisticsOptions()
{
  return &type metadata for ARView.__StatisticsOptions;
}

uint64_t getEnumTagSinglePayload for ARView.IBLType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.IBLType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1D95ADCF0 + 4 * byte_1D95E3EC5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1D95ADD24 + 4 * asc_1D95E3EC0[v4]))();
}

uint64_t sub_1D95ADD24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D95ADD2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D95ADD34);
  return result;
}

uint64_t sub_1D95ADD40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D95ADD48);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1D95ADD4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D95ADD54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ARView.IBLType()
{
  return &type metadata for ARView.IBLType;
}

unint64_t lazy protocol witness table accessor for type ARView.IBLType and conformance ARView.IBLType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.IBLType and conformance ARView.IBLType;
  if (!lazy protocol witness table cache variable for type ARView.IBLType and conformance ARView.IBLType)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.IBLType, &type metadata for ARView.IBLType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.IBLType and conformance ARView.IBLType);
  }
  return result;
}

uint64_t outlined destroy of weak __ARViewDelegatePrivate?(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t MTLRegionMake2D@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = result;
  a3[4] = a2;
  a3[5] = 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type Scene.AnchorCollection and conformance Scene.AnchorCollection()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Scene.AnchorCollection and conformance Scene.AnchorCollection;
  if (!lazy protocol witness table cache variable for type Scene.AnchorCollection and conformance Scene.AnchorCollection)
  {
    v1 = type metadata accessor for Scene.AnchorCollection();
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0CD4338], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Scene.AnchorCollection and conformance Scene.AnchorCollection);
  }
  return result;
}

uint64_t specialized ARView.hasTapInteractions(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 >> 62)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v2 = result;
    if (result)
      goto LABEL_3;
LABEL_34:
    swift_bridgeObjectRelease();
    return 0;
  }
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v2)
    goto LABEL_34;
LABEL_3:
  v4 = 0;
  v5 = a1 & 0xC000000000000001;
  v12 = v2;
  while (1)
  {
    if (v5)
    {
      MEMORY[0x1DF0906F4](v4, a1);
      v6 = __OFADD__(v4++, 1);
      if (v6)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
    }
    else
    {
      if (v4 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return result;
      }
      swift_retain();
      v6 = __OFADD__(v4++, 1);
      if (v6)
        goto LABEL_32;
    }
    dispatch thunk of __RKEntityInteraction.trigger.getter();
    type metadata accessor for __RKEntityTriggerGroup();
    if (!swift_dynamicCastClass())
      break;
    v7 = dispatch thunk of __RKEntityTriggerGroup.triggers.getter();
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v8)
      {
LABEL_15:
        v9 = 4;
        do
        {
          v10 = v9 - 4;
          if ((v7 & 0xC000000000000001) != 0)
          {
            MEMORY[0x1DF0906F4](v9 - 4, v7);
            v6 = __OFADD__(v10, 1);
            v11 = v9 - 3;
            if (v6)
              goto LABEL_31;
          }
          else
          {
            swift_retain();
            v6 = __OFADD__(v10, 1);
            v11 = v9 - 3;
            if (v6)
            {
LABEL_31:
              __break(1u);
              goto LABEL_32;
            }
          }
          type metadata accessor for __RKEntityTapTrigger();
          if (swift_dynamicCastClass())
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            goto LABEL_29;
          }
          swift_release();
          ++v9;
        }
        while (v11 != v8);
      }
    }
    else
    {
      v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v8)
        goto LABEL_15;
    }
    swift_release();
    swift_bridgeObjectRelease();
    v5 = a1 & 0xC000000000000001;
    v2 = v12;
LABEL_5:
    result = swift_release();
    if (v4 == v2)
      goto LABEL_34;
  }
  swift_release();
  dispatch thunk of __RKEntityInteraction.trigger.getter();
  swift_release();
  type metadata accessor for __RKEntityTapTrigger();
  if (!swift_dynamicCastClass())
    goto LABEL_5;
  swift_bridgeObjectRelease();
LABEL_29:
  swift_release();
  return 1;
}

uint64_t partial apply for closure #1 in ARView.commonInit(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ARView.commonInit(_:)(a1, v1);
}

uint64_t outlined assign with take of Cancellable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cancellable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in ARView.commonInit(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in ARView.commonInit(_:)(a1, v1);
}

uint64_t outlined init with take of vImage_CGImageFormat?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t GroupActivitiesSynchronizationProtocolLayer.__allocating_init<A>(session:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(a1);
  return v2;
}

uint64_t GroupActivitiesSynchronizationMessage.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GroupActivitiesSynchronizationMessage.CodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = a2;
  v11[1] = a3;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GroupActivitiesSynchronizationMessage.CodingKeys()
{
  return 1635017060;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GroupActivitiesSynchronizationMessage.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupActivitiesSynchronizationMessage.CodingKeys()
{
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GroupActivitiesSynchronizationMessage.CodingKeys()
{
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

_QWORD *protocol witness for Decodable.init(from:) in conformance GroupActivitiesSynchronizationMessage@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = specialized GroupActivitiesSynchronizationMessage.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupActivitiesSynchronizationMessage(_QWORD *a1)
{
  uint64_t *v1;

  return GroupActivitiesSynchronizationMessage.encode(to:)(a1, *v1, v1[1]);
}

unint64_t protocol witness for static CustomMessageIdentifiable.messageIdentifier.getter in conformance GroupActivitiesSynchronizationMessage()
{
  return 0xD000000000000025;
}

uint64_t GroupActivitiesSynchronizationProtocolHandle.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_participant;
  v2 = type metadata accessor for Participant();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for GroupActivitiesSynchronizationProtocolHandle()
{
  return type metadata accessor for GroupActivitiesSynchronizationProtocolHandle();
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationProtocolHandle()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GroupActivitiesSynchronizationProtocolHandle;
  if (!type metadata singleton initialization cache for GroupActivitiesSynchronizationProtocolHandle)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for GroupActivitiesSynchronizationProtocolHandle()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Participant();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void one-time initialization function for useUnreliableMessenger()
{
  id v0;
  void *v1;
  unsigned __int8 v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v1 = (void *)MEMORY[0x1DF090310](0xD00000000000003BLL, 0x80000001D95DE360);
  v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  static GroupActivitiesSynchronizationProtocolLayer.useUnreliableMessenger = v2;
}

uint64_t GroupActivitiesSynchronizationProtocolLayer.State.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t aBlock;
  uint64_t v66;
  uint64_t (*v67)();
  void *v68;
  uint64_t (*v69)();
  _QWORD *v70;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v62 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v61 = (char *)&v59 - v7;
  v8 = type metadata accessor for GroupSessionMessenger.DeliveryMode();
  v63 = *(_QWORD *)(v8 - 8);
  v64 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Participant();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for GroupActivitiesSynchronizationProtocolLayer.State();
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = MEMORY[0x1E0DEE9D8];
  v19[3] = dispatch_semaphore_create(0);
  v19[4] = 0;
  v2[2] = v19;
  v2[4] = 0;
  v2[5] = 0;
  GroupSession.localParticipant.getter();
  Participant.id.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v20 = UUID.uuidString.getter();
  v59 = v21;
  v60 = v20;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  type metadata accessor for GroupSessionMessenger();
  swift_retain();
  v22 = GroupSessionMessenger.__allocating_init<A>(session:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v10, *MEMORY[0x1E0CB3F68], v64);
  swift_retain();
  v64 = a1;
  v23 = GroupSessionMessenger.__allocating_init<A>(session:deliveryMode:)();
  v24 = RESyncProtocolLayerObserverCreate();
  v69 = protocol witness for static Equatable.== infix(_:_:) in conformance GroupActivitiesSynchronizationComponent.CodingKeys;
  v70 = 0;
  v25 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v66 = 1107296256;
  v67 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned Bool);
  v68 = &block_descriptor_7;
  v26 = _Block_copy(&aBlock);
  RESyncProtocolLayerObserverOnInit();
  _Block_release(v26);
  if (v24)
  {
    v27 = (_QWORD *)v2[2];
    v69 = partial apply for closure #2 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    v70 = v27;
    aBlock = v25;
    v66 = 1107296256;
    v67 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> ();
    v68 = &block_descriptor_3_1;
    v28 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RESyncProtocolLayerObserverOnDeinit();
    _Block_release(v28);
    v29 = (_QWORD *)v2[2];
    v69 = (uint64_t (*)())partial apply for closure #3 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    v70 = v29;
    aBlock = v25;
    v66 = 1107296256;
    v67 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@unowned Int) -> (@unowned OpaquePointer);
    v68 = &block_descriptor_6_3;
    v30 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RESyncProtocolLayerObserverOnOpenNullable();
    _Block_release(v30);
    v31 = (_QWORD *)v2[2];
    v69 = (uint64_t (*)())partial apply for closure #4 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    v70 = v31;
    aBlock = v25;
    v66 = 1107296256;
    v67 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer) -> ();
    v68 = &block_descriptor_9_0;
    v32 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RESyncProtocolLayerObserverOnClose();
    _Block_release(v32);
    v33 = (_QWORD *)v2[2];
    v69 = (uint64_t (*)())partial apply for closure #5 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    v70 = v33;
    aBlock = v25;
    v66 = 1107296256;
    v67 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer) -> ();
    v68 = &block_descriptor_12_1;
    v34 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RESyncProtocolLayerObserverOnDisconnect();
    _Block_release(v34);
    v35 = v2[2];
    v36 = (_QWORD *)swift_allocObject();
    v36[2] = v35;
    v36[3] = v23;
    v36[4] = v22;
    v69 = (uint64_t (*)())partial apply for closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    v70 = v36;
    aBlock = v25;
    v66 = 1107296256;
    v67 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @guaranteed @escaping @callee_guaranteed (@guaranteed @escaping @callee_guaranteed (@unowned RESyncChannelId, @unowned UnsafeRawPointer, @unowned UInt32, @unowned RESyncPacketDeliveryMethodType) -> (@unowned Bool)) -> ()) -> ();
    v68 = &block_descriptor_15;
    v37 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    RESyncProtocolLayerObserverOnSend();
    _Block_release(v37);
    v38 = (_QWORD *)v2[2];
    v69 = (uint64_t (*)())partial apply for closure #7 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    v70 = v38;
    aBlock = v25;
    v66 = 1107296256;
    v67 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> ();
    v68 = &block_descriptor_18_0;
    v39 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RESyncProtocolLayerObserverOnWait();
    _Block_release(v39);
    v40 = (_QWORD *)v2[2];
    v69 = partial apply for closure #8 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    v70 = v40;
    aBlock = v25;
    v66 = 1107296256;
    v67 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> ();
    v68 = &block_descriptor_21;
    v41 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RESyncProtocolLayerObserverOnWakeup();
    _Block_release(v41);
    v42 = swift_allocObject();
    v43 = v59;
    *(_QWORD *)(v42 + 16) = v60;
    *(_QWORD *)(v42 + 24) = v43;
    v69 = partial apply for closure #9 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    v70 = (_QWORD *)v42;
    aBlock = v25;
    v66 = 1107296256;
    v67 = thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    v68 = &block_descriptor_27_0;
    v44 = _Block_copy(&aBlock);
    swift_release();
    RESyncProtocolLayerObserverOnLocalAddresses();
    _Block_release(v44);
    v69 = getEnumTag for GroupActivitiesSynchronizationComponent.CodingKeys;
    v70 = 0;
    aBlock = v25;
    v66 = 1107296256;
    v67 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned Bool);
    v68 = &block_descriptor_30;
    v45 = _Block_copy(&aBlock);
    RESyncProtocolLayerObserverOnHostStats();
    _Block_release(v45);
    v69 = ARView.PostProcessContext.device.modify;
    v70 = 0;
    aBlock = v25;
    v66 = 1107296256;
    v67 = (uint64_t (*)())thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
    v68 = &block_descriptor_33;
    v46 = _Block_copy(&aBlock);
    RESyncProtocolLayerObserverOnSetDisconnectTimeout();
    _Block_release(v46);
    v69 = closure #12 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    v70 = 0;
    aBlock = v25;
    v66 = 1107296256;
    v67 = (uint64_t (*)())thunk for @escaping @callee_guaranteed () -> (@unowned UnsafePointer<Int8>);
    v68 = &block_descriptor_36;
    v47 = _Block_copy(&aBlock);
    RESyncProtocolLayerObserverOnPreferredPacketSize();
    _Block_release(v47);
    v48 = RESyncCustomProtocolLayerCreate();
    type metadata accessor for RESyncHandle();
    v49 = swift_allocObject();
    *(_QWORD *)(v49 + 16) = v48;
    v2[3] = v49;
    *(_QWORD *)(v2[2] + 32) = v48;
    v50 = type metadata accessor for TaskPriority();
    v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56);
    v52 = (uint64_t)v61;
    v51(v61, 1, 1, v50);
    v53 = swift_allocObject();
    swift_weakInit();
    v54 = (_QWORD *)swift_allocObject();
    v54[2] = 0;
    v54[3] = 0;
    v54[4] = v22;
    v54[5] = v53;
    swift_retain();
    v2[4] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v52, (uint64_t)&async function pointer to partial apply for closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:), (uint64_t)v54);
    swift_release();
    v55 = (uint64_t)v62;
    v51(v62, 1, 1, v50);
    v56 = swift_allocObject();
    swift_weakInit();
    v57 = (_QWORD *)swift_allocObject();
    v57[2] = 0;
    v57[3] = 0;
    v57[4] = v23;
    v57[5] = v56;
    swift_retain();
    v58 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v55, (uint64_t)&async function pointer to partial apply for closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:), (uint64_t)v57);
    swift_release();
    swift_release();
    swift_release();
    RESyncRelease();
    v2[5] = v58;
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #3 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_beginAccess();
  v3 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  v4 = String.init(cString:)();
  v6 = specialized Sequence.first(where:)(v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v6)
    return v6;
  v7 = *(_QWORD *)(v6
                 + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle);
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(v7 + 16);
  swift_release();
  if (!v6)
    return v6;
  result = *(_QWORD *)(a2 + 32);
  if (result)
  {
    RESyncCustomProtocolLayerOnConnected();
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t closure #4 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  swift_beginAccess();
  v5 = *(_QWORD *)(a3 + 16);
  if (v5 >> 62)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6)
      goto LABEL_3;
LABEL_19:
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_19;
LABEL_3:
  if ((v5 & 0xC000000000000001) != 0)
  {
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(MEMORY[0x1DF0906F4](v7, v5)
                                 + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                     + 16);
      swift_unknownObjectRelease();
      if (v8 && v8 == a1)
        break;
      v10 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_23;
      }
      ++v7;
      if (v10 == v6)
        goto LABEL_19;
    }
  }
  else
  {
    v7 = 0;
    while (1)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8 * v7 + 32)
                                  + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                      + 16);
      if (v11 && v11 == a1)
        break;
      v13 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      ++v7;
      if (v13 == v6)
        goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease();
  specialized Array.remove(at:)(v7);
  swift_release();
  return swift_endAccess();
}

uint64_t closure #5 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t j;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;

  swift_beginAccess();
  v5 = *(_QWORD *)(a3 + 16);
  if (v5 >> 62)
    goto LABEL_25;
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        v8 = MEMORY[0x1DF0906F4](i, v5);
        v9 = i + 1;
        if (__OFADD__(i, 1))
          break;
        v10 = *(_QWORD *)(*(_QWORD *)(v8
                                    + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                        + 16);
        if (v10)
          v11 = v10 == a1;
        else
          v11 = 0;
        if (v11)
          goto LABEL_21;
        swift_unknownObjectRelease();
        if (v9 == v6)
          return swift_bridgeObjectRelease_n();
      }
      __break(1u);
    }
    else
    {
      for (j = 0; ; ++j)
      {
        v13 = j + 1;
        if (__OFADD__(j, 1))
          break;
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8 * j + 32)
                                    + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                        + 16);
        if (v14)
          v15 = v14 == a1;
        else
          v15 = 0;
        if (v15)
        {
          swift_retain();
LABEL_21:
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRetain();
          result = swift_release();
          if (*(_QWORD *)(a3 + 32))
          {
            String.utf8CString.getter();
            swift_bridgeObjectRelease();
            RESyncCustomProtocolLayerOnDisconnected();
            return swift_release();
          }
          else
          {
            __break(1u);
          }
          return result;
        }
        if (v13 == v6)
          return swift_bridgeObjectRelease_n();
      }
    }
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain_n();
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, char *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  void (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  void (*v37)(uint64_t (*)(uint64_t, uint64_t, unsigned int, int), uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v40 = a5;
  v41 = a6;
  v10 = type metadata accessor for Participant();
  v11 = *(char **)(v10 - 8);
  v12 = *((_QWORD *)v11 + 8);
  MEMORY[0x1E0C80A78](v10);
  v38 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v36 - v14;
  MEMORY[0x1E0C80A78](v16);
  v39 = (char *)v36 - v17;
  swift_beginAccess();
  v18 = *(_QWORD *)(a4 + 16);
  if (v18 >> 62)
    goto LABEL_25;
  v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v19; v19 = _CocoaArrayWrapper.endIndex.getter())
  {
    if ((v18 & 0xC000000000000001) != 0)
    {
      v36[0] = v11;
      v36[1] = a3;
      v37 = (void (*)(uint64_t (*)(uint64_t, uint64_t, unsigned int, int), uint64_t))a2;
      a2 = 0;
      a3 = &unk_1F01D3000;
      while (1)
      {
        v20 = MEMORY[0x1DF0906F4](a2, v18);
        v11 = a2 + 1;
        if (__OFADD__(a2, 1))
          break;
        v21 = v20;
        v22 = *(_QWORD *)(*(_QWORD *)(v20
                                    + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                        + 16);
        if (v22)
          v23 = v22 == a1;
        else
          v23 = 0;
        if (v23)
        {
          v11 = (char *)v36[0];
          goto LABEL_22;
        }
        swift_unknownObjectRelease();
        ++a2;
        if (v11 == (char *)v19)
          return swift_bridgeObjectRelease_n();
      }
      __break(1u);
    }
    else
    {
      for (i = 0; ; ++i)
      {
        v25 = i + 1;
        if (__OFADD__(i, 1))
          break;
        v21 = *(_QWORD *)(v18 + 8 * i + 32);
        v26 = *(_QWORD *)(*(_QWORD *)(v21
                                    + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                        + 16);
        if (v26)
          v27 = v26 == a1;
        else
          v27 = 0;
        if (v27)
        {
          swift_retain();
          v37 = (void (*)(uint64_t (*)(uint64_t, uint64_t, unsigned int, int), uint64_t))a2;
LABEL_22:
          swift_bridgeObjectRelease_n();
          v29 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v11 + 2);
          v29(v15, v21+ OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_participant, v10);
          swift_release();
          v30 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v11 + 4);
          v31 = v39;
          v30(v39, v15, v10);
          v32 = v38;
          v29(v38, (uint64_t)v31, v10);
          v33 = (v11[80] + 32) & ~(unint64_t)v11[80];
          v34 = swift_allocObject();
          v35 = v41;
          *(_QWORD *)(v34 + 16) = v40;
          *(_QWORD *)(v34 + 24) = v35;
          v30((char *)(v34 + v33), v32, v10);
          swift_retain();
          swift_retain();
          v37(partial apply for closure #1 in closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:), v34);
          swift_release();
          return (*((uint64_t (**)(char *, uint64_t))v11 + 1))(v31, v10);
        }
        if (v25 == v19)
          return swift_bridgeObjectRelease_n();
      }
    }
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain_n();
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t closure #1 in closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, _QWORD);
  _QWORD v23[2];
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v25 = a7;
  v23[1] = a5;
  v24 = a4;
  v9 = type metadata accessor for Participants();
  v26 = *(_QWORD *)(v9 - 8);
  v27 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Data.Deallocator();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v13 + 104))(v16, *MEMORY[0x1E0CB00C8], v12, v14);
  Data.Deallocator._deallocator.getter();
  if (a3)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    v17 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    v18 = specialized Data._Representation.init(_:count:)(v17, a3);
    v20 = v19;
    swift_release();
  }
  else
  {
    v21 = (void (*)(uint64_t, _QWORD))Data.Deallocator._deallocator.getter();
    v21(a2, 0);
    swift_release();
    swift_release();
    v18 = 0;
    v20 = 0xC000000000000000;
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if (v24 && one-time initialization token for useUnreliableMessenger != -1)
    swift_once();
  v28 = v18;
  v29 = v20;
  swift_retain();
  outlined copy of Data._Representation(v18, v20);
  static Participants.only(_:)();
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage();
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage();
  GroupSessionMessenger.send<A>(_:to:completion:)();
  swift_release();
  outlined consume of Data._Representation(v18, v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
  outlined consume of Data._Representation(v28, v29);
  return 1;
}

void closure #1 in closure #1 in closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *oslog;
  uint64_t v11;

  if (a1)
  {
    if (one-time initialization token for groupActivities != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.groupActivities);
    v3 = a1;
    v4 = a1;
    oslog = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v11 = v7;
      *(_DWORD *)v6 = 136315138;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
      v8 = Optional.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1D956D000, oslog, v5, "Messenger send error: %s", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF091C54](v7, -1, -1);
      MEMORY[0x1DF091C54](v6, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @guaranteed @escaping @callee_guaranteed (@guaranteed @escaping @callee_guaranteed (@unowned RESyncChannelId, @unowned UnsafeRawPointer, @unowned UInt32, @unowned RESyncPacketDeliveryMethodType) -> (@unowned Bool)) -> ()) -> ()(uint64_t a1, uint64_t a2, void *aBlock)
{
  void (*v4)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t);
  void *v5;
  uint64_t v6;

  v4 = *(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(a1 + 32);
  v5 = _Block_copy(aBlock);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  swift_retain();
  v4(a2, partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned @escaping @callee_unowned @convention(block) (@unowned RESyncChannelId, @unowned UnsafeRawPointer, @unowned UInt32, @unowned RESyncPacketDeliveryMethodType) -> (@unowned Bool)) -> (), v6);
  swift_release();
  return swift_release();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned @escaping @callee_unowned @convention(block) (@unowned RESyncChannelId, @unowned UnsafeRawPointer, @unowned UInt32, @unowned RESyncPacketDeliveryMethodType) -> (@unowned Bool)) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void (*v5)(uint64_t, void *);
  _QWORD v7[6];

  v7[4] = a1;
  v7[5] = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@unowned RESyncChannelId, @unowned UnsafeRawPointer, @unowned UInt32, @unowned RESyncPacketDeliveryMethodType) -> (@unowned Bool);
  v7[3] = &block_descriptor_56;
  v4 = _Block_copy(v7);
  v5 = *(void (**)(uint64_t, void *))(a3 + 16);
  swift_retain();
  v5(a3, v4);
  _Block_release(v4);
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned RESyncChannelId, @unowned UnsafeRawPointer, @unowned UInt32, @unowned RESyncPacketDeliveryMethodType) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a5) = v9(a2, a3, a4, a5);
  swift_release();
  return a5 & 1;
}

uint64_t closure #9 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)()
{
  void *v0;
  id v1;
  id v2;

  v0 = (void *)MEMORY[0x1DF090310]();
  v1 = objc_msgSend(v0, sel_UTF8String);
  v2 = v0;
  if (!v1)
    __break(1u);
  return RESyncAddressListCreate();
}

uint64_t closure #12 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)()
{
  return 950;
}

uint64_t closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[9] = a4;
  v5[10] = a5;
  v6 = type metadata accessor for Participant();
  v5[11] = v6;
  v5[12] = *(_QWORD *)(v6 - 8);
  v5[13] = swift_task_alloc();
  v7 = type metadata accessor for GroupSessionMessenger.MessageContext();
  v5[14] = v7;
  v5[15] = *(_QWORD *)(v7 - 8);
  v5[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupActivitiesSynchronizationMessage, GroupSessionMessenger.MessageContext)?);
  v5[17] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>);
  v5[18] = v8;
  v5[19] = *(_QWORD *)(v8 - 8);
  v5[20] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator);
  v5[21] = v9;
  v5[22] = *(_QWORD *)(v9 - 8);
  v5[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[19];
  v1 = v0[20];
  v3 = v0[18];
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage();
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage();
  GroupSessionMessenger.messages<A>(of:)();
  GroupSessionMessenger.Messages.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_beginAccess();
  v0[24] = lazy protocol witness table accessor for type GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator();
  v4 = (_QWORD *)swift_task_alloc();
  v0[25] = v4;
  *v4 = v0;
  v4[1] = closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 208) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = *(uint64_t **)(v0 + 136);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupActivitiesSynchronizationMessage, GroupSessionMessenger.MessageContext));
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = *v1;
  v4 = v1[1];
  (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 120) + 32))(*(_QWORD *)(v0 + 128), (char *)v1 + *(int *)(v2 + 48), *(_QWORD *)(v0 + 112));
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v7 = Strong;
    outlined copy of Data._Representation(v5, v4);
    GroupSessionMessenger.MessageContext.source.getter();
    v8 = *(_QWORD *)(v7 + 16);
    swift_beginAccess();
    v9 = *(_QWORD *)(v8 + 16);
    if (v9 >> 62)
      goto LABEL_23;
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    while (v10)
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        v11 = MEMORY[0x1DF0906F4](0, v9);
      }
      else
      {
        v11 = *(_QWORD *)(v9 + 32);
        swift_retain();
      }
      if ((MEMORY[0x1DF08F710](v11+ OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_participant, *(_QWORD *)(v0 + 104)) & 1) != 0)
      {
LABEL_9:
        swift_bridgeObjectRelease_n();
        __asm { BR              X10 }
      }
      swift_release();
      if (v10 == 1)
        break;
      v12 = 5;
      while (1)
      {
        v13 = v12 - 4;
        if ((v9 & 0xC000000000000001) != 0)
        {
          v14 = MEMORY[0x1DF0906F4](v12 - 4, v9);
          v15 = __OFADD__(v13, 1);
          v16 = v12 - 3;
          if (v15)
            break;
          goto LABEL_18;
        }
        v14 = *(_QWORD *)(v9 + 8 * v12);
        swift_retain();
        v15 = __OFADD__(v13, 1);
        v16 = v12 - 3;
        if (v15)
          break;
LABEL_18:
        if ((MEMORY[0x1DF08F710](v14+ OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_participant, *(_QWORD *)(v0 + 104)) & 1) != 0)goto LABEL_9;
        swift_release();
        ++v12;
        if (v16 == v10)
          goto LABEL_20;
      }
      __break(1u);
LABEL_23:
      swift_bridgeObjectRetain_n();
      v10 = _CocoaArrayWrapper.endIndex.getter();
    }
LABEL_20:
    swift_bridgeObjectRelease_n();
    outlined consume of Data._Representation(v5, v4);
    swift_release();
    outlined consume of Data._Representation(v5, v4);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
  }
  else
  {
    outlined consume of Data._Representation(v5, v4);
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v17;
  *v17 = v0;
  v17[1] = closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 64) = *(_QWORD *)(v0 + 208);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 208) = v0;
  return swift_task_switch();
}

uint64_t closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[9] = a4;
  v5[10] = a5;
  v6 = type metadata accessor for Participant();
  v5[11] = v6;
  v5[12] = *(_QWORD *)(v6 - 8);
  v5[13] = swift_task_alloc();
  v7 = type metadata accessor for GroupSessionMessenger.MessageContext();
  v5[14] = v7;
  v5[15] = *(_QWORD *)(v7 - 8);
  v5[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupActivitiesSynchronizationMessage, GroupSessionMessenger.MessageContext)?);
  v5[17] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>);
  v5[18] = v8;
  v5[19] = *(_QWORD *)(v8 - 8);
  v5[20] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator);
  v5[21] = v9;
  v5[22] = *(_QWORD *)(v9 - 8);
  v5[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[19];
  v1 = v0[20];
  v3 = v0[18];
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage();
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage();
  GroupSessionMessenger.messages<A>(of:)();
  GroupSessionMessenger.Messages.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_beginAccess();
  v0[24] = lazy protocol witness table accessor for type GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator();
  v4 = (_QWORD *)swift_task_alloc();
  v0[25] = v4;
  *v4 = v0;
  v4[1] = closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 208) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = *(uint64_t **)(v0 + 136);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupActivitiesSynchronizationMessage, GroupSessionMessenger.MessageContext));
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = *v1;
  v4 = v1[1];
  (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 120) + 32))(*(_QWORD *)(v0 + 128), (char *)v1 + *(int *)(v2 + 48), *(_QWORD *)(v0 + 112));
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v7 = Strong;
    outlined copy of Data._Representation(v5, v4);
    GroupSessionMessenger.MessageContext.source.getter();
    v8 = *(_QWORD *)(v7 + 16);
    swift_beginAccess();
    v9 = *(_QWORD *)(v8 + 16);
    if (v9 >> 62)
      goto LABEL_23;
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    while (v10)
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        v11 = MEMORY[0x1DF0906F4](0, v9);
      }
      else
      {
        v11 = *(_QWORD *)(v9 + 32);
        swift_retain();
      }
      if ((MEMORY[0x1DF08F710](v11+ OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_participant, *(_QWORD *)(v0 + 104)) & 1) != 0)
      {
LABEL_9:
        swift_bridgeObjectRelease_n();
        __asm { BR              X10 }
      }
      swift_release();
      if (v10 == 1)
        break;
      v12 = 5;
      while (1)
      {
        v13 = v12 - 4;
        if ((v9 & 0xC000000000000001) != 0)
        {
          v14 = MEMORY[0x1DF0906F4](v12 - 4, v9);
          v15 = __OFADD__(v13, 1);
          v16 = v12 - 3;
          if (v15)
            break;
          goto LABEL_18;
        }
        v14 = *(_QWORD *)(v9 + 8 * v12);
        swift_retain();
        v15 = __OFADD__(v13, 1);
        v16 = v12 - 3;
        if (v15)
          break;
LABEL_18:
        if ((MEMORY[0x1DF08F710](v14+ OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_participant, *(_QWORD *)(v0 + 104)) & 1) != 0)goto LABEL_9;
        swift_release();
        ++v12;
        if (v16 == v10)
          goto LABEL_20;
      }
      __break(1u);
LABEL_23:
      swift_bridgeObjectRetain_n();
      v10 = _CocoaArrayWrapper.endIndex.getter();
    }
LABEL_20:
    swift_bridgeObjectRelease_n();
    outlined consume of Data._Representation(v5, v4);
    swift_release();
    outlined consume of Data._Representation(v5, v4);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
  }
  else
  {
    outlined consume of Data._Representation(v5, v4);
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v17;
  *v17 = v0;
  v17[1] = closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 208) = v0;
  return swift_task_switch();
}

{
  return closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)();
}

void GroupActivitiesSynchronizationProtocolLayer.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 32))
  {
    v1 = swift_retain();
    v2 = MEMORY[0x1E0DEE9C0] + 8;
    MEMORY[0x1DF09043C](v1, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
    if (*(_QWORD *)(v0 + 40))
    {
      v3 = swift_retain();
      MEMORY[0x1DF09043C](v3, v2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_deallocClassInstance();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationProtocolLayer()
{
  return objc_opt_self();
}

uint64_t GroupActivitiesSynchronizationProtocolLayer.add(participant:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, __n128);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Participant();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v1 + 16);
  v13 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
  v13(v11, a1, v7, v9);
  type metadata accessor for GroupActivitiesSynchronizationProtocolHandle();
  v14 = swift_allocObject();
  ((void (*)(uint64_t, char *, uint64_t))v13)(v14+ OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_participant, v11, v7);
  swift_retain();
  Participant.id.getter();
  v15 = UUID.uuidString.getter();
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v18 = (uint64_t *)(v14
                  + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_address);
  *v18 = v15;
  v18[1] = v17;
  v19 = RESyncProtocolHandleCreate();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  type metadata accessor for RESyncHandle();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v14
            + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle) = v20;
  v21 = swift_beginAccess();
  MEMORY[0x1DF0903A0](v21);
  if (*(_QWORD *)((*(_QWORD *)(v12 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v12 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  return swift_release();
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationProtocolLayer.State()
{
  return objc_opt_self();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t partial apply for closure #2 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #3 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(a1, v1);
}

uint64_t partial apply for closure #4 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #4 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(a1, a2, v2);
}

uint64_t partial apply for closure #5 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #5 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(a1, a2, v2);
}

uint64_t sub_1D95B1324()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, char *a2, void *a3)
{
  uint64_t *v3;

  return closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(a1, a2, a3, v3[2], v3[3], v3[4]);
}

void partial apply for closure #7 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)()
{
  OS_dispatch_semaphore.wait()();
}

Swift::Int partial apply for closure #8 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_1D95B13A4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #9 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)()
{
  return closure #9 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)();
}

uint64_t sub_1D95B13D0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for ARKitRunnable.runARKitSession(withSupportedCapabilities:) in conformance ARSessionManager;
  return closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(a1, v4, v5, v7, v6);
}

uint64_t objectdestroy_41Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(a1, v4, v5, v7, v6);
}

unint64_t lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for GroupActivitiesSynchronizationMessage, &type metadata for GroupActivitiesSynchronizationMessage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for GroupActivitiesSynchronizationMessage, &type metadata for GroupActivitiesSynchronizationMessage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator);
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0CB4010], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator);
  }
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1D95B1638()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned @escaping @callee_unowned @convention(block) (@unowned RESyncChannelId, @unowned UnsafeRawPointer, @unowned UInt32, @unowned RESyncPacketDeliveryMethodType) -> (@unowned Bool)) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned @escaping @callee_unowned @convention(block) (@unowned RESyncChannelId, @unowned UnsafeRawPointer, @unowned UInt32, @unowned RESyncPacketDeliveryMethodType) -> (@unowned Bool)) -> ()(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1D95B1664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for Participant();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Participant() - 8) + 80);
  return closure #1 in closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), v4 + ((v9 + 32) & ~v9));
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;

  if (a1 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      v7 = 4;
      do
      {
        v8 = v7 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v9 = MEMORY[0x1DF0906F4](v7 - 4, a1);
          v10 = __OFADD__(v8, 1);
          v11 = v7 - 3;
          if (v10)
            goto LABEL_17;
        }
        else
        {
          v9 = *(_QWORD *)(a1 + 8 * v7);
          swift_retain();
          v10 = __OFADD__(v8, 1);
          v11 = v7 - 3;
          if (v10)
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        v12 = *(_QWORD *)(v9
                        + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_address) == a2
           && *(_QWORD *)(v9
                        + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_address
                        + 8) == a3;
        if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
        swift_release();
        ++v7;
      }
      while (v11 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

_QWORD *specialized GroupActivitiesSynchronizationMessage.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GroupActivitiesSynchronizationMessage.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v7 = v9;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v7;
}

uint64_t specialized Data._Representation.init(_:count:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF)
      return a2 << 32;
    type metadata accessor for Data.RangeReference();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = (_BYTE *)__DataStorage._bytes.getter();
    if (!v4)
    {
LABEL_10:
      v5 = __DataStorage._length.getter();
      if (v5 >= a2)
        v6 = a2;
      else
        v6 = v5;
      v7 = &v4[v6];
      if (v4)
        v8 = v7;
      else
        v8 = 0;
      v3 = specialized Data.InlineData.init(_:)(v4, v8);
      swift_release();
      return v3;
    }
    result = __DataStorage._offset.getter();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupActivitiesSynchronizationMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for GroupActivitiesSynchronizationMessage(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for GroupActivitiesSynchronizationMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t *assignWithTake for GroupActivitiesSynchronizationMessage(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupActivitiesSynchronizationMessage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for GroupActivitiesSynchronizationMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupActivitiesSynchronizationMessage()
{
  return &type metadata for GroupActivitiesSynchronizationMessage;
}

unint64_t lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for GroupActivitiesSynchronizationMessage.CodingKeys, &unk_1E9F44630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for GroupActivitiesSynchronizationMessage.CodingKeys, &unk_1E9F44630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for GroupActivitiesSynchronizationMessage.CodingKeys, &unk_1E9F44630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for GroupActivitiesSynchronizationMessage.CodingKeys, &unk_1E9F44630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for GroupActivitiesSynchronizationMessage.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D95B235C + 4 * byte_1D95E43E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D95B237C + 4 * byte_1D95E43E5[v4]))();
}

_BYTE *sub_1D95B235C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D95B237C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D95B2384(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D95B238C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D95B2394(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D95B239C(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for GroupActivitiesSynchronizationMessage.CodingKeys()
{
  return &unk_1E9F44630;
}

uint64_t SpatialTrackingSession.run(_:session:arConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[13] = a3;
  v4[14] = a4;
  v4[11] = a1;
  v4[12] = a2;
  v5 = type metadata accessor for SpatialTrackingSession.UnavailableCapabilities();
  v4[15] = v5;
  v4[16] = *(_QWORD *)(v5 - 8);
  v4[17] = swift_task_alloc();
  type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  v4[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTrackingSession.Configuration?);
  v4[19] = swift_task_alloc();
  v6 = type metadata accessor for SpatialTrackingSession.Configuration();
  v4[20] = v6;
  v4[21] = *(_QWORD *)(v6 - 8);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  v4[24] = type metadata accessor for MainActor();
  v4[25] = static MainActor.shared.getter();
  v4[26] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[27] = v7;
  return swift_task_switch();
}

uint64_t SpatialTrackingSession.run(_:session:arConfiguration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  type metadata accessor for SpatialTrackingManager();
  v1 = static SpatialTrackingManager.shared.getter();
  *(_QWORD *)(v0 + 224) = v1;
  if (!v1)
  {
    v7 = *(_QWORD *)(v0 + 168);
    v6 = *(_QWORD *)(v0 + 176);
    v8 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 120);
    v10 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 96);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v11, v8);
    SpatialTrackingSession.UnavailableCapabilities.init(unsupportedConfiguration:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  dispatch thunk of SpatialTrackingManager.isRunningUserSession.setter();
  SpatialTrackingManager.arkitRunnable.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ARKitRunnable);
  type metadata accessor for ARSessionManager();
  if (!swift_dynamicCast())
  {
    v14 = *(_QWORD *)(v0 + 168);
    v13 = *(_QWORD *)(v0 + 176);
    v15 = *(_QWORD *)(v0 + 160);
    v16 = *(_QWORD *)(v0 + 120);
    v17 = *(_QWORD *)(v0 + 128);
    v19 = *(_QWORD *)(v0 + 88);
    v18 = *(_QWORD *)(v0 + 96);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v18, v15);
    SpatialTrackingSession.UnavailableCapabilities.init(unsupportedConfiguration:)();
    swift_release();
    v20 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56);
LABEL_13:
    v20(v19, 0, 1, v16);
    goto LABEL_14;
  }
  v2 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 232) = v2;
  swift_beginAccess();
  *(_BYTE *)(v2 + 40) = 1;
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v3 = *(_QWORD *)(v0 + 152);
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(id *)(v0 + 112);
    ARWorldTrackingConfiguration.filterConfiguration(_:)(v4, v3);
  }
  else
  {
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
    {
      v21 = *(_QWORD *)(v0 + 152);
      v22 = *(_QWORD *)(v0 + 96);
      v23 = *(id *)(v0 + 112);
      ARBodyTrackingConfiguration.filterConfiguration(_:)(v22, v21);
    }
    else
    {
      objc_opt_self();
      if (!swift_dynamicCastObjCClass())
      {
        v32 = *(_QWORD *)(v0 + 160);
        v33 = *(_QWORD *)(v0 + 168);
        v34 = *(_QWORD *)(v0 + 152);
        SpatialTrackingSession.Configuration.camera.getter();
        SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v34, 0, 1, v32);
        goto LABEL_16;
      }
      v24 = *(_QWORD *)(v0 + 152);
      v25 = *(id *)(v0 + 112);
      ARFaceTrackingConfiguration.filterConfiguration(_:)(v24);
    }
  }
  v26 = *(_QWORD *)(v0 + 160);
  v27 = *(_QWORD *)(v0 + 168);
  v28 = *(_QWORD *)(v0 + 152);

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v28, 1, v26) == 1)
  {
    v29 = *(_QWORD *)(v0 + 152);
    v16 = *(_QWORD *)(v0 + 120);
    v30 = *(_QWORD *)(v0 + 128);
    v19 = *(_QWORD *)(v0 + 88);
    swift_release();
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v29, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration?);
    SpatialTrackingSession.UnavailableCapabilities.init()();
    SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
    SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedSceneUnderstandingCapabilities.setter();
    SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
    SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedAnchorCapabilities.setter();
    swift_release();
    swift_release();
    v20 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56);
    goto LABEL_13;
  }
LABEL_16:
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 32))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 240) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 104);
  swift_release();
  closure #1 in ARSessionManager.configureViewUsingSession(_:supportedCapabilities:)(v1, v2);
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_release();
  SpatialTrackingSession.UnavailableCapabilities.init()();
  v1 = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
  v2 = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
  if (*(_QWORD *)(v2 + 16) <= *(_QWORD *)(v1 + 16) >> 3)
    specialized Set._subtract<A>(_:)(v2);
  else
    specialized _NativeSet.subtracting<A>(_:)(v2, v1);
  swift_bridgeObjectRelease();
  SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedAnchorCapabilities.setter();
  v3 = SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
  v4 = SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
  if (*(_QWORD *)(v4 + 16) <= *(_QWORD *)(v3 + 16) >> 3)
    specialized Set._subtract<A>(_:)(v4);
  else
    specialized _NativeSet.subtracting<A>(_:)(v4, v3);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 128);
  SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedSceneUnderstandingCapabilities.setter();
  v9 = SpatialTrackingSession.UnavailableCapabilities.anyUnavailableCapabilities.getter();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v10 = *(_QWORD *)(v0 + 128);
  v11 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 88);
  if ((v9 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v10 + 32))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    v13 = 0;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    v13 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v12, v13, 1, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, unint64_t, uint64_t);
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  void *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v55 = (char *)&v49 - v12;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  v13 = -1 << *(_BYTE *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = ~v13;
  v16 = -v13;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v56 = a1;
  v57 = a1 + 56;
  v18 = a1;
  v19 = a1 + 56;
  v20 = v17 & v14;
  v21 = v15;
  v58 = v15;
  v59 = 0;
  v60 = v17 & v14;
  v54 = (char *)(a2 + 56);
  v22 = v18;
  swift_bridgeObjectRetain();
  v23 = 0;
  v50 = v6;
  v53 = a2;
  v51 = v20;
  v52 = 0;
  if (!v20)
    goto LABEL_8;
LABEL_6:
  v24 = (v20 - 1) & v20;
  v25 = __clz(__rbit64(v20)) | (v23 << 6);
  v26 = v23;
  v27 = v19;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v6, *(_QWORD *)(v22 + 48) + *(_QWORD *)(v8 + 72) * v25, v7);
  v28 = 0;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v28, 1, v7);
    v56 = v22;
    v57 = v27;
    v58 = v21;
    v59 = v26;
    v60 = v24;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      outlined consume of Set<UITouch>.Iterator._Variant();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v6, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?);
      return v53;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v55, v6, v7);
    v32 = v53;
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4CC0], MEMORY[0x1E0CD4CD0]);
    v33 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v34 = -1 << *(_BYTE *)(v32 + 32);
    v35 = v33 & ~v34;
    if (((*(_QWORD *)&v54[(v35 >> 3) & 0xFFFFFFFFFFFFF8] >> v35) & 1) != 0)
      break;
    v41 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_34:
    v41(v55, v7);
    v23 = v59;
    v20 = v60;
    v22 = v56;
    v19 = v57;
    v21 = v58;
    v6 = v50;
    v51 = v60;
    v52 = v59;
    if (v60)
      goto LABEL_6;
LABEL_8:
    v26 = v23 + 1;
    if (__OFADD__(v23, 1))
      __break(1u);
    v27 = v19;
    v29 = (unint64_t)(v21 + 64) >> 6;
    if (v26 >= v29)
      goto LABEL_26;
    v30 = *(_QWORD *)(v19 + 8 * v26);
    if (v30)
      goto LABEL_11;
    v23 += 2;
    if (v26 + 1 >= v29)
      goto LABEL_36;
    v30 = *(_QWORD *)(v19 + 8 * v23);
    if (v30)
      goto LABEL_14;
    if (v26 + 2 >= v29)
    {
LABEL_26:
      v24 = 0;
      v28 = 1;
      v26 = v23;
    }
    else
    {
      v30 = *(_QWORD *)(v19 + 8 * (v26 + 2));
      if (v30)
      {
        v26 += 2;
        goto LABEL_11;
      }
      v23 = v26 + 3;
      if (v26 + 3 >= v29)
      {
        v24 = 0;
        v28 = 1;
        v26 += 2;
      }
      else
      {
        v30 = *(_QWORD *)(v19 + 8 * v23);
        if (v30)
        {
LABEL_14:
          v26 = v23;
LABEL_11:
          v24 = (v30 - 1) & v30;
          v25 = __clz(__rbit64(v30)) + (v26 << 6);
          goto LABEL_7;
        }
        v26 += 4;
        if (v26 >= v29)
          goto LABEL_26;
        v30 = *(_QWORD *)(v19 + 8 * v26);
        if (v30)
          goto LABEL_11;
        v26 = v29 - 1;
        v31 = v52 + 6;
        while (v29 != v31)
        {
          v30 = *(_QWORD *)(v19 + 8 * v31++);
          if (v30)
          {
            v26 = v31 - 1;
            goto LABEL_11;
          }
        }
LABEL_36:
        v24 = 0;
        v28 = 1;
      }
    }
  }
  v36 = v32;
  v37 = ~v34;
  v38 = *(_QWORD *)(v8 + 72);
  v39 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v39(v11, *(_QWORD *)(v36 + 48) + v38 * v35, v7);
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4CC0], MEMORY[0x1E0CD4CD8]);
    v40 = dispatch thunk of static Equatable.== infix(_:_:)();
    v41 = *(void (**)(char *, uint64_t))(v8 + 8);
    v41(v11, v7);
    if ((v40 & 1) != 0)
      break;
    v35 = (v35 + 1) & v37;
    if (((*(_QWORD *)&v54[(v35 >> 3) & 0xFFFFFFFFFFFFF8] >> v35) & 1) == 0)
      goto LABEL_34;
  }
  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v41)(v55, v7);
  v43 = *(_BYTE *)(v36 + 32);
  v44 = (unint64_t)((1 << v43) + 63) >> 6;
  v45 = 8 * v44;
  if ((v43 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    memcpy((char *)&v49 - ((v45 + 15) & 0x3FFFFFFFFFFFFFF0), v54, v45);
    v46 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v49 - ((v45 + 15) & 0x3FFFFFFFFFFFFFF0)), v44, v36, v35, &v56);
    swift_release();
    outlined consume of Set<UITouch>.Iterator._Variant();
  }
  else
  {
    v48 = (void *)swift_slowAlloc();
    memcpy(v48, v54, v45);
    v46 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v48, v44, v36, v35, &v56);
    swift_release();
    outlined consume of Set<UITouch>.Iterator._Variant();
    MEMORY[0x1DF091C54](v48, -1, -1);
  }
  return v46;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, unint64_t, uint64_t);
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  void *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v55 = (char *)&v49 - v12;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  v13 = -1 << *(_BYTE *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = ~v13;
  v16 = -v13;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v56 = a1;
  v57 = a1 + 56;
  v18 = a1;
  v19 = a1 + 56;
  v20 = v17 & v14;
  v21 = v15;
  v58 = v15;
  v59 = 0;
  v60 = v17 & v14;
  v54 = (char *)(a2 + 56);
  v22 = v18;
  swift_bridgeObjectRetain();
  v23 = 0;
  v50 = v6;
  v53 = a2;
  v51 = v20;
  v52 = 0;
  if (!v20)
    goto LABEL_8;
LABEL_6:
  v24 = (v20 - 1) & v20;
  v25 = __clz(__rbit64(v20)) | (v23 << 6);
  v26 = v23;
  v27 = v19;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v6, *(_QWORD *)(v22 + 48) + *(_QWORD *)(v8 + 72) * v25, v7);
  v28 = 0;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v28, 1, v7);
    v56 = v22;
    v57 = v27;
    v58 = v21;
    v59 = v26;
    v60 = v24;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      outlined consume of Set<UITouch>.Iterator._Variant();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v6, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?);
      return v53;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v55, v6, v7);
    v32 = v53;
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C78]);
    v33 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v34 = -1 << *(_BYTE *)(v32 + 32);
    v35 = v33 & ~v34;
    if (((*(_QWORD *)&v54[(v35 >> 3) & 0xFFFFFFFFFFFFF8] >> v35) & 1) != 0)
      break;
    v41 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_34:
    v41(v55, v7);
    v23 = v59;
    v20 = v60;
    v22 = v56;
    v19 = v57;
    v21 = v58;
    v6 = v50;
    v51 = v60;
    v52 = v59;
    if (v60)
      goto LABEL_6;
LABEL_8:
    v26 = v23 + 1;
    if (__OFADD__(v23, 1))
      __break(1u);
    v27 = v19;
    v29 = (unint64_t)(v21 + 64) >> 6;
    if (v26 >= v29)
      goto LABEL_26;
    v30 = *(_QWORD *)(v19 + 8 * v26);
    if (v30)
      goto LABEL_11;
    v23 += 2;
    if (v26 + 1 >= v29)
      goto LABEL_36;
    v30 = *(_QWORD *)(v19 + 8 * v23);
    if (v30)
      goto LABEL_14;
    if (v26 + 2 >= v29)
    {
LABEL_26:
      v24 = 0;
      v28 = 1;
      v26 = v23;
    }
    else
    {
      v30 = *(_QWORD *)(v19 + 8 * (v26 + 2));
      if (v30)
      {
        v26 += 2;
        goto LABEL_11;
      }
      v23 = v26 + 3;
      if (v26 + 3 >= v29)
      {
        v24 = 0;
        v28 = 1;
        v26 += 2;
      }
      else
      {
        v30 = *(_QWORD *)(v19 + 8 * v23);
        if (v30)
        {
LABEL_14:
          v26 = v23;
LABEL_11:
          v24 = (v30 - 1) & v30;
          v25 = __clz(__rbit64(v30)) + (v26 << 6);
          goto LABEL_7;
        }
        v26 += 4;
        if (v26 >= v29)
          goto LABEL_26;
        v30 = *(_QWORD *)(v19 + 8 * v26);
        if (v30)
          goto LABEL_11;
        v26 = v29 - 1;
        v31 = v52 + 6;
        while (v29 != v31)
        {
          v30 = *(_QWORD *)(v19 + 8 * v31++);
          if (v30)
          {
            v26 = v31 - 1;
            goto LABEL_11;
          }
        }
LABEL_36:
        v24 = 0;
        v28 = 1;
      }
    }
  }
  v36 = v32;
  v37 = ~v34;
  v38 = *(_QWORD *)(v8 + 72);
  v39 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v39(v11, *(_QWORD *)(v36 + 48) + v38 * v35, v7);
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C80]);
    v40 = dispatch thunk of static Equatable.== infix(_:_:)();
    v41 = *(void (**)(char *, uint64_t))(v8 + 8);
    v41(v11, v7);
    if ((v40 & 1) != 0)
      break;
    v35 = (v35 + 1) & v37;
    if (((*(_QWORD *)&v54[(v35 >> 3) & 0xFFFFFFFFFFFFF8] >> v35) & 1) == 0)
      goto LABEL_34;
  }
  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v41)(v55, v7);
  v43 = *(_BYTE *)(v36 + 32);
  v44 = (unint64_t)((1 << v43) + 63) >> 6;
  v45 = 8 * v44;
  if ((v43 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    memcpy((char *)&v49 - ((v45 + 15) & 0x3FFFFFFFFFFFFFF0), v54, v45);
    v46 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v49 - ((v45 + 15) & 0x3FFFFFFFFFFFFFF0)), v44, v36, v35, &v56);
    swift_release();
    outlined consume of Set<UITouch>.Iterator._Variant();
  }
  else
  {
    v48 = (void *)swift_slowAlloc();
    memcpy(v48, v54, v45);
    v46 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v48, v44, v36, v35, &v56);
    swift_release();
    outlined consume of Set<UITouch>.Iterator._Variant();
    MEMORY[0x1DF091C54](v48, -1, -1);
  }
  return v46;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, unint64_t, uint64_t);
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  unint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Participant();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v57 = (char *)&v51 - v12;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  v13 = -1 << *(_BYTE *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = ~v13;
  v16 = -v13;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v58 = a1;
  v59 = a1 + 56;
  v18 = a1;
  v19 = a1 + 56;
  v20 = v17 & v14;
  v21 = v15;
  v60 = v15;
  v61 = 0;
  v62 = v17 & v14;
  v56 = (char *)(a2 + 56);
  v22 = v18;
  swift_bridgeObjectRetain();
  v23 = 0;
  v52 = v6;
  v55 = a2;
  v53 = v20;
  v54 = 0;
  if (!v20)
    goto LABEL_8;
LABEL_6:
  v24 = (v20 - 1) & v20;
  v25 = __clz(__rbit64(v20)) | (v23 << 6);
  v26 = v23;
  v27 = v19;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v6, *(_QWORD *)(v22 + 48) + *(_QWORD *)(v8 + 72) * v25, v7);
  v28 = 0;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v28, 1, v7);
    v58 = v22;
    v59 = v27;
    v60 = v21;
    v61 = v26;
    v62 = v24;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      outlined consume of Set<UITouch>.Iterator._Variant();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v6, &demangling cache variable for type metadata for Participant?);
      return v55;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v57, v6, v7);
    v32 = v55;
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB4250], MEMORY[0x1E0CB4260]);
    v33 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v34 = -1 << *(_BYTE *)(v32 + 32);
    v35 = v33 & ~v34;
    if (((*(_QWORD *)&v56[(v35 >> 3) & 0xFFFFFFFFFFFFF8] >> v35) & 1) != 0)
      break;
    v41 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_34:
    v41(v57, v7);
    v23 = v61;
    v20 = v62;
    v22 = v58;
    v19 = v59;
    v21 = v60;
    v6 = v52;
    v53 = v62;
    v54 = v61;
    if (v62)
      goto LABEL_6;
LABEL_8:
    v26 = v23 + 1;
    if (__OFADD__(v23, 1))
      __break(1u);
    v27 = v19;
    v29 = (unint64_t)(v21 + 64) >> 6;
    if (v26 >= v29)
      goto LABEL_26;
    v30 = *(_QWORD *)(v19 + 8 * v26);
    if (v30)
      goto LABEL_11;
    v23 += 2;
    if (v26 + 1 >= v29)
      goto LABEL_36;
    v30 = *(_QWORD *)(v19 + 8 * v23);
    if (v30)
      goto LABEL_14;
    if (v26 + 2 >= v29)
    {
LABEL_26:
      v24 = 0;
      v28 = 1;
      v26 = v23;
    }
    else
    {
      v30 = *(_QWORD *)(v19 + 8 * (v26 + 2));
      if (v30)
      {
        v26 += 2;
        goto LABEL_11;
      }
      v23 = v26 + 3;
      if (v26 + 3 >= v29)
      {
        v24 = 0;
        v28 = 1;
        v26 += 2;
      }
      else
      {
        v30 = *(_QWORD *)(v19 + 8 * v23);
        if (v30)
        {
LABEL_14:
          v26 = v23;
LABEL_11:
          v24 = (v30 - 1) & v30;
          v25 = __clz(__rbit64(v30)) + (v26 << 6);
          goto LABEL_7;
        }
        v26 += 4;
        if (v26 >= v29)
          goto LABEL_26;
        v30 = *(_QWORD *)(v19 + 8 * v26);
        if (v30)
          goto LABEL_11;
        v26 = v29 - 1;
        v31 = v54 + 6;
        while (v29 != v31)
        {
          v30 = *(_QWORD *)(v19 + 8 * v31++);
          if (v30)
          {
            v26 = v31 - 1;
            goto LABEL_11;
          }
        }
LABEL_36:
        v24 = 0;
        v28 = 1;
      }
    }
  }
  v36 = v32;
  v37 = ~v34;
  v38 = *(_QWORD *)(v8 + 72);
  v39 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v39(v10, *(_QWORD *)(v36 + 48) + v38 * v35, v7);
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB4250], MEMORY[0x1E0CB4268]);
    v40 = dispatch thunk of static Equatable.== infix(_:_:)();
    v41 = *(void (**)(char *, uint64_t))(v8 + 8);
    v41(v10, v7);
    if ((v40 & 1) != 0)
      break;
    v35 = (v35 + 1) & v37;
    if (((*(_QWORD *)&v56[(v35 >> 3) & 0xFFFFFFFFFFFFF8] >> v35) & 1) == 0)
      goto LABEL_34;
  }
  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v41)(v57, v7);
  v43 = *(_BYTE *)(v36 + 32);
  v44 = (unint64_t)((1 << v43) + 63) >> 6;
  v45 = 8 * v44;
  if ((v43 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    memcpy((char *)&v51 - ((v45 + 15) & 0x3FFFFFFFFFFFFFF0), v56, v45);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v51 - ((v45 + 15) & 0x3FFFFFFFFFFFFFF0)), v44, v36, v35, &v58);
    v47 = v46;
    swift_release();
    outlined consume of Set<UITouch>.Iterator._Variant();
  }
  else
  {
    v49 = (void *)swift_slowAlloc();
    memcpy(v49, v56, v45);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v49, v44, v36, v35, &v58);
    v47 = v50;
    swift_release();
    outlined consume of Set<UITouch>.Iterator._Variant();
    MEMORY[0x1DF091C54](v49, -1, -1);
  }
  return v47;
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  char v39;
  int64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;

  v48 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v14);
  v56 = (char *)&v47 - v18;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20) & ((-1 << a4) - 1);
  v50 = a1;
  v51 = v11;
  *(unint64_t *)((char *)a1 + v20) = v21;
  v22 = v19 - 1;
  v54 = a3 + 56;
  v55 = a3;
  v52 = a5;
  while (2)
  {
    v49 = v22;
    do
    {
      while (1)
      {
        v24 = *a5;
        v25 = a5[1];
        v27 = a5[2];
        v26 = a5[3];
        v28 = a5[4];
        v53 = v27;
        if (v28)
        {
          v29 = (v28 - 1) & v28;
          v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, *(_QWORD *)(v24 + 48) + *(_QWORD *)(v13 + 72) * v30, v12);
          v31 = 0;
          goto LABEL_8;
        }
        v40 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        v41 = (unint64_t)(v27 + 64) >> 6;
        if (v40 >= v41)
        {
          v29 = 0;
          v31 = 1;
          goto LABEL_8;
        }
        v42 = *(_QWORD *)(v25 + 8 * v40);
        if (v42)
          goto LABEL_17;
        if (v26 + 2 >= v41)
          goto LABEL_34;
        v42 = *(_QWORD *)(v25 + 8 * (v26 + 2));
        if (v42)
        {
          v40 = v26 + 2;
LABEL_17:
          v29 = (v42 - 1) & v42;
          v30 = __clz(__rbit64(v42)) + (v40 << 6);
          v26 = v40;
          goto LABEL_7;
        }
        if (v26 + 3 >= v41)
        {
          v29 = 0;
          v31 = 1;
          v26 += 2;
          goto LABEL_8;
        }
        v42 = *(_QWORD *)(v25 + 8 * (v26 + 3));
        if (v42)
        {
          v40 = v26 + 3;
          goto LABEL_17;
        }
        v40 = v26 + 4;
        if (v26 + 4 < v41)
        {
          v42 = *(_QWORD *)(v25 + 8 * v40);
          if (v42)
            goto LABEL_17;
          v40 = v41 - 1;
          v45 = v26 + 5;
          while (v41 != v45)
          {
            v42 = *(_QWORD *)(v25 + 8 * v45++);
            if (v42)
            {
              v40 = v45 - 1;
              goto LABEL_17;
            }
          }
LABEL_34:
          v29 = 0;
          v31 = 1;
          v26 = v40;
          goto LABEL_8;
        }
        v29 = 0;
        v31 = 1;
        v26 += 3;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1, v12);
        *a5 = v24;
        a5[1] = v25;
        a5[2] = v53;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        {
          outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v11, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?);
          v46 = v55;
          swift_retain();
          return specialized _NativeSet.extractSubset(using:count:)(v50, v48, v49, v46, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4CC0], &demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>, &lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x1E0CD4CD0]);
        }
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v56, v11, v12);
        v32 = v55;
        lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4CC0], MEMORY[0x1E0CD4CD0]);
        v33 = dispatch thunk of Hashable._rawHashValue(seed:)();
        v34 = -1 << *(_BYTE *)(v32 + 32);
        v35 = v33 & ~v34;
        if (((*(_QWORD *)(v54 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
          break;
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        result = v23(v56, v12);
        v11 = v51;
        a5 = v52;
      }
      v36 = ~v34;
      v37 = *(_QWORD *)(v13 + 72);
      v38 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v38(v16, *(_QWORD *)(v55 + 48) + v37 * v35, v12);
        lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4CC0], MEMORY[0x1E0CD4CD8]);
        v39 = dispatch thunk of static Equatable.== infix(_:_:)();
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v23(v16, v12);
        if ((v39 & 1) != 0)
          break;
        v35 = (v35 + 1) & v36;
        if (((*(_QWORD *)(v54 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
          goto LABEL_4;
      }
      result = v23(v56, v12);
      v43 = (v35 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v11 = v51;
      v44 = *(unint64_t *)((char *)v50 + v43);
      *(unint64_t *)((char *)v50 + v43) = v44 & ~(1 << v35);
      a5 = v52;
    }
    while ((v44 & (1 << v35)) == 0);
    v22 = v49 - 1;
    if (__OFSUB__(v49, 1))
    {
LABEL_42:
      __break(1u);
      return result;
    }
    if (v49 != 1)
      continue;
    return MEMORY[0x1E0DEE9E8];
  }
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  char v39;
  int64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;

  v48 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v14);
  v56 = (char *)&v47 - v18;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20) & ((-1 << a4) - 1);
  v50 = a1;
  v51 = v11;
  *(unint64_t *)((char *)a1 + v20) = v21;
  v22 = v19 - 1;
  v54 = a3 + 56;
  v55 = a3;
  v52 = a5;
  while (2)
  {
    v49 = v22;
    do
    {
      while (1)
      {
        v24 = *a5;
        v25 = a5[1];
        v27 = a5[2];
        v26 = a5[3];
        v28 = a5[4];
        v53 = v27;
        if (v28)
        {
          v29 = (v28 - 1) & v28;
          v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, *(_QWORD *)(v24 + 48) + *(_QWORD *)(v13 + 72) * v30, v12);
          v31 = 0;
          goto LABEL_8;
        }
        v40 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        v41 = (unint64_t)(v27 + 64) >> 6;
        if (v40 >= v41)
        {
          v29 = 0;
          v31 = 1;
          goto LABEL_8;
        }
        v42 = *(_QWORD *)(v25 + 8 * v40);
        if (v42)
          goto LABEL_17;
        if (v26 + 2 >= v41)
          goto LABEL_34;
        v42 = *(_QWORD *)(v25 + 8 * (v26 + 2));
        if (v42)
        {
          v40 = v26 + 2;
LABEL_17:
          v29 = (v42 - 1) & v42;
          v30 = __clz(__rbit64(v42)) + (v40 << 6);
          v26 = v40;
          goto LABEL_7;
        }
        if (v26 + 3 >= v41)
        {
          v29 = 0;
          v31 = 1;
          v26 += 2;
          goto LABEL_8;
        }
        v42 = *(_QWORD *)(v25 + 8 * (v26 + 3));
        if (v42)
        {
          v40 = v26 + 3;
          goto LABEL_17;
        }
        v40 = v26 + 4;
        if (v26 + 4 < v41)
        {
          v42 = *(_QWORD *)(v25 + 8 * v40);
          if (v42)
            goto LABEL_17;
          v40 = v41 - 1;
          v45 = v26 + 5;
          while (v41 != v45)
          {
            v42 = *(_QWORD *)(v25 + 8 * v45++);
            if (v42)
            {
              v40 = v45 - 1;
              goto LABEL_17;
            }
          }
LABEL_34:
          v29 = 0;
          v31 = 1;
          v26 = v40;
          goto LABEL_8;
        }
        v29 = 0;
        v31 = 1;
        v26 += 3;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1, v12);
        *a5 = v24;
        a5[1] = v25;
        a5[2] = v53;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        {
          outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v11, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?);
          v46 = v55;
          swift_retain();
          return specialized _NativeSet.extractSubset(using:count:)(v50, v48, v49, v46, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], (uint64_t *)&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>, &lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E0CD4C78]);
        }
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v56, v11, v12);
        v32 = v55;
        lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C78]);
        v33 = dispatch thunk of Hashable._rawHashValue(seed:)();
        v34 = -1 << *(_BYTE *)(v32 + 32);
        v35 = v33 & ~v34;
        if (((*(_QWORD *)(v54 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
          break;
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        result = v23(v56, v12);
        v11 = v51;
        a5 = v52;
      }
      v36 = ~v34;
      v37 = *(_QWORD *)(v13 + 72);
      v38 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v38(v16, *(_QWORD *)(v55 + 48) + v37 * v35, v12);
        lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C80]);
        v39 = dispatch thunk of static Equatable.== infix(_:_:)();
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v23(v16, v12);
        if ((v39 & 1) != 0)
          break;
        v35 = (v35 + 1) & v36;
        if (((*(_QWORD *)(v54 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
          goto LABEL_4;
      }
      result = v23(v56, v12);
      v43 = (v35 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v11 = v51;
      v44 = *(unint64_t *)((char *)v50 + v43);
      *(unint64_t *)((char *)v50 + v43) = v44 & ~(1 << v35);
      a5 = v52;
    }
    while ((v44 & (1 << v35)) == 0);
    v22 = v49 - 1;
    if (__OFSUB__(v49, 1))
    {
LABEL_42:
      __break(1u);
      return result;
    }
    if (v49 != 1)
      continue;
    return MEMORY[0x1E0DEE9E8];
  }
}

void specialized closure #1 in _NativeSet.subtracting<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  char v39;
  int64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;

  v49 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Participant();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v57 = (char *)&v48 - v18;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20) & ((-1 << a4) - 1);
  v51 = a1;
  v52 = v11;
  *(unint64_t *)((char *)a1 + v20) = v21;
  v22 = v19 - 1;
  v55 = a3 + 56;
  v56 = a3;
  v53 = a5;
  while (2)
  {
    v50 = v22;
    do
    {
      while (1)
      {
        v24 = *a5;
        v25 = a5[1];
        v27 = a5[2];
        v26 = a5[3];
        v28 = a5[4];
        v54 = v27;
        if (v28)
        {
          v29 = (v28 - 1) & v28;
          v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t, __n128))(v13 + 16))(v11, *(_QWORD *)(v24 + 48) + *(_QWORD *)(v13 + 72) * v30, v12, v17);
          v31 = 0;
          goto LABEL_8;
        }
        v40 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_43;
        }
        v41 = (unint64_t)(v27 + 64) >> 6;
        if (v40 >= v41)
        {
          v29 = 0;
          v31 = 1;
          goto LABEL_8;
        }
        v42 = *(_QWORD *)(v25 + 8 * v40);
        if (v42)
          goto LABEL_17;
        v45 = v26 + 2;
        if (v26 + 2 >= v41)
          goto LABEL_35;
        v42 = *(_QWORD *)(v25 + 8 * v45);
        if (v42)
          goto LABEL_23;
        if (v26 + 3 >= v41)
          goto LABEL_36;
        v42 = *(_QWORD *)(v25 + 8 * (v26 + 3));
        if (v42)
        {
          v40 = v26 + 3;
          goto LABEL_17;
        }
        v45 = v26 + 4;
        if (v26 + 4 < v41)
        {
          v42 = *(_QWORD *)(v25 + 8 * v45);
          if (v42)
          {
LABEL_23:
            v40 = v45;
LABEL_17:
            v29 = (v42 - 1) & v42;
            v30 = __clz(__rbit64(v42)) + (v40 << 6);
            v26 = v40;
            goto LABEL_7;
          }
          v40 = v26 + 5;
          if (v26 + 5 < v41)
          {
            v42 = *(_QWORD *)(v25 + 8 * v40);
            if (v42)
              goto LABEL_17;
            v40 = v41 - 1;
            v46 = v26 + 6;
            while (v41 != v46)
            {
              v42 = *(_QWORD *)(v25 + 8 * v46++);
              if (v42)
              {
                v40 = v46 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            v29 = 0;
            v31 = 1;
            v26 = v40;
            goto LABEL_8;
          }
LABEL_36:
          v29 = 0;
          v31 = 1;
          v26 = v45;
          goto LABEL_8;
        }
        v29 = 0;
        v31 = 1;
        v26 += 3;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1, v12);
        *a5 = v24;
        a5[1] = v25;
        a5[2] = v54;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        {
          outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v11, &demangling cache variable for type metadata for Participant?);
          v47 = v56;
          swift_retain();
          specialized _NativeSet.extractSubset(using:count:)(v51, v49, v50, v47, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB4250], &demangling cache variable for type metadata for _SetStorage<Participant>, &lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x1E0CB4260]);
          return;
        }
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v57, v11, v12);
        v32 = v56;
        lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB4250], MEMORY[0x1E0CB4260]);
        v33 = dispatch thunk of Hashable._rawHashValue(seed:)();
        v34 = -1 << *(_BYTE *)(v32 + 32);
        v35 = v33 & ~v34;
        if (((*(_QWORD *)(v55 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
          break;
        v23 = *(void (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        v23(v57, v12);
        v11 = v52;
        a5 = v53;
      }
      v36 = ~v34;
      v37 = *(_QWORD *)(v13 + 72);
      v38 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v38(v15, *(_QWORD *)(v56 + 48) + v37 * v35, v12);
        lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB4250], MEMORY[0x1E0CB4268]);
        v39 = dispatch thunk of static Equatable.== infix(_:_:)();
        v23 = *(void (**)(char *, uint64_t))(v13 + 8);
        v23(v15, v12);
        if ((v39 & 1) != 0)
          break;
        v35 = (v35 + 1) & v36;
        if (((*(_QWORD *)(v55 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
          goto LABEL_4;
      }
      v23(v57, v12);
      v43 = (v35 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v11 = v52;
      v44 = *(unint64_t *)((char *)v51 + v43);
      *(unint64_t *)((char *)v51 + v43) = v44 & ~(1 << v35);
      a5 = v53;
    }
    while ((v44 & (1 << v35)) == 0);
    v22 = v50 - 1;
    if (__OFSUB__(v50, 1))
    {
LABEL_43:
      __break(1u);
      return;
    }
    if (v50 != 1)
      continue;
    break;
  }
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t *a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  v41 = a7;
  v42 = a8;
  v40 = a5;
  v13 = a5(0);
  v43 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v38 - v14;
  if (!a3)
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  __swift_instantiateConcreteTypeFromMangledName(a6);
  result = static _SetStorage.allocate(capacity:)();
  v16 = result;
  v38 = a1;
  v39 = a2;
  if (a2 < 1)
    v18 = 0;
  else
    v18 = *a1;
  v19 = 0;
  v20 = result + 56;
  while (1)
  {
    if (v18)
    {
      v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v22 = v21 | (v19 << 6);
    }
    else
    {
      v23 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_40;
      if (v23 >= v39)
      {
LABEL_37:
        swift_release();
        return v16;
      }
      v24 = v38[v23];
      ++v19;
      if (!v24)
      {
        v19 = v23 + 1;
        if (v23 + 1 >= v39)
          goto LABEL_37;
        v24 = v38[v19];
        if (!v24)
        {
          v19 = v23 + 2;
          if (v23 + 2 >= v39)
            goto LABEL_37;
          v24 = v38[v19];
          if (!v24)
          {
            v25 = v23 + 3;
            if (v25 >= v39)
              goto LABEL_37;
            v24 = v38[v25];
            if (!v24)
            {
              while (1)
              {
                v19 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v19 >= v39)
                  goto LABEL_37;
                v24 = v38[v19];
                ++v25;
                if (v24)
                  goto LABEL_24;
              }
            }
            v19 = v25;
          }
        }
      }
LABEL_24:
      v18 = (v24 - 1) & v24;
      v22 = __clz(__rbit64(v24)) + (v19 << 6);
    }
    v26 = a4;
    v27 = *(_QWORD *)(a4 + 48);
    v28 = *(_QWORD *)(v43 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v15, v27 + v28 * v22, v13);
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(v41, v40, v42);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v29 = -1 << *(_BYTE *)(v16 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v20 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v20 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v31 == v34;
        if (v31 == v34)
          v31 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v20 + 8 * v31);
      }
      while (v36 == -1);
      v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(_QWORD *)(v20 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v43 + 32))(*(_QWORD *)(v16 + 48) + v32 * v28, v15, v13);
    ++*(_QWORD *)(v16 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v26;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized _NativeSet.extractSubset(using:count:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _SetStorage<UITouch>);
}

{
  return specialized _NativeSet.extractSubset(using:count:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _SetStorage<ARReferenceImage>);
}

{
  return specialized _NativeSet.extractSubset(using:count:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _SetStorage<ARReferenceObject>);
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t *v30;

  v5 = a4;
  if (!a3)
  {
    v10 = MEMORY[0x1E0DEE9E8];
LABEL_36:
    swift_release();
    return v10;
  }
  v6 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v5;
  __swift_instantiateConcreteTypeFromMangledName(a5);
  result = static _SetStorage.allocate(capacity:)();
  v10 = result;
  v30 = a1;
  if (a2 < 1)
    v11 = 0;
  else
    v11 = *a1;
  v12 = 0;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_39;
    if (v16 >= a2)
      goto LABEL_36;
    v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= a2)
        goto LABEL_36;
      v17 = v30[v12];
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= a2)
          goto LABEL_36;
        v17 = v30[v12];
        if (!v17)
          break;
      }
    }
LABEL_23:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(_QWORD *)(v10 + 40);
    v20 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v15);
    result = NSObject._rawHashValue(seed:)(v19);
    v21 = -1 << *(_BYTE *)(v10 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v24) = v20;
    ++*(_QWORD *)(v10 + 16);
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6)
      goto LABEL_36;
  }
  v18 = v16 + 3;
  if (v18 >= a2)
    goto LABEL_36;
  v17 = v30[v18];
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= a2)
      goto LABEL_36;
    v17 = v30[v12];
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t destroy for ARView.ARSessionComponents(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 48))
    result = swift_release();
  if (*(_QWORD *)(a1 + 64))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for ARView.ARSessionComponents(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = (_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 48);
  v9 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *v8;
  }
  v11 = *(_QWORD *)(a2 + 64);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  }
  return a1;
}

uint64_t assignWithCopy for ARView.ARSessionComponents(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  v4 = *(void **)(a1 + 8);
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v9;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_8:
  v10 = *(_QWORD *)(a2 + 64);
  if (!*(_QWORD *)(a1 + 64))
  {
    if (v10)
    {
      v12 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = v10;
      *(_QWORD *)(a1 + 72) = v12;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_14;
  }
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for ARView.ARSessionComponents(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v4;
      *(_QWORD *)(a1 + 56) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_8:
  v7 = *(_QWORD *)(a2 + 64);
  if (!*(_QWORD *)(a1 + 64))
  {
    if (v7)
    {
      v9 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = v7;
      *(_QWORD *)(a1 + 72) = v9;
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ARView.ARSessionComponents(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.ARSessionComponents(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.ARSessionComponents()
{
  return &type metadata for ARView.ARSessionComponents;
}

Swift::Void __swiftcall ARView.updateARSession(restartIfPaused:)(Swift::Bool restartIfPaused)
{
  char *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;

  v2 = v1;
  v4 = type metadata accessor for OSSignpostID();
  MEMORY[0x1E0C80A78](v4);
  static __REOSLog.UpdateLoop.getter();
  static __RESignpostID.UpdateLoop.getter();
  type metadata accessor for __REOSSignpostScope();
  swift_allocObject();
  __REOSSignpostScope.init(osLog:signpostID:name:)();
  swift_release();
  v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (!v5)
  {
    __break(1u);
    goto LABEL_16;
  }
  if ((*(_BYTE *)(v5 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode) & 1) == 0)
  {
    v6 = &v1[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
    swift_beginAccess();
    if ((v6[1] & 1) != 0 || *v6 == 1)
      ARView.updateReferenceObjectsAndImages()();
    if (v6[2] == 1)
    {
      v6[3] = 1;
      v14 = (void *)*((_QWORD *)v6 + 1);
      v7 = v14;
      if ((ARView.requiredSessionConfiguration(currentConfig:)(&v14) & 1) == 0)
      {
        if (!restartIfPaused
          || (v12 = objc_msgSend(v1, sel_session),
              v13 = objc_msgSend(v12, sel_state),
              v12,
              v13))
        {
          v11 = v14;
          goto LABEL_13;
        }
      }
      v8 = objc_msgSend(v2, sel_session, v14);
      v9 = v14;
      if (v14)
      {
        v10 = v8;
        objc_msgSend(v8, sel_runWithConfiguration_options_, v14, 0);

        v11 = (void *)*((_QWORD *)v6 + 1);
        *((_QWORD *)v6 + 1) = v9;
LABEL_13:

        v6[3] = 0;
        return;
      }
LABEL_16:
      __break(1u);
    }
  }
}

uint64_t ARView.updateReferenceObjectsAndImages()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ComponentsOfType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char v28;
  uint64_t *v29;
  Swift::String v30;
  Swift::Bool v31;
  double v32;
  double v33;
  char v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  double *v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  char v51;
  void (*v52)(char *, uint64_t);
  char v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  char v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  void (*v76)(uint64_t);
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  char v81;
  void (*v82)(uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t result;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  _BYTE *v101;
  _QWORD *v102;

  v95 = type metadata accessor for AnchoringComponent();
  v1 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95);
  v94 = (char *)&v86 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AnchoringComponent.Target();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v7);
  v91 = (uint64_t *)((char *)&v86 - v8);
  MEMORY[0x1E0C80A78](v9);
  v100 = (char *)&v86 - v10;
  v11 = MEMORY[0x1E0DEE9D8];
  v96 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v99 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(v11);
  v86 = v0;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
    goto LABEL_66;
  swift_retain();
  Scene.coreScene.getter();
  swift_release();
  ComponentsOfType = RESceneGetComponentsOfType();
  if (v13 < 0)
    goto LABEL_65;
  v14 = v13;
  if (!v13)
  {
LABEL_54:
    v72 = v86 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
    swift_beginAccess();
    v73 = v96;
    if (*(_BYTE *)v72 == 1)
    {
      v74 = swift_bridgeObjectRetain();
      v75 = ARView.compareReferenceImageNamesAndWidthByGroup(referenceImageNamesAndWidthByGroup:)(v74);
      swift_bridgeObjectRelease();
      if ((v75 & 1) == 0)
      {
        *(_QWORD *)(v72 + 16) = v73;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v76 = *(void (**)(uint64_t))(v72 + 64);
        if (v76)
        {
          outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(*(_QWORD *)(v72 + 64));
          v77 = swift_bridgeObjectRetain();
          v78 = ARView.loadReferenceImages(_:)(v77);
          swift_bridgeObjectRelease();
          v76(v78);
          swift_bridgeObjectRelease();
          outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?((uint64_t)v76);
        }
      }
    }
    v79 = v99;
    if (*(_BYTE *)(v72 + 1) == 1)
    {
      v80 = swift_bridgeObjectRetain();
      v81 = ARView.compareReferenceObjectNamesByGroup(referenceObjectNamesByGroup:)(v80);
      swift_bridgeObjectRelease();
      if ((v81 & 1) == 0)
      {
        *(_QWORD *)(v72 + 24) = v79;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v82 = *(void (**)(uint64_t))(v72 + 48);
        if (v82)
        {
          outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?((uint64_t)v82);
          v83 = swift_bridgeObjectRetain();
          v84 = ARView.loadReferenceObjects(_:)(v83);
          swift_bridgeObjectRelease();
          v82(v84);
          swift_bridgeObjectRelease();
          outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?((uint64_t)v82);
        }
      }
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v15 = ComponentsOfType;
  v98 = type metadata accessor for Entity();
  v101 = (_BYTE *)(v86 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents);
  swift_beginAccess();
  v90 = *MEMORY[0x1E0CD3B48];
  v89 = *MEMORY[0x1E0CD3B70];
  v88 = v1;
  v97 = v4;
  v93 = v6;
  while (1)
  {
    REComponentGetEntity();
    v16 = static Entity.fromCore(_:ignoringEntityInfo:)();
    if (swift_conformsToProtocol2())
      v17 = v16;
    else
      v17 = 0;
    if (!v17)
    {
      swift_release();
      goto LABEL_6;
    }
    swift_retain();
    v18 = v94;
    HasAnchoring.anchoring.getter();
    v19 = v100;
    AnchoringComponent.target.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v18, v95);
    if (*v101 == 1)
    {
      v20 = v97;
      v21 = v91;
      (*(void (**)(uint64_t *, char *, uint64_t))(v97 + 16))(v91, v19, v3);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t))(v20 + 88))(v21, v3);
      if (v22 == v90)
      {
        (*(void (**)(uint64_t *, uint64_t))(v20 + 96))(v21, v3);
        v24 = *v21;
        v23 = v21[1];
        v92 = v21[2];
        v87 = v21[3];
        v25 = v96;
        if (*(_QWORD *)(v96 + 16))
        {
          swift_bridgeObjectRetain();
          v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v23);
          v27 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          if ((v28 & 1) != 0)
          {
            v27 = *(_QWORD **)(*(_QWORD *)(v25 + 56) + 8 * v26);
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v27 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        type metadata accessor for __RealityFileURLResolver();
        v30._countAndFlagsBits = static __RealityFileURLResolver.schemePrefix.getter();
        v31 = String.hasPrefix(_:)(v30);
        swift_bridgeObjectRelease();
        v32 = 0.0;
        if (v31)
        {
          swift_retain();
          v33 = COERCE_DOUBLE(ARView.findPhysicalWidthForImageAnchoredEntity(root:)());
          v35 = v34;
          swift_release();
          if ((v35 & 1) != 0)
            v32 = 0.0;
          else
            v32 = v33;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
        v36 = v96;
        v38 = v27[2];
        v37 = v27[3];
        if (v38 >= v37 >> 1)
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v27);
        v27[2] = v38 + 1;
        v39 = (double *)&v27[3 * v38];
        v40 = v87;
        *((_QWORD *)v39 + 4) = v92;
        *((_QWORD *)v39 + 5) = v40;
        v39[6] = v32;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v102 = (_QWORD *)v36;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v27, v24, v23, isUniquelyReferenced_nonNull_native);
        v96 = (unint64_t)v102;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v1 = v88;
        v20 = v97;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t))(v20 + 8))(v21, v3);
      }
      v29 = v93;
      v19 = v100;
    }
    else
    {
      v20 = v97;
      v29 = v93;
    }
    if (v101[1] != 1)
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v19, v3);
      swift_release_n();
      goto LABEL_6;
    }
    (*(void (**)(uint64_t *, char *, uint64_t))(v20 + 16))(v29, v19, v3);
    v42 = (*(uint64_t (**)(uint64_t *, uint64_t))(v20 + 88))(v29, v3);
    if (v42 != v89)
    {
      v52 = *(void (**)(char *, uint64_t))(v20 + 8);
      v52(v19, v3);
      swift_release_n();
      v52((char *)v29, v3);
      goto LABEL_6;
    }
    (*(void (**)(uint64_t *, uint64_t))(v20 + 96))(v29, v3);
    v43 = *v29;
    v44 = v29[1];
    v45 = v29[2];
    v46 = v29[3];
    v47 = v99[2];
    v92 = *v29;
    if (v47)
    {
      swift_bridgeObjectRetain();
      v48 = specialized __RawDictionaryStorage.find<A>(_:)(v43, v44);
      v49 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v50 = v96;
      if ((v51 & 1) != 0)
      {
        v49 = *(_QWORD **)(v99[7] + 8 * v48);
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v49 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v50 = v96;
    }
    v53 = swift_isUniquelyReferenced_nonNull_native();
    v96 = v50;
    if ((v53 & 1) == 0)
      v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
    v55 = v49[2];
    v54 = v49[3];
    if (v55 >= v54 >> 1)
      v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, v49);
    v49[2] = v55 + 1;
    v56 = &v49[2 * v55];
    v56[4] = v45;
    v56[5] = v46;
    v57 = swift_isUniquelyReferenced_nonNull_native();
    v102 = v99;
    v59 = specialized __RawDictionaryStorage.find<A>(_:)(v92, v44);
    v60 = v99[2];
    v61 = (v58 & 1) == 0;
    v62 = v60 + v61;
    if (__OFADD__(v60, v61))
      break;
    v63 = v58;
    if (v99[3] >= v62)
    {
      if ((v57 & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v62, v57);
      v64 = specialized __RawDictionaryStorage.find<A>(_:)(v92, v44);
      if ((v63 & 1) != (v65 & 1))
        goto LABEL_67;
      v59 = v64;
    }
    v66 = v102;
    v99 = v102;
    if ((v63 & 1) != 0)
    {
      v67 = v102[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v67 + 8 * v59) = v49;
    }
    else
    {
      v102[(v59 >> 6) + 8] |= 1 << v59;
      v68 = (_QWORD *)(v66[6] + 16 * v59);
      *v68 = v92;
      v68[1] = v44;
      *(_QWORD *)(v66[7] + 8 * v59) = v49;
      v69 = v66[2];
      v70 = __OFADD__(v69, 1);
      v71 = v69 + 1;
      if (v70)
        goto LABEL_64;
      v66[2] = v71;
      swift_bridgeObjectRetain();
    }
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v97 + 8))(v100, v3);
    v1 = v88;
LABEL_6:
    v15 += 8;
    if (!--v14)
      goto LABEL_54;
  }
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t ARView.requiredSessionConfiguration(currentConfig:)(void **a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t ComponentsOfType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t (*v29)(char *, uint64_t);
  int v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  void (*v41)(uint64_t *, char *, uint64_t);
  uint64_t (*v42)(uint64_t *, uint64_t);
  void (*v43)(char *, uint64_t);
  uint64_t *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  char v53;
  Swift::String v54;
  Swift::Bool v55;
  double v56;
  double v57;
  char v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  double *v62;
  uint64_t v63;
  _QWORD *v64;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  char v75;
  void (*v76)(char *, uint64_t);
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  char v81;
  char v82;
  unint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  char v87;
  unint64_t v88;
  char v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  void **v96;
  void *v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  void *v101;
  id v102;
  uint64_t v103;
  char v104;
  id v105;
  Class isa;
  id v107;
  id v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  id v115;
  unint64_t v116;
  uint64_t v117;
  Class v118;
  uint64_t v119;
  id v120;
  int v121;
  uint64_t result;
  void **v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  char *v138;
  uint64_t *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152[8];
  int v153;
  _QWORD *v154;

  v133 = type metadata accessor for AnchoringComponent.Target.Alignment();
  v132 = *(_QWORD *)(v133 - 8);
  MEMORY[0x1E0C80A78](v133);
  v131 = (char *)&v123 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v130 = (char *)&v123 - v5;
  v142 = type metadata accessor for AnchoringComponent();
  v141 = *(_QWORD *)(v142 - 8);
  MEMORY[0x1E0C80A78](v142);
  v140 = (char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AnchoringComponent.Target();
  v151 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v139 = (uint64_t *)((char *)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v129 = (uint64_t *)((char *)&v123 - v10);
  MEMORY[0x1E0C80A78](v11);
  v138 = (char *)&v123 - v12;
  MEMORY[0x1E0C80A78](v13);
  v143 = (char *)&v123 - v14;
  v15 = MEMORY[0x1E0DEE9D8];
  v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v147 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
    goto LABEL_89;
  swift_retain();
  Scene.coreScene.getter();
  swift_release();
  ComponentsOfType = RESceneGetComponentsOfType();
  if (v18 < 0)
    goto LABEL_88;
  v19 = v18;
  v123 = a1;
  v124 = v1;
  if (v18)
  {
    v20 = ComponentsOfType;
    v146 = type metadata accessor for Entity();
    v144 = 0;
    v137 = *MEMORY[0x1E0CD3B50];
    v128 = *MEMORY[0x1E0CD3B48];
    v136 = *MEMORY[0x1E0CD3B70];
    v135 = v7;
    v21 = v143;
    while (1)
    {
      REComponentGetEntity();
      v22 = static Entity.fromCore(_:ignoringEntityInfo:)();
      if (swift_conformsToProtocol2())
        v23 = v22;
      else
        v23 = 0;
      if (v23)
      {
        v148 = v20;
        v149 = v19;
        v150 = v22;
        swift_retain();
        v24 = v21;
        v25 = v140;
        HasAnchoring.anchoring.getter();
        AnchoringComponent.target.getter();
        (*(void (**)(char *, uint64_t))(v141 + 8))(v25, v142);
        v26 = v151;
        v27 = *(void (**)(char *, char *, uint64_t))(v151 + 16);
        v28 = v138;
        v27(v138, v24, v7);
        v29 = *(uint64_t (**)(char *, uint64_t))(v26 + 88);
        v30 = v29(v28, v7);
        if (v30 == v137)
        {
          (*(void (**)(char *, uint64_t))(v26 + 96))(v28, v7);
          v31 = &v28[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnchoringComponent.Target.Alignment, classification: AnchoringComponent.Target.Classification, minimumBounds: SIMD2<Float>))
                            + 48)];
          v32 = v132;
          v33 = v130;
          v34 = v16;
          v35 = v133;
          (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v130, v28, v133);
          v36 = type metadata accessor for AnchoringComponent.Target.Classification();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v31, v36);
          v37 = v131;
          static AnchoringComponent.Target.Alignment.horizontal.getter();
          lazy protocol witness table accessor for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment();
          v38 = dispatch thunk of SetAlgebra.isSuperset(of:)();
          v39 = *(void (**)(char *, uint64_t))(v32 + 8);
          v39(v37, v35);
          LODWORD(v144) = v38 | v144;
          static AnchoringComponent.Target.Alignment.vertical.getter();
          LODWORD(v31) = dispatch thunk of SetAlgebra.isSuperset(of:)();
          v39(v37, v35);
          v40 = v35;
          v16 = v34;
          v7 = v135;
          v39(v33, v40);
          HIDWORD(v144) |= v31;
          v21 = v24;
          v41 = (void (*)(uint64_t *, char *, uint64_t))v27;
          v42 = (uint64_t (*)(uint64_t *, uint64_t))v29;
          v20 = v148;
        }
        else
        {
          v43 = *(void (**)(char *, uint64_t))(v26 + 8);
          v43(v28, v7);
          v44 = v129;
          v41 = (void (*)(uint64_t *, char *, uint64_t))v27;
          v27((char *)v129, v24, v7);
          v45 = v29((char *)v44, v7);
          v42 = (uint64_t (*)(uint64_t *, uint64_t))v29;
          if (v45 == v128)
          {
            (*(void (**)(uint64_t *, uint64_t))(v26 + 96))(v44, v7);
            v46 = *v44;
            v47 = v44[1];
            v48 = v44[2];
            v49 = v44[3];
            v50 = *(_QWORD *)(v16 + 16);
            v20 = v148;
            v145 = v16;
            v134 = v46;
            v126 = v48;
            v125 = v49;
            if (v50)
            {
              swift_bridgeObjectRetain();
              v51 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v47);
              v52 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              v21 = v143;
              if ((v53 & 1) != 0)
              {
                v52 = *(_QWORD **)(*(_QWORD *)(v145 + 56) + 8 * v51);
                swift_bridgeObjectRetain();
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              v52 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              v21 = v143;
            }
            type metadata accessor for __RealityFileURLResolver();
            v54._countAndFlagsBits = static __RealityFileURLResolver.schemePrefix.getter();
            v127 = v47;
            v55 = String.hasPrefix(_:)(v54);
            swift_bridgeObjectRelease();
            v56 = 0.0;
            if (v55)
            {
              swift_retain();
              v57 = COERCE_DOUBLE(ARView.findPhysicalWidthForImageAnchoredEntity(root:)());
              v59 = v58;
              swift_release();
              if ((v59 & 1) != 0)
                v56 = 0.0;
              else
                v56 = v57;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, v52);
            v61 = v52[2];
            v60 = v52[3];
            if (v61 >= v60 >> 1)
              v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v60 > 1), v61 + 1, 1, v52);
            v52[2] = v61 + 1;
            v62 = (double *)&v52[3 * v61];
            v63 = v125;
            *((_QWORD *)v62 + 4) = v126;
            *((_QWORD *)v62 + 5) = v63;
            v62[6] = v56;
            v64 = (_QWORD *)v145;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v154 = v64;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v52, v134, v127, isUniquelyReferenced_nonNull_native);
            v16 = (unint64_t)v154;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            v43((char *)v44, v7);
            v21 = v143;
            v20 = v148;
          }
        }
        v66 = v139;
        v41(v139, v21, v7);
        v67 = v42(v66, v7);
        if (v67 == v136)
        {
          v145 = v16;
          (*(void (**)(uint64_t *, uint64_t))(v151 + 96))(v66, v7);
          v68 = *v66;
          v69 = v66[1];
          v70 = v66[2];
          v71 = v66[3];
          v72 = v147;
          v19 = v149;
          if (*(_QWORD *)(v147 + 16))
          {
            swift_bridgeObjectRetain();
            v73 = specialized __RawDictionaryStorage.find<A>(_:)(v68, v69);
            v74 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if ((v75 & 1) != 0)
            {
              v74 = *(_QWORD **)(*(_QWORD *)(v72 + 56) + 8 * v73);
              swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            v74 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74[2] + 1, 1, v74);
          v78 = v74[2];
          v77 = v74[3];
          if (v78 >= v77 >> 1)
            v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v77 > 1), v78 + 1, 1, v74);
          v74[2] = v78 + 1;
          v79 = &v74[2 * v78];
          v79[4] = v70;
          v79[5] = v71;
          v80 = v147;
          v81 = swift_isUniquelyReferenced_nonNull_native();
          v154 = (_QWORD *)v80;
          v83 = specialized __RawDictionaryStorage.find<A>(_:)(v68, v69);
          v84 = *(_QWORD *)(v80 + 16);
          v85 = (v82 & 1) == 0;
          v86 = v84 + v85;
          if (__OFADD__(v84, v85))
          {
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
            goto LABEL_92;
          }
          v87 = v82;
          if (*(_QWORD *)(v80 + 24) >= v86)
          {
            if ((v81 & 1) == 0)
              specialized _NativeDictionary.copy()();
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v86, v81);
            v88 = specialized __RawDictionaryStorage.find<A>(_:)(v68, v69);
            if ((v87 & 1) != (v89 & 1))
              goto LABEL_96;
            v83 = v88;
          }
          v21 = v143;
          v90 = v154;
          v147 = (unint64_t)v154;
          if ((v87 & 1) != 0)
          {
            v91 = v154[7];
            swift_bridgeObjectRelease();
            *(_QWORD *)(v91 + 8 * v83) = v74;
          }
          else
          {
            v154[(v83 >> 6) + 8] |= 1 << v83;
            v92 = (uint64_t *)(v90[6] + 16 * v83);
            *v92 = v68;
            v92[1] = v69;
            *(_QWORD *)(v90[7] + 8 * v83) = v74;
            v93 = v90[2];
            v94 = __OFADD__(v93, 1);
            v95 = v93 + 1;
            if (v94)
              goto LABEL_87;
            v90[2] = v95;
            swift_bridgeObjectRetain();
          }
          swift_release_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v7 = v135;
          (*(void (**)(char *, uint64_t))(v151 + 8))(v21, v135);
          v16 = v145;
        }
        else
        {
          v76 = *(void (**)(char *, uint64_t))(v151 + 8);
          v76(v21, v7);
          swift_release_n();
          v76((char *)v66, v7);
          v19 = v149;
        }
      }
      else
      {
        swift_release();
      }
      v20 += 8;
      if (!--v19)
        goto LABEL_52;
    }
  }
  v144 = 0;
LABEL_52:
  v96 = v123;
  v97 = *v123;
  if (*v123 && (objc_opt_self(), swift_dynamicCastObjCClass()))
  {
    v98 = 0;
    v99 = v97;
  }
  else
  {
    v99 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C89620]), sel_init);

    *v96 = v99;
    objc_msgSend(v99, sel_setEnvironmentTexturing_, 2);
    v98 = 1;
  }
  v100 = v124;
  objc_opt_self();
  v101 = (void *)swift_dynamicCastObjCClass();
  if (v101)
    v102 = v99;
  v103 = swift_bridgeObjectRetain();
  v104 = ARView.compareReferenceImageNamesAndWidthByGroup(referenceImageNamesAndWidthByGroup:)(v103);
  swift_bridgeObjectRelease();
  if ((v104 & 1) == 0)
  {
    if (!v101)
      goto LABEL_91;
    swift_bridgeObjectRetain();
    v105 = v101;
    ARView.loadReferenceImages(_:)(v16);
    swift_bridgeObjectRelease();
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
    lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(&lazy protocol witness table cache variable for type ARReferenceImage and conformance NSObject, &lazy cache variable for type metadata for ARReferenceImage);
    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v105, sel_setDetectionImages_, isa);

    v107 = v105;
    v108 = objc_msgSend(v107, sel_detectionImages);
    if (!v108)
    {
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    v109 = v108;
    v110 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v110 & 0xC000000000000001) != 0)
      v111 = __CocoaSet.count.getter();
    else
      v111 = *(_QWORD *)(v110 + 16);
    swift_bridgeObjectRelease();
    objc_msgSend(v107, sel_setMaximumNumberOfTrackedImages_, v111);

    v112 = v100 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
    v98 = 1;
    swift_beginAccess();
    *(_QWORD *)(v112 + 16) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v113 = swift_bridgeObjectRetain();
  v114 = ARView.compareReferenceObjectNamesByGroup(referenceObjectNamesByGroup:)(v113);
  swift_bridgeObjectRelease();
  if ((v114 & 1) != 0)
  {
    if ((v144 & 1) == 0)
      goto LABEL_76;
    if (v101)
    {
      v115 = v101;
      goto LABEL_72;
    }
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  if (!v101)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  v115 = v101;
  v116 = v147;
  v117 = swift_bridgeObjectRetain();
  ARView.loadReferenceObjects(_:)(v117);
  swift_bridgeObjectRelease();
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceObject);
  lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(&lazy protocol witness table cache variable for type ARReferenceObject and conformance NSObject, &lazy cache variable for type metadata for ARReferenceObject);
  v118 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v115, sel_setDetectionObjects_, v118);

  v119 = v100 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  swift_beginAccess();
  *(_QWORD *)(v119 + 24) = v116;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((v144 & 1) == 0)
    goto LABEL_74;
  v98 = 1;
LABEL_72:
  if ((objc_msgSend(v115, sel_planeDetection, v123) & 1) == 0)
  {
    v115 = v101;
    objc_msgSend(v115, sel_setPlaneDetection_, (unint64_t)objc_msgSend(v115, sel_planeDetection) | 1);

LABEL_74:
    v98 = 1;
    if ((v144 & 0x100000000) == 0)
      goto LABEL_81;
LABEL_79:
    if ((objc_msgSend(v115, sel_planeDetection, v123) & 2) == 0)
    {
      v120 = v101;
      objc_msgSend(v120, sel_setPlaneDetection_, (unint64_t)objc_msgSend(v120, sel_planeDetection) | 2);

      v98 = 1;
    }
    goto LABEL_81;
  }
LABEL_76:
  if ((v144 & 0x100000000) != 0)
  {
    if (v101)
    {
      v115 = v101;
      goto LABEL_79;
    }
LABEL_95:
    __break(1u);
LABEL_96:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_81:
  swift_beginAccess();
  ARView.Environment.sceneUnderstanding.getter((uint64_t)v152);
  v121 = v153;
  ARView.updateEnvironment()();
  if (v121)
  {
    if (!v101)
      goto LABEL_90;
    if (objc_msgSend(v101, sel_sceneReconstruction) != (id)1)
    {
      v98 = 1;
      objc_msgSend(v101, sel_setSceneReconstruction_, 1);
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v98;
}

uint64_t ARView.compareReferenceImageNamesAndWidthByGroup(referenceImageNamesAndWidthByGroup:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  double v41;
  double *v42;
  double v43;
  uint64_t v44;
  char v45;
  uint64_t result;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v2 = a1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  swift_beginAccess();
  if (v3 != *(_QWORD *)(*(_QWORD *)(v4 + 16) + 16))
    return 0;
  v49 = v2 + 64;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  v9 = 0;
  v52 = v2;
  v47 = v8;
  v48 = v4;
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v11 = (v7 - 1) & v7;
      v12 = v10 | (v9 << 6);
      goto LABEL_21;
    }
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_61;
    if (v13 >= v8)
      goto LABEL_58;
    v14 = *(_QWORD *)(v49 + 8 * v13);
    ++v9;
    if (!v14)
    {
      v9 = v13 + 1;
      if (v13 + 1 >= v8)
        goto LABEL_58;
      v14 = *(_QWORD *)(v49 + 8 * v9);
      if (!v14)
      {
        v9 = v13 + 2;
        if (v13 + 2 >= v8)
          goto LABEL_58;
        v14 = *(_QWORD *)(v49 + 8 * v9);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v11 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_21:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v12);
    v18 = *v16;
    v17 = v16[1];
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v12);
    swift_beginAccess();
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 16);
    swift_bridgeObjectRetain();
    if (!v20)
    {
      swift_bridgeObjectRetain();
LABEL_54:
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
    if ((v21 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v22 = *(_QWORD *)(v4 + 16);
    if (!*(_QWORD *)(v22 + 16))
    {
      swift_endAccess();
LABEL_56:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
    swift_bridgeObjectRetain();
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
    if ((v24 & 1) == 0)
    {
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_50;
    }
    v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(v25 + 16);
    swift_bridgeObjectRelease();
    if (v26 != *(_QWORD *)(v19 + 16))
      goto LABEL_56;
    swift_beginAccess();
    v27 = *(_QWORD *)(v4 + 16);
    if (!*(_QWORD *)(v27 + 16))
      goto LABEL_63;
    v50 = v11;
    v51 = v9;
    swift_bridgeObjectRetain();
    v28 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
    if ((v29 & 1) == 0)
      goto LABEL_64;
    v30 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v28);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    v31 = *(_QWORD *)(v30 + 16);
    v32 = *(_QWORD *)(v19 + 16);
    v53 = v30 + 32;
    swift_bridgeObjectRetain();
    v54 = v30;
    swift_bridgeObjectRetain();
    v33 = 0;
    v34 = v19;
    v35 = 0;
    v36 = v34;
    v37 = (double *)(v34 + 48);
    if (!v31)
    {
LABEL_29:
      v38 = 0;
      v39 = 0.0;
      v40 = 0;
      v41 = 0.0;
      v35 = v31;
      if (v32 == v33)
        goto LABEL_46;
      goto LABEL_34;
    }
    while (1)
    {
      if (v35 >= *(_QWORD *)(v54 + 16))
        goto LABEL_60;
      v42 = (double *)(v53 + 24 * v35);
      v41 = v42[2];
      v39 = *v42;
      v38 = *((_QWORD *)v42 + 1);
      swift_bridgeObjectRetain();
      if (v32 == v33)
        break;
      ++v35;
LABEL_34:
      if (v33 >= *(_QWORD *)(v36 + 16))
      {
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        swift_endAccess();
        __break(1u);
LABEL_64:
        swift_endAccess();
        result = swift_bridgeObjectRelease();
        __break(1u);
        return result;
      }
      v43 = *v37;
      v44 = *((_QWORD *)v37 - 2);
      v40 = *((_QWORD *)v37 - 1);
      swift_bridgeObjectRetain();
      if (!v38)
        goto LABEL_46;
      if (!v40)
        goto LABEL_48;
      if (*(_QWORD *)&v39 == v44 && v38 == v40)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v45 & 1) == 0)
          goto LABEL_49;
      }
      if (v41 != v43)
      {
LABEL_49:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        goto LABEL_50;
      }
      v37 += 3;
      ++v33;
      if (v35 == v31)
        goto LABEL_29;
    }
    if (v38)
    {
LABEL_48:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
    v40 = 0;
LABEL_46:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v9 = v51;
    v2 = v52;
    v8 = v47;
    v4 = v48;
    v7 = v50;
    if (v40)
    {
      swift_bridgeObjectRelease();
LABEL_50:
      swift_release();
      return 0;
    }
  }
  v15 = v13 + 3;
  if (v15 >= v8)
    goto LABEL_58;
  v14 = *(_QWORD *)(v49 + 8 * v15);
  if (v14)
  {
    v9 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      goto LABEL_62;
    if (v9 >= v8)
      break;
    v14 = *(_QWORD *)(v49 + 8 * v9);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_58:
  swift_release();
  return 1;
}

uint64_t ARView.compareReferenceObjectNamesByGroup(referenceObjectNamesByGroup:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t result;
  int64_t v32;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  swift_beginAccess();
  if (v3 != *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16))
    return 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v32 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_21;
    }
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v12 >= v32)
      goto LABEL_39;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v32)
        goto LABEL_39;
      v13 = *(_QWORD *)(v5 + 8 * v9);
      if (!v13)
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v32)
          goto LABEL_39;
        v13 = *(_QWORD *)(v5 + 8 * v9);
        if (!v13)
          break;
      }
    }
LABEL_20:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_21:
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v17 = *v15;
    v16 = v15[1];
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_beginAccess();
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
    swift_bridgeObjectRetain();
    if (!v19)
    {
      swift_bridgeObjectRetain();
LABEL_32:
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
    if ((v20 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v21 = *(_QWORD *)(v4 + 24);
    if (!*(_QWORD *)(v21 + 16))
    {
      swift_endAccess();
LABEL_34:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_36:
      swift_release();
      return 0;
    }
    swift_bridgeObjectRetain();
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
    if ((v23 & 1) == 0)
    {
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_36;
    }
    v24 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v22);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v25 = *(_QWORD *)(v24 + 16);
    swift_bridgeObjectRelease();
    if (v25 != *(_QWORD *)(v18 + 16))
      goto LABEL_34;
    swift_beginAccess();
    v26 = *(_QWORD *)(v4 + 24);
    if (!*(_QWORD *)(v26 + 16))
      goto LABEL_42;
    swift_bridgeObjectRetain();
    v27 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
    if ((v28 & 1) == 0)
      goto LABEL_43;
    v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    v30 = specialized Sequence<>.elementsEqual<A>(_:)(v18, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
      goto LABEL_36;
  }
  v14 = v12 + 3;
  if (v14 >= v32)
  {
LABEL_39:
    swift_release();
    return 1;
  }
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v32)
      goto LABEL_39;
    v13 = *(_QWORD *)(v5 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_20;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  swift_endAccess();
  __break(1u);
LABEL_43:
  swift_endAccess();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = a2 + 32;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v7 = 0;
  v8 = (uint64_t *)(a1 + 40);
  while (v7 == v3)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v7 = v3;
    if (!v4)
      goto LABEL_19;
LABEL_10:
    v14 = *(v8 - 1);
    v12 = *v8;
    swift_bridgeObjectRetain();
    if (!v10)
      goto LABEL_19;
    if (!v12)
      goto LABEL_16;
    if (v11 == v14 && v10 == v12)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v9 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    --v4;
    v8 += 2;
  }
  if (v7 >= v3)
  {
    __break(1u);
    return result;
  }
  v13 = (uint64_t *)(v5 + 16 * v7);
  v11 = *v13;
  v10 = v13[1];
  swift_bridgeObjectRetain();
  if (v4)
  {
    ++v7;
    goto LABEL_10;
  }
  if (v10)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v12 = 0;
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return 0;
  }
  return 1;
}

uint64_t ARView.findPhysicalWidthForImageAnchoredEntity(root:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  char v30;
  char v31;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v0 = type metadata accessor for Entity.ChildCollection();
  MEMORY[0x1E0C80A78](v0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.ChildCollection.IndexingIterator<Entity.ChildCollection>);
  v37 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x1E0C80A78](v4);
  v34 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v33 = (char *)&v33 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for __REAnchoringType();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v33 - v16;
  Entity.__anchoringType.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v10, &demangling cache variable for type metadata for __REAnchoringType?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v17, v11);
    if ((*(unsigned int (**)(char *, uint64_t))(v12 + 88))(v14, v11) == *MEMORY[0x1E0CD3AC0])
    {
      (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>));
      v20 = v35;
      v19 = v36;
      v21 = v33;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v33, &v14[*(int *)(v18 + 48)], v36);
      v22 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v14, v22);
      v23 = objc_msgSend((id)objc_opt_self(), sel_meters);
      v24 = v34;
      Measurement<>.converted(to:)();

      Measurement.value.getter();
      v26 = v25;
      v27 = *(void (**)(char *, uint64_t))(v20 + 8);
      v27(v24, v19);
      v27(v21, v19);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      return v26;
    }
    v29 = *(void (**)(char *, uint64_t))(v12 + 8);
    v29(v17, v11);
    v29(v14, v11);
  }
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  Entity.ChildCollection.makeIterator()();
  while (1)
  {
    Entity.ChildCollection.IndexingIterator.next()();
    if (!v38)
      break;
    v28 = ARView.findPhysicalWidthForImageAnchoredEntity(root:)(v38);
    v31 = v30;
    swift_release();
    if ((v31 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v3, v1);
      return v28;
    }
  }
  (*(void (**)(char *, uint64_t))(v37 + 8))(v3, v1);
  return 0;
}

uint64_t ARView.loadReferenceImages(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  BOOL v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  int64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67[5];
  uint64_t v68;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __AnyARKitObject?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for __AnyARKitObject();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v63 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = MEMORY[0x1E0DEE9E8];
  v9 = *(_QWORD *)(a1 + 64);
  v56 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v59 = a1;
  v60 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  v57 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain();
  v13 = 0;
  v58 = 0;
  v54 = v7;
  v53 = v6;
  while (1)
  {
    if (v12)
    {
      v61 = (v12 - 1) & v12;
      v62 = v13;
      v14 = __clz(__rbit64(v12)) | (v13 << 6);
      goto LABEL_19;
    }
    v15 = __OFADD__(v13, 1);
    v16 = v13 + 1;
    if (v15)
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v16 >= v57)
      goto LABEL_47;
    v17 = *(_QWORD *)(v56 + 8 * v16);
    if (!v17)
      break;
LABEL_18:
    v61 = (v17 - 1) & v17;
    v62 = v16;
    v14 = __clz(__rbit64(v17)) + (v16 << 6);
LABEL_19:
    v19 = (uint64_t *)(*(_QWORD *)(v59 + 48) + 16 * v14);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + 8 * v14);
    type metadata accessor for __ARReferenceProvider();
    type metadata accessor for __ServiceLocator();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.assetService.getter();
    swift_release();
    v23 = static __ARReferenceProvider.instance(for:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
    v64 = v23;
    v65 = v21;
    if ((dispatch thunk of __ARReferenceProvider.supportsGroup(named:)() & 1) != 0)
    {
      v24 = *(_QWORD *)(v22 + 16);
      if (v24)
      {
        v25 = v22 + 48;
        do
        {
          swift_bridgeObjectRetain();
          dispatch thunk of __ARReferenceProvider.__fetchReferenceImage(group:name:physicalWidth:)();
          swift_bridgeObjectRelease();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
          {
            outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v5, &demangling cache variable for type metadata for __AnyARKitObject?);
          }
          else
          {
            v26 = v63;
            (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v63, v5, v6);
            type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
            __AnyARKitObject.as<A>(type:)();
            specialized Set._Variant.insert(_:)(v67, v66);

            (*(void (**)(char *, uint64_t))(v7 + 8))(v26, v6);
          }
          v25 += 24;
          --v24;
        }
        while (v24);
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    v27 = v60;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v27 + 32) + 16))
    {
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v65, v20);
      if ((v28 & 1) != 0)
      {
        swift_endAccess();
        swift_bridgeObjectRelease();
        v29 = *(_QWORD *)(v22 + 16);
        if (v29)
          goto LABEL_35;
        goto LABEL_29;
      }
      swift_bridgeObjectRelease();
    }
    v31 = v22;
    swift_endAccess();
    v32 = (void *)objc_opt_self();
    v33 = (void *)MEMORY[0x1DF090310](v65, v20);
    v34 = objc_msgSend(v32, sel_referenceImagesInGroupNamed_bundle_, v33, 0);

    if (v34)
    {
      type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
      lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(&lazy protocol witness table cache variable for type ARReferenceImage and conformance NSObject, &lazy cache variable for type metadata for ARReferenceImage);
      v35 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      v35 = MEMORY[0x1E0DEE9E8];
    }
    v36 = v60;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v66 = *(void **)(v36 + 32);
    *(_QWORD *)(v36 + 32) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v35, v65, v20, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v36 + 32) = v66;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    v22 = v31;
    v29 = *(_QWORD *)(v31 + 16);
    if (v29)
    {
LABEL_35:
      v67[0] = (id)MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
      v38 = v22;
      v30 = v67[0];
      v55 = v38;
      v39 = (uint64_t *)(v38 + 40);
      do
      {
        v41 = *(v39 - 1);
        v40 = *v39;
        v67[0] = v30;
        v43 = v30[2];
        v42 = v30[3];
        swift_bridgeObjectRetain();
        if (v43 >= v42 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
          v30 = v67[0];
        }
        v39 += 3;
        v30[2] = v43 + 1;
        v44 = &v30[2 * v43];
        v44[4] = v41;
        v44[5] = v40;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRelease();
      v6 = v53;
      goto LABEL_40;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    v30 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_40:
    v45 = v60;
    swift_beginAccess();
    v46 = *(_QWORD *)(v45 + 32);
    v7 = v54;
    if (!*(_QWORD *)(v46 + 16))
      goto LABEL_51;
    swift_bridgeObjectRetain();
    v47 = specialized __RawDictionaryStorage.find<A>(_:)(v65, v20);
    if ((v48 & 1) == 0)
      goto LABEL_50;
    v49 = *(_QWORD *)(*(_QWORD *)(v46 + 56) + 8 * v47);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    v50 = v58;
    v51 = specialized Set._Variant.filter(_:)(v49, v30, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeSet.extractSubset(using:count:), &lazy cache variable for type metadata for ARReferenceImage, 0x1E0C89600, (void (*)(unint64_t))specialized _NativeSet.resize(capacity:));
    v58 = v50;
    swift_bridgeObjectRelease();
    specialized Set.formUnion<A>(_:)(v51, &lazy cache variable for type metadata for ARReferenceImage, 0x1E0C89600, &lazy protocol witness table cache variable for type ARReferenceImage and conformance NSObject, (void (*)(id *, id))specialized Set._Variant.insert(_:));
    swift_release();
LABEL_5:
    v12 = v61;
    v13 = v62;
  }
  v18 = v16 + 1;
  if (v16 + 1 >= v57)
    goto LABEL_47;
  v17 = *(_QWORD *)(v56 + 8 * v18);
  if (v17)
    goto LABEL_17;
  v18 = v16 + 2;
  if (v16 + 2 >= v57)
    goto LABEL_47;
  v17 = *(_QWORD *)(v56 + 8 * v18);
  if (v17)
    goto LABEL_17;
  v18 = v16 + 3;
  if (v16 + 3 >= v57)
  {
LABEL_47:
    swift_release();
    return v68;
  }
  v17 = *(_QWORD *)(v56 + 8 * v18);
  if (v17)
  {
LABEL_17:
    v16 = v18;
    goto LABEL_18;
  }
  while (1)
  {
    v16 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v16 >= v57)
      goto LABEL_47;
    v17 = *(_QWORD *)(v56 + 8 * v16);
    ++v18;
    if (v17)
      goto LABEL_18;
  }
LABEL_49:
  __break(1u);
LABEL_50:
  swift_bridgeObjectRelease();
LABEL_51:
  swift_endAccess();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t ARView.loadReferenceObjects(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t i;
  BOOL v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int64_t v48;
  char *v49;
  uint64_t v50;
  void *v51;
  id v52[5];
  uint64_t v53;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __AnyARKitObject?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for __AnyARKitObject();
  v50 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v49 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = MEMORY[0x1E0DEE9E8];
  v8 = *(_QWORD *)(a1 + 64);
  v42 = a1 + 64;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v12 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  v43 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain();
  v13 = 0;
  v44 = 0;
  v45 = v12;
  v41 = a1;
  if (v11)
    goto LABEL_6;
LABEL_7:
  v15 = __OFADD__(v13, 1);
  v16 = v13 + 1;
  if (!v15)
  {
    if (v16 >= v43)
      goto LABEL_41;
    v17 = *(_QWORD *)(v42 + 8 * v16);
    if (v17)
    {
LABEL_17:
      v47 = (v17 - 1) & v17;
      v48 = v16;
      for (i = __clz(__rbit64(v17)) + (v16 << 6); ; i = __clz(__rbit64(v11)) | (v13 << 6))
      {
        v19 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
        v21 = *v19;
        v20 = v19[1];
        v22 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8 * i);
        type metadata accessor for __ARReferenceProvider();
        type metadata accessor for __ServiceLocator();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        static __ServiceLocator.shared.getter();
        dispatch thunk of __ServiceLocator.assetService.getter();
        swift_release();
        static __ARReferenceProvider.instance(for:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
        v23 = dispatch thunk of __ARReferenceProvider.supportsGroup(named:)();
        v46 = v22;
        if ((v23 & 1) != 0)
        {
          v24 = v22[2];
          if (v24)
          {
            v25 = v22 + 5;
            do
            {
              swift_bridgeObjectRetain();
              dispatch thunk of __ARReferenceProvider.__fetchReferenceObject(group:name:)();
              swift_bridgeObjectRelease();
              v26 = v50;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v5, 1, v6) == 1)
              {
                outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v5, &demangling cache variable for type metadata for __AnyARKitObject?);
              }
              else
              {
                v27 = v49;
                (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v49, v5, v6);
                type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceObject);
                __AnyARKitObject.as<A>(type:)();
                specialized Set._Variant.insert(_:)(v52, v51);

                (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v6);
              }
              v25 += 2;
              --v24;
            }
            while (v24);
          }
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a1 = v41;
          v12 = v45;
          v11 = v47;
          v13 = v48;
          if (!v47)
            goto LABEL_7;
          goto LABEL_6;
        }
        swift_beginAccess();
        if (!*(_QWORD *)(*(_QWORD *)(v12 + 40) + 16))
          goto LABEL_29;
        swift_bridgeObjectRetain();
        specialized __RawDictionaryStorage.find<A>(_:)(v21, v20);
        if ((v28 & 1) == 0)
          break;
        swift_endAccess();
        swift_bridgeObjectRelease();
LABEL_33:
        swift_beginAccess();
        v34 = *(_QWORD *)(v12 + 40);
        if (!*(_QWORD *)(v34 + 16))
          goto LABEL_45;
        swift_bridgeObjectRetain();
        v35 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v20);
        if ((v36 & 1) == 0)
          goto LABEL_44;
        v37 = *(_QWORD *)(*(_QWORD *)(v34 + 56) + 8 * v35);
        swift_endAccess();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease_n();
        v38 = v44;
        v39 = specialized Set._Variant.filter(_:)(v37, v46, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeSet.extractSubset(using:count:), &lazy cache variable for type metadata for ARReferenceObject, 0x1E0C89608, (void (*)(unint64_t))specialized _NativeSet.resize(capacity:));
        v44 = v38;
        swift_bridgeObjectRelease();
        specialized Set.formUnion<A>(_:)(v39, &lazy cache variable for type metadata for ARReferenceObject, 0x1E0C89608, &lazy protocol witness table cache variable for type ARReferenceObject and conformance NSObject, (void (*)(id *, id))specialized Set._Variant.insert(_:));
        swift_release();
        v11 = v47;
        v13 = v48;
        v12 = v45;
        if (!v47)
          goto LABEL_7;
LABEL_6:
        v47 = (v11 - 1) & v11;
        v48 = v13;
      }
      swift_bridgeObjectRelease();
LABEL_29:
      swift_endAccess();
      v29 = (void *)objc_opt_self();
      v30 = (void *)MEMORY[0x1DF090310](v21, v20);
      v31 = objc_msgSend(v29, sel_referenceObjectsInGroupNamed_bundle_, v30, 0);

      if (v31)
      {
        type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceObject);
        lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(&lazy protocol witness table cache variable for type ARReferenceObject and conformance NSObject, &lazy cache variable for type metadata for ARReferenceObject);
        v32 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      }
      else
      {
        v32 = MEMORY[0x1E0DEE9E8];
      }
      swift_beginAccess();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v51 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v21, v20, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v12 + 40) = v51;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      goto LABEL_33;
    }
    v18 = v16 + 1;
    if (v16 + 1 >= v43)
      goto LABEL_41;
    v17 = *(_QWORD *)(v42 + 8 * v18);
    if (!v17)
    {
      v18 = v16 + 2;
      if (v16 + 2 >= v43)
        goto LABEL_41;
      v17 = *(_QWORD *)(v42 + 8 * v18);
      if (!v17)
      {
        v18 = v16 + 3;
        if (v16 + 3 < v43)
        {
          v17 = *(_QWORD *)(v42 + 8 * v18);
          if (v17)
            goto LABEL_16;
          while (1)
          {
            v16 = v18 + 1;
            if (__OFADD__(v18, 1))
              goto LABEL_43;
            if (v16 >= v43)
              break;
            v17 = *(_QWORD *)(v42 + 8 * v16);
            ++v18;
            if (v17)
              goto LABEL_17;
          }
        }
LABEL_41:
        swift_release();
        return v53;
      }
    }
LABEL_16:
    v16 = v18;
    goto LABEL_17;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  swift_bridgeObjectRelease();
LABEL_45:
  swift_endAccess();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void specialized Set.formUnion<A>(_:)(unint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, void (*a5)(id *, id))
{
  unint64_t v6;
  uint64_t v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  _QWORD *v24;
  id v25[6];

  v6 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for ARReferenceObject(0, a2);
    lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(a4, a2);
    Set.Iterator.init(_cocoa:)();
    v6 = (unint64_t)v25[1];
    v24 = v25[2];
    v9 = (uint64_t)v25[3];
    v10 = v25[4];
    v11 = (unint64_t)v25[5];
  }
  else
  {
    v10 = 0;
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v24 = (_QWORD *)(a1 + 56);
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(a1 + 56);
  }
  v15 = (unint64_t)(v9 + 64) >> 6;
  if ((v6 & 0x8000000000000000) != 0)
    goto LABEL_10;
  while (1)
  {
    if (v11)
    {
      v16 = (v11 - 1) & v11;
      v17 = __clz(__rbit64(v11)) | ((_QWORD)v10 << 6);
      v18 = (char *)v10;
      goto LABEL_29;
    }
    v20 = (uint64_t)v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v20 >= v15)
      goto LABEL_32;
    v21 = v24[v20];
    v18 = (char *)v10 + 1;
    if (!v21)
    {
      v18 = (char *)v10 + 2;
      if ((uint64_t)v10 + 2 >= v15)
        goto LABEL_32;
      v21 = v24[(_QWORD)v18];
      if (!v21)
      {
        v18 = (char *)v10 + 3;
        if ((uint64_t)v10 + 3 >= v15)
          goto LABEL_32;
        v21 = v24[(_QWORD)v18];
        if (!v21)
        {
          v18 = (char *)v10 + 4;
          if ((uint64_t)v10 + 4 >= v15)
            goto LABEL_32;
          v21 = v24[(_QWORD)v18];
          if (!v21)
          {
            v18 = (char *)v10 + 5;
            if ((uint64_t)v10 + 5 >= v15)
              goto LABEL_32;
            v21 = v24[(_QWORD)v18];
            if (!v21)
            {
              v22 = (char *)v10 + 6;
              while ((char *)v15 != v22)
              {
                v21 = v24[(_QWORD)v22++];
                if (v21)
                {
                  v18 = v22 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of Set<UITouch>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v16 = (v21 - 1) & v21;
    v17 = __clz(__rbit64(v21)) + ((_QWORD)v18 << 6);
LABEL_29:
    v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v17);
    if (!v19)
      goto LABEL_32;
    while (1)
    {
      a5(v25, v19);

      v10 = v18;
      v11 = v16;
      if ((v6 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ARReferenceObject(0, a2);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v19 = v25[0];
        swift_unknownObjectRelease();
        v18 = (char *)v10;
        v16 = v11;
        if (v19)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t specialized closure #1 in _NativeSet.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v25;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v35;

  v5 = 0;
  v30 = 0;
  v31 = a3 + 56;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 56);
  v32 = (unint64_t)(v6 + 63) >> 6;
  v28 = result;
  v29 = a4 + 7;
  while (1)
  {
    while (1)
    {
      if (v8)
      {
        v9 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v10 = v9 | (v5 << 6);
      }
      else
      {
        v11 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_43;
        if (v11 >= v32)
          goto LABEL_41;
        v12 = *(_QWORD *)(v31 + 8 * v11);
        ++v5;
        if (!v12)
        {
          v5 = v11 + 1;
          if (v11 + 1 >= v32)
            goto LABEL_41;
          v12 = *(_QWORD *)(v31 + 8 * v5);
          if (!v12)
          {
            v5 = v11 + 2;
            if (v11 + 2 >= v32)
              goto LABEL_41;
            v12 = *(_QWORD *)(v31 + 8 * v5);
            if (!v12)
            {
              v13 = v11 + 3;
              if (v13 >= v32)
                goto LABEL_41;
              v12 = *(_QWORD *)(v31 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  v5 = v13 + 1;
                  if (__OFADD__(v13, 1))
                    goto LABEL_44;
                  if (v5 >= v32)
                    goto LABEL_41;
                  v12 = *(_QWORD *)(v31 + 8 * v5);
                  ++v13;
                  if (v12)
                    goto LABEL_20;
                }
              }
              v5 = v13;
            }
          }
        }
LABEL_20:
        v8 = (v12 - 1) & v12;
        v10 = __clz(__rbit64(v12)) + (v5 << 6);
      }
      v14 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v10);
      result = (uint64_t)objc_msgSend(v14, sel_name);
      if (!result)
        goto LABEL_45;
      v15 = (void *)result;
      v35 = v5;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v18 = v17;

      v19 = a4[2];
      if (v19)
        break;
LABEL_4:

      result = swift_bridgeObjectRelease();
      v5 = v35;
    }
    if (a4[4] != v16 || a4[5] != v18)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
        break;
    }
LABEL_38:

    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v28 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v25 = __OFADD__(v30++, 1);
    v5 = v35;
    if (v25)
    {
      __break(1u);
LABEL_41:
      swift_retain();
      return a5(v28, a2, v30, a3);
    }
  }
  if (v19 == 1)
    goto LABEL_4;
  v21 = v29;
  v22 = 1;
  while (1)
  {
    v23 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (*(v21 - 1) == v16 && *v21 == v18)
      goto LABEL_38;
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
      goto LABEL_38;
    v21 += 2;
    ++v22;
    if (v23 == v19)
      goto LABEL_4;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  char v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  void *v13;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_BYTE *)(a1 + 32);
  v8 = v7 & 0x3F;
  v9 = (unint64_t)((1 << v7) + 63) >> 6;
  v10 = 8 * v9;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    v12 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, a1, a2, a3);
    swift_release();
    swift_bridgeObjectRelease();
    if (v3)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    swift_bridgeObjectRetain();
    v12 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v13, v9, a1, a2, a3);
    swift_release();
    swift_bridgeObjectRelease();
    MEMORY[0x1DF091C54](v13, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v12;
}

Swift::Int specialized Set._Variant.filter(_:)(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), unint64_t *a4, uint64_t a5, void (*a6)(unint64_t))
{
  uint64_t v8;
  Swift::Int result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  id v32;
  uint64_t v33;

  if ((a1 & 0xC000000000000001) == 0)
    return specialized _NativeSet.filter(_:)(a1, a2, a3);
  v8 = MEMORY[0x1E0DEE9E8];
  v33 = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRetain();
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_38:
    swift_bridgeObjectRelease();
    swift_release();
    return v8;
  }
  type metadata accessor for ARReferenceObject(0, a4);
  while (1)
  {
    swift_dynamicCast();
    result = (Swift::Int)objc_msgSend(v32, sel_name);
    if (!result)
      break;
    v10 = (void *)result;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    v14 = a2[2];
    if (v14)
    {
      v15 = a2[4] == v11 && a2[5] == v13;
      if (v15 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_13:
        swift_bridgeObjectRelease();
        v16 = v33;
        v17 = *(_QWORD *)(v33 + 16);
        if (*(_QWORD *)(v33 + 24) <= v17)
        {
          a6(v17 + 1);
          v16 = v33;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v16 + 40));
        v18 = v16 + 56;
        v19 = -1 << *(_BYTE *)(v16 + 32);
        v20 = result & ~v19;
        v21 = v20 >> 6;
        if (((-1 << v20) & ~*(_QWORD *)(v16 + 56 + 8 * (v20 >> 6))) != 0)
        {
          v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v16 + 56 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v19) >> 6;
          do
          {
            if (++v21 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              goto LABEL_40;
            }
            v25 = v21 == v24;
            if (v21 == v24)
              v21 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v18 + 8 * v21);
          }
          while (v26 == -1);
          v22 = __clz(__rbit64(~v26)) + (v21 << 6);
        }
        *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
        *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v22) = v32;
        ++*(_QWORD *)(v16 + 16);
        goto LABEL_5;
      }
      if (v14 != 1)
      {
        v27 = a2 + 7;
        v28 = 1;
        while (1)
        {
          v29 = v28 + 1;
          if (__OFADD__(v28, 1))
            break;
          if (*(v27 - 1) == v11 && *v27 == v13)
            goto LABEL_13;
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0)
            goto LABEL_13;
          v27 += 2;
          ++v28;
          if (v29 == v14)
            goto LABEL_4;
        }
LABEL_40:
        __break(1u);
        break;
      }
    }
LABEL_4:
    swift_bridgeObjectRelease();

LABEL_5:
    if (!__CocoaSet.Iterator.next()())
    {
      v8 = v33;
      goto LABEL_38;
    }
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment)
  {
    v1 = type metadata accessor for AnchoringComponent.Target.Alignment();
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0CD3BB0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment);
  }
  return result;
}

uint64_t static ParticleEmitterComponent.Presets.rain.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(_QWORD *, _QWORD);
  void (*v24)(_QWORD *, _QWORD);
  void (*v25)(_QWORD *, _QWORD);
  void (*v26)(_QWORD *, _QWORD);
  void (*v27)(_QWORD *, _QWORD);
  void (*v28)(_QWORD *, _QWORD);
  void (*v29)(_QWORD *, _QWORD);
  void (*v30)(_QWORD *, _QWORD);
  void (*v31)(_QWORD *, _QWORD);
  void (*v32)(_QWORD *, _QWORD);
  void (*v33)(_QWORD *, _QWORD);
  void (*v34)(_QWORD *, _QWORD);
  void (*v35)(_QWORD *, _QWORD);
  void (*v36)(_QWORD *, _QWORD);
  void (*v37)(_QWORD *, _QWORD);
  void (*v38)(_QWORD *, _QWORD);
  void (*v39)(_QWORD *, _QWORD);
  void (*v40)(_QWORD *, _QWORD);
  void (*v41)(_QWORD *, _QWORD);
  void (*v42)(_QWORD *, _QWORD);
  void (*v43)(_QWORD *, _QWORD);
  void (*v44)(_QWORD *, _QWORD);
  void (*v45)(_QWORD *, _QWORD);
  void (*v46)(_QWORD *, _QWORD);
  uint64_t v47;
  char *v48;
  void (*v49)(_QWORD *, _QWORD);
  void (*v50)(_QWORD *, _QWORD);
  void (*v51)(_QWORD *, _QWORD);
  void (*v52)(_QWORD *, _QWORD);
  void (*v53)(_QWORD *, _QWORD);
  void (*v54)(_QWORD *, _QWORD);
  uint64_t v55;
  void (*v56)(char *, _QWORD, uint64_t);
  char *v57;
  void (*v58)(_QWORD *, _QWORD);
  void (*v59)(_QWORD *, _QWORD);
  void (*v60)(_QWORD *, _QWORD);
  void (*v61)(_QWORD *, _QWORD);
  void (*v62)(_QWORD *, _QWORD);
  void (*v63)(_QWORD *, _QWORD);
  void (*v64)(_QWORD *, _QWORD);
  void (*v65)(_QWORD *, _QWORD);
  void (*v66)(_QWORD *, _QWORD);
  void *v67;
  id v68;
  void *v69;
  id v70;
  void (*v71)(_QWORD *, _QWORD);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[6];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter?);
  MEMORY[0x1E0C80A78](v0);
  v92 = (char *)&v76 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder();
  v88 = *(_QWORD *)(v2 - 8);
  v89 = v2;
  MEMORY[0x1E0C80A78](v2);
  v87 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve();
  v86 = *(_QWORD *)(v98 - 8);
  MEMORY[0x1E0C80A78](v98);
  v85 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode();
  v82 = *(_QWORD *)(v97 - 8);
  MEMORY[0x1E0C80A78](v97);
  v93 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode();
  v84 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95);
  v94 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for ParticleEmitterComponent.SpawnOccasion();
  v81 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  v80 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for ParticleEmitterComponent.SimulationSpace();
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v77 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for ParticleEmitterComponent.EmitterShape();
  v9 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76);
  v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ParticleEmitterComponent.BirthLocation();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ParticleEmitterComponent.BirthDirection();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter();
  v90 = *(_QWORD *)(v20 - 8);
  v91 = v20;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParticleEmitterComponent.init()();
  ParticleEmitterComponent.ParticleEmitter.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E0CD51C0], v16);
  ParticleEmitterComponent.birthDirection.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0CD5178], v12);
  ParticleEmitterComponent.birthLocation.setter();
  v96 = xmmword_1D95E2340;
  ParticleEmitterComponent.emissionDirection.setter();
  ParticleEmitterComponent.emissionDuration.setter();
  ParticleEmitterComponent.emissionDurationVariation.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0CD4EA0], v76);
  ParticleEmitterComponent.emitterShape.setter();
  ParticleEmitterComponent.emitterShapeSize.setter();
  ParticleEmitterComponent.idleDuration.setter();
  ParticleEmitterComponent.idleDurationVariation.setter();
  ParticleEmitterComponent.shouldLoop.setter();
  ParticleEmitterComponent.particlesInheritTransform.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v78 + 104))(v77, *MEMORY[0x1E0CD51F8], v79);
  ParticleEmitterComponent.fieldSimulationSpace.setter();
  ParticleEmitterComponent.spawnInheritsParentColor.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v81 + 104))(v80, *MEMORY[0x1E0CD5190], v83);
  ParticleEmitterComponent.spawnOccasion.setter();
  ParticleEmitterComponent.spawnSpreadFactor.setter();
  ParticleEmitterComponent.spawnSpreadFactorVariation.setter();
  ParticleEmitterComponent.spawnVelocityFactor.setter();
  ParticleEmitterComponent.speed.setter();
  ParticleEmitterComponent.speedVariation.setter();
  ParticleEmitterComponent.warmupDuration.setter();
  ParticleEmitterComponent.resetSimulation()();
  v23 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  v23(v99, 0);
  v24 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  v24(v99, 0);
  v25 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  v25(v99, 0);
  v26 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  v26(v99, 0);
  v27 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  v27(v99, 0);
  v28 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  v28(v99, 0);
  v29 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  v29(v99, 0);
  LODWORD(v83) = *MEMORY[0x1E0CD4F38];
  v84 = *(_QWORD *)(v84 + 104);
  ((void (*)(char *))v84)(v94);
  v30 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  v30(v99, 0);
  v31 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  v31(v99, 0);
  v32 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  v32(v99, 0);
  LODWORD(v81) = *MEMORY[0x1E0CD50D0];
  v82 = *(_QWORD *)(v82 + 104);
  ((void (*)(char *))v82)(v93);
  v33 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  v33(v99, 0);
  v34 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  v34(v99, 0);
  v35 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  v35(v99, 0);
  v36 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  v36(v99, 0);
  v37 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  v37(v99, 0);
  v38 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  v38(v99, 0);
  v39 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  v39(v99, 0);
  v40 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  v40(v99, 0);
  v41 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  v41(v99, 0);
  v42 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  v42(v99, 0);
  v43 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  v43(v99, 0);
  v44 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  v44(v99, 0);
  v45 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  v45(v99, 0);
  v46 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  v46(v99, 0);
  v47 = *MEMORY[0x1E0CD4F10];
  v86 = *(_QWORD *)(v86 + 104);
  v48 = v85;
  ((void (*)(char *, uint64_t, uint64_t))v86)(v85, v47, v98);
  v49 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  v49(v99, 0);
  v50 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  v50(v99, 0);
  v51 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  v51(v99, 0);
  v52 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  v52(v99, 0);
  v53 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  v53(v99, 0);
  v54 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v54(v99, 0);
  v55 = v89;
  v56 = *(void (**)(char *, _QWORD, uint64_t))(v88 + 104);
  v57 = v87;
  v56(v87, *MEMORY[0x1E0CD50F0], v89);
  v58 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  v58(v99, 0);
  v59 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  v59(v99, 0);
  v60 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  v60(v99, 0);
  v61 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  v61(v99, 0);
  CGColorCreateGenericRGB(228.0, 245.0, 255.0, 0.19);
  v62 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  v62(v99, 0);
  CGColorCreateGenericRGB(245.0, 250.0, 255.0, 0.14);
  v63 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  v63(v99, 0);
  v64 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  v64(v99, 0);
  v65 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  v65(v99, 0);
  v66 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  v66(v99, 0);
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  ((void (*)(char *, _QWORD, uint64_t))v84)(v94, v83, v95);
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  ((void (*)(char *, _QWORD, uint64_t))v82)(v93, v81, v97);
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  ((void (*)(char *, uint64_t, uint64_t))v86)(v48, v47, v98);
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v56(v57, *MEMORY[0x1E0CD50E0], v55);
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  CGColorCreateGenericRGB(240.0, 243.0, 236.0, 0.42);
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  CGColorCreateGenericRGB(97.0, 184.0, 26.0, 1.0);
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  type metadata accessor for TextureResource();
  v67 = (void *)MEMORY[0x1DF090310](0xD000000000000010, 0x80000001D95DCA10);
  v68 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v67);

  if (one-time initialization token for textureLoader != -1)
    swift_once();
  v69 = (void *)textureLoader;
  v99[3] = &type metadata for TextureLoader;
  v99[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v99[0] = v69;
  v70 = v69;
  static TextureResource.load(named:in:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);

  v71 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  v71(v99, 0);
  v73 = v90;
  v72 = v91;
  v74 = v92;
  (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v92, v22, v91);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v74, 0, 1, v72);
  ParticleEmitterComponent.spawnedEmitter.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v22, v72);
}

char *RKAREnvironmentProbeAnchor.init(anchor:)(void *a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  float v5;
  objc_super v7;

  *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_refreshInterval] = 0x4008000000000000;
  *(_DWORD *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_priority] = 0;
  *(_DWORD *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_weight] = 1065353216;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for RKAREnvironmentProbeAnchor();
  v3 = (char *)objc_msgSendSuper2(&v7, sel_initWithAnchor_, a1);
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    *(_QWORD *)&v3[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_refreshInterval] = *(_QWORD *)(v4 + OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_refreshInterval);
    *(_DWORD *)&v3[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_priority] = *(_DWORD *)(v4
                                                                                                  + OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_priority);
    v5 = *(float *)(v4 + OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_weight);

  }
  else
  {

    *(_QWORD *)&v3[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_refreshInterval] = 0x4008000000000000;
    *(_DWORD *)&v3[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_priority] = 0;
    v5 = 1.0;
  }
  *(float *)&v3[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_weight] = v5;
  return v3;
}

uint64_t RKAREnvironmentProbeAnchor.init(coder:)(void *a1)
{
  char *v1;
  id v3;
  id v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  void *v11;
  int v12;
  int v13;
  uint64_t result;
  objc_super v15;

  *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_refreshInterval] = 0x4008000000000000;
  *(_DWORD *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_priority] = 0;
  *(_DWORD *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_weight] = 1065353216;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v15.receiver = v1;
  v15.super_class = (Class)type metadata accessor for RKAREnvironmentProbeAnchor();
  v3 = objc_msgSendSuper2(&v15, sel_initWithCoder_, a1);
  v4 = v3;
  if (!v3)
  {

    return (uint64_t)v4;
  }
  v5 = (char *)v3;
  v6 = (void *)MEMORY[0x1DF090310](0x4968736572666572, 0xEF6C61767265746ELL);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v6);
  v8 = v7;

  *(_QWORD *)&v5[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_refreshInterval] = v8;
  v9 = (void *)MEMORY[0x1DF090310](0x797469726F697270, 0xE800000000000000);
  v10 = objc_msgSend(a1, sel_decodeInt32ForKey_, v9);

  if ((v10 & 0x80000000) == 0)
  {
    *(_DWORD *)&v5[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_priority] = v10;
    v11 = (void *)MEMORY[0x1DF090310](0x746867696577, 0xE600000000000000);
    objc_msgSend(a1, sel_decodeFloatForKey_, v11);
    v13 = v12;

    *(_DWORD *)&v5[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_weight] = v13;
    return (uint64_t)v4;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall RKAREnvironmentProbeAnchor.encode(with:)(NSCoder with)
{
  char *v1;
  double v3;
  void *v4;
  Class isa;
  void *v6;
  void *v7;
  double v8;
  objc_super v9;

  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for RKAREnvironmentProbeAnchor();
  objc_msgSendSuper2(&v9, sel_encodeWithCoder_, with.super.isa);
  v3 = *(double *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_refreshInterval];
  v4 = (void *)MEMORY[0x1DF090310](0x4968736572666572, 0xEF6C61767265746ELL);
  -[objc_class encodeDouble:forKey:](with.super.isa, sel_encodeDouble_forKey_, v4, v3);

  isa = UInt32._bridgeToObjectiveC()().super.super.isa;
  v6 = (void *)MEMORY[0x1DF090310](0x797469726F697270, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v6);

  LODWORD(v3) = *(_DWORD *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_weight];
  v7 = (void *)MEMORY[0x1DF090310](0x746867696577, 0xE600000000000000);
  LODWORD(v8) = LODWORD(v3);
  -[objc_class encodeFloat:forKey:](with.super.isa, sel_encodeFloat_forKey_, v7, v8);

}

id RKAREnvironmentProbeAnchor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RKAREnvironmentProbeAnchor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for RKAREnvironmentProbeAnchor()
{
  return objc_opt_self();
}

void destroy for REARCapturedFrame(id *a1)
{

}

uint64_t initializeWithCopy for REARCapturedFrame(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for REARCapturedFrame(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for REARCapturedFrame(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for REARCapturedFrame(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for REARCapturedFrame(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for REARCapturedFrame()
{
  return &type metadata for REARCapturedFrame;
}

uint64_t closure #1 in static ARView.fulfillPixelCastRequest(renderManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(uint64_t *);
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v4 = *(void (**)(uint64_t *))(a3 + 64);
  v20[1] = *(_QWORD *)(a3 + 72);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PixelCastHit?, Error>);
  MEMORY[0x1E0C80A78](v5);
  v7 = (_QWORD *)((char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PixelCastHit?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v20 - v12;
  v14 = type metadata accessor for PixelCastHit();
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v15(v13, 1, 1, v14);
  if (a2 >= 1)
  {
    Scene.coreScene.getter();
    if (!RESceneFindEntity())
    {
      v16 = type metadata accessor for Scene.PixelCastError();
      lazy protocol witness table accessor for type Scene.PixelCastError and conformance Scene.PixelCastError();
      v17 = swift_allocError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x1E0CD4280], v16);
      *v7 = v17;
      goto LABEL_8;
    }
    RESceneUnderstandingComponentGetComponentType();
    if (!REEntityGetComponentByClass() || RESceneUnderstandingComponentGetSourceType() != 1)
    {
      type metadata accessor for Entity();
      static Entity.fromCore(_:ignoringEntityInfo:)();
      PixelCastHit.init(entity:normal:position:meshPart:instance:primitive:barycentric:)();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v13, &demangling cache variable for type metadata for PixelCastHit?);
      v15(v10, 0, 1, v14);
      outlined init with take of vImage_CGImageFormat?((uint64_t)v10, (uint64_t)v13, &demangling cache variable for type metadata for PixelCastHit?);
    }
  }
  outlined init with copy of PixelCastHit?((uint64_t)v13, (uint64_t)v7);
LABEL_8:
  swift_storeEnumTagMultiPayload();
  v4(v7);
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v7, &demangling cache variable for type metadata for Result<PixelCastHit?, Error>);
  return outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v13, &demangling cache variable for type metadata for PixelCastHit?);
}

void closure #1 in static ARView.fulfillPixelCastArrayRequest(renderManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(unint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(void (**)(unint64_t, uint64_t))(a3 + 64);
  v5 = type metadata accessor for PixelCastHit();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 < 1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
LABEL_7:
    v4(v9, 0);
    swift_bridgeObjectRelease();
    return;
  }
  Scene.coreScene.getter();
  if (RESceneFindEntity())
  {
    type metadata accessor for Entity();
    static Entity.fromCore(_:ignoringEntityInfo:)();
    PixelCastHit.init(entity:normal:position:meshPart:instance:primitive:barycentric:)();
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v11 = *(_QWORD *)(v9 + 16);
    v10 = *(_QWORD *)(v9 + 24);
    if (v11 >= v10 >> 1)
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1, v9);
    *(_QWORD *)(v9 + 16) = v11 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v9+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v11, v8, v5);
    goto LABEL_7;
  }
  v12 = type metadata accessor for Scene.PixelCastError();
  lazy protocol witness table accessor for type Scene.PixelCastError and conformance Scene.PixelCastError();
  v13 = (void *)swift_allocError();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, *MEMORY[0x1E0CD4280], v12);
  v4((unint64_t)v13, 1);

}

uint64_t specialized static ARView.fulfillPixelCastRequest(renderManager:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[80];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 aBlock;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v0 = type metadata accessor for __SceneRef();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for __AssetRef();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Scene();
  static Scene.pixelCastRequest.getter();
  result = outlined init with take of vImage_CGImageFormat?((uint64_t)v22, (uint64_t)&v23, &demangling cache variable for type metadata for (scene: Scene, ray: RERay, completion: ())?);
  v10 = v23;
  if (v23)
  {
    v21 = v24;
    v20 = v25;
    v11 = v26;
    v17 = v27;
    v19 = v8;
    v18 = v0;
    v12 = v28;
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.renderService.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
    type metadata accessor for RERenderManager();
    swift_dynamicCast();
    pickingEmitter.getter();
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    RERenderGraphSelectionEmitterSetConcludeParams();
    dispatch thunk of RERenderManager.__coreRenderManager.getter();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v10;
    v14 = v20;
    *(_OWORD *)(v13 + 32) = v21;
    *(_OWORD *)(v13 + 48) = v14;
    *(_DWORD *)(v13 + 64) = v11;
    *(_QWORD *)(v13 + 80) = v17;
    *(_QWORD *)(v13 + 88) = v12;
    *(_QWORD *)&v31 = partial apply for closure #1 in static ARView.fulfillPixelCastRequest(renderManager:);
    *((_QWORD *)&v31 + 1) = v13;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v30 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer) -> ();
    *((_QWORD *)&v30 + 1) = &block_descriptor_6_4;
    v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    RERenderGraphSelectionEmitterAddConcludeCallback();
    _Block_release(v15);
    swift_retain();
    dispatch thunk of Scene.__coreScene.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v18);
    RERenderGraphSelectionEmitterSetScene();
    pickingEmitter.getter();
    dispatch thunk of __RERenderGraphEmitter.setup(mgr:)();
    swift_release();
    pickingEmitter.getter();
    dispatch thunk of __RERenderGraphEmitter.execute(mgr:)();
    swift_release();
    pickingEmitter.getter();
    dispatch thunk of __RERenderGraphEmitter.unsetup(mgr:)();
    swift_release();
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    aBlock = 0u;
    static Scene.pixelCastRequest.setter();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized static ARView.fulfillPixelCastArrayRequest(renderManager:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[80];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 aBlock;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v0 = type metadata accessor for __SceneRef();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for __AssetRef();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Scene();
  static Scene.pixelCastArrayRequest.getter();
  result = outlined init with take of vImage_CGImageFormat?((uint64_t)v22, (uint64_t)&v23, &demangling cache variable for type metadata for (scene: Scene, ray: RERay, completion: ())?);
  v10 = v23;
  if (v23)
  {
    v21 = v24;
    v20 = v25;
    v11 = v26;
    v17 = v27;
    v19 = v8;
    v18 = v0;
    v12 = v28;
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.renderService.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
    type metadata accessor for RERenderManager();
    swift_dynamicCast();
    pickingEmitter.getter();
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    RERenderGraphSelectionEmitterSetConcludeParams();
    dispatch thunk of RERenderManager.__coreRenderManager.getter();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v10;
    v14 = v20;
    *(_OWORD *)(v13 + 32) = v21;
    *(_OWORD *)(v13 + 48) = v14;
    *(_DWORD *)(v13 + 64) = v11;
    *(_QWORD *)(v13 + 80) = v17;
    *(_QWORD *)(v13 + 88) = v12;
    *(_QWORD *)&v31 = partial apply for closure #1 in static ARView.fulfillPixelCastArrayRequest(renderManager:);
    *((_QWORD *)&v31 + 1) = v13;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v30 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer) -> ();
    *((_QWORD *)&v30 + 1) = &block_descriptor_8;
    v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    RERenderGraphSelectionEmitterAddConcludeCallback();
    _Block_release(v15);
    swift_retain();
    dispatch thunk of Scene.__coreScene.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v18);
    RERenderGraphSelectionEmitterSetScene();
    pickingEmitter.getter();
    dispatch thunk of __RERenderGraphEmitter.setup(mgr:)();
    swift_release();
    pickingEmitter.getter();
    dispatch thunk of __RERenderGraphEmitter.execute(mgr:)();
    swift_release();
    pickingEmitter.getter();
    dispatch thunk of __RERenderGraphEmitter.unsetup(mgr:)();
    swift_release();
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    aBlock = 0u;
    static Scene.pixelCastArrayRequest.setter();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in static ARView.fulfillPixelCastArrayRequest(renderManager:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in static ARView.fulfillPixelCastArrayRequest(renderManager:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))closure #1 in static ARView.fulfillPixelCastArrayRequest(renderManager:));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type Scene.PixelCastError and conformance Scene.PixelCastError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Scene.PixelCastError and conformance Scene.PixelCastError;
  if (!lazy protocol witness table cache variable for type Scene.PixelCastError and conformance Scene.PixelCastError)
  {
    v1 = type metadata accessor for Scene.PixelCastError();
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0CD4290], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Scene.PixelCastError and conformance Scene.PixelCastError);
  }
  return result;
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static ARView.fulfillPixelCastRequest(renderManager:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in static ARView.fulfillPixelCastArrayRequest(renderManager:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))closure #1 in static ARView.fulfillPixelCastRequest(renderManager:));
}

uint64_t partial apply for closure #1 in static ARView.fulfillPixelCastArrayRequest(renderManager:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  __int128 v12;

  v4 = *(_OWORD *)(v3 + 32);
  v5 = *(_OWORD *)(v3 + 48);
  v6 = *(_DWORD *)(v3 + 64);
  v8 = *(_QWORD *)(v3 + 16);
  v9 = v4;
  v10 = v5;
  v11 = v6;
  v12 = *(_OWORD *)(v3 + 80);
  return a3(a1, a2, &v8);
}

uint64_t outlined init with copy of PixelCastHit?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PixelCastHit?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id DirectionalLightComponent.color.getter()
{
  void *v0;
  id v1;

  v0 = (void *)DirectionalLightComponent.__color.getter();
  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v0);

  return v1;
}

void key path getter for DirectionalLightComponent.color : DirectionalLightComponent(_QWORD *a1@<X8>)
{
  void *v2;
  id v3;

  v2 = (void *)DirectionalLightComponent.__color.getter();
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v2);

  *a1 = v3;
}

void key path setter for DirectionalLightComponent.color : DirectionalLightComponent(id *a1)
{
  id v1;
  id v2;

  v2 = *a1;
  v1 = objc_msgSend(v2, sel_CGColor);
  DirectionalLightComponent.__color.setter();

}

void DirectionalLightComponent.color.setter(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, sel_CGColor);
  DirectionalLightComponent.__color.setter();

}

void (*DirectionalLightComponent.color.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  void *v3;
  id v4;

  a1[1] = v1;
  v3 = (void *)DirectionalLightComponent.__color.getter();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return DirectionalLightComponent.color.modify;
}

void DirectionalLightComponent.color.modify(void **a1, char a2)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;

  v2 = *a1;
  v6 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    v4 = objc_msgSend(v3, sel_CGColor);
    DirectionalLightComponent.__color.setter();

  }
  else
  {
    v5 = objc_msgSend(v2, sel_CGColor);
    DirectionalLightComponent.__color.setter();
  }

}

void DirectionalLightComponent.init(color:intensity:)(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, sel_CGColor);
  DirectionalLightComponent.init(cgColor:intensity:isRealWorldProxy:)();

}

void DirectionalLightComponent.init(color:intensity:isRealWorldProxy:)(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, sel_CGColor);
  DirectionalLightComponent.init(cgColor:intensity:isRealWorldProxy:)();

}

uint64_t DirectionalLightComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  _QWORD v22[2];

  v22[1] = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DirectionalLightComponent();
  v10 = MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v9, v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1D95E3410;
  *(_QWORD *)(v13 + 32) = 0x726F6C6F63;
  *(_QWORD *)(v13 + 40) = 0xE500000000000000;
  v14 = (void *)DirectionalLightComponent.__color.getter();
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v14);

  v16 = type metadata accessor for UIColor();
  *(_QWORD *)(v13 + 48) = v15;
  *(_QWORD *)(v13 + 72) = v16;
  *(_QWORD *)(v13 + 80) = 0x7469736E65746E69;
  *(_QWORD *)(v13 + 88) = 0xE900000000000079;
  DirectionalLightComponent.intensity.getter();
  v17 = MEMORY[0x1E0DEB188];
  *(_DWORD *)(v13 + 96) = v18;
  *(_QWORD *)(v13 + 120) = v17;
  *(_QWORD *)(v13 + 128) = 0xD000000000000010;
  *(_QWORD *)(v13 + 136) = 0x80000001D95DE670;
  v19 = DirectionalLightComponent.isRealWorldProxy.getter();
  *(_QWORD *)(v13 + 168) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(v13 + 144) = v19 & 1;
  v20 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v8, 1, 1, v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEDFE8], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v3 = __CocoaSet.startIndex.getter();
    v5 = v4;
    v6 = __CocoaSet.endIndex.getter();
    v8 = MEMORY[0x1DF09061C](v3, v5, v6, v7);
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
    {
LABEL_3:
      outlined consume of Set<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>.Index._Variant(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    specialized Set.subscript.getter(v3, v5, v2 != 0, a1);
    v9 = v13;
    outlined consume of Set<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>.Index._Variant(v3, v5, v2 != 0);
    return v9;
  }
  result = specialized _NativeSet.startIndex.getter(a1);
  if ((v12 & 1) == 0)
  {
    v5 = v11;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v11)
    {
      v3 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
        goto LABEL_3;
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall ARView.setupMetalLayer()()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  const __CFString *v5;
  id v6;
  CGColorSpaceRef v7;
  void *v8;
  void *v9;
  void *v10;

  v1 = (_BYTE *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput);
  swift_beginAccess();
  v2 = OBJC_IVAR____TtC10RealityKit6ARView_backingLayer;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_backingLayer);
  if (*v1 == 1)
  {
    if (!v3)
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    objc_msgSend(v3, sel_setPixelFormat_, 115);
    v4 = *(void **)(v0 + v2);
    if (!v4)
    {
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    v5 = (const __CFString *)*MEMORY[0x1E0C9D940];
    v6 = v4;
    v7 = CGColorSpaceCreateWithName(v5);
    objc_msgSend(v6, sel_setColorspace_, v7);

    v8 = *(void **)(v0 + v2);
    if (!v8)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    objc_msgSend(v8, sel_setWantsExtendedDynamicRangeContent_, 1);
LABEL_9:
    v10 = *(void **)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_backingLayer);
    if (v10)
    {
      objc_msgSend(v10, sel_setFramebufferOnly_, 0);
      return;
    }
    __break(1u);
    goto LABEL_12;
  }
  if (!v3)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v3, sel_setPixelFormat_, 553);
  v9 = *(void **)(v0 + v2);
  if (v9)
  {
    objc_msgSend(v9, sel_setColorspace_, 0);
    goto LABEL_9;
  }
LABEL_16:
  __break(1u);
}

uint64_t static ARView.layerClass.getter()
{
  return type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
}

Swift::Void __swiftcall ARView.__enablePauseEngineOnLeaveForeground()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground) & 1) == 0)
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    objc_msgSend(v2, sel_addObserver_selector_name_object_, v0, sel_willResignActiveWithNotification_, *MEMORY[0x1E0DC4868], 0);
    objc_msgSend(v2, sel_addObserver_selector_name_object_, v0, sel_restartEngineWithNotification_, *MEMORY[0x1E0DC4750], 0);

    *(_BYTE *)(v0 + v1) = 1;
  }
}

id ARView.contentScaleFactor.getter()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ARView();
  return objc_msgSendSuper2(&v2, sel_contentScaleFactor);
}

void ARView.contentScaleFactor.setter(double a1)
{
  void *v1;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  objc_super v8;

  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for ARView();
  objc_msgSendSuper2(&v8, sel_setContentScaleFactor_, a1);
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_initialized) == 1)
  {
    objc_msgSend(v1, sel_bounds);
    v4 = v3;
    v6 = v5;
    objc_msgSend(v1, sel_contentScaleFactor);
    ARView.resizeDrawable(size:scaleFactor:)(v4, v6, v7);
  }
}

Swift::Void __swiftcall ARView.__disablePauseEngineOnLeaveForeground()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground) == 1)
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    objc_msgSend(v2, sel_removeObserver_name_object_, v0, *MEMORY[0x1E0DC4868], 0);
    objc_msgSend(v2, sel_removeObserver_name_object_, v0, *MEMORY[0x1E0DC4750], 0);

    *(_BYTE *)(v0 + v1) = 0;
  }
}

Swift::Void __swiftcall ARView.didMoveToSuperview()()
{
  _BYTE *v0;
  _BYTE *v1;
  id v2;
  uint64_t v3;
  char v4;
  objc_super v5;

  v1 = v0;
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for ARView();
  objc_msgSendSuper2(&v5, sel_didMoveToSuperview);
  v2 = objc_msgSend(v0, sel_superview);

  v3 = OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView;
  if (v2)
  {
    if ((v1[OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView] & 1) != 0)
      return;
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.engine.getter();
    swift_release();
    dispatch thunk of __Engine.__start()();
    v4 = 1;
  }
  else
  {
    if (!v1[OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView])
      return;
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.engine.getter();
    swift_release();
    dispatch thunk of __Engine.__stop()();
    v4 = 0;
  }
  swift_release();
  v1[v3] = v4;
}

Swift::Void __swiftcall ARView.layoutSubviews()()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  objc_super v6;

  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for ARView();
  objc_msgSendSuper2(&v6, sel_layoutSubviews);
  objc_msgSend(v0, sel_bounds);
  v2 = v1;
  v4 = v3;
  objc_msgSend(v0, sel_contentScaleFactor);
  ARView.resizeDrawable(size:scaleFactor:)(v2, v4, v5);
}

void ARView.touchesBegan(_:with:)(uint64_t a1, uint64_t a2)
{
  ARView.touchesBegan(_:with:)(a1, a2, 9, (SEL *)&selRef_touchesBegan_withEvent_);
}

unint64_t lazy protocol witness table accessor for type UITouch and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UITouch and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UITouch and conformance NSObject)
  {
    v1 = type metadata accessor for ARReferenceObject(255, (unint64_t *)&lazy cache variable for type metadata for UITouch);
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject);
  }
  return result;
}

void ARView.touchesMoved(_:with:)(uint64_t a1, uint64_t a2)
{
  ARView.touchesBegan(_:with:)(a1, a2, 11, (SEL *)&selRef_touchesMoved_withEvent_);
}

void ARView.touchesBegan(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  void *v4;
  void *v7;
  uint64_t v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  Class isa;
  objc_super v17;

  v7 = v4;
  v9 = swift_bridgeObjectRetain();
  v10 = (void *)specialized Collection.first.getter(v9);
  swift_bridgeObjectRelease();
  if (!v10)
    goto LABEL_11;
  objc_msgSend(v10, sel_locationInView_, v4);
  v12 = v11;
  v14 = v13;
  type metadata accessor for InputManager();
  if (v12 <= -2147483650.0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v12 >= 2147483650.0)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((*(_QWORD *)&v12 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&v14 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_14;
  }
  if (v14 <= -2147483650.0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v14 < 2147483650.0)
  {
    MEMORY[0x1DF08EAA4](a3, (int)v12, (int)v14, 0);

LABEL_11:
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
    lazy protocol witness table accessor for type UITouch and conformance NSObject();
    isa = Set._bridgeToObjectiveC()().super.isa;
    v17.receiver = v7;
    v17.super_class = (Class)type metadata accessor for ARView();
    objc_msgSendSuper2(&v17, *a4, isa, a2);

    return;
  }
LABEL_16:
  __break(1u);
}

void ARView.touchesEnded(_:with:)(uint64_t a1, uint64_t a2)
{
  ARView.touchesBegan(_:with:)(a1, a2, 10, (SEL *)&selRef_touchesEnded_withEvent_);
}

void ARView.touchesCancelled(_:with:)(uint64_t a1, uint64_t a2)
{
  ARView.touchesBegan(_:with:)(a1, a2, 10, (SEL *)&selRef_touchesCancelled_withEvent_);
}

uint64_t @objc ARView.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, void *))
{
  uint64_t v8;
  id v9;
  id v10;

  type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a4;
  v10 = a1;
  a5(v8, a4);

  return swift_bridgeObjectRelease();
}

Swift::Bool __swiftcall ARView.gestureRecognizer(_:shouldReceive:)(UIGestureRecognizer *_, UITouch shouldReceive)
{
  uint64_t v2;
  UIGestureRecognizer *v5;
  id v6;
  UIView *v7;
  UIView *v8;
  UIView *v9;

  swift_getObjectType();
  if (swift_conformsToProtocol2())
    v5 = _;
  else
    v5 = 0;
  if (!v5)
    return 1;
  v6 = -[objc_class view](shouldReceive.super.isa, sel_view);
  if (!v6)
    return 1;
  if (v6 == *(id *)(v2 + OBJC_IVAR____TtC10RealityKit6ARView_renderView))
  {

    return 1;
  }
  else
  {
    v7 = (UIView *)v6;
    v8 = -[UIGestureRecognizer view](_, sel_view);
    if (v8)
    {
      v9 = v8;

      return v7 == v9;
    }
    else
    {

      return 0;
    }
  }
}

id ARRenderView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ARRenderView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  id v15;
  void *v16;

  v6 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter() == *(_DWORD *)(a4 + 36))
      {
        __CocoaSet.Index.element.getter();
        type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v4 = v16;
        swift_unknownObjectRelease();
        v8 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v9 = -1 << *(_BYTE *)(a4 + 32);
        v6 = v8 & ~v9;
        if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
        {
          v10 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          v11 = static NSObject.== infix(_:_:)();

          if ((v11 & 1) == 0)
          {
            v12 = ~v9;
            do
            {
              v6 = (v6 + 1) & v12;
              if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
                goto LABEL_24;
              v13 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
              v14 = static NSObject.== infix(_:_:)();

            }
            while ((v14 & 1) == 0);
          }

LABEL_20:
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v7 = a4;
  else
    v7 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x1DF090658](a1, a2, v7);
  type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized ARView.willResignActive(notification:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t result;
  uint64_t v5;

  v1 = v0;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  v2 = dispatch thunk of __Engine.isRunning.getter();
  swift_release();
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_engineWasRunningWhenLastInTheForeground) = v2 & 1;
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  v3 = dispatch thunk of __Engine.isRunning.getter();
  result = swift_release();
  if ((v3 & 1) != 0)
  {
    v5 = OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView;
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView) == 1)
    {
      static __ServiceLocator.shared.getter();
      dispatch thunk of __ServiceLocator.engine.getter();
      swift_release();
      dispatch thunk of __Engine.__stop()();
      result = swift_release();
      *(_BYTE *)(v1 + v5) = 0;
    }
  }
  return result;
}

void specialized ARView.restartEngine(notification:)()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_engineWasRunningWhenLastInTheForeground) == 1)
  {
    v1 = OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView;
    if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView) & 1) == 0)
    {
      type metadata accessor for __ServiceLocator();
      static __ServiceLocator.shared.getter();
      dispatch thunk of __ServiceLocator.engine.getter();
      swift_release();
      dispatch thunk of __Engine.__start()();
      swift_release();
      *(_BYTE *)(v0 + v1) = 1;
    }
  }
}

uint64_t specialized ARView.gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)(void *a1, void *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
      goto LABEL_3;
  }
  swift_getObjectType();
  v5 = swift_conformsToProtocol2();
  if (v5)
    v6 = v5;
  else
    v6 = 0;
  if (v5)
    v7 = a1;
  else
    v7 = 0;
  if (!v7
    || ((swift_getObjectType(), (v8 = swift_conformsToProtocol2()) != 0) ? (v9 = v8) : (v9 = 0),
        v8 ? (v10 = a2) : (v10 = 0),
        !v10))
  {
LABEL_24:
    v4 = 0;
    return v4 & 1;
  }
  ObjectType = swift_getObjectType();
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  v13 = a1;
  v14 = a2;
  v15 = v12(ObjectType, v6);
  v16 = swift_getObjectType();
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v16, v9);
  v18 = v17;
  if (v15)
  {
    if (v17)
    {
      type metadata accessor for Entity();
      lazy protocol witness table accessor for type Entity and conformance Entity();
      swift_retain();
      v4 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();

      swift_release();
      swift_release();
      return v4 & 1;
    }
    swift_release();

    goto LABEL_24;
  }

  if (v18)
  {
    swift_release();
    goto LABEL_24;
  }
LABEL_3:
  v4 = 1;
  return v4 & 1;
}

uint64_t type metadata accessor for ARRenderView()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type Entity and conformance Entity()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Entity and conformance Entity;
  if (!lazy protocol witness table cache variable for type Entity and conformance Entity)
  {
    v1 = type metadata accessor for Entity();
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0CD4660], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity);
  }
  return result;
}

uint64_t static TextureResource.load(named:in:)()
{
  void *v0;
  id v1;
  uint64_t v2;
  _QWORD v4[5];

  if (one-time initialization token for textureLoader != -1)
    swift_once();
  v0 = (void *)textureLoader;
  v4[3] = &type metadata for TextureLoader;
  v4[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v4[0] = v0;
  v1 = v0;
  v2 = static TextureResource.load(named:in:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t static TextureResource.loadAsync(named:in:)()
{
  void *v0;
  id v1;
  uint64_t v2;
  _QWORD v4[5];

  if (one-time initialization token for textureLoader != -1)
    swift_once();
  v0 = (void *)textureLoader;
  v4[3] = &type metadata for TextureLoader;
  v4[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v4[0] = v0;
  v1 = v0;
  v2 = static TextureResource.loadAsync(named:in:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t static TextureResource.load(named:in:options:)()
{
  void *v0;
  id v1;
  uint64_t v2;
  _QWORD v4[5];

  if (one-time initialization token for textureLoader != -1)
    swift_once();
  v0 = (void *)textureLoader;
  v4[3] = &type metadata for TextureLoader;
  v4[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v4[0] = v0;
  v1 = v0;
  v2 = static TextureResource.load(named:in:options:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t static TextureResource.loadAsync(named:in:options:)()
{
  void *v0;
  id v1;
  uint64_t v2;
  _QWORD v4[5];

  if (one-time initialization token for textureLoader != -1)
    swift_once();
  v0 = (void *)textureLoader;
  v4[3] = &type metadata for TextureLoader;
  v4[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v4[0] = v0;
  v1 = v0;
  v2 = static TextureResource.loadAsync(named:in:options:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t TextureResource.__allocating_init(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for TextureResource.MipmapsMode();
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 - 8);
  v4[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextureResource.Semantic?);
  v4[9] = swift_task_alloc();
  type metadata accessor for TextureResource.CreateOptions();
  v4[10] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[11] = static MainActor.shared.getter();
  v4[12] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[13] = v6;
  return swift_task_switch();
}

uint64_t TextureResource.__allocating_init(named:in:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  char *v10;

  v1 = v0[9];
  v3 = v0[7];
  v2 = v0[8];
  v4 = v0[6];
  v5 = (void *)v0[4];
  v6 = type metadata accessor for TextureResource.Semantic();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v1, 1, 1, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, *MEMORY[0x1E0CD38E0], v4);
  v7 = v5;
  TextureResource.CreateOptions.init(semantic:mipmapsMode:)();
  v10 = (char *)&async function pointer to specialized TextureResource.__allocating_init(named:in:options:)
      + async function pointer to specialized TextureResource.__allocating_init(named:in:options:);
  v8 = (_QWORD *)swift_task_alloc();
  v0[14] = v8;
  *v8 = v0;
  v8[1] = TextureResource.__allocating_init(named:in:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v10)(v0[2], v0[3], v0[4], v0[10]);
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 32);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 32);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TextureResource.__allocating_init(named:in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;

  v4 = *v2;
  v5 = *(void **)(*v2 + 32);
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc();

  if (!v1)
    *(_QWORD *)(v4 + 128) = a1;
  return swift_task_switch();
}

uint64_t TextureResource.__allocating_init(named:in:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = a3;
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized TextureResource.__allocating_init(named:in:options:)
                                                                   + async function pointer to specialized TextureResource.__allocating_init(named:in:options:));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v9;
  *v9 = v4;
  v9[1] = TextureResource.__allocating_init(named:in:options:);
  return v11(a1, a2, a3, a4);
}

uint64_t TextureResource.__allocating_init(named:in:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  swift_task_dealloc();

  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t createMTLTextureLoaderOptions(from:)(uint64_t a1)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, _QWORD, uint64_t);
  char v31;
  void (*v32)(char *, uint64_t);
  void *v33;
  id v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  char v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, _QWORD, uint64_t);
  void (*v43)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  char *v64;
  char v65;
  void (*v66)(char *, uint64_t);
  void *v67;
  id v68;
  char v69;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD v86[2];
  __int128 v87;
  uint64_t v88;

  Options = type metadata accessor for TextureResource.CreateOptions();
  v78 = *(_QWORD *)(Options - 8);
  v79 = Options;
  MEMORY[0x1E0C80A78](Options);
  v77 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TextureResource.Semantic();
  v83 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v72 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TextureResource.Semantic?, TextureResource.Semantic?));
  MEMORY[0x1E0C80A78](v82);
  v74 = (uint64_t)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v71 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextureResource.Semantic?);
  MEMORY[0x1E0C80A78](v10);
  v71 = (uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v76 = (char *)&v71 - v13;
  MEMORY[0x1E0C80A78](v14);
  v75 = (uint64_t)&v71 - v15;
  MEMORY[0x1E0C80A78](v16);
  v73 = (uint64_t)&v71 - v17;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v71 - v19;
  MEMORY[0x1E0C80A78](v21);
  v81 = (uint64_t)&v71 - v22;
  v23 = type metadata accessor for TextureResource.MipmapsMode();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v71 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v71 - v28;
  TextureResource.CreateOptions.mipmapsMode.getter();
  v30 = *(void (**)(char *, _QWORD, uint64_t))(v24 + 104);
  v30(v26, *MEMORY[0x1E0CD38D8], v23);
  v31 = MEMORY[0x1DF08EC48](v29, v26);
  v32 = *(void (**)(char *, uint64_t))(v24 + 8);
  v32(v26, v23);
  v32(v29, v23);
  v84 = a1;
  if ((v31 & 1) != 0)
  {
    v33 = (void *)*MEMORY[0x1E0CC6BF0];
    v88 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v87) = 1;
    outlined init with take of Any(&v87, v86);
    v34 = v33;
    v35 = MEMORY[0x1E0DEE9E0];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v85 = v35;
  }
  else
  {
    TextureResource.CreateOptions.mipmapsMode.getter();
    v30(v26, *MEMORY[0x1E0CD38E0], v23);
    v37 = MEMORY[0x1DF08EC48](v29, v26);
    v32(v26, v23);
    v32(v29, v23);
    v38 = MEMORY[0x1E0DEE9E0];
    if ((v37 & 1) == 0)
      goto LABEL_6;
    v39 = (void *)*MEMORY[0x1E0CC6BF8];
    v88 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v87) = 1;
    outlined init with take of Any(&v87, v86);
    v34 = v39;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v85 = v38;
  }
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v86, v34, isUniquelyReferenced_nonNull_native);
  v38 = v85;

  swift_bridgeObjectRelease();
LABEL_6:
  v80 = v38;
  v40 = v81;
  TextureResource.CreateOptions.semantic.getter();
  v41 = v83;
  v42 = *(void (**)(char *, _QWORD, uint64_t))(v83 + 104);
  v42(v20, *MEMORY[0x1E0CD3928], v4);
  v43 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56);
  v43(v20, 0, 1, v4);
  v44 = (uint64_t)&v9[*(int *)(v82 + 48)];
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v40, (uint64_t)v9, &demangling cache variable for type metadata for TextureResource.Semantic?);
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v20, v44, &demangling cache variable for type metadata for TextureResource.Semantic?);
  v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
  if (v45((uint64_t)v9, 1, v4) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v20, &demangling cache variable for type metadata for TextureResource.Semantic?);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v40, &demangling cache variable for type metadata for TextureResource.Semantic?);
    v46 = v45(v44, 1, v4);
    v47 = v79;
    if (v46 == 1)
    {
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v9, &demangling cache variable for type metadata for TextureResource.Semantic?);
      v49 = v77;
      v48 = v78;
      (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v84, v47);
LABEL_19:
      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v47);
      goto LABEL_20;
    }
    goto LABEL_11;
  }
  v50 = v73;
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v9, v73, &demangling cache variable for type metadata for TextureResource.Semantic?);
  if (v45(v44, 1, v4) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v20, &demangling cache variable for type metadata for TextureResource.Semantic?);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v40, &demangling cache variable for type metadata for TextureResource.Semantic?);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v50, v4);
    v47 = v79;
LABEL_11:
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v9, &demangling cache variable for type metadata for (TextureResource.Semantic?, TextureResource.Semantic?));
    v49 = v77;
    v48 = v78;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v84, v47);
    v51 = v75;
    goto LABEL_12;
  }
  v58 = v50;
  v59 = v83;
  v60 = v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v72, v44, v4);
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type TextureResource.Semantic and conformance TextureResource.Semantic, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD3938], MEMORY[0x1E0CD3948]);
  v61 = dispatch thunk of static Equatable.== infix(_:_:)();
  v62 = *(void (**)(char *, uint64_t))(v59 + 8);
  v62(v60, v4);
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v20, &demangling cache variable for type metadata for TextureResource.Semantic?);
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v81, &demangling cache variable for type metadata for TextureResource.Semantic?);
  v62((char *)v58, v4);
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v9, &demangling cache variable for type metadata for TextureResource.Semantic?);
  v49 = v77;
  v48 = v78;
  v47 = v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v84, v79);
  v51 = v75;
  if ((v61 & 1) != 0)
    goto LABEL_19;
LABEL_12:
  TextureResource.CreateOptions.semantic.getter();
  v52 = (uint64_t)v76;
  v42(v76, *MEMORY[0x1E0CD3930], v4);
  v53 = v52;
  v43((char *)v52, 0, 1, v4);
  v54 = v74;
  v55 = v74 + *(int *)(v82 + 48);
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v51, v74, &demangling cache variable for type metadata for TextureResource.Semantic?);
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v53, v55, &demangling cache variable for type metadata for TextureResource.Semantic?);
  if (v45(v54, 1, v4) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v53, &demangling cache variable for type metadata for TextureResource.Semantic?);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v51, &demangling cache variable for type metadata for TextureResource.Semantic?);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v47);
    if (v45(v55, 1, v4) == 1)
    {
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v54, &demangling cache variable for type metadata for TextureResource.Semantic?);
LABEL_20:
      v57 = v80;
      goto LABEL_23;
    }
  }
  else
  {
    v56 = v71;
    outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v54, v71, &demangling cache variable for type metadata for TextureResource.Semantic?);
    if (v45(v55, 1, v4) != 1)
    {
      v63 = v83;
      v64 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v72, v55, v4);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type TextureResource.Semantic and conformance TextureResource.Semantic, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD3938], MEMORY[0x1E0CD3948]);
      v65 = dispatch thunk of static Equatable.== infix(_:_:)();
      v66 = *(void (**)(char *, uint64_t))(v63 + 8);
      v66(v64, v4);
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v76, &demangling cache variable for type metadata for TextureResource.Semantic?);
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v75, &demangling cache variable for type metadata for TextureResource.Semantic?);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v47);
      v66((char *)v56, v4);
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v54, &demangling cache variable for type metadata for TextureResource.Semantic?);
      v57 = v80;
      if ((v65 & 1) != 0)
        goto LABEL_23;
      goto LABEL_22;
    }
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v76, &demangling cache variable for type metadata for TextureResource.Semantic?);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v51, &demangling cache variable for type metadata for TextureResource.Semantic?);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v47);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v56, v4);
  }
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v54, &demangling cache variable for type metadata for (TextureResource.Semantic?, TextureResource.Semantic?));
  v57 = v80;
LABEL_22:
  v67 = (void *)*MEMORY[0x1E0CC6C08];
  v88 = MEMORY[0x1E0DEAFA0];
  LOBYTE(v87) = 0;
  outlined init with take of Any(&v87, v86);
  v68 = v67;
  v69 = swift_isUniquelyReferenced_nonNull_native();
  v85 = v57;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v86, v68, v69);
  v57 = v85;

  swift_bridgeObjectRelease();
LABEL_23:
  if (!*(_QWORD *)(v57 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v57;
}

id TextureLoader.loadTexture(name:bundle:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v10;
  double v11;
  double v12;
  void *v13;
  NSDictionary v14;
  id v15;
  id v16;
  id v17;
  id v19[2];

  v19[1] = *(id *)MEMORY[0x1E0C80C00];
  v10 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
  objc_msgSend(v10, sel_scale);
  v12 = v11;

  v13 = (void *)MEMORY[0x1DF090310](a1, a2);
  if (createMTLTextureLoaderOptions(from:)(a4))
  {
    type metadata accessor for MTKTextureLoaderOption(0);
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption, (uint64_t (*)(uint64_t))type metadata accessor for MTKTextureLoaderOption, (uint64_t)&protocol conformance descriptor for MTKTextureLoaderOption);
    v14.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v14.super.isa = 0;
  }
  v19[0] = 0;
  v15 = objc_msgSend(a5, sel_newTextureWithName_scaleFactor_bundle_options_error_, v13, a3, v14.super.isa, v19, v12);

  if (v15)
  {
    v16 = v19[0];
  }
  else
  {
    v17 = v19[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v15;
}

void TextureLoader.loadTexture(name:bundle:options:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v14;
  double v15;
  double v16;
  void *v17;
  NSDictionary v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[6];

  v14 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
  objc_msgSend(v14, sel_scale);
  v16 = v15;

  v17 = (void *)MEMORY[0x1DF090310](a1, a2);
  if (createMTLTextureLoaderOptions(from:)(a4))
  {
    type metadata accessor for MTKTextureLoaderOption(0);
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption, (uint64_t (*)(uint64_t))type metadata accessor for MTKTextureLoaderOption, (uint64_t)&protocol conformance descriptor for MTKTextureLoaderOption);
    v18.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v18.super.isa = 0;
  }
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a5;
  *(_QWORD *)(v19 + 24) = a6;
  v21[4] = partial apply for closure #1 in TextureLoader.loadTexture(name:bundle:options:completionHandler:);
  v21[5] = v19;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 1107296256;
  v21[2] = thunk for @escaping @callee_guaranteed (@guaranteed MTLTexture?, @guaranteed Error?) -> ();
  v21[3] = &block_descriptor_9;
  v20 = _Block_copy(v21);
  swift_retain();
  swift_release();
  objc_msgSend(a7, sel_newTextureWithName_scaleFactor_bundle_options_completionHandler_, v17, a3, v18.super.isa, v20, v16);
  _Block_release(v20);

}

void closure #1 in TextureLoader.loadTexture(name:bundle:options:completionHandler:)(uint64_t a1, id a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  id v6;

  if (a1)
  {
    v5 = swift_unknownObjectRetain();
    a3(v5, 0);
    swift_unknownObjectRelease();
  }
  if (a2)
  {
    v6 = a2;
    a3((uint64_t)a2, 1);

  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed MTLTexture?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

id protocol witness for TextureLoaderProtocol.loadTexture(name:bundle:options:) in conformance TextureLoader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v4;

  return TextureLoader.loadTexture(name:bundle:options:)(a1, a2, a3, a4, *v4);
}

void protocol witness for TextureLoaderProtocol.loadTexture(name:bundle:options:completionHandler:) in conformance TextureLoader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void **v6;

  TextureLoader.loadTexture(name:bundle:options:completionHandler:)(a1, a2, a3, a4, a5, a6, *v6);
}

uint64_t one-time initialization function for textureLoader()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t result;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.renderService.getter();
  swift_release();
  v0 = v5;
  v1 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6C40]), sel_initWithDevice_, (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v1));
  swift_unknownObjectRelease();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  textureLoader = (uint64_t)v2;
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(double a1, double a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  RKARSystem.HitTestScreenPoint.hash(into:)(a1, a2);
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v4, a1, a2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v2;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  double *v7;
  double v8;
  BOOL v9;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v7 = (double *)(*(_QWORD *)(v3 + 48) + 16 * result);
      v8 = v7[1];
      v9 = *v7 == a2;
      if (v8 == a3 && v9)
        break;
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x1DF090694](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  char v15;
  _QWORD v17[2];

  v3 = v2;
  v17[1] = a1;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v3 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v6 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    do
    {
      v14(v9, *(_QWORD *)(v3 + 48) + v13 * v11, v5, v7);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v15 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
            break;
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt64 v26;
  Swift::UInt64 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 v40;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  v39 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RKARSystem.HitTestScreenPoint, CollisionCastHit?>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = result;
  if (*(_QWORD *)(v8 + 16))
  {
    v36 = v2;
    v11 = 0;
    v12 = *(_QWORD *)(v8 + 64);
    v38 = (_QWORD *)(v8 + 64);
    v13 = 1 << *(_BYTE *)(v8 + 32);
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v15 = v14 & v12;
    v37 = (unint64_t)(v13 + 63) >> 6;
    v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v19 = v18 | (v11 << 6);
      }
      else
      {
        v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          return result;
        }
        result = (uint64_t)v38;
        if (v20 >= v37)
          goto LABEL_40;
        v21 = v38[v20];
        ++v11;
        if (!v21)
        {
          v11 = v20 + 1;
          if (v20 + 1 >= v37)
            goto LABEL_40;
          v21 = v38[v11];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v37)
            {
LABEL_40:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v36;
                goto LABEL_47;
              }
              v35 = 1 << *(_BYTE *)(v8 + 32);
              if (v35 >= 64)
                bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v38 = -1 << v35;
              v3 = v36;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                v11 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_49;
                if (v11 >= v37)
                  goto LABEL_40;
                v21 = v38[v11];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v11 = v22;
          }
        }
LABEL_21:
        v15 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      v23 = *(_QWORD *)(v8 + 56);
      v40 = *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
      v24 = *(_QWORD *)(v39 + 72);
      v25 = v23 + v24 * v19;
      if ((a2 & 1) != 0)
        outlined init with take of CollisionCastHit?(v25, (uint64_t)v7);
      else
        outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v25, (uint64_t)v7, &demangling cache variable for type metadata for CollisionCastHit?);
      Hasher.init(_seed:)();
      if ((v40 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v26 = v40;
      else
        v26 = 0;
      Hasher._combine(_:)(v26);
      if ((*((_QWORD *)&v40 + 1) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v27 = *((_QWORD *)&v40 + 1);
      else
        v27 = 0;
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v10 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_48;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v16 + 8 * v30);
        }
        while (v34 == -1);
        v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(_QWORD *)(v10 + 48) + 16 * v17) = v40;
      result = outlined init with take of CollisionCastHit?((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24 * v17);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
LABEL_47:
  *v3 = v10;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MTKTextureLoaderOption, Any>);
  v35 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v33 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v33)
        goto LABEL_34;
      v19 = *(_QWORD *)(v34 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v19 = *(_QWORD *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_43;
            if (v13 >= v33)
              goto LABEL_34;
            v19 = *(_QWORD *)(v34 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_21;
          }
        }
        v13 = v20;
      }
    }
LABEL_21:
    v10 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    v21 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
    if ((v35 & 1) != 0)
    {
      outlined init with take of Any(v22, v36);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v22, (uint64_t)v36);
      v23 = v21;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    v24 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v25 = -1 << *(_BYTE *)(v7 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v21;
    result = (uint64_t)outlined init with take of Any(v36, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v18 = (_QWORD *)(v5 + 64);
  if ((v35 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v32 = 1 << *(_BYTE *)(v5 + 32);
  if (v32 >= 64)
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v32;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, Entity>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, ARAnchor>);
  v42 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t i;
  int v44;

  v5 = v3;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v44 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v42 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v40 = v3;
  v41 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  for (i = v11; ; v11 = i)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = v42;
    v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      v20 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_34;
      v26 = v42[v20];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          v5 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            v20 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_43;
            if (v20 >= v41)
              goto LABEL_34;
            v26 = v42[v20];
            ++v27;
            if (v26)
              goto LABEL_21;
          }
        }
        v20 = v27;
      }
    }
LABEL_21:
    v17 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    v28 = *(_QWORD *)(v8 + 72);
    v29 = *(_QWORD *)(v11 + 48) + v28 * v23;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v10, v29, v7);
      v30 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v29, v7);
      v30 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v23);
      swift_retain();
    }
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v31 = -1 << *(_BYTE *)(v13 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v13 + 48) + v28 * v21, v10, v7);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v21) = v30;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v5 = v40;
  v25 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v11 + 32);
  if (v38 >= 64)
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v38;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v5 = v13;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, double a3, double a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a2 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = v19
            + *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?)
                                    - 8)
                        + 72)
            * v12;
        return outlined assign with take of CollisionCastHit?(a1, v20);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a1, v18, a3, a4);
    }
    if (v17 >= v15 && (a2 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a1, v18, a3, a4);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, Entity>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, &demangling cache variable for type metadata for _DictionaryStorage<UUID, ModelEntity>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, __RKFaceMeshEntity>);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceImage>>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceObject>>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _DictionaryStorage<String, [(String, CGFloat)]>);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v7 = v5;
  v12 = *v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()(a5);
LABEL_7:
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a2;
    v25[1] = a3;
    *(_QWORD *)(v20[7] + 8 * v14) = a1;
    v26 = v20[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1, a5);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD **v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v6 = (_QWORD **)v4;
  v27 = a1;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v6;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];
      result = swift_release();
      *(_QWORD *)(v22 + 8 * v15) = v27;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()(a4);
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1, a4);
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v15 = v24;
  v21 = *v6;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, v27, v21);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_OWORD *)(v15[7] + 32 * v9);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
        return outlined init with take of Any(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for MTKTextureLoaderOption(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _QWORD *a3, double a4, double a5)
{
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a3[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (double *)(a3[6] + 16 * a1);
  *v8 = a4;
  v8[1] = a5;
  v9 = a3[7];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  result = outlined init with take of CollisionCastHit?(a2, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1);
  v12 = a3[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a3[2] = v14;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  __int128 v27;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RKARSystem.HitTestScreenPoint, CollisionCastHit?>);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_25:
    *v1 = v8;
    return result;
  }
  v26 = v1;
  result = (void *)(v7 + 64);
  v10 = v6 + 64;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 64), 8 * v11);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v16)
      goto LABEL_23;
    v23 = *(_QWORD *)(v10 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_23;
      v23 = *(_QWORD *)(v10 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_22:
    v15 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_9:
    v19 = 16 * v18;
    v20 = *(_QWORD *)(v3 + 72) * v18;
    v21 = *(_QWORD *)(v6 + 56) + v20;
    v27 = *(_OWORD *)(*(_QWORD *)(v6 + 48) + 16 * v18);
    outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v21, (uint64_t)v5, &demangling cache variable for type metadata for CollisionCastHit?);
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + v19) = v27;
    result = (void *)outlined init with take of CollisionCastHit?((uint64_t)v5, *(_QWORD *)(v8 + 56) + v20);
  }
  v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_23:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_25;
  }
  v23 = *(_QWORD *)(v10 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v16)
      goto LABEL_23;
    v23 = *(_QWORD *)(v10 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, Entity>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, ModelEntity>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Entity>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  _OWORD *v23;
  __int128 v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, BoundingBox>);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v28 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v29 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v25 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v16)
      goto LABEL_26;
    v26 = *(_QWORD *)(v29 + 8 * v25);
    ++v12;
    if (!v26)
    {
      v12 = v25 + 1;
      if (v25 + 1 >= v16)
        goto LABEL_26;
      v26 = *(_QWORD *)(v29 + 8 * v12);
      if (!v26)
        break;
    }
LABEL_25:
    v15 = (v26 - 1) & v26;
    v18 = __clz(__rbit64(v26)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 32 * v18;
    v21 = (__int128 *)(*(_QWORD *)(v6 + 56) + v20);
    v22 = *v21;
    v30 = v21[1];
    v31 = v22;
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    v23 = (_OWORD *)(*(_QWORD *)(v8 + 56) + v20);
    v24 = v30;
    *v23 = v31;
    v23[1] = v24;
  }
  v27 = v25 + 2;
  if (v27 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v28;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v29 + 8 * v27);
  if (v26)
  {
    v12 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v26 = *(_QWORD *)(v29 + 8 * v12);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, __RKFaceMeshEntity>);
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v26 = v1;
  v7 = *v1;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v26 = v9;
    return result;
  }
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v27 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, ARAnchor>);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v24 = v7;
    return result;
  }
  result = (id)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(void **)(*(_QWORD *)(v5 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MTKTextureLoaderOption, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    outlined init with take of Any(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized TextureResource.__allocating_init(named:in:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t Options;
  uint64_t v7;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  Options = type metadata accessor for TextureResource.CreateOptions();
  v5[8] = Options;
  v5[9] = *(_QWORD *)(Options - 8);
  v5[10] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[11] = static MainActor.shared.getter();
  v5[12] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[13] = v7;
  return swift_task_switch();
}

uint64_t specialized TextureResource.__allocating_init(named:in:options:)()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  _QWORD *v6;

  v1 = (void *)v0[5];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[9] + 16))(v0[10], v0[6], v0[8]);
  v2 = one-time initialization token for textureLoader;
  v3 = v1;
  if (v2 != -1)
    swift_once();
  v4 = (void *)textureLoader;
  v0[2] = textureLoader;
  v5 = v4;
  v6 = (_QWORD *)swift_task_alloc();
  v0[14] = v6;
  lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  *v6 = v0;
  v6[1] = specialized TextureResource.__allocating_init(named:in:options:);
  return TextureResource.init<A>(named:in:options:textureLoader:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized TextureResource.__allocating_init(named:in:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 128) = a1;
  return swift_task_switch();
}

ValueMetadata *type metadata accessor for TextureLoader()
{
  return &type metadata for TextureLoader;
}

uint64_t sub_1D95C175C()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in TextureLoader.loadTexture(name:bundle:options:completionHandler:)(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #1 in TextureLoader.loadTexture(name:bundle:options:completionHandler:)(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined assign with take of CollisionCastHit?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of CollisionCastHit?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static ParticleEmitterComponent.Presets.fireworks.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(_QWORD *, _QWORD);
  void (*v31)(_QWORD *, _QWORD);
  void (*v32)(_QWORD *, _QWORD);
  void (*v33)(_QWORD *, _QWORD);
  void (*v34)(_QWORD *, _QWORD);
  void (*v35)(_QWORD *, _QWORD);
  void (*v36)(_QWORD *, _QWORD);
  void (*v37)(_QWORD *, _QWORD);
  void (*v38)(_QWORD *, _QWORD);
  void (*v39)(_QWORD *, _QWORD);
  void (*v40)(_QWORD *, _QWORD);
  void (*v41)(_QWORD *, _QWORD);
  void (*v42)(_QWORD *, _QWORD);
  void (*v43)(_QWORD *, _QWORD);
  void (*v44)(_QWORD *, _QWORD);
  void (*v45)(_QWORD *, _QWORD);
  void (*v46)(_QWORD *, _QWORD);
  void (*v47)(_QWORD *, _QWORD);
  void (*v48)(_QWORD *, _QWORD);
  void (*v49)(_QWORD *, _QWORD);
  void (*v50)(_QWORD *, _QWORD);
  void (*v51)(_QWORD *, _QWORD);
  void (*v52)(_QWORD *, _QWORD);
  void (*v53)(_QWORD *, _QWORD);
  uint64_t v54;
  void (*v55)(_QWORD *, _QWORD);
  void (*v56)(_QWORD *, _QWORD);
  void (*v57)(_QWORD *, _QWORD);
  void (*v58)(_QWORD *, _QWORD);
  void (*v59)(_QWORD *, _QWORD);
  void (*v60)(_QWORD *, _QWORD);
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(_QWORD *, _QWORD);
  void (*v65)(_QWORD *, _QWORD);
  void (*v66)(_QWORD *, _QWORD);
  void (*v67)(_QWORD *, _QWORD);
  void (*v68)(_QWORD *, _QWORD);
  void (*v69)(_QWORD *, _QWORD);
  void (*v70)(_QWORD *, _QWORD);
  void (*v71)(_QWORD *, _QWORD);
  void (*v72)(_QWORD *, _QWORD);
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  void *v79;
  id v80;
  void *v81;
  id v82;
  void (*v83)(_QWORD *, _QWORD);
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  char *v90;
  uint64_t v91;
  void (*v92)(char *, _QWORD, uint64_t, uint64_t);
  char *v93;
  void (*v94)(_QWORD *, _QWORD);
  char *v95;
  void (*v96)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  void (*v130)(char *, uint64_t);
  _QWORD v131[5];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter?);
  MEMORY[0x1E0C80A78](v2);
  v122 = (char *)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence?);
  MEMORY[0x1E0C80A78](v4);
  v121 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode();
  v118 = *(char **)(v114 - 8);
  MEMORY[0x1E0C80A78](v114);
  v113 = (char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder();
  v111 = *(_QWORD *)(v112 - 8);
  MEMORY[0x1E0C80A78](v112);
  v110 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = (void (*)(char *, uint64_t))type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve();
  v109 = *((_QWORD *)v130 - 1);
  MEMORY[0x1E0C80A78](v130);
  v125 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode();
  v106 = *(_QWORD *)(v128 - 8);
  MEMORY[0x1E0C80A78](v128);
  v123 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode();
  v108 = *(_QWORD *)(v127 - 8);
  MEMORY[0x1E0C80A78](v127);
  v124 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for ParticleEmitterComponent.SpawnOccasion();
  v105 = *(_QWORD *)(v107 - 8);
  MEMORY[0x1E0C80A78](v107);
  v104 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for ParticleEmitterComponent.SimulationSpace();
  v102 = *(_QWORD *)(v103 - 8);
  MEMORY[0x1E0C80A78](v103);
  v101 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for ParticleEmitterComponent.EmitterShape();
  v99 = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v100);
  v14 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v126 = type metadata accessor for ParticleEmitterComponent.BirthLocation();
  v15 = *(_QWORD *)(v126 - 8);
  MEMORY[0x1E0C80A78](v126);
  v17 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ParticleEmitterComponent.BirthDirection();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence();
  v119 = *(_QWORD *)(v120 - 8);
  MEMORY[0x1E0C80A78](v120);
  v129 = (char *)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v98 - v24;
  v117 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter();
  v116 = *(_QWORD *)(v117 - 8);
  MEMORY[0x1E0C80A78](v117);
  v115 = (char *)&v98 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v98 - v28;
  ParticleEmitterComponent.init()();
  ParticleEmitterComponent.ParticleEmitter.init()();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.init()();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E0CD51C8], v18);
  ParticleEmitterComponent.birthDirection.setter();
  (*(void (**)(char *, _QWORD, _QWORD))(v15 + 104))(v17, *MEMORY[0x1E0CD5180], v126);
  ParticleEmitterComponent.birthLocation.setter();
  v126 = xmmword_1D95E2340;
  ParticleEmitterComponent.emissionDirection.setter();
  ParticleEmitterComponent.emissionDuration.setter();
  ParticleEmitterComponent.emissionDurationVariation.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v99 + 104))(v14, *MEMORY[0x1E0CD4EA0], v100);
  ParticleEmitterComponent.emitterShape.setter();
  ParticleEmitterComponent.emitterShapeSize.setter();
  ParticleEmitterComponent.idleDuration.setter();
  ParticleEmitterComponent.idleDurationVariation.setter();
  ParticleEmitterComponent.shouldLoop.setter();
  ParticleEmitterComponent.particlesInheritTransform.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v102 + 104))(v101, *MEMORY[0x1E0CD51F8], v103);
  ParticleEmitterComponent.fieldSimulationSpace.setter();
  ParticleEmitterComponent.spawnInheritsParentColor.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v105 + 104))(v104, *MEMORY[0x1E0CD5198], v107);
  ParticleEmitterComponent.spawnOccasion.setter();
  ParticleEmitterComponent.spawnSpreadFactor.setter();
  ParticleEmitterComponent.spawnSpreadFactorVariation.setter();
  ParticleEmitterComponent.spawnVelocityFactor.setter();
  ParticleEmitterComponent.speed.setter();
  ParticleEmitterComponent.speedVariation.setter();
  ParticleEmitterComponent.warmupDuration.setter();
  ParticleEmitterComponent.resetSimulation()();
  v30 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  v30(v131, 0);
  v31 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  v31(v131, 0);
  v32 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  v32(v131, 0);
  v33 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  v33(v131, 0);
  v34 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  v34(v131, 0);
  v35 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  v35(v131, 0);
  v36 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  v36(v131, 0);
  LODWORD(v107) = *MEMORY[0x1E0CD4F38];
  v108 = *(_QWORD *)(v108 + 104);
  ((void (*)(char *))v108)(v124);
  v37 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  v37(v131, 0);
  v38 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  v38(v131, 0);
  v39 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  v39(v131, 0);
  LODWORD(v105) = *MEMORY[0x1E0CD50D0];
  v106 = *(_QWORD *)(v106 + 104);
  ((void (*)(char *))v106)(v123);
  v40 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  v40(v131, 0);
  v41 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  v41(v131, 0);
  v42 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  v42(v131, 0);
  v43 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  v43(v131, 0);
  v44 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  v44(v131, 0);
  v45 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  v45(v131, 0);
  v46 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  v46(v131, 0);
  v47 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  v47(v131, 0);
  v48 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  v48(v131, 0);
  v49 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  v49(v131, 0);
  v50 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  v50(v131, 0);
  v51 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  v51(v131, 0);
  v52 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  v52(v131, 0);
  v53 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  v53(v131, 0);
  v54 = *MEMORY[0x1E0CD4F10];
  v109 = *(_QWORD *)(v109 + 104);
  ((void (*)(char *, uint64_t, void (*)(char *, uint64_t)))v109)(v125, v54, v130);
  v55 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  v55(v131, 0);
  v56 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  v56(v131, 0);
  v57 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  v57(v131, 0);
  v58 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  v58(v131, 0);
  v59 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  v59(v131, 0);
  v60 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v60(v131, 0);
  v61 = *MEMORY[0x1E0CD50F0];
  v111 = *(_QWORD *)(v111 + 104);
  v62 = v110;
  v63 = v112;
  ((void (*)(char *, uint64_t, uint64_t))v111)(v110, v61, v112);
  v64 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  v64(v131, 0);
  v65 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  v65(v131, 0);
  v66 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  v66(v131, 0);
  v67 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  v67(v131, 0);
  CGColorCreateGenericRGB(226.0, 0.0, 27.0, 1.0);
  v68 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  v68(v131, 0);
  CGColorCreateGenericRGB(0.0, 104.0, 184.0, 1.0);
  v69 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  v69(v131, 0);
  v70 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  v70(v131, 0);
  v71 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  v71(v131, 0);
  v72 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  v72(v131, 0);
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.setter();
  v73 = *MEMORY[0x1E0CD4F70];
  v74 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v118 + 13);
  v75 = v113;
  v76 = v114;
  v74(v113, v73, v114);
  v118 = v25;
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.setter();
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  ((void (*)(char *, _QWORD, uint64_t))v108)(v124, v107, v127);
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  ((void (*)(char *, _QWORD, uint64_t))v106)(v123, v105, v128);
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  ((void (*)(char *, _QWORD, void (*)(char *, uint64_t)))v109)(v125, *MEMORY[0x1E0CD4F00], v130);
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  ((void (*)(char *, _QWORD, uint64_t))v111)(v62, *MEMORY[0x1E0CD50E0], v63);
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  CGColorCreateGenericRGB(244.0, 129.0, 29.0, 1.0);
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  CGColorCreateGenericRGB(97.0, 184.0, 26.0, 1.0);
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  v77 = v29;
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  v78 = v129;
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.setter();
  v74(v75, v73, v76);
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.setter();
  type metadata accessor for TextureResource();
  v79 = (void *)MEMORY[0x1DF090310](0xD000000000000010, 0x80000001D95DCA10);
  v80 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v79);

  if (one-time initialization token for textureLoader != -1)
    swift_once();
  v81 = (void *)textureLoader;
  v131[3] = &type metadata for TextureLoader;
  v131[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v131[0] = v81;
  v82 = v81;
  static TextureResource.load(named:in:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v131);

  v83 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  v83(v131, 0);
  v84 = v115;
  ParticleEmitterComponent.mainEmitter.getter();
  ParticleEmitterComponent.ParticleEmitter.image.getter();
  v128 = a1;
  v85 = v116;
  v130 = *(void (**)(char *, uint64_t))(v116 + 8);
  v86 = v117;
  v130(v84, v117);
  v87 = v77;
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  v88 = v119;
  v89 = *(void (**)(char *, char *, uint64_t))(v119 + 16);
  v90 = v121;
  v91 = v120;
  v89(v121, v78, v120);
  v92 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56);
  v92(v90, 0, 1, v91);
  ParticleEmitterComponent.ParticleEmitter.imageSequence.setter();
  v93 = v118;
  v89(v90, v118, v91);
  v92(v90, 0, 1, v91);
  v94 = (void (*)(_QWORD *, _QWORD))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.imageSequence.setter();
  v94(v131, 0);
  v95 = v122;
  (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v122, v87, v86);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v95, 0, 1, v86);
  ParticleEmitterComponent.spawnedEmitter.setter();
  v96 = *(void (**)(char *, uint64_t))(v88 + 8);
  v96(v129, v91);
  v96(v93, v91);
  return ((uint64_t (*)(char *, uint64_t))v130)(v87, v86);
}

uint64_t MultipeerConnectivityService.coreMultipeerConnectivityService.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

id MultipeerConnectivityService.session.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 56);
}

uint64_t MultipeerConnectivityService.__allocating_init(session:)(void *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  MultipeerConnectivityService.init(session:)(a1);
  return v2;
}

uint64_t MultipeerConnectivityService.init(session:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  id v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE *v8;

  v2 = v1;
  v2[2] = 0;
  v2[6] = 0x61A800000002;
  if (objc_msgSend(a1, sel_encryptionPreference) != (id)1)
  {
    lazy protocol witness table accessor for type MultipeerConnectivityService.SynchronizationError and conformance MultipeerConnectivityService.SynchronizationError();
    swift_allocError();
    *v8 = 0;
    swift_willThrow();

    type metadata accessor for MultipeerConnectivityService();
    swift_deallocPartialClassInstance();
    return (uint64_t)v2;
  }
  v2[7] = a1;
  type metadata accessor for __ServiceLocator();
  v4 = a1;
  static __ServiceLocator.shared.getter();
  v5 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  v2[4] = v5;
  result = MEMORY[0x1DF0912A0](v5);
  if (result)
  {
    v2[5] = result;
    v7 = RENetworkSystemEnableMultipeerConnectivity();

    v2[3] = v7;
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall MultipeerConnectivityService.setHandshake(count:timeoutMs:)(Swift::UInt32 count, Swift::UInt32 timeoutMs)
{
  uint64_t v2;

  *(_DWORD *)(v2 + 48) = count;
  *(_DWORD *)(v2 + 52) = timeoutMs;
}

uint64_t MultipeerConnectivityService.entity(for:)()
{
  uint64_t result;

  result = RENetworkSystemFindEntityWithGuid();
  if (result)
  {
    type metadata accessor for Entity();
    return static Entity.fromCore(_:ignoringEntityInfo:)();
  }
  return result;
}

double MultipeerConnectivityService.owner(of:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  unint64_t v5;
  double result;
  uint64_t v7;

  Entity.coreEntity.getter();
  RENetworkComponentGetComponentType();
  if (REEntityGetComponentByClass()
    && (v3 = RENetworkComponentOwnerPeerID(),
        v4 = (id)MEMORY[0x1DF090E44](*(_QWORD *)(v1 + 24), v3),
        _bridgeAnyObjectToAny(_:)(),
        swift_unknownObjectRelease(),
        v5 = type metadata accessor for MCPeerID(),
        swift_dynamicCast()))
  {
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = &protocol witness table for MCPeerID;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t MultipeerConnectivityService.giveOwnership(of:toPeer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _BYTE v9[40];

  v3 = v2;
  Entity.coreEntity.getter();
  RENetworkComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (result)
  {
    v6 = result;
    result = RENetworkComponentIsAuthoritative();
    if ((_DWORD)result)
    {
      outlined init with copy of SynchronizationPeerID(a2, (uint64_t)v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SynchronizationPeerID);
      type metadata accessor for MCPeerID();
      result = swift_dynamicCast();
      if ((_DWORD)result)
      {
        v7 = MEMORY[0x1DF090E38](*(_QWORD *)(v3 + 24));
        if (v7)
        {
          MEMORY[0x1DF090F10](v6, v7);

          return 1;
        }
        else
        {

          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t MultipeerConnectivityService.__fromCore(peerID:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v1 + 24);
  __PeerIDRef.__as<A>(_:)();
  v4 = (id)MEMORY[0x1DF090E44](v3);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  v5 = type metadata accessor for MCPeerID();
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    v7 = v8;
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = &protocol witness table for MCPeerID;
  }
  else
  {
    v7 = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
  }
  *(_QWORD *)a1 = v7;
  return result;
}

uint64_t MultipeerConnectivityService.__toCore(peerID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  _QWORD v5[3];
  uint64_t v6;

  outlined init with copy of SynchronizationPeerID(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SynchronizationPeerID);
  type metadata accessor for MCPeerID();
  if (swift_dynamicCast())
  {
    v2 = MEMORY[0x1DF090E38](*(_QWORD *)(v1 + 24));
    v6 = MEMORY[0x1E0DEE190];
    v5[0] = v2;
    static __PeerIDRef.__fromCore(_:)();

  }
  else
  {
    v6 = MEMORY[0x1E0DEE190];
    v5[0] = 0;
    static __PeerIDRef.__fromCore(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

Swift::Void __swiftcall MultipeerConnectivityService.startSync()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  MEMORY[0x1DF090E50](v1, *(unsigned int *)(v0 + 48), *(unsigned int *)(v0 + 52));
  MEMORY[0x1DF090E5C](v1, *(_QWORD *)(v0 + 56));
  v2 = *(_QWORD *)(v0 + 32);
  MEMORY[0x1DF090E2C](v1);
  REAssetRegisterAssetSyncNetworkSession();
  if (MEMORY[0x1DF0912DC](v2))
  {
    MEMORY[0x1DF090E2C](v1);
    RESharedClockServiceSetSession();
  }
}

Swift::Void __swiftcall MultipeerConnectivityService.stopSync()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  REAssetUnregisterAssetSyncNetworkSession();
  MEMORY[0x1DF090E68](*(_QWORD *)(v0 + 24));
  if (MEMORY[0x1DF0912DC](v1))
    RESharedClockServiceSetSession();
}

uint64_t MultipeerConnectivityService.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MultipeerConnectivityService.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type MultipeerConnectivityService.SynchronizationError and conformance MultipeerConnectivityService.SynchronizationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultipeerConnectivityService.SynchronizationError and conformance MultipeerConnectivityService.SynchronizationError;
  if (!lazy protocol witness table cache variable for type MultipeerConnectivityService.SynchronizationError and conformance MultipeerConnectivityService.SynchronizationError)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for MultipeerConnectivityService.SynchronizationError, &type metadata for MultipeerConnectivityService.SynchronizationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultipeerConnectivityService.SynchronizationError and conformance MultipeerConnectivityService.SynchronizationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultipeerConnectivityService.SynchronizationError and conformance MultipeerConnectivityService.SynchronizationError;
  if (!lazy protocol witness table cache variable for type MultipeerConnectivityService.SynchronizationError and conformance MultipeerConnectivityService.SynchronizationError)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for MultipeerConnectivityService.SynchronizationError, &type metadata for MultipeerConnectivityService.SynchronizationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultipeerConnectivityService.SynchronizationError and conformance MultipeerConnectivityService.SynchronizationError);
  }
  return result;
}

uint64_t type metadata accessor for MultipeerConnectivityService()
{
  return objc_opt_self();
}

unint64_t type metadata accessor for MCPeerID()
{
  unint64_t result;

  result = lazy cache variable for type metadata for MCPeerID;
  if (!lazy cache variable for type metadata for MCPeerID)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MCPeerID);
  }
  return result;
}

uint64_t method lookup function for MultipeerConnectivityService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MultipeerConnectivityService.__allocating_init(session:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of MultipeerConnectivityService.setHandshake(count:timeoutMs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of MultipeerConnectivityService.entity(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of MultipeerConnectivityService.owner(of:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of MultipeerConnectivityService.giveOwnership(of:toPeer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of MultipeerConnectivityService.__fromCore(peerID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of MultipeerConnectivityService.__toCore(peerID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of MultipeerConnectivityService.startSync()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of MultipeerConnectivityService.stopSync()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t storeEnumTagSinglePayload for MultipeerConnectivityService.SynchronizationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D95C32CC + 4 * byte_1D95E4825[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D95C3300 + 4 * byte_1D95E4820[v4]))();
}

uint64_t sub_1D95C3300(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D95C3308(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D95C3310);
  return result;
}

uint64_t sub_1D95C331C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D95C3324);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D95C3328(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D95C3330(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MultipeerConnectivityService.SynchronizationError()
{
  return &type metadata for MultipeerConnectivityService.SynchronizationError;
}

uint64_t type metadata accessor for __RKFaceMeshEntity(uint64_t a1)
{
  return type metadata accessor for AccessibilityComponent.RotorType(a1, (uint64_t *)&type metadata singleton initialization cache for __RKFaceMeshEntity);
}

uint64_t type metadata completion function for __RKFaceMeshEntity()
{
  return swift_initClassMetadata2();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, double a2, double a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit??);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1, 1, v11) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, &demangling cache variable for type metadata for CollisionCastHit??);
    v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) != 0)
    {
      v17 = v15;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v19 = *v4;
      v24 = *v4;
      *v4 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        v19 = v24;
      }
      outlined init with take of vImage_CGImageFormat?(*(_QWORD *)(v19 + 56) + *(_QWORD *)(v12 + 72) * v17, (uint64_t)v10, &demangling cache variable for type metadata for CollisionCastHit?);
      specialized _NativeDictionary._delete(at:)(v17, v19);
      *v4 = v19;
      swift_bridgeObjectRelease();
      v20 = 0;
    }
    else
    {
      v20 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v20, 1, v11);
    return outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v10, &demangling cache variable for type metadata for CollisionCastHit??);
  }
  else
  {
    outlined init with take of vImage_CGImageFormat?(a1, (uint64_t)v14, &demangling cache variable for type metadata for CollisionCastHit?);
    v21 = swift_isUniquelyReferenced_nonNull_native();
    v24 = *v4;
    *v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, v21, a2, a3);
    *v4 = v24;
    return swift_bridgeObjectRelease();
  }
}

uint64_t RKARSystem.debugAnchorPlaneMaterial.getter@<X0>(uint64_t a1@<X8>)
{
  return RKARSystem.debugAnchorPlaneMaterial.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___debugAnchorPlaneMaterial, a1, 1.0, 0.0);
}

uint64_t RKARSystem.debugProbeMaterial.getter@<X0>(uint64_t a1@<X8>)
{
  return RKARSystem.debugAnchorPlaneMaterial.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___debugProbeMaterial, a1, 0.0, 1.0);
}

uint64_t RKARSystem.debugAnchorPlaneMaterial.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, Swift::Float a3@<S0>, Swift::Float a4@<S1>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  id v19;
  _BYTE v21[24];

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnlitMaterial?);
  MEMORY[0x1E0C80A78](v9);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12);
  v14 = &v21[-v13];
  v15 = v4 + *a1;
  swift_beginAccess();
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v15, (uint64_t)v14, &demangling cache variable for type metadata for UnlitMaterial?);
  v16 = type metadata accessor for UnlitMaterial();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v17 + 32))(a2, v14, v16);
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v14, &demangling cache variable for type metadata for UnlitMaterial?);
  type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, a3, a4, 0.6).super.isa;
  v19 = -[objc_class CGColor](isa, sel_CGColor);
  UnlitMaterial.init(color:)();

  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v17 + 16))(v11, a2, v16);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v11, 0, 1, v16);
  swift_beginAccess();
  outlined assign with take of Material?((uint64_t)v11, v15, &demangling cache variable for type metadata for UnlitMaterial?);
  return swift_endAccess();
}

uint64_t RKARSystem.cameraRenderGraph.getter()
{
  return RKARSystem.cameraRenderGraph.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___cameraRenderGraph);
}

uint64_t RKARSystem.cachedGestureHitTest(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t Type;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45[3];
  _OWORD v46[2];
  char v47;

  v4 = v3;
  v44 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit??);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CollisionGroup();
  v40 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Type = type metadata accessor for CollisionCastQueryType();
  v14 = *(_QWORD *)(Type - 8);
  MEMORY[0x1E0C80A78](Type);
  v16 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  v18 = *(_QWORD *)(v17 - 8);
  v42 = v17;
  v43 = v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)v39 - v22;
  v24 = (uint64_t *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cachedGestureHitTestResults);
  swift_beginAccess();
  v25 = *v24;
  if (*(_QWORD *)(*v24 + 16))
  {
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v27 & 1) != 0)
    {
      outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(*(_QWORD *)(v25 + 56) + *(_QWORD *)(v43 + 72) * v26, (uint64_t)v23, &demangling cache variable for type metadata for CollisionCastHit?);
      outlined init with take of vImage_CGImageFormat?((uint64_t)v23, v44, &demangling cache variable for type metadata for CollisionCastHit?);
      return swift_endAccess();
    }
  }
  swift_endAccess();
  v29 = MEMORY[0x1DF091D08](v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (!v29)
  {
    v32 = type metadata accessor for CollisionCastHit();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v21, 1, 1, v32);
LABEL_14:
    v37 = v43;
    v36 = v44;
    v38 = v42;
    outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v21, (uint64_t)v9, &demangling cache variable for type metadata for CollisionCastHit?);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v9, 0, 1, v38);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v9, a2, a3);
    swift_endAccess();
    return outlined init with take of vImage_CGImageFormat?((uint64_t)v21, v36, &demangling cache variable for type metadata for CollisionCastHit?);
  }
  v30 = (char *)v29;
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, *MEMORY[0x1E0CD3F10], Type);
  static CollisionGroup.all.getter();
  ARView.ray(through:)(v45);
  result = outlined init with take of vImage_CGImageFormat?((uint64_t)v45, (uint64_t)v46, &demangling cache variable for type metadata for (origin: SIMD3<Float>, direction: SIMD3<Float>)?);
  if ((v47 & 1) != 0)
  {

    v31 = MEMORY[0x1E0DEE9D8];
LABEL_10:
    (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v41);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, Type);
    v33 = *(_QWORD *)(v31 + 16);
    v34 = type metadata accessor for CollisionCastHit();
    v35 = *(_QWORD *)(v34 - 8);
    if (v33)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v35 + 16))(v21, v31 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80)), v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v21, 0, 1, v34);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v21, 1, 1, v34);
    }
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (*(_QWORD *)&v30[OBJC_IVAR____TtC10RealityKit6ARView__scene])
  {
    v39[1] = v46[1];
    v39[0] = v46[0];
    swift_retain();
    v31 = Scene.raycast(origin:direction:length:query:mask:relativeTo:)();

    swift_release();
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void RKARSystem.update(engine:viewportSize:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  CFTimeInterval v9;
  id v10;
  void *v11;
  int v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v4 = v3;
  v8 = type metadata accessor for OSSignpostID();
  MEMORY[0x1E0C80A78](v8);
  v9 = CACurrentMediaTime();
  v10 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session), sel_configuration);
  if (v10)
  {
    v11 = v10;
    objc_opt_self();
    v10 = (id)swift_dynamicCastObjCClass();
    if (!v10)
    {

      v10 = 0;
    }
  }
  v12 = v10 != 0;

  v13 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_isFaceSession);
  *(_BYTE *)(v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_isFaceSession) = v12;
  if (v12 != v13)
  {
    v14 = MEMORY[0x1DF091D08](v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (v14)
    {
      v15 = (void *)v14;
      ARView.updateEnvironment()();

    }
  }
  if (*(_BYTE *)(v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode) == 1 || a2 <= 0.0 || a3 <= 0.0)
  {
    static __REOSLog.UpdateLoop.getter();
    static __RESignpostID.UpdateLoop.getter();
    type metadata accessor for __REOSSignpostScope();
    swift_allocObject();
    __REOSSignpostScope.init(osLog:signpostID:name:)();
    swift_release();
    RKARSystem.updateLighting()();
    RKARSystem.updateCollaborationState()();
    RKARSystem.updateSceneUnderstandingOptions()();
  }
  else
  {
    specialized RKARSystem.updateAR(engine:viewportSize:timeDelta:)(a1, a2, a3);
  }
  v16 = OBJC_IVAR____TtC10RealityKit10RKARSystem_lastUpdateTime;
  specialized RKARSystem.updateCommon(engine:viewportSize:timeDelta:)();
  *(CFTimeInterval *)(v4 + v16) = v9;
}

uint64_t RKARSystem.postProcessingCombinedRenderGraph.getter()
{
  return RKARSystem.cameraRenderGraph.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___postProcessingCombinedRenderGraph);
}

uint64_t RKARSystem.cameraRenderGraph.getter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  result = *(_QWORD *)(v1 + *a1);
  if (!result)
  {
    v4 = v1;
    result = swift_weakLoadStrong();
    if (result)
    {
      v5 = dispatch thunk of __Engine.services.getter();
      result = swift_release();
      if (v5)
      {
        dispatch thunk of __ServiceLocator.assetService.getter();
        swift_release();
        v6 = v9;
        v7 = v10;
        __swift_project_boxed_opaque_existential_1(v8, v9);
        (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
        result = REAssetManagerCreateAssetHandle();
        if (result)
        {
          *(_QWORD *)(v4 + v2) = result;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t RKARSystem.postProcessingCombinedHDRRenderGraph.getter()
{
  return RKARSystem.cameraRenderGraph.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___postProcessingCombinedHDRRenderGraph);
}

uint64_t __RKFaceMeshEntity.__allocating_init()()
{
  swift_allocObject();
  return Entity.init()();
}

uint64_t __RKFaceMeshEntity.__deallocating_deinit()
{
  Entity.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for __RKFaceMeshEntity()
{
  return type metadata accessor for __RKFaceMeshEntity(0);
}

void @objc RKARSystem.SessionDelegate.session(_:didAdd:)(char *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  id v10;
  char *v11;
  id v12;

  type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = MEMORY[0x1DF091D08](&a1[OBJC_IVAR____TtCC10RealityKit10RKARSystemP33_7C42569567E429B6AB2725E2C535D52915SessionDelegate_system]);
  if (v9)
  {
    v12 = (id)v9;
    v10 = a3;
    v11 = a1;
    a5(v8);

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

id RKARSystem.SessionDelegate.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RKARSystem.SessionDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void RKARSystem.session.didset(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;

  v2 = v1;
  v4 = type metadata accessor for __AnyARKitObject();
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)&v6 = MEMORY[0x1E0C80A78](v4).n128_u64[0];
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = OBJC_IVAR____TtC10RealityKit10RKARSystem_session;
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session), sel_forceEnvironmentTexturingToManualMode_, 1, v6);
  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_delegate);
  objc_msgSend(a1, sel__removeObserver_, v10);
  objc_msgSend(*(id *)(v2 + v9), sel__addObserver_, v10);
  v11 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  v12 = MEMORY[0x1DF091D08](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (v12)
  {
    v13 = (void *)v12;
    v14 = (uint64_t *)(v12 + OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession);
    swift_beginAccess();
    v15 = *v14;
    swift_retain();

    if (v15)
    {
      v24 = *(void **)(v2 + v9);
      v16 = v24;
      type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for ARSession);
      v17 = v16;
      __AnyARKitObject.init<A>(_:)();
      RealityFusionSession.configure(with:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  v18 = MEMORY[0x1DF091D08](v11);
  if (v18)
  {
    v19 = (void *)v18;
    if (!*(_QWORD *)(v18 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
    {
      __break(1u);
      return;
    }
    swift_retain();

    v20 = *(id *)(v2 + v9);
    dispatch thunk of Scene.session.setter();
    swift_release();
  }
  v21 = MEMORY[0x1DF091D08](v11);
  if (v21)
  {
    v22 = (void *)v21;
    v23 = v21 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
    swift_beginAccess();
    *(_BYTE *)(v23 + 2) = 0;

  }
}

void RKARSystem.cameraMode.didset(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char *v6;
  id v7;
  char *v8;

  v2 = v1;
  v3 = OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode;
  v4 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode);
  if (*a1 != v4)
  {
    v8 = (char *)MEMORY[0x1DF091D08](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (v8)
    {
      v5 = swift_retain();
      specialized ARView.__renderGraphEmitter.setter(v5);
      swift_release();
      ARView.updateEnvironment()();
      if (*(_BYTE *)(v2 + v3) == 1)
      {
        v6 = &v8[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
        swift_beginAccess();
        if (v6[2] == 1)
        {
          v7 = objc_msgSend(v8, sel_session);
          objc_msgSend(v7, sel_pause);

        }
        else
        {

        }
      }
      else
      {
        ARView.updateARSession(restartIfPaused:)(1);

      }
    }
  }
}

uint64_t RKARSystem.orientation.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v1 = v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  v2 = (char *)MEMORY[0x1DF091D08](v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (v2)
  {
    if (v2[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] == 1)
    {
      v3 = *(id *)&v2[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation];

      return (uint64_t)v3;
    }

  }
  v4 = (void *)MEMORY[0x1DF091D08](v1);
  if (!v4)
    return 3;
  v5 = v4;
  v6 = objc_msgSend(v4, sel_window);

  if (!v6)
    return 3;
  v7 = objc_msgSend(v6, sel_windowScene);

  if (!v7)
    return 3;
  v3 = objc_msgSend(v7, sel_interfaceOrientation);

  if (!v3)
    return 3;
  return (uint64_t)v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RKARSystem.HashableARAnchor()
{
  void **v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  uint64_t v9;

  v1 = type metadata accessor for UUID();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  Hasher.init(_seed:)();
  v7 = objc_msgSend(v6, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UUID and conformance UUID, v2, MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RKARSystem.HashableARAnchor()
{
  id *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v9;

  v1 = type metadata accessor for UUID();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v3 = *(_QWORD *)(v1 - 8);
  *(_QWORD *)&v4 = MEMORY[0x1E0C80A78](v1).n128_u64[0];
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(*v0, sel_identifier, v4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UUID and conformance UUID, v2, MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RKARSystem.HashableARAnchor()
{
  void **v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  uint64_t v9;

  v1 = type metadata accessor for UUID();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  Hasher.init(_seed:)();
  v7 = objc_msgSend(v6, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UUID and conformance UUID, v2, MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RKARSystem.HashableARAnchor(id *a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  id v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v9 = MEMORY[0x1E0C80A78](v8).n128_u64[0];
  v11 = (char *)&v17 - v10;
  v12 = *a2;
  v13 = objc_msgSend(*a1, sel_identifier, v9);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v14 = objc_msgSend(v12, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v14) = static UUID.== infix(_:_:)();
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v7, v4);
  v15(v11, v4);
  return v14 & 1;
}

CGColorRef one-time initialization function for defaultAmbientColor()
{
  CGColorRef result;

  result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  static RKARSystem.defaultAmbientColor = (uint64_t)result;
  return result;
}

uint64_t one-time initialization function for __useARQuickLookFeatheringSettings()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1
    && (v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(),
        v4 = v3,
        v1,
        v2 == 0xD000000000000024)
    && v4 == 0x80000001D95DF570)
  {
    result = swift_bridgeObjectRelease();
    v6 = 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
  }
  static RKARSystem.__useARQuickLookFeatheringSettings = v6 & 1;
  return result;
}

void RKARSystem.renderOptions.didset(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = type metadata accessor for __AssetRef();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions;
  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions);
  if (((*a1 & 0x100) == 0) != ((v10 >> 8) & 1))
    goto LABEL_5;
  if (!swift_weakLoadStrong())
  {
    __break(1u);
    goto LABEL_15;
  }
  v11 = dispatch thunk of __Engine.services.getter();
  swift_release();
  if (!v11)
  {
LABEL_15:
    __break(1u);
    return;
  }
  dispatch thunk of __ServiceLocator.renderService.getter();
  swift_release();
  v12 = v16;
  v13 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
  RERenderManagerSetEnableProbeLighting();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  v10 = *(_QWORD *)(v2 + v9);
LABEL_5:
  if (((v8 & 4) == 0) == ((v10 >> 2) & 1))
  {
    RKARSystem.showGroundingShadow(_:)((v10 & 4) == 0);
    v10 = *(_QWORD *)(v2 + v9);
  }
  if (((v8 & 8) == 0) == ((v10 >> 3) & 1))
  {
    swift_retain();
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    RERenderGraphEmitterAssetSetRuntimeSettingBool();
    v10 = *(_QWORD *)(v2 + v9);
  }
  if (((v8 & 0x10) == 0) == ((v10 >> 4) & 1))
  {
    swift_retain();
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    RERenderGraphEmitterAssetSetRuntimeSettingBool();
    v10 = *(_QWORD *)(v2 + v9);
  }
  if (((v8 & 0x20) == 0) == ((v10 >> 5) & 1))
  {
    swift_retain();
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    RERenderGraphEmitterAssetSetRuntimeSettingBool();
  }
}

uint64_t RKARSystem.init(engine:arView:)(uint64_t a1, char *a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(__int128 *, _QWORD);
  uint64_t v51;
  void (*v52)(__int128 *, _QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  _BYTE *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  CFTimeInterval v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  objc_class *ObjectType;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  objc_super v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[3];
  uint64_t v93;
  uint64_t v94;

  v85 = a2;
  ObjectType = (objc_class *)swift_getObjectType();
  v82 = type metadata accessor for __AssetRef();
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82);
  v83 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RKARSegmentationComponent?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PerspectiveCameraComponent?);
  MEMORY[0x1E0C80A78](v8);
  v84 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_weakInit();
  v10 = OBJC_IVAR____TtC10RealityKit10RKARSystem_delegate;
  v11 = objc_allocWithZone((Class)type metadata accessor for RKARSystem.SessionDelegate());
  v12 = v2;
  *(_QWORD *)&v2[v10] = objc_msgSend(v11, sel_init);
  v86 = OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode;
  v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode] = 0;
  swift_unknownObjectWeakInit();
  v13 = &v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_capturedFrame];
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_isFaceSession] = 0;
  v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_useLowSampleAA] = 0;
  v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_updateCameraViewDescriptorSettings] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_prevOrientation] = 0;
  v14 = &v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_suDepthFeatheringMaterial];
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  v78 = (uint64_t)v14;
  *((_QWORD *)v14 + 4) = 0;
  v15 = &v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraPassthroughMaterial];
  *((_QWORD *)v15 + 4) = 0;
  *(_OWORD *)v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  v77 = (uint64_t)v15;
  v16 = &v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraSegmentationCompositeMaterial];
  *(_OWORD *)v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  v76 = (uint64_t)v16;
  *((_QWORD *)v16 + 4) = 0;
  v17 = MEMORY[0x1E0DEE9D8];
  v75 = OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraCombinedPostProcessMaterials;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraCombinedPostProcessMaterials] = MEMORY[0x1E0DEE9D8];
  v18 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_addedAnchors] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_updatedAnchors] = v18;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_removedAnchors] = v18;
  v19 = OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore;
  *(_QWORD *)&v12[v19] = dispatch_semaphore_create(1);
  v20 = OBJC_IVAR____TtC10RealityKit10RKARSystem_faceMeshEntitiesByAnchorIdentifier;
  *(_QWORD *)&v12[v20] = specialized Dictionary.init(dictionaryLiteral:)(v17);
  v21 = OBJC_IVAR____TtC10RealityKit10RKARSystem_shadowReceiverEntitiesByAnchorIdentifier;
  *(_QWORD *)&v12[v21] = specialized Dictionary.init(dictionaryLiteral:)(v17);
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_lastUpdateTime] = 0;
  *(_DWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientIntensity] = 0;
  v22 = OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientColor;
  if (one-time initialization token for defaultAmbientColor != -1)
    swift_once();
  v23 = (void *)static RKARSystem.defaultAmbientColor;
  *(_QWORD *)&v12[v22] = static RKARSystem.defaultAmbientColor;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_zNear] = 0x3F847AE147AE147BLL;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_zFar] = 0x408F400000000000;
  v24 = &v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_displayToCameraMatrix];
  v25 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
  v26 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 32);
  v27 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
  *(_OWORD *)v24 = *MEMORY[0x1E0C83FF0];
  *((_OWORD *)v24 + 1) = v25;
  *((_OWORD *)v24 + 2) = v26;
  *((_OWORD *)v24 + 3) = v27;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraNoiseRandomTranslation] = 0;
  *(_DWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem___passthroughIntensityExponent] = 0;
  v12[OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame] = 1;
  v12[OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame] = 1;
  v12[OBJC_IVAR____TtC10RealityKit10RKARSystem___autoFireStartTriggerOnPlacement] = 1;
  v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_collaborationStarted] = 0;
  v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_needInitialCollaborationData] = 1;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_netSessionObserver] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_connectedPeers] = v17;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___cameraRenderGraph] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___depthOfFieldRenderGraph] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___motionBlurRenderGraph] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___postProcessingCombinedRenderGraph] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___postProcessingCombinedHDRRenderGraph] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions] = 0;
  v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_groundingShadowMode] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___debugAxisEntity] = 0;
  v28 = &v12[OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___debugAnchorPlaneMaterial];
  v29 = type metadata accessor for UnlitMaterial();
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v30(v28, 1, 1, v29);
  v31 = v29;
  v32 = MEMORY[0x1E0DEE9D8];
  v30(&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___debugProbeMaterial], 1, 1, v31);
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_worldOrigin] = 0;
  v33 = OBJC_IVAR____TtC10RealityKit10RKARSystem_debugAnchorsByAnchorIdentifier;
  v34 = v23;
  *(_QWORD *)&v12[v33] = specialized Dictionary.init(dictionaryLiteral:)(v32);
  v35 = OBJC_IVAR____TtC10RealityKit10RKARSystem_debugPlanesByAnchorIdentifier;
  *(_QWORD *)&v12[v35] = specialized Dictionary.init(dictionaryLiteral:)(v32);
  v36 = OBJC_IVAR____TtC10RealityKit10RKARSystem_debugProbesByAnchorIdentifier;
  *(_QWORD *)&v12[v36] = specialized Dictionary.init(dictionaryLiteral:)(v32);
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_debugFeaturePointUpdateRate] = 0x3FB999999999999ALL;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_timeSinceLastDebugFeaturePointUpdate] = 0x3FF0000000000000;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_debugFeaturePoints] = v32;
  v37 = OBJC_IVAR____TtC10RealityKit10RKARSystem_cachedGestureHitTestResults;
  *(_QWORD *)&v12[v37] = specialized Dictionary.init(dictionaryLiteral:)(v32);
  v12[OBJC_IVAR____TtC10RealityKit10RKARSystem___renderQuality] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_lastARFrameTimeStamp] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_maxNumberOfAttemptsToGetARFrameInDuplicateCase] = 5;
  *(_DWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_sleepDurationInDuplicateARFrameCase] = 500;
  v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_shouldRenderCameraFeed] = 1;
  swift_weakAssign();
  v38 = v85;
  swift_unknownObjectWeakAssign();
  v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C89618]), sel_init);
  v40 = OBJC_IVAR____TtC10RealityKit10RKARSystem_session;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_session] = v39;
  if (!specialized static RKARSystem.cameraUsageDescriptionInPlist.getter())
    v12[v86] = 1;
  v86 = a1;
  result = dispatch thunk of __Engine.services.getter();
  if (!result)
  {
    __break(1u);
    goto LABEL_26;
  }
  dispatch thunk of __ServiceLocator.renderService.getter();
  swift_release();
  v42 = v93;
  v43 = v94;
  __swift_project_boxed_opaque_existential_1(v92, v93);
  v44 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v42, v43);
  type metadata accessor for RKARTextureCache();
  swift_allocObject();
  result = RKARTextureCache.init(device:)(v44);
  *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache] = result;
  v45 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  if (!*(_QWORD *)&v38[OBJC_IVAR____TtC10RealityKit6ARView__scene])
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v46 = *(id *)&v12[v40];
  swift_retain();
  dispatch thunk of Scene.session.setter();
  result = swift_release();
  if (!*(_QWORD *)&v38[v45])
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  swift_retain();
  v47 = dispatch thunk of Scene.defaultCamera.getter();
  swift_release();
  result = swift_release();
  if (v47)
    goto LABEL_11;
  if (*(_QWORD *)&v38[v45])
  {
    swift_retain();
    dispatch thunk of Scene.addDefaultCamera()();
    result = swift_release();
LABEL_11:
    if (*(_QWORD *)&v38[v45])
    {
      swift_retain();
      v48 = dispatch thunk of Scene.defaultCamera.getter();
      result = swift_release();
      if (v48)
      {
        v49 = type metadata accessor for PerspectiveCameraComponent();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v84, 1, 1, v49);
        v50 = (void (*)(__int128 *, _QWORD))dispatch thunk of Entity.components.modify();
        Entity.ComponentSet.subscript.setter();
        v50(&v89, 0);
        Entity.coreEntity.getter();
        RECustomMatrixCameraComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        Entity.coreEntity.getter();
        REAnchorComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          Entity.coreEntity.getter();
          REAnchorComponentGetComponentType();
          REEntityRemoveComponentByClass();
        }
        Entity.coreEntity.getter();
        REAnchorComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        RKARSegmentationComponent.init()();
        v51 = type metadata accessor for RKARSegmentationComponent();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v7, 0, 1, v51);
        v52 = (void (*)(__int128 *, _QWORD))dispatch thunk of Entity.components.modify();
        Entity.ComponentSet.subscript.setter();
        v52(&v89, 0);
        result = dispatch thunk of Entity.name.setter();
        *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_lightEntity] = 0;
        v53 = *(_QWORD *)&v38[v45];
        if (v53)
        {
          type metadata accessor for RKARProbePlacementManager();
          swift_allocObject();
          *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_probePlacementManager] = specialized RKARProbePlacementManager.init(engine:scene:)(v86, v53);
          type metadata accessor for __MaterialResource();
          static __MaterialResource.createMaterial(assetPath:in:)();
          v54 = MEMORY[0x1E0DEE9D8];
          v79 = v48;
          v55 = v78;
          swift_beginAccess();
          outlined assign with take of Material?((uint64_t)&v89, v55, &demangling cache variable for type metadata for Material?);
          swift_endAccess();
          static __MaterialResource.createMaterial(assetPath:in:)();
          v56 = v77;
          swift_beginAccess();
          outlined assign with take of Material?((uint64_t)&v89, v56, &demangling cache variable for type metadata for Material?);
          swift_endAccess();
          static __MaterialResource.createMaterial(assetPath:in:)();
          v69 = v76;
          swift_beginAccess();
          outlined assign with take of Material?((uint64_t)&v89, v69, &demangling cache variable for type metadata for Material?);
          swift_endAccess();
          v87 = v54;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 16, 0);
          v70 = 0;
          v71 = v87;
          do
          {
            swift_bridgeObjectRetain();
            static __MaterialResource.createMaterial(assetPath:in:)();
            swift_bridgeObjectRelease();
            v87 = v71;
            v73 = *(_QWORD *)(v71 + 16);
            v72 = *(_QWORD *)(v71 + 24);
            if (v73 >= v72 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v73 + 1, 1);
              v71 = v87;
            }
            *(_QWORD *)(v71 + 16) = v73 + 1;
            outlined init with take of Material(&v89, v71 + 40 * v73 + 32);
            v70 += 16;
          }
          while (v70 != 256);
          swift_arrayDestroy();
          *(_QWORD *)&v12[v75] = v71;
          swift_bridgeObjectRelease();
          result = dispatch thunk of __Engine.services.getter();
          v57 = v82;
          v58 = v83;
          if (result)
          {
            dispatch thunk of __ServiceLocator.assetService.getter();
            swift_release();
            v59 = v90;
            v60 = v91;
            __swift_project_boxed_opaque_existential_1(&v89, v90);
            (*(void (**)(uint64_t, uint64_t))(v60 + 32))(v59, v60);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
            result = REAssetManagerCreateAssetHandle();
            if (result)
            {
              v61 = result;
              type metadata accessor for __REAsset();
              v62 = MEMORY[0x1E0DEC548];
              v90 = MEMORY[0x1E0DEC548];
              *(_QWORD *)&v89 = v61;
              static __AssetRef.__fromCore(_:)();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
              static __REAsset.__fromHandleTransfer(_:)();
              v63 = *(void (**)(char *, uint64_t))(v81 + 8);
              v63(v58, v57);
              type metadata accessor for __RERenderGraphEmitter();
              swift_allocObject();
              *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_simpleForwardEmitter] = __RERenderGraphEmitter.init(_:)();
              result = REAssetManagerCreateAssetHandle();
              if (result)
              {
                v90 = v62;
                *(_QWORD *)&v89 = result;
                static __AssetRef.__fromCore(_:)();
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
                static __REAsset.__fromHandleTransfer(_:)();
                v63(v58, v57);
                swift_allocObject();
                *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit10RKARSystem_arEmitter] = __RERenderGraphEmitter.init(_:)();

                v88.receiver = v12;
                v88.super_class = ObjectType;
                v64 = objc_msgSendSuper2(&v88, sel_init);
                v65 = *(_QWORD *)&v64[OBJC_IVAR____TtC10RealityKit10RKARSystem_delegate];
                swift_unknownObjectWeakAssign();
                v64[OBJC_IVAR____TtC10RealityKit10RKARSystem_groundingShadowMode] = 0;
                v66 = v64;
                swift_retain();
                dispatch thunk of __RERenderGraphEmitter.__handle.getter();
                swift_release();
                __AssetRef.__as<A>(_:)();
                v63(v58, v57);
                RERenderGraphEmitterAssetSetRuntimeSettingBool();
                RERenderGraphEmitterAssetSetRuntimeSettingBool();
                RKARSystem.setDefaultRenderSettings()();
                v67 = OBJC_IVAR____TtC10RealityKit10RKARSystem_session;
                objc_msgSend(*(id *)&v66[OBJC_IVAR____TtC10RealityKit10RKARSystem_session], sel__addObserver_, v65);
                objc_msgSend(*(id *)&v66[v67], sel_forceEnvironmentTexturingToManualMode_, 1);
                v68 = CACurrentMediaTime();
                swift_release();

                swift_release();
                *(CFTimeInterval *)&v66[OBJC_IVAR____TtC10RealityKit10RKARSystem_lastUpdateTime] = v68;
                *(_QWORD *)&v66[OBJC_IVAR____TtC10RealityKit10RKARSystem_lastARFrameTimeStamp] = 0;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
                return (uint64_t)v66;
              }
              goto LABEL_33;
            }
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_34:
  __break(1u);
  return result;
}

id RKARSystem.__deallocating_deinit()
{
  char *v0;
  void *v1;
  objc_class *ObjectType;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  objc_super v13;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = &v0[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraPassthroughMaterial];
  swift_beginAccess();
  v4 = *((_QWORD *)v3 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)v3 + 4);
    v6 = __swift_project_boxed_opaque_existential_1(v3, *((_QWORD *)v3 + 3));
    v7 = *(_QWORD *)(v4 - 8);
    v8 = MEMORY[0x1E0C80A78](v6);
    v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v7 + 16))(v10, v8);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v4);
    dispatch thunk of __MaterialResource.coreAsset.getter();
    swift_release();
    REMaterialAssetClearParameter();
    REMaterialAssetClearParameter();
  }
  RKARSystem.endCollaborativeMapBuilding()();
  v13.receiver = v1;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, sel_dealloc);
}

uint64_t ObjC metadata update function for RKARSystem()
{
  return type metadata accessor for RKARSystem(0);
}

uint64_t type metadata accessor for RKARSystem(uint64_t a1)
{
  return type metadata accessor for AccessibilityComponent.RotorType(a1, (uint64_t *)&type metadata singleton initialization cache for RKARSystem);
}

Swift::Void __swiftcall RKARSystem.updateGuidedFilterOcclusion(viewportSize:)(CGSize viewportSize)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id image;

  v2 = v1;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  v3 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  if (!MEMORY[0x1DF0912C4](v3))
    return;
  if (!RESceneUnderstandingServiceIsGuidedFilterOcclusionEnabled())
    return;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache);
  v5 = *(void **)(v4 + 32);
  if (!v5)
    return;
  v6 = *(void **)(v4 + 40);
  image = v5;
  v7 = v6;
  if (!CVMetalTextureGetTexture((CVMetalTextureRef)image))
  {
LABEL_17:

    return;
  }
  v8 = CVMetalTextureGetTexture((CVMetalTextureRef)v7);

  if (!v8)
    goto LABEL_14;
  swift_unknownObjectRelease();
  v9 = *(void **)(v4 + 32);
  if (!v9)
    goto LABEL_14;
  v10 = *(void **)(v4 + 40);
  image = v9;
  v7 = v10;
  if (!CVMetalTextureGetTexture((CVMetalTextureRef)image))
  {
    swift_unknownObjectRelease();
    goto LABEL_17;
  }
  v11 = CVMetalTextureGetTexture((CVMetalTextureRef)v7);

  if (!v11)
    goto LABEL_13;
  swift_unknownObjectRelease();
  v12 = MEMORY[0x1DF091D08](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (!v12)
    goto LABEL_13;
  v13 = (void *)v12;
  if (*(_QWORD *)(v12 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();

    v14 = dispatch thunk of Scene.defaultCamera.getter();
    swift_release();
    if (v14)
    {
      type metadata accessor for Entity();
      HasTransform.transformMatrix(relativeTo:)();
      RESceneUnderstandingServiceSetGuidedFilterOcclusionCameraFeed();
      swift_release();
    }
LABEL_13:
    swift_unknownObjectRelease();
LABEL_14:
    swift_unknownObjectRelease();
    return;
  }
  __break(1u);
}

uint64_t RKARSystem.updateCameraWorldMatrix(from:)(void *a1)
{
  uint64_t v1;
  id v2;
  simd_float4 v3;
  simd_float4 v4;
  simd_float4 v5;
  simd_float4 v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;
  simd_float4 v13;
  simd_float4x4 v14;

  v2 = objc_msgSend(a1, sel_camera);
  objc_msgSend(v2, sel_viewMatrixForOrientation_, RKARSystem.orientation.getter());
  v13 = v3;
  v11 = v5;
  v12 = v4;
  v10 = v6;

  result = MEMORY[0x1DF091D08](v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (result)
  {
    v8 = (void *)result;
    if (*(_QWORD *)(result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
    {
      swift_retain();

      v9 = dispatch thunk of Scene.defaultCamera.getter();
      result = swift_release();
      if (v9)
      {
        v14.columns[0] = v13;
        v14.columns[2] = v11;
        v14.columns[1] = v12;
        v14.columns[3] = v10;
        __invert_f4(v14);
        type metadata accessor for Entity();
        HasTransform.setTransformMatrix(_:relativeTo:)();
        return swift_release();
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t RKARSystem.updateCameraProjectionMatrix(from:viewportSize:)(void *a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  v7 = type metadata accessor for __EntityRef();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1DF091D08](v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView, v9);
  if (result)
  {
    v13 = (void *)result;
    if (*(_QWORD *)(result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
    {
      swift_retain();

      v14 = dispatch thunk of Scene.defaultCamera.getter();
      result = swift_release();
      if (!v14)
        return result;
      dispatch thunk of Entity.__coreEntity.getter();
      __AssetRef.__as<A>(_:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      RECustomMatrixCameraComponentGetComponentType();
      result = REEntityGetComponentByClass();
      if (!result)
        return swift_release();
      if (a2 > 0.0 && a3 > 0.0)
      {
        v15 = objc_msgSend(a1, sel_camera);
        objc_msgSend(v15, sel_projectionMatrixForOrientation_viewportSize_zNear_zFar_, RKARSystem.orientation.getter(), a2, a3, 0.01, *(double *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_zFar));
        v20[0] = v16;
        v20[1] = v17;
        v20[2] = v18;
        v20[3] = v19;

        RECustomMatrixCameraComponentSetProjectionFromMatrix();
        return swift_release();
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

void RKARSystem.updateLighting(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  void (*v5)(_OWORD *, _QWORD);
  double v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  float v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  void (*v16)(_OWORD *, _QWORD);
  uint64_t v17;
  void (*v18)(_BYTE *, _QWORD);
  uint64_t v19;
  double v20;
  double v21;
  __int128 v22;
  void (*v23)(_OWORD *, _QWORD);
  id v24;
  _BYTE v25[32];
  _OWORD v26[2];

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions) & 2) == 0)
  {
    v2 = v1;
    v3 = objc_msgSend(a1, sel_lightEstimate);
    if (v3)
    {
      if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode) & 1) != 0)
      {

        return;
      }
      v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_lightEntity);
      v24 = v3;
      if (v4)
      {
        objc_msgSend(v3, sel_ambientIntensity);
        type metadata accessor for AmbientLight();
        v5 = (void (*)(_OWORD *, _QWORD))HasAmbientLight.light.modify();
        __AmbientLightComponent.intensity.setter();
        v5(v26, 0);
        v3 = v24;
      }
      objc_msgSend(v3, sel_ambientIntensity);
      v7 = v6;
      v8 = v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
      v9 = MEMORY[0x1DF091D08](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
      if (v9)
      {
        v10 = (void *)v9;
        swift_beginAccess();

      }
      v11 = 1.0;
      if (v7 < 1000.0)
        v11 = (float)((float)(v7 + -1000.0) / 1000.0) + 1.0;
      powf(v11, 0.25);
      v12 = MEMORY[0x1DF091D08](v8);
      if (v12)
      {
        v13 = (void *)v12;
        v14 = (uint64_t *)(v12 + OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity);
        swift_beginAccess();
        v15 = *v14;
        swift_retain();

        if (!v15)
        {
          __break(1u);
          return;
        }
        v16 = (void (*)(_OWORD *, _QWORD))dispatch thunk of Entity.components.modify();
        v17 = type metadata accessor for ImageBasedLightComponent();
        v18 = (void (*)(_BYTE *, _QWORD))Entity.ComponentSet.subscript.modify();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v19, 1, v17))
          ImageBasedLightComponent.intensityExponent.setter();
        v18(v25, 0);
        v16(v26, 0);
        swift_release();
      }
      if (v4)
      {
        objc_msgSend(v24, sel_ambientColorTemperature);
        *(float *)&v20 = v20;
        *(float32x2_t *)&v22 = specialized RKARSystem.colorTemperatureToSRGB(_:)(*(float *)&v20, v21);
        v26[0] = v22;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
        lazy protocol witness table accessor for type Float and conformance Float();
        SIMD3<>.cgColor.getter();
        type metadata accessor for AmbientLight();
        v23 = (void (*)(_OWORD *, _QWORD))HasAmbientLight.light.modify();
        __AmbientLightComponent.color.setter();
        v23(v26, 0);
      }

    }
  }
}

void RKARSystem.removeAnchors(_:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  ARAnchor *v14;
  ARAnchor *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  ARAnchor *v19;
  uint64_t v20;
  void *v21;
  ARAnchor *v22;
  NSUUID *v23;
  char v24;
  uint64_t v25;
  void *v26;
  char *v27;
  NSUUID *v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = v1;
  v4 = type metadata accessor for Scene.AnchorCollection();
  v36 = *(_QWORD *)(v4 - 8);
  v37 = v4;
  MEMORY[0x1E0C80A78](v4);
  v35 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v46 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v42 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v35 - v9;
  if (a1 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_3;
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11)
    {
LABEL_3:
      v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_faceMeshEntitiesByAnchorIdentifier);
      v40 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
      v44 = OBJC_IVAR____TtC10RealityKit10RKARSystem_probePlacementManager;
      v45 = a1 & 0xC000000000000001;
      swift_bridgeObjectRetain();
      v13 = 4;
      v38 = v11;
      v39 = a1;
      v41 = v6;
      while (1)
      {
        if (v45)
          v14 = (ARAnchor *)MEMORY[0x1DF0906F4](v13 - 4, a1);
        else
          v14 = (ARAnchor *)*(id *)(a1 + 8 * v13);
        v15 = v14;
        v16 = v13 - 3;
        if (__OFADD__(v13 - 4, 1))
        {
          __break(1u);
          goto LABEL_28;
        }
        RKARSystem.removeAnchorDebugVisualization(for:)(v14);
        objc_opt_self();
        v17 = swift_dynamicCastObjCClass();
        if (v17)
          break;
        objc_opt_self();
        v20 = swift_dynamicCastObjCClass();
        if (v20)
        {
          v21 = (void *)v20;
          v22 = v15;
          RKARSystem.removeProbeDebugVisualization(for:)(v21);
          goto LABEL_14;
        }
LABEL_15:
        v23 = -[ARAnchor identifier](v15, sel_identifier);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        swift_beginAccess();
        if (*(_QWORD *)(*v12 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10), (v24 & 1) != 0))
        {
          swift_endAccess();
          swift_retain();
          v43 = *(void (**)(char *, uint64_t))(v46 + 8);
          v43(v10, v6);
          v25 = MEMORY[0x1DF091D08](v40);
          if (v25)
          {
            v26 = (void *)v25;
            if (!*(_QWORD *)(v25 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
            {
              __break(1u);
              return;
            }
            swift_retain();

            v27 = v35;
            dispatch thunk of Scene.anchors.getter();
            swift_release();
            swift_retain();
            Scene.AnchorCollection.remove(_:)();
            swift_release();
            (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v37);
          }
          v28 = -[ARAnchor identifier](v15, sel_identifier);
          v29 = (uint64_t)v42;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          swift_beginAccess();
          swift_bridgeObjectRetain();
          v30 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
          LOBYTE(v29) = v31;
          swift_bridgeObjectRelease();
          if ((v29 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v33 = *v12;
            v47 = *v12;
            *v12 = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              specialized _NativeDictionary.copy()();
              v33 = v47;
            }
            v43((char *)(*(_QWORD *)(v33 + 48) + *(_QWORD *)(v46 + 72) * v30), v41);
            v34 = v47;
            specialized _NativeDictionary._delete(at:)(v30, v47);
            *v12 = v34;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          swift_release();
          v6 = v41;
          v43(v42, v41);
          swift_release();
          v11 = v38;
          a1 = v39;
        }
        else
        {
          swift_endAccess();
          (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v6);
        }
        swift_retain();
        RKARProbePlacementManager.removeProbe(for:)(v15);

        swift_release();
        ++v13;
        if (v16 == v11)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }
      v18 = (void *)v17;
      v19 = v15;
      RKARSystem.removePlaneDebugVisualization(for:)(v18);
LABEL_14:

      goto LABEL_15;
    }
  }
}

void RKARSystem.addAnchors(_:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t *v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  void *v44;
  char *v45;
  id v46;
  uint64_t *v47;
  char v48;
  _QWORD v49[4];
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v2 = v1;
  v73 = *MEMORY[0x1E0C80C00];
  v56 = type metadata accessor for Scene.AnchorCollection();
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v54 = (char *)v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v62 = *(_QWORD *)(v5 - 8);
  v63 = v5;
  MEMORY[0x1E0C80A78](v5);
  v61 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
LABEL_38:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return;
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return;
  }
  v60 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  v57 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugAnchorsByAnchorIdentifier);
  v64 = a1 & 0xC000000000000001;
  v65 = OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions;
  v49[0] = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugProbesByAnchorIdentifier;
  v49[2] = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugPlanesByAnchorIdentifier;
  swift_bridgeObjectRetain();
  v8 = 4;
  v50 = xmmword_1D95E24F0;
  v49[1] = 0x80000001D95DCEF0;
  v49[3] = 0x80000001D95DCF60;
  v58 = xmmword_1D95E24E0;
  v52 = a1;
  v59 = v2;
  v53 = v7;
  while (1)
  {
    if (v64)
      v9 = (id)MEMORY[0x1DF0906F4](v8 - 4, a1);
    else
      v9 = *(id *)(a1 + 8 * v8);
    v10 = v9;
    v11 = v8 - 3;
    if (__OFADD__(v8 - 4, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if ((*(_BYTE *)(v2 + v65) & 8) != 0)
    {
      v12 = specialized RKARSystem.createDebugAxis()();
      type metadata accessor for Entity();
      HasTransform.position.setter();
      objc_msgSend(v10, sel_transform);
      HasTransform.setTransformMatrix(_:relativeTo:)();
      Entity.turnIntoNinja()();
      v13 = MEMORY[0x1DF091D08](v60);
      if (v13)
      {
        v14 = (void *)v13;
        if (!*(_QWORD *)(v13 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
        {
          __break(1u);
LABEL_41:
          __break(1u);
        }
        swift_retain();

        v15 = v54;
        dispatch thunk of Scene.anchors.getter();
        swift_release();
        Scene.AnchorCollection.appendNinja(_:)();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v15, v56);
      }
      v16 = objc_msgSend(v10, sel_identifier);
      v17 = (uint64_t)v61;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v18 = v57;
      swift_beginAccess();
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v66 = *v18;
      *v18 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, v17, isUniquelyReferenced_nonNull_native);
      *v18 = v66;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v17, v63);
      swift_endAccess();
      swift_release();
    }
    objc_opt_self();
    v20 = swift_dynamicCastObjCClass();
    if (!v20)
      break;
    if ((*(_BYTE *)(v2 + v65) & 0x10) == 0)
      goto LABEL_7;
    v21 = (void *)v20;
    v22 = v10;
    v23 = objc_msgSend(v21, sel_geometry);
    if (*(_QWORD *)(ARPlaneGeometry.vertices.getter() + 16) >= 0x100uLL)
      goto LABEL_43;
    v24 = REGeomMeshCreateFromPolygon();
    swift_bridgeObjectRelease();
    if (v24)
    {
      v66 = v24;
      type metadata accessor for __ServiceLocator();
      static __ServiceLocator.shared.getter();
      dispatch thunk of __ServiceLocator.assetService.getter();
      swift_release();
      v25 = v71;
      v26 = v72;
      __swift_project_boxed_opaque_existential_1(&v67, v71);
      (*(void (**)(uint64_t, uint64_t))(v26 + 32))(v25, v26);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
      if (REAssetManagerMeshMemoryAssetCreate())
      {
        type metadata accessor for MeshResource();
        swift_allocObject();
        MeshResource.init(_:)();
        RERelease();
        RERelease();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
        v27 = swift_allocObject();
        *(_OWORD *)(v27 + 16) = v50;
        *(_QWORD *)(v27 + 56) = type metadata accessor for UnlitMaterial();
        *(_QWORD *)(v27 + 64) = MEMORY[0x1E0CD36F0];
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v27 + 32));
        swift_retain();
        RKARSystem.debugAnchorPlaneMaterial.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___debugAnchorPlaneMaterial, (uint64_t)boxed_opaque_existential_0, 1.0, 0.0);
        type metadata accessor for ModelEntity();
        swift_allocObject();
        v29 = ModelEntity.init(mesh:materials:)();
        swift_retain();
        dispatch thunk of Entity.name.setter();
        swift_release();
        objc_msgSend(v21, sel_transform);
        HasTransform.setTransformMatrix(_:relativeTo:)();
        Entity.turnIntoNinja()();
        v30 = MEMORY[0x1DF091D08](v60);
        if (v30)
        {
          v31 = (void *)v30;
          if (!*(_QWORD *)(v30 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
            goto LABEL_41;
          swift_retain();

          v32 = v54;
          dispatch thunk of Scene.anchors.getter();
          swift_release();
          Scene.AnchorCollection.appendNinja(_:)();
          (*(void (**)(char *, uint64_t))(v55 + 8))(v32, v56);
        }
        v33 = objc_msgSend(v21, sel_identifier);
        v34 = (uint64_t)v61;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v35 = &v75;
        goto LABEL_33;
      }
      RERelease();
      a1 = v52;
    }

LABEL_6:
    v2 = v59;
    v7 = v53;
LABEL_7:
    RKARSystem.createFaceGeometry(for:)((void (*)(_QWORD, _QWORD))v10);

    swift_release();
    ++v8;
    if (v11 == v7)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  objc_opt_self();
  v36 = swift_dynamicCastObjCClass();
  if (!v36 || (*(_BYTE *)(v2 + v65) & 0x10) == 0)
    goto LABEL_7;
  v37 = (void *)v36;
  v22 = v10;
  objc_msgSend(v37, sel_extent);
  v51 = v38;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.assetService.getter();
  swift_release();
  v39 = v71;
  v40 = v72;
  __swift_project_boxed_opaque_existential_1(&v67, v71);
  (*(void (**)(uint64_t, uint64_t))(v40 + 32))(v39, v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
  v67 = 0x1000100010001;
  v68 = 0;
  v69 = v51;
  v70 = DWORD2(v51);
  LOWORD(v71) = 257;
  BYTE2(v71) = 1;
  if (!REAssetManagerMeshMemoryAssetCreateBox())
  {

    goto LABEL_6;
  }
  type metadata accessor for MeshResource();
  swift_allocObject();
  MeshResource.init(_:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = v50;
  *(_QWORD *)(v41 + 56) = type metadata accessor for UnlitMaterial();
  *(_QWORD *)(v41 + 64) = MEMORY[0x1E0CD36F0];
  v42 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v41 + 32));
  swift_retain();
  RKARSystem.debugAnchorPlaneMaterial.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___debugProbeMaterial, (uint64_t)v42, 0.0, 1.0);
  type metadata accessor for ModelEntity();
  swift_allocObject();
  v29 = ModelEntity.init(mesh:materials:)();
  swift_retain();
  dispatch thunk of Entity.name.setter();
  swift_release();
  objc_msgSend(v37, sel_transform);
  HasTransform.setTransformMatrix(_:relativeTo:)();
  Entity.turnIntoNinja()();
  v43 = MEMORY[0x1DF091D08](v60);
  if (!v43)
  {
LABEL_32:
    v46 = objc_msgSend(v37, sel_identifier);
    v34 = (uint64_t)v61;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v35 = &v74;
LABEL_33:
    v47 = (uint64_t *)*(v35 - 32);
    swift_beginAccess();
    swift_retain();
    v48 = swift_isUniquelyReferenced_nonNull_native();
    v66 = *v47;
    *v47 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v29, v34, v48);
    *v47 = v66;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v34, v63);
    swift_endAccess();

    swift_release();
    swift_release();
    a1 = v52;
    goto LABEL_6;
  }
  v44 = (void *)v43;
  if (*(_QWORD *)(v43 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();

    v45 = v54;
    dispatch thunk of Scene.anchors.getter();
    swift_release();
    Scene.AnchorCollection.appendNinja(_:)();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v45, v56);
    goto LABEL_32;
  }
  __break(1u);
LABEL_43:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *RKARSystem.updateDepthOfField(for:)(void *result)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  float v14;
  float v15;
  float v16;

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions) & 0x10) == 0)
  {
    v2 = result;
    v3 = objc_msgSend(result, sel_camera);
    objc_msgSend(v3, sel_focalLength);

    v4 = objc_msgSend(v2, sel_camera);
    objc_msgSend(v4, sel_imageResolution);

    v5 = OBJC_IVAR____TtC10RealityKit10RKARSystem_session;
    v6 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session), sel_configuration);
    v7 = v6;
    if (v6)
    {
      v8 = objc_msgSend(v6, sel_videoFormat);

      v9 = objc_msgSend(v8, sel_device);
      objc_msgSend(v9, sel_lensAperture);

    }
    v10 = objc_msgSend(*(id *)(v1 + v5), sel_configuration);
    if (v10)
    {
      v11 = v10;
      v12 = objc_msgSend(v10, sel_videoFormat);

      v13 = objc_msgSend(v12, sel_device);
      objc_msgSend(v13, sel_lensPosition);
      v15 = v14;

      v16 = v15 * 7.5;
    }
    else
    {
      v16 = 7.5;
    }
    expf(v16);
    RKARSystem.cameraRenderGraph.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___depthOfFieldRenderGraph);
    RERenderGraphAssetSetRuntimeNodeSetting();
    RERenderGraphAssetSetRuntimeNodeSetting();
    RERenderGraphAssetSetRuntimeNodeSetting();
    return (void *)RERenderGraphAssetSetRuntimeNodeSetting();
  }
  return result;
}

void RKARSystem.updateMotionBlur(for:)(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions) & 8) == 0)
  {
    v2 = objc_msgSend(a1, sel_camera);
    objc_msgSend(v2, sel_exposureDuration);

    RKARSystem.cameraRenderGraph.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___motionBlurRenderGraph);
    RERenderGraphAssetSetRuntimeNodeSettingFloat();
    v3 = (void *)MEMORY[0x1DF091D08](v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (v3)
    {
      v4 = v3;
      v5 = objc_msgSend(v3, sel_session);

      v7 = objc_msgSend(v5, sel_configuration);
      if (v7)
      {
        v6 = objc_msgSend(v7, sel_videoFormat);
        objc_msgSend(v6, sel_framesPerSecond);

        RERenderGraphAssetSetRuntimeNodeSettingUInt32();
      }
    }
  }
}

void RKARSystem.updateCameraNoise(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  float v8;
  id v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  id v16;
  id v17;
  char **v18;
  char **v19;
  id v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  __float2 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  float v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;

  v2 = v1;
  v4 = MEMORY[0x1DF091D08](v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (v4)
  {
    v5 = (char *)v4;
    v6 = OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions;
    if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions) & 0x20) != 0)
      v7 = &OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___postProcessingCombinedRenderGraph;
    else
      v7 = &OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___postProcessingCombinedHDRRenderGraph;
    RKARSystem.cameraRenderGraph.getter(v7);
    if ((*(_BYTE *)(v1 + v6) & 1) == 0)
    {
      objc_msgSend(a1, sel_cameraGrainIntensity);
      if (v8 > 0.0)
      {
        v9 = objc_msgSend(a1, sel_cameraGrainTexture);
        if (v9)
        {
          v10 = v9;
          v11 = *(void **)&v5[OBJC_IVAR____TtC10RealityKit6ARView_backingLayer];
          if (!v11)
          {
            __break(1u);
            return;
          }
          objc_msgSend(v11, sel_drawableSize);
          v13 = v12;
          v15 = v14;
          v16 = objc_msgSend(a1, sel_camera);
          objc_msgSend(v16, sel_imageResolution);

          v17 = objc_msgSend(a1, sel_camera);
          objc_msgSend(v17, sel_imageResolution);

          if (v15 >= v13)
            v18 = &selRef_height;
          else
            v18 = &selRef_width;
          if (v15 >= v13)
            v19 = &selRef_width;
          else
            v19 = &selRef_height;
          objc_msgSend(v10, *v18);
          v20 = objc_msgSend(v10, *v19);
          v39 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_displayToCameraMatrix);
          v37 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_displayToCameraMatrix + 32);
          v38 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_displayToCameraMatrix + 48);
          v21 = specialized static BinaryFloatingPoint<>.random<A>(in:using:)((uint64_t)v20, 0.0, 6.2832);
          v23 = v22;
          specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v21, 0.0, 0.8);
          v40 = v24 + 0.1;
          v25 = __sincosf_stret(v23);
          *(float32x2_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraNoiseRandomTranslation) = vadd_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v25.__sinval), LODWORD(v25.__cosval)), v40), *(float32x2_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraNoiseRandomTranslation));
          v26 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraCombinedPostProcessMaterials);
          v27 = *(_QWORD *)(v26 + 16);
          if (v27)
          {
            v28 = v26 + 32;
            swift_bridgeObjectRetain();
            do
            {
              outlined init with copy of SynchronizationPeerID(v28, (uint64_t)v41);
              v29 = v42;
              v30 = v43;
              __swift_project_boxed_opaque_existential_1(v41, v42);
              (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
              dispatch thunk of __MaterialResource.coreAsset.getter();
              swift_release();
              REMaterialAssetSetFloat2F();
              v31 = v42;
              v32 = v43;
              __swift_project_boxed_opaque_existential_1(v41, v42);
              (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
              dispatch thunk of __MaterialResource.coreAsset.getter();
              swift_release();
              REMaterialAssetSetFloat2F();
              v33 = v42;
              v34 = v43;
              __swift_project_boxed_opaque_existential_1(v41, v42);
              (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34);
              dispatch thunk of __MaterialResource.coreAsset.getter();
              swift_release();
              objc_msgSend(a1, sel_cameraGrainIntensity, v37, v38, v39);
              REMaterialAssetSetFloat();
              v35 = v42;
              v36 = v43;
              __swift_project_boxed_opaque_existential_1(v41, v42);
              (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v36);
              dispatch thunk of __MaterialResource.coreAsset.getter();
              swift_release();
              REMaterialAssetSetTexture();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
              v28 += 40;
              --v27;
            }
            while (v27);
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_unknownObjectRelease();
          }
        }
      }
    }
    RERenderGraphAssetSetRuntimeNodeSettingBool();

  }
}

Swift::Void __swiftcall RKARSystem.updateSceneUnderstandingOptions()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  char v21;
  int v22;
  int v23[6];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  v3 = MEMORY[0x1DF091D08](v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (!v3)
    goto LABEL_7;
  v4 = (void *)v3;
  if (!*(_QWORD *)(v3 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    __break(1u);
    return;
  }
  swift_retain();

  v5 = dispatch thunk of Scene.synchronizationService.getter();
  swift_release();
  if (v5)
  {
    type metadata accessor for MultipeerConnectivityService();
    v6 = swift_dynamicCastClass();
    swift_unknownObjectRelease();
    v7 = v6 != 0;
    if (v6)
      v8 = 12;
    else
      v8 = 0;
  }
  else
  {
LABEL_7:
    v7 = 0;
    v8 = 0;
  }
  if (v7 || (*(_BYTE *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_collaborationStarted) & 1) == 0)
    v9 = v8;
  else
    v9 = 12;
  v10 = MEMORY[0x1DF091D08](v2);
  if (v10)
  {
    v11 = (void *)v10;
    v12 = v10 + OBJC_IVAR____TtC10RealityKit6ARView_environment;
    swift_beginAccess();
    ARView.Environment.sceneUnderstanding.getter((uint64_t)v23);
    v13 = v23[0];
    ARView.updateEnvironment()();
    if (v9 != v13)
    {
      swift_beginAccess();
      ARView.Environment.sceneUnderstanding.getter((uint64_t)&v20);
      v20 = v9;
      v14 = v22;
      v15 = v22;
      if ((v22 & v9) != 0)
      {
        static os_log_type_t.debug.getter();
        type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        v16 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:type:_:)();

        v15 = v14 & ~v9;
      }
      v22 = v15;
      v19 = v14;
      ARView.Environment.SceneUnderstanding.options.didset(&v19);
      v17 = v22;
      v18 = 0x100000000;
      if (!v21)
        v18 = 0;
      *(_QWORD *)v12 = v18 | v20;
      *(_DWORD *)(v12 + 8) = v17;
      swift_endAccess();
      ARView.updateEnvironment()();
    }

  }
}

void RKARSystem.updateLighting()()
{
  uint64_t v0;
  void (*v1)(_BYTE *, _QWORD);
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  void (*v9)(_BYTE *, _QWORD);
  uint64_t v10;
  void (*v11)(uint64_t *, _QWORD);
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[32];

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_lightEntity))
  {
    type metadata accessor for AmbientLight();
    v1 = (void (*)(_BYTE *, _QWORD))HasAmbientLight.light.modify();
    __AmbientLightComponent.intensity.setter();
    v1(v14, 0);
  }
  v2 = v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  v3 = MEMORY[0x1DF091D08](v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (v3)
  {
    v4 = (void *)v3;
    swift_beginAccess();

  }
  v5 = MEMORY[0x1DF091D08](v2);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = (uint64_t *)(v5 + OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity);
    swift_beginAccess();
    v8 = *v7;
    swift_retain();

    if (v8)
    {
      v9 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Entity.components.modify();
      v10 = type metadata accessor for ImageBasedLightComponent();
      v11 = (void (*)(uint64_t *, _QWORD))Entity.ComponentSet.subscript.modify();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v12, 1, v10))
        ImageBasedLightComponent.intensityExponent.setter();
      v11(&v13, 0);
      v9(v14, 0);
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

void RKARSystem.updateBodyTracking(with:)(unint64_t a1)
{
  char *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t j;
  void *v16;
  uint64_t v17;
  void *v18;
  void (*v19)(char *, uint64_t);
  char *v20;
  uint64_t ComponentsOfType;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  id v33;
  id v34;
  BOOL v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[2];
  int v45;
  void *v46;
  id v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;

  v62 = type metadata accessor for UUID();
  v60 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62);
  v4 = (char *)v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v61 = (char *)v44 - v6;
  v52 = type metadata accessor for BodyTrackingComponent.Target();
  v7 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v57 = (void (*)(char *, uint64_t))((char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for BodyTrackingComponent();
  v54 = *(_QWORD *)(v9 - 8);
  v55 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (uint64_t)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12)
      goto LABEL_3;
LABEL_21:
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v12)
    goto LABEL_21;
LABEL_3:
  if (v12 < 1)
  {
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    return;
  }
  v59 = (unint64_t)v1;
  v13 = v11;
  if ((a1 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v12; ++i)
    {
      MEMORY[0x1DF0906F4](i, a1);
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
      {
        MEMORY[0x1DF0903A0]();
        if (*(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    v1 = (char *)v59;
  }
  else
  {
    for (j = 0; j != v12; ++j)
    {
      v16 = *(void **)(a1 + 8 * j + 32);
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
      {
        MEMORY[0x1DF0903A0](v16);
        if (*(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v11 = v13;
    v1 = (char *)v59;
  }
LABEL_22:
  v17 = v63;
  v18 = (void *)(v63 >> 62);
  v19 = v57;
  if (v63 >> 62)
    goto LABEL_81;
  if (*(uint64_t *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10) > 0)
  {
    do
    {
      v20 = (char *)MEMORY[0x1DF091D08](&v1[OBJC_IVAR____TtC10RealityKit10RKARSystem_arView]);
      if (!v20)
        break;
      v47 = v20;
      v1 = *(char **)&v20[OBJC_IVAR____TtC10RealityKit6ARView__scene];
      if (!v1)
        goto LABEL_86;
      swift_retain();
      Scene.coreScene.getter();
      swift_release();
      ComponentsOfType = RESceneGetComponentsOfType();
      if (v22 < 0)
        goto LABEL_84;
      v23 = v22;
      if (!v22)
      {
LABEL_75:
        swift_bridgeObjectRelease();

        return;
      }
      v24 = ComponentsOfType;
      v50 = v7;
      v56 = type metadata accessor for Entity();
      v7 = 0;
      v49 = *MEMORY[0x1E0CD3E10];
      v45 = *MEMORY[0x1E0CD3E08];
      v25 = v17 & 0xFFFFFFFFFFFFFF8;
      v48 = v17 & 0xFFFFFFFFFFFFFF8;
      if (v17 < 0)
        v25 = v17;
      v44[0] = v11;
      v44[1] = v25;
      v58 = v17;
      v59 = v17 & 0xC000000000000001;
      v46 = v18;
      v51 = v24;
      v53 = v23;
      while (v7 != v23)
      {
        REComponentGetEntity();
        v26 = static Entity.fromCore(_:ignoringEntityInfo:)();
        v27 = swift_conformsToProtocol2();
        if (v27)
          v1 = (char *)v27;
        else
          v1 = 0;
        if (v27)
          v28 = (char *)v26;
        else
          v28 = 0;
        if (v28)
        {
          swift_retain();
          HasBodyTracking.bodyTracking.getter();
          v1 = (char *)v11;
          if ((BodyTrackingComponent.isPaused.getter() & 1) != 0)
          {
            (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v11, v55);
            swift_release();
          }
          else
          {
            BodyTrackingComponent.target.getter();
            v29 = v50;
            v30 = v52;
            v31 = (*(uint64_t (**)(_QWORD, uint64_t))(v50 + 88))(v19, v52);
            if (v31 == v49)
            {
              (*(void (**)(_QWORD, uint64_t))(v29 + 96))(v19, v30);
              (*(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v60 + 32))(v61, v19, v62);
              if (v18)
              {
                swift_bridgeObjectRetain_n();
                v1 = (char *)_CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                v1 = *(char **)(v48 + 16);
                swift_bridgeObjectRetain();
              }
              if (!v1)
              {
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v62);
LABEL_73:
                swift_bridgeObjectRelease();
                swift_release_n();

LABEL_74:
                (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v11, v55);
                return;
              }
              v11 = 4;
              while (1)
              {
                if (v59)
                  v33 = (id)MEMORY[0x1DF0906F4](v11 - 4, v17);
                else
                  v33 = *(id *)(v17 + 8 * v11);
                v18 = v33;
                v17 = v11 - 3;
                if (__OFADD__(v11 - 4, 1))
                {
                  __break(1u);
                  goto LABEL_80;
                }
                v34 = objc_msgSend(v33, sel_identifier);
                static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                LOBYTE(v34) = static UUID.== infix(_:_:)();
                v19 = *(void (**)(char *, uint64_t))(v60 + 8);
                v19(v4, v62);
                if ((v34 & 1) != 0)
                  break;

                ++v11;
                v35 = v17 == (_QWORD)v1;
                v17 = v58;
                if (v35)
                {
                  swift_bridgeObjectRelease();
                  v11 = v44[0];
                  v19(v61, v62);
                  goto LABEL_73;
                }
              }
              v17 = v58;
              swift_bridgeObjectRelease();
              v40 = objc_msgSend(v18, sel_skeleton);
              v39 = objc_msgSend(v40, sel_coreRESkeleton);

              v19(v61, v62);
              v11 = v44[0];
              v19 = v57;
              if (!v39)
                goto LABEL_73;
            }
            else
            {
              if (v31 != v45)
                goto LABEL_87;
              if (v18)
              {
                swift_bridgeObjectRetain_n();
                v32 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                v32 = *(_QWORD *)(v48 + 16);
                swift_bridgeObjectRetain();
              }
              if (!v32)
              {
                swift_release_n();

                swift_bridgeObjectRelease_n();
                goto LABEL_74;
              }
              if (v59)
              {
                v36 = (id)MEMORY[0x1DF0906F4](0, v17);
              }
              else
              {
                if (!*(_QWORD *)(v48 + 16))
                  goto LABEL_85;
                v36 = *(id *)(v17 + 32);
              }
              v37 = v36;
              swift_bridgeObjectRelease();
              v38 = objc_msgSend(v37, sel_skeleton);

              v39 = objc_msgSend(v38, sel_coreRESkeleton);
              if (!v39)
                goto LABEL_73;
            }
            v41 = v39;
            objc_msgSend(v41, sel_localJointTransformsSRT);
            objc_msgSend(v41, sel_jointTransformCount);
            Entity.coreEntity.getter();
            if ((REEntityCharacterSetSkeletalPoseLocalRotations() & 1) == 0)
            {
              static os_log_type_t.error.getter();
              type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
              v42 = (void *)static OS_os_log.default.getter();
              v19 = v57;
              os_log(_:dso:log:type:_:)();

            }
            v1 = v28;
            Entity.coreEntity.getter();
            if ((REEntityCharacterSetSkeletalPoseJointLocalSpace() & 1) == 0)
            {
              static os_log_type_t.error.getter();
              type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
              v1 = (char *)static OS_os_log.default.getter();
              os_log(_:dso:log:type:_:)();

            }
            swift_release();

            (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v11, v55);
            v18 = v46;
          }
        }
        ++v7;
        swift_release();
        v23 = v53;
        if (v7 == v53)
          goto LABEL_75;
      }
LABEL_80:
      __break(1u);
LABEL_81:
      swift_bridgeObjectRetain();
      v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    while (v43 > 0);
  }
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall RKARSystem.removeFaceGeometry(for:)(ARAnchor *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  NSUUID *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  void *v24;
  NSUUID *v25;
  _QWORD v26[2];
  ARAnchor *v27;

  v2 = v1;
  v4 = type metadata accessor for Scene.AnchorCollection();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v13 = MEMORY[0x1E0C80A78](v12).n128_u64[0];
  v15 = (char *)v26 - v14;
  v27 = a1;
  v16 = -[ARAnchor identifier](a1, sel_identifier, v13);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v17 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_faceMeshEntitiesByAnchorIdentifier);
  swift_beginAccess();
  v18 = *v17;
  if (*(_QWORD *)(*v17 + 16) && (v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15), (v20 & 1) != 0))
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
    swift_endAccess();
    v22 = *(void (**)(char *, uint64_t))(v9 + 8);
    v26[1] = v21;
    swift_retain();
    v22(v15, v8);
    v23 = MEMORY[0x1DF091D08](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (!v23)
    {
LABEL_6:
      v25 = -[ARAnchor identifier](v27, sel_identifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      swift_beginAccess();
      specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v11, (void (*)(void))specialized _NativeDictionary.copy());
      swift_endAccess();
      swift_release();
      v22(v11, v8);
      swift_release();
      return;
    }
    v24 = (void *)v23;
    if (*(_QWORD *)(v23 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
    {
      swift_retain();

      dispatch thunk of Scene.anchors.getter();
      swift_release();
      swift_retain();
      Scene.AnchorCollection.remove(_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      goto LABEL_6;
    }
    __break(1u);
  }
  else
  {
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
  }
}

uint64_t RKARSystem.createFaceGeometry(for:)(void (*a1)(_QWORD, _QWORD))
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *boxed_opaque_existential_0;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void *v59;
  void (*v60)(_QWORD *, _QWORD);
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(_QWORD *, _QWORD);
  id v69;
  uint64_t v70;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  void *v73;
  char *v74;
  id v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  uint64_t v94;
  char *v95;
  void (*v96)(_QWORD, _QWORD);
  uint64_t v97;
  _QWORD v98[5];

  v96 = a1;
  v2 = type metadata accessor for Scene.AnchorCollection();
  v90 = *(_QWORD *)(v2 - 8);
  v91 = v2;
  MEMORY[0x1E0C80A78](v2);
  v89 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for AnchoringComponent.Target();
  v92 = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94);
  v93 = (_OWORD *)((char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  MEMORY[0x1E0C80A78](v5);
  v95 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneUnderstandingComponent.EntityType?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneUnderstandingComponent?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ModelComponent?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OcclusionMaterial();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for __AnyARKitObject();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v24);
  MEMORY[0x1E0C80A78](v25);
  v30 = 0;
  if ((*(_WORD *)&v1[OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions] & 0x440) != 0)
    return v30;
  v83 = v29;
  v84 = (char *)&v75 - v27;
  v76 = v23;
  v77 = v21;
  v78 = v20;
  v79 = v15;
  v80 = v9;
  v81 = v12;
  v82 = v28;
  v87 = v16;
  v88 = v26;
  v85 = v19;
  v86 = v17;
  v31 = v1;
  objc_opt_self();
  v32 = v96;
  v33 = swift_dynamicCastObjCClass();
  if (!v33)
    return 0;
  v34 = (void *)v33;
  v35 = v32;
  v36 = objc_msgSend(v34, sel_identifier);
  v37 = (uint64_t)v84;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v38 = &v31[OBJC_IVAR____TtC10RealityKit10RKARSystem_faceMeshEntitiesByAnchorIdentifier];
  swift_beginAccess();
  v39 = *(_QWORD *)v38;
  if (*(_QWORD *)(*(_QWORD *)v38 + 16))
  {
    v40 = specialized __RawDictionaryStorage.find<A>(_:)(v37);
    if ((v41 & 1) != 0)
    {
      v42 = *(_QWORD *)(*(_QWORD *)(v39 + 56) + 8 * v40);
      swift_endAccess();
      swift_retain();

      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v37, v88);
      return v42;
    }
  }
  v75 = v35;
  swift_endAccess();
  v96 = *(void (**)(_QWORD, _QWORD))(v83 + 8);
  v96(v37, v88);
  type metadata accessor for __RKFaceMeshEntity(0);
  swift_allocObject();
  v43 = Entity.init()();
  v84 = v31;
  v44 = v43;
  type metadata accessor for MeshResource();
  v98[0] = objc_msgSend(v34, sel_geometry);
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARFaceGeometry);
  v45 = v76;
  __AnyARKitObject.init<A>(_:)();
  static MeshResource.__generateFace(from:fillMesh:)();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v45, v78);
  v46 = v85;
  OcclusionMaterial.init(receivesDynamicLighting:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
  v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_1D95E24F0;
  v48 = MEMORY[0x1E0CD3A98];
  v49 = v87;
  *(_QWORD *)(v47 + 56) = v87;
  *(_QWORD *)(v47 + 64) = v48;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v47 + 32));
  (*(void (**)(uint64_t *, char *, uint64_t))(v86 + 16))(boxed_opaque_existential_0, v46, v49);
  swift_retain();
  v51 = v79;
  ModelComponent.init(mesh:materials:)();
  v52 = type metadata accessor for ModelComponent();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v51, 0, 1, v52);
  HasModel.model.setter();
  v53 = *MEMORY[0x1E0CD41A8];
  v54 = type metadata accessor for SceneUnderstandingComponent.EntityType();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 104))(v80, v53, v54);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v56, 0, 1, v54);
  swift_retain();
  v57 = v81;
  SceneUnderstandingComponent.init(entityType:)();
  v58 = type metadata accessor for SceneUnderstandingComponent();
  v59 = v34;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 0, 1, v58);
  v60 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v60(v98, 0);
  swift_release();
  objc_msgSend(v34, sel_transform);
  HasTransform.setTransformMatrix(_:relativeTo:)();
  HasTransform.setScale(_:relativeTo:)();
  v61 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
  v62 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 32);
  v63 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
  v65 = v93;
  v64 = v94;
  *v93 = *MEMORY[0x1E0C83FF0];
  v65[1] = v61;
  v65[2] = v62;
  v65[3] = v63;
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(v92 + 104))(v65, *MEMORY[0x1E0CD3B58], v64);
  swift_retain();
  v66 = v95;
  AnchoringComponent.init(_:)();
  v67 = type metadata accessor for AnchoringComponent();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v66, 0, 1, v67);
  v68 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v68(v98, 0);
  swift_release();
  v69 = objc_msgSend(v59, sel_identifier);
  v70 = v82;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v97 = *(_QWORD *)v38;
  *(_QWORD *)v38 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v44, v70, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)v38 = v97;
  swift_bridgeObjectRelease();
  v96(v70, v88);
  swift_endAccess();
  result = MEMORY[0x1DF091D08](&v84[OBJC_IVAR____TtC10RealityKit10RKARSystem_arView]);
  if (!result)
  {

    swift_release();
    goto LABEL_11;
  }
  v73 = (void *)result;
  if (*(_QWORD *)(result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();

    v74 = v89;
    dispatch thunk of Scene.anchors.getter();
    swift_release();
    swift_retain();
    Scene.AnchorCollection.append(_:)();

    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v74, v91);
LABEL_11:
    (*(void (**)(char *, uint64_t))(v86 + 8))(v85, v87);
    return v44;
  }
  __break(1u);
  return result;
}

uint64_t RKARSystem.updateFaceGeometry(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  void *v20;
  id v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(_QWORD *, _QWORD);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD *, _QWORD);
  uint64_t v44;
  void *v45;
  id v46;
  __int128 v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  id v53;
  void *v54;
  _QWORD v55[4];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneUnderstandingComponent.EntityType?);
  MEMORY[0x1E0C80A78](v4);
  v52 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneUnderstandingComponent?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for __AnyARKitObject();
  v50 = *(_QWORD *)(v9 - 8);
  v51 = v9;
  MEMORY[0x1E0C80A78](v9);
  v49 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Scene.AnchorCollection();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (result)
  {
    v20 = (void *)result;
    v53 = a1;
    v21 = objc_msgSend(v53, sel_identifier);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v22 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_faceMeshEntitiesByAnchorIdentifier;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v22 + 16)
      && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18), (v23 & 1) != 0))
    {
      v48 = v8;
      swift_endAccess();
      v24 = *(void (**)(char *, uint64_t))(v16 + 8);
      swift_retain();
      v24(v18, v15);
      v25 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions) & 0x440;
      swift_retain();
      v26 = dispatch thunk of Entity.scene.getter();
      swift_release();
      swift_release();
      if (v25)
      {
        if (!v26 || (result = MEMORY[0x1DF091D08](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView)) == 0)
        {

          return swift_release();
        }
        v27 = (void *)result;
        if (*(_QWORD *)(result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
        {
          swift_retain();

          dispatch thunk of Scene.anchors.getter();
          swift_release();
          swift_retain();
          Scene.AnchorCollection.remove(_:)();

          swift_release_n();
          return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
        }
        __break(1u);
        goto LABEL_22;
      }
      v28 = v48;
      if (!v26)
      {
        result = MEMORY[0x1DF091D08](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
        if (result)
        {
          v29 = (void *)result;
          if (!*(_QWORD *)(result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
          {
LABEL_22:
            __break(1u);
            return result;
          }
          swift_retain();

          dispatch thunk of Scene.anchors.getter();
          swift_release();
          swift_retain();
          Scene.AnchorCollection.append(_:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
        }
      }
      type metadata accessor for __RKFaceMeshEntity(0);
      HasTransform.scale(relativeTo:)();
      objc_msgSend(v20, sel_transform, v30, v31);
      HasTransform.setTransformMatrix(_:relativeTo:)();
      HasTransform.setScale(_:relativeTo:)();
      type metadata accessor for MeshResource();
      v55[0] = objc_msgSend(v20, sel_geometry);
      type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARFaceGeometry);
      v32 = v49;
      __AnyARKitObject.init<A>(_:)();
      static MeshResource.__generateFace(from:fillMesh:)();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v32, v51);
      v33 = (void (*)(_QWORD *, _QWORD))HasModel.model.modify();
      v35 = v34;
      v36 = type metadata accessor for ModelComponent();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36))
      {
        swift_retain();
        ModelComponent.mesh.setter();
      }
      v33(v55, 0);
      v38 = v52;
      v37 = v53;
      v39 = *MEMORY[0x1E0CD41A8];
      v40 = type metadata accessor for SceneUnderstandingComponent.EntityType();
      v41 = *(_QWORD *)(v40 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 104))(v38, v39, v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      swift_retain();
      SceneUnderstandingComponent.init(entityType:)();
      v42 = type metadata accessor for SceneUnderstandingComponent();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v28, 0, 1, v42);
      v43 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Entity.components.modify();
      Entity.ComponentSet.subscript.setter();
      v43(v55, 0);
      swift_release();
      v54 = &unk_1F01EF878;
      v44 = swift_dynamicCastObjCProtocolConditional();
      if (v44)
      {
        v45 = (void *)v44;
        v46 = v37;
        swift_retain();
        objc_msgSend(v45, sel_isTracked);
        dispatch thunk of Entity.isEnabled.setter();
        swift_release();

        return swift_release_n();
      }
      else
      {
        swift_release();

        return swift_release();
      }
    }
    else
    {
      swift_endAccess();

      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    }
  }
  return result;
}

void closure #1 in RKARSystem.session(_:didUpdate:)(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  _QWORD *v10;
  float *v11;
  float v12;
  char *v13;
  uint64_t v14;
  char *v15;

  v15 = (char *)MEMORY[0x1DF091D08](a1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (!v15)
    return;
  if (!swift_weakLoadStrong())
  {

    return;
  }
  v4 = objc_msgSend(v15, sel_gestureRecognizers);
  if (v4)
  {
    v5 = v4;
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for UIGestureRecognizer);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v6 >> 62))
      goto LABEL_5;
LABEL_13:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_6;
    goto LABEL_17;
  }
  v6 = MEMORY[0x1E0DEE9D8];
  if (MEMORY[0x1E0DEE9D8] >> 62)
    goto LABEL_13;
LABEL_5:
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
LABEL_6:
    if (v7 < 1)
    {
      __break(1u);
      return;
    }
    if ((v6 & 0xC000000000000001) != 0)
    {
      v8 = 0;
      do
      {
        MEMORY[0x1DF0906F4](v8++, v6);
        type metadata accessor for EntityTranslationGestureRecognizer();
        swift_dynamicCastClass();
        swift_unknownObjectRelease();
      }
      while (v7 != v8);
    }
    else
    {
      type metadata accessor for EntityTranslationGestureRecognizer();
      for (i = 0; i != v7; ++i)
        swift_dynamicCastClass();
    }
  }
LABEL_17:
  swift_bridgeObjectRelease();
  v10 = (_QWORD *)(a1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cachedGestureHitTestResults);
  swift_beginAccess();
  *v10 = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  v11 = (float *)&v15[OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate];
  swift_beginAccess();
  v12 = *v11;
  v13 = &v15[OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate];
  swift_beginAccess();
  if (*v13)
    v12 = (float)a2;
  v14 = __Engine.coreEngine.getter();
  MEMORY[0x1DF090CF4](v14, v12);

  swift_release();
}

void type metadata completion function for RKARSystem()
{
  unint64_t v0;

  type metadata accessor for UnlitMaterial?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for UnlitMaterial?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UnlitMaterial?)
  {
    type metadata accessor for UnlitMaterial();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UnlitMaterial?);
  }
}

uint64_t type metadata accessor for RKARSystem.SessionDelegate()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for RKARSystem.HitTestScreenPoint()
{
  return &type metadata for RKARSystem.HitTestScreenPoint;
}

void *type metadata accessor for RKARSystem.HashableARAnchor()
{
  return &unk_1E9F44B60;
}

unint64_t lazy protocol witness table accessor for type RKARSystem.HashableARAnchor and conformance RKARSystem.HashableARAnchor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RKARSystem.HashableARAnchor and conformance RKARSystem.HashableARAnchor;
  if (!lazy protocol witness table cache variable for type RKARSystem.HashableARAnchor and conformance RKARSystem.HashableARAnchor)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for RKARSystem.HashableARAnchor, &unk_1E9F44B60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RKARSystem.HashableARAnchor and conformance RKARSystem.HashableARAnchor);
  }
  return result;
}

void RKARSystem.HitTestScreenPoint.hash(into:)(double a1, double a2)
{
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)&a1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&a2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RKARSystem.HitTestScreenPoint()
{
  double *v0;
  double v1;
  double v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  RKARSystem.HitTestScreenPoint.hash(into:)(v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance RKARSystem.HitTestScreenPoint()
{
  double *v0;

  RKARSystem.HitTestScreenPoint.hash(into:)(*v0, v0[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RKARSystem.HitTestScreenPoint()
{
  double *v0;
  double v1;
  double v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  RKARSystem.HitTestScreenPoint.hash(into:)(v1, v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RKARSystem.HitTestScreenPoint(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

unint64_t lazy protocol witness table accessor for type RKARSystem.HitTestScreenPoint and conformance RKARSystem.HitTestScreenPoint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RKARSystem.HitTestScreenPoint and conformance RKARSystem.HitTestScreenPoint;
  if (!lazy protocol witness table cache variable for type RKARSystem.HitTestScreenPoint and conformance RKARSystem.HitTestScreenPoint)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for RKARSystem.HitTestScreenPoint, &type metadata for RKARSystem.HitTestScreenPoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RKARSystem.HitTestScreenPoint and conformance RKARSystem.HitTestScreenPoint);
  }
  return result;
}

void *specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0CD4C68], (uint64_t *)&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
}

{
  return specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0CD4CC0], &demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
}

{
  return specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0CB4250], &demangling cache variable for type metadata for _SetStorage<Participant>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Entity>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)swift_retain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v27 - v7;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = *v2;
  v10 = static _SetStorage.copy(original:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v4 = v11;
    return result;
  }
  v28 = v4;
  result = (void *)(v10 + 56);
  v13 = v9 + 56;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v14)
    result = memmove(result, (const void *)(v9 + 56), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v9 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v20)
        goto LABEL_28;
      v25 = *(_QWORD *)(v13 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v20)
          goto LABEL_28;
        v25 = *(_QWORD *)(v13 + 8 * v16);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v23, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v23, v8, v5);
  }
  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    result = (void *)swift_release();
    v4 = v28;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v13 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<ARReferenceImage>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<ARReferenceObject>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RKARSystem.HashableARAnchor>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C78]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Entity>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
LABEL_35:
    *v0 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v24 = v1 + 56;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 56);
  v25 = (unint64_t)(v4 + 63) >> 6;
  v7 = v2 + 56;
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v9 << 6);
      goto LABEL_24;
    }
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v25)
      goto LABEL_33;
    v14 = *(_QWORD *)(v24 + 8 * v13);
    ++v9;
    if (!v14)
    {
      v9 = v13 + 1;
      if (v13 + 1 >= v25)
        goto LABEL_33;
      v14 = *(_QWORD *)(v24 + 8 * v9);
      if (!v14)
      {
        v9 = v13 + 2;
        if (v13 + 2 >= v25)
          goto LABEL_33;
        v14 = *(_QWORD *)(v24 + 8 * v9);
        if (!v14)
          break;
      }
    }
LABEL_23:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_24:
    v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v12);
    type metadata accessor for Entity();
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4648], MEMORY[0x1E0CD4658]);
    swift_retain();
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v17 = -1 << *(_BYTE *)(v3 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6))) != 0)
    {
      v10 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v20 = 0;
      v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v22 = v19 == v21;
        if (v19 == v21)
          v19 = 0;
        v20 |= v22;
        v23 = *(_QWORD *)(v7 + 8 * v19);
      }
      while (v23 == -1);
      v10 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10) = v16;
    ++*(_QWORD *)(v3 + 16);
  }
  v15 = v13 + 3;
  if (v15 >= v25)
  {
LABEL_33:
    result = swift_release_n();
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v24 + 8 * v15);
  if (v14)
  {
    v9 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v9 >= v25)
      goto LABEL_33;
    v14 = *(_QWORD *)(v24 + 8 * v9);
    ++v15;
    if (v14)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v35 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RKARSystem.HashableARAnchor>);
  v6 = static _SetStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v7;
    return result;
  }
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v9 = *(_QWORD *)(v5 + 56);
  v32 = v0;
  v33 = v5 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & v9;
  v34 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 56;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v34)
      goto LABEL_33;
    v19 = *(_QWORD *)(v33 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v34)
        goto LABEL_33;
      v19 = *(_QWORD *)(v33 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v34)
          goto LABEL_33;
        v19 = *(_QWORD *)(v33 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v11 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    v21 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v17);
    Hasher.init(_seed:)();
    v22 = v21;
    v23 = objc_msgSend(v22, sel_identifier);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v4, v2);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v22;
    ++*(_QWORD *)(v7 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v34)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v32;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v33 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v34)
      goto LABEL_33;
    v19 = *(_QWORD *)(v33 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  return specialized _NativeSet.copyAndResize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<ARReferenceImage>);
}

{
  return specialized _NativeSet.copyAndResize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<ARReferenceObject>);
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::Int v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = static _SetStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
LABEL_35:
    *v3 = v6;
    return result;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v8 = v4 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v4 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11)
      goto LABEL_33;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_33;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_33;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    v21 = *(_QWORD *)(v6 + 40);
    v22 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v17);
    result = NSObject._rawHashValue(seed:)(v21);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    result = swift_release_n();
    v3 = v30;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_33;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
  v6 = static _SetStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v5 + 48);
      v23 = *(_QWORD *)(v36 + 72);
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v22 + v23 * v17, v2);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4C68], MEMORY[0x1E0CD4C78]);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v23, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *v26;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Entity>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v26 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v6 = v5 & *(_QWORD *)(v1 + 56);
    v25 = (unint64_t)(v4 + 63) >> 6;
    v7 = v2 + 56;
    result = swift_retain();
    v9 = 0;
    while (1)
    {
      if (v6)
      {
        v11 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v12 = v11 | (v9 << 6);
      }
      else
      {
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v13 >= v25)
          goto LABEL_33;
        v14 = v26[v13];
        ++v9;
        if (!v14)
        {
          v9 = v13 + 1;
          if (v13 + 1 >= v25)
            goto LABEL_33;
          v14 = v26[v9];
          if (!v14)
          {
            v9 = v13 + 2;
            if (v13 + 2 >= v25)
              goto LABEL_33;
            v14 = v26[v9];
            if (!v14)
            {
              v15 = v13 + 3;
              if (v15 >= v25)
              {
LABEL_33:
                swift_release();
                v24 = 1 << *(_BYTE *)(v1 + 32);
                if (v24 > 63)
                  bzero(v26, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v26 = -1 << v24;
                *(_QWORD *)(v1 + 16) = 0;
                break;
              }
              v14 = v26[v15];
              if (!v14)
              {
                while (1)
                {
                  v9 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_39;
                  if (v9 >= v25)
                    goto LABEL_33;
                  v14 = v26[v9];
                  ++v15;
                  if (v14)
                    goto LABEL_23;
                }
              }
              v9 = v15;
            }
          }
        }
LABEL_23:
        v6 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v9 << 6);
      }
      v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v12);
      type metadata accessor for Entity();
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD4648], MEMORY[0x1E0CD4658]);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v17 = -1 << *(_BYTE *)(v3 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6))) != 0)
      {
        v10 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v20 = 0;
        v21 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v21 && (v20 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v22 = v19 == v21;
          if (v19 == v21)
            v19 = 0;
          v20 |= v22;
          v23 = *(_QWORD *)(v7 + 8 * v19);
        }
        while (v23 == -1);
        v10 = __clz(__rbit64(~v23)) + (v19 << 6);
      }
      *(_QWORD *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10) = v16;
      ++*(_QWORD *)(v3 + 16);
    }
  }
  result = swift_release();
  *v0 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v35 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RKARSystem.HashableARAnchor>);
  v6 = static _SetStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v34 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v32 = v0;
    v33 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_33;
        v19 = v34[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_33;
          v19 = v34[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v33)
              goto LABEL_33;
            v19 = v34[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v33)
              {
LABEL_33:
                swift_release();
                v1 = v32;
                v30 = 1 << *(_BYTE *)(v5 + 32);
                if (v30 > 63)
                  bzero(v34, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v30;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v34[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v33)
                    goto LABEL_33;
                  v19 = v34[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v17);
      Hasher.init(_seed:)();
      v22 = objc_msgSend(v21, sel_identifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v4, v2);
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<UITouch>);
}

{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<ARReferenceImage>);
}

{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<ARReferenceObject>);
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = static _SetStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (*(_QWORD *)(v4 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v4 + 32);
    v8 = (_QWORD *)(v4 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_33;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_33;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_33;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                v3 = v30;
                v29 = 1 << *(_BYTE *)(v4 + 32);
                if (v29 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v11)
                    goto LABEL_33;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, (void (*)(void))specialized _NativeDictionary.copy());
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, (void (*)(void))specialized _NativeDictionary.copy());
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v8 = v7;
  result = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v3;
    v19 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v19;
    }
    v12 = *(_QWORD *)(v11 + 48);
    v13 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * v6, v13);
    v14 = (uint64_t *)(*(_QWORD *)(v11 + 56) + 32 * v6);
    v16 = *v14;
    v15 = v14[1];
    v18 = v14[2];
    v17 = v14[3];
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *v3 = v11;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 0;
    v15 = 0;
    v18 = 0;
    v17 = 0;
  }
  *(_QWORD *)a2 = v16;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v18;
  *(_QWORD *)(a2 + 24) = v17;
  *(_BYTE *)(a2 + 32) = (v8 & 1) == 0;
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, void (*a2)(void))
{
  uint64_t *v2;
  uint64_t *v4;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v4;
  v14 = *v4;
  *v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    v9 = v14;
  }
  v10 = *(_QWORD *)(v9 + 48);
  v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)();
        v12 = (v10 & 0x7FFFFFFFFFFFFFFFLL) != 0 ? v10 : 0;
        Hasher._combine(_:)(v12);
        v13 = (v11 & 0x7FFFFFFFFFFFFFFFLL) != 0 ? v11 : 0;
        Hasher._combine(_:)(v13);
        result = Hasher._finalize()();
        v14 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v14 < v8)
          goto LABEL_17;
LABEL_18:
        v15 = *(_QWORD *)(a2 + 48);
        v16 = (_OWORD *)(v15 + 16 * v3);
        v17 = (_OWORD *)(v15 + 16 * v6);
        if (v3 != v6 || v16 >= v17 + 1)
          *v16 = *v17;
        v18 = *(_QWORD *)(a2 + 56);
        v19 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?)
                                    - 8)
                        + 72);
        v20 = v19 * v3;
        result = v18 + v19 * v3;
        v21 = v19 * v6;
        v22 = v18 + v19 * v6 + v19;
        if (v20 < v21 || result >= v22)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v20 == v21)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_27;
      }
      if (v14 < v8)
        goto LABEL_6;
LABEL_17:
      if (v3 < (uint64_t)v14)
        goto LABEL_6;
      goto LABEL_18;
    }
LABEL_27:
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    v26 = *v24;
    v25 = (-1 << result) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  unint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for UUID();
  v34 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + 64;
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v11 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v33 = (v11 + 1) & v10;
      v12 = *(_QWORD *)(v34 + 72);
      v32 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
      v13 = v10;
      do
      {
        v14 = v7;
        v15 = v12;
        v16 = v12 * v9;
        v17 = v13;
        v32(v6, *(_QWORD *)(a2 + 48) + v12 * v9, v4);
        lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v33)
        {
          if (v19 >= v33 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v7 = v14;
            if (v15 * a1 < v16
              || (v12 = v15, *(_QWORD *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v16 + v15)))
            {
              swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v22 = *(_QWORD *)(a2 + 56);
            v23 = (_QWORD *)(v22 + 8 * a1);
            v24 = (_QWORD *)(v22 + 8 * v9);
            if (a1 != v9 || (a1 = v9, v23 >= v24 + 1))
            {
              *v23 = *v24;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v33 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v7 = v14;
        v12 = v15;
LABEL_5:
        v9 = (v9 + 1) & v13;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v25 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v26 = *v25;
    v27 = (-1 << a1) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v25;
    v26 = (-1 << a1) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for UUID();
  v35 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + 64;
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v11 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v34 = (v11 + 1) & v10;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v10;
      do
      {
        v14 = v7;
        v15 = v12;
        v16 = v12 * v9;
        v17 = v13;
        v33(v6, *(_QWORD *)(a2 + 48) + v12 * v9, v4);
        lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v7 = v14;
            if (v15 * a1 < v16
              || (v12 = v15, *(_QWORD *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v16 + v15)))
            {
              swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v22 = *(_QWORD *)(a2 + 56);
            v23 = (_OWORD *)(v22 + 32 * a1);
            v24 = (_OWORD *)(v22 + 32 * v9);
            if (a1 != v9 || (a1 = v9, v23 >= v24 + 2))
            {
              v25 = v24[1];
              *v23 = *v24;
              v23[1] = v25;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v7 = v14;
        v12 = v15;
LABEL_5:
        v9 = (v9 + 1) & v13;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v26 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v7 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(unint64_t, char *, uint64_t);
  void *v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  void *v30;
  id v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(unint64_t, char *, uint64_t);
  uint64_t v66;
  unint64_t v67;
  id v68;

  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID, ARAnchor));
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return;
  }
  LODWORD(v61) = a2;
  v58 = v3;
  v17 = *(int *)(v12 + 48);
  v57 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = a1 + v57;
  v63 = *(_QWORD *)(v13 + 72);
  v60 = a1;
  swift_bridgeObjectRetain();
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v18, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for (UUID, ARAnchor));
  v59 = v8;
  v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  v64 = v7;
  v65 = v19;
  v19((unint64_t)v10, v15, v7);
  v62 = v17;
  v20 = *(void **)&v15[v17];
  v21 = (_QWORD *)*a3;
  v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  v24 = v21[2];
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    goto LABEL_24;
  v27 = v22;
  if (v21[3] >= v26)
  {
    if ((v61 & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v27 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v34 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    v35 = v34[6];
    v61 = *(_QWORD *)(v59 + 72);
    v36 = v64;
    v65(v35 + v61 * v23, v10, v64);
    *(_QWORD *)(v34[7] + 8 * v23) = v20;
    v37 = v34[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v34[2] = v39;
    v40 = v16 - 1;
    if (v16 == 1)
    {
LABEL_23:
      swift_bridgeObjectRelease_n();
      return;
    }
    v41 = v60 + v63 + v57;
    while (1)
    {
      outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v41, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for (UUID, ARAnchor));
      v65((unint64_t)v10, v15, v36);
      v20 = *(void **)&v15[v62];
      v42 = (_QWORD *)*a3;
      v44 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
      v45 = v42[2];
      v46 = (v43 & 1) == 0;
      v47 = v45 + v46;
      if (__OFADD__(v45, v46))
        break;
      v48 = v43;
      if (v42[3] < v47)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, 1);
        v49 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
        if ((v48 & 1) != (v50 & 1))
          goto LABEL_26;
        v44 = v49;
      }
      if ((v48 & 1) != 0)
        goto LABEL_10;
      v51 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v44 >> 6) + 64) |= 1 << v44;
      v36 = v64;
      v65(v51[6] + v61 * v44, v10, v64);
      *(_QWORD *)(v51[7] + 8 * v44) = v20;
      v52 = v51[2];
      v38 = __OFADD__(v52, 1);
      v53 = v52 + 1;
      if (v38)
        goto LABEL_25;
      v51[2] = v53;
      v41 += v63;
      if (!--v40)
        goto LABEL_23;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v61 & 1);
  v28 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  if ((v27 & 1) == (v29 & 1))
  {
    v23 = v28;
    if ((v27 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v30 = (void *)swift_allocError();
    swift_willThrow();
    v68 = v30;
    v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v32 = swift_dynamicCast();
    v33 = v64;
    if ((v32 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v10, v33);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_27:
  v66 = 0;
  v67 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v54._object = (void *)0x80000001D95DF770;
  v54._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v54);
  _print_unlocked<A, B>(_:_:)();
  v55._countAndFlagsBits = 39;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized static BinaryFloatingPoint<>.random<A>(in:using:)(uint64_t result, float a2, float a3)
{
  float v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE_INT(a3 - a2) & 0x7F800000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = MEMORY[0x1DF091C6C](&v7, 8);
  if ((float)((float)(v5 * (float)((float)(v7 & 0xFFFFFF) * 0.000000059605)) + a2) == a3)
    return specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v6, a2, a3);
  return result;
}

uint64_t specialized _NativeSet.update(with:isUnique:)(void *a1, int a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  void (*v14)(char *, uint64_t);
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;

  LODWORD(v51) = a2;
  v4 = type metadata accessor for UUID();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v49 - v10;
  v49 = v2;
  v12 = *v2;
  Hasher.init(_seed:)();
  v53 = a1;
  v13 = objc_msgSend(a1, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v50 = lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UUID and conformance UUID, v5, MEMORY[0x1E0CB09C8]);
  dispatch thunk of Hashable.hash(into:)();
  v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v52 = v4;
  v14(v11, v4);
  v15 = Hasher._finalize()();
  v16 = -1 << *(_BYTE *)(v12 + 32);
  v17 = v15 & ~v16;
  v18 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v19 = v12;
    v20 = ~v16;
    do
    {
      v21 = *(id *)(*(_QWORD *)(v19 + 48) + 8 * v17);
      v22 = objc_msgSend(v21, sel_identifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v23 = objc_msgSend(v53, sel_identifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v24 = static UUID.== infix(_:_:)();
      v25 = v52;
      v14(v8, v52);
      v14(v11, v25);

      if ((v24 & 1) != 0)
        break;
      v17 = (v17 + 1) & v20;
    }
    while (((*(_QWORD *)(v18 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0);
  }
  else
  {
    v24 = 0;
  }
  v26 = v49;
  v27 = *(_QWORD *)(*v49 + 16);
  v28 = (v24 & 1) == 0;
  v29 = v27 + v28;
  if (__OFADD__(v27, v28))
  {
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v30 = *(_QWORD *)(*v49 + 24);
  if (v30 < v29 || (v51 & 1) == 0)
  {
    if ((v51 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v30 >= v29)
      {
        specialized _NativeSet.copy()();
        if ((v24 & 1) == 0)
          goto LABEL_11;
        goto LABEL_27;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    v33 = *v26;
    Hasher.init(_seed:)();
    v34 = objc_msgSend(v53, sel_identifier);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v35 = v52;
    dispatch thunk of Hashable.hash(into:)();
    v14(v11, v35);
    v36 = Hasher._finalize()();
    v37 = -1 << *(_BYTE *)(v33 + 32);
    v17 = v36 & ~v37;
    v51 = v33;
    v38 = v33 + 56;
    v31 = v17 >> 6;
    v32 = 1 << v17;
    if (((1 << v17) & *(_QWORD *)(v33 + 56 + 8 * (v17 >> 6))) == 0)
    {
LABEL_23:
      if ((v24 & 1) != 0)
      {
LABEL_31:
        result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      goto LABEL_24;
    }
    v50 = ~v37;
    v39 = v52;
    while (1)
    {
      v40 = *(id *)(*(_QWORD *)(v51 + 48) + 8 * v17);
      v41 = objc_msgSend(v40, sel_identifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v42 = objc_msgSend(v53, sel_identifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v42) = static UUID.== infix(_:_:)();
      v14(v8, v39);
      v14(v11, v39);

      if ((v42 & 1) != 0)
        break;
      v17 = (v17 + 1) & v50;
      v31 = v17 >> 6;
      v32 = 1 << v17;
      if ((*(_QWORD *)(v38 + 8 * (v17 >> 6)) & (1 << v17)) == 0)
      {
        v26 = v49;
        goto LABEL_23;
      }
    }
    v26 = v49;
    if ((v24 & 1) == 0)
      goto LABEL_31;
    goto LABEL_27;
  }
  if ((v24 & 1) == 0)
  {
LABEL_11:
    v31 = v17 >> 6;
    v32 = 1 << v17;
LABEL_24:
    v43 = *v26;
    *(_QWORD *)(*v26 + 8 * v31 + 56) |= v32;
    *(_QWORD *)(*(_QWORD *)(v43 + 48) + 8 * v17) = v53;
    v44 = *(_QWORD *)(v43 + 16);
    v45 = __OFADD__(v44, 1);
    v46 = v44 + 1;
    if (!v45)
    {
      result = 0;
      *(_QWORD *)(v43 + 16) = v46;
      return result;
    }
    goto LABEL_30;
  }
LABEL_27:
  v48 = *(_QWORD *)(*v26 + 48);
  result = *(_QWORD *)(v48 + 8 * v17);
  *(_QWORD *)(v48 + 8 * v17) = v53;
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

BOOL specialized static RKARSystem.cameraUsageDescriptionInPlist.getter()
{
  id v0;
  void *v1;
  id v2;
  _OWORD v4[2];

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = (void *)MEMORY[0x1DF090310](0xD000000000000018, 0x80000001D95DF390);
  v2 = objc_msgSend(v0, sel_objectForInfoDictionaryKey_, v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v4, &demangling cache variable for type metadata for Any?);
  return v2 != 0;
}

float32x2_t specialized RKARSystem.colorTemperatureToSRGB(_:)(float a1, double a2)
{
  float v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float v7;
  float v8;
  float v10;
  float v11;
  float32x2_t v12;

  v2 = fminf(fmaxf(a1, 1000.0), 30000.0);
  *(float *)&a2 = v2 * 0.01;
  if (v2 < 6600.0)
  {
    v7 = (float)((float)(*(float *)&a2 + -2.0) * -0.44597) + -155.25;
    v8 = logf(*(float *)&a2 + -2.0);
    v6.i32[0] = 1132396544;
    v6.f32[1] = v7 + (float)(v8 * 104.49);
  }
  else
  {
    v3 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0), (float32x2_t)0xC2480000C25C0000);
    v10 = v3.f32[0];
    v4 = vadd_f32(vmul_f32(v3, (float32x2_t)0x3DA2AE973DE9E513), (float32x2_t)0x43A2B98643AFFD0BLL);
    v11 = logf(v3.f32[1]);
    v5.f32[0] = logf(v10);
    v5.f32[1] = v11;
    v6 = vadd_f32(v4, vmul_f32(v5, (float32x2_t)0xC1E0AEB0C22103C0));
  }
  if (v2 >= 2000.0 && v2 < 6600.0)
  {
    v12 = v6;
    logf((float)(v2 * 0.01) + -10.0);
    v6 = v12;
  }
  return vmul_f32(v6, (float32x2_t)vdup_n_s32(0x3B808081u));
}

void specialized RKARSystem.updateAnchors(_:frame:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t *, _QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t *, _QWORD);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  __int128 v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v2 = v1;
  v85 = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v61 - v9;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v61 - v12;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14)
      goto LABEL_3;
  }
  else
  {
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v14)
    {
LABEL_3:
      if (v14 < 1)
        __break(1u);
      v64 = v7;
      v77 = OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions;
      v73 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugAnchorsByAnchorIdentifier;
      v63 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugProbesByAnchorIdentifier;
      v72 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugPlanesByAnchorIdentifier;
      v75 = a1 & 0xC000000000000001;
      swift_bridgeObjectRetain();
      v15 = 0;
      v66 = a1;
      v62 = v4;
      v65 = v5;
      v68 = v10;
      v76 = v14;
      while (1)
      {
        if (v75)
          v16 = (id)MEMORY[0x1DF0906F4](v15, a1);
        else
          v16 = *(id *)(a1 + 8 * v15 + 32);
        v17 = v16;
        if ((*(_BYTE *)(v2 + v77) & 8) != 0)
        {
          v18 = objc_msgSend(v16, sel_identifier);
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          v19 = v73;
          swift_beginAccess();
          if (*(_QWORD *)(*(_QWORD *)v19 + 16)
            && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13), (v20 & 1) != 0))
          {
            swift_endAccess();
            swift_retain();
            (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
            objc_msgSend(v17, sel_transform);
            v74 = v21;
            v70 = v23;
            v71 = v22;
            v69 = v24;
            type metadata accessor for Entity();
            HasTransform.setTransformMatrix(_:relativeTo:)();
            swift_release();
          }
          else
          {
            swift_endAccess();
            (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
          }
        }
        objc_opt_self();
        v25 = swift_dynamicCastObjCClass();
        if (!v25)
          break;
        if ((*(_BYTE *)(v2 + v77) & 0x10) != 0)
        {
          v26 = (void *)v25;
          *(_QWORD *)&v74 = v17;
          v27 = objc_msgSend(v26, sel_identifier);
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          v28 = v72;
          swift_beginAccess();
          if (*(_QWORD *)(*(_QWORD *)v28 + 16))
          {
            specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
            if ((v29 & 1) != 0)
            {
              swift_endAccess();
              swift_retain();
              (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
              objc_msgSend(v26, sel_transform);
              v70 = v31;
              v71 = v30;
              v69 = v32;
              v67 = v33;
              type metadata accessor for ModelEntity();
              HasTransform.setTransformMatrix(_:relativeTo:)();
              v34 = objc_msgSend(v26, sel_geometry);
              if (*(_QWORD *)(ARPlaneGeometry.vertices.getter() + 16) >= 0x100uLL)
              {
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
                return;
              }
              v35 = REGeomMeshCreateFromPolygon();
              swift_bridgeObjectRelease();
              if (v35)
              {
                v78 = v35;
                type metadata accessor for __ServiceLocator();
                static __ServiceLocator.shared.getter();
                dispatch thunk of __ServiceLocator.assetService.getter();
                swift_release();
                v36 = v83;
                v37 = v84;
                __swift_project_boxed_opaque_existential_1(&v79, v83);
                (*(void (**)(uint64_t, uint64_t))(v37 + 32))(v36, v37);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
                if (REAssetManagerMeshMemoryAssetCreate())
                {
                  type metadata accessor for MeshResource();
                  swift_allocObject();
                  *(_QWORD *)&v71 = MeshResource.init(_:)();
                  RERelease();
                  RERelease();

                  v38 = (void (*)(uint64_t *, _QWORD))HasModel.model.modify();
                  v40 = v39;
                  v41 = type metadata accessor for ModelComponent();
                  v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v40, 1, v41);
                  v4 = v62;
                  if (!v42)
                  {
                    swift_retain();
                    ModelComponent.mesh.setter();
                  }
                  v38(&v79, 0);

                  swift_release();
                  swift_release();
LABEL_37:
                  a1 = v66;
LABEL_38:
                  v5 = v65;
                  goto LABEL_39;
                }
                RERelease();
                v4 = v62;
              }
              swift_release();

              goto LABEL_37;
            }
          }
          swift_endAccess();
          (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);

        }
LABEL_6:
        ++v15;
        RKARSystem.updateFaceGeometry(for:)(v17);

        if (v76 == v15)
        {
          swift_bridgeObjectRelease();
          RKARSystem.updateBodyTracking(with:)(a1);
          return;
        }
      }
      objc_opt_self();
      v43 = swift_dynamicCastObjCClass();
      if (!v43 || (*(_BYTE *)(v2 + v77) & 0x10) == 0)
        goto LABEL_6;
      v44 = (void *)v43;
      *(_QWORD *)&v74 = v17;
      v45 = objc_msgSend(v44, sel_identifier);
      v46 = (uint64_t)v64;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v47 = v63;
      swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)v47 + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v46);
        if ((v48 & 1) != 0)
        {
          swift_endAccess();
          swift_retain();
          (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v46, v4);
          objc_msgSend(v44, sel_transform);
          v70 = v50;
          v71 = v49;
          v69 = v51;
          v67 = v52;
          type metadata accessor for ModelEntity();
          HasTransform.setTransformMatrix(_:relativeTo:)();
          objc_msgSend(v44, sel_extent);
          v71 = v53;
          type metadata accessor for __ServiceLocator();
          static __ServiceLocator.shared.getter();
          dispatch thunk of __ServiceLocator.assetService.getter();
          swift_release();
          v54 = v83;
          v55 = v84;
          __swift_project_boxed_opaque_existential_1(&v79, v83);
          (*(void (**)(uint64_t, uint64_t))(v55 + 32))(v54, v55);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
          v79 = 0x1000100010001;
          v80 = 0;
          v81 = v71;
          v82 = DWORD2(v71);
          LOWORD(v83) = 257;
          BYTE2(v83) = 1;
          if (REAssetManagerMeshMemoryAssetCreateBox())
          {
            type metadata accessor for MeshResource();
            swift_allocObject();
            MeshResource.init(_:)();
            v56 = (void (*)(uint64_t *, _QWORD))HasModel.model.modify();
            v58 = v57;
            v59 = type metadata accessor for ModelComponent();
            v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 48))(v58, 1, v59);
            v10 = v68;
            if (!v60)
            {
              swift_retain();
              ModelComponent.mesh.setter();
            }
            v56(&v79, 0);

            swift_release();
            swift_release();
            a1 = v66;
            v4 = v62;
            v5 = v65;
            goto LABEL_6;
          }

          swift_release();
          a1 = v66;
          v4 = v62;
          goto LABEL_38;
        }
      }
      swift_endAccess();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v46, v4);

LABEL_39:
      v10 = v68;
      goto LABEL_6;
    }
  }
}

void specialized RKARSystem.updateAR(engine:viewportSize:timeDelta:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  id v26;
  void *v27;
  double v28;
  double v29;
  id v30;
  double v31;
  double v32;
  id v33;
  double v34;
  double v35;
  id v36;
  double v37;
  double v38;
  id v39;
  double v40;
  double v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  objc_class *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  void *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  __CVBuffer *v54;
  id v55;
  int v56;
  uint64_t v57;
  Class v58;
  uint64_t v59;
  void *v60;
  unsigned __int8 *v61;
  int v62;
  uint64_t v63;
  void *v64;
  char v65;
  uint64_t v66;
  void *v67;
  int v68;
  uint64_t v69;
  char v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  _OWORD *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  char *v89;
  void *v90;
  void *v91;
  id v92;
  __CVBuffer *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  __n128 v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char IsDepthFeatheringEnabled;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  __n128 v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  __n128 v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  __n128 v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  void (*v137)(_QWORD *, _QWORD);
  uint64_t v138;
  void (*v139)(_QWORD *, _QWORD);
  uint64_t v140;
  __CVBuffer *v141;
  id v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  void (*v146)(_QWORD *, _QWORD);
  uint64_t v147;
  void (*v148)(_QWORD *, _QWORD);
  uint64_t v149;
  __CVBuffer *v150;
  id v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  void (*v155)(_QWORD *, _QWORD);
  uint64_t v156;
  void (*v157)(_QWORD *, _QWORD);
  uint64_t v158;
  uint64_t v159;
  void *v160;
  void *v161;
  id v162;
  __CVBuffer *v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  void (*v167)(_QWORD *, _QWORD);
  uint64_t v168;
  void (*v169)(_QWORD *, _QWORD);
  uint64_t v170;
  uint64_t v171;
  void *v172;
  void *v173;
  id v174;
  __CVBuffer *v175;
  id v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  __n128 v181;
  uint64_t v182;
  char *v183;
  Class isa;
  id v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  char v194;
  id v195;
  int64_t v196;
  uint64_t v197;
  char v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  int v203;
  int v204;
  char v205;
  char v206;
  id v207;
  int64_t v208;
  uint64_t v209;
  char v210;
  uint64_t *v211;
  uint64_t v212;
  int64_t v213;
  int v214;
  int v215;
  char v216;
  char v217;
  id v218;
  int64_t v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  id v223;
  uint64_t v224;
  unint64_t v225;
  id v226;
  id v227;
  uint64_t v228;
  id v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  id v241;
  id v242;
  uint64_t v243;
  id v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t CameraStreamManager;
  unint64_t v252;
  uint64_t *v253;
  _QWORD *v254;
  uint64_t v255;
  ARFrame v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD v263[3];
  uint64_t v264;
  uint64_t v265;
  _QWORD v266[8];
  unint64_t v267;
  unint64_t v268;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID, ARAnchor));
  v261 = *(_QWORD *)(v8 - 8);
  v262 = v8;
  MEMORY[0x1E0C80A78](v8);
  v259 = (char *)&v250 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v260 = (char *)&v250 - v11;
  v12 = type metadata accessor for __AssetRef();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v250 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OSSignpostID();
  MEMORY[0x1E0C80A78](v16);
  static __REOSLog.UpdateLoop.getter();
  static __RESignpostID.UpdateLoop.getter();
  type metadata accessor for __REOSSignpostScope();
  swift_allocObject();
  __REOSSignpostScope.init(osLog:signpostID:name:)();
  swift_release();
  v17 = OBJC_IVAR____TtC10RealityKit10RKARSystem_session;
  v18 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session), sel_currentFrame);
  if (!v18)
    goto LABEL_30;
  v19 = v18;
  v258 = v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  v20 = (void *)MEMORY[0x1DF091D08]();
  v21 = v19;

  if (!v20)
  {

LABEL_30:
    v57 = v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_capturedFrame;
    goto LABEL_31;
  }
  CameraStreamManager = a1;
  v22 = OBJC_IVAR____TtC10RealityKit10RKARSystem_lastARFrameTimeStamp;
  v23 = *(double *)(v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_lastARFrameTimeStamp);
  v257 = v4;
  if (v23 <= 0.0)
    goto LABEL_24;
  v24 = v4;
  objc_msgSend(v21, sel_timestamp);
  if (v25 != *(double *)(v4 + v22))
    goto LABEL_24;
  usleep(0x1F4u);
  v26 = objc_msgSend(*(id *)(v4 + v17), sel_currentFrame);
  if (!v26)
    goto LABEL_34;
  v27 = v26;
  objc_msgSend(v26, sel_timestamp);
  if (v28 != *(double *)(v24 + v22))
    goto LABEL_99;

  objc_msgSend(v21, sel_timestamp);
  if (v29 != *(double *)(v24 + v22))
    goto LABEL_24;
  usleep(0x1F4u);
  v30 = objc_msgSend(*(id *)(v24 + v17), sel_currentFrame);
  if (!v30)
    goto LABEL_34;
  v27 = v30;
  objc_msgSend(v30, sel_timestamp);
  if (v31 != *(double *)(v24 + v22))
    goto LABEL_99;

  objc_msgSend(v21, sel_timestamp);
  if (v32 != *(double *)(v24 + v22))
    goto LABEL_24;
  usleep(0x1F4u);
  v33 = objc_msgSend(*(id *)(v24 + v17), sel_currentFrame);
  if (!v33)
    goto LABEL_34;
  v27 = v33;
  objc_msgSend(v33, sel_timestamp);
  if (v34 != *(double *)(v24 + v22))
    goto LABEL_99;

  objc_msgSend(v21, sel_timestamp);
  if (v35 != *(double *)(v24 + v22))
    goto LABEL_24;
  usleep(0x1F4u);
  v36 = objc_msgSend(*(id *)(v24 + v17), sel_currentFrame);
  if (!v36)
  {
LABEL_34:

    v57 = v24 + OBJC_IVAR____TtC10RealityKit10RKARSystem_capturedFrame;
LABEL_31:
    v58 = *(Class *)v57;
    *(_OWORD *)v57 = 0u;
    *(_OWORD *)(v57 + 16) = 0u;
LABEL_191:

    return;
  }
  v27 = v36;
  objc_msgSend(v36, sel_timestamp);
  if (v37 == *(double *)(v24 + v22))
  {

    objc_msgSend(v21, sel_timestamp);
    if (v38 == *(double *)(v24 + v22))
    {
      usleep(0x1F4u);
      v39 = objc_msgSend(*(id *)(v24 + v17), sel_currentFrame);
      if (v39)
      {
        v27 = v39;
        objc_msgSend(v39, sel_timestamp);
        v41 = *(double *)(v24 + v22);
        if (v40 == v41)
          v42 = v27;
        else
          v42 = v21;
        if (v40 == v41)
          v27 = v21;
        goto LABEL_100;
      }
      goto LABEL_34;
    }
LABEL_24:
    v27 = v21;
    goto LABEL_25;
  }
LABEL_99:
  v42 = v21;
LABEL_100:

  v21 = v42;
LABEL_25:

  objc_msgSend(v27, sel_timestamp);
  v43 = v257;
  *(_QWORD *)(v257 + v22) = v44;
  v45 = v27;
  v46 = RKARSystem.orientation.getter();
  v47 = v43 + OBJC_IVAR____TtC10RealityKit10RKARSystem_capturedFrame;
  v48 = *(void **)(v43 + OBJC_IVAR____TtC10RealityKit10RKARSystem_capturedFrame);
  *(_QWORD *)v47 = v45;
  *(_QWORD *)(v47 + 8) = v46;
  *(double *)(v47 + 16) = a2;
  *(double *)(v47 + 24) = a3;

  swift_retain();
  dispatch thunk of __RERenderGraphEmitter.__handle.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  RERenderGraphEmitterAssetSetRuntimeSettingUInt32();
  v49 = objc_msgSend(*(id *)(v43 + v17), sel_configuration);
  if (v49)
  {
    v50 = v49;
    v51 = ~objc_msgSend(v49, sel_frameSemantics) & 3;
    v52 = objc_msgSend(v50, sel_frameSemantics);

    v53 = v258;
    if (v51)
    {
      LODWORD(v255) = 0;
      v56 = v52 & 1;
    }
    else
    {
      v54 = *(__CVBuffer **)(*(_QWORD *)(v43 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache) + 56);
      if (v54)
      {
        v55 = CVMetalTextureGetTexture(v54);
        swift_unknownObjectRelease();
        LODWORD(v255) = v55 != 0;
        v56 = (v55 == 0) | v52;
      }
      else
      {
        LODWORD(v255) = 0;
        v56 = 1;
      }
    }
    LODWORD(v252) = v56;
  }
  else
  {
    LODWORD(v252) = 0;
    LODWORD(v255) = 0;
    v53 = v258;
  }
  v256.super.isa = v45;
  v59 = MEMORY[0x1DF091D08](v53);
  if (!v59)
  {
    __break(1u);
LABEL_196:
    __break(1u);
LABEL_197:
    __break(1u);
LABEL_198:
    __break(1u);
    goto LABEL_199;
  }
  v60 = (void *)v59;
  v61 = (unsigned __int8 *)(v59 + OBJC_IVAR____TtC10RealityKit6ARView___disableComposition);
  swift_beginAccess();
  v62 = *v61;

  v63 = MEMORY[0x1DF091D08](v53);
  LODWORD(v253) = v62;
  if (v63)
  {
    v64 = (void *)v63;
    v65 = v62 ^ 1;
    v66 = v63 + OBJC_IVAR____TtC10RealityKit6ARView_environment;
    swift_beginAccess();
    v67 = *(void **)(v66 + 16);
    v68 = *(unsigned __int8 *)(v66 + 24);
    outlined copy of ARView.Environment.Background.Value(v67, v68);
    swift_retain();

    outlined copy of ARView.Environment.Background.Value(v67, v68);
    outlined consume of ARView.Environment.Background.Value(v67, v68);
    swift_release();
    if (!v68)
      goto LABEL_44;
    if (v68 == 1)
    {
      outlined consume of ARView.Environment.Background.Value(v67, 1);
      v65 &= v255 | v252;
      goto LABEL_44;
    }
    outlined consume of ARView.Environment.Background.Value(v67, 2);
  }
  v65 = 0;
LABEL_44:
  v69 = OBJC_IVAR____TtC10RealityKit10RKARSystem_shouldRenderCameraFeed;
  *(_BYTE *)(v43 + OBJC_IVAR____TtC10RealityKit10RKARSystem_shouldRenderCameraFeed) = v65;
  v70 = *(_BYTE *)(v43 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions);
  v254 = (_QWORD *)OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions;
  if ((v70 & 0x20) != 0)
    v71 = &OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___postProcessingCombinedRenderGraph;
  else
    v71 = &OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___postProcessingCombinedHDRRenderGraph;
  RKARSystem.cameraRenderGraph.getter(v71);
  RERenderGraphAssetSetRuntimeNodeSettingBool();
  v72 = (uint64_t)&unk_1F01D3000;
  if (*(_BYTE *)(v43 + v69) != 1)
  {
LABEL_59:
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
    swift_release();
    if (!RFGetSceneUnderstandingServiceFromRE())
      goto LABEL_68;
    static __ServiceLocator.shared.getter();
    v102 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
    swift_release();
    if (!MEMORY[0x1DF0912C4](v102))
      goto LABEL_68;
    IsDepthFeatheringEnabled = RFSceneUnderstandingServiceIsDepthFeatheringEnabled();
    RESceneUnderstandingServiceIsGuidedFilterOcclusionEnabled();
    v104 = (char *)MEMORY[0x1DF091D08](v53);
    if (!v104)
    {
      if ((IsDepthFeatheringEnabled & 1) == 0)
        goto LABEL_68;
LABEL_67:
      if (one-time initialization token for __useARQuickLookFeatheringSettings != -1)
        goto LABEL_194;
      while (1)
      {
LABEL_68:
        v107 = v257;
        v108 = (_QWORD *)(v257 + OBJC_IVAR____TtC10RealityKit10RKARSystem_suDepthFeatheringMaterial);
        swift_beginAccess();
        v109 = v108[3];
        if (!v109)
          goto LABEL_196;
        v110 = v108[4];
        v111 = __swift_project_boxed_opaque_existential_1(v108, v108[3]);
        v112 = *(_QWORD *)(v109 - 8);
        v113 = MEMORY[0x1E0C80A78](v111);
        v115 = (char *)&v250 - ((v114 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, __n128))(v112 + 16))(v115, v113);
        (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v109, v110);
        (*(void (**)(char *, uint64_t))(v112 + 8))(v115, v109);
        dispatch thunk of __MaterialResource.coreAsset.getter();
        swift_release();
        REMaterialAssetSetFloat();
        v116 = (_QWORD *)(v107 + *(_QWORD *)(v72 + 3048));
        swift_beginAccess();
        v117 = v116[3];
        if (!v117)
          goto LABEL_197;
        v118 = v116[4];
        v119 = __swift_project_boxed_opaque_existential_1(v116, v116[3]);
        v120 = *(_QWORD *)(v117 - 8);
        v121 = MEMORY[0x1E0C80A78](v119);
        v123 = (char *)&v250 - ((v122 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, __n128))(v120 + 16))(v123, v121);
        (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v117, v118);
        (*(void (**)(char *, uint64_t))(v120 + 8))(v123, v117);
        dispatch thunk of __MaterialResource.coreAsset.getter();
        swift_release();
        REMaterialAssetSetFloat();
        RKARSystem.updateGuidedFilterOcclusion(viewportSize:)((CGSize)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));
        v124 = *(_QWORD *)((char *)v254 + v107);
        RKARSystem.cameraRenderGraph.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___cameraRenderGraph);
        if ((v124 & 0x80) != 0 || ((v255 | v252) & 1) == 0)
        {
          RERenderGraphAssetSetRuntimeNodeSettingBool();
          RERenderGraphAssetSetRuntimeNodeSettingBool();
          RERenderGraphAssetSetRuntimeNodeSettingBool();
          RERenderGraphAssetSetRuntimeNodeSettingBool();
          RERenderGraphAssetSetRuntimeNodeSettingBool();
        }
        else
        {
          RERenderGraphAssetSetRuntimeNodeSettingBool();
          RERenderGraphAssetSetRuntimeNodeSettingBool();
          RERenderGraphAssetSetRuntimeNodeSettingBool();
          RERenderGraphAssetSetRuntimeNodeSettingBool();
          RERenderGraphAssetSetRuntimeNodeSettingBool();
          v125 = (_QWORD *)(v107 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraSegmentationCompositeMaterial);
          swift_beginAccess();
          v126 = v125[3];
          if (v126)
          {
            v127 = v125[4];
            v128 = __swift_project_boxed_opaque_existential_1(v125, v125[3]);
            v129 = *(_QWORD *)(v126 - 8);
            v130 = MEMORY[0x1E0C80A78](v128);
            v132 = (char *)&v250 - ((v131 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, __n128))(v129 + 16))(v132, v130);
            (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v126, v127);
            (*(void (**)(char *, uint64_t))(v129 + 8))(v132, v126);
            dispatch thunk of __MaterialResource.coreAsset.getter();
            swift_release();
            REMaterialAssetSetFloat4x4F();
          }
          v133 = v258;
          v134 = MEMORY[0x1DF091D08](v258);
          if (v134)
          {
            v135 = (void *)v134;
            if (!*(_QWORD *)(v134 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
              goto LABEL_201;
            swift_retain();

            v136 = dispatch thunk of Scene.defaultCamera.getter();
            swift_release();
            if (v136)
            {
              v137 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Entity.components.modify();
              v138 = type metadata accessor for RKARSegmentationComponent();
              v139 = (void (*)(_QWORD *, _QWORD))Entity.ComponentSet.subscript.modify();
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 48))(v140, 1, v138))
              {
                v141 = *(__CVBuffer **)(*(_QWORD *)(v257 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache) + 48);
                if (v141)
                  v142 = CVMetalTextureGetTexture(v141);
                RKARSegmentationComponent.segmentationBuffer.setter();
              }
              v139(v266, 0);
              v137(v263, 0);
              swift_release();
            }
          }
          v143 = MEMORY[0x1DF091D08](v133);
          if (v143)
          {
            v144 = (void *)v143;
            if (!*(_QWORD *)(v143 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
              goto LABEL_202;
            swift_retain();

            v145 = dispatch thunk of Scene.defaultCamera.getter();
            swift_release();
            if (v145)
            {
              v146 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Entity.components.modify();
              v147 = type metadata accessor for RKARSegmentationComponent();
              v148 = (void (*)(_QWORD *, _QWORD))Entity.ComponentSet.subscript.modify();
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v147 - 8) + 48))(v149, 1, v147))
              {
                v150 = *(__CVBuffer **)(*(_QWORD *)(v257 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache) + 56);
                if (v150)
                  v151 = CVMetalTextureGetTexture(v150);
                RKARSegmentationComponent.estimatedDepthData.setter();
              }
              v148(v266, 0);
              v146(v263, 0);
              swift_release();
            }
          }
          v152 = MEMORY[0x1DF091D08](v133);
          if (v152)
          {
            v153 = (void *)v152;
            if (!*(_QWORD *)(v152 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
              goto LABEL_203;
            swift_retain();

            v154 = dispatch thunk of Scene.defaultCamera.getter();
            swift_release();
            if (v154)
            {
              v155 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Entity.components.modify();
              v156 = type metadata accessor for RKARSegmentationComponent();
              v157 = (void (*)(_QWORD *, _QWORD))Entity.ComponentSet.subscript.modify();
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v156 - 8) + 48))(v158, 1, v156))
              {
                v159 = *(_QWORD *)(v257 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache);
                v160 = *(void **)(v159 + 32);
                if (v160)
                {
                  v161 = *(void **)(v159 + 40);
                  v162 = v160;
                  v163 = v161;
                  if (CVMetalTextureGetTexture((CVMetalTextureRef)v162))
                  {
                    CVMetalTextureGetTexture(v163);

                    swift_unknownObjectRelease();
                  }
                  else
                  {

                  }
                  v133 = v258;
                }
                RKARSegmentationComponent.cameraTextureY.setter();
              }
              v157(v266, 0);
              v155(v263, 0);
              swift_release();
            }
          }
          v164 = MEMORY[0x1DF091D08](v133);
          v107 = v257;
          if (v164)
          {
            v165 = (void *)v164;
            if (!*(_QWORD *)(v164 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
              goto LABEL_204;
            swift_retain();

            v166 = dispatch thunk of Scene.defaultCamera.getter();
            swift_release();
            if (v166)
            {
              v167 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Entity.components.modify();
              v168 = type metadata accessor for RKARSegmentationComponent();
              v169 = (void (*)(_QWORD *, _QWORD))Entity.ComponentSet.subscript.modify();
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v168 - 8) + 48))(v170, 1, v168))
              {
                v171 = *(_QWORD *)(v257 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache);
                v172 = *(void **)(v171 + 32);
                if (v172)
                {
                  v173 = *(void **)(v171 + 40);
                  v174 = v172;
                  v175 = v173;
                  if (CVMetalTextureGetTexture((CVMetalTextureRef)v174))
                  {
                    v176 = CVMetalTextureGetTexture(v175);

                    swift_unknownObjectRelease();
                  }
                  else
                  {

                  }
                }
                RKARSegmentationComponent.cameraTextureCbCr.setter();
              }
              v169(v266, 0);
              v167(v263, 0);
              swift_release();
              v107 = v257;
            }
          }
        }
        if ((v253 & 1) == 0)
        {
          v177 = v116[3];
          if (!v177)
            goto LABEL_200;
          v178 = v116[4];
          v179 = __swift_project_boxed_opaque_existential_1(v116, v116[3]);
          v180 = *(_QWORD *)(v177 - 8);
          v181 = MEMORY[0x1E0C80A78](v179);
          v183 = (char *)&v250 - ((v182 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, __n128))(v180 + 16))(v183, v181);
          (*(void (**)(uint64_t, uint64_t))(v178 + 8))(v177, v178);
          (*(void (**)(char *, uint64_t))(v180 + 8))(v183, v177);
          dispatch thunk of __MaterialResource.coreAsset.getter();
          swift_release();
          REMaterialAssetSetFloat();
        }
        isa = v256.super.isa;
        if (*(_BYTE *)(v107 + OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame) == 1)
          RKARSystem.updateCameraWorldMatrix(from:)(v256.super.isa);
        if (*(_BYTE *)(v107 + OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame) == 1)
          RKARSystem.updateCameraProjectionMatrix(from:viewportSize:)(isa, a2, a3);
        RKARSystem.updateLighting(_:)(isa);
        v255 = OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore;
        v185 = *(id *)(v107 + OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore);
        OS_dispatch_semaphore.wait()();

        v186 = (_QWORD *)(v107 + OBJC_IVAR____TtC10RealityKit10RKARSystem_removedAnchors);
        swift_beginAccess();
        v254 = v186;
        v187 = *v186;
        v188 = *(_QWORD *)(*v186 + 16);
        v189 = MEMORY[0x1E0DEE9D8];
        if (v188)
          break;
LABEL_131:
        v199 = (uint64_t *)(v107 + OBJC_IVAR____TtC10RealityKit10RKARSystem_addedAnchors);
        swift_beginAccess();
        v253 = v199;
        v200 = *v199;
        v201 = *(_QWORD *)(*v199 + 16);
        v202 = MEMORY[0x1E0DEE9D8];
        v258 = v189;
        if (v201)
        {
          v268 = MEMORY[0x1E0DEE9D8];
          swift_bridgeObjectRetain();
          specialized ContiguousArray.reserveCapacity(_:)();
          v190 = specialized Set.startIndex.getter(v200);
          v204 = v203;
          v206 = v205 & 1;
          v192 = v200 + 56;
          while ((v190 & 0x8000000000000000) == 0 && (uint64_t)v190 < 1 << *(_BYTE *)(v200 + 32))
          {
            if (((*(_QWORD *)(v192 + ((v190 >> 3) & 0xFFFFFFFFFFFFF8)) >> v190) & 1) == 0)
              goto LABEL_163;
            if (*(_DWORD *)(v200 + 36) != v204)
              goto LABEL_164;
            v207 = *(id *)(*(_QWORD *)(v200 + 48) + 8 * v190);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v208 = specialized _NativeSet.index(after:)(v190, v204, v206 & 1, v200);
            v190 = v208;
            v204 = v209;
            v206 = v210 & 1;
            if (!--v201)
            {
              outlined consume of Set<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>.Index._Variant(v208, v209, v210 & 1);
              v202 = v268;
              swift_bridgeObjectRelease();
              v107 = v257;
              v189 = v258;
              goto LABEL_139;
            }
          }
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
          goto LABEL_165;
        }
LABEL_139:
        v211 = (uint64_t *)(v107 + OBJC_IVAR____TtC10RealityKit10RKARSystem_updatedAnchors);
        swift_beginAccess();
        v212 = *v211;
        v190 = *(_QWORD *)(*v211 + 16);
        v192 = MEMORY[0x1E0DEE9D8];
        if (v190)
        {
          CameraStreamManager = (uint64_t)v211;
          v252 = v202;
          v267 = MEMORY[0x1E0DEE9D8];
          swift_bridgeObjectRetain();
          specialized ContiguousArray.reserveCapacity(_:)();
          v213 = specialized Set.startIndex.getter(v212);
          v215 = v214;
          v217 = v216 & 1;
          v192 = v212 + 56;
          while ((v213 & 0x8000000000000000) == 0 && v213 < 1 << *(_BYTE *)(v212 + 32))
          {
            if (((*(_QWORD *)(v192 + (((unint64_t)v213 >> 3) & 0xFFFFFFFFFFFFF8)) >> v213) & 1) == 0)
              goto LABEL_166;
            if (*(_DWORD *)(v212 + 36) != v215)
              goto LABEL_167;
            v218 = *(id *)(*(_QWORD *)(v212 + 48) + 8 * v213);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v219 = specialized _NativeSet.index(after:)(v213, v215, v217 & 1, v212);
            v213 = v219;
            v215 = v220;
            v217 = v221 & 1;
            if (!--v190)
            {
              outlined consume of Set<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>.Index._Variant(v219, v220, v221 & 1);
              v190 = v267;
              swift_bridgeObjectRelease();
              v189 = v258;
              v192 = MEMORY[0x1E0DEE9D8];
              v211 = (uint64_t *)CameraStreamManager;
              v202 = v252;
              goto LABEL_148;
            }
          }
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
          goto LABEL_168;
        }
        v190 = MEMORY[0x1E0DEE9D8];
LABEL_148:
        v222 = MEMORY[0x1E0DEE9E8];
        *v254 = MEMORY[0x1E0DEE9E8];
        swift_bridgeObjectRelease();
        *v253 = v222;
        swift_bridgeObjectRelease();
        *v211 = v222;
        swift_bridgeObjectRelease();
        v223 = *(id *)(v257 + v255);
        OS_dispatch_semaphore.signal()();

        RKARSystem.removeAnchors(_:)(v189);
        RKARSystem.addAnchors(_:)(v202);
        swift_bridgeObjectRelease();
        specialized RKARSystem.updateAnchors(_:frame:)(v190);
        if (!(v190 >> 62))
        {
          v72 = *(_QWORD *)((v190 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v72)
            goto LABEL_169;
          goto LABEL_150;
        }
LABEL_168:
        swift_bridgeObjectRetain();
        v72 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v72)
        {
LABEL_169:
          swift_bridgeObjectRelease();
          v225 = MEMORY[0x1E0DEE9D8];
          goto LABEL_170;
        }
LABEL_150:
        v267 = v192;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v72 & ~(v72 >> 63), 0);
        if (v72 < 0)
        {
          __break(1u);
          goto LABEL_193;
        }
        v224 = 0;
        v225 = v267;
        do
        {
          if ((v190 & 0xC000000000000001) != 0)
            v226 = (id)MEMORY[0x1DF0906F4](v224, v190);
          else
            v226 = *(id *)(v190 + 8 * v224 + 32);
          v227 = v226;
          v228 = *(int *)(v262 + 48);
          v229 = objc_msgSend(v226, sel_identifier);
          v230 = (uint64_t)v260;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          *(_QWORD *)(v230 + v228) = v227;
          v267 = v225;
          v232 = *(_QWORD *)(v225 + 16);
          v231 = *(_QWORD *)(v225 + 24);
          if (v232 >= v231 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v231 > 1, v232 + 1, 1);
            v230 = (uint64_t)v260;
            v225 = v267;
          }
          ++v224;
          *(_QWORD *)(v225 + 16) = v232 + 1;
          outlined init with take of vImage_CGImageFormat?(v230, v225+ ((*(unsigned __int8 *)(v261 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v261 + 80))+ *(_QWORD *)(v261 + 72) * v232, (uint64_t *)&demangling cache variable for type metadata for (UUID, ARAnchor));
        }
        while (v72 != v224);
        swift_bridgeObjectRelease();
        v192 = MEMORY[0x1E0DEE9D8];
LABEL_170:
        v233 = v258;
        if (*(_QWORD *)(v225 + 16))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, ARAnchor>);
          v234 = static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          v234 = MEMORY[0x1E0DEE9E0];
        }
        v267 = v234;
        v235 = swift_bridgeObjectRetain();
        v236 = 0;
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v235, 1, &v267);
        swift_bridgeObjectRelease();
        swift_release();
        if (v233 >> 62)
        {
          swift_bridgeObjectRetain();
          v237 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v237)
          {
LABEL_185:
            swift_bridgeObjectRelease();
            v239 = MEMORY[0x1E0DEE9D8];
            goto LABEL_186;
          }
        }
        else
        {
          v237 = *(_QWORD *)((v233 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v237)
            goto LABEL_185;
        }
        v260 = 0;
        v267 = v192;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v237 & ~(v237 >> 63), 0);
        if ((v237 & 0x8000000000000000) == 0)
        {
          v238 = 0;
          v239 = v267;
          v240 = v233 & 0xC000000000000001;
          do
          {
            if (v240)
              v241 = (id)MEMORY[0x1DF0906F4](v238, v233);
            else
              v241 = *(id *)(v233 + 8 * v238 + 32);
            v242 = v241;
            v243 = *(int *)(v262 + 48);
            v244 = objc_msgSend(v241, sel_identifier);
            v245 = (uint64_t)v259;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            *(_QWORD *)(v245 + v243) = v242;
            v267 = v239;
            v247 = *(_QWORD *)(v239 + 16);
            v246 = *(_QWORD *)(v239 + 24);
            if (v247 >= v246 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v246 > 1, v247 + 1, 1);
              v245 = (uint64_t)v259;
              v239 = v267;
            }
            ++v238;
            *(_QWORD *)(v239 + 16) = v247 + 1;
            outlined init with take of vImage_CGImageFormat?(v245, v239+ ((*(unsigned __int8 *)(v261 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v261 + 80))+ *(_QWORD *)(v261 + 72) * v247, (uint64_t *)&demangling cache variable for type metadata for (UUID, ARAnchor));
            v233 = v258;
          }
          while (v237 != v238);
          swift_bridgeObjectRelease();
          v236 = v260;
LABEL_186:
          if (*(_QWORD *)(v239 + 16))
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, ARAnchor>);
            v248 = static _DictionaryStorage.allocate(capacity:)();
          }
          else
          {
            v248 = MEMORY[0x1E0DEE9E0];
          }
          v267 = v248;
          v249 = swift_bridgeObjectRetain();
          specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v249, 1, &v267);
          if (!v236)
          {
            swift_bridgeObjectRelease();
            swift_release();
            v58 = v256.super.isa;
            RKARSystem.updateDepthOfField(for:)(v256.super.isa);
            RKARSystem.updateMotionBlur(for:)(v58);
            RKARSystem.updateCameraNoise(for:)(v58);
            RKARSystem.updateFeaturePointDebugVisualization(for:)((ARFrame)v58);
            RKARSystem.updateCollaborationState()();
            RKARSystem.updateSceneUnderstandingOptions()();
            goto LABEL_191;
          }
          goto LABEL_206;
        }
LABEL_193:
        __break(1u);
LABEL_194:
        swift_once();
      }
      v266[0] = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      v190 = specialized Set.startIndex.getter(v187);
      v192 = v191;
      v194 = v193 & 1;
      while ((v190 & 0x8000000000000000) == 0 && (uint64_t)v190 < 1 << *(_BYTE *)(v187 + 32))
      {
        if (((*(_QWORD *)(v187 + 56 + ((v190 >> 3) & 0xFFFFFFFFFFFFF8)) >> v190) & 1) == 0)
          goto LABEL_160;
        if (*(_DWORD *)(v187 + 36) != (_DWORD)v192)
          goto LABEL_161;
        v195 = *(id *)(*(_QWORD *)(v187 + 48) + 8 * v190);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v196 = specialized _NativeSet.index(after:)(v190, v192, v194 & 1, v187);
        v190 = v196;
        v192 = v197;
        v194 = v198 & 1;
        if (!--v188)
        {
          outlined consume of Set<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>.Index._Variant(v196, v197, v198 & 1);
          v189 = v266[0];
          swift_bridgeObjectRelease();
          v107 = v257;
          goto LABEL_131;
        }
      }
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    v105 = *(_QWORD *)&v104[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
    if (v105)
    {
      v106 = *(_QWORD *)(v105 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions);

      if ((IsDepthFeatheringEnabled & 1) == 0 || (v106 & 0x40) != 0)
        goto LABEL_68;
      goto LABEL_67;
    }
    goto LABEL_205;
  }
  if (!dispatch thunk of __Engine.services.getter())
    goto LABEL_198;
  dispatch thunk of __ServiceLocator.renderService.getter();
  swift_release();
  v73 = v264;
  v74 = v265;
  __swift_project_boxed_opaque_existential_1(v263, v264);
  (*(void (**)(uint64_t, uint64_t))(v74 + 24))(v73, v74);
  CameraStreamManager = RERenderManagerGetCameraStreamManager();
  v75 = *(_QWORD *)(v43 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache);
  RKARTextureCache.extractTextures(from:)(v256);
  v76 = RKARSystem.orientation.getter();
  *(double *)&v77 = ARFrame.displayToCameraMatrix(for:viewportSize:)(v76);
  v78 = (_OWORD *)(v43 + OBJC_IVAR____TtC10RealityKit10RKARSystem_displayToCameraMatrix);
  *v78 = v77;
  v78[1] = v79;
  v78[2] = v80;
  v78[3] = v81;
  exp2f(*(float *)(v43 + OBJC_IVAR____TtC10RealityKit10RKARSystem___passthroughIntensityExponent));
  v82 = (_QWORD *)(v43 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraPassthroughMaterial);
  swift_beginAccess();
  v83 = v82[3];
  if (v83)
  {
    v84 = v82[4];
    v85 = __swift_project_boxed_opaque_existential_1(v82, v82[3]);
    v86 = *(_QWORD *)(v83 - 8);
    v87 = MEMORY[0x1E0C80A78](v85);
    v89 = (char *)&v250 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v86 + 16))(v89, v87);
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v83, v84);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v89, v83);
    dispatch thunk of __MaterialResource.coreAsset.getter();
    swift_release();
    REMaterialAssetSetFloat();
    v90 = *(void **)(v75 + 32);
    if (v90)
    {
      v91 = *(void **)(v75 + 40);
      v92 = v90;
      v93 = v91;
      if (CVMetalTextureGetTexture((CVMetalTextureRef)v92))
      {
        v94 = CVMetalTextureGetTexture(v93);

        if (v94)
        {
          v95 = v82[3];
          if (v95)
          {
            v96 = v82[4];
            v97 = __swift_project_boxed_opaque_existential_1(v82, v82[3]);
            v250 = (uint64_t)&v250;
            v98 = *(_QWORD *)(v95 - 8);
            v99 = MEMORY[0x1E0C80A78](v97);
            v101 = (char *)&v250 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *, __n128))(v98 + 16))(v101, v99);
            (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v96);
            (*(void (**)(char *, uint64_t))(v98 + 8))(v101, v95);
            dispatch thunk of __MaterialResource.coreAsset.getter();
            swift_release();
            RECameraStreamManagerSetARKitPassthrough();
            REMaterialAssetSetTexture();
            REMaterialAssetSetTexture();
            REMaterialAssetSetFloat4x4F();
          }
          swift_unknownObjectRelease();
        }
        swift_unknownObjectRelease();
      }
      else
      {

      }
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v263);
    v72 = (uint64_t)&unk_1F01D3000;
    goto LABEL_59;
  }
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
LABEL_204:
  __break(1u);
LABEL_205:
  __break(1u);
LABEL_206:
  swift_unexpectedError();
  __break(1u);
}

void specialized RKARSystem.updateCommon(engine:viewportSize:timeDelta:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t);
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;

  v1 = type metadata accessor for __AssetRef();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR____TtC10RealityKit10RKARSystem_prevOrientation;
  RKARSystem.orientation.getter();
  *(_QWORD *)(v0 + v5) = RKARSystem.orientation.getter();
  swift_retain();
  dispatch thunk of __RERenderGraphEmitter.__handle.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  v6 = *(void (**)(char *, uint64_t))(v2 + 8);
  v6(v4, v1);
  RERenderGraphEmitterAssetSetRuntimeSettingBool();
  swift_retain();
  dispatch thunk of __RERenderGraphEmitter.__handle.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  v6(v4, v1);
  RERenderGraphEmitterAssetSetRuntimeSettingBool();
  v7 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session), sel_configuration);
  if (v7
    && (v8 = v7,
        v9 = objc_msgSend(v7, sel_videoFormat),
        v8,
        v10 = objc_msgSend(v9, sel_device),
        v9,
        v10))
  {

  }
  else
  {
    swift_retain();
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    v6(v4, v1);
    RERenderGraphEmitterAssetSetRuntimeSettingBool();
  }
}

uint64_t specialized RKARSystem.session(_:didUpdate:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v20 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS();
  v7 = *(_QWORD *)(v19 - 8);
  *(_QWORD *)&v8 = MEMORY[0x1E0C80A78](v19).n128_u64[0];
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(a1, sel_renderFramesPerSecond, v8);
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for OS_dispatch_queue);
  v12 = (void *)static OS_dispatch_queue.main.getter();
  objc_msgSend(a1, sel_timestamp);
  v14 = v13;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v1;
  v15[3] = v14;
  v15[4] = v11;
  aBlock[4] = partial apply for closure #1 in RKARSystem.session(_:didUpdate:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_10;
  v16 = _Block_copy(aBlock);
  v17 = v1;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v4, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1DF090508](0, v10, v6, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v19);
}

void specialized RKARSystem.session(_:didAdd:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  int isUniquelyReferenced_nonNull_native;
  void *v22;
  id v23;
  int v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  v4 = OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore;
  v5 = *(id *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore);
  OS_dispatch_semaphore.wait()();

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v29 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v6 < 0)
    {
      __break(1u);
      return;
    }
    if ((a1 & 0xC000000000000001) != 0)
    {
      v8 = 0;
      do
      {
        v9 = v8 + 1;
        MEMORY[0x1DF0906F4]();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v8 = v9;
      }
      while (v6 != v9);
    }
    else
    {
      v10 = (void **)(a1 + 32);
      do
      {
        v11 = *v10++;
        v12 = v11;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v6;
      }
      while (v6);
    }
    v7 = v29;
  }
  v13 = *(_QWORD *)(v7 + 16);
  if (v13)
  {
    v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_updatedAnchors);
    v15 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_addedAnchors);
    swift_bridgeObjectRetain();
    v16 = 0;
    do
    {
      v17 = *(void **)(v7 + 8 * v16++ + 32);
      swift_beginAccess();
      v18 = v17;
      v19 = (void *)specialized Set._Variant.remove(_:)(v18);
      swift_endAccess();

      swift_beginAccess();
      v20 = v18;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v27 = *v14;
      *v14 = 0x8000000000000000;
      v22 = (void *)specialized _NativeSet.update(with:isUnique:)(v20, isUniquelyReferenced_nonNull_native);
      *v14 = v27;
      swift_bridgeObjectRelease();
      swift_endAccess();

      swift_beginAccess();
      v23 = v20;
      v24 = swift_isUniquelyReferenced_nonNull_native();
      v28 = *v15;
      *v15 = 0x8000000000000000;
      v25 = (void *)specialized _NativeSet.update(with:isUnique:)(v23, v24);
      *v15 = v28;
      swift_bridgeObjectRelease();
      swift_endAccess();

    }
    while (v13 != v16);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v26 = *(id *)(v2 + v4);
  OS_dispatch_semaphore.signal()();

}

void specialized RKARSystem.session(_:didUpdate:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  id v17;
  int isUniquelyReferenced_nonNull_native;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore;
  v5 = *(id *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore);
  OS_dispatch_semaphore.wait()();

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v22 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v6 < 0)
    {
      __break(1u);
      return;
    }
    if ((a1 & 0xC000000000000001) != 0)
    {
      v8 = 0;
      do
      {
        v9 = v8 + 1;
        MEMORY[0x1DF0906F4]();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v8 = v9;
      }
      while (v6 != v9);
    }
    else
    {
      v10 = (void **)(a1 + 32);
      do
      {
        v11 = *v10++;
        v12 = v11;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v6;
      }
      while (v6);
    }
    v7 = v22;
  }
  v13 = *(_QWORD *)(v7 + 16);
  if (v13)
  {
    v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_updatedAnchors);
    swift_bridgeObjectRetain();
    v15 = 0;
    do
    {
      v16 = *(void **)(v7 + 8 * v15++ + 32);
      swift_beginAccess();
      v17 = v16;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v21 = *v14;
      *v14 = 0x8000000000000000;
      v19 = (void *)specialized _NativeSet.update(with:isUnique:)(v17, isUniquelyReferenced_nonNull_native);
      *v14 = v21;
      swift_bridgeObjectRelease();
      swift_endAccess();

    }
    while (v13 != v15);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v20 = *(id *)(v2 + v4);
  OS_dispatch_semaphore.signal()();

}

void specialized RKARSystem.session(_:didRemove:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  int isUniquelyReferenced_nonNull_native;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore;
  v5 = *(id *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore);
  OS_dispatch_semaphore.wait()();

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v25 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v6 < 0)
    {
      __break(1u);
      return;
    }
    if ((a1 & 0xC000000000000001) != 0)
    {
      v8 = 0;
      do
      {
        v9 = v8 + 1;
        MEMORY[0x1DF0906F4]();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v8 = v9;
      }
      while (v6 != v9);
    }
    else
    {
      v10 = (void **)(a1 + 32);
      do
      {
        v11 = *v10++;
        v12 = v11;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v6;
      }
      while (v6);
    }
    v7 = v25;
  }
  v13 = *(_QWORD *)(v7 + 16);
  if (v13)
  {
    v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_removedAnchors);
    swift_bridgeObjectRetain();
    v15 = 0;
    do
    {
      v16 = *(void **)(v7 + 8 * v15++ + 32);
      swift_beginAccess();
      v17 = v16;
      v18 = (void *)specialized Set._Variant.remove(_:)(v17);
      swift_endAccess();

      swift_beginAccess();
      v19 = (void *)specialized Set._Variant.remove(_:)(v17);
      swift_endAccess();

      swift_beginAccess();
      v20 = v17;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v24 = *v14;
      *v14 = 0x8000000000000000;
      v22 = (void *)specialized _NativeSet.update(with:isUnique:)(v20, isUniquelyReferenced_nonNull_native);
      *v14 = v24;
      swift_bridgeObjectRelease();
      swift_endAccess();

    }
    while (v13 != v15);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v23 = *(id *)(v2 + v4);
  OS_dispatch_semaphore.signal()();

}

void specialized RKARSystem.SessionDelegate.session(_:didOutputCollaborationData:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  Class isa;
  void *v14;
  void *v15;
  id v16[2];

  v16[1] = *(id *)MEMORY[0x1E0C80C00];
  v3 = MEMORY[0x1DF091D08](v1 + OBJC_IVAR____TtCC10RealityKit10RKARSystemP33_7C42569567E429B6AB2725E2C535D52915SessionDelegate_system);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = (void *)objc_opt_self();
    v16[0] = 0;
    v6 = a1;
    v7 = objc_msgSend(v5, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v6, 1, v16);
    v8 = v16[0];
    if (v7)
    {
      v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v10;

      v12 = objc_msgSend(v6, sel_vioDataType) == (id)7;
      isa = Data._bridgeToObjectiveC()().super.isa;
      RKARSystem.sendDataToPeers(_:sendUnreliably:)(isa, v12);

      outlined consume of Data._Representation(v9, v11);
    }
    else
    {
      v14 = v8;
      v15 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      v6 = v4;
    }

  }
}

void specialized RKARSystem.SessionDelegate.session(_:requestedRunWith:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char *v12;
  id v13;

  v1 = MEMORY[0x1DF091D08](v0 + OBJC_IVAR____TtCC10RealityKit10RKARSystemP33_7C42569567E429B6AB2725E2C535D52915SessionDelegate_system);
  if (v1)
  {
    v2 = v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
    v13 = (id)v1;
    v3 = (void *)MEMORY[0x1DF091D08](v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);

    if (!v3)
    {

      return;
    }
    v4 = MEMORY[0x1DF091D08](v2);
    if (!v4)
    {
      __break(1u);
      goto LABEL_12;
    }
    v5 = (void *)v4;
    v6 = v4 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
    swift_beginAccess();
    LOBYTE(v6) = *(_BYTE *)(v6 + 2);

    if ((v6 & 1) != 0)
    {
      v7 = MEMORY[0x1DF091D08](v2);
      if (v7)
      {
        v8 = (char *)v7;
        v9 = MEMORY[0x1DF091D08](v2);
        if (v9)
        {
          v10 = (void *)v9;
          v11 = v9 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
          swift_beginAccess();
          LOBYTE(v11) = *(_BYTE *)(v11 + 3);

          v12 = &v8[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
          swift_beginAccess();
          v12[2] = v11;

          return;
        }
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
LABEL_13:
      __break(1u);
      return;
    }

  }
}

uint64_t sub_1D95D110C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in RKARSystem.session(_:didUpdate:)()
{
  uint64_t v0;

  closure #1 in RKARSystem.session(_:didUpdate:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 32));
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

void specialized RKARSystem.fallbackAmbientColor.setter(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void (*v6)(_BYTE *, _QWORD);
  id v7;
  void (*v8)(_BYTE *, _QWORD);
  _BYTE v9[32];

  v2 = v1;
  v3 = OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientColor;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientColor);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientColor) = a1;
  v5 = a1;

  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions) & 2) != 0)
  {
    if (*(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_lightEntity))
    {
      type metadata accessor for AmbientLight();
      v6 = (void (*)(_BYTE *, _QWORD))HasAmbientLight.light.modify();
      __AmbientLightComponent.intensity.setter();
      v6(v9, 0);
      v7 = *(id *)(v2 + v3);
      v8 = (void (*)(_BYTE *, _QWORD))HasAmbientLight.light.modify();
      __AmbientLightComponent.color.setter();
      v8(v9, 0);
    }
  }
}

uint64_t outlined init with take of Material(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined assign with take of Material?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0DEB190], MEMORY[0x1E0DEB188]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

uint64_t Entity.__accessibilityWrappers(rootEntityWrapper:)(id a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  objc_class *v8;
  char *v9;
  id v10;
  objc_class *v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v23;
  objc_super v24;
  objc_super v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v2 = type metadata accessor for Entity.ChildCollection();
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.ChildCollection.IndexingIterator<Entity.ChildCollection>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEE9D8];
  v28 = MEMORY[0x1E0DEE9D8];
  if ((Entity.__isAccessibilityEnabled.getter() & 1) == 0)
  {
    if ((Entity.__isAccessibilityRoot.getter() & 1) != 0)
    {
      v11 = (objc_class *)type metadata accessor for __EntityAccessibilityWrapper();
      v12 = (char *)objc_allocWithZone(v11);
      swift_weakInit();
      swift_weakAssign();
      *(_QWORD *)&v12[OBJC_IVAR____TtC10RealityKit28__EntityAccessibilityWrapper_rootEntityWrapper] = a1;
      v25.receiver = v12;
      v25.super_class = v11;
      v13 = a1;
      a1 = objc_msgSendSuper2(&v25, sel_init);
      v14 = a1;
    }
    else
    {
      v14 = 0;
    }
    v15 = a1;
    v27 = v7;
    type metadata accessor for Entity();
    HasHierarchy.children.getter();
    Entity.ChildCollection.makeIterator()();
    while (1)
    {
      Entity.ChildCollection.IndexingIterator.next()();
      if (!v26)
        break;
      v16 = Entity.__accessibilityWrappers(rootEntityWrapper:)(a1);
      specialized Array.append<A>(contentsOf:)(v16);
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v17 = v27;
    if (!v14)
      goto LABEL_15;
    if (v27 >> 62)
    {
      v20 = v14;
      swift_bridgeObjectRetain();
      v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v21)
        goto LABEL_14;
    }
    else
    {
      v18 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
      v19 = v14;
      if (v18)
      {
LABEL_14:

LABEL_15:
        specialized Array.append<A>(contentsOf:)(v17);
LABEL_20:

        return v28;
      }
    }
    swift_bridgeObjectRelease();
    v14 = v14;
    MEMORY[0x1DF0903A0]();
    if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    goto LABEL_20;
  }
  v8 = (objc_class *)type metadata accessor for __EntityAccessibilityWrapper();
  v9 = (char *)objc_allocWithZone(v8);
  swift_weakInit();
  swift_weakAssign();
  *(_QWORD *)&v9[OBJC_IVAR____TtC10RealityKit28__EntityAccessibilityWrapper_rootEntityWrapper] = a1;
  v24.receiver = v9;
  v24.super_class = v8;
  v10 = a1;
  objc_msgSendSuper2(&v24, sel_init);
  MEMORY[0x1DF0903A0]();
  if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return v28;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x1DF090700](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for __EntityAccessibilityWrapper()
{
  return objc_opt_self();
}

_OWORD *Entity.__calculateScreenBoundingRect(in:)(char *a1)
{
  __int128 v2;
  __int128 v3;
  _OWORD *result;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  char v21;
  __int128 v22;
  __int128 v23;
  CGRect v24;
  CGRect v25;

  type metadata accessor for Entity();
  HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)();
  v22 = v2;
  v23 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
  result = (_OWORD *)swift_allocObject();
  v5 = vdupq_lane_s32(0, 0);
  v6 = v5;
  v6.i32[0] = v22;
  v7 = v6;
  v7.i32[1] = DWORD1(v23);
  v7.i32[2] = DWORD2(v22);
  v5.i32[0] = v23;
  v8 = v5;
  v8.i32[1] = DWORD1(v23);
  v8.i32[2] = DWORD2(v22);
  result[2] = v23;
  result[3] = v7;
  v9 = v23;
  LODWORD(v9) = v22;
  HIDWORD(v9) = v6.i32[3];
  v10 = v22;
  LODWORD(v10) = v23;
  HIDWORD(v10) = v5.i32[3];
  result[4] = v8;
  result[5] = v9;
  v5.i32[1] = DWORD1(v22);
  v6.i32[1] = DWORD1(v22);
  result[6] = v22;
  result[7] = v10;
  v6.i32[2] = DWORD2(v23);
  v5.i32[2] = DWORD2(v23);
  result[8] = v6;
  result[9] = v5;
  v11 = *(_QWORD *)&a1[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (v11)
  {
    if ((*(_BYTE *)(v11 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode) & 1) != 0
      || *(_BYTE *)(v11 + OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame) != 1)
    {
      v12 = 0;
    }
    else
    {
      v12 = *(unsigned __int8 *)(v11
                               + OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame);
    }
    v13 = 1.79769313e308;
    v14 = -1.79769313e308;
    v15 = 32;
    v16 = -1.79769313e308;
    v17 = 1.79769313e308;
    do
    {
      HasTransform.convert(position:to:)();
      v19 = COERCE_DOUBLE(ARView.project(_:isAR:)(v12, v18));
      if ((v21 & 1) == 0)
      {
        if (v17 > v19)
          v17 = v19;
        if (v13 > v20)
          v13 = v20;
        if (v16 <= v19)
          v16 = v19;
        if (v14 <= v20)
          v14 = v20;
      }
      v15 += 16;
    }
    while (v15 != 160);
    swift_setDeallocating();
    swift_deallocClassInstance();
    objc_msgSend(a1, sel_bounds);
    v25.origin.x = v17;
    v25.origin.y = v13;
    v25.size.width = v16 - v17;
    v25.size.height = v14 - v13;
    return (_OWORD *)CGRectIntersectsRect(v24, v25);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t __EntityAccessibilityWrapper.entityLabel.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v16 = type metadata accessor for AccessibilityComponent();
  v0 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringResource();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v15 - v11;
  if (swift_weakLoadStrong())
  {
    Entity.accessibilityComponent.getter((uint64_t)v2);
    AccessibilityComponent.label.getter();
    (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v16);
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v12, v6);
      v13 = String.init(localized:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      return v13;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v5, &demangling cache variable for type metadata for LocalizedStringResource?);
  if (!swift_weakLoadStrong())
    return 0;
  v13 = Entity.__accessibilityLabel.getter();
  swift_release();
  return v13;
}

id @objc __EntityAccessibilityWrapper.entityLabel.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = a1;
  v5 = a3();
  v7 = v6;

  if (v7)
  {
    v8 = (void *)MEMORY[0x1DF090310](v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  return v8;
}

uint64_t __EntityAccessibilityWrapper.entityValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v0 = type metadata accessor for AccessibilityComponent();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizedStringResource();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v16 - v12;
  if (!swift_weakLoadStrong())
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_5;
  }
  Entity.accessibilityComponent.getter((uint64_t)v3);
  AccessibilityComponent.value.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_5:
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v6, &demangling cache variable for type metadata for LocalizedStringResource?);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  v14 = String.init(localized:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  return v14;
}

uint64_t @objc __EntityAccessibilityWrapper.isEntityRoot.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v5;
  char v6;

  if (swift_weakLoadStrong())
  {
    v5 = a1;
    v6 = a3();

    swift_release();
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

id closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  dispatch_semaphore_t v11;
  id v12;
  id v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  Swift::Int (**v20)(uint64_t);
  uint64_t *boxed_opaque_existential_0;
  NSObject *v22;
  id v23;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _UNKNOWN **v29;
  _OWORD v30[2];

  v26 = a3;
  v4 = type metadata accessor for AccessibilityComponent.RotorType(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for AccessibilityEvents.RotorNavigation(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = 0;
  v11 = dispatch_semaphore_create(0);
  v12 = objc_msgSend(a1, sel_currentItem);
  v13 = objc_msgSend(v12, sel_targetElement);

  memset(v30, 0, sizeof(v30));
  if (v13)
  {
    type metadata accessor for __EntityAccessibilityWrapper();
    if (!swift_dynamicCastClass())
    {
      *((_QWORD *)&v28 + 1) = swift_getObjectType();
      *(_QWORD *)&v27 = v13;
      swift_unknownObjectRetain();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v30, &demangling cache variable for type metadata for Any?);
      goto LABEL_8;
    }
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v15 = Strong;
      *((_QWORD *)&v28 + 1) = type metadata accessor for Entity();
      *(_QWORD *)&v27 = v15;
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v30, &demangling cache variable for type metadata for Any?);
      goto LABEL_8;
    }
  }
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v30, &demangling cache variable for type metadata for Any?);
  v27 = 0u;
  v28 = 0u;
LABEL_8:
  outlined init with take of Any?((uint64_t)&v27, (uint64_t)v30);
  v16 = swift_weakLoadStrong();
  if (v16)
  {
    v17 = v16;
    outlined init with copy of AccessibilityEvents.CustomAction(v26, (uint64_t)v6, type metadata accessor for AccessibilityComponent.RotorType);
    outlined init with copy of Any?((uint64_t)v30, (uint64_t)&v27);
    swift_retain();
    v18 = objc_msgSend(a1, sel_searchDirection);
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v10;
    *(_QWORD *)(v19 + 24) = v11;
    outlined init with take of AccessibilityComponent.RotorType((uint64_t)v6, (uint64_t)v9);
    *(_QWORD *)&v9[v7[5]] = v17;
    outlined init with take of Any?((uint64_t)&v27, (uint64_t)&v9[v7[6]]);
    *(_QWORD *)&v9[v7[7]] = v18;
    v20 = (Swift::Int (**)(uint64_t))&v9[v7[8]];
    *v20 = partial apply for closure #1 in closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter;
    v20[1] = (Swift::Int (*)(uint64_t))v19;
    *((_QWORD *)&v28 + 1) = v7;
    v29 = &protocol witness table for AccessibilityEvents.RotorNavigation;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v27);
    outlined init with copy of AccessibilityEvents.CustomAction((uint64_t)v9, (uint64_t)boxed_opaque_existential_0, type metadata accessor for AccessibilityEvents.RotorNavigation);
    swift_retain();
    v22 = v11;
    Entity.sendEvent(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
    OS_dispatch_semaphore.wait()();
    swift_beginAccess();
    v23 = *(id *)(v10 + 16);
    if (v23)
      v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3400]), sel_initWithTargetElement_targetRange_, v23, 0);
    swift_unknownObjectRelease();
    swift_release();

    outlined destroy of AccessibilityEvents.CustomAction((uint64_t)v9, type metadata accessor for AccessibilityEvents.RotorNavigation);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v30, &demangling cache variable for type metadata for Any?);
    swift_release();
  }
  else
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v30, &demangling cache variable for type metadata for Any?);
    swift_release();

    swift_unknownObjectRelease();
    return 0;
  }
  return v23;
}

Swift::Int closure #1 in closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  objc_class *v4;
  char *v5;
  id v6;
  objc_super v8;
  uint64_t v9;
  _BYTE v10[32];

  v3 = (_QWORD *)(a2 + 16);
  outlined init with copy of Any(a1, (uint64_t)v10);
  type metadata accessor for Entity();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v4 = (objc_class *)type metadata accessor for __EntityAccessibilityWrapper();
    v5 = (char *)objc_allocWithZone(v4);
    swift_weakInit();
    swift_weakAssign();
    *(_QWORD *)&v5[OBJC_IVAR____TtC10RealityKit28__EntityAccessibilityWrapper_rootEntityWrapper] = 0;
    v8.receiver = v5;
    v8.super_class = v4;
    v6 = objc_msgSendSuper2(&v8, sel_init);
    swift_release();
    swift_beginAccess();
    *v3 = v6;
LABEL_5:
    swift_unknownObjectRelease();
    return OS_dispatch_semaphore.signal()();
  }
  outlined init with copy of Any(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject);
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_beginAccess();
    *v3 = v9;
    goto LABEL_5;
  }
  return OS_dispatch_semaphore.signal()();
}

uint64_t closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomActions.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v12[5];

  v5 = type metadata accessor for AccessibilityEvents.CustomAction(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v7, a2, v8);
  *(_QWORD *)&v7[*(int *)(v5 + 20)] = a3;
  v12[3] = v5;
  v12[4] = (uint64_t)&protocol witness table for AccessibilityEvents.CustomAction;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v12);
  outlined init with copy of AccessibilityEvents.CustomAction((uint64_t)v7, (uint64_t)boxed_opaque_existential_0, type metadata accessor for AccessibilityEvents.CustomAction);
  swift_retain();
  Entity.sendEvent(_:)();
  outlined destroy of AccessibilityEvents.CustomAction((uint64_t)v7, type metadata accessor for AccessibilityEvents.CustomAction);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return 1;
}

uint64_t __EntityAccessibilityWrapper.entityAccessibilityCustomContent.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  _QWORD v29[2];
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  id v32;
  uint64_t v33;

  v0 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x1E0C80A78](v0);
  v1 = type metadata accessor for AccessibilityComponent.CustomContent();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccessibilityComponent();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = swift_weakLoadStrong();
  v10 = MEMORY[0x1E0DEE9D8];
  if (Strong)
  {
    Entity.accessibilityComponent.getter((uint64_t)v8);
    v11 = AccessibilityComponent.customContent.getter();
    v12 = *(void (**)(char *, uint64_t))(v6 + 8);
    v13 = v11;
    v12(v8, v5);
    swift_release();
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
      v33 = v10;
      specialized ContiguousArray.reserveCapacity(_:)();
      v15 = (void *)objc_opt_self();
      v16 = v13 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      v31 = *(_QWORD *)(v2 + 72);
      v32 = v15;
      v17 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
      v29[1] = v13;
      v30 = v17;
      do
      {
        v30(v4, v16, v1);
        AccessibilityComponent.CustomContent.label.getter();
        v18 = String.init(localized:)();
        v19 = v2;
        v21 = v20;
        AccessibilityComponent.CustomContent.value.getter();
        v22 = String.init(localized:)();
        v24 = v23;
        v25 = (void *)MEMORY[0x1DF090310](v18, v21);
        v2 = v19;
        swift_bridgeObjectRelease();
        v26 = (void *)MEMORY[0x1DF090310](v22, v24);
        swift_bridgeObjectRelease();
        v27 = objc_msgSend(v32, sel_customContentWithLabel_value_, v25, v26);

        (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v1);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v16 += v31;
        --v14;
      }
      while (v14);
      v10 = v33;
    }
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t __EntityAccessibilityWrapper.entitySupportsAccessibilityActivateAction.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v0 = type metadata accessor for AccessibilityComponent();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AccessibilityComponent.SupportedActions();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v14 - v9;
  if (swift_weakLoadStrong())
  {
    Entity.accessibilityComponent.getter((uint64_t)v3);
    AccessibilityComponent.systemActions.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    swift_release();
    static AccessibilityComponent.SupportedActions.activate.getter();
    lazy protocol witness table accessor for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions();
    v11 = dispatch thunk of SetAlgebra.isSuperset(of:)();
    v12 = *(void (**)(char *, uint64_t))(v5 + 8);
    v12(v7, v4);
    v12(v10, v4);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

void @objc __EntityAccessibilityWrapper.entityPerformAccessibilityActivate()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Strong;
  id v8;
  _QWORD v9[5];

  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v9[3] = a3;
    v9[4] = a4;
    v9[0] = Strong;
    v8 = a1;
    swift_retain();
    Entity.sendEvent(_:)();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);

  }
}

id __EntityAccessibilityWrapper.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void __EntityAccessibilityWrapper.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id __EntityAccessibilityWrapper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for __EntityAccessibilityWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for __EntityAccessibilityWrapper()
{
  return swift_lookUpClassMethod();
}

unint64_t lazy protocol witness table accessor for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions;
  if (!lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions)
  {
    v1 = type metadata accessor for AccessibilityComponent.SupportedActions();
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0CD4B98], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions);
  }
  return result;
}

id thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?)(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;
  void *v5;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = (void *)v3();
  swift_release();

  return v5;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool)(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  LOBYTE(v3) = v3();
  swift_release();

  return v3 & 1;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [__EntityAccessibilityWrapper] and conformance [A]();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__EntityAccessibilityWrapper]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for __EntityAccessibilityWrapper();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for EntityGestureRecognizer.entity.modify in conformance EntityTranslationGestureRecognizer;
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1DF0906F4](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for REARCapturedFrame;
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation22AccessibilityComponentV0D3KitE9RotorTypeOG_So021UIAccessibilityCustomI0Cs5NeverOTg504_s10d13Kit28__Entityf19WrapperC06entityD12l14RotorsSaySo015k2G5i23CGvgAF0A10Foundation0D9g7VAAE0J4J6OXEfU_AI02__pfQ0CTf1cn_nTf4ng_n(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t aBlock;
  uint64_t v53;
  id (*v54)(uint64_t, void *);
  void *v55;
  id (*v56)(void *);
  uint64_t v57;
  uint64_t v58;

  v5 = type metadata accessor for LocalizedStringResource();
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  MEMORY[0x1E0C80A78](v5);
  v44 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v43 = (char *)&v39 - v8;
  v9 = type metadata accessor for AccessibilityComponent.RotorType(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v39 - v14;
  v16 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v16)
  {
    v39 = v2;
    v58 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v18 = *(unsigned __int8 *)(v10 + 80);
    v19 = a1 + ((v18 + 32) & ~v18);
    v20 = *(_QWORD *)(v10 + 72);
    v49 = (v18 + 24) & ~v18;
    v50 = v20;
    v47 = v18 | 7;
    v48 = v49 + v11;
    v41 = v9;
    v42 = a2;
    v51 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v40 = v15;
    do
    {
      outlined init with copy of AccessibilityEvents.CustomAction(v19, (uint64_t)v15, type metadata accessor for AccessibilityComponent.RotorType);
      v34 = swift_allocObject();
      *(_QWORD *)(v34 + 16) = a2;
      outlined init with take of AccessibilityComponent.RotorType((uint64_t)v15, v34 + v49);
      outlined init with copy of AccessibilityEvents.CustomAction(v19, (uint64_t)v12, type metadata accessor for AccessibilityComponent.RotorType);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v22 = v45;
        v21 = v46;
        v23 = v43;
        (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v43, v51, v46);
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v44, v23, v21);
        v24 = a2;
        v25 = String.init(localized:)();
        v27 = v26;
        v28 = objc_allocWithZone(MEMORY[0x1E0DC33F8]);
        v29 = (void *)MEMORY[0x1DF090310](v25, v27);
        swift_bridgeObjectRelease();
        v56 = partial apply for closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter;
        v57 = v34;
        aBlock = MEMORY[0x1E0C809B0];
        v53 = 1107296256;
        v54 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
        v55 = &block_descriptor_6_5;
        v30 = _Block_copy(&aBlock);
        v31 = v28;
        a2 = v42;
        objc_msgSend(v31, sel_initWithName_itemSearchBlock_, v29, v30);

        _Block_release(v30);
        swift_release();
        v32 = *(void (**)(char *, uint64_t))(v22 + 8);
        v12 = v51;
        v33 = v23;
        v15 = v40;
        v32(v33, v21);
      }
      else
      {
        v35 = *(_QWORD *)v12;
        v36 = objc_allocWithZone(MEMORY[0x1E0DC33F8]);
        v56 = partial apply for closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter;
        v57 = v34;
        aBlock = MEMORY[0x1E0C809B0];
        v53 = 1107296256;
        v54 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
        v55 = &block_descriptor_9_1;
        v37 = _Block_copy(&aBlock);
        v38 = a2;
        objc_msgSend(v36, sel_initWithSystemType_itemSearchBlock_, v35, v37);
        _Block_release(v37);
        swift_release();
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v19 += v50;
      --v16;
    }
    while (v16);
    return v58;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation23LocalizedStringResourceVG_So27UIAccessibilityCustomActionCs5NeverOTg5056_s10RealityKit28__EntityAccessibilityWrapperC06entityD13i15ActionsSaySo015h2G6j20CGvgAF10Foundation23efG6VXEfU_0M3Kit0O0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  _QWORD v21[3];
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];
  uint64_t v29;

  v5 = type metadata accessor for LocalizedStringResource();
  v27 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v27 + 64);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v21[1] = v2;
    v29 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v10 = *(unsigned __int8 *)(v27 + 80);
    v11 = a1 + ((v10 + 32) & ~v10);
    v12 = *(_QWORD *)(v27 + 72);
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    v26 = v12;
    v23 = v10 | 7;
    v24 = (v10 + 16) & ~v10;
    v22 = (v6 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
    v21[2] = v22 + 8;
    do
    {
      v13 = v25;
      v25(v7, v11, v5);
      v14 = String.init(localized:)();
      v16 = v15;
      v13(v7, v11, v5);
      v17 = swift_allocObject();
      (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v17 + v24, v7, v5);
      *(_QWORD *)(v17 + v22) = a2;
      v18 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
      swift_retain();
      v19 = (void *)MEMORY[0x1DF090310](v14, v16);
      swift_bridgeObjectRelease();
      aBlock[4] = partial apply for closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomActions.getter;
      aBlock[5] = v17;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
      aBlock[3] = &block_descriptor_11;
      v20 = _Block_copy(aBlock);
      objc_msgSend(v18, sel_initWithName_actionHandler_, v19, v20);

      _Block_release(v20);
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v11 += v26;
      --v8;
    }
    while (v8);
    return v29;
  }
  return result;
}

uint64_t sub_1D95D3A0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomActions.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for LocalizedStringResource() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomActions.getter(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t sub_1D95D3AE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessibilityComponent.RotorType(0) - 8) + 80);

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0 + ((v1 + 24) & ~v1), v2);
  }
  return swift_deallocObject();
}

id partial apply for closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessibilityComponent.RotorType(0) - 8) + 80);
  return closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_1D95D3BB8()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1D95D3BDC()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

Swift::Int partial apply for closure #1 in closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined init with copy of AccessibilityEvents.CustomAction(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of AccessibilityEvents.CustomAction(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type [__EntityAccessibilityWrapper] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [__EntityAccessibilityWrapper] and conformance [A];
  if (!lazy protocol witness table cache variable for type [__EntityAccessibilityWrapper] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__EntityAccessibilityWrapper]);
    result = MEMORY[0x1DF091B94](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [__EntityAccessibilityWrapper] and conformance [A]);
  }
  return result;
}

void ARView.physicsOrigin.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    Scene.physicsOrigin.getter();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

_QWORD *key path getter for ARView.physicsOrigin : ARView@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  if (*(_QWORD *)(*result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    v3 = Scene.physicsOrigin.getter();
    result = (_QWORD *)swift_release();
    *a2 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path setter for ARView.physicsOrigin : ARView(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (*(_QWORD *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    swift_retain();
    Scene.physicsOrigin.setter();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.physicsOrigin.setter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    Scene.physicsOrigin.setter();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*ARView.physicsOrigin.modify(uint64_t (*result)(uint64_t result, char a2)))(uint64_t result, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  *((_QWORD *)result + 1) = v1;
  *((_QWORD *)result + 2) = v2;
  if (*(_QWORD *)(v1 + v2))
  {
    v3 = (uint64_t *)result;
    swift_retain();
    v4 = Scene.physicsOrigin.getter();
    swift_release();
    *v3 = v4;
    return ARView.physicsOrigin.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.physicsOrigin.modify(uint64_t result, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + *(_QWORD *)(result + 16));
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
      swift_retain();
      swift_retain();
      Scene.physicsOrigin.setter();
      swift_release();
      return swift_release();
    }
    __break(1u);
  }
  else if (v2)
  {
    swift_retain();
    Scene.physicsOrigin.setter();
    return swift_release();
  }
  __break(1u);
  return result;
}

void UnlitMaterial.init(color:)(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, sel_CGColor);
  UnlitMaterial.init(color:)();

}

id SimpleMaterial.tintColor.getter()
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.color.getter(MEMORY[0x1E0CD37A0]);
}

void SimpleMaterial.tintColor.setter(void *a1)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.setter(a1, MEMORY[0x1E0CD37A8]);
}

void (*SimpleMaterial.tintColor.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  void *v3;
  id v4;

  a1[1] = v1;
  v3 = (void *)SimpleMaterial.__tintColor.getter();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return SimpleMaterial.tintColor.modify;
}

void SimpleMaterial.tintColor.modify(void **a1, char a2)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.modify(a1, a2, MEMORY[0x1E0CD37A8]);
}

uint64_t SimpleMaterial.baseColor.getter@<X0>(uint64_t a1@<X8>)
{
  return SimpleMaterial.baseColor.getter((void (*)(__n128))MEMORY[0x1E0CD3790], a1);
}

uint64_t SimpleMaterial.baseColor.setter(uint64_t a1)
{
  return SimpleMaterial.baseColor.setter(a1, MEMORY[0x1E0CD3798]);
}

uint64_t MaterialColorParameter.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  id v13;
  void *v14;
  uint64_t v15;

  v4 = type metadata accessor for __MaterialColorParameter();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 88))(v8, v4);
  v10 = v9;
  v11 = *MEMORY[0x1E0CD4030];
  if (v9 == *MEMORY[0x1E0CD4030])
  {
    (*(void (**)(_QWORD *, uint64_t))(v5 + 96))(v8, v4);
    v14 = (void *)*v8;
    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *v8);

    result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_5;
  }
  if (v9 == *MEMORY[0x1E0CD4038])
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 96))(v8, v4);
    v13 = (id)*v8;
LABEL_5:
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v10 != v11;
    return result;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void outlined consume of MaterialColorParameter(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_release();
  else

}

void (*SimpleMaterial.baseColor.modify(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  void *v8;
  int v9;
  int v10;
  int v11;
  id v12;
  void *v13;
  void (*result)(id **, char);

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[2] = v1;
  v4 = type metadata accessor for __MaterialColorParameter();
  v3[3] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[4] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[5] = malloc(v6);
  v3[6] = malloc(v6);
  v7 = malloc(v6);
  v3[7] = v7;
  v8 = malloc(v6);
  v3[8] = v8;
  SimpleMaterial.__baseColor.getter();
  (*(void (**)(_QWORD *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 88))(v7, v4);
  v10 = v9;
  v11 = *MEMORY[0x1E0CD4030];
  *((_DWORD *)v3 + 3) = *MEMORY[0x1E0CD4030];
  if (v9 == v11)
  {
    (*(void (**)(_QWORD *, uint64_t))(v5 + 96))(v7, v4);
    v13 = (void *)*v7;
    v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *v7);

    (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
    goto LABEL_5;
  }
  if (v9 == *MEMORY[0x1E0CD4038])
  {
    (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
    (*(void (**)(_QWORD *, uint64_t))(v5 + 96))(v7, v4);
    v12 = (id)*v7;
LABEL_5:
    *v3 = v12;
    *((_BYTE *)v3 + 8) = v10 != v11;
    return SimpleMaterial.baseColor.modify;
  }
  result = (void (*)(id **, char))_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void SimpleMaterial.baseColor.modify(id **a1, char a2)
{
  SimpleMaterial.baseColor.modify(a1, a2, MEMORY[0x1E0CD3798]);
}

uint64_t SimpleMaterial.init(color:roughness:isMetallic:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v11;

  v4 = type metadata accessor for MaterialScalarParameter();
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)&v6 = MEMORY[0x1E0C80A78](v4).n128_u64[0];
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(a1, sel_CGColor, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  SimpleMaterial.init(color:roughness:isMetallic:)();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
}

uint64_t SimpleMaterial.init(color:roughness:isMetallic:assetService:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  _BYTE v15[40];

  v7 = type metadata accessor for MaterialScalarParameter();
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)&v9 = MEMORY[0x1E0C80A78](v7).n128_u64[0];
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = objc_msgSend(a1, sel_CGColor, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
  outlined init with copy of SynchronizationPeerID(a4, (uint64_t)v15);
  SimpleMaterial.init(color:roughness:isMetallic:assetService:)();

  __swift_destroy_boxed_opaque_existential_1(a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a2, v7);
}

id UnlitMaterial.tintColor.getter()
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.color.getter(MEMORY[0x1E0CD36D8]);
}

void UnlitMaterial.tintColor.setter(void *a1)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.setter(a1, (void (*)(id))MEMORY[0x1E0CD36E0]);
}

void (*UnlitMaterial.tintColor.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  void *v3;
  id v4;

  a1[1] = v1;
  v3 = (void *)UnlitMaterial.__tintColor.getter();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return UnlitMaterial.tintColor.modify;
}

void UnlitMaterial.tintColor.modify(void **a1, char a2)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.modify(a1, a2, (void (*)(id))MEMORY[0x1E0CD36E0]);
}

uint64_t UnlitMaterial.baseColor.getter@<X0>(uint64_t a1@<X8>)
{
  return SimpleMaterial.baseColor.getter((void (*)(__n128))MEMORY[0x1E0CD36C8], a1);
}

uint64_t SimpleMaterial.baseColor.getter@<X0>(void (*a1)(__n128)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = type metadata accessor for __MaterialColorParameter();
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v5);
  return MaterialColorParameter.init(_:)((uint64_t)v7, a2);
}

uint64_t key path getter for SimpleMaterial.baseColor : SimpleMaterial@<X0>(void (*a1)(__n128)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  char v11;

  v4 = type metadata accessor for __MaterialColorParameter();
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v5);
  result = MaterialColorParameter.init(_:)((uint64_t)v7, (uint64_t)&v10);
  v9 = v11;
  *(_QWORD *)a2 = v10;
  *(_BYTE *)(a2 + 8) = v9;
  return result;
}

uint64_t key path setter for SimpleMaterial.baseColor : SimpleMaterial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD *))
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v14;

  v7 = type metadata accessor for __MaterialColorParameter();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (uint64_t *)((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)a1;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    *v11 = v12;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v8 + 104))(v11, *MEMORY[0x1E0CD4038], v7, v9);
    swift_retain();
  }
  else
  {
    *v11 = objc_msgSend(v12, sel_CGColor);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E0CD4030], v7);
    outlined consume of MaterialColorParameter(v12, 0);
  }
  return a5(v11);
}

uint64_t UnlitMaterial.baseColor.setter(uint64_t a1)
{
  return SimpleMaterial.baseColor.setter(a1, MEMORY[0x1E0CD36D0]);
}

uint64_t SimpleMaterial.baseColor.setter(uint64_t a1, uint64_t (*a2)(_QWORD *))
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v11;

  v4 = type metadata accessor for __MaterialColorParameter();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (uint64_t *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(id *)a1;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    *v8 = v9;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, *MEMORY[0x1E0CD4038], v4, v6);
  }
  else
  {
    *v8 = objc_msgSend(*(id *)a1, sel_CGColor, v6.n128_f64[0]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E0CD4030], v4);
    outlined consume of MaterialColorParameter(v9, 0);
  }
  return a2(v8);
}

void (*UnlitMaterial.baseColor.modify(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  void *v8;
  int v9;
  int v10;
  int v11;
  id v12;
  void *v13;
  void (*result)(id **, char);

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[2] = v1;
  v4 = type metadata accessor for __MaterialColorParameter();
  v3[3] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[4] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[5] = malloc(v6);
  v3[6] = malloc(v6);
  v7 = malloc(v6);
  v3[7] = v7;
  v8 = malloc(v6);
  v3[8] = v8;
  UnlitMaterial.__baseColor.getter();
  (*(void (**)(_QWORD *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 88))(v7, v4);
  v10 = v9;
  v11 = *MEMORY[0x1E0CD4030];
  *((_DWORD *)v3 + 3) = *MEMORY[0x1E0CD4030];
  if (v9 == v11)
  {
    (*(void (**)(_QWORD *, uint64_t))(v5 + 96))(v7, v4);
    v13 = (void *)*v7;
    v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *v7);

    (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
    goto LABEL_5;
  }
  if (v9 == *MEMORY[0x1E0CD4038])
  {
    (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
    (*(void (**)(_QWORD *, uint64_t))(v5 + 96))(v7, v4);
    v12 = (id)*v7;
LABEL_5:
    *v3 = v12;
    *((_BYTE *)v3 + 8) = v10 != v11;
    return UnlitMaterial.baseColor.modify;
  }
  result = (void (*)(id **, char))_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void UnlitMaterial.baseColor.modify(id **a1, char a2)
{
  SimpleMaterial.baseColor.modify(a1, a2, MEMORY[0x1E0CD36D0]);
}

void SimpleMaterial.baseColor.modify(id **a1, char a2, void (*a3)(void *))
{
  void **v4;
  id v5;
  void (**v6)(void);
  void (**v7)(void);
  uint64_t v8;
  _QWORD *v9;
  void (**v10)(_QWORD *, uint64_t, void *);
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  void (**v19)(_QWORD *, uint64_t, void *);

  v4 = *a1;
  v5 = **a1;
  if ((a2 & 1) != 0)
  {
    if (((_BYTE)(*a1)[1] & 1) != 0)
    {
      v6 = (void (**)(void))v4[4];
      *(_QWORD *)v4[5] = v5;
      v6[13]();
      swift_retain();
    }
    else
    {
      v8 = *((unsigned int *)v4 + 3);
      v10 = (void (**)(_QWORD *, uint64_t, void *))v4[4];
      v9 = v4[5];
      v11 = v4[3];
      *v9 = objc_msgSend(v5, sel_CGColor);
      v10[13](v9, v8, v11);
      outlined consume of MaterialColorParameter(v5, 0);
    }
    v13 = v4[7];
    v12 = v4[8];
    v14 = v4[5];
    v15 = v4[6];
    a3(v14);
    outlined consume of MaterialColorParameter(*v4, *((_BYTE *)v4 + 8));
  }
  else
  {
    if (((_BYTE)(*a1)[1] & 1) != 0)
    {
      v7 = (void (**)(void))v4[4];
      *(_QWORD *)v4[6] = v5;
      v7[13]();
    }
    else
    {
      v16 = *((unsigned int *)v4 + 3);
      v17 = v4[6];
      v18 = v4[3];
      v19 = (void (**)(_QWORD *, uint64_t, void *))v4[4];
      *v17 = objc_msgSend(**a1, sel_CGColor);
      v19[13](v17, v16, v18);
      outlined consume of MaterialColorParameter(v5, 0);
    }
    v13 = v4[7];
    v12 = v4[8];
    v14 = v4[5];
    v15 = v4[6];
    a3(v15);
  }
  free(v12);
  free(v13);
  free(v15);
  free(v14);
  free(v4);
}

void UnlitMaterial.init(color:applyPostProcessToneMap:)(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, sel_CGColor);
  UnlitMaterial.init(color:applyPostProcessToneMap:)();

}

id MaterialParameters.Value.colorValue.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v0 = MaterialParameters.Value.cgColorValue.getter();
  if (!v0)
    return 0;
  v1 = (void *)v0;
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v0);

  return v2;
}

void static MaterialParameters.Value.color(_:)(void *a1)
{
  id v1;

  v1 = objc_msgSend(a1, sel_CGColor);
  MEMORY[0x1DF08F8CC]();

}

uint64_t PhysicallyBasedMaterial.BaseColor.init(tint:texture:)(void *a1, uint64_t a2)
{
  return PhysicallyBasedMaterial.BaseColor.init(tint:texture:)(a1, a2, &demangling cache variable for type metadata for MaterialParameters.Texture?, MEMORY[0x1E0CD4E18]);
}

id PhysicallyBasedMaterial.BaseColor.tint.getter()
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.color.getter(MEMORY[0x1E0CD4E20]);
}

void PhysicallyBasedMaterial.BaseColor.tint.setter(void *a1)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.setter(a1, MEMORY[0x1E0CD4E28]);
}

void (*PhysicallyBasedMaterial.BaseColor.tint.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  void *v3;
  id v4;

  a1[1] = v1;
  v3 = (void *)PhysicallyBasedMaterial.SheenColor.__tint.getter();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return PhysicallyBasedMaterial.BaseColor.tint.modify;
}

void PhysicallyBasedMaterial.BaseColor.tint.modify(void **a1, char a2)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.modify(a1, a2, MEMORY[0x1E0CD4E28]);
}

uint64_t PhysicallyBasedMaterial.EmissiveColor.init(color:texture:)(void *a1, uint64_t a2)
{
  return PhysicallyBasedMaterial.BaseColor.init(tint:texture:)(a1, a2, &demangling cache variable for type metadata for MaterialParameters.Texture?, MEMORY[0x1E0CD4DE8]);
}

uint64_t PhysicallyBasedMaterial.BaseColor.init(tint:texture:)(void *a1, uint64_t a2, uint64_t *a3, void (*a4)(id, char *))
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v14;

  v8 = __swift_instantiateConcreteTypeFromMangledName(a3);
  *(_QWORD *)&v9 = MEMORY[0x1E0C80A78](v8).n128_u64[0];
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a1, sel_CGColor, v9);
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a2, (uint64_t)v11, a3);
  a4(v12, v11);

  return outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a2, a3);
}

id PhysicallyBasedMaterial.EmissiveColor.color.getter()
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.color.getter(MEMORY[0x1E0CD4DF0]);
}

void PhysicallyBasedMaterial.EmissiveColor.color.setter(void *a1)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.setter(a1, MEMORY[0x1E0CD4DF8]);
}

void (*PhysicallyBasedMaterial.EmissiveColor.color.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  void *v3;
  id v4;

  a1[1] = v1;
  v3 = (void *)PhysicallyBasedMaterial.SheenColor.__tint.getter();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return PhysicallyBasedMaterial.EmissiveColor.color.modify;
}

void PhysicallyBasedMaterial.EmissiveColor.color.modify(void **a1, char a2)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.modify(a1, a2, MEMORY[0x1E0CD4DF8]);
}

uint64_t PhysicallyBasedMaterial.SheenColor.init(tint:texture:)(void *a1, uint64_t a2)
{
  return PhysicallyBasedMaterial.BaseColor.init(tint:texture:)(a1, a2, &demangling cache variable for type metadata for MaterialParameters.Texture?, MEMORY[0x1E0CD4DB8]);
}

id PhysicallyBasedMaterial.SheenColor.tint.getter()
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.color.getter(MEMORY[0x1E0CD4DC0]);
}

void PhysicallyBasedMaterial.SheenColor.tint.setter(void *a1)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.setter(a1, MEMORY[0x1E0CD4DC8]);
}

void (*PhysicallyBasedMaterial.SheenColor.tint.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  void *v3;
  id v4;

  a1[1] = v1;
  v3 = (void *)PhysicallyBasedMaterial.SheenColor.__tint.getter();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return PhysicallyBasedMaterial.SheenColor.tint.modify;
}

void PhysicallyBasedMaterial.SheenColor.tint.modify(void **a1, char a2)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.modify(a1, a2, MEMORY[0x1E0CD4DC8]);
}

uint64_t CustomMaterial.BaseColor.init(tint:texture:)(void *a1, uint64_t a2)
{
  return PhysicallyBasedMaterial.BaseColor.init(tint:texture:)(a1, a2, &demangling cache variable for type metadata for CustomMaterial.CustomMaterialTexture?, MEMORY[0x1E0CD48E8]);
}

id CustomMaterial.BaseColor.tint.getter()
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.color.getter(MEMORY[0x1E0CD48F0]);
}

void CustomMaterial.BaseColor.tint.setter(void *a1)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.setter(a1, MEMORY[0x1E0CD48F8]);
}

void (*CustomMaterial.BaseColor.tint.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  void *v3;
  id v4;

  a1[1] = v1;
  v3 = (void *)CustomMaterial.EmissiveColor.__color.getter();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return CustomMaterial.BaseColor.tint.modify;
}

void CustomMaterial.BaseColor.tint.modify(void **a1, char a2)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.modify(a1, a2, MEMORY[0x1E0CD48F8]);
}

uint64_t CustomMaterial.EmissiveColor.init(color:texture:)(void *a1, uint64_t a2)
{
  return PhysicallyBasedMaterial.BaseColor.init(tint:texture:)(a1, a2, &demangling cache variable for type metadata for CustomMaterial.CustomMaterialTexture?, MEMORY[0x1E0CD48D0]);
}

id CustomMaterial.EmissiveColor.color.getter()
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.color.getter(MEMORY[0x1E0CD48D8]);
}

void CustomMaterial.EmissiveColor.color.setter(void *a1)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.setter(a1, MEMORY[0x1E0CD48E0]);
}

void (*CustomMaterial.EmissiveColor.color.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  void *v3;
  id v4;

  a1[1] = v1;
  v3 = (void *)CustomMaterial.EmissiveColor.__color.getter();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return CustomMaterial.EmissiveColor.color.modify;
}

void CustomMaterial.EmissiveColor.color.modify(void **a1, char a2)
{
  HoverEffectComponent.SpotlightHoverEffectStyle.color.modify(a1, a2, MEMORY[0x1E0CD48E0]);
}

id MaterialColorParameter.init(_colorLiteralRed:green:blue:alpha:)@<X0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, a2, a3, a4, a5);
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t MaterialColorParameter.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v8;

  v1 = type metadata accessor for __MaterialColorParameter();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (uint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)v0;
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    *v5 = v6;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v2 + 104))(v5, *MEMORY[0x1E0CD4038], v1, v3);
    swift_retain();
  }
  else
  {
    *v5 = objc_msgSend(v6, sel_CGColor);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v5, *MEMORY[0x1E0CD4030], v1);
    outlined consume of MaterialColorParameter(v6, 0);
  }
  __MaterialColorParameter.hash(into:)();
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v5, v1);
}

Swift::Int MaterialColorParameter.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  char v6;
  uint64_t v8;

  v1 = type metadata accessor for __MaterialColorParameter();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)v0;
  v6 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  if ((v6 & 1) != 0)
  {
    *v4 = v5;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0CD4038], v1);
    swift_retain();
  }
  else
  {
    *v4 = objc_msgSend(v5, sel_CGColor);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0CD4030], v1);
    outlined consume of MaterialColorParameter(v5, 0);
  }
  __MaterialColorParameter.hash(into:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  return Hasher._finalize()();
}

id protocol witness for _ExpressibleByColorLiteral.init(_colorLiteralRed:green:blue:alpha:) in conformance MaterialColorParameter@<X0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, a2, a3, a4, a5);
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MaterialColorParameter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  char v6;
  uint64_t v8;

  v1 = type metadata accessor for __MaterialColorParameter();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)v0;
  v6 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  if ((v6 & 1) != 0)
  {
    *v4 = v5;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0CD4038], v1);
    swift_retain();
  }
  else
  {
    *v4 = objc_msgSend(v5, sel_CGColor);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0CD4030], v1);
    outlined consume of MaterialColorParameter(v5, 0);
  }
  __MaterialColorParameter.hash(into:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  return Hasher._finalize()();
}

uint64_t PhysicallyBasedMaterial.BaseColor.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterial.BaseColor.customMirror.getter(MEMORY[0x1E0CD4E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD4E20], MEMORY[0x1E0CD4E30], a1);
}

uint64_t PhysicallyBasedMaterial.EmissiveColor.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v19[1] = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PhysicallyBasedMaterial.EmissiveColor();
  v10 = MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v9, v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1D95E38B0;
  *(_QWORD *)(v13 + 32) = 0x726F6C6F63;
  *(_QWORD *)(v13 + 40) = 0xE500000000000000;
  v14 = (void *)PhysicallyBasedMaterial.SheenColor.__tint.getter();
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v14);

  v16 = type metadata accessor for UIColor();
  *(_QWORD *)(v13 + 48) = v15;
  *(_QWORD *)(v13 + 72) = v16;
  *(_QWORD *)(v13 + 80) = 0x65727574786574;
  *(_QWORD *)(v13 + 88) = 0xE700000000000000;
  *(_QWORD *)(v13 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameters.Texture?);
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v13 + 96));
  MEMORY[0x1DF08FC80]();
  v17 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v8, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEDFE8], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t PhysicallyBasedMaterial.SheenColor.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterial.BaseColor.customMirror.getter(MEMORY[0x1E0CD4DD8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD4DC0], MEMORY[0x1E0CD4DD0], a1);
}

uint64_t PhysicallyBasedMaterial.BaseColor.customMirror.getter@<X0>(uint64_t (*a1)(_QWORD, __n128)@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  void (*v27)(void);
  uint64_t v28;

  v27 = a3;
  v28 = a4;
  v7 = type metadata accessor for Mirror.AncestorRepresentation();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1(0, v12);
  v16 = MEMORY[0x1E0C80A78](v15);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))((char *)&v27 - v18, v4, v15, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1D95E38B0;
  *(_QWORD *)(v19 + 32) = 1953393012;
  *(_QWORD *)(v19 + 40) = 0xE400000000000000;
  v21 = (void *)a2(v19, v20);
  v22 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v23 = objc_msgSend(v22, sel_initWithCGColor_, v21, v27, v28);

  v24 = type metadata accessor for UIColor();
  *(_QWORD *)(v19 + 48) = v23;
  *(_QWORD *)(v19 + 72) = v24;
  *(_QWORD *)(v19 + 80) = 0x65727574786574;
  *(_QWORD *)(v19 + 88) = 0xE700000000000000;
  *(_QWORD *)(v19 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameters.Texture?);
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v19 + 96));
  v27();
  v25 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v14, 1, 1, v25);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEDFE8], v7);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static MaterialColorParameter.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  _QWORD *v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  void (*v20)(char *, _QWORD, uint64_t, __n128);
  uint64_t v21;
  char v22;
  void (*v23)(_QWORD *, uint64_t);
  uint64_t v25;

  v4 = type metadata accessor for __MaterialColorParameter();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = MEMORY[0x1E0C80A78](v8);
  v11 = (uint64_t *)((char *)&v25 - v9);
  v12 = *(void **)a1;
  v13 = *(_BYTE *)(a1 + 8);
  v14 = *(void **)a2;
  v15 = *(_BYTE *)(a2 + 8);
  v16 = (unsigned int *)MEMORY[0x1E0CD4030];
  v17 = (unsigned int *)MEMORY[0x1E0CD4038];
  if ((v13 & 1) == 0)
  {
    v19 = (unsigned int *)MEMORY[0x1E0CD4038];
    *v11 = objc_msgSend(v12, sel_CGColor);
    v18 = v16;
    v21 = *v16;
    v20 = *(void (**)(char *, _QWORD, uint64_t, __n128))(v5 + 104);
    ((void (*)(_QWORD *, uint64_t, uint64_t))v20)(v11, v21, v4);
    outlined consume of MaterialColorParameter(v12, 0);
    if ((v15 & 1) == 0)
      goto LABEL_3;
LABEL_5:
    *v7 = v14;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v20)(v7, *v19, v4);
    swift_retain();
    goto LABEL_6;
  }
  v18 = (unsigned int *)MEMORY[0x1E0CD4030];
  *v11 = v12;
  v19 = v17;
  v20 = *(void (**)(char *, _QWORD, uint64_t, __n128))(v5 + 104);
  v20((char *)&v25 - v9, *v17, v4, v10);
  swift_retain();
  if ((v15 & 1) != 0)
    goto LABEL_5;
LABEL_3:
  *v7 = objc_msgSend(v14, sel_CGColor);
  ((void (*)(_QWORD *, _QWORD, uint64_t))v20)(v7, *v18, v4);
  outlined consume of MaterialColorParameter(v14, 0);
LABEL_6:
  v22 = MEMORY[0x1DF08F08C](v11, v7);
  v23 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v23(v7, v4);
  v23(v11, v4);
  return v22 & 1;
}

unint64_t lazy protocol witness table accessor for type MaterialColorParameter and conformance MaterialColorParameter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialColorParameter and conformance MaterialColorParameter;
  if (!lazy protocol witness table cache variable for type MaterialColorParameter and conformance MaterialColorParameter)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for MaterialColorParameter, &type metadata for MaterialColorParameter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialColorParameter and conformance MaterialColorParameter);
  }
  return result;
}

void sub_1D95D5B44(_QWORD *a1@<X8>)
{
  key path getter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(MEMORY[0x1E0CD37A0], a1);
}

void sub_1D95D5B60(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(a1, a2, a3, a4, MEMORY[0x1E0CD37A8]);
}

uint64_t sub_1D95D5B7C@<X0>(uint64_t a1@<X8>)
{
  return key path getter for SimpleMaterial.baseColor : SimpleMaterial((void (*)(__n128))MEMORY[0x1E0CD3790], a1);
}

uint64_t sub_1D95D5B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SimpleMaterial.baseColor : SimpleMaterial(a1, a2, a3, a4, MEMORY[0x1E0CD3798]);
}

void sub_1D95D5BB4(_QWORD *a1@<X8>)
{
  key path getter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(MEMORY[0x1E0CD36D8], a1);
}

void sub_1D95D5BD0(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(a1, a2, a3, a4, (void (*)(id))MEMORY[0x1E0CD36E0]);
}

uint64_t sub_1D95D5BEC@<X0>(uint64_t a1@<X8>)
{
  return key path getter for SimpleMaterial.baseColor : SimpleMaterial((void (*)(__n128))MEMORY[0x1E0CD36C8], a1);
}

uint64_t sub_1D95D5C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SimpleMaterial.baseColor : SimpleMaterial(a1, a2, a3, a4, MEMORY[0x1E0CD36D0]);
}

void sub_1D95D5C24(_QWORD *a1@<X8>)
{
  key path getter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(MEMORY[0x1E0CD4E20], a1);
}

void sub_1D95D5C40(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(a1, a2, a3, a4, MEMORY[0x1E0CD4E28]);
}

void sub_1D95D5C5C(_QWORD *a1@<X8>)
{
  key path getter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(MEMORY[0x1E0CD4DF0], a1);
}

void sub_1D95D5C78(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(a1, a2, a3, a4, MEMORY[0x1E0CD4DF8]);
}

void sub_1D95D5C94(_QWORD *a1@<X8>)
{
  key path getter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(MEMORY[0x1E0CD4DC0], a1);
}

void sub_1D95D5CB0(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(a1, a2, a3, a4, MEMORY[0x1E0CD4DC8]);
}

void sub_1D95D5CCC(_QWORD *a1@<X8>)
{
  key path getter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(MEMORY[0x1E0CD48F0], a1);
}

void sub_1D95D5CE8(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(a1, a2, a3, a4, MEMORY[0x1E0CD48F8]);
}

void sub_1D95D5D04(_QWORD *a1@<X8>)
{
  key path getter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(MEMORY[0x1E0CD48D8], a1);
}

void sub_1D95D5D20(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(a1, a2, a3, a4, MEMORY[0x1E0CD48E0]);
}

uint64_t initializeBufferWithCopyOfBuffer for MaterialColorParameter(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of MaterialColorParameter(*(void **)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id outlined copy of MaterialColorParameter(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_retain();
  else
    return a1;
}

void destroy for MaterialColorParameter(uint64_t a1)
{
  outlined consume of MaterialColorParameter(*(void **)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for MaterialColorParameter(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of MaterialColorParameter(*(void **)a2, v4);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of MaterialColorParameter(v5, v6);
  return a1;
}

uint64_t assignWithTake for MaterialColorParameter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(void **)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of MaterialColorParameter(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialColorParameter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialColorParameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for MaterialColorParameter(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MaterialColorParameter()
{
  return &type metadata for MaterialColorParameter;
}

uint64_t ARView.automaticallyConfigureSession.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 2) = a1;
  return result;
}

BOOL static ARView.CameraMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ARView.cameraMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
    *a1 = *(_BYTE *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode);
  else
    __break(1u);
}

Swift::Void __swiftcall ARView.__enableRayTracedGroundingShadow()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  v1 = type metadata accessor for __AssetRef();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_BYTE **)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v5)
  {
    v5[OBJC_IVAR____TtC10RealityKit10RKARSystem_groundingShadowMode] = 1;
    swift_retain();
    v6 = v5;
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    RERenderGraphEmitterAssetSetRuntimeSettingBool();
    RERenderGraphEmitterAssetSetRuntimeSettingBool();

    type metadata accessor for RKARSystemCore();
    static RKARSystemCore.generateDecimatedMeshes.setter();
  }
  else
  {
    __break(1u);
  }
}

void ARView.cameraMode.setter(_BYTE *a1)
{
  uint64_t v1;
  _BYTE *v2;
  unsigned __int8 v3;
  _BYTE *v4;
  unsigned __int8 v5;

  v2 = *(_BYTE **)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    v3 = v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode];
    v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode] = *a1;
    v5 = v3;
    v4 = v2;
    RKARSystem.cameraMode.didset(&v5);

  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall ARView.setupAR()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  char *v5;
  uint64_t v6;
  void *v7;

  v1 = v0;
  objc_msgSend((id)objc_opt_self(), sel_setRenderType_, 2);
  v2 = OBJC_IVAR____TtC10RealityKit6ARView_renderView;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_renderView], sel_setContentMode_, 4);
  objc_msgSend(v1, sel_insertSubview_atIndex_, *(_QWORD *)&v1[v2], 0);
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  v3 = dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  v4 = objc_allocWithZone((Class)type metadata accessor for RKARSystem(0));
  v5 = v1;
  v6 = RKARSystem.init(engine:arView:)(v3, v5);
  v7 = *(void **)&v5[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  *(_QWORD *)&v5[OBJC_IVAR____TtC10RealityKit6ARView_arSystem] = v6;

  objc_msgSend(v5, sel_setMultipleTouchEnabled_, 1);
}

Swift::Void __swiftcall ARView.__disableRayTracedGroundingShadow()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  v1 = type metadata accessor for __AssetRef();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_BYTE **)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v5)
  {
    v5[OBJC_IVAR____TtC10RealityKit10RKARSystem_groundingShadowMode] = 0;
    swift_retain();
    v6 = v5;
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    RERenderGraphEmitterAssetSetRuntimeSettingBool();
    RERenderGraphEmitterAssetSetRuntimeSettingBool();

    type metadata accessor for RKARSystemCore();
    static RKARSystemCore.generateDecimatedMeshes.setter();
  }
  else
  {
    __break(1u);
  }
}

_QWORD *ARView.__enableUpdateCameraWorldMatrixFromARFrame.getter()
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame);
}

_QWORD *ARView.__enableUpdateCameraProjectionMatrixFromARFrame.getter()
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame);
}

_QWORD *ARView.session.getter()
{
  return ARView.session.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem_session);
}

void ARView.session.setter(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  char v6;
  char *v7;
  void *v8;
  char *v9;
  id v10;

  v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v3)
  {
    v4 = v1;
    type metadata accessor for NSObject();
    v5 = *(id *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session);
    v6 = static NSObject.== infix(_:_:)();

    if ((v6 & 1) != 0)
    {
LABEL_5:

      return;
    }
    v7 = *(char **)(v4 + v2);
    if (v7)
    {
      v8 = *(void **)&v7[OBJC_IVAR____TtC10RealityKit10RKARSystem_session];
      *(_QWORD *)&v7[OBJC_IVAR____TtC10RealityKit10RKARSystem_session] = a1;
      v9 = v7;
      v10 = a1;
      RKARSystem.session.didset(v8);

      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void ARView.CameraMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ARView.CameraMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void (*ARView.cameraMode.modify(void (*result)(_QWORD *a1, char a2)))(_QWORD *a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  *(_QWORD *)result = v1;
  *((_QWORD *)result + 1) = v2;
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    *((_BYTE *)result + 16) = *(_BYTE *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode);
    return ARView.cameraMode.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.cameraMode.modify(_QWORD *a1, char a2)
{
  _BYTE *v2;
  _BYTE *v3;
  char v4;
  _BYTE *v5;
  unsigned __int8 *v6;
  char v7;
  char v8;
  char v9;

  v2 = a1 + 2;
  v3 = *(_BYTE **)(*a1 + a1[1]);
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      v4 = v3[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode];
      v3[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode] = *v2;
      v8 = v4;
      v5 = v3;
      v6 = (unsigned __int8 *)&v8;
LABEL_6:
      RKARSystem.cameraMode.didset(v6);

      return;
    }
    __break(1u);
  }
  else if (v3)
  {
    v7 = v3[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode];
    v3[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode] = *v2;
    v9 = v7;
    v5 = v3;
    v6 = (unsigned __int8 *)&v9;
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t ARView.automaticallyConfigureSession.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 2);
}

void (*ARView.automaticallyConfigureSession.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  v3[3] = v1;
  v3[4] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  *((_BYTE *)v3 + 40) = *(_BYTE *)(v5 + 2);
  return ARView.automaticallyConfigureSession.modify;
}

void ARView.automaticallyConfigureSession.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *(_BYTE *)(*(_QWORD *)(v1 + 24) + *(_QWORD *)(v1 + 32) + 2) = *(_BYTE *)(v1 + 40);
  free((void *)v1);
}

void ARView.__passthroughTextureY.getter()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  __CVBuffer *v6;
  char *v7;
  id v8;

  v1 = *(char **)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v1)
  {
    v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache];
    v3 = *(void **)(v2 + 32);
    if (v3)
    {
      v4 = *(void **)(v2 + 40);
      v5 = v3;
      v6 = v4;
      v7 = v1;
      if (CVMetalTextureGetTexture((CVMetalTextureRef)v5))
      {
        v8 = CVMetalTextureGetTexture(v6);

        if (v8)
          swift_unknownObjectRelease();
        else
          swift_unknownObjectRelease();
      }
      else
      {

      }
    }
  }
  else
  {
    __break(1u);
  }
}

void ARView.__passthroughTextureCbCr.getter()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  __CVBuffer *v6;
  char *v7;

  v1 = *(char **)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v1)
  {
    v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache];
    v3 = *(void **)(v2 + 32);
    if (v3)
    {
      v4 = *(void **)(v2 + 40);
      v5 = v3;
      v6 = v4;
      v7 = v1;
      if (CVMetalTextureGetTexture((CVMetalTextureRef)v5))
      {
        CVMetalTextureGetTexture(v6);

        swift_unknownObjectRelease();
      }
      else
      {

      }
    }
  }
  else
  {
    __break(1u);
  }
}

void ARView.__passthroughCorrectionMatrix.getter()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem))
    __break(1u);
}

void ARView.__passthroughIntensityExponent.getter()
{
  ARView.__passthroughIntensityExponent.getter();
}

{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem))
    __break(1u);
}

void ARView.__passthroughIntensityExponent.setter(float a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
    *(float *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem___passthroughIntensityExponent) = a1;
  else
    __break(1u);
}

uint64_t (*ARView.__passthroughIntensityExponent.modify(uint64_t (*result)(uint64_t result, char a2)))(uint64_t result, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  *(_QWORD *)result = v1;
  *((_QWORD *)result + 1) = v2;
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    *((_DWORD *)result + 4) = *(_DWORD *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem___passthroughIntensityExponent);
    return ARView.__passthroughIntensityExponent.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.__passthroughIntensityExponent.modify(uint64_t result, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)result + *(_QWORD *)(result + 8));
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
LABEL_5:
      *(_DWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem___passthroughIntensityExponent) = *(_DWORD *)(result + 16);
      return result;
    }
    __break(1u);
  }
  if (v2)
    goto LABEL_5;
  __break(1u);
  return result;
}

void *ARView.__backgroundReplacementBuffer.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v1)
  {
    v2 = *(void **)(*(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache) + 16);
    v3 = v2;
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void key path setter for ARView.__backgroundReplacementBuffer : ARView(void **a1, _QWORD *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;

  v2 = *(_QWORD *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    v3 = *a1;
    v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache);
    v6 = *(id *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = *a1;
    v5 = v3;

  }
  else
  {
    __break(1u);
  }
}

void ARView.__backgroundReplacementBuffer.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache);
    v4 = *(void **)(v3 + 16);
    *(_QWORD *)(v3 + 16) = a1;

  }
  else
  {
    __break(1u);
  }
}

void (*ARView.__backgroundReplacementBuffer.modify(void (*result)(uint64_t *a1, char a2)))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  *((_QWORD *)result + 1) = v1;
  *((_QWORD *)result + 2) = v2;
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    v4 = *(void **)(*(_QWORD *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache) + 16);
    *(_QWORD *)result = v4;
    v5 = v4;
    return ARView.__backgroundReplacementBuffer.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.__backgroundReplacementBuffer.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1[1] + a1[2]);
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
LABEL_5:
      v3 = *a1;
      v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache);
      v5 = *(void **)(v4 + 16);
      *(_QWORD *)(v4 + 16) = v3;

      return;
    }
    __break(1u);
  }
  if (v2)
    goto LABEL_5;
  __break(1u);
}

uint64_t ARView.__enableUpdateCameraWorldMatrixFromARFrame.setter(uint64_t a1)
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.setter(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame);
}

uint64_t (*ARView.__enableUpdateCameraWorldMatrixFromARFrame.modify(uint64_t (*result)(uint64_t a1, char a2)))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  *(_QWORD *)result = v1;
  *((_QWORD *)result + 1) = v2;
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    *((_BYTE *)result + 16) = *(_BYTE *)(v3
                                       + OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame);
    return ARView.__enableUpdateCameraWorldMatrixFromARFrame.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.__enableUpdateCameraWorldMatrixFromARFrame.modify(uint64_t a1, char a2)
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.modify(a1, a2, &OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame);
}

uint64_t ARView.__enableUpdateCameraProjectionMatrixFromARFrame.setter(uint64_t a1)
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.setter(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame);
}

uint64_t (*ARView.__enableUpdateCameraProjectionMatrixFromARFrame.modify(uint64_t (*result)(uint64_t a1, char a2)))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  *(_QWORD *)result = v1;
  *((_QWORD *)result + 1) = v2;
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    *((_BYTE *)result + 16) = *(_BYTE *)(v3
                                       + OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame);
    return ARView.__enableUpdateCameraProjectionMatrixFromARFrame.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.__enableUpdateCameraProjectionMatrixFromARFrame.modify(uint64_t a1, char a2)
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.modify(a1, a2, &OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame);
}

void ARView.__fallbackAmbientIntensity.getter()
{
  ARView.__passthroughIntensityExponent.getter();
}

void ARView.__fallbackAmbientIntensity.setter(float a1)
{
  uint64_t v1;
  char *v2;
  char *v3;
  void (*v4)(_BYTE *, _QWORD);
  id v5;
  void (*v6)(_BYTE *, _QWORD);
  _BYTE v7[32];

  v2 = *(char **)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    *(float *)&v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientIntensity] = a1;
    if ((v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions] & 2) != 0)
    {
      if (*(_QWORD *)&v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_lightEntity])
      {
        v3 = v2;
        type metadata accessor for AmbientLight();
        v4 = (void (*)(_BYTE *, _QWORD))HasAmbientLight.light.modify();
        __AmbientLightComponent.intensity.setter();
        v4(v7, 0);
        v5 = *(id *)&v3[OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientColor];
        v6 = (void (*)(_BYTE *, _QWORD))HasAmbientLight.light.modify();
        __AmbientLightComponent.color.setter();
        v6(v7, 0);

      }
    }
  }
  else
  {
    __break(1u);
  }
}

void (*ARView.__fallbackAmbientIntensity.modify(void (*result)(uint64_t a1)))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)result = v1;
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    *((_DWORD *)result + 2) = *(_DWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientIntensity);
    return ARView.__fallbackAmbientIntensity.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.__fallbackAmbientIntensity.modify(uint64_t a1)
{
  ARView.__fallbackAmbientIntensity.setter(*(float *)(a1 + 8));
}

_QWORD *ARView.__fallbackAmbientColor.getter()
{
  return ARView.session.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientColor);
}

_QWORD *ARView.session.getter(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
    return *(id *)(v2 + *result);
  __break(1u);
  return result;
}

void key path setter for ARView.__fallbackAmbientColor : ARView(id *a1, _QWORD *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    v4 = *a1;
    v3 = v2;
    specialized RKARSystem.fallbackAmbientColor.setter(v4);

  }
  else
  {
    __break(1u);
  }
}

void ARView.__fallbackAmbientColor.setter(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    v3 = v2;
    specialized RKARSystem.fallbackAmbientColor.setter(a1);

  }
  else
  {
    __break(1u);
  }
}

void (*ARView.__fallbackAmbientColor.modify(void (*result)(uint64_t a1, char a2)))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  *((_QWORD *)result + 1) = v1;
  *((_QWORD *)result + 2) = v2;
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    v4 = *(void **)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientColor);
    *(_QWORD *)result = v4;
    v5 = v4;
    return ARView.__fallbackAmbientColor.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.__fallbackAmbientColor.modify(uint64_t a1, char a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16));
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
      v3 = *(id *)a1;
      v4 = v2;
      specialized RKARSystem.fallbackAmbientColor.setter(v3);

LABEL_6:
      return;
    }
    __break(1u);
  }
  else if (v2)
  {
    v3 = *(id *)a1;
    v4 = v2;
    specialized RKARSystem.fallbackAmbientColor.setter(v3);
    goto LABEL_6;
  }
  __break(1u);
}

_QWORD *ARView.__autoFireStartTriggerOnPlacement.getter()
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem___autoFireStartTriggerOnPlacement);
}

_QWORD *ARView.__enableUpdateCameraWorldMatrixFromARFrame.getter(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
    return (_QWORD *)*(unsigned __int8 *)(v2 + *result);
  __break(1u);
  return result;
}

uint64_t ARView.__autoFireStartTriggerOnPlacement.setter(uint64_t a1)
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.setter(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem___autoFireStartTriggerOnPlacement);
}

uint64_t ARView.__enableUpdateCameraWorldMatrixFromARFrame.setter(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v3)
    *(_BYTE *)(v3 + *a2) = result & 1;
  else
    __break(1u);
  return result;
}

uint64_t (*ARView.__autoFireStartTriggerOnPlacement.modify(uint64_t (*result)(uint64_t a1, char a2)))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  *(_QWORD *)result = v1;
  *((_QWORD *)result + 1) = v2;
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    *((_BYTE *)result + 16) = *(_BYTE *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem___autoFireStartTriggerOnPlacement);
    return ARView.__autoFireStartTriggerOnPlacement.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.__autoFireStartTriggerOnPlacement.modify(uint64_t a1, char a2)
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.modify(a1, a2, &OBJC_IVAR____TtC10RealityKit10RKARSystem___autoFireStartTriggerOnPlacement);
}

uint64_t ARView.__enableUpdateCameraWorldMatrixFromARFrame.modify(uint64_t result, char a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)result + *(_QWORD *)(result + 8));
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
LABEL_5:
      *(_BYTE *)(v3 + *a3) = *(_BYTE *)(result + 16);
      return result;
    }
    __break(1u);
  }
  if (v3)
    goto LABEL_5;
  __break(1u);
  return result;
}

void (*ARView.__occlusionEntity(for:)(void (*result)(_QWORD, _QWORD)))(_QWORD, _QWORD)
{
  uint64_t v1;
  void *v2;
  void (*v3)(_QWORD, _QWORD);
  id v4;
  uint64_t v5;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    v3 = result;
    v4 = v2;
    v5 = RKARSystem.createFaceGeometry(for:)(v3);

    return (void (*)(_QWORD, _QWORD))v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall ARView.__removeOcclusionEntity(for:)(ARFaceAnchor *a1)
{
  uint64_t v1;
  void *v2;
  id v4;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    v4 = v2;
    RKARSystem.removeFaceGeometry(for:)(&a1->super);

  }
  else
  {
    __break(1u);
  }
}

unint64_t lazy protocol witness table accessor for type ARView.CameraMode and conformance ARView.CameraMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.CameraMode and conformance ARView.CameraMode;
  if (!lazy protocol witness table cache variable for type ARView.CameraMode and conformance ARView.CameraMode)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.CameraMode, &type metadata for ARView.CameraMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.CameraMode and conformance ARView.CameraMode);
  }
  return result;
}

char *keypath_get_selector_session()
{
  return sel_session;
}

id sub_1D95D70BC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_session);
  *a2 = result;
  return result;
}

id sub_1D95D70F4(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSession_, *a1);
}

_QWORD *sub_1D95D7108@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_1Tm(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode, a2);
}

void sub_1D95D7114(char *a1)
{
  char v1;

  v1 = *a1;
  ARView.cameraMode.setter(&v1);
}

uint64_t sub_1D95D7148@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 2);
  return result;
}

uint64_t sub_1D95D719C(char *a1, _QWORD *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 2) = v2;
  return result;
}

_QWORD *sub_1D95D71EC@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_5Tm(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem___passthroughIntensityExponent, a2);
}

_DWORD *sub_1D95D71F8(_DWORD *result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
    *(_DWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem___passthroughIntensityExponent) = *result;
  else
    __break(1u);
  return result;
}

_QWORD *sub_1D95D722C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    v3 = *(void **)(*(_QWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache) + 16);
    *a2 = v3;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1D95D7268@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_1Tm(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame, a2);
}

_BYTE *sub_1D95D7274(_BYTE *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame);
}

_QWORD *sub_1D95D7280@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_1Tm(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame, a2);
}

_BYTE *sub_1D95D728C(_BYTE *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame);
}

_QWORD *sub_1D95D7298@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_5Tm(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientIntensity, a2);
}

_QWORD *keypath_get_5Tm@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X3>, _DWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v3)
    *a3 = *(_DWORD *)(v3 + *a2);
  else
    __break(1u);
  return result;
}

void sub_1D95D72D0(float *a1)
{
  ARView.__fallbackAmbientIntensity.setter(*a1);
}

_QWORD *sub_1D95D72F4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    v3 = *(void **)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientColor);
    *a2 = v3;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1D95D732C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_1Tm(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem___autoFireStartTriggerOnPlacement, a2);
}

_QWORD *keypath_get_1Tm@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X3>, _BYTE *a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v3)
    *a3 = *(_BYTE *)(v3 + *a2);
  else
    __break(1u);
  return result;
}

_BYTE *sub_1D95D7364(_BYTE *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_10Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit10RKARSystem___autoFireStartTriggerOnPlacement);
}

_BYTE *keypath_set_10Tm(_BYTE *result, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v5)
    *(_BYTE *)(v5 + *a5) = *result;
  else
    __break(1u);
  return result;
}

uint64_t storeEnumTagSinglePayload for ARView.CameraMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1D95D73E8 + 4 * byte_1D95E4DD5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1D95D741C + 4 * byte_1D95E4DD0[v4]))();
}

uint64_t sub_1D95D741C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D95D7424(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D95D742CLL);
  return result;
}

uint64_t sub_1D95D7438(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D95D7440);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1D95D7444(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D95D744C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ARView.CameraMode()
{
  return &type metadata for ARView.CameraMode;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (int *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t ARView.EntityGestures.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ARView.EntityGestures.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ARView.EntityGestures.translation.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ARView.EntityGestures.rotation.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ARView.EntityGestures.scale.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void one-time initialization function for all()
{
  static ARView.EntityGestures.all = 7;
}

uint64_t static ARView.EntityGestures.all.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for all != -1)
    result = swift_once();
  *a1 = static ARView.EntityGestures.all;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance ARView.EntityGestures@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized SetAlgebra<>.init(arrayLiteral:)(a1, a2);
}

_QWORD *ARView.installGestures(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  uint64_t ObjectType;
  id v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v29;

  v4 = v3;
  v6 = *a1;
  if ((*a1 & 1) != 0)
  {
    v9 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for EntityTranslationGestureRecognizer()), sel_initWithTarget_action_, v3, sel_handleTranslation_);
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v11 = v7[2];
    v10 = v7[3];
    if (v11 >= v10 >> 1)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v7);
    v7[2] = v11 + 1;
    v12 = &v7[2 * v11];
    v12[4] = v9;
    v12[5] = &protocol witness table for EntityTranslationGestureRecognizer;
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if ((v6 & 2) == 0)
      goto LABEL_3;
  }
  v13 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for EntityRotationGestureRecognizer()), sel_initWithTarget_action_, v4, sel_handleRotation_);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  v15 = v7[2];
  v14 = v7[3];
  if (v15 >= v14 >> 1)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v7);
  v7[2] = v15 + 1;
  v16 = &v7[2 * v15];
  v16[4] = v13;
  v16[5] = &protocol witness table for EntityRotationGestureRecognizer;
  if ((v6 & 4) == 0)
  {
LABEL_4:
    v8 = v7[2];
    if (!v8)
      return v7;
    goto LABEL_19;
  }
LABEL_14:
  v17 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for EntityScaleGestureRecognizer()), sel_initWithTarget_action_, v4, sel_handleScale_);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  v19 = v7[2];
  v18 = v7[3];
  v8 = v19 + 1;
  if (v19 >= v18 >> 1)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v7);
  v7[2] = v8;
  v20 = &v7[2 * v19];
  v20[4] = v17;
  v20[5] = &protocol witness table for EntityScaleGestureRecognizer;
LABEL_19:
  swift_bridgeObjectRetain_n();
  v29 = v7;
  v21 = v7 + 5;
  do
  {
    v22 = (void *)*(v21 - 1);
    v23 = *v21;
    ObjectType = swift_getObjectType();
    v25 = v22;
    objc_msgSend(v4, sel_addGestureRecognizer_, v25);
    objc_msgSend(v25, sel_setDelegate_, v4);
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 16);
    v27 = swift_retain();
    v26(v27, a3, ObjectType, v23);

    v21 += 2;
    --v8;
  }
  while (v8);
  v7 = v29;
  swift_bridgeObjectRelease_n();
  return v7;
}

unint64_t lazy protocol witness table accessor for type ARView.EntityGestures and conformance ARView.EntityGestures()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures;
  if (!lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.EntityGestures, &type metadata for ARView.EntityGestures);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures;
  if (!lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.EntityGestures, &type metadata for ARView.EntityGestures);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures;
  if (!lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.EntityGestures, &type metadata for ARView.EntityGestures);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures;
  if (!lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures)
  {
    result = MEMORY[0x1DF091B94](&protocol conformance descriptor for ARView.EntityGestures, &type metadata for ARView.EntityGestures);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures);
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.EntityGestures()
{
  return &type metadata for ARView.EntityGestures;
}

void specialized ARView.handleTranslation(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double *v22;
  double v23;
  double v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  float32x4_t v41;
  float32x4_t v42;
  float v43;
  void (*v44)(uint64_t *, _QWORD);
  float32x2_t *v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  float32x4_t v54;
  void (*v55)(double *, _QWORD);
  float32x2_t *v56;
  __int128 v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  id v61;
  uint64_t v62;
  float32x4_t v63[5];
  float32x4_t v64[5];
  double v65;
  float32x4_t v66;
  double v67;
  float32x4_t v68;
  char v69;
  double v70[2];
  float32x4_t v71;
  double v72;
  float32x4_t v73;
  char v74;

  v2 = type metadata accessor for AnchoringComponent();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent.Target?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v58 - v10;
  type metadata accessor for EntityTranslationGestureRecognizer();
  v12 = swift_dynamicCastClass();
  if (v12)
  {
    v13 = (_QWORD *)v12;
    v61 = a1;
    if (objc_msgSend(v13, sel_state) != (id)1 && objc_msgSend(v13, sel_state) != (id)2
      || (v14 = (_QWORD *)((char *)v13 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity),
          swift_beginAccess(),
          !*v14))
    {

      return;
    }
    swift_retain();
    if (Entity.anchor.getter())
    {
      HasAnchoring.anchoring.getter();
      swift_release();
      AnchoringComponent.target.getter();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v15 = type metadata accessor for AnchoringComponent.Target();
      v16 = *(_QWORD *)(v15 - 8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v11, 0, 1, v15);
      outlined init with copy of AnchoringComponent.Target?((uint64_t)v11, (uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t))(v16 + 88))(v8, v15) == *MEMORY[0x1E0CD3B68])
      {
        v17 = objc_msgSend(v13, sel_view);
        objc_msgSend(v13, sel_locationInView_, v17);
        v19 = v18;
        v21 = v20;

        v22 = (double *)((char *)v13
                       + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation);
        if ((*((_BYTE *)v13 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation + 16) & 1) == 0)
        {
          v24 = *v22;
          v23 = v22[1];
          v25 = HasHierarchy.parent.getter();
          v26 = objc_msgSend(v13, sel_view);
          if (v26)
          {
            v27 = v26;
            v28 = type metadata accessor for ARView();
            if (!swift_dynamicCastClass()
              || (v60.i64[0] = v28,
                  v29 = *(unsigned int *)((char *)v13
                                        + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight),
                  v59.i64[0] = (uint64_t)v13
                             + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight,
                  LOBYTE(v70[0]) = *((_BYTE *)v13
                                   + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight
                                   + 4),
                  specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(v29 | ((unint64_t)LOBYTE(v70[0]) << 32), v63), outlined init with take of simd_float4x4?((uint64_t)v63, (uint64_t)v70), (v74 & 1) != 0)|| (v30 = ARView.unproject(_:ontoPlane:relativeToCamera:)(0, v24, v23, v70[0], v71, v72, v73), (v32 & 1) != 0))
            {
LABEL_31:

              swift_release();
              goto LABEL_28;
            }
            v33.i64[0] = v30;
            v33.i64[1] = v31;
            v58 = v33;
            if (v25)
            {
              type metadata accessor for Entity();
              HasTransform.convert(position:from:)();
              v58 = v34;
              swift_release();
            }

            v35 = HasHierarchy.parent.getter();
            v36 = objc_msgSend(v13, sel_view);
            if (v36)
            {
              v27 = v36;
              if (swift_dynamicCastClass())
              {
                v37 = *(unsigned int *)v59.i64[0];
                LOBYTE(v65) = *(_BYTE *)(v59.i64[0] + 4);
                specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(v37 | ((unint64_t)LOBYTE(v65) << 32), v64);
                outlined init with take of simd_float4x4?((uint64_t)v64, (uint64_t)&v65);
                if ((v69 & 1) == 0)
                {
                  v38 = ARView.unproject(_:ontoPlane:relativeToCamera:)(0, v19, v21, v65, v66, v67, v68);
                  if ((v40 & 1) == 0)
                  {
                    v41.i64[0] = v38;
                    v41.i64[1] = v39;
                    v60 = v41;
                    if (v35)
                    {
                      type metadata accessor for Entity();
                      HasTransform.convert(position:from:)();
                      v60 = v42;
                      swift_release();
                    }

                    v60 = vsubq_f32(v60, v58);
                    v43 = v60.f32[2];
                    v44 = (void (*)(uint64_t *, _QWORD))HasTransform.position.modify();
                    *(float32x2_t *)&v46 = vadd_f32(*(float32x2_t *)v60.f32, *v45);
                    *((float *)&v46 + 2) = v43 + v45[1].f32[0];
                    HIDWORD(v46) = 0;
                    *(_OWORD *)v45->f32 = v46;
                    v44(&v62, 0);
                    goto LABEL_26;
                  }
                }
              }
              goto LABEL_31;
            }
          }

          swift_release();
          goto LABEL_28;
        }
LABEL_27:

LABEL_28:
        swift_release();
        goto LABEL_29;
      }
      (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v15);
    }
    else
    {
      v47 = type metadata accessor for AnchoringComponent.Target();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v11, 1, 1, v47);
    }
    HasHierarchy.parent.getter();
    v48 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v49 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v13) + 0xB8))();
    v51 = v50;
    v53 = v52;
    swift_release();
    if ((v53 & 1) == 0)
    {
      v54.i64[0] = v49;
      v59 = v54;
      v54.i64[1] = v51;
      v60 = v54;
      HasHierarchy.parent.getter();
      (*(void (**)(__n128))((*v48 & *v13) + 0xC0))((__n128)0);
      swift_release();
      v55 = (void (*)(double *, _QWORD))HasTransform.position.modify();
      *(float32x2_t *)&v57 = vadd_f32(*v56, (float32x2_t)__PAIR64__(v59.u32[1], v49));
      *((float *)&v57 + 2) = v60.f32[2] + v56[1].f32[0];
      HIDWORD(v57) = 0;
      *(_OWORD *)v56->f32 = v57;
      v55(v70, 0);
LABEL_26:
      swift_release();

LABEL_29:
      outlined destroy of AnchoringComponent.Target?((uint64_t)v11);
      return;
    }
    goto LABEL_27;
  }
}

void specialized ARView.handleRotation(_:)(void *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  double v5;
  float v6;
  float32x4_t v7;
  int32x4_t v8;
  float32x2_t v9;
  float32x2_t v10;
  __float2 v11;
  float32x4_t v12;
  void (*v13)(char *, _QWORD);
  float32x2_t *v14;
  int32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  id v21;
  char v22[32];
  float32x4_t v23[5];
  _BYTE v24[80];

  type metadata accessor for EntityRotationGestureRecognizer();
  v2 = swift_dynamicCastClass();
  if (v2)
  {
    v3 = (char *)v2;
    v21 = a1;
    if (objc_msgSend(v3, sel_state) == (id)1 || objc_msgSend(v3, sel_state) == (id)2)
    {
      v4 = &v3[OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity];
      swift_beginAccess();
      if (*(_QWORD *)v4)
      {
        swift_retain();
        v24[0] = 1;
        specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(0x100000000, v23);
        outlined init with take of simd_float4x4?((uint64_t)v23, (uint64_t)v24);
        if ((v24[64] & 1) == 0)
        {
          objc_msgSend(v3, sel_rotation);
          v6 = v5;
          objc_msgSend(v3, sel_setRotation_, 0.0);
          specialized SIMD.subscript.getter((__n128)xmmword_1D95E2280, COERCE_DOUBLE(2));
          HasTransform.convert(normal:from:)();
          v8 = (int32x4_t)vmulq_f32(v7, v7);
          v8.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1))).u32[0];
          v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
          v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
          v19 = vmulq_n_f32(v7, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).f32[0]);
          v11 = __sincosf_stret(v6 * -0.5);
          v12 = vmulq_n_f32(v19, v11.__sinval);
          v12.i32[3] = LODWORD(v11.__cosval);
          v20 = v12;
          v13 = (void (*)(char *, _QWORD))HasTransform.orientation.modify();
          v15 = (int32x4_t)vnegq_f32(v20);
          v16 = (int8x16_t)vtrn2q_s32((int32x4_t)v20, vtrn1q_s32((int32x4_t)v20, v15));
          v17 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v15, 8uLL), *v14, 1), (float32x4_t)vextq_s8(v16, v16, 8uLL), COERCE_FLOAT(*(_OWORD *)v14->f32));
          v18 = (float32x4_t)vrev64q_s32((int32x4_t)v20);
          v18.i32[0] = v15.i32[1];
          v18.i32[3] = v15.i32[2];
          *(float32x4_t *)v14->f32 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v20, *(float32x4_t *)v14->f32, 3), v18, *(float32x4_t *)v14->f32, 2), v17);
          v13(v22, 0);
        }

        swift_release();
      }
      else
      {

      }
    }
    else
    {

    }
  }
}

void specialized ARView.handleScale(_:)(void *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  double v5;
  double v6;
  float v7;
  void (*v8)(char *, _QWORD);
  float32x2_t *v9;
  __int128 v10;
  float v11;
  id v12;
  char v13[32];

  type metadata accessor for EntityScaleGestureRecognizer();
  v2 = swift_dynamicCastClass();
  if (v2)
  {
    v3 = (char *)v2;
    v12 = a1;
    if (objc_msgSend(v3, sel_state) == (id)1 || objc_msgSend(v3, sel_state) == (id)2)
    {
      v4 = &v3[OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity];
      swift_beginAccess();
      if (*(_QWORD *)v4)
      {
        swift_retain();
        objc_msgSend(v3, sel_scale);
        v6 = v5;
        objc_msgSend(v3, sel_setScale_, 1.0);
        v7 = v6;
        v11 = v7;
        v8 = (void (*)(char *, _QWORD))HasTransform.scale.modify();
        *(float32x2_t *)&v10 = vmul_n_f32(*v9, v11);
        *((float *)&v10 + 2) = v9[1].f32[0] * v11;
        HIDWORD(v10) = 0;
        *(_OWORD *)v9->f32 = v10;
        v8(v13, 0);

        swift_release();
      }
      else
      {

      }
    }
    else
    {

    }
  }
}

uint64_t outlined destroy of AnchoringComponent.Target?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent.Target?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of AnchoringComponent.Target?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent.Target?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t vImage.PixelBuffer.size.getter()
{
  return MEMORY[0x1E0DE99D8]();
}

uint64_t vImage.PixelBuffer<>.makeCGImage(cgImageFormat:)()
{
  return MEMORY[0x1E0DE9A00]();
}

uint64_t vImage.PixelBuffer<>.init(size:pixelFormat:)()
{
  return MEMORY[0x1E0DE9A18]();
}

uint64_t vImage.PixelBuffer<>.init(cgImage:cgImageFormat:pixelFormat:)()
{
  return MEMORY[0x1E0DE9A28]();
}

uint64_t vImage.PixelBuffer<>.convert(to:)()
{
  return MEMORY[0x1E0DE9A38]();
}

uint64_t type metadata accessor for vImage.Interleaved8x4()
{
  return MEMORY[0x1E0DE9A58]();
}

uint64_t type metadata accessor for vImage.Interleaved16Fx4()
{
  return MEMORY[0x1E0DE9A78]();
}

uint64_t type metadata accessor for vImage.Size()
{
  return MEMORY[0x1E0DE9A88]();
}

uint64_t Measurement.value.getter()
{
  return MEMORY[0x1E0CAE250]();
}

uint64_t Measurement<>.converted(to:)()
{
  return MEMORY[0x1E0CAE310]();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return MEMORY[0x1E0CAE8A8]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x1E0CAE8B8]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x1E0CAE910]();
}

uint64_t _BridgedStoredNSError._getEmbeddedNSError()()
{
  return MEMORY[0x1E0CAF8D8]();
}

uint64_t _BridgedStoredNSError.init(_bridgedNSError:)()
{
  return MEMORY[0x1E0CAF8E8]();
}

uint64_t _BridgedStoredNSError.errorUserInfo.getter()
{
  return MEMORY[0x1E0CAF8F8]();
}

uint64_t static _BridgedStoredNSError.== infix(_:_:)()
{
  return MEMORY[0x1E0CAF900]();
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return MEMORY[0x1E0CAF910]();
}

uint64_t _BridgedStoredNSError.hash(into:)()
{
  return MEMORY[0x1E0CAF920]();
}

uint64_t _BridgedStoredNSError.errorCode.getter()
{
  return MEMORY[0x1E0CAF930]();
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return MEMORY[0x1E0CAF940]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t static LocalizedStringResource.== infix(_:_:)()
{
  return MEMORY[0x1E0CAF9E0]();
}

uint64_t type metadata accessor for LocalizedStringResource()
{
  return MEMORY[0x1E0CAF9F8]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t Data.Deallocator._deallocator.getter()
{
  return MEMORY[0x1E0CB00B0]();
}

uint64_t type metadata accessor for Data.Deallocator()
{
  return MEMORY[0x1E0CB00E8]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x1E0CB0140]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x1E0CB01F0]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return MEMORY[0x1E0CB05D8]();
}

uint64_t static Date.now.getter()
{
  return MEMORY[0x1E0CB07F8]();
}

uint64_t Date.init()()
{
  return MEMORY[0x1E0CB0860]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x1E0CB0910]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x1E0CB0948]();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB0958]();
}

uint64_t UUID.hashValue.getter()
{
  return MEMORY[0x1E0CB0980]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t static __RealityFileURLResolver.schemePrefix.getter()
{
  return MEMORY[0x1E0CD33B0]();
}

uint64_t type metadata accessor for __RealityFileURLResolver()
{
  return MEMORY[0x1E0CD33B8]();
}

uint64_t static __AssetRef.__fromCore(_:)()
{
  return MEMORY[0x1E0CD33D0]();
}

uint64_t __AssetRef.__as<A>(_:)()
{
  return MEMORY[0x1E0CD33D8]();
}

uint64_t type metadata accessor for __AssetRef()
{
  return MEMORY[0x1E0CD33E0]();
}

uint64_t __SceneRef.__as<A>(_:)()
{
  return MEMORY[0x1E0CD33F8]();
}

uint64_t type metadata accessor for __SceneRef()
{
  return MEMORY[0x1E0CD3400]();
}

uint64_t ModelEntity.init(mesh:materials:)()
{
  return MEMORY[0x1E0CD3450]();
}

uint64_t type metadata accessor for ModelEntity()
{
  return MEMORY[0x1E0CD3460]();
}

uint64_t type metadata accessor for SceneEvents.Render()
{
  return MEMORY[0x1E0CD3478]();
}

uint64_t SceneEvents.Update.deltaTime.getter()
{
  return MEMORY[0x1E0CD3480]();
}

uint64_t type metadata accessor for SceneEvents.Update()
{
  return MEMORY[0x1E0CD3490]();
}

uint64_t __EntityRef.__as<A>(_:)()
{
  return MEMORY[0x1E0CD34B0]();
}

uint64_t type metadata accessor for __EntityRef()
{
  return MEMORY[0x1E0CD34B8]();
}

uint64_t static __PeerIDRef.__fromCore(_:)()
{
  return MEMORY[0x1E0CD34C0]();
}

uint64_t __PeerIDRef.__as<A>(_:)()
{
  return MEMORY[0x1E0CD34C8]();
}

uint64_t type metadata accessor for AmbientLight()
{
  return MEMORY[0x1E0CD34E0]();
}

uint64_t HasAnchoring.anchoring.getter()
{
  return MEMORY[0x1E0CD3538]();
}

Swift::Void __swiftcall HasHierarchy.removeFromParent(preservingWorldTransform:)(Swift::Bool preservingWorldTransform)
{
  MEMORY[0x1E0CD3560](preservingWorldTransform);
}

uint64_t HasHierarchy.parent.getter()
{
  return MEMORY[0x1E0CD3568]();
}

uint64_t HasHierarchy.children.getter()
{
  return MEMORY[0x1E0CD3578]();
}

uint64_t HasTransform.setTransformMatrix(_:relativeTo:)()
{
  return MEMORY[0x1E0CD3588]();
}

uint64_t HasTransform.orientation.modify()
{
  return MEMORY[0x1E0CD3598]();
}

uint64_t HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)()
{
  return MEMORY[0x1E0CD35B8]();
}

uint64_t HasTransform.transformMatrix(relativeTo:)()
{
  return MEMORY[0x1E0CD35C8]();
}

uint64_t HasTransform.scale(relativeTo:)()
{
  return MEMORY[0x1E0CD35D0]();
}

uint64_t HasTransform.scale.modify()
{
  return MEMORY[0x1E0CD35D8]();
}

uint64_t HasTransform.convert(normal:from:)()
{
  return MEMORY[0x1E0CD35F0]();
}

uint64_t HasTransform.convert(position:to:)()
{
  return MEMORY[0x1E0CD35F8]();
}

uint64_t HasTransform.convert(position:from:)()
{
  return MEMORY[0x1E0CD3600]();
}

uint64_t HasTransform.convert(direction:to:)()
{
  return MEMORY[0x1E0CD3608]();
}

uint64_t HasTransform.convert(direction:from:)()
{
  return MEMORY[0x1E0CD3610]();
}

uint64_t HasTransform.position(relativeTo:)()
{
  return MEMORY[0x1E0CD3620]();
}

uint64_t HasTransform.position.modify()
{
  return MEMORY[0x1E0CD3628]();
}

uint64_t HasTransform.position.setter()
{
  return MEMORY[0x1E0CD3638]();
}

uint64_t HasTransform.setScale(_:relativeTo:)()
{
  return MEMORY[0x1E0CD3640]();
}

uint64_t static InputManager.notify(_:val0:val1:val2:)()
{
  return MEMORY[0x1E0CD3660]();
}

uint64_t type metadata accessor for InputManager()
{
  return MEMORY[0x1E0CD3668]();
}

uint64_t static MeshResource.__generateFace(from:fillMesh:)()
{
  return MEMORY[0x1E0CD3670]();
}

uint64_t static MeshResource.generateBox(size:cornerRadius:)()
{
  return MEMORY[0x1E0CD3678]();
}

uint64_t type metadata accessor for MeshResource()
{
  return MEMORY[0x1E0CD3690]();
}

uint64_t MeshResource.init(_:)()
{
  return MEMORY[0x1E0CD3698]();
}

uint64_t UnlitMaterial.init(color:applyPostProcessToneMap:)()
{
  return MEMORY[0x1E0CD36C0]();
}

uint64_t UnlitMaterial.__baseColor.getter()
{
  return MEMORY[0x1E0CD36C8]();
}

uint64_t UnlitMaterial.__tintColor.getter()
{
  return MEMORY[0x1E0CD36D8]();
}

uint64_t UnlitMaterial.__tintColor.setter()
{
  return MEMORY[0x1E0CD36E0]();
}

uint64_t UnlitMaterial.init(color:)()
{
  return MEMORY[0x1E0CD36E8]();
}

uint64_t UnlitMaterial.init()()
{
  return MEMORY[0x1E0CD36F8]();
}

uint64_t type metadata accessor for UnlitMaterial()
{
  return MEMORY[0x1E0CD3700]();
}

uint64_t static CollisionGroup.all.getter()
{
  return MEMORY[0x1E0CD3718]();
}

uint64_t type metadata accessor for CollisionGroup()
{
  return MEMORY[0x1E0CD3738]();
}

uint64_t ModelComponent.init(mesh:materials:)()
{
  return MEMORY[0x1E0CD3760]();
}

uint64_t ModelComponent.mesh.setter()
{
  return MEMORY[0x1E0CD3768]();
}

uint64_t type metadata accessor for ModelComponent()
{
  return MEMORY[0x1E0CD3780]();
}

uint64_t SimpleMaterial.__baseColor.getter()
{
  return MEMORY[0x1E0CD3790]();
}

uint64_t SimpleMaterial.__tintColor.getter()
{
  return MEMORY[0x1E0CD37A0]();
}

uint64_t SimpleMaterial.init(color:roughness:isMetallic:assetService:)()
{
  return MEMORY[0x1E0CD37B0]();
}

uint64_t SimpleMaterial.init(color:roughness:isMetallic:)()
{
  return MEMORY[0x1E0CD37B8]();
}

uint64_t static __RESignpostID.UpdateLoop.getter()
{
  return MEMORY[0x1E0CD37F0]();
}

uint64_t HasBodyTracking.bodyTracking.getter()
{
  return MEMORY[0x1E0CD3848]();
}

uint64_t dispatch thunk of RERenderManager.__coreRenderManager.getter()
{
  return MEMORY[0x1E0CD3880]();
}

uint64_t dispatch thunk of RERenderManager.getLayerSize(_:)()
{
  return MEMORY[0x1E0CD3888]();
}

uint64_t dispatch thunk of RERenderManager.setLayerSize(_:_:_:)()
{
  return MEMORY[0x1E0CD3890]();
}

uint64_t dispatch thunk of RERenderManager.waitUntilScheduled()()
{
  return MEMORY[0x1E0CD3898]();
}

uint64_t dispatch thunk of RERenderManager.registerRenderLayer(_:)()
{
  return MEMORY[0x1E0CD38A0]();
}

uint64_t dispatch thunk of RERenderManager.unregisterRenderLayer(_:)()
{
  return MEMORY[0x1E0CD38A8]();
}

uint64_t dispatch thunk of RERenderManager.createRenderFrameSettings()()
{
  return MEMORY[0x1E0CD38B0]();
}

uint64_t dispatch thunk of RERenderManager.createRenderFrameWorkload()()
{
  return MEMORY[0x1E0CD38B8]();
}

uint64_t type metadata accessor for RERenderManager()
{
  return MEMORY[0x1E0CD38C0]();
}

uint64_t TextureResource.init<A>(named:in:options:textureLoader:)()
{
  return MEMORY[0x1E0CD38C8]();
}

uint64_t static TextureResource.MipmapsMode.== infix(_:_:)()
{
  return MEMORY[0x1E0CD38E8]();
}

uint64_t type metadata accessor for TextureResource.MipmapsMode()
{
  return MEMORY[0x1E0CD38F0]();
}

uint64_t TextureResource.CreateOptions.mipmapsMode.getter()
{
  return MEMORY[0x1E0CD38F8]();
}

uint64_t TextureResource.CreateOptions.init(semantic:mipmapsMode:)()
{
  return MEMORY[0x1E0CD3900]();
}

uint64_t TextureResource.CreateOptions.semantic.getter()
{
  return MEMORY[0x1E0CD3908]();
}

uint64_t type metadata accessor for TextureResource.CreateOptions()
{
  return MEMORY[0x1E0CD3910]();
}

uint64_t static TextureResource.load(named:in:textureLoader:)()
{
  return MEMORY[0x1E0CD3918]();
}

uint64_t static TextureResource.load(named:in:options:textureLoader:)()
{
  return MEMORY[0x1E0CD3920]();
}

uint64_t type metadata accessor for TextureResource.Semantic()
{
  return MEMORY[0x1E0CD3938]();
}

uint64_t static TextureResource.loadAsync(named:in:textureLoader:)()
{
  return MEMORY[0x1E0CD3950]();
}

uint64_t static TextureResource.loadAsync(named:in:options:textureLoader:)()
{
  return MEMORY[0x1E0CD3958]();
}

uint64_t type metadata accessor for TextureResource()
{
  return MEMORY[0x1E0CD3960]();
}

uint64_t CollisionCastHit.entity.getter()
{
  return MEMORY[0x1E0CD3978]();
}

uint64_t CollisionCastHit.position.getter()
{
  return MEMORY[0x1E0CD3988]();
}

uint64_t type metadata accessor for CollisionCastHit()
{
  return MEMORY[0x1E0CD3990]();
}

uint64_t static TextMeshResource.makeMeshResource(_:extrusionDepth:font:containerFrame:alignment:lineBreakMode:segmentDensity:)()
{
  return MEMORY[0x1E0CD39A0]();
}

uint64_t type metadata accessor for TextMeshResource()
{
  return MEMORY[0x1E0CD39A8]();
}

uint64_t dispatch thunk of __ServiceLocator.coreServiceLocator.getter()
{
  return MEMORY[0x1E0CD3A18]();
}

uint64_t dispatch thunk of __ServiceLocator.assetService.getter()
{
  return MEMORY[0x1E0CD3A20]();
}

uint64_t dispatch thunk of __ServiceLocator.sceneService.getter()
{
  return MEMORY[0x1E0CD3A28]();
}

uint64_t dispatch thunk of __ServiceLocator.renderService.getter()
{
  return MEMORY[0x1E0CD3A30]();
}

uint64_t dispatch thunk of __ServiceLocator.engine.getter()
{
  return MEMORY[0x1E0CD3A58]();
}

uint64_t static __ServiceLocator.shared.getter()
{
  return MEMORY[0x1E0CD3A60]();
}

uint64_t type metadata accessor for __ServiceLocator()
{
  return MEMORY[0x1E0CD3A68]();
}

uint64_t OcclusionMaterial.init(receivesDynamicLighting:)()
{
  return MEMORY[0x1E0CD3A90]();
}

uint64_t type metadata accessor for OcclusionMaterial()
{
  return MEMORY[0x1E0CD3AA0]();
}

uint64_t __REAnchoringType.isEqualToARAnchor(anchor:)()
{
  return MEMORY[0x1E0CD3AA8]();
}

uint64_t type metadata accessor for __REAnchoringType()
{
  return MEMORY[0x1E0CD3AF0]();
}

uint64_t __REECSManagerRef.__as<A>(_:)()
{
  return MEMORY[0x1E0CD3B00]();
}

uint64_t type metadata accessor for __REECSManagerRef()
{
  return MEMORY[0x1E0CD3B08]();
}

uint64_t type metadata accessor for AnchoringComponent.Target.Classification()
{
  return MEMORY[0x1E0CD3B30]();
}

uint64_t static AnchoringComponent.Target.Alignment.horizontal.getter()
{
  return MEMORY[0x1E0CD3B78]();
}

uint64_t static AnchoringComponent.Target.Alignment.vertical.getter()
{
  return MEMORY[0x1E0CD3B88]();
}

uint64_t type metadata accessor for AnchoringComponent.Target.Alignment()
{
  return MEMORY[0x1E0CD3B90]();
}

uint64_t type metadata accessor for AnchoringComponent.Target()
{
  return MEMORY[0x1E0CD3BB8]();
}

uint64_t AnchoringComponent.target.getter()
{
  return MEMORY[0x1E0CD3BD0]();
}

uint64_t type metadata accessor for AnchoringComponent()
{
  return MEMORY[0x1E0CD3BE0]();
}

uint64_t AnchoringComponent.init(_:)()
{
  return MEMORY[0x1E0CD3BF0]();
}

{
  return MEMORY[0x1E0CD3BF8]();
}

uint64_t HasSynchronization.isOwner.getter()
{
  return MEMORY[0x1E0CD3C40]();
}

uint64_t SpotLightComponent.attenuationFalloffExponent.getter()
{
  return MEMORY[0x1E0CD3C48]();
}

uint64_t SpotLightComponent.init(cgColor:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:attenuationFalloffExponent:)()
{
  return MEMORY[0x1E0CD3C50]();
}

uint64_t SpotLightComponent.attenuationRadius.getter()
{
  return MEMORY[0x1E0CD3C58]();
}

uint64_t SpotLightComponent.innerAngleInDegrees.getter()
{
  return MEMORY[0x1E0CD3C60]();
}

uint64_t SpotLightComponent.outerAngleInDegrees.getter()
{
  return MEMORY[0x1E0CD3C68]();
}

uint64_t SpotLightComponent.__color.getter()
{
  return MEMORY[0x1E0CD3C70]();
}

uint64_t SpotLightComponent.__color.setter()
{
  return MEMORY[0x1E0CD3C78]();
}

uint64_t SpotLightComponent.init(cgColor:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:)()
{
  return MEMORY[0x1E0CD3C80]();
}

uint64_t SpotLightComponent.intensity.getter()
{
  return MEMORY[0x1E0CD3C88]();
}

uint64_t type metadata accessor for SpotLightComponent()
{
  return MEMORY[0x1E0CD3C90]();
}

uint64_t static __MaterialResource.createMaterial(assetPath:in:)()
{
  return MEMORY[0x1E0CD3CE0]();
}

uint64_t dispatch thunk of __MaterialResource.coreAsset.getter()
{
  return MEMORY[0x1E0CD3CF8]();
}

uint64_t type metadata accessor for __MaterialResource()
{
  return MEMORY[0x1E0CD3D00]();
}

uint64_t static EnvironmentResource.defaultObject()()
{
  return MEMORY[0x1E0CD3D10]();
}

uint64_t dispatch thunk of EnvironmentResource.coreSkyboxAsset.getter()
{
  return MEMORY[0x1E0CD3D18]();
}

uint64_t static EnvironmentResource.defaultAR()()
{
  return MEMORY[0x1E0CD3D28]();
}

uint64_t type metadata accessor for EnvironmentResource()
{
  return MEMORY[0x1E0CD3D30]();
}

uint64_t PointLightComponent.attenuationFalloffExponent.getter()
{
  return MEMORY[0x1E0CD3D40]();
}

uint64_t PointLightComponent.init(cgColor:intensity:attenuationRadius:attenuationFalloffExponent:)()
{
  return MEMORY[0x1E0CD3D48]();
}

uint64_t PointLightComponent.attenuationRadius.getter()
{
  return MEMORY[0x1E0CD3D50]();
}

uint64_t PointLightComponent.__color.getter()
{
  return MEMORY[0x1E0CD3D58]();
}

uint64_t PointLightComponent.__color.setter()
{
  return MEMORY[0x1E0CD3D60]();
}

uint64_t PointLightComponent.init(cgColor:intensity:attenuationRadius:)()
{
  return MEMORY[0x1E0CD3D68]();
}

uint64_t PointLightComponent.intensity.getter()
{
  return MEMORY[0x1E0CD3D70]();
}

uint64_t type metadata accessor for PointLightComponent()
{
  return MEMORY[0x1E0CD3D78]();
}

uint64_t __REOSSignpostScope.init(osLog:signpostID:name:)()
{
  return MEMORY[0x1E0CD3D88]();
}

uint64_t type metadata accessor for __REOSSignpostScope()
{
  return MEMORY[0x1E0CD3D90]();
}

uint64_t __RKEntityTapTrigger.init(targetEntity:reversible:)()
{
  return MEMORY[0x1E0CD3DD8]();
}

uint64_t type metadata accessor for __RKEntityTapTrigger()
{
  return MEMORY[0x1E0CD3DE8]();
}

uint64_t type metadata accessor for BodyTrackingComponent.Target()
{
  return MEMORY[0x1E0CD3E18]();
}

uint64_t BodyTrackingComponent.target.getter()
{
  return MEMORY[0x1E0CD3E20]();
}

uint64_t BodyTrackingComponent.isPaused.getter()
{
  return MEMORY[0x1E0CD3E28]();
}

uint64_t type metadata accessor for BodyTrackingComponent()
{
  return MEMORY[0x1E0CD3E30]();
}

uint64_t dispatch thunk of RERenderFrameSettings.setTotalTime(_:)()
{
  return MEMORY[0x1E0CD3E38]();
}

uint64_t dispatch thunk of RERenderFrameWorkload.commitWithImmediatePresent()()
{
  return MEMORY[0x1E0CD3E40]();
}

uint64_t dispatch thunk of RERenderFrameWorkload.commit()()
{
  return MEMORY[0x1E0CD3E48]();
}

uint64_t dispatch thunk of RERenderFrameWorkload.configure(_:)()
{
  return MEMORY[0x1E0CD3E50]();
}

uint64_t dispatch thunk of __RKEntityInteraction.trigger.getter()
{
  return MEMORY[0x1E0CD3EF0]();
}

uint64_t type metadata accessor for CollisionCastQueryType()
{
  return MEMORY[0x1E0CD3F18]();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.setWireframeMode(displayWireframe:)()
{
  return MEMORY[0x1E0CD3F58]();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.setup(mgr:)()
{
  return MEMORY[0x1E0CD3F60]();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.execute(mgr:)()
{
  return MEMORY[0x1E0CD3F70]();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.unsetup(mgr:)()
{
  return MEMORY[0x1E0CD3F78]();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.__handle.getter()
{
  return MEMORY[0x1E0CD3F80]();
}

uint64_t type metadata accessor for __RERenderGraphEmitter()
{
  return MEMORY[0x1E0CD3F88]();
}

uint64_t __RERenderGraphEmitter.init(_:)()
{
  return MEMORY[0x1E0CD3F98]();
}

uint64_t dispatch thunk of __RKEntityTriggerGroup.triggers.getter()
{
  return MEMORY[0x1E0CD3FA0]();
}

uint64_t type metadata accessor for __RKEntityTriggerGroup()
{
  return MEMORY[0x1E0CD3FA8]();
}

uint64_t type metadata accessor for MaterialScalarParameter()
{
  return MEMORY[0x1E0CD3FF8]();
}

uint64_t __AmbientLightComponent.color.setter()
{
  return MEMORY[0x1E0CD4010]();
}

uint64_t __AmbientLightComponent.intensity.setter()
{
  return MEMORY[0x1E0CD4018]();
}

uint64_t static __MaterialColorParameter.== infix(_:_:)()
{
  return MEMORY[0x1E0CD4020]();
}

uint64_t __MaterialColorParameter.hash(into:)()
{
  return MEMORY[0x1E0CD4028]();
}

uint64_t type metadata accessor for __MaterialColorParameter()
{
  return MEMORY[0x1E0CD4040]();
}

uint64_t DirectionalLightComponent.isRealWorldProxy.getter()
{
  return MEMORY[0x1E0CD4048]();
}

uint64_t DirectionalLightComponent.__color.getter()
{
  return MEMORY[0x1E0CD4050]();
}

uint64_t DirectionalLightComponent.__color.setter()
{
  return MEMORY[0x1E0CD4058]();
}

uint64_t DirectionalLightComponent.init(cgColor:intensity:isRealWorldProxy:)()
{
  return MEMORY[0x1E0CD4060]();
}

uint64_t DirectionalLightComponent.intensity.getter()
{
  return MEMORY[0x1E0CD4068]();
}

uint64_t type metadata accessor for DirectionalLightComponent()
{
  return MEMORY[0x1E0CD4070]();
}

uint64_t RKARSegmentationComponent.cameraTextureY.setter()
{
  return MEMORY[0x1E0CD4080]();
}

uint64_t RKARSegmentationComponent.cameraTextureCbCr.setter()
{
  return MEMORY[0x1E0CD4088]();
}

uint64_t RKARSegmentationComponent.estimatedDepthData.setter()
{
  return MEMORY[0x1E0CD4090]();
}

uint64_t RKARSegmentationComponent.segmentationBuffer.setter()
{
  return MEMORY[0x1E0CD4098]();
}

uint64_t RKARSegmentationComponent.init()()
{
  return MEMORY[0x1E0CD40A8]();
}

uint64_t type metadata accessor for RKARSegmentationComponent()
{
  return MEMORY[0x1E0CD40B0]();
}

uint64_t type metadata accessor for PerspectiveCameraComponent()
{
  return MEMORY[0x1E0CD4110]();
}

uint64_t __RKEntityProximityTrigger.init(targetEntity:distance:type:)()
{
  return MEMORY[0x1E0CD4120]();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.targetEntity.getter()
{
  return MEMORY[0x1E0CD4128]();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.__targetEntity.getter()
{
  return MEMORY[0x1E0CD4130]();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.type.getter()
{
  return MEMORY[0x1E0CD4138]();
}

uint64_t type metadata accessor for __RKEntityProximityTrigger.ExitType()
{
  return MEMORY[0x1E0CD4140]();
}

uint64_t type metadata accessor for __RKEntityProximityTrigger()
{
  return MEMORY[0x1E0CD4148]();
}

uint64_t type metadata accessor for SceneUnderstandingComponent.EntityType()
{
  return MEMORY[0x1E0CD41B0]();
}

uint64_t SceneUnderstandingComponent.init(entityType:)()
{
  return MEMORY[0x1E0CD41C0]();
}

uint64_t type metadata accessor for SceneUnderstandingComponent()
{
  return MEMORY[0x1E0CD41D0]();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__interactions.getter()
{
  return MEMORY[0x1E0CD41F0]();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.proximityEnabled.getter()
{
  return MEMORY[0x1E0CD41F8]();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__performInteractions(matching:on:)()
{
  return MEMORY[0x1E0CD4208]();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.areInteractionsEnabled.getter()
{
  return MEMORY[0x1E0CD4210]();
}

uint64_t type metadata accessor for __RKEntityInteractionManager()
{
  return MEMORY[0x1E0CD4238]();
}

uint64_t Scene.coreScene.getter()
{
  return MEMORY[0x1E0CD4270]();
}

uint64_t dispatch thunk of Scene.__coreScene.getter()
{
  return MEMORY[0x1E0CD4278]();
}

uint64_t type metadata accessor for Scene.PixelCastError()
{
  return MEMORY[0x1E0CD4288]();
}

uint64_t static Scene.pixelCastRequest.getter()
{
  return MEMORY[0x1E0CD4298]();
}

uint64_t static Scene.pixelCastRequest.setter()
{
  return MEMORY[0x1E0CD42A0]();
}

uint64_t static Scene.pixelCastArrayRequest.getter()
{
  return MEMORY[0x1E0CD42A8]();
}

uint64_t static Scene.pixelCastArrayRequest.setter()
{
  return MEMORY[0x1E0CD42B0]();
}

uint64_t dispatch thunk of Scene.defaultCamera.getter()
{
  return MEMORY[0x1E0CD42C0]();
}

uint64_t Scene.physicsOrigin.getter()
{
  return MEMORY[0x1E0CD42C8]();
}

uint64_t Scene.physicsOrigin.setter()
{
  return MEMORY[0x1E0CD42D0]();
}

uint64_t dispatch thunk of Scene.__audioListener.getter()
{
  return MEMORY[0x1E0CD42E0]();
}

uint64_t dispatch thunk of Scene.__audioListener.setter()
{
  return MEMORY[0x1E0CD42E8]();
}

uint64_t Scene.AnchorCollection.appendNinja(_:)()
{
  return MEMORY[0x1E0CD42F8]();
}

uint64_t Scene.AnchorCollection.removeNinja(_:)()
{
  return MEMORY[0x1E0CD4300]();
}

uint64_t Scene.AnchorCollection.makeIterator()()
{
  return MEMORY[0x1E0CD4308]();
}

uint64_t Scene.AnchorCollection.append(_:)()
{
  return MEMORY[0x1E0CD4310]();
}

uint64_t Scene.AnchorCollection.remove(_:)()
{
  return MEMORY[0x1E0CD4318]();
}

uint64_t type metadata accessor for Scene.AnchorCollection()
{
  return MEMORY[0x1E0CD4320]();
}

uint64_t dispatch thunk of Scene.addDefaultCamera()()
{
  return MEMORY[0x1E0CD4340]();
}

uint64_t dispatch thunk of Scene.applyReverbPreset(_:)()
{
  return MEMORY[0x1E0CD4348]();
}

uint64_t dispatch thunk of Scene.__interactionService.getter()
{
  return MEMORY[0x1E0CD4350]();
}

uint64_t dispatch thunk of Scene.internalActiveCamera.getter()
{
  return MEMORY[0x1E0CD4358]();
}

uint64_t dispatch thunk of Scene.synchronizationService.getter()
{
  return MEMORY[0x1E0CD4360]();
}

uint64_t dispatch thunk of Scene.setReverbPresetPriority(_:)()
{
  return MEMORY[0x1E0CD4368]();
}

uint64_t Scene.__allocating_init(name:)()
{
  return MEMORY[0x1E0CD4370]();
}

uint64_t dispatch thunk of Scene.anchors.getter()
{
  return MEMORY[0x1E0CD4380]();
}

uint64_t Scene.raycast(origin:direction:length:query:mask:relativeTo:)()
{
  return MEMORY[0x1E0CD4388]();
}

uint64_t dispatch thunk of Scene.session.setter()
{
  return MEMORY[0x1E0CD4390]();
}

uint64_t Scene.subscribe<A>(to:on:_:)()
{
  return MEMORY[0x1E0CD43A8]();
}

uint64_t type metadata accessor for Scene()
{
  return MEMORY[0x1E0CD43B0]();
}

uint64_t Entity.coreEntity.getter()
{
  return MEMORY[0x1E0CD43C0]();
}

uint64_t dispatch thunk of Entity.__coreEntity.getter()
{
  return MEMORY[0x1E0CD43C8]();
}

uint64_t static Entity.ConfigurationCatalog.resolveRealityFileURL(_:)()
{
  return MEMORY[0x1E0CD43E8]();
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.LoadOptions()
{
  return MEMORY[0x1E0CD4440]();
}

uint64_t Entity.ConfigurationCatalog.init(importSession:importSessionSwiftObject:options:)()
{
  return MEMORY[0x1E0CD4450]();
}

uint64_t Entity.ConfigurationCatalog.init(realityFileUrl:options:)()
{
  return MEMORY[0x1E0CD4460]();
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError()
{
  return MEMORY[0x1E0CD4480]();
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog()
{
  return MEMORY[0x1E0CD4490]();
}

uint64_t Entity.sendEvent(_:)()
{
  return MEMORY[0x1E0CD44B0]();
}

uint64_t dispatch thunk of Entity.components.modify()
{
  return MEMORY[0x1E0CD44B8]();
}

uint64_t dispatch thunk of Entity.components.getter()
{
  return MEMORY[0x1E0CD44C0]();
}

uint64_t Entity.ComponentSet.set<A>(_:)()
{
  return MEMORY[0x1E0CD44C8]();
}

uint64_t type metadata accessor for Entity.ComponentSet()
{
  return MEMORY[0x1E0CD44D0]();
}

uint64_t Entity.ComponentSet.subscript.modify()
{
  return MEMORY[0x1E0CD44D8]();
}

uint64_t Entity.ComponentSet.subscript.getter()
{
  return MEMORY[0x1E0CD44E0]();
}

uint64_t Entity.ComponentSet.subscript.setter()
{
  return MEMORY[0x1E0CD44E8]();
}

Swift::Void __swiftcall Entity.turnIntoNinja()()
{
  MEMORY[0x1E0CD4500]();
}

uint64_t Entity.ChildCollection.makeIterator()()
{
  return MEMORY[0x1E0CD4520]();
}

uint64_t Entity.ChildCollection.IndexingIterator.next()()
{
  return MEMORY[0x1E0CD4528]();
}

Swift::Void __swiftcall Entity.ChildCollection.append(contentsOf:preservingWorldTransforms:)(Swift::OpaquePointer contentsOf, Swift::Bool preservingWorldTransforms)
{
  MEMORY[0x1E0CD4540](contentsOf._rawValue, preservingWorldTransforms);
}

uint64_t type metadata accessor for Entity.ChildCollection()
{
  return MEMORY[0x1E0CD4550]();
}

uint64_t Entity.__anchoringType.getter()
{
  return MEMORY[0x1E0CD4578]();
}

uint64_t Entity.__accessibilityLabel.getter()
{
  return MEMORY[0x1E0CD45A0]();
}

uint64_t Entity.__isAccessibilityRoot.getter()
{
  return MEMORY[0x1E0CD45A8]();
}

uint64_t Entity.__interactionIdentifier.getter()
{
  return MEMORY[0x1E0CD45B0]();
}

uint64_t Entity.__isAccessibilityEnabled.getter()
{
  return MEMORY[0x1E0CD45B8]();
}

uint64_t Entity.__accessibilityDescription.getter()
{
  return MEMORY[0x1E0CD45C0]();
}

uint64_t Entity.id.getter()
{
  return MEMORY[0x1E0CD45D0]();
}

uint64_t dispatch thunk of Entity.name.setter()
{
  return MEMORY[0x1E0CD45F0]();
}

uint64_t dispatch thunk of Entity.scene.getter()
{
  return MEMORY[0x1E0CD45F8]();
}

uint64_t Entity.anchor.getter()
{
  return MEMORY[0x1E0CD4608]();
}

uint64_t static Entity.fromCore(_:ignoringEntityInfo:)()
{
  return MEMORY[0x1E0CD4610]();
}

uint64_t dispatch thunk of Entity.isEnabled.setter()
{
  return MEMORY[0x1E0CD4620]();
}

uint64_t Entity.init()()
{
  return MEMORY[0x1E0CD4640]();
}

uint64_t type metadata accessor for Entity()
{
  return MEMORY[0x1E0CD4648]();
}

uint64_t Entity.deinit()
{
  return MEMORY[0x1E0CD4668]();
}

uint64_t HasModel.model.modify()
{
  return MEMORY[0x1E0CD4680]();
}

uint64_t HasModel.model.setter()
{
  return MEMORY[0x1E0CD4688]();
}

uint64_t __Engine.coreEngine.getter()
{
  return MEMORY[0x1E0CD46A0]();
}

uint64_t dispatch thunk of __Engine.asyncOnEngineQueue(_:)()
{
  return MEMORY[0x1E0CD46A8]();
}

uint64_t dispatch thunk of __Engine.hasRenderedThisFrame.getter()
{
  return MEMORY[0x1E0CD46F0]();
}

uint64_t dispatch thunk of __Engine.hasRenderedThisFrame.setter()
{
  return MEMORY[0x1E0CD46F8]();
}

uint64_t dispatch thunk of __Engine.__stop()()
{
  return MEMORY[0x1E0CD4728]();
}

uint64_t dispatch thunk of __Engine.__start()()
{
  return MEMORY[0x1E0CD4730]();
}

uint64_t dispatch thunk of __Engine.services.getter()
{
  return MEMORY[0x1E0CD4738]();
}

uint64_t dispatch thunk of __Engine.isRunning.getter()
{
  return MEMORY[0x1E0CD4740]();
}

uint64_t static Component.__load(from:)()
{
  return MEMORY[0x1E0CD4770]();
}

uint64_t static Component.__coreComponentType.getter()
{
  return MEMORY[0x1E0CD4778]();
}

uint64_t static Component.registerComponent()()
{
  return MEMORY[0x1E0CD4780]();
}

uint64_t static Component.__fromCore(_:)()
{
  return MEMORY[0x1E0CD4788]();
}

uint64_t static Component.__typeName.getter()
{
  return MEMORY[0x1E0CD4790]();
}

uint64_t static Component.__addIntrospectionData(_:)()
{
  return MEMORY[0x1E0CD4798]();
}

uint64_t static Component.__free(to:offset:)()
{
  return MEMORY[0x1E0CD47A0]();
}

uint64_t static Component.__load(from:offset:)()
{
  return MEMORY[0x1E0CD47A8]();
}

uint64_t static Component.__size.getter()
{
  return MEMORY[0x1E0CD47B0]();
}

uint64_t static Component.__store(attribute:to:offset:deinitialize:)()
{
  return MEMORY[0x1E0CD47B8]();
}

uint64_t static Component.__store(attribute:to:offset:)()
{
  return MEMORY[0x1E0CD47C0]();
}

uint64_t Component.__toCore(_:)()
{
  return MEMORY[0x1E0CD47C8]();
}

uint64_t Transform.init(matrix:)()
{
  return MEMORY[0x1E0CD47D8]();
}

uint64_t Transform.init()()
{
  return MEMORY[0x1E0CD47F0]();
}

uint64_t static __REAsset.__fromHandleTransfer(_:)()
{
  return MEMORY[0x1E0CD4800]();
}

uint64_t type metadata accessor for __REAsset()
{
  return MEMORY[0x1E0CD4810]();
}

uint64_t static __REOSLog.UpdateLoop.getter()
{
  return MEMORY[0x1E0CD4820]();
}

uint64_t _CGColorInitTrampoline.init(_colorLiteralRed:green:blue:alpha:)()
{
  return MEMORY[0x1E0C9B8B8]();
}

uint64_t type metadata accessor for GroupSessionMessenger.DeliveryMode()
{
  return MEMORY[0x1E0CB3F78]();
}

uint64_t GroupSessionMessenger.MessageContext.source.getter()
{
  return MEMORY[0x1E0CB3F90]();
}

uint64_t type metadata accessor for GroupSessionMessenger.MessageContext()
{
  return MEMORY[0x1E0CB3F98]();
}

uint64_t GroupSessionMessenger.send<A>(_:to:completion:)()
{
  return MEMORY[0x1E0CB3FA8]();
}

uint64_t GroupSessionMessenger.__allocating_init<A>(session:deliveryMode:)()
{
  return MEMORY[0x1E0CB3FD8]();
}

uint64_t GroupSessionMessenger.__allocating_init<A>(session:)()
{
  return MEMORY[0x1E0CB3FE8]();
}

uint64_t GroupSessionMessenger.Messages.makeAsyncIterator()()
{
  return MEMORY[0x1E0CB3FF8]();
}

uint64_t GroupSessionMessenger.messages<A>(of:)()
{
  return MEMORY[0x1E0CB4030]();
}

uint64_t type metadata accessor for GroupSessionMessenger()
{
  return MEMORY[0x1E0CB4038]();
}

uint64_t GroupSession.localParticipant.getter()
{
  return MEMORY[0x1E0CB4098]();
}

uint64_t GroupSession.activeParticipants.getter()
{
  return MEMORY[0x1E0CB40A0]();
}

uint64_t GroupSession.$activeParticipants.getter()
{
  return MEMORY[0x1E0CB40B0]();
}

uint64_t GroupSession.id.getter()
{
  return MEMORY[0x1E0CB40C8]();
}

uint64_t type metadata accessor for GroupSession.State()
{
  return MEMORY[0x1E0CB4130]();
}

uint64_t GroupSession.$state.getter()
{
  return MEMORY[0x1E0CB4158]();
}

uint64_t static Participant.== infix(_:_:)()
{
  return MEMORY[0x1E0CB4238]();
}

uint64_t Participant.id.getter()
{
  return MEMORY[0x1E0CB4240]();
}

uint64_t type metadata accessor for Participant()
{
  return MEMORY[0x1E0CB4250]();
}

uint64_t static Participants.only(_:)()
{
  return MEMORY[0x1E0CB4288]();
}

uint64_t type metadata accessor for Participants()
{
  return MEMORY[0x1E0CB4290]();
}

uint64_t static RealityFusionSession.createRealityFusionSession(arSession:)()
{
  return MEMORY[0x1E0CD4828]();
}

uint64_t static RealityFusionSession.sharedSession.getter()
{
  return MEMORY[0x1E0CD4830]();
}

uint64_t dispatch thunk of RealityFusionSession.sharedCount.modify()
{
  return MEMORY[0x1E0CD4838]();
}

uint64_t dispatch thunk of RealityFusionSession.sharedCount.getter()
{
  return MEMORY[0x1E0CD4840]();
}

uint64_t dispatch thunk of RealityFusionSession.serviceManager.getter()
{
  return MEMORY[0x1E0CD4848]();
}

uint64_t RealityFusionSession.configure(with:)()
{
  return MEMORY[0x1E0CD4850]();
}

uint64_t type metadata accessor for RealityFusionSession()
{
  return MEMORY[0x1E0CD4858]();
}

uint64_t PixelCastHit.init(entity:normal:position:meshPart:instance:primitive:barycentric:)()
{
  return MEMORY[0x1E0CD4868]();
}

uint64_t type metadata accessor for PixelCastHit()
{
  return MEMORY[0x1E0CD4870]();
}

uint64_t TextComponent.cornerRadius.getter()
{
  return MEMORY[0x1E0CD4888]();
}

uint64_t TextComponent.coreEdgeInsets.modify()
{
  return MEMORY[0x1E0CD4890]();
}

uint64_t TextComponent.coreEdgeInsets.getter()
{
  return MEMORY[0x1E0CD4898]();
}

uint64_t TextComponent.backgroundColor.getter()
{
  return MEMORY[0x1E0CD48A0]();
}

uint64_t TextComponent.size.getter()
{
  return MEMORY[0x1E0CD48A8]();
}

uint64_t TextComponent.text.getter()
{
  return MEMORY[0x1E0CD48B0]();
}

uint64_t type metadata accessor for TextComponent()
{
  return MEMORY[0x1E0CD48B8]();
}

uint64_t CustomMaterial.EmissiveColor.__color.getter()
{
  return MEMORY[0x1E0CD48D8]();
}

uint64_t CustomMaterial.BaseColor.__tint.getter()
{
  return MEMORY[0x1E0CD48F0]();
}

uint64_t static RKARSystemCore.generateDecimatedMeshes.setter()
{
  return MEMORY[0x1E0CD4900]();
}

uint64_t type metadata accessor for RKARSystemCore()
{
  return MEMORY[0x1E0CD4908]();
}

uint64_t pickingEmitter.getter()
{
  return MEMORY[0x1E0CD4910]();
}

uint64_t HasAmbientLight.light.modify()
{
  return MEMORY[0x1E0CD4918]();
}

uint64_t type metadata accessor for AntialiasingMode()
{
  return MEMORY[0x1E0CD4930]();
}

uint64_t __AnyARKitObject.as<A>(type:)()
{
  return MEMORY[0x1E0CD4940]();
}

uint64_t type metadata accessor for __AnyARKitObject()
{
  return MEMORY[0x1E0CD4948]();
}

uint64_t __AnyARKitObject.init<A>(_:)()
{
  return MEMORY[0x1E0CD4958]();
}

uint64_t __SkyboxMaterial.__resource.getter()
{
  return MEMORY[0x1E0CD4960]();
}

uint64_t __SkyboxMaterial.init()()
{
  return MEMORY[0x1E0CD4968]();
}

uint64_t type metadata accessor for __SkyboxMaterial()
{
  return MEMORY[0x1E0CD4970]();
}

uint64_t __SkyboxComponent.init(environment:)()
{
  return MEMORY[0x1E0CD4980]();
}

uint64_t type metadata accessor for __SkyboxComponent()
{
  return MEMORY[0x1E0CD4988]();
}

uint64_t MaterialParameters.Value.cgColorValue.getter()
{
  return MEMORY[0x1E0CD4998]();
}

uint64_t static MaterialParameters.Value.cgColor(_:)()
{
  return MEMORY[0x1E0CD49A0]();
}

uint64_t HoverEffectComponent.hoverEffect.getter()
{
  return MEMORY[0x1E0CD49B0]();
}

uint64_t HoverEffectComponent.ShaderHoverEffectInputs.fadeInDuration.getter()
{
  return MEMORY[0x1E0CD49B8]();
}

uint64_t HoverEffectComponent.ShaderHoverEffectInputs.fadeOutDuration.getter()
{
  return MEMORY[0x1E0CD49C0]();
}

uint64_t type metadata accessor for HoverEffectComponent.ShaderHoverEffectInputs()
{
  return MEMORY[0x1E0CD49C8]();
}

uint64_t HoverEffectComponent.HighlightHoverEffectStyle._color.getter()
{
  return MEMORY[0x1E0CD49E0]();
}

uint64_t HoverEffectComponent.SpotlightHoverEffectStyle._color.getter()
{
  return MEMORY[0x1E0CD4A10]();
}

uint64_t type metadata accessor for HoverEffectComponent.HoverEffect()
{
  return MEMORY[0x1E0CD4A38]();
}

uint64_t type metadata accessor for HoverEffectComponent.OpacityFunction()
{
  return MEMORY[0x1E0CD4A48]();
}

uint64_t type metadata accessor for HoverEffectComponent()
{
  return MEMORY[0x1E0CD4A50]();
}

uint64_t InputTargetComponent.isEnabled.getter()
{
  return MEMORY[0x1E0CD4A68]();
}

uint64_t type metadata accessor for InputTargetComponent()
{
  return MEMORY[0x1E0CD4A70]();
}

uint64_t dispatch thunk of __ARReferenceProvider.supportsGroup(named:)()
{
  return MEMORY[0x1E0CD4AE8]();
}

uint64_t dispatch thunk of __ARReferenceProvider.__fetchReferenceImage(group:name:physicalWidth:)()
{
  return MEMORY[0x1E0CD4AF0]();
}

uint64_t dispatch thunk of __ARReferenceProvider.__fetchReferenceObject(group:name:)()
{
  return MEMORY[0x1E0CD4AF8]();
}

uint64_t static __ARReferenceProvider.instance(for:)()
{
  return MEMORY[0x1E0CD4B00]();
}

uint64_t type metadata accessor for __ARReferenceProvider()
{
  return MEMORY[0x1E0CD4B10]();
}

uint64_t AccessibilityComponent.isAccessibilityElement.getter()
{
  return MEMORY[0x1E0CD4B18]();
}

uint64_t AccessibilityComponent.CustomContent.label.getter()
{
  return MEMORY[0x1E0CD4B28]();
}

uint64_t AccessibilityComponent.CustomContent.value.getter()
{
  return MEMORY[0x1E0CD4B30]();
}

uint64_t type metadata accessor for AccessibilityComponent.CustomContent()
{
  return MEMORY[0x1E0CD4B38]();
}

uint64_t AccessibilityComponent.customActions.getter()
{
  return MEMORY[0x1E0CD4B48]();
}

uint64_t AccessibilityComponent.customContent.getter()
{
  return MEMORY[0x1E0CD4B58]();
}

uint64_t AccessibilityComponent.systemActions.getter()
{
  return MEMORY[0x1E0CD4B68]();
}

uint64_t AccessibilityComponent.systemActions.setter()
{
  return MEMORY[0x1E0CD4B70]();
}

uint64_t AccessibilityComponent.traitsRawValue.getter()
{
  return MEMORY[0x1E0CD4B78]();
}

uint64_t AccessibilityComponent.traitsRawValue.setter()
{
  return MEMORY[0x1E0CD4B80]();
}

uint64_t static AccessibilityComponent.SupportedActions.activate.getter()
{
  return MEMORY[0x1E0CD4B88]();
}

uint64_t type metadata accessor for AccessibilityComponent.SupportedActions()
{
  return MEMORY[0x1E0CD4B90]();
}

uint64_t type metadata accessor for AccessibilityComponent.RotorTypeInternal()
{
  return MEMORY[0x1E0CD4BB0]();
}

uint64_t AccessibilityComponent.customRotorsRawValue.getter()
{
  return MEMORY[0x1E0CD4BC0]();
}

uint64_t AccessibilityComponent.customRotorsRawValue.setter()
{
  return MEMORY[0x1E0CD4BC8]();
}

uint64_t AccessibilityComponent.label.getter()
{
  return MEMORY[0x1E0CD4BD0]();
}

uint64_t AccessibilityComponent.value.getter()
{
  return MEMORY[0x1E0CD4BE0]();
}

uint64_t AccessibilityComponent.init()()
{
  return MEMORY[0x1E0CD4BF0]();
}

uint64_t type metadata accessor for AccessibilityComponent()
{
  return MEMORY[0x1E0CD4BF8]();
}

uint64_t SpatialTrackingManager.arkitRunnable.getter()
{
  return MEMORY[0x1E0CD4C08]();
}

uint64_t dispatch thunk of SpatialTrackingManager.isRunningUserSession.setter()
{
  return MEMORY[0x1E0CD4C10]();
}

uint64_t static SpatialTrackingManager.shared.getter()
{
  return MEMORY[0x1E0CD4C18]();
}

uint64_t type metadata accessor for SpatialTrackingManager()
{
  return MEMORY[0x1E0CD4C20]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.body.getter()
{
  return MEMORY[0x1E0CD4C30]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.face.getter()
{
  return MEMORY[0x1E0CD4C38]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.image.getter()
{
  return MEMORY[0x1E0CD4C40]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter()
{
  return MEMORY[0x1E0CD4C48]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.world.getter()
{
  return MEMORY[0x1E0CD4C50]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.camera.getter()
{
  return MEMORY[0x1E0CD4C58]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.object.getter()
{
  return MEMORY[0x1E0CD4C60]();
}

uint64_t type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability()
{
  return MEMORY[0x1E0CD4C68]();
}

uint64_t SpatialTrackingSession.Configuration.anchorCapabilitySet.modify()
{
  return MEMORY[0x1E0CD4C88]();
}

uint64_t SpatialTrackingSession.Configuration.anchorCapabilitySet.getter()
{
  return MEMORY[0x1E0CD4C90]();
}

uint64_t static SpatialTrackingSession.Configuration.SceneUnderstandingCapability.shadow.getter()
{
  return MEMORY[0x1E0CD4CA0]();
}

uint64_t static SpatialTrackingSession.Configuration.SceneUnderstandingCapability.physics.getter()
{
  return MEMORY[0x1E0CD4CA8]();
}

uint64_t static SpatialTrackingSession.Configuration.SceneUnderstandingCapability.collision.getter()
{
  return MEMORY[0x1E0CD4CB0]();
}

uint64_t static SpatialTrackingSession.Configuration.SceneUnderstandingCapability.occlusion.getter()
{
  return MEMORY[0x1E0CD4CB8]();
}

uint64_t type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability()
{
  return MEMORY[0x1E0CD4CC0]();
}

uint64_t SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.modify()
{
  return MEMORY[0x1E0CD4CE0]();
}

uint64_t SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter()
{
  return MEMORY[0x1E0CD4CE8]();
}

uint64_t SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.setter()
{
  return MEMORY[0x1E0CD4CF0]();
}

uint64_t static SpatialTrackingSession.Configuration.Camera.== infix(_:_:)()
{
  return MEMORY[0x1E0CD4CF8]();
}

uint64_t type metadata accessor for SpatialTrackingSession.Configuration.Camera()
{
  return MEMORY[0x1E0CD4D10]();
}

uint64_t SpatialTrackingSession.Configuration.camera.getter()
{
  return MEMORY[0x1E0CD4D20]();
}

uint64_t SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)()
{
  return MEMORY[0x1E0CD4D28]();
}

uint64_t type metadata accessor for SpatialTrackingSession.Configuration()
{
  return MEMORY[0x1E0CD4D30]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedAnchorCapabilities.setter()
{
  return MEMORY[0x1E0CD4D40]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedAnchorCapabilities.setter()
{
  return MEMORY[0x1E0CD4D48]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedSceneUnderstandingCapabilities.setter()
{
  return MEMORY[0x1E0CD4D50]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedSceneUnderstandingCapabilities.setter()
{
  return MEMORY[0x1E0CD4D58]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.anyUnavailableCapabilities.getter()
{
  return MEMORY[0x1E0CD4D60]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.sceneUnderstanding.getter()
{
  return MEMORY[0x1E0CD4D68]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.init(unsupportedConfiguration:)()
{
  return MEMORY[0x1E0CD4D70]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalCameraUnauthorized.setter()
{
  return MEMORY[0x1E0CD4D78]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.missingCameraAuthorization.getter()
{
  return MEMORY[0x1E0CD4D80]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.anchor.getter()
{
  return MEMORY[0x1E0CD4D88]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.init()()
{
  return MEMORY[0x1E0CD4D90]();
}

uint64_t type metadata accessor for SpatialTrackingSession.UnavailableCapabilities()
{
  return MEMORY[0x1E0CD4D98]();
}

uint64_t dispatch thunk of __ARReferenceProviding.__fetchReferenceImage(group:name:physicalWidth:)()
{
  return MEMORY[0x1E0CD4DA8]();
}

uint64_t dispatch thunk of __ARReferenceProviding.__fetchReferenceObject(group:name:)()
{
  return MEMORY[0x1E0CD4DB0]();
}

uint64_t PhysicallyBasedMaterial.SheenColor.__tint.getter()
{
  return MEMORY[0x1E0CD4DC0]();
}

uint64_t PhysicallyBasedMaterial.EmissiveColor.__color.getter()
{
  return MEMORY[0x1E0CD4DF0]();
}

uint64_t PhysicallyBasedMaterial.EmissiveColor.texture.getter()
{
  return MEMORY[0x1E0CD4E00]();
}

uint64_t type metadata accessor for PhysicallyBasedMaterial.EmissiveColor()
{
  return MEMORY[0x1E0CD4E08]();
}

uint64_t PhysicallyBasedMaterial.BaseColor.__tint.getter()
{
  return MEMORY[0x1E0CD4E20]();
}

uint64_t ImageBasedLightComponent.inheritsRotation.setter()
{
  return MEMORY[0x1E0CD4E50]();
}

uint64_t ImageBasedLightComponent.intensityExponent.setter()
{
  return MEMORY[0x1E0CD4E58]();
}

uint64_t type metadata accessor for ImageBasedLightComponent.Source()
{
  return MEMORY[0x1E0CD4E68]();
}

uint64_t ImageBasedLightComponent.init(source:intensityExponent:global:)()
{
  return MEMORY[0x1E0CD4E70]();
}

uint64_t type metadata accessor for ImageBasedLightComponent()
{
  return MEMORY[0x1E0CD4E78]();
}

uint64_t ParticleEmitterComponent.mainEmitter.modify()
{
  return MEMORY[0x1E0CD4E88]();
}

uint64_t ParticleEmitterComponent.mainEmitter.getter()
{
  return MEMORY[0x1E0CD4E90]();
}

uint64_t ParticleEmitterComponent.spawnedEmitter.setter()
{
  return MEMORY[0x1E0CD4E98]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.EmitterShape()
{
  return MEMORY[0x1E0CD4EC0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.noiseScale.setter()
{
  return MEMORY[0x1E0CD4EC8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.startColorA.getter()
{
  return MEMORY[0x1E0CD4ED0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.startColorA.setter()
{
  return MEMORY[0x1E0CD4ED8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.startColorB.getter()
{
  return MEMORY[0x1E0CD4EE0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.startColorB.setter()
{
  return MEMORY[0x1E0CD4EE8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useEndColor.getter()
{
  return MEMORY[0x1E0CD4EF0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useEndColor.setter()
{
  return MEMORY[0x1E0CD4EF8]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve()
{
  return MEMORY[0x1E0CD4F18]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.acceleration.setter()
{
  return MEMORY[0x1E0CD4F20]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter()
{
  return MEMORY[0x1E0CD4F28]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter()
{
  return MEMORY[0x1E0CD4F30]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode()
{
  return MEMORY[0x1E0CD4F40]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.setter()
{
  return MEMORY[0x1E0CD4F48]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.setter()
{
  return MEMORY[0x1E0CD4F50]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.setter()
{
  return MEMORY[0x1E0CD4F58]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.setter()
{
  return MEMORY[0x1E0CD4F60]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode()
{
  return MEMORY[0x1E0CD4F80]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.setter()
{
  return MEMORY[0x1E0CD4F88]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.setter()
{
  return MEMORY[0x1E0CD4F90]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.setter()
{
  return MEMORY[0x1E0CD4F98]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.init()()
{
  return MEMORY[0x1E0CD4FA0]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence()
{
  return MEMORY[0x1E0CD4FA8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.billboardMode.setter()
{
  return MEMORY[0x1E0CD4FB8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter()
{
  return MEMORY[0x1E0CD4FC0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.imageSequence.setter()
{
  return MEMORY[0x1E0CD4FC8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.massVariation.setter()
{
  return MEMORY[0x1E0CD4FD0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter()
{
  return MEMORY[0x1E0CD4FD8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter()
{
  return MEMORY[0x1E0CD4FE0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter()
{
  return MEMORY[0x1E0CD4FE8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.angleVariation.setter()
{
  return MEMORY[0x1E0CD4FF0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter()
{
  return MEMORY[0x1E0CD4FF8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter()
{
  return MEMORY[0x1E0CD5000]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter()
{
  return MEMORY[0x1E0CD5008]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter()
{
  return MEMORY[0x1E0CD5010]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useEndColorRange.getter()
{
  return MEMORY[0x1E0CD5018]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter()
{
  return MEMORY[0x1E0CD5020]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter()
{
  return MEMORY[0x1E0CD5028]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter()
{
  return MEMORY[0x1E0CD5030]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter()
{
  return MEMORY[0x1E0CD5038]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter()
{
  return MEMORY[0x1E0CD5040]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useStartColorRange.getter()
{
  return MEMORY[0x1E0CD5048]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter()
{
  return MEMORY[0x1E0CD5050]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter()
{
  return MEMORY[0x1E0CD5058]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter()
{
  return MEMORY[0x1E0CD5060]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter()
{
  return MEMORY[0x1E0CD5068]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter()
{
  return MEMORY[0x1E0CD5070]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter()
{
  return MEMORY[0x1E0CD5078]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter()
{
  return MEMORY[0x1E0CD5080]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.mass.setter()
{
  return MEMORY[0x1E0CD5088]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.size.setter()
{
  return MEMORY[0x1E0CD5090]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.angle.setter()
{
  return MEMORY[0x1E0CD5098]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.image.getter()
{
  return MEMORY[0x1E0CD50A0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.image.setter()
{
  return MEMORY[0x1E0CD50A8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.bounce.setter()
{
  return MEMORY[0x1E0CD50B0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.friction.setter()
{
  return MEMORY[0x1E0CD50B8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter()
{
  return MEMORY[0x1E0CD50C0]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode()
{
  return MEMORY[0x1E0CD50D8]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder()
{
  return MEMORY[0x1E0CD50F8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.birthRate.setter()
{
  return MEMORY[0x1E0CD5100]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.blendMode.setter()
{
  return MEMORY[0x1E0CD5108]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.endColorA.getter()
{
  return MEMORY[0x1E0CD5110]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.endColorA.setter()
{
  return MEMORY[0x1E0CD5118]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.endColorB.getter()
{
  return MEMORY[0x1E0CD5120]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.endColorB.setter()
{
  return MEMORY[0x1E0CD5128]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.sortOrder.setter()
{
  return MEMORY[0x1E0CD5130]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.init()()
{
  return MEMORY[0x1E0CD5138]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.ParticleEmitter()
{
  return MEMORY[0x1E0CD5140]();
}

uint64_t ParticleEmitterComponent.shouldLoop.getter()
{
  return MEMORY[0x1E0CD5150]();
}

uint64_t ParticleEmitterComponent.shouldLoop.setter()
{
  return MEMORY[0x1E0CD5158]();
}

uint64_t ParticleEmitterComponent.emitterShape.setter()
{
  return MEMORY[0x1E0CD5160]();
}

uint64_t ParticleEmitterComponent.idleDuration.getter()
{
  return MEMORY[0x1E0CD5168]();
}

uint64_t ParticleEmitterComponent.idleDuration.setter()
{
  return MEMORY[0x1E0CD5170]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.BirthLocation()
{
  return MEMORY[0x1E0CD5188]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.SpawnOccasion()
{
  return MEMORY[0x1E0CD51A8]();
}

uint64_t ParticleEmitterComponent.birthLocation.setter()
{
  return MEMORY[0x1E0CD51B0]();
}

uint64_t ParticleEmitterComponent.spawnOccasion.setter()
{
  return MEMORY[0x1E0CD51B8]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.BirthDirection()
{
  return MEMORY[0x1E0CD51D0]();
}

uint64_t ParticleEmitterComponent.birthDirection.setter()
{
  return MEMORY[0x1E0CD51D8]();
}

uint64_t ParticleEmitterComponent.speedVariation.setter()
{
  return MEMORY[0x1E0CD51E0]();
}

uint64_t ParticleEmitterComponent.warmupDuration.getter()
{
  return MEMORY[0x1E0CD51E8]();
}

uint64_t ParticleEmitterComponent.warmupDuration.setter()
{
  return MEMORY[0x1E0CD51F0]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.SimulationSpace()
{
  return MEMORY[0x1E0CD5200]();
}

Swift::Void __swiftcall ParticleEmitterComponent.resetSimulation()()
{
  MEMORY[0x1E0CD5208]();
}

uint64_t ParticleEmitterComponent.emissionDuration.getter()
{
  return MEMORY[0x1E0CD5210]();
}

uint64_t ParticleEmitterComponent.emissionDuration.setter()
{
  return MEMORY[0x1E0CD5218]();
}

uint64_t ParticleEmitterComponent.emitterShapeSize.setter()
{
  return MEMORY[0x1E0CD5220]();
}

uint64_t ParticleEmitterComponent.emissionDirection.setter()
{
  return MEMORY[0x1E0CD5228]();
}

uint64_t ParticleEmitterComponent.spawnSpreadFactor.setter()
{
  return MEMORY[0x1E0CD5230]();
}

uint64_t ParticleEmitterComponent.spawnVelocityFactor.setter()
{
  return MEMORY[0x1E0CD5238]();
}

uint64_t ParticleEmitterComponent.fieldSimulationSpace.setter()
{
  return MEMORY[0x1E0CD5240]();
}

uint64_t ParticleEmitterComponent.idleDurationVariation.getter()
{
  return MEMORY[0x1E0CD5248]();
}

uint64_t ParticleEmitterComponent.idleDurationVariation.setter()
{
  return MEMORY[0x1E0CD5250]();
}

uint64_t ParticleEmitterComponent.spawnInheritsParentColor.setter()
{
  return MEMORY[0x1E0CD5258]();
}

uint64_t ParticleEmitterComponent.emissionDurationVariation.getter()
{
  return MEMORY[0x1E0CD5260]();
}

uint64_t ParticleEmitterComponent.emissionDurationVariation.setter()
{
  return MEMORY[0x1E0CD5268]();
}

uint64_t ParticleEmitterComponent.particlesInheritTransform.setter()
{
  return MEMORY[0x1E0CD5270]();
}

uint64_t ParticleEmitterComponent.spawnSpreadFactorVariation.setter()
{
  return MEMORY[0x1E0CD5278]();
}

uint64_t ParticleEmitterComponent.speed.setter()
{
  return MEMORY[0x1E0CD5280]();
}

uint64_t ParticleEmitterComponent.init()()
{
  return MEMORY[0x1E0CD5288]();
}

uint64_t static _Proto_AntialiasingMode_v1.== infix(_:_:)()
{
  return MEMORY[0x1E0CD52A0]();
}

uint64_t type metadata accessor for _Proto_AntialiasingMode_v1()
{
  return MEMORY[0x1E0CD52B0]();
}

uint64_t os_log(_:dso:log:type:_:)()
{
  return MEMORY[0x1E0DF2078]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x1E0DF2118]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t dispatch thunk of Cancellable.cancel()()
{
  return MEMORY[0x1E0C95D08]();
}

uint64_t Published.init(initialValue:)()
{
  return MEMORY[0x1E0C96150]();
}

uint64_t Published.projectedValue.getter()
{
  return MEMORY[0x1E0C96158]();
}

uint64_t Published.projectedValue.setter()
{
  return MEMORY[0x1E0C96160]();
}

uint64_t static Published.subscript.modify()
{
  return MEMORY[0x1E0C96168]();
}

uint64_t static Published.subscript.getter()
{
  return MEMORY[0x1E0C96170]();
}

uint64_t static Published.subscript.setter()
{
  return MEMORY[0x1E0C96178]();
}

uint64_t type metadata accessor for Published.Publisher()
{
  return MEMORY[0x1E0C96180]();
}

uint64_t type metadata accessor for Published()
{
  return MEMORY[0x1E0C96198]();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return MEMORY[0x1E0C96410]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t ImportSession.core.getter()
{
  return MEMORY[0x1E0D83B88]();
}

uint64_t ImportSession.__allocating_init<A>(from:serviceLocator:pipelineVersion:threading:entityType:)()
{
  return MEMORY[0x1E0D83B90]();
}

uint64_t type metadata accessor for ImportSession()
{
  return MEMORY[0x1E0D83BA8]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x1E0CB17D8]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1E0DEA568]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1E0CB1940]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t String.init(localized:)()
{
  return MEMORY[0x1E0CB1A50]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x1E0DEA630]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x1E0DEA6F8]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1E0DEA758]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x1E0DEA800](a1._countAndFlagsBits, a1._object);
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x1E0DEA828]();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x1E0DEA850]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x1E0DEA940](a1._countAndFlagsBits, a1._object);
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1E0DEADA0]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x1E0CB1AC0]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x1E0DF05D0]();
}

uint64_t dispatch thunk of AsyncIteratorProtocol.next()()
{
  return MEMORY[0x1E0DF0688]();
}

uint64_t static MainActor.shared.getter()
{
  return MEMORY[0x1E0DF06D8]();
}

uint64_t type metadata accessor for MainActor()
{
  return MEMORY[0x1E0DF06E0]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x1E0DF0750]();
}

Swift::Void __swiftcall Task.cancel()()
{
  MEMORY[0x1E0DF0870]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x1E0CB1BB0]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1BD8]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x1E0DEB310]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x1E0DEB528]();
}

uint64_t dispatch thunk of Collection.distance(from:to:)()
{
  return MEMORY[0x1E0DEB5A0]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x1E0DEB5A8]();
}

uint64_t ARPointCloud.points.getter()
{
  return MEMORY[0x1E0DE9408]();
}

Swift::Void __swiftcall CGContextRef.draw(_:in:byTiling:)(CGImageRef _, CGRect in, Swift::Bool byTiling)
{
  MEMORY[0x1E0C9B900](_, byTiling, (__n128)in.origin, *(__n128 *)&in.origin.y, (__n128)in.size, *(__n128 *)&in.size.height);
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t simd_float4x4.scale(_:)()
{
  return MEMORY[0x1E0CD52B8]();
}

uint64_t simd_float4x4.transform(position:)()
{
  return MEMORY[0x1E0CD52C0]();
}

uint64_t ARPlaneGeometry.vertices.getter()
{
  return MEMORY[0x1E0DE9410]();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return MEMORY[0x1E0CB1E68]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x1E0DEF8E8]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t vImage_CGImageFormat.init(bitsPerComponent:bitsPerPixel:colorSpace:bitmapInfo:renderingIntent:)()
{
  return MEMORY[0x1E0DE9B10]();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
  MEMORY[0x1E0DEFA68]();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x1E0DEFA70]();
}

UIColor __swiftcall UIColor.init(_colorLiteralRed:green:blue:alpha:)(Swift::Float _colorLiteralRed, Swift::Float green, Swift::Float blue, Swift::Float alpha)
{
  return (UIColor)MEMORY[0x1E0DC2FD8](_colorLiteralRed, green, blue, alpha);
}

uint64_t ARCamera.unprojectPoint(_:ontoPlane:orientation:viewportSize:)()
{
  return MEMORY[0x1E0DE9448]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1E0DEFCD8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t NSObject.hashValue.getter()
{
  return MEMORY[0x1E0DEFCF0]();
}

uint64_t static OS_os_log.default.getter()
{
  return MEMORY[0x1E0DF22B8]();
}

uint64_t Optional.debugDescription.getter()
{
  return MEMORY[0x1E0DEB930]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x1E0CB2588]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t dispatch thunk of SetAlgebra.isSuperset(of:)()
{
  return MEMORY[0x1E0DEBFC0]();
}

uint64_t SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x1E0DEC078]();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return MEMORY[0x1E0DEC0A8]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x1E0DEC0B0]();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return MEMORY[0x1E0DEC0C8]();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return MEMORY[0x1E0DEC0D0]();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return MEMORY[0x1E0DEC0D8]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x1E0DEC0E0]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x1E0DEC0F8]();
}

uint64_t __CocoaSet.element(at:)()
{
  return MEMORY[0x1E0DEC100]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x1E0DEC110]();
}

uint64_t __CocoaSet.contains(_:)()
{
  return MEMORY[0x1E0DEC118]();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return MEMORY[0x1E0DEC120]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1E0DEC168](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x1E0DEC178]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x1E0DEC1B0]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x1E0DEC258]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x1E0DEC260]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x1E0DEC2A8](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x1E0DEC470]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x1E0DEC498]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return MEMORY[0x1E0DEC888]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECBE0]();
}

{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return MEMORY[0x1E0DECD90]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x1E0DECE70]();
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1E0DECF38]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x1E0DECF40]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1E0DECF68]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1E0DECF88]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x1E0DECFD0]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x1E0DED038]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1E0DED070]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1E0DED0A0]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED0C0]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x1E0DED100]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t withCheckedContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x1E0DF0DD0]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return MEMORY[0x1E0DED5F8]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t Error<>._code.getter()
{
  return MEMORY[0x1E0CB2628]();
}

uint64_t Error<>._domain.getter()
{
  return MEMORY[0x1E0CB2640]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t SIMD3<>.cgColor.getter()
{
  return MEMORY[0x1E0CD52C8]();
}

uint64_t SIMD4<>._xyz.getter()
{
  return MEMORY[0x1E0CD52D0]();
}

uint64_t SIMD4<>._xyz.setter()
{
  return MEMORY[0x1E0CD52D8]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x1E0DEDEF0]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1E0DEDEF8]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x1E0DEDF10](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
  MEMORY[0x1E0DEDF30](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t Mirror.init(reflecting:)()
{
  return MEMORY[0x1E0DEDF80]();
}

uint64_t type metadata accessor for Mirror.DisplayStyle()
{
  return MEMORY[0x1E0DEDFC8]();
}

uint64_t type metadata accessor for Mirror.AncestorRepresentation()
{
  return MEMORY[0x1E0DEDFF0]();
}

uint64_t Mirror.children.getter()
{
  return MEMORY[0x1E0DEDFF8]();
}

uint64_t type metadata accessor for Mirror()
{
  return MEMORY[0x1E0DEE000]();
}

uint64_t Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x1E0DEE020]();
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1E0CB26E8]();
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1E0CB2710]();
}

uint64_t static UInt64._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1E0CB2718]();
}

uint64_t static UInt64._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1E0CB2720]();
}

uint64_t static UInt64._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB2728]();
}

uint64_t UInt64.hashValue.getter()
{
  return MEMORY[0x1E0DEE180]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t ARCameraToDisplayRotation()
{
  return MEMORY[0x1E0C894E0]();
}

uint64_t ARViewToCameraImageTransform()
{
  return MEMORY[0x1E0C89560]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  CFTimeInterval result;

  MEMORY[0x1E0CD2390]();
  return result;
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD0](retstr, angle);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1E0C9BCB0](red, green, blue, alpha);
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  CGFloat result;

  MEMORY[0x1E0C9BCF8](color);
  return result;
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C020](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C220](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C408](c, color);
}

CGPoint CGPointApplyAffineTransform(CGPoint point, CGAffineTransform *t)
{
  double v2;
  double v3;
  CGPoint result;

  MEMORY[0x1E0C9D520](t, (__n128)point, *(__n128 *)&point.y);
  result.y = v3;
  result.x = v2;
  return result;
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5B0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D600]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x1E0CA8A30](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x1E0CA8A38](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x1E0CA8A50](image);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B28](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B40](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B58](pixelBuffer, planeIndex);
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1E0CC6980]();
}

uint64_t REAnchorComponentGetComponentType()
{
  return MEMORY[0x1E0D17900]();
}

uint64_t REAssetManagerCreateAssetHandle()
{
  return MEMORY[0x1E0D17950]();
}

uint64_t REAssetManagerMeshMemoryAssetCreate()
{
  return MEMORY[0x1E0D17960]();
}

uint64_t REAssetManagerMeshMemoryAssetCreateBox()
{
  return MEMORY[0x1E0D17968]();
}

uint64_t REAssetRegisterAssetSyncNetworkSession()
{
  return MEMORY[0x1E0D17970]();
}

uint64_t REAssetUnregisterAssetSyncNetworkSession()
{
  return MEMORY[0x1E0D17978]();
}

uint64_t RECameraStreamManagerSetARKitPassthrough()
{
  return MEMORY[0x1E0D179D0]();
}

uint64_t RECameraViewDescriptorsComponentAddSpecifyCommandFromLayer()
{
  return MEMORY[0x1E0D179D8]();
}

uint64_t RECameraViewDescriptorsComponentAddViewDescriptor()
{
  return MEMORY[0x1E0D179E0]();
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct()
{
  return MEMORY[0x1E0D179E8]();
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorCount()
{
  return MEMORY[0x1E0D179F0]();
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorHandleByIndex()
{
  return MEMORY[0x1E0D179F8]();
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct()
{
  return MEMORY[0x1E0D17A00]();
}

uint64_t RECameraViewDescriptorsComponentClearCameraViewDescriptors()
{
  return MEMORY[0x1E0D17A08]();
}

uint64_t RECameraViewDescriptorsComponentGetComponentType()
{
  return MEMORY[0x1E0D17A10]();
}

uint64_t RECameraViewDescriptorsComponentSnapshotNextFrameWithSettingsAndReturnHandle()
{
  return MEMORY[0x1E0D17A20]();
}

uint64_t REColorManagerGetLDRColorSpaceForColorGamut()
{
  return MEMORY[0x1E0D17A38]();
}

uint64_t REColorManagerGetSRGBLDRColorSpaceForColorGamut()
{
  return MEMORY[0x1E0D17A40]();
}

uint64_t REColorManagerGetTargetDisplayColorGamut()
{
  return MEMORY[0x1E0D17A48]();
}

uint64_t REColorManagerGetWorkingColorGamut()
{
  return MEMORY[0x1E0D17A50]();
}

uint64_t REColorManagerGetWorkingColorSpace()
{
  return MEMORY[0x1E0D17A58]();
}

uint64_t REColorManagerSetTargetDisplayColorGamut()
{
  return MEMORY[0x1E0D17A60]();
}

uint64_t REComponentGetEntity()
{
  return MEMORY[0x1E0D17A80]();
}

uint64_t REConvertProjectionToMatrix4x4()
{
  return MEMORY[0x1E0D17A98]();
}

uint64_t RECustomMatrixCameraComponentAdjustProjectionAspect()
{
  return MEMORY[0x1E0D17AB0]();
}

uint64_t RECustomMatrixCameraComponentCalculateProjection()
{
  return MEMORY[0x1E0D17AB8]();
}

uint64_t RECustomMatrixCameraComponentGetComponentType()
{
  return MEMORY[0x1E0D17AC0]();
}

uint64_t RECustomMatrixCameraComponentSetProjectionFromMatrix()
{
  return MEMORY[0x1E0D17AD0]();
}

uint64_t REDebugRendererDrawAxisWithWorldTransform()
{
  return MEMORY[0x1E0D17AD8]();
}

uint64_t REDebugRendererDrawCollisionWorld()
{
  return MEMORY[0x1E0D17AE0]();
}

uint64_t REECSManagerGetScene()
{
  return MEMORY[0x1E0D17B00]();
}

uint64_t REEDRColorManagementComponentSetHeadroomCallback()
{
  return MEMORY[0x1E0D17B18]();
}

uint64_t REEngineGetCurrentTime()
{
  return MEMORY[0x1E0D17B38]();
}

uint64_t REEngineGetServiceLocator()
{
  return MEMORY[0x1E0D17B40]();
}

uint64_t REEngineSetPreferredFramesPerSecond()
{
  return MEMORY[0x1E0D17B50]();
}

uint64_t REEntityCharacterSetSkeletalPoseJointLocalSpace()
{
  return MEMORY[0x1E0D17B78]();
}

uint64_t REEntityCharacterSetSkeletalPoseLocalRotations()
{
  return MEMORY[0x1E0D17B80]();
}

uint64_t REEntityCreate()
{
  return MEMORY[0x1E0D17B90]();
}

uint64_t REEntityGetComponentByClass()
{
  return MEMORY[0x1E0D17BA8]();
}

uint64_t REEntityGetOrAddComponentByClass()
{
  return MEMORY[0x1E0D17BC0]();
}

uint64_t REEntityIsNonHiddenAndInHierarchy()
{
  return MEMORY[0x1E0D17BC8]();
}

uint64_t REEntityRemoveComponentByClass()
{
  return MEMORY[0x1E0D17BD8]();
}

uint64_t REEntityRemoveFromSceneOrParent()
{
  return MEMORY[0x1E0D17BE0]();
}

uint64_t REEntitySetName()
{
  return MEMORY[0x1E0D17BE8]();
}

uint64_t REEntitySetParent()
{
  return MEMORY[0x1E0D17BF0]();
}

uint64_t REFrameStatisticsHUDAddCustomStat()
{
  return MEMORY[0x1E0D17C08]();
}

uint64_t REFrameStatisticsHUDGetStatisticsForOption()
{
  return MEMORY[0x1E0D17C10]();
}

uint64_t REFrameStatisticsHUDSetDisableRendering()
{
  return MEMORY[0x1E0D17C18]();
}

uint64_t REFrameStatisticsHUDSetOverlayEnabled()
{
  return MEMORY[0x1E0D17C20]();
}

uint64_t REFrameStatisticsHUDSetRenderLayer()
{
  return MEMORY[0x1E0D17C28]();
}

uint64_t REFrameStatisticsHUDSetStatisticsOptions()
{
  return MEMORY[0x1E0D17C30]();
}

uint64_t REFrameStatisticsHUDSetUpdateInterval()
{
  return MEMORY[0x1E0D17C38]();
}

uint64_t REFrameStatisticsHUDTotalFrameTime()
{
  return MEMORY[0x1E0D17C40]();
}

uint64_t REGeomMeshCreateFromPolygon()
{
  return MEMORY[0x1E0D17C48]();
}

uint64_t REMaterialAssetClearParameter()
{
  return MEMORY[0x1E0D17CB8]();
}

uint64_t REMaterialAssetSetFloat()
{
  return MEMORY[0x1E0D17CC0]();
}

uint64_t REMaterialAssetSetFloat2F()
{
  return MEMORY[0x1E0D17CC8]();
}

uint64_t REMaterialAssetSetFloat4x4F()
{
  return MEMORY[0x1E0D17CD8]();
}

uint64_t REMaterialAssetSetTexture()
{
  return MEMORY[0x1E0D17CE0]();
}

uint64_t REMaterialAssetSetTextureFromAsset()
{
  return MEMORY[0x1E0D17CE8]();
}

uint64_t REMultipeerConnectivityGetInternalSession()
{
  return MEMORY[0x1E0D17CF8]();
}

uint64_t REMultipeerConnectivityManagerGetInternalPeerID()
{
  return MEMORY[0x1E0D17D00]();
}

uint64_t REMultipeerConnectivityManagerGetMCPeerID()
{
  return MEMORY[0x1E0D17D08]();
}

uint64_t REMultipeerConnectivityManagerSetHandshakeCountAndTimeoutMs()
{
  return MEMORY[0x1E0D17D10]();
}

uint64_t REMultipeerConnectivityManagerStartSyncWithMCSession()
{
  return MEMORY[0x1E0D17D18]();
}

uint64_t REMultipeerConnectivityManagerStopSync()
{
  return MEMORY[0x1E0D17D20]();
}

uint64_t RENetGetEntityFromSyncObject()
{
  return MEMORY[0x1E0D17D28]();
}

uint64_t RENetParticipantGetPeerID()
{
  return MEMORY[0x1E0D17D30]();
}

uint64_t RENetSessionAddObserver()
{
  return MEMORY[0x1E0D17D38]();
}

uint64_t RENetSessionObserverCreateEx()
{
  return MEMORY[0x1E0D17D40]();
}

uint64_t RENetSessionObserverOnParticipantJoin()
{
  return MEMORY[0x1E0D17D48]();
}

uint64_t RENetSessionObserverOnParticipantLeave()
{
  return MEMORY[0x1E0D17D50]();
}

uint64_t RENetSessionObserverOnReceiveUserData()
{
  return MEMORY[0x1E0D17D58]();
}

uint64_t RENetSessionObserverOnStart()
{
  return MEMORY[0x1E0D17D60]();
}

uint64_t RENetSessionObserverOnStop()
{
  return MEMORY[0x1E0D17D68]();
}

uint64_t RENetSessionRemoveObserver()
{
  return MEMORY[0x1E0D17D70]();
}

uint64_t RENetSessionSendData()
{
  return MEMORY[0x1E0D17D78]();
}

uint64_t RENetSessionSendDataUnreliableUnordered()
{
  return MEMORY[0x1E0D17D80]();
}

uint64_t RENetworkComponentGetComponentType()
{
  return MEMORY[0x1E0D17D88]();
}

uint64_t RENetworkComponentHandOff()
{
  return MEMORY[0x1E0D17D90]();
}

uint64_t RENetworkComponentIsAuthoritative()
{
  return MEMORY[0x1E0D17D98]();
}

uint64_t RENetworkComponentOwnerPeerID()
{
  return MEMORY[0x1E0D17DA0]();
}

uint64_t RENetworkComponentSetNetworkShareMode()
{
  return MEMORY[0x1E0D17DA8]();
}

uint64_t RENetworkSystemAddObserver()
{
  return MEMORY[0x1E0D17DB0]();
}

uint64_t RENetworkSystemEnableMultipeerConnectivity()
{
  return MEMORY[0x1E0D17DB8]();
}

uint64_t RENetworkSystemFindEntityWithGuid()
{
  return MEMORY[0x1E0D17DC0]();
}

uint64_t RENetworkSystemObserverCreateEx()
{
  return MEMORY[0x1E0D17DC8]();
}

uint64_t RENetworkSystemObserverOnEntityWillDestroy()
{
  return MEMORY[0x1E0D17DD0]();
}

uint64_t RENetworkSystemObserverOnTopLevelEntityDidCreate()
{
  return MEMORY[0x1E0D17DD8]();
}

uint64_t RENetworkSystemRemoveObserver()
{
  return MEMORY[0x1E0D17DE0]();
}

uint64_t REOrthographicCameraComponentGetComponentType()
{
  return MEMORY[0x1E0D17DE8]();
}

uint64_t REPerspectiveCameraComponentAdjustProjectionAspect()
{
  return MEMORY[0x1E0D17DF0]();
}

uint64_t REPerspectiveCameraComponentCalculateProjectionWithAspectRatio()
{
  return MEMORY[0x1E0D17DF8]();
}

uint64_t REPerspectiveCameraComponentGetComponentType()
{
  return MEMORY[0x1E0D17E00]();
}

uint64_t REPhysicsDebugRendererIsEnabled()
{
  return MEMORY[0x1E0D17E20]();
}

uint64_t REPhysicsSimulationServiceSetAnchorShouldHaveSharedSimulationByDefault()
{
  return MEMORY[0x1E0D17E40]();
}

uint64_t REProjectionClipSpaceNearZ()
{
  return MEMORY[0x1E0D17E48]();
}

uint64_t REProjectionProjectPoint()
{
  return MEMORY[0x1E0D17E50]();
}

uint64_t REProjectionUnprojectPoint()
{
  return MEMORY[0x1E0D17E58]();
}

uint64_t RERayTracedShadowReceiverSetVisibleForScene()
{
  return MEMORY[0x1E0D17EA0]();
}

uint64_t RERelease()
{
  return MEMORY[0x1E0D17EA8]();
}

uint64_t RERenderCallbacksPostProcessGetCommandBuffer()
{
  return MEMORY[0x1E0D17EB0]();
}

uint64_t RERenderCallbacksPostProcessGetDevice()
{
  return MEMORY[0x1E0D17EB8]();
}

uint64_t RERenderCallbacksPostProcessGetProjection()
{
  return MEMORY[0x1E0D17EC0]();
}

uint64_t RERenderCallbacksPostProcessGetSimulationTime()
{
  return MEMORY[0x1E0D17EC8]();
}

uint64_t RERenderCallbacksPostProcessGetSourceColorTexture()
{
  return MEMORY[0x1E0D17ED0]();
}

uint64_t RERenderCallbacksPostProcessGetSourceDepthTexture()
{
  return MEMORY[0x1E0D17ED8]();
}

uint64_t RERenderCallbacksPostProcessGetTargetColorTexture()
{
  return MEMORY[0x1E0D17EE0]();
}

uint64_t RERenderGraphAssetSetRuntimeNodeSetting()
{
  return MEMORY[0x1E0D17EF8]();
}

uint64_t RERenderGraphAssetSetRuntimeNodeSettingBool()
{
  return MEMORY[0x1E0D17F00]();
}

uint64_t RERenderGraphAssetSetRuntimeNodeSettingFloat()
{
  return MEMORY[0x1E0D17F08]();
}

uint64_t RERenderGraphAssetSetRuntimeNodeSettingUInt32()
{
  return MEMORY[0x1E0D17F10]();
}

uint64_t RERenderGraphAssetSetRuntimeNodeStringSetting()
{
  return MEMORY[0x1E0D17F18]();
}

uint64_t RERenderGraphCreateRenderGraphDataStruct()
{
  return MEMORY[0x1E0D17F20]();
}

uint64_t RERenderGraphDataStructAddBool()
{
  return MEMORY[0x1E0D17F28]();
}

uint64_t RERenderGraphDataStructAddFloat4()
{
  return MEMORY[0x1E0D17F30]();
}

uint64_t RERenderGraphDataStructGetBool()
{
  return MEMORY[0x1E0D17F38]();
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingBool()
{
  return MEMORY[0x1E0D17F58]();
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingUInt32()
{
  return MEMORY[0x1E0D17F60]();
}

uint64_t RERenderGraphSelectionEmitterAddConcludeCallback()
{
  return MEMORY[0x1E0D17F68]();
}

uint64_t RERenderGraphSelectionEmitterSetConcludeParams()
{
  return MEMORY[0x1E0D17F70]();
}

uint64_t RERenderGraphSelectionEmitterSetScene()
{
  return MEMORY[0x1E0D17F78]();
}

uint64_t RERenderManagerGetCameraStreamManager()
{
  return MEMORY[0x1E0D17F90]();
}

uint64_t RERenderManagerSetEnableProbeLighting()
{
  return MEMORY[0x1E0D17FA8]();
}

uint64_t RERetain()
{
  return MEMORY[0x1E0D17FB8]();
}

uint64_t RESceneAddEDRColorManagementComponent()
{
  return MEMORY[0x1E0D17FC0]();
}

uint64_t RESceneAddEntity()
{
  return MEMORY[0x1E0D17FC8]();
}

uint64_t RESceneFindEntity()
{
  return MEMORY[0x1E0D17FD8]();
}

uint64_t RESceneFindFirstCameraComponent()
{
  return MEMORY[0x1E0D17FE0]();
}

uint64_t RESceneGetAllEntitiesArray()
{
  return MEMORY[0x1E0D17FE8]();
}

uint64_t RESceneGetComponentsOfType()
{
  return MEMORY[0x1E0D17FF0]();
}

uint64_t RESceneGetPostProcessRenderCallback()
{
  return MEMORY[0x1E0D18000]();
}

uint64_t RESceneGetPrepareWithDeviceRenderCallback()
{
  return MEMORY[0x1E0D18008]();
}

uint64_t REScenePostProcessRenderCallbackAddCameraViewHandle()
{
  return MEMORY[0x1E0D18050]();
}

uint64_t REScenePostProcessRenderCallbackAddOneOffCameraViewHandle()
{
  return MEMORY[0x1E0D18058]();
}

uint64_t REScenePostProcessRenderCallbackClearCameraViewHandles()
{
  return MEMORY[0x1E0D18060]();
}

uint64_t RESceneRemoveEDRColorManagementComponent()
{
  return MEMORY[0x1E0D18068]();
}

uint64_t RESceneRemovePhysicsDebugComponent()
{
  return MEMORY[0x1E0D18078]();
}

uint64_t RESceneSetPhysicsDebugDrawLevel()
{
  return MEMORY[0x1E0D18080]();
}

uint64_t RESceneSetPostProcessRenderCallback()
{
  return MEMORY[0x1E0D18088]();
}

uint64_t RESceneSetPrepareWithDeviceRenderCallback()
{
  return MEMORY[0x1E0D18090]();
}

uint64_t RESceneUnderstandingComponentGetComponentType()
{
  return MEMORY[0x1E0D180A0]();
}

uint64_t RESceneUnderstandingComponentGetSourceType()
{
  return MEMORY[0x1E0D180A8]();
}

uint64_t RESceneUnderstandingServiceIsGuidedFilterOcclusionEnabled()
{
  return MEMORY[0x1E0D180B0]();
}

uint64_t RESceneUnderstandingServiceSetDepthFeatheringEnabled()
{
  return MEMORY[0x1E0D180B8]();
}

uint64_t RESceneUnderstandingServiceSetGuidedFilterOcclusionCameraFeed()
{
  return MEMORY[0x1E0D180C0]();
}

uint64_t RESceneUnderstandingServiceSetGuidedFilterOcclusionEnabled()
{
  return MEMORY[0x1E0D180C8]();
}

uint64_t RESceneUnderstandingServiceSetGuidedFilterOcclusionSupportEnabled()
{
  return MEMORY[0x1E0D180D0]();
}

uint64_t RESceneUnderstandingServiceSetGuidedFilterOcclusionUseSingleMTLEvent()
{
  return MEMORY[0x1E0D180D8]();
}

uint64_t REServiceLocatorGetAudioService()
{
  return MEMORY[0x1E0D180E8]();
}

uint64_t REServiceLocatorGetCollisionWorld()
{
  return MEMORY[0x1E0D180F0]();
}

uint64_t REServiceLocatorGetColorManager()
{
  return MEMORY[0x1E0D180F8]();
}

uint64_t REServiceLocatorGetECSService()
{
  return MEMORY[0x1E0D18100]();
}

uint64_t REServiceLocatorGetFrameStatisticsHUD()
{
  return MEMORY[0x1E0D18108]();
}

uint64_t REServiceLocatorGetNetworkSyncManager()
{
  return MEMORY[0x1E0D18110]();
}

uint64_t REServiceLocatorGetNetworkSystem()
{
  return MEMORY[0x1E0D18118]();
}

uint64_t REServiceLocatorGetPhysicsSimulationService()
{
  return MEMORY[0x1E0D18128]();
}

uint64_t REServiceLocatorGetRenderManager()
{
  return MEMORY[0x1E0D18130]();
}

uint64_t REServiceLocatorGetSceneUnderstandingService()
{
  return MEMORY[0x1E0D18138]();
}

uint64_t REServiceLocatorGetShadowService()
{
  return MEMORY[0x1E0D18140]();
}

uint64_t REServiceLocatorGetSharedClockService()
{
  return MEMORY[0x1E0D18148]();
}

uint64_t REShadowManagerSetEnabled()
{
  return MEMORY[0x1E0D18150]();
}

uint64_t REShadowsSetEnableDefaultShadows()
{
  return MEMORY[0x1E0D18168]();
}

uint64_t RESharedClockServiceSetSession()
{
  return MEMORY[0x1E0D18170]();
}

uint64_t RESyncAddressListCreate()
{
  return MEMORY[0x1E0D836B0]();
}

uint64_t RESyncCustomProtocolLayerCreate()
{
  return MEMORY[0x1E0D836B8]();
}

uint64_t RESyncCustomProtocolLayerOnConnected()
{
  return MEMORY[0x1E0D836C0]();
}

uint64_t RESyncCustomProtocolLayerOnDisconnected()
{
  return MEMORY[0x1E0D836C8]();
}

uint64_t RESyncCustomProtocolLayerOnReceiveData()
{
  return MEMORY[0x1E0D836D0]();
}

uint64_t RESyncDiscoveryIdentityObserverCreate()
{
  return MEMORY[0x1E0D836D8]();
}

uint64_t RESyncDiscoveryIdentityObserverOnGetAddress()
{
  return MEMORY[0x1E0D836E0]();
}

uint64_t RESyncDiscoveryIdentityObserverOnGetDisplayName()
{
  return MEMORY[0x1E0D836E8]();
}

uint64_t RESyncDiscoveryIdentityObserverOnIsLocal()
{
  return MEMORY[0x1E0D836F0]();
}

uint64_t RESyncDiscoveryViewCreateWithObserver()
{
  return MEMORY[0x1E0D836F8]();
}

uint64_t RESyncDiscoveryViewNotifyJoin()
{
  return MEMORY[0x1E0D83700]();
}

uint64_t RESyncDiscoveryViewNotifyLeave()
{
  return MEMORY[0x1E0D83708]();
}

uint64_t RESyncDiscoveryViewObserverCreate()
{
  return MEMORY[0x1E0D83710]();
}

uint64_t RESyncDiscoveryViewObserverOnCreateProtocolLayer()
{
  return MEMORY[0x1E0D83718]();
}

uint64_t RESyncDiscoveryViewObserverOnGetAuthData()
{
  return MEMORY[0x1E0D83720]();
}

uint64_t RESyncDiscoveryViewObserverOnGetIdentitiesCount()
{
  return MEMORY[0x1E0D83728]();
}

uint64_t RESyncDiscoveryViewObserverOnGetIdentityAtIndex()
{
  return MEMORY[0x1E0D83730]();
}

uint64_t RESyncDiscoveryViewObserverOnRequestIdentity()
{
  return MEMORY[0x1E0D83738]();
}

uint64_t RESyncIdentityCreateWithObserver()
{
  return MEMORY[0x1E0D83740]();
}

uint64_t RESyncNetSessionAddObserver()
{
  return MEMORY[0x1E0D83748]();
}

uint64_t RESyncNetSessionConfigurationCreate()
{
  return MEMORY[0x1E0D83750]();
}

uint64_t RESyncNetSessionConfigurationSetDiscoveryView()
{
  return MEMORY[0x1E0D83758]();
}

uint64_t RESyncNetSessionConfigurationSetIsLocal()
{
  return MEMORY[0x1E0D83760]();
}

uint64_t RESyncNetSessionConfigurationSetUnreliableSyncEnabled()
{
  return MEMORY[0x1E0D83768]();
}

uint64_t RESyncNetSessionObserverCreate()
{
  return MEMORY[0x1E0D83770]();
}

uint64_t RESyncNetSessionObserverOnParticipantJoin()
{
  return MEMORY[0x1E0D83778]();
}

uint64_t RESyncNetSessionRemoveObserver()
{
  return MEMORY[0x1E0D83780]();
}

uint64_t RESyncParticipantGetAddress()
{
  return MEMORY[0x1E0D83788]();
}

uint64_t RESyncParticipantGetPeerID()
{
  return MEMORY[0x1E0D83790]();
}

uint64_t RESyncProtocolHandleCreate()
{
  return MEMORY[0x1E0D83798]();
}

uint64_t RESyncProtocolLayerObserverCreate()
{
  return MEMORY[0x1E0D837A0]();
}

uint64_t RESyncProtocolLayerObserverOnClose()
{
  return MEMORY[0x1E0D837A8]();
}

uint64_t RESyncProtocolLayerObserverOnDeinit()
{
  return MEMORY[0x1E0D837B0]();
}

uint64_t RESyncProtocolLayerObserverOnDisconnect()
{
  return MEMORY[0x1E0D837B8]();
}

uint64_t RESyncProtocolLayerObserverOnHostStats()
{
  return MEMORY[0x1E0D837C0]();
}

uint64_t RESyncProtocolLayerObserverOnInit()
{
  return MEMORY[0x1E0D837C8]();
}

uint64_t RESyncProtocolLayerObserverOnLocalAddresses()
{
  return MEMORY[0x1E0D837D0]();
}

uint64_t RESyncProtocolLayerObserverOnOpenNullable()
{
  return MEMORY[0x1E0D837D8]();
}

uint64_t RESyncProtocolLayerObserverOnPreferredPacketSize()
{
  return MEMORY[0x1E0D837E0]();
}

uint64_t RESyncProtocolLayerObserverOnSend()
{
  return MEMORY[0x1E0D837E8]();
}

uint64_t RESyncProtocolLayerObserverOnSetDisconnectTimeout()
{
  return MEMORY[0x1E0D837F0]();
}

uint64_t RESyncProtocolLayerObserverOnWait()
{
  return MEMORY[0x1E0D837F8]();
}

uint64_t RESyncProtocolLayerObserverOnWakeup()
{
  return MEMORY[0x1E0D83800]();
}

uint64_t RESyncRelease()
{
  return MEMORY[0x1E0D83808]();
}

uint64_t RESyncRetain()
{
  return MEMORY[0x1E0D83810]();
}

uint64_t RESyncServiceCreateSessionAndStartSync()
{
  return MEMORY[0x1E0D83818]();
}

uint64_t RESyncServiceGetSyncSession()
{
  return MEMORY[0x1E0D83820]();
}

uint64_t RESyncServiceStopSyncWithSession()
{
  return MEMORY[0x1E0D83828]();
}

uint64_t RESyncSessionSetViewFilterCB()
{
  return MEMORY[0x1E0D83830]();
}

uint64_t RESyncViewEnumerateObjects()
{
  return MEMORY[0x1E0D83838]();
}

uint64_t RETransformComponentGetComponentType()
{
  return MEMORY[0x1E0D181C8]();
}

uint64_t RETransformComponentGetWorldMatrix4x4F()
{
  return MEMORY[0x1E0D181D0]();
}

uint64_t RFARKitDataProviderGetARSession()
{
  return MEMORY[0x1E0D83A00]();
}

uint64_t RFAnchorCreateCamera()
{
  return MEMORY[0x1E0D83A08]();
}

uint64_t RFAnchorDataProviderUpdateLocalAnchor()
{
  return MEMORY[0x1E0D83A10]();
}

uint64_t RFAnchorManagementServiceUpdateByDeltaTime()
{
  return MEMORY[0x1E0D83A18]();
}

uint64_t RFAtmospherePlacementServiceUpdateByDeltaTime()
{
  return MEMORY[0x1E0D83A20]();
}

uint64_t RFDebugServiceUpdateByDeltaTime()
{
  return MEMORY[0x1E0D83A28]();
}

uint64_t RFEnvironmentProbePlacementServiceSetBackgroundParallaxEnabled()
{
  return MEMORY[0x1E0D83A30]();
}

uint64_t RFEnvironmentProbePlacementServiceSetLocalizedProbeEnabled()
{
  return MEMORY[0x1E0D83A38]();
}

uint64_t RFEnvironmentProbePlacementServiceUpdateByDeltaTime()
{
  return MEMORY[0x1E0D83A40]();
}

uint64_t RFGetSceneUnderstandingServiceFromRE()
{
  return MEMORY[0x1E0D83A48]();
}

uint64_t RFLoggingServiceUpdateByDeltaTime()
{
  return MEMORY[0x1E0D83A50]();
}

uint64_t RFMeshReconstructionServiceSetCollisionEnabled()
{
  return MEMORY[0x1E0D83A58]();
}

uint64_t RFMeshReconstructionServiceSetDynamicLightingEnabled()
{
  return MEMORY[0x1E0D83A60]();
}

uint64_t RFMeshReconstructionServiceSetLightingEnabled()
{
  return MEMORY[0x1E0D83A68]();
}

uint64_t RFMeshReconstructionServiceSetOcclusionEnabled()
{
  return MEMORY[0x1E0D83A70]();
}

uint64_t RFMeshReconstructionServiceSetPhysicsEnabled()
{
  return MEMORY[0x1E0D83A78]();
}

uint64_t RFMeshReconstructionServiceSetWireframeEnabled()
{
  return MEMORY[0x1E0D83A80]();
}

uint64_t RFMeshReconstructionServiceUpdateByDeltaTime()
{
  return MEMORY[0x1E0D83A88]();
}

uint64_t RFSceneUnderstandingServiceIsDepthFeatheringEnabled()
{
  return MEMORY[0x1E0D83A90]();
}

uint64_t RFServiceManagerGetARKitDataProvider()
{
  return MEMORY[0x1E0D83A98]();
}

uint64_t RFServiceManagerGetAnchorDataProvider()
{
  return MEMORY[0x1E0D83AA0]();
}

uint64_t RFServiceManagerGetAnchorManagementService()
{
  return MEMORY[0x1E0D83AA8]();
}

uint64_t RFServiceManagerGetAtmospherePlacementService()
{
  return MEMORY[0x1E0D83AB0]();
}

uint64_t RFServiceManagerGetDebugService()
{
  return MEMORY[0x1E0D83AB8]();
}

uint64_t RFServiceManagerGetEnvironmentProbePlacementService()
{
  return MEMORY[0x1E0D83AC0]();
}

uint64_t RFServiceManagerGetLoggingService()
{
  return MEMORY[0x1E0D83AC8]();
}

uint64_t RFServiceManagerGetMeshReconstructionService()
{
  return MEMORY[0x1E0D83AD0]();
}

uint64_t RFServiceManagerGetSyntheticEnvironmentService()
{
  return MEMORY[0x1E0D83AD8]();
}

uint64_t RFServiceManagerUpdate()
{
  return MEMORY[0x1E0D83AE0]();
}

uint64_t RFSyntheticEnvironmentServiceUpdateByDeltaTime()
{
  return MEMORY[0x1E0D83AE8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  simd_float4x4 result;

  MEMORY[0x1E0C80B38]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x1E0C80BD0](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1E0DEEA28]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x1E0C83290](a1);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

float logf(float a1)
{
  float result;

  MEMORY[0x1E0C83C00](a1);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1E0DEEAB8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1E0DEEB40]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1E0DEEB88]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1E0DEEBA8]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x1E0DEEBB8]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1E0DEEC18]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1E0DEECB8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isUniquelyReferenced()
{
  return MEMORY[0x1E0DEEDA8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1E0DEEDC8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1E0DEEE88]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1E0DEEE90]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1E0DEEF20]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x1E0DEEF60]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x1E0DEEF68]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x1E0DEEF70]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1E0DEEF80]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1E0DEEF98]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1E0DEEFA0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1E0DEEFA8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1E0DEEFC8]();
}

int uname(utsname *a1)
{
  return MEMORY[0x1E0C859A0](a1);
}

